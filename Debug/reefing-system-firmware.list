
reefing-system-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012118  0800c000  0800c000  0001c000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c98  0801e118  0801e118  0002e118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801edb0  0801edb0  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  0801edb0  0801edb0  0002edb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801edb8  0801edb8  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801edb8  0801edb8  0002edb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801edbc  0801edbc  0002edbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0801edc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008fd4  20000238  0801eff8  00030238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000920c  0801eff8  0003920c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005608c  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009269  00000000  00000000  000862f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000030d8  00000000  00000000  0008f560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d60  00000000  00000000  00092638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d07  00000000  00000000  00095398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00039c76  00000000  00000000  000b909f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5202  00000000  00000000  000f2d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a7f17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cfcc  00000000  00000000  001a7f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	20000238 	.word	0x20000238
 800c01c:	00000000 	.word	0x00000000
 800c020:	0801e100 	.word	0x0801e100

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	2000023c 	.word	0x2000023c
 800c03c:	0801e100 	.word	0x0801e100

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <memchr>:
 800c050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c054:	2a10      	cmp	r2, #16
 800c056:	db2b      	blt.n	800c0b0 <memchr+0x60>
 800c058:	f010 0f07 	tst.w	r0, #7
 800c05c:	d008      	beq.n	800c070 <memchr+0x20>
 800c05e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c062:	3a01      	subs	r2, #1
 800c064:	428b      	cmp	r3, r1
 800c066:	d02d      	beq.n	800c0c4 <memchr+0x74>
 800c068:	f010 0f07 	tst.w	r0, #7
 800c06c:	b342      	cbz	r2, 800c0c0 <memchr+0x70>
 800c06e:	d1f6      	bne.n	800c05e <memchr+0xe>
 800c070:	b4f0      	push	{r4, r5, r6, r7}
 800c072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800c076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800c07a:	f022 0407 	bic.w	r4, r2, #7
 800c07e:	f07f 0700 	mvns.w	r7, #0
 800c082:	2300      	movs	r3, #0
 800c084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800c088:	3c08      	subs	r4, #8
 800c08a:	ea85 0501 	eor.w	r5, r5, r1
 800c08e:	ea86 0601 	eor.w	r6, r6, r1
 800c092:	fa85 f547 	uadd8	r5, r5, r7
 800c096:	faa3 f587 	sel	r5, r3, r7
 800c09a:	fa86 f647 	uadd8	r6, r6, r7
 800c09e:	faa5 f687 	sel	r6, r5, r7
 800c0a2:	b98e      	cbnz	r6, 800c0c8 <memchr+0x78>
 800c0a4:	d1ee      	bne.n	800c084 <memchr+0x34>
 800c0a6:	bcf0      	pop	{r4, r5, r6, r7}
 800c0a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c0ac:	f002 0207 	and.w	r2, r2, #7
 800c0b0:	b132      	cbz	r2, 800c0c0 <memchr+0x70>
 800c0b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c0b6:	3a01      	subs	r2, #1
 800c0b8:	ea83 0301 	eor.w	r3, r3, r1
 800c0bc:	b113      	cbz	r3, 800c0c4 <memchr+0x74>
 800c0be:	d1f8      	bne.n	800c0b2 <memchr+0x62>
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	4770      	bx	lr
 800c0c4:	3801      	subs	r0, #1
 800c0c6:	4770      	bx	lr
 800c0c8:	2d00      	cmp	r5, #0
 800c0ca:	bf06      	itte	eq
 800c0cc:	4635      	moveq	r5, r6
 800c0ce:	3803      	subeq	r0, #3
 800c0d0:	3807      	subne	r0, #7
 800c0d2:	f015 0f01 	tst.w	r5, #1
 800c0d6:	d107      	bne.n	800c0e8 <memchr+0x98>
 800c0d8:	3001      	adds	r0, #1
 800c0da:	f415 7f80 	tst.w	r5, #256	; 0x100
 800c0de:	bf02      	ittt	eq
 800c0e0:	3001      	addeq	r0, #1
 800c0e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 800c0e6:	3001      	addeq	r0, #1
 800c0e8:	bcf0      	pop	{r4, r5, r6, r7}
 800c0ea:	3801      	subs	r0, #1
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop

0800c0f0 <__aeabi_uldivmod>:
 800c0f0:	b953      	cbnz	r3, 800c108 <__aeabi_uldivmod+0x18>
 800c0f2:	b94a      	cbnz	r2, 800c108 <__aeabi_uldivmod+0x18>
 800c0f4:	2900      	cmp	r1, #0
 800c0f6:	bf08      	it	eq
 800c0f8:	2800      	cmpeq	r0, #0
 800c0fa:	bf1c      	itt	ne
 800c0fc:	f04f 31ff 	movne.w	r1, #4294967295
 800c100:	f04f 30ff 	movne.w	r0, #4294967295
 800c104:	f000 b96e 	b.w	800c3e4 <__aeabi_idiv0>
 800c108:	f1ad 0c08 	sub.w	ip, sp, #8
 800c10c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c110:	f000 f806 	bl	800c120 <__udivmoddi4>
 800c114:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c11c:	b004      	add	sp, #16
 800c11e:	4770      	bx	lr

0800c120 <__udivmoddi4>:
 800c120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c124:	9d08      	ldr	r5, [sp, #32]
 800c126:	4604      	mov	r4, r0
 800c128:	468c      	mov	ip, r1
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f040 8083 	bne.w	800c236 <__udivmoddi4+0x116>
 800c130:	428a      	cmp	r2, r1
 800c132:	4617      	mov	r7, r2
 800c134:	d947      	bls.n	800c1c6 <__udivmoddi4+0xa6>
 800c136:	fab2 f282 	clz	r2, r2
 800c13a:	b142      	cbz	r2, 800c14e <__udivmoddi4+0x2e>
 800c13c:	f1c2 0020 	rsb	r0, r2, #32
 800c140:	fa24 f000 	lsr.w	r0, r4, r0
 800c144:	4091      	lsls	r1, r2
 800c146:	4097      	lsls	r7, r2
 800c148:	ea40 0c01 	orr.w	ip, r0, r1
 800c14c:	4094      	lsls	r4, r2
 800c14e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800c152:	0c23      	lsrs	r3, r4, #16
 800c154:	fbbc f6f8 	udiv	r6, ip, r8
 800c158:	fa1f fe87 	uxth.w	lr, r7
 800c15c:	fb08 c116 	mls	r1, r8, r6, ip
 800c160:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c164:	fb06 f10e 	mul.w	r1, r6, lr
 800c168:	4299      	cmp	r1, r3
 800c16a:	d909      	bls.n	800c180 <__udivmoddi4+0x60>
 800c16c:	18fb      	adds	r3, r7, r3
 800c16e:	f106 30ff 	add.w	r0, r6, #4294967295
 800c172:	f080 8119 	bcs.w	800c3a8 <__udivmoddi4+0x288>
 800c176:	4299      	cmp	r1, r3
 800c178:	f240 8116 	bls.w	800c3a8 <__udivmoddi4+0x288>
 800c17c:	3e02      	subs	r6, #2
 800c17e:	443b      	add	r3, r7
 800c180:	1a5b      	subs	r3, r3, r1
 800c182:	b2a4      	uxth	r4, r4
 800c184:	fbb3 f0f8 	udiv	r0, r3, r8
 800c188:	fb08 3310 	mls	r3, r8, r0, r3
 800c18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c190:	fb00 fe0e 	mul.w	lr, r0, lr
 800c194:	45a6      	cmp	lr, r4
 800c196:	d909      	bls.n	800c1ac <__udivmoddi4+0x8c>
 800c198:	193c      	adds	r4, r7, r4
 800c19a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c19e:	f080 8105 	bcs.w	800c3ac <__udivmoddi4+0x28c>
 800c1a2:	45a6      	cmp	lr, r4
 800c1a4:	f240 8102 	bls.w	800c3ac <__udivmoddi4+0x28c>
 800c1a8:	3802      	subs	r0, #2
 800c1aa:	443c      	add	r4, r7
 800c1ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c1b0:	eba4 040e 	sub.w	r4, r4, lr
 800c1b4:	2600      	movs	r6, #0
 800c1b6:	b11d      	cbz	r5, 800c1c0 <__udivmoddi4+0xa0>
 800c1b8:	40d4      	lsrs	r4, r2
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	e9c5 4300 	strd	r4, r3, [r5]
 800c1c0:	4631      	mov	r1, r6
 800c1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c6:	b902      	cbnz	r2, 800c1ca <__udivmoddi4+0xaa>
 800c1c8:	deff      	udf	#255	; 0xff
 800c1ca:	fab2 f282 	clz	r2, r2
 800c1ce:	2a00      	cmp	r2, #0
 800c1d0:	d150      	bne.n	800c274 <__udivmoddi4+0x154>
 800c1d2:	1bcb      	subs	r3, r1, r7
 800c1d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c1d8:	fa1f f887 	uxth.w	r8, r7
 800c1dc:	2601      	movs	r6, #1
 800c1de:	fbb3 fcfe 	udiv	ip, r3, lr
 800c1e2:	0c21      	lsrs	r1, r4, #16
 800c1e4:	fb0e 331c 	mls	r3, lr, ip, r3
 800c1e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c1ec:	fb08 f30c 	mul.w	r3, r8, ip
 800c1f0:	428b      	cmp	r3, r1
 800c1f2:	d907      	bls.n	800c204 <__udivmoddi4+0xe4>
 800c1f4:	1879      	adds	r1, r7, r1
 800c1f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c1fa:	d202      	bcs.n	800c202 <__udivmoddi4+0xe2>
 800c1fc:	428b      	cmp	r3, r1
 800c1fe:	f200 80e9 	bhi.w	800c3d4 <__udivmoddi4+0x2b4>
 800c202:	4684      	mov	ip, r0
 800c204:	1ac9      	subs	r1, r1, r3
 800c206:	b2a3      	uxth	r3, r4
 800c208:	fbb1 f0fe 	udiv	r0, r1, lr
 800c20c:	fb0e 1110 	mls	r1, lr, r0, r1
 800c210:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800c214:	fb08 f800 	mul.w	r8, r8, r0
 800c218:	45a0      	cmp	r8, r4
 800c21a:	d907      	bls.n	800c22c <__udivmoddi4+0x10c>
 800c21c:	193c      	adds	r4, r7, r4
 800c21e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c222:	d202      	bcs.n	800c22a <__udivmoddi4+0x10a>
 800c224:	45a0      	cmp	r8, r4
 800c226:	f200 80d9 	bhi.w	800c3dc <__udivmoddi4+0x2bc>
 800c22a:	4618      	mov	r0, r3
 800c22c:	eba4 0408 	sub.w	r4, r4, r8
 800c230:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800c234:	e7bf      	b.n	800c1b6 <__udivmoddi4+0x96>
 800c236:	428b      	cmp	r3, r1
 800c238:	d909      	bls.n	800c24e <__udivmoddi4+0x12e>
 800c23a:	2d00      	cmp	r5, #0
 800c23c:	f000 80b1 	beq.w	800c3a2 <__udivmoddi4+0x282>
 800c240:	2600      	movs	r6, #0
 800c242:	e9c5 0100 	strd	r0, r1, [r5]
 800c246:	4630      	mov	r0, r6
 800c248:	4631      	mov	r1, r6
 800c24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c24e:	fab3 f683 	clz	r6, r3
 800c252:	2e00      	cmp	r6, #0
 800c254:	d14a      	bne.n	800c2ec <__udivmoddi4+0x1cc>
 800c256:	428b      	cmp	r3, r1
 800c258:	d302      	bcc.n	800c260 <__udivmoddi4+0x140>
 800c25a:	4282      	cmp	r2, r0
 800c25c:	f200 80b8 	bhi.w	800c3d0 <__udivmoddi4+0x2b0>
 800c260:	1a84      	subs	r4, r0, r2
 800c262:	eb61 0103 	sbc.w	r1, r1, r3
 800c266:	2001      	movs	r0, #1
 800c268:	468c      	mov	ip, r1
 800c26a:	2d00      	cmp	r5, #0
 800c26c:	d0a8      	beq.n	800c1c0 <__udivmoddi4+0xa0>
 800c26e:	e9c5 4c00 	strd	r4, ip, [r5]
 800c272:	e7a5      	b.n	800c1c0 <__udivmoddi4+0xa0>
 800c274:	f1c2 0320 	rsb	r3, r2, #32
 800c278:	fa20 f603 	lsr.w	r6, r0, r3
 800c27c:	4097      	lsls	r7, r2
 800c27e:	fa01 f002 	lsl.w	r0, r1, r2
 800c282:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c286:	40d9      	lsrs	r1, r3
 800c288:	4330      	orrs	r0, r6
 800c28a:	0c03      	lsrs	r3, r0, #16
 800c28c:	fbb1 f6fe 	udiv	r6, r1, lr
 800c290:	fa1f f887 	uxth.w	r8, r7
 800c294:	fb0e 1116 	mls	r1, lr, r6, r1
 800c298:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c29c:	fb06 f108 	mul.w	r1, r6, r8
 800c2a0:	4299      	cmp	r1, r3
 800c2a2:	fa04 f402 	lsl.w	r4, r4, r2
 800c2a6:	d909      	bls.n	800c2bc <__udivmoddi4+0x19c>
 800c2a8:	18fb      	adds	r3, r7, r3
 800c2aa:	f106 3cff 	add.w	ip, r6, #4294967295
 800c2ae:	f080 808d 	bcs.w	800c3cc <__udivmoddi4+0x2ac>
 800c2b2:	4299      	cmp	r1, r3
 800c2b4:	f240 808a 	bls.w	800c3cc <__udivmoddi4+0x2ac>
 800c2b8:	3e02      	subs	r6, #2
 800c2ba:	443b      	add	r3, r7
 800c2bc:	1a5b      	subs	r3, r3, r1
 800c2be:	b281      	uxth	r1, r0
 800c2c0:	fbb3 f0fe 	udiv	r0, r3, lr
 800c2c4:	fb0e 3310 	mls	r3, lr, r0, r3
 800c2c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c2cc:	fb00 f308 	mul.w	r3, r0, r8
 800c2d0:	428b      	cmp	r3, r1
 800c2d2:	d907      	bls.n	800c2e4 <__udivmoddi4+0x1c4>
 800c2d4:	1879      	adds	r1, r7, r1
 800c2d6:	f100 3cff 	add.w	ip, r0, #4294967295
 800c2da:	d273      	bcs.n	800c3c4 <__udivmoddi4+0x2a4>
 800c2dc:	428b      	cmp	r3, r1
 800c2de:	d971      	bls.n	800c3c4 <__udivmoddi4+0x2a4>
 800c2e0:	3802      	subs	r0, #2
 800c2e2:	4439      	add	r1, r7
 800c2e4:	1acb      	subs	r3, r1, r3
 800c2e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800c2ea:	e778      	b.n	800c1de <__udivmoddi4+0xbe>
 800c2ec:	f1c6 0c20 	rsb	ip, r6, #32
 800c2f0:	fa03 f406 	lsl.w	r4, r3, r6
 800c2f4:	fa22 f30c 	lsr.w	r3, r2, ip
 800c2f8:	431c      	orrs	r4, r3
 800c2fa:	fa20 f70c 	lsr.w	r7, r0, ip
 800c2fe:	fa01 f306 	lsl.w	r3, r1, r6
 800c302:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800c306:	fa21 f10c 	lsr.w	r1, r1, ip
 800c30a:	431f      	orrs	r7, r3
 800c30c:	0c3b      	lsrs	r3, r7, #16
 800c30e:	fbb1 f9fe 	udiv	r9, r1, lr
 800c312:	fa1f f884 	uxth.w	r8, r4
 800c316:	fb0e 1119 	mls	r1, lr, r9, r1
 800c31a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800c31e:	fb09 fa08 	mul.w	sl, r9, r8
 800c322:	458a      	cmp	sl, r1
 800c324:	fa02 f206 	lsl.w	r2, r2, r6
 800c328:	fa00 f306 	lsl.w	r3, r0, r6
 800c32c:	d908      	bls.n	800c340 <__udivmoddi4+0x220>
 800c32e:	1861      	adds	r1, r4, r1
 800c330:	f109 30ff 	add.w	r0, r9, #4294967295
 800c334:	d248      	bcs.n	800c3c8 <__udivmoddi4+0x2a8>
 800c336:	458a      	cmp	sl, r1
 800c338:	d946      	bls.n	800c3c8 <__udivmoddi4+0x2a8>
 800c33a:	f1a9 0902 	sub.w	r9, r9, #2
 800c33e:	4421      	add	r1, r4
 800c340:	eba1 010a 	sub.w	r1, r1, sl
 800c344:	b2bf      	uxth	r7, r7
 800c346:	fbb1 f0fe 	udiv	r0, r1, lr
 800c34a:	fb0e 1110 	mls	r1, lr, r0, r1
 800c34e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c352:	fb00 f808 	mul.w	r8, r0, r8
 800c356:	45b8      	cmp	r8, r7
 800c358:	d907      	bls.n	800c36a <__udivmoddi4+0x24a>
 800c35a:	19e7      	adds	r7, r4, r7
 800c35c:	f100 31ff 	add.w	r1, r0, #4294967295
 800c360:	d22e      	bcs.n	800c3c0 <__udivmoddi4+0x2a0>
 800c362:	45b8      	cmp	r8, r7
 800c364:	d92c      	bls.n	800c3c0 <__udivmoddi4+0x2a0>
 800c366:	3802      	subs	r0, #2
 800c368:	4427      	add	r7, r4
 800c36a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c36e:	eba7 0708 	sub.w	r7, r7, r8
 800c372:	fba0 8902 	umull	r8, r9, r0, r2
 800c376:	454f      	cmp	r7, r9
 800c378:	46c6      	mov	lr, r8
 800c37a:	4649      	mov	r1, r9
 800c37c:	d31a      	bcc.n	800c3b4 <__udivmoddi4+0x294>
 800c37e:	d017      	beq.n	800c3b0 <__udivmoddi4+0x290>
 800c380:	b15d      	cbz	r5, 800c39a <__udivmoddi4+0x27a>
 800c382:	ebb3 020e 	subs.w	r2, r3, lr
 800c386:	eb67 0701 	sbc.w	r7, r7, r1
 800c38a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800c38e:	40f2      	lsrs	r2, r6
 800c390:	ea4c 0202 	orr.w	r2, ip, r2
 800c394:	40f7      	lsrs	r7, r6
 800c396:	e9c5 2700 	strd	r2, r7, [r5]
 800c39a:	2600      	movs	r6, #0
 800c39c:	4631      	mov	r1, r6
 800c39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3a2:	462e      	mov	r6, r5
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	e70b      	b.n	800c1c0 <__udivmoddi4+0xa0>
 800c3a8:	4606      	mov	r6, r0
 800c3aa:	e6e9      	b.n	800c180 <__udivmoddi4+0x60>
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	e6fd      	b.n	800c1ac <__udivmoddi4+0x8c>
 800c3b0:	4543      	cmp	r3, r8
 800c3b2:	d2e5      	bcs.n	800c380 <__udivmoddi4+0x260>
 800c3b4:	ebb8 0e02 	subs.w	lr, r8, r2
 800c3b8:	eb69 0104 	sbc.w	r1, r9, r4
 800c3bc:	3801      	subs	r0, #1
 800c3be:	e7df      	b.n	800c380 <__udivmoddi4+0x260>
 800c3c0:	4608      	mov	r0, r1
 800c3c2:	e7d2      	b.n	800c36a <__udivmoddi4+0x24a>
 800c3c4:	4660      	mov	r0, ip
 800c3c6:	e78d      	b.n	800c2e4 <__udivmoddi4+0x1c4>
 800c3c8:	4681      	mov	r9, r0
 800c3ca:	e7b9      	b.n	800c340 <__udivmoddi4+0x220>
 800c3cc:	4666      	mov	r6, ip
 800c3ce:	e775      	b.n	800c2bc <__udivmoddi4+0x19c>
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	e74a      	b.n	800c26a <__udivmoddi4+0x14a>
 800c3d4:	f1ac 0c02 	sub.w	ip, ip, #2
 800c3d8:	4439      	add	r1, r7
 800c3da:	e713      	b.n	800c204 <__udivmoddi4+0xe4>
 800c3dc:	3802      	subs	r0, #2
 800c3de:	443c      	add	r4, r7
 800c3e0:	e724      	b.n	800c22c <__udivmoddi4+0x10c>
 800c3e2:	bf00      	nop

0800c3e4 <__aeabi_idiv0>:
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop

0800c3e8 <is_empty>:
static fifo_t *cli_out;

static void cli_print_error_va(const char *cmdName, const char *format, va_list va);
static void cli_print_error(const char *cmdName, const char *format, ...) __attribute__((format(printf, 2, 3)));

bool is_empty(const char *string) { return (string == NULL || *string == '\0') ? true : false; }
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d003      	beq.n	800c3fe <is_empty+0x16>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <is_empty+0x1a>
 800c3fe:	2301      	movs	r3, #1
 800c400:	e000      	b.n	800c404 <is_empty+0x1c>
 800c402:	2300      	movs	r3, #0
 800c404:	f003 0301 	and.w	r3, r3, #1
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	4618      	mov	r0, r3
 800c40c:	370c      	adds	r7, #12
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr

0800c416 <get_min_max>:

void get_min_max(const cli_value_t *var, int *min, int *max) {
 800c416:	b480      	push	{r7}
 800c418:	b085      	sub	sp, #20
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	60f8      	str	r0, [r7, #12]
 800c41e:	60b9      	str	r1, [r7, #8]
 800c420:	607a      	str	r2, [r7, #4]
  switch (var->type & VALUE_TYPE_MASK) {
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	791b      	ldrb	r3, [r3, #4]
 800c426:	f003 0307 	and.w	r3, r3, #7
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d001      	beq.n	800c432 <get_min_max+0x1c>
 800c42e:	2b02      	cmp	r3, #2
 800c430:	d10e      	bne.n	800c450 <get_min_max+0x3a>
    case VAR_UINT8:
    case VAR_UINT16:
      *min = var->config.minmax_unsigned.min;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c438:	b29b      	uxth	r3, r3
 800c43a:	461a      	mov	r2, r3
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	601a      	str	r2, [r3, #0]
      *max = var->config.minmax_unsigned.max;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c446:	b29b      	uxth	r3, r3
 800c448:	461a      	mov	r2, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	601a      	str	r2, [r3, #0]

      break;
 800c44e:	e00e      	b.n	800c46e <get_min_max+0x58>
    default:
      *min = var->config.minmax.min;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800c456:	b21b      	sxth	r3, r3
 800c458:	461a      	mov	r2, r3
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	601a      	str	r2, [r3, #0]
      *max = var->config.minmax.max;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
 800c464:	b21b      	sxth	r3, r3
 800c466:	461a      	mov	r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	601a      	str	r2, [r3, #0]

      break;
 800c46c:	bf00      	nop
  }
}
 800c46e:	bf00      	nop
 800c470:	3714      	adds	r7, #20
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr
	...

0800c47c <cli_print>:

void cli_print(const char *str) { fifo_write_str(cli_out, str); }
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	4b04      	ldr	r3, [pc, #16]	; (800c498 <cli_print+0x1c>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	6879      	ldr	r1, [r7, #4]
 800c48a:	4618      	mov	r0, r3
 800c48c:	f004 f81a 	bl	80104c4 <fifo_write_str>
 800c490:	bf00      	nop
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	2000035c 	.word	0x2000035c

0800c49c <cli_prompt>:

static void cli_prompt(void) { cli_printf("\r\n>"); }
 800c49c:	b580      	push	{r7, lr}
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	4802      	ldr	r0, [pc, #8]	; (800c4ac <cli_prompt+0x10>)
 800c4a2:	f000 f851 	bl	800c548 <cli_printf>
 800c4a6:	bf00      	nop
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	0801e118 	.word	0x0801e118

0800c4b0 <cli_print_linefeed>:

void cli_print_linefeed(void) { cli_print("\r\n"); }
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	4802      	ldr	r0, [pc, #8]	; (800c4c0 <cli_print_linefeed+0x10>)
 800c4b6:	f7ff ffe1 	bl	800c47c <cli_print>
 800c4ba:	bf00      	nop
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	0801e11c 	.word	0x0801e11c

0800c4c4 <cli_print_line>:

void cli_print_line(const char *str) {
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  cli_print(str);
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f7ff ffd5 	bl	800c47c <cli_print>
  cli_print_linefeed();
 800c4d2:	f7ff ffed 	bl	800c4b0 <cli_print_linefeed>
}
 800c4d6:	bf00      	nop
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
	...

0800c4e0 <cli_printf_va>:

static void cli_printf_va(const char *format, va_list va) {
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  static char buffer[CLI_OUT_BUFFER_SIZE];
  vsnprintf(buffer, CLI_OUT_BUFFER_SIZE, format, va);
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c4f2:	4805      	ldr	r0, [pc, #20]	; (800c508 <cli_printf_va+0x28>)
 800c4f4:	f011 f9f6 	bl	801d8e4 <vsniprintf>
  cli_print(buffer);
 800c4f8:	4803      	ldr	r0, [pc, #12]	; (800c508 <cli_printf_va+0x28>)
 800c4fa:	f7ff ffbf 	bl	800c47c <cli_print>
}
 800c4fe:	bf00      	nop
 800c500:	3708      	adds	r7, #8
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	20000360 	.word	0x20000360

0800c50c <cli_write>:

static void cli_write(uint8_t ch) {
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	4603      	mov	r3, r0
 800c514:	71fb      	strb	r3, [r7, #7]
  while (fifo_write(cli_out, ch) == false) osDelay(3);
 800c516:	e002      	b.n	800c51e <cli_write+0x12>
 800c518:	2003      	movs	r0, #3
 800c51a:	f00c faf5 	bl	8018b08 <osDelay>
 800c51e:	4b09      	ldr	r3, [pc, #36]	; (800c544 <cli_write+0x38>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	79fa      	ldrb	r2, [r7, #7]
 800c524:	4611      	mov	r1, r2
 800c526:	4618      	mov	r0, r3
 800c528:	f003 feb1 	bl	801028e <fifo_write>
 800c52c:	4603      	mov	r3, r0
 800c52e:	f083 0301 	eor.w	r3, r3, #1
 800c532:	b2db      	uxtb	r3, r3
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1ef      	bne.n	800c518 <cli_write+0xc>
}
 800c538:	bf00      	nop
 800c53a:	bf00      	nop
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	2000035c 	.word	0x2000035c

0800c548 <cli_printf>:

void cli_printf(const char *format, ...) {
 800c548:	b40f      	push	{r0, r1, r2, r3}
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b082      	sub	sp, #8
 800c54e:	af00      	add	r7, sp, #0
  va_list va;
  va_start(va, format);
 800c550:	f107 0314 	add.w	r3, r7, #20
 800c554:	607b      	str	r3, [r7, #4]
  cli_printf_va(format, va);
 800c556:	6879      	ldr	r1, [r7, #4]
 800c558:	6938      	ldr	r0, [r7, #16]
 800c55a:	f7ff ffc1 	bl	800c4e0 <cli_printf_va>
  va_end(va);
}
 800c55e:	bf00      	nop
 800c560:	3708      	adds	r7, #8
 800c562:	46bd      	mov	sp, r7
 800c564:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c568:	b004      	add	sp, #16
 800c56a:	4770      	bx	lr

0800c56c <cli_print_linef>:

void cli_print_linef(const char *format, ...) {
 800c56c:	b40f      	push	{r0, r1, r2, r3}
 800c56e:	b580      	push	{r7, lr}
 800c570:	b082      	sub	sp, #8
 800c572:	af00      	add	r7, sp, #0
  va_list va;
  va_start(va, format);
 800c574:	f107 0314 	add.w	r3, r7, #20
 800c578:	607b      	str	r3, [r7, #4]
  cli_printf_va(format, va);
 800c57a:	6879      	ldr	r1, [r7, #4]
 800c57c:	6938      	ldr	r0, [r7, #16]
 800c57e:	f7ff ffaf 	bl	800c4e0 <cli_printf_va>
  va_end(va);
  cli_print_linefeed();
 800c582:	f7ff ff95 	bl	800c4b0 <cli_print_linefeed>
}
 800c586:	bf00      	nop
 800c588:	3708      	adds	r7, #8
 800c58a:	46bd      	mov	sp, r7
 800c58c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c590:	b004      	add	sp, #16
 800c592:	4770      	bx	lr

0800c594 <cli_print_error_va>:

static void cli_print_error_va(const char *cmdName, const char *format, va_list va) {
 800c594:	b580      	push	{r7, lr}
 800c596:	b0c4      	sub	sp, #272	; 0x110
 800c598:	af00      	add	r7, sp, #0
 800c59a:	f107 030c 	add.w	r3, r7, #12
 800c59e:	6018      	str	r0, [r3, #0]
 800c5a0:	f107 0308 	add.w	r3, r7, #8
 800c5a4:	6019      	str	r1, [r3, #0]
 800c5a6:	1d3b      	adds	r3, r7, #4
 800c5a8:	601a      	str	r2, [r3, #0]
  cli_print("ERROR IN ");
 800c5aa:	4811      	ldr	r0, [pc, #68]	; (800c5f0 <cli_print_error_va+0x5c>)
 800c5ac:	f7ff ff66 	bl	800c47c <cli_print>
  cli_print(cmdName);
 800c5b0:	f107 030c 	add.w	r3, r7, #12
 800c5b4:	6818      	ldr	r0, [r3, #0]
 800c5b6:	f7ff ff61 	bl	800c47c <cli_print>
  cli_print(": ");
 800c5ba:	480e      	ldr	r0, [pc, #56]	; (800c5f4 <cli_print_error_va+0x60>)
 800c5bc:	f7ff ff5e 	bl	800c47c <cli_print>
  char buffer[CLI_OUT_BUFFER_SIZE];
  vsnprintf(buffer, CLI_OUT_BUFFER_SIZE, format, va);
 800c5c0:	1d3b      	adds	r3, r7, #4
 800c5c2:	f107 0208 	add.w	r2, r7, #8
 800c5c6:	f107 0010 	add.w	r0, r7, #16
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	6812      	ldr	r2, [r2, #0]
 800c5ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c5d2:	f011 f987 	bl	801d8e4 <vsniprintf>
  cli_print(buffer);
 800c5d6:	f107 0310 	add.w	r3, r7, #16
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7ff ff4e 	bl	800c47c <cli_print>
  cli_print(": ");
 800c5e0:	4804      	ldr	r0, [pc, #16]	; (800c5f4 <cli_print_error_va+0x60>)
 800c5e2:	f7ff ff4b 	bl	800c47c <cli_print>
  va_end(va);
}
 800c5e6:	bf00      	nop
 800c5e8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	0801e120 	.word	0x0801e120
 800c5f4:	0801e12c 	.word	0x0801e12c

0800c5f8 <cli_print_error>:

static void cli_print_error(const char *cmdName, const char *format, ...) {
 800c5f8:	b40e      	push	{r1, r2, r3}
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b085      	sub	sp, #20
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800c602:	f107 0320 	add.w	r3, r7, #32
 800c606:	60fb      	str	r3, [r7, #12]
  cli_print_error_va(cmdName, format, va);
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	69f9      	ldr	r1, [r7, #28]
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f7ff ffc1 	bl	800c594 <cli_print_error_va>
}
 800c612:	bf00      	nop
 800c614:	3714      	adds	r7, #20
 800c616:	46bd      	mov	sp, r7
 800c618:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c61c:	b003      	add	sp, #12
 800c61e:	4770      	bx	lr

0800c620 <cli_print_error_linef>:

void cli_print_error_linef(const char *cmdName, const char *format, ...) {
 800c620:	b40e      	push	{r1, r2, r3}
 800c622:	b580      	push	{r7, lr}
 800c624:	b085      	sub	sp, #20
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800c62a:	f107 0320 	add.w	r3, r7, #32
 800c62e:	60fb      	str	r3, [r7, #12]
  cli_print_error_va(cmdName, format, va);
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	69f9      	ldr	r1, [r7, #28]
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7ff ffad 	bl	800c594 <cli_print_error_va>
  cli_print("\r\n");
 800c63a:	4805      	ldr	r0, [pc, #20]	; (800c650 <cli_print_error_linef+0x30>)
 800c63c:	f7ff ff1e 	bl	800c47c <cli_print>
}
 800c640:	bf00      	nop
 800c642:	3714      	adds	r7, #20
 800c644:	46bd      	mov	sp, r7
 800c646:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c64a:	b003      	add	sp, #12
 800c64c:	4770      	bx	lr
 800c64e:	bf00      	nop
 800c650:	0801e11c 	.word	0x0801e11c

0800c654 <skip_space>:

char *skip_space(char *buffer) {
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  while (*(buffer) == ' ') {
 800c65c:	e002      	b.n	800c664 <skip_space+0x10>
    buffer++;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	3301      	adds	r3, #1
 800c662:	607b      	str	r3, [r7, #4]
  while (*(buffer) == ' ') {
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	2b20      	cmp	r3, #32
 800c66a:	d0f8      	beq.n	800c65e <skip_space+0xa>
  }
  return buffer;
 800c66c:	687b      	ldr	r3, [r7, #4]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	370c      	adds	r7, #12
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr
	...

0800c67c <check_command>:

static char *check_command(char *cmdline, const char *command) {
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
  if (!strncasecmp(cmdline, command, strlen(command))  // command names match
 800c686:	6838      	ldr	r0, [r7, #0]
 800c688:	f7ff fcda 	bl	800c040 <strlen>
 800c68c:	4603      	mov	r3, r0
 800c68e:	461a      	mov	r2, r3
 800c690:	6839      	ldr	r1, [r7, #0]
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f010 ff88 	bl	801d5a8 <strncasecmp>
 800c698:	4603      	mov	r3, r0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d123      	bne.n	800c6e6 <check_command+0x6a>
      && (isspace((unsigned)cmdline[strlen(command)]) || cmdline[strlen(command)] == 0)) {
 800c69e:	6838      	ldr	r0, [r7, #0]
 800c6a0:	f7ff fcce 	bl	800c040 <strlen>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	4a10      	ldr	r2, [pc, #64]	; (800c6f0 <check_command+0x74>)
 800c6b0:	4413      	add	r3, r2
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	f003 0308 	and.w	r3, r3, #8
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d108      	bne.n	800c6ce <check_command+0x52>
 800c6bc:	6838      	ldr	r0, [r7, #0]
 800c6be:	f7ff fcbf 	bl	800c040 <strlen>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d10b      	bne.n	800c6e6 <check_command+0x6a>
    return skip_space(cmdline + strlen(command) + 1);
 800c6ce:	6838      	ldr	r0, [r7, #0]
 800c6d0:	f7ff fcb6 	bl	800c040 <strlen>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	4413      	add	r3, r2
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7ff ffb9 	bl	800c654 <skip_space>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	e000      	b.n	800c6e8 <check_command+0x6c>
  } else {
    return NULL;
 800c6e6:	2300      	movs	r3, #0
  }
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3708      	adds	r7, #8
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	0801ec7b 	.word	0x0801ec7b

0800c6f4 <process_character>:

static void process_character(const char c) {
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b086      	sub	sp, #24
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	71fb      	strb	r3, [r7, #7]
  if (buffer_index && (c == '\n' || c == '\r')) {
 800c6fe:	4b4b      	ldr	r3, [pc, #300]	; (800c82c <process_character+0x138>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d070      	beq.n	800c7e8 <process_character+0xf4>
 800c706:	79fb      	ldrb	r3, [r7, #7]
 800c708:	2b0a      	cmp	r3, #10
 800c70a:	d002      	beq.n	800c712 <process_character+0x1e>
 800c70c:	79fb      	ldrb	r3, [r7, #7]
 800c70e:	2b0d      	cmp	r3, #13
 800c710:	d16a      	bne.n	800c7e8 <process_character+0xf4>
    // enter pressed
    cli_print_linefeed();
 800c712:	f7ff fecd 	bl	800c4b0 <cli_print_linefeed>

    // Strip comment starting with # from line
    char *p = cli_buffer;
 800c716:	4b46      	ldr	r3, [pc, #280]	; (800c830 <process_character+0x13c>)
 800c718:	60fb      	str	r3, [r7, #12]
    p = strchr(p, '#');
 800c71a:	2123      	movs	r1, #35	; 0x23
 800c71c:	68f8      	ldr	r0, [r7, #12]
 800c71e:	f010 ff35 	bl	801d58c <strchr>
 800c722:	60f8      	str	r0, [r7, #12]
    if (NULL != p) {
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00b      	beq.n	800c742 <process_character+0x4e>
      buffer_index = (uint32_t)(p - cli_buffer);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	4a40      	ldr	r2, [pc, #256]	; (800c830 <process_character+0x13c>)
 800c72e:	1a9b      	subs	r3, r3, r2
 800c730:	461a      	mov	r2, r3
 800c732:	4b3e      	ldr	r3, [pc, #248]	; (800c82c <process_character+0x138>)
 800c734:	601a      	str	r2, [r3, #0]
    }
    // Strip trailing whitespace
    while (buffer_index > 0 && cli_buffer[buffer_index - 1] == ' ') {
 800c736:	e004      	b.n	800c742 <process_character+0x4e>
      buffer_index--;
 800c738:	4b3c      	ldr	r3, [pc, #240]	; (800c82c <process_character+0x138>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	3b01      	subs	r3, #1
 800c73e:	4a3b      	ldr	r2, [pc, #236]	; (800c82c <process_character+0x138>)
 800c740:	6013      	str	r3, [r2, #0]
    while (buffer_index > 0 && cli_buffer[buffer_index - 1] == ' ') {
 800c742:	4b3a      	ldr	r3, [pc, #232]	; (800c82c <process_character+0x138>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d006      	beq.n	800c758 <process_character+0x64>
 800c74a:	4b38      	ldr	r3, [pc, #224]	; (800c82c <process_character+0x138>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	3b01      	subs	r3, #1
 800c750:	4a37      	ldr	r2, [pc, #220]	; (800c830 <process_character+0x13c>)
 800c752:	5cd3      	ldrb	r3, [r2, r3]
 800c754:	2b20      	cmp	r3, #32
 800c756:	d0ef      	beq.n	800c738 <process_character+0x44>
    }

    // Process non-empty lines
    if (buffer_index > 0) {
 800c758:	4b34      	ldr	r3, [pc, #208]	; (800c82c <process_character+0x138>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d036      	beq.n	800c7ce <process_character+0xda>
      cli_buffer[buffer_index] = 0;  // null terminate
 800c760:	4b32      	ldr	r3, [pc, #200]	; (800c82c <process_character+0x138>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a32      	ldr	r2, [pc, #200]	; (800c830 <process_character+0x13c>)
 800c766:	2100      	movs	r1, #0
 800c768:	54d1      	strb	r1, [r2, r3]

      const clicmd_t *cmd;
      char *options = NULL;
 800c76a:	2300      	movs	r3, #0
 800c76c:	613b      	str	r3, [r7, #16]
      for (cmd = cmd_table; cmd < cmd_table + NUM_CLI_COMMANDS; cmd++) {
 800c76e:	4b31      	ldr	r3, [pc, #196]	; (800c834 <process_character+0x140>)
 800c770:	617b      	str	r3, [r7, #20]
 800c772:	e00c      	b.n	800c78e <process_character+0x9a>
        options = check_command(cli_buffer, cmd->name);
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4619      	mov	r1, r3
 800c77a:	482d      	ldr	r0, [pc, #180]	; (800c830 <process_character+0x13c>)
 800c77c:	f7ff ff7e 	bl	800c67c <check_command>
 800c780:	6138      	str	r0, [r7, #16]
        if (options) break;
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d10b      	bne.n	800c7a0 <process_character+0xac>
      for (cmd = cmd_table; cmd < cmd_table + NUM_CLI_COMMANDS; cmd++) {
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	3310      	adds	r3, #16
 800c78c:	617b      	str	r3, [r7, #20]
 800c78e:	4b2a      	ldr	r3, [pc, #168]	; (800c838 <process_character+0x144>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	011b      	lsls	r3, r3, #4
 800c794:	4a27      	ldr	r2, [pc, #156]	; (800c834 <process_character+0x140>)
 800c796:	4413      	add	r3, r2
 800c798:	697a      	ldr	r2, [r7, #20]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d3ea      	bcc.n	800c774 <process_character+0x80>
 800c79e:	e000      	b.n	800c7a2 <process_character+0xae>
        if (options) break;
 800c7a0:	bf00      	nop
      }
      if (cmd < cmd_table + NUM_CLI_COMMANDS) {
 800c7a2:	4b25      	ldr	r3, [pc, #148]	; (800c838 <process_character+0x144>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	011b      	lsls	r3, r3, #4
 800c7a8:	4a22      	ldr	r2, [pc, #136]	; (800c834 <process_character+0x140>)
 800c7aa:	4413      	add	r3, r2
 800c7ac:	697a      	ldr	r2, [r7, #20]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d207      	bcs.n	800c7c2 <process_character+0xce>
        cmd->cli_command(cmd->name, options);
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	697a      	ldr	r2, [r7, #20]
 800c7b8:	6812      	ldr	r2, [r2, #0]
 800c7ba:	6939      	ldr	r1, [r7, #16]
 800c7bc:	4610      	mov	r0, r2
 800c7be:	4798      	blx	r3
 800c7c0:	e002      	b.n	800c7c8 <process_character+0xd4>
      } else {
        cli_print_line("UNKNOWN COMMAND, TRY 'HELP'");
 800c7c2:	481e      	ldr	r0, [pc, #120]	; (800c83c <process_character+0x148>)
 800c7c4:	f7ff fe7e 	bl	800c4c4 <cli_print_line>
      }
      buffer_index = 0;
 800c7c8:	4b18      	ldr	r3, [pc, #96]	; (800c82c <process_character+0x138>)
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	601a      	str	r2, [r3, #0]
    }
    strncpy(old_cli_buffer, cli_buffer, sizeof(cli_buffer));
 800c7ce:	2280      	movs	r2, #128	; 0x80
 800c7d0:	4917      	ldr	r1, [pc, #92]	; (800c830 <process_character+0x13c>)
 800c7d2:	481b      	ldr	r0, [pc, #108]	; (800c840 <process_character+0x14c>)
 800c7d4:	f010 ff1c 	bl	801d610 <strncpy>
    memset(cli_buffer, 0, sizeof(cli_buffer));
 800c7d8:	2280      	movs	r2, #128	; 0x80
 800c7da:	2100      	movs	r1, #0
 800c7dc:	4814      	ldr	r0, [pc, #80]	; (800c830 <process_character+0x13c>)
 800c7de:	f010 fe7d 	bl	801d4dc <memset>
    cli_prompt();
 800c7e2:	f7ff fe5b 	bl	800c49c <cli_prompt>
  if (buffer_index && (c == '\n' || c == '\r')) {
 800c7e6:	e01e      	b.n	800c826 <process_character+0x132>

    // 'exit' will reset this flag, so we don't need to print prompt again

  } else if (buffer_index < sizeof(cli_buffer) && c >= 32 && c <= 126) {
 800c7e8:	4b10      	ldr	r3, [pc, #64]	; (800c82c <process_character+0x138>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b7f      	cmp	r3, #127	; 0x7f
 800c7ee:	d81a      	bhi.n	800c826 <process_character+0x132>
 800c7f0:	79fb      	ldrb	r3, [r7, #7]
 800c7f2:	2b1f      	cmp	r3, #31
 800c7f4:	d917      	bls.n	800c826 <process_character+0x132>
 800c7f6:	79fb      	ldrb	r3, [r7, #7]
 800c7f8:	2b7e      	cmp	r3, #126	; 0x7e
 800c7fa:	d814      	bhi.n	800c826 <process_character+0x132>
    if (!buffer_index && c == ' ') return;  // Ignore leading spaces
 800c7fc:	4b0b      	ldr	r3, [pc, #44]	; (800c82c <process_character+0x138>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d102      	bne.n	800c80a <process_character+0x116>
 800c804:	79fb      	ldrb	r3, [r7, #7]
 800c806:	2b20      	cmp	r3, #32
 800c808:	d00c      	beq.n	800c824 <process_character+0x130>
    cli_buffer[buffer_index++] = c;
 800c80a:	4b08      	ldr	r3, [pc, #32]	; (800c82c <process_character+0x138>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	1c5a      	adds	r2, r3, #1
 800c810:	4906      	ldr	r1, [pc, #24]	; (800c82c <process_character+0x138>)
 800c812:	600a      	str	r2, [r1, #0]
 800c814:	4906      	ldr	r1, [pc, #24]	; (800c830 <process_character+0x13c>)
 800c816:	79fa      	ldrb	r2, [r7, #7]
 800c818:	54ca      	strb	r2, [r1, r3]
    cli_write(c);
 800c81a:	79fb      	ldrb	r3, [r7, #7]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7ff fe75 	bl	800c50c <cli_write>
 800c822:	e000      	b.n	800c826 <process_character+0x132>
    if (!buffer_index && c == ' ') return;  // Ignore leading spaces
 800c824:	bf00      	nop
  }
}
 800c826:	3718      	adds	r7, #24
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	20000254 	.word	0x20000254
 800c830:	20000258 	.word	0x20000258
 800c834:	0801e940 	.word	0x0801e940
 800c838:	0801e9e0 	.word	0x0801e9e0
 800c83c:	0801e130 	.word	0x0801e130
 800c840:	200002d8 	.word	0x200002d8

0800c844 <process_character_interactive>:

static void process_character_interactive(const char c) {
 800c844:	b580      	push	{r7, lr}
 800c846:	b088      	sub	sp, #32
 800c848:	af00      	add	r7, sp, #0
 800c84a:	4603      	mov	r3, r0
 800c84c:	71fb      	strb	r3, [r7, #7]
  // We ignore a few characters, this is only used for the up arrow
  static uint16_t ignore = 0;
  if (ignore) {
 800c84e:	4b89      	ldr	r3, [pc, #548]	; (800ca74 <process_character_interactive+0x230>)
 800c850:	881b      	ldrh	r3, [r3, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d006      	beq.n	800c864 <process_character_interactive+0x20>
    ignore--;
 800c856:	4b87      	ldr	r3, [pc, #540]	; (800ca74 <process_character_interactive+0x230>)
 800c858:	881b      	ldrh	r3, [r3, #0]
 800c85a:	3b01      	subs	r3, #1
 800c85c:	b29a      	uxth	r2, r3
 800c85e:	4b85      	ldr	r3, [pc, #532]	; (800ca74 <process_character_interactive+0x230>)
 800c860:	801a      	strh	r2, [r3, #0]
    return;
 800c862:	e104      	b.n	800ca6e <process_character_interactive+0x22a>
  }
  if (c == '\t' || c == '?') {
 800c864:	79fb      	ldrb	r3, [r7, #7]
 800c866:	2b09      	cmp	r3, #9
 800c868:	d003      	beq.n	800c872 <process_character_interactive+0x2e>
 800c86a:	79fb      	ldrb	r3, [r7, #7]
 800c86c:	2b3f      	cmp	r3, #63	; 0x3f
 800c86e:	f040 809b 	bne.w	800c9a8 <process_character_interactive+0x164>
    // do tab completion
    const clicmd_t *cmd, *pstart = NULL, *pend = NULL;
 800c872:	2300      	movs	r3, #0
 800c874:	61bb      	str	r3, [r7, #24]
 800c876:	2300      	movs	r3, #0
 800c878:	617b      	str	r3, [r7, #20]
    uint32_t i = buffer_index;
 800c87a:	4b7f      	ldr	r3, [pc, #508]	; (800ca78 <process_character_interactive+0x234>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	613b      	str	r3, [r7, #16]
    for (cmd = cmd_table; cmd < cmd_table + NUM_CLI_COMMANDS; cmd++) {
 800c880:	4b7e      	ldr	r3, [pc, #504]	; (800ca7c <process_character_interactive+0x238>)
 800c882:	61fb      	str	r3, [r7, #28]
 800c884:	e01a      	b.n	800c8bc <process_character_interactive+0x78>
      if (buffer_index && (strncasecmp(cli_buffer, cmd->name, buffer_index) != 0)) {
 800c886:	4b7c      	ldr	r3, [pc, #496]	; (800ca78 <process_character_interactive+0x234>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00a      	beq.n	800c8a4 <process_character_interactive+0x60>
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4a79      	ldr	r2, [pc, #484]	; (800ca78 <process_character_interactive+0x234>)
 800c894:	6812      	ldr	r2, [r2, #0]
 800c896:	4619      	mov	r1, r3
 800c898:	4879      	ldr	r0, [pc, #484]	; (800ca80 <process_character_interactive+0x23c>)
 800c89a:	f010 fe85 	bl	801d5a8 <strncasecmp>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d107      	bne.n	800c8b4 <process_character_interactive+0x70>
        continue;
      }
      if (!pstart) {
 800c8a4:	69bb      	ldr	r3, [r7, #24]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d101      	bne.n	800c8ae <process_character_interactive+0x6a>
        pstart = cmd;
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	61bb      	str	r3, [r7, #24]
      }
      pend = cmd;
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	617b      	str	r3, [r7, #20]
 800c8b2:	e000      	b.n	800c8b6 <process_character_interactive+0x72>
        continue;
 800c8b4:	bf00      	nop
    for (cmd = cmd_table; cmd < cmd_table + NUM_CLI_COMMANDS; cmd++) {
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	3310      	adds	r3, #16
 800c8ba:	61fb      	str	r3, [r7, #28]
 800c8bc:	4b71      	ldr	r3, [pc, #452]	; (800ca84 <process_character_interactive+0x240>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	011b      	lsls	r3, r3, #4
 800c8c2:	4a6e      	ldr	r2, [pc, #440]	; (800ca7c <process_character_interactive+0x238>)
 800c8c4:	4413      	add	r3, r2
 800c8c6:	69fa      	ldr	r2, [r7, #28]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d3dc      	bcc.n	800c886 <process_character_interactive+0x42>
    }
    if (pstart) { /* Buffer matches one or more commands */
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d038      	beq.n	800c944 <process_character_interactive+0x100>
      for (;; buffer_index++) {
        if (pstart->name[buffer_index] != pend->name[buffer_index]) break;
 800c8d2:	69bb      	ldr	r3, [r7, #24]
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	4b68      	ldr	r3, [pc, #416]	; (800ca78 <process_character_interactive+0x234>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4413      	add	r3, r2
 800c8dc:	781a      	ldrb	r2, [r3, #0]
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	6819      	ldr	r1, [r3, #0]
 800c8e2:	4b65      	ldr	r3, [pc, #404]	; (800ca78 <process_character_interactive+0x234>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	440b      	add	r3, r1
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d129      	bne.n	800c942 <process_character_interactive+0xfe>
        if (!pstart->name[buffer_index] && buffer_index < sizeof(cli_buffer) - 2) {
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	4b61      	ldr	r3, [pc, #388]	; (800ca78 <process_character_interactive+0x234>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4413      	add	r3, r2
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d111      	bne.n	800c922 <process_character_interactive+0xde>
 800c8fe:	4b5e      	ldr	r3, [pc, #376]	; (800ca78 <process_character_interactive+0x234>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	2b7d      	cmp	r3, #125	; 0x7d
 800c904:	d80d      	bhi.n	800c922 <process_character_interactive+0xde>
          /* Unambiguous -- append a space */
          cli_buffer[buffer_index++] = ' ';
 800c906:	4b5c      	ldr	r3, [pc, #368]	; (800ca78 <process_character_interactive+0x234>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	1c5a      	adds	r2, r3, #1
 800c90c:	495a      	ldr	r1, [pc, #360]	; (800ca78 <process_character_interactive+0x234>)
 800c90e:	600a      	str	r2, [r1, #0]
 800c910:	4a5b      	ldr	r2, [pc, #364]	; (800ca80 <process_character_interactive+0x23c>)
 800c912:	2120      	movs	r1, #32
 800c914:	54d1      	strb	r1, [r2, r3]
          cli_buffer[buffer_index] = '\0';
 800c916:	4b58      	ldr	r3, [pc, #352]	; (800ca78 <process_character_interactive+0x234>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4a59      	ldr	r2, [pc, #356]	; (800ca80 <process_character_interactive+0x23c>)
 800c91c:	2100      	movs	r1, #0
 800c91e:	54d1      	strb	r1, [r2, r3]
          break;
 800c920:	e010      	b.n	800c944 <process_character_interactive+0x100>
        }
        cli_buffer[buffer_index] = pstart->name[buffer_index];
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	4b54      	ldr	r3, [pc, #336]	; (800ca78 <process_character_interactive+0x234>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	441a      	add	r2, r3
 800c92c:	4b52      	ldr	r3, [pc, #328]	; (800ca78 <process_character_interactive+0x234>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	7811      	ldrb	r1, [r2, #0]
 800c932:	4a53      	ldr	r2, [pc, #332]	; (800ca80 <process_character_interactive+0x23c>)
 800c934:	54d1      	strb	r1, [r2, r3]
      for (;; buffer_index++) {
 800c936:	4b50      	ldr	r3, [pc, #320]	; (800ca78 <process_character_interactive+0x234>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	3301      	adds	r3, #1
 800c93c:	4a4e      	ldr	r2, [pc, #312]	; (800ca78 <process_character_interactive+0x234>)
 800c93e:	6013      	str	r3, [r2, #0]
        if (pstart->name[buffer_index] != pend->name[buffer_index]) break;
 800c940:	e7c7      	b.n	800c8d2 <process_character_interactive+0x8e>
 800c942:	bf00      	nop
      }
    }
    if (!buffer_index || pstart != pend) {
 800c944:	4b4c      	ldr	r3, [pc, #304]	; (800ca78 <process_character_interactive+0x234>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d003      	beq.n	800c954 <process_character_interactive+0x110>
 800c94c:	69ba      	ldr	r2, [r7, #24]
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	429a      	cmp	r2, r3
 800c952:	d023      	beq.n	800c99c <process_character_interactive+0x158>
      /* Print list of ambiguous matches */
      cli_print("\r\n\033[K");
 800c954:	484c      	ldr	r0, [pc, #304]	; (800ca88 <process_character_interactive+0x244>)
 800c956:	f7ff fd91 	bl	800c47c <cli_print>
      for (cmd = pstart; cmd <= pend; cmd++) {
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	61fb      	str	r3, [r7, #28]
 800c95e:	e00a      	b.n	800c976 <process_character_interactive+0x132>
        cli_print(cmd->name);
 800c960:	69fb      	ldr	r3, [r7, #28]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4618      	mov	r0, r3
 800c966:	f7ff fd89 	bl	800c47c <cli_print>
        cli_write('\t');
 800c96a:	2009      	movs	r0, #9
 800c96c:	f7ff fdce 	bl	800c50c <cli_write>
      for (cmd = pstart; cmd <= pend; cmd++) {
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	3310      	adds	r3, #16
 800c974:	61fb      	str	r3, [r7, #28]
 800c976:	69fa      	ldr	r2, [r7, #28]
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d9f0      	bls.n	800c960 <process_character_interactive+0x11c>
      }
      cli_prompt();
 800c97e:	f7ff fd8d 	bl	800c49c <cli_prompt>
      i = 0; /* Redraw prompt */
 800c982:	2300      	movs	r3, #0
 800c984:	613b      	str	r3, [r7, #16]
    }
    for (; i < buffer_index; i++) cli_write(cli_buffer[i]);
 800c986:	e009      	b.n	800c99c <process_character_interactive+0x158>
 800c988:	4a3d      	ldr	r2, [pc, #244]	; (800ca80 <process_character_interactive+0x23c>)
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	4413      	add	r3, r2
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	4618      	mov	r0, r3
 800c992:	f7ff fdbb 	bl	800c50c <cli_write>
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	3301      	adds	r3, #1
 800c99a:	613b      	str	r3, [r7, #16]
 800c99c:	4b36      	ldr	r3, [pc, #216]	; (800ca78 <process_character_interactive+0x234>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	693a      	ldr	r2, [r7, #16]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d3f0      	bcc.n	800c988 <process_character_interactive+0x144>
  if (c == '\t' || c == '?') {
 800c9a6:	e062      	b.n	800ca6e <process_character_interactive+0x22a>
  } else if (c == 4) {
 800c9a8:	79fb      	ldrb	r3, [r7, #7]
 800c9aa:	2b04      	cmp	r3, #4
 800c9ac:	d105      	bne.n	800c9ba <process_character_interactive+0x176>
    // CTRL-D - clear screen
    cli_print("\033[2J\033[1;1H");
 800c9ae:	4837      	ldr	r0, [pc, #220]	; (800ca8c <process_character_interactive+0x248>)
 800c9b0:	f7ff fd64 	bl	800c47c <cli_print>
    cli_prompt();
 800c9b4:	f7ff fd72 	bl	800c49c <cli_prompt>
 800c9b8:	e059      	b.n	800ca6e <process_character_interactive+0x22a>
  } else if (c == 12) {  // CTRL-L - toggle logging
 800c9ba:	79fb      	ldrb	r3, [r7, #7]
 800c9bc:	2b0c      	cmp	r3, #12
 800c9be:	d10c      	bne.n	800c9da <process_character_interactive+0x196>
    if (log_is_enabled()) {
 800c9c0:	f003 fdd0 	bl	8010564 <log_is_enabled>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d004      	beq.n	800c9d4 <process_character_interactive+0x190>
      log_disable();
 800c9ca:	f003 fdbf 	bl	801054c <log_disable>
      cli_prompt();
 800c9ce:	f7ff fd65 	bl	800c49c <cli_prompt>
 800c9d2:	e04c      	b.n	800ca6e <process_character_interactive+0x22a>
    } else {
      log_enable();
 800c9d4:	f003 fdae 	bl	8010534 <log_enable>
 800c9d8:	e049      	b.n	800ca6e <process_character_interactive+0x22a>
    }
  } else if (c == '\b') {
 800c9da:	79fb      	ldrb	r3, [r7, #7]
 800c9dc:	2b08      	cmp	r3, #8
 800c9de:	d111      	bne.n	800ca04 <process_character_interactive+0x1c0>
    // backspace
    if (buffer_index) {
 800c9e0:	4b25      	ldr	r3, [pc, #148]	; (800ca78 <process_character_interactive+0x234>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d042      	beq.n	800ca6e <process_character_interactive+0x22a>
      cli_buffer[--buffer_index] = 0;
 800c9e8:	4b23      	ldr	r3, [pc, #140]	; (800ca78 <process_character_interactive+0x234>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	3b01      	subs	r3, #1
 800c9ee:	4a22      	ldr	r2, [pc, #136]	; (800ca78 <process_character_interactive+0x234>)
 800c9f0:	6013      	str	r3, [r2, #0]
 800c9f2:	4b21      	ldr	r3, [pc, #132]	; (800ca78 <process_character_interactive+0x234>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a22      	ldr	r2, [pc, #136]	; (800ca80 <process_character_interactive+0x23c>)
 800c9f8:	2100      	movs	r1, #0
 800c9fa:	54d1      	strb	r1, [r2, r3]
      cli_print("\010 \010");
 800c9fc:	4824      	ldr	r0, [pc, #144]	; (800ca90 <process_character_interactive+0x24c>)
 800c9fe:	f7ff fd3d 	bl	800c47c <cli_print>
 800ca02:	e034      	b.n	800ca6e <process_character_interactive+0x22a>
    }
  } else if (c == 27) {  // ESC character is called from the up arrow, we only look at the first of 3 characters
 800ca04:	79fb      	ldrb	r3, [r7, #7]
 800ca06:	2b1b      	cmp	r3, #27
 800ca08:	d12d      	bne.n	800ca66 <process_character_interactive+0x222>
    // up arrow
    while (buffer_index) {
 800ca0a:	e00c      	b.n	800ca26 <process_character_interactive+0x1e2>
      cli_buffer[--buffer_index] = 0;
 800ca0c:	4b1a      	ldr	r3, [pc, #104]	; (800ca78 <process_character_interactive+0x234>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	3b01      	subs	r3, #1
 800ca12:	4a19      	ldr	r2, [pc, #100]	; (800ca78 <process_character_interactive+0x234>)
 800ca14:	6013      	str	r3, [r2, #0]
 800ca16:	4b18      	ldr	r3, [pc, #96]	; (800ca78 <process_character_interactive+0x234>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a19      	ldr	r2, [pc, #100]	; (800ca80 <process_character_interactive+0x23c>)
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	54d1      	strb	r1, [r2, r3]
      cli_print("\010 \010");
 800ca20:	481b      	ldr	r0, [pc, #108]	; (800ca90 <process_character_interactive+0x24c>)
 800ca22:	f7ff fd2b 	bl	800c47c <cli_print>
    while (buffer_index) {
 800ca26:	4b14      	ldr	r3, [pc, #80]	; (800ca78 <process_character_interactive+0x234>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d1ee      	bne.n	800ca0c <process_character_interactive+0x1c8>
    }
    for (int i = 0; i < sizeof(old_cli_buffer); i++) {
 800ca2e:	2300      	movs	r3, #0
 800ca30:	60fb      	str	r3, [r7, #12]
 800ca32:	e00f      	b.n	800ca54 <process_character_interactive+0x210>
      if (old_cli_buffer[i] == 0) break;
 800ca34:	4a17      	ldr	r2, [pc, #92]	; (800ca94 <process_character_interactive+0x250>)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	4413      	add	r3, r2
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00d      	beq.n	800ca5c <process_character_interactive+0x218>
      process_character(old_cli_buffer[i]);
 800ca40:	4a14      	ldr	r2, [pc, #80]	; (800ca94 <process_character_interactive+0x250>)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	4413      	add	r3, r2
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7ff fe53 	bl	800c6f4 <process_character>
    for (int i = 0; i < sizeof(old_cli_buffer); i++) {
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	3301      	adds	r3, #1
 800ca52:	60fb      	str	r3, [r7, #12]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2b7f      	cmp	r3, #127	; 0x7f
 800ca58:	d9ec      	bls.n	800ca34 <process_character_interactive+0x1f0>
 800ca5a:	e000      	b.n	800ca5e <process_character_interactive+0x21a>
      if (old_cli_buffer[i] == 0) break;
 800ca5c:	bf00      	nop
    }
    // Ignore the following characters
    ignore = 2;
 800ca5e:	4b05      	ldr	r3, [pc, #20]	; (800ca74 <process_character_interactive+0x230>)
 800ca60:	2202      	movs	r2, #2
 800ca62:	801a      	strh	r2, [r3, #0]
 800ca64:	e003      	b.n	800ca6e <process_character_interactive+0x22a>
  } else {
    process_character(c);
 800ca66:	79fb      	ldrb	r3, [r7, #7]
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7ff fe43 	bl	800c6f4 <process_character>
  }
}
 800ca6e:	3720      	adds	r7, #32
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	20000460 	.word	0x20000460
 800ca78:	20000254 	.word	0x20000254
 800ca7c:	0801e940 	.word	0x0801e940
 800ca80:	20000258 	.word	0x20000258
 800ca84:	0801e9e0 	.word	0x0801e9e0
 800ca88:	0801e14c 	.word	0x0801e14c
 800ca8c:	0801e154 	.word	0x0801e154
 800ca90:	0801e160 	.word	0x0801e160
 800ca94:	200002d8 	.word	0x200002d8

0800ca98 <cli_process>:

void cli_process(void) {
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	af00      	add	r7, sp, #0
  while (fifo_get_length(cli_in) > 0) {
 800ca9c:	e008      	b.n	800cab0 <cli_process+0x18>
    process_character_interactive(fifo_read(cli_in));
 800ca9e:	4b0a      	ldr	r3, [pc, #40]	; (800cac8 <cli_process+0x30>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4618      	mov	r0, r3
 800caa4:	f003 fbb7 	bl	8010216 <fifo_read>
 800caa8:	4603      	mov	r3, r0
 800caaa:	4618      	mov	r0, r3
 800caac:	f7ff feca 	bl	800c844 <process_character_interactive>
  while (fifo_get_length(cli_in) > 0) {
 800cab0:	4b05      	ldr	r3, [pc, #20]	; (800cac8 <cli_process+0x30>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4618      	mov	r0, r3
 800cab6:	f003 fba2 	bl	80101fe <fifo_get_length>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d1ee      	bne.n	800ca9e <cli_process+0x6>
  }
}
 800cac0:	bf00      	nop
 800cac2:	bf00      	nop
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	20000358 	.word	0x20000358

0800cacc <cli_enter>:

void cli_enter(fifo_t *in, fifo_t *out) {
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  cli_in = in;
 800cad6:	4a06      	ldr	r2, [pc, #24]	; (800caf0 <cli_enter+0x24>)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6013      	str	r3, [r2, #0]
  cli_out = out;
 800cadc:	4a05      	ldr	r2, [pc, #20]	; (800caf4 <cli_enter+0x28>)
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	6013      	str	r3, [r2, #0]
  cli_prompt();
 800cae2:	f7ff fcdb 	bl	800c49c <cli_prompt>
}
 800cae6:	bf00      	nop
 800cae8:	3708      	adds	r7, #8
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	20000358 	.word	0x20000358
 800caf4:	2000035c 	.word	0x2000035c

0800caf8 <print_value_pointer>:

static void print_value_pointer(const char *cmdName, const cli_value_t *var, const void *valuePointer, bool full) {
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b08a      	sub	sp, #40	; 0x28
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	607a      	str	r2, [r7, #4]
 800cb04:	70fb      	strb	r3, [r7, #3]
  if ((var->type & VALUE_MODE_MASK) == MODE_ARRAY) {
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	791b      	ldrb	r3, [r3, #4]
 800cb0a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800cb0e:	2b40      	cmp	r3, #64	; 0x40
 800cb10:	d159      	bne.n	800cbc6 <print_value_pointer+0xce>
    for (int i = 0; i < var->config.array.length; i++) {
 800cb12:	2300      	movs	r3, #0
 800cb14:	627b      	str	r3, [r7, #36]	; 0x24
 800cb16:	e04f      	b.n	800cbb8 <print_value_pointer+0xc0>
      switch (var->type & VALUE_TYPE_MASK) {
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	791b      	ldrb	r3, [r3, #4]
 800cb1c:	f003 0307 	and.w	r3, r3, #7
 800cb20:	3b01      	subs	r3, #1
 800cb22:	2b03      	cmp	r3, #3
 800cb24:	d80a      	bhi.n	800cb3c <print_value_pointer+0x44>
 800cb26:	a201      	add	r2, pc, #4	; (adr r2, 800cb2c <print_value_pointer+0x34>)
 800cb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb2c:	0800cb4f 	.word	0x0800cb4f
 800cb30:	0800cb63 	.word	0x0800cb63
 800cb34:	0800cb77 	.word	0x0800cb77
 800cb38:	0800cb8d 	.word	0x0800cb8d
        default:
        case VAR_UINT8:
          // uint8_t array
          cli_printf("%d", ((uint8_t *)valuePointer)[i]);
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	4413      	add	r3, r2
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	4619      	mov	r1, r3
 800cb46:	4884      	ldr	r0, [pc, #528]	; (800cd58 <print_value_pointer+0x260>)
 800cb48:	f7ff fcfe 	bl	800c548 <cli_printf>
          break;
 800cb4c:	e028      	b.n	800cba0 <print_value_pointer+0xa8>

        case VAR_INT8:
          // int8_t array
          cli_printf("%d", ((int8_t *)valuePointer)[i]);
 800cb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	4413      	add	r3, r2
 800cb54:	f993 3000 	ldrsb.w	r3, [r3]
 800cb58:	4619      	mov	r1, r3
 800cb5a:	487f      	ldr	r0, [pc, #508]	; (800cd58 <print_value_pointer+0x260>)
 800cb5c:	f7ff fcf4 	bl	800c548 <cli_printf>
          break;
 800cb60:	e01e      	b.n	800cba0 <print_value_pointer+0xa8>

        case VAR_UINT16:
          // uin16_t array
          cli_printf("%d", ((uint16_t *)valuePointer)[i]);
 800cb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb64:	005b      	lsls	r3, r3, #1
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	4413      	add	r3, r2
 800cb6a:	881b      	ldrh	r3, [r3, #0]
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	487a      	ldr	r0, [pc, #488]	; (800cd58 <print_value_pointer+0x260>)
 800cb70:	f7ff fcea 	bl	800c548 <cli_printf>
          break;
 800cb74:	e014      	b.n	800cba0 <print_value_pointer+0xa8>

        case VAR_INT16:
          // int16_t array
          cli_printf("%d", ((int16_t *)valuePointer)[i]);
 800cb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb78:	005b      	lsls	r3, r3, #1
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb82:	4619      	mov	r1, r3
 800cb84:	4874      	ldr	r0, [pc, #464]	; (800cd58 <print_value_pointer+0x260>)
 800cb86:	f7ff fcdf 	bl	800c548 <cli_printf>
          break;
 800cb8a:	e009      	b.n	800cba0 <print_value_pointer+0xa8>

        case VAR_UINT32:
          // uin32_t array
          cli_printf("%lu", ((uint32_t *)valuePointer)[i]);
 800cb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	4413      	add	r3, r2
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4619      	mov	r1, r3
 800cb98:	4870      	ldr	r0, [pc, #448]	; (800cd5c <print_value_pointer+0x264>)
 800cb9a:	f7ff fcd5 	bl	800c548 <cli_printf>
          break;
 800cb9e:	bf00      	nop
      }

      if (i < var->config.array.length - 1) {
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	795b      	ldrb	r3, [r3, #5]
 800cba4:	3b01      	subs	r3, #1
 800cba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	da02      	bge.n	800cbb2 <print_value_pointer+0xba>
        cli_print(",");
 800cbac:	486c      	ldr	r0, [pc, #432]	; (800cd60 <print_value_pointer+0x268>)
 800cbae:	f7ff fc65 	bl	800c47c <cli_print>
    for (int i = 0; i < var->config.array.length; i++) {
 800cbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	627b      	str	r3, [r7, #36]	; 0x24
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	795b      	ldrb	r3, [r3, #5]
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	dba9      	blt.n	800cb18 <print_value_pointer+0x20>
    if (value_is_corrupted) {
      cli_print_linefeed();
      cli_print_error(cmdName, "CORRUPTED CONFIG: %s = %d", var->name, value);
    }
  }
}
 800cbc4:	e0c3      	b.n	800cd4e <print_value_pointer+0x256>
    int value = 0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	623b      	str	r3, [r7, #32]
    switch (var->type & VALUE_TYPE_MASK) {
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	791b      	ldrb	r3, [r3, #4]
 800cbce:	f003 0307 	and.w	r3, r3, #7
 800cbd2:	2b04      	cmp	r3, #4
 800cbd4:	d822      	bhi.n	800cc1c <print_value_pointer+0x124>
 800cbd6:	a201      	add	r2, pc, #4	; (adr r2, 800cbdc <print_value_pointer+0xe4>)
 800cbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbdc:	0800cbf1 	.word	0x0800cbf1
 800cbe0:	0800cbf9 	.word	0x0800cbf9
 800cbe4:	0800cc03 	.word	0x0800cc03
 800cbe8:	0800cc0b 	.word	0x0800cc0b
 800cbec:	0800cc15 	.word	0x0800cc15
        value = *(uint8_t *)valuePointer;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	623b      	str	r3, [r7, #32]
        break;
 800cbf6:	e011      	b.n	800cc1c <print_value_pointer+0x124>
        value = *(int8_t *)valuePointer;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f993 3000 	ldrsb.w	r3, [r3]
 800cbfe:	623b      	str	r3, [r7, #32]
        break;
 800cc00:	e00c      	b.n	800cc1c <print_value_pointer+0x124>
        value = *(uint16_t *)valuePointer;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	881b      	ldrh	r3, [r3, #0]
 800cc06:	623b      	str	r3, [r7, #32]
        break;
 800cc08:	e008      	b.n	800cc1c <print_value_pointer+0x124>
        value = *(int16_t *)valuePointer;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc10:	623b      	str	r3, [r7, #32]
        break;
 800cc12:	e003      	b.n	800cc1c <print_value_pointer+0x124>
        value = *(uint32_t *)valuePointer;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	623b      	str	r3, [r7, #32]
        break;
 800cc1a:	bf00      	nop
    bool value_is_corrupted = false;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	77fb      	strb	r3, [r7, #31]
    switch (var->type & VALUE_MODE_MASK) {
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	791b      	ldrb	r3, [r3, #4]
 800cc24:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800cc28:	2b80      	cmp	r3, #128	; 0x80
 800cc2a:	d077      	beq.n	800cd1c <print_value_pointer+0x224>
 800cc2c:	2b80      	cmp	r3, #128	; 0x80
 800cc2e:	f300 8082 	bgt.w	800cd36 <print_value_pointer+0x23e>
 800cc32:	2b60      	cmp	r3, #96	; 0x60
 800cc34:	d061      	beq.n	800ccfa <print_value_pointer+0x202>
 800cc36:	2b60      	cmp	r3, #96	; 0x60
 800cc38:	dc7d      	bgt.n	800cd36 <print_value_pointer+0x23e>
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d002      	beq.n	800cc44 <print_value_pointer+0x14c>
 800cc3e:	2b20      	cmp	r3, #32
 800cc40:	d040      	beq.n	800ccc4 <print_value_pointer+0x1cc>
 800cc42:	e078      	b.n	800cd36 <print_value_pointer+0x23e>
        if ((var->type & VALUE_TYPE_MASK) == VAR_UINT32) {
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	791b      	ldrb	r3, [r3, #4]
 800cc48:	f003 0307 	and.w	r3, r3, #7
 800cc4c:	2b04      	cmp	r3, #4
 800cc4e:	d118      	bne.n	800cc82 <print_value_pointer+0x18a>
          cli_printf("%lu", (uint32_t)value);
 800cc50:	6a3b      	ldr	r3, [r7, #32]
 800cc52:	4619      	mov	r1, r3
 800cc54:	4841      	ldr	r0, [pc, #260]	; (800cd5c <print_value_pointer+0x264>)
 800cc56:	f7ff fc77 	bl	800c548 <cli_printf>
          if ((uint32_t)value > var->config.u32_max) {
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800cc60:	6a3b      	ldr	r3, [r7, #32]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d202      	bcs.n	800cc6c <print_value_pointer+0x174>
            value_is_corrupted = true;
 800cc66:	2301      	movs	r3, #1
 800cc68:	77fb      	strb	r3, [r7, #31]
        break;
 800cc6a:	e063      	b.n	800cd34 <print_value_pointer+0x23c>
          } else if (full) {
 800cc6c:	78fb      	ldrb	r3, [r7, #3]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d060      	beq.n	800cd34 <print_value_pointer+0x23c>
            cli_printf(" 0 %lu", var->config.u32_max);
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800cc78:	4619      	mov	r1, r3
 800cc7a:	483a      	ldr	r0, [pc, #232]	; (800cd64 <print_value_pointer+0x26c>)
 800cc7c:	f7ff fc64 	bl	800c548 <cli_printf>
        break;
 800cc80:	e058      	b.n	800cd34 <print_value_pointer+0x23c>
          get_min_max(var, &min, &max);
 800cc82:	f107 0214 	add.w	r2, r7, #20
 800cc86:	f107 0318 	add.w	r3, r7, #24
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	68b8      	ldr	r0, [r7, #8]
 800cc8e:	f7ff fbc2 	bl	800c416 <get_min_max>
          cli_printf("%d", value);
 800cc92:	6a39      	ldr	r1, [r7, #32]
 800cc94:	4830      	ldr	r0, [pc, #192]	; (800cd58 <print_value_pointer+0x260>)
 800cc96:	f7ff fc57 	bl	800c548 <cli_printf>
          if ((value < min) || (value > max)) {
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	6a3a      	ldr	r2, [r7, #32]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	db03      	blt.n	800ccaa <print_value_pointer+0x1b2>
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	6a3a      	ldr	r2, [r7, #32]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	dd02      	ble.n	800ccb0 <print_value_pointer+0x1b8>
            value_is_corrupted = true;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	77fb      	strb	r3, [r7, #31]
        break;
 800ccae:	e041      	b.n	800cd34 <print_value_pointer+0x23c>
          } else if (full) {
 800ccb0:	78fb      	ldrb	r3, [r7, #3]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d03e      	beq.n	800cd34 <print_value_pointer+0x23c>
            cli_printf(" %d %d", min, max);
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	697a      	ldr	r2, [r7, #20]
 800ccba:	4619      	mov	r1, r3
 800ccbc:	482a      	ldr	r0, [pc, #168]	; (800cd68 <print_value_pointer+0x270>)
 800ccbe:	f7ff fc43 	bl	800c548 <cli_printf>
        break;
 800ccc2:	e037      	b.n	800cd34 <print_value_pointer+0x23c>
        if (value < lookup_tables[var->config.lookup.table_index].value_count) {
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	795b      	ldrb	r3, [r3, #5]
 800ccc8:	4a28      	ldr	r2, [pc, #160]	; (800cd6c <print_value_pointer+0x274>)
 800ccca:	00db      	lsls	r3, r3, #3
 800cccc:	4413      	add	r3, r2
 800ccce:	791b      	ldrb	r3, [r3, #4]
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	6a3b      	ldr	r3, [r7, #32]
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	da0d      	bge.n	800ccf4 <print_value_pointer+0x1fc>
          cli_print(lookup_tables[var->config.lookup.table_index].values[value]);
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	795b      	ldrb	r3, [r3, #5]
 800ccdc:	461a      	mov	r2, r3
 800ccde:	4b23      	ldr	r3, [pc, #140]	; (800cd6c <print_value_pointer+0x274>)
 800cce0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800cce4:	6a3b      	ldr	r3, [r7, #32]
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	4413      	add	r3, r2
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7ff fbc5 	bl	800c47c <cli_print>
        break;
 800ccf2:	e020      	b.n	800cd36 <print_value_pointer+0x23e>
          value_is_corrupted = true;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	77fb      	strb	r3, [r7, #31]
        break;
 800ccf8:	e01d      	b.n	800cd36 <print_value_pointer+0x23e>
        if (value & 1 << var->config.bitpos) {
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	795b      	ldrb	r3, [r3, #5]
 800ccfe:	461a      	mov	r2, r3
 800cd00:	6a3b      	ldr	r3, [r7, #32]
 800cd02:	4113      	asrs	r3, r2
 800cd04:	f003 0301 	and.w	r3, r3, #1
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d003      	beq.n	800cd14 <print_value_pointer+0x21c>
          cli_printf("ON");
 800cd0c:	4818      	ldr	r0, [pc, #96]	; (800cd70 <print_value_pointer+0x278>)
 800cd0e:	f7ff fc1b 	bl	800c548 <cli_printf>
        break;
 800cd12:	e010      	b.n	800cd36 <print_value_pointer+0x23e>
          cli_printf("OFF");
 800cd14:	4817      	ldr	r0, [pc, #92]	; (800cd74 <print_value_pointer+0x27c>)
 800cd16:	f7ff fc17 	bl	800c548 <cli_printf>
        break;
 800cd1a:	e00c      	b.n	800cd36 <print_value_pointer+0x23e>
        cli_printf("%s", (strlen((char *)valuePointer) == 0) ? "-" : (char *)valuePointer);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d001      	beq.n	800cd28 <print_value_pointer+0x230>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	e000      	b.n	800cd2a <print_value_pointer+0x232>
 800cd28:	4b13      	ldr	r3, [pc, #76]	; (800cd78 <print_value_pointer+0x280>)
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	4813      	ldr	r0, [pc, #76]	; (800cd7c <print_value_pointer+0x284>)
 800cd2e:	f7ff fc0b 	bl	800c548 <cli_printf>
        break;
 800cd32:	e000      	b.n	800cd36 <print_value_pointer+0x23e>
        break;
 800cd34:	bf00      	nop
    if (value_is_corrupted) {
 800cd36:	7ffb      	ldrb	r3, [r7, #31]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d008      	beq.n	800cd4e <print_value_pointer+0x256>
      cli_print_linefeed();
 800cd3c:	f7ff fbb8 	bl	800c4b0 <cli_print_linefeed>
      cli_print_error(cmdName, "CORRUPTED CONFIG: %s = %d", var->name, value);
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	6a3b      	ldr	r3, [r7, #32]
 800cd46:	490e      	ldr	r1, [pc, #56]	; (800cd80 <print_value_pointer+0x288>)
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f7ff fc55 	bl	800c5f8 <cli_print_error>
}
 800cd4e:	bf00      	nop
 800cd50:	3728      	adds	r7, #40	; 0x28
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	0801e164 	.word	0x0801e164
 800cd5c:	0801e168 	.word	0x0801e168
 800cd60:	0801e16c 	.word	0x0801e16c
 800cd64:	0801e170 	.word	0x0801e170
 800cd68:	0801e178 	.word	0x0801e178
 800cd6c:	0801ea64 	.word	0x0801ea64
 800cd70:	0801e180 	.word	0x0801e180
 800cd74:	0801e184 	.word	0x0801e184
 800cd78:	0801e188 	.word	0x0801e188
 800cd7c:	0801e18c 	.word	0x0801e18c
 800cd80:	0801e190 	.word	0x0801e190

0800cd84 <cli_print_var>:

void cli_print_var(const char *cmdName, const cli_value_t *var, bool full) {
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b086      	sub	sp, #24
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	71fb      	strb	r3, [r7, #7]
  const void *ptr = var->pdata;
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800cd98:	617b      	str	r3, [r7, #20]

  print_value_pointer(cmdName, var, ptr, full);
 800cd9a:	79fb      	ldrb	r3, [r7, #7]
 800cd9c:	697a      	ldr	r2, [r7, #20]
 800cd9e:	68b9      	ldr	r1, [r7, #8]
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f7ff fea9 	bl	800caf8 <print_value_pointer>
}
 800cda6:	bf00      	nop
 800cda8:	3718      	adds	r7, #24
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <get_word_length>:

uint8_t get_word_length(char *bufBegin, char *bufEnd) {
 800cdae:	b480      	push	{r7}
 800cdb0:	b083      	sub	sp, #12
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	6039      	str	r1, [r7, #0]
  while (*(bufEnd - 1) == ' ') {
 800cdb8:	e002      	b.n	800cdc0 <get_word_length+0x12>
    bufEnd--;
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	603b      	str	r3, [r7, #0]
  while (*(bufEnd - 1) == ' ') {
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	3b01      	subs	r3, #1
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	2b20      	cmp	r3, #32
 800cdc8:	d0f7      	beq.n	800cdba <get_word_length+0xc>
  }

  return bufEnd - bufBegin;
 800cdca:	683a      	ldr	r2, [r7, #0]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	1ad3      	subs	r3, r2, r3
 800cdd0:	b2db      	uxtb	r3, r3
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	370c      	adds	r7, #12
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
	...

0800cde0 <cli_get_setting_index>:

uint16_t cli_get_setting_index(char *name, uint8_t length) {
 800cde0:	b590      	push	{r4, r7, lr}
 800cde2:	b085      	sub	sp, #20
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	460b      	mov	r3, r1
 800cdea:	70fb      	strb	r3, [r7, #3]
  for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800cdec:	2300      	movs	r3, #0
 800cdee:	60fb      	str	r3, [r7, #12]
 800cdf0:	e020      	b.n	800ce34 <cli_get_setting_index+0x54>
    const char *setting_name = value_table[i].name;
 800cdf2:	4916      	ldr	r1, [pc, #88]	; (800ce4c <cli_get_setting_index+0x6c>)
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	011b      	lsls	r3, r3, #4
 800cdfa:	4413      	add	r3, r2
 800cdfc:	440b      	add	r3, r1
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	60bb      	str	r3, [r7, #8]

    // ensure exact match when setting to prevent setting variables with shorter names
    if (strncasecmp(name, setting_name, strlen(setting_name)) == 0 && length == strlen(setting_name)) {
 800ce02:	68b8      	ldr	r0, [r7, #8]
 800ce04:	f7ff f91c 	bl	800c040 <strlen>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	68b9      	ldr	r1, [r7, #8]
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f010 fbca 	bl	801d5a8 <strncasecmp>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d109      	bne.n	800ce2e <cli_get_setting_index+0x4e>
 800ce1a:	78fc      	ldrb	r4, [r7, #3]
 800ce1c:	68b8      	ldr	r0, [r7, #8]
 800ce1e:	f7ff f90f 	bl	800c040 <strlen>
 800ce22:	4603      	mov	r3, r0
 800ce24:	429c      	cmp	r4, r3
 800ce26:	d102      	bne.n	800ce2e <cli_get_setting_index+0x4e>
      return i;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	e00a      	b.n	800ce44 <cli_get_setting_index+0x64>
  for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	3301      	adds	r3, #1
 800ce32:	60fb      	str	r3, [r7, #12]
 800ce34:	4b06      	ldr	r3, [pc, #24]	; (800ce50 <cli_get_setting_index+0x70>)
 800ce36:	881b      	ldrh	r3, [r3, #0]
 800ce38:	461a      	mov	r2, r3
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d3d8      	bcc.n	800cdf2 <cli_get_setting_index+0x12>
    }
  }
  return value_table_entry_count;
 800ce40:	4b03      	ldr	r3, [pc, #12]	; (800ce50 <cli_get_setting_index+0x70>)
 800ce42:	881b      	ldrh	r3, [r3, #0]
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3714      	adds	r7, #20
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd90      	pop	{r4, r7, pc}
 800ce4c:	0801ea7c 	.word	0x0801ea7c
 800ce50:	0801eac0 	.word	0x0801eac0

0800ce54 <cli_print_var_range>:
    ptr++;
  }
  return ptr;
}

void cli_print_var_range(const cli_value_t *var) {
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  switch (var->type & VALUE_MODE_MASK) {
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	791b      	ldrb	r3, [r3, #4]
 800ce60:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800ce64:	2b80      	cmp	r3, #128	; 0x80
 800ce66:	f000 8083 	beq.w	800cf70 <cli_print_var_range+0x11c>
 800ce6a:	2b80      	cmp	r3, #128	; 0x80
 800ce6c:	f300 808e 	bgt.w	800cf8c <cli_print_var_range+0x138>
 800ce70:	2b60      	cmp	r3, #96	; 0x60
 800ce72:	f000 8087 	beq.w	800cf84 <cli_print_var_range+0x130>
 800ce76:	2b60      	cmp	r3, #96	; 0x60
 800ce78:	f300 8088 	bgt.w	800cf8c <cli_print_var_range+0x138>
 800ce7c:	2b40      	cmp	r3, #64	; 0x40
 800ce7e:	d070      	beq.n	800cf62 <cli_print_var_range+0x10e>
 800ce80:	2b40      	cmp	r3, #64	; 0x40
 800ce82:	f300 8083 	bgt.w	800cf8c <cli_print_var_range+0x138>
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d002      	beq.n	800ce90 <cli_print_var_range+0x3c>
 800ce8a:	2b20      	cmp	r3, #32
 800ce8c:	d032      	beq.n	800cef4 <cli_print_var_range+0xa0>
    } break;
    case (MODE_BITSET): {
      cli_print_linef("Allowed values: OFF, ON");
    } break;
  }
}
 800ce8e:	e07d      	b.n	800cf8c <cli_print_var_range+0x138>
      switch (var->type & VALUE_TYPE_MASK) {
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	791b      	ldrb	r3, [r3, #4]
 800ce94:	f003 0307 	and.w	r3, r3, #7
 800ce98:	2b04      	cmp	r3, #4
 800ce9a:	d006      	beq.n	800ceaa <cli_print_var_range+0x56>
 800ce9c:	2b04      	cmp	r3, #4
 800ce9e:	dc1a      	bgt.n	800ced6 <cli_print_var_range+0x82>
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d00a      	beq.n	800ceba <cli_print_var_range+0x66>
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d008      	beq.n	800ceba <cli_print_var_range+0x66>
 800cea8:	e015      	b.n	800ced6 <cli_print_var_range+0x82>
          cli_print_linef("Allowed range: 0 - %lu", var->config.u32_max);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	4838      	ldr	r0, [pc, #224]	; (800cf94 <cli_print_var_range+0x140>)
 800ceb4:	f7ff fb5a 	bl	800c56c <cli_print_linef>
          break;
 800ceb8:	e01b      	b.n	800cef2 <cli_print_var_range+0x9e>
          cli_print_linef("Allowed range: %d - %d", var->config.minmax_unsigned.min, var->config.minmax_unsigned.max);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	4619      	mov	r1, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	461a      	mov	r2, r3
 800cece:	4832      	ldr	r0, [pc, #200]	; (800cf98 <cli_print_var_range+0x144>)
 800ced0:	f7ff fb4c 	bl	800c56c <cli_print_linef>
          break;
 800ced4:	e00d      	b.n	800cef2 <cli_print_var_range+0x9e>
          cli_print_linef("Allowed range: %d - %d", var->config.minmax.min, var->config.minmax.max);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800cedc:	b21b      	sxth	r3, r3
 800cede:	4619      	mov	r1, r3
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
 800cee6:	b21b      	sxth	r3, r3
 800cee8:	461a      	mov	r2, r3
 800ceea:	482b      	ldr	r0, [pc, #172]	; (800cf98 <cli_print_var_range+0x144>)
 800ceec:	f7ff fb3e 	bl	800c56c <cli_print_linef>
          break;
 800cef0:	bf00      	nop
    } break;
 800cef2:	e04b      	b.n	800cf8c <cli_print_var_range+0x138>
      const lookup_table_entry_t *tableEntry = &lookup_tables[var->config.lookup.table_index];
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	795b      	ldrb	r3, [r3, #5]
 800cef8:	00db      	lsls	r3, r3, #3
 800cefa:	4a28      	ldr	r2, [pc, #160]	; (800cf9c <cli_print_var_range+0x148>)
 800cefc:	4413      	add	r3, r2
 800cefe:	60fb      	str	r3, [r7, #12]
      cli_print("Allowed values: ");
 800cf00:	4827      	ldr	r0, [pc, #156]	; (800cfa0 <cli_print_var_range+0x14c>)
 800cf02:	f7ff fabb 	bl	800c47c <cli_print>
      bool first_entry = true;
 800cf06:	2301      	movs	r3, #1
 800cf08:	75fb      	strb	r3, [r7, #23]
      for (unsigned i = 0; i < tableEntry->value_count; i++) {
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	613b      	str	r3, [r7, #16]
 800cf0e:	e01f      	b.n	800cf50 <cli_print_var_range+0xfc>
        if (tableEntry->values[i]) {
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	4413      	add	r3, r2
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d014      	beq.n	800cf4a <cli_print_var_range+0xf6>
          if (!first_entry) {
 800cf20:	7dfb      	ldrb	r3, [r7, #23]
 800cf22:	f083 0301 	eor.w	r3, r3, #1
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d002      	beq.n	800cf32 <cli_print_var_range+0xde>
            cli_print(", ");
 800cf2c:	481d      	ldr	r0, [pc, #116]	; (800cfa4 <cli_print_var_range+0x150>)
 800cf2e:	f7ff faa5 	bl	800c47c <cli_print>
          cli_printf("%s", tableEntry->values[i]);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	4413      	add	r3, r2
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4619      	mov	r1, r3
 800cf40:	4819      	ldr	r0, [pc, #100]	; (800cfa8 <cli_print_var_range+0x154>)
 800cf42:	f7ff fb01 	bl	800c548 <cli_printf>
          first_entry = false;
 800cf46:	2300      	movs	r3, #0
 800cf48:	75fb      	strb	r3, [r7, #23]
      for (unsigned i = 0; i < tableEntry->value_count; i++) {
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	613b      	str	r3, [r7, #16]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	791b      	ldrb	r3, [r3, #4]
 800cf54:	461a      	mov	r2, r3
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d3d9      	bcc.n	800cf10 <cli_print_var_range+0xbc>
      cli_print_linefeed();
 800cf5c:	f7ff faa8 	bl	800c4b0 <cli_print_linefeed>
    } break;
 800cf60:	e014      	b.n	800cf8c <cli_print_var_range+0x138>
      cli_print_linef("Array length: %d", var->config.array.length);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	795b      	ldrb	r3, [r3, #5]
 800cf66:	4619      	mov	r1, r3
 800cf68:	4810      	ldr	r0, [pc, #64]	; (800cfac <cli_print_var_range+0x158>)
 800cf6a:	f7ff faff 	bl	800c56c <cli_print_linef>
    } break;
 800cf6e:	e00d      	b.n	800cf8c <cli_print_var_range+0x138>
      cli_print_linef("String length: %d - %d", var->config.string.min_length, var->config.string.max_length);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	795b      	ldrb	r3, [r3, #5]
 800cf74:	4619      	mov	r1, r3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	799b      	ldrb	r3, [r3, #6]
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	480c      	ldr	r0, [pc, #48]	; (800cfb0 <cli_print_var_range+0x15c>)
 800cf7e:	f7ff faf5 	bl	800c56c <cli_print_linef>
    } break;
 800cf82:	e003      	b.n	800cf8c <cli_print_var_range+0x138>
      cli_print_linef("Allowed values: OFF, ON");
 800cf84:	480b      	ldr	r0, [pc, #44]	; (800cfb4 <cli_print_var_range+0x160>)
 800cf86:	f7ff faf1 	bl	800c56c <cli_print_linef>
    } break;
 800cf8a:	bf00      	nop
}
 800cf8c:	bf00      	nop
 800cf8e:	3718      	adds	r7, #24
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	0801e1ac 	.word	0x0801e1ac
 800cf98:	0801e1c4 	.word	0x0801e1c4
 800cf9c:	0801ea64 	.word	0x0801ea64
 800cfa0:	0801e1dc 	.word	0x0801e1dc
 800cfa4:	0801e1f0 	.word	0x0801e1f0
 800cfa8:	0801e18c 	.word	0x0801e18c
 800cfac:	0801e1f4 	.word	0x0801e1f4
 800cfb0:	0801e208 	.word	0x0801e208
 800cfb4:	0801e220 	.word	0x0801e220

0800cfb8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cfbc:	f3bf 8f4f 	dsb	sy
}
 800cfc0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800cfc2:	4b06      	ldr	r3, [pc, #24]	; (800cfdc <__NVIC_SystemReset+0x24>)
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cfca:	4904      	ldr	r1, [pc, #16]	; (800cfdc <__NVIC_SystemReset+0x24>)
 800cfcc:	4b04      	ldr	r3, [pc, #16]	; (800cfe0 <__NVIC_SystemReset+0x28>)
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800cfd2:	f3bf 8f4f 	dsb	sy
}
 800cfd6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800cfd8:	bf00      	nop
 800cfda:	e7fd      	b.n	800cfd8 <__NVIC_SystemReset+0x20>
 800cfdc:	e000ed00 	.word	0xe000ed00
 800cfe0:	05fa0004 	.word	0x05fa0004

0800cfe4 <cli_cmd_help>:

static void cli_set_var(const cli_value_t *var, uint32_t value);

/** CLI command function definitions **/

static void cli_cmd_help(const char *cmd_name, char *args) {
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b086      	sub	sp, #24
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
  bool any_matches = false;
 800cfee:	2300      	movs	r3, #0
 800cff0:	75fb      	strb	r3, [r7, #23]

  for (uint32_t i = 0; i < ARRAYLEN(cmd_table); i++) {
 800cff2:	2300      	movs	r3, #0
 800cff4:	613b      	str	r3, [r7, #16]
 800cff6:	e05b      	b.n	800d0b0 <cli_cmd_help+0xcc>
    bool print_entry = false;
 800cff8:	2300      	movs	r3, #0
 800cffa:	73fb      	strb	r3, [r7, #15]
    if (is_empty(args)) {
 800cffc:	6838      	ldr	r0, [r7, #0]
 800cffe:	f7ff f9f3 	bl	800c3e8 <is_empty>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d002      	beq.n	800d00e <cli_cmd_help+0x2a>
      print_entry = true;
 800d008:	2301      	movs	r3, #1
 800d00a:	73fb      	strb	r3, [r7, #15]
 800d00c:	e01a      	b.n	800d044 <cli_cmd_help+0x60>
    } else {
      if (strstr(cmd_table[i].name, args) || strstr(cmd_table[i].description, args)) {
 800d00e:	4a36      	ldr	r2, [pc, #216]	; (800d0e8 <cli_cmd_help+0x104>)
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	011b      	lsls	r3, r3, #4
 800d014:	4413      	add	r3, r2
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	6839      	ldr	r1, [r7, #0]
 800d01a:	4618      	mov	r0, r3
 800d01c:	f010 fb0b 	bl	801d636 <strstr>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d10c      	bne.n	800d040 <cli_cmd_help+0x5c>
 800d026:	4a30      	ldr	r2, [pc, #192]	; (800d0e8 <cli_cmd_help+0x104>)
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	011b      	lsls	r3, r3, #4
 800d02c:	4413      	add	r3, r2
 800d02e:	3304      	adds	r3, #4
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	6839      	ldr	r1, [r7, #0]
 800d034:	4618      	mov	r0, r3
 800d036:	f010 fafe 	bl	801d636 <strstr>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d001      	beq.n	800d044 <cli_cmd_help+0x60>
        print_entry = true;
 800d040:	2301      	movs	r3, #1
 800d042:	73fb      	strb	r3, [r7, #15]
      }
    }

    if (print_entry) {
 800d044:	7bfb      	ldrb	r3, [r7, #15]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d02f      	beq.n	800d0aa <cli_cmd_help+0xc6>
      any_matches = true;
 800d04a:	2301      	movs	r3, #1
 800d04c:	75fb      	strb	r3, [r7, #23]
      cli_print(cmd_table[i].name);
 800d04e:	4a26      	ldr	r2, [pc, #152]	; (800d0e8 <cli_cmd_help+0x104>)
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	011b      	lsls	r3, r3, #4
 800d054:	4413      	add	r3, r2
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4618      	mov	r0, r3
 800d05a:	f7ff fa0f 	bl	800c47c <cli_print>
      if (cmd_table[i].description) {
 800d05e:	4a22      	ldr	r2, [pc, #136]	; (800d0e8 <cli_cmd_help+0x104>)
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	011b      	lsls	r3, r3, #4
 800d064:	4413      	add	r3, r2
 800d066:	3304      	adds	r3, #4
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d009      	beq.n	800d082 <cli_cmd_help+0x9e>
        cli_printf(" - %s", cmd_table[i].description);
 800d06e:	4a1e      	ldr	r2, [pc, #120]	; (800d0e8 <cli_cmd_help+0x104>)
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	011b      	lsls	r3, r3, #4
 800d074:	4413      	add	r3, r2
 800d076:	3304      	adds	r3, #4
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4619      	mov	r1, r3
 800d07c:	481b      	ldr	r0, [pc, #108]	; (800d0ec <cli_cmd_help+0x108>)
 800d07e:	f7ff fa63 	bl	800c548 <cli_printf>
      }
      if (cmd_table[i].args) {
 800d082:	4a19      	ldr	r2, [pc, #100]	; (800d0e8 <cli_cmd_help+0x104>)
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	011b      	lsls	r3, r3, #4
 800d088:	4413      	add	r3, r2
 800d08a:	3308      	adds	r3, #8
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d009      	beq.n	800d0a6 <cli_cmd_help+0xc2>
        cli_printf("\r\n\t%s", cmd_table[i].args);
 800d092:	4a15      	ldr	r2, [pc, #84]	; (800d0e8 <cli_cmd_help+0x104>)
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	011b      	lsls	r3, r3, #4
 800d098:	4413      	add	r3, r2
 800d09a:	3308      	adds	r3, #8
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4619      	mov	r1, r3
 800d0a0:	4813      	ldr	r0, [pc, #76]	; (800d0f0 <cli_cmd_help+0x10c>)
 800d0a2:	f7ff fa51 	bl	800c548 <cli_printf>
      }
      cli_print_linefeed();
 800d0a6:	f7ff fa03 	bl	800c4b0 <cli_print_linefeed>
  for (uint32_t i = 0; i < ARRAYLEN(cmd_table); i++) {
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	613b      	str	r3, [r7, #16]
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	2b09      	cmp	r3, #9
 800d0b4:	d9a0      	bls.n	800cff8 <cli_cmd_help+0x14>
    }
  }
  if (!is_empty(args) && !any_matches) {
 800d0b6:	6838      	ldr	r0, [r7, #0]
 800d0b8:	f7ff f996 	bl	800c3e8 <is_empty>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	f083 0301 	eor.w	r3, r3, #1
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00a      	beq.n	800d0de <cli_cmd_help+0xfa>
 800d0c8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ca:	f083 0301 	eor.w	r3, r3, #1
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d004      	beq.n	800d0de <cli_cmd_help+0xfa>
    cli_print_error_linef(cmd_name, "NO MATCHES FOR '%s'", args);
 800d0d4:	683a      	ldr	r2, [r7, #0]
 800d0d6:	4907      	ldr	r1, [pc, #28]	; (800d0f4 <cli_cmd_help+0x110>)
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7ff faa1 	bl	800c620 <cli_print_error_linef>
  }
}
 800d0de:	bf00      	nop
 800d0e0:	3718      	adds	r7, #24
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	0801e940 	.word	0x0801e940
 800d0ec:	0801e398 	.word	0x0801e398
 800d0f0:	0801e3a0 	.word	0x0801e3a0
 800d0f4:	0801e3a8 	.word	0x0801e3a8

0800d0f8 <cli_cmd_reboot>:

static void cli_cmd_reboot(const char *cmd_name, char *args) { NVIC_SystemReset(); }
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
 800d102:	f7ff ff59 	bl	800cfb8 <__NVIC_SystemReset>
	...

0800d108 <cli_cmd_save>:

static void cli_cmd_save(const char *cmd_name, char *args) {
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
  if (config_save() == false) {
 800d112:	f000 fc2f 	bl	800d974 <config_save>
 800d116:	4603      	mov	r3, r0
 800d118:	f083 0301 	eor.w	r3, r3, #1
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d00e      	beq.n	800d140 <cli_cmd_save+0x38>
    cli_print_line("Saving unsuccessful, trying force save...");
 800d122:	480d      	ldr	r0, [pc, #52]	; (800d158 <cli_cmd_save+0x50>)
 800d124:	f7ff f9ce 	bl	800c4c4 <cli_print_line>
    if (config_save() == false) {
 800d128:	f000 fc24 	bl	800d974 <config_save>
 800d12c:	4603      	mov	r3, r0
 800d12e:	f083 0301 	eor.w	r3, r3, #1
 800d132:	b2db      	uxtb	r3, r3
 800d134:	2b00      	cmp	r3, #0
 800d136:	d003      	beq.n	800d140 <cli_cmd_save+0x38>
      cli_print_line("Force save failed!");
 800d138:	4808      	ldr	r0, [pc, #32]	; (800d15c <cli_cmd_save+0x54>)
 800d13a:	f7ff f9c3 	bl	800c4c4 <cli_print_line>
      return;
 800d13e:	e008      	b.n	800d152 <cli_cmd_save+0x4a>
    }
  }
  cli_print_line("Successfully written to flash");
 800d140:	4807      	ldr	r0, [pc, #28]	; (800d160 <cli_cmd_save+0x58>)
 800d142:	f7ff f9bf 	bl	800c4c4 <cli_print_line>
  osEventFlagsSet(buzzer_event_id, BEEP_OK);
 800d146:	4b07      	ldr	r3, [pc, #28]	; (800d164 <cli_cmd_save+0x5c>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2101      	movs	r1, #1
 800d14c:	4618      	mov	r0, r3
 800d14e:	f00b fd63 	bl	8018c18 <osEventFlagsSet>
}
 800d152:	3708      	adds	r7, #8
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	0801e3bc 	.word	0x0801e3bc
 800d15c:	0801e3e8 	.word	0x0801e3e8
 800d160:	0801e3fc 	.word	0x0801e3fc
 800d164:	20005320 	.word	0x20005320

0800d168 <cli_cmd_get>:

static void cli_cmd_get(const char *cmd_name, char *args) {
 800d168:	b580      	push	{r7, lr}
 800d16a:	b086      	sub	sp, #24
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
  const cli_value_t *val;
  int matched_commands = 0;
 800d172:	2300      	movs	r3, #0
 800d174:	617b      	str	r3, [r7, #20]

  for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800d176:	2300      	movs	r3, #0
 800d178:	613b      	str	r3, [r7, #16]
 800d17a:	e034      	b.n	800d1e6 <cli_cmd_get+0x7e>
    if (strstr(value_table[i].name, args)) {
 800d17c:	4922      	ldr	r1, [pc, #136]	; (800d208 <cli_cmd_get+0xa0>)
 800d17e:	693a      	ldr	r2, [r7, #16]
 800d180:	4613      	mov	r3, r2
 800d182:	011b      	lsls	r3, r3, #4
 800d184:	4413      	add	r3, r2
 800d186:	440b      	add	r3, r1
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	6839      	ldr	r1, [r7, #0]
 800d18c:	4618      	mov	r0, r3
 800d18e:	f010 fa52 	bl	801d636 <strstr>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d023      	beq.n	800d1e0 <cli_cmd_get+0x78>
      val = &value_table[i];
 800d198:	693a      	ldr	r2, [r7, #16]
 800d19a:	4613      	mov	r3, r2
 800d19c:	011b      	lsls	r3, r3, #4
 800d19e:	4413      	add	r3, r2
 800d1a0:	4a19      	ldr	r2, [pc, #100]	; (800d208 <cli_cmd_get+0xa0>)
 800d1a2:	4413      	add	r3, r2
 800d1a4:	60fb      	str	r3, [r7, #12]
      if (matched_commands > 0) {
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	dd01      	ble.n	800d1b0 <cli_cmd_get+0x48>
        cli_print_linefeed();
 800d1ac:	f7ff f980 	bl	800c4b0 <cli_print_linefeed>
      }
      cli_printf("%s = ", value_table[i].name);
 800d1b0:	4915      	ldr	r1, [pc, #84]	; (800d208 <cli_cmd_get+0xa0>)
 800d1b2:	693a      	ldr	r2, [r7, #16]
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	011b      	lsls	r3, r3, #4
 800d1b8:	4413      	add	r3, r2
 800d1ba:	440b      	add	r3, r1
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4619      	mov	r1, r3
 800d1c0:	4812      	ldr	r0, [pc, #72]	; (800d20c <cli_cmd_get+0xa4>)
 800d1c2:	f7ff f9c1 	bl	800c548 <cli_printf>
      cli_print_var(cmd_name, val, 0);
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	68f9      	ldr	r1, [r7, #12]
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7ff fdda 	bl	800cd84 <cli_print_var>
      cli_print_linefeed();
 800d1d0:	f7ff f96e 	bl	800c4b0 <cli_print_linefeed>
      cli_print_var_range(val);
 800d1d4:	68f8      	ldr	r0, [r7, #12]
 800d1d6:	f7ff fe3d 	bl	800ce54 <cli_print_var_range>
      // cliPrintVarDefault(cmd_name, val);

      matched_commands++;
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	613b      	str	r3, [r7, #16]
 800d1e6:	4b0a      	ldr	r3, [pc, #40]	; (800d210 <cli_cmd_get+0xa8>)
 800d1e8:	881b      	ldrh	r3, [r3, #0]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d3c4      	bcc.n	800d17c <cli_cmd_get+0x14>
    }
  }

  if (!matched_commands) {
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d103      	bne.n	800d200 <cli_cmd_get+0x98>
    cli_print_error_linef(cmd_name, "INVALID NAME");
 800d1f8:	4906      	ldr	r1, [pc, #24]	; (800d214 <cli_cmd_get+0xac>)
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f7ff fa10 	bl	800c620 <cli_print_error_linef>
  }
}
 800d200:	bf00      	nop
 800d202:	3718      	adds	r7, #24
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	0801ea7c 	.word	0x0801ea7c
 800d20c:	0801e41c 	.word	0x0801e41c
 800d210:	0801eac0 	.word	0x0801eac0
 800d214:	0801e424 	.word	0x0801e424

0800d218 <cli_cmd_set>:

static void cli_cmd_set(const char *cmd_name, char *args) {
 800d218:	b580      	push	{r7, lr}
 800d21a:	b09c      	sub	sp, #112	; 0x70
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  const uint32_t len = strlen(args);
 800d222:	6838      	ldr	r0, [r7, #0]
 800d224:	f7fe ff0c 	bl	800c040 <strlen>
 800d228:	6538      	str	r0, [r7, #80]	; 0x50
  char *eqptr;

  if (len == 0 || (len == 1 && args[0] == '*')) {
 800d22a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d006      	beq.n	800d23e <cli_cmd_set+0x26>
 800d230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d232:	2b01      	cmp	r3, #1
 800d234:	d132      	bne.n	800d29c <cli_cmd_set+0x84>
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	2b2a      	cmp	r3, #42	; 0x2a
 800d23c:	d12e      	bne.n	800d29c <cli_cmd_set+0x84>
    cli_print_line("Current settings: ");
 800d23e:	48b3      	ldr	r0, [pc, #716]	; (800d50c <cli_cmd_set+0x2f4>)
 800d240:	f7ff f940 	bl	800c4c4 <cli_print_line>

    for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800d244:	2300      	movs	r3, #0
 800d246:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d248:	e021      	b.n	800d28e <cli_cmd_set+0x76>
      const cli_value_t *val = &value_table[i];
 800d24a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d24c:	4613      	mov	r3, r2
 800d24e:	011b      	lsls	r3, r3, #4
 800d250:	4413      	add	r3, r2
 800d252:	4aaf      	ldr	r2, [pc, #700]	; (800d510 <cli_cmd_set+0x2f8>)
 800d254:	4413      	add	r3, r2
 800d256:	617b      	str	r3, [r7, #20]
      cli_printf("%s = ", value_table[i].name);
 800d258:	49ad      	ldr	r1, [pc, #692]	; (800d510 <cli_cmd_set+0x2f8>)
 800d25a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d25c:	4613      	mov	r3, r2
 800d25e:	011b      	lsls	r3, r3, #4
 800d260:	4413      	add	r3, r2
 800d262:	440b      	add	r3, r1
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4619      	mov	r1, r3
 800d268:	48aa      	ldr	r0, [pc, #680]	; (800d514 <cli_cmd_set+0x2fc>)
 800d26a:	f7ff f96d 	bl	800c548 <cli_printf>
      // when len is 1 (when * is passed as argument), it will print min/max values as well, for gui
      cli_print_var(cmd_name, val, len);
 800d26e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d270:	2b00      	cmp	r3, #0
 800d272:	bf14      	ite	ne
 800d274:	2301      	movne	r3, #1
 800d276:	2300      	moveq	r3, #0
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	461a      	mov	r2, r3
 800d27c:	6979      	ldr	r1, [r7, #20]
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f7ff fd80 	bl	800cd84 <cli_print_var>
      cli_print_linefeed();
 800d284:	f7ff f914 	bl	800c4b0 <cli_print_linefeed>
    for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800d288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d28a:	3301      	adds	r3, #1
 800d28c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d28e:	4ba2      	ldr	r3, [pc, #648]	; (800d518 <cli_cmd_set+0x300>)
 800d290:	881b      	ldrh	r3, [r3, #0]
 800d292:	461a      	mov	r2, r3
 800d294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d296:	4293      	cmp	r3, r2
 800d298:	d3d7      	bcc.n	800d24a <cli_cmd_set+0x32>
 800d29a:	e1ff      	b.n	800d69c <cli_cmd_set+0x484>
    }
  } else if ((eqptr = strstr(args, "=")) != NULL) {
 800d29c:	213d      	movs	r1, #61	; 0x3d
 800d29e:	6838      	ldr	r0, [r7, #0]
 800d2a0:	f010 f974 	bl	801d58c <strchr>
 800d2a4:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d2a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	f000 81f1 	beq.w	800d690 <cli_cmd_set+0x478>
    // has equals

    uint8_t variable_name_length = get_word_length(args, eqptr);
 800d2ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d2b0:	6838      	ldr	r0, [r7, #0]
 800d2b2:	f7ff fd7c 	bl	800cdae <get_word_length>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

    // skip the '=' and any ' ' characters
    eqptr++;
 800d2bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2be:	3301      	adds	r3, #1
 800d2c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    eqptr = skip_space(eqptr);
 800d2c2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d2c4:	f7ff f9c6 	bl	800c654 <skip_space>
 800d2c8:	64f8      	str	r0, [r7, #76]	; 0x4c

    const uint16_t index = cli_get_setting_index(args, variable_name_length);
 800d2ca:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	6838      	ldr	r0, [r7, #0]
 800d2d2:	f7ff fd85 	bl	800cde0 <cli_get_setting_index>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    if (index >= value_table_entry_count) {
 800d2dc:	4b8e      	ldr	r3, [pc, #568]	; (800d518 <cli_cmd_set+0x300>)
 800d2de:	881b      	ldrh	r3, [r3, #0]
 800d2e0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d304      	bcc.n	800d2f2 <cli_cmd_set+0xda>
      cli_print_error_linef(cmd_name, "INVALID NAME");
 800d2e8:	498c      	ldr	r1, [pc, #560]	; (800d51c <cli_cmd_set+0x304>)
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f7ff f998 	bl	800c620 <cli_print_error_linef>
      return;
 800d2f0:	e1d4      	b.n	800d69c <cli_cmd_set+0x484>
    }
    const cli_value_t *val = &value_table[index];
 800d2f2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	011b      	lsls	r3, r3, #4
 800d2fa:	4413      	add	r3, r2
 800d2fc:	4a84      	ldr	r2, [pc, #528]	; (800d510 <cli_cmd_set+0x2f8>)
 800d2fe:	4413      	add	r3, r2
 800d300:	647b      	str	r3, [r7, #68]	; 0x44

    bool value_changed = false;
 800d302:	2300      	movs	r3, #0
 800d304:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

    switch (val->type & VALUE_MODE_MASK) {
 800d308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d30a:	791b      	ldrb	r3, [r3, #4]
 800d30c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d310:	2b80      	cmp	r3, #128	; 0x80
 800d312:	f000 812d 	beq.w	800d570 <cli_cmd_set+0x358>
 800d316:	2b80      	cmp	r3, #128	; 0x80
 800d318:	f300 8198 	bgt.w	800d64c <cli_cmd_set+0x434>
 800d31c:	2b60      	cmp	r3, #96	; 0x60
 800d31e:	d047      	beq.n	800d3b0 <cli_cmd_set+0x198>
 800d320:	2b60      	cmp	r3, #96	; 0x60
 800d322:	f300 8193 	bgt.w	800d64c <cli_cmd_set+0x434>
 800d326:	2b40      	cmp	r3, #64	; 0x40
 800d328:	f000 8096 	beq.w	800d458 <cli_cmd_set+0x240>
 800d32c:	2b40      	cmp	r3, #64	; 0x40
 800d32e:	f300 818d 	bgt.w	800d64c <cli_cmd_set+0x434>
 800d332:	2b00      	cmp	r3, #0
 800d334:	d002      	beq.n	800d33c <cli_cmd_set+0x124>
 800d336:	2b20      	cmp	r3, #32
 800d338:	d03a      	beq.n	800d3b0 <cli_cmd_set+0x198>
 800d33a:	e187      	b.n	800d64c <cli_cmd_set+0x434>
      case MODE_DIRECT: {
        if ((val->type & VALUE_TYPE_MASK) == VAR_UINT32) {
 800d33c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d33e:	791b      	ldrb	r3, [r3, #4]
 800d340:	f003 0307 	and.w	r3, r3, #7
 800d344:	2b04      	cmp	r3, #4
 800d346:	d114      	bne.n	800d372 <cli_cmd_set+0x15a>
          uint32_t value = strtoul(eqptr, NULL, 10);
 800d348:	220a      	movs	r2, #10
 800d34a:	2100      	movs	r1, #0
 800d34c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d34e:	f010 fa93 	bl	801d878 <strtoul>
 800d352:	61b8      	str	r0, [r7, #24]

          if (value <= val->config.u32_max) {
 800d354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d356:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800d35a:	69ba      	ldr	r2, [r7, #24]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	f200 8172 	bhi.w	800d646 <cli_cmd_set+0x42e>
            cli_set_var(val, value);
 800d362:	69b9      	ldr	r1, [r7, #24]
 800d364:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d366:	f000 fa3b 	bl	800d7e0 <cli_set_var>
            value_changed = true;
 800d36a:	2301      	movs	r3, #1
 800d36c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            value_changed = true;
          }
        }
      }

      break;
 800d370:	e169      	b.n	800d646 <cli_cmd_set+0x42e>
          int value = atoi(eqptr);
 800d372:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d374:	f010 f876 	bl	801d464 <atoi>
 800d378:	61f8      	str	r0, [r7, #28]
          get_min_max(val, &min, &max);
 800d37a:	f107 020c 	add.w	r2, r7, #12
 800d37e:	f107 0310 	add.w	r3, r7, #16
 800d382:	4619      	mov	r1, r3
 800d384:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d386:	f7ff f846 	bl	800c416 <get_min_max>
          if (value >= min && value <= max) {
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	69fa      	ldr	r2, [r7, #28]
 800d38e:	429a      	cmp	r2, r3
 800d390:	f2c0 8159 	blt.w	800d646 <cli_cmd_set+0x42e>
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	69fa      	ldr	r2, [r7, #28]
 800d398:	429a      	cmp	r2, r3
 800d39a:	f300 8154 	bgt.w	800d646 <cli_cmd_set+0x42e>
            cli_set_var(val, value);
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d3a4:	f000 fa1c 	bl	800d7e0 <cli_set_var>
            value_changed = true;
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
      break;
 800d3ae:	e14a      	b.n	800d646 <cli_cmd_set+0x42e>
      case MODE_LOOKUP:
      case MODE_BITSET: {
        int tableIndex;
        if ((val->type & VALUE_MODE_MASK) == MODE_BITSET) {
 800d3b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3b2:	791b      	ldrb	r3, [r3, #4]
 800d3b4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d3b8:	2b60      	cmp	r3, #96	; 0x60
 800d3ba:	d102      	bne.n	800d3c2 <cli_cmd_set+0x1aa>
          tableIndex = TABLE_BOOTSTATE;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	667b      	str	r3, [r7, #100]	; 0x64
 800d3c0:	e002      	b.n	800d3c8 <cli_cmd_set+0x1b0>
        } else {
          tableIndex = val->config.lookup.table_index;
 800d3c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3c4:	795b      	ldrb	r3, [r3, #5]
 800d3c6:	667b      	str	r3, [r7, #100]	; 0x64
        }
        const lookup_table_entry_t *tableEntry = &lookup_tables[tableIndex];
 800d3c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3ca:	00db      	lsls	r3, r3, #3
 800d3cc:	4a54      	ldr	r2, [pc, #336]	; (800d520 <cli_cmd_set+0x308>)
 800d3ce:	4413      	add	r3, r2
 800d3d0:	623b      	str	r3, [r7, #32]
        bool matched = false;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        for (uint32_t tableValueIndex = 0; tableValueIndex < tableEntry->value_count && !matched; tableValueIndex++) {
 800d3d8:	2300      	movs	r3, #0
 800d3da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d3dc:	e02d      	b.n	800d43a <cli_cmd_set+0x222>
          matched = tableEntry->values[tableValueIndex] && strcasecmp(tableEntry->values[tableValueIndex], eqptr) == 0;
 800d3de:	6a3b      	ldr	r3, [r7, #32]
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3e4:	009b      	lsls	r3, r3, #2
 800d3e6:	4413      	add	r3, r2
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d00e      	beq.n	800d40c <cli_cmd_set+0x1f4>
 800d3ee:	6a3b      	ldr	r3, [r7, #32]
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	4413      	add	r3, r2
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f010 f8a9 	bl	801d554 <strcasecmp>
 800d402:	4603      	mov	r3, r0
 800d404:	2b00      	cmp	r3, #0
 800d406:	d101      	bne.n	800d40c <cli_cmd_set+0x1f4>
 800d408:	2301      	movs	r3, #1
 800d40a:	e000      	b.n	800d40e <cli_cmd_set+0x1f6>
 800d40c:	2300      	movs	r3, #0
 800d40e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800d412:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800d416:	f003 0301 	and.w	r3, r3, #1
 800d41a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

          if (matched) {
 800d41e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800d422:	2b00      	cmp	r3, #0
 800d424:	d006      	beq.n	800d434 <cli_cmd_set+0x21c>
            cli_set_var(val, tableValueIndex);
 800d426:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d428:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d42a:	f000 f9d9 	bl	800d7e0 <cli_set_var>
            value_changed = true;
 800d42e:	2301      	movs	r3, #1
 800d430:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        for (uint32_t tableValueIndex = 0; tableValueIndex < tableEntry->value_count && !matched; tableValueIndex++) {
 800d434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d436:	3301      	adds	r3, #1
 800d438:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d43a:	6a3b      	ldr	r3, [r7, #32]
 800d43c:	791b      	ldrb	r3, [r3, #4]
 800d43e:	461a      	mov	r2, r3
 800d440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d442:	4293      	cmp	r3, r2
 800d444:	f080 8101 	bcs.w	800d64a <cli_cmd_set+0x432>
 800d448:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800d44c:	f083 0301 	eor.w	r3, r3, #1
 800d450:	b2db      	uxtb	r3, r3
 800d452:	2b00      	cmp	r3, #0
 800d454:	d1c3      	bne.n	800d3de <cli_cmd_set+0x1c6>
          }
        }
      } break;
 800d456:	e0f8      	b.n	800d64a <cli_cmd_set+0x432>
      case MODE_ARRAY: {
        const uint8_t array_length = val->config.array.length;
 800d458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d45a:	795b      	ldrb	r3, [r3, #5]
 800d45c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        char *valPtr = eqptr;
 800d460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d462:	65bb      	str	r3, [r7, #88]	; 0x58

        int i = 0;
 800d464:	2300      	movs	r3, #0
 800d466:	657b      	str	r3, [r7, #84]	; 0x54
        while (i < array_length && valPtr != NULL) {
 800d468:	e076      	b.n	800d558 <cli_cmd_set+0x340>
          // skip spaces
          valPtr = skip_space(valPtr);
 800d46a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d46c:	f7ff f8f2 	bl	800c654 <skip_space>
 800d470:	65b8      	str	r0, [r7, #88]	; 0x58

          // process substring starting at valPtr
          // note: no need to copy substrings for atoi()
          //       it stops at the first character that cannot be converted...
          switch (val->type & VALUE_TYPE_MASK) {
 800d472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d474:	791b      	ldrb	r3, [r3, #4]
 800d476:	f003 0307 	and.w	r3, r3, #7
 800d47a:	3b01      	subs	r3, #1
 800d47c:	2b03      	cmp	r3, #3
 800d47e:	d80b      	bhi.n	800d498 <cli_cmd_set+0x280>
 800d480:	a201      	add	r2, pc, #4	; (adr r2, 800d488 <cli_cmd_set+0x270>)
 800d482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d486:	bf00      	nop
 800d488:	0800d4b5 	.word	0x0800d4b5
 800d48c:	0800d4d1 	.word	0x0800d4d1
 800d490:	0800d4ef 	.word	0x0800d4ef
 800d494:	0800d525 	.word	0x0800d525
            default:
            case VAR_UINT8: {
              // fetch data pointer
              uint8_t *data = (uint8_t *)val->pdata + i;
 800d498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d49a:	f8d3 2009 	ldr.w	r2, [r3, #9]
 800d49e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4a0:	4413      	add	r3, r2
 800d4a2:	627b      	str	r3, [r7, #36]	; 0x24
              // store value
              *data = (uint8_t)atoi((const char *)valPtr);
 800d4a4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d4a6:	f00f ffdd 	bl	801d464 <atoi>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	b2da      	uxtb	r2, r3
 800d4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b0:	701a      	strb	r2, [r3, #0]
            }

            break;
 800d4b2:	e047      	b.n	800d544 <cli_cmd_set+0x32c>
            case VAR_INT8: {
              // fetch data pointer
              int8_t *data = (int8_t *)val->pdata + i;
 800d4b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4b6:	f8d3 2009 	ldr.w	r2, [r3, #9]
 800d4ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4bc:	4413      	add	r3, r2
 800d4be:	62bb      	str	r3, [r7, #40]	; 0x28
              // store value
              *data = (int8_t)atoi((const char *)valPtr);
 800d4c0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d4c2:	f00f ffcf 	bl	801d464 <atoi>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	b25a      	sxtb	r2, r3
 800d4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4cc:	701a      	strb	r2, [r3, #0]
            }

            break;
 800d4ce:	e039      	b.n	800d544 <cli_cmd_set+0x32c>
            case VAR_UINT16: {
              // fetch data pointer
              uint16_t *data = (uint16_t *)val->pdata + i;
 800d4d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4d2:	f8d3 2009 	ldr.w	r2, [r3, #9]
 800d4d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4d8:	005b      	lsls	r3, r3, #1
 800d4da:	4413      	add	r3, r2
 800d4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
              // store value
              *data = (uint16_t)atoi((const char *)valPtr);
 800d4de:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d4e0:	f00f ffc0 	bl	801d464 <atoi>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	b29a      	uxth	r2, r3
 800d4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ea:	801a      	strh	r2, [r3, #0]
            }

            break;
 800d4ec:	e02a      	b.n	800d544 <cli_cmd_set+0x32c>
            case VAR_INT16: {
              // fetch data pointer
              int16_t *data = (int16_t *)val->pdata + i;
 800d4ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4f0:	f8d3 2009 	ldr.w	r2, [r3, #9]
 800d4f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4f6:	005b      	lsls	r3, r3, #1
 800d4f8:	4413      	add	r3, r2
 800d4fa:	633b      	str	r3, [r7, #48]	; 0x30
              // store value
              *data = (int16_t)atoi((const char *)valPtr);
 800d4fc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d4fe:	f00f ffb1 	bl	801d464 <atoi>
 800d502:	4603      	mov	r3, r0
 800d504:	b21a      	sxth	r2, r3
 800d506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d508:	801a      	strh	r2, [r3, #0]
            }

            break;
 800d50a:	e01b      	b.n	800d544 <cli_cmd_set+0x32c>
 800d50c:	0801e434 	.word	0x0801e434
 800d510:	0801ea7c 	.word	0x0801ea7c
 800d514:	0801e41c 	.word	0x0801e41c
 800d518:	0801eac0 	.word	0x0801eac0
 800d51c:	0801e424 	.word	0x0801e424
 800d520:	0801ea64 	.word	0x0801ea64
            case VAR_UINT32: {
              // fetch data pointer
              uint32_t *data = (uint32_t *)val->pdata + i;
 800d524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d526:	f8d3 2009 	ldr.w	r2, [r3, #9]
 800d52a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	4413      	add	r3, r2
 800d530:	637b      	str	r3, [r7, #52]	; 0x34
              // store value
              *data = (uint32_t)strtoul((const char *)valPtr, NULL, 10);
 800d532:	220a      	movs	r2, #10
 800d534:	2100      	movs	r1, #0
 800d536:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d538:	f010 f99e 	bl	801d878 <strtoul>
 800d53c:	4602      	mov	r2, r0
 800d53e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d540:	601a      	str	r2, [r3, #0]
            }

            break;
 800d542:	bf00      	nop

          }

          // find next comma (or end of string)
          valPtr = strchr(valPtr, ',') + 1;
 800d544:	212c      	movs	r1, #44	; 0x2c
 800d546:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d548:	f010 f820 	bl	801d58c <strchr>
 800d54c:	4603      	mov	r3, r0
 800d54e:	3301      	adds	r3, #1
 800d550:	65bb      	str	r3, [r7, #88]	; 0x58

          i++;
 800d552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d554:	3301      	adds	r3, #1
 800d556:	657b      	str	r3, [r7, #84]	; 0x54
        while (i < array_length && valPtr != NULL) {
 800d558:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d55c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d55e:	429a      	cmp	r2, r3
 800d560:	da02      	bge.n	800d568 <cli_cmd_set+0x350>
 800d562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d564:	2b00      	cmp	r3, #0
 800d566:	d180      	bne.n	800d46a <cli_cmd_set+0x252>
        }
      }
        // mark as changed
        value_changed = true;
 800d568:	2301      	movs	r3, #1
 800d56a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

        break;
 800d56e:	e06d      	b.n	800d64c <cli_cmd_set+0x434>
      case MODE_STRING: {
		  char *valPtr = eqptr;
 800d570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d572:	643b      	str	r3, [r7, #64]	; 0x40
		  valPtr = skip_space(valPtr);
 800d574:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d576:	f7ff f86d 	bl	800c654 <skip_space>
 800d57a:	6438      	str	r0, [r7, #64]	; 0x40

		  const unsigned int len = strlen(valPtr);
 800d57c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d57e:	f7fe fd5f 	bl	800c040 <strlen>
 800d582:	63f8      	str	r0, [r7, #60]	; 0x3c
		  const uint8_t min = val->config.string.min_length;
 800d584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d586:	795b      	ldrb	r3, [r3, #5]
 800d588:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		  const uint8_t max = val->config.string.max_length;
 800d58c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d58e:	799b      	ldrb	r3, [r3, #6]
 800d590:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		  const bool updatable = ((val->config.string.flags & STRING_FLAGS_WRITEONCE) == 0 ||
 800d594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d596:	79db      	ldrb	r3, [r3, #7]
 800d598:	f003 0301 	and.w	r3, r3, #1
								  strlen((char *)val->pdata) == 0 ||
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d010      	beq.n	800d5c2 <cli_cmd_set+0x3aa>
 800d5a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5a2:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800d5a6:	781b      	ldrb	r3, [r3, #0]
		  const bool updatable = ((val->config.string.flags & STRING_FLAGS_WRITEONCE) == 0 ||
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00a      	beq.n	800d5c2 <cli_cmd_set+0x3aa>
								  strncmp(valPtr, (char *)val->pdata, len) == 0);
 800d5ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5ae:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800d5b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d5b8:	f010 f818 	bl	801d5ec <strncmp>
 800d5bc:	4603      	mov	r3, r0
								  strlen((char *)val->pdata) == 0 ||
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d101      	bne.n	800d5c6 <cli_cmd_set+0x3ae>
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	e000      	b.n	800d5c8 <cli_cmd_set+0x3b0>
 800d5c6:	2300      	movs	r3, #0
		  const bool updatable = ((val->config.string.flags & STRING_FLAGS_WRITEONCE) == 0 ||
 800d5c8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d5cc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d5d0:	f003 0301 	and.w	r3, r3, #1
 800d5d4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

		  if (updatable && len > 0 && len <= max) {
 800d5d8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d02a      	beq.n	800d636 <cli_cmd_set+0x41e>
 800d5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d027      	beq.n	800d636 <cli_cmd_set+0x41e>
 800d5e6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d5ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d822      	bhi.n	800d636 <cli_cmd_set+0x41e>
			  memset((char *)val->pdata, 0, max);
 800d5f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5f2:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800d5f6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f00f ff6d 	bl	801d4dc <memset>
			  if (len >= min && strncmp(valPtr, emptyName, len)) {
 800d602:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d606:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d608:	429a      	cmp	r2, r3
 800d60a:	d310      	bcc.n	800d62e <cli_cmd_set+0x416>
 800d60c:	4b25      	ldr	r3, [pc, #148]	; (800d6a4 <cli_cmd_set+0x48c>)
 800d60e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d610:	4619      	mov	r1, r3
 800d612:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d614:	f00f ffea 	bl	801d5ec <strncmp>
 800d618:	4603      	mov	r3, r0
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d007      	beq.n	800d62e <cli_cmd_set+0x416>
				  strncpy((char *)val->pdata, valPtr, len);
 800d61e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d620:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800d624:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d626:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d628:	4618      	mov	r0, r3
 800d62a:	f00f fff1 	bl	801d610 <strncpy>
			  }
			  value_changed = true;
 800d62e:	2301      	movs	r3, #1
 800d630:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		  } else {
			  cli_print_error_linef(cmd_name, "STRING MUST BE 1-%d CHARACTERS OR '-' FOR EMPTY", max);
		  }
	  }
	  break;
 800d634:	e00a      	b.n	800d64c <cli_cmd_set+0x434>
			  cli_print_error_linef(cmd_name, "STRING MUST BE 1-%d CHARACTERS OR '-' FOR EMPTY", max);
 800d636:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d63a:	461a      	mov	r2, r3
 800d63c:	491a      	ldr	r1, [pc, #104]	; (800d6a8 <cli_cmd_set+0x490>)
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f7fe ffee 	bl	800c620 <cli_print_error_linef>
	  break;
 800d644:	e002      	b.n	800d64c <cli_cmd_set+0x434>
      break;
 800d646:	bf00      	nop
 800d648:	e000      	b.n	800d64c <cli_cmd_set+0x434>
      } break;
 800d64a:	bf00      	nop
    }

    if (value_changed) {
 800d64c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800d650:	2b00      	cmp	r3, #0
 800d652:	d015      	beq.n	800d680 <cli_cmd_set+0x468>
      cli_printf("%s set to ", val->name);
 800d654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4619      	mov	r1, r3
 800d65a:	4814      	ldr	r0, [pc, #80]	; (800d6ac <cli_cmd_set+0x494>)
 800d65c:	f7fe ff74 	bl	800c548 <cli_printf>
      cli_print_var(cmd_name, val, 0);
 800d660:	2200      	movs	r2, #0
 800d662:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f7ff fb8d 	bl	800cd84 <cli_print_var>
      if (val->cb != NULL) {
 800d66a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d66c:	f8d3 300d 	ldr.w	r3, [r3, #13]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d012      	beq.n	800d69a <cli_cmd_set+0x482>
        val->cb(val);
 800d674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d676:	f8d3 300d 	ldr.w	r3, [r3, #13]
 800d67a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d67c:	4798      	blx	r3
    } else {
      cli_print_error_linef(cmd_name, "INVALID VALUE");
      cli_print_var_range(val);
    }

    return;
 800d67e:	e00c      	b.n	800d69a <cli_cmd_set+0x482>
      cli_print_error_linef(cmd_name, "INVALID VALUE");
 800d680:	490b      	ldr	r1, [pc, #44]	; (800d6b0 <cli_cmd_set+0x498>)
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f7fe ffcc 	bl	800c620 <cli_print_error_linef>
      cli_print_var_range(val);
 800d688:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d68a:	f7ff fbe3 	bl	800ce54 <cli_print_var_range>
    return;
 800d68e:	e004      	b.n	800d69a <cli_cmd_set+0x482>
  } else {
    // no equals, check for matching variables.
    cli_cmd_get(cmd_name, args);
 800d690:	6839      	ldr	r1, [r7, #0]
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f7ff fd68 	bl	800d168 <cli_cmd_get>
 800d698:	e000      	b.n	800d69c <cli_cmd_set+0x484>
    return;
 800d69a:	bf00      	nop
  }
}
 800d69c:	3770      	adds	r7, #112	; 0x70
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	0801e390 	.word	0x0801e390
 800d6a8:	0801e448 	.word	0x0801e448
 800d6ac:	0801e478 	.word	0x0801e478
 800d6b0:	0801e484 	.word	0x0801e484

0800d6b4 <cli_cmd_defaults>:


static void cli_cmd_defaults(const char *cmd_name, char *args) {
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b082      	sub	sp, #8
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	6039      	str	r1, [r7, #0]
  config_defaults();
 800d6be:	f000 f939 	bl	800d934 <config_defaults>
  cli_print_line("Reset to default values");
 800d6c2:	4803      	ldr	r0, [pc, #12]	; (800d6d0 <cli_cmd_defaults+0x1c>)
 800d6c4:	f7fe fefe 	bl	800c4c4 <cli_print_line>
}
 800d6c8:	bf00      	nop
 800d6ca:	3708      	adds	r7, #8
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	0801e494 	.word	0x0801e494

0800d6d4 <cli_cmd_dump>:

static void cli_cmd_dump(const char *cmd_name, char *args) {
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b086      	sub	sp, #24
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
  const uint32_t len = strlen(args);
 800d6de:	6838      	ldr	r0, [r7, #0]
 800d6e0:	f7fe fcae 	bl	800c040 <strlen>
 800d6e4:	6138      	str	r0, [r7, #16]
  cli_printf("#Configuration dump");
 800d6e6:	481b      	ldr	r0, [pc, #108]	; (800d754 <cli_cmd_dump+0x80>)
 800d6e8:	f7fe ff2e 	bl	800c548 <cli_printf>
  cli_print_linefeed();
 800d6ec:	f7fe fee0 	bl	800c4b0 <cli_print_linefeed>
  for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	617b      	str	r3, [r7, #20]
 800d6f4:	e021      	b.n	800d73a <cli_cmd_dump+0x66>
    const cli_value_t *val = &value_table[i];
 800d6f6:	697a      	ldr	r2, [r7, #20]
 800d6f8:	4613      	mov	r3, r2
 800d6fa:	011b      	lsls	r3, r3, #4
 800d6fc:	4413      	add	r3, r2
 800d6fe:	4a16      	ldr	r2, [pc, #88]	; (800d758 <cli_cmd_dump+0x84>)
 800d700:	4413      	add	r3, r2
 800d702:	60fb      	str	r3, [r7, #12]
    cli_printf("set %s = ", value_table[i].name);
 800d704:	4914      	ldr	r1, [pc, #80]	; (800d758 <cli_cmd_dump+0x84>)
 800d706:	697a      	ldr	r2, [r7, #20]
 800d708:	4613      	mov	r3, r2
 800d70a:	011b      	lsls	r3, r3, #4
 800d70c:	4413      	add	r3, r2
 800d70e:	440b      	add	r3, r1
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4619      	mov	r1, r3
 800d714:	4811      	ldr	r0, [pc, #68]	; (800d75c <cli_cmd_dump+0x88>)
 800d716:	f7fe ff17 	bl	800c548 <cli_printf>
    // when len is 1 (when * is passed as argument), it will print min/max values as well
    cli_print_var(cmd_name, val, len);
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	bf14      	ite	ne
 800d720:	2301      	movne	r3, #1
 800d722:	2300      	moveq	r3, #0
 800d724:	b2db      	uxtb	r3, r3
 800d726:	461a      	mov	r2, r3
 800d728:	68f9      	ldr	r1, [r7, #12]
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f7ff fb2a 	bl	800cd84 <cli_print_var>
    cli_print_linefeed();
 800d730:	f7fe febe 	bl	800c4b0 <cli_print_linefeed>
  for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	3301      	adds	r3, #1
 800d738:	617b      	str	r3, [r7, #20]
 800d73a:	4b09      	ldr	r3, [pc, #36]	; (800d760 <cli_cmd_dump+0x8c>)
 800d73c:	881b      	ldrh	r3, [r3, #0]
 800d73e:	461a      	mov	r2, r3
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	4293      	cmp	r3, r2
 800d744:	d3d7      	bcc.n	800d6f6 <cli_cmd_dump+0x22>
  }
  cli_printf("#End of configuration dump");
 800d746:	4807      	ldr	r0, [pc, #28]	; (800d764 <cli_cmd_dump+0x90>)
 800d748:	f7fe fefe 	bl	800c548 <cli_printf>
}
 800d74c:	bf00      	nop
 800d74e:	3718      	adds	r7, #24
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}
 800d754:	0801e4ac 	.word	0x0801e4ac
 800d758:	0801ea7c 	.word	0x0801ea7c
 800d75c:	0801e4c0 	.word	0x0801e4c0
 800d760:	0801eac0 	.word	0x0801eac0
 800d764:	0801e4cc 	.word	0x0801e4cc

0800d768 <cli_cmd_status>:

static void cli_cmd_status(const char *cmd_name, char *args) {
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
  //const lookup_table_entry_t *p_boot_table = &lookup_tables[TABLE_BOOTSTATE];
  //const lookup_table_entry_t *p_event_table = &lookup_tables[TABLE_EVENTS];
  cli_printf("System time: %lu ticks\n", osKernelGetTickCount());
 800d772:	f00b f8e1 	bl	8018938 <osKernelGetTickCount>
 800d776:	4603      	mov	r3, r0
 800d778:	4619      	mov	r1, r3
 800d77a:	4803      	ldr	r0, [pc, #12]	; (800d788 <cli_cmd_status+0x20>)
 800d77c:	f7fe fee4 	bl	800c548 <cli_printf>
}
 800d780:	bf00      	nop
 800d782:	3708      	adds	r7, #8
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}
 800d788:	0801e4e8 	.word	0x0801e4e8

0800d78c <cli_cmd_version>:

static void cli_cmd_version(const char *cmd_name, char *args) {
 800d78c:	b590      	push	{r4, r7, lr}
 800d78e:	b083      	sub	sp, #12
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	6039      	str	r1, [r7, #0]
  /* TODO: Store the board name somewhere else. */
  cli_printf("Board: %s\n", "Reefing System");
 800d796:	4909      	ldr	r1, [pc, #36]	; (800d7bc <cli_cmd_version+0x30>)
 800d798:	4809      	ldr	r0, [pc, #36]	; (800d7c0 <cli_cmd_version+0x34>)
 800d79a:	f7fe fed5 	bl	800c548 <cli_printf>
  cli_printf("CPU ID: 0x%lx, Revision: 0x%lx\n", HAL_GetDEVID(), HAL_GetREVID());
 800d79e:	f003 f813 	bl	80107c8 <HAL_GetDEVID>
 800d7a2:	4604      	mov	r4, r0
 800d7a4:	f003 f804 	bl	80107b0 <HAL_GetREVID>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	4621      	mov	r1, r4
 800d7ae:	4805      	ldr	r0, [pc, #20]	; (800d7c4 <cli_cmd_version+0x38>)
 800d7b0:	f7fe feca 	bl	800c548 <cli_printf>
}
 800d7b4:	bf00      	nop
 800d7b6:	370c      	adds	r7, #12
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd90      	pop	{r4, r7, pc}
 800d7bc:	0801e500 	.word	0x0801e500
 800d7c0:	0801e510 	.word	0x0801e510
 800d7c4:	0801e51c 	.word	0x0801e51c

0800d7c8 <cli_cmd_log_enable>:

static void cli_cmd_log_enable(const char *cmd_name, char *args) { log_enable(); }
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
 800d7d2:	f002 feaf 	bl	8010534 <log_enable>
 800d7d6:	bf00      	nop
 800d7d8:	3708      	adds	r7, #8
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
	...

0800d7e0 <cli_set_var>:


static void cli_set_var(const cli_value_t *var, const uint32_t value) {
 800d7e0:	b480      	push	{r7}
 800d7e2:	b087      	sub	sp, #28
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
  void *ptr = var->pdata;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800d7f0:	613b      	str	r3, [r7, #16]
  uint32_t work_value;
  uint32_t mask;

  if ((var->type & VALUE_MODE_MASK) == MODE_BITSET) {
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	791b      	ldrb	r3, [r3, #4]
 800d7f6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d7fa:	2b60      	cmp	r3, #96	; 0x60
 800d7fc:	d160      	bne.n	800d8c0 <cli_set_var+0xe0>
    switch (var->type & VALUE_TYPE_MASK) {
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	791b      	ldrb	r3, [r3, #4]
 800d802:	f003 0307 	and.w	r3, r3, #7
 800d806:	2b04      	cmp	r3, #4
 800d808:	d041      	beq.n	800d88e <cli_set_var+0xae>
 800d80a:	2b04      	cmp	r3, #4
 800d80c:	f300 8084 	bgt.w	800d918 <cli_set_var+0x138>
 800d810:	2b00      	cmp	r3, #0
 800d812:	d002      	beq.n	800d81a <cli_set_var+0x3a>
 800d814:	2b02      	cmp	r3, #2
 800d816:	d01d      	beq.n	800d854 <cli_set_var+0x74>
      case VAR_UINT32:
        *(uint32_t *)ptr = value;
        break;
    }
  }
}
 800d818:	e07e      	b.n	800d918 <cli_set_var+0x138>
        mask = (1 << var->config.bitpos) & 0xff;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	795b      	ldrb	r3, [r3, #5]
 800d81e:	461a      	mov	r2, r3
 800d820:	2301      	movs	r3, #1
 800d822:	4093      	lsls	r3, r2
 800d824:	b2db      	uxtb	r3, r3
 800d826:	60fb      	str	r3, [r7, #12]
        if (value) {
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d006      	beq.n	800d83c <cli_set_var+0x5c>
          work_value = *(uint8_t *)ptr | mask;
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	461a      	mov	r2, r3
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	4313      	orrs	r3, r2
 800d838:	617b      	str	r3, [r7, #20]
 800d83a:	e006      	b.n	800d84a <cli_set_var+0x6a>
          work_value = *(uint8_t *)ptr & ~mask;
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	461a      	mov	r2, r3
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	43db      	mvns	r3, r3
 800d846:	4013      	ands	r3, r2
 800d848:	617b      	str	r3, [r7, #20]
        *(uint8_t *)ptr = work_value;
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	b2da      	uxtb	r2, r3
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	701a      	strb	r2, [r3, #0]
        break;
 800d852:	e061      	b.n	800d918 <cli_set_var+0x138>
        mask = (1 << var->config.bitpos) & 0xffff;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	795b      	ldrb	r3, [r3, #5]
 800d858:	461a      	mov	r2, r3
 800d85a:	2301      	movs	r3, #1
 800d85c:	4093      	lsls	r3, r2
 800d85e:	b29b      	uxth	r3, r3
 800d860:	60fb      	str	r3, [r7, #12]
        if (value) {
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d006      	beq.n	800d876 <cli_set_var+0x96>
          work_value = *(uint16_t *)ptr | mask;
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	881b      	ldrh	r3, [r3, #0]
 800d86c:	461a      	mov	r2, r3
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	4313      	orrs	r3, r2
 800d872:	617b      	str	r3, [r7, #20]
 800d874:	e006      	b.n	800d884 <cli_set_var+0xa4>
          work_value = *(uint16_t *)ptr & ~mask;
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	881b      	ldrh	r3, [r3, #0]
 800d87a:	461a      	mov	r2, r3
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	43db      	mvns	r3, r3
 800d880:	4013      	ands	r3, r2
 800d882:	617b      	str	r3, [r7, #20]
        *(uint16_t *)ptr = work_value;
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	b29a      	uxth	r2, r3
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	801a      	strh	r2, [r3, #0]
        break;
 800d88c:	e044      	b.n	800d918 <cli_set_var+0x138>
        mask = 1 << var->config.bitpos;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	795b      	ldrb	r3, [r3, #5]
 800d892:	461a      	mov	r2, r3
 800d894:	2301      	movs	r3, #1
 800d896:	4093      	lsls	r3, r2
 800d898:	60fb      	str	r3, [r7, #12]
        if (value) {
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d005      	beq.n	800d8ac <cli_set_var+0xcc>
          work_value = *(uint32_t *)ptr | mask;
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	68fa      	ldr	r2, [r7, #12]
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	617b      	str	r3, [r7, #20]
 800d8aa:	e005      	b.n	800d8b8 <cli_set_var+0xd8>
          work_value = *(uint32_t *)ptr & ~mask;
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	43db      	mvns	r3, r3
 800d8b4:	4013      	ands	r3, r2
 800d8b6:	617b      	str	r3, [r7, #20]
        *(uint32_t *)ptr = work_value;
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	697a      	ldr	r2, [r7, #20]
 800d8bc:	601a      	str	r2, [r3, #0]
        break;
 800d8be:	e02b      	b.n	800d918 <cli_set_var+0x138>
    switch (var->type & VALUE_TYPE_MASK) {
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	791b      	ldrb	r3, [r3, #4]
 800d8c4:	f003 0307 	and.w	r3, r3, #7
 800d8c8:	2b04      	cmp	r3, #4
 800d8ca:	d825      	bhi.n	800d918 <cli_set_var+0x138>
 800d8cc:	a201      	add	r2, pc, #4	; (adr r2, 800d8d4 <cli_set_var+0xf4>)
 800d8ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8d2:	bf00      	nop
 800d8d4:	0800d8e9 	.word	0x0800d8e9
 800d8d8:	0800d8f3 	.word	0x0800d8f3
 800d8dc:	0800d8fd 	.word	0x0800d8fd
 800d8e0:	0800d907 	.word	0x0800d907
 800d8e4:	0800d911 	.word	0x0800d911
        *(uint8_t *)ptr = value;
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	b2da      	uxtb	r2, r3
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	701a      	strb	r2, [r3, #0]
        break;
 800d8f0:	e012      	b.n	800d918 <cli_set_var+0x138>
        *(int8_t *)ptr = value;
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	b25a      	sxtb	r2, r3
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	701a      	strb	r2, [r3, #0]
        break;
 800d8fa:	e00d      	b.n	800d918 <cli_set_var+0x138>
        *(uint16_t *)ptr = value;
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	b29a      	uxth	r2, r3
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	801a      	strh	r2, [r3, #0]
        break;
 800d904:	e008      	b.n	800d918 <cli_set_var+0x138>
        *(int16_t *)ptr = value;
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	b21a      	sxth	r2, r3
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	801a      	strh	r2, [r3, #0]
        break;
 800d90e:	e003      	b.n	800d918 <cli_set_var+0x138>
        *(uint32_t *)ptr = value;
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	683a      	ldr	r2, [r7, #0]
 800d914:	601a      	str	r2, [r3, #0]
        break;
 800d916:	bf00      	nop
}
 800d918:	bf00      	nop
 800d91a:	371c      	adds	r7, #28
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr

0800d924 <config_init>:


config_u global_config = {};


void config_init() {
 800d924:	b480      	push	{r7}
 800d926:	af00      	add	r7, sp, #0

}
 800d928:	bf00      	nop
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr
	...

0800d934 <config_defaults>:

void config_defaults() {
 800d934:	b4b0      	push	{r4, r5, r7}
 800d936:	af00      	add	r7, sp, #0
	memcpy(&global_config, &DEFAULT_CONFIG, sizeof(global_config));
 800d938:	4a06      	ldr	r2, [pc, #24]	; (800d954 <config_defaults+0x20>)
 800d93a:	4b07      	ldr	r3, [pc, #28]	; (800d958 <config_defaults+0x24>)
 800d93c:	4614      	mov	r4, r2
 800d93e:	461d      	mov	r5, r3
 800d940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d944:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d948:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d94c:	bf00      	nop
 800d94e:	46bd      	mov	sp, r7
 800d950:	bcb0      	pop	{r4, r5, r7}
 800d952:	4770      	bx	lr
 800d954:	20000464 	.word	0x20000464
 800d958:	0801eac4 	.word	0x0801eac4

0800d95c <config_load>:

/** persistence functions **/
void config_load() {
 800d95c:	b580      	push	{r7, lr}
 800d95e:	af00      	add	r7, sp, #0
  ee_read(0, sizeof(config_t), global_config.config_array);
 800d960:	4a03      	ldr	r2, [pc, #12]	; (800d970 <config_load+0x14>)
 800d962:	211c      	movs	r1, #28
 800d964:	2000      	movs	r0, #0
 800d966:	f000 f84d 	bl	800da04 <ee_read>
}
 800d96a:	bf00      	nop
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop
 800d970:	20000464 	.word	0x20000464

0800d974 <config_save>:


bool config_save() {
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
  bool status = false;
 800d97a:	2300      	movs	r3, #0
 800d97c:	71fb      	strb	r3, [r7, #7]
  status = ee_format();
 800d97e:	f000 f817 	bl	800d9b0 <ee_format>
 800d982:	4603      	mov	r3, r0
 800d984:	71fb      	strb	r3, [r7, #7]
  if(status == false) return status;
 800d986:	79fb      	ldrb	r3, [r7, #7]
 800d988:	f083 0301 	eor.w	r3, r3, #1
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d001      	beq.n	800d996 <config_save+0x22>
 800d992:	79fb      	ldrb	r3, [r7, #7]
 800d994:	e005      	b.n	800d9a2 <config_save+0x2e>
  return ee_write(0, sizeof(config_t), global_config.config_array);
 800d996:	4a05      	ldr	r2, [pc, #20]	; (800d9ac <config_save+0x38>)
 800d998:	211c      	movs	r1, #28
 800d99a:	2000      	movs	r0, #0
 800d99c:	f000 f861 	bl	800da62 <ee_write>
 800d9a0:	4603      	mov	r3, r0
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3708      	adds	r7, #8
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
 800d9aa:	bf00      	nop
 800d9ac:	20000464 	.word	0x20000464

0800d9b0 <ee_format>:
bool ee_init(void) {
  return true;
}


bool ee_format() {
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b086      	sub	sp, #24
 800d9b4:	af00      	add	r7, sp, #0
  uint32_t error;
  HAL_FLASH_Unlock();
 800d9b6:	f003 fb21 	bl	8010ffc <HAL_FLASH_Unlock>
  FLASH_EraseInitTypeDef flashErase;

  flashErase.NbSectors = 1;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	60fb      	str	r3, [r7, #12]
  flashErase.Sector =  _EE_USE_FLASH_PAGE_OR_SECTOR;
 800d9be:	2301      	movs	r3, #1
 800d9c0:	60bb      	str	r3, [r7, #8]
  flashErase.TypeErase = FLASH_TYPEERASE_SECTORS;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	603b      	str	r3, [r7, #0]
  flashErase.Banks = _EE_FLASH_BANK;
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	607b      	str	r3, [r7, #4]
  flashErase.VoltageRange = _EE_VOLTAGE_RANGE;
 800d9ca:	2302      	movs	r3, #2
 800d9cc:	613b      	str	r3, [r7, #16]

  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 800d9ce:	f107 0214 	add.w	r2, r7, #20
 800d9d2:	463b      	mov	r3, r7
 800d9d4:	4611      	mov	r1, r2
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f003 fc82 	bl	80112e0 <HAL_FLASHEx_Erase>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d109      	bne.n	800d9f6 <ee_format+0x46>
  {
    HAL_FLASH_Lock();
 800d9e2:	f003 fb2d 	bl	8011040 <HAL_FLASH_Lock>
    if (error != 0xFFFFFFFF)
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ec:	d001      	beq.n	800d9f2 <ee_format+0x42>
      return false;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	e004      	b.n	800d9fc <ee_format+0x4c>
    else
    {
      return true;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	e002      	b.n	800d9fc <ee_format+0x4c>
    }
  }
  HAL_FLASH_Lock();
 800d9f6:	f003 fb23 	bl	8011040 <HAL_FLASH_Lock>
  return false;
 800d9fa:	2300      	movs	r3, #0
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3718      	adds	r7, #24
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <ee_read>:

bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data) {
 800da04:	b480      	push	{r7}
 800da06:	b087      	sub	sp, #28
 800da08:	af00      	add	r7, sp, #0
 800da0a:	60f8      	str	r0, [r7, #12]
 800da0c:	60b9      	str	r1, [r7, #8]
 800da0e:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 800da10:	68fa      	ldr	r2, [r7, #12]
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	4413      	add	r3, r2
 800da16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da1a:	d901      	bls.n	800da20 <ee_read+0x1c>
    return false;
 800da1c:	2300      	movs	r3, #0
 800da1e:	e01a      	b.n	800da56 <ee_read+0x52>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	617b      	str	r3, [r7, #20]
 800da24:	e010      	b.n	800da48 <ee_read+0x44>
  {
    if (data != NULL)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d00a      	beq.n	800da42 <ee_read+0x3e>
    {
      *data = (*(uint8_t*) (i + _EE_ADDR_INUSE));
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800da32:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800da36:	781a      	ldrb	r2, [r3, #0]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	701a      	strb	r2, [r3, #0]
      data++;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	3301      	adds	r3, #1
 800da40:	607b      	str	r3, [r7, #4]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	3301      	adds	r3, #1
 800da46:	617b      	str	r3, [r7, #20]
 800da48:	68ba      	ldr	r2, [r7, #8]
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	4413      	add	r3, r2
 800da4e:	697a      	ldr	r2, [r7, #20]
 800da50:	429a      	cmp	r2, r3
 800da52:	d3e8      	bcc.n	800da26 <ee_read+0x22>
    }
  }
  return true;
 800da54:	2301      	movs	r3, #1
}
 800da56:	4618      	mov	r0, r3
 800da58:	371c      	adds	r7, #28
 800da5a:	46bd      	mov	sp, r7
 800da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da60:	4770      	bx	lr

0800da62 <ee_write>:

bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data) {
 800da62:	b580      	push	{r7, lr}
 800da64:	b086      	sub	sp, #24
 800da66:	af00      	add	r7, sp, #0
 800da68:	60f8      	str	r0, [r7, #12]
 800da6a:	60b9      	str	r1, [r7, #8]
 800da6c:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 800da6e:	68fa      	ldr	r2, [r7, #12]
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	4413      	add	r3, r2
 800da74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da78:	d901      	bls.n	800da7e <ee_write+0x1c>
    return false;
 800da7a:	2300      	movs	r3, #0
 800da7c:	e02b      	b.n	800dad6 <ee_write+0x74>
  if (data == NULL)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d101      	bne.n	800da88 <ee_write+0x26>
    return false;
 800da84:	2300      	movs	r3, #0
 800da86:	e026      	b.n	800dad6 <ee_write+0x74>
  HAL_FLASH_Unlock();
 800da88:	f003 fab8 	bl	8010ffc <HAL_FLASH_Unlock>
  for (uint32_t i = 0; i < len ; i++)
 800da8c:	2300      	movs	r3, #0
 800da8e:	617b      	str	r3, [r7, #20]
 800da90:	e01a      	b.n	800dac8 <ee_write+0x66>
  {		
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i])) != HAL_OK)
 800da92:	697a      	ldr	r2, [r7, #20]
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	4413      	add	r3, r2
 800da98:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800da9c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	4413      	add	r3, r2
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	b2da      	uxtb	r2, r3
 800daaa:	f04f 0300 	mov.w	r3, #0
 800daae:	2000      	movs	r0, #0
 800dab0:	f003 fa50 	bl	8010f54 <HAL_FLASH_Program>
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d003      	beq.n	800dac2 <ee_write+0x60>
    {
      HAL_FLASH_Lock();
 800daba:	f003 fac1 	bl	8011040 <HAL_FLASH_Lock>
      return false;
 800dabe:	2300      	movs	r3, #0
 800dac0:	e009      	b.n	800dad6 <ee_write+0x74>
  for (uint32_t i = 0; i < len ; i++)
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	3301      	adds	r3, #1
 800dac6:	617b      	str	r3, [r7, #20]
 800dac8:	697a      	ldr	r2, [r7, #20]
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d3e0      	bcc.n	800da92 <ee_write+0x30>
    }
  }	
  HAL_FLASH_Lock();
 800dad0:	f003 fab6 	bl	8011040 <HAL_FLASH_Lock>
  return true;
 800dad4:	2301      	movs	r3, #1
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3718      	adds	r7, #24
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
	...

0800dae0 <buzzer_set_volume>:
  dev->end_time = osKernelGetTickCount() + duration;
  dev->start = 1;
}

// Set the volume between 0 and 100
void buzzer_set_volume(BUZ_DEV *dev, uint16_t volume) {
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b08a      	sub	sp, #40	; 0x28
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	460b      	mov	r3, r1
 800daea:	807b      	strh	r3, [r7, #2]
  if (volume > 100) volume = 100;
 800daec:	887b      	ldrh	r3, [r7, #2]
 800daee:	2b64      	cmp	r3, #100	; 0x64
 800daf0:	d901      	bls.n	800daf6 <buzzer_set_volume+0x16>
 800daf2:	2364      	movs	r3, #100	; 0x64
 800daf4:	807b      	strh	r3, [r7, #2]

  TIM_OC_InitTypeDef sConfigOC;
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800daf6:	2360      	movs	r3, #96	; 0x60
 800daf8:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = (dev->arr / 200) * volume;  // set the pulse duration
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	891b      	ldrh	r3, [r3, #8]
 800dafe:	4a19      	ldr	r2, [pc, #100]	; (800db64 <buzzer_set_volume+0x84>)
 800db00:	fba2 2303 	umull	r2, r3, r2, r3
 800db04:	099b      	lsrs	r3, r3, #6
 800db06:	b29b      	uxth	r3, r3
 800db08:	461a      	mov	r2, r3
 800db0a:	887b      	ldrh	r3, [r7, #2]
 800db0c:	fb03 f302 	mul.w	r3, r3, r2
 800db10:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800db12:	2300      	movs	r3, #0
 800db14:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800db16:	2300      	movs	r3, #0
 800db18:	61fb      	str	r3, [r7, #28]
  HAL_TIM_PWM_ConfigChannel(dev->timer, &sConfigOC, dev->channel);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6818      	ldr	r0, [r3, #0]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	685a      	ldr	r2, [r3, #4]
 800db22:	f107 030c 	add.w	r3, r7, #12
 800db26:	4619      	mov	r1, r3
 800db28:	f007 f80a 	bl	8014b40 <HAL_TIM_PWM_ConfigChannel>

  // Start the pwm channel again if it should be running
  if (dev->started)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	7a9b      	ldrb	r3, [r3, #10]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d008      	beq.n	800db46 <buzzer_set_volume+0x66>
    HAL_TIM_PWM_Start(dev->timer, dev->channel);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681a      	ldr	r2, [r3, #0]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	4619      	mov	r1, r3
 800db3e:	4610      	mov	r0, r2
 800db40:	f006 fde2 	bl	8014708 <HAL_TIM_PWM_Start>
 800db44:	e007      	b.n	800db56 <buzzer_set_volume+0x76>
  else
    HAL_TIM_PWM_Stop(dev->timer, dev->channel);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	4619      	mov	r1, r3
 800db50:	4610      	mov	r0, r2
 800db52:	f006 fe89 	bl	8014868 <HAL_TIM_PWM_Stop>

  dev->volume = volume;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	887a      	ldrh	r2, [r7, #2]
 800db5a:	819a      	strh	r2, [r3, #12]
}
 800db5c:	bf00      	nop
 800db5e:	3728      	adds	r7, #40	; 0x28
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	51eb851f 	.word	0x51eb851f

0800db68 <buzzer_set_freq>:

// Set buzzer frequency between 200 and 10kHz
void buzzer_set_freq(BUZ_DEV *dev, uint32_t frequency) {
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6039      	str	r1, [r7, #0]
  // FREQ = CORE_FREQ / ((AAR+1) * (PSC+1))
  uint32_t core_freq = HAL_RCC_GetHCLKFreq();
 800db72:	f005 fdd5 	bl	8013720 <HAL_RCC_GetHCLKFreq>
 800db76:	60f8      	str	r0, [r7, #12]
  uint32_t psc = 1;
 800db78:	2301      	movs	r3, #1
 800db7a:	60bb      	str	r3, [r7, #8]
  // guards
  if (frequency > 10000)
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	f242 7210 	movw	r2, #10000	; 0x2710
 800db82:	4293      	cmp	r3, r2
 800db84:	d903      	bls.n	800db8e <buzzer_set_freq+0x26>
    frequency = 10000;
 800db86:	f242 7310 	movw	r3, #10000	; 0x2710
 800db8a:	603b      	str	r3, [r7, #0]
 800db8c:	e004      	b.n	800db98 <buzzer_set_freq+0x30>
  else if (frequency < 200)
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	2bc7      	cmp	r3, #199	; 0xc7
 800db92:	d801      	bhi.n	800db98 <buzzer_set_freq+0x30>
    frequency = 200;
 800db94:	23c8      	movs	r3, #200	; 0xc8
 800db96:	603b      	str	r3, [r7, #0]

  dev->arr = (uint16_t)(core_freq / (frequency * psc + frequency)) - 1;
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	3301      	adds	r3, #1
 800db9c:	683a      	ldr	r2, [r7, #0]
 800db9e:	fb02 f303 	mul.w	r3, r2, r3
 800dba2:	68fa      	ldr	r2, [r7, #12]
 800dba4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	3b01      	subs	r3, #1
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	811a      	strh	r2, [r3, #8]

  // Update timer period
  dev->timer->Init.Period = dev->arr;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	891a      	ldrh	r2, [r3, #8]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	60da      	str	r2, [r3, #12]
  dev->timer->Init.Prescaler = psc;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	68ba      	ldr	r2, [r7, #8]
 800dbc2:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_Init(dev->timer);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f006 fcf9 	bl	80145c0 <HAL_TIM_PWM_Init>

  // Update pulse as the freq changed
  buzzer_set_volume(dev, dev->volume);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	899b      	ldrh	r3, [r3, #12]
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7ff ff83 	bl	800dae0 <buzzer_set_volume>
}
 800dbda:	bf00      	nop
 800dbdc:	3710      	adds	r7, #16
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}

0800dbe2 <buzzer_start>:

// Starts pwm timer
void buzzer_start(BUZ_DEV *dev) {
 800dbe2:	b580      	push	{r7, lr}
 800dbe4:	b082      	sub	sp, #8
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
  dev->started = 1;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2201      	movs	r2, #1
 800dbee:	729a      	strb	r2, [r3, #10]
  HAL_TIM_PWM_Start(dev->timer, dev->channel);  // start pwm generation
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	4610      	mov	r0, r2
 800dbfc:	f006 fd84 	bl	8014708 <HAL_TIM_PWM_Start>
}
 800dc00:	bf00      	nop
 800dc02:	3708      	adds	r7, #8
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <buzzer_stop>:

// Stops pwm timer
void buzzer_stop(BUZ_DEV *dev) {
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  dev->started = 0;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2200      	movs	r2, #0
 800dc14:	729a      	strb	r2, [r3, #10]
  HAL_TIM_PWM_Stop(dev->timer, dev->channel);  // stop pwm generation
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681a      	ldr	r2, [r3, #0]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	4619      	mov	r1, r3
 800dc20:	4610      	mov	r0, r2
 800dc22:	f006 fe21 	bl	8014868 <HAL_TIM_PWM_Stop>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800dc26:	2200      	movs	r2, #0
 800dc28:	2140      	movs	r1, #64	; 0x40
 800dc2a:	4803      	ldr	r0, [pc, #12]	; (800dc38 <buzzer_stop+0x30>)
 800dc2c:	f003 fefa 	bl	8011a24 <HAL_GPIO_WritePin>
}
 800dc30:	bf00      	nop
 800dc32:	3708      	adds	r7, #8
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}
 800dc38:	40020400 	.word	0x40020400

0800dc3c <led_off>:

static inline void led_on(){
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
}

static inline void led_off(){
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800dc40:	2201      	movs	r2, #1
 800dc42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800dc46:	4802      	ldr	r0, [pc, #8]	; (800dc50 <led_off+0x14>)
 800dc48:	f003 feec 	bl	8011a24 <HAL_GPIO_WritePin>
}
 800dc4c:	bf00      	nop
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	40020800 	.word	0x40020800

0800dc54 <go_to_sleep>:
#include "init/init.h"
#include "sleep.h"
#include "drivers/led.h"
#include "config/globals.h"

void go_to_sleep(wakeup_e source){
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	71fb      	strb	r3, [r7, #7]

	led_off();
 800dc5e:	f7ff ffed 	bl	800dc3c <led_off>
	while((HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0));
 800dc62:	bf00      	nop
 800dc64:	2104      	movs	r1, #4
 800dc66:	482b      	ldr	r0, [pc, #172]	; (800dd14 <go_to_sleep+0xc0>)
 800dc68:	f003 fec4 	bl	80119f4 <HAL_GPIO_ReadPin>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d0f8      	beq.n	800dc64 <go_to_sleep+0x10>

	osDelay(10);
 800dc72:	200a      	movs	r0, #10
 800dc74:	f00a ff48 	bl	8018b08 <osDelay>


	__HAL_GPIO_EXTI_CLEAR_IT(BUTTON_Pin);
 800dc78:	4b27      	ldr	r3, [pc, #156]	; (800dd18 <go_to_sleep+0xc4>)
 800dc7a:	2204      	movs	r2, #4
 800dc7c:	615a      	str	r2, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(IMU_INT1_Pin);
 800dc7e:	4b26      	ldr	r3, [pc, #152]	; (800dd18 <go_to_sleep+0xc4>)
 800dc80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dc84:	615a      	str	r2, [r3, #20]

	if(source == WAKEUP_BUTTON){
 800dc86:	79fb      	ldrb	r3, [r7, #7]
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d103      	bne.n	800dc94 <go_to_sleep+0x40>
		HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800dc8c:	2008      	movs	r0, #8
 800dc8e:	f003 f945 	bl	8010f1c <HAL_NVIC_EnableIRQ>
 800dc92:	e01e      	b.n	800dcd2 <go_to_sleep+0x7e>
	} else if(source == WAKEUP_ACCEL){
 800dc94:	79fb      	ldrb	r3, [r7, #7]
 800dc96:	2b02      	cmp	r3, #2
 800dc98:	d10c      	bne.n	800dcb4 <go_to_sleep+0x60>
		osEventFlagsSet(sensor_mode_id, SENSOR_MODE_WAKEUP);
 800dc9a:	4b20      	ldr	r3, [pc, #128]	; (800dd1c <go_to_sleep+0xc8>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2102      	movs	r1, #2
 800dca0:	4618      	mov	r0, r3
 800dca2:	f00a ffb9 	bl	8018c18 <osEventFlagsSet>
		osDelay(10);
 800dca6:	200a      	movs	r0, #10
 800dca8:	f00a ff2e 	bl	8018b08 <osDelay>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800dcac:	2028      	movs	r0, #40	; 0x28
 800dcae:	f003 f935 	bl	8010f1c <HAL_NVIC_EnableIRQ>
 800dcb2:	e00e      	b.n	800dcd2 <go_to_sleep+0x7e>
	} else {
		osEventFlagsSet(sensor_mode_id, SENSOR_MODE_WAKEUP);
 800dcb4:	4b19      	ldr	r3, [pc, #100]	; (800dd1c <go_to_sleep+0xc8>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	2102      	movs	r1, #2
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f00a ffac 	bl	8018c18 <osEventFlagsSet>
		osDelay(10);
 800dcc0:	200a      	movs	r0, #10
 800dcc2:	f00a ff21 	bl	8018b08 <osDelay>
		HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800dcc6:	2008      	movs	r0, #8
 800dcc8:	f003 f928 	bl	8010f1c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800dccc:	2028      	movs	r0, #40	; 0x28
 800dcce:	f003 f925 	bl	8010f1c <HAL_NVIC_EnableIRQ>
	}


	/* Disable Systick interrupt */
	HAL_SuspendTick();
 800dcd2:	f000 fce5 	bl	800e6a0 <HAL_SuspendTick>

    /* Go to sleep */
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800dcd6:	2101      	movs	r1, #1
 800dcd8:	2001      	movs	r0, #1
 800dcda:	f005 f8b5 	bl	8012e48 <HAL_PWR_EnterSTOPMode>

    /* Return from sleep */
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800dcde:	2008      	movs	r0, #8
 800dce0:	f003 f92a 	bl	8010f38 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800dce4:	2028      	movs	r0, #40	; 0x28
 800dce6:	f003 f927 	bl	8010f38 <HAL_NVIC_DisableIRQ>

    SystemClock_Config();
 800dcea:	f000 fe95 	bl	800ea18 <SystemClock_Config>
    HAL_ResumeTick();
 800dcee:	f000 fce9 	bl	800e6c4 <HAL_ResumeTick>

    if(source == WAKEUP_ACCEL || source == WAKEUP_BOTH){
 800dcf2:	79fb      	ldrb	r3, [r7, #7]
 800dcf4:	2b02      	cmp	r3, #2
 800dcf6:	d002      	beq.n	800dcfe <go_to_sleep+0xaa>
 800dcf8:	79fb      	ldrb	r3, [r7, #7]
 800dcfa:	2b03      	cmp	r3, #3
 800dcfc:	d105      	bne.n	800dd0a <go_to_sleep+0xb6>
    	/* Configure IMU to go back to continous mode */
    	osEventFlagsSet(sensor_mode_id, SENSOR_MODE_CONTINUOUS);
 800dcfe:	4b07      	ldr	r3, [pc, #28]	; (800dd1c <go_to_sleep+0xc8>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2101      	movs	r1, #1
 800dd04:	4618      	mov	r0, r3
 800dd06:	f00a ff87 	bl	8018c18 <osEventFlagsSet>
    }
}
 800dd0a:	bf00      	nop
 800dd0c:	3708      	adds	r7, #8
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	40020000 	.word	0x40020000
 800dd18:	40013c00 	.word	0x40013c00
 800dd1c:	20005528 	.word	0x20005528

0800dd20 <wake_up>:

void wake_up(){
 800dd20:	b480      	push	{r7}
 800dd22:	af00      	add	r7, sp, #0
	/* Clear Wake Up Flag */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800dd24:	4b05      	ldr	r3, [pc, #20]	; (800dd3c <wake_up+0x1c>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4a04      	ldr	r2, [pc, #16]	; (800dd3c <wake_up+0x1c>)
 800dd2a:	f043 0304 	orr.w	r3, r3, #4
 800dd2e:	6013      	str	r3, [r2, #0]
}
 800dd30:	bf00      	nop
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr
 800dd3a:	bf00      	nop
 800dd3c:	40007000 	.word	0x40007000

0800dd40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	4603      	mov	r3, r0
 800dd48:	80fb      	strh	r3, [r7, #6]
  if((GPIO_Pin == BUTTON_Pin) || (GPIO_Pin == IMU_INT1_Pin)){
 800dd4a:	88fb      	ldrh	r3, [r7, #6]
 800dd4c:	2b04      	cmp	r3, #4
 800dd4e:	d003      	beq.n	800dd58 <HAL_GPIO_EXTI_Callback+0x18>
 800dd50:	88fb      	ldrh	r3, [r7, #6]
 800dd52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd56:	d101      	bne.n	800dd5c <HAL_GPIO_EXTI_Callback+0x1c>
	  wake_up();
 800dd58:	f7ff ffe2 	bl	800dd20 <wake_up>
  }
}
 800dd5c:	bf00      	nop
 800dd5e:	3708      	adds	r7, #8
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <led_on>:
static inline void led_on(){
 800dd64:	b580      	push	{r7, lr}
 800dd66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800dd68:	2200      	movs	r2, #0
 800dd6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800dd6e:	4802      	ldr	r0, [pc, #8]	; (800dd78 <led_on+0x14>)
 800dd70:	f003 fe58 	bl	8011a24 <HAL_GPIO_WritePin>
}
 800dd74:	bf00      	nop
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	40020800 	.word	0x40020800

0800dd7c <led_off>:
static inline void led_off(){
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800dd80:	2201      	movs	r2, #1
 800dd82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800dd86:	4802      	ldr	r0, [pc, #8]	; (800dd90 <led_off+0x14>)
 800dd88:	f003 fe4c 	bl	8011a24 <HAL_GPIO_WritePin>
}
 800dd8c:	bf00      	nop
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	40020800 	.word	0x40020800

0800dd94 <update_fsm>:
	"DESCENT",
	"DEPLOYMENT",
	"RECOVERY",
};

void update_fsm(fsm_t* fsm){
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b086      	sub	sp, #24
 800dd98:	af02      	add	r7, sp, #8
 800dd9a:	6078      	str	r0, [r7, #4]
	fsm_state_e old_state = fsm->flight_state;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	73fb      	strb	r3, [r7, #15]
	switch(fsm->flight_state){
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	3b01      	subs	r3, #1
 800dda8:	2b06      	cmp	r3, #6
 800ddaa:	d82d      	bhi.n	800de08 <update_fsm+0x74>
 800ddac:	a201      	add	r2, pc, #4	; (adr r2, 800ddb4 <update_fsm+0x20>)
 800ddae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddb2:	bf00      	nop
 800ddb4:	0800ddd1 	.word	0x0800ddd1
 800ddb8:	0800ddd9 	.word	0x0800ddd9
 800ddbc:	0800dde1 	.word	0x0800dde1
 800ddc0:	0800dde9 	.word	0x0800dde9
 800ddc4:	0800ddf1 	.word	0x0800ddf1
 800ddc8:	0800ddf9 	.word	0x0800ddf9
 800ddcc:	0800de01 	.word	0x0800de01
	case IDLE:
		check_idle_state(fsm);
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f000 f83b 	bl	800de4c <check_idle_state>
		break;
 800ddd6:	e018      	b.n	800de0a <update_fsm+0x76>
	case DEEP_SLEEP:
		check_deepsleep_state(fsm);
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 f8a3 	bl	800df24 <check_deepsleep_state>
		break;
 800ddde:	e014      	b.n	800de0a <update_fsm+0x76>
	case READY:
		check_ready_state(fsm);
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f000 f8eb 	bl	800dfbc <check_ready_state>
		break;
 800dde6:	e010      	b.n	800de0a <update_fsm+0x76>
	case ASCENT:
		check_ascent_state(fsm);
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f000 f931 	bl	800e050 <check_ascent_state>
		break;
 800ddee:	e00c      	b.n	800de0a <update_fsm+0x76>
	case DESCENT:
		check_descent_state(fsm);
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f000 f937 	bl	800e064 <check_descent_state>
		break;
 800ddf6:	e008      	b.n	800de0a <update_fsm+0x76>
	case DEPLOYMENT:
		check_deplyoment_state(fsm);
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f000 f93d 	bl	800e078 <check_deplyoment_state>
		break;
 800ddfe:	e004      	b.n	800de0a <update_fsm+0x76>
	case RECOVERY:
		check_recovery_state(fsm);
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 f943 	bl	800e08c <check_recovery_state>
		break;
 800de06:	e000      	b.n	800de0a <update_fsm+0x76>
	default:
		break;
 800de08:	bf00      	nop
	}

	if(old_state != fsm->flight_state){
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	7bfa      	ldrb	r2, [r7, #15]
 800de10:	429a      	cmp	r2, r3
 800de12:	d011      	beq.n	800de38 <update_fsm+0xa4>
		log_warn("State Transition %s to %s", state_name[old_state], state_name[fsm->flight_state]);
 800de14:	490a      	ldr	r1, [pc, #40]	; (800de40 <update_fsm+0xac>)
 800de16:	7bfb      	ldrb	r3, [r7, #15]
 800de18:	4a0a      	ldr	r2, [pc, #40]	; (800de44 <update_fsm+0xb0>)
 800de1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de1e:	687a      	ldr	r2, [r7, #4]
 800de20:	7812      	ldrb	r2, [r2, #0]
 800de22:	4610      	mov	r0, r2
 800de24:	4a07      	ldr	r2, [pc, #28]	; (800de44 <update_fsm+0xb0>)
 800de26:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800de2a:	9201      	str	r2, [sp, #4]
 800de2c:	9300      	str	r3, [sp, #0]
 800de2e:	4b06      	ldr	r3, [pc, #24]	; (800de48 <update_fsm+0xb4>)
 800de30:	223a      	movs	r2, #58	; 0x3a
 800de32:	2003      	movs	r0, #3
 800de34:	f002 fba2 	bl	801057c <log_log>
	}
}
 800de38:	bf00      	nop
 800de3a:	3710      	adds	r7, #16
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}
 800de40:	0801e71b 	.word	0x0801e71b
 800de44:	0801eae0 	.word	0x0801eae0
 800de48:	0801e724 	.word	0x0801e724

0800de4c <check_idle_state>:

static void check_idle_state(fsm_t* fsm){
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]

	/* When button is pressed */
	if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0){
 800de54:	2104      	movs	r1, #4
 800de56:	4832      	ldr	r0, [pc, #200]	; (800df20 <check_idle_state+0xd4>)
 800de58:	f003 fdcc 	bl	80119f4 <HAL_GPIO_ReadPin>
 800de5c:	4603      	mov	r3, r0
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d111      	bne.n	800de86 <check_idle_state+0x3a>
		led_off();
 800de62:	f7ff ff8b 	bl	800dd7c <led_off>
		if(fsm->memory[1] == 0){
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d105      	bne.n	800de7a <check_idle_state+0x2e>
			fsm->memory[0]++;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	1c5a      	adds	r2, r3, #1
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	605a      	str	r2, [r3, #4]
 800de78:	e017      	b.n	800deaa <check_idle_state+0x5e>
		} else {
			fsm->memory[2]++;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	68db      	ldr	r3, [r3, #12]
 800de7e:	1c5a      	adds	r2, r3, #1
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	60da      	str	r2, [r3, #12]
 800de84:	e011      	b.n	800deaa <check_idle_state+0x5e>
		}
	}
	/* When button is not pressed */
	else {
		/* Short button press */
		if(fsm->memory[0] > SHORT_BUTTON_PRESS){
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	685b      	ldr	r3, [r3, #4]
 800de8a:	2b32      	cmp	r3, #50	; 0x32
 800de8c:	d907      	bls.n	800de9e <check_idle_state+0x52>
			led_on();
 800de8e:	f7ff ff69 	bl	800dd64 <led_on>
			fsm->memory[1]++; // Count timeout between button press
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	689b      	ldr	r3, [r3, #8]
 800de96:	1c5a      	adds	r2, r3, #1
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	609a      	str	r2, [r3, #8]
 800de9c:	e005      	b.n	800deaa <check_idle_state+0x5e>
		}
		/* Button bounce or no press */
		else{
			fsm->memory[0] = 0;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2200      	movs	r2, #0
 800dea2:	605a      	str	r2, [r3, #4]
			fsm->memory[2] = 0;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2200      	movs	r2, #0
 800dea8:	60da      	str	r2, [r3, #12]
		}
	}

	/* Long button press */
	if (fsm->memory[0] > LONG_BUTTON_PRESS){
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800deb2:	d90d      	bls.n	800ded0 <check_idle_state+0x84>
		/* State Transition to READY */
		fsm->memory[0] = 0;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2200      	movs	r2, #0
 800deb8:	605a      	str	r2, [r3, #4]
		fsm->memory[1] = 0;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2200      	movs	r2, #0
 800debe:	609a      	str	r2, [r3, #8]
		fsm->memory[2] = 0;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2200      	movs	r2, #0
 800dec4:	60da      	str	r2, [r3, #12]
		fsm->flight_state = READY;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2203      	movs	r2, #3
 800deca:	701a      	strb	r2, [r3, #0]
		state_transition_idle_ready();
 800decc:	f000 f90a 	bl	800e0e4 <state_transition_idle_ready>
	}

	/* Long press after short press */
	if(fsm->memory[2] > LONG_BUTTON_PRESS){
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	68db      	ldr	r3, [r3, #12]
 800ded4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ded8:	d90d      	bls.n	800def6 <check_idle_state+0xaa>
		/* State Transition to DEEP_SLEEP */
		fsm->memory[0] = 0;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2200      	movs	r2, #0
 800dede:	605a      	str	r2, [r3, #4]
		fsm->memory[1] = 0;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2200      	movs	r2, #0
 800dee4:	609a      	str	r2, [r3, #8]
		fsm->memory[2] = 0;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2200      	movs	r2, #0
 800deea:	60da      	str	r2, [r3, #12]
		fsm->flight_state = DEEP_SLEEP;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2202      	movs	r2, #2
 800def0:	701a      	strb	r2, [r3, #0]
		state_transition_idle_deepsleep();
 800def2:	f000 f8e3 	bl	800e0bc <state_transition_idle_deepsleep>
	}

	/* Timeout after short press */
	if(fsm->memory[1] > TIMEOUT_BETWEEN_BUTTON_PRESS){
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800defe:	d90a      	bls.n	800df16 <check_idle_state+0xca>
		led_off();
 800df00:	f7ff ff3c 	bl	800dd7c <led_off>
		fsm->memory[0] = 0;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2200      	movs	r2, #0
 800df08:	605a      	str	r2, [r3, #4]
		fsm->memory[1] = 0;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2200      	movs	r2, #0
 800df0e:	609a      	str	r2, [r3, #8]
		fsm->memory[2] = 0;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2200      	movs	r2, #0
 800df14:	60da      	str	r2, [r3, #12]
	}
}
 800df16:	bf00      	nop
 800df18:	3708      	adds	r7, #8
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	40020000 	.word	0x40020000

0800df24 <check_deepsleep_state>:

static void check_deepsleep_state(fsm_t* fsm){
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
	led_on();
 800df2c:	f7ff ff1a 	bl	800dd64 <led_on>
	/* When button is pressed */
	if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0){
 800df30:	2104      	movs	r1, #4
 800df32:	4821      	ldr	r0, [pc, #132]	; (800dfb8 <check_deepsleep_state+0x94>)
 800df34:	f003 fd5e 	bl	80119f4 <HAL_GPIO_ReadPin>
 800df38:	4603      	mov	r3, r0
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d10f      	bne.n	800df5e <check_deepsleep_state+0x3a>
		if(fsm->memory[1] == 0){
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	689b      	ldr	r3, [r3, #8]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d105      	bne.n	800df52 <check_deepsleep_state+0x2e>
			fsm->memory[0]++;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	1c5a      	adds	r2, r3, #1
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	605a      	str	r2, [r3, #4]
 800df50:	e00a      	b.n	800df68 <check_deepsleep_state+0x44>
		} else {
			fsm->memory[2]++;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	68db      	ldr	r3, [r3, #12]
 800df56:	1c5a      	adds	r2, r3, #1
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	60da      	str	r2, [r3, #12]
 800df5c:	e004      	b.n	800df68 <check_deepsleep_state+0x44>
		}
	}
	/* When button is not pressed */
	else {
		fsm->memory[1]++; // Count timeout between button press
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	689b      	ldr	r3, [r3, #8]
 800df62:	1c5a      	adds	r2, r3, #1
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	609a      	str	r2, [r3, #8]
	}

	/* Long press after short press */
	if(fsm->memory[2] > LONG_BUTTON_PRESS){
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	68db      	ldr	r3, [r3, #12]
 800df6c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800df70:	d90d      	bls.n	800df8e <check_deepsleep_state+0x6a>
		/* State Transition to IDLE */
		fsm->memory[0] = 0;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2200      	movs	r2, #0
 800df76:	605a      	str	r2, [r3, #4]
		fsm->memory[1] = 0;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2200      	movs	r2, #0
 800df7c:	609a      	str	r2, [r3, #8]
		fsm->memory[2] = 0;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2200      	movs	r2, #0
 800df82:	60da      	str	r2, [r3, #12]
		fsm->flight_state = IDLE;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2201      	movs	r2, #1
 800df88:	701a      	strb	r2, [r3, #0]
		state_transition_deepsleep_idle();
 800df8a:	f000 f889 	bl	800e0a0 <state_transition_deepsleep_idle>
	}

	/* Timeout after short press */
	if(fsm->memory[1] > TIMEOUT_BETWEEN_BUTTON_PRESS){
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	689b      	ldr	r3, [r3, #8]
 800df92:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800df96:	d90b      	bls.n	800dfb0 <check_deepsleep_state+0x8c>
		fsm->memory[0] = 0;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2200      	movs	r2, #0
 800df9c:	605a      	str	r2, [r3, #4]
		fsm->memory[1] = 0;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	609a      	str	r2, [r3, #8]
		fsm->memory[2] = 0;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	60da      	str	r2, [r3, #12]
		/* Go back to sleep */
		go_to_sleep(WAKEUP_BUTTON);
 800dfaa:	2001      	movs	r0, #1
 800dfac:	f7ff fe52 	bl	800dc54 <go_to_sleep>
	}
}
 800dfb0:	bf00      	nop
 800dfb2:	3708      	adds	r7, #8
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}
 800dfb8:	40020000 	.word	0x40020000

0800dfbc <check_ready_state>:

static void check_ready_state(fsm_t* fsm){
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b082      	sub	sp, #8
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
	led_on();
 800dfc4:	f7ff fece 	bl	800dd64 <led_on>
	/* When button is pressed */
	if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0){
 800dfc8:	2104      	movs	r1, #4
 800dfca:	4820      	ldr	r0, [pc, #128]	; (800e04c <check_ready_state+0x90>)
 800dfcc:	f003 fd12 	bl	80119f4 <HAL_GPIO_ReadPin>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d108      	bne.n	800dfe8 <check_ready_state+0x2c>
		fsm->memory[1] = 0;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	609a      	str	r2, [r3, #8]
		fsm->memory[0]++;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	685b      	ldr	r3, [r3, #4]
 800dfe0:	1c5a      	adds	r2, r3, #1
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	605a      	str	r2, [r3, #4]
 800dfe6:	e007      	b.n	800dff8 <check_ready_state+0x3c>
	}
	/* When button is not pressed */
	else {
		fsm->memory[1]++;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	689b      	ldr	r3, [r3, #8]
 800dfec:	1c5a      	adds	r2, r3, #1
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	609a      	str	r2, [r3, #8]
		fsm->memory[0] = 0; // Count timeout
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2200      	movs	r2, #0
 800dff6:	605a      	str	r2, [r3, #4]
	}

	/* Long button press */
	if (fsm->memory[0] > LONG_BUTTON_PRESS){
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e000:	d90d      	bls.n	800e01e <check_ready_state+0x62>
		/* State Transition to IDLE */
		fsm->memory[0] = 0;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2200      	movs	r2, #0
 800e006:	605a      	str	r2, [r3, #4]
		fsm->memory[1] = 0;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2200      	movs	r2, #0
 800e00c:	609a      	str	r2, [r3, #8]
		fsm->memory[2] = 0;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2200      	movs	r2, #0
 800e012:	60da      	str	r2, [r3, #12]
		fsm->flight_state = IDLE;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2201      	movs	r2, #1
 800e018:	701a      	strb	r2, [r3, #0]
		state_transition_ready_idle();
 800e01a:	f000 f891 	bl	800e140 <state_transition_ready_idle>
	}

	if (fsm->memory[1] > READY_TIMEOUT){
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	689b      	ldr	r3, [r3, #8]
 800e022:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e026:	d90d      	bls.n	800e044 <check_ready_state+0x88>
		/* Go to sleep */
		fsm->memory[0] = 0;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2200      	movs	r2, #0
 800e02c:	605a      	str	r2, [r3, #4]
		fsm->memory[1] = 0;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2200      	movs	r2, #0
 800e032:	609a      	str	r2, [r3, #8]
		fsm->memory[2] = 0;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2200      	movs	r2, #0
 800e038:	60da      	str	r2, [r3, #12]
		led_off();
 800e03a:	f7ff fe9f 	bl	800dd7c <led_off>
		go_to_sleep(WAKEUP_BOTH);
 800e03e:	2003      	movs	r0, #3
 800e040:	f7ff fe08 	bl	800dc54 <go_to_sleep>
	}
}
 800e044:	bf00      	nop
 800e046:	3708      	adds	r7, #8
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}
 800e04c:	40020000 	.word	0x40020000

0800e050 <check_ascent_state>:

static void check_ascent_state(fsm_t* fsm){
 800e050:	b480      	push	{r7}
 800e052:	b083      	sub	sp, #12
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]

}
 800e058:	bf00      	nop
 800e05a:	370c      	adds	r7, #12
 800e05c:	46bd      	mov	sp, r7
 800e05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e062:	4770      	bx	lr

0800e064 <check_descent_state>:

static void check_descent_state(fsm_t* fsm){
 800e064:	b480      	push	{r7}
 800e066:	b083      	sub	sp, #12
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]

}
 800e06c:	bf00      	nop
 800e06e:	370c      	adds	r7, #12
 800e070:	46bd      	mov	sp, r7
 800e072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e076:	4770      	bx	lr

0800e078 <check_deplyoment_state>:

static void check_deplyoment_state(fsm_t* fsm){
 800e078:	b480      	push	{r7}
 800e07a:	b083      	sub	sp, #12
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]

}
 800e080:	bf00      	nop
 800e082:	370c      	adds	r7, #12
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr

0800e08c <check_recovery_state>:

static void check_recovery_state(fsm_t* fsm){
 800e08c:	b480      	push	{r7}
 800e08e:	b083      	sub	sp, #12
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]

}
 800e094:	bf00      	nop
 800e096:	370c      	adds	r7, #12
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr

0800e0a0 <state_transition_deepsleep_idle>:
#include "config/config.h"
#include "drivers/led.h"
#include "drivers/sleep.h"

/* Transition Deep Sleep -> Idle */
void state_transition_deepsleep_idle(){
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	af00      	add	r7, sp, #0
	osEventFlagsSet(buzzer_event_id, BEEP_OK);
 800e0a4:	4b04      	ldr	r3, [pc, #16]	; (800e0b8 <state_transition_deepsleep_idle+0x18>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2101      	movs	r1, #1
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f00a fdb4 	bl	8018c18 <osEventFlagsSet>
	init_idle();
 800e0b0:	f000 fc60 	bl	800e974 <init_idle>
}
 800e0b4:	bf00      	nop
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	20005320 	.word	0x20005320

0800e0bc <state_transition_idle_deepsleep>:

/* Transition Idle -> Deep Sleep */
void state_transition_idle_deepsleep(){
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	af00      	add	r7, sp, #0
	osEventFlagsSet(buzzer_event_id, BEEP_NOK);
 800e0c0:	4b07      	ldr	r3, [pc, #28]	; (800e0e0 <state_transition_idle_deepsleep+0x24>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	2102      	movs	r1, #2
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f00a fda6 	bl	8018c18 <osEventFlagsSet>
	/* Give it some time to beep */
	osDelay(100);
 800e0cc:	2064      	movs	r0, #100	; 0x64
 800e0ce:	f00a fd1b 	bl	8018b08 <osDelay>
	init_deepsleep();
 800e0d2:	f000 fc65 	bl	800e9a0 <init_deepsleep>
	go_to_sleep(WAKEUP_BUTTON);
 800e0d6:	2001      	movs	r0, #1
 800e0d8:	f7ff fdbc 	bl	800dc54 <go_to_sleep>
}
 800e0dc:	bf00      	nop
 800e0de:	bd80      	pop	{r7, pc}
 800e0e0:	20005320 	.word	0x20005320

0800e0e4 <state_transition_idle_ready>:

/* Transition Idle -> Ready */
void state_transition_idle_ready(){
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	af00      	add	r7, sp, #0
	osThreadNew(task_sensor_read, NULL, &task_sensor_read_attributes);
 800e0e8:	4a0d      	ldr	r2, [pc, #52]	; (800e120 <state_transition_idle_ready+0x3c>)
 800e0ea:	2100      	movs	r1, #0
 800e0ec:	480d      	ldr	r0, [pc, #52]	; (800e124 <state_transition_idle_ready+0x40>)
 800e0ee:	f00a fc41 	bl	8018974 <osThreadNew>
	osThreadNew(task_state_est, NULL, &task_state_est_attributes);
 800e0f2:	4a0d      	ldr	r2, [pc, #52]	; (800e128 <state_transition_idle_ready+0x44>)
 800e0f4:	2100      	movs	r1, #0
 800e0f6:	480d      	ldr	r0, [pc, #52]	; (800e12c <state_transition_idle_ready+0x48>)
 800e0f8:	f00a fc3c 	bl	8018974 <osThreadNew>
	if(global_config.config.use_telemetry){
 800e0fc:	4b0c      	ldr	r3, [pc, #48]	; (800e130 <state_transition_idle_ready+0x4c>)
 800e0fe:	7c1b      	ldrb	r3, [r3, #16]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d004      	beq.n	800e10e <state_transition_idle_ready+0x2a>
		osThreadNew(task_telemetry, NULL, &task_telemetry_attributes);
 800e104:	4a0b      	ldr	r2, [pc, #44]	; (800e134 <state_transition_idle_ready+0x50>)
 800e106:	2100      	movs	r1, #0
 800e108:	480b      	ldr	r0, [pc, #44]	; (800e138 <state_transition_idle_ready+0x54>)
 800e10a:	f00a fc33 	bl	8018974 <osThreadNew>
	}
	osEventFlagsSet(buzzer_event_id, BEEP_READY);
 800e10e:	4b0b      	ldr	r3, [pc, #44]	; (800e13c <state_transition_idle_ready+0x58>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	2104      	movs	r1, #4
 800e114:	4618      	mov	r0, r3
 800e116:	f00a fd7f 	bl	8018c18 <osEventFlagsSet>
}
 800e11a:	bf00      	nop
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	0801eb18 	.word	0x0801eb18
 800e124:	0800ffa5 	.word	0x0800ffa5
 800e128:	0801eb60 	.word	0x0801eb60
 800e12c:	0801004d 	.word	0x0801004d
 800e130:	20000464 	.word	0x20000464
 800e134:	0801ebf0 	.word	0x0801ebf0
 800e138:	0801015d 	.word	0x0801015d
 800e13c:	20005320 	.word	0x20005320

0800e140 <state_transition_ready_idle>:

/* Transition Ready -> Idle */
void state_transition_ready_idle(){
 800e140:	b580      	push	{r7, lr}
 800e142:	af00      	add	r7, sp, #0
	osEventFlagsSet(sensor_mode_id, SENSOR_MODE_SHUTDOWN);
 800e144:	4b09      	ldr	r3, [pc, #36]	; (800e16c <state_transition_ready_idle+0x2c>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	2103      	movs	r1, #3
 800e14a:	4618      	mov	r0, r3
 800e14c:	f00a fd64 	bl	8018c18 <osEventFlagsSet>
	osEventFlagsSet(state_est_mode_id, STATE_EST_MODE_SHUTDOWN);
 800e150:	4b07      	ldr	r3, [pc, #28]	; (800e170 <state_transition_ready_idle+0x30>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2103      	movs	r1, #3
 800e156:	4618      	mov	r0, r3
 800e158:	f00a fd5e 	bl	8018c18 <osEventFlagsSet>
	osEventFlagsSet(buzzer_event_id, BEEP_NOT_READY);
 800e15c:	4b05      	ldr	r3, [pc, #20]	; (800e174 <state_transition_ready_idle+0x34>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	2105      	movs	r1, #5
 800e162:	4618      	mov	r0, r3
 800e164:	f00a fd58 	bl	8018c18 <osEventFlagsSet>
}
 800e168:	bf00      	nop
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	20005528 	.word	0x20005528
 800e170:	20005524 	.word	0x20005524
 800e174:	20005320 	.word	0x20005320

0800e178 <main>:
#include "main.h"
#include "init/init.h"
#include "usbd_cdc_if.h"


int main(void) {
 800e178:	b580      	push	{r7, lr}
 800e17a:	af00      	add	r7, sp, #0

  init();
 800e17c:	f000 fb3a 	bl	800e7f4 <init>

  while (1) {
 800e180:	e7fe      	b.n	800e180 <main+0x8>
	...

0800e184 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a08      	ldr	r2, [pc, #32]	; (800e1b4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800e192:	4293      	cmp	r3, r2
 800e194:	d102      	bne.n	800e19c <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800e196:	f002 fac7 	bl	8010728 <HAL_IncTick>
  }
  else if (htim->Instance == TIM5) {
	CDC_Transmit_Elapsed();
  }
}
 800e19a:	e006      	b.n	800e1aa <HAL_TIM_PeriodElapsedCallback+0x26>
  else if (htim->Instance == TIM5) {
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4a05      	ldr	r2, [pc, #20]	; (800e1b8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d101      	bne.n	800e1aa <HAL_TIM_PeriodElapsedCallback+0x26>
	CDC_Transmit_Elapsed();
 800e1a6:	f00e fc79 	bl	801ca9c <CDC_Transmit_Elapsed>
}
 800e1aa:	bf00      	nop
 800e1ac:	3708      	adds	r7, #8
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop
 800e1b4:	40010000 	.word	0x40010000
 800e1b8:	40000c00 	.word	0x40000c00

0800e1bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	607b      	str	r3, [r7, #4]
 800e1c6:	4b12      	ldr	r3, [pc, #72]	; (800e210 <HAL_MspInit+0x54>)
 800e1c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1ca:	4a11      	ldr	r2, [pc, #68]	; (800e210 <HAL_MspInit+0x54>)
 800e1cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e1d0:	6453      	str	r3, [r2, #68]	; 0x44
 800e1d2:	4b0f      	ldr	r3, [pc, #60]	; (800e210 <HAL_MspInit+0x54>)
 800e1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e1da:	607b      	str	r3, [r7, #4]
 800e1dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e1de:	2300      	movs	r3, #0
 800e1e0:	603b      	str	r3, [r7, #0]
 800e1e2:	4b0b      	ldr	r3, [pc, #44]	; (800e210 <HAL_MspInit+0x54>)
 800e1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1e6:	4a0a      	ldr	r2, [pc, #40]	; (800e210 <HAL_MspInit+0x54>)
 800e1e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e1ec:	6413      	str	r3, [r2, #64]	; 0x40
 800e1ee:	4b08      	ldr	r3, [pc, #32]	; (800e210 <HAL_MspInit+0x54>)
 800e1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e1f6:	603b      	str	r3, [r7, #0]
 800e1f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	210f      	movs	r1, #15
 800e1fe:	f06f 0001 	mvn.w	r0, #1
 800e202:	f002 fe6f 	bl	8010ee4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e206:	bf00      	nop
 800e208:	3708      	adds	r7, #8
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	bf00      	nop
 800e210:	40023800 	.word	0x40023800

0800e214 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b08a      	sub	sp, #40	; 0x28
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e21c:	f107 0314 	add.w	r3, r7, #20
 800e220:	2200      	movs	r2, #0
 800e222:	601a      	str	r2, [r3, #0]
 800e224:	605a      	str	r2, [r3, #4]
 800e226:	609a      	str	r2, [r3, #8]
 800e228:	60da      	str	r2, [r3, #12]
 800e22a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	4a17      	ldr	r2, [pc, #92]	; (800e290 <HAL_ADC_MspInit+0x7c>)
 800e232:	4293      	cmp	r3, r2
 800e234:	d127      	bne.n	800e286 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e236:	2300      	movs	r3, #0
 800e238:	613b      	str	r3, [r7, #16]
 800e23a:	4b16      	ldr	r3, [pc, #88]	; (800e294 <HAL_ADC_MspInit+0x80>)
 800e23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e23e:	4a15      	ldr	r2, [pc, #84]	; (800e294 <HAL_ADC_MspInit+0x80>)
 800e240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e244:	6453      	str	r3, [r2, #68]	; 0x44
 800e246:	4b13      	ldr	r3, [pc, #76]	; (800e294 <HAL_ADC_MspInit+0x80>)
 800e248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e24a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e24e:	613b      	str	r3, [r7, #16]
 800e250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e252:	2300      	movs	r3, #0
 800e254:	60fb      	str	r3, [r7, #12]
 800e256:	4b0f      	ldr	r3, [pc, #60]	; (800e294 <HAL_ADC_MspInit+0x80>)
 800e258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e25a:	4a0e      	ldr	r2, [pc, #56]	; (800e294 <HAL_ADC_MspInit+0x80>)
 800e25c:	f043 0301 	orr.w	r3, r3, #1
 800e260:	6313      	str	r3, [r2, #48]	; 0x30
 800e262:	4b0c      	ldr	r3, [pc, #48]	; (800e294 <HAL_ADC_MspInit+0x80>)
 800e264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e266:	f003 0301 	and.w	r3, r3, #1
 800e26a:	60fb      	str	r3, [r7, #12]
 800e26c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = V_BAT_Pin|LIGHT_Pin;
 800e26e:	2303      	movs	r3, #3
 800e270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e272:	2303      	movs	r3, #3
 800e274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e276:	2300      	movs	r3, #0
 800e278:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e27a:	f107 0314 	add.w	r3, r7, #20
 800e27e:	4619      	mov	r1, r3
 800e280:	4805      	ldr	r0, [pc, #20]	; (800e298 <HAL_ADC_MspInit+0x84>)
 800e282:	f003 f94f 	bl	8011524 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800e286:	bf00      	nop
 800e288:	3728      	adds	r7, #40	; 0x28
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	40012000 	.word	0x40012000
 800e294:	40023800 	.word	0x40023800
 800e298:	40020000 	.word	0x40020000

0800e29c <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4a08      	ldr	r2, [pc, #32]	; (800e2cc <HAL_ADC_MspDeInit+0x30>)
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d109      	bne.n	800e2c2 <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800e2ae:	4b08      	ldr	r3, [pc, #32]	; (800e2d0 <HAL_ADC_MspDeInit+0x34>)
 800e2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2b2:	4a07      	ldr	r2, [pc, #28]	; (800e2d0 <HAL_ADC_MspDeInit+0x34>)
 800e2b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e2b8:	6453      	str	r3, [r2, #68]	; 0x44

    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    HAL_GPIO_DeInit(GPIOA, V_BAT_Pin|LIGHT_Pin);
 800e2ba:	2103      	movs	r1, #3
 800e2bc:	4805      	ldr	r0, [pc, #20]	; (800e2d4 <HAL_ADC_MspDeInit+0x38>)
 800e2be:	f003 fab5 	bl	801182c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 800e2c2:	bf00      	nop
 800e2c4:	3708      	adds	r7, #8
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
 800e2ca:	bf00      	nop
 800e2cc:	40012000 	.word	0x40012000
 800e2d0:	40023800 	.word	0x40023800
 800e2d4:	40020000 	.word	0x40020000

0800e2d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b08c      	sub	sp, #48	; 0x30
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e2e0:	f107 031c 	add.w	r3, r7, #28
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	601a      	str	r2, [r3, #0]
 800e2e8:	605a      	str	r2, [r3, #4]
 800e2ea:	609a      	str	r2, [r3, #8]
 800e2ec:	60da      	str	r2, [r3, #12]
 800e2ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4a32      	ldr	r2, [pc, #200]	; (800e3c0 <HAL_SPI_MspInit+0xe8>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d12c      	bne.n	800e354 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	61bb      	str	r3, [r7, #24]
 800e2fe:	4b31      	ldr	r3, [pc, #196]	; (800e3c4 <HAL_SPI_MspInit+0xec>)
 800e300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e302:	4a30      	ldr	r2, [pc, #192]	; (800e3c4 <HAL_SPI_MspInit+0xec>)
 800e304:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e308:	6453      	str	r3, [r2, #68]	; 0x44
 800e30a:	4b2e      	ldr	r3, [pc, #184]	; (800e3c4 <HAL_SPI_MspInit+0xec>)
 800e30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e30e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e312:	61bb      	str	r3, [r7, #24]
 800e314:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e316:	2300      	movs	r3, #0
 800e318:	617b      	str	r3, [r7, #20]
 800e31a:	4b2a      	ldr	r3, [pc, #168]	; (800e3c4 <HAL_SPI_MspInit+0xec>)
 800e31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e31e:	4a29      	ldr	r2, [pc, #164]	; (800e3c4 <HAL_SPI_MspInit+0xec>)
 800e320:	f043 0301 	orr.w	r3, r3, #1
 800e324:	6313      	str	r3, [r2, #48]	; 0x30
 800e326:	4b27      	ldr	r3, [pc, #156]	; (800e3c4 <HAL_SPI_MspInit+0xec>)
 800e328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e32a:	f003 0301 	and.w	r3, r3, #1
 800e32e:	617b      	str	r3, [r7, #20]
 800e330:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800e332:	23e0      	movs	r3, #224	; 0xe0
 800e334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e336:	2302      	movs	r3, #2
 800e338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e33a:	2300      	movs	r3, #0
 800e33c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e33e:	2303      	movs	r3, #3
 800e340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e342:	2305      	movs	r3, #5
 800e344:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e346:	f107 031c 	add.w	r3, r7, #28
 800e34a:	4619      	mov	r1, r3
 800e34c:	481e      	ldr	r0, [pc, #120]	; (800e3c8 <HAL_SPI_MspInit+0xf0>)
 800e34e:	f003 f8e9 	bl	8011524 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800e352:	e031      	b.n	800e3b8 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	4a1c      	ldr	r2, [pc, #112]	; (800e3cc <HAL_SPI_MspInit+0xf4>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d12c      	bne.n	800e3b8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e35e:	2300      	movs	r3, #0
 800e360:	613b      	str	r3, [r7, #16]
 800e362:	4b18      	ldr	r3, [pc, #96]	; (800e3c4 <HAL_SPI_MspInit+0xec>)
 800e364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e366:	4a17      	ldr	r2, [pc, #92]	; (800e3c4 <HAL_SPI_MspInit+0xec>)
 800e368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e36c:	6413      	str	r3, [r2, #64]	; 0x40
 800e36e:	4b15      	ldr	r3, [pc, #84]	; (800e3c4 <HAL_SPI_MspInit+0xec>)
 800e370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e376:	613b      	str	r3, [r7, #16]
 800e378:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e37a:	2300      	movs	r3, #0
 800e37c:	60fb      	str	r3, [r7, #12]
 800e37e:	4b11      	ldr	r3, [pc, #68]	; (800e3c4 <HAL_SPI_MspInit+0xec>)
 800e380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e382:	4a10      	ldr	r2, [pc, #64]	; (800e3c4 <HAL_SPI_MspInit+0xec>)
 800e384:	f043 0302 	orr.w	r3, r3, #2
 800e388:	6313      	str	r3, [r2, #48]	; 0x30
 800e38a:	4b0e      	ldr	r3, [pc, #56]	; (800e3c4 <HAL_SPI_MspInit+0xec>)
 800e38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e38e:	f003 0302 	and.w	r3, r3, #2
 800e392:	60fb      	str	r3, [r7, #12]
 800e394:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800e396:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800e39a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e39c:	2302      	movs	r3, #2
 800e39e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e3a4:	2303      	movs	r3, #3
 800e3a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e3a8:	2305      	movs	r3, #5
 800e3aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e3ac:	f107 031c 	add.w	r3, r7, #28
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	4807      	ldr	r0, [pc, #28]	; (800e3d0 <HAL_SPI_MspInit+0xf8>)
 800e3b4:	f003 f8b6 	bl	8011524 <HAL_GPIO_Init>
}
 800e3b8:	bf00      	nop
 800e3ba:	3730      	adds	r7, #48	; 0x30
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	40013000 	.word	0x40013000
 800e3c4:	40023800 	.word	0x40023800
 800e3c8:	40020000 	.word	0x40020000
 800e3cc:	40003800 	.word	0x40003800
 800e3d0:	40020400 	.word	0x40020400

0800e3d4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4a10      	ldr	r2, [pc, #64]	; (800e424 <HAL_SPI_MspDeInit+0x50>)
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d10a      	bne.n	800e3fc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800e3e6:	4b10      	ldr	r3, [pc, #64]	; (800e428 <HAL_SPI_MspDeInit+0x54>)
 800e3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3ea:	4a0f      	ldr	r2, [pc, #60]	; (800e428 <HAL_SPI_MspDeInit+0x54>)
 800e3ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e3f0:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800e3f2:	21e0      	movs	r1, #224	; 0xe0
 800e3f4:	480d      	ldr	r0, [pc, #52]	; (800e42c <HAL_SPI_MspDeInit+0x58>)
 800e3f6:	f003 fa19 	bl	801182c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 800e3fa:	e00f      	b.n	800e41c <HAL_SPI_MspDeInit+0x48>
  else if(hspi->Instance==SPI2)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4a0b      	ldr	r2, [pc, #44]	; (800e430 <HAL_SPI_MspDeInit+0x5c>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d10a      	bne.n	800e41c <HAL_SPI_MspDeInit+0x48>
    __HAL_RCC_SPI2_CLK_DISABLE();
 800e406:	4b08      	ldr	r3, [pc, #32]	; (800e428 <HAL_SPI_MspDeInit+0x54>)
 800e408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e40a:	4a07      	ldr	r2, [pc, #28]	; (800e428 <HAL_SPI_MspDeInit+0x54>)
 800e40c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e410:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 800e412:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800e416:	4807      	ldr	r0, [pc, #28]	; (800e434 <HAL_SPI_MspDeInit+0x60>)
 800e418:	f003 fa08 	bl	801182c <HAL_GPIO_DeInit>
}
 800e41c:	bf00      	nop
 800e41e:	3708      	adds	r7, #8
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	40013000 	.word	0x40013000
 800e428:	40023800 	.word	0x40023800
 800e42c:	40020000 	.word	0x40020000
 800e430:	40003800 	.word	0x40003800
 800e434:	40020400 	.word	0x40020400

0800e438 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800e438:	b480      	push	{r7}
 800e43a:	b085      	sub	sp, #20
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4a0b      	ldr	r2, [pc, #44]	; (800e474 <HAL_TIM_PWM_MspInit+0x3c>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d10d      	bne.n	800e466 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e44a:	2300      	movs	r3, #0
 800e44c:	60fb      	str	r3, [r7, #12]
 800e44e:	4b0a      	ldr	r3, [pc, #40]	; (800e478 <HAL_TIM_PWM_MspInit+0x40>)
 800e450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e452:	4a09      	ldr	r2, [pc, #36]	; (800e478 <HAL_TIM_PWM_MspInit+0x40>)
 800e454:	f043 0304 	orr.w	r3, r3, #4
 800e458:	6413      	str	r3, [r2, #64]	; 0x40
 800e45a:	4b07      	ldr	r3, [pc, #28]	; (800e478 <HAL_TIM_PWM_MspInit+0x40>)
 800e45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e45e:	f003 0304 	and.w	r3, r3, #4
 800e462:	60fb      	str	r3, [r7, #12]
 800e464:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800e466:	bf00      	nop
 800e468:	3714      	adds	r7, #20
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr
 800e472:	bf00      	nop
 800e474:	40000800 	.word	0x40000800
 800e478:	40023800 	.word	0x40023800

0800e47c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b088      	sub	sp, #32
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e484:	f107 030c 	add.w	r3, r7, #12
 800e488:	2200      	movs	r2, #0
 800e48a:	601a      	str	r2, [r3, #0]
 800e48c:	605a      	str	r2, [r3, #4]
 800e48e:	609a      	str	r2, [r3, #8]
 800e490:	60da      	str	r2, [r3, #12]
 800e492:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	4a12      	ldr	r2, [pc, #72]	; (800e4e4 <HAL_TIM_MspPostInit+0x68>)
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d11d      	bne.n	800e4da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e49e:	2300      	movs	r3, #0
 800e4a0:	60bb      	str	r3, [r7, #8]
 800e4a2:	4b11      	ldr	r3, [pc, #68]	; (800e4e8 <HAL_TIM_MspPostInit+0x6c>)
 800e4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4a6:	4a10      	ldr	r2, [pc, #64]	; (800e4e8 <HAL_TIM_MspPostInit+0x6c>)
 800e4a8:	f043 0302 	orr.w	r3, r3, #2
 800e4ac:	6313      	str	r3, [r2, #48]	; 0x30
 800e4ae:	4b0e      	ldr	r3, [pc, #56]	; (800e4e8 <HAL_TIM_MspPostInit+0x6c>)
 800e4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4b2:	f003 0302 	and.w	r3, r3, #2
 800e4b6:	60bb      	str	r3, [r7, #8]
 800e4b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800e4ba:	2340      	movs	r3, #64	; 0x40
 800e4bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4be:	2302      	movs	r3, #2
 800e4c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800e4ca:	2302      	movs	r3, #2
 800e4cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800e4ce:	f107 030c 	add.w	r3, r7, #12
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	4805      	ldr	r0, [pc, #20]	; (800e4ec <HAL_TIM_MspPostInit+0x70>)
 800e4d6:	f003 f825 	bl	8011524 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800e4da:	bf00      	nop
 800e4dc:	3720      	adds	r7, #32
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}
 800e4e2:	bf00      	nop
 800e4e4:	40000800 	.word	0x40000800
 800e4e8:	40023800 	.word	0x40023800
 800e4ec:	40020400 	.word	0x40020400

0800e4f0 <HAL_TIM_PWM_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* htim_pwm)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4a07      	ldr	r2, [pc, #28]	; (800e51c <HAL_TIM_PWM_MspDeInit+0x2c>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d105      	bne.n	800e50e <HAL_TIM_PWM_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN TIM4_MspDeInit 0 */

  /* USER CODE END TIM4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM4_CLK_DISABLE();
 800e502:	4b07      	ldr	r3, [pc, #28]	; (800e520 <HAL_TIM_PWM_MspDeInit+0x30>)
 800e504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e506:	4a06      	ldr	r2, [pc, #24]	; (800e520 <HAL_TIM_PWM_MspDeInit+0x30>)
 800e508:	f023 0304 	bic.w	r3, r3, #4
 800e50c:	6413      	str	r3, [r2, #64]	; 0x40
  /* USER CODE BEGIN TIM4_MspDeInit 1 */

  /* USER CODE END TIM4_MspDeInit 1 */
  }

}
 800e50e:	bf00      	nop
 800e510:	370c      	adds	r7, #12
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr
 800e51a:	bf00      	nop
 800e51c:	40000800 	.word	0x40000800
 800e520:	40023800 	.word	0x40023800

0800e524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b08a      	sub	sp, #40	; 0x28
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e52c:	f107 0314 	add.w	r3, r7, #20
 800e530:	2200      	movs	r2, #0
 800e532:	601a      	str	r2, [r3, #0]
 800e534:	605a      	str	r2, [r3, #4]
 800e536:	609a      	str	r2, [r3, #8]
 800e538:	60da      	str	r2, [r3, #12]
 800e53a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4a19      	ldr	r2, [pc, #100]	; (800e5a8 <HAL_UART_MspInit+0x84>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d12c      	bne.n	800e5a0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e546:	2300      	movs	r3, #0
 800e548:	613b      	str	r3, [r7, #16]
 800e54a:	4b18      	ldr	r3, [pc, #96]	; (800e5ac <HAL_UART_MspInit+0x88>)
 800e54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e54e:	4a17      	ldr	r2, [pc, #92]	; (800e5ac <HAL_UART_MspInit+0x88>)
 800e550:	f043 0310 	orr.w	r3, r3, #16
 800e554:	6453      	str	r3, [r2, #68]	; 0x44
 800e556:	4b15      	ldr	r3, [pc, #84]	; (800e5ac <HAL_UART_MspInit+0x88>)
 800e558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e55a:	f003 0310 	and.w	r3, r3, #16
 800e55e:	613b      	str	r3, [r7, #16]
 800e560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e562:	2300      	movs	r3, #0
 800e564:	60fb      	str	r3, [r7, #12]
 800e566:	4b11      	ldr	r3, [pc, #68]	; (800e5ac <HAL_UART_MspInit+0x88>)
 800e568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e56a:	4a10      	ldr	r2, [pc, #64]	; (800e5ac <HAL_UART_MspInit+0x88>)
 800e56c:	f043 0301 	orr.w	r3, r3, #1
 800e570:	6313      	str	r3, [r2, #48]	; 0x30
 800e572:	4b0e      	ldr	r3, [pc, #56]	; (800e5ac <HAL_UART_MspInit+0x88>)
 800e574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e576:	f003 0301 	and.w	r3, r3, #1
 800e57a:	60fb      	str	r3, [r7, #12]
 800e57c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e57e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e584:	2302      	movs	r3, #2
 800e586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e588:	2300      	movs	r3, #0
 800e58a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e58c:	2303      	movs	r3, #3
 800e58e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800e590:	2307      	movs	r3, #7
 800e592:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e594:	f107 0314 	add.w	r3, r7, #20
 800e598:	4619      	mov	r1, r3
 800e59a:	4805      	ldr	r0, [pc, #20]	; (800e5b0 <HAL_UART_MspInit+0x8c>)
 800e59c:	f002 ffc2 	bl	8011524 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800e5a0:	bf00      	nop
 800e5a2:	3728      	adds	r7, #40	; 0x28
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	40011000 	.word	0x40011000
 800e5ac:	40023800 	.word	0x40023800
 800e5b0:	40020000 	.word	0x40020000

0800e5b4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a08      	ldr	r2, [pc, #32]	; (800e5e4 <HAL_UART_MspDeInit+0x30>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d10a      	bne.n	800e5dc <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800e5c6:	4b08      	ldr	r3, [pc, #32]	; (800e5e8 <HAL_UART_MspDeInit+0x34>)
 800e5c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5ca:	4a07      	ldr	r2, [pc, #28]	; (800e5e8 <HAL_UART_MspDeInit+0x34>)
 800e5cc:	f023 0310 	bic.w	r3, r3, #16
 800e5d0:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800e5d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e5d6:	4805      	ldr	r0, [pc, #20]	; (800e5ec <HAL_UART_MspDeInit+0x38>)
 800e5d8:	f003 f928 	bl	801182c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 800e5dc:	bf00      	nop
 800e5de:	3708      	adds	r7, #8
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	40011000 	.word	0x40011000
 800e5e8:	40023800 	.word	0x40023800
 800e5ec:	40020000 	.word	0x40020000

0800e5f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b08c      	sub	sp, #48	; 0x30
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800e600:	2200      	movs	r2, #0
 800e602:	6879      	ldr	r1, [r7, #4]
 800e604:	2019      	movs	r0, #25
 800e606:	f002 fc6d 	bl	8010ee4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800e60a:	2019      	movs	r0, #25
 800e60c:	f002 fc86 	bl	8010f1c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800e610:	2300      	movs	r3, #0
 800e612:	60fb      	str	r3, [r7, #12]
 800e614:	4b1e      	ldr	r3, [pc, #120]	; (800e690 <HAL_InitTick+0xa0>)
 800e616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e618:	4a1d      	ldr	r2, [pc, #116]	; (800e690 <HAL_InitTick+0xa0>)
 800e61a:	f043 0301 	orr.w	r3, r3, #1
 800e61e:	6453      	str	r3, [r2, #68]	; 0x44
 800e620:	4b1b      	ldr	r3, [pc, #108]	; (800e690 <HAL_InitTick+0xa0>)
 800e622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e624:	f003 0301 	and.w	r3, r3, #1
 800e628:	60fb      	str	r3, [r7, #12]
 800e62a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800e62c:	f107 0210 	add.w	r2, r7, #16
 800e630:	f107 0314 	add.w	r3, r7, #20
 800e634:	4611      	mov	r1, r2
 800e636:	4618      	mov	r0, r3
 800e638:	f005 f8a6 	bl	8013788 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800e63c:	f005 f890 	bl	8013760 <HAL_RCC_GetPCLK2Freq>
 800e640:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800e642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e644:	4a13      	ldr	r2, [pc, #76]	; (800e694 <HAL_InitTick+0xa4>)
 800e646:	fba2 2303 	umull	r2, r3, r2, r3
 800e64a:	0c9b      	lsrs	r3, r3, #18
 800e64c:	3b01      	subs	r3, #1
 800e64e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800e650:	4b11      	ldr	r3, [pc, #68]	; (800e698 <HAL_InitTick+0xa8>)
 800e652:	4a12      	ldr	r2, [pc, #72]	; (800e69c <HAL_InitTick+0xac>)
 800e654:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800e656:	4b10      	ldr	r3, [pc, #64]	; (800e698 <HAL_InitTick+0xa8>)
 800e658:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e65c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800e65e:	4a0e      	ldr	r2, [pc, #56]	; (800e698 <HAL_InitTick+0xa8>)
 800e660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e662:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800e664:	4b0c      	ldr	r3, [pc, #48]	; (800e698 <HAL_InitTick+0xa8>)
 800e666:	2200      	movs	r2, #0
 800e668:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e66a:	4b0b      	ldr	r3, [pc, #44]	; (800e698 <HAL_InitTick+0xa8>)
 800e66c:	2200      	movs	r2, #0
 800e66e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800e670:	4809      	ldr	r0, [pc, #36]	; (800e698 <HAL_InitTick+0xa8>)
 800e672:	f005 fe8b 	bl	801438c <HAL_TIM_Base_Init>
 800e676:	4603      	mov	r3, r0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d104      	bne.n	800e686 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800e67c:	4806      	ldr	r0, [pc, #24]	; (800e698 <HAL_InitTick+0xa8>)
 800e67e:	f005 ff3d 	bl	80144fc <HAL_TIM_Base_Start_IT>
 800e682:	4603      	mov	r3, r0
 800e684:	e000      	b.n	800e688 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800e686:	2301      	movs	r3, #1
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3730      	adds	r7, #48	; 0x30
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	40023800 	.word	0x40023800
 800e694:	431bde83 	.word	0x431bde83
 800e698:	20005544 	.word	0x20005544
 800e69c:	40010000 	.word	0x40010000

0800e6a0 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 800e6a0:	b480      	push	{r7}
 800e6a2:	af00      	add	r7, sp, #0
  /* Disable TIM1 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);
 800e6a4:	4b06      	ldr	r3, [pc, #24]	; (800e6c0 <HAL_SuspendTick+0x20>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	68da      	ldr	r2, [r3, #12]
 800e6aa:	4b05      	ldr	r3, [pc, #20]	; (800e6c0 <HAL_SuspendTick+0x20>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f022 0201 	bic.w	r2, r2, #1
 800e6b2:	60da      	str	r2, [r3, #12]
}
 800e6b4:	bf00      	nop
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6bc:	4770      	bx	lr
 800e6be:	bf00      	nop
 800e6c0:	20005544 	.word	0x20005544

0800e6c4 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	af00      	add	r7, sp, #0
  /* Enable TIM1 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 800e6c8:	4b06      	ldr	r3, [pc, #24]	; (800e6e4 <HAL_ResumeTick+0x20>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	68da      	ldr	r2, [r3, #12]
 800e6ce:	4b05      	ldr	r3, [pc, #20]	; (800e6e4 <HAL_ResumeTick+0x20>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	f042 0201 	orr.w	r2, r2, #1
 800e6d6:	60da      	str	r2, [r3, #12]
}
 800e6d8:	bf00      	nop
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr
 800e6e2:	bf00      	nop
 800e6e4:	20005544 	.word	0x20005544

0800e6e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e6ec:	e7fe      	b.n	800e6ec <NMI_Handler+0x4>

0800e6ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e6ee:	b480      	push	{r7}
 800e6f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e6f2:	e7fe      	b.n	800e6f2 <HardFault_Handler+0x4>

0800e6f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e6f8:	e7fe      	b.n	800e6f8 <MemManage_Handler+0x4>

0800e6fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e6fa:	b480      	push	{r7}
 800e6fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e6fe:	e7fe      	b.n	800e6fe <BusFault_Handler+0x4>

0800e700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e700:	b480      	push	{r7}
 800e702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e704:	e7fe      	b.n	800e704 <UsageFault_Handler+0x4>

0800e706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e706:	b480      	push	{r7}
 800e708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e70a:	bf00      	nop
 800e70c:	46bd      	mov	sp, r7
 800e70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e712:	4770      	bx	lr

0800e714 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800e718:	2004      	movs	r0, #4
 800e71a:	f003 f99d 	bl	8011a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800e71e:	bf00      	nop
 800e720:	bd80      	pop	{r7, pc}
	...

0800e724 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e728:	4802      	ldr	r0, [pc, #8]	; (800e734 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800e72a:	f006 f901 	bl	8014930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800e72e:	bf00      	nop
 800e730:	bd80      	pop	{r7, pc}
 800e732:	bf00      	nop
 800e734:	20005544 	.word	0x20005544

0800e738 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT2_Pin);
 800e73c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800e740:	f003 f98a 	bl	8011a58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 800e744:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e748:	f003 f986 	bl	8011a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800e74c:	bf00      	nop
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800e754:	4802      	ldr	r0, [pc, #8]	; (800e760 <OTG_FS_IRQHandler+0x10>)
 800e756:	f003 fb43 	bl	8011de0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800e75a:	bf00      	nop
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	20008df4 	.word	0x20008df4

0800e764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b086      	sub	sp, #24
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e76c:	4a14      	ldr	r2, [pc, #80]	; (800e7c0 <_sbrk+0x5c>)
 800e76e:	4b15      	ldr	r3, [pc, #84]	; (800e7c4 <_sbrk+0x60>)
 800e770:	1ad3      	subs	r3, r2, r3
 800e772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e778:	4b13      	ldr	r3, [pc, #76]	; (800e7c8 <_sbrk+0x64>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d102      	bne.n	800e786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e780:	4b11      	ldr	r3, [pc, #68]	; (800e7c8 <_sbrk+0x64>)
 800e782:	4a12      	ldr	r2, [pc, #72]	; (800e7cc <_sbrk+0x68>)
 800e784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e786:	4b10      	ldr	r3, [pc, #64]	; (800e7c8 <_sbrk+0x64>)
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	4413      	add	r3, r2
 800e78e:	693a      	ldr	r2, [r7, #16]
 800e790:	429a      	cmp	r2, r3
 800e792:	d207      	bcs.n	800e7a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e794:	f00e fe6a 	bl	801d46c <__errno>
 800e798:	4603      	mov	r3, r0
 800e79a:	220c      	movs	r2, #12
 800e79c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e79e:	f04f 33ff 	mov.w	r3, #4294967295
 800e7a2:	e009      	b.n	800e7b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e7a4:	4b08      	ldr	r3, [pc, #32]	; (800e7c8 <_sbrk+0x64>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e7aa:	4b07      	ldr	r3, [pc, #28]	; (800e7c8 <_sbrk+0x64>)
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4413      	add	r3, r2
 800e7b2:	4a05      	ldr	r2, [pc, #20]	; (800e7c8 <_sbrk+0x64>)
 800e7b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3718      	adds	r7, #24
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	20020000 	.word	0x20020000
 800e7c4:	00000400 	.word	0x00000400
 800e7c8:	20000484 	.word	0x20000484
 800e7cc:	20009210 	.word	0x20009210

0800e7d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e7d4:	4b06      	ldr	r3, [pc, #24]	; (800e7f0 <SystemInit+0x20>)
 800e7d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7da:	4a05      	ldr	r2, [pc, #20]	; (800e7f0 <SystemInit+0x20>)
 800e7dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e7e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e7e4:	bf00      	nop
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ec:	4770      	bx	lr
 800e7ee:	bf00      	nop
 800e7f0:	e000ed00 	.word	0xe000ed00

0800e7f4 <init>:
static void MX_SPI1_Init(void);
static void MX_SPI2_Init(void);
static void MX_USART1_UART_Init(void);
void StartDefaultTask(void *argument);

void init(){
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b082      	sub	sp, #8
 800e7f8:	af00      	add	r7, sp, #0

	/* Hardware init */

	HAL_Init();
 800e7fa:	f001 ff73 	bl	80106e4 <HAL_Init>

	SystemClock_Config();
 800e7fe:	f000 f90b 	bl	800ea18 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800e802:	f000 fac1 	bl	800ed88 <MX_GPIO_Init>
	MX_ADC1_Init();
 800e806:	f000 f96f 	bl	800eae8 <MX_ADC1_Init>
	MX_TIM4_Init();
 800e80a:	f000 fa39 	bl	800ec80 <MX_TIM4_Init>
	MX_SPI1_Init();
 800e80e:	f000 f9cb 	bl	800eba8 <MX_SPI1_Init>
	MX_SPI2_Init();
 800e812:	f000 f9ff 	bl	800ec14 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 800e816:	f000 fa8d 	bl	800ed34 <MX_USART1_UART_Init>

	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800e81a:	2008      	movs	r0, #8
 800e81c:	f002 fb8c 	bl	8010f38 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800e820:	2028      	movs	r0, #40	; 0x28
 800e822:	f002 fb89 	bl	8010f38 <HAL_NVIC_DisableIRQ>

	/* FreeRTOS Init */

	osKernelInitialize();
 800e826:	f00a f83d 	bl	80188a4 <osKernelInitialize>

	buzzer_event_id = osEventFlagsNew(NULL);
 800e82a:	2000      	movs	r0, #0
 800e82c:	f00a f9b4 	bl	8018b98 <osEventFlagsNew>
 800e830:	4603      	mov	r3, r0
 800e832:	4a3a      	ldr	r2, [pc, #232]	; (800e91c <init+0x128>)
 800e834:	6013      	str	r3, [r2, #0]
	sensor_mode_id = osEventFlagsNew(NULL);
 800e836:	2000      	movs	r0, #0
 800e838:	f00a f9ae 	bl	8018b98 <osEventFlagsNew>
 800e83c:	4603      	mov	r3, r0
 800e83e:	4a38      	ldr	r2, [pc, #224]	; (800e920 <init+0x12c>)
 800e840:	6013      	str	r3, [r2, #0]
	state_est_mode_id = osEventFlagsNew(NULL);
 800e842:	2000      	movs	r0, #0
 800e844:	f00a f9a8 	bl	8018b98 <osEventFlagsNew>
 800e848:	4603      	mov	r3, r0
 800e84a:	4a36      	ldr	r2, [pc, #216]	; (800e924 <init+0x130>)
 800e84c:	6013      	str	r3, [r2, #0]
	//osThreadNew(task_state_est, NULL, &task_state_est_attributes);


	/* USB Init */

	fifo_init(&usb_output_fifo, usb_fifo_out_buffer, USB_OUTPUT_BUFFER_SIZE);
 800e84e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e852:	4935      	ldr	r1, [pc, #212]	; (800e928 <init+0x134>)
 800e854:	4835      	ldr	r0, [pc, #212]	; (800e92c <init+0x138>)
 800e856:	f001 fc9b 	bl	8010190 <fifo_init>
	fifo_init(&usb_input_fifo, usb_fifo_in_buffer, USB_INPUT_BUFFER_SIZE);
 800e85a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e85e:	4934      	ldr	r1, [pc, #208]	; (800e930 <init+0x13c>)
 800e860:	4834      	ldr	r0, [pc, #208]	; (800e934 <init+0x140>)
 800e862:	f001 fc95 	bl	8010190 <fifo_init>

	log_init();
 800e866:	f001 fe4d 	bl	8010504 <log_init>

	if(HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin)){
 800e86a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e86e:	4832      	ldr	r0, [pc, #200]	; (800e938 <init+0x144>)
 800e870:	f003 f8c0 	bl	80119f4 <HAL_GPIO_ReadPin>
 800e874:	4603      	mov	r3, r0
 800e876:	2b00      	cmp	r3, #0
 800e878:	d00a      	beq.n	800e890 <init+0x9c>
		global_usb_initialized_flag = true;
 800e87a:	4b30      	ldr	r3, [pc, #192]	; (800e93c <init+0x148>)
 800e87c:	2201      	movs	r2, #1
 800e87e:	701a      	strb	r2, [r3, #0]
		MX_USB_DEVICE_Init();
 800e880:	f00d ffdc 	bl	801c83c <MX_USB_DEVICE_Init>
		/* Give the USB some time to initialize */
		HAL_Delay(1500);
 800e884:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800e888:	f001 ff6e 	bl	8010768 <HAL_Delay>
		log_enable();
 800e88c:	f001 fe52 	bl	8010534 <log_enable>
	}

	/* Config Init */

	config_init();
 800e890:	f7ff f848 	bl	800d924 <config_init>
	config_load();
 800e894:	f7ff f862 	bl	800d95c <config_load>

	if(global_config.config.config_version != CONFIG_VERSION){
 800e898:	4b29      	ldr	r3, [pc, #164]	; (800e940 <init+0x14c>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	2b64      	cmp	r3, #100	; 0x64
 800e89e:	d022      	beq.n	800e8e6 <init+0xf2>
		log_warn("Config version mismatch");
 800e8a0:	4928      	ldr	r1, [pc, #160]	; (800e944 <init+0x150>)
 800e8a2:	4b29      	ldr	r3, [pc, #164]	; (800e948 <init+0x154>)
 800e8a4:	224a      	movs	r2, #74	; 0x4a
 800e8a6:	2003      	movs	r0, #3
 800e8a8:	f001 fe68 	bl	801057c <log_log>
		log_info("Resetting to defaults..");
 800e8ac:	4925      	ldr	r1, [pc, #148]	; (800e944 <init+0x150>)
 800e8ae:	4b27      	ldr	r3, [pc, #156]	; (800e94c <init+0x158>)
 800e8b0:	224b      	movs	r2, #75	; 0x4b
 800e8b2:	2002      	movs	r0, #2
 800e8b4:	f001 fe62 	bl	801057c <log_log>
		config_defaults();
 800e8b8:	f7ff f83c 	bl	800d934 <config_defaults>
		bool status = config_save();
 800e8bc:	f7ff f85a 	bl	800d974 <config_save>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	71fb      	strb	r3, [r7, #7]
		if(status){
 800e8c4:	79fb      	ldrb	r3, [r7, #7]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d006      	beq.n	800e8d8 <init+0xe4>
			log_info("Reset successful!");
 800e8ca:	491e      	ldr	r1, [pc, #120]	; (800e944 <init+0x150>)
 800e8cc:	4b20      	ldr	r3, [pc, #128]	; (800e950 <init+0x15c>)
 800e8ce:	224f      	movs	r2, #79	; 0x4f
 800e8d0:	2002      	movs	r0, #2
 800e8d2:	f001 fe53 	bl	801057c <log_log>
 800e8d6:	e00c      	b.n	800e8f2 <init+0xfe>
		} else {
			log_error("Error resetting config!");
 800e8d8:	491a      	ldr	r1, [pc, #104]	; (800e944 <init+0x150>)
 800e8da:	4b1e      	ldr	r3, [pc, #120]	; (800e954 <init+0x160>)
 800e8dc:	2251      	movs	r2, #81	; 0x51
 800e8de:	2004      	movs	r0, #4
 800e8e0:	f001 fe4c 	bl	801057c <log_log>
 800e8e4:	e005      	b.n	800e8f2 <init+0xfe>
		}
	} else {
		log_info("Config loading successful!");
 800e8e6:	4917      	ldr	r1, [pc, #92]	; (800e944 <init+0x150>)
 800e8e8:	4b1b      	ldr	r3, [pc, #108]	; (800e958 <init+0x164>)
 800e8ea:	2254      	movs	r2, #84	; 0x54
 800e8ec:	2002      	movs	r0, #2
 800e8ee:	f001 fe45 	bl	801057c <log_log>
	}

	osThreadNew(task_fsm, NULL, &task_fsm_attributes);
 800e8f2:	4a1a      	ldr	r2, [pc, #104]	; (800e95c <init+0x168>)
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	481a      	ldr	r0, [pc, #104]	; (800e960 <init+0x16c>)
 800e8f8:	f00a f83c 	bl	8018974 <osThreadNew>
	osThreadNew(task_buzzer, NULL, &task_buzzer_attributes);
 800e8fc:	4a19      	ldr	r2, [pc, #100]	; (800e964 <init+0x170>)
 800e8fe:	2100      	movs	r1, #0
 800e900:	4819      	ldr	r0, [pc, #100]	; (800e968 <init+0x174>)
 800e902:	f00a f837 	bl	8018974 <osThreadNew>
	osThreadNew(task_supervision, NULL, &task_supervision_attributes);
 800e906:	4a19      	ldr	r2, [pc, #100]	; (800e96c <init+0x178>)
 800e908:	2100      	movs	r1, #0
 800e90a:	4819      	ldr	r0, [pc, #100]	; (800e970 <init+0x17c>)
 800e90c:	f00a f832 	bl	8018974 <osThreadNew>
	/* Start FreeRTOS Kernel */
	osKernelStart();
 800e910:	f009 ffec 	bl	80188ec <osKernelStart>
}
 800e914:	bf00      	nop
 800e916:	3708      	adds	r7, #8
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	20005320 	.word	0x20005320
 800e920:	20005528 	.word	0x20005528
 800e924:	20005524 	.word	0x20005524
 800e928:	20005324 	.word	0x20005324
 800e92c:	2000552c 	.word	0x2000552c
 800e930:	20005108 	.word	0x20005108
 800e934:	20005308 	.word	0x20005308
 800e938:	40020000 	.word	0x40020000
 800e93c:	20000480 	.word	0x20000480
 800e940:	20000464 	.word	0x20000464
 800e944:	0801e751 	.word	0x0801e751
 800e948:	0801e758 	.word	0x0801e758
 800e94c:	0801e770 	.word	0x0801e770
 800e950:	0801e788 	.word	0x0801e788
 800e954:	0801e79c 	.word	0x0801e79c
 800e958:	0801e7b4 	.word	0x0801e7b4
 800e95c:	0801eb3c 	.word	0x0801eb3c
 800e960:	0800ff55 	.word	0x0800ff55
 800e964:	0801eb84 	.word	0x0801eb84
 800e968:	0800fe21 	.word	0x0800fe21
 800e96c:	0801ebcc 	.word	0x0801ebcc
 800e970:	080100c9 	.word	0x080100c9

0800e974 <init_idle>:

void init_idle(){
 800e974:	b580      	push	{r7, lr}
 800e976:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 800e978:	f000 fa06 	bl	800ed88 <MX_GPIO_Init>
	MX_ADC1_Init();
 800e97c:	f000 f8b4 	bl	800eae8 <MX_ADC1_Init>
	MX_TIM4_Init();
 800e980:	f000 f97e 	bl	800ec80 <MX_TIM4_Init>
	MX_SPI1_Init();
 800e984:	f000 f910 	bl	800eba8 <MX_SPI1_Init>
	MX_SPI2_Init();
 800e988:	f000 f944 	bl	800ec14 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 800e98c:	f000 f9d2 	bl	800ed34 <MX_USART1_UART_Init>

	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800e990:	2008      	movs	r0, #8
 800e992:	f002 fad1 	bl	8010f38 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800e996:	2028      	movs	r0, #40	; 0x28
 800e998:	f002 face 	bl	8010f38 <HAL_NVIC_DisableIRQ>
}
 800e99c:	bf00      	nop
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <init_deepsleep>:

void init_deepsleep(){
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	af00      	add	r7, sp, #0

	/* DeInit all unused IO */
	if(global_usb_initialized_flag == true){
 800e9a4:	4b0e      	ldr	r3, [pc, #56]	; (800e9e0 <init_deepsleep+0x40>)
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d004      	beq.n	800e9b6 <init_deepsleep+0x16>
		MX_USB_DEVICE_DeInit();
 800e9ac:	f00d ff76 	bl	801c89c <MX_USB_DEVICE_DeInit>
		global_usb_initialized_flag = false;
 800e9b0:	4b0b      	ldr	r3, [pc, #44]	; (800e9e0 <init_deepsleep+0x40>)
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	701a      	strb	r2, [r3, #0]
	}
	HAL_ADC_DeInit(&hadc1);
 800e9b6:	480b      	ldr	r0, [pc, #44]	; (800e9e4 <init_deepsleep+0x44>)
 800e9b8:	f001 ff57 	bl	801086a <HAL_ADC_DeInit>
	HAL_SPI_DeInit(&hspi1);
 800e9bc:	480a      	ldr	r0, [pc, #40]	; (800e9e8 <init_deepsleep+0x48>)
 800e9be:	f004 ff9e 	bl	80138fe <HAL_SPI_DeInit>
	HAL_SPI_DeInit(&hspi2);
 800e9c2:	480a      	ldr	r0, [pc, #40]	; (800e9ec <init_deepsleep+0x4c>)
 800e9c4:	f004 ff9b 	bl	80138fe <HAL_SPI_DeInit>
	HAL_TIM_PWM_DeInit(&htim4);
 800e9c8:	4809      	ldr	r0, [pc, #36]	; (800e9f0 <init_deepsleep+0x50>)
 800e9ca:	f005 fe48 	bl	801465e <HAL_TIM_PWM_DeInit>
	HAL_UART_DeInit(&huart1);
 800e9ce:	4809      	ldr	r0, [pc, #36]	; (800e9f4 <init_deepsleep+0x54>)
 800e9d0:	f006 fca1 	bl	8015316 <HAL_UART_DeInit>

	/* Disable unused IRQ */
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800e9d4:	2028      	movs	r0, #40	; 0x28
 800e9d6:	f002 faaf 	bl	8010f38 <HAL_NVIC_DisableIRQ>
}
 800e9da:	bf00      	nop
 800e9dc:	bd80      	pop	{r7, pc}
 800e9de:	bf00      	nop
 800e9e0:	20000480 	.word	0x20000480
 800e9e4:	2000562c 	.word	0x2000562c
 800e9e8:	200056b8 	.word	0x200056b8
 800e9ec:	2000558c 	.word	0x2000558c
 800e9f0:	200055e4 	.word	0x200055e4
 800e9f4:	20005674 	.word	0x20005674

0800e9f8 <init_cli>:

void init_cli(){
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	af00      	add	r7, sp, #0
	log_disable();
 800e9fc:	f001 fda6 	bl	801054c <log_disable>
	osThreadNew(task_cli, NULL, &task_cli_attributes);
 800ea00:	4a03      	ldr	r2, [pc, #12]	; (800ea10 <init_cli+0x18>)
 800ea02:	2100      	movs	r1, #0
 800ea04:	4803      	ldr	r0, [pc, #12]	; (800ea14 <init_cli+0x1c>)
 800ea06:	f009 ffb5 	bl	8018974 <osThreadNew>
}
 800ea0a:	bf00      	nop
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	0801eba8 	.word	0x0801eba8
 800ea14:	0800ff0d 	.word	0x0800ff0d

0800ea18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b094      	sub	sp, #80	; 0x50
 800ea1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ea1e:	f107 0320 	add.w	r3, r7, #32
 800ea22:	2230      	movs	r2, #48	; 0x30
 800ea24:	2100      	movs	r1, #0
 800ea26:	4618      	mov	r0, r3
 800ea28:	f00e fd58 	bl	801d4dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ea2c:	f107 030c 	add.w	r3, r7, #12
 800ea30:	2200      	movs	r2, #0
 800ea32:	601a      	str	r2, [r3, #0]
 800ea34:	605a      	str	r2, [r3, #4]
 800ea36:	609a      	str	r2, [r3, #8]
 800ea38:	60da      	str	r2, [r3, #12]
 800ea3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	60bb      	str	r3, [r7, #8]
 800ea40:	4b27      	ldr	r3, [pc, #156]	; (800eae0 <SystemClock_Config+0xc8>)
 800ea42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea44:	4a26      	ldr	r2, [pc, #152]	; (800eae0 <SystemClock_Config+0xc8>)
 800ea46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea4a:	6413      	str	r3, [r2, #64]	; 0x40
 800ea4c:	4b24      	ldr	r3, [pc, #144]	; (800eae0 <SystemClock_Config+0xc8>)
 800ea4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea54:	60bb      	str	r3, [r7, #8]
 800ea56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ea58:	2300      	movs	r3, #0
 800ea5a:	607b      	str	r3, [r7, #4]
 800ea5c:	4b21      	ldr	r3, [pc, #132]	; (800eae4 <SystemClock_Config+0xcc>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	4a20      	ldr	r2, [pc, #128]	; (800eae4 <SystemClock_Config+0xcc>)
 800ea62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ea66:	6013      	str	r3, [r2, #0]
 800ea68:	4b1e      	ldr	r3, [pc, #120]	; (800eae4 <SystemClock_Config+0xcc>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ea70:	607b      	str	r3, [r7, #4]
 800ea72:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ea74:	2301      	movs	r3, #1
 800ea76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ea78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ea7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ea7e:	2302      	movs	r3, #2
 800ea80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ea82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ea86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800ea88:	2304      	movs	r3, #4
 800ea8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800ea8c:	2360      	movs	r3, #96	; 0x60
 800ea8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800ea90:	2306      	movs	r3, #6
 800ea92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800ea94:	2304      	movs	r3, #4
 800ea96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ea98:	f107 0320 	add.w	r3, r7, #32
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f004 f9ff 	bl	8012ea0 <HAL_RCC_OscConfig>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d001      	beq.n	800eaac <SystemClock_Config+0x94>
  {
    Error_Handler();
 800eaa8:	f001 f9b4 	bl	800fe14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800eaac:	230f      	movs	r3, #15
 800eaae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800eab0:	2302      	movs	r3, #2
 800eab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800eab4:	2380      	movs	r3, #128	; 0x80
 800eab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800eab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eabc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800eabe:	2300      	movs	r3, #0
 800eac0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800eac2:	f107 030c 	add.w	r3, r7, #12
 800eac6:	2100      	movs	r1, #0
 800eac8:	4618      	mov	r0, r3
 800eaca:	f004 fc61 	bl	8013390 <HAL_RCC_ClockConfig>
 800eace:	4603      	mov	r3, r0
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d001      	beq.n	800ead8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800ead4:	f001 f99e 	bl	800fe14 <Error_Handler>
  }
}
 800ead8:	bf00      	nop
 800eada:	3750      	adds	r7, #80	; 0x50
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}
 800eae0:	40023800 	.word	0x40023800
 800eae4:	40007000 	.word	0x40007000

0800eae8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b084      	sub	sp, #16
 800eaec:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800eaee:	463b      	mov	r3, r7
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	601a      	str	r2, [r3, #0]
 800eaf4:	605a      	str	r2, [r3, #4]
 800eaf6:	609a      	str	r2, [r3, #8]
 800eaf8:	60da      	str	r2, [r3, #12]
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800eafa:	4b28      	ldr	r3, [pc, #160]	; (800eb9c <MX_ADC1_Init+0xb4>)
 800eafc:	4a28      	ldr	r2, [pc, #160]	; (800eba0 <MX_ADC1_Init+0xb8>)
 800eafe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800eb00:	4b26      	ldr	r3, [pc, #152]	; (800eb9c <MX_ADC1_Init+0xb4>)
 800eb02:	2200      	movs	r2, #0
 800eb04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800eb06:	4b25      	ldr	r3, [pc, #148]	; (800eb9c <MX_ADC1_Init+0xb4>)
 800eb08:	2200      	movs	r2, #0
 800eb0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800eb0c:	4b23      	ldr	r3, [pc, #140]	; (800eb9c <MX_ADC1_Init+0xb4>)
 800eb0e:	2201      	movs	r2, #1
 800eb10:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800eb12:	4b22      	ldr	r3, [pc, #136]	; (800eb9c <MX_ADC1_Init+0xb4>)
 800eb14:	2201      	movs	r2, #1
 800eb16:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800eb18:	4b20      	ldr	r3, [pc, #128]	; (800eb9c <MX_ADC1_Init+0xb4>)
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800eb20:	4b1e      	ldr	r3, [pc, #120]	; (800eb9c <MX_ADC1_Init+0xb4>)
 800eb22:	2200      	movs	r2, #0
 800eb24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800eb26:	4b1d      	ldr	r3, [pc, #116]	; (800eb9c <MX_ADC1_Init+0xb4>)
 800eb28:	4a1e      	ldr	r2, [pc, #120]	; (800eba4 <MX_ADC1_Init+0xbc>)
 800eb2a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800eb2c:	4b1b      	ldr	r3, [pc, #108]	; (800eb9c <MX_ADC1_Init+0xb4>)
 800eb2e:	2200      	movs	r2, #0
 800eb30:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800eb32:	4b1a      	ldr	r3, [pc, #104]	; (800eb9c <MX_ADC1_Init+0xb4>)
 800eb34:	2202      	movs	r2, #2
 800eb36:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800eb38:	4b18      	ldr	r3, [pc, #96]	; (800eb9c <MX_ADC1_Init+0xb4>)
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800eb40:	4b16      	ldr	r3, [pc, #88]	; (800eb9c <MX_ADC1_Init+0xb4>)
 800eb42:	2201      	movs	r2, #1
 800eb44:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800eb46:	4815      	ldr	r0, [pc, #84]	; (800eb9c <MX_ADC1_Init+0xb4>)
 800eb48:	f001 fe4c 	bl	80107e4 <HAL_ADC_Init>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d001      	beq.n	800eb56 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800eb52:	f001 f95f 	bl	800fe14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800eb56:	2300      	movs	r3, #0
 800eb58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800eb5e:	2303      	movs	r3, #3
 800eb60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800eb62:	463b      	mov	r3, r7
 800eb64:	4619      	mov	r1, r3
 800eb66:	480d      	ldr	r0, [pc, #52]	; (800eb9c <MX_ADC1_Init+0xb4>)
 800eb68:	f001 feb2 	bl	80108d0 <HAL_ADC_ConfigChannel>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d001      	beq.n	800eb76 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800eb72:	f001 f94f 	bl	800fe14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800eb76:	2301      	movs	r3, #1
 800eb78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800eb7a:	2302      	movs	r3, #2
 800eb7c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800eb7e:	463b      	mov	r3, r7
 800eb80:	4619      	mov	r1, r3
 800eb82:	4806      	ldr	r0, [pc, #24]	; (800eb9c <MX_ADC1_Init+0xb4>)
 800eb84:	f001 fea4 	bl	80108d0 <HAL_ADC_ConfigChannel>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d001      	beq.n	800eb92 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800eb8e:	f001 f941 	bl	800fe14 <Error_Handler>
  }
}
 800eb92:	bf00      	nop
 800eb94:	3710      	adds	r7, #16
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	2000562c 	.word	0x2000562c
 800eba0:	40012000 	.word	0x40012000
 800eba4:	0f000001 	.word	0x0f000001

0800eba8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800ebac:	4b17      	ldr	r3, [pc, #92]	; (800ec0c <MX_SPI1_Init+0x64>)
 800ebae:	4a18      	ldr	r2, [pc, #96]	; (800ec10 <MX_SPI1_Init+0x68>)
 800ebb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800ebb2:	4b16      	ldr	r3, [pc, #88]	; (800ec0c <MX_SPI1_Init+0x64>)
 800ebb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ebb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800ebba:	4b14      	ldr	r3, [pc, #80]	; (800ec0c <MX_SPI1_Init+0x64>)
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800ebc0:	4b12      	ldr	r3, [pc, #72]	; (800ec0c <MX_SPI1_Init+0x64>)
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ebc6:	4b11      	ldr	r3, [pc, #68]	; (800ec0c <MX_SPI1_Init+0x64>)
 800ebc8:	2200      	movs	r2, #0
 800ebca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ebcc:	4b0f      	ldr	r3, [pc, #60]	; (800ec0c <MX_SPI1_Init+0x64>)
 800ebce:	2200      	movs	r2, #0
 800ebd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800ebd2:	4b0e      	ldr	r3, [pc, #56]	; (800ec0c <MX_SPI1_Init+0x64>)
 800ebd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ebd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ebda:	4b0c      	ldr	r3, [pc, #48]	; (800ec0c <MX_SPI1_Init+0x64>)
 800ebdc:	2200      	movs	r2, #0
 800ebde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ebe0:	4b0a      	ldr	r3, [pc, #40]	; (800ec0c <MX_SPI1_Init+0x64>)
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ebe6:	4b09      	ldr	r3, [pc, #36]	; (800ec0c <MX_SPI1_Init+0x64>)
 800ebe8:	2200      	movs	r2, #0
 800ebea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ebec:	4b07      	ldr	r3, [pc, #28]	; (800ec0c <MX_SPI1_Init+0x64>)
 800ebee:	2200      	movs	r2, #0
 800ebf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800ebf2:	4b06      	ldr	r3, [pc, #24]	; (800ec0c <MX_SPI1_Init+0x64>)
 800ebf4:	220a      	movs	r2, #10
 800ebf6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800ebf8:	4804      	ldr	r0, [pc, #16]	; (800ec0c <MX_SPI1_Init+0x64>)
 800ebfa:	f004 fdf7 	bl	80137ec <HAL_SPI_Init>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d001      	beq.n	800ec08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800ec04:	f001 f906 	bl	800fe14 <Error_Handler>
  }
}
 800ec08:	bf00      	nop
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	200056b8 	.word	0x200056b8
 800ec10:	40013000 	.word	0x40013000

0800ec14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	af00      	add	r7, sp, #0
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800ec18:	4b17      	ldr	r3, [pc, #92]	; (800ec78 <MX_SPI2_Init+0x64>)
 800ec1a:	4a18      	ldr	r2, [pc, #96]	; (800ec7c <MX_SPI2_Init+0x68>)
 800ec1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800ec1e:	4b16      	ldr	r3, [pc, #88]	; (800ec78 <MX_SPI2_Init+0x64>)
 800ec20:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ec24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800ec26:	4b14      	ldr	r3, [pc, #80]	; (800ec78 <MX_SPI2_Init+0x64>)
 800ec28:	2200      	movs	r2, #0
 800ec2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800ec2c:	4b12      	ldr	r3, [pc, #72]	; (800ec78 <MX_SPI2_Init+0x64>)
 800ec2e:	2200      	movs	r2, #0
 800ec30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ec32:	4b11      	ldr	r3, [pc, #68]	; (800ec78 <MX_SPI2_Init+0x64>)
 800ec34:	2200      	movs	r2, #0
 800ec36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ec38:	4b0f      	ldr	r3, [pc, #60]	; (800ec78 <MX_SPI2_Init+0x64>)
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800ec3e:	4b0e      	ldr	r3, [pc, #56]	; (800ec78 <MX_SPI2_Init+0x64>)
 800ec40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec44:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ec46:	4b0c      	ldr	r3, [pc, #48]	; (800ec78 <MX_SPI2_Init+0x64>)
 800ec48:	2200      	movs	r2, #0
 800ec4a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ec4c:	4b0a      	ldr	r3, [pc, #40]	; (800ec78 <MX_SPI2_Init+0x64>)
 800ec4e:	2200      	movs	r2, #0
 800ec50:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800ec52:	4b09      	ldr	r3, [pc, #36]	; (800ec78 <MX_SPI2_Init+0x64>)
 800ec54:	2200      	movs	r2, #0
 800ec56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ec58:	4b07      	ldr	r3, [pc, #28]	; (800ec78 <MX_SPI2_Init+0x64>)
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800ec5e:	4b06      	ldr	r3, [pc, #24]	; (800ec78 <MX_SPI2_Init+0x64>)
 800ec60:	220a      	movs	r2, #10
 800ec62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800ec64:	4804      	ldr	r0, [pc, #16]	; (800ec78 <MX_SPI2_Init+0x64>)
 800ec66:	f004 fdc1 	bl	80137ec <HAL_SPI_Init>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d001      	beq.n	800ec74 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800ec70:	f001 f8d0 	bl	800fe14 <Error_Handler>
  }
}
 800ec74:	bf00      	nop
 800ec76:	bd80      	pop	{r7, pc}
 800ec78:	2000558c 	.word	0x2000558c
 800ec7c:	40003800 	.word	0x40003800

0800ec80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b08a      	sub	sp, #40	; 0x28
 800ec84:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ec86:	f107 0320 	add.w	r3, r7, #32
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	601a      	str	r2, [r3, #0]
 800ec8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ec90:	1d3b      	adds	r3, r7, #4
 800ec92:	2200      	movs	r2, #0
 800ec94:	601a      	str	r2, [r3, #0]
 800ec96:	605a      	str	r2, [r3, #4]
 800ec98:	609a      	str	r2, [r3, #8]
 800ec9a:	60da      	str	r2, [r3, #12]
 800ec9c:	611a      	str	r2, [r3, #16]
 800ec9e:	615a      	str	r2, [r3, #20]
 800eca0:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800eca2:	4b22      	ldr	r3, [pc, #136]	; (800ed2c <MX_TIM4_Init+0xac>)
 800eca4:	4a22      	ldr	r2, [pc, #136]	; (800ed30 <MX_TIM4_Init+0xb0>)
 800eca6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16;
 800eca8:	4b20      	ldr	r3, [pc, #128]	; (800ed2c <MX_TIM4_Init+0xac>)
 800ecaa:	2210      	movs	r2, #16
 800ecac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ecae:	4b1f      	ldr	r3, [pc, #124]	; (800ed2c <MX_TIM4_Init+0xac>)
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 800ecb4:	4b1d      	ldr	r3, [pc, #116]	; (800ed2c <MX_TIM4_Init+0xac>)
 800ecb6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ecba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ecbc:	4b1b      	ldr	r3, [pc, #108]	; (800ed2c <MX_TIM4_Init+0xac>)
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ecc2:	4b1a      	ldr	r3, [pc, #104]	; (800ed2c <MX_TIM4_Init+0xac>)
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800ecc8:	4818      	ldr	r0, [pc, #96]	; (800ed2c <MX_TIM4_Init+0xac>)
 800ecca:	f005 fc79 	bl	80145c0 <HAL_TIM_PWM_Init>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d001      	beq.n	800ecd8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800ecd4:	f001 f89e 	bl	800fe14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800ece0:	f107 0320 	add.w	r3, r7, #32
 800ece4:	4619      	mov	r1, r3
 800ece6:	4811      	ldr	r0, [pc, #68]	; (800ed2c <MX_TIM4_Init+0xac>)
 800ece8:	f006 fa46 	bl	8015178 <HAL_TIMEx_MasterConfigSynchronization>
 800ecec:	4603      	mov	r3, r0
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d001      	beq.n	800ecf6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800ecf2:	f001 f88f 	bl	800fe14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ecf6:	2360      	movs	r3, #96	; 0x60
 800ecf8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 800ecfa:	23fa      	movs	r3, #250	; 0xfa
 800ecfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ed02:	2300      	movs	r3, #0
 800ed04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ed06:	1d3b      	adds	r3, r7, #4
 800ed08:	2200      	movs	r2, #0
 800ed0a:	4619      	mov	r1, r3
 800ed0c:	4807      	ldr	r0, [pc, #28]	; (800ed2c <MX_TIM4_Init+0xac>)
 800ed0e:	f005 ff17 	bl	8014b40 <HAL_TIM_PWM_ConfigChannel>
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d001      	beq.n	800ed1c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800ed18:	f001 f87c 	bl	800fe14 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800ed1c:	4803      	ldr	r0, [pc, #12]	; (800ed2c <MX_TIM4_Init+0xac>)
 800ed1e:	f7ff fbad 	bl	800e47c <HAL_TIM_MspPostInit>
}
 800ed22:	bf00      	nop
 800ed24:	3728      	adds	r7, #40	; 0x28
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
 800ed2a:	bf00      	nop
 800ed2c:	200055e4 	.word	0x200055e4
 800ed30:	40000800 	.word	0x40000800

0800ed34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 800ed38:	4b11      	ldr	r3, [pc, #68]	; (800ed80 <MX_USART1_UART_Init+0x4c>)
 800ed3a:	4a12      	ldr	r2, [pc, #72]	; (800ed84 <MX_USART1_UART_Init+0x50>)
 800ed3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800ed3e:	4b10      	ldr	r3, [pc, #64]	; (800ed80 <MX_USART1_UART_Init+0x4c>)
 800ed40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ed44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ed46:	4b0e      	ldr	r3, [pc, #56]	; (800ed80 <MX_USART1_UART_Init+0x4c>)
 800ed48:	2200      	movs	r2, #0
 800ed4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ed4c:	4b0c      	ldr	r3, [pc, #48]	; (800ed80 <MX_USART1_UART_Init+0x4c>)
 800ed4e:	2200      	movs	r2, #0
 800ed50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ed52:	4b0b      	ldr	r3, [pc, #44]	; (800ed80 <MX_USART1_UART_Init+0x4c>)
 800ed54:	2200      	movs	r2, #0
 800ed56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ed58:	4b09      	ldr	r3, [pc, #36]	; (800ed80 <MX_USART1_UART_Init+0x4c>)
 800ed5a:	220c      	movs	r2, #12
 800ed5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ed5e:	4b08      	ldr	r3, [pc, #32]	; (800ed80 <MX_USART1_UART_Init+0x4c>)
 800ed60:	2200      	movs	r2, #0
 800ed62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ed64:	4b06      	ldr	r3, [pc, #24]	; (800ed80 <MX_USART1_UART_Init+0x4c>)
 800ed66:	2200      	movs	r2, #0
 800ed68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ed6a:	4805      	ldr	r0, [pc, #20]	; (800ed80 <MX_USART1_UART_Init+0x4c>)
 800ed6c:	f006 fa86 	bl	801527c <HAL_UART_Init>
 800ed70:	4603      	mov	r3, r0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d001      	beq.n	800ed7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800ed76:	f001 f84d 	bl	800fe14 <Error_Handler>
  }
}
 800ed7a:	bf00      	nop
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	20005674 	.word	0x20005674
 800ed84:	40011000 	.word	0x40011000

0800ed88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b08a      	sub	sp, #40	; 0x28
 800ed8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed8e:	f107 0314 	add.w	r3, r7, #20
 800ed92:	2200      	movs	r2, #0
 800ed94:	601a      	str	r2, [r3, #0]
 800ed96:	605a      	str	r2, [r3, #4]
 800ed98:	609a      	str	r2, [r3, #8]
 800ed9a:	60da      	str	r2, [r3, #12]
 800ed9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ed9e:	2300      	movs	r3, #0
 800eda0:	613b      	str	r3, [r7, #16]
 800eda2:	4b5d      	ldr	r3, [pc, #372]	; (800ef18 <MX_GPIO_Init+0x190>)
 800eda4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eda6:	4a5c      	ldr	r2, [pc, #368]	; (800ef18 <MX_GPIO_Init+0x190>)
 800eda8:	f043 0304 	orr.w	r3, r3, #4
 800edac:	6313      	str	r3, [r2, #48]	; 0x30
 800edae:	4b5a      	ldr	r3, [pc, #360]	; (800ef18 <MX_GPIO_Init+0x190>)
 800edb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edb2:	f003 0304 	and.w	r3, r3, #4
 800edb6:	613b      	str	r3, [r7, #16]
 800edb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800edba:	2300      	movs	r3, #0
 800edbc:	60fb      	str	r3, [r7, #12]
 800edbe:	4b56      	ldr	r3, [pc, #344]	; (800ef18 <MX_GPIO_Init+0x190>)
 800edc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edc2:	4a55      	ldr	r2, [pc, #340]	; (800ef18 <MX_GPIO_Init+0x190>)
 800edc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edc8:	6313      	str	r3, [r2, #48]	; 0x30
 800edca:	4b53      	ldr	r3, [pc, #332]	; (800ef18 <MX_GPIO_Init+0x190>)
 800edcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edd2:	60fb      	str	r3, [r7, #12]
 800edd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800edd6:	2300      	movs	r3, #0
 800edd8:	60bb      	str	r3, [r7, #8]
 800edda:	4b4f      	ldr	r3, [pc, #316]	; (800ef18 <MX_GPIO_Init+0x190>)
 800eddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edde:	4a4e      	ldr	r2, [pc, #312]	; (800ef18 <MX_GPIO_Init+0x190>)
 800ede0:	f043 0301 	orr.w	r3, r3, #1
 800ede4:	6313      	str	r3, [r2, #48]	; 0x30
 800ede6:	4b4c      	ldr	r3, [pc, #304]	; (800ef18 <MX_GPIO_Init+0x190>)
 800ede8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edea:	f003 0301 	and.w	r3, r3, #1
 800edee:	60bb      	str	r3, [r7, #8]
 800edf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800edf2:	2300      	movs	r3, #0
 800edf4:	607b      	str	r3, [r7, #4]
 800edf6:	4b48      	ldr	r3, [pc, #288]	; (800ef18 <MX_GPIO_Init+0x190>)
 800edf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edfa:	4a47      	ldr	r2, [pc, #284]	; (800ef18 <MX_GPIO_Init+0x190>)
 800edfc:	f043 0302 	orr.w	r3, r3, #2
 800ee00:	6313      	str	r3, [r2, #48]	; 0x30
 800ee02:	4b45      	ldr	r3, [pc, #276]	; (800ef18 <MX_GPIO_Init+0x190>)
 800ee04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee06:	f003 0302 	and.w	r3, r3, #2
 800ee0a:	607b      	str	r3, [r7, #4]
 800ee0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800ee0e:	2200      	movs	r2, #0
 800ee10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ee14:	4841      	ldr	r0, [pc, #260]	; (800ef1c <MX_GPIO_Init+0x194>)
 800ee16:	f002 fe05 	bl	8011a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TC_CS_Pin|R_CS_Pin, GPIO_PIN_RESET);
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	2118      	movs	r1, #24
 800ee1e:	4840      	ldr	r0, [pc, #256]	; (800ef20 <MX_GPIO_Init+0x198>)
 800ee20:	f002 fe00 	bl	8011a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BARO_CS_Pin|IMU_CS_Pin|DCDC_EN_Pin|CUT_EN_Pin
 800ee24:	2200      	movs	r2, #0
 800ee26:	f240 31b6 	movw	r1, #950	; 0x3b6
 800ee2a:	483e      	ldr	r0, [pc, #248]	; (800ef24 <MX_GPIO_Init+0x19c>)
 800ee2c:	f002 fdfa 	bl	8011a24 <HAL_GPIO_WritePin>
                          |P_EN_LIGHT_Pin|P_EN_CUT_Pin|P_EN_RADIO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800ee30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ee34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ee36:	2301      	movs	r3, #1
 800ee38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee3e:	2300      	movs	r3, #0
 800ee40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800ee42:	f107 0314 	add.w	r3, r7, #20
 800ee46:	4619      	mov	r1, r3
 800ee48:	4834      	ldr	r0, [pc, #208]	; (800ef1c <MX_GPIO_Init+0x194>)
 800ee4a:	f002 fb6b 	bl	8011524 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800ee4e:	2304      	movs	r3, #4
 800ee50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ee52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800ee56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800ee5c:	f107 0314 	add.w	r3, r7, #20
 800ee60:	4619      	mov	r1, r3
 800ee62:	482f      	ldr	r0, [pc, #188]	; (800ef20 <MX_GPIO_Init+0x198>)
 800ee64:	f002 fb5e 	bl	8011524 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_CS_Pin R_CS_Pin */
  GPIO_InitStruct.Pin = TC_CS_Pin|R_CS_Pin;
 800ee68:	2318      	movs	r3, #24
 800ee6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee70:	2300      	movs	r3, #0
 800ee72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee74:	2300      	movs	r3, #0
 800ee76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee78:	f107 0314 	add.w	r3, r7, #20
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	4828      	ldr	r0, [pc, #160]	; (800ef20 <MX_GPIO_Init+0x198>)
 800ee80:	f002 fb50 	bl	8011524 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_INT_Pin */
  GPIO_InitStruct.Pin = RF_INT_Pin;
 800ee84:	2301      	movs	r3, #1
 800ee86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_INT_GPIO_Port, &GPIO_InitStruct);
 800ee90:	f107 0314 	add.w	r3, r7, #20
 800ee94:	4619      	mov	r1, r3
 800ee96:	4823      	ldr	r0, [pc, #140]	; (800ef24 <MX_GPIO_Init+0x19c>)
 800ee98:	f002 fb44 	bl	8011524 <HAL_GPIO_Init>

  /*Configure GPIO pins : BARO_CS_Pin IMU_CS_Pin DCDC_EN_Pin CUT_EN_Pin
                           P_EN_LIGHT_Pin P_EN_CUT_Pin P_EN_RADIO_Pin */
  GPIO_InitStruct.Pin = BARO_CS_Pin|IMU_CS_Pin|DCDC_EN_Pin|CUT_EN_Pin
 800ee9c:	f240 33b6 	movw	r3, #950	; 0x3b6
 800eea0:	617b      	str	r3, [r7, #20]
                          |P_EN_LIGHT_Pin|P_EN_CUT_Pin|P_EN_RADIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800eea2:	2301      	movs	r3, #1
 800eea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eea6:	2300      	movs	r3, #0
 800eea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eeae:	f107 0314 	add.w	r3, r7, #20
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	481b      	ldr	r0, [pc, #108]	; (800ef24 <MX_GPIO_Init+0x19c>)
 800eeb6:	f002 fb35 	bl	8011524 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|IMU_INT1_Pin;
 800eeba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800eebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800eec0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800eec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eec6:	2300      	movs	r3, #0
 800eec8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eeca:	f107 0314 	add.w	r3, r7, #20
 800eece:	4619      	mov	r1, r3
 800eed0:	4814      	ldr	r0, [pc, #80]	; (800ef24 <MX_GPIO_Init+0x19c>)
 800eed2:	f002 fb27 	bl	8011524 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DET_Pin CHRG_Pin */
  GPIO_InitStruct.Pin = USB_DET_Pin|CHRG_Pin;
 800eed6:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800eeda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800eedc:	2300      	movs	r3, #0
 800eede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eee0:	2300      	movs	r3, #0
 800eee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eee4:	f107 0314 	add.w	r3, r7, #20
 800eee8:	4619      	mov	r1, r3
 800eeea:	480d      	ldr	r0, [pc, #52]	; (800ef20 <MX_GPIO_Init+0x198>)
 800eeec:	f002 fb1a 	bl	8011524 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800eef0:	2200      	movs	r2, #0
 800eef2:	2105      	movs	r1, #5
 800eef4:	2008      	movs	r0, #8
 800eef6:	f001 fff5 	bl	8010ee4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800eefa:	2008      	movs	r0, #8
 800eefc:	f002 f80e 	bl	8010f1c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800ef00:	2200      	movs	r2, #0
 800ef02:	2105      	movs	r1, #5
 800ef04:	2028      	movs	r0, #40	; 0x28
 800ef06:	f001 ffed 	bl	8010ee4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800ef0a:	2028      	movs	r0, #40	; 0x28
 800ef0c:	f002 f806 	bl	8010f1c <HAL_NVIC_EnableIRQ>
}
 800ef10:	bf00      	nop
 800ef12:	3728      	adds	r7, #40	; 0x28
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	40023800 	.word	0x40023800
 800ef1c:	40020800 	.word	0x40020800
 800ef20:	40020000 	.word	0x40020000
 800ef24:	40020400 	.word	0x40020400

0800ef28 <lsm6dsr_init>:
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len);

static stmdev_ctx_t ctx;

bool lsm6dsr_init(LSM6DSR* dev){
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b084      	sub	sp, #16
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
	dev->dev_ctx = &ctx;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	4a20      	ldr	r2, [pc, #128]	; (800efb4 <lsm6dsr_init+0x8c>)
 800ef34:	605a      	str	r2, [r3, #4]
	dev->dev_ctx->write_reg = platform_write;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	685b      	ldr	r3, [r3, #4]
 800ef3a:	4a1f      	ldr	r2, [pc, #124]	; (800efb8 <lsm6dsr_init+0x90>)
 800ef3c:	601a      	str	r2, [r3, #0]
	dev->dev_ctx->read_reg = platform_read;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	685b      	ldr	r3, [r3, #4]
 800ef42:	4a1e      	ldr	r2, [pc, #120]	; (800efbc <lsm6dsr_init+0x94>)
 800ef44:	605a      	str	r2, [r3, #4]
	dev->dev_ctx->handle = dev->spi_handle;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	6812      	ldr	r2, [r2, #0]
 800ef4e:	609a      	str	r2, [r3, #8]

	uint8_t whoamI;

	lsm6dsr_device_id_get(dev->dev_ctx, &whoamI);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	685b      	ldr	r3, [r3, #4]
 800ef54:	f107 020f 	add.w	r2, r7, #15
 800ef58:	4611      	mov	r1, r2
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f000 fc69 	bl	800f832 <lsm6dsr_device_id_get>

	if (whoamI != LSM6DSR_ID)
 800ef60:	7bfb      	ldrb	r3, [r7, #15]
 800ef62:	2b6b      	cmp	r3, #107	; 0x6b
 800ef64:	d001      	beq.n	800ef6a <lsm6dsr_init+0x42>
	  return false;
 800ef66:	2300      	movs	r3, #0
 800ef68:	e01f      	b.n	800efaa <lsm6dsr_init+0x82>

	lsm6dsr_reset_set(dev->dev_ctx, PROPERTY_ENABLE);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	2101      	movs	r1, #1
 800ef70:	4618      	mov	r0, r3
 800ef72:	f000 fc6f 	bl	800f854 <lsm6dsr_reset_set>
	osDelay(10);
 800ef76:	200a      	movs	r0, #10
 800ef78:	f009 fdc6 	bl	8018b08 <osDelay>

	/* Disable I3C interface */
	lsm6dsr_i3c_disable_set(dev->dev_ctx, LSM6DSR_I3C_DISABLE);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	2180      	movs	r1, #128	; 0x80
 800ef82:	4618      	mov	r0, r3
 800ef84:	f000 fcb2 	bl	800f8ec <lsm6dsr_i3c_disable_set>

	/* Set full scale */
	lsm6dsr_xl_full_scale_set(dev->dev_ctx, dev->accel_range);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	685a      	ldr	r2, [r3, #4]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	7a1b      	ldrb	r3, [r3, #8]
 800ef90:	4619      	mov	r1, r3
 800ef92:	4610      	mov	r0, r2
 800ef94:	f000 f998 	bl	800f2c8 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(dev->dev_ctx, dev->gyro_range);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	685a      	ldr	r2, [r3, #4]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	7a9b      	ldrb	r3, [r3, #10]
 800efa0:	4619      	mov	r1, r3
 800efa2:	4610      	mov	r0, r2
 800efa4:	f000 fab2 	bl	800f50c <lsm6dsr_gy_full_scale_set>

	return true;
 800efa8:	2301      	movs	r3, #1
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3710      	adds	r7, #16
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	20000488 	.word	0x20000488
 800efb8:	0800f1b9 	.word	0x0800f1b9
 800efbc:	0800f209 	.word	0x0800f209

0800efc0 <lsm6dsr_shutdown>:

void lsm6dsr_shutdown(LSM6DSR* dev){
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b082      	sub	sp, #8
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
	/* Set Output Data Rate to 0 */
	lsm6dsr_xl_data_rate_set(dev->dev_ctx, LSM6DSR_XL_ODR_OFF);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	685b      	ldr	r3, [r3, #4]
 800efcc:	2100      	movs	r1, #0
 800efce:	4618      	mov	r0, r3
 800efd0:	f000 f9a0 	bl	800f314 <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(dev->dev_ctx, LSM6DSR_GY_ODR_OFF);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	685b      	ldr	r3, [r3, #4]
 800efd8:	2100      	movs	r1, #0
 800efda:	4618      	mov	r0, r3
 800efdc:	f000 fabc 	bl	800f558 <lsm6dsr_gy_data_rate_set>
}
 800efe0:	bf00      	nop
 800efe2:	3708      	adds	r7, #8
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <lsm6dsr_enable>:

void lsm6dsr_enable(LSM6DSR* dev){
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(dev->dev_ctx, dev->accel_odr);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	685a      	ldr	r2, [r3, #4]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	7a5b      	ldrb	r3, [r3, #9]
 800eff8:	4619      	mov	r1, r3
 800effa:	4610      	mov	r0, r2
 800effc:	f000 f98a 	bl	800f314 <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(dev->dev_ctx, dev->gyro_odr);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	685a      	ldr	r2, [r3, #4]
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	7adb      	ldrb	r3, [r3, #11]
 800f008:	4619      	mov	r1, r3
 800f00a:	4610      	mov	r0, r2
 800f00c:	f000 faa4 	bl	800f558 <lsm6dsr_gy_data_rate_set>
}
 800f010:	bf00      	nop
 800f012:	3708      	adds	r7, #8
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <lsm6dsr_wakeup_enable>:

// Threshold in m/s^2
void lsm6dsr_wakeup_enable(LSM6DSR* dev, uint32_t threshold_ms2){
 800f018:	b580      	push	{r7, lr}
 800f01a:	b086      	sub	sp, #24
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	60f8      	str	r0, [r7, #12]
 800f020:	60b9      	str	r1, [r7, #8]

	lsm6dsr_xl_data_rate_set(dev->dev_ctx, dev->accel_odr);
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	685a      	ldr	r2, [r3, #4]
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	7a5b      	ldrb	r3, [r3, #9]
 800f02a:	4619      	mov	r1, r3
 800f02c:	4610      	mov	r0, r2
 800f02e:	f000 f971 	bl	800f314 <lsm6dsr_xl_data_rate_set>

	lsm6dsr_xl_full_scale_set(dev->dev_ctx, dev->accel_range);
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	685a      	ldr	r2, [r3, #4]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	7a1b      	ldrb	r3, [r3, #8]
 800f03a:	4619      	mov	r1, r3
 800f03c:	4610      	mov	r0, r2
 800f03e:	f000 f943 	bl	800f2c8 <lsm6dsr_xl_full_scale_set>
	/* Apply high-pass digital filter on Wake-Up function */
	lsm6dsr_xl_hp_path_internal_set(dev->dev_ctx, LSM6DSR_USE_SLOPE);
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	685b      	ldr	r3, [r3, #4]
 800f046:	2100      	movs	r1, #0
 800f048:	4618      	mov	r0, r3
 800f04a:	f000 fc29 	bl	800f8a0 <lsm6dsr_xl_hp_path_internal_set>
	/* Set Wake-Up threshold: 1 LSb corresponds to FS_XL/2^6 */
	uint8_t threshold = (uint8_t)((float)threshold_ms2 / ((16.0f*9.81f)/64.0f));
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	ee07 3a90 	vmov	s15, r3
 800f054:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f058:	eddf 6a14 	vldr	s13, [pc, #80]	; 800f0ac <lsm6dsr_wakeup_enable+0x94>
 800f05c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f064:	edc7 7a01 	vstr	s15, [r7, #4]
 800f068:	793b      	ldrb	r3, [r7, #4]
 800f06a:	75fb      	strb	r3, [r7, #23]
	lsm6dsr_wkup_threshold_set(dev->dev_ctx, threshold);
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	7dfa      	ldrb	r2, [r7, #23]
 800f072:	4611      	mov	r1, r2
 800f074:	4618      	mov	r0, r3
 800f076:	f000 fe32 	bl	800fcde <lsm6dsr_wkup_threshold_set>

	lsm6dsr_pin_int1_route_t int1_route;
	lsm6dsr_pin_int1_route_get(dev->dev_ctx, &int1_route);
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	f107 0210 	add.w	r2, r7, #16
 800f082:	4611      	mov	r1, r2
 800f084:	4618      	mov	r0, r3
 800f086:	f000 fddd 	bl	800fc44 <lsm6dsr_pin_int1_route_get>
	int1_route.md1_cfg.int1_wu = PROPERTY_ENABLE;
 800f08a:	7c7b      	ldrb	r3, [r7, #17]
 800f08c:	f043 0320 	orr.w	r3, r3, #32
 800f090:	747b      	strb	r3, [r7, #17]
	lsm6dsr_pin_int1_route_set(dev->dev_ctx, &int1_route);
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	685b      	ldr	r3, [r3, #4]
 800f096:	f107 0210 	add.w	r2, r7, #16
 800f09a:	4611      	mov	r1, r2
 800f09c:	4618      	mov	r0, r3
 800f09e:	f000 fc6b 	bl	800f978 <lsm6dsr_pin_int1_route_set>
}
 800f0a2:	bf00      	nop
 800f0a4:	3718      	adds	r7, #24
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}
 800f0aa:	bf00      	nop
 800f0ac:	401cf5c3 	.word	0x401cf5c3

0800f0b0 <lsm6dsr_wakeup_disable>:

void lsm6dsr_wakeup_disable(LSM6DSR* dev){
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b084      	sub	sp, #16
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
	lsm6dsr_pin_int1_route_t int1_route;
	lsm6dsr_pin_int1_route_get(dev->dev_ctx, &int1_route);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	685b      	ldr	r3, [r3, #4]
 800f0bc:	f107 0208 	add.w	r2, r7, #8
 800f0c0:	4611      	mov	r1, r2
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f000 fdbe 	bl	800fc44 <lsm6dsr_pin_int1_route_get>
	int1_route.md1_cfg.int1_wu = PROPERTY_DISABLE;
 800f0c8:	7a7b      	ldrb	r3, [r7, #9]
 800f0ca:	f36f 1345 	bfc	r3, #5, #1
 800f0ce:	727b      	strb	r3, [r7, #9]
	lsm6dsr_pin_int1_route_set(dev->dev_ctx, &int1_route);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	f107 0208 	add.w	r2, r7, #8
 800f0d8:	4611      	mov	r1, r2
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f000 fc4c 	bl	800f978 <lsm6dsr_pin_int1_route_set>
}
 800f0e0:	bf00      	nop
 800f0e2:	3710      	adds	r7, #16
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <get_accel_conversion>:


float get_accel_conversion(LSM6DSR* dev){
 800f0e8:	b480      	push	{r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
	switch(dev->accel_range){
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	7a1b      	ldrb	r3, [r3, #8]
 800f0f4:	2b03      	cmp	r3, #3
 800f0f6:	d813      	bhi.n	800f120 <get_accel_conversion+0x38>
 800f0f8:	a201      	add	r2, pc, #4	; (adr r2, 800f100 <get_accel_conversion+0x18>)
 800f0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0fe:	bf00      	nop
 800f100:	0800f111 	.word	0x0800f111
 800f104:	0800f11d 	.word	0x0800f11d
 800f108:	0800f115 	.word	0x0800f115
 800f10c:	0800f119 	.word	0x0800f119
		case LSM6DSR_2g:
			return 0.00059841f;
 800f110:	4b09      	ldr	r3, [pc, #36]	; (800f138 <get_accel_conversion+0x50>)
 800f112:	e007      	b.n	800f124 <get_accel_conversion+0x3c>
			break;
		case LSM6DSR_4g:
			return 0.00119682f;
 800f114:	4b09      	ldr	r3, [pc, #36]	; (800f13c <get_accel_conversion+0x54>)
 800f116:	e005      	b.n	800f124 <get_accel_conversion+0x3c>
			break;
		case LSM6DSR_8g:
			return 0.00239364f;
 800f118:	4b09      	ldr	r3, [pc, #36]	; (800f140 <get_accel_conversion+0x58>)
 800f11a:	e003      	b.n	800f124 <get_accel_conversion+0x3c>
			break;
		case LSM6DSR_16g:
			return 0.00478728f;
 800f11c:	4b09      	ldr	r3, [pc, #36]	; (800f144 <get_accel_conversion+0x5c>)
 800f11e:	e001      	b.n	800f124 <get_accel_conversion+0x3c>
			break;
		default:
			return 0;
 800f120:	f04f 0300 	mov.w	r3, #0
 800f124:	ee07 3a90 	vmov	s15, r3
			break;
	}
}
 800f128:	eeb0 0a67 	vmov.f32	s0, s15
 800f12c:	370c      	adds	r7, #12
 800f12e:	46bd      	mov	sp, r7
 800f130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f134:	4770      	bx	lr
 800f136:	bf00      	nop
 800f138:	3a1cde9e 	.word	0x3a1cde9e
 800f13c:	3a9cde9e 	.word	0x3a9cde9e
 800f140:	3b1cde9e 	.word	0x3b1cde9e
 800f144:	3b9cde9e 	.word	0x3b9cde9e

0800f148 <lsm6dsr_get_accel>:

void lsm6dsr_get_accel(LSM6DSR* dev, float* acceleration){
 800f148:	b580      	push	{r7, lr}
 800f14a:	ed2d 8b02 	vpush	{d8}
 800f14e:	b086      	sub	sp, #24
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	6039      	str	r1, [r7, #0]
	int16_t a[3];
	lsm6dsr_acceleration_raw_get(dev->dev_ctx, a);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	f107 020c 	add.w	r2, r7, #12
 800f15e:	4611      	mov	r1, r2
 800f160:	4618      	mov	r0, r3
 800f162:	f000 faf5 	bl	800f750 <lsm6dsr_acceleration_raw_get>
	for(int i = 0; i < 3; i++){
 800f166:	2300      	movs	r3, #0
 800f168:	617b      	str	r3, [r7, #20]
 800f16a:	e01a      	b.n	800f1a2 <lsm6dsr_get_accel+0x5a>
		acceleration[i] = (float)a[i] * get_accel_conversion(dev);
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	005b      	lsls	r3, r3, #1
 800f170:	f107 0218 	add.w	r2, r7, #24
 800f174:	4413      	add	r3, r2
 800f176:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 800f17a:	ee07 3a90 	vmov	s15, r3
 800f17e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f7ff ffb0 	bl	800f0e8 <get_accel_conversion>
 800f188:	eef0 7a40 	vmov.f32	s15, s0
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	009b      	lsls	r3, r3, #2
 800f190:	683a      	ldr	r2, [r7, #0]
 800f192:	4413      	add	r3, r2
 800f194:	ee68 7a27 	vmul.f32	s15, s16, s15
 800f198:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 3; i++){
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	3301      	adds	r3, #1
 800f1a0:	617b      	str	r3, [r7, #20]
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	2b02      	cmp	r3, #2
 800f1a6:	dde1      	ble.n	800f16c <lsm6dsr_get_accel+0x24>
	}
}
 800f1a8:	bf00      	nop
 800f1aa:	bf00      	nop
 800f1ac:	3718      	adds	r7, #24
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	ecbd 8b02 	vpop	{d8}
 800f1b4:	bd80      	pop	{r7, pc}
	...

0800f1b8 <platform_write>:



static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b084      	sub	sp, #16
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	60f8      	str	r0, [r7, #12]
 800f1c0:	607a      	str	r2, [r7, #4]
 800f1c2:	461a      	mov	r2, r3
 800f1c4:	460b      	mov	r3, r1
 800f1c6:	72fb      	strb	r3, [r7, #11]
 800f1c8:	4613      	mov	r3, r2
 800f1ca:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	2104      	movs	r1, #4
 800f1d0:	480c      	ldr	r0, [pc, #48]	; (800f204 <platform_write+0x4c>)
 800f1d2:	f002 fc27 	bl	8011a24 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 2);
 800f1d6:	f107 010b 	add.w	r1, r7, #11
 800f1da:	2302      	movs	r3, #2
 800f1dc:	2201      	movs	r2, #1
 800f1de:	68f8      	ldr	r0, [r7, #12]
 800f1e0:	f004 fbb5 	bl	801394e <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 2);
 800f1e4:	893a      	ldrh	r2, [r7, #8]
 800f1e6:	2302      	movs	r3, #2
 800f1e8:	6879      	ldr	r1, [r7, #4]
 800f1ea:	68f8      	ldr	r0, [r7, #12]
 800f1ec:	f004 fbaf 	bl	801394e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	2104      	movs	r1, #4
 800f1f4:	4803      	ldr	r0, [pc, #12]	; (800f204 <platform_write+0x4c>)
 800f1f6:	f002 fc15 	bl	8011a24 <HAL_GPIO_WritePin>
  return 0;
 800f1fa:	2300      	movs	r3, #0
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3710      	adds	r7, #16
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}
 800f204:	40020400 	.word	0x40020400

0800f208 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 800f208:	b580      	push	{r7, lr}
 800f20a:	b084      	sub	sp, #16
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	60f8      	str	r0, [r7, #12]
 800f210:	607a      	str	r2, [r7, #4]
 800f212:	461a      	mov	r2, r3
 800f214:	460b      	mov	r3, r1
 800f216:	72fb      	strb	r3, [r7, #11]
 800f218:	4613      	mov	r3, r2
 800f21a:	813b      	strh	r3, [r7, #8]
  reg |= 0x80;
 800f21c:	7afb      	ldrb	r3, [r7, #11]
 800f21e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f222:	b2db      	uxtb	r3, r3
 800f224:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 800f226:	2200      	movs	r2, #0
 800f228:	2104      	movs	r1, #4
 800f22a:	480e      	ldr	r0, [pc, #56]	; (800f264 <platform_read+0x5c>)
 800f22c:	f002 fbfa 	bl	8011a24 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 800f230:	f107 010b 	add.w	r1, r7, #11
 800f234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f238:	2201      	movs	r2, #1
 800f23a:	68f8      	ldr	r0, [r7, #12]
 800f23c:	f004 fb87 	bl	801394e <HAL_SPI_Transmit>
  HAL_SPI_Receive(handle, bufp, len, 1000);
 800f240:	893a      	ldrh	r2, [r7, #8]
 800f242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f246:	6879      	ldr	r1, [r7, #4]
 800f248:	68f8      	ldr	r0, [r7, #12]
 800f24a:	f004 fcbc 	bl	8013bc6 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 800f24e:	2201      	movs	r2, #1
 800f250:	2104      	movs	r1, #4
 800f252:	4804      	ldr	r0, [pc, #16]	; (800f264 <platform_read+0x5c>)
 800f254:	f002 fbe6 	bl	8011a24 <HAL_GPIO_WritePin>
  return 0;
 800f258:	2300      	movs	r3, #0
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3710      	adds	r7, #16
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}
 800f262:	bf00      	nop
 800f264:	40020400 	.word	0x40020400

0800f268 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800f268:	b590      	push	{r4, r7, lr}
 800f26a:	b087      	sub	sp, #28
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	60f8      	str	r0, [r7, #12]
 800f270:	607a      	str	r2, [r7, #4]
 800f272:	461a      	mov	r2, r3
 800f274:	460b      	mov	r3, r1
 800f276:	72fb      	strb	r3, [r7, #11]
 800f278:	4613      	mov	r3, r2
 800f27a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	685c      	ldr	r4, [r3, #4]
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	6898      	ldr	r0, [r3, #8]
 800f284:	893b      	ldrh	r3, [r7, #8]
 800f286:	7af9      	ldrb	r1, [r7, #11]
 800f288:	687a      	ldr	r2, [r7, #4]
 800f28a:	47a0      	blx	r4
 800f28c:	6178      	str	r0, [r7, #20]

  return ret;
 800f28e:	697b      	ldr	r3, [r7, #20]
}
 800f290:	4618      	mov	r0, r3
 800f292:	371c      	adds	r7, #28
 800f294:	46bd      	mov	sp, r7
 800f296:	bd90      	pop	{r4, r7, pc}

0800f298 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800f298:	b590      	push	{r4, r7, lr}
 800f29a:	b087      	sub	sp, #28
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	60f8      	str	r0, [r7, #12]
 800f2a0:	607a      	str	r2, [r7, #4]
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	72fb      	strb	r3, [r7, #11]
 800f2a8:	4613      	mov	r3, r2
 800f2aa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	681c      	ldr	r4, [r3, #0]
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	6898      	ldr	r0, [r3, #8]
 800f2b4:	893b      	ldrh	r3, [r7, #8]
 800f2b6:	7af9      	ldrb	r1, [r7, #11]
 800f2b8:	687a      	ldr	r2, [r7, #4]
 800f2ba:	47a0      	blx	r4
 800f2bc:	6178      	str	r0, [r7, #20]

  return ret;
 800f2be:	697b      	ldr	r3, [r7, #20]
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	371c      	adds	r7, #28
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd90      	pop	{r4, r7, pc}

0800f2c8 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b084      	sub	sp, #16
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800f2d4:	f107 0208 	add.w	r2, r7, #8
 800f2d8:	2301      	movs	r3, #1
 800f2da:	2110      	movs	r1, #16
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f7ff ffc3 	bl	800f268 <lsm6dsr_read_reg>
 800f2e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d10f      	bne.n	800f30a <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 800f2ea:	78fb      	ldrb	r3, [r7, #3]
 800f2ec:	f003 0303 	and.w	r3, r3, #3
 800f2f0:	b2da      	uxtb	r2, r3
 800f2f2:	7a3b      	ldrb	r3, [r7, #8]
 800f2f4:	f362 0383 	bfi	r3, r2, #2, #2
 800f2f8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800f2fa:	f107 0208 	add.w	r2, r7, #8
 800f2fe:	2301      	movs	r3, #1
 800f300:	2110      	movs	r1, #16
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f7ff ffc8 	bl	800f298 <lsm6dsr_write_reg>
 800f308:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800f30a:	68fb      	ldr	r3, [r7, #12]
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3710      	adds	r7, #16
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}

0800f314 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b086      	sub	sp, #24
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	460b      	mov	r3, r1
 800f31e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 800f320:	78fb      	ldrb	r3, [r7, #3]
 800f322:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 800f324:	f107 030c 	add.w	r3, r7, #12
 800f328:	4619      	mov	r1, r3
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f000 fcfd 	bl	800fd2a <lsm6dsr_fsm_enable_get>
 800f330:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	2b00      	cmp	r3, #0
 800f336:	f040 80c4 	bne.w	800f4c2 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800f33a:	7b3b      	ldrb	r3, [r7, #12]
 800f33c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f340:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800f342:	7b3b      	ldrb	r3, [r7, #12]
 800f344:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f348:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800f34a:	4313      	orrs	r3, r2
 800f34c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800f34e:	7b3b      	ldrb	r3, [r7, #12]
 800f350:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f354:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800f356:	4313      	orrs	r3, r2
 800f358:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800f35a:	7b3b      	ldrb	r3, [r7, #12]
 800f35c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f360:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800f362:	4313      	orrs	r3, r2
 800f364:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800f366:	7b3b      	ldrb	r3, [r7, #12]
 800f368:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f36c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800f36e:	4313      	orrs	r3, r2
 800f370:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800f372:	7b3b      	ldrb	r3, [r7, #12]
 800f374:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f378:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800f37a:	4313      	orrs	r3, r2
 800f37c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800f37e:	7b3b      	ldrb	r3, [r7, #12]
 800f380:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f384:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800f386:	4313      	orrs	r3, r2
 800f388:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800f38a:	7b3b      	ldrb	r3, [r7, #12]
 800f38c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f390:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800f392:	4313      	orrs	r3, r2
 800f394:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800f396:	7b7b      	ldrb	r3, [r7, #13]
 800f398:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f39c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800f39e:	4313      	orrs	r3, r2
 800f3a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800f3a2:	7b7b      	ldrb	r3, [r7, #13]
 800f3a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f3a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800f3aa:	4313      	orrs	r3, r2
 800f3ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800f3ae:	7b7b      	ldrb	r3, [r7, #13]
 800f3b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f3b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800f3b6:	4313      	orrs	r3, r2
 800f3b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800f3ba:	7b7b      	ldrb	r3, [r7, #13]
 800f3bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f3c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800f3c2:	4313      	orrs	r3, r2
 800f3c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800f3c6:	7b7b      	ldrb	r3, [r7, #13]
 800f3c8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f3cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800f3ce:	4313      	orrs	r3, r2
 800f3d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800f3d2:	7b7b      	ldrb	r3, [r7, #13]
 800f3d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f3d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800f3da:	4313      	orrs	r3, r2
 800f3dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800f3de:	7b7b      	ldrb	r3, [r7, #13]
 800f3e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f3e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800f3ea:	7b7b      	ldrb	r3, [r7, #13]
 800f3ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f3f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800f3f2:	4313      	orrs	r3, r2
 800f3f4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	d163      	bne.n	800f4c2 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800f3fa:	f107 030b 	add.w	r3, r7, #11
 800f3fe:	4619      	mov	r1, r3
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f000 fcbf 	bl	800fd84 <lsm6dsr_fsm_data_rate_get>
 800f406:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d159      	bne.n	800f4c2 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800f40e:	7afb      	ldrb	r3, [r7, #11]
 800f410:	2b03      	cmp	r3, #3
 800f412:	d853      	bhi.n	800f4bc <lsm6dsr_xl_data_rate_set+0x1a8>
 800f414:	a201      	add	r2, pc, #4	; (adr r2, 800f41c <lsm6dsr_xl_data_rate_set+0x108>)
 800f416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f41a:	bf00      	nop
 800f41c:	0800f42d 	.word	0x0800f42d
 800f420:	0800f43f 	.word	0x0800f43f
 800f424:	0800f45d 	.word	0x0800f45d
 800f428:	0800f487 	.word	0x0800f487
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 800f42c:	78fb      	ldrb	r3, [r7, #3]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d102      	bne.n	800f438 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800f432:	2301      	movs	r3, #1
 800f434:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800f436:	e045      	b.n	800f4c4 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800f438:	78fb      	ldrb	r3, [r7, #3]
 800f43a:	75fb      	strb	r3, [r7, #23]
            break;
 800f43c:	e042      	b.n	800f4c4 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800f43e:	78fb      	ldrb	r3, [r7, #3]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d102      	bne.n	800f44a <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800f444:	2302      	movs	r3, #2
 800f446:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800f448:	e03c      	b.n	800f4c4 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800f44a:	78fb      	ldrb	r3, [r7, #3]
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	d102      	bne.n	800f456 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800f450:	2302      	movs	r3, #2
 800f452:	75fb      	strb	r3, [r7, #23]
            break;
 800f454:	e036      	b.n	800f4c4 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800f456:	78fb      	ldrb	r3, [r7, #3]
 800f458:	75fb      	strb	r3, [r7, #23]
            break;
 800f45a:	e033      	b.n	800f4c4 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800f45c:	78fb      	ldrb	r3, [r7, #3]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d102      	bne.n	800f468 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800f462:	2303      	movs	r3, #3
 800f464:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800f466:	e02d      	b.n	800f4c4 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800f468:	78fb      	ldrb	r3, [r7, #3]
 800f46a:	2b01      	cmp	r3, #1
 800f46c:	d102      	bne.n	800f474 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800f46e:	2303      	movs	r3, #3
 800f470:	75fb      	strb	r3, [r7, #23]
            break;
 800f472:	e027      	b.n	800f4c4 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800f474:	78fb      	ldrb	r3, [r7, #3]
 800f476:	2b02      	cmp	r3, #2
 800f478:	d102      	bne.n	800f480 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800f47a:	2303      	movs	r3, #3
 800f47c:	75fb      	strb	r3, [r7, #23]
            break;
 800f47e:	e021      	b.n	800f4c4 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800f480:	78fb      	ldrb	r3, [r7, #3]
 800f482:	75fb      	strb	r3, [r7, #23]
            break;
 800f484:	e01e      	b.n	800f4c4 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800f486:	78fb      	ldrb	r3, [r7, #3]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d102      	bne.n	800f492 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800f48c:	2304      	movs	r3, #4
 800f48e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800f490:	e018      	b.n	800f4c4 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800f492:	78fb      	ldrb	r3, [r7, #3]
 800f494:	2b01      	cmp	r3, #1
 800f496:	d102      	bne.n	800f49e <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800f498:	2304      	movs	r3, #4
 800f49a:	75fb      	strb	r3, [r7, #23]
            break;
 800f49c:	e012      	b.n	800f4c4 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800f49e:	78fb      	ldrb	r3, [r7, #3]
 800f4a0:	2b02      	cmp	r3, #2
 800f4a2:	d102      	bne.n	800f4aa <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800f4a4:	2304      	movs	r3, #4
 800f4a6:	75fb      	strb	r3, [r7, #23]
            break;
 800f4a8:	e00c      	b.n	800f4c4 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 800f4aa:	78fb      	ldrb	r3, [r7, #3]
 800f4ac:	2b03      	cmp	r3, #3
 800f4ae:	d102      	bne.n	800f4b6 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800f4b0:	2304      	movs	r3, #4
 800f4b2:	75fb      	strb	r3, [r7, #23]
            break;
 800f4b4:	e006      	b.n	800f4c4 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800f4b6:	78fb      	ldrb	r3, [r7, #3]
 800f4b8:	75fb      	strb	r3, [r7, #23]
            break;
 800f4ba:	e003      	b.n	800f4c4 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 800f4bc:	78fb      	ldrb	r3, [r7, #3]
 800f4be:	75fb      	strb	r3, [r7, #23]
            break;
 800f4c0:	e000      	b.n	800f4c4 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 800f4c2:	bf00      	nop
    }
  }

  if (ret == 0)
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d107      	bne.n	800f4da <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800f4ca:	f107 0208 	add.w	r2, r7, #8
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	2110      	movs	r1, #16
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f7ff fec8 	bl	800f268 <lsm6dsr_read_reg>
 800f4d8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d10f      	bne.n	800f500 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 800f4e0:	7dfb      	ldrb	r3, [r7, #23]
 800f4e2:	f003 030f 	and.w	r3, r3, #15
 800f4e6:	b2da      	uxtb	r2, r3
 800f4e8:	7a3b      	ldrb	r3, [r7, #8]
 800f4ea:	f362 1307 	bfi	r3, r2, #4, #4
 800f4ee:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800f4f0:	f107 0208 	add.w	r2, r7, #8
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	2110      	movs	r1, #16
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f7ff fecd 	bl	800f298 <lsm6dsr_write_reg>
 800f4fe:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800f500:	693b      	ldr	r3, [r7, #16]
}
 800f502:	4618      	mov	r0, r3
 800f504:	3718      	adds	r7, #24
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
 800f50a:	bf00      	nop

0800f50c <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	460b      	mov	r3, r1
 800f516:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800f518:	f107 0208 	add.w	r2, r7, #8
 800f51c:	2301      	movs	r3, #1
 800f51e:	2111      	movs	r1, #17
 800f520:	6878      	ldr	r0, [r7, #4]
 800f522:	f7ff fea1 	bl	800f268 <lsm6dsr_read_reg>
 800f526:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d10f      	bne.n	800f54e <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800f52e:	78fb      	ldrb	r3, [r7, #3]
 800f530:	f003 030f 	and.w	r3, r3, #15
 800f534:	b2da      	uxtb	r2, r3
 800f536:	7a3b      	ldrb	r3, [r7, #8]
 800f538:	f362 0303 	bfi	r3, r2, #0, #4
 800f53c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800f53e:	f107 0208 	add.w	r2, r7, #8
 800f542:	2301      	movs	r3, #1
 800f544:	2111      	movs	r1, #17
 800f546:	6878      	ldr	r0, [r7, #4]
 800f548:	f7ff fea6 	bl	800f298 <lsm6dsr_write_reg>
 800f54c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f54e:	68fb      	ldr	r3, [r7, #12]
}
 800f550:	4618      	mov	r0, r3
 800f552:	3710      	adds	r7, #16
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}

0800f558 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b086      	sub	sp, #24
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	460b      	mov	r3, r1
 800f562:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 800f564:	78fb      	ldrb	r3, [r7, #3]
 800f566:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 800f568:	f107 030c 	add.w	r3, r7, #12
 800f56c:	4619      	mov	r1, r3
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f000 fbdb 	bl	800fd2a <lsm6dsr_fsm_enable_get>
 800f574:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800f576:	693b      	ldr	r3, [r7, #16]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	f040 80c4 	bne.w	800f706 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800f57e:	7b3b      	ldrb	r3, [r7, #12]
 800f580:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f584:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800f586:	7b3b      	ldrb	r3, [r7, #12]
 800f588:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f58c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800f58e:	4313      	orrs	r3, r2
 800f590:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800f592:	7b3b      	ldrb	r3, [r7, #12]
 800f594:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f598:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800f59a:	4313      	orrs	r3, r2
 800f59c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800f59e:	7b3b      	ldrb	r3, [r7, #12]
 800f5a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f5a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800f5a6:	4313      	orrs	r3, r2
 800f5a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800f5aa:	7b3b      	ldrb	r3, [r7, #12]
 800f5ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f5b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800f5b2:	4313      	orrs	r3, r2
 800f5b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800f5b6:	7b3b      	ldrb	r3, [r7, #12]
 800f5b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f5bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800f5be:	4313      	orrs	r3, r2
 800f5c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800f5c2:	7b3b      	ldrb	r3, [r7, #12]
 800f5c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f5c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800f5ca:	4313      	orrs	r3, r2
 800f5cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800f5ce:	7b3b      	ldrb	r3, [r7, #12]
 800f5d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f5d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800f5d6:	4313      	orrs	r3, r2
 800f5d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800f5da:	7b7b      	ldrb	r3, [r7, #13]
 800f5dc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f5e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800f5e2:	4313      	orrs	r3, r2
 800f5e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800f5e6:	7b7b      	ldrb	r3, [r7, #13]
 800f5e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f5ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800f5ee:	4313      	orrs	r3, r2
 800f5f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800f5f2:	7b7b      	ldrb	r3, [r7, #13]
 800f5f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f5f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800f5fa:	4313      	orrs	r3, r2
 800f5fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800f5fe:	7b7b      	ldrb	r3, [r7, #13]
 800f600:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f604:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800f606:	4313      	orrs	r3, r2
 800f608:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800f60a:	7b7b      	ldrb	r3, [r7, #13]
 800f60c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f610:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800f612:	4313      	orrs	r3, r2
 800f614:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800f616:	7b7b      	ldrb	r3, [r7, #13]
 800f618:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f61c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800f61e:	4313      	orrs	r3, r2
 800f620:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800f622:	7b7b      	ldrb	r3, [r7, #13]
 800f624:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f628:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800f62a:	4313      	orrs	r3, r2
 800f62c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800f62e:	7b7b      	ldrb	r3, [r7, #13]
 800f630:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f634:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800f636:	4313      	orrs	r3, r2
 800f638:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800f63a:	2b01      	cmp	r3, #1
 800f63c:	d163      	bne.n	800f706 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800f63e:	f107 030b 	add.w	r3, r7, #11
 800f642:	4619      	mov	r1, r3
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f000 fb9d 	bl	800fd84 <lsm6dsr_fsm_data_rate_get>
 800f64a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d159      	bne.n	800f706 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800f652:	7afb      	ldrb	r3, [r7, #11]
 800f654:	2b03      	cmp	r3, #3
 800f656:	d853      	bhi.n	800f700 <lsm6dsr_gy_data_rate_set+0x1a8>
 800f658:	a201      	add	r2, pc, #4	; (adr r2, 800f660 <lsm6dsr_gy_data_rate_set+0x108>)
 800f65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f65e:	bf00      	nop
 800f660:	0800f671 	.word	0x0800f671
 800f664:	0800f683 	.word	0x0800f683
 800f668:	0800f6a1 	.word	0x0800f6a1
 800f66c:	0800f6cb 	.word	0x0800f6cb
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 800f670:	78fb      	ldrb	r3, [r7, #3]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d102      	bne.n	800f67c <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 800f676:	2301      	movs	r3, #1
 800f678:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800f67a:	e045      	b.n	800f708 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800f67c:	78fb      	ldrb	r3, [r7, #3]
 800f67e:	75fb      	strb	r3, [r7, #23]
            break;
 800f680:	e042      	b.n	800f708 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800f682:	78fb      	ldrb	r3, [r7, #3]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d102      	bne.n	800f68e <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 800f688:	2302      	movs	r3, #2
 800f68a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800f68c:	e03c      	b.n	800f708 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800f68e:	78fb      	ldrb	r3, [r7, #3]
 800f690:	2b01      	cmp	r3, #1
 800f692:	d102      	bne.n	800f69a <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 800f694:	2302      	movs	r3, #2
 800f696:	75fb      	strb	r3, [r7, #23]
            break;
 800f698:	e036      	b.n	800f708 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800f69a:	78fb      	ldrb	r3, [r7, #3]
 800f69c:	75fb      	strb	r3, [r7, #23]
            break;
 800f69e:	e033      	b.n	800f708 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800f6a0:	78fb      	ldrb	r3, [r7, #3]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d102      	bne.n	800f6ac <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800f6a6:	2303      	movs	r3, #3
 800f6a8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800f6aa:	e02d      	b.n	800f708 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800f6ac:	78fb      	ldrb	r3, [r7, #3]
 800f6ae:	2b01      	cmp	r3, #1
 800f6b0:	d102      	bne.n	800f6b8 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800f6b2:	2303      	movs	r3, #3
 800f6b4:	75fb      	strb	r3, [r7, #23]
            break;
 800f6b6:	e027      	b.n	800f708 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800f6b8:	78fb      	ldrb	r3, [r7, #3]
 800f6ba:	2b02      	cmp	r3, #2
 800f6bc:	d102      	bne.n	800f6c4 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800f6be:	2303      	movs	r3, #3
 800f6c0:	75fb      	strb	r3, [r7, #23]
            break;
 800f6c2:	e021      	b.n	800f708 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800f6c4:	78fb      	ldrb	r3, [r7, #3]
 800f6c6:	75fb      	strb	r3, [r7, #23]
            break;
 800f6c8:	e01e      	b.n	800f708 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800f6ca:	78fb      	ldrb	r3, [r7, #3]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d102      	bne.n	800f6d6 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800f6d0:	2304      	movs	r3, #4
 800f6d2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800f6d4:	e018      	b.n	800f708 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800f6d6:	78fb      	ldrb	r3, [r7, #3]
 800f6d8:	2b01      	cmp	r3, #1
 800f6da:	d102      	bne.n	800f6e2 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800f6dc:	2304      	movs	r3, #4
 800f6de:	75fb      	strb	r3, [r7, #23]
            break;
 800f6e0:	e012      	b.n	800f708 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800f6e2:	78fb      	ldrb	r3, [r7, #3]
 800f6e4:	2b02      	cmp	r3, #2
 800f6e6:	d102      	bne.n	800f6ee <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800f6e8:	2304      	movs	r3, #4
 800f6ea:	75fb      	strb	r3, [r7, #23]
            break;
 800f6ec:	e00c      	b.n	800f708 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 800f6ee:	78fb      	ldrb	r3, [r7, #3]
 800f6f0:	2b03      	cmp	r3, #3
 800f6f2:	d102      	bne.n	800f6fa <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800f6f4:	2304      	movs	r3, #4
 800f6f6:	75fb      	strb	r3, [r7, #23]
            break;
 800f6f8:	e006      	b.n	800f708 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800f6fa:	78fb      	ldrb	r3, [r7, #3]
 800f6fc:	75fb      	strb	r3, [r7, #23]
            break;
 800f6fe:	e003      	b.n	800f708 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 800f700:	78fb      	ldrb	r3, [r7, #3]
 800f702:	75fb      	strb	r3, [r7, #23]
            break;
 800f704:	e000      	b.n	800f708 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 800f706:	bf00      	nop
    }
  }

  if (ret == 0)
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d107      	bne.n	800f71e <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800f70e:	f107 0208 	add.w	r2, r7, #8
 800f712:	2301      	movs	r3, #1
 800f714:	2111      	movs	r1, #17
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f7ff fda6 	bl	800f268 <lsm6dsr_read_reg>
 800f71c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d10f      	bne.n	800f744 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 800f724:	7dfb      	ldrb	r3, [r7, #23]
 800f726:	f003 030f 	and.w	r3, r3, #15
 800f72a:	b2da      	uxtb	r2, r3
 800f72c:	7a3b      	ldrb	r3, [r7, #8]
 800f72e:	f362 1307 	bfi	r3, r2, #4, #4
 800f732:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800f734:	f107 0208 	add.w	r2, r7, #8
 800f738:	2301      	movs	r3, #1
 800f73a:	2111      	movs	r1, #17
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f7ff fdab 	bl	800f298 <lsm6dsr_write_reg>
 800f742:	6138      	str	r0, [r7, #16]
  }

  return ret;
 800f744:	693b      	ldr	r3, [r7, #16]
}
 800f746:	4618      	mov	r0, r3
 800f748:	3718      	adds	r7, #24
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	bf00      	nop

0800f750 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b086      	sub	sp, #24
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 800f75a:	f107 020c 	add.w	r2, r7, #12
 800f75e:	2306      	movs	r3, #6
 800f760:	2128      	movs	r1, #40	; 0x28
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f7ff fd80 	bl	800f268 <lsm6dsr_read_reg>
 800f768:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800f76a:	7b7b      	ldrb	r3, [r7, #13]
 800f76c:	b21a      	sxth	r2, r3
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f778:	b29b      	uxth	r3, r3
 800f77a:	021b      	lsls	r3, r3, #8
 800f77c:	b29a      	uxth	r2, r3
 800f77e:	7b3b      	ldrb	r3, [r7, #12]
 800f780:	b29b      	uxth	r3, r3
 800f782:	4413      	add	r3, r2
 800f784:	b29b      	uxth	r3, r3
 800f786:	b21a      	sxth	r2, r3
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800f78c:	7bfa      	ldrb	r2, [r7, #15]
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	3302      	adds	r3, #2
 800f792:	b212      	sxth	r2, r2
 800f794:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	3302      	adds	r3, #2
 800f79a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	021b      	lsls	r3, r3, #8
 800f7a2:	b29a      	uxth	r2, r3
 800f7a4:	7bbb      	ldrb	r3, [r7, #14]
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	4413      	add	r3, r2
 800f7aa:	b29a      	uxth	r2, r3
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	3302      	adds	r3, #2
 800f7b0:	b212      	sxth	r2, r2
 800f7b2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800f7b4:	7c7a      	ldrb	r2, [r7, #17]
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	3304      	adds	r3, #4
 800f7ba:	b212      	sxth	r2, r2
 800f7bc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	3304      	adds	r3, #4
 800f7c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	021b      	lsls	r3, r3, #8
 800f7ca:	b29a      	uxth	r2, r3
 800f7cc:	7c3b      	ldrb	r3, [r7, #16]
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	4413      	add	r3, r2
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	3304      	adds	r3, #4
 800f7d8:	b212      	sxth	r2, r2
 800f7da:	801a      	strh	r2, [r3, #0]

  return ret;
 800f7dc:	697b      	ldr	r3, [r7, #20]
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3718      	adds	r7, #24
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}

0800f7e6 <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 800f7e6:	b580      	push	{r7, lr}
 800f7e8:	b084      	sub	sp, #16
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
 800f7ee:	460b      	mov	r3, r1
 800f7f0:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800f7f2:	f107 0208 	add.w	r2, r7, #8
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	2101      	movs	r1, #1
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f7ff fd34 	bl	800f268 <lsm6dsr_read_reg>
 800f800:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d10f      	bne.n	800f828 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800f808:	78fb      	ldrb	r3, [r7, #3]
 800f80a:	f003 0303 	and.w	r3, r3, #3
 800f80e:	b2da      	uxtb	r2, r3
 800f810:	7a3b      	ldrb	r3, [r7, #8]
 800f812:	f362 1387 	bfi	r3, r2, #6, #2
 800f816:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800f818:	f107 0208 	add.w	r2, r7, #8
 800f81c:	2301      	movs	r3, #1
 800f81e:	2101      	movs	r1, #1
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f7ff fd39 	bl	800f298 <lsm6dsr_write_reg>
 800f826:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800f828:	68fb      	ldr	r3, [r7, #12]
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3710      	adds	r7, #16
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}

0800f832 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800f832:	b580      	push	{r7, lr}
 800f834:	b084      	sub	sp, #16
 800f836:	af00      	add	r7, sp, #0
 800f838:	6078      	str	r0, [r7, #4]
 800f83a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 800f83c:	2301      	movs	r3, #1
 800f83e:	683a      	ldr	r2, [r7, #0]
 800f840:	210f      	movs	r1, #15
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f7ff fd10 	bl	800f268 <lsm6dsr_read_reg>
 800f848:	60f8      	str	r0, [r7, #12]

  return ret;
 800f84a:	68fb      	ldr	r3, [r7, #12]
}
 800f84c:	4618      	mov	r0, r3
 800f84e:	3710      	adds	r7, #16
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}

0800f854 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	460b      	mov	r3, r1
 800f85e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800f860:	f107 0208 	add.w	r2, r7, #8
 800f864:	2301      	movs	r3, #1
 800f866:	2112      	movs	r1, #18
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f7ff fcfd 	bl	800f268 <lsm6dsr_read_reg>
 800f86e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d10f      	bne.n	800f896 <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 800f876:	78fb      	ldrb	r3, [r7, #3]
 800f878:	f003 0301 	and.w	r3, r3, #1
 800f87c:	b2da      	uxtb	r2, r3
 800f87e:	7a3b      	ldrb	r3, [r7, #8]
 800f880:	f362 0300 	bfi	r3, r2, #0, #1
 800f884:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800f886:	f107 0208 	add.w	r2, r7, #8
 800f88a:	2301      	movs	r3, #1
 800f88c:	2112      	movs	r1, #18
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f7ff fd02 	bl	800f298 <lsm6dsr_write_reg>
 800f894:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f896:	68fb      	ldr	r3, [r7, #12]
}
 800f898:	4618      	mov	r0, r3
 800f89a:	3710      	adds	r7, #16
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}

0800f8a0 <lsm6dsr_xl_hp_path_internal_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_internal_set(stmdev_ctx_t *ctx,
                                        lsm6dsr_slope_fds_t val)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	460b      	mov	r3, r1
 800f8aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_tap_cfg0_t tap_cfg0;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_CFG0, (uint8_t *)&tap_cfg0, 1);
 800f8ac:	f107 0208 	add.w	r2, r7, #8
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	2156      	movs	r1, #86	; 0x56
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f7ff fcd7 	bl	800f268 <lsm6dsr_read_reg>
 800f8ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d10f      	bne.n	800f8e2 <lsm6dsr_xl_hp_path_internal_set+0x42>
  {
    tap_cfg0.slope_fds = (uint8_t)val;
 800f8c2:	78fb      	ldrb	r3, [r7, #3]
 800f8c4:	f003 0301 	and.w	r3, r3, #1
 800f8c8:	b2da      	uxtb	r2, r3
 800f8ca:	7a3b      	ldrb	r3, [r7, #8]
 800f8cc:	f362 1304 	bfi	r3, r2, #4, #1
 800f8d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_TAP_CFG0,
 800f8d2:	f107 0208 	add.w	r2, r7, #8
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	2156      	movs	r1, #86	; 0x56
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f7ff fcdc 	bl	800f298 <lsm6dsr_write_reg>
 800f8e0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&tap_cfg0, 1);
  }

  return ret;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3710      	adds	r7, #16
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}

0800f8ec <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b086      	sub	sp, #24
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800f8f8:	f107 0210 	add.w	r2, r7, #16
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	2118      	movs	r1, #24
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f7ff fcb1 	bl	800f268 <lsm6dsr_read_reg>
 800f906:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d111      	bne.n	800f932 <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800f90e:	78fb      	ldrb	r3, [r7, #3]
 800f910:	09db      	lsrs	r3, r3, #7
 800f912:	b2db      	uxtb	r3, r3
 800f914:	f003 0301 	and.w	r3, r3, #1
 800f918:	b2da      	uxtb	r2, r3
 800f91a:	7c3b      	ldrb	r3, [r7, #16]
 800f91c:	f362 0341 	bfi	r3, r2, #1, #1
 800f920:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 800f922:	f107 0210 	add.w	r2, r7, #16
 800f926:	2301      	movs	r3, #1
 800f928:	2118      	movs	r1, #24
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f7ff fcb4 	bl	800f298 <lsm6dsr_write_reg>
 800f930:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d107      	bne.n	800f948 <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 800f938:	f107 020c 	add.w	r2, r7, #12
 800f93c:	2301      	movs	r3, #1
 800f93e:	2162      	movs	r1, #98	; 0x62
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f7ff fc91 	bl	800f268 <lsm6dsr_read_reg>
 800f946:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d10f      	bne.n	800f96e <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800f94e:	78fb      	ldrb	r3, [r7, #3]
 800f950:	f003 0303 	and.w	r3, r3, #3
 800f954:	b2da      	uxtb	r2, r3
 800f956:	7b3b      	ldrb	r3, [r7, #12]
 800f958:	f362 03c4 	bfi	r3, r2, #3, #2
 800f95c:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 800f95e:	f107 020c 	add.w	r2, r7, #12
 800f962:	2301      	movs	r3, #1
 800f964:	2162      	movs	r1, #98	; 0x62
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f7ff fc96 	bl	800f298 <lsm6dsr_write_reg>
 800f96c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 800f96e:	697b      	ldr	r3, [r7, #20]
}
 800f970:	4618      	mov	r0, r3
 800f972:	3718      	adds	r7, #24
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}

0800f978 <lsm6dsr_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsr_pin_int1_route_t *val)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b084      	sub	sp, #16
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	6039      	str	r1, [r7, #0]
  lsm6dsr_tap_cfg2_t tap_cfg2;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800f982:	2102      	movs	r1, #2
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f7ff ff2e 	bl	800f7e6 <lsm6dsr_mem_bank_set>
 800f98a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d107      	bne.n	800f9a2 <lsm6dsr_pin_int1_route_set+0x2a>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
                            (uint8_t *)&val->emb_func_int1, 1);
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	1c9a      	adds	r2, r3, #2
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
 800f996:	2301      	movs	r3, #1
 800f998:	210a      	movs	r1, #10
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f7ff fc7c 	bl	800f298 <lsm6dsr_write_reg>
 800f9a0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d107      	bne.n	800f9b8 <lsm6dsr_pin_int1_route_set+0x40>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_A,
                            (uint8_t *)&val->fsm_int1_a, 1);
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	1cda      	adds	r2, r3, #3
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_A,
 800f9ac:	2301      	movs	r3, #1
 800f9ae:	210b      	movs	r1, #11
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f7ff fc71 	bl	800f298 <lsm6dsr_write_reg>
 800f9b6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d107      	bne.n	800f9ce <lsm6dsr_pin_int1_route_set+0x56>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_B,
                            (uint8_t *)&val->fsm_int1_b, 1);
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	1d1a      	adds	r2, r3, #4
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_B,
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	210c      	movs	r1, #12
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f7ff fc66 	bl	800f298 <lsm6dsr_write_reg>
 800f9cc:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d104      	bne.n	800f9de <lsm6dsr_pin_int1_route_set+0x66>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800f9d4:	2100      	movs	r1, #0
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f7ff ff05 	bl	800f7e6 <lsm6dsr_mem_bank_set>
 800f9dc:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	f040 809e 	bne.w	800fb22 <lsm6dsr_pin_int1_route_set+0x1aa>
  {
    if ((val->emb_func_int1.int1_fsm_lc |
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	789b      	ldrb	r3, [r3, #2]
 800f9ea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f9ee:	b2da      	uxtb	r2, r3
         val->emb_func_int1.int1_sig_mot |
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	789b      	ldrb	r3, [r3, #2]
 800f9f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f9f8:	b2db      	uxtb	r3, r3
    if ((val->emb_func_int1.int1_fsm_lc |
 800f9fa:	4313      	orrs	r3, r2
 800f9fc:	b2da      	uxtb	r2, r3
         val->emb_func_int1.int1_step_detector |
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	789b      	ldrb	r3, [r3, #2]
 800fa02:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800fa06:	b2db      	uxtb	r3, r3
         val->emb_func_int1.int1_sig_mot |
 800fa08:	4313      	orrs	r3, r2
 800fa0a:	b2da      	uxtb	r2, r3
         val->emb_func_int1.int1_tilt |
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	789b      	ldrb	r3, [r3, #2]
 800fa10:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fa14:	b2db      	uxtb	r3, r3
         val->emb_func_int1.int1_step_detector |
 800fa16:	4313      	orrs	r3, r2
 800fa18:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm1 |
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	78db      	ldrb	r3, [r3, #3]
 800fa1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fa22:	b2db      	uxtb	r3, r3
         val->emb_func_int1.int1_tilt |
 800fa24:	4313      	orrs	r3, r2
 800fa26:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm2 |
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	78db      	ldrb	r3, [r3, #3]
 800fa2c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800fa30:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm1 |
 800fa32:	4313      	orrs	r3, r2
 800fa34:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm3 |
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	78db      	ldrb	r3, [r3, #3]
 800fa3a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800fa3e:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm2 |
 800fa40:	4313      	orrs	r3, r2
 800fa42:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm4 |
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	78db      	ldrb	r3, [r3, #3]
 800fa48:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800fa4c:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm3 |
 800fa4e:	4313      	orrs	r3, r2
 800fa50:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm5 |
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	78db      	ldrb	r3, [r3, #3]
 800fa56:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fa5a:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm4 |
 800fa5c:	4313      	orrs	r3, r2
 800fa5e:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm6 |
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	78db      	ldrb	r3, [r3, #3]
 800fa64:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fa68:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm5 |
 800fa6a:	4313      	orrs	r3, r2
 800fa6c:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm7 |
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	78db      	ldrb	r3, [r3, #3]
 800fa72:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800fa76:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm6 |
 800fa78:	4313      	orrs	r3, r2
 800fa7a:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm8 |
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	78db      	ldrb	r3, [r3, #3]
 800fa80:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fa84:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm7 |
 800fa86:	4313      	orrs	r3, r2
 800fa88:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm9 |
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	791b      	ldrb	r3, [r3, #4]
 800fa8e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fa92:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm8 |
 800fa94:	4313      	orrs	r3, r2
 800fa96:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm10 |
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	791b      	ldrb	r3, [r3, #4]
 800fa9c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800faa0:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm9 |
 800faa2:	4313      	orrs	r3, r2
 800faa4:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm11 |
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	791b      	ldrb	r3, [r3, #4]
 800faaa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800faae:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm10 |
 800fab0:	4313      	orrs	r3, r2
 800fab2:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm12 |
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	791b      	ldrb	r3, [r3, #4]
 800fab8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800fabc:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm11 |
 800fabe:	4313      	orrs	r3, r2
 800fac0:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm13 |
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	791b      	ldrb	r3, [r3, #4]
 800fac6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800faca:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm12 |
 800facc:	4313      	orrs	r3, r2
 800face:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm14 |
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	791b      	ldrb	r3, [r3, #4]
 800fad4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fad8:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm13 |
 800fada:	4313      	orrs	r3, r2
 800fadc:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm15 |
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	791b      	ldrb	r3, [r3, #4]
 800fae2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800fae6:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm14 |
 800fae8:	4313      	orrs	r3, r2
 800faea:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm16) != PROPERTY_DISABLE)
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	791b      	ldrb	r3, [r3, #4]
 800faf0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800faf4:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm15 |
 800faf6:	4313      	orrs	r3, r2
 800faf8:	b2db      	uxtb	r3, r3
    if ((val->emb_func_int1.int1_fsm_lc |
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d005      	beq.n	800fb0a <lsm6dsr_pin_int1_route_set+0x192>
    {
      val->md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 800fafe:	683a      	ldr	r2, [r7, #0]
 800fb00:	7853      	ldrb	r3, [r2, #1]
 800fb02:	f043 0302 	orr.w	r3, r3, #2
 800fb06:	7053      	strb	r3, [r2, #1]
 800fb08:	e004      	b.n	800fb14 <lsm6dsr_pin_int1_route_set+0x19c>
    }

    else
    {
      val->md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 800fb0a:	683a      	ldr	r2, [r7, #0]
 800fb0c:	7853      	ldrb	r3, [r2, #1]
 800fb0e:	f36f 0341 	bfc	r3, #1, #1
 800fb12:	7053      	strb	r3, [r2, #1]
    }

    ret = lsm6dsr_write_reg(ctx, LSM6DSR_INT1_CTRL,
                            (uint8_t *)&val->int1_ctrl, 1);
 800fb14:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_INT1_CTRL,
 800fb16:	2301      	movs	r3, #1
 800fb18:	210d      	movs	r1, #13
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f7ff fbbc 	bl	800f298 <lsm6dsr_write_reg>
 800fb20:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d107      	bne.n	800fb38 <lsm6dsr_pin_int1_route_set+0x1c0>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_MD1_CFG,
                            (uint8_t *)&val->md1_cfg, 1);
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_MD1_CFG,
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	215e      	movs	r1, #94	; 0x5e
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f7ff fbb1 	bl	800f298 <lsm6dsr_write_reg>
 800fb36:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d172      	bne.n	800fc24 <lsm6dsr_pin_int1_route_set+0x2ac>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_CFG2, (uint8_t *)&tap_cfg2, 1);
 800fb3e:	f107 0208 	add.w	r2, r7, #8
 800fb42:	2301      	movs	r3, #1
 800fb44:	2158      	movs	r1, #88	; 0x58
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f7ff fb8e 	bl	800f268 <lsm6dsr_read_reg>
 800fb4c:	60f8      	str	r0, [r7, #12]

    if ((val->int1_ctrl.den_drdy_flag |
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fb56:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_boot |
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800fb60:	b2db      	uxtb	r3, r3
    if ((val->int1_ctrl.den_drdy_flag |
 800fb62:	4313      	orrs	r3, r2
 800fb64:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_cnt_bdr |
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	781b      	ldrb	r3, [r3, #0]
 800fb6a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800fb6e:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_boot |
 800fb70:	4313      	orrs	r3, r2
 800fb72:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_drdy_g |
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800fb7c:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_cnt_bdr |
 800fb7e:	4313      	orrs	r3, r2
 800fb80:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_drdy_xl |
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	781b      	ldrb	r3, [r3, #0]
 800fb86:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fb8a:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_drdy_g |
 800fb8c:	4313      	orrs	r3, r2
 800fb8e:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_full |
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fb98:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_drdy_xl |
 800fb9a:	4313      	orrs	r3, r2
 800fb9c:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_ovr |
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fba6:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_full |
 800fba8:	4313      	orrs	r3, r2
 800fbaa:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_th |
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	781b      	ldrb	r3, [r3, #0]
 800fbb0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800fbb4:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_ovr |
 800fbb6:	4313      	orrs	r3, r2
 800fbb8:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_6d |
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	785b      	ldrb	r3, [r3, #1]
 800fbbe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800fbc2:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_th |
 800fbc4:	4313      	orrs	r3, r2
 800fbc6:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_double_tap |
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	785b      	ldrb	r3, [r3, #1]
 800fbcc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800fbd0:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_6d |
 800fbd2:	4313      	orrs	r3, r2
 800fbd4:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_ff |
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	785b      	ldrb	r3, [r3, #1]
 800fbda:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fbde:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_double_tap |
 800fbe0:	4313      	orrs	r3, r2
 800fbe2:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_wu |
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	785b      	ldrb	r3, [r3, #1]
 800fbe8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fbec:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_ff |
 800fbee:	4313      	orrs	r3, r2
 800fbf0:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_single_tap |
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	785b      	ldrb	r3, [r3, #1]
 800fbf6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800fbfa:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_wu |
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	785b      	ldrb	r3, [r3, #1]
 800fc04:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fc08:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_single_tap |
 800fc0a:	4313      	orrs	r3, r2
 800fc0c:	b2db      	uxtb	r3, r3
    if ((val->int1_ctrl.den_drdy_flag |
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d004      	beq.n	800fc1c <lsm6dsr_pin_int1_route_set+0x2a4>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 800fc12:	7a3b      	ldrb	r3, [r7, #8]
 800fc14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc18:	723b      	strb	r3, [r7, #8]
 800fc1a:	e003      	b.n	800fc24 <lsm6dsr_pin_int1_route_set+0x2ac>
    }

    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 800fc1c:	7a3b      	ldrb	r3, [r7, #8]
 800fc1e:	f36f 13c7 	bfc	r3, #7, #1
 800fc22:	723b      	strb	r3, [r7, #8]
    }
  }

  if (ret == 0)
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d107      	bne.n	800fc3a <lsm6dsr_pin_int1_route_set+0x2c2>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_TAP_CFG2,
 800fc2a:	f107 0208 	add.w	r2, r7, #8
 800fc2e:	2301      	movs	r3, #1
 800fc30:	2158      	movs	r1, #88	; 0x58
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f7ff fb30 	bl	800f298 <lsm6dsr_write_reg>
 800fc38:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&tap_cfg2, 1);
  }

  return ret;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3710      	adds	r7, #16
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}

0800fc44 <lsm6dsr_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsr_pin_int1_route_t *val)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b084      	sub	sp, #16
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800fc4e:	2102      	movs	r1, #2
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f7ff fdc8 	bl	800f7e6 <lsm6dsr_mem_bank_set>
 800fc56:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d107      	bne.n	800fc6e <lsm6dsr_pin_int1_route_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
                           (uint8_t *)&val->emb_func_int1, 1);
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	1c9a      	adds	r2, r3, #2
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
 800fc62:	2301      	movs	r3, #1
 800fc64:	210a      	movs	r1, #10
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f7ff fafe 	bl	800f268 <lsm6dsr_read_reg>
 800fc6c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d107      	bne.n	800fc84 <lsm6dsr_pin_int1_route_get+0x40>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_A,
                           (uint8_t *)&val->fsm_int1_a, 1);
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	1cda      	adds	r2, r3, #3
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_A,
 800fc78:	2301      	movs	r3, #1
 800fc7a:	210b      	movs	r1, #11
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f7ff faf3 	bl	800f268 <lsm6dsr_read_reg>
 800fc82:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d107      	bne.n	800fc9a <lsm6dsr_pin_int1_route_get+0x56>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_B,
                           (uint8_t *)&val->fsm_int1_b, 1);
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	1d1a      	adds	r2, r3, #4
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_B,
 800fc8e:	2301      	movs	r3, #1
 800fc90:	210c      	movs	r1, #12
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f7ff fae8 	bl	800f268 <lsm6dsr_read_reg>
 800fc98:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d104      	bne.n	800fcaa <lsm6dsr_pin_int1_route_get+0x66>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800fca0:	2100      	movs	r1, #0
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f7ff fd9f 	bl	800f7e6 <lsm6dsr_mem_bank_set>
 800fca8:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d106      	bne.n	800fcbe <lsm6dsr_pin_int1_route_get+0x7a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_INT1_CTRL,
                           (uint8_t *)&val->int1_ctrl, 1);
 800fcb0:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_INT1_CTRL,
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	210d      	movs	r1, #13
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f7ff fad6 	bl	800f268 <lsm6dsr_read_reg>
 800fcbc:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d107      	bne.n	800fcd4 <lsm6dsr_pin_int1_route_get+0x90>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_MD1_CFG,
                           (uint8_t *)&val->md1_cfg, 1);
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_MD1_CFG,
 800fcc8:	2301      	movs	r3, #1
 800fcca:	215e      	movs	r1, #94	; 0x5e
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f7ff facb 	bl	800f268 <lsm6dsr_read_reg>
 800fcd2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3710      	adds	r7, #16
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}

0800fcde <lsm6dsr_wkup_threshold_set>:
  * @param  val    Change the values of wk_ths in reg WAKE_UP_THS
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800fcde:	b580      	push	{r7, lr}
 800fce0:	b084      	sub	sp, #16
 800fce2:	af00      	add	r7, sp, #0
 800fce4:	6078      	str	r0, [r7, #4]
 800fce6:	460b      	mov	r3, r1
 800fce8:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_wake_up_ths_t wake_up_ths;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WAKE_UP_THS,
 800fcea:	f107 0208 	add.w	r2, r7, #8
 800fcee:	2301      	movs	r3, #1
 800fcf0:	215b      	movs	r1, #91	; 0x5b
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f7ff fab8 	bl	800f268 <lsm6dsr_read_reg>
 800fcf8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&wake_up_ths, 1);

  if (ret == 0)
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d10f      	bne.n	800fd20 <lsm6dsr_wkup_threshold_set+0x42>
  {
    wake_up_ths.wk_ths = (uint8_t)val;
 800fd00:	78fb      	ldrb	r3, [r7, #3]
 800fd02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd06:	b2da      	uxtb	r2, r3
 800fd08:	7a3b      	ldrb	r3, [r7, #8]
 800fd0a:	f362 0305 	bfi	r3, r2, #0, #6
 800fd0e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_WAKE_UP_THS,
 800fd10:	f107 0208 	add.w	r2, r7, #8
 800fd14:	2301      	movs	r3, #1
 800fd16:	215b      	movs	r1, #91	; 0x5b
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f7ff fabd 	bl	800f298 <lsm6dsr_write_reg>
 800fd1e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&wake_up_ths, 1);
  }

  return ret;
 800fd20:	68fb      	ldr	r3, [r7, #12]
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	3710      	adds	r7, #16
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}

0800fd2a <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 800fd2a:	b580      	push	{r7, lr}
 800fd2c:	b084      	sub	sp, #16
 800fd2e:	af00      	add	r7, sp, #0
 800fd30:	6078      	str	r0, [r7, #4]
 800fd32:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800fd34:	2102      	movs	r1, #2
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f7ff fd55 	bl	800f7e6 <lsm6dsr_mem_bank_set>
 800fd3c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d106      	bne.n	800fd52 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 800fd44:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 800fd46:	2301      	movs	r3, #1
 800fd48:	2146      	movs	r1, #70	; 0x46
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f7ff fa8c 	bl	800f268 <lsm6dsr_read_reg>
 800fd50:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d107      	bne.n	800fd68 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	2147      	movs	r1, #71	; 0x47
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f7ff fa81 	bl	800f268 <lsm6dsr_read_reg>
 800fd66:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d104      	bne.n	800fd78 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800fd6e:	2100      	movs	r1, #0
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f7ff fd38 	bl	800f7e6 <lsm6dsr_mem_bank_set>
 800fd76:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800fd78:	68fb      	ldr	r3, [r7, #12]
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3710      	adds	r7, #16
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
	...

0800fd84 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800fd8e:	2102      	movs	r1, #2
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f7ff fd28 	bl	800f7e6 <lsm6dsr_mem_bank_set>
 800fd96:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d107      	bne.n	800fdae <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800fd9e:	f107 0208 	add.w	r2, r7, #8
 800fda2:	2301      	movs	r3, #1
 800fda4:	215f      	movs	r1, #95	; 0x5f
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f7ff fa5e 	bl	800f268 <lsm6dsr_read_reg>
 800fdac:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d104      	bne.n	800fdbe <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800fdb4:	2100      	movs	r1, #0
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f7ff fd15 	bl	800f7e6 <lsm6dsr_mem_bank_set>
 800fdbc:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800fdbe:	7a3b      	ldrb	r3, [r7, #8]
 800fdc0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800fdc4:	b2db      	uxtb	r3, r3
 800fdc6:	2b03      	cmp	r3, #3
 800fdc8:	d81a      	bhi.n	800fe00 <lsm6dsr_fsm_data_rate_get+0x7c>
 800fdca:	a201      	add	r2, pc, #4	; (adr r2, 800fdd0 <lsm6dsr_fsm_data_rate_get+0x4c>)
 800fdcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdd0:	0800fde1 	.word	0x0800fde1
 800fdd4:	0800fde9 	.word	0x0800fde9
 800fdd8:	0800fdf1 	.word	0x0800fdf1
 800fddc:	0800fdf9 	.word	0x0800fdf9
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	2200      	movs	r2, #0
 800fde4:	701a      	strb	r2, [r3, #0]
      break;
 800fde6:	e00f      	b.n	800fe08 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	2201      	movs	r2, #1
 800fdec:	701a      	strb	r2, [r3, #0]
      break;
 800fdee:	e00b      	b.n	800fe08 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	2202      	movs	r2, #2
 800fdf4:	701a      	strb	r2, [r3, #0]
      break;
 800fdf6:	e007      	b.n	800fe08 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	2203      	movs	r2, #3
 800fdfc:	701a      	strb	r2, [r3, #0]
      break;
 800fdfe:	e003      	b.n	800fe08 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	2200      	movs	r2, #0
 800fe04:	701a      	strb	r2, [r3, #0]
      break;
 800fe06:	bf00      	nop
  }

  return ret;
 800fe08:	68fb      	ldr	r3, [r7, #12]
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3710      	adds	r7, #16
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}
 800fe12:	bf00      	nop

0800fe14 <Error_Handler>:
TIM_HandleTypeDef htim4;

UART_HandleTypeDef huart1;

void Error_Handler(void)
{
 800fe14:	b480      	push	{r7}
 800fe16:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800fe18:	b672      	cpsid	i
}
 800fe1a:	bf00      	nop
  __disable_irq();
  while (1)
 800fe1c:	e7fe      	b.n	800fe1c <Error_Handler+0x8>
	...

0800fe20 <task_buzzer>:
    "ace",  // ready
    "eca",  // not ready
	"adc",
};

void task_buzzer(void *argument) {
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b086      	sub	sp, #24
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
	beeps_e id;

	buzzer_set_volume(&BUZZER, 20);
 800fe28:	2114      	movs	r1, #20
 800fe2a:	4833      	ldr	r0, [pc, #204]	; (800fef8 <task_buzzer+0xd8>)
 800fe2c:	f7fd fe58 	bl	800dae0 <buzzer_set_volume>
	buzzer_set_freq(&BUZZER, 2500);
 800fe30:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800fe34:	4830      	ldr	r0, [pc, #192]	; (800fef8 <task_buzzer+0xd8>)
 800fe36:	f7fd fe97 	bl	800db68 <buzzer_set_freq>

	while (1) {
		id = osEventFlagsWait(buzzer_event_id, 0xFF, osFlagsWaitAny, osWaitForever);
 800fe3a:	4b30      	ldr	r3, [pc, #192]	; (800fefc <task_buzzer+0xdc>)
 800fe3c:	6818      	ldr	r0, [r3, #0]
 800fe3e:	f04f 33ff 	mov.w	r3, #4294967295
 800fe42:	2200      	movs	r2, #0
 800fe44:	21ff      	movs	r1, #255	; 0xff
 800fe46:	f008 ff5d 	bl	8018d04 <osEventFlagsWait>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	73fb      	strb	r3, [r7, #15]
		osEventFlagsClear(buzzer_event_id, id);
 800fe4e:	4b2b      	ldr	r3, [pc, #172]	; (800fefc <task_buzzer+0xdc>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	7bfa      	ldrb	r2, [r7, #15]
 800fe54:	4611      	mov	r1, r2
 800fe56:	4618      	mov	r0, r3
 800fe58:	f008 ff22 	bl	8018ca0 <osEventFlagsClear>
		uint32_t duration = 0;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < nr_buz[id]; i++){
 800fe60:	2300      	movs	r3, #0
 800fe62:	613b      	str	r3, [r7, #16]
 800fe64:	e03b      	b.n	800fede <task_buzzer+0xbe>
			char pitch = beep_codes[id][i];
 800fe66:	7bfa      	ldrb	r2, [r7, #15]
 800fe68:	4925      	ldr	r1, [pc, #148]	; (800ff00 <task_buzzer+0xe0>)
 800fe6a:	4613      	mov	r3, r2
 800fe6c:	00db      	lsls	r3, r3, #3
 800fe6e:	4413      	add	r3, r2
 800fe70:	18ca      	adds	r2, r1, r3
 800fe72:	693b      	ldr	r3, [r7, #16]
 800fe74:	4413      	add	r3, r2
 800fe76:	781b      	ldrb	r3, [r3, #0]
 800fe78:	73bb      	strb	r3, [r7, #14]
			if (pitch >= 'A' && pitch <= 'H') {
 800fe7a:	7bbb      	ldrb	r3, [r7, #14]
 800fe7c:	2b40      	cmp	r3, #64	; 0x40
 800fe7e:	d90e      	bls.n	800fe9e <task_buzzer+0x7e>
 800fe80:	7bbb      	ldrb	r3, [r7, #14]
 800fe82:	2b48      	cmp	r3, #72	; 0x48
 800fe84:	d80b      	bhi.n	800fe9e <task_buzzer+0x7e>
				buzzer_set_freq(&BUZZER, pitch_lookup[pitch - 'A']);
 800fe86:	7bbb      	ldrb	r3, [r7, #14]
 800fe88:	3b41      	subs	r3, #65	; 0x41
 800fe8a:	4a1e      	ldr	r2, [pc, #120]	; (800ff04 <task_buzzer+0xe4>)
 800fe8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe90:	4619      	mov	r1, r3
 800fe92:	4819      	ldr	r0, [pc, #100]	; (800fef8 <task_buzzer+0xd8>)
 800fe94:	f7fd fe68 	bl	800db68 <buzzer_set_freq>
				duration = BUZZER_LONG_BEEP;
 800fe98:	2364      	movs	r3, #100	; 0x64
 800fe9a:	617b      	str	r3, [r7, #20]
 800fe9c:	e010      	b.n	800fec0 <task_buzzer+0xa0>
			} else if (pitch >= 'a' && pitch <= 'h') {
 800fe9e:	7bbb      	ldrb	r3, [r7, #14]
 800fea0:	2b60      	cmp	r3, #96	; 0x60
 800fea2:	d90d      	bls.n	800fec0 <task_buzzer+0xa0>
 800fea4:	7bbb      	ldrb	r3, [r7, #14]
 800fea6:	2b68      	cmp	r3, #104	; 0x68
 800fea8:	d80a      	bhi.n	800fec0 <task_buzzer+0xa0>
				buzzer_set_freq(&BUZZER, pitch_lookup[pitch - 'a']);
 800feaa:	7bbb      	ldrb	r3, [r7, #14]
 800feac:	3b61      	subs	r3, #97	; 0x61
 800feae:	4a15      	ldr	r2, [pc, #84]	; (800ff04 <task_buzzer+0xe4>)
 800feb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800feb4:	4619      	mov	r1, r3
 800feb6:	4810      	ldr	r0, [pc, #64]	; (800fef8 <task_buzzer+0xd8>)
 800feb8:	f7fd fe56 	bl	800db68 <buzzer_set_freq>
				duration = BUZZER_SHORT_BEEP;
 800febc:	2328      	movs	r3, #40	; 0x28
 800febe:	617b      	str	r3, [r7, #20]
			}
			buzzer_start(&BUZZER);
 800fec0:	480d      	ldr	r0, [pc, #52]	; (800fef8 <task_buzzer+0xd8>)
 800fec2:	f7fd fe8e 	bl	800dbe2 <buzzer_start>
			osDelay(duration);
 800fec6:	6978      	ldr	r0, [r7, #20]
 800fec8:	f008 fe1e 	bl	8018b08 <osDelay>
			buzzer_stop(&BUZZER);
 800fecc:	480a      	ldr	r0, [pc, #40]	; (800fef8 <task_buzzer+0xd8>)
 800fece:	f7fd fe9b 	bl	800dc08 <buzzer_stop>
			osDelay(BUZZER_SHORT_PAUSE);
 800fed2:	2064      	movs	r0, #100	; 0x64
 800fed4:	f008 fe18 	bl	8018b08 <osDelay>
		for(int i = 0; i < nr_buz[id]; i++){
 800fed8:	693b      	ldr	r3, [r7, #16]
 800feda:	3301      	adds	r3, #1
 800fedc:	613b      	str	r3, [r7, #16]
 800fede:	7bfb      	ldrb	r3, [r7, #15]
 800fee0:	4a09      	ldr	r2, [pc, #36]	; (800ff08 <task_buzzer+0xe8>)
 800fee2:	5cd3      	ldrb	r3, [r2, r3]
 800fee4:	461a      	mov	r2, r3
 800fee6:	693b      	ldr	r3, [r7, #16]
 800fee8:	4293      	cmp	r3, r2
 800feea:	dbbc      	blt.n	800fe66 <task_buzzer+0x46>
		}

		// Wait at least 1s before buzzing again
		osDelay(BUZZER_LONG_PAUSE);
 800feec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fef0:	f008 fe0a 	bl	8018b08 <osDelay>
	while (1) {
 800fef4:	e7a1      	b.n	800fe3a <task_buzzer+0x1a>
 800fef6:	bf00      	nop
 800fef8:	20000004 	.word	0x20000004
 800fefc:	20005320 	.word	0x20005320
 800ff00:	0801ec3c 	.word	0x0801ec3c
 800ff04:	0801ec14 	.word	0x0801ec14
 800ff08:	0801ec34 	.word	0x0801ec34

0800ff0c <task_cli>:
#include "config/globals.h"
#include "util/log.h"
#include "cli/cli.h"


void task_cli(void *argument) {
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b084      	sub	sp, #16
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
	uint32_t tick_count = osKernelGetTickCount();
 800ff14:	f008 fd10 	bl	8018938 <osKernelGetTickCount>
 800ff18:	60f8      	str	r0, [r7, #12]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 800ff1a:	f008 fd22 	bl	8018962 <osKernelGetTickFreq>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	4a09      	ldr	r2, [pc, #36]	; (800ff48 <task_cli+0x3c>)
 800ff22:	fba2 2303 	umull	r2, r3, r2, r3
 800ff26:	095b      	lsrs	r3, r3, #5
 800ff28:	60bb      	str	r3, [r7, #8]

	cli_enter(&usb_input_fifo, &usb_output_fifo);
 800ff2a:	4908      	ldr	r1, [pc, #32]	; (800ff4c <task_cli+0x40>)
 800ff2c:	4808      	ldr	r0, [pc, #32]	; (800ff50 <task_cli+0x44>)
 800ff2e:	f7fc fdcd 	bl	800cacc <cli_enter>
	while (1) {
		cli_process();
 800ff32:	f7fc fdb1 	bl	800ca98 <cli_process>

		tick_count += tick_update;
 800ff36:	68fa      	ldr	r2, [r7, #12]
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	4413      	add	r3, r2
 800ff3c:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick_count);
 800ff3e:	68f8      	ldr	r0, [r7, #12]
 800ff40:	f008 fdfd 	bl	8018b3e <osDelayUntil>
		cli_process();
 800ff44:	e7f5      	b.n	800ff32 <task_cli+0x26>
 800ff46:	bf00      	nop
 800ff48:	51eb851f 	.word	0x51eb851f
 800ff4c:	2000552c 	.word	0x2000552c
 800ff50:	20005308 	.word	0x20005308

0800ff54 <task_fsm>:
#include "config/config.h"

#include "util/log.h"
#include "flight/fsm.h"

void task_fsm(void *argument) {
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b08a      	sub	sp, #40	; 0x28
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
	fsm_t fsm;
	fsm.flight_state = IDLE;
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	733b      	strb	r3, [r7, #12]

	osEventFlagsSet(buzzer_event_id, BEEP_BOOTUP);
 800ff60:	4b0e      	ldr	r3, [pc, #56]	; (800ff9c <task_fsm+0x48>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	2103      	movs	r1, #3
 800ff66:	4618      	mov	r0, r3
 800ff68:	f008 fe56 	bl	8018c18 <osEventFlagsSet>


	uint32_t tick_count = osKernelGetTickCount();
 800ff6c:	f008 fce4 	bl	8018938 <osKernelGetTickCount>
 800ff70:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 800ff72:	f008 fcf6 	bl	8018962 <osKernelGetTickFreq>
 800ff76:	4603      	mov	r3, r0
 800ff78:	4a09      	ldr	r2, [pc, #36]	; (800ffa0 <task_fsm+0x4c>)
 800ff7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ff7e:	095b      	lsrs	r3, r3, #5
 800ff80:	623b      	str	r3, [r7, #32]
	while (1) {
		update_fsm(&fsm);
 800ff82:	f107 030c 	add.w	r3, r7, #12
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7fd ff04 	bl	800dd94 <update_fsm>
		tick_count += tick_update;
 800ff8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff8e:	6a3b      	ldr	r3, [r7, #32]
 800ff90:	4413      	add	r3, r2
 800ff92:	627b      	str	r3, [r7, #36]	; 0x24
		osDelayUntil(tick_count);
 800ff94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff96:	f008 fdd2 	bl	8018b3e <osDelayUntil>
		update_fsm(&fsm);
 800ff9a:	e7f2      	b.n	800ff82 <task_fsm+0x2e>
 800ff9c:	20005320 	.word	0x20005320
 800ffa0:	51eb851f 	.word	0x51eb851f

0800ffa4 <task_sensor_read>:
	.gyro_range = LSM6DSR_2000dps,
};



void task_sensor_read(void *argument) {
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b088      	sub	sp, #32
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]

	uint32_t tick_count = osKernelGetTickCount();
 800ffac:	f008 fcc4 	bl	8018938 <osKernelGetTickCount>
 800ffb0:	61f8      	str	r0, [r7, #28]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 800ffb2:	f008 fcd6 	bl	8018962 <osKernelGetTickFreq>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	4a20      	ldr	r2, [pc, #128]	; (801003c <task_sensor_read+0x98>)
 800ffba:	fba2 2303 	umull	r2, r3, r2, r3
 800ffbe:	095b      	lsrs	r3, r3, #5
 800ffc0:	61bb      	str	r3, [r7, #24]

	lsm6dsr_init(&IMU);
 800ffc2:	481f      	ldr	r0, [pc, #124]	; (8010040 <task_sensor_read+0x9c>)
 800ffc4:	f7fe ffb0 	bl	800ef28 <lsm6dsr_init>

	/* Set continuous conversion mode */
	lsm6dsr_enable(&IMU);
 800ffc8:	481d      	ldr	r0, [pc, #116]	; (8010040 <task_sensor_read+0x9c>)
 800ffca:	f7ff f80d 	bl	800efe8 <lsm6dsr_enable>

	while (1) {

		sensor_mode_e mode = osEventFlagsWait(sensor_mode_id, 0xFF, osFlagsWaitAny, 0);
 800ffce:	4b1d      	ldr	r3, [pc, #116]	; (8010044 <task_sensor_read+0xa0>)
 800ffd0:	6818      	ldr	r0, [r3, #0]
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	21ff      	movs	r1, #255	; 0xff
 800ffd8:	f008 fe94 	bl	8018d04 <osEventFlagsWait>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	75fb      	strb	r3, [r7, #23]
		if(mode == SENSOR_MODE_CONTINUOUS){
 800ffe0:	7dfb      	ldrb	r3, [r7, #23]
 800ffe2:	2b01      	cmp	r3, #1
 800ffe4:	d106      	bne.n	800fff4 <task_sensor_read+0x50>
			/* Set continuous conversion mode */
			lsm6dsr_enable(&IMU);
 800ffe6:	4816      	ldr	r0, [pc, #88]	; (8010040 <task_sensor_read+0x9c>)
 800ffe8:	f7fe fffe 	bl	800efe8 <lsm6dsr_enable>
			lsm6dsr_wakeup_disable(&IMU);
 800ffec:	4814      	ldr	r0, [pc, #80]	; (8010040 <task_sensor_read+0x9c>)
 800ffee:	f7ff f85f 	bl	800f0b0 <lsm6dsr_wakeup_disable>
 800fff2:	e015      	b.n	8010020 <task_sensor_read+0x7c>
		} else if (mode == SENSOR_MODE_WAKEUP){
 800fff4:	7dfb      	ldrb	r3, [r7, #23]
 800fff6:	2b02      	cmp	r3, #2
 800fff8:	d106      	bne.n	8010008 <task_sensor_read+0x64>
			lsm6dsr_wakeup_enable(&IMU, global_config.config.liftoff_acc_threshold);
 800fffa:	4b13      	ldr	r3, [pc, #76]	; (8010048 <task_sensor_read+0xa4>)
 800fffc:	689b      	ldr	r3, [r3, #8]
 800fffe:	4619      	mov	r1, r3
 8010000:	480f      	ldr	r0, [pc, #60]	; (8010040 <task_sensor_read+0x9c>)
 8010002:	f7ff f809 	bl	800f018 <lsm6dsr_wakeup_enable>
 8010006:	e00b      	b.n	8010020 <task_sensor_read+0x7c>
		} else if (mode == SENSOR_MODE_SHUTDOWN){
 8010008:	7dfb      	ldrb	r3, [r7, #23]
 801000a:	2b03      	cmp	r3, #3
 801000c:	d108      	bne.n	8010020 <task_sensor_read+0x7c>
			lsm6dsr_shutdown(&IMU);
 801000e:	480c      	ldr	r0, [pc, #48]	; (8010040 <task_sensor_read+0x9c>)
 8010010:	f7fe ffd6 	bl	800efc0 <lsm6dsr_shutdown>
			osThreadTerminate(osThreadGetId());
 8010014:	f008 fd40 	bl	8018a98 <osThreadGetId>
 8010018:	4603      	mov	r3, r0
 801001a:	4618      	mov	r0, r3
 801001c:	f008 fd47 	bl	8018aae <osThreadTerminate>
		}


		float acceleration[3];
		lsm6dsr_get_accel(&IMU, acceleration);
 8010020:	f107 0308 	add.w	r3, r7, #8
 8010024:	4619      	mov	r1, r3
 8010026:	4806      	ldr	r0, [pc, #24]	; (8010040 <task_sensor_read+0x9c>)
 8010028:	f7ff f88e 	bl	800f148 <lsm6dsr_get_accel>

		tick_count += tick_update;
 801002c:	69fa      	ldr	r2, [r7, #28]
 801002e:	69bb      	ldr	r3, [r7, #24]
 8010030:	4413      	add	r3, r2
 8010032:	61fb      	str	r3, [r7, #28]
		osDelayUntil(tick_count);
 8010034:	69f8      	ldr	r0, [r7, #28]
 8010036:	f008 fd82 	bl	8018b3e <osDelayUntil>
	while (1) {
 801003a:	e7c8      	b.n	800ffce <task_sensor_read+0x2a>
 801003c:	51eb851f 	.word	0x51eb851f
 8010040:	20000018 	.word	0x20000018
 8010044:	20005528 	.word	0x20005528
 8010048:	20000464 	.word	0x20000464

0801004c <task_state_est>:
#include "cmsis_os.h"
#include "task_state_est.h"
#include "config/globals.h"
#include "util/log.h"

void task_state_est(void *argument) {
 801004c:	b580      	push	{r7, lr}
 801004e:	b086      	sub	sp, #24
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]

	uint32_t tick_count = osKernelGetTickCount();
 8010054:	f008 fc70 	bl	8018938 <osKernelGetTickCount>
 8010058:	6178      	str	r0, [r7, #20]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 801005a:	f008 fc82 	bl	8018962 <osKernelGetTickFreq>
 801005e:	4603      	mov	r3, r0
 8010060:	4a11      	ldr	r2, [pc, #68]	; (80100a8 <task_state_est+0x5c>)
 8010062:	fba2 2303 	umull	r2, r3, r2, r3
 8010066:	095b      	lsrs	r3, r3, #5
 8010068:	613b      	str	r3, [r7, #16]
	osDelay(2000);
 801006a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801006e:	f008 fd4b 	bl	8018b08 <osDelay>
	while (1) {

		state_est_mode_e mode = osEventFlagsWait(state_est_mode_id, 0xFF, osFlagsWaitAny, 0);
 8010072:	4b0e      	ldr	r3, [pc, #56]	; (80100ac <task_state_est+0x60>)
 8010074:	6818      	ldr	r0, [r3, #0]
 8010076:	2300      	movs	r3, #0
 8010078:	2200      	movs	r2, #0
 801007a:	21ff      	movs	r1, #255	; 0xff
 801007c:	f008 fe42 	bl	8018d04 <osEventFlagsWait>
 8010080:	4603      	mov	r3, r0
 8010082:	73fb      	strb	r3, [r7, #15]

		if(mode == STATE_EST_MODE_SHUTDOWN){
 8010084:	7bfb      	ldrb	r3, [r7, #15]
 8010086:	2b03      	cmp	r3, #3
 8010088:	d105      	bne.n	8010096 <task_state_est+0x4a>
			osThreadTerminate(osThreadGetId());
 801008a:	f008 fd05 	bl	8018a98 <osThreadGetId>
 801008e:	4603      	mov	r3, r0
 8010090:	4618      	mov	r0, r3
 8010092:	f008 fd0c 	bl	8018aae <osThreadTerminate>
		}

		tick_count += tick_update;
 8010096:	697a      	ldr	r2, [r7, #20]
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	4413      	add	r3, r2
 801009c:	617b      	str	r3, [r7, #20]
		osDelayUntil(tick_count);
 801009e:	6978      	ldr	r0, [r7, #20]
 80100a0:	f008 fd4d 	bl	8018b3e <osDelayUntil>
	while (1) {
 80100a4:	e7e5      	b.n	8010072 <task_state_est+0x26>
 80100a6:	bf00      	nop
 80100a8:	51eb851f 	.word	0x51eb851f
 80100ac:	20005524 	.word	0x20005524

080100b0 <dcdc_disable>:
	if(HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin) == 0){
		HAL_GPIO_WritePin(DCDC_EN_GPIO_Port, DCDC_EN_Pin, GPIO_PIN_SET);
	}
}

static inline void dcdc_disable(){
 80100b0:	b580      	push	{r7, lr}
 80100b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DCDC_EN_GPIO_Port, DCDC_EN_Pin, GPIO_PIN_RESET);
 80100b4:	2200      	movs	r2, #0
 80100b6:	2110      	movs	r1, #16
 80100b8:	4802      	ldr	r0, [pc, #8]	; (80100c4 <dcdc_disable+0x14>)
 80100ba:	f001 fcb3 	bl	8011a24 <HAL_GPIO_WritePin>
}
 80100be:	bf00      	nop
 80100c0:	bd80      	pop	{r7, pc}
 80100c2:	bf00      	nop
 80100c4:	40020400 	.word	0x40020400

080100c8 <task_supervision>:
#include "util/log.h"
#include "drivers/dcdc.h"
#include "usb_device.h"
#include "init/init.h"

void task_supervision(void *argument) {
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b086      	sub	sp, #24
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]

	bool cli_stared = false;
 80100d0:	2300      	movs	r3, #0
 80100d2:	75fb      	strb	r3, [r7, #23]

	uint32_t tick_count = osKernelGetTickCount();
 80100d4:	f008 fc30 	bl	8018938 <osKernelGetTickCount>
 80100d8:	6138      	str	r0, [r7, #16]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 80100da:	f008 fc42 	bl	8018962 <osKernelGetTickFreq>
 80100de:	4603      	mov	r3, r0
 80100e0:	4a1a      	ldr	r2, [pc, #104]	; (801014c <task_supervision+0x84>)
 80100e2:	fba2 2303 	umull	r2, r3, r2, r3
 80100e6:	095b      	lsrs	r3, r3, #5
 80100e8:	60fb      	str	r3, [r7, #12]

	while (1) {


		/* Check the USB detection pin */
		if(HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin)){
 80100ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80100ee:	4818      	ldr	r0, [pc, #96]	; (8010150 <task_supervision+0x88>)
 80100f0:	f001 fc80 	bl	80119f4 <HAL_GPIO_ReadPin>
 80100f4:	4603      	mov	r3, r0
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d00f      	beq.n	801011a <task_supervision+0x52>
			/* Make sure the DCDC converter is never turned on */
			dcdc_disable();
 80100fa:	f7ff ffd9 	bl	80100b0 <dcdc_disable>

			/* If usb is not initialized yet, do so */
			if(global_usb_initialized_flag == false){
 80100fe:	4b15      	ldr	r3, [pc, #84]	; (8010154 <task_supervision+0x8c>)
 8010100:	781b      	ldrb	r3, [r3, #0]
 8010102:	f083 0301 	eor.w	r3, r3, #1
 8010106:	b2db      	uxtb	r3, r3
 8010108:	2b00      	cmp	r3, #0
 801010a:	d006      	beq.n	801011a <task_supervision+0x52>
				global_usb_initialized_flag = true;
 801010c:	4b11      	ldr	r3, [pc, #68]	; (8010154 <task_supervision+0x8c>)
 801010e:	2201      	movs	r2, #1
 8010110:	701a      	strb	r2, [r3, #0]
				MX_USB_DEVICE_Init();
 8010112:	f00c fb93 	bl	801c83c <MX_USB_DEVICE_Init>
				log_enable();
 8010116:	f000 fa0d 	bl	8010534 <log_enable>
			}
		}

		/* Start cli when something was received from the usb interface */
		if(fifo_get_length(&usb_input_fifo) && cli_stared == false){
 801011a:	480f      	ldr	r0, [pc, #60]	; (8010158 <task_supervision+0x90>)
 801011c:	f000 f86f 	bl	80101fe <fifo_get_length>
 8010120:	4603      	mov	r3, r0
 8010122:	2b00      	cmp	r3, #0
 8010124:	d009      	beq.n	801013a <task_supervision+0x72>
 8010126:	7dfb      	ldrb	r3, [r7, #23]
 8010128:	f083 0301 	eor.w	r3, r3, #1
 801012c:	b2db      	uxtb	r3, r3
 801012e:	2b00      	cmp	r3, #0
 8010130:	d003      	beq.n	801013a <task_supervision+0x72>
			cli_stared = true;
 8010132:	2301      	movs	r3, #1
 8010134:	75fb      	strb	r3, [r7, #23]
			init_cli();
 8010136:	f7fe fc5f 	bl	800e9f8 <init_cli>
		}

		tick_count += tick_update;
 801013a:	693a      	ldr	r2, [r7, #16]
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	4413      	add	r3, r2
 8010140:	613b      	str	r3, [r7, #16]
		osDelayUntil(tick_count);
 8010142:	6938      	ldr	r0, [r7, #16]
 8010144:	f008 fcfb 	bl	8018b3e <osDelayUntil>
		if(HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin)){
 8010148:	e7cf      	b.n	80100ea <task_supervision+0x22>
 801014a:	bf00      	nop
 801014c:	51eb851f 	.word	0x51eb851f
 8010150:	40020000 	.word	0x40020000
 8010154:	20000480 	.word	0x20000480
 8010158:	20005308 	.word	0x20005308

0801015c <task_telemetry>:
#include "cmsis_os.h"
#include "tasks/task_telemetry.h"
#include "config/globals.h"
#include "util/log.h"

void task_telemetry(void *argument) {
 801015c:	b580      	push	{r7, lr}
 801015e:	b084      	sub	sp, #16
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]

	uint32_t tick_count = osKernelGetTickCount();
 8010164:	f008 fbe8 	bl	8018938 <osKernelGetTickCount>
 8010168:	60f8      	str	r0, [r7, #12]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 801016a:	f008 fbfa 	bl	8018962 <osKernelGetTickFreq>
 801016e:	4603      	mov	r3, r0
 8010170:	4a06      	ldr	r2, [pc, #24]	; (801018c <task_telemetry+0x30>)
 8010172:	fba2 2303 	umull	r2, r3, r2, r3
 8010176:	095b      	lsrs	r3, r3, #5
 8010178:	60bb      	str	r3, [r7, #8]
	while (1) {


		tick_count += tick_update;
 801017a:	68fa      	ldr	r2, [r7, #12]
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	4413      	add	r3, r2
 8010180:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick_count);
 8010182:	68f8      	ldr	r0, [r7, #12]
 8010184:	f008 fcdb 	bl	8018b3e <osDelayUntil>
		tick_count += tick_update;
 8010188:	e7f7      	b.n	801017a <task_telemetry+0x1e>
 801018a:	bf00      	nop
 801018c:	51eb851f 	.word	0x51eb851f

08010190 <fifo_init>:
 */

#include <string.h>
#include "fifo.h"

void fifo_init(fifo_t *fifo, uint8_t *pdata, uint32_t size) {
 8010190:	b580      	push	{r7, lr}
 8010192:	b084      	sub	sp, #16
 8010194:	af00      	add	r7, sp, #0
 8010196:	60f8      	str	r0, [r7, #12]
 8010198:	60b9      	str	r1, [r7, #8]
 801019a:	607a      	str	r2, [r7, #4]
  fifo->data = pdata;
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	68ba      	ldr	r2, [r7, #8]
 80101a0:	611a      	str	r2, [r3, #16]
  fifo->size = size;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	687a      	ldr	r2, [r7, #4]
 80101a6:	60da      	str	r2, [r3, #12]
  fifo->mutex = false;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	2200      	movs	r2, #0
 80101ac:	751a      	strb	r2, [r3, #20]
  fifo_flush(fifo);
 80101ae:	68f8      	ldr	r0, [r7, #12]
 80101b0:	f000 f804 	bl	80101bc <fifo_flush>
}
 80101b4:	bf00      	nop
 80101b6:	3710      	adds	r7, #16
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}

080101bc <fifo_flush>:

void fifo_flush(fifo_t *fifo) {
 80101bc:	b480      	push	{r7}
 80101be:	b083      	sub	sp, #12
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  if (fifo->mutex == false) {
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	7d1b      	ldrb	r3, [r3, #20]
 80101c8:	b2db      	uxtb	r3, r3
 80101ca:	f083 0301 	eor.w	r3, r3, #1
 80101ce:	b2db      	uxtb	r3, r3
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d00e      	beq.n	80101f2 <fifo_flush+0x36>
    fifo->mutex = true;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2201      	movs	r2, #1
 80101d8:	751a      	strb	r2, [r3, #20]
    fifo->tail = 0;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2200      	movs	r2, #0
 80101de:	605a      	str	r2, [r3, #4]
    fifo->head = 0;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2200      	movs	r2, #0
 80101e4:	601a      	str	r2, [r3, #0]
    fifo->used = 0;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2200      	movs	r2, #0
 80101ea:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2200      	movs	r2, #0
 80101f0:	751a      	strb	r2, [r3, #20]
  }
}
 80101f2:	bf00      	nop
 80101f4:	370c      	adds	r7, #12
 80101f6:	46bd      	mov	sp, r7
 80101f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fc:	4770      	bx	lr

080101fe <fifo_get_length>:

uint32_t fifo_get_length(fifo_t *fifo) { return fifo->used; }
 80101fe:	b480      	push	{r7}
 8010200:	b083      	sub	sp, #12
 8010202:	af00      	add	r7, sp, #0
 8010204:	6078      	str	r0, [r7, #4]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	689b      	ldr	r3, [r3, #8]
 801020a:	4618      	mov	r0, r3
 801020c:	370c      	adds	r7, #12
 801020e:	46bd      	mov	sp, r7
 8010210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010214:	4770      	bx	lr

08010216 <fifo_read>:

uint8_t fifo_read(fifo_t *fifo) {
 8010216:	b480      	push	{r7}
 8010218:	b085      	sub	sp, #20
 801021a:	af00      	add	r7, sp, #0
 801021c:	6078      	str	r0, [r7, #4]
  if (fifo->mutex == false) {
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	7d1b      	ldrb	r3, [r3, #20]
 8010222:	b2db      	uxtb	r3, r3
 8010224:	f083 0301 	eor.w	r3, r3, #1
 8010228:	b2db      	uxtb	r3, r3
 801022a:	2b00      	cmp	r3, #0
 801022c:	d028      	beq.n	8010280 <fifo_read+0x6a>
    fifo->mutex = true;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2201      	movs	r2, #1
 8010232:	751a      	strb	r2, [r3, #20]
    if (fifo->used == 0) {
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	689b      	ldr	r3, [r3, #8]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d104      	bne.n	8010246 <fifo_read+0x30>
      fifo->mutex = false;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2200      	movs	r2, #0
 8010240:	751a      	strb	r2, [r3, #20]
      return 0;
 8010242:	2300      	movs	r3, #0
 8010244:	e01d      	b.n	8010282 <fifo_read+0x6c>
    }
    uint8_t data = fifo->data[fifo->tail];
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	691a      	ldr	r2, [r3, #16]
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	685b      	ldr	r3, [r3, #4]
 801024e:	4413      	add	r3, r2
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	73fb      	strb	r3, [r7, #15]
    fifo->tail = (fifo->tail + 1) % fifo->size;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	3301      	adds	r3, #1
 801025a:	687a      	ldr	r2, [r7, #4]
 801025c:	68d2      	ldr	r2, [r2, #12]
 801025e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010262:	fb02 f201 	mul.w	r2, r2, r1
 8010266:	1a9a      	subs	r2, r3, r2
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	605a      	str	r2, [r3, #4]
    fifo->used--;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	689b      	ldr	r3, [r3, #8]
 8010270:	1e5a      	subs	r2, r3, #1
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2200      	movs	r2, #0
 801027a:	751a      	strb	r2, [r3, #20]
    return data;
 801027c:	7bfb      	ldrb	r3, [r7, #15]
 801027e:	e000      	b.n	8010282 <fifo_read+0x6c>
  }
  return 0;
 8010280:	2300      	movs	r3, #0
}
 8010282:	4618      	mov	r0, r3
 8010284:	3714      	adds	r7, #20
 8010286:	46bd      	mov	sp, r7
 8010288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028c:	4770      	bx	lr

0801028e <fifo_write>:

bool fifo_write(fifo_t *fifo, uint8_t data) {
 801028e:	b480      	push	{r7}
 8010290:	b083      	sub	sp, #12
 8010292:	af00      	add	r7, sp, #0
 8010294:	6078      	str	r0, [r7, #4]
 8010296:	460b      	mov	r3, r1
 8010298:	70fb      	strb	r3, [r7, #3]
  if (fifo->mutex == false) {
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	7d1b      	ldrb	r3, [r3, #20]
 801029e:	b2db      	uxtb	r3, r3
 80102a0:	f083 0301 	eor.w	r3, r3, #1
 80102a4:	b2db      	uxtb	r3, r3
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d02a      	beq.n	8010300 <fifo_write+0x72>
    fifo->mutex = true;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2201      	movs	r2, #1
 80102ae:	751a      	strb	r2, [r3, #20]
    if (fifo->used >= fifo->size) {
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	689a      	ldr	r2, [r3, #8]
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d304      	bcc.n	80102c6 <fifo_write+0x38>
      fifo->mutex = false;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2200      	movs	r2, #0
 80102c0:	751a      	strb	r2, [r3, #20]
      return false;
 80102c2:	2300      	movs	r3, #0
 80102c4:	e01d      	b.n	8010302 <fifo_write+0x74>
    }
    fifo->data[fifo->head] = data;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	691a      	ldr	r2, [r3, #16]
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	4413      	add	r3, r2
 80102d0:	78fa      	ldrb	r2, [r7, #3]
 80102d2:	701a      	strb	r2, [r3, #0]
    fifo->head = (fifo->head + 1) % fifo->size;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	3301      	adds	r3, #1
 80102da:	687a      	ldr	r2, [r7, #4]
 80102dc:	68d2      	ldr	r2, [r2, #12]
 80102de:	fbb3 f1f2 	udiv	r1, r3, r2
 80102e2:	fb02 f201 	mul.w	r2, r2, r1
 80102e6:	1a9a      	subs	r2, r3, r2
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	601a      	str	r2, [r3, #0]
    fifo->used++;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	689b      	ldr	r3, [r3, #8]
 80102f0:	1c5a      	adds	r2, r3, #1
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	2200      	movs	r2, #0
 80102fa:	751a      	strb	r2, [r3, #20]
    return true;
 80102fc:	2301      	movs	r3, #1
 80102fe:	e000      	b.n	8010302 <fifo_write+0x74>
  }
  return false;
 8010300:	2300      	movs	r3, #0
}
 8010302:	4618      	mov	r0, r3
 8010304:	370c      	adds	r7, #12
 8010306:	46bd      	mov	sp, r7
 8010308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030c:	4770      	bx	lr

0801030e <fifo_read_bytes>:

bool fifo_read_bytes(fifo_t *fifo, uint8_t *data, uint32_t count) {
 801030e:	b580      	push	{r7, lr}
 8010310:	b086      	sub	sp, #24
 8010312:	af00      	add	r7, sp, #0
 8010314:	60f8      	str	r0, [r7, #12]
 8010316:	60b9      	str	r1, [r7, #8]
 8010318:	607a      	str	r2, [r7, #4]
  if (fifo->mutex == false) {
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	7d1b      	ldrb	r3, [r3, #20]
 801031e:	b2db      	uxtb	r3, r3
 8010320:	f083 0301 	eor.w	r3, r3, #1
 8010324:	b2db      	uxtb	r3, r3
 8010326:	2b00      	cmp	r3, #0
 8010328:	d05a      	beq.n	80103e0 <fifo_read_bytes+0xd2>
    fifo->mutex = true;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	2201      	movs	r2, #1
 801032e:	751a      	strb	r2, [r3, #20]
    if (fifo->used < count) {
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	689b      	ldr	r3, [r3, #8]
 8010334:	687a      	ldr	r2, [r7, #4]
 8010336:	429a      	cmp	r2, r3
 8010338:	d904      	bls.n	8010344 <fifo_read_bytes+0x36>
      fifo->mutex = false;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2200      	movs	r2, #0
 801033e:	751a      	strb	r2, [r3, #20]
      return false;
 8010340:	2300      	movs	r3, #0
 8010342:	e04e      	b.n	80103e2 <fifo_read_bytes+0xd4>
    }
    if (fifo->tail + count > fifo->size) {
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	685a      	ldr	r2, [r3, #4]
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	441a      	add	r2, r3
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	68db      	ldr	r3, [r3, #12]
 8010350:	429a      	cmp	r2, r3
 8010352:	d923      	bls.n	801039c <fifo_read_bytes+0x8e>
      uint32_t front = (fifo->tail + count) % fifo->size;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	685a      	ldr	r2, [r3, #4]
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	4413      	add	r3, r2
 801035c:	68fa      	ldr	r2, [r7, #12]
 801035e:	68d2      	ldr	r2, [r2, #12]
 8010360:	fbb3 f1f2 	udiv	r1, r3, r2
 8010364:	fb02 f201 	mul.w	r2, r2, r1
 8010368:	1a9b      	subs	r3, r3, r2
 801036a:	617b      	str	r3, [r7, #20]
      uint32_t back = count - front;
 801036c:	687a      	ldr	r2, [r7, #4]
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	1ad3      	subs	r3, r2, r3
 8010372:	613b      	str	r3, [r7, #16]
      memcpy(&data[0], &fifo->data[fifo->tail], back);
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	691a      	ldr	r2, [r3, #16]
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	4413      	add	r3, r2
 801037e:	693a      	ldr	r2, [r7, #16]
 8010380:	4619      	mov	r1, r3
 8010382:	68b8      	ldr	r0, [r7, #8]
 8010384:	f00d f89c 	bl	801d4c0 <memcpy>
      memcpy(&data[back], &fifo->data[0], front);
 8010388:	68ba      	ldr	r2, [r7, #8]
 801038a:	693b      	ldr	r3, [r7, #16]
 801038c:	18d0      	adds	r0, r2, r3
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	691b      	ldr	r3, [r3, #16]
 8010392:	697a      	ldr	r2, [r7, #20]
 8010394:	4619      	mov	r1, r3
 8010396:	f00d f893 	bl	801d4c0 <memcpy>
 801039a:	e009      	b.n	80103b0 <fifo_read_bytes+0xa2>
    } else {
      memcpy(&data[0], &fifo->data[fifo->tail], count);
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	691a      	ldr	r2, [r3, #16]
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	685b      	ldr	r3, [r3, #4]
 80103a4:	4413      	add	r3, r2
 80103a6:	687a      	ldr	r2, [r7, #4]
 80103a8:	4619      	mov	r1, r3
 80103aa:	68b8      	ldr	r0, [r7, #8]
 80103ac:	f00d f888 	bl	801d4c0 <memcpy>
    }
    fifo->tail = (fifo->tail + count) % fifo->size;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	685a      	ldr	r2, [r3, #4]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	4413      	add	r3, r2
 80103b8:	68fa      	ldr	r2, [r7, #12]
 80103ba:	68d2      	ldr	r2, [r2, #12]
 80103bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80103c0:	fb02 f201 	mul.w	r2, r2, r1
 80103c4:	1a9a      	subs	r2, r3, r2
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	605a      	str	r2, [r3, #4]
    fifo->used -= count;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	689a      	ldr	r2, [r3, #8]
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	1ad2      	subs	r2, r2, r3
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	2200      	movs	r2, #0
 80103da:	751a      	strb	r2, [r3, #20]
    return true;
 80103dc:	2301      	movs	r3, #1
 80103de:	e000      	b.n	80103e2 <fifo_read_bytes+0xd4>
  }
  return false;
 80103e0:	2300      	movs	r3, #0
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3718      	adds	r7, #24
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}

080103ea <fifo_write_bytes>:
    return i;
  }
  return 0;
}

bool fifo_write_bytes(fifo_t *fifo, uint8_t *data, uint32_t count) {
 80103ea:	b580      	push	{r7, lr}
 80103ec:	b086      	sub	sp, #24
 80103ee:	af00      	add	r7, sp, #0
 80103f0:	60f8      	str	r0, [r7, #12]
 80103f2:	60b9      	str	r1, [r7, #8]
 80103f4:	607a      	str	r2, [r7, #4]
  // If there is not enough space return false
  if (fifo->mutex == false) {
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	7d1b      	ldrb	r3, [r3, #20]
 80103fa:	b2db      	uxtb	r3, r3
 80103fc:	f083 0301 	eor.w	r3, r3, #1
 8010400:	b2db      	uxtb	r3, r3
 8010402:	2b00      	cmp	r3, #0
 8010404:	d059      	beq.n	80104ba <fifo_write_bytes+0xd0>
    fifo->mutex = true;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	2201      	movs	r2, #1
 801040a:	751a      	strb	r2, [r3, #20]
    if ((fifo->size - fifo->used) < count) {
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	68da      	ldr	r2, [r3, #12]
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	689b      	ldr	r3, [r3, #8]
 8010414:	1ad3      	subs	r3, r2, r3
 8010416:	687a      	ldr	r2, [r7, #4]
 8010418:	429a      	cmp	r2, r3
 801041a:	d904      	bls.n	8010426 <fifo_write_bytes+0x3c>
      fifo->mutex = false;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	2200      	movs	r2, #0
 8010420:	751a      	strb	r2, [r3, #20]
      return false;
 8010422:	2300      	movs	r3, #0
 8010424:	e04a      	b.n	80104bc <fifo_write_bytes+0xd2>
    }
    if (count + fifo->head > fifo->size) {
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	681a      	ldr	r2, [r3, #0]
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	441a      	add	r2, r3
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	68db      	ldr	r3, [r3, #12]
 8010432:	429a      	cmp	r2, r3
 8010434:	d91f      	bls.n	8010476 <fifo_write_bytes+0x8c>
      uint32_t front = fifo->head + count - fifo->size;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	681a      	ldr	r2, [r3, #0]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	441a      	add	r2, r3
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	68db      	ldr	r3, [r3, #12]
 8010442:	1ad3      	subs	r3, r2, r3
 8010444:	617b      	str	r3, [r7, #20]
      uint32_t back = count - front;
 8010446:	687a      	ldr	r2, [r7, #4]
 8010448:	697b      	ldr	r3, [r7, #20]
 801044a:	1ad3      	subs	r3, r2, r3
 801044c:	613b      	str	r3, [r7, #16]
      memcpy(&fifo->data[fifo->head], data, back);
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	691a      	ldr	r2, [r3, #16]
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	4413      	add	r3, r2
 8010458:	693a      	ldr	r2, [r7, #16]
 801045a:	68b9      	ldr	r1, [r7, #8]
 801045c:	4618      	mov	r0, r3
 801045e:	f00d f82f 	bl	801d4c0 <memcpy>
      memcpy(&fifo->data[0], &data[back], front);
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	6918      	ldr	r0, [r3, #16]
 8010466:	68ba      	ldr	r2, [r7, #8]
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	4413      	add	r3, r2
 801046c:	697a      	ldr	r2, [r7, #20]
 801046e:	4619      	mov	r1, r3
 8010470:	f00d f826 	bl	801d4c0 <memcpy>
 8010474:	e009      	b.n	801048a <fifo_write_bytes+0xa0>
    } else {
      memcpy(&fifo->data[fifo->head], data, count);
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	691a      	ldr	r2, [r3, #16]
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	4413      	add	r3, r2
 8010480:	687a      	ldr	r2, [r7, #4]
 8010482:	68b9      	ldr	r1, [r7, #8]
 8010484:	4618      	mov	r0, r3
 8010486:	f00d f81b 	bl	801d4c0 <memcpy>
    }
    fifo->head = (fifo->head + count) % fifo->size;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	681a      	ldr	r2, [r3, #0]
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	4413      	add	r3, r2
 8010492:	68fa      	ldr	r2, [r7, #12]
 8010494:	68d2      	ldr	r2, [r2, #12]
 8010496:	fbb3 f1f2 	udiv	r1, r3, r2
 801049a:	fb02 f201 	mul.w	r2, r2, r1
 801049e:	1a9a      	subs	r2, r3, r2
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	601a      	str	r2, [r3, #0]
    fifo->used += count;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	689a      	ldr	r2, [r3, #8]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	441a      	add	r2, r3
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	2200      	movs	r2, #0
 80104b4:	751a      	strb	r2, [r3, #20]
    return true;
 80104b6:	2301      	movs	r3, #1
 80104b8:	e000      	b.n	80104bc <fifo_write_bytes+0xd2>
  }
  return false;
 80104ba:	2300      	movs	r3, #0
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3718      	adds	r7, #24
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}

080104c4 <fifo_write_str>:

void fifo_write_str(fifo_t *fifo, const char *str) {
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b082      	sub	sp, #8
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
 80104cc:	6039      	str	r1, [r7, #0]
  while (*str) {
 80104ce:	e010      	b.n	80104f2 <fifo_write_str+0x2e>
    while (fifo_write(fifo, *str++) == false) {
      str--;
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	3b01      	subs	r3, #1
 80104d4:	603b      	str	r3, [r7, #0]
    while (fifo_write(fifo, *str++) == false) {
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	1c5a      	adds	r2, r3, #1
 80104da:	603a      	str	r2, [r7, #0]
 80104dc:	781b      	ldrb	r3, [r3, #0]
 80104de:	4619      	mov	r1, r3
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f7ff fed4 	bl	801028e <fifo_write>
 80104e6:	4603      	mov	r3, r0
 80104e8:	f083 0301 	eor.w	r3, r3, #1
 80104ec:	b2db      	uxtb	r3, r3
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d1ee      	bne.n	80104d0 <fifo_write_str+0xc>
  while (*str) {
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	781b      	ldrb	r3, [r3, #0]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d1ed      	bne.n	80104d6 <fifo_write_str+0x12>
    }
  }
}
 80104fa:	bf00      	nop
 80104fc:	bf00      	nop
 80104fe:	3708      	adds	r7, #8
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <log_init>:
static const char *level_colors[] = {"\x1b[94m", "\x1b[36m", "\x1b[32m", "\x1b[33m", "\x1b[31m", "\x1b[35m"};

osMutexId_t print_mutex;
static char print_buffer[PRINT_BUFFER_LEN];

void log_init(){
 8010504:	b590      	push	{r4, r7, lr}
 8010506:	b085      	sub	sp, #20
 8010508:	af00      	add	r7, sp, #0
	const osMutexAttr_t print_mutex_attr = {
 801050a:	4b08      	ldr	r3, [pc, #32]	; (801052c <log_init+0x28>)
 801050c:	463c      	mov	r4, r7
 801050e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010510:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  "print_mutex",       // human readable mutex name
	   osMutexPrioInherit,  // attr_bits
	   NULL,                // memory for control block
	   0U                   // size for control block
	};
	print_mutex = osMutexNew(&print_mutex_attr);
 8010514:	463b      	mov	r3, r7
 8010516:	4618      	mov	r0, r3
 8010518:	f008 fc5a 	bl	8018dd0 <osMutexNew>
 801051c:	4603      	mov	r3, r0
 801051e:	4a04      	ldr	r2, [pc, #16]	; (8010530 <log_init+0x2c>)
 8010520:	6013      	str	r3, [r2, #0]
}
 8010522:	bf00      	nop
 8010524:	3714      	adds	r7, #20
 8010526:	46bd      	mov	sp, r7
 8010528:	bd90      	pop	{r4, r7, pc}
 801052a:	bf00      	nop
 801052c:	0801e8b4 	.word	0x0801e8b4
 8010530:	200085f0 	.word	0x200085f0

08010534 <log_enable>:

void log_set_level(int level) {
  L.level = level;
}

void log_enable() {
 8010534:	b480      	push	{r7}
 8010536:	af00      	add	r7, sp, #0
  L.enabled = true;
 8010538:	4b03      	ldr	r3, [pc, #12]	; (8010548 <log_enable+0x14>)
 801053a:	2201      	movs	r2, #1
 801053c:	711a      	strb	r2, [r3, #4]
}
 801053e:	bf00      	nop
 8010540:	46bd      	mov	sp, r7
 8010542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010546:	4770      	bx	lr
 8010548:	20000494 	.word	0x20000494

0801054c <log_disable>:

void log_disable() {
 801054c:	b480      	push	{r7}
 801054e:	af00      	add	r7, sp, #0
  L.enabled = false;
 8010550:	4b03      	ldr	r3, [pc, #12]	; (8010560 <log_disable+0x14>)
 8010552:	2200      	movs	r2, #0
 8010554:	711a      	strb	r2, [r3, #4]
}
 8010556:	bf00      	nop
 8010558:	46bd      	mov	sp, r7
 801055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055e:	4770      	bx	lr
 8010560:	20000494 	.word	0x20000494

08010564 <log_is_enabled>:

bool log_is_enabled() {
 8010564:	b480      	push	{r7}
 8010566:	af00      	add	r7, sp, #0
  return L.enabled;
 8010568:	4b03      	ldr	r3, [pc, #12]	; (8010578 <log_is_enabled+0x14>)
 801056a:	791b      	ldrb	r3, [r3, #4]
}
 801056c:	4618      	mov	r0, r3
 801056e:	46bd      	mov	sp, r7
 8010570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010574:	4770      	bx	lr
 8010576:	bf00      	nop
 8010578:	20000494 	.word	0x20000494

0801057c <log_log>:

void log_log(int level, const char *file, int line, const char *format, ...) {
 801057c:	b408      	push	{r3}
 801057e:	b580      	push	{r7, lr}
 8010580:	b08b      	sub	sp, #44	; 0x2c
 8010582:	af04      	add	r7, sp, #16
 8010584:	60f8      	str	r0, [r7, #12]
 8010586:	60b9      	str	r1, [r7, #8]
 8010588:	607a      	str	r2, [r7, #4]
  if (L.enabled && level >= L.level && osMutexAcquire(print_mutex, 0U) == osOK) {
 801058a:	4b35      	ldr	r3, [pc, #212]	; (8010660 <log_log+0xe4>)
 801058c:	791b      	ldrb	r3, [r3, #4]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d05f      	beq.n	8010652 <log_log+0xd6>
 8010592:	4b33      	ldr	r3, [pc, #204]	; (8010660 <log_log+0xe4>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	68fa      	ldr	r2, [r7, #12]
 8010598:	429a      	cmp	r2, r3
 801059a:	db5a      	blt.n	8010652 <log_log+0xd6>
 801059c:	4b31      	ldr	r3, [pc, #196]	; (8010664 <log_log+0xe8>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	2100      	movs	r1, #0
 80105a2:	4618      	mov	r0, r3
 80105a4:	f008 fc9a 	bl	8018edc <osMutexAcquire>
 80105a8:	4603      	mov	r3, r0
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d151      	bne.n	8010652 <log_log+0xd6>
    /* fill buffer with metadata */
    static char buf_ts[16];
    buf_ts[snprintf(buf_ts, sizeof(buf_ts), "%lu", osKernelGetTickCount())] = '\0';
 80105ae:	f008 f9c3 	bl	8018938 <osKernelGetTickCount>
 80105b2:	4603      	mov	r3, r0
 80105b4:	4a2c      	ldr	r2, [pc, #176]	; (8010668 <log_log+0xec>)
 80105b6:	2110      	movs	r1, #16
 80105b8:	482c      	ldr	r0, [pc, #176]	; (801066c <log_log+0xf0>)
 80105ba:	f00c ff97 	bl	801d4ec <sniprintf>
 80105be:	4603      	mov	r3, r0
 80105c0:	4a2a      	ldr	r2, [pc, #168]	; (801066c <log_log+0xf0>)
 80105c2:	2100      	movs	r1, #0
 80105c4:	54d1      	strb	r1, [r2, r3]
    static char buf_loc[30];
    buf_loc[snprintf(buf_loc, sizeof(buf_loc), "%s:%d:", file, line)] = '\0';
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	9300      	str	r3, [sp, #0]
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	4a28      	ldr	r2, [pc, #160]	; (8010670 <log_log+0xf4>)
 80105ce:	211e      	movs	r1, #30
 80105d0:	4828      	ldr	r0, [pc, #160]	; (8010674 <log_log+0xf8>)
 80105d2:	f00c ff8b 	bl	801d4ec <sniprintf>
 80105d6:	4603      	mov	r3, r0
 80105d8:	4a26      	ldr	r2, [pc, #152]	; (8010674 <log_log+0xf8>)
 80105da:	2100      	movs	r1, #0
 80105dc:	54d1      	strb	r1, [r2, r3]
    int len;
    len = snprintf(print_buffer, PRINT_BUFFER_LEN, "%6s %s%5s\x1b[0m \x1b[90m%30s\x1b[0m ", buf_ts, level_colors[level],
 80105de:	4a26      	ldr	r2, [pc, #152]	; (8010678 <log_log+0xfc>)
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105e6:	4925      	ldr	r1, [pc, #148]	; (801067c <log_log+0x100>)
 80105e8:	68fa      	ldr	r2, [r7, #12]
 80105ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80105ee:	4921      	ldr	r1, [pc, #132]	; (8010674 <log_log+0xf8>)
 80105f0:	9102      	str	r1, [sp, #8]
 80105f2:	9201      	str	r2, [sp, #4]
 80105f4:	9300      	str	r3, [sp, #0]
 80105f6:	4b1d      	ldr	r3, [pc, #116]	; (801066c <log_log+0xf0>)
 80105f8:	4a21      	ldr	r2, [pc, #132]	; (8010680 <log_log+0x104>)
 80105fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80105fe:	4821      	ldr	r0, [pc, #132]	; (8010684 <log_log+0x108>)
 8010600:	f00c ff74 	bl	801d4ec <sniprintf>
 8010604:	6178      	str	r0, [r7, #20]
                   level_strings[level], buf_loc);
    va_list argptr;
    va_start(argptr, format);
 8010606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801060a:	613b      	str	r3, [r7, #16]
    vsnprintf(print_buffer + len, PRINT_BUFFER_LEN, format, argptr);
 801060c:	697b      	ldr	r3, [r7, #20]
 801060e:	4a1d      	ldr	r2, [pc, #116]	; (8010684 <log_log+0x108>)
 8010610:	1898      	adds	r0, r3, r2
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010616:	f44f 7180 	mov.w	r1, #256	; 0x100
 801061a:	f00d f963 	bl	801d8e4 <vsniprintf>
    va_end(argptr);
    snprintf(print_buffer + strlen(print_buffer), PRINT_BUFFER_LEN, "\n");
 801061e:	4819      	ldr	r0, [pc, #100]	; (8010684 <log_log+0x108>)
 8010620:	f7fb fd0e 	bl	800c040 <strlen>
 8010624:	4603      	mov	r3, r0
 8010626:	4a17      	ldr	r2, [pc, #92]	; (8010684 <log_log+0x108>)
 8010628:	4413      	add	r3, r2
 801062a:	4a17      	ldr	r2, [pc, #92]	; (8010688 <log_log+0x10c>)
 801062c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010630:	4618      	mov	r0, r3
 8010632:	f00c ff5b 	bl	801d4ec <sniprintf>
    fifo_write_bytes(&usb_output_fifo, (uint8_t *)print_buffer, strlen(print_buffer));
 8010636:	4813      	ldr	r0, [pc, #76]	; (8010684 <log_log+0x108>)
 8010638:	f7fb fd02 	bl	800c040 <strlen>
 801063c:	4603      	mov	r3, r0
 801063e:	461a      	mov	r2, r3
 8010640:	4910      	ldr	r1, [pc, #64]	; (8010684 <log_log+0x108>)
 8010642:	4812      	ldr	r0, [pc, #72]	; (801068c <log_log+0x110>)
 8010644:	f7ff fed1 	bl	80103ea <fifo_write_bytes>
    osMutexRelease(print_mutex);
 8010648:	4b06      	ldr	r3, [pc, #24]	; (8010664 <log_log+0xe8>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	4618      	mov	r0, r3
 801064e:	f008 fc90 	bl	8018f72 <osMutexRelease>
  }
}
 8010652:	bf00      	nop
 8010654:	371c      	adds	r7, #28
 8010656:	46bd      	mov	sp, r7
 8010658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801065c:	b001      	add	sp, #4
 801065e:	4770      	bx	lr
 8010660:	20000494 	.word	0x20000494
 8010664:	200085f0 	.word	0x200085f0
 8010668:	0801e8c4 	.word	0x0801e8c4
 801066c:	2000059c 	.word	0x2000059c
 8010670:	0801e8c8 	.word	0x0801e8c8
 8010674:	200005ac 	.word	0x200005ac
 8010678:	2000003c 	.word	0x2000003c
 801067c:	20000024 	.word	0x20000024
 8010680:	0801e8d0 	.word	0x0801e8d0
 8010684:	2000049c 	.word	0x2000049c
 8010688:	0801e8f0 	.word	0x0801e8f0
 801068c:	2000552c 	.word	0x2000552c

08010690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8010690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80106c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8010694:	480d      	ldr	r0, [pc, #52]	; (80106cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8010696:	490e      	ldr	r1, [pc, #56]	; (80106d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8010698:	4a0e      	ldr	r2, [pc, #56]	; (80106d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801069a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801069c:	e002      	b.n	80106a4 <LoopCopyDataInit>

0801069e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801069e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80106a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80106a2:	3304      	adds	r3, #4

080106a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80106a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80106a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80106a8:	d3f9      	bcc.n	801069e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80106aa:	4a0b      	ldr	r2, [pc, #44]	; (80106d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80106ac:	4c0b      	ldr	r4, [pc, #44]	; (80106dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80106ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80106b0:	e001      	b.n	80106b6 <LoopFillZerobss>

080106b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80106b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80106b4:	3204      	adds	r2, #4

080106b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80106b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80106b8:	d3fb      	bcc.n	80106b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80106ba:	f7fe f889 	bl	800e7d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80106be:	f00c fedb 	bl	801d478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80106c2:	f7fd fd59 	bl	800e178 <main>
  bx  lr    
 80106c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80106c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80106cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80106d0:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 80106d4:	0801edc0 	.word	0x0801edc0
  ldr r2, =_sbss
 80106d8:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80106dc:	2000920c 	.word	0x2000920c

080106e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80106e0:	e7fe      	b.n	80106e0 <ADC_IRQHandler>
	...

080106e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80106e8:	4b0e      	ldr	r3, [pc, #56]	; (8010724 <HAL_Init+0x40>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	4a0d      	ldr	r2, [pc, #52]	; (8010724 <HAL_Init+0x40>)
 80106ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80106f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80106f4:	4b0b      	ldr	r3, [pc, #44]	; (8010724 <HAL_Init+0x40>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	4a0a      	ldr	r2, [pc, #40]	; (8010724 <HAL_Init+0x40>)
 80106fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80106fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010700:	4b08      	ldr	r3, [pc, #32]	; (8010724 <HAL_Init+0x40>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	4a07      	ldr	r2, [pc, #28]	; (8010724 <HAL_Init+0x40>)
 8010706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801070a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801070c:	2003      	movs	r0, #3
 801070e:	f000 fbde 	bl	8010ece <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010712:	200f      	movs	r0, #15
 8010714:	f7fd ff6c 	bl	800e5f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8010718:	f7fd fd50 	bl	800e1bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801071c:	2300      	movs	r3, #0
}
 801071e:	4618      	mov	r0, r3
 8010720:	bd80      	pop	{r7, pc}
 8010722:	bf00      	nop
 8010724:	40023c00 	.word	0x40023c00

08010728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010728:	b480      	push	{r7}
 801072a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801072c:	4b06      	ldr	r3, [pc, #24]	; (8010748 <HAL_IncTick+0x20>)
 801072e:	781b      	ldrb	r3, [r3, #0]
 8010730:	461a      	mov	r2, r3
 8010732:	4b06      	ldr	r3, [pc, #24]	; (801074c <HAL_IncTick+0x24>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	4413      	add	r3, r2
 8010738:	4a04      	ldr	r2, [pc, #16]	; (801074c <HAL_IncTick+0x24>)
 801073a:	6013      	str	r3, [r2, #0]
}
 801073c:	bf00      	nop
 801073e:	46bd      	mov	sp, r7
 8010740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010744:	4770      	bx	lr
 8010746:	bf00      	nop
 8010748:	20000058 	.word	0x20000058
 801074c:	200085f4 	.word	0x200085f4

08010750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010750:	b480      	push	{r7}
 8010752:	af00      	add	r7, sp, #0
  return uwTick;
 8010754:	4b03      	ldr	r3, [pc, #12]	; (8010764 <HAL_GetTick+0x14>)
 8010756:	681b      	ldr	r3, [r3, #0]
}
 8010758:	4618      	mov	r0, r3
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr
 8010762:	bf00      	nop
 8010764:	200085f4 	.word	0x200085f4

08010768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b084      	sub	sp, #16
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010770:	f7ff ffee 	bl	8010750 <HAL_GetTick>
 8010774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010780:	d005      	beq.n	801078e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8010782:	4b0a      	ldr	r3, [pc, #40]	; (80107ac <HAL_Delay+0x44>)
 8010784:	781b      	ldrb	r3, [r3, #0]
 8010786:	461a      	mov	r2, r3
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	4413      	add	r3, r2
 801078c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801078e:	bf00      	nop
 8010790:	f7ff ffde 	bl	8010750 <HAL_GetTick>
 8010794:	4602      	mov	r2, r0
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	1ad3      	subs	r3, r2, r3
 801079a:	68fa      	ldr	r2, [r7, #12]
 801079c:	429a      	cmp	r2, r3
 801079e:	d8f7      	bhi.n	8010790 <HAL_Delay+0x28>
  {
  }
}
 80107a0:	bf00      	nop
 80107a2:	bf00      	nop
 80107a4:	3710      	adds	r7, #16
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}
 80107aa:	bf00      	nop
 80107ac:	20000058 	.word	0x20000058

080107b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80107b0:	b480      	push	{r7}
 80107b2:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 80107b4:	4b03      	ldr	r3, [pc, #12]	; (80107c4 <HAL_GetREVID+0x14>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	0c1b      	lsrs	r3, r3, #16
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	46bd      	mov	sp, r7
 80107be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c2:	4770      	bx	lr
 80107c4:	e0042000 	.word	0xe0042000

080107c8 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80107c8:	b480      	push	{r7}
 80107ca:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80107cc:	4b04      	ldr	r3, [pc, #16]	; (80107e0 <HAL_GetDEVID+0x18>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr
 80107de:	bf00      	nop
 80107e0:	e0042000 	.word	0xe0042000

080107e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b084      	sub	sp, #16
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80107ec:	2300      	movs	r3, #0
 80107ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d101      	bne.n	80107fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80107f6:	2301      	movs	r3, #1
 80107f8:	e033      	b.n	8010862 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d109      	bne.n	8010816 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f7fd fd06 	bl	800e214 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2200      	movs	r2, #0
 801080c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2200      	movs	r2, #0
 8010812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801081a:	f003 0310 	and.w	r3, r3, #16
 801081e:	2b00      	cmp	r3, #0
 8010820:	d118      	bne.n	8010854 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010826:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801082a:	f023 0302 	bic.w	r3, r3, #2
 801082e:	f043 0202 	orr.w	r2, r3, #2
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f000 f97c 	bl	8010b34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2200      	movs	r2, #0
 8010840:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010846:	f023 0303 	bic.w	r3, r3, #3
 801084a:	f043 0201 	orr.w	r2, r3, #1
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	641a      	str	r2, [r3, #64]	; 0x40
 8010852:	e001      	b.n	8010858 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8010854:	2301      	movs	r3, #1
 8010856:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2200      	movs	r2, #0
 801085c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8010860:	7bfb      	ldrb	r3, [r7, #15]
}
 8010862:	4618      	mov	r0, r3
 8010864:	3710      	adds	r7, #16
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}

0801086a <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 801086a:	b580      	push	{r7, lr}
 801086c:	b084      	sub	sp, #16
 801086e:	af00      	add	r7, sp, #0
 8010870:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010872:	2300      	movs	r3, #0
 8010874:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d101      	bne.n	8010880 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 801087c:	2301      	movs	r3, #1
 801087e:	e022      	b.n	80108c6 <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010884:	f043 0202 	orr.w	r2, r3, #2
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	689a      	ldr	r2, [r3, #8]
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	f022 0201 	bic.w	r2, r2, #1
 801089a:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	689b      	ldr	r3, [r3, #8]
 80108a2:	f003 0301 	and.w	r3, r3, #1
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d108      	bne.n	80108bc <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	f7fd fcf6 	bl	800e29c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2200      	movs	r2, #0
 80108b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2200      	movs	r2, #0
 80108ba:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2200      	movs	r2, #0
 80108c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80108c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3710      	adds	r7, #16
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
	...

080108d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80108d0:	b480      	push	{r7}
 80108d2:	b085      	sub	sp, #20
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
 80108d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80108da:	2300      	movs	r3, #0
 80108dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80108e4:	2b01      	cmp	r3, #1
 80108e6:	d101      	bne.n	80108ec <HAL_ADC_ConfigChannel+0x1c>
 80108e8:	2302      	movs	r3, #2
 80108ea:	e113      	b.n	8010b14 <HAL_ADC_ConfigChannel+0x244>
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2201      	movs	r2, #1
 80108f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	2b09      	cmp	r3, #9
 80108fa:	d925      	bls.n	8010948 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	68d9      	ldr	r1, [r3, #12]
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	b29b      	uxth	r3, r3
 8010908:	461a      	mov	r2, r3
 801090a:	4613      	mov	r3, r2
 801090c:	005b      	lsls	r3, r3, #1
 801090e:	4413      	add	r3, r2
 8010910:	3b1e      	subs	r3, #30
 8010912:	2207      	movs	r2, #7
 8010914:	fa02 f303 	lsl.w	r3, r2, r3
 8010918:	43da      	mvns	r2, r3
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	400a      	ands	r2, r1
 8010920:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	68d9      	ldr	r1, [r3, #12]
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	689a      	ldr	r2, [r3, #8]
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	b29b      	uxth	r3, r3
 8010932:	4618      	mov	r0, r3
 8010934:	4603      	mov	r3, r0
 8010936:	005b      	lsls	r3, r3, #1
 8010938:	4403      	add	r3, r0
 801093a:	3b1e      	subs	r3, #30
 801093c:	409a      	lsls	r2, r3
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	430a      	orrs	r2, r1
 8010944:	60da      	str	r2, [r3, #12]
 8010946:	e022      	b.n	801098e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	6919      	ldr	r1, [r3, #16]
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	b29b      	uxth	r3, r3
 8010954:	461a      	mov	r2, r3
 8010956:	4613      	mov	r3, r2
 8010958:	005b      	lsls	r3, r3, #1
 801095a:	4413      	add	r3, r2
 801095c:	2207      	movs	r2, #7
 801095e:	fa02 f303 	lsl.w	r3, r2, r3
 8010962:	43da      	mvns	r2, r3
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	400a      	ands	r2, r1
 801096a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	6919      	ldr	r1, [r3, #16]
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	689a      	ldr	r2, [r3, #8]
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	b29b      	uxth	r3, r3
 801097c:	4618      	mov	r0, r3
 801097e:	4603      	mov	r3, r0
 8010980:	005b      	lsls	r3, r3, #1
 8010982:	4403      	add	r3, r0
 8010984:	409a      	lsls	r2, r3
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	430a      	orrs	r2, r1
 801098c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801098e:	683b      	ldr	r3, [r7, #0]
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	2b06      	cmp	r3, #6
 8010994:	d824      	bhi.n	80109e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	685a      	ldr	r2, [r3, #4]
 80109a0:	4613      	mov	r3, r2
 80109a2:	009b      	lsls	r3, r3, #2
 80109a4:	4413      	add	r3, r2
 80109a6:	3b05      	subs	r3, #5
 80109a8:	221f      	movs	r2, #31
 80109aa:	fa02 f303 	lsl.w	r3, r2, r3
 80109ae:	43da      	mvns	r2, r3
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	400a      	ands	r2, r1
 80109b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	b29b      	uxth	r3, r3
 80109c4:	4618      	mov	r0, r3
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	685a      	ldr	r2, [r3, #4]
 80109ca:	4613      	mov	r3, r2
 80109cc:	009b      	lsls	r3, r3, #2
 80109ce:	4413      	add	r3, r2
 80109d0:	3b05      	subs	r3, #5
 80109d2:	fa00 f203 	lsl.w	r2, r0, r3
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	430a      	orrs	r2, r1
 80109dc:	635a      	str	r2, [r3, #52]	; 0x34
 80109de:	e04c      	b.n	8010a7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	685b      	ldr	r3, [r3, #4]
 80109e4:	2b0c      	cmp	r3, #12
 80109e6:	d824      	bhi.n	8010a32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	685a      	ldr	r2, [r3, #4]
 80109f2:	4613      	mov	r3, r2
 80109f4:	009b      	lsls	r3, r3, #2
 80109f6:	4413      	add	r3, r2
 80109f8:	3b23      	subs	r3, #35	; 0x23
 80109fa:	221f      	movs	r2, #31
 80109fc:	fa02 f303 	lsl.w	r3, r2, r3
 8010a00:	43da      	mvns	r2, r3
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	400a      	ands	r2, r1
 8010a08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	b29b      	uxth	r3, r3
 8010a16:	4618      	mov	r0, r3
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	685a      	ldr	r2, [r3, #4]
 8010a1c:	4613      	mov	r3, r2
 8010a1e:	009b      	lsls	r3, r3, #2
 8010a20:	4413      	add	r3, r2
 8010a22:	3b23      	subs	r3, #35	; 0x23
 8010a24:	fa00 f203 	lsl.w	r2, r0, r3
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	430a      	orrs	r2, r1
 8010a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8010a30:	e023      	b.n	8010a7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	685a      	ldr	r2, [r3, #4]
 8010a3c:	4613      	mov	r3, r2
 8010a3e:	009b      	lsls	r3, r3, #2
 8010a40:	4413      	add	r3, r2
 8010a42:	3b41      	subs	r3, #65	; 0x41
 8010a44:	221f      	movs	r2, #31
 8010a46:	fa02 f303 	lsl.w	r3, r2, r3
 8010a4a:	43da      	mvns	r2, r3
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	400a      	ands	r2, r1
 8010a52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	b29b      	uxth	r3, r3
 8010a60:	4618      	mov	r0, r3
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	685a      	ldr	r2, [r3, #4]
 8010a66:	4613      	mov	r3, r2
 8010a68:	009b      	lsls	r3, r3, #2
 8010a6a:	4413      	add	r3, r2
 8010a6c:	3b41      	subs	r3, #65	; 0x41
 8010a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	430a      	orrs	r2, r1
 8010a78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010a7a:	4b29      	ldr	r3, [pc, #164]	; (8010b20 <HAL_ADC_ConfigChannel+0x250>)
 8010a7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	4a28      	ldr	r2, [pc, #160]	; (8010b24 <HAL_ADC_ConfigChannel+0x254>)
 8010a84:	4293      	cmp	r3, r2
 8010a86:	d10f      	bne.n	8010aa8 <HAL_ADC_ConfigChannel+0x1d8>
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	2b12      	cmp	r3, #18
 8010a8e:	d10b      	bne.n	8010aa8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	685b      	ldr	r3, [r3, #4]
 8010aa0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	4a1d      	ldr	r2, [pc, #116]	; (8010b24 <HAL_ADC_ConfigChannel+0x254>)
 8010aae:	4293      	cmp	r3, r2
 8010ab0:	d12b      	bne.n	8010b0a <HAL_ADC_ConfigChannel+0x23a>
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	4a1c      	ldr	r2, [pc, #112]	; (8010b28 <HAL_ADC_ConfigChannel+0x258>)
 8010ab8:	4293      	cmp	r3, r2
 8010aba:	d003      	beq.n	8010ac4 <HAL_ADC_ConfigChannel+0x1f4>
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	2b11      	cmp	r3, #17
 8010ac2:	d122      	bne.n	8010b0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	685b      	ldr	r3, [r3, #4]
 8010ac8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	685b      	ldr	r3, [r3, #4]
 8010ad4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	4a11      	ldr	r2, [pc, #68]	; (8010b28 <HAL_ADC_ConfigChannel+0x258>)
 8010ae2:	4293      	cmp	r3, r2
 8010ae4:	d111      	bne.n	8010b0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8010ae6:	4b11      	ldr	r3, [pc, #68]	; (8010b2c <HAL_ADC_ConfigChannel+0x25c>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	4a11      	ldr	r2, [pc, #68]	; (8010b30 <HAL_ADC_ConfigChannel+0x260>)
 8010aec:	fba2 2303 	umull	r2, r3, r2, r3
 8010af0:	0c9a      	lsrs	r2, r3, #18
 8010af2:	4613      	mov	r3, r2
 8010af4:	009b      	lsls	r3, r3, #2
 8010af6:	4413      	add	r3, r2
 8010af8:	005b      	lsls	r3, r3, #1
 8010afa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8010afc:	e002      	b.n	8010b04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	3b01      	subs	r3, #1
 8010b02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d1f9      	bne.n	8010afe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8010b12:	2300      	movs	r3, #0
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	3714      	adds	r7, #20
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1e:	4770      	bx	lr
 8010b20:	40012300 	.word	0x40012300
 8010b24:	40012000 	.word	0x40012000
 8010b28:	10000012 	.word	0x10000012
 8010b2c:	20000000 	.word	0x20000000
 8010b30:	431bde83 	.word	0x431bde83

08010b34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8010b34:	b480      	push	{r7}
 8010b36:	b085      	sub	sp, #20
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010b3c:	4b79      	ldr	r3, [pc, #484]	; (8010d24 <ADC_Init+0x1f0>)
 8010b3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	685b      	ldr	r3, [r3, #4]
 8010b44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	685a      	ldr	r2, [r3, #4]
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	431a      	orrs	r2, r3
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	685a      	ldr	r2, [r3, #4]
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010b68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	6859      	ldr	r1, [r3, #4]
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	691b      	ldr	r3, [r3, #16]
 8010b74:	021a      	lsls	r2, r3, #8
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	430a      	orrs	r2, r1
 8010b7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	685a      	ldr	r2, [r3, #4]
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8010b8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	6859      	ldr	r1, [r3, #4]
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	689a      	ldr	r2, [r3, #8]
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	430a      	orrs	r2, r1
 8010b9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	689a      	ldr	r2, [r3, #8]
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010bae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	6899      	ldr	r1, [r3, #8]
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	68da      	ldr	r2, [r3, #12]
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	430a      	orrs	r2, r1
 8010bc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bc6:	4a58      	ldr	r2, [pc, #352]	; (8010d28 <ADC_Init+0x1f4>)
 8010bc8:	4293      	cmp	r3, r2
 8010bca:	d022      	beq.n	8010c12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	689a      	ldr	r2, [r3, #8]
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010bda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	6899      	ldr	r1, [r3, #8]
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	430a      	orrs	r2, r1
 8010bec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	689a      	ldr	r2, [r3, #8]
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010bfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	6899      	ldr	r1, [r3, #8]
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	430a      	orrs	r2, r1
 8010c0e:	609a      	str	r2, [r3, #8]
 8010c10:	e00f      	b.n	8010c32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	689a      	ldr	r2, [r3, #8]
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010c20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	689a      	ldr	r2, [r3, #8]
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010c30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	689a      	ldr	r2, [r3, #8]
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	f022 0202 	bic.w	r2, r2, #2
 8010c40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	6899      	ldr	r1, [r3, #8]
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	7e1b      	ldrb	r3, [r3, #24]
 8010c4c:	005a      	lsls	r2, r3, #1
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	430a      	orrs	r2, r1
 8010c54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d01b      	beq.n	8010c98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	685a      	ldr	r2, [r3, #4]
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010c6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	685a      	ldr	r2, [r3, #4]
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8010c7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	6859      	ldr	r1, [r3, #4]
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c8a:	3b01      	subs	r3, #1
 8010c8c:	035a      	lsls	r2, r3, #13
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	430a      	orrs	r2, r1
 8010c94:	605a      	str	r2, [r3, #4]
 8010c96:	e007      	b.n	8010ca8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	685a      	ldr	r2, [r3, #4]
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010ca6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8010cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	69db      	ldr	r3, [r3, #28]
 8010cc2:	3b01      	subs	r3, #1
 8010cc4:	051a      	lsls	r2, r3, #20
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	430a      	orrs	r2, r1
 8010ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	689a      	ldr	r2, [r3, #8]
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010cdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	6899      	ldr	r1, [r3, #8]
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010cea:	025a      	lsls	r2, r3, #9
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	430a      	orrs	r2, r1
 8010cf2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	689a      	ldr	r2, [r3, #8]
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010d02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	6899      	ldr	r1, [r3, #8]
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	695b      	ldr	r3, [r3, #20]
 8010d0e:	029a      	lsls	r2, r3, #10
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	430a      	orrs	r2, r1
 8010d16:	609a      	str	r2, [r3, #8]
}
 8010d18:	bf00      	nop
 8010d1a:	3714      	adds	r7, #20
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d22:	4770      	bx	lr
 8010d24:	40012300 	.word	0x40012300
 8010d28:	0f000001 	.word	0x0f000001

08010d2c <__NVIC_SetPriorityGrouping>:
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	b085      	sub	sp, #20
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f003 0307 	and.w	r3, r3, #7
 8010d3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010d3c:	4b0c      	ldr	r3, [pc, #48]	; (8010d70 <__NVIC_SetPriorityGrouping+0x44>)
 8010d3e:	68db      	ldr	r3, [r3, #12]
 8010d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010d42:	68ba      	ldr	r2, [r7, #8]
 8010d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010d48:	4013      	ands	r3, r2
 8010d4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010d5e:	4a04      	ldr	r2, [pc, #16]	; (8010d70 <__NVIC_SetPriorityGrouping+0x44>)
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	60d3      	str	r3, [r2, #12]
}
 8010d64:	bf00      	nop
 8010d66:	3714      	adds	r7, #20
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6e:	4770      	bx	lr
 8010d70:	e000ed00 	.word	0xe000ed00

08010d74 <__NVIC_GetPriorityGrouping>:
{
 8010d74:	b480      	push	{r7}
 8010d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010d78:	4b04      	ldr	r3, [pc, #16]	; (8010d8c <__NVIC_GetPriorityGrouping+0x18>)
 8010d7a:	68db      	ldr	r3, [r3, #12]
 8010d7c:	0a1b      	lsrs	r3, r3, #8
 8010d7e:	f003 0307 	and.w	r3, r3, #7
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	46bd      	mov	sp, r7
 8010d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8a:	4770      	bx	lr
 8010d8c:	e000ed00 	.word	0xe000ed00

08010d90 <__NVIC_EnableIRQ>:
{
 8010d90:	b480      	push	{r7}
 8010d92:	b083      	sub	sp, #12
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	4603      	mov	r3, r0
 8010d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	db0b      	blt.n	8010dba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010da2:	79fb      	ldrb	r3, [r7, #7]
 8010da4:	f003 021f 	and.w	r2, r3, #31
 8010da8:	4907      	ldr	r1, [pc, #28]	; (8010dc8 <__NVIC_EnableIRQ+0x38>)
 8010daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010dae:	095b      	lsrs	r3, r3, #5
 8010db0:	2001      	movs	r0, #1
 8010db2:	fa00 f202 	lsl.w	r2, r0, r2
 8010db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010dba:	bf00      	nop
 8010dbc:	370c      	adds	r7, #12
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc4:	4770      	bx	lr
 8010dc6:	bf00      	nop
 8010dc8:	e000e100 	.word	0xe000e100

08010dcc <__NVIC_DisableIRQ>:
{
 8010dcc:	b480      	push	{r7}
 8010dce:	b083      	sub	sp, #12
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	db12      	blt.n	8010e04 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010dde:	79fb      	ldrb	r3, [r7, #7]
 8010de0:	f003 021f 	and.w	r2, r3, #31
 8010de4:	490a      	ldr	r1, [pc, #40]	; (8010e10 <__NVIC_DisableIRQ+0x44>)
 8010de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010dea:	095b      	lsrs	r3, r3, #5
 8010dec:	2001      	movs	r0, #1
 8010dee:	fa00 f202 	lsl.w	r2, r0, r2
 8010df2:	3320      	adds	r3, #32
 8010df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010df8:	f3bf 8f4f 	dsb	sy
}
 8010dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010dfe:	f3bf 8f6f 	isb	sy
}
 8010e02:	bf00      	nop
}
 8010e04:	bf00      	nop
 8010e06:	370c      	adds	r7, #12
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0e:	4770      	bx	lr
 8010e10:	e000e100 	.word	0xe000e100

08010e14 <__NVIC_SetPriority>:
{
 8010e14:	b480      	push	{r7}
 8010e16:	b083      	sub	sp, #12
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	6039      	str	r1, [r7, #0]
 8010e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	db0a      	blt.n	8010e3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	b2da      	uxtb	r2, r3
 8010e2c:	490c      	ldr	r1, [pc, #48]	; (8010e60 <__NVIC_SetPriority+0x4c>)
 8010e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010e32:	0112      	lsls	r2, r2, #4
 8010e34:	b2d2      	uxtb	r2, r2
 8010e36:	440b      	add	r3, r1
 8010e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010e3c:	e00a      	b.n	8010e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	b2da      	uxtb	r2, r3
 8010e42:	4908      	ldr	r1, [pc, #32]	; (8010e64 <__NVIC_SetPriority+0x50>)
 8010e44:	79fb      	ldrb	r3, [r7, #7]
 8010e46:	f003 030f 	and.w	r3, r3, #15
 8010e4a:	3b04      	subs	r3, #4
 8010e4c:	0112      	lsls	r2, r2, #4
 8010e4e:	b2d2      	uxtb	r2, r2
 8010e50:	440b      	add	r3, r1
 8010e52:	761a      	strb	r2, [r3, #24]
}
 8010e54:	bf00      	nop
 8010e56:	370c      	adds	r7, #12
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5e:	4770      	bx	lr
 8010e60:	e000e100 	.word	0xe000e100
 8010e64:	e000ed00 	.word	0xe000ed00

08010e68 <NVIC_EncodePriority>:
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b089      	sub	sp, #36	; 0x24
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	60f8      	str	r0, [r7, #12]
 8010e70:	60b9      	str	r1, [r7, #8]
 8010e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	f003 0307 	and.w	r3, r3, #7
 8010e7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010e7c:	69fb      	ldr	r3, [r7, #28]
 8010e7e:	f1c3 0307 	rsb	r3, r3, #7
 8010e82:	2b04      	cmp	r3, #4
 8010e84:	bf28      	it	cs
 8010e86:	2304      	movcs	r3, #4
 8010e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010e8a:	69fb      	ldr	r3, [r7, #28]
 8010e8c:	3304      	adds	r3, #4
 8010e8e:	2b06      	cmp	r3, #6
 8010e90:	d902      	bls.n	8010e98 <NVIC_EncodePriority+0x30>
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	3b03      	subs	r3, #3
 8010e96:	e000      	b.n	8010e9a <NVIC_EncodePriority+0x32>
 8010e98:	2300      	movs	r3, #0
 8010e9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8010ea0:	69bb      	ldr	r3, [r7, #24]
 8010ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8010ea6:	43da      	mvns	r2, r3
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	401a      	ands	r2, r3
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8010eb4:	697b      	ldr	r3, [r7, #20]
 8010eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8010eba:	43d9      	mvns	r1, r3
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010ec0:	4313      	orrs	r3, r2
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3724      	adds	r7, #36	; 0x24
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ecc:	4770      	bx	lr

08010ece <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010ece:	b580      	push	{r7, lr}
 8010ed0:	b082      	sub	sp, #8
 8010ed2:	af00      	add	r7, sp, #0
 8010ed4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f7ff ff28 	bl	8010d2c <__NVIC_SetPriorityGrouping>
}
 8010edc:	bf00      	nop
 8010ede:	3708      	adds	r7, #8
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b086      	sub	sp, #24
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	4603      	mov	r3, r0
 8010eec:	60b9      	str	r1, [r7, #8]
 8010eee:	607a      	str	r2, [r7, #4]
 8010ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010ef6:	f7ff ff3d 	bl	8010d74 <__NVIC_GetPriorityGrouping>
 8010efa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010efc:	687a      	ldr	r2, [r7, #4]
 8010efe:	68b9      	ldr	r1, [r7, #8]
 8010f00:	6978      	ldr	r0, [r7, #20]
 8010f02:	f7ff ffb1 	bl	8010e68 <NVIC_EncodePriority>
 8010f06:	4602      	mov	r2, r0
 8010f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f0c:	4611      	mov	r1, r2
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7ff ff80 	bl	8010e14 <__NVIC_SetPriority>
}
 8010f14:	bf00      	nop
 8010f16:	3718      	adds	r7, #24
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}

08010f1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b082      	sub	sp, #8
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	4603      	mov	r3, r0
 8010f24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7ff ff30 	bl	8010d90 <__NVIC_EnableIRQ>
}
 8010f30:	bf00      	nop
 8010f32:	3708      	adds	r7, #8
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b082      	sub	sp, #8
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	4603      	mov	r3, r0
 8010f40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8010f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7ff ff40 	bl	8010dcc <__NVIC_DisableIRQ>
}
 8010f4c:	bf00      	nop
 8010f4e:	3708      	adds	r7, #8
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b086      	sub	sp, #24
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	60f8      	str	r0, [r7, #12]
 8010f5c:	60b9      	str	r1, [r7, #8]
 8010f5e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010f62:	2301      	movs	r3, #1
 8010f64:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010f66:	4b23      	ldr	r3, [pc, #140]	; (8010ff4 <HAL_FLASH_Program+0xa0>)
 8010f68:	7e1b      	ldrb	r3, [r3, #24]
 8010f6a:	2b01      	cmp	r3, #1
 8010f6c:	d101      	bne.n	8010f72 <HAL_FLASH_Program+0x1e>
 8010f6e:	2302      	movs	r3, #2
 8010f70:	e03b      	b.n	8010fea <HAL_FLASH_Program+0x96>
 8010f72:	4b20      	ldr	r3, [pc, #128]	; (8010ff4 <HAL_FLASH_Program+0xa0>)
 8010f74:	2201      	movs	r2, #1
 8010f76:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010f78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010f7c:	f000 f870 	bl	8011060 <FLASH_WaitForLastOperation>
 8010f80:	4603      	mov	r3, r0
 8010f82:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8010f84:	7dfb      	ldrb	r3, [r7, #23]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d12b      	bne.n	8010fe2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d105      	bne.n	8010f9c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8010f90:	783b      	ldrb	r3, [r7, #0]
 8010f92:	4619      	mov	r1, r3
 8010f94:	68b8      	ldr	r0, [r7, #8]
 8010f96:	f000 f91b 	bl	80111d0 <FLASH_Program_Byte>
 8010f9a:	e016      	b.n	8010fca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	2b01      	cmp	r3, #1
 8010fa0:	d105      	bne.n	8010fae <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8010fa2:	883b      	ldrh	r3, [r7, #0]
 8010fa4:	4619      	mov	r1, r3
 8010fa6:	68b8      	ldr	r0, [r7, #8]
 8010fa8:	f000 f8ee 	bl	8011188 <FLASH_Program_HalfWord>
 8010fac:	e00d      	b.n	8010fca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	2b02      	cmp	r3, #2
 8010fb2:	d105      	bne.n	8010fc0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	68b8      	ldr	r0, [r7, #8]
 8010fba:	f000 f8c3 	bl	8011144 <FLASH_Program_Word>
 8010fbe:	e004      	b.n	8010fca <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8010fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010fc4:	68b8      	ldr	r0, [r7, #8]
 8010fc6:	f000 f88b 	bl	80110e0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010fca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010fce:	f000 f847 	bl	8011060 <FLASH_WaitForLastOperation>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8010fd6:	4b08      	ldr	r3, [pc, #32]	; (8010ff8 <HAL_FLASH_Program+0xa4>)
 8010fd8:	691b      	ldr	r3, [r3, #16]
 8010fda:	4a07      	ldr	r2, [pc, #28]	; (8010ff8 <HAL_FLASH_Program+0xa4>)
 8010fdc:	f023 0301 	bic.w	r3, r3, #1
 8010fe0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8010fe2:	4b04      	ldr	r3, [pc, #16]	; (8010ff4 <HAL_FLASH_Program+0xa0>)
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8010fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fea:	4618      	mov	r0, r3
 8010fec:	3718      	adds	r7, #24
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}
 8010ff2:	bf00      	nop
 8010ff4:	200085f8 	.word	0x200085f8
 8010ff8:	40023c00 	.word	0x40023c00

08010ffc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b083      	sub	sp, #12
 8011000:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8011002:	2300      	movs	r3, #0
 8011004:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8011006:	4b0b      	ldr	r3, [pc, #44]	; (8011034 <HAL_FLASH_Unlock+0x38>)
 8011008:	691b      	ldr	r3, [r3, #16]
 801100a:	2b00      	cmp	r3, #0
 801100c:	da0b      	bge.n	8011026 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801100e:	4b09      	ldr	r3, [pc, #36]	; (8011034 <HAL_FLASH_Unlock+0x38>)
 8011010:	4a09      	ldr	r2, [pc, #36]	; (8011038 <HAL_FLASH_Unlock+0x3c>)
 8011012:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011014:	4b07      	ldr	r3, [pc, #28]	; (8011034 <HAL_FLASH_Unlock+0x38>)
 8011016:	4a09      	ldr	r2, [pc, #36]	; (801103c <HAL_FLASH_Unlock+0x40>)
 8011018:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801101a:	4b06      	ldr	r3, [pc, #24]	; (8011034 <HAL_FLASH_Unlock+0x38>)
 801101c:	691b      	ldr	r3, [r3, #16]
 801101e:	2b00      	cmp	r3, #0
 8011020:	da01      	bge.n	8011026 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8011022:	2301      	movs	r3, #1
 8011024:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8011026:	79fb      	ldrb	r3, [r7, #7]
}
 8011028:	4618      	mov	r0, r3
 801102a:	370c      	adds	r7, #12
 801102c:	46bd      	mov	sp, r7
 801102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011032:	4770      	bx	lr
 8011034:	40023c00 	.word	0x40023c00
 8011038:	45670123 	.word	0x45670123
 801103c:	cdef89ab 	.word	0xcdef89ab

08011040 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8011040:	b480      	push	{r7}
 8011042:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8011044:	4b05      	ldr	r3, [pc, #20]	; (801105c <HAL_FLASH_Lock+0x1c>)
 8011046:	691b      	ldr	r3, [r3, #16]
 8011048:	4a04      	ldr	r2, [pc, #16]	; (801105c <HAL_FLASH_Lock+0x1c>)
 801104a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801104e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8011050:	2300      	movs	r3, #0
}
 8011052:	4618      	mov	r0, r3
 8011054:	46bd      	mov	sp, r7
 8011056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105a:	4770      	bx	lr
 801105c:	40023c00 	.word	0x40023c00

08011060 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8011060:	b580      	push	{r7, lr}
 8011062:	b084      	sub	sp, #16
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011068:	2300      	movs	r3, #0
 801106a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801106c:	4b1a      	ldr	r3, [pc, #104]	; (80110d8 <FLASH_WaitForLastOperation+0x78>)
 801106e:	2200      	movs	r2, #0
 8011070:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8011072:	f7ff fb6d 	bl	8010750 <HAL_GetTick>
 8011076:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8011078:	e010      	b.n	801109c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011080:	d00c      	beq.n	801109c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d007      	beq.n	8011098 <FLASH_WaitForLastOperation+0x38>
 8011088:	f7ff fb62 	bl	8010750 <HAL_GetTick>
 801108c:	4602      	mov	r2, r0
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	1ad3      	subs	r3, r2, r3
 8011092:	687a      	ldr	r2, [r7, #4]
 8011094:	429a      	cmp	r2, r3
 8011096:	d201      	bcs.n	801109c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8011098:	2303      	movs	r3, #3
 801109a:	e019      	b.n	80110d0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 801109c:	4b0f      	ldr	r3, [pc, #60]	; (80110dc <FLASH_WaitForLastOperation+0x7c>)
 801109e:	68db      	ldr	r3, [r3, #12]
 80110a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d1e8      	bne.n	801107a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80110a8:	4b0c      	ldr	r3, [pc, #48]	; (80110dc <FLASH_WaitForLastOperation+0x7c>)
 80110aa:	68db      	ldr	r3, [r3, #12]
 80110ac:	f003 0301 	and.w	r3, r3, #1
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d002      	beq.n	80110ba <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80110b4:	4b09      	ldr	r3, [pc, #36]	; (80110dc <FLASH_WaitForLastOperation+0x7c>)
 80110b6:	2201      	movs	r2, #1
 80110b8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80110ba:	4b08      	ldr	r3, [pc, #32]	; (80110dc <FLASH_WaitForLastOperation+0x7c>)
 80110bc:	68db      	ldr	r3, [r3, #12]
 80110be:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d003      	beq.n	80110ce <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80110c6:	f000 f8a5 	bl	8011214 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80110ca:	2301      	movs	r3, #1
 80110cc:	e000      	b.n	80110d0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80110ce:	2300      	movs	r3, #0
  
}  
 80110d0:	4618      	mov	r0, r3
 80110d2:	3710      	adds	r7, #16
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	200085f8 	.word	0x200085f8
 80110dc:	40023c00 	.word	0x40023c00

080110e0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80110e0:	b480      	push	{r7}
 80110e2:	b085      	sub	sp, #20
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	60f8      	str	r0, [r7, #12]
 80110e8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80110ec:	4b14      	ldr	r3, [pc, #80]	; (8011140 <FLASH_Program_DoubleWord+0x60>)
 80110ee:	691b      	ldr	r3, [r3, #16]
 80110f0:	4a13      	ldr	r2, [pc, #76]	; (8011140 <FLASH_Program_DoubleWord+0x60>)
 80110f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80110f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80110f8:	4b11      	ldr	r3, [pc, #68]	; (8011140 <FLASH_Program_DoubleWord+0x60>)
 80110fa:	691b      	ldr	r3, [r3, #16]
 80110fc:	4a10      	ldr	r2, [pc, #64]	; (8011140 <FLASH_Program_DoubleWord+0x60>)
 80110fe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8011102:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011104:	4b0e      	ldr	r3, [pc, #56]	; (8011140 <FLASH_Program_DoubleWord+0x60>)
 8011106:	691b      	ldr	r3, [r3, #16]
 8011108:	4a0d      	ldr	r2, [pc, #52]	; (8011140 <FLASH_Program_DoubleWord+0x60>)
 801110a:	f043 0301 	orr.w	r3, r3, #1
 801110e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	683a      	ldr	r2, [r7, #0]
 8011114:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8011116:	f3bf 8f6f 	isb	sy
}
 801111a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 801111c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011120:	f04f 0200 	mov.w	r2, #0
 8011124:	f04f 0300 	mov.w	r3, #0
 8011128:	000a      	movs	r2, r1
 801112a:	2300      	movs	r3, #0
 801112c:	68f9      	ldr	r1, [r7, #12]
 801112e:	3104      	adds	r1, #4
 8011130:	4613      	mov	r3, r2
 8011132:	600b      	str	r3, [r1, #0]
}
 8011134:	bf00      	nop
 8011136:	3714      	adds	r7, #20
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr
 8011140:	40023c00 	.word	0x40023c00

08011144 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8011144:	b480      	push	{r7}
 8011146:	b083      	sub	sp, #12
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801114e:	4b0d      	ldr	r3, [pc, #52]	; (8011184 <FLASH_Program_Word+0x40>)
 8011150:	691b      	ldr	r3, [r3, #16]
 8011152:	4a0c      	ldr	r2, [pc, #48]	; (8011184 <FLASH_Program_Word+0x40>)
 8011154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011158:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 801115a:	4b0a      	ldr	r3, [pc, #40]	; (8011184 <FLASH_Program_Word+0x40>)
 801115c:	691b      	ldr	r3, [r3, #16]
 801115e:	4a09      	ldr	r2, [pc, #36]	; (8011184 <FLASH_Program_Word+0x40>)
 8011160:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011164:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011166:	4b07      	ldr	r3, [pc, #28]	; (8011184 <FLASH_Program_Word+0x40>)
 8011168:	691b      	ldr	r3, [r3, #16]
 801116a:	4a06      	ldr	r2, [pc, #24]	; (8011184 <FLASH_Program_Word+0x40>)
 801116c:	f043 0301 	orr.w	r3, r3, #1
 8011170:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	683a      	ldr	r2, [r7, #0]
 8011176:	601a      	str	r2, [r3, #0]
}
 8011178:	bf00      	nop
 801117a:	370c      	adds	r7, #12
 801117c:	46bd      	mov	sp, r7
 801117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011182:	4770      	bx	lr
 8011184:	40023c00 	.word	0x40023c00

08011188 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8011188:	b480      	push	{r7}
 801118a:	b083      	sub	sp, #12
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	460b      	mov	r3, r1
 8011192:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011194:	4b0d      	ldr	r3, [pc, #52]	; (80111cc <FLASH_Program_HalfWord+0x44>)
 8011196:	691b      	ldr	r3, [r3, #16]
 8011198:	4a0c      	ldr	r2, [pc, #48]	; (80111cc <FLASH_Program_HalfWord+0x44>)
 801119a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801119e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80111a0:	4b0a      	ldr	r3, [pc, #40]	; (80111cc <FLASH_Program_HalfWord+0x44>)
 80111a2:	691b      	ldr	r3, [r3, #16]
 80111a4:	4a09      	ldr	r2, [pc, #36]	; (80111cc <FLASH_Program_HalfWord+0x44>)
 80111a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80111aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80111ac:	4b07      	ldr	r3, [pc, #28]	; (80111cc <FLASH_Program_HalfWord+0x44>)
 80111ae:	691b      	ldr	r3, [r3, #16]
 80111b0:	4a06      	ldr	r2, [pc, #24]	; (80111cc <FLASH_Program_HalfWord+0x44>)
 80111b2:	f043 0301 	orr.w	r3, r3, #1
 80111b6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	887a      	ldrh	r2, [r7, #2]
 80111bc:	801a      	strh	r2, [r3, #0]
}
 80111be:	bf00      	nop
 80111c0:	370c      	adds	r7, #12
 80111c2:	46bd      	mov	sp, r7
 80111c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c8:	4770      	bx	lr
 80111ca:	bf00      	nop
 80111cc:	40023c00 	.word	0x40023c00

080111d0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80111d0:	b480      	push	{r7}
 80111d2:	b083      	sub	sp, #12
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	460b      	mov	r3, r1
 80111da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80111dc:	4b0c      	ldr	r3, [pc, #48]	; (8011210 <FLASH_Program_Byte+0x40>)
 80111de:	691b      	ldr	r3, [r3, #16]
 80111e0:	4a0b      	ldr	r2, [pc, #44]	; (8011210 <FLASH_Program_Byte+0x40>)
 80111e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80111e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80111e8:	4b09      	ldr	r3, [pc, #36]	; (8011210 <FLASH_Program_Byte+0x40>)
 80111ea:	4a09      	ldr	r2, [pc, #36]	; (8011210 <FLASH_Program_Byte+0x40>)
 80111ec:	691b      	ldr	r3, [r3, #16]
 80111ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80111f0:	4b07      	ldr	r3, [pc, #28]	; (8011210 <FLASH_Program_Byte+0x40>)
 80111f2:	691b      	ldr	r3, [r3, #16]
 80111f4:	4a06      	ldr	r2, [pc, #24]	; (8011210 <FLASH_Program_Byte+0x40>)
 80111f6:	f043 0301 	orr.w	r3, r3, #1
 80111fa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	78fa      	ldrb	r2, [r7, #3]
 8011200:	701a      	strb	r2, [r3, #0]
}
 8011202:	bf00      	nop
 8011204:	370c      	adds	r7, #12
 8011206:	46bd      	mov	sp, r7
 8011208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120c:	4770      	bx	lr
 801120e:	bf00      	nop
 8011210:	40023c00 	.word	0x40023c00

08011214 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8011214:	b480      	push	{r7}
 8011216:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8011218:	4b2f      	ldr	r3, [pc, #188]	; (80112d8 <FLASH_SetErrorCode+0xc4>)
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	f003 0310 	and.w	r3, r3, #16
 8011220:	2b00      	cmp	r3, #0
 8011222:	d008      	beq.n	8011236 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011224:	4b2d      	ldr	r3, [pc, #180]	; (80112dc <FLASH_SetErrorCode+0xc8>)
 8011226:	69db      	ldr	r3, [r3, #28]
 8011228:	f043 0310 	orr.w	r3, r3, #16
 801122c:	4a2b      	ldr	r2, [pc, #172]	; (80112dc <FLASH_SetErrorCode+0xc8>)
 801122e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8011230:	4b29      	ldr	r3, [pc, #164]	; (80112d8 <FLASH_SetErrorCode+0xc4>)
 8011232:	2210      	movs	r2, #16
 8011234:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8011236:	4b28      	ldr	r3, [pc, #160]	; (80112d8 <FLASH_SetErrorCode+0xc4>)
 8011238:	68db      	ldr	r3, [r3, #12]
 801123a:	f003 0320 	and.w	r3, r3, #32
 801123e:	2b00      	cmp	r3, #0
 8011240:	d008      	beq.n	8011254 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8011242:	4b26      	ldr	r3, [pc, #152]	; (80112dc <FLASH_SetErrorCode+0xc8>)
 8011244:	69db      	ldr	r3, [r3, #28]
 8011246:	f043 0308 	orr.w	r3, r3, #8
 801124a:	4a24      	ldr	r2, [pc, #144]	; (80112dc <FLASH_SetErrorCode+0xc8>)
 801124c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 801124e:	4b22      	ldr	r3, [pc, #136]	; (80112d8 <FLASH_SetErrorCode+0xc4>)
 8011250:	2220      	movs	r2, #32
 8011252:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8011254:	4b20      	ldr	r3, [pc, #128]	; (80112d8 <FLASH_SetErrorCode+0xc4>)
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801125c:	2b00      	cmp	r3, #0
 801125e:	d008      	beq.n	8011272 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8011260:	4b1e      	ldr	r3, [pc, #120]	; (80112dc <FLASH_SetErrorCode+0xc8>)
 8011262:	69db      	ldr	r3, [r3, #28]
 8011264:	f043 0304 	orr.w	r3, r3, #4
 8011268:	4a1c      	ldr	r2, [pc, #112]	; (80112dc <FLASH_SetErrorCode+0xc8>)
 801126a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 801126c:	4b1a      	ldr	r3, [pc, #104]	; (80112d8 <FLASH_SetErrorCode+0xc4>)
 801126e:	2240      	movs	r2, #64	; 0x40
 8011270:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8011272:	4b19      	ldr	r3, [pc, #100]	; (80112d8 <FLASH_SetErrorCode+0xc4>)
 8011274:	68db      	ldr	r3, [r3, #12]
 8011276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801127a:	2b00      	cmp	r3, #0
 801127c:	d008      	beq.n	8011290 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 801127e:	4b17      	ldr	r3, [pc, #92]	; (80112dc <FLASH_SetErrorCode+0xc8>)
 8011280:	69db      	ldr	r3, [r3, #28]
 8011282:	f043 0302 	orr.w	r3, r3, #2
 8011286:	4a15      	ldr	r2, [pc, #84]	; (80112dc <FLASH_SetErrorCode+0xc8>)
 8011288:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 801128a:	4b13      	ldr	r3, [pc, #76]	; (80112d8 <FLASH_SetErrorCode+0xc4>)
 801128c:	2280      	movs	r2, #128	; 0x80
 801128e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8011290:	4b11      	ldr	r3, [pc, #68]	; (80112d8 <FLASH_SetErrorCode+0xc4>)
 8011292:	68db      	ldr	r3, [r3, #12]
 8011294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011298:	2b00      	cmp	r3, #0
 801129a:	d009      	beq.n	80112b0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 801129c:	4b0f      	ldr	r3, [pc, #60]	; (80112dc <FLASH_SetErrorCode+0xc8>)
 801129e:	69db      	ldr	r3, [r3, #28]
 80112a0:	f043 0301 	orr.w	r3, r3, #1
 80112a4:	4a0d      	ldr	r2, [pc, #52]	; (80112dc <FLASH_SetErrorCode+0xc8>)
 80112a6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80112a8:	4b0b      	ldr	r3, [pc, #44]	; (80112d8 <FLASH_SetErrorCode+0xc4>)
 80112aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80112ae:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80112b0:	4b09      	ldr	r3, [pc, #36]	; (80112d8 <FLASH_SetErrorCode+0xc4>)
 80112b2:	68db      	ldr	r3, [r3, #12]
 80112b4:	f003 0302 	and.w	r3, r3, #2
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d008      	beq.n	80112ce <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80112bc:	4b07      	ldr	r3, [pc, #28]	; (80112dc <FLASH_SetErrorCode+0xc8>)
 80112be:	69db      	ldr	r3, [r3, #28]
 80112c0:	f043 0320 	orr.w	r3, r3, #32
 80112c4:	4a05      	ldr	r2, [pc, #20]	; (80112dc <FLASH_SetErrorCode+0xc8>)
 80112c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80112c8:	4b03      	ldr	r3, [pc, #12]	; (80112d8 <FLASH_SetErrorCode+0xc4>)
 80112ca:	2202      	movs	r2, #2
 80112cc:	60da      	str	r2, [r3, #12]
  }
}
 80112ce:	bf00      	nop
 80112d0:	46bd      	mov	sp, r7
 80112d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d6:	4770      	bx	lr
 80112d8:	40023c00 	.word	0x40023c00
 80112dc:	200085f8 	.word	0x200085f8

080112e0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80112ea:	2301      	movs	r3, #1
 80112ec:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80112ee:	2300      	movs	r3, #0
 80112f0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80112f2:	4b31      	ldr	r3, [pc, #196]	; (80113b8 <HAL_FLASHEx_Erase+0xd8>)
 80112f4:	7e1b      	ldrb	r3, [r3, #24]
 80112f6:	2b01      	cmp	r3, #1
 80112f8:	d101      	bne.n	80112fe <HAL_FLASHEx_Erase+0x1e>
 80112fa:	2302      	movs	r3, #2
 80112fc:	e058      	b.n	80113b0 <HAL_FLASHEx_Erase+0xd0>
 80112fe:	4b2e      	ldr	r3, [pc, #184]	; (80113b8 <HAL_FLASHEx_Erase+0xd8>)
 8011300:	2201      	movs	r2, #1
 8011302:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011304:	f24c 3050 	movw	r0, #50000	; 0xc350
 8011308:	f7ff feaa 	bl	8011060 <FLASH_WaitForLastOperation>
 801130c:	4603      	mov	r3, r0
 801130e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8011310:	7bfb      	ldrb	r3, [r7, #15]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d148      	bne.n	80113a8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	f04f 32ff 	mov.w	r2, #4294967295
 801131c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	2b01      	cmp	r3, #1
 8011324:	d115      	bne.n	8011352 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	691b      	ldr	r3, [r3, #16]
 801132a:	b2da      	uxtb	r2, r3
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	685b      	ldr	r3, [r3, #4]
 8011330:	4619      	mov	r1, r3
 8011332:	4610      	mov	r0, r2
 8011334:	f000 f844 	bl	80113c0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011338:	f24c 3050 	movw	r0, #50000	; 0xc350
 801133c:	f7ff fe90 	bl	8011060 <FLASH_WaitForLastOperation>
 8011340:	4603      	mov	r3, r0
 8011342:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8011344:	4b1d      	ldr	r3, [pc, #116]	; (80113bc <HAL_FLASHEx_Erase+0xdc>)
 8011346:	691b      	ldr	r3, [r3, #16]
 8011348:	4a1c      	ldr	r2, [pc, #112]	; (80113bc <HAL_FLASHEx_Erase+0xdc>)
 801134a:	f023 0304 	bic.w	r3, r3, #4
 801134e:	6113      	str	r3, [r2, #16]
 8011350:	e028      	b.n	80113a4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	689b      	ldr	r3, [r3, #8]
 8011356:	60bb      	str	r3, [r7, #8]
 8011358:	e01c      	b.n	8011394 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	691b      	ldr	r3, [r3, #16]
 801135e:	b2db      	uxtb	r3, r3
 8011360:	4619      	mov	r1, r3
 8011362:	68b8      	ldr	r0, [r7, #8]
 8011364:	f000 f850 	bl	8011408 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011368:	f24c 3050 	movw	r0, #50000	; 0xc350
 801136c:	f7ff fe78 	bl	8011060 <FLASH_WaitForLastOperation>
 8011370:	4603      	mov	r3, r0
 8011372:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8011374:	4b11      	ldr	r3, [pc, #68]	; (80113bc <HAL_FLASHEx_Erase+0xdc>)
 8011376:	691b      	ldr	r3, [r3, #16]
 8011378:	4a10      	ldr	r2, [pc, #64]	; (80113bc <HAL_FLASHEx_Erase+0xdc>)
 801137a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 801137e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8011380:	7bfb      	ldrb	r3, [r7, #15]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d003      	beq.n	801138e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	68ba      	ldr	r2, [r7, #8]
 801138a:	601a      	str	r2, [r3, #0]
          break;
 801138c:	e00a      	b.n	80113a4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	3301      	adds	r3, #1
 8011392:	60bb      	str	r3, [r7, #8]
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	68da      	ldr	r2, [r3, #12]
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	689b      	ldr	r3, [r3, #8]
 801139c:	4413      	add	r3, r2
 801139e:	68ba      	ldr	r2, [r7, #8]
 80113a0:	429a      	cmp	r2, r3
 80113a2:	d3da      	bcc.n	801135a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80113a4:	f000 f878 	bl	8011498 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80113a8:	4b03      	ldr	r3, [pc, #12]	; (80113b8 <HAL_FLASHEx_Erase+0xd8>)
 80113aa:	2200      	movs	r2, #0
 80113ac:	761a      	strb	r2, [r3, #24]

  return status;
 80113ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80113b0:	4618      	mov	r0, r3
 80113b2:	3710      	adds	r7, #16
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd80      	pop	{r7, pc}
 80113b8:	200085f8 	.word	0x200085f8
 80113bc:	40023c00 	.word	0x40023c00

080113c0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80113c0:	b480      	push	{r7}
 80113c2:	b083      	sub	sp, #12
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	4603      	mov	r3, r0
 80113c8:	6039      	str	r1, [r7, #0]
 80113ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80113cc:	4b0d      	ldr	r3, [pc, #52]	; (8011404 <FLASH_MassErase+0x44>)
 80113ce:	691b      	ldr	r3, [r3, #16]
 80113d0:	4a0c      	ldr	r2, [pc, #48]	; (8011404 <FLASH_MassErase+0x44>)
 80113d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80113d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80113d8:	4b0a      	ldr	r3, [pc, #40]	; (8011404 <FLASH_MassErase+0x44>)
 80113da:	691b      	ldr	r3, [r3, #16]
 80113dc:	4a09      	ldr	r2, [pc, #36]	; (8011404 <FLASH_MassErase+0x44>)
 80113de:	f043 0304 	orr.w	r3, r3, #4
 80113e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80113e4:	4b07      	ldr	r3, [pc, #28]	; (8011404 <FLASH_MassErase+0x44>)
 80113e6:	691a      	ldr	r2, [r3, #16]
 80113e8:	79fb      	ldrb	r3, [r7, #7]
 80113ea:	021b      	lsls	r3, r3, #8
 80113ec:	4313      	orrs	r3, r2
 80113ee:	4a05      	ldr	r2, [pc, #20]	; (8011404 <FLASH_MassErase+0x44>)
 80113f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80113f4:	6113      	str	r3, [r2, #16]
}
 80113f6:	bf00      	nop
 80113f8:	370c      	adds	r7, #12
 80113fa:	46bd      	mov	sp, r7
 80113fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011400:	4770      	bx	lr
 8011402:	bf00      	nop
 8011404:	40023c00 	.word	0x40023c00

08011408 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8011408:	b480      	push	{r7}
 801140a:	b085      	sub	sp, #20
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
 8011410:	460b      	mov	r3, r1
 8011412:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8011414:	2300      	movs	r3, #0
 8011416:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8011418:	78fb      	ldrb	r3, [r7, #3]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d102      	bne.n	8011424 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 801141e:	2300      	movs	r3, #0
 8011420:	60fb      	str	r3, [r7, #12]
 8011422:	e010      	b.n	8011446 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8011424:	78fb      	ldrb	r3, [r7, #3]
 8011426:	2b01      	cmp	r3, #1
 8011428:	d103      	bne.n	8011432 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 801142a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801142e:	60fb      	str	r3, [r7, #12]
 8011430:	e009      	b.n	8011446 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8011432:	78fb      	ldrb	r3, [r7, #3]
 8011434:	2b02      	cmp	r3, #2
 8011436:	d103      	bne.n	8011440 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8011438:	f44f 7300 	mov.w	r3, #512	; 0x200
 801143c:	60fb      	str	r3, [r7, #12]
 801143e:	e002      	b.n	8011446 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8011440:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011444:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011446:	4b13      	ldr	r3, [pc, #76]	; (8011494 <FLASH_Erase_Sector+0x8c>)
 8011448:	691b      	ldr	r3, [r3, #16]
 801144a:	4a12      	ldr	r2, [pc, #72]	; (8011494 <FLASH_Erase_Sector+0x8c>)
 801144c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011450:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8011452:	4b10      	ldr	r3, [pc, #64]	; (8011494 <FLASH_Erase_Sector+0x8c>)
 8011454:	691a      	ldr	r2, [r3, #16]
 8011456:	490f      	ldr	r1, [pc, #60]	; (8011494 <FLASH_Erase_Sector+0x8c>)
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	4313      	orrs	r3, r2
 801145c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 801145e:	4b0d      	ldr	r3, [pc, #52]	; (8011494 <FLASH_Erase_Sector+0x8c>)
 8011460:	691b      	ldr	r3, [r3, #16]
 8011462:	4a0c      	ldr	r2, [pc, #48]	; (8011494 <FLASH_Erase_Sector+0x8c>)
 8011464:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011468:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 801146a:	4b0a      	ldr	r3, [pc, #40]	; (8011494 <FLASH_Erase_Sector+0x8c>)
 801146c:	691a      	ldr	r2, [r3, #16]
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	00db      	lsls	r3, r3, #3
 8011472:	4313      	orrs	r3, r2
 8011474:	4a07      	ldr	r2, [pc, #28]	; (8011494 <FLASH_Erase_Sector+0x8c>)
 8011476:	f043 0302 	orr.w	r3, r3, #2
 801147a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 801147c:	4b05      	ldr	r3, [pc, #20]	; (8011494 <FLASH_Erase_Sector+0x8c>)
 801147e:	691b      	ldr	r3, [r3, #16]
 8011480:	4a04      	ldr	r2, [pc, #16]	; (8011494 <FLASH_Erase_Sector+0x8c>)
 8011482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011486:	6113      	str	r3, [r2, #16]
}
 8011488:	bf00      	nop
 801148a:	3714      	adds	r7, #20
 801148c:	46bd      	mov	sp, r7
 801148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011492:	4770      	bx	lr
 8011494:	40023c00 	.word	0x40023c00

08011498 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8011498:	b480      	push	{r7}
 801149a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 801149c:	4b20      	ldr	r3, [pc, #128]	; (8011520 <FLASH_FlushCaches+0x88>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d017      	beq.n	80114d8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80114a8:	4b1d      	ldr	r3, [pc, #116]	; (8011520 <FLASH_FlushCaches+0x88>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	4a1c      	ldr	r2, [pc, #112]	; (8011520 <FLASH_FlushCaches+0x88>)
 80114ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80114b2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80114b4:	4b1a      	ldr	r3, [pc, #104]	; (8011520 <FLASH_FlushCaches+0x88>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	4a19      	ldr	r2, [pc, #100]	; (8011520 <FLASH_FlushCaches+0x88>)
 80114ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80114be:	6013      	str	r3, [r2, #0]
 80114c0:	4b17      	ldr	r3, [pc, #92]	; (8011520 <FLASH_FlushCaches+0x88>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	4a16      	ldr	r2, [pc, #88]	; (8011520 <FLASH_FlushCaches+0x88>)
 80114c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80114ca:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80114cc:	4b14      	ldr	r3, [pc, #80]	; (8011520 <FLASH_FlushCaches+0x88>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	4a13      	ldr	r2, [pc, #76]	; (8011520 <FLASH_FlushCaches+0x88>)
 80114d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80114d6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80114d8:	4b11      	ldr	r3, [pc, #68]	; (8011520 <FLASH_FlushCaches+0x88>)
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d017      	beq.n	8011514 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80114e4:	4b0e      	ldr	r3, [pc, #56]	; (8011520 <FLASH_FlushCaches+0x88>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	4a0d      	ldr	r2, [pc, #52]	; (8011520 <FLASH_FlushCaches+0x88>)
 80114ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80114ee:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80114f0:	4b0b      	ldr	r3, [pc, #44]	; (8011520 <FLASH_FlushCaches+0x88>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	4a0a      	ldr	r2, [pc, #40]	; (8011520 <FLASH_FlushCaches+0x88>)
 80114f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80114fa:	6013      	str	r3, [r2, #0]
 80114fc:	4b08      	ldr	r3, [pc, #32]	; (8011520 <FLASH_FlushCaches+0x88>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	4a07      	ldr	r2, [pc, #28]	; (8011520 <FLASH_FlushCaches+0x88>)
 8011502:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011506:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8011508:	4b05      	ldr	r3, [pc, #20]	; (8011520 <FLASH_FlushCaches+0x88>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	4a04      	ldr	r2, [pc, #16]	; (8011520 <FLASH_FlushCaches+0x88>)
 801150e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011512:	6013      	str	r3, [r2, #0]
  }
}
 8011514:	bf00      	nop
 8011516:	46bd      	mov	sp, r7
 8011518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151c:	4770      	bx	lr
 801151e:	bf00      	nop
 8011520:	40023c00 	.word	0x40023c00

08011524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011524:	b480      	push	{r7}
 8011526:	b089      	sub	sp, #36	; 0x24
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
 801152c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801152e:	2300      	movs	r3, #0
 8011530:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8011532:	2300      	movs	r3, #0
 8011534:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8011536:	2300      	movs	r3, #0
 8011538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801153a:	2300      	movs	r3, #0
 801153c:	61fb      	str	r3, [r7, #28]
 801153e:	e159      	b.n	80117f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011540:	2201      	movs	r2, #1
 8011542:	69fb      	ldr	r3, [r7, #28]
 8011544:	fa02 f303 	lsl.w	r3, r2, r3
 8011548:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	697a      	ldr	r2, [r7, #20]
 8011550:	4013      	ands	r3, r2
 8011552:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8011554:	693a      	ldr	r2, [r7, #16]
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	429a      	cmp	r2, r3
 801155a:	f040 8148 	bne.w	80117ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	685b      	ldr	r3, [r3, #4]
 8011562:	f003 0303 	and.w	r3, r3, #3
 8011566:	2b01      	cmp	r3, #1
 8011568:	d005      	beq.n	8011576 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011572:	2b02      	cmp	r3, #2
 8011574:	d130      	bne.n	80115d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	689b      	ldr	r3, [r3, #8]
 801157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801157c:	69fb      	ldr	r3, [r7, #28]
 801157e:	005b      	lsls	r3, r3, #1
 8011580:	2203      	movs	r2, #3
 8011582:	fa02 f303 	lsl.w	r3, r2, r3
 8011586:	43db      	mvns	r3, r3
 8011588:	69ba      	ldr	r2, [r7, #24]
 801158a:	4013      	ands	r3, r2
 801158c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	68da      	ldr	r2, [r3, #12]
 8011592:	69fb      	ldr	r3, [r7, #28]
 8011594:	005b      	lsls	r3, r3, #1
 8011596:	fa02 f303 	lsl.w	r3, r2, r3
 801159a:	69ba      	ldr	r2, [r7, #24]
 801159c:	4313      	orrs	r3, r2
 801159e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	69ba      	ldr	r2, [r7, #24]
 80115a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80115ac:	2201      	movs	r2, #1
 80115ae:	69fb      	ldr	r3, [r7, #28]
 80115b0:	fa02 f303 	lsl.w	r3, r2, r3
 80115b4:	43db      	mvns	r3, r3
 80115b6:	69ba      	ldr	r2, [r7, #24]
 80115b8:	4013      	ands	r3, r2
 80115ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	091b      	lsrs	r3, r3, #4
 80115c2:	f003 0201 	and.w	r2, r3, #1
 80115c6:	69fb      	ldr	r3, [r7, #28]
 80115c8:	fa02 f303 	lsl.w	r3, r2, r3
 80115cc:	69ba      	ldr	r2, [r7, #24]
 80115ce:	4313      	orrs	r3, r2
 80115d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	69ba      	ldr	r2, [r7, #24]
 80115d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	685b      	ldr	r3, [r3, #4]
 80115dc:	f003 0303 	and.w	r3, r3, #3
 80115e0:	2b03      	cmp	r3, #3
 80115e2:	d017      	beq.n	8011614 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	68db      	ldr	r3, [r3, #12]
 80115e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80115ea:	69fb      	ldr	r3, [r7, #28]
 80115ec:	005b      	lsls	r3, r3, #1
 80115ee:	2203      	movs	r2, #3
 80115f0:	fa02 f303 	lsl.w	r3, r2, r3
 80115f4:	43db      	mvns	r3, r3
 80115f6:	69ba      	ldr	r2, [r7, #24]
 80115f8:	4013      	ands	r3, r2
 80115fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	689a      	ldr	r2, [r3, #8]
 8011600:	69fb      	ldr	r3, [r7, #28]
 8011602:	005b      	lsls	r3, r3, #1
 8011604:	fa02 f303 	lsl.w	r3, r2, r3
 8011608:	69ba      	ldr	r2, [r7, #24]
 801160a:	4313      	orrs	r3, r2
 801160c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	69ba      	ldr	r2, [r7, #24]
 8011612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	685b      	ldr	r3, [r3, #4]
 8011618:	f003 0303 	and.w	r3, r3, #3
 801161c:	2b02      	cmp	r3, #2
 801161e:	d123      	bne.n	8011668 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011620:	69fb      	ldr	r3, [r7, #28]
 8011622:	08da      	lsrs	r2, r3, #3
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	3208      	adds	r2, #8
 8011628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801162c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801162e:	69fb      	ldr	r3, [r7, #28]
 8011630:	f003 0307 	and.w	r3, r3, #7
 8011634:	009b      	lsls	r3, r3, #2
 8011636:	220f      	movs	r2, #15
 8011638:	fa02 f303 	lsl.w	r3, r2, r3
 801163c:	43db      	mvns	r3, r3
 801163e:	69ba      	ldr	r2, [r7, #24]
 8011640:	4013      	ands	r3, r2
 8011642:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	691a      	ldr	r2, [r3, #16]
 8011648:	69fb      	ldr	r3, [r7, #28]
 801164a:	f003 0307 	and.w	r3, r3, #7
 801164e:	009b      	lsls	r3, r3, #2
 8011650:	fa02 f303 	lsl.w	r3, r2, r3
 8011654:	69ba      	ldr	r2, [r7, #24]
 8011656:	4313      	orrs	r3, r2
 8011658:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801165a:	69fb      	ldr	r3, [r7, #28]
 801165c:	08da      	lsrs	r2, r3, #3
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	3208      	adds	r2, #8
 8011662:	69b9      	ldr	r1, [r7, #24]
 8011664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801166e:	69fb      	ldr	r3, [r7, #28]
 8011670:	005b      	lsls	r3, r3, #1
 8011672:	2203      	movs	r2, #3
 8011674:	fa02 f303 	lsl.w	r3, r2, r3
 8011678:	43db      	mvns	r3, r3
 801167a:	69ba      	ldr	r2, [r7, #24]
 801167c:	4013      	ands	r3, r2
 801167e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	685b      	ldr	r3, [r3, #4]
 8011684:	f003 0203 	and.w	r2, r3, #3
 8011688:	69fb      	ldr	r3, [r7, #28]
 801168a:	005b      	lsls	r3, r3, #1
 801168c:	fa02 f303 	lsl.w	r3, r2, r3
 8011690:	69ba      	ldr	r2, [r7, #24]
 8011692:	4313      	orrs	r3, r2
 8011694:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	69ba      	ldr	r2, [r7, #24]
 801169a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	685b      	ldr	r3, [r3, #4]
 80116a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	f000 80a2 	beq.w	80117ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80116aa:	2300      	movs	r3, #0
 80116ac:	60fb      	str	r3, [r7, #12]
 80116ae:	4b57      	ldr	r3, [pc, #348]	; (801180c <HAL_GPIO_Init+0x2e8>)
 80116b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116b2:	4a56      	ldr	r2, [pc, #344]	; (801180c <HAL_GPIO_Init+0x2e8>)
 80116b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80116b8:	6453      	str	r3, [r2, #68]	; 0x44
 80116ba:	4b54      	ldr	r3, [pc, #336]	; (801180c <HAL_GPIO_Init+0x2e8>)
 80116bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80116c2:	60fb      	str	r3, [r7, #12]
 80116c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80116c6:	4a52      	ldr	r2, [pc, #328]	; (8011810 <HAL_GPIO_Init+0x2ec>)
 80116c8:	69fb      	ldr	r3, [r7, #28]
 80116ca:	089b      	lsrs	r3, r3, #2
 80116cc:	3302      	adds	r3, #2
 80116ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80116d4:	69fb      	ldr	r3, [r7, #28]
 80116d6:	f003 0303 	and.w	r3, r3, #3
 80116da:	009b      	lsls	r3, r3, #2
 80116dc:	220f      	movs	r2, #15
 80116de:	fa02 f303 	lsl.w	r3, r2, r3
 80116e2:	43db      	mvns	r3, r3
 80116e4:	69ba      	ldr	r2, [r7, #24]
 80116e6:	4013      	ands	r3, r2
 80116e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	4a49      	ldr	r2, [pc, #292]	; (8011814 <HAL_GPIO_Init+0x2f0>)
 80116ee:	4293      	cmp	r3, r2
 80116f0:	d019      	beq.n	8011726 <HAL_GPIO_Init+0x202>
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	4a48      	ldr	r2, [pc, #288]	; (8011818 <HAL_GPIO_Init+0x2f4>)
 80116f6:	4293      	cmp	r3, r2
 80116f8:	d013      	beq.n	8011722 <HAL_GPIO_Init+0x1fe>
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	4a47      	ldr	r2, [pc, #284]	; (801181c <HAL_GPIO_Init+0x2f8>)
 80116fe:	4293      	cmp	r3, r2
 8011700:	d00d      	beq.n	801171e <HAL_GPIO_Init+0x1fa>
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	4a46      	ldr	r2, [pc, #280]	; (8011820 <HAL_GPIO_Init+0x2fc>)
 8011706:	4293      	cmp	r3, r2
 8011708:	d007      	beq.n	801171a <HAL_GPIO_Init+0x1f6>
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	4a45      	ldr	r2, [pc, #276]	; (8011824 <HAL_GPIO_Init+0x300>)
 801170e:	4293      	cmp	r3, r2
 8011710:	d101      	bne.n	8011716 <HAL_GPIO_Init+0x1f2>
 8011712:	2304      	movs	r3, #4
 8011714:	e008      	b.n	8011728 <HAL_GPIO_Init+0x204>
 8011716:	2307      	movs	r3, #7
 8011718:	e006      	b.n	8011728 <HAL_GPIO_Init+0x204>
 801171a:	2303      	movs	r3, #3
 801171c:	e004      	b.n	8011728 <HAL_GPIO_Init+0x204>
 801171e:	2302      	movs	r3, #2
 8011720:	e002      	b.n	8011728 <HAL_GPIO_Init+0x204>
 8011722:	2301      	movs	r3, #1
 8011724:	e000      	b.n	8011728 <HAL_GPIO_Init+0x204>
 8011726:	2300      	movs	r3, #0
 8011728:	69fa      	ldr	r2, [r7, #28]
 801172a:	f002 0203 	and.w	r2, r2, #3
 801172e:	0092      	lsls	r2, r2, #2
 8011730:	4093      	lsls	r3, r2
 8011732:	69ba      	ldr	r2, [r7, #24]
 8011734:	4313      	orrs	r3, r2
 8011736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011738:	4935      	ldr	r1, [pc, #212]	; (8011810 <HAL_GPIO_Init+0x2ec>)
 801173a:	69fb      	ldr	r3, [r7, #28]
 801173c:	089b      	lsrs	r3, r3, #2
 801173e:	3302      	adds	r3, #2
 8011740:	69ba      	ldr	r2, [r7, #24]
 8011742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011746:	4b38      	ldr	r3, [pc, #224]	; (8011828 <HAL_GPIO_Init+0x304>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801174c:	693b      	ldr	r3, [r7, #16]
 801174e:	43db      	mvns	r3, r3
 8011750:	69ba      	ldr	r2, [r7, #24]
 8011752:	4013      	ands	r3, r2
 8011754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801175e:	2b00      	cmp	r3, #0
 8011760:	d003      	beq.n	801176a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8011762:	69ba      	ldr	r2, [r7, #24]
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	4313      	orrs	r3, r2
 8011768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801176a:	4a2f      	ldr	r2, [pc, #188]	; (8011828 <HAL_GPIO_Init+0x304>)
 801176c:	69bb      	ldr	r3, [r7, #24]
 801176e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8011770:	4b2d      	ldr	r3, [pc, #180]	; (8011828 <HAL_GPIO_Init+0x304>)
 8011772:	685b      	ldr	r3, [r3, #4]
 8011774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	43db      	mvns	r3, r3
 801177a:	69ba      	ldr	r2, [r7, #24]
 801177c:	4013      	ands	r3, r2
 801177e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	685b      	ldr	r3, [r3, #4]
 8011784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011788:	2b00      	cmp	r3, #0
 801178a:	d003      	beq.n	8011794 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801178c:	69ba      	ldr	r2, [r7, #24]
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	4313      	orrs	r3, r2
 8011792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8011794:	4a24      	ldr	r2, [pc, #144]	; (8011828 <HAL_GPIO_Init+0x304>)
 8011796:	69bb      	ldr	r3, [r7, #24]
 8011798:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801179a:	4b23      	ldr	r3, [pc, #140]	; (8011828 <HAL_GPIO_Init+0x304>)
 801179c:	689b      	ldr	r3, [r3, #8]
 801179e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80117a0:	693b      	ldr	r3, [r7, #16]
 80117a2:	43db      	mvns	r3, r3
 80117a4:	69ba      	ldr	r2, [r7, #24]
 80117a6:	4013      	ands	r3, r2
 80117a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	685b      	ldr	r3, [r3, #4]
 80117ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d003      	beq.n	80117be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80117b6:	69ba      	ldr	r2, [r7, #24]
 80117b8:	693b      	ldr	r3, [r7, #16]
 80117ba:	4313      	orrs	r3, r2
 80117bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80117be:	4a1a      	ldr	r2, [pc, #104]	; (8011828 <HAL_GPIO_Init+0x304>)
 80117c0:	69bb      	ldr	r3, [r7, #24]
 80117c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80117c4:	4b18      	ldr	r3, [pc, #96]	; (8011828 <HAL_GPIO_Init+0x304>)
 80117c6:	68db      	ldr	r3, [r3, #12]
 80117c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80117ca:	693b      	ldr	r3, [r7, #16]
 80117cc:	43db      	mvns	r3, r3
 80117ce:	69ba      	ldr	r2, [r7, #24]
 80117d0:	4013      	ands	r3, r2
 80117d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	685b      	ldr	r3, [r3, #4]
 80117d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d003      	beq.n	80117e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80117e0:	69ba      	ldr	r2, [r7, #24]
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	4313      	orrs	r3, r2
 80117e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80117e8:	4a0f      	ldr	r2, [pc, #60]	; (8011828 <HAL_GPIO_Init+0x304>)
 80117ea:	69bb      	ldr	r3, [r7, #24]
 80117ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80117ee:	69fb      	ldr	r3, [r7, #28]
 80117f0:	3301      	adds	r3, #1
 80117f2:	61fb      	str	r3, [r7, #28]
 80117f4:	69fb      	ldr	r3, [r7, #28]
 80117f6:	2b0f      	cmp	r3, #15
 80117f8:	f67f aea2 	bls.w	8011540 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80117fc:	bf00      	nop
 80117fe:	bf00      	nop
 8011800:	3724      	adds	r7, #36	; 0x24
 8011802:	46bd      	mov	sp, r7
 8011804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011808:	4770      	bx	lr
 801180a:	bf00      	nop
 801180c:	40023800 	.word	0x40023800
 8011810:	40013800 	.word	0x40013800
 8011814:	40020000 	.word	0x40020000
 8011818:	40020400 	.word	0x40020400
 801181c:	40020800 	.word	0x40020800
 8011820:	40020c00 	.word	0x40020c00
 8011824:	40021000 	.word	0x40021000
 8011828:	40013c00 	.word	0x40013c00

0801182c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801182c:	b480      	push	{r7}
 801182e:	b087      	sub	sp, #28
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
 8011834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011836:	2300      	movs	r3, #0
 8011838:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801183a:	2300      	movs	r3, #0
 801183c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801183e:	2300      	movs	r3, #0
 8011840:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011842:	2300      	movs	r3, #0
 8011844:	617b      	str	r3, [r7, #20]
 8011846:	e0bb      	b.n	80119c0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011848:	2201      	movs	r2, #1
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	fa02 f303 	lsl.w	r3, r2, r3
 8011850:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8011852:	683a      	ldr	r2, [r7, #0]
 8011854:	693b      	ldr	r3, [r7, #16]
 8011856:	4013      	ands	r3, r2
 8011858:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801185a:	68fa      	ldr	r2, [r7, #12]
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	429a      	cmp	r2, r3
 8011860:	f040 80ab 	bne.w	80119ba <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8011864:	4a5c      	ldr	r2, [pc, #368]	; (80119d8 <HAL_GPIO_DeInit+0x1ac>)
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	089b      	lsrs	r3, r3, #2
 801186a:	3302      	adds	r3, #2
 801186c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011870:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	f003 0303 	and.w	r3, r3, #3
 8011878:	009b      	lsls	r3, r3, #2
 801187a:	220f      	movs	r2, #15
 801187c:	fa02 f303 	lsl.w	r3, r2, r3
 8011880:	68ba      	ldr	r2, [r7, #8]
 8011882:	4013      	ands	r3, r2
 8011884:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	4a54      	ldr	r2, [pc, #336]	; (80119dc <HAL_GPIO_DeInit+0x1b0>)
 801188a:	4293      	cmp	r3, r2
 801188c:	d019      	beq.n	80118c2 <HAL_GPIO_DeInit+0x96>
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	4a53      	ldr	r2, [pc, #332]	; (80119e0 <HAL_GPIO_DeInit+0x1b4>)
 8011892:	4293      	cmp	r3, r2
 8011894:	d013      	beq.n	80118be <HAL_GPIO_DeInit+0x92>
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	4a52      	ldr	r2, [pc, #328]	; (80119e4 <HAL_GPIO_DeInit+0x1b8>)
 801189a:	4293      	cmp	r3, r2
 801189c:	d00d      	beq.n	80118ba <HAL_GPIO_DeInit+0x8e>
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	4a51      	ldr	r2, [pc, #324]	; (80119e8 <HAL_GPIO_DeInit+0x1bc>)
 80118a2:	4293      	cmp	r3, r2
 80118a4:	d007      	beq.n	80118b6 <HAL_GPIO_DeInit+0x8a>
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	4a50      	ldr	r2, [pc, #320]	; (80119ec <HAL_GPIO_DeInit+0x1c0>)
 80118aa:	4293      	cmp	r3, r2
 80118ac:	d101      	bne.n	80118b2 <HAL_GPIO_DeInit+0x86>
 80118ae:	2304      	movs	r3, #4
 80118b0:	e008      	b.n	80118c4 <HAL_GPIO_DeInit+0x98>
 80118b2:	2307      	movs	r3, #7
 80118b4:	e006      	b.n	80118c4 <HAL_GPIO_DeInit+0x98>
 80118b6:	2303      	movs	r3, #3
 80118b8:	e004      	b.n	80118c4 <HAL_GPIO_DeInit+0x98>
 80118ba:	2302      	movs	r3, #2
 80118bc:	e002      	b.n	80118c4 <HAL_GPIO_DeInit+0x98>
 80118be:	2301      	movs	r3, #1
 80118c0:	e000      	b.n	80118c4 <HAL_GPIO_DeInit+0x98>
 80118c2:	2300      	movs	r3, #0
 80118c4:	697a      	ldr	r2, [r7, #20]
 80118c6:	f002 0203 	and.w	r2, r2, #3
 80118ca:	0092      	lsls	r2, r2, #2
 80118cc:	4093      	lsls	r3, r2
 80118ce:	68ba      	ldr	r2, [r7, #8]
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d132      	bne.n	801193a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80118d4:	4b46      	ldr	r3, [pc, #280]	; (80119f0 <HAL_GPIO_DeInit+0x1c4>)
 80118d6:	681a      	ldr	r2, [r3, #0]
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	43db      	mvns	r3, r3
 80118dc:	4944      	ldr	r1, [pc, #272]	; (80119f0 <HAL_GPIO_DeInit+0x1c4>)
 80118de:	4013      	ands	r3, r2
 80118e0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80118e2:	4b43      	ldr	r3, [pc, #268]	; (80119f0 <HAL_GPIO_DeInit+0x1c4>)
 80118e4:	685a      	ldr	r2, [r3, #4]
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	43db      	mvns	r3, r3
 80118ea:	4941      	ldr	r1, [pc, #260]	; (80119f0 <HAL_GPIO_DeInit+0x1c4>)
 80118ec:	4013      	ands	r3, r2
 80118ee:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80118f0:	4b3f      	ldr	r3, [pc, #252]	; (80119f0 <HAL_GPIO_DeInit+0x1c4>)
 80118f2:	689a      	ldr	r2, [r3, #8]
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	43db      	mvns	r3, r3
 80118f8:	493d      	ldr	r1, [pc, #244]	; (80119f0 <HAL_GPIO_DeInit+0x1c4>)
 80118fa:	4013      	ands	r3, r2
 80118fc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80118fe:	4b3c      	ldr	r3, [pc, #240]	; (80119f0 <HAL_GPIO_DeInit+0x1c4>)
 8011900:	68da      	ldr	r2, [r3, #12]
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	43db      	mvns	r3, r3
 8011906:	493a      	ldr	r1, [pc, #232]	; (80119f0 <HAL_GPIO_DeInit+0x1c4>)
 8011908:	4013      	ands	r3, r2
 801190a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 801190c:	697b      	ldr	r3, [r7, #20]
 801190e:	f003 0303 	and.w	r3, r3, #3
 8011912:	009b      	lsls	r3, r3, #2
 8011914:	220f      	movs	r2, #15
 8011916:	fa02 f303 	lsl.w	r3, r2, r3
 801191a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801191c:	4a2e      	ldr	r2, [pc, #184]	; (80119d8 <HAL_GPIO_DeInit+0x1ac>)
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	089b      	lsrs	r3, r3, #2
 8011922:	3302      	adds	r3, #2
 8011924:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	43da      	mvns	r2, r3
 801192c:	482a      	ldr	r0, [pc, #168]	; (80119d8 <HAL_GPIO_DeInit+0x1ac>)
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	089b      	lsrs	r3, r3, #2
 8011932:	400a      	ands	r2, r1
 8011934:	3302      	adds	r3, #2
 8011936:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681a      	ldr	r2, [r3, #0]
 801193e:	697b      	ldr	r3, [r7, #20]
 8011940:	005b      	lsls	r3, r3, #1
 8011942:	2103      	movs	r1, #3
 8011944:	fa01 f303 	lsl.w	r3, r1, r3
 8011948:	43db      	mvns	r3, r3
 801194a:	401a      	ands	r2, r3
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	08da      	lsrs	r2, r3, #3
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	3208      	adds	r2, #8
 8011958:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	f003 0307 	and.w	r3, r3, #7
 8011962:	009b      	lsls	r3, r3, #2
 8011964:	220f      	movs	r2, #15
 8011966:	fa02 f303 	lsl.w	r3, r2, r3
 801196a:	43db      	mvns	r3, r3
 801196c:	697a      	ldr	r2, [r7, #20]
 801196e:	08d2      	lsrs	r2, r2, #3
 8011970:	4019      	ands	r1, r3
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	3208      	adds	r2, #8
 8011976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	68da      	ldr	r2, [r3, #12]
 801197e:	697b      	ldr	r3, [r7, #20]
 8011980:	005b      	lsls	r3, r3, #1
 8011982:	2103      	movs	r1, #3
 8011984:	fa01 f303 	lsl.w	r3, r1, r3
 8011988:	43db      	mvns	r3, r3
 801198a:	401a      	ands	r2, r3
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	685a      	ldr	r2, [r3, #4]
 8011994:	2101      	movs	r1, #1
 8011996:	697b      	ldr	r3, [r7, #20]
 8011998:	fa01 f303 	lsl.w	r3, r1, r3
 801199c:	43db      	mvns	r3, r3
 801199e:	401a      	ands	r2, r3
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	689a      	ldr	r2, [r3, #8]
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	005b      	lsls	r3, r3, #1
 80119ac:	2103      	movs	r1, #3
 80119ae:	fa01 f303 	lsl.w	r3, r1, r3
 80119b2:	43db      	mvns	r3, r3
 80119b4:	401a      	ands	r2, r3
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80119ba:	697b      	ldr	r3, [r7, #20]
 80119bc:	3301      	adds	r3, #1
 80119be:	617b      	str	r3, [r7, #20]
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	2b0f      	cmp	r3, #15
 80119c4:	f67f af40 	bls.w	8011848 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80119c8:	bf00      	nop
 80119ca:	bf00      	nop
 80119cc:	371c      	adds	r7, #28
 80119ce:	46bd      	mov	sp, r7
 80119d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d4:	4770      	bx	lr
 80119d6:	bf00      	nop
 80119d8:	40013800 	.word	0x40013800
 80119dc:	40020000 	.word	0x40020000
 80119e0:	40020400 	.word	0x40020400
 80119e4:	40020800 	.word	0x40020800
 80119e8:	40020c00 	.word	0x40020c00
 80119ec:	40021000 	.word	0x40021000
 80119f0:	40013c00 	.word	0x40013c00

080119f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80119f4:	b480      	push	{r7}
 80119f6:	b085      	sub	sp, #20
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	460b      	mov	r3, r1
 80119fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	691a      	ldr	r2, [r3, #16]
 8011a04:	887b      	ldrh	r3, [r7, #2]
 8011a06:	4013      	ands	r3, r2
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d002      	beq.n	8011a12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	73fb      	strb	r3, [r7, #15]
 8011a10:	e001      	b.n	8011a16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8011a12:	2300      	movs	r3, #0
 8011a14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3714      	adds	r7, #20
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a22:	4770      	bx	lr

08011a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011a24:	b480      	push	{r7}
 8011a26:	b083      	sub	sp, #12
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
 8011a2c:	460b      	mov	r3, r1
 8011a2e:	807b      	strh	r3, [r7, #2]
 8011a30:	4613      	mov	r3, r2
 8011a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011a34:	787b      	ldrb	r3, [r7, #1]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d003      	beq.n	8011a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011a3a:	887a      	ldrh	r2, [r7, #2]
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8011a40:	e003      	b.n	8011a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8011a42:	887b      	ldrh	r3, [r7, #2]
 8011a44:	041a      	lsls	r2, r3, #16
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	619a      	str	r2, [r3, #24]
}
 8011a4a:	bf00      	nop
 8011a4c:	370c      	adds	r7, #12
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a54:	4770      	bx	lr
	...

08011a58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b082      	sub	sp, #8
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	4603      	mov	r3, r0
 8011a60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8011a62:	4b08      	ldr	r3, [pc, #32]	; (8011a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011a64:	695a      	ldr	r2, [r3, #20]
 8011a66:	88fb      	ldrh	r3, [r7, #6]
 8011a68:	4013      	ands	r3, r2
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d006      	beq.n	8011a7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8011a6e:	4a05      	ldr	r2, [pc, #20]	; (8011a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011a70:	88fb      	ldrh	r3, [r7, #6]
 8011a72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8011a74:	88fb      	ldrh	r3, [r7, #6]
 8011a76:	4618      	mov	r0, r3
 8011a78:	f7fc f962 	bl	800dd40 <HAL_GPIO_EXTI_Callback>
  }
}
 8011a7c:	bf00      	nop
 8011a7e:	3708      	adds	r7, #8
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd80      	pop	{r7, pc}
 8011a84:	40013c00 	.word	0x40013c00

08011a88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8011a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a8a:	b08f      	sub	sp, #60	; 0x3c
 8011a8c:	af0a      	add	r7, sp, #40	; 0x28
 8011a8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d101      	bne.n	8011a9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8011a96:	2301      	movs	r3, #1
 8011a98:	e10f      	b.n	8011cba <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d106      	bne.n	8011aba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	2200      	movs	r2, #0
 8011ab0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8011ab4:	6878      	ldr	r0, [r7, #4]
 8011ab6:	f00b f975 	bl	801cda4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	2203      	movs	r2, #3
 8011abe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8011ac2:	68bb      	ldr	r3, [r7, #8]
 8011ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d102      	bne.n	8011ad4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f003 ff28 	bl	801592e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	603b      	str	r3, [r7, #0]
 8011ae4:	687e      	ldr	r6, [r7, #4]
 8011ae6:	466d      	mov	r5, sp
 8011ae8:	f106 0410 	add.w	r4, r6, #16
 8011aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011af4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011af8:	e885 0003 	stmia.w	r5, {r0, r1}
 8011afc:	1d33      	adds	r3, r6, #4
 8011afe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011b00:	6838      	ldr	r0, [r7, #0]
 8011b02:	f003 fdff 	bl	8015704 <USB_CoreInit>
 8011b06:	4603      	mov	r3, r0
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d005      	beq.n	8011b18 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2202      	movs	r2, #2
 8011b10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8011b14:	2301      	movs	r3, #1
 8011b16:	e0d0      	b.n	8011cba <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	2100      	movs	r1, #0
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f003 ff16 	bl	8015950 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011b24:	2300      	movs	r3, #0
 8011b26:	73fb      	strb	r3, [r7, #15]
 8011b28:	e04a      	b.n	8011bc0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8011b2a:	7bfa      	ldrb	r2, [r7, #15]
 8011b2c:	6879      	ldr	r1, [r7, #4]
 8011b2e:	4613      	mov	r3, r2
 8011b30:	00db      	lsls	r3, r3, #3
 8011b32:	1a9b      	subs	r3, r3, r2
 8011b34:	009b      	lsls	r3, r3, #2
 8011b36:	440b      	add	r3, r1
 8011b38:	333d      	adds	r3, #61	; 0x3d
 8011b3a:	2201      	movs	r2, #1
 8011b3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8011b3e:	7bfa      	ldrb	r2, [r7, #15]
 8011b40:	6879      	ldr	r1, [r7, #4]
 8011b42:	4613      	mov	r3, r2
 8011b44:	00db      	lsls	r3, r3, #3
 8011b46:	1a9b      	subs	r3, r3, r2
 8011b48:	009b      	lsls	r3, r3, #2
 8011b4a:	440b      	add	r3, r1
 8011b4c:	333c      	adds	r3, #60	; 0x3c
 8011b4e:	7bfa      	ldrb	r2, [r7, #15]
 8011b50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8011b52:	7bfa      	ldrb	r2, [r7, #15]
 8011b54:	7bfb      	ldrb	r3, [r7, #15]
 8011b56:	b298      	uxth	r0, r3
 8011b58:	6879      	ldr	r1, [r7, #4]
 8011b5a:	4613      	mov	r3, r2
 8011b5c:	00db      	lsls	r3, r3, #3
 8011b5e:	1a9b      	subs	r3, r3, r2
 8011b60:	009b      	lsls	r3, r3, #2
 8011b62:	440b      	add	r3, r1
 8011b64:	3342      	adds	r3, #66	; 0x42
 8011b66:	4602      	mov	r2, r0
 8011b68:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8011b6a:	7bfa      	ldrb	r2, [r7, #15]
 8011b6c:	6879      	ldr	r1, [r7, #4]
 8011b6e:	4613      	mov	r3, r2
 8011b70:	00db      	lsls	r3, r3, #3
 8011b72:	1a9b      	subs	r3, r3, r2
 8011b74:	009b      	lsls	r3, r3, #2
 8011b76:	440b      	add	r3, r1
 8011b78:	333f      	adds	r3, #63	; 0x3f
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8011b7e:	7bfa      	ldrb	r2, [r7, #15]
 8011b80:	6879      	ldr	r1, [r7, #4]
 8011b82:	4613      	mov	r3, r2
 8011b84:	00db      	lsls	r3, r3, #3
 8011b86:	1a9b      	subs	r3, r3, r2
 8011b88:	009b      	lsls	r3, r3, #2
 8011b8a:	440b      	add	r3, r1
 8011b8c:	3344      	adds	r3, #68	; 0x44
 8011b8e:	2200      	movs	r2, #0
 8011b90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8011b92:	7bfa      	ldrb	r2, [r7, #15]
 8011b94:	6879      	ldr	r1, [r7, #4]
 8011b96:	4613      	mov	r3, r2
 8011b98:	00db      	lsls	r3, r3, #3
 8011b9a:	1a9b      	subs	r3, r3, r2
 8011b9c:	009b      	lsls	r3, r3, #2
 8011b9e:	440b      	add	r3, r1
 8011ba0:	3348      	adds	r3, #72	; 0x48
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8011ba6:	7bfa      	ldrb	r2, [r7, #15]
 8011ba8:	6879      	ldr	r1, [r7, #4]
 8011baa:	4613      	mov	r3, r2
 8011bac:	00db      	lsls	r3, r3, #3
 8011bae:	1a9b      	subs	r3, r3, r2
 8011bb0:	009b      	lsls	r3, r3, #2
 8011bb2:	440b      	add	r3, r1
 8011bb4:	3350      	adds	r3, #80	; 0x50
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011bba:	7bfb      	ldrb	r3, [r7, #15]
 8011bbc:	3301      	adds	r3, #1
 8011bbe:	73fb      	strb	r3, [r7, #15]
 8011bc0:	7bfa      	ldrb	r2, [r7, #15]
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	685b      	ldr	r3, [r3, #4]
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d3af      	bcc.n	8011b2a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011bca:	2300      	movs	r3, #0
 8011bcc:	73fb      	strb	r3, [r7, #15]
 8011bce:	e044      	b.n	8011c5a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8011bd0:	7bfa      	ldrb	r2, [r7, #15]
 8011bd2:	6879      	ldr	r1, [r7, #4]
 8011bd4:	4613      	mov	r3, r2
 8011bd6:	00db      	lsls	r3, r3, #3
 8011bd8:	1a9b      	subs	r3, r3, r2
 8011bda:	009b      	lsls	r3, r3, #2
 8011bdc:	440b      	add	r3, r1
 8011bde:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8011be2:	2200      	movs	r2, #0
 8011be4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8011be6:	7bfa      	ldrb	r2, [r7, #15]
 8011be8:	6879      	ldr	r1, [r7, #4]
 8011bea:	4613      	mov	r3, r2
 8011bec:	00db      	lsls	r3, r3, #3
 8011bee:	1a9b      	subs	r3, r3, r2
 8011bf0:	009b      	lsls	r3, r3, #2
 8011bf2:	440b      	add	r3, r1
 8011bf4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8011bf8:	7bfa      	ldrb	r2, [r7, #15]
 8011bfa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8011bfc:	7bfa      	ldrb	r2, [r7, #15]
 8011bfe:	6879      	ldr	r1, [r7, #4]
 8011c00:	4613      	mov	r3, r2
 8011c02:	00db      	lsls	r3, r3, #3
 8011c04:	1a9b      	subs	r3, r3, r2
 8011c06:	009b      	lsls	r3, r3, #2
 8011c08:	440b      	add	r3, r1
 8011c0a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011c0e:	2200      	movs	r2, #0
 8011c10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8011c12:	7bfa      	ldrb	r2, [r7, #15]
 8011c14:	6879      	ldr	r1, [r7, #4]
 8011c16:	4613      	mov	r3, r2
 8011c18:	00db      	lsls	r3, r3, #3
 8011c1a:	1a9b      	subs	r3, r3, r2
 8011c1c:	009b      	lsls	r3, r3, #2
 8011c1e:	440b      	add	r3, r1
 8011c20:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8011c24:	2200      	movs	r2, #0
 8011c26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8011c28:	7bfa      	ldrb	r2, [r7, #15]
 8011c2a:	6879      	ldr	r1, [r7, #4]
 8011c2c:	4613      	mov	r3, r2
 8011c2e:	00db      	lsls	r3, r3, #3
 8011c30:	1a9b      	subs	r3, r3, r2
 8011c32:	009b      	lsls	r3, r3, #2
 8011c34:	440b      	add	r3, r1
 8011c36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8011c3e:	7bfa      	ldrb	r2, [r7, #15]
 8011c40:	6879      	ldr	r1, [r7, #4]
 8011c42:	4613      	mov	r3, r2
 8011c44:	00db      	lsls	r3, r3, #3
 8011c46:	1a9b      	subs	r3, r3, r2
 8011c48:	009b      	lsls	r3, r3, #2
 8011c4a:	440b      	add	r3, r1
 8011c4c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8011c50:	2200      	movs	r2, #0
 8011c52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011c54:	7bfb      	ldrb	r3, [r7, #15]
 8011c56:	3301      	adds	r3, #1
 8011c58:	73fb      	strb	r3, [r7, #15]
 8011c5a:	7bfa      	ldrb	r2, [r7, #15]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d3b5      	bcc.n	8011bd0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	603b      	str	r3, [r7, #0]
 8011c6a:	687e      	ldr	r6, [r7, #4]
 8011c6c:	466d      	mov	r5, sp
 8011c6e:	f106 0410 	add.w	r4, r6, #16
 8011c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011c7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011c7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8011c82:	1d33      	adds	r3, r6, #4
 8011c84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011c86:	6838      	ldr	r0, [r7, #0]
 8011c88:	f003 feae 	bl	80159e8 <USB_DevInit>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d005      	beq.n	8011c9e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	2202      	movs	r2, #2
 8011c96:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	e00d      	b.n	8011cba <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2201      	movs	r2, #1
 8011caa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f004 ff79 	bl	8016baa <USB_DevDisconnect>

  return HAL_OK;
 8011cb8:	2300      	movs	r3, #0
}
 8011cba:	4618      	mov	r0, r3
 8011cbc:	3714      	adds	r7, #20
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011cc2 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8011cc2:	b580      	push	{r7, lr}
 8011cc4:	b082      	sub	sp, #8
 8011cc6:	af00      	add	r7, sp, #0
 8011cc8:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d101      	bne.n	8011cd4 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8011cd0:	2301      	movs	r3, #1
 8011cd2:	e015      	b.n	8011d00 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2203      	movs	r2, #3
 8011cd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f004 fecc 	bl	8016a7e <USB_StopDevice>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d001      	beq.n	8011cf0 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8011cec:	2301      	movs	r3, #1
 8011cee:	e007      	b.n	8011d00 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f00b f8ab 	bl	801ce4c <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  return HAL_OK;
 8011cfe:	2300      	movs	r3, #0
}
 8011d00:	4618      	mov	r0, r3
 8011d02:	3708      	adds	r7, #8
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}

08011d08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b084      	sub	sp, #16
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8011d1c:	2b01      	cmp	r3, #1
 8011d1e:	d101      	bne.n	8011d24 <HAL_PCD_Start+0x1c>
 8011d20:	2302      	movs	r3, #2
 8011d22:	e020      	b.n	8011d66 <HAL_PCD_Start+0x5e>
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2201      	movs	r2, #1
 8011d28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d30:	2b01      	cmp	r3, #1
 8011d32:	d109      	bne.n	8011d48 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8011d38:	2b01      	cmp	r3, #1
 8011d3a:	d005      	beq.n	8011d48 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f003 fddd 	bl	801590c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	4618      	mov	r0, r3
 8011d58:	f004 ff06 	bl	8016b68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2200      	movs	r2, #0
 8011d60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8011d64:	2300      	movs	r3, #0
}
 8011d66:	4618      	mov	r0, r3
 8011d68:	3710      	adds	r7, #16
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}

08011d6e <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8011d6e:	b580      	push	{r7, lr}
 8011d70:	b084      	sub	sp, #16
 8011d72:	af00      	add	r7, sp, #0
 8011d74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8011d82:	2b01      	cmp	r3, #1
 8011d84:	d101      	bne.n	8011d8a <HAL_PCD_Stop+0x1c>
 8011d86:	2302      	movs	r3, #2
 8011d88:	e026      	b.n	8011dd8 <HAL_PCD_Stop+0x6a>
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2201      	movs	r2, #1
 8011d8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	4618      	mov	r0, r3
 8011d98:	f003 fdc9 	bl	801592e <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	4618      	mov	r0, r3
 8011da2:	f004 ff02 	bl	8016baa <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	2110      	movs	r1, #16
 8011dac:	4618      	mov	r0, r3
 8011dae:	f003 ff7f 	bl	8015cb0 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011db6:	2b01      	cmp	r3, #1
 8011db8:	d109      	bne.n	8011dce <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8011dbe:	2b01      	cmp	r3, #1
 8011dc0:	d005      	beq.n	8011dce <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8011dd6:	2300      	movs	r3, #0
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	3710      	adds	r7, #16
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}

08011de0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8011de0:	b590      	push	{r4, r7, lr}
 8011de2:	b08d      	sub	sp, #52	; 0x34
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dee:	6a3b      	ldr	r3, [r7, #32]
 8011df0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	4618      	mov	r0, r3
 8011df8:	f004 ff8b 	bl	8016d12 <USB_GetMode>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	f040 839d 	bne.w	801253e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f004 feef 	bl	8016bec <USB_ReadInterrupts>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	f000 8393 	beq.w	801253c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f004 fee6 	bl	8016bec <USB_ReadInterrupts>
 8011e20:	4603      	mov	r3, r0
 8011e22:	f003 0302 	and.w	r3, r3, #2
 8011e26:	2b02      	cmp	r3, #2
 8011e28:	d107      	bne.n	8011e3a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	695a      	ldr	r2, [r3, #20]
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	f002 0202 	and.w	r2, r2, #2
 8011e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f004 fed4 	bl	8016bec <USB_ReadInterrupts>
 8011e44:	4603      	mov	r3, r0
 8011e46:	f003 0310 	and.w	r3, r3, #16
 8011e4a:	2b10      	cmp	r3, #16
 8011e4c:	d161      	bne.n	8011f12 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	699a      	ldr	r2, [r3, #24]
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	f022 0210 	bic.w	r2, r2, #16
 8011e5c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8011e5e:	6a3b      	ldr	r3, [r7, #32]
 8011e60:	6a1b      	ldr	r3, [r3, #32]
 8011e62:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8011e64:	69bb      	ldr	r3, [r7, #24]
 8011e66:	f003 020f 	and.w	r2, r3, #15
 8011e6a:	4613      	mov	r3, r2
 8011e6c:	00db      	lsls	r3, r3, #3
 8011e6e:	1a9b      	subs	r3, r3, r2
 8011e70:	009b      	lsls	r3, r3, #2
 8011e72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8011e76:	687a      	ldr	r2, [r7, #4]
 8011e78:	4413      	add	r3, r2
 8011e7a:	3304      	adds	r3, #4
 8011e7c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8011e7e:	69bb      	ldr	r3, [r7, #24]
 8011e80:	0c5b      	lsrs	r3, r3, #17
 8011e82:	f003 030f 	and.w	r3, r3, #15
 8011e86:	2b02      	cmp	r3, #2
 8011e88:	d124      	bne.n	8011ed4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8011e8a:	69ba      	ldr	r2, [r7, #24]
 8011e8c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8011e90:	4013      	ands	r3, r2
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d035      	beq.n	8011f02 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8011e96:	697b      	ldr	r3, [r7, #20]
 8011e98:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8011e9a:	69bb      	ldr	r3, [r7, #24]
 8011e9c:	091b      	lsrs	r3, r3, #4
 8011e9e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8011ea0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011ea4:	b29b      	uxth	r3, r3
 8011ea6:	461a      	mov	r2, r3
 8011ea8:	6a38      	ldr	r0, [r7, #32]
 8011eaa:	f004 fcbc 	bl	8016826 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8011eae:	697b      	ldr	r3, [r7, #20]
 8011eb0:	68da      	ldr	r2, [r3, #12]
 8011eb2:	69bb      	ldr	r3, [r7, #24]
 8011eb4:	091b      	lsrs	r3, r3, #4
 8011eb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011eba:	441a      	add	r2, r3
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8011ec0:	697b      	ldr	r3, [r7, #20]
 8011ec2:	699a      	ldr	r2, [r3, #24]
 8011ec4:	69bb      	ldr	r3, [r7, #24]
 8011ec6:	091b      	lsrs	r3, r3, #4
 8011ec8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011ecc:	441a      	add	r2, r3
 8011ece:	697b      	ldr	r3, [r7, #20]
 8011ed0:	619a      	str	r2, [r3, #24]
 8011ed2:	e016      	b.n	8011f02 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8011ed4:	69bb      	ldr	r3, [r7, #24]
 8011ed6:	0c5b      	lsrs	r3, r3, #17
 8011ed8:	f003 030f 	and.w	r3, r3, #15
 8011edc:	2b06      	cmp	r3, #6
 8011ede:	d110      	bne.n	8011f02 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011ee6:	2208      	movs	r2, #8
 8011ee8:	4619      	mov	r1, r3
 8011eea:	6a38      	ldr	r0, [r7, #32]
 8011eec:	f004 fc9b 	bl	8016826 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8011ef0:	697b      	ldr	r3, [r7, #20]
 8011ef2:	699a      	ldr	r2, [r3, #24]
 8011ef4:	69bb      	ldr	r3, [r7, #24]
 8011ef6:	091b      	lsrs	r3, r3, #4
 8011ef8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011efc:	441a      	add	r2, r3
 8011efe:	697b      	ldr	r3, [r7, #20]
 8011f00:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	699a      	ldr	r2, [r3, #24]
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	f042 0210 	orr.w	r2, r2, #16
 8011f10:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	4618      	mov	r0, r3
 8011f18:	f004 fe68 	bl	8016bec <USB_ReadInterrupts>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011f22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8011f26:	d16e      	bne.n	8012006 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	4618      	mov	r0, r3
 8011f32:	f004 fe6e 	bl	8016c12 <USB_ReadDevAllOutEpInterrupt>
 8011f36:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8011f38:	e062      	b.n	8012000 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8011f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f3c:	f003 0301 	and.w	r3, r3, #1
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d057      	beq.n	8011ff4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f4a:	b2d2      	uxtb	r2, r2
 8011f4c:	4611      	mov	r1, r2
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f004 fe93 	bl	8016c7a <USB_ReadDevOutEPInterrupt>
 8011f54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	f003 0301 	and.w	r3, r3, #1
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d00c      	beq.n	8011f7a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8011f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f62:	015a      	lsls	r2, r3, #5
 8011f64:	69fb      	ldr	r3, [r7, #28]
 8011f66:	4413      	add	r3, r2
 8011f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f6c:	461a      	mov	r2, r3
 8011f6e:	2301      	movs	r3, #1
 8011f70:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8011f72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f000 fdb1 	bl	8012adc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	f003 0308 	and.w	r3, r3, #8
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d00c      	beq.n	8011f9e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8011f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f86:	015a      	lsls	r2, r3, #5
 8011f88:	69fb      	ldr	r3, [r7, #28]
 8011f8a:	4413      	add	r3, r2
 8011f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f90:	461a      	mov	r2, r3
 8011f92:	2308      	movs	r3, #8
 8011f94:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8011f96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f000 feab 	bl	8012cf4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8011f9e:	693b      	ldr	r3, [r7, #16]
 8011fa0:	f003 0310 	and.w	r3, r3, #16
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d008      	beq.n	8011fba <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8011fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011faa:	015a      	lsls	r2, r3, #5
 8011fac:	69fb      	ldr	r3, [r7, #28]
 8011fae:	4413      	add	r3, r2
 8011fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fb4:	461a      	mov	r2, r3
 8011fb6:	2310      	movs	r3, #16
 8011fb8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8011fba:	693b      	ldr	r3, [r7, #16]
 8011fbc:	f003 0320 	and.w	r3, r3, #32
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d008      	beq.n	8011fd6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8011fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc6:	015a      	lsls	r2, r3, #5
 8011fc8:	69fb      	ldr	r3, [r7, #28]
 8011fca:	4413      	add	r3, r2
 8011fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fd0:	461a      	mov	r2, r3
 8011fd2:	2320      	movs	r3, #32
 8011fd4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8011fd6:	693b      	ldr	r3, [r7, #16]
 8011fd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d009      	beq.n	8011ff4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8011fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe2:	015a      	lsls	r2, r3, #5
 8011fe4:	69fb      	ldr	r3, [r7, #28]
 8011fe6:	4413      	add	r3, r2
 8011fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fec:	461a      	mov	r2, r3
 8011fee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011ff2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8011ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff6:	3301      	adds	r3, #1
 8011ff8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8011ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ffc:	085b      	lsrs	r3, r3, #1
 8011ffe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8012000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012002:	2b00      	cmp	r3, #0
 8012004:	d199      	bne.n	8011f3a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	4618      	mov	r0, r3
 801200c:	f004 fdee 	bl	8016bec <USB_ReadInterrupts>
 8012010:	4603      	mov	r3, r0
 8012012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012016:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801201a:	f040 80c0 	bne.w	801219e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	4618      	mov	r0, r3
 8012024:	f004 fe0f 	bl	8016c46 <USB_ReadDevAllInEpInterrupt>
 8012028:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 801202a:	2300      	movs	r3, #0
 801202c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 801202e:	e0b2      	b.n	8012196 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8012030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012032:	f003 0301 	and.w	r3, r3, #1
 8012036:	2b00      	cmp	r3, #0
 8012038:	f000 80a7 	beq.w	801218a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012042:	b2d2      	uxtb	r2, r2
 8012044:	4611      	mov	r1, r2
 8012046:	4618      	mov	r0, r3
 8012048:	f004 fe35 	bl	8016cb6 <USB_ReadDevInEPInterrupt>
 801204c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801204e:	693b      	ldr	r3, [r7, #16]
 8012050:	f003 0301 	and.w	r3, r3, #1
 8012054:	2b00      	cmp	r3, #0
 8012056:	d057      	beq.n	8012108 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8012058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205a:	f003 030f 	and.w	r3, r3, #15
 801205e:	2201      	movs	r2, #1
 8012060:	fa02 f303 	lsl.w	r3, r2, r3
 8012064:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8012066:	69fb      	ldr	r3, [r7, #28]
 8012068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801206c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	43db      	mvns	r3, r3
 8012072:	69f9      	ldr	r1, [r7, #28]
 8012074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012078:	4013      	ands	r3, r2
 801207a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 801207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801207e:	015a      	lsls	r2, r3, #5
 8012080:	69fb      	ldr	r3, [r7, #28]
 8012082:	4413      	add	r3, r2
 8012084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012088:	461a      	mov	r2, r3
 801208a:	2301      	movs	r3, #1
 801208c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	691b      	ldr	r3, [r3, #16]
 8012092:	2b01      	cmp	r3, #1
 8012094:	d132      	bne.n	80120fc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8012096:	6879      	ldr	r1, [r7, #4]
 8012098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801209a:	4613      	mov	r3, r2
 801209c:	00db      	lsls	r3, r3, #3
 801209e:	1a9b      	subs	r3, r3, r2
 80120a0:	009b      	lsls	r3, r3, #2
 80120a2:	440b      	add	r3, r1
 80120a4:	3348      	adds	r3, #72	; 0x48
 80120a6:	6819      	ldr	r1, [r3, #0]
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120ac:	4613      	mov	r3, r2
 80120ae:	00db      	lsls	r3, r3, #3
 80120b0:	1a9b      	subs	r3, r3, r2
 80120b2:	009b      	lsls	r3, r3, #2
 80120b4:	4403      	add	r3, r0
 80120b6:	3344      	adds	r3, #68	; 0x44
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	4419      	add	r1, r3
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120c0:	4613      	mov	r3, r2
 80120c2:	00db      	lsls	r3, r3, #3
 80120c4:	1a9b      	subs	r3, r3, r2
 80120c6:	009b      	lsls	r3, r3, #2
 80120c8:	4403      	add	r3, r0
 80120ca:	3348      	adds	r3, #72	; 0x48
 80120cc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80120ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d113      	bne.n	80120fc <HAL_PCD_IRQHandler+0x31c>
 80120d4:	6879      	ldr	r1, [r7, #4]
 80120d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120d8:	4613      	mov	r3, r2
 80120da:	00db      	lsls	r3, r3, #3
 80120dc:	1a9b      	subs	r3, r3, r2
 80120de:	009b      	lsls	r3, r3, #2
 80120e0:	440b      	add	r3, r1
 80120e2:	3350      	adds	r3, #80	; 0x50
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d108      	bne.n	80120fc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	6818      	ldr	r0, [r3, #0]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80120f4:	461a      	mov	r2, r3
 80120f6:	2101      	movs	r1, #1
 80120f8:	f004 fe3c 	bl	8016d74 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80120fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fe:	b2db      	uxtb	r3, r3
 8012100:	4619      	mov	r1, r3
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	f00a feef 	bl	801cee6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8012108:	693b      	ldr	r3, [r7, #16]
 801210a:	f003 0308 	and.w	r3, r3, #8
 801210e:	2b00      	cmp	r3, #0
 8012110:	d008      	beq.n	8012124 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8012112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012114:	015a      	lsls	r2, r3, #5
 8012116:	69fb      	ldr	r3, [r7, #28]
 8012118:	4413      	add	r3, r2
 801211a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801211e:	461a      	mov	r2, r3
 8012120:	2308      	movs	r3, #8
 8012122:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8012124:	693b      	ldr	r3, [r7, #16]
 8012126:	f003 0310 	and.w	r3, r3, #16
 801212a:	2b00      	cmp	r3, #0
 801212c:	d008      	beq.n	8012140 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 801212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012130:	015a      	lsls	r2, r3, #5
 8012132:	69fb      	ldr	r3, [r7, #28]
 8012134:	4413      	add	r3, r2
 8012136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801213a:	461a      	mov	r2, r3
 801213c:	2310      	movs	r3, #16
 801213e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8012140:	693b      	ldr	r3, [r7, #16]
 8012142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012146:	2b00      	cmp	r3, #0
 8012148:	d008      	beq.n	801215c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 801214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801214c:	015a      	lsls	r2, r3, #5
 801214e:	69fb      	ldr	r3, [r7, #28]
 8012150:	4413      	add	r3, r2
 8012152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012156:	461a      	mov	r2, r3
 8012158:	2340      	movs	r3, #64	; 0x40
 801215a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	f003 0302 	and.w	r3, r3, #2
 8012162:	2b00      	cmp	r3, #0
 8012164:	d008      	beq.n	8012178 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8012166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012168:	015a      	lsls	r2, r3, #5
 801216a:	69fb      	ldr	r3, [r7, #28]
 801216c:	4413      	add	r3, r2
 801216e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012172:	461a      	mov	r2, r3
 8012174:	2302      	movs	r3, #2
 8012176:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8012178:	693b      	ldr	r3, [r7, #16]
 801217a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801217e:	2b00      	cmp	r3, #0
 8012180:	d003      	beq.n	801218a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8012182:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f000 fc1b 	bl	80129c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 801218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218c:	3301      	adds	r3, #1
 801218e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8012190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012192:	085b      	lsrs	r3, r3, #1
 8012194:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8012196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012198:	2b00      	cmp	r3, #0
 801219a:	f47f af49 	bne.w	8012030 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	4618      	mov	r0, r3
 80121a4:	f004 fd22 	bl	8016bec <USB_ReadInterrupts>
 80121a8:	4603      	mov	r3, r0
 80121aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80121ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80121b2:	d122      	bne.n	80121fa <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80121b4:	69fb      	ldr	r3, [r7, #28]
 80121b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121ba:	685b      	ldr	r3, [r3, #4]
 80121bc:	69fa      	ldr	r2, [r7, #28]
 80121be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80121c2:	f023 0301 	bic.w	r3, r3, #1
 80121c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80121ce:	2b01      	cmp	r3, #1
 80121d0:	d108      	bne.n	80121e4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2200      	movs	r2, #0
 80121d6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80121da:	2100      	movs	r1, #0
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	f000 fe27 	bl	8012e30 <HAL_PCDEx_LPM_Callback>
 80121e2:	e002      	b.n	80121ea <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f00a feeb 	bl	801cfc0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	695a      	ldr	r2, [r3, #20]
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80121f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	4618      	mov	r0, r3
 8012200:	f004 fcf4 	bl	8016bec <USB_ReadInterrupts>
 8012204:	4603      	mov	r3, r0
 8012206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801220a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801220e:	d112      	bne.n	8012236 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8012210:	69fb      	ldr	r3, [r7, #28]
 8012212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012216:	689b      	ldr	r3, [r3, #8]
 8012218:	f003 0301 	and.w	r3, r3, #1
 801221c:	2b01      	cmp	r3, #1
 801221e:	d102      	bne.n	8012226 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f00a fea7 	bl	801cf74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	695a      	ldr	r2, [r3, #20]
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8012234:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	4618      	mov	r0, r3
 801223c:	f004 fcd6 	bl	8016bec <USB_ReadInterrupts>
 8012240:	4603      	mov	r3, r0
 8012242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801224a:	f040 80c7 	bne.w	80123dc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801224e:	69fb      	ldr	r3, [r7, #28]
 8012250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012254:	685b      	ldr	r3, [r3, #4]
 8012256:	69fa      	ldr	r2, [r7, #28]
 8012258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801225c:	f023 0301 	bic.w	r3, r3, #1
 8012260:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	2110      	movs	r1, #16
 8012268:	4618      	mov	r0, r3
 801226a:	f003 fd21 	bl	8015cb0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801226e:	2300      	movs	r3, #0
 8012270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012272:	e056      	b.n	8012322 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8012274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012276:	015a      	lsls	r2, r3, #5
 8012278:	69fb      	ldr	r3, [r7, #28]
 801227a:	4413      	add	r3, r2
 801227c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012280:	461a      	mov	r2, r3
 8012282:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012286:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801228a:	015a      	lsls	r2, r3, #5
 801228c:	69fb      	ldr	r3, [r7, #28]
 801228e:	4413      	add	r3, r2
 8012290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012298:	0151      	lsls	r1, r2, #5
 801229a:	69fa      	ldr	r2, [r7, #28]
 801229c:	440a      	add	r2, r1
 801229e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80122a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80122a6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80122a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122aa:	015a      	lsls	r2, r3, #5
 80122ac:	69fb      	ldr	r3, [r7, #28]
 80122ae:	4413      	add	r3, r2
 80122b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122b8:	0151      	lsls	r1, r2, #5
 80122ba:	69fa      	ldr	r2, [r7, #28]
 80122bc:	440a      	add	r2, r1
 80122be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80122c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80122c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80122c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ca:	015a      	lsls	r2, r3, #5
 80122cc:	69fb      	ldr	r3, [r7, #28]
 80122ce:	4413      	add	r3, r2
 80122d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122d4:	461a      	mov	r2, r3
 80122d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80122da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80122dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122de:	015a      	lsls	r2, r3, #5
 80122e0:	69fb      	ldr	r3, [r7, #28]
 80122e2:	4413      	add	r3, r2
 80122e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122ec:	0151      	lsls	r1, r2, #5
 80122ee:	69fa      	ldr	r2, [r7, #28]
 80122f0:	440a      	add	r2, r1
 80122f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80122f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80122fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80122fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122fe:	015a      	lsls	r2, r3, #5
 8012300:	69fb      	ldr	r3, [r7, #28]
 8012302:	4413      	add	r3, r2
 8012304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801230c:	0151      	lsls	r1, r2, #5
 801230e:	69fa      	ldr	r2, [r7, #28]
 8012310:	440a      	add	r2, r1
 8012312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012316:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801231a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801231e:	3301      	adds	r3, #1
 8012320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012328:	429a      	cmp	r2, r3
 801232a:	d3a3      	bcc.n	8012274 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801232c:	69fb      	ldr	r3, [r7, #28]
 801232e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012332:	69db      	ldr	r3, [r3, #28]
 8012334:	69fa      	ldr	r2, [r7, #28]
 8012336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801233a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 801233e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012344:	2b00      	cmp	r3, #0
 8012346:	d016      	beq.n	8012376 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8012348:	69fb      	ldr	r3, [r7, #28]
 801234a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801234e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012352:	69fa      	ldr	r2, [r7, #28]
 8012354:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012358:	f043 030b 	orr.w	r3, r3, #11
 801235c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8012360:	69fb      	ldr	r3, [r7, #28]
 8012362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012368:	69fa      	ldr	r2, [r7, #28]
 801236a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801236e:	f043 030b 	orr.w	r3, r3, #11
 8012372:	6453      	str	r3, [r2, #68]	; 0x44
 8012374:	e015      	b.n	80123a2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8012376:	69fb      	ldr	r3, [r7, #28]
 8012378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801237c:	695b      	ldr	r3, [r3, #20]
 801237e:	69fa      	ldr	r2, [r7, #28]
 8012380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012384:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012388:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 801238c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 801238e:	69fb      	ldr	r3, [r7, #28]
 8012390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012394:	691b      	ldr	r3, [r3, #16]
 8012396:	69fa      	ldr	r2, [r7, #28]
 8012398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801239c:	f043 030b 	orr.w	r3, r3, #11
 80123a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80123a2:	69fb      	ldr	r3, [r7, #28]
 80123a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	69fa      	ldr	r2, [r7, #28]
 80123ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80123b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80123b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6818      	ldr	r0, [r3, #0]
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	691b      	ldr	r3, [r3, #16]
 80123be:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80123c6:	461a      	mov	r2, r3
 80123c8:	f004 fcd4 	bl	8016d74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	695a      	ldr	r2, [r3, #20]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80123da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	4618      	mov	r0, r3
 80123e2:	f004 fc03 	bl	8016bec <USB_ReadInterrupts>
 80123e6:	4603      	mov	r3, r0
 80123e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80123ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80123f0:	d124      	bne.n	801243c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	4618      	mov	r0, r3
 80123f8:	f004 fc99 	bl	8016d2e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	4618      	mov	r0, r3
 8012402:	f003 fcb2 	bl	8015d6a <USB_GetDevSpeed>
 8012406:	4603      	mov	r3, r0
 8012408:	461a      	mov	r2, r3
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681c      	ldr	r4, [r3, #0]
 8012412:	f001 f985 	bl	8013720 <HAL_RCC_GetHCLKFreq>
 8012416:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801241c:	b2db      	uxtb	r3, r3
 801241e:	461a      	mov	r2, r3
 8012420:	4620      	mov	r0, r4
 8012422:	f003 f9d1 	bl	80157c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8012426:	6878      	ldr	r0, [r7, #4]
 8012428:	f00a fd85 	bl	801cf36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	695a      	ldr	r2, [r3, #20]
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801243a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	4618      	mov	r0, r3
 8012442:	f004 fbd3 	bl	8016bec <USB_ReadInterrupts>
 8012446:	4603      	mov	r3, r0
 8012448:	f003 0308 	and.w	r3, r3, #8
 801244c:	2b08      	cmp	r3, #8
 801244e:	d10a      	bne.n	8012466 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f00a fd62 	bl	801cf1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	695a      	ldr	r2, [r3, #20]
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	f002 0208 	and.w	r2, r2, #8
 8012464:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	4618      	mov	r0, r3
 801246c:	f004 fbbe 	bl	8016bec <USB_ReadInterrupts>
 8012470:	4603      	mov	r3, r0
 8012472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801247a:	d10f      	bne.n	801249c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801247c:	2300      	movs	r3, #0
 801247e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8012480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012482:	b2db      	uxtb	r3, r3
 8012484:	4619      	mov	r1, r3
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f00a fdba 	bl	801d000 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	695a      	ldr	r2, [r3, #20]
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 801249a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	4618      	mov	r0, r3
 80124a2:	f004 fba3 	bl	8016bec <USB_ReadInterrupts>
 80124a6:	4603      	mov	r3, r0
 80124a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80124ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80124b0:	d10f      	bne.n	80124d2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80124b2:	2300      	movs	r3, #0
 80124b4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80124b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b8:	b2db      	uxtb	r3, r3
 80124ba:	4619      	mov	r1, r3
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f00a fd8d 	bl	801cfdc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	695a      	ldr	r2, [r3, #20]
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80124d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	4618      	mov	r0, r3
 80124d8:	f004 fb88 	bl	8016bec <USB_ReadInterrupts>
 80124dc:	4603      	mov	r3, r0
 80124de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80124e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80124e6:	d10a      	bne.n	80124fe <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	f00a fd9b 	bl	801d024 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	695a      	ldr	r2, [r3, #20]
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80124fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	4618      	mov	r0, r3
 8012504:	f004 fb72 	bl	8016bec <USB_ReadInterrupts>
 8012508:	4603      	mov	r3, r0
 801250a:	f003 0304 	and.w	r3, r3, #4
 801250e:	2b04      	cmp	r3, #4
 8012510:	d115      	bne.n	801253e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	685b      	ldr	r3, [r3, #4]
 8012518:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801251a:	69bb      	ldr	r3, [r7, #24]
 801251c:	f003 0304 	and.w	r3, r3, #4
 8012520:	2b00      	cmp	r3, #0
 8012522:	d002      	beq.n	801252a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f00a fd8b 	bl	801d040 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	6859      	ldr	r1, [r3, #4]
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	69ba      	ldr	r2, [r7, #24]
 8012536:	430a      	orrs	r2, r1
 8012538:	605a      	str	r2, [r3, #4]
 801253a:	e000      	b.n	801253e <HAL_PCD_IRQHandler+0x75e>
      return;
 801253c:	bf00      	nop
    }
  }
}
 801253e:	3734      	adds	r7, #52	; 0x34
 8012540:	46bd      	mov	sp, r7
 8012542:	bd90      	pop	{r4, r7, pc}

08012544 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b082      	sub	sp, #8
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	460b      	mov	r3, r1
 801254e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8012556:	2b01      	cmp	r3, #1
 8012558:	d101      	bne.n	801255e <HAL_PCD_SetAddress+0x1a>
 801255a:	2302      	movs	r3, #2
 801255c:	e013      	b.n	8012586 <HAL_PCD_SetAddress+0x42>
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	2201      	movs	r2, #1
 8012562:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	78fa      	ldrb	r2, [r7, #3]
 801256a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	78fa      	ldrb	r2, [r7, #3]
 8012574:	4611      	mov	r1, r2
 8012576:	4618      	mov	r0, r3
 8012578:	f004 fad0 	bl	8016b1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	2200      	movs	r2, #0
 8012580:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8012584:	2300      	movs	r3, #0
}
 8012586:	4618      	mov	r0, r3
 8012588:	3708      	adds	r7, #8
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}

0801258e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801258e:	b580      	push	{r7, lr}
 8012590:	b084      	sub	sp, #16
 8012592:	af00      	add	r7, sp, #0
 8012594:	6078      	str	r0, [r7, #4]
 8012596:	4608      	mov	r0, r1
 8012598:	4611      	mov	r1, r2
 801259a:	461a      	mov	r2, r3
 801259c:	4603      	mov	r3, r0
 801259e:	70fb      	strb	r3, [r7, #3]
 80125a0:	460b      	mov	r3, r1
 80125a2:	803b      	strh	r3, [r7, #0]
 80125a4:	4613      	mov	r3, r2
 80125a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80125a8:	2300      	movs	r3, #0
 80125aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80125ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	da0f      	bge.n	80125d4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80125b4:	78fb      	ldrb	r3, [r7, #3]
 80125b6:	f003 020f 	and.w	r2, r3, #15
 80125ba:	4613      	mov	r3, r2
 80125bc:	00db      	lsls	r3, r3, #3
 80125be:	1a9b      	subs	r3, r3, r2
 80125c0:	009b      	lsls	r3, r3, #2
 80125c2:	3338      	adds	r3, #56	; 0x38
 80125c4:	687a      	ldr	r2, [r7, #4]
 80125c6:	4413      	add	r3, r2
 80125c8:	3304      	adds	r3, #4
 80125ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	2201      	movs	r2, #1
 80125d0:	705a      	strb	r2, [r3, #1]
 80125d2:	e00f      	b.n	80125f4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80125d4:	78fb      	ldrb	r3, [r7, #3]
 80125d6:	f003 020f 	and.w	r2, r3, #15
 80125da:	4613      	mov	r3, r2
 80125dc:	00db      	lsls	r3, r3, #3
 80125de:	1a9b      	subs	r3, r3, r2
 80125e0:	009b      	lsls	r3, r3, #2
 80125e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80125e6:	687a      	ldr	r2, [r7, #4]
 80125e8:	4413      	add	r3, r2
 80125ea:	3304      	adds	r3, #4
 80125ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	2200      	movs	r2, #0
 80125f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80125f4:	78fb      	ldrb	r3, [r7, #3]
 80125f6:	f003 030f 	and.w	r3, r3, #15
 80125fa:	b2da      	uxtb	r2, r3
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8012600:	883a      	ldrh	r2, [r7, #0]
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	78ba      	ldrb	r2, [r7, #2]
 801260a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	785b      	ldrb	r3, [r3, #1]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d004      	beq.n	801261e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	781b      	ldrb	r3, [r3, #0]
 8012618:	b29a      	uxth	r2, r3
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801261e:	78bb      	ldrb	r3, [r7, #2]
 8012620:	2b02      	cmp	r3, #2
 8012622:	d102      	bne.n	801262a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	2200      	movs	r2, #0
 8012628:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8012630:	2b01      	cmp	r3, #1
 8012632:	d101      	bne.n	8012638 <HAL_PCD_EP_Open+0xaa>
 8012634:	2302      	movs	r3, #2
 8012636:	e00e      	b.n	8012656 <HAL_PCD_EP_Open+0xc8>
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2201      	movs	r2, #1
 801263c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	68f9      	ldr	r1, [r7, #12]
 8012646:	4618      	mov	r0, r3
 8012648:	f003 fbb4 	bl	8015db4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2200      	movs	r2, #0
 8012650:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8012654:	7afb      	ldrb	r3, [r7, #11]
}
 8012656:	4618      	mov	r0, r3
 8012658:	3710      	adds	r7, #16
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}

0801265e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801265e:	b580      	push	{r7, lr}
 8012660:	b084      	sub	sp, #16
 8012662:	af00      	add	r7, sp, #0
 8012664:	6078      	str	r0, [r7, #4]
 8012666:	460b      	mov	r3, r1
 8012668:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801266a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801266e:	2b00      	cmp	r3, #0
 8012670:	da0f      	bge.n	8012692 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012672:	78fb      	ldrb	r3, [r7, #3]
 8012674:	f003 020f 	and.w	r2, r3, #15
 8012678:	4613      	mov	r3, r2
 801267a:	00db      	lsls	r3, r3, #3
 801267c:	1a9b      	subs	r3, r3, r2
 801267e:	009b      	lsls	r3, r3, #2
 8012680:	3338      	adds	r3, #56	; 0x38
 8012682:	687a      	ldr	r2, [r7, #4]
 8012684:	4413      	add	r3, r2
 8012686:	3304      	adds	r3, #4
 8012688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	2201      	movs	r2, #1
 801268e:	705a      	strb	r2, [r3, #1]
 8012690:	e00f      	b.n	80126b2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012692:	78fb      	ldrb	r3, [r7, #3]
 8012694:	f003 020f 	and.w	r2, r3, #15
 8012698:	4613      	mov	r3, r2
 801269a:	00db      	lsls	r3, r3, #3
 801269c:	1a9b      	subs	r3, r3, r2
 801269e:	009b      	lsls	r3, r3, #2
 80126a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80126a4:	687a      	ldr	r2, [r7, #4]
 80126a6:	4413      	add	r3, r2
 80126a8:	3304      	adds	r3, #4
 80126aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	2200      	movs	r2, #0
 80126b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80126b2:	78fb      	ldrb	r3, [r7, #3]
 80126b4:	f003 030f 	and.w	r3, r3, #15
 80126b8:	b2da      	uxtb	r2, r3
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80126c4:	2b01      	cmp	r3, #1
 80126c6:	d101      	bne.n	80126cc <HAL_PCD_EP_Close+0x6e>
 80126c8:	2302      	movs	r3, #2
 80126ca:	e00e      	b.n	80126ea <HAL_PCD_EP_Close+0x8c>
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2201      	movs	r2, #1
 80126d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	68f9      	ldr	r1, [r7, #12]
 80126da:	4618      	mov	r0, r3
 80126dc:	f003 fbf2 	bl	8015ec4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2200      	movs	r2, #0
 80126e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80126e8:	2300      	movs	r3, #0
}
 80126ea:	4618      	mov	r0, r3
 80126ec:	3710      	adds	r7, #16
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}

080126f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80126f2:	b580      	push	{r7, lr}
 80126f4:	b086      	sub	sp, #24
 80126f6:	af00      	add	r7, sp, #0
 80126f8:	60f8      	str	r0, [r7, #12]
 80126fa:	607a      	str	r2, [r7, #4]
 80126fc:	603b      	str	r3, [r7, #0]
 80126fe:	460b      	mov	r3, r1
 8012700:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012702:	7afb      	ldrb	r3, [r7, #11]
 8012704:	f003 020f 	and.w	r2, r3, #15
 8012708:	4613      	mov	r3, r2
 801270a:	00db      	lsls	r3, r3, #3
 801270c:	1a9b      	subs	r3, r3, r2
 801270e:	009b      	lsls	r3, r3, #2
 8012710:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8012714:	68fa      	ldr	r2, [r7, #12]
 8012716:	4413      	add	r3, r2
 8012718:	3304      	adds	r3, #4
 801271a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801271c:	697b      	ldr	r3, [r7, #20]
 801271e:	687a      	ldr	r2, [r7, #4]
 8012720:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8012722:	697b      	ldr	r3, [r7, #20]
 8012724:	683a      	ldr	r2, [r7, #0]
 8012726:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8012728:	697b      	ldr	r3, [r7, #20]
 801272a:	2200      	movs	r2, #0
 801272c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 801272e:	697b      	ldr	r3, [r7, #20]
 8012730:	2200      	movs	r2, #0
 8012732:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012734:	7afb      	ldrb	r3, [r7, #11]
 8012736:	f003 030f 	and.w	r3, r3, #15
 801273a:	b2da      	uxtb	r2, r3
 801273c:	697b      	ldr	r3, [r7, #20]
 801273e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	691b      	ldr	r3, [r3, #16]
 8012744:	2b01      	cmp	r3, #1
 8012746:	d102      	bne.n	801274e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8012748:	687a      	ldr	r2, [r7, #4]
 801274a:	697b      	ldr	r3, [r7, #20]
 801274c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801274e:	7afb      	ldrb	r3, [r7, #11]
 8012750:	f003 030f 	and.w	r3, r3, #15
 8012754:	2b00      	cmp	r3, #0
 8012756:	d109      	bne.n	801276c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	6818      	ldr	r0, [r3, #0]
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	691b      	ldr	r3, [r3, #16]
 8012760:	b2db      	uxtb	r3, r3
 8012762:	461a      	mov	r2, r3
 8012764:	6979      	ldr	r1, [r7, #20]
 8012766:	f003 fecd 	bl	8016504 <USB_EP0StartXfer>
 801276a:	e008      	b.n	801277e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	6818      	ldr	r0, [r3, #0]
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	691b      	ldr	r3, [r3, #16]
 8012774:	b2db      	uxtb	r3, r3
 8012776:	461a      	mov	r2, r3
 8012778:	6979      	ldr	r1, [r7, #20]
 801277a:	f003 fc7f 	bl	801607c <USB_EPStartXfer>
  }

  return HAL_OK;
 801277e:	2300      	movs	r3, #0
}
 8012780:	4618      	mov	r0, r3
 8012782:	3718      	adds	r7, #24
 8012784:	46bd      	mov	sp, r7
 8012786:	bd80      	pop	{r7, pc}

08012788 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012788:	b480      	push	{r7}
 801278a:	b083      	sub	sp, #12
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
 8012790:	460b      	mov	r3, r1
 8012792:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8012794:	78fb      	ldrb	r3, [r7, #3]
 8012796:	f003 020f 	and.w	r2, r3, #15
 801279a:	6879      	ldr	r1, [r7, #4]
 801279c:	4613      	mov	r3, r2
 801279e:	00db      	lsls	r3, r3, #3
 80127a0:	1a9b      	subs	r3, r3, r2
 80127a2:	009b      	lsls	r3, r3, #2
 80127a4:	440b      	add	r3, r1
 80127a6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80127aa:	681b      	ldr	r3, [r3, #0]
}
 80127ac:	4618      	mov	r0, r3
 80127ae:	370c      	adds	r7, #12
 80127b0:	46bd      	mov	sp, r7
 80127b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b6:	4770      	bx	lr

080127b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b086      	sub	sp, #24
 80127bc:	af00      	add	r7, sp, #0
 80127be:	60f8      	str	r0, [r7, #12]
 80127c0:	607a      	str	r2, [r7, #4]
 80127c2:	603b      	str	r3, [r7, #0]
 80127c4:	460b      	mov	r3, r1
 80127c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80127c8:	7afb      	ldrb	r3, [r7, #11]
 80127ca:	f003 020f 	and.w	r2, r3, #15
 80127ce:	4613      	mov	r3, r2
 80127d0:	00db      	lsls	r3, r3, #3
 80127d2:	1a9b      	subs	r3, r3, r2
 80127d4:	009b      	lsls	r3, r3, #2
 80127d6:	3338      	adds	r3, #56	; 0x38
 80127d8:	68fa      	ldr	r2, [r7, #12]
 80127da:	4413      	add	r3, r2
 80127dc:	3304      	adds	r3, #4
 80127de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80127e0:	697b      	ldr	r3, [r7, #20]
 80127e2:	687a      	ldr	r2, [r7, #4]
 80127e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80127e6:	697b      	ldr	r3, [r7, #20]
 80127e8:	683a      	ldr	r2, [r7, #0]
 80127ea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	2200      	movs	r2, #0
 80127f0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80127f2:	697b      	ldr	r3, [r7, #20]
 80127f4:	2201      	movs	r2, #1
 80127f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80127f8:	7afb      	ldrb	r3, [r7, #11]
 80127fa:	f003 030f 	and.w	r3, r3, #15
 80127fe:	b2da      	uxtb	r2, r3
 8012800:	697b      	ldr	r3, [r7, #20]
 8012802:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	691b      	ldr	r3, [r3, #16]
 8012808:	2b01      	cmp	r3, #1
 801280a:	d102      	bne.n	8012812 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801280c:	687a      	ldr	r2, [r7, #4]
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8012812:	7afb      	ldrb	r3, [r7, #11]
 8012814:	f003 030f 	and.w	r3, r3, #15
 8012818:	2b00      	cmp	r3, #0
 801281a:	d109      	bne.n	8012830 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	6818      	ldr	r0, [r3, #0]
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	691b      	ldr	r3, [r3, #16]
 8012824:	b2db      	uxtb	r3, r3
 8012826:	461a      	mov	r2, r3
 8012828:	6979      	ldr	r1, [r7, #20]
 801282a:	f003 fe6b 	bl	8016504 <USB_EP0StartXfer>
 801282e:	e008      	b.n	8012842 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	6818      	ldr	r0, [r3, #0]
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	691b      	ldr	r3, [r3, #16]
 8012838:	b2db      	uxtb	r3, r3
 801283a:	461a      	mov	r2, r3
 801283c:	6979      	ldr	r1, [r7, #20]
 801283e:	f003 fc1d 	bl	801607c <USB_EPStartXfer>
  }

  return HAL_OK;
 8012842:	2300      	movs	r3, #0
}
 8012844:	4618      	mov	r0, r3
 8012846:	3718      	adds	r7, #24
 8012848:	46bd      	mov	sp, r7
 801284a:	bd80      	pop	{r7, pc}

0801284c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b084      	sub	sp, #16
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	460b      	mov	r3, r1
 8012856:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8012858:	78fb      	ldrb	r3, [r7, #3]
 801285a:	f003 020f 	and.w	r2, r3, #15
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	685b      	ldr	r3, [r3, #4]
 8012862:	429a      	cmp	r2, r3
 8012864:	d901      	bls.n	801286a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8012866:	2301      	movs	r3, #1
 8012868:	e050      	b.n	801290c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801286a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801286e:	2b00      	cmp	r3, #0
 8012870:	da0f      	bge.n	8012892 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012872:	78fb      	ldrb	r3, [r7, #3]
 8012874:	f003 020f 	and.w	r2, r3, #15
 8012878:	4613      	mov	r3, r2
 801287a:	00db      	lsls	r3, r3, #3
 801287c:	1a9b      	subs	r3, r3, r2
 801287e:	009b      	lsls	r3, r3, #2
 8012880:	3338      	adds	r3, #56	; 0x38
 8012882:	687a      	ldr	r2, [r7, #4]
 8012884:	4413      	add	r3, r2
 8012886:	3304      	adds	r3, #4
 8012888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	2201      	movs	r2, #1
 801288e:	705a      	strb	r2, [r3, #1]
 8012890:	e00d      	b.n	80128ae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8012892:	78fa      	ldrb	r2, [r7, #3]
 8012894:	4613      	mov	r3, r2
 8012896:	00db      	lsls	r3, r3, #3
 8012898:	1a9b      	subs	r3, r3, r2
 801289a:	009b      	lsls	r3, r3, #2
 801289c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80128a0:	687a      	ldr	r2, [r7, #4]
 80128a2:	4413      	add	r3, r2
 80128a4:	3304      	adds	r3, #4
 80128a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	2200      	movs	r2, #0
 80128ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	2201      	movs	r2, #1
 80128b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80128b4:	78fb      	ldrb	r3, [r7, #3]
 80128b6:	f003 030f 	and.w	r3, r3, #15
 80128ba:	b2da      	uxtb	r2, r3
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80128c6:	2b01      	cmp	r3, #1
 80128c8:	d101      	bne.n	80128ce <HAL_PCD_EP_SetStall+0x82>
 80128ca:	2302      	movs	r3, #2
 80128cc:	e01e      	b.n	801290c <HAL_PCD_EP_SetStall+0xc0>
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	2201      	movs	r2, #1
 80128d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	68f9      	ldr	r1, [r7, #12]
 80128dc:	4618      	mov	r0, r3
 80128de:	f003 fffa 	bl	80168d6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80128e2:	78fb      	ldrb	r3, [r7, #3]
 80128e4:	f003 030f 	and.w	r3, r3, #15
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d10a      	bne.n	8012902 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	6818      	ldr	r0, [r3, #0]
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	691b      	ldr	r3, [r3, #16]
 80128f4:	b2d9      	uxtb	r1, r3
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80128fc:	461a      	mov	r2, r3
 80128fe:	f004 fa39 	bl	8016d74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	2200      	movs	r2, #0
 8012906:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 801290a:	2300      	movs	r3, #0
}
 801290c:	4618      	mov	r0, r3
 801290e:	3710      	adds	r7, #16
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}

08012914 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b084      	sub	sp, #16
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
 801291c:	460b      	mov	r3, r1
 801291e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8012920:	78fb      	ldrb	r3, [r7, #3]
 8012922:	f003 020f 	and.w	r2, r3, #15
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	685b      	ldr	r3, [r3, #4]
 801292a:	429a      	cmp	r2, r3
 801292c:	d901      	bls.n	8012932 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801292e:	2301      	movs	r3, #1
 8012930:	e042      	b.n	80129b8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012936:	2b00      	cmp	r3, #0
 8012938:	da0f      	bge.n	801295a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801293a:	78fb      	ldrb	r3, [r7, #3]
 801293c:	f003 020f 	and.w	r2, r3, #15
 8012940:	4613      	mov	r3, r2
 8012942:	00db      	lsls	r3, r3, #3
 8012944:	1a9b      	subs	r3, r3, r2
 8012946:	009b      	lsls	r3, r3, #2
 8012948:	3338      	adds	r3, #56	; 0x38
 801294a:	687a      	ldr	r2, [r7, #4]
 801294c:	4413      	add	r3, r2
 801294e:	3304      	adds	r3, #4
 8012950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	2201      	movs	r2, #1
 8012956:	705a      	strb	r2, [r3, #1]
 8012958:	e00f      	b.n	801297a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801295a:	78fb      	ldrb	r3, [r7, #3]
 801295c:	f003 020f 	and.w	r2, r3, #15
 8012960:	4613      	mov	r3, r2
 8012962:	00db      	lsls	r3, r3, #3
 8012964:	1a9b      	subs	r3, r3, r2
 8012966:	009b      	lsls	r3, r3, #2
 8012968:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801296c:	687a      	ldr	r2, [r7, #4]
 801296e:	4413      	add	r3, r2
 8012970:	3304      	adds	r3, #4
 8012972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	2200      	movs	r2, #0
 8012978:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	2200      	movs	r2, #0
 801297e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012980:	78fb      	ldrb	r3, [r7, #3]
 8012982:	f003 030f 	and.w	r3, r3, #15
 8012986:	b2da      	uxtb	r2, r3
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8012992:	2b01      	cmp	r3, #1
 8012994:	d101      	bne.n	801299a <HAL_PCD_EP_ClrStall+0x86>
 8012996:	2302      	movs	r3, #2
 8012998:	e00e      	b.n	80129b8 <HAL_PCD_EP_ClrStall+0xa4>
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	2201      	movs	r2, #1
 801299e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	68f9      	ldr	r1, [r7, #12]
 80129a8:	4618      	mov	r0, r3
 80129aa:	f004 f802 	bl	80169b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	2200      	movs	r2, #0
 80129b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80129b6:	2300      	movs	r3, #0
}
 80129b8:	4618      	mov	r0, r3
 80129ba:	3710      	adds	r7, #16
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}

080129c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b08a      	sub	sp, #40	; 0x28
 80129c4:	af02      	add	r7, sp, #8
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80129d0:	697b      	ldr	r3, [r7, #20]
 80129d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80129d4:	683a      	ldr	r2, [r7, #0]
 80129d6:	4613      	mov	r3, r2
 80129d8:	00db      	lsls	r3, r3, #3
 80129da:	1a9b      	subs	r3, r3, r2
 80129dc:	009b      	lsls	r3, r3, #2
 80129de:	3338      	adds	r3, #56	; 0x38
 80129e0:	687a      	ldr	r2, [r7, #4]
 80129e2:	4413      	add	r3, r2
 80129e4:	3304      	adds	r3, #4
 80129e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	699a      	ldr	r2, [r3, #24]
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	695b      	ldr	r3, [r3, #20]
 80129f0:	429a      	cmp	r2, r3
 80129f2:	d901      	bls.n	80129f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80129f4:	2301      	movs	r3, #1
 80129f6:	e06c      	b.n	8012ad2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	695a      	ldr	r2, [r3, #20]
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	699b      	ldr	r3, [r3, #24]
 8012a00:	1ad3      	subs	r3, r2, r3
 8012a02:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	689b      	ldr	r3, [r3, #8]
 8012a08:	69fa      	ldr	r2, [r7, #28]
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	d902      	bls.n	8012a14 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	689b      	ldr	r3, [r3, #8]
 8012a12:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8012a14:	69fb      	ldr	r3, [r7, #28]
 8012a16:	3303      	adds	r3, #3
 8012a18:	089b      	lsrs	r3, r3, #2
 8012a1a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8012a1c:	e02b      	b.n	8012a76 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	695a      	ldr	r2, [r3, #20]
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	699b      	ldr	r3, [r3, #24]
 8012a26:	1ad3      	subs	r3, r2, r3
 8012a28:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	689b      	ldr	r3, [r3, #8]
 8012a2e:	69fa      	ldr	r2, [r7, #28]
 8012a30:	429a      	cmp	r2, r3
 8012a32:	d902      	bls.n	8012a3a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	689b      	ldr	r3, [r3, #8]
 8012a38:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8012a3a:	69fb      	ldr	r3, [r7, #28]
 8012a3c:	3303      	adds	r3, #3
 8012a3e:	089b      	lsrs	r3, r3, #2
 8012a40:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	68d9      	ldr	r1, [r3, #12]
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	b2da      	uxtb	r2, r3
 8012a4a:	69fb      	ldr	r3, [r7, #28]
 8012a4c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8012a52:	b2db      	uxtb	r3, r3
 8012a54:	9300      	str	r3, [sp, #0]
 8012a56:	4603      	mov	r3, r0
 8012a58:	6978      	ldr	r0, [r7, #20]
 8012a5a:	f003 fea6 	bl	80167aa <USB_WritePacket>

    ep->xfer_buff  += len;
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	68da      	ldr	r2, [r3, #12]
 8012a62:	69fb      	ldr	r3, [r7, #28]
 8012a64:	441a      	add	r2, r3
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	699a      	ldr	r2, [r3, #24]
 8012a6e:	69fb      	ldr	r3, [r7, #28]
 8012a70:	441a      	add	r2, r3
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	015a      	lsls	r2, r3, #5
 8012a7a:	693b      	ldr	r3, [r7, #16]
 8012a7c:	4413      	add	r3, r2
 8012a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a82:	699b      	ldr	r3, [r3, #24]
 8012a84:	b29b      	uxth	r3, r3
 8012a86:	69ba      	ldr	r2, [r7, #24]
 8012a88:	429a      	cmp	r2, r3
 8012a8a:	d809      	bhi.n	8012aa0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	699a      	ldr	r2, [r3, #24]
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8012a94:	429a      	cmp	r2, r3
 8012a96:	d203      	bcs.n	8012aa0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	695b      	ldr	r3, [r3, #20]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d1be      	bne.n	8012a1e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	695a      	ldr	r2, [r3, #20]
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	699b      	ldr	r3, [r3, #24]
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d811      	bhi.n	8012ad0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	f003 030f 	and.w	r3, r3, #15
 8012ab2:	2201      	movs	r2, #1
 8012ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8012ab8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8012aba:	693b      	ldr	r3, [r7, #16]
 8012abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012ac2:	68bb      	ldr	r3, [r7, #8]
 8012ac4:	43db      	mvns	r3, r3
 8012ac6:	6939      	ldr	r1, [r7, #16]
 8012ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012acc:	4013      	ands	r3, r2
 8012ace:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8012ad0:	2300      	movs	r3, #0
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	3720      	adds	r7, #32
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}
	...

08012adc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b086      	sub	sp, #24
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
 8012ae4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	333c      	adds	r3, #60	; 0x3c
 8012af4:	3304      	adds	r3, #4
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	015a      	lsls	r2, r3, #5
 8012afe:	693b      	ldr	r3, [r7, #16]
 8012b00:	4413      	add	r3, r2
 8012b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b06:	689b      	ldr	r3, [r3, #8]
 8012b08:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	691b      	ldr	r3, [r3, #16]
 8012b0e:	2b01      	cmp	r3, #1
 8012b10:	f040 80a0 	bne.w	8012c54 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8012b14:	68bb      	ldr	r3, [r7, #8]
 8012b16:	f003 0308 	and.w	r3, r3, #8
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d015      	beq.n	8012b4a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	4a72      	ldr	r2, [pc, #456]	; (8012cec <PCD_EP_OutXfrComplete_int+0x210>)
 8012b22:	4293      	cmp	r3, r2
 8012b24:	f240 80dd 	bls.w	8012ce2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	f000 80d7 	beq.w	8012ce2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8012b34:	683b      	ldr	r3, [r7, #0]
 8012b36:	015a      	lsls	r2, r3, #5
 8012b38:	693b      	ldr	r3, [r7, #16]
 8012b3a:	4413      	add	r3, r2
 8012b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b40:	461a      	mov	r2, r3
 8012b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012b46:	6093      	str	r3, [r2, #8]
 8012b48:	e0cb      	b.n	8012ce2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8012b4a:	68bb      	ldr	r3, [r7, #8]
 8012b4c:	f003 0320 	and.w	r3, r3, #32
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d009      	beq.n	8012b68 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	015a      	lsls	r2, r3, #5
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	4413      	add	r3, r2
 8012b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b60:	461a      	mov	r2, r3
 8012b62:	2320      	movs	r3, #32
 8012b64:	6093      	str	r3, [r2, #8]
 8012b66:	e0bc      	b.n	8012ce2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	f040 80b7 	bne.w	8012ce2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	4a5d      	ldr	r2, [pc, #372]	; (8012cec <PCD_EP_OutXfrComplete_int+0x210>)
 8012b78:	4293      	cmp	r3, r2
 8012b7a:	d90f      	bls.n	8012b9c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d00a      	beq.n	8012b9c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	015a      	lsls	r2, r3, #5
 8012b8a:	693b      	ldr	r3, [r7, #16]
 8012b8c:	4413      	add	r3, r2
 8012b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b92:	461a      	mov	r2, r3
 8012b94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012b98:	6093      	str	r3, [r2, #8]
 8012b9a:	e0a2      	b.n	8012ce2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8012b9c:	6879      	ldr	r1, [r7, #4]
 8012b9e:	683a      	ldr	r2, [r7, #0]
 8012ba0:	4613      	mov	r3, r2
 8012ba2:	00db      	lsls	r3, r3, #3
 8012ba4:	1a9b      	subs	r3, r3, r2
 8012ba6:	009b      	lsls	r3, r3, #2
 8012ba8:	440b      	add	r3, r1
 8012baa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8012bae:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	0159      	lsls	r1, r3, #5
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	440b      	add	r3, r1
 8012bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bbc:	691b      	ldr	r3, [r3, #16]
 8012bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8012bc2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	683a      	ldr	r2, [r7, #0]
 8012bc8:	4613      	mov	r3, r2
 8012bca:	00db      	lsls	r3, r3, #3
 8012bcc:	1a9b      	subs	r3, r3, r2
 8012bce:	009b      	lsls	r3, r3, #2
 8012bd0:	4403      	add	r3, r0
 8012bd2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8012bd6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8012bd8:	6879      	ldr	r1, [r7, #4]
 8012bda:	683a      	ldr	r2, [r7, #0]
 8012bdc:	4613      	mov	r3, r2
 8012bde:	00db      	lsls	r3, r3, #3
 8012be0:	1a9b      	subs	r3, r3, r2
 8012be2:	009b      	lsls	r3, r3, #2
 8012be4:	440b      	add	r3, r1
 8012be6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012bea:	6819      	ldr	r1, [r3, #0]
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	683a      	ldr	r2, [r7, #0]
 8012bf0:	4613      	mov	r3, r2
 8012bf2:	00db      	lsls	r3, r3, #3
 8012bf4:	1a9b      	subs	r3, r3, r2
 8012bf6:	009b      	lsls	r3, r3, #2
 8012bf8:	4403      	add	r3, r0
 8012bfa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	4419      	add	r1, r3
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	683a      	ldr	r2, [r7, #0]
 8012c06:	4613      	mov	r3, r2
 8012c08:	00db      	lsls	r3, r3, #3
 8012c0a:	1a9b      	subs	r3, r3, r2
 8012c0c:	009b      	lsls	r3, r3, #2
 8012c0e:	4403      	add	r3, r0
 8012c10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012c14:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d114      	bne.n	8012c46 <PCD_EP_OutXfrComplete_int+0x16a>
 8012c1c:	6879      	ldr	r1, [r7, #4]
 8012c1e:	683a      	ldr	r2, [r7, #0]
 8012c20:	4613      	mov	r3, r2
 8012c22:	00db      	lsls	r3, r3, #3
 8012c24:	1a9b      	subs	r3, r3, r2
 8012c26:	009b      	lsls	r3, r3, #2
 8012c28:	440b      	add	r3, r1
 8012c2a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d108      	bne.n	8012c46 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6818      	ldr	r0, [r3, #0]
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012c3e:	461a      	mov	r2, r3
 8012c40:	2101      	movs	r1, #1
 8012c42:	f004 f897 	bl	8016d74 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8012c46:	683b      	ldr	r3, [r7, #0]
 8012c48:	b2db      	uxtb	r3, r3
 8012c4a:	4619      	mov	r1, r3
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f00a f92f 	bl	801ceb0 <HAL_PCD_DataOutStageCallback>
 8012c52:	e046      	b.n	8012ce2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	4a26      	ldr	r2, [pc, #152]	; (8012cf0 <PCD_EP_OutXfrComplete_int+0x214>)
 8012c58:	4293      	cmp	r3, r2
 8012c5a:	d124      	bne.n	8012ca6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d00a      	beq.n	8012c7c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	015a      	lsls	r2, r3, #5
 8012c6a:	693b      	ldr	r3, [r7, #16]
 8012c6c:	4413      	add	r3, r2
 8012c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c72:	461a      	mov	r2, r3
 8012c74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012c78:	6093      	str	r3, [r2, #8]
 8012c7a:	e032      	b.n	8012ce2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	f003 0320 	and.w	r3, r3, #32
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d008      	beq.n	8012c98 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	015a      	lsls	r2, r3, #5
 8012c8a:	693b      	ldr	r3, [r7, #16]
 8012c8c:	4413      	add	r3, r2
 8012c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c92:	461a      	mov	r2, r3
 8012c94:	2320      	movs	r3, #32
 8012c96:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	b2db      	uxtb	r3, r3
 8012c9c:	4619      	mov	r1, r3
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f00a f906 	bl	801ceb0 <HAL_PCD_DataOutStageCallback>
 8012ca4:	e01d      	b.n	8012ce2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d114      	bne.n	8012cd6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8012cac:	6879      	ldr	r1, [r7, #4]
 8012cae:	683a      	ldr	r2, [r7, #0]
 8012cb0:	4613      	mov	r3, r2
 8012cb2:	00db      	lsls	r3, r3, #3
 8012cb4:	1a9b      	subs	r3, r3, r2
 8012cb6:	009b      	lsls	r3, r3, #2
 8012cb8:	440b      	add	r3, r1
 8012cba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d108      	bne.n	8012cd6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	6818      	ldr	r0, [r3, #0]
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012cce:	461a      	mov	r2, r3
 8012cd0:	2100      	movs	r1, #0
 8012cd2:	f004 f84f 	bl	8016d74 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8012cd6:	683b      	ldr	r3, [r7, #0]
 8012cd8:	b2db      	uxtb	r3, r3
 8012cda:	4619      	mov	r1, r3
 8012cdc:	6878      	ldr	r0, [r7, #4]
 8012cde:	f00a f8e7 	bl	801ceb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8012ce2:	2300      	movs	r3, #0
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3718      	adds	r7, #24
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd80      	pop	{r7, pc}
 8012cec:	4f54300a 	.word	0x4f54300a
 8012cf0:	4f54310a 	.word	0x4f54310a

08012cf4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b086      	sub	sp, #24
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
 8012cfc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d04:	697b      	ldr	r3, [r7, #20]
 8012d06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012d08:	697b      	ldr	r3, [r7, #20]
 8012d0a:	333c      	adds	r3, #60	; 0x3c
 8012d0c:	3304      	adds	r3, #4
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8012d12:	683b      	ldr	r3, [r7, #0]
 8012d14:	015a      	lsls	r2, r3, #5
 8012d16:	693b      	ldr	r3, [r7, #16]
 8012d18:	4413      	add	r3, r2
 8012d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d1e:	689b      	ldr	r3, [r3, #8]
 8012d20:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	4a15      	ldr	r2, [pc, #84]	; (8012d7c <PCD_EP_OutSetupPacket_int+0x88>)
 8012d26:	4293      	cmp	r3, r2
 8012d28:	d90e      	bls.n	8012d48 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8012d2a:	68bb      	ldr	r3, [r7, #8]
 8012d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d009      	beq.n	8012d48 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8012d34:	683b      	ldr	r3, [r7, #0]
 8012d36:	015a      	lsls	r2, r3, #5
 8012d38:	693b      	ldr	r3, [r7, #16]
 8012d3a:	4413      	add	r3, r2
 8012d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d40:	461a      	mov	r2, r3
 8012d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012d46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f00a f89f 	bl	801ce8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	4a0a      	ldr	r2, [pc, #40]	; (8012d7c <PCD_EP_OutSetupPacket_int+0x88>)
 8012d52:	4293      	cmp	r3, r2
 8012d54:	d90c      	bls.n	8012d70 <PCD_EP_OutSetupPacket_int+0x7c>
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	691b      	ldr	r3, [r3, #16]
 8012d5a:	2b01      	cmp	r3, #1
 8012d5c:	d108      	bne.n	8012d70 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	6818      	ldr	r0, [r3, #0]
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012d68:	461a      	mov	r2, r3
 8012d6a:	2101      	movs	r1, #1
 8012d6c:	f004 f802 	bl	8016d74 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8012d70:	2300      	movs	r3, #0
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	3718      	adds	r7, #24
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}
 8012d7a:	bf00      	nop
 8012d7c:	4f54300a 	.word	0x4f54300a

08012d80 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8012d80:	b480      	push	{r7}
 8012d82:	b085      	sub	sp, #20
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
 8012d88:	460b      	mov	r3, r1
 8012d8a:	70fb      	strb	r3, [r7, #3]
 8012d8c:	4613      	mov	r3, r2
 8012d8e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d96:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8012d98:	78fb      	ldrb	r3, [r7, #3]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d107      	bne.n	8012dae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8012d9e:	883b      	ldrh	r3, [r7, #0]
 8012da0:	0419      	lsls	r1, r3, #16
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	68ba      	ldr	r2, [r7, #8]
 8012da8:	430a      	orrs	r2, r1
 8012daa:	629a      	str	r2, [r3, #40]	; 0x28
 8012dac:	e028      	b.n	8012e00 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012db4:	0c1b      	lsrs	r3, r3, #16
 8012db6:	68ba      	ldr	r2, [r7, #8]
 8012db8:	4413      	add	r3, r2
 8012dba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	73fb      	strb	r3, [r7, #15]
 8012dc0:	e00d      	b.n	8012dde <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	681a      	ldr	r2, [r3, #0]
 8012dc6:	7bfb      	ldrb	r3, [r7, #15]
 8012dc8:	3340      	adds	r3, #64	; 0x40
 8012dca:	009b      	lsls	r3, r3, #2
 8012dcc:	4413      	add	r3, r2
 8012dce:	685b      	ldr	r3, [r3, #4]
 8012dd0:	0c1b      	lsrs	r3, r3, #16
 8012dd2:	68ba      	ldr	r2, [r7, #8]
 8012dd4:	4413      	add	r3, r2
 8012dd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8012dd8:	7bfb      	ldrb	r3, [r7, #15]
 8012dda:	3301      	adds	r3, #1
 8012ddc:	73fb      	strb	r3, [r7, #15]
 8012dde:	7bfa      	ldrb	r2, [r7, #15]
 8012de0:	78fb      	ldrb	r3, [r7, #3]
 8012de2:	3b01      	subs	r3, #1
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d3ec      	bcc.n	8012dc2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8012de8:	883b      	ldrh	r3, [r7, #0]
 8012dea:	0418      	lsls	r0, r3, #16
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6819      	ldr	r1, [r3, #0]
 8012df0:	78fb      	ldrb	r3, [r7, #3]
 8012df2:	3b01      	subs	r3, #1
 8012df4:	68ba      	ldr	r2, [r7, #8]
 8012df6:	4302      	orrs	r2, r0
 8012df8:	3340      	adds	r3, #64	; 0x40
 8012dfa:	009b      	lsls	r3, r3, #2
 8012dfc:	440b      	add	r3, r1
 8012dfe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8012e00:	2300      	movs	r3, #0
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	3714      	adds	r7, #20
 8012e06:	46bd      	mov	sp, r7
 8012e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0c:	4770      	bx	lr

08012e0e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8012e0e:	b480      	push	{r7}
 8012e10:	b083      	sub	sp, #12
 8012e12:	af00      	add	r7, sp, #0
 8012e14:	6078      	str	r0, [r7, #4]
 8012e16:	460b      	mov	r3, r1
 8012e18:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	887a      	ldrh	r2, [r7, #2]
 8012e20:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8012e22:	2300      	movs	r3, #0
}
 8012e24:	4618      	mov	r0, r3
 8012e26:	370c      	adds	r7, #12
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2e:	4770      	bx	lr

08012e30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8012e30:	b480      	push	{r7}
 8012e32:	b083      	sub	sp, #12
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	6078      	str	r0, [r7, #4]
 8012e38:	460b      	mov	r3, r1
 8012e3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8012e3c:	bf00      	nop
 8012e3e:	370c      	adds	r7, #12
 8012e40:	46bd      	mov	sp, r7
 8012e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e46:	4770      	bx	lr

08012e48 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8012e48:	b480      	push	{r7}
 8012e4a:	b083      	sub	sp, #12
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
 8012e50:	460b      	mov	r3, r1
 8012e52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8012e54:	4b10      	ldr	r3, [pc, #64]	; (8012e98 <HAL_PWR_EnterSTOPMode+0x50>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	f023 0203 	bic.w	r2, r3, #3
 8012e5c:	490e      	ldr	r1, [pc, #56]	; (8012e98 <HAL_PWR_EnterSTOPMode+0x50>)
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	4313      	orrs	r3, r2
 8012e62:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8012e64:	4b0d      	ldr	r3, [pc, #52]	; (8012e9c <HAL_PWR_EnterSTOPMode+0x54>)
 8012e66:	691b      	ldr	r3, [r3, #16]
 8012e68:	4a0c      	ldr	r2, [pc, #48]	; (8012e9c <HAL_PWR_EnterSTOPMode+0x54>)
 8012e6a:	f043 0304 	orr.w	r3, r3, #4
 8012e6e:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8012e70:	78fb      	ldrb	r3, [r7, #3]
 8012e72:	2b01      	cmp	r3, #1
 8012e74:	d101      	bne.n	8012e7a <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8012e76:	bf30      	wfi
 8012e78:	e002      	b.n	8012e80 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8012e7a:	bf40      	sev
    __WFE();
 8012e7c:	bf20      	wfe
    __WFE();
 8012e7e:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8012e80:	4b06      	ldr	r3, [pc, #24]	; (8012e9c <HAL_PWR_EnterSTOPMode+0x54>)
 8012e82:	691b      	ldr	r3, [r3, #16]
 8012e84:	4a05      	ldr	r2, [pc, #20]	; (8012e9c <HAL_PWR_EnterSTOPMode+0x54>)
 8012e86:	f023 0304 	bic.w	r3, r3, #4
 8012e8a:	6113      	str	r3, [r2, #16]
}
 8012e8c:	bf00      	nop
 8012e8e:	370c      	adds	r7, #12
 8012e90:	46bd      	mov	sp, r7
 8012e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e96:	4770      	bx	lr
 8012e98:	40007000 	.word	0x40007000
 8012e9c:	e000ed00 	.word	0xe000ed00

08012ea0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b086      	sub	sp, #24
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d101      	bne.n	8012eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012eae:	2301      	movs	r3, #1
 8012eb0:	e264      	b.n	801337c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	f003 0301 	and.w	r3, r3, #1
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d075      	beq.n	8012faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012ebe:	4ba3      	ldr	r3, [pc, #652]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012ec0:	689b      	ldr	r3, [r3, #8]
 8012ec2:	f003 030c 	and.w	r3, r3, #12
 8012ec6:	2b04      	cmp	r3, #4
 8012ec8:	d00c      	beq.n	8012ee4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012eca:	4ba0      	ldr	r3, [pc, #640]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012ecc:	689b      	ldr	r3, [r3, #8]
 8012ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012ed2:	2b08      	cmp	r3, #8
 8012ed4:	d112      	bne.n	8012efc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012ed6:	4b9d      	ldr	r3, [pc, #628]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012ed8:	685b      	ldr	r3, [r3, #4]
 8012eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012ee2:	d10b      	bne.n	8012efc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012ee4:	4b99      	ldr	r3, [pc, #612]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d05b      	beq.n	8012fa8 <HAL_RCC_OscConfig+0x108>
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	685b      	ldr	r3, [r3, #4]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d157      	bne.n	8012fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012ef8:	2301      	movs	r3, #1
 8012efa:	e23f      	b.n	801337c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	685b      	ldr	r3, [r3, #4]
 8012f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012f04:	d106      	bne.n	8012f14 <HAL_RCC_OscConfig+0x74>
 8012f06:	4b91      	ldr	r3, [pc, #580]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	4a90      	ldr	r2, [pc, #576]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012f10:	6013      	str	r3, [r2, #0]
 8012f12:	e01d      	b.n	8012f50 <HAL_RCC_OscConfig+0xb0>
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	685b      	ldr	r3, [r3, #4]
 8012f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012f1c:	d10c      	bne.n	8012f38 <HAL_RCC_OscConfig+0x98>
 8012f1e:	4b8b      	ldr	r3, [pc, #556]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	4a8a      	ldr	r2, [pc, #552]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012f28:	6013      	str	r3, [r2, #0]
 8012f2a:	4b88      	ldr	r3, [pc, #544]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	4a87      	ldr	r2, [pc, #540]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012f34:	6013      	str	r3, [r2, #0]
 8012f36:	e00b      	b.n	8012f50 <HAL_RCC_OscConfig+0xb0>
 8012f38:	4b84      	ldr	r3, [pc, #528]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	4a83      	ldr	r2, [pc, #524]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012f42:	6013      	str	r3, [r2, #0]
 8012f44:	4b81      	ldr	r3, [pc, #516]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	4a80      	ldr	r2, [pc, #512]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	685b      	ldr	r3, [r3, #4]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d013      	beq.n	8012f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012f58:	f7fd fbfa 	bl	8010750 <HAL_GetTick>
 8012f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012f5e:	e008      	b.n	8012f72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012f60:	f7fd fbf6 	bl	8010750 <HAL_GetTick>
 8012f64:	4602      	mov	r2, r0
 8012f66:	693b      	ldr	r3, [r7, #16]
 8012f68:	1ad3      	subs	r3, r2, r3
 8012f6a:	2b64      	cmp	r3, #100	; 0x64
 8012f6c:	d901      	bls.n	8012f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8012f6e:	2303      	movs	r3, #3
 8012f70:	e204      	b.n	801337c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012f72:	4b76      	ldr	r3, [pc, #472]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d0f0      	beq.n	8012f60 <HAL_RCC_OscConfig+0xc0>
 8012f7e:	e014      	b.n	8012faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012f80:	f7fd fbe6 	bl	8010750 <HAL_GetTick>
 8012f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012f86:	e008      	b.n	8012f9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012f88:	f7fd fbe2 	bl	8010750 <HAL_GetTick>
 8012f8c:	4602      	mov	r2, r0
 8012f8e:	693b      	ldr	r3, [r7, #16]
 8012f90:	1ad3      	subs	r3, r2, r3
 8012f92:	2b64      	cmp	r3, #100	; 0x64
 8012f94:	d901      	bls.n	8012f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012f96:	2303      	movs	r3, #3
 8012f98:	e1f0      	b.n	801337c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012f9a:	4b6c      	ldr	r3, [pc, #432]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d1f0      	bne.n	8012f88 <HAL_RCC_OscConfig+0xe8>
 8012fa6:	e000      	b.n	8012faa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	f003 0302 	and.w	r3, r3, #2
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d063      	beq.n	801307e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012fb6:	4b65      	ldr	r3, [pc, #404]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012fb8:	689b      	ldr	r3, [r3, #8]
 8012fba:	f003 030c 	and.w	r3, r3, #12
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d00b      	beq.n	8012fda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012fc2:	4b62      	ldr	r3, [pc, #392]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012fc4:	689b      	ldr	r3, [r3, #8]
 8012fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012fca:	2b08      	cmp	r3, #8
 8012fcc:	d11c      	bne.n	8013008 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012fce:	4b5f      	ldr	r3, [pc, #380]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012fd0:	685b      	ldr	r3, [r3, #4]
 8012fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d116      	bne.n	8013008 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012fda:	4b5c      	ldr	r3, [pc, #368]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	f003 0302 	and.w	r3, r3, #2
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d005      	beq.n	8012ff2 <HAL_RCC_OscConfig+0x152>
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	68db      	ldr	r3, [r3, #12]
 8012fea:	2b01      	cmp	r3, #1
 8012fec:	d001      	beq.n	8012ff2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8012fee:	2301      	movs	r3, #1
 8012ff0:	e1c4      	b.n	801337c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012ff2:	4b56      	ldr	r3, [pc, #344]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	691b      	ldr	r3, [r3, #16]
 8012ffe:	00db      	lsls	r3, r3, #3
 8013000:	4952      	ldr	r1, [pc, #328]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8013002:	4313      	orrs	r3, r2
 8013004:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8013006:	e03a      	b.n	801307e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	68db      	ldr	r3, [r3, #12]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d020      	beq.n	8013052 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8013010:	4b4f      	ldr	r3, [pc, #316]	; (8013150 <HAL_RCC_OscConfig+0x2b0>)
 8013012:	2201      	movs	r2, #1
 8013014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013016:	f7fd fb9b 	bl	8010750 <HAL_GetTick>
 801301a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801301c:	e008      	b.n	8013030 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801301e:	f7fd fb97 	bl	8010750 <HAL_GetTick>
 8013022:	4602      	mov	r2, r0
 8013024:	693b      	ldr	r3, [r7, #16]
 8013026:	1ad3      	subs	r3, r2, r3
 8013028:	2b02      	cmp	r3, #2
 801302a:	d901      	bls.n	8013030 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801302c:	2303      	movs	r3, #3
 801302e:	e1a5      	b.n	801337c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013030:	4b46      	ldr	r3, [pc, #280]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	f003 0302 	and.w	r3, r3, #2
 8013038:	2b00      	cmp	r3, #0
 801303a:	d0f0      	beq.n	801301e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801303c:	4b43      	ldr	r3, [pc, #268]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	691b      	ldr	r3, [r3, #16]
 8013048:	00db      	lsls	r3, r3, #3
 801304a:	4940      	ldr	r1, [pc, #256]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 801304c:	4313      	orrs	r3, r2
 801304e:	600b      	str	r3, [r1, #0]
 8013050:	e015      	b.n	801307e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013052:	4b3f      	ldr	r3, [pc, #252]	; (8013150 <HAL_RCC_OscConfig+0x2b0>)
 8013054:	2200      	movs	r2, #0
 8013056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013058:	f7fd fb7a 	bl	8010750 <HAL_GetTick>
 801305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801305e:	e008      	b.n	8013072 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013060:	f7fd fb76 	bl	8010750 <HAL_GetTick>
 8013064:	4602      	mov	r2, r0
 8013066:	693b      	ldr	r3, [r7, #16]
 8013068:	1ad3      	subs	r3, r2, r3
 801306a:	2b02      	cmp	r3, #2
 801306c:	d901      	bls.n	8013072 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801306e:	2303      	movs	r3, #3
 8013070:	e184      	b.n	801337c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013072:	4b36      	ldr	r3, [pc, #216]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	f003 0302 	and.w	r3, r3, #2
 801307a:	2b00      	cmp	r3, #0
 801307c:	d1f0      	bne.n	8013060 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	f003 0308 	and.w	r3, r3, #8
 8013086:	2b00      	cmp	r3, #0
 8013088:	d030      	beq.n	80130ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	695b      	ldr	r3, [r3, #20]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d016      	beq.n	80130c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013092:	4b30      	ldr	r3, [pc, #192]	; (8013154 <HAL_RCC_OscConfig+0x2b4>)
 8013094:	2201      	movs	r2, #1
 8013096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013098:	f7fd fb5a 	bl	8010750 <HAL_GetTick>
 801309c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801309e:	e008      	b.n	80130b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80130a0:	f7fd fb56 	bl	8010750 <HAL_GetTick>
 80130a4:	4602      	mov	r2, r0
 80130a6:	693b      	ldr	r3, [r7, #16]
 80130a8:	1ad3      	subs	r3, r2, r3
 80130aa:	2b02      	cmp	r3, #2
 80130ac:	d901      	bls.n	80130b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80130ae:	2303      	movs	r3, #3
 80130b0:	e164      	b.n	801337c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80130b2:	4b26      	ldr	r3, [pc, #152]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 80130b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130b6:	f003 0302 	and.w	r3, r3, #2
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d0f0      	beq.n	80130a0 <HAL_RCC_OscConfig+0x200>
 80130be:	e015      	b.n	80130ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80130c0:	4b24      	ldr	r3, [pc, #144]	; (8013154 <HAL_RCC_OscConfig+0x2b4>)
 80130c2:	2200      	movs	r2, #0
 80130c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80130c6:	f7fd fb43 	bl	8010750 <HAL_GetTick>
 80130ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80130cc:	e008      	b.n	80130e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80130ce:	f7fd fb3f 	bl	8010750 <HAL_GetTick>
 80130d2:	4602      	mov	r2, r0
 80130d4:	693b      	ldr	r3, [r7, #16]
 80130d6:	1ad3      	subs	r3, r2, r3
 80130d8:	2b02      	cmp	r3, #2
 80130da:	d901      	bls.n	80130e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80130dc:	2303      	movs	r3, #3
 80130de:	e14d      	b.n	801337c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80130e0:	4b1a      	ldr	r3, [pc, #104]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 80130e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130e4:	f003 0302 	and.w	r3, r3, #2
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d1f0      	bne.n	80130ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	f003 0304 	and.w	r3, r3, #4
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	f000 80a0 	beq.w	801323a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80130fa:	2300      	movs	r3, #0
 80130fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80130fe:	4b13      	ldr	r3, [pc, #76]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8013100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013106:	2b00      	cmp	r3, #0
 8013108:	d10f      	bne.n	801312a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801310a:	2300      	movs	r3, #0
 801310c:	60bb      	str	r3, [r7, #8]
 801310e:	4b0f      	ldr	r3, [pc, #60]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8013110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013112:	4a0e      	ldr	r2, [pc, #56]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 8013114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013118:	6413      	str	r3, [r2, #64]	; 0x40
 801311a:	4b0c      	ldr	r3, [pc, #48]	; (801314c <HAL_RCC_OscConfig+0x2ac>)
 801311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013122:	60bb      	str	r3, [r7, #8]
 8013124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8013126:	2301      	movs	r3, #1
 8013128:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801312a:	4b0b      	ldr	r3, [pc, #44]	; (8013158 <HAL_RCC_OscConfig+0x2b8>)
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013132:	2b00      	cmp	r3, #0
 8013134:	d121      	bne.n	801317a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013136:	4b08      	ldr	r3, [pc, #32]	; (8013158 <HAL_RCC_OscConfig+0x2b8>)
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	4a07      	ldr	r2, [pc, #28]	; (8013158 <HAL_RCC_OscConfig+0x2b8>)
 801313c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013142:	f7fd fb05 	bl	8010750 <HAL_GetTick>
 8013146:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013148:	e011      	b.n	801316e <HAL_RCC_OscConfig+0x2ce>
 801314a:	bf00      	nop
 801314c:	40023800 	.word	0x40023800
 8013150:	42470000 	.word	0x42470000
 8013154:	42470e80 	.word	0x42470e80
 8013158:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801315c:	f7fd faf8 	bl	8010750 <HAL_GetTick>
 8013160:	4602      	mov	r2, r0
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	1ad3      	subs	r3, r2, r3
 8013166:	2b02      	cmp	r3, #2
 8013168:	d901      	bls.n	801316e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801316a:	2303      	movs	r3, #3
 801316c:	e106      	b.n	801337c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801316e:	4b85      	ldr	r3, [pc, #532]	; (8013384 <HAL_RCC_OscConfig+0x4e4>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013176:	2b00      	cmp	r3, #0
 8013178:	d0f0      	beq.n	801315c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	689b      	ldr	r3, [r3, #8]
 801317e:	2b01      	cmp	r3, #1
 8013180:	d106      	bne.n	8013190 <HAL_RCC_OscConfig+0x2f0>
 8013182:	4b81      	ldr	r3, [pc, #516]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 8013184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013186:	4a80      	ldr	r2, [pc, #512]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 8013188:	f043 0301 	orr.w	r3, r3, #1
 801318c:	6713      	str	r3, [r2, #112]	; 0x70
 801318e:	e01c      	b.n	80131ca <HAL_RCC_OscConfig+0x32a>
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	689b      	ldr	r3, [r3, #8]
 8013194:	2b05      	cmp	r3, #5
 8013196:	d10c      	bne.n	80131b2 <HAL_RCC_OscConfig+0x312>
 8013198:	4b7b      	ldr	r3, [pc, #492]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 801319a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801319c:	4a7a      	ldr	r2, [pc, #488]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 801319e:	f043 0304 	orr.w	r3, r3, #4
 80131a2:	6713      	str	r3, [r2, #112]	; 0x70
 80131a4:	4b78      	ldr	r3, [pc, #480]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 80131a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131a8:	4a77      	ldr	r2, [pc, #476]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 80131aa:	f043 0301 	orr.w	r3, r3, #1
 80131ae:	6713      	str	r3, [r2, #112]	; 0x70
 80131b0:	e00b      	b.n	80131ca <HAL_RCC_OscConfig+0x32a>
 80131b2:	4b75      	ldr	r3, [pc, #468]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 80131b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131b6:	4a74      	ldr	r2, [pc, #464]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 80131b8:	f023 0301 	bic.w	r3, r3, #1
 80131bc:	6713      	str	r3, [r2, #112]	; 0x70
 80131be:	4b72      	ldr	r3, [pc, #456]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 80131c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131c2:	4a71      	ldr	r2, [pc, #452]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 80131c4:	f023 0304 	bic.w	r3, r3, #4
 80131c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	689b      	ldr	r3, [r3, #8]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d015      	beq.n	80131fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80131d2:	f7fd fabd 	bl	8010750 <HAL_GetTick>
 80131d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80131d8:	e00a      	b.n	80131f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80131da:	f7fd fab9 	bl	8010750 <HAL_GetTick>
 80131de:	4602      	mov	r2, r0
 80131e0:	693b      	ldr	r3, [r7, #16]
 80131e2:	1ad3      	subs	r3, r2, r3
 80131e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80131e8:	4293      	cmp	r3, r2
 80131ea:	d901      	bls.n	80131f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80131ec:	2303      	movs	r3, #3
 80131ee:	e0c5      	b.n	801337c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80131f0:	4b65      	ldr	r3, [pc, #404]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 80131f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131f4:	f003 0302 	and.w	r3, r3, #2
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d0ee      	beq.n	80131da <HAL_RCC_OscConfig+0x33a>
 80131fc:	e014      	b.n	8013228 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80131fe:	f7fd faa7 	bl	8010750 <HAL_GetTick>
 8013202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8013204:	e00a      	b.n	801321c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013206:	f7fd faa3 	bl	8010750 <HAL_GetTick>
 801320a:	4602      	mov	r2, r0
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	1ad3      	subs	r3, r2, r3
 8013210:	f241 3288 	movw	r2, #5000	; 0x1388
 8013214:	4293      	cmp	r3, r2
 8013216:	d901      	bls.n	801321c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8013218:	2303      	movs	r3, #3
 801321a:	e0af      	b.n	801337c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801321c:	4b5a      	ldr	r3, [pc, #360]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 801321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013220:	f003 0302 	and.w	r3, r3, #2
 8013224:	2b00      	cmp	r3, #0
 8013226:	d1ee      	bne.n	8013206 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8013228:	7dfb      	ldrb	r3, [r7, #23]
 801322a:	2b01      	cmp	r3, #1
 801322c:	d105      	bne.n	801323a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801322e:	4b56      	ldr	r3, [pc, #344]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 8013230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013232:	4a55      	ldr	r2, [pc, #340]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 8013234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013238:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	699b      	ldr	r3, [r3, #24]
 801323e:	2b00      	cmp	r3, #0
 8013240:	f000 809b 	beq.w	801337a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8013244:	4b50      	ldr	r3, [pc, #320]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 8013246:	689b      	ldr	r3, [r3, #8]
 8013248:	f003 030c 	and.w	r3, r3, #12
 801324c:	2b08      	cmp	r3, #8
 801324e:	d05c      	beq.n	801330a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	699b      	ldr	r3, [r3, #24]
 8013254:	2b02      	cmp	r3, #2
 8013256:	d141      	bne.n	80132dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013258:	4b4c      	ldr	r3, [pc, #304]	; (801338c <HAL_RCC_OscConfig+0x4ec>)
 801325a:	2200      	movs	r2, #0
 801325c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801325e:	f7fd fa77 	bl	8010750 <HAL_GetTick>
 8013262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013264:	e008      	b.n	8013278 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013266:	f7fd fa73 	bl	8010750 <HAL_GetTick>
 801326a:	4602      	mov	r2, r0
 801326c:	693b      	ldr	r3, [r7, #16]
 801326e:	1ad3      	subs	r3, r2, r3
 8013270:	2b02      	cmp	r3, #2
 8013272:	d901      	bls.n	8013278 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8013274:	2303      	movs	r3, #3
 8013276:	e081      	b.n	801337c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013278:	4b43      	ldr	r3, [pc, #268]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013280:	2b00      	cmp	r3, #0
 8013282:	d1f0      	bne.n	8013266 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	69da      	ldr	r2, [r3, #28]
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	6a1b      	ldr	r3, [r3, #32]
 801328c:	431a      	orrs	r2, r3
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013292:	019b      	lsls	r3, r3, #6
 8013294:	431a      	orrs	r2, r3
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801329a:	085b      	lsrs	r3, r3, #1
 801329c:	3b01      	subs	r3, #1
 801329e:	041b      	lsls	r3, r3, #16
 80132a0:	431a      	orrs	r2, r3
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132a6:	061b      	lsls	r3, r3, #24
 80132a8:	4937      	ldr	r1, [pc, #220]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 80132aa:	4313      	orrs	r3, r2
 80132ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80132ae:	4b37      	ldr	r3, [pc, #220]	; (801338c <HAL_RCC_OscConfig+0x4ec>)
 80132b0:	2201      	movs	r2, #1
 80132b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80132b4:	f7fd fa4c 	bl	8010750 <HAL_GetTick>
 80132b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80132ba:	e008      	b.n	80132ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80132bc:	f7fd fa48 	bl	8010750 <HAL_GetTick>
 80132c0:	4602      	mov	r2, r0
 80132c2:	693b      	ldr	r3, [r7, #16]
 80132c4:	1ad3      	subs	r3, r2, r3
 80132c6:	2b02      	cmp	r3, #2
 80132c8:	d901      	bls.n	80132ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80132ca:	2303      	movs	r3, #3
 80132cc:	e056      	b.n	801337c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80132ce:	4b2e      	ldr	r3, [pc, #184]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d0f0      	beq.n	80132bc <HAL_RCC_OscConfig+0x41c>
 80132da:	e04e      	b.n	801337a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80132dc:	4b2b      	ldr	r3, [pc, #172]	; (801338c <HAL_RCC_OscConfig+0x4ec>)
 80132de:	2200      	movs	r2, #0
 80132e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80132e2:	f7fd fa35 	bl	8010750 <HAL_GetTick>
 80132e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80132e8:	e008      	b.n	80132fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80132ea:	f7fd fa31 	bl	8010750 <HAL_GetTick>
 80132ee:	4602      	mov	r2, r0
 80132f0:	693b      	ldr	r3, [r7, #16]
 80132f2:	1ad3      	subs	r3, r2, r3
 80132f4:	2b02      	cmp	r3, #2
 80132f6:	d901      	bls.n	80132fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80132f8:	2303      	movs	r3, #3
 80132fa:	e03f      	b.n	801337c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80132fc:	4b22      	ldr	r3, [pc, #136]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013304:	2b00      	cmp	r3, #0
 8013306:	d1f0      	bne.n	80132ea <HAL_RCC_OscConfig+0x44a>
 8013308:	e037      	b.n	801337a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	699b      	ldr	r3, [r3, #24]
 801330e:	2b01      	cmp	r3, #1
 8013310:	d101      	bne.n	8013316 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8013312:	2301      	movs	r3, #1
 8013314:	e032      	b.n	801337c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8013316:	4b1c      	ldr	r3, [pc, #112]	; (8013388 <HAL_RCC_OscConfig+0x4e8>)
 8013318:	685b      	ldr	r3, [r3, #4]
 801331a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	699b      	ldr	r3, [r3, #24]
 8013320:	2b01      	cmp	r3, #1
 8013322:	d028      	beq.n	8013376 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801332e:	429a      	cmp	r2, r3
 8013330:	d121      	bne.n	8013376 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801333c:	429a      	cmp	r2, r3
 801333e:	d11a      	bne.n	8013376 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013340:	68fa      	ldr	r2, [r7, #12]
 8013342:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8013346:	4013      	ands	r3, r2
 8013348:	687a      	ldr	r2, [r7, #4]
 801334a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801334c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801334e:	4293      	cmp	r3, r2
 8013350:	d111      	bne.n	8013376 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801335c:	085b      	lsrs	r3, r3, #1
 801335e:	3b01      	subs	r3, #1
 8013360:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8013362:	429a      	cmp	r2, r3
 8013364:	d107      	bne.n	8013376 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013370:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8013372:	429a      	cmp	r2, r3
 8013374:	d001      	beq.n	801337a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8013376:	2301      	movs	r3, #1
 8013378:	e000      	b.n	801337c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 801337a:	2300      	movs	r3, #0
}
 801337c:	4618      	mov	r0, r3
 801337e:	3718      	adds	r7, #24
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}
 8013384:	40007000 	.word	0x40007000
 8013388:	40023800 	.word	0x40023800
 801338c:	42470060 	.word	0x42470060

08013390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b084      	sub	sp, #16
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
 8013398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d101      	bne.n	80133a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80133a0:	2301      	movs	r3, #1
 80133a2:	e0cc      	b.n	801353e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80133a4:	4b68      	ldr	r3, [pc, #416]	; (8013548 <HAL_RCC_ClockConfig+0x1b8>)
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	f003 0307 	and.w	r3, r3, #7
 80133ac:	683a      	ldr	r2, [r7, #0]
 80133ae:	429a      	cmp	r2, r3
 80133b0:	d90c      	bls.n	80133cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80133b2:	4b65      	ldr	r3, [pc, #404]	; (8013548 <HAL_RCC_ClockConfig+0x1b8>)
 80133b4:	683a      	ldr	r2, [r7, #0]
 80133b6:	b2d2      	uxtb	r2, r2
 80133b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80133ba:	4b63      	ldr	r3, [pc, #396]	; (8013548 <HAL_RCC_ClockConfig+0x1b8>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	f003 0307 	and.w	r3, r3, #7
 80133c2:	683a      	ldr	r2, [r7, #0]
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d001      	beq.n	80133cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80133c8:	2301      	movs	r3, #1
 80133ca:	e0b8      	b.n	801353e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	f003 0302 	and.w	r3, r3, #2
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d020      	beq.n	801341a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	f003 0304 	and.w	r3, r3, #4
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d005      	beq.n	80133f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80133e4:	4b59      	ldr	r3, [pc, #356]	; (801354c <HAL_RCC_ClockConfig+0x1bc>)
 80133e6:	689b      	ldr	r3, [r3, #8]
 80133e8:	4a58      	ldr	r2, [pc, #352]	; (801354c <HAL_RCC_ClockConfig+0x1bc>)
 80133ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80133ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	f003 0308 	and.w	r3, r3, #8
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d005      	beq.n	8013408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80133fc:	4b53      	ldr	r3, [pc, #332]	; (801354c <HAL_RCC_ClockConfig+0x1bc>)
 80133fe:	689b      	ldr	r3, [r3, #8]
 8013400:	4a52      	ldr	r2, [pc, #328]	; (801354c <HAL_RCC_ClockConfig+0x1bc>)
 8013402:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8013406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013408:	4b50      	ldr	r3, [pc, #320]	; (801354c <HAL_RCC_ClockConfig+0x1bc>)
 801340a:	689b      	ldr	r3, [r3, #8]
 801340c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	689b      	ldr	r3, [r3, #8]
 8013414:	494d      	ldr	r1, [pc, #308]	; (801354c <HAL_RCC_ClockConfig+0x1bc>)
 8013416:	4313      	orrs	r3, r2
 8013418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	f003 0301 	and.w	r3, r3, #1
 8013422:	2b00      	cmp	r3, #0
 8013424:	d044      	beq.n	80134b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	685b      	ldr	r3, [r3, #4]
 801342a:	2b01      	cmp	r3, #1
 801342c:	d107      	bne.n	801343e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801342e:	4b47      	ldr	r3, [pc, #284]	; (801354c <HAL_RCC_ClockConfig+0x1bc>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013436:	2b00      	cmp	r3, #0
 8013438:	d119      	bne.n	801346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801343a:	2301      	movs	r3, #1
 801343c:	e07f      	b.n	801353e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	685b      	ldr	r3, [r3, #4]
 8013442:	2b02      	cmp	r3, #2
 8013444:	d003      	beq.n	801344e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801344a:	2b03      	cmp	r3, #3
 801344c:	d107      	bne.n	801345e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801344e:	4b3f      	ldr	r3, [pc, #252]	; (801354c <HAL_RCC_ClockConfig+0x1bc>)
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013456:	2b00      	cmp	r3, #0
 8013458:	d109      	bne.n	801346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801345a:	2301      	movs	r3, #1
 801345c:	e06f      	b.n	801353e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801345e:	4b3b      	ldr	r3, [pc, #236]	; (801354c <HAL_RCC_ClockConfig+0x1bc>)
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	f003 0302 	and.w	r3, r3, #2
 8013466:	2b00      	cmp	r3, #0
 8013468:	d101      	bne.n	801346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801346a:	2301      	movs	r3, #1
 801346c:	e067      	b.n	801353e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801346e:	4b37      	ldr	r3, [pc, #220]	; (801354c <HAL_RCC_ClockConfig+0x1bc>)
 8013470:	689b      	ldr	r3, [r3, #8]
 8013472:	f023 0203 	bic.w	r2, r3, #3
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	685b      	ldr	r3, [r3, #4]
 801347a:	4934      	ldr	r1, [pc, #208]	; (801354c <HAL_RCC_ClockConfig+0x1bc>)
 801347c:	4313      	orrs	r3, r2
 801347e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013480:	f7fd f966 	bl	8010750 <HAL_GetTick>
 8013484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8013486:	e00a      	b.n	801349e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013488:	f7fd f962 	bl	8010750 <HAL_GetTick>
 801348c:	4602      	mov	r2, r0
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	1ad3      	subs	r3, r2, r3
 8013492:	f241 3288 	movw	r2, #5000	; 0x1388
 8013496:	4293      	cmp	r3, r2
 8013498:	d901      	bls.n	801349e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801349a:	2303      	movs	r3, #3
 801349c:	e04f      	b.n	801353e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801349e:	4b2b      	ldr	r3, [pc, #172]	; (801354c <HAL_RCC_ClockConfig+0x1bc>)
 80134a0:	689b      	ldr	r3, [r3, #8]
 80134a2:	f003 020c 	and.w	r2, r3, #12
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	685b      	ldr	r3, [r3, #4]
 80134aa:	009b      	lsls	r3, r3, #2
 80134ac:	429a      	cmp	r2, r3
 80134ae:	d1eb      	bne.n	8013488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80134b0:	4b25      	ldr	r3, [pc, #148]	; (8013548 <HAL_RCC_ClockConfig+0x1b8>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	f003 0307 	and.w	r3, r3, #7
 80134b8:	683a      	ldr	r2, [r7, #0]
 80134ba:	429a      	cmp	r2, r3
 80134bc:	d20c      	bcs.n	80134d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80134be:	4b22      	ldr	r3, [pc, #136]	; (8013548 <HAL_RCC_ClockConfig+0x1b8>)
 80134c0:	683a      	ldr	r2, [r7, #0]
 80134c2:	b2d2      	uxtb	r2, r2
 80134c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80134c6:	4b20      	ldr	r3, [pc, #128]	; (8013548 <HAL_RCC_ClockConfig+0x1b8>)
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	f003 0307 	and.w	r3, r3, #7
 80134ce:	683a      	ldr	r2, [r7, #0]
 80134d0:	429a      	cmp	r2, r3
 80134d2:	d001      	beq.n	80134d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80134d4:	2301      	movs	r3, #1
 80134d6:	e032      	b.n	801353e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	f003 0304 	and.w	r3, r3, #4
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d008      	beq.n	80134f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80134e4:	4b19      	ldr	r3, [pc, #100]	; (801354c <HAL_RCC_ClockConfig+0x1bc>)
 80134e6:	689b      	ldr	r3, [r3, #8]
 80134e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	68db      	ldr	r3, [r3, #12]
 80134f0:	4916      	ldr	r1, [pc, #88]	; (801354c <HAL_RCC_ClockConfig+0x1bc>)
 80134f2:	4313      	orrs	r3, r2
 80134f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	f003 0308 	and.w	r3, r3, #8
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d009      	beq.n	8013516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8013502:	4b12      	ldr	r3, [pc, #72]	; (801354c <HAL_RCC_ClockConfig+0x1bc>)
 8013504:	689b      	ldr	r3, [r3, #8]
 8013506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	691b      	ldr	r3, [r3, #16]
 801350e:	00db      	lsls	r3, r3, #3
 8013510:	490e      	ldr	r1, [pc, #56]	; (801354c <HAL_RCC_ClockConfig+0x1bc>)
 8013512:	4313      	orrs	r3, r2
 8013514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013516:	f000 f821 	bl	801355c <HAL_RCC_GetSysClockFreq>
 801351a:	4602      	mov	r2, r0
 801351c:	4b0b      	ldr	r3, [pc, #44]	; (801354c <HAL_RCC_ClockConfig+0x1bc>)
 801351e:	689b      	ldr	r3, [r3, #8]
 8013520:	091b      	lsrs	r3, r3, #4
 8013522:	f003 030f 	and.w	r3, r3, #15
 8013526:	490a      	ldr	r1, [pc, #40]	; (8013550 <HAL_RCC_ClockConfig+0x1c0>)
 8013528:	5ccb      	ldrb	r3, [r1, r3]
 801352a:	fa22 f303 	lsr.w	r3, r2, r3
 801352e:	4a09      	ldr	r2, [pc, #36]	; (8013554 <HAL_RCC_ClockConfig+0x1c4>)
 8013530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8013532:	4b09      	ldr	r3, [pc, #36]	; (8013558 <HAL_RCC_ClockConfig+0x1c8>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	4618      	mov	r0, r3
 8013538:	f7fb f85a 	bl	800e5f0 <HAL_InitTick>

  return HAL_OK;
 801353c:	2300      	movs	r3, #0
}
 801353e:	4618      	mov	r0, r3
 8013540:	3710      	adds	r7, #16
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}
 8013546:	bf00      	nop
 8013548:	40023c00 	.word	0x40023c00
 801354c:	40023800 	.word	0x40023800
 8013550:	0801eb00 	.word	0x0801eb00
 8013554:	20000000 	.word	0x20000000
 8013558:	20000054 	.word	0x20000054

0801355c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801355c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8013560:	b084      	sub	sp, #16
 8013562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013564:	2300      	movs	r3, #0
 8013566:	607b      	str	r3, [r7, #4]
 8013568:	2300      	movs	r3, #0
 801356a:	60fb      	str	r3, [r7, #12]
 801356c:	2300      	movs	r3, #0
 801356e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8013570:	2300      	movs	r3, #0
 8013572:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013574:	4b67      	ldr	r3, [pc, #412]	; (8013714 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013576:	689b      	ldr	r3, [r3, #8]
 8013578:	f003 030c 	and.w	r3, r3, #12
 801357c:	2b08      	cmp	r3, #8
 801357e:	d00d      	beq.n	801359c <HAL_RCC_GetSysClockFreq+0x40>
 8013580:	2b08      	cmp	r3, #8
 8013582:	f200 80bd 	bhi.w	8013700 <HAL_RCC_GetSysClockFreq+0x1a4>
 8013586:	2b00      	cmp	r3, #0
 8013588:	d002      	beq.n	8013590 <HAL_RCC_GetSysClockFreq+0x34>
 801358a:	2b04      	cmp	r3, #4
 801358c:	d003      	beq.n	8013596 <HAL_RCC_GetSysClockFreq+0x3a>
 801358e:	e0b7      	b.n	8013700 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013590:	4b61      	ldr	r3, [pc, #388]	; (8013718 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8013592:	60bb      	str	r3, [r7, #8]
       break;
 8013594:	e0b7      	b.n	8013706 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013596:	4b61      	ldr	r3, [pc, #388]	; (801371c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8013598:	60bb      	str	r3, [r7, #8]
      break;
 801359a:	e0b4      	b.n	8013706 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801359c:	4b5d      	ldr	r3, [pc, #372]	; (8013714 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801359e:	685b      	ldr	r3, [r3, #4]
 80135a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80135a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80135a6:	4b5b      	ldr	r3, [pc, #364]	; (8013714 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80135a8:	685b      	ldr	r3, [r3, #4]
 80135aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d04d      	beq.n	801364e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80135b2:	4b58      	ldr	r3, [pc, #352]	; (8013714 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80135b4:	685b      	ldr	r3, [r3, #4]
 80135b6:	099b      	lsrs	r3, r3, #6
 80135b8:	461a      	mov	r2, r3
 80135ba:	f04f 0300 	mov.w	r3, #0
 80135be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80135c2:	f04f 0100 	mov.w	r1, #0
 80135c6:	ea02 0800 	and.w	r8, r2, r0
 80135ca:	ea03 0901 	and.w	r9, r3, r1
 80135ce:	4640      	mov	r0, r8
 80135d0:	4649      	mov	r1, r9
 80135d2:	f04f 0200 	mov.w	r2, #0
 80135d6:	f04f 0300 	mov.w	r3, #0
 80135da:	014b      	lsls	r3, r1, #5
 80135dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80135e0:	0142      	lsls	r2, r0, #5
 80135e2:	4610      	mov	r0, r2
 80135e4:	4619      	mov	r1, r3
 80135e6:	ebb0 0008 	subs.w	r0, r0, r8
 80135ea:	eb61 0109 	sbc.w	r1, r1, r9
 80135ee:	f04f 0200 	mov.w	r2, #0
 80135f2:	f04f 0300 	mov.w	r3, #0
 80135f6:	018b      	lsls	r3, r1, #6
 80135f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80135fc:	0182      	lsls	r2, r0, #6
 80135fe:	1a12      	subs	r2, r2, r0
 8013600:	eb63 0301 	sbc.w	r3, r3, r1
 8013604:	f04f 0000 	mov.w	r0, #0
 8013608:	f04f 0100 	mov.w	r1, #0
 801360c:	00d9      	lsls	r1, r3, #3
 801360e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013612:	00d0      	lsls	r0, r2, #3
 8013614:	4602      	mov	r2, r0
 8013616:	460b      	mov	r3, r1
 8013618:	eb12 0208 	adds.w	r2, r2, r8
 801361c:	eb43 0309 	adc.w	r3, r3, r9
 8013620:	f04f 0000 	mov.w	r0, #0
 8013624:	f04f 0100 	mov.w	r1, #0
 8013628:	0259      	lsls	r1, r3, #9
 801362a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 801362e:	0250      	lsls	r0, r2, #9
 8013630:	4602      	mov	r2, r0
 8013632:	460b      	mov	r3, r1
 8013634:	4610      	mov	r0, r2
 8013636:	4619      	mov	r1, r3
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	461a      	mov	r2, r3
 801363c:	f04f 0300 	mov.w	r3, #0
 8013640:	f7f8 fd56 	bl	800c0f0 <__aeabi_uldivmod>
 8013644:	4602      	mov	r2, r0
 8013646:	460b      	mov	r3, r1
 8013648:	4613      	mov	r3, r2
 801364a:	60fb      	str	r3, [r7, #12]
 801364c:	e04a      	b.n	80136e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801364e:	4b31      	ldr	r3, [pc, #196]	; (8013714 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8013650:	685b      	ldr	r3, [r3, #4]
 8013652:	099b      	lsrs	r3, r3, #6
 8013654:	461a      	mov	r2, r3
 8013656:	f04f 0300 	mov.w	r3, #0
 801365a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801365e:	f04f 0100 	mov.w	r1, #0
 8013662:	ea02 0400 	and.w	r4, r2, r0
 8013666:	ea03 0501 	and.w	r5, r3, r1
 801366a:	4620      	mov	r0, r4
 801366c:	4629      	mov	r1, r5
 801366e:	f04f 0200 	mov.w	r2, #0
 8013672:	f04f 0300 	mov.w	r3, #0
 8013676:	014b      	lsls	r3, r1, #5
 8013678:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801367c:	0142      	lsls	r2, r0, #5
 801367e:	4610      	mov	r0, r2
 8013680:	4619      	mov	r1, r3
 8013682:	1b00      	subs	r0, r0, r4
 8013684:	eb61 0105 	sbc.w	r1, r1, r5
 8013688:	f04f 0200 	mov.w	r2, #0
 801368c:	f04f 0300 	mov.w	r3, #0
 8013690:	018b      	lsls	r3, r1, #6
 8013692:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8013696:	0182      	lsls	r2, r0, #6
 8013698:	1a12      	subs	r2, r2, r0
 801369a:	eb63 0301 	sbc.w	r3, r3, r1
 801369e:	f04f 0000 	mov.w	r0, #0
 80136a2:	f04f 0100 	mov.w	r1, #0
 80136a6:	00d9      	lsls	r1, r3, #3
 80136a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80136ac:	00d0      	lsls	r0, r2, #3
 80136ae:	4602      	mov	r2, r0
 80136b0:	460b      	mov	r3, r1
 80136b2:	1912      	adds	r2, r2, r4
 80136b4:	eb45 0303 	adc.w	r3, r5, r3
 80136b8:	f04f 0000 	mov.w	r0, #0
 80136bc:	f04f 0100 	mov.w	r1, #0
 80136c0:	0299      	lsls	r1, r3, #10
 80136c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80136c6:	0290      	lsls	r0, r2, #10
 80136c8:	4602      	mov	r2, r0
 80136ca:	460b      	mov	r3, r1
 80136cc:	4610      	mov	r0, r2
 80136ce:	4619      	mov	r1, r3
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	461a      	mov	r2, r3
 80136d4:	f04f 0300 	mov.w	r3, #0
 80136d8:	f7f8 fd0a 	bl	800c0f0 <__aeabi_uldivmod>
 80136dc:	4602      	mov	r2, r0
 80136de:	460b      	mov	r3, r1
 80136e0:	4613      	mov	r3, r2
 80136e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80136e4:	4b0b      	ldr	r3, [pc, #44]	; (8013714 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80136e6:	685b      	ldr	r3, [r3, #4]
 80136e8:	0c1b      	lsrs	r3, r3, #16
 80136ea:	f003 0303 	and.w	r3, r3, #3
 80136ee:	3301      	adds	r3, #1
 80136f0:	005b      	lsls	r3, r3, #1
 80136f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80136f4:	68fa      	ldr	r2, [r7, #12]
 80136f6:	683b      	ldr	r3, [r7, #0]
 80136f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80136fc:	60bb      	str	r3, [r7, #8]
      break;
 80136fe:	e002      	b.n	8013706 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8013700:	4b05      	ldr	r3, [pc, #20]	; (8013718 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8013702:	60bb      	str	r3, [r7, #8]
      break;
 8013704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8013706:	68bb      	ldr	r3, [r7, #8]
}
 8013708:	4618      	mov	r0, r3
 801370a:	3710      	adds	r7, #16
 801370c:	46bd      	mov	sp, r7
 801370e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8013712:	bf00      	nop
 8013714:	40023800 	.word	0x40023800
 8013718:	00f42400 	.word	0x00f42400
 801371c:	007a1200 	.word	0x007a1200

08013720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013720:	b480      	push	{r7}
 8013722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013724:	4b03      	ldr	r3, [pc, #12]	; (8013734 <HAL_RCC_GetHCLKFreq+0x14>)
 8013726:	681b      	ldr	r3, [r3, #0]
}
 8013728:	4618      	mov	r0, r3
 801372a:	46bd      	mov	sp, r7
 801372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013730:	4770      	bx	lr
 8013732:	bf00      	nop
 8013734:	20000000 	.word	0x20000000

08013738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013738:	b580      	push	{r7, lr}
 801373a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801373c:	f7ff fff0 	bl	8013720 <HAL_RCC_GetHCLKFreq>
 8013740:	4602      	mov	r2, r0
 8013742:	4b05      	ldr	r3, [pc, #20]	; (8013758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8013744:	689b      	ldr	r3, [r3, #8]
 8013746:	0a9b      	lsrs	r3, r3, #10
 8013748:	f003 0307 	and.w	r3, r3, #7
 801374c:	4903      	ldr	r1, [pc, #12]	; (801375c <HAL_RCC_GetPCLK1Freq+0x24>)
 801374e:	5ccb      	ldrb	r3, [r1, r3]
 8013750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013754:	4618      	mov	r0, r3
 8013756:	bd80      	pop	{r7, pc}
 8013758:	40023800 	.word	0x40023800
 801375c:	0801eb10 	.word	0x0801eb10

08013760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013760:	b580      	push	{r7, lr}
 8013762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8013764:	f7ff ffdc 	bl	8013720 <HAL_RCC_GetHCLKFreq>
 8013768:	4602      	mov	r2, r0
 801376a:	4b05      	ldr	r3, [pc, #20]	; (8013780 <HAL_RCC_GetPCLK2Freq+0x20>)
 801376c:	689b      	ldr	r3, [r3, #8]
 801376e:	0b5b      	lsrs	r3, r3, #13
 8013770:	f003 0307 	and.w	r3, r3, #7
 8013774:	4903      	ldr	r1, [pc, #12]	; (8013784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8013776:	5ccb      	ldrb	r3, [r1, r3]
 8013778:	fa22 f303 	lsr.w	r3, r2, r3
}
 801377c:	4618      	mov	r0, r3
 801377e:	bd80      	pop	{r7, pc}
 8013780:	40023800 	.word	0x40023800
 8013784:	0801eb10 	.word	0x0801eb10

08013788 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8013788:	b480      	push	{r7}
 801378a:	b083      	sub	sp, #12
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	220f      	movs	r2, #15
 8013796:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8013798:	4b12      	ldr	r3, [pc, #72]	; (80137e4 <HAL_RCC_GetClockConfig+0x5c>)
 801379a:	689b      	ldr	r3, [r3, #8]
 801379c:	f003 0203 	and.w	r2, r3, #3
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80137a4:	4b0f      	ldr	r3, [pc, #60]	; (80137e4 <HAL_RCC_GetClockConfig+0x5c>)
 80137a6:	689b      	ldr	r3, [r3, #8]
 80137a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80137b0:	4b0c      	ldr	r3, [pc, #48]	; (80137e4 <HAL_RCC_GetClockConfig+0x5c>)
 80137b2:	689b      	ldr	r3, [r3, #8]
 80137b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80137bc:	4b09      	ldr	r3, [pc, #36]	; (80137e4 <HAL_RCC_GetClockConfig+0x5c>)
 80137be:	689b      	ldr	r3, [r3, #8]
 80137c0:	08db      	lsrs	r3, r3, #3
 80137c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80137ca:	4b07      	ldr	r3, [pc, #28]	; (80137e8 <HAL_RCC_GetClockConfig+0x60>)
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	f003 0207 	and.w	r2, r3, #7
 80137d2:	683b      	ldr	r3, [r7, #0]
 80137d4:	601a      	str	r2, [r3, #0]
}
 80137d6:	bf00      	nop
 80137d8:	370c      	adds	r7, #12
 80137da:	46bd      	mov	sp, r7
 80137dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e0:	4770      	bx	lr
 80137e2:	bf00      	nop
 80137e4:	40023800 	.word	0x40023800
 80137e8:	40023c00 	.word	0x40023c00

080137ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b082      	sub	sp, #8
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d101      	bne.n	80137fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80137fa:	2301      	movs	r3, #1
 80137fc:	e07b      	b.n	80138f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013802:	2b00      	cmp	r3, #0
 8013804:	d108      	bne.n	8013818 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	685b      	ldr	r3, [r3, #4]
 801380a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801380e:	d009      	beq.n	8013824 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	2200      	movs	r2, #0
 8013814:	61da      	str	r2, [r3, #28]
 8013816:	e005      	b.n	8013824 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	2200      	movs	r2, #0
 801381c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	2200      	movs	r2, #0
 8013822:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	2200      	movs	r2, #0
 8013828:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013830:	b2db      	uxtb	r3, r3
 8013832:	2b00      	cmp	r3, #0
 8013834:	d106      	bne.n	8013844 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	2200      	movs	r2, #0
 801383a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f7fa fd4a 	bl	800e2d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	2202      	movs	r2, #2
 8013848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	681a      	ldr	r2, [r3, #0]
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801385a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	685b      	ldr	r3, [r3, #4]
 8013860:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	689b      	ldr	r3, [r3, #8]
 8013868:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801386c:	431a      	orrs	r2, r3
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	68db      	ldr	r3, [r3, #12]
 8013872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013876:	431a      	orrs	r2, r3
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	691b      	ldr	r3, [r3, #16]
 801387c:	f003 0302 	and.w	r3, r3, #2
 8013880:	431a      	orrs	r2, r3
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	695b      	ldr	r3, [r3, #20]
 8013886:	f003 0301 	and.w	r3, r3, #1
 801388a:	431a      	orrs	r2, r3
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	699b      	ldr	r3, [r3, #24]
 8013890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013894:	431a      	orrs	r2, r3
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	69db      	ldr	r3, [r3, #28]
 801389a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801389e:	431a      	orrs	r2, r3
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6a1b      	ldr	r3, [r3, #32]
 80138a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80138a8:	ea42 0103 	orr.w	r1, r2, r3
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	430a      	orrs	r2, r1
 80138ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	699b      	ldr	r3, [r3, #24]
 80138c0:	0c1b      	lsrs	r3, r3, #16
 80138c2:	f003 0104 	and.w	r1, r3, #4
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ca:	f003 0210 	and.w	r2, r3, #16
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	430a      	orrs	r2, r1
 80138d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	69da      	ldr	r2, [r3, #28]
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80138e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	2200      	movs	r2, #0
 80138ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2201      	movs	r2, #1
 80138f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80138f4:	2300      	movs	r3, #0
}
 80138f6:	4618      	mov	r0, r3
 80138f8:	3708      	adds	r7, #8
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bd80      	pop	{r7, pc}

080138fe <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80138fe:	b580      	push	{r7, lr}
 8013900:	b082      	sub	sp, #8
 8013902:	af00      	add	r7, sp, #0
 8013904:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d101      	bne.n	8013910 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 801390c:	2301      	movs	r3, #1
 801390e:	e01a      	b.n	8013946 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	2202      	movs	r2, #2
 8013914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	681a      	ldr	r2, [r3, #0]
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013926:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	f7fa fd53 	bl	800e3d4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	2200      	movs	r2, #0
 8013932:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2200      	movs	r2, #0
 8013938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2200      	movs	r2, #0
 8013940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8013944:	2300      	movs	r3, #0
}
 8013946:	4618      	mov	r0, r3
 8013948:	3708      	adds	r7, #8
 801394a:	46bd      	mov	sp, r7
 801394c:	bd80      	pop	{r7, pc}

0801394e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801394e:	b580      	push	{r7, lr}
 8013950:	b088      	sub	sp, #32
 8013952:	af00      	add	r7, sp, #0
 8013954:	60f8      	str	r0, [r7, #12]
 8013956:	60b9      	str	r1, [r7, #8]
 8013958:	603b      	str	r3, [r7, #0]
 801395a:	4613      	mov	r3, r2
 801395c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801395e:	2300      	movs	r3, #0
 8013960:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013968:	2b01      	cmp	r3, #1
 801396a:	d101      	bne.n	8013970 <HAL_SPI_Transmit+0x22>
 801396c:	2302      	movs	r3, #2
 801396e:	e126      	b.n	8013bbe <HAL_SPI_Transmit+0x270>
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	2201      	movs	r2, #1
 8013974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013978:	f7fc feea 	bl	8010750 <HAL_GetTick>
 801397c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801397e:	88fb      	ldrh	r3, [r7, #6]
 8013980:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013988:	b2db      	uxtb	r3, r3
 801398a:	2b01      	cmp	r3, #1
 801398c:	d002      	beq.n	8013994 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801398e:	2302      	movs	r3, #2
 8013990:	77fb      	strb	r3, [r7, #31]
    goto error;
 8013992:	e10b      	b.n	8013bac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d002      	beq.n	80139a0 <HAL_SPI_Transmit+0x52>
 801399a:	88fb      	ldrh	r3, [r7, #6]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d102      	bne.n	80139a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80139a0:	2301      	movs	r3, #1
 80139a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80139a4:	e102      	b.n	8013bac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	2203      	movs	r2, #3
 80139aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	2200      	movs	r2, #0
 80139b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	68ba      	ldr	r2, [r7, #8]
 80139b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	88fa      	ldrh	r2, [r7, #6]
 80139be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	88fa      	ldrh	r2, [r7, #6]
 80139c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	2200      	movs	r2, #0
 80139ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	2200      	movs	r2, #0
 80139d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	2200      	movs	r2, #0
 80139d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	2200      	movs	r2, #0
 80139dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	2200      	movs	r2, #0
 80139e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	689b      	ldr	r3, [r3, #8]
 80139e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80139ec:	d10f      	bne.n	8013a0e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	681a      	ldr	r2, [r3, #0]
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80139fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	681a      	ldr	r2, [r3, #0]
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013a0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a18:	2b40      	cmp	r3, #64	; 0x40
 8013a1a:	d007      	beq.n	8013a2c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	681a      	ldr	r2, [r3, #0]
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013a2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	68db      	ldr	r3, [r3, #12]
 8013a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013a34:	d14b      	bne.n	8013ace <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	685b      	ldr	r3, [r3, #4]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d002      	beq.n	8013a44 <HAL_SPI_Transmit+0xf6>
 8013a3e:	8afb      	ldrh	r3, [r7, #22]
 8013a40:	2b01      	cmp	r3, #1
 8013a42:	d13e      	bne.n	8013ac2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a48:	881a      	ldrh	r2, [r3, #0]
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a54:	1c9a      	adds	r2, r3, #2
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013a5e:	b29b      	uxth	r3, r3
 8013a60:	3b01      	subs	r3, #1
 8013a62:	b29a      	uxth	r2, r3
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8013a68:	e02b      	b.n	8013ac2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	689b      	ldr	r3, [r3, #8]
 8013a70:	f003 0302 	and.w	r3, r3, #2
 8013a74:	2b02      	cmp	r3, #2
 8013a76:	d112      	bne.n	8013a9e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a7c:	881a      	ldrh	r2, [r3, #0]
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a88:	1c9a      	adds	r2, r3, #2
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013a92:	b29b      	uxth	r3, r3
 8013a94:	3b01      	subs	r3, #1
 8013a96:	b29a      	uxth	r2, r3
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8013a9c:	e011      	b.n	8013ac2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013a9e:	f7fc fe57 	bl	8010750 <HAL_GetTick>
 8013aa2:	4602      	mov	r2, r0
 8013aa4:	69bb      	ldr	r3, [r7, #24]
 8013aa6:	1ad3      	subs	r3, r2, r3
 8013aa8:	683a      	ldr	r2, [r7, #0]
 8013aaa:	429a      	cmp	r2, r3
 8013aac:	d803      	bhi.n	8013ab6 <HAL_SPI_Transmit+0x168>
 8013aae:	683b      	ldr	r3, [r7, #0]
 8013ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ab4:	d102      	bne.n	8013abc <HAL_SPI_Transmit+0x16e>
 8013ab6:	683b      	ldr	r3, [r7, #0]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d102      	bne.n	8013ac2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8013abc:	2303      	movs	r3, #3
 8013abe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013ac0:	e074      	b.n	8013bac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013ac6:	b29b      	uxth	r3, r3
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d1ce      	bne.n	8013a6a <HAL_SPI_Transmit+0x11c>
 8013acc:	e04c      	b.n	8013b68 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	685b      	ldr	r3, [r3, #4]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d002      	beq.n	8013adc <HAL_SPI_Transmit+0x18e>
 8013ad6:	8afb      	ldrh	r3, [r7, #22]
 8013ad8:	2b01      	cmp	r3, #1
 8013ada:	d140      	bne.n	8013b5e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	330c      	adds	r3, #12
 8013ae6:	7812      	ldrb	r2, [r2, #0]
 8013ae8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013aee:	1c5a      	adds	r2, r3, #1
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013af8:	b29b      	uxth	r3, r3
 8013afa:	3b01      	subs	r3, #1
 8013afc:	b29a      	uxth	r2, r3
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8013b02:	e02c      	b.n	8013b5e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	689b      	ldr	r3, [r3, #8]
 8013b0a:	f003 0302 	and.w	r3, r3, #2
 8013b0e:	2b02      	cmp	r3, #2
 8013b10:	d113      	bne.n	8013b3a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	330c      	adds	r3, #12
 8013b1c:	7812      	ldrb	r2, [r2, #0]
 8013b1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b24:	1c5a      	adds	r2, r3, #1
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013b2e:	b29b      	uxth	r3, r3
 8013b30:	3b01      	subs	r3, #1
 8013b32:	b29a      	uxth	r2, r3
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	86da      	strh	r2, [r3, #54]	; 0x36
 8013b38:	e011      	b.n	8013b5e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013b3a:	f7fc fe09 	bl	8010750 <HAL_GetTick>
 8013b3e:	4602      	mov	r2, r0
 8013b40:	69bb      	ldr	r3, [r7, #24]
 8013b42:	1ad3      	subs	r3, r2, r3
 8013b44:	683a      	ldr	r2, [r7, #0]
 8013b46:	429a      	cmp	r2, r3
 8013b48:	d803      	bhi.n	8013b52 <HAL_SPI_Transmit+0x204>
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b50:	d102      	bne.n	8013b58 <HAL_SPI_Transmit+0x20a>
 8013b52:	683b      	ldr	r3, [r7, #0]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d102      	bne.n	8013b5e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8013b58:	2303      	movs	r3, #3
 8013b5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013b5c:	e026      	b.n	8013bac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013b62:	b29b      	uxth	r3, r3
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d1cd      	bne.n	8013b04 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013b68:	69ba      	ldr	r2, [r7, #24]
 8013b6a:	6839      	ldr	r1, [r7, #0]
 8013b6c:	68f8      	ldr	r0, [r7, #12]
 8013b6e:	f000 fbcb 	bl	8014308 <SPI_EndRxTxTransaction>
 8013b72:	4603      	mov	r3, r0
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d002      	beq.n	8013b7e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	2220      	movs	r2, #32
 8013b7c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	689b      	ldr	r3, [r3, #8]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d10a      	bne.n	8013b9c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013b86:	2300      	movs	r3, #0
 8013b88:	613b      	str	r3, [r7, #16]
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	68db      	ldr	r3, [r3, #12]
 8013b90:	613b      	str	r3, [r7, #16]
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	689b      	ldr	r3, [r3, #8]
 8013b98:	613b      	str	r3, [r7, #16]
 8013b9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d002      	beq.n	8013baa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	77fb      	strb	r3, [r7, #31]
 8013ba8:	e000      	b.n	8013bac <HAL_SPI_Transmit+0x25e>
  }

error:
 8013baa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	2201      	movs	r2, #1
 8013bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013bbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	3720      	adds	r7, #32
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	bd80      	pop	{r7, pc}

08013bc6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013bc6:	b580      	push	{r7, lr}
 8013bc8:	b088      	sub	sp, #32
 8013bca:	af02      	add	r7, sp, #8
 8013bcc:	60f8      	str	r0, [r7, #12]
 8013bce:	60b9      	str	r1, [r7, #8]
 8013bd0:	603b      	str	r3, [r7, #0]
 8013bd2:	4613      	mov	r3, r2
 8013bd4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	685b      	ldr	r3, [r3, #4]
 8013bde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013be2:	d112      	bne.n	8013c0a <HAL_SPI_Receive+0x44>
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	689b      	ldr	r3, [r3, #8]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d10e      	bne.n	8013c0a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	2204      	movs	r2, #4
 8013bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8013bf4:	88fa      	ldrh	r2, [r7, #6]
 8013bf6:	683b      	ldr	r3, [r7, #0]
 8013bf8:	9300      	str	r3, [sp, #0]
 8013bfa:	4613      	mov	r3, r2
 8013bfc:	68ba      	ldr	r2, [r7, #8]
 8013bfe:	68b9      	ldr	r1, [r7, #8]
 8013c00:	68f8      	ldr	r0, [r7, #12]
 8013c02:	f000 f8f1 	bl	8013de8 <HAL_SPI_TransmitReceive>
 8013c06:	4603      	mov	r3, r0
 8013c08:	e0ea      	b.n	8013de0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013c10:	2b01      	cmp	r3, #1
 8013c12:	d101      	bne.n	8013c18 <HAL_SPI_Receive+0x52>
 8013c14:	2302      	movs	r3, #2
 8013c16:	e0e3      	b.n	8013de0 <HAL_SPI_Receive+0x21a>
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	2201      	movs	r2, #1
 8013c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013c20:	f7fc fd96 	bl	8010750 <HAL_GetTick>
 8013c24:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013c2c:	b2db      	uxtb	r3, r3
 8013c2e:	2b01      	cmp	r3, #1
 8013c30:	d002      	beq.n	8013c38 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8013c32:	2302      	movs	r3, #2
 8013c34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013c36:	e0ca      	b.n	8013dce <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8013c38:	68bb      	ldr	r3, [r7, #8]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d002      	beq.n	8013c44 <HAL_SPI_Receive+0x7e>
 8013c3e:	88fb      	ldrh	r3, [r7, #6]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d102      	bne.n	8013c4a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8013c44:	2301      	movs	r3, #1
 8013c46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013c48:	e0c1      	b.n	8013dce <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	2204      	movs	r2, #4
 8013c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	2200      	movs	r2, #0
 8013c56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	68ba      	ldr	r2, [r7, #8]
 8013c5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	88fa      	ldrh	r2, [r7, #6]
 8013c62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	88fa      	ldrh	r2, [r7, #6]
 8013c68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	2200      	movs	r2, #0
 8013c74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	2200      	movs	r2, #0
 8013c7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	2200      	movs	r2, #0
 8013c80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	2200      	movs	r2, #0
 8013c86:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	689b      	ldr	r3, [r3, #8]
 8013c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013c90:	d10f      	bne.n	8013cb2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	681a      	ldr	r2, [r3, #0]
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013ca0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	681a      	ldr	r2, [r3, #0]
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013cb0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013cbc:	2b40      	cmp	r3, #64	; 0x40
 8013cbe:	d007      	beq.n	8013cd0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	681a      	ldr	r2, [r3, #0]
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013cce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	68db      	ldr	r3, [r3, #12]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d162      	bne.n	8013d9e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8013cd8:	e02e      	b.n	8013d38 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	689b      	ldr	r3, [r3, #8]
 8013ce0:	f003 0301 	and.w	r3, r3, #1
 8013ce4:	2b01      	cmp	r3, #1
 8013ce6:	d115      	bne.n	8013d14 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	f103 020c 	add.w	r2, r3, #12
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cf4:	7812      	ldrb	r2, [r2, #0]
 8013cf6:	b2d2      	uxtb	r2, r2
 8013cf8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cfe:	1c5a      	adds	r2, r3, #1
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013d08:	b29b      	uxth	r3, r3
 8013d0a:	3b01      	subs	r3, #1
 8013d0c:	b29a      	uxth	r2, r3
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013d12:	e011      	b.n	8013d38 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013d14:	f7fc fd1c 	bl	8010750 <HAL_GetTick>
 8013d18:	4602      	mov	r2, r0
 8013d1a:	693b      	ldr	r3, [r7, #16]
 8013d1c:	1ad3      	subs	r3, r2, r3
 8013d1e:	683a      	ldr	r2, [r7, #0]
 8013d20:	429a      	cmp	r2, r3
 8013d22:	d803      	bhi.n	8013d2c <HAL_SPI_Receive+0x166>
 8013d24:	683b      	ldr	r3, [r7, #0]
 8013d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d2a:	d102      	bne.n	8013d32 <HAL_SPI_Receive+0x16c>
 8013d2c:	683b      	ldr	r3, [r7, #0]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d102      	bne.n	8013d38 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8013d32:	2303      	movs	r3, #3
 8013d34:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013d36:	e04a      	b.n	8013dce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013d3c:	b29b      	uxth	r3, r3
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d1cb      	bne.n	8013cda <HAL_SPI_Receive+0x114>
 8013d42:	e031      	b.n	8013da8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	689b      	ldr	r3, [r3, #8]
 8013d4a:	f003 0301 	and.w	r3, r3, #1
 8013d4e:	2b01      	cmp	r3, #1
 8013d50:	d113      	bne.n	8013d7a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	68da      	ldr	r2, [r3, #12]
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d5c:	b292      	uxth	r2, r2
 8013d5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d64:	1c9a      	adds	r2, r3, #2
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013d6e:	b29b      	uxth	r3, r3
 8013d70:	3b01      	subs	r3, #1
 8013d72:	b29a      	uxth	r2, r3
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013d78:	e011      	b.n	8013d9e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013d7a:	f7fc fce9 	bl	8010750 <HAL_GetTick>
 8013d7e:	4602      	mov	r2, r0
 8013d80:	693b      	ldr	r3, [r7, #16]
 8013d82:	1ad3      	subs	r3, r2, r3
 8013d84:	683a      	ldr	r2, [r7, #0]
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d803      	bhi.n	8013d92 <HAL_SPI_Receive+0x1cc>
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d90:	d102      	bne.n	8013d98 <HAL_SPI_Receive+0x1d2>
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d102      	bne.n	8013d9e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8013d98:	2303      	movs	r3, #3
 8013d9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013d9c:	e017      	b.n	8013dce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013da2:	b29b      	uxth	r3, r3
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d1cd      	bne.n	8013d44 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013da8:	693a      	ldr	r2, [r7, #16]
 8013daa:	6839      	ldr	r1, [r7, #0]
 8013dac:	68f8      	ldr	r0, [r7, #12]
 8013dae:	f000 fa45 	bl	801423c <SPI_EndRxTransaction>
 8013db2:	4603      	mov	r3, r0
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d002      	beq.n	8013dbe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	2220      	movs	r2, #32
 8013dbc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d002      	beq.n	8013dcc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8013dc6:	2301      	movs	r3, #1
 8013dc8:	75fb      	strb	r3, [r7, #23]
 8013dca:	e000      	b.n	8013dce <HAL_SPI_Receive+0x208>
  }

error :
 8013dcc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	2201      	movs	r2, #1
 8013dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	2200      	movs	r2, #0
 8013dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8013de0:	4618      	mov	r0, r3
 8013de2:	3718      	adds	r7, #24
 8013de4:	46bd      	mov	sp, r7
 8013de6:	bd80      	pop	{r7, pc}

08013de8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b08c      	sub	sp, #48	; 0x30
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	60f8      	str	r0, [r7, #12]
 8013df0:	60b9      	str	r1, [r7, #8]
 8013df2:	607a      	str	r2, [r7, #4]
 8013df4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8013df6:	2301      	movs	r3, #1
 8013df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013e06:	2b01      	cmp	r3, #1
 8013e08:	d101      	bne.n	8013e0e <HAL_SPI_TransmitReceive+0x26>
 8013e0a:	2302      	movs	r3, #2
 8013e0c:	e18a      	b.n	8014124 <HAL_SPI_TransmitReceive+0x33c>
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	2201      	movs	r2, #1
 8013e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013e16:	f7fc fc9b 	bl	8010750 <HAL_GetTick>
 8013e1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	685b      	ldr	r3, [r3, #4]
 8013e2a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8013e2c:	887b      	ldrh	r3, [r7, #2]
 8013e2e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013e30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013e34:	2b01      	cmp	r3, #1
 8013e36:	d00f      	beq.n	8013e58 <HAL_SPI_TransmitReceive+0x70>
 8013e38:	69fb      	ldr	r3, [r7, #28]
 8013e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013e3e:	d107      	bne.n	8013e50 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	689b      	ldr	r3, [r3, #8]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d103      	bne.n	8013e50 <HAL_SPI_TransmitReceive+0x68>
 8013e48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013e4c:	2b04      	cmp	r3, #4
 8013e4e:	d003      	beq.n	8013e58 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8013e50:	2302      	movs	r3, #2
 8013e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013e56:	e15b      	b.n	8014110 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013e58:	68bb      	ldr	r3, [r7, #8]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d005      	beq.n	8013e6a <HAL_SPI_TransmitReceive+0x82>
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d002      	beq.n	8013e6a <HAL_SPI_TransmitReceive+0x82>
 8013e64:	887b      	ldrh	r3, [r7, #2]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d103      	bne.n	8013e72 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8013e6a:	2301      	movs	r3, #1
 8013e6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013e70:	e14e      	b.n	8014110 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013e78:	b2db      	uxtb	r3, r3
 8013e7a:	2b04      	cmp	r3, #4
 8013e7c:	d003      	beq.n	8013e86 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	2205      	movs	r2, #5
 8013e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	2200      	movs	r2, #0
 8013e8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	687a      	ldr	r2, [r7, #4]
 8013e90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	887a      	ldrh	r2, [r7, #2]
 8013e96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	887a      	ldrh	r2, [r7, #2]
 8013e9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	68ba      	ldr	r2, [r7, #8]
 8013ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	887a      	ldrh	r2, [r7, #2]
 8013ea8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	887a      	ldrh	r2, [r7, #2]
 8013eae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	2200      	movs	r2, #0
 8013eba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ec6:	2b40      	cmp	r3, #64	; 0x40
 8013ec8:	d007      	beq.n	8013eda <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	681a      	ldr	r2, [r3, #0]
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013ed8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	68db      	ldr	r3, [r3, #12]
 8013ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013ee2:	d178      	bne.n	8013fd6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	685b      	ldr	r3, [r3, #4]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d002      	beq.n	8013ef2 <HAL_SPI_TransmitReceive+0x10a>
 8013eec:	8b7b      	ldrh	r3, [r7, #26]
 8013eee:	2b01      	cmp	r3, #1
 8013ef0:	d166      	bne.n	8013fc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ef6:	881a      	ldrh	r2, [r3, #0]
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f02:	1c9a      	adds	r2, r3, #2
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013f0c:	b29b      	uxth	r3, r3
 8013f0e:	3b01      	subs	r3, #1
 8013f10:	b29a      	uxth	r2, r3
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013f16:	e053      	b.n	8013fc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	689b      	ldr	r3, [r3, #8]
 8013f1e:	f003 0302 	and.w	r3, r3, #2
 8013f22:	2b02      	cmp	r3, #2
 8013f24:	d11b      	bne.n	8013f5e <HAL_SPI_TransmitReceive+0x176>
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013f2a:	b29b      	uxth	r3, r3
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d016      	beq.n	8013f5e <HAL_SPI_TransmitReceive+0x176>
 8013f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f32:	2b01      	cmp	r3, #1
 8013f34:	d113      	bne.n	8013f5e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f3a:	881a      	ldrh	r2, [r3, #0]
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f46:	1c9a      	adds	r2, r3, #2
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013f50:	b29b      	uxth	r3, r3
 8013f52:	3b01      	subs	r3, #1
 8013f54:	b29a      	uxth	r2, r3
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	689b      	ldr	r3, [r3, #8]
 8013f64:	f003 0301 	and.w	r3, r3, #1
 8013f68:	2b01      	cmp	r3, #1
 8013f6a:	d119      	bne.n	8013fa0 <HAL_SPI_TransmitReceive+0x1b8>
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013f70:	b29b      	uxth	r3, r3
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d014      	beq.n	8013fa0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	68da      	ldr	r2, [r3, #12]
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f80:	b292      	uxth	r2, r2
 8013f82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f88:	1c9a      	adds	r2, r3, #2
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013f92:	b29b      	uxth	r3, r3
 8013f94:	3b01      	subs	r3, #1
 8013f96:	b29a      	uxth	r2, r3
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8013fa0:	f7fc fbd6 	bl	8010750 <HAL_GetTick>
 8013fa4:	4602      	mov	r2, r0
 8013fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa8:	1ad3      	subs	r3, r2, r3
 8013faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013fac:	429a      	cmp	r2, r3
 8013fae:	d807      	bhi.n	8013fc0 <HAL_SPI_TransmitReceive+0x1d8>
 8013fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fb6:	d003      	beq.n	8013fc0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8013fb8:	2303      	movs	r3, #3
 8013fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013fbe:	e0a7      	b.n	8014110 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013fc4:	b29b      	uxth	r3, r3
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d1a6      	bne.n	8013f18 <HAL_SPI_TransmitReceive+0x130>
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013fce:	b29b      	uxth	r3, r3
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d1a1      	bne.n	8013f18 <HAL_SPI_TransmitReceive+0x130>
 8013fd4:	e07c      	b.n	80140d0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	685b      	ldr	r3, [r3, #4]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d002      	beq.n	8013fe4 <HAL_SPI_TransmitReceive+0x1fc>
 8013fde:	8b7b      	ldrh	r3, [r7, #26]
 8013fe0:	2b01      	cmp	r3, #1
 8013fe2:	d16b      	bne.n	80140bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	330c      	adds	r3, #12
 8013fee:	7812      	ldrb	r2, [r2, #0]
 8013ff0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ff6:	1c5a      	adds	r2, r3, #1
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014000:	b29b      	uxth	r3, r3
 8014002:	3b01      	subs	r3, #1
 8014004:	b29a      	uxth	r2, r3
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801400a:	e057      	b.n	80140bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	689b      	ldr	r3, [r3, #8]
 8014012:	f003 0302 	and.w	r3, r3, #2
 8014016:	2b02      	cmp	r3, #2
 8014018:	d11c      	bne.n	8014054 <HAL_SPI_TransmitReceive+0x26c>
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801401e:	b29b      	uxth	r3, r3
 8014020:	2b00      	cmp	r3, #0
 8014022:	d017      	beq.n	8014054 <HAL_SPI_TransmitReceive+0x26c>
 8014024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014026:	2b01      	cmp	r3, #1
 8014028:	d114      	bne.n	8014054 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	330c      	adds	r3, #12
 8014034:	7812      	ldrb	r2, [r2, #0]
 8014036:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801403c:	1c5a      	adds	r2, r3, #1
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014046:	b29b      	uxth	r3, r3
 8014048:	3b01      	subs	r3, #1
 801404a:	b29a      	uxth	r2, r3
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8014050:	2300      	movs	r3, #0
 8014052:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	689b      	ldr	r3, [r3, #8]
 801405a:	f003 0301 	and.w	r3, r3, #1
 801405e:	2b01      	cmp	r3, #1
 8014060:	d119      	bne.n	8014096 <HAL_SPI_TransmitReceive+0x2ae>
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014066:	b29b      	uxth	r3, r3
 8014068:	2b00      	cmp	r3, #0
 801406a:	d014      	beq.n	8014096 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	68da      	ldr	r2, [r3, #12]
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014076:	b2d2      	uxtb	r2, r2
 8014078:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801407e:	1c5a      	adds	r2, r3, #1
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014088:	b29b      	uxth	r3, r3
 801408a:	3b01      	subs	r3, #1
 801408c:	b29a      	uxth	r2, r3
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8014092:	2301      	movs	r3, #1
 8014094:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8014096:	f7fc fb5b 	bl	8010750 <HAL_GetTick>
 801409a:	4602      	mov	r2, r0
 801409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801409e:	1ad3      	subs	r3, r2, r3
 80140a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80140a2:	429a      	cmp	r2, r3
 80140a4:	d803      	bhi.n	80140ae <HAL_SPI_TransmitReceive+0x2c6>
 80140a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140ac:	d102      	bne.n	80140b4 <HAL_SPI_TransmitReceive+0x2cc>
 80140ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d103      	bne.n	80140bc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80140b4:	2303      	movs	r3, #3
 80140b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80140ba:	e029      	b.n	8014110 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80140c0:	b29b      	uxth	r3, r3
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d1a2      	bne.n	801400c <HAL_SPI_TransmitReceive+0x224>
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80140ca:	b29b      	uxth	r3, r3
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d19d      	bne.n	801400c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80140d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80140d4:	68f8      	ldr	r0, [r7, #12]
 80140d6:	f000 f917 	bl	8014308 <SPI_EndRxTxTransaction>
 80140da:	4603      	mov	r3, r0
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d006      	beq.n	80140ee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80140e0:	2301      	movs	r3, #1
 80140e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	2220      	movs	r2, #32
 80140ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80140ec:	e010      	b.n	8014110 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	689b      	ldr	r3, [r3, #8]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d10b      	bne.n	801410e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80140f6:	2300      	movs	r3, #0
 80140f8:	617b      	str	r3, [r7, #20]
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	68db      	ldr	r3, [r3, #12]
 8014100:	617b      	str	r3, [r7, #20]
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	689b      	ldr	r3, [r3, #8]
 8014108:	617b      	str	r3, [r7, #20]
 801410a:	697b      	ldr	r3, [r7, #20]
 801410c:	e000      	b.n	8014110 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801410e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	2201      	movs	r2, #1
 8014114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	2200      	movs	r2, #0
 801411c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8014120:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8014124:	4618      	mov	r0, r3
 8014126:	3730      	adds	r7, #48	; 0x30
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}

0801412c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b088      	sub	sp, #32
 8014130:	af00      	add	r7, sp, #0
 8014132:	60f8      	str	r0, [r7, #12]
 8014134:	60b9      	str	r1, [r7, #8]
 8014136:	603b      	str	r3, [r7, #0]
 8014138:	4613      	mov	r3, r2
 801413a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801413c:	f7fc fb08 	bl	8010750 <HAL_GetTick>
 8014140:	4602      	mov	r2, r0
 8014142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014144:	1a9b      	subs	r3, r3, r2
 8014146:	683a      	ldr	r2, [r7, #0]
 8014148:	4413      	add	r3, r2
 801414a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801414c:	f7fc fb00 	bl	8010750 <HAL_GetTick>
 8014150:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8014152:	4b39      	ldr	r3, [pc, #228]	; (8014238 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	015b      	lsls	r3, r3, #5
 8014158:	0d1b      	lsrs	r3, r3, #20
 801415a:	69fa      	ldr	r2, [r7, #28]
 801415c:	fb02 f303 	mul.w	r3, r2, r3
 8014160:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014162:	e054      	b.n	801420e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	f1b3 3fff 	cmp.w	r3, #4294967295
 801416a:	d050      	beq.n	801420e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801416c:	f7fc faf0 	bl	8010750 <HAL_GetTick>
 8014170:	4602      	mov	r2, r0
 8014172:	69bb      	ldr	r3, [r7, #24]
 8014174:	1ad3      	subs	r3, r2, r3
 8014176:	69fa      	ldr	r2, [r7, #28]
 8014178:	429a      	cmp	r2, r3
 801417a:	d902      	bls.n	8014182 <SPI_WaitFlagStateUntilTimeout+0x56>
 801417c:	69fb      	ldr	r3, [r7, #28]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d13d      	bne.n	80141fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	685a      	ldr	r2, [r3, #4]
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014190:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	685b      	ldr	r3, [r3, #4]
 8014196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801419a:	d111      	bne.n	80141c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	689b      	ldr	r3, [r3, #8]
 80141a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80141a4:	d004      	beq.n	80141b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	689b      	ldr	r3, [r3, #8]
 80141aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80141ae:	d107      	bne.n	80141c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	681a      	ldr	r2, [r3, #0]
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80141be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80141c8:	d10f      	bne.n	80141ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	681a      	ldr	r2, [r3, #0]
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80141d8:	601a      	str	r2, [r3, #0]
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	681a      	ldr	r2, [r3, #0]
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80141e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	2201      	movs	r2, #1
 80141ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	2200      	movs	r2, #0
 80141f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80141fa:	2303      	movs	r3, #3
 80141fc:	e017      	b.n	801422e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80141fe:	697b      	ldr	r3, [r7, #20]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d101      	bne.n	8014208 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8014204:	2300      	movs	r3, #0
 8014206:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	3b01      	subs	r3, #1
 801420c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	689a      	ldr	r2, [r3, #8]
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	4013      	ands	r3, r2
 8014218:	68ba      	ldr	r2, [r7, #8]
 801421a:	429a      	cmp	r2, r3
 801421c:	bf0c      	ite	eq
 801421e:	2301      	moveq	r3, #1
 8014220:	2300      	movne	r3, #0
 8014222:	b2db      	uxtb	r3, r3
 8014224:	461a      	mov	r2, r3
 8014226:	79fb      	ldrb	r3, [r7, #7]
 8014228:	429a      	cmp	r2, r3
 801422a:	d19b      	bne.n	8014164 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801422c:	2300      	movs	r3, #0
}
 801422e:	4618      	mov	r0, r3
 8014230:	3720      	adds	r7, #32
 8014232:	46bd      	mov	sp, r7
 8014234:	bd80      	pop	{r7, pc}
 8014236:	bf00      	nop
 8014238:	20000000 	.word	0x20000000

0801423c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b086      	sub	sp, #24
 8014240:	af02      	add	r7, sp, #8
 8014242:	60f8      	str	r0, [r7, #12]
 8014244:	60b9      	str	r1, [r7, #8]
 8014246:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	685b      	ldr	r3, [r3, #4]
 801424c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014250:	d111      	bne.n	8014276 <SPI_EndRxTransaction+0x3a>
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	689b      	ldr	r3, [r3, #8]
 8014256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801425a:	d004      	beq.n	8014266 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	689b      	ldr	r3, [r3, #8]
 8014260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014264:	d107      	bne.n	8014276 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	681a      	ldr	r2, [r3, #0]
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014274:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	685b      	ldr	r3, [r3, #4]
 801427a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801427e:	d12a      	bne.n	80142d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	689b      	ldr	r3, [r3, #8]
 8014284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014288:	d012      	beq.n	80142b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	9300      	str	r3, [sp, #0]
 801428e:	68bb      	ldr	r3, [r7, #8]
 8014290:	2200      	movs	r2, #0
 8014292:	2180      	movs	r1, #128	; 0x80
 8014294:	68f8      	ldr	r0, [r7, #12]
 8014296:	f7ff ff49 	bl	801412c <SPI_WaitFlagStateUntilTimeout>
 801429a:	4603      	mov	r3, r0
 801429c:	2b00      	cmp	r3, #0
 801429e:	d02d      	beq.n	80142fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80142a4:	f043 0220 	orr.w	r2, r3, #32
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80142ac:	2303      	movs	r3, #3
 80142ae:	e026      	b.n	80142fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	9300      	str	r3, [sp, #0]
 80142b4:	68bb      	ldr	r3, [r7, #8]
 80142b6:	2200      	movs	r2, #0
 80142b8:	2101      	movs	r1, #1
 80142ba:	68f8      	ldr	r0, [r7, #12]
 80142bc:	f7ff ff36 	bl	801412c <SPI_WaitFlagStateUntilTimeout>
 80142c0:	4603      	mov	r3, r0
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d01a      	beq.n	80142fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80142ca:	f043 0220 	orr.w	r2, r3, #32
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80142d2:	2303      	movs	r3, #3
 80142d4:	e013      	b.n	80142fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	9300      	str	r3, [sp, #0]
 80142da:	68bb      	ldr	r3, [r7, #8]
 80142dc:	2200      	movs	r2, #0
 80142de:	2101      	movs	r1, #1
 80142e0:	68f8      	ldr	r0, [r7, #12]
 80142e2:	f7ff ff23 	bl	801412c <SPI_WaitFlagStateUntilTimeout>
 80142e6:	4603      	mov	r3, r0
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d007      	beq.n	80142fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80142f0:	f043 0220 	orr.w	r2, r3, #32
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80142f8:	2303      	movs	r3, #3
 80142fa:	e000      	b.n	80142fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80142fc:	2300      	movs	r3, #0
}
 80142fe:	4618      	mov	r0, r3
 8014300:	3710      	adds	r7, #16
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}
	...

08014308 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b088      	sub	sp, #32
 801430c:	af02      	add	r7, sp, #8
 801430e:	60f8      	str	r0, [r7, #12]
 8014310:	60b9      	str	r1, [r7, #8]
 8014312:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8014314:	4b1b      	ldr	r3, [pc, #108]	; (8014384 <SPI_EndRxTxTransaction+0x7c>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	4a1b      	ldr	r2, [pc, #108]	; (8014388 <SPI_EndRxTxTransaction+0x80>)
 801431a:	fba2 2303 	umull	r2, r3, r2, r3
 801431e:	0d5b      	lsrs	r3, r3, #21
 8014320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014324:	fb02 f303 	mul.w	r3, r2, r3
 8014328:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	685b      	ldr	r3, [r3, #4]
 801432e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014332:	d112      	bne.n	801435a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	9300      	str	r3, [sp, #0]
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	2200      	movs	r2, #0
 801433c:	2180      	movs	r1, #128	; 0x80
 801433e:	68f8      	ldr	r0, [r7, #12]
 8014340:	f7ff fef4 	bl	801412c <SPI_WaitFlagStateUntilTimeout>
 8014344:	4603      	mov	r3, r0
 8014346:	2b00      	cmp	r3, #0
 8014348:	d016      	beq.n	8014378 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801434e:	f043 0220 	orr.w	r2, r3, #32
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014356:	2303      	movs	r3, #3
 8014358:	e00f      	b.n	801437a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801435a:	697b      	ldr	r3, [r7, #20]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d00a      	beq.n	8014376 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	3b01      	subs	r3, #1
 8014364:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	689b      	ldr	r3, [r3, #8]
 801436c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014370:	2b80      	cmp	r3, #128	; 0x80
 8014372:	d0f2      	beq.n	801435a <SPI_EndRxTxTransaction+0x52>
 8014374:	e000      	b.n	8014378 <SPI_EndRxTxTransaction+0x70>
        break;
 8014376:	bf00      	nop
  }

  return HAL_OK;
 8014378:	2300      	movs	r3, #0
}
 801437a:	4618      	mov	r0, r3
 801437c:	3718      	adds	r7, #24
 801437e:	46bd      	mov	sp, r7
 8014380:	bd80      	pop	{r7, pc}
 8014382:	bf00      	nop
 8014384:	20000000 	.word	0x20000000
 8014388:	165e9f81 	.word	0x165e9f81

0801438c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801438c:	b580      	push	{r7, lr}
 801438e:	b082      	sub	sp, #8
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d101      	bne.n	801439e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801439a:	2301      	movs	r3, #1
 801439c:	e041      	b.n	8014422 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80143a4:	b2db      	uxtb	r3, r3
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d106      	bne.n	80143b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	2200      	movs	r2, #0
 80143ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80143b2:	6878      	ldr	r0, [r7, #4]
 80143b4:	f000 f88d 	bl	80144d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	2202      	movs	r2, #2
 80143bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	681a      	ldr	r2, [r3, #0]
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	3304      	adds	r3, #4
 80143c8:	4619      	mov	r1, r3
 80143ca:	4610      	mov	r0, r2
 80143cc:	f000 fca2 	bl	8014d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	2201      	movs	r2, #1
 80143d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	2201      	movs	r2, #1
 80143dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	2201      	movs	r2, #1
 80143e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	2201      	movs	r2, #1
 80143ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	2201      	movs	r2, #1
 80143f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2201      	movs	r2, #1
 80143fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	2201      	movs	r2, #1
 8014404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	2201      	movs	r2, #1
 801440c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	2201      	movs	r2, #1
 8014414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	2201      	movs	r2, #1
 801441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014420:	2300      	movs	r3, #0
}
 8014422:	4618      	mov	r0, r3
 8014424:	3708      	adds	r7, #8
 8014426:	46bd      	mov	sp, r7
 8014428:	bd80      	pop	{r7, pc}

0801442a <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 801442a:	b580      	push	{r7, lr}
 801442c:	b082      	sub	sp, #8
 801442e:	af00      	add	r7, sp, #0
 8014430:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	2202      	movs	r2, #2
 8014436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	6a1a      	ldr	r2, [r3, #32]
 8014440:	f241 1311 	movw	r3, #4369	; 0x1111
 8014444:	4013      	ands	r3, r2
 8014446:	2b00      	cmp	r3, #0
 8014448:	d10f      	bne.n	801446a <HAL_TIM_Base_DeInit+0x40>
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	6a1a      	ldr	r2, [r3, #32]
 8014450:	f240 4344 	movw	r3, #1092	; 0x444
 8014454:	4013      	ands	r3, r2
 8014456:	2b00      	cmp	r3, #0
 8014458:	d107      	bne.n	801446a <HAL_TIM_Base_DeInit+0x40>
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	681a      	ldr	r2, [r3, #0]
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	f022 0201 	bic.w	r2, r2, #1
 8014468:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 801446a:	6878      	ldr	r0, [r7, #4]
 801446c:	f000 f83b 	bl	80144e6 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	2200      	movs	r2, #0
 8014474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	2200      	movs	r2, #0
 801447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	2200      	movs	r2, #0
 8014484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	2200      	movs	r2, #0
 801448c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2200      	movs	r2, #0
 8014494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	2200      	movs	r2, #0
 801449c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	2200      	movs	r2, #0
 80144a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	2200      	movs	r2, #0
 80144ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2200      	movs	r2, #0
 80144b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	2200      	movs	r2, #0
 80144bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	2200      	movs	r2, #0
 80144c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80144c8:	2300      	movs	r3, #0
}
 80144ca:	4618      	mov	r0, r3
 80144cc:	3708      	adds	r7, #8
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bd80      	pop	{r7, pc}

080144d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80144d2:	b480      	push	{r7}
 80144d4:	b083      	sub	sp, #12
 80144d6:	af00      	add	r7, sp, #0
 80144d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80144da:	bf00      	nop
 80144dc:	370c      	adds	r7, #12
 80144de:	46bd      	mov	sp, r7
 80144e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e4:	4770      	bx	lr

080144e6 <HAL_TIM_Base_MspDeInit>:
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 80144e6:	b480      	push	{r7}
 80144e8:	b083      	sub	sp, #12
 80144ea:	af00      	add	r7, sp, #0
 80144ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 80144ee:	bf00      	nop
 80144f0:	370c      	adds	r7, #12
 80144f2:	46bd      	mov	sp, r7
 80144f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f8:	4770      	bx	lr
	...

080144fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80144fc:	b480      	push	{r7}
 80144fe:	b085      	sub	sp, #20
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801450a:	b2db      	uxtb	r3, r3
 801450c:	2b01      	cmp	r3, #1
 801450e:	d001      	beq.n	8014514 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8014510:	2301      	movs	r3, #1
 8014512:	e044      	b.n	801459e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	2202      	movs	r2, #2
 8014518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	68da      	ldr	r2, [r3, #12]
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	f042 0201 	orr.w	r2, r2, #1
 801452a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	4a1e      	ldr	r2, [pc, #120]	; (80145ac <HAL_TIM_Base_Start_IT+0xb0>)
 8014532:	4293      	cmp	r3, r2
 8014534:	d018      	beq.n	8014568 <HAL_TIM_Base_Start_IT+0x6c>
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801453e:	d013      	beq.n	8014568 <HAL_TIM_Base_Start_IT+0x6c>
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	4a1a      	ldr	r2, [pc, #104]	; (80145b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8014546:	4293      	cmp	r3, r2
 8014548:	d00e      	beq.n	8014568 <HAL_TIM_Base_Start_IT+0x6c>
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	4a19      	ldr	r2, [pc, #100]	; (80145b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8014550:	4293      	cmp	r3, r2
 8014552:	d009      	beq.n	8014568 <HAL_TIM_Base_Start_IT+0x6c>
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	4a17      	ldr	r2, [pc, #92]	; (80145b8 <HAL_TIM_Base_Start_IT+0xbc>)
 801455a:	4293      	cmp	r3, r2
 801455c:	d004      	beq.n	8014568 <HAL_TIM_Base_Start_IT+0x6c>
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	4a16      	ldr	r2, [pc, #88]	; (80145bc <HAL_TIM_Base_Start_IT+0xc0>)
 8014564:	4293      	cmp	r3, r2
 8014566:	d111      	bne.n	801458c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	689b      	ldr	r3, [r3, #8]
 801456e:	f003 0307 	and.w	r3, r3, #7
 8014572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	2b06      	cmp	r3, #6
 8014578:	d010      	beq.n	801459c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	681a      	ldr	r2, [r3, #0]
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	f042 0201 	orr.w	r2, r2, #1
 8014588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801458a:	e007      	b.n	801459c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	681a      	ldr	r2, [r3, #0]
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	f042 0201 	orr.w	r2, r2, #1
 801459a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801459c:	2300      	movs	r3, #0
}
 801459e:	4618      	mov	r0, r3
 80145a0:	3714      	adds	r7, #20
 80145a2:	46bd      	mov	sp, r7
 80145a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a8:	4770      	bx	lr
 80145aa:	bf00      	nop
 80145ac:	40010000 	.word	0x40010000
 80145b0:	40000400 	.word	0x40000400
 80145b4:	40000800 	.word	0x40000800
 80145b8:	40000c00 	.word	0x40000c00
 80145bc:	40014000 	.word	0x40014000

080145c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b082      	sub	sp, #8
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d101      	bne.n	80145d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80145ce:	2301      	movs	r3, #1
 80145d0:	e041      	b.n	8014656 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80145d8:	b2db      	uxtb	r3, r3
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d106      	bne.n	80145ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	2200      	movs	r2, #0
 80145e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80145e6:	6878      	ldr	r0, [r7, #4]
 80145e8:	f7f9 ff26 	bl	800e438 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	2202      	movs	r2, #2
 80145f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	681a      	ldr	r2, [r3, #0]
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	3304      	adds	r3, #4
 80145fc:	4619      	mov	r1, r3
 80145fe:	4610      	mov	r0, r2
 8014600:	f000 fb88 	bl	8014d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	2201      	movs	r2, #1
 8014608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2201      	movs	r2, #1
 8014610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2201      	movs	r2, #1
 8014618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	2201      	movs	r2, #1
 8014620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	2201      	movs	r2, #1
 8014628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	2201      	movs	r2, #1
 8014630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	2201      	movs	r2, #1
 8014638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	2201      	movs	r2, #1
 8014640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2201      	movs	r2, #1
 8014648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	2201      	movs	r2, #1
 8014650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014654:	2300      	movs	r3, #0
}
 8014656:	4618      	mov	r0, r3
 8014658:	3708      	adds	r7, #8
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}

0801465e <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 801465e:	b580      	push	{r7, lr}
 8014660:	b082      	sub	sp, #8
 8014662:	af00      	add	r7, sp, #0
 8014664:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	2202      	movs	r2, #2
 801466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	6a1a      	ldr	r2, [r3, #32]
 8014674:	f241 1311 	movw	r3, #4369	; 0x1111
 8014678:	4013      	ands	r3, r2
 801467a:	2b00      	cmp	r3, #0
 801467c:	d10f      	bne.n	801469e <HAL_TIM_PWM_DeInit+0x40>
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	6a1a      	ldr	r2, [r3, #32]
 8014684:	f240 4344 	movw	r3, #1092	; 0x444
 8014688:	4013      	ands	r3, r2
 801468a:	2b00      	cmp	r3, #0
 801468c:	d107      	bne.n	801469e <HAL_TIM_PWM_DeInit+0x40>
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	681a      	ldr	r2, [r3, #0]
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	f022 0201 	bic.w	r2, r2, #1
 801469c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 801469e:	6878      	ldr	r0, [r7, #4]
 80146a0:	f7f9 ff26 	bl	800e4f0 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	2200      	movs	r2, #0
 80146a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	2200      	movs	r2, #0
 80146b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	2200      	movs	r2, #0
 80146b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	2200      	movs	r2, #0
 80146c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2200      	movs	r2, #0
 80146c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	2200      	movs	r2, #0
 80146d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	2200      	movs	r2, #0
 80146d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	2200      	movs	r2, #0
 80146e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	2200      	movs	r2, #0
 80146e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	2200      	movs	r2, #0
 80146f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	2200      	movs	r2, #0
 80146f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80146fc:	2300      	movs	r3, #0
}
 80146fe:	4618      	mov	r0, r3
 8014700:	3708      	adds	r7, #8
 8014702:	46bd      	mov	sp, r7
 8014704:	bd80      	pop	{r7, pc}
	...

08014708 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b084      	sub	sp, #16
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
 8014710:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8014712:	683b      	ldr	r3, [r7, #0]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d109      	bne.n	801472c <HAL_TIM_PWM_Start+0x24>
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801471e:	b2db      	uxtb	r3, r3
 8014720:	2b01      	cmp	r3, #1
 8014722:	bf14      	ite	ne
 8014724:	2301      	movne	r3, #1
 8014726:	2300      	moveq	r3, #0
 8014728:	b2db      	uxtb	r3, r3
 801472a:	e022      	b.n	8014772 <HAL_TIM_PWM_Start+0x6a>
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	2b04      	cmp	r3, #4
 8014730:	d109      	bne.n	8014746 <HAL_TIM_PWM_Start+0x3e>
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8014738:	b2db      	uxtb	r3, r3
 801473a:	2b01      	cmp	r3, #1
 801473c:	bf14      	ite	ne
 801473e:	2301      	movne	r3, #1
 8014740:	2300      	moveq	r3, #0
 8014742:	b2db      	uxtb	r3, r3
 8014744:	e015      	b.n	8014772 <HAL_TIM_PWM_Start+0x6a>
 8014746:	683b      	ldr	r3, [r7, #0]
 8014748:	2b08      	cmp	r3, #8
 801474a:	d109      	bne.n	8014760 <HAL_TIM_PWM_Start+0x58>
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014752:	b2db      	uxtb	r3, r3
 8014754:	2b01      	cmp	r3, #1
 8014756:	bf14      	ite	ne
 8014758:	2301      	movne	r3, #1
 801475a:	2300      	moveq	r3, #0
 801475c:	b2db      	uxtb	r3, r3
 801475e:	e008      	b.n	8014772 <HAL_TIM_PWM_Start+0x6a>
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014766:	b2db      	uxtb	r3, r3
 8014768:	2b01      	cmp	r3, #1
 801476a:	bf14      	ite	ne
 801476c:	2301      	movne	r3, #1
 801476e:	2300      	moveq	r3, #0
 8014770:	b2db      	uxtb	r3, r3
 8014772:	2b00      	cmp	r3, #0
 8014774:	d001      	beq.n	801477a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8014776:	2301      	movs	r3, #1
 8014778:	e068      	b.n	801484c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801477a:	683b      	ldr	r3, [r7, #0]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d104      	bne.n	801478a <HAL_TIM_PWM_Start+0x82>
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2202      	movs	r2, #2
 8014784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014788:	e013      	b.n	80147b2 <HAL_TIM_PWM_Start+0xaa>
 801478a:	683b      	ldr	r3, [r7, #0]
 801478c:	2b04      	cmp	r3, #4
 801478e:	d104      	bne.n	801479a <HAL_TIM_PWM_Start+0x92>
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	2202      	movs	r2, #2
 8014794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014798:	e00b      	b.n	80147b2 <HAL_TIM_PWM_Start+0xaa>
 801479a:	683b      	ldr	r3, [r7, #0]
 801479c:	2b08      	cmp	r3, #8
 801479e:	d104      	bne.n	80147aa <HAL_TIM_PWM_Start+0xa2>
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2202      	movs	r2, #2
 80147a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80147a8:	e003      	b.n	80147b2 <HAL_TIM_PWM_Start+0xaa>
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	2202      	movs	r2, #2
 80147ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	2201      	movs	r2, #1
 80147b8:	6839      	ldr	r1, [r7, #0]
 80147ba:	4618      	mov	r0, r3
 80147bc:	f000 fcb6 	bl	801512c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	4a23      	ldr	r2, [pc, #140]	; (8014854 <HAL_TIM_PWM_Start+0x14c>)
 80147c6:	4293      	cmp	r3, r2
 80147c8:	d107      	bne.n	80147da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80147d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	4a1d      	ldr	r2, [pc, #116]	; (8014854 <HAL_TIM_PWM_Start+0x14c>)
 80147e0:	4293      	cmp	r3, r2
 80147e2:	d018      	beq.n	8014816 <HAL_TIM_PWM_Start+0x10e>
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80147ec:	d013      	beq.n	8014816 <HAL_TIM_PWM_Start+0x10e>
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	4a19      	ldr	r2, [pc, #100]	; (8014858 <HAL_TIM_PWM_Start+0x150>)
 80147f4:	4293      	cmp	r3, r2
 80147f6:	d00e      	beq.n	8014816 <HAL_TIM_PWM_Start+0x10e>
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	4a17      	ldr	r2, [pc, #92]	; (801485c <HAL_TIM_PWM_Start+0x154>)
 80147fe:	4293      	cmp	r3, r2
 8014800:	d009      	beq.n	8014816 <HAL_TIM_PWM_Start+0x10e>
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	4a16      	ldr	r2, [pc, #88]	; (8014860 <HAL_TIM_PWM_Start+0x158>)
 8014808:	4293      	cmp	r3, r2
 801480a:	d004      	beq.n	8014816 <HAL_TIM_PWM_Start+0x10e>
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	4a14      	ldr	r2, [pc, #80]	; (8014864 <HAL_TIM_PWM_Start+0x15c>)
 8014812:	4293      	cmp	r3, r2
 8014814:	d111      	bne.n	801483a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	689b      	ldr	r3, [r3, #8]
 801481c:	f003 0307 	and.w	r3, r3, #7
 8014820:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	2b06      	cmp	r3, #6
 8014826:	d010      	beq.n	801484a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	681a      	ldr	r2, [r3, #0]
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	f042 0201 	orr.w	r2, r2, #1
 8014836:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014838:	e007      	b.n	801484a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	681a      	ldr	r2, [r3, #0]
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	f042 0201 	orr.w	r2, r2, #1
 8014848:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801484a:	2300      	movs	r3, #0
}
 801484c:	4618      	mov	r0, r3
 801484e:	3710      	adds	r7, #16
 8014850:	46bd      	mov	sp, r7
 8014852:	bd80      	pop	{r7, pc}
 8014854:	40010000 	.word	0x40010000
 8014858:	40000400 	.word	0x40000400
 801485c:	40000800 	.word	0x40000800
 8014860:	40000c00 	.word	0x40000c00
 8014864:	40014000 	.word	0x40014000

08014868 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b082      	sub	sp, #8
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]
 8014870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	2200      	movs	r2, #0
 8014878:	6839      	ldr	r1, [r7, #0]
 801487a:	4618      	mov	r0, r3
 801487c:	f000 fc56 	bl	801512c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	4a29      	ldr	r2, [pc, #164]	; (801492c <HAL_TIM_PWM_Stop+0xc4>)
 8014886:	4293      	cmp	r3, r2
 8014888:	d117      	bne.n	80148ba <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	6a1a      	ldr	r2, [r3, #32]
 8014890:	f241 1311 	movw	r3, #4369	; 0x1111
 8014894:	4013      	ands	r3, r2
 8014896:	2b00      	cmp	r3, #0
 8014898:	d10f      	bne.n	80148ba <HAL_TIM_PWM_Stop+0x52>
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	6a1a      	ldr	r2, [r3, #32]
 80148a0:	f240 4344 	movw	r3, #1092	; 0x444
 80148a4:	4013      	ands	r3, r2
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d107      	bne.n	80148ba <HAL_TIM_PWM_Stop+0x52>
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80148b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	6a1a      	ldr	r2, [r3, #32]
 80148c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80148c4:	4013      	ands	r3, r2
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d10f      	bne.n	80148ea <HAL_TIM_PWM_Stop+0x82>
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	6a1a      	ldr	r2, [r3, #32]
 80148d0:	f240 4344 	movw	r3, #1092	; 0x444
 80148d4:	4013      	ands	r3, r2
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d107      	bne.n	80148ea <HAL_TIM_PWM_Stop+0x82>
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	681a      	ldr	r2, [r3, #0]
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	f022 0201 	bic.w	r2, r2, #1
 80148e8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d104      	bne.n	80148fa <HAL_TIM_PWM_Stop+0x92>
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	2201      	movs	r2, #1
 80148f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80148f8:	e013      	b.n	8014922 <HAL_TIM_PWM_Stop+0xba>
 80148fa:	683b      	ldr	r3, [r7, #0]
 80148fc:	2b04      	cmp	r3, #4
 80148fe:	d104      	bne.n	801490a <HAL_TIM_PWM_Stop+0xa2>
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2201      	movs	r2, #1
 8014904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014908:	e00b      	b.n	8014922 <HAL_TIM_PWM_Stop+0xba>
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	2b08      	cmp	r3, #8
 801490e:	d104      	bne.n	801491a <HAL_TIM_PWM_Stop+0xb2>
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	2201      	movs	r2, #1
 8014914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014918:	e003      	b.n	8014922 <HAL_TIM_PWM_Stop+0xba>
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	2201      	movs	r2, #1
 801491e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8014922:	2300      	movs	r3, #0
}
 8014924:	4618      	mov	r0, r3
 8014926:	3708      	adds	r7, #8
 8014928:	46bd      	mov	sp, r7
 801492a:	bd80      	pop	{r7, pc}
 801492c:	40010000 	.word	0x40010000

08014930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b082      	sub	sp, #8
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	691b      	ldr	r3, [r3, #16]
 801493e:	f003 0302 	and.w	r3, r3, #2
 8014942:	2b02      	cmp	r3, #2
 8014944:	d122      	bne.n	801498c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	68db      	ldr	r3, [r3, #12]
 801494c:	f003 0302 	and.w	r3, r3, #2
 8014950:	2b02      	cmp	r3, #2
 8014952:	d11b      	bne.n	801498c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	f06f 0202 	mvn.w	r2, #2
 801495c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	2201      	movs	r2, #1
 8014962:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	699b      	ldr	r3, [r3, #24]
 801496a:	f003 0303 	and.w	r3, r3, #3
 801496e:	2b00      	cmp	r3, #0
 8014970:	d003      	beq.n	801497a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014972:	6878      	ldr	r0, [r7, #4]
 8014974:	f000 f9b0 	bl	8014cd8 <HAL_TIM_IC_CaptureCallback>
 8014978:	e005      	b.n	8014986 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801497a:	6878      	ldr	r0, [r7, #4]
 801497c:	f000 f9a2 	bl	8014cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014980:	6878      	ldr	r0, [r7, #4]
 8014982:	f000 f9b3 	bl	8014cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	2200      	movs	r2, #0
 801498a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	691b      	ldr	r3, [r3, #16]
 8014992:	f003 0304 	and.w	r3, r3, #4
 8014996:	2b04      	cmp	r3, #4
 8014998:	d122      	bne.n	80149e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	68db      	ldr	r3, [r3, #12]
 80149a0:	f003 0304 	and.w	r3, r3, #4
 80149a4:	2b04      	cmp	r3, #4
 80149a6:	d11b      	bne.n	80149e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	f06f 0204 	mvn.w	r2, #4
 80149b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	2202      	movs	r2, #2
 80149b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	699b      	ldr	r3, [r3, #24]
 80149be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d003      	beq.n	80149ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	f000 f986 	bl	8014cd8 <HAL_TIM_IC_CaptureCallback>
 80149cc:	e005      	b.n	80149da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80149ce:	6878      	ldr	r0, [r7, #4]
 80149d0:	f000 f978 	bl	8014cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80149d4:	6878      	ldr	r0, [r7, #4]
 80149d6:	f000 f989 	bl	8014cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	2200      	movs	r2, #0
 80149de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	691b      	ldr	r3, [r3, #16]
 80149e6:	f003 0308 	and.w	r3, r3, #8
 80149ea:	2b08      	cmp	r3, #8
 80149ec:	d122      	bne.n	8014a34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	68db      	ldr	r3, [r3, #12]
 80149f4:	f003 0308 	and.w	r3, r3, #8
 80149f8:	2b08      	cmp	r3, #8
 80149fa:	d11b      	bne.n	8014a34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	f06f 0208 	mvn.w	r2, #8
 8014a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	2204      	movs	r2, #4
 8014a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	69db      	ldr	r3, [r3, #28]
 8014a12:	f003 0303 	and.w	r3, r3, #3
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d003      	beq.n	8014a22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014a1a:	6878      	ldr	r0, [r7, #4]
 8014a1c:	f000 f95c 	bl	8014cd8 <HAL_TIM_IC_CaptureCallback>
 8014a20:	e005      	b.n	8014a2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014a22:	6878      	ldr	r0, [r7, #4]
 8014a24:	f000 f94e 	bl	8014cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f000 f95f 	bl	8014cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	2200      	movs	r2, #0
 8014a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	691b      	ldr	r3, [r3, #16]
 8014a3a:	f003 0310 	and.w	r3, r3, #16
 8014a3e:	2b10      	cmp	r3, #16
 8014a40:	d122      	bne.n	8014a88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	68db      	ldr	r3, [r3, #12]
 8014a48:	f003 0310 	and.w	r3, r3, #16
 8014a4c:	2b10      	cmp	r3, #16
 8014a4e:	d11b      	bne.n	8014a88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	f06f 0210 	mvn.w	r2, #16
 8014a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	2208      	movs	r2, #8
 8014a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	69db      	ldr	r3, [r3, #28]
 8014a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d003      	beq.n	8014a76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	f000 f932 	bl	8014cd8 <HAL_TIM_IC_CaptureCallback>
 8014a74:	e005      	b.n	8014a82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	f000 f924 	bl	8014cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014a7c:	6878      	ldr	r0, [r7, #4]
 8014a7e:	f000 f935 	bl	8014cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	2200      	movs	r2, #0
 8014a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	691b      	ldr	r3, [r3, #16]
 8014a8e:	f003 0301 	and.w	r3, r3, #1
 8014a92:	2b01      	cmp	r3, #1
 8014a94:	d10e      	bne.n	8014ab4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	68db      	ldr	r3, [r3, #12]
 8014a9c:	f003 0301 	and.w	r3, r3, #1
 8014aa0:	2b01      	cmp	r3, #1
 8014aa2:	d107      	bne.n	8014ab4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	f06f 0201 	mvn.w	r2, #1
 8014aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8014aae:	6878      	ldr	r0, [r7, #4]
 8014ab0:	f7f9 fb68 	bl	800e184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	691b      	ldr	r3, [r3, #16]
 8014aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014abe:	2b80      	cmp	r3, #128	; 0x80
 8014ac0:	d10e      	bne.n	8014ae0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	68db      	ldr	r3, [r3, #12]
 8014ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014acc:	2b80      	cmp	r3, #128	; 0x80
 8014ace:	d107      	bne.n	8014ae0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8014ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014ada:	6878      	ldr	r0, [r7, #4]
 8014adc:	f000 fbc4 	bl	8015268 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	691b      	ldr	r3, [r3, #16]
 8014ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014aea:	2b40      	cmp	r3, #64	; 0x40
 8014aec:	d10e      	bne.n	8014b0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	68db      	ldr	r3, [r3, #12]
 8014af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014af8:	2b40      	cmp	r3, #64	; 0x40
 8014afa:	d107      	bne.n	8014b0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014b06:	6878      	ldr	r0, [r7, #4]
 8014b08:	f000 f8fa 	bl	8014d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	691b      	ldr	r3, [r3, #16]
 8014b12:	f003 0320 	and.w	r3, r3, #32
 8014b16:	2b20      	cmp	r3, #32
 8014b18:	d10e      	bne.n	8014b38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	68db      	ldr	r3, [r3, #12]
 8014b20:	f003 0320 	and.w	r3, r3, #32
 8014b24:	2b20      	cmp	r3, #32
 8014b26:	d107      	bne.n	8014b38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	f06f 0220 	mvn.w	r2, #32
 8014b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014b32:	6878      	ldr	r0, [r7, #4]
 8014b34:	f000 fb8e 	bl	8015254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014b38:	bf00      	nop
 8014b3a:	3708      	adds	r7, #8
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	bd80      	pop	{r7, pc}

08014b40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b086      	sub	sp, #24
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	60f8      	str	r0, [r7, #12]
 8014b48:	60b9      	str	r1, [r7, #8]
 8014b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014b56:	2b01      	cmp	r3, #1
 8014b58:	d101      	bne.n	8014b5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8014b5a:	2302      	movs	r3, #2
 8014b5c:	e0ae      	b.n	8014cbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	2201      	movs	r2, #1
 8014b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	2b0c      	cmp	r3, #12
 8014b6a:	f200 809f 	bhi.w	8014cac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8014b6e:	a201      	add	r2, pc, #4	; (adr r2, 8014b74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8014b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b74:	08014ba9 	.word	0x08014ba9
 8014b78:	08014cad 	.word	0x08014cad
 8014b7c:	08014cad 	.word	0x08014cad
 8014b80:	08014cad 	.word	0x08014cad
 8014b84:	08014be9 	.word	0x08014be9
 8014b88:	08014cad 	.word	0x08014cad
 8014b8c:	08014cad 	.word	0x08014cad
 8014b90:	08014cad 	.word	0x08014cad
 8014b94:	08014c2b 	.word	0x08014c2b
 8014b98:	08014cad 	.word	0x08014cad
 8014b9c:	08014cad 	.word	0x08014cad
 8014ba0:	08014cad 	.word	0x08014cad
 8014ba4:	08014c6b 	.word	0x08014c6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	68b9      	ldr	r1, [r7, #8]
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f000 f930 	bl	8014e14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	699a      	ldr	r2, [r3, #24]
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	f042 0208 	orr.w	r2, r2, #8
 8014bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	699a      	ldr	r2, [r3, #24]
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	f022 0204 	bic.w	r2, r2, #4
 8014bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	6999      	ldr	r1, [r3, #24]
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	691a      	ldr	r2, [r3, #16]
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	430a      	orrs	r2, r1
 8014be4:	619a      	str	r2, [r3, #24]
      break;
 8014be6:	e064      	b.n	8014cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	68b9      	ldr	r1, [r7, #8]
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f000 f976 	bl	8014ee0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	699a      	ldr	r2, [r3, #24]
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	699a      	ldr	r2, [r3, #24]
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	6999      	ldr	r1, [r3, #24]
 8014c1a:	68bb      	ldr	r3, [r7, #8]
 8014c1c:	691b      	ldr	r3, [r3, #16]
 8014c1e:	021a      	lsls	r2, r3, #8
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	430a      	orrs	r2, r1
 8014c26:	619a      	str	r2, [r3, #24]
      break;
 8014c28:	e043      	b.n	8014cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	68b9      	ldr	r1, [r7, #8]
 8014c30:	4618      	mov	r0, r3
 8014c32:	f000 f9c1 	bl	8014fb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	69da      	ldr	r2, [r3, #28]
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	f042 0208 	orr.w	r2, r2, #8
 8014c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	69da      	ldr	r2, [r3, #28]
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	f022 0204 	bic.w	r2, r2, #4
 8014c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	69d9      	ldr	r1, [r3, #28]
 8014c5c:	68bb      	ldr	r3, [r7, #8]
 8014c5e:	691a      	ldr	r2, [r3, #16]
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	430a      	orrs	r2, r1
 8014c66:	61da      	str	r2, [r3, #28]
      break;
 8014c68:	e023      	b.n	8014cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	68b9      	ldr	r1, [r7, #8]
 8014c70:	4618      	mov	r0, r3
 8014c72:	f000 fa0b 	bl	801508c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	69da      	ldr	r2, [r3, #28]
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	69da      	ldr	r2, [r3, #28]
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	69d9      	ldr	r1, [r3, #28]
 8014c9c:	68bb      	ldr	r3, [r7, #8]
 8014c9e:	691b      	ldr	r3, [r3, #16]
 8014ca0:	021a      	lsls	r2, r3, #8
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	430a      	orrs	r2, r1
 8014ca8:	61da      	str	r2, [r3, #28]
      break;
 8014caa:	e002      	b.n	8014cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8014cac:	2301      	movs	r3, #1
 8014cae:	75fb      	strb	r3, [r7, #23]
      break;
 8014cb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	3718      	adds	r7, #24
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bd80      	pop	{r7, pc}

08014cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014cc4:	b480      	push	{r7}
 8014cc6:	b083      	sub	sp, #12
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014ccc:	bf00      	nop
 8014cce:	370c      	adds	r7, #12
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd6:	4770      	bx	lr

08014cd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014cd8:	b480      	push	{r7}
 8014cda:	b083      	sub	sp, #12
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8014ce0:	bf00      	nop
 8014ce2:	370c      	adds	r7, #12
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cea:	4770      	bx	lr

08014cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014cec:	b480      	push	{r7}
 8014cee:	b083      	sub	sp, #12
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014cf4:	bf00      	nop
 8014cf6:	370c      	adds	r7, #12
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfe:	4770      	bx	lr

08014d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014d00:	b480      	push	{r7}
 8014d02:	b083      	sub	sp, #12
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014d08:	bf00      	nop
 8014d0a:	370c      	adds	r7, #12
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d12:	4770      	bx	lr

08014d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8014d14:	b480      	push	{r7}
 8014d16:	b085      	sub	sp, #20
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
 8014d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	4a34      	ldr	r2, [pc, #208]	; (8014df8 <TIM_Base_SetConfig+0xe4>)
 8014d28:	4293      	cmp	r3, r2
 8014d2a:	d00f      	beq.n	8014d4c <TIM_Base_SetConfig+0x38>
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014d32:	d00b      	beq.n	8014d4c <TIM_Base_SetConfig+0x38>
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	4a31      	ldr	r2, [pc, #196]	; (8014dfc <TIM_Base_SetConfig+0xe8>)
 8014d38:	4293      	cmp	r3, r2
 8014d3a:	d007      	beq.n	8014d4c <TIM_Base_SetConfig+0x38>
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	4a30      	ldr	r2, [pc, #192]	; (8014e00 <TIM_Base_SetConfig+0xec>)
 8014d40:	4293      	cmp	r3, r2
 8014d42:	d003      	beq.n	8014d4c <TIM_Base_SetConfig+0x38>
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	4a2f      	ldr	r2, [pc, #188]	; (8014e04 <TIM_Base_SetConfig+0xf0>)
 8014d48:	4293      	cmp	r3, r2
 8014d4a:	d108      	bne.n	8014d5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014d54:	683b      	ldr	r3, [r7, #0]
 8014d56:	685b      	ldr	r3, [r3, #4]
 8014d58:	68fa      	ldr	r2, [r7, #12]
 8014d5a:	4313      	orrs	r3, r2
 8014d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	4a25      	ldr	r2, [pc, #148]	; (8014df8 <TIM_Base_SetConfig+0xe4>)
 8014d62:	4293      	cmp	r3, r2
 8014d64:	d01b      	beq.n	8014d9e <TIM_Base_SetConfig+0x8a>
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014d6c:	d017      	beq.n	8014d9e <TIM_Base_SetConfig+0x8a>
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	4a22      	ldr	r2, [pc, #136]	; (8014dfc <TIM_Base_SetConfig+0xe8>)
 8014d72:	4293      	cmp	r3, r2
 8014d74:	d013      	beq.n	8014d9e <TIM_Base_SetConfig+0x8a>
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	4a21      	ldr	r2, [pc, #132]	; (8014e00 <TIM_Base_SetConfig+0xec>)
 8014d7a:	4293      	cmp	r3, r2
 8014d7c:	d00f      	beq.n	8014d9e <TIM_Base_SetConfig+0x8a>
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	4a20      	ldr	r2, [pc, #128]	; (8014e04 <TIM_Base_SetConfig+0xf0>)
 8014d82:	4293      	cmp	r3, r2
 8014d84:	d00b      	beq.n	8014d9e <TIM_Base_SetConfig+0x8a>
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	4a1f      	ldr	r2, [pc, #124]	; (8014e08 <TIM_Base_SetConfig+0xf4>)
 8014d8a:	4293      	cmp	r3, r2
 8014d8c:	d007      	beq.n	8014d9e <TIM_Base_SetConfig+0x8a>
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	4a1e      	ldr	r2, [pc, #120]	; (8014e0c <TIM_Base_SetConfig+0xf8>)
 8014d92:	4293      	cmp	r3, r2
 8014d94:	d003      	beq.n	8014d9e <TIM_Base_SetConfig+0x8a>
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	4a1d      	ldr	r2, [pc, #116]	; (8014e10 <TIM_Base_SetConfig+0xfc>)
 8014d9a:	4293      	cmp	r3, r2
 8014d9c:	d108      	bne.n	8014db0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014da6:	683b      	ldr	r3, [r7, #0]
 8014da8:	68db      	ldr	r3, [r3, #12]
 8014daa:	68fa      	ldr	r2, [r7, #12]
 8014dac:	4313      	orrs	r3, r2
 8014dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014db6:	683b      	ldr	r3, [r7, #0]
 8014db8:	695b      	ldr	r3, [r3, #20]
 8014dba:	4313      	orrs	r3, r2
 8014dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	68fa      	ldr	r2, [r7, #12]
 8014dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014dc4:	683b      	ldr	r3, [r7, #0]
 8014dc6:	689a      	ldr	r2, [r3, #8]
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014dcc:	683b      	ldr	r3, [r7, #0]
 8014dce:	681a      	ldr	r2, [r3, #0]
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	4a08      	ldr	r2, [pc, #32]	; (8014df8 <TIM_Base_SetConfig+0xe4>)
 8014dd8:	4293      	cmp	r3, r2
 8014dda:	d103      	bne.n	8014de4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014ddc:	683b      	ldr	r3, [r7, #0]
 8014dde:	691a      	ldr	r2, [r3, #16]
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	2201      	movs	r2, #1
 8014de8:	615a      	str	r2, [r3, #20]
}
 8014dea:	bf00      	nop
 8014dec:	3714      	adds	r7, #20
 8014dee:	46bd      	mov	sp, r7
 8014df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df4:	4770      	bx	lr
 8014df6:	bf00      	nop
 8014df8:	40010000 	.word	0x40010000
 8014dfc:	40000400 	.word	0x40000400
 8014e00:	40000800 	.word	0x40000800
 8014e04:	40000c00 	.word	0x40000c00
 8014e08:	40014000 	.word	0x40014000
 8014e0c:	40014400 	.word	0x40014400
 8014e10:	40014800 	.word	0x40014800

08014e14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014e14:	b480      	push	{r7}
 8014e16:	b087      	sub	sp, #28
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
 8014e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	6a1b      	ldr	r3, [r3, #32]
 8014e22:	f023 0201 	bic.w	r2, r3, #1
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	6a1b      	ldr	r3, [r3, #32]
 8014e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	685b      	ldr	r3, [r3, #4]
 8014e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	699b      	ldr	r3, [r3, #24]
 8014e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	f023 0303 	bic.w	r3, r3, #3
 8014e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014e4c:	683b      	ldr	r3, [r7, #0]
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	68fa      	ldr	r2, [r7, #12]
 8014e52:	4313      	orrs	r3, r2
 8014e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014e56:	697b      	ldr	r3, [r7, #20]
 8014e58:	f023 0302 	bic.w	r3, r3, #2
 8014e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	689b      	ldr	r3, [r3, #8]
 8014e62:	697a      	ldr	r2, [r7, #20]
 8014e64:	4313      	orrs	r3, r2
 8014e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	4a1c      	ldr	r2, [pc, #112]	; (8014edc <TIM_OC1_SetConfig+0xc8>)
 8014e6c:	4293      	cmp	r3, r2
 8014e6e:	d10c      	bne.n	8014e8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014e70:	697b      	ldr	r3, [r7, #20]
 8014e72:	f023 0308 	bic.w	r3, r3, #8
 8014e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014e78:	683b      	ldr	r3, [r7, #0]
 8014e7a:	68db      	ldr	r3, [r3, #12]
 8014e7c:	697a      	ldr	r2, [r7, #20]
 8014e7e:	4313      	orrs	r3, r2
 8014e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014e82:	697b      	ldr	r3, [r7, #20]
 8014e84:	f023 0304 	bic.w	r3, r3, #4
 8014e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	4a13      	ldr	r2, [pc, #76]	; (8014edc <TIM_OC1_SetConfig+0xc8>)
 8014e8e:	4293      	cmp	r3, r2
 8014e90:	d111      	bne.n	8014eb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014e92:	693b      	ldr	r3, [r7, #16]
 8014e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014e9a:	693b      	ldr	r3, [r7, #16]
 8014e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014ea2:	683b      	ldr	r3, [r7, #0]
 8014ea4:	695b      	ldr	r3, [r3, #20]
 8014ea6:	693a      	ldr	r2, [r7, #16]
 8014ea8:	4313      	orrs	r3, r2
 8014eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014eac:	683b      	ldr	r3, [r7, #0]
 8014eae:	699b      	ldr	r3, [r3, #24]
 8014eb0:	693a      	ldr	r2, [r7, #16]
 8014eb2:	4313      	orrs	r3, r2
 8014eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	693a      	ldr	r2, [r7, #16]
 8014eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	68fa      	ldr	r2, [r7, #12]
 8014ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	685a      	ldr	r2, [r3, #4]
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	697a      	ldr	r2, [r7, #20]
 8014ece:	621a      	str	r2, [r3, #32]
}
 8014ed0:	bf00      	nop
 8014ed2:	371c      	adds	r7, #28
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eda:	4770      	bx	lr
 8014edc:	40010000 	.word	0x40010000

08014ee0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014ee0:	b480      	push	{r7}
 8014ee2:	b087      	sub	sp, #28
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
 8014ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	6a1b      	ldr	r3, [r3, #32]
 8014eee:	f023 0210 	bic.w	r2, r3, #16
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	6a1b      	ldr	r3, [r3, #32]
 8014efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	685b      	ldr	r3, [r3, #4]
 8014f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	699b      	ldr	r3, [r3, #24]
 8014f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014f18:	683b      	ldr	r3, [r7, #0]
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	021b      	lsls	r3, r3, #8
 8014f1e:	68fa      	ldr	r2, [r7, #12]
 8014f20:	4313      	orrs	r3, r2
 8014f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014f24:	697b      	ldr	r3, [r7, #20]
 8014f26:	f023 0320 	bic.w	r3, r3, #32
 8014f2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014f2c:	683b      	ldr	r3, [r7, #0]
 8014f2e:	689b      	ldr	r3, [r3, #8]
 8014f30:	011b      	lsls	r3, r3, #4
 8014f32:	697a      	ldr	r2, [r7, #20]
 8014f34:	4313      	orrs	r3, r2
 8014f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	4a1e      	ldr	r2, [pc, #120]	; (8014fb4 <TIM_OC2_SetConfig+0xd4>)
 8014f3c:	4293      	cmp	r3, r2
 8014f3e:	d10d      	bne.n	8014f5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014f40:	697b      	ldr	r3, [r7, #20]
 8014f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014f48:	683b      	ldr	r3, [r7, #0]
 8014f4a:	68db      	ldr	r3, [r3, #12]
 8014f4c:	011b      	lsls	r3, r3, #4
 8014f4e:	697a      	ldr	r2, [r7, #20]
 8014f50:	4313      	orrs	r3, r2
 8014f52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014f5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	4a15      	ldr	r2, [pc, #84]	; (8014fb4 <TIM_OC2_SetConfig+0xd4>)
 8014f60:	4293      	cmp	r3, r2
 8014f62:	d113      	bne.n	8014f8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014f64:	693b      	ldr	r3, [r7, #16]
 8014f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014f6c:	693b      	ldr	r3, [r7, #16]
 8014f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014f74:	683b      	ldr	r3, [r7, #0]
 8014f76:	695b      	ldr	r3, [r3, #20]
 8014f78:	009b      	lsls	r3, r3, #2
 8014f7a:	693a      	ldr	r2, [r7, #16]
 8014f7c:	4313      	orrs	r3, r2
 8014f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014f80:	683b      	ldr	r3, [r7, #0]
 8014f82:	699b      	ldr	r3, [r3, #24]
 8014f84:	009b      	lsls	r3, r3, #2
 8014f86:	693a      	ldr	r2, [r7, #16]
 8014f88:	4313      	orrs	r3, r2
 8014f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	693a      	ldr	r2, [r7, #16]
 8014f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	68fa      	ldr	r2, [r7, #12]
 8014f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014f98:	683b      	ldr	r3, [r7, #0]
 8014f9a:	685a      	ldr	r2, [r3, #4]
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	697a      	ldr	r2, [r7, #20]
 8014fa4:	621a      	str	r2, [r3, #32]
}
 8014fa6:	bf00      	nop
 8014fa8:	371c      	adds	r7, #28
 8014faa:	46bd      	mov	sp, r7
 8014fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb0:	4770      	bx	lr
 8014fb2:	bf00      	nop
 8014fb4:	40010000 	.word	0x40010000

08014fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014fb8:	b480      	push	{r7}
 8014fba:	b087      	sub	sp, #28
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
 8014fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	6a1b      	ldr	r3, [r3, #32]
 8014fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	6a1b      	ldr	r3, [r3, #32]
 8014fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	685b      	ldr	r3, [r3, #4]
 8014fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	69db      	ldr	r3, [r3, #28]
 8014fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	f023 0303 	bic.w	r3, r3, #3
 8014fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014ff0:	683b      	ldr	r3, [r7, #0]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	68fa      	ldr	r2, [r7, #12]
 8014ff6:	4313      	orrs	r3, r2
 8014ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014ffa:	697b      	ldr	r3, [r7, #20]
 8014ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8015000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	689b      	ldr	r3, [r3, #8]
 8015006:	021b      	lsls	r3, r3, #8
 8015008:	697a      	ldr	r2, [r7, #20]
 801500a:	4313      	orrs	r3, r2
 801500c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	4a1d      	ldr	r2, [pc, #116]	; (8015088 <TIM_OC3_SetConfig+0xd0>)
 8015012:	4293      	cmp	r3, r2
 8015014:	d10d      	bne.n	8015032 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8015016:	697b      	ldr	r3, [r7, #20]
 8015018:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801501c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801501e:	683b      	ldr	r3, [r7, #0]
 8015020:	68db      	ldr	r3, [r3, #12]
 8015022:	021b      	lsls	r3, r3, #8
 8015024:	697a      	ldr	r2, [r7, #20]
 8015026:	4313      	orrs	r3, r2
 8015028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801502a:	697b      	ldr	r3, [r7, #20]
 801502c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	4a14      	ldr	r2, [pc, #80]	; (8015088 <TIM_OC3_SetConfig+0xd0>)
 8015036:	4293      	cmp	r3, r2
 8015038:	d113      	bne.n	8015062 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801503a:	693b      	ldr	r3, [r7, #16]
 801503c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8015042:	693b      	ldr	r3, [r7, #16]
 8015044:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	695b      	ldr	r3, [r3, #20]
 801504e:	011b      	lsls	r3, r3, #4
 8015050:	693a      	ldr	r2, [r7, #16]
 8015052:	4313      	orrs	r3, r2
 8015054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8015056:	683b      	ldr	r3, [r7, #0]
 8015058:	699b      	ldr	r3, [r3, #24]
 801505a:	011b      	lsls	r3, r3, #4
 801505c:	693a      	ldr	r2, [r7, #16]
 801505e:	4313      	orrs	r3, r2
 8015060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	693a      	ldr	r2, [r7, #16]
 8015066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	68fa      	ldr	r2, [r7, #12]
 801506c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	685a      	ldr	r2, [r3, #4]
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	697a      	ldr	r2, [r7, #20]
 801507a:	621a      	str	r2, [r3, #32]
}
 801507c:	bf00      	nop
 801507e:	371c      	adds	r7, #28
 8015080:	46bd      	mov	sp, r7
 8015082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015086:	4770      	bx	lr
 8015088:	40010000 	.word	0x40010000

0801508c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801508c:	b480      	push	{r7}
 801508e:	b087      	sub	sp, #28
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
 8015094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	6a1b      	ldr	r3, [r3, #32]
 801509a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	6a1b      	ldr	r3, [r3, #32]
 80150a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	685b      	ldr	r3, [r3, #4]
 80150ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	69db      	ldr	r3, [r3, #28]
 80150b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80150ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80150c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80150c4:	683b      	ldr	r3, [r7, #0]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	021b      	lsls	r3, r3, #8
 80150ca:	68fa      	ldr	r2, [r7, #12]
 80150cc:	4313      	orrs	r3, r2
 80150ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80150d0:	693b      	ldr	r3, [r7, #16]
 80150d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80150d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80150d8:	683b      	ldr	r3, [r7, #0]
 80150da:	689b      	ldr	r3, [r3, #8]
 80150dc:	031b      	lsls	r3, r3, #12
 80150de:	693a      	ldr	r2, [r7, #16]
 80150e0:	4313      	orrs	r3, r2
 80150e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	4a10      	ldr	r2, [pc, #64]	; (8015128 <TIM_OC4_SetConfig+0x9c>)
 80150e8:	4293      	cmp	r3, r2
 80150ea:	d109      	bne.n	8015100 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80150f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80150f4:	683b      	ldr	r3, [r7, #0]
 80150f6:	695b      	ldr	r3, [r3, #20]
 80150f8:	019b      	lsls	r3, r3, #6
 80150fa:	697a      	ldr	r2, [r7, #20]
 80150fc:	4313      	orrs	r3, r2
 80150fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	697a      	ldr	r2, [r7, #20]
 8015104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	68fa      	ldr	r2, [r7, #12]
 801510a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801510c:	683b      	ldr	r3, [r7, #0]
 801510e:	685a      	ldr	r2, [r3, #4]
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	693a      	ldr	r2, [r7, #16]
 8015118:	621a      	str	r2, [r3, #32]
}
 801511a:	bf00      	nop
 801511c:	371c      	adds	r7, #28
 801511e:	46bd      	mov	sp, r7
 8015120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015124:	4770      	bx	lr
 8015126:	bf00      	nop
 8015128:	40010000 	.word	0x40010000

0801512c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801512c:	b480      	push	{r7}
 801512e:	b087      	sub	sp, #28
 8015130:	af00      	add	r7, sp, #0
 8015132:	60f8      	str	r0, [r7, #12]
 8015134:	60b9      	str	r1, [r7, #8]
 8015136:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015138:	68bb      	ldr	r3, [r7, #8]
 801513a:	f003 031f 	and.w	r3, r3, #31
 801513e:	2201      	movs	r2, #1
 8015140:	fa02 f303 	lsl.w	r3, r2, r3
 8015144:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	6a1a      	ldr	r2, [r3, #32]
 801514a:	697b      	ldr	r3, [r7, #20]
 801514c:	43db      	mvns	r3, r3
 801514e:	401a      	ands	r2, r3
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	6a1a      	ldr	r2, [r3, #32]
 8015158:	68bb      	ldr	r3, [r7, #8]
 801515a:	f003 031f 	and.w	r3, r3, #31
 801515e:	6879      	ldr	r1, [r7, #4]
 8015160:	fa01 f303 	lsl.w	r3, r1, r3
 8015164:	431a      	orrs	r2, r3
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	621a      	str	r2, [r3, #32]
}
 801516a:	bf00      	nop
 801516c:	371c      	adds	r7, #28
 801516e:	46bd      	mov	sp, r7
 8015170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015174:	4770      	bx	lr
	...

08015178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015178:	b480      	push	{r7}
 801517a:	b085      	sub	sp, #20
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
 8015180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015188:	2b01      	cmp	r3, #1
 801518a:	d101      	bne.n	8015190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801518c:	2302      	movs	r3, #2
 801518e:	e050      	b.n	8015232 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	2201      	movs	r2, #1
 8015194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	2202      	movs	r2, #2
 801519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	685b      	ldr	r3, [r3, #4]
 80151a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	689b      	ldr	r3, [r3, #8]
 80151ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80151b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80151b8:	683b      	ldr	r3, [r7, #0]
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	68fa      	ldr	r2, [r7, #12]
 80151be:	4313      	orrs	r3, r2
 80151c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	68fa      	ldr	r2, [r7, #12]
 80151c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	4a1c      	ldr	r2, [pc, #112]	; (8015240 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80151d0:	4293      	cmp	r3, r2
 80151d2:	d018      	beq.n	8015206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80151dc:	d013      	beq.n	8015206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	4a18      	ldr	r2, [pc, #96]	; (8015244 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80151e4:	4293      	cmp	r3, r2
 80151e6:	d00e      	beq.n	8015206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	4a16      	ldr	r2, [pc, #88]	; (8015248 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80151ee:	4293      	cmp	r3, r2
 80151f0:	d009      	beq.n	8015206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	4a15      	ldr	r2, [pc, #84]	; (801524c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80151f8:	4293      	cmp	r3, r2
 80151fa:	d004      	beq.n	8015206 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	4a13      	ldr	r2, [pc, #76]	; (8015250 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8015202:	4293      	cmp	r3, r2
 8015204:	d10c      	bne.n	8015220 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015206:	68bb      	ldr	r3, [r7, #8]
 8015208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801520c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801520e:	683b      	ldr	r3, [r7, #0]
 8015210:	685b      	ldr	r3, [r3, #4]
 8015212:	68ba      	ldr	r2, [r7, #8]
 8015214:	4313      	orrs	r3, r2
 8015216:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	68ba      	ldr	r2, [r7, #8]
 801521e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	2201      	movs	r2, #1
 8015224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	2200      	movs	r2, #0
 801522c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015230:	2300      	movs	r3, #0
}
 8015232:	4618      	mov	r0, r3
 8015234:	3714      	adds	r7, #20
 8015236:	46bd      	mov	sp, r7
 8015238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523c:	4770      	bx	lr
 801523e:	bf00      	nop
 8015240:	40010000 	.word	0x40010000
 8015244:	40000400 	.word	0x40000400
 8015248:	40000800 	.word	0x40000800
 801524c:	40000c00 	.word	0x40000c00
 8015250:	40014000 	.word	0x40014000

08015254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015254:	b480      	push	{r7}
 8015256:	b083      	sub	sp, #12
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801525c:	bf00      	nop
 801525e:	370c      	adds	r7, #12
 8015260:	46bd      	mov	sp, r7
 8015262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015266:	4770      	bx	lr

08015268 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015268:	b480      	push	{r7}
 801526a:	b083      	sub	sp, #12
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015270:	bf00      	nop
 8015272:	370c      	adds	r7, #12
 8015274:	46bd      	mov	sp, r7
 8015276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527a:	4770      	bx	lr

0801527c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b082      	sub	sp, #8
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d101      	bne.n	801528e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801528a:	2301      	movs	r3, #1
 801528c:	e03f      	b.n	801530e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015294:	b2db      	uxtb	r3, r3
 8015296:	2b00      	cmp	r3, #0
 8015298:	d106      	bne.n	80152a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	2200      	movs	r2, #0
 801529e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80152a2:	6878      	ldr	r0, [r7, #4]
 80152a4:	f7f9 f93e 	bl	800e524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	2224      	movs	r2, #36	; 0x24
 80152ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	68da      	ldr	r2, [r3, #12]
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80152be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80152c0:	6878      	ldr	r0, [r7, #4]
 80152c2:	f000 f857 	bl	8015374 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	691a      	ldr	r2, [r3, #16]
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80152d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	695a      	ldr	r2, [r3, #20]
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80152e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	68da      	ldr	r2, [r3, #12]
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80152f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	2200      	movs	r2, #0
 80152fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	2220      	movs	r2, #32
 8015300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	2220      	movs	r2, #32
 8015308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801530c:	2300      	movs	r3, #0
}
 801530e:	4618      	mov	r0, r3
 8015310:	3708      	adds	r7, #8
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}

08015316 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8015316:	b580      	push	{r7, lr}
 8015318:	b082      	sub	sp, #8
 801531a:	af00      	add	r7, sp, #0
 801531c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d101      	bne.n	8015328 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8015324:	2301      	movs	r3, #1
 8015326:	e021      	b.n	801536c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	2224      	movs	r2, #36	; 0x24
 801532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	68da      	ldr	r2, [r3, #12]
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801533e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8015340:	6878      	ldr	r0, [r7, #4]
 8015342:	f7f9 f937 	bl	800e5b4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	2200      	movs	r2, #0
 801534a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	2200      	movs	r2, #0
 8015350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	2200      	movs	r2, #0
 8015358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	2200      	movs	r2, #0
 8015360:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	2200      	movs	r2, #0
 8015366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801536a:	2300      	movs	r3, #0
}
 801536c:	4618      	mov	r0, r3
 801536e:	3708      	adds	r7, #8
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}

08015374 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8015374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015378:	b09f      	sub	sp, #124	; 0x7c
 801537a:	af00      	add	r7, sp, #0
 801537c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801537e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	691b      	ldr	r3, [r3, #16]
 8015384:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8015388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801538a:	68d9      	ldr	r1, [r3, #12]
 801538c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801538e:	681a      	ldr	r2, [r3, #0]
 8015390:	ea40 0301 	orr.w	r3, r0, r1
 8015394:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8015396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015398:	689a      	ldr	r2, [r3, #8]
 801539a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801539c:	691b      	ldr	r3, [r3, #16]
 801539e:	431a      	orrs	r2, r3
 80153a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80153a2:	695b      	ldr	r3, [r3, #20]
 80153a4:	431a      	orrs	r2, r3
 80153a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80153a8:	69db      	ldr	r3, [r3, #28]
 80153aa:	4313      	orrs	r3, r2
 80153ac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80153ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	68db      	ldr	r3, [r3, #12]
 80153b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80153b8:	f021 010c 	bic.w	r1, r1, #12
 80153bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80153be:	681a      	ldr	r2, [r3, #0]
 80153c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80153c2:	430b      	orrs	r3, r1
 80153c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80153c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	695b      	ldr	r3, [r3, #20]
 80153cc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80153d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80153d2:	6999      	ldr	r1, [r3, #24]
 80153d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80153d6:	681a      	ldr	r2, [r3, #0]
 80153d8:	ea40 0301 	orr.w	r3, r0, r1
 80153dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80153de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80153e0:	681a      	ldr	r2, [r3, #0]
 80153e2:	4bc5      	ldr	r3, [pc, #788]	; (80156f8 <UART_SetConfig+0x384>)
 80153e4:	429a      	cmp	r2, r3
 80153e6:	d004      	beq.n	80153f2 <UART_SetConfig+0x7e>
 80153e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80153ea:	681a      	ldr	r2, [r3, #0]
 80153ec:	4bc3      	ldr	r3, [pc, #780]	; (80156fc <UART_SetConfig+0x388>)
 80153ee:	429a      	cmp	r2, r3
 80153f0:	d103      	bne.n	80153fa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80153f2:	f7fe f9b5 	bl	8013760 <HAL_RCC_GetPCLK2Freq>
 80153f6:	6778      	str	r0, [r7, #116]	; 0x74
 80153f8:	e002      	b.n	8015400 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80153fa:	f7fe f99d 	bl	8013738 <HAL_RCC_GetPCLK1Freq>
 80153fe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015402:	69db      	ldr	r3, [r3, #28]
 8015404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015408:	f040 80b6 	bne.w	8015578 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801540c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801540e:	461c      	mov	r4, r3
 8015410:	f04f 0500 	mov.w	r5, #0
 8015414:	4622      	mov	r2, r4
 8015416:	462b      	mov	r3, r5
 8015418:	1891      	adds	r1, r2, r2
 801541a:	6439      	str	r1, [r7, #64]	; 0x40
 801541c:	415b      	adcs	r3, r3
 801541e:	647b      	str	r3, [r7, #68]	; 0x44
 8015420:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8015424:	1912      	adds	r2, r2, r4
 8015426:	eb45 0303 	adc.w	r3, r5, r3
 801542a:	f04f 0000 	mov.w	r0, #0
 801542e:	f04f 0100 	mov.w	r1, #0
 8015432:	00d9      	lsls	r1, r3, #3
 8015434:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8015438:	00d0      	lsls	r0, r2, #3
 801543a:	4602      	mov	r2, r0
 801543c:	460b      	mov	r3, r1
 801543e:	1911      	adds	r1, r2, r4
 8015440:	6639      	str	r1, [r7, #96]	; 0x60
 8015442:	416b      	adcs	r3, r5
 8015444:	667b      	str	r3, [r7, #100]	; 0x64
 8015446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015448:	685b      	ldr	r3, [r3, #4]
 801544a:	461a      	mov	r2, r3
 801544c:	f04f 0300 	mov.w	r3, #0
 8015450:	1891      	adds	r1, r2, r2
 8015452:	63b9      	str	r1, [r7, #56]	; 0x38
 8015454:	415b      	adcs	r3, r3
 8015456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015458:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801545c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8015460:	f7f6 fe46 	bl	800c0f0 <__aeabi_uldivmod>
 8015464:	4602      	mov	r2, r0
 8015466:	460b      	mov	r3, r1
 8015468:	4ba5      	ldr	r3, [pc, #660]	; (8015700 <UART_SetConfig+0x38c>)
 801546a:	fba3 2302 	umull	r2, r3, r3, r2
 801546e:	095b      	lsrs	r3, r3, #5
 8015470:	011e      	lsls	r6, r3, #4
 8015472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015474:	461c      	mov	r4, r3
 8015476:	f04f 0500 	mov.w	r5, #0
 801547a:	4622      	mov	r2, r4
 801547c:	462b      	mov	r3, r5
 801547e:	1891      	adds	r1, r2, r2
 8015480:	6339      	str	r1, [r7, #48]	; 0x30
 8015482:	415b      	adcs	r3, r3
 8015484:	637b      	str	r3, [r7, #52]	; 0x34
 8015486:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801548a:	1912      	adds	r2, r2, r4
 801548c:	eb45 0303 	adc.w	r3, r5, r3
 8015490:	f04f 0000 	mov.w	r0, #0
 8015494:	f04f 0100 	mov.w	r1, #0
 8015498:	00d9      	lsls	r1, r3, #3
 801549a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801549e:	00d0      	lsls	r0, r2, #3
 80154a0:	4602      	mov	r2, r0
 80154a2:	460b      	mov	r3, r1
 80154a4:	1911      	adds	r1, r2, r4
 80154a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80154a8:	416b      	adcs	r3, r5
 80154aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80154ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80154ae:	685b      	ldr	r3, [r3, #4]
 80154b0:	461a      	mov	r2, r3
 80154b2:	f04f 0300 	mov.w	r3, #0
 80154b6:	1891      	adds	r1, r2, r2
 80154b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80154ba:	415b      	adcs	r3, r3
 80154bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80154be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80154c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80154c6:	f7f6 fe13 	bl	800c0f0 <__aeabi_uldivmod>
 80154ca:	4602      	mov	r2, r0
 80154cc:	460b      	mov	r3, r1
 80154ce:	4b8c      	ldr	r3, [pc, #560]	; (8015700 <UART_SetConfig+0x38c>)
 80154d0:	fba3 1302 	umull	r1, r3, r3, r2
 80154d4:	095b      	lsrs	r3, r3, #5
 80154d6:	2164      	movs	r1, #100	; 0x64
 80154d8:	fb01 f303 	mul.w	r3, r1, r3
 80154dc:	1ad3      	subs	r3, r2, r3
 80154de:	00db      	lsls	r3, r3, #3
 80154e0:	3332      	adds	r3, #50	; 0x32
 80154e2:	4a87      	ldr	r2, [pc, #540]	; (8015700 <UART_SetConfig+0x38c>)
 80154e4:	fba2 2303 	umull	r2, r3, r2, r3
 80154e8:	095b      	lsrs	r3, r3, #5
 80154ea:	005b      	lsls	r3, r3, #1
 80154ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80154f0:	441e      	add	r6, r3
 80154f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80154f4:	4618      	mov	r0, r3
 80154f6:	f04f 0100 	mov.w	r1, #0
 80154fa:	4602      	mov	r2, r0
 80154fc:	460b      	mov	r3, r1
 80154fe:	1894      	adds	r4, r2, r2
 8015500:	623c      	str	r4, [r7, #32]
 8015502:	415b      	adcs	r3, r3
 8015504:	627b      	str	r3, [r7, #36]	; 0x24
 8015506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801550a:	1812      	adds	r2, r2, r0
 801550c:	eb41 0303 	adc.w	r3, r1, r3
 8015510:	f04f 0400 	mov.w	r4, #0
 8015514:	f04f 0500 	mov.w	r5, #0
 8015518:	00dd      	lsls	r5, r3, #3
 801551a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801551e:	00d4      	lsls	r4, r2, #3
 8015520:	4622      	mov	r2, r4
 8015522:	462b      	mov	r3, r5
 8015524:	1814      	adds	r4, r2, r0
 8015526:	653c      	str	r4, [r7, #80]	; 0x50
 8015528:	414b      	adcs	r3, r1
 801552a:	657b      	str	r3, [r7, #84]	; 0x54
 801552c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801552e:	685b      	ldr	r3, [r3, #4]
 8015530:	461a      	mov	r2, r3
 8015532:	f04f 0300 	mov.w	r3, #0
 8015536:	1891      	adds	r1, r2, r2
 8015538:	61b9      	str	r1, [r7, #24]
 801553a:	415b      	adcs	r3, r3
 801553c:	61fb      	str	r3, [r7, #28]
 801553e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015542:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8015546:	f7f6 fdd3 	bl	800c0f0 <__aeabi_uldivmod>
 801554a:	4602      	mov	r2, r0
 801554c:	460b      	mov	r3, r1
 801554e:	4b6c      	ldr	r3, [pc, #432]	; (8015700 <UART_SetConfig+0x38c>)
 8015550:	fba3 1302 	umull	r1, r3, r3, r2
 8015554:	095b      	lsrs	r3, r3, #5
 8015556:	2164      	movs	r1, #100	; 0x64
 8015558:	fb01 f303 	mul.w	r3, r1, r3
 801555c:	1ad3      	subs	r3, r2, r3
 801555e:	00db      	lsls	r3, r3, #3
 8015560:	3332      	adds	r3, #50	; 0x32
 8015562:	4a67      	ldr	r2, [pc, #412]	; (8015700 <UART_SetConfig+0x38c>)
 8015564:	fba2 2303 	umull	r2, r3, r2, r3
 8015568:	095b      	lsrs	r3, r3, #5
 801556a:	f003 0207 	and.w	r2, r3, #7
 801556e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	4432      	add	r2, r6
 8015574:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8015576:	e0b9      	b.n	80156ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8015578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801557a:	461c      	mov	r4, r3
 801557c:	f04f 0500 	mov.w	r5, #0
 8015580:	4622      	mov	r2, r4
 8015582:	462b      	mov	r3, r5
 8015584:	1891      	adds	r1, r2, r2
 8015586:	6139      	str	r1, [r7, #16]
 8015588:	415b      	adcs	r3, r3
 801558a:	617b      	str	r3, [r7, #20]
 801558c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015590:	1912      	adds	r2, r2, r4
 8015592:	eb45 0303 	adc.w	r3, r5, r3
 8015596:	f04f 0000 	mov.w	r0, #0
 801559a:	f04f 0100 	mov.w	r1, #0
 801559e:	00d9      	lsls	r1, r3, #3
 80155a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80155a4:	00d0      	lsls	r0, r2, #3
 80155a6:	4602      	mov	r2, r0
 80155a8:	460b      	mov	r3, r1
 80155aa:	eb12 0804 	adds.w	r8, r2, r4
 80155ae:	eb43 0905 	adc.w	r9, r3, r5
 80155b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80155b4:	685b      	ldr	r3, [r3, #4]
 80155b6:	4618      	mov	r0, r3
 80155b8:	f04f 0100 	mov.w	r1, #0
 80155bc:	f04f 0200 	mov.w	r2, #0
 80155c0:	f04f 0300 	mov.w	r3, #0
 80155c4:	008b      	lsls	r3, r1, #2
 80155c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80155ca:	0082      	lsls	r2, r0, #2
 80155cc:	4640      	mov	r0, r8
 80155ce:	4649      	mov	r1, r9
 80155d0:	f7f6 fd8e 	bl	800c0f0 <__aeabi_uldivmod>
 80155d4:	4602      	mov	r2, r0
 80155d6:	460b      	mov	r3, r1
 80155d8:	4b49      	ldr	r3, [pc, #292]	; (8015700 <UART_SetConfig+0x38c>)
 80155da:	fba3 2302 	umull	r2, r3, r3, r2
 80155de:	095b      	lsrs	r3, r3, #5
 80155e0:	011e      	lsls	r6, r3, #4
 80155e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80155e4:	4618      	mov	r0, r3
 80155e6:	f04f 0100 	mov.w	r1, #0
 80155ea:	4602      	mov	r2, r0
 80155ec:	460b      	mov	r3, r1
 80155ee:	1894      	adds	r4, r2, r2
 80155f0:	60bc      	str	r4, [r7, #8]
 80155f2:	415b      	adcs	r3, r3
 80155f4:	60fb      	str	r3, [r7, #12]
 80155f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80155fa:	1812      	adds	r2, r2, r0
 80155fc:	eb41 0303 	adc.w	r3, r1, r3
 8015600:	f04f 0400 	mov.w	r4, #0
 8015604:	f04f 0500 	mov.w	r5, #0
 8015608:	00dd      	lsls	r5, r3, #3
 801560a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801560e:	00d4      	lsls	r4, r2, #3
 8015610:	4622      	mov	r2, r4
 8015612:	462b      	mov	r3, r5
 8015614:	1814      	adds	r4, r2, r0
 8015616:	64bc      	str	r4, [r7, #72]	; 0x48
 8015618:	414b      	adcs	r3, r1
 801561a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801561c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801561e:	685b      	ldr	r3, [r3, #4]
 8015620:	4618      	mov	r0, r3
 8015622:	f04f 0100 	mov.w	r1, #0
 8015626:	f04f 0200 	mov.w	r2, #0
 801562a:	f04f 0300 	mov.w	r3, #0
 801562e:	008b      	lsls	r3, r1, #2
 8015630:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8015634:	0082      	lsls	r2, r0, #2
 8015636:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801563a:	f7f6 fd59 	bl	800c0f0 <__aeabi_uldivmod>
 801563e:	4602      	mov	r2, r0
 8015640:	460b      	mov	r3, r1
 8015642:	4b2f      	ldr	r3, [pc, #188]	; (8015700 <UART_SetConfig+0x38c>)
 8015644:	fba3 1302 	umull	r1, r3, r3, r2
 8015648:	095b      	lsrs	r3, r3, #5
 801564a:	2164      	movs	r1, #100	; 0x64
 801564c:	fb01 f303 	mul.w	r3, r1, r3
 8015650:	1ad3      	subs	r3, r2, r3
 8015652:	011b      	lsls	r3, r3, #4
 8015654:	3332      	adds	r3, #50	; 0x32
 8015656:	4a2a      	ldr	r2, [pc, #168]	; (8015700 <UART_SetConfig+0x38c>)
 8015658:	fba2 2303 	umull	r2, r3, r2, r3
 801565c:	095b      	lsrs	r3, r3, #5
 801565e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015662:	441e      	add	r6, r3
 8015664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015666:	4618      	mov	r0, r3
 8015668:	f04f 0100 	mov.w	r1, #0
 801566c:	4602      	mov	r2, r0
 801566e:	460b      	mov	r3, r1
 8015670:	1894      	adds	r4, r2, r2
 8015672:	603c      	str	r4, [r7, #0]
 8015674:	415b      	adcs	r3, r3
 8015676:	607b      	str	r3, [r7, #4]
 8015678:	e9d7 2300 	ldrd	r2, r3, [r7]
 801567c:	1812      	adds	r2, r2, r0
 801567e:	eb41 0303 	adc.w	r3, r1, r3
 8015682:	f04f 0400 	mov.w	r4, #0
 8015686:	f04f 0500 	mov.w	r5, #0
 801568a:	00dd      	lsls	r5, r3, #3
 801568c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8015690:	00d4      	lsls	r4, r2, #3
 8015692:	4622      	mov	r2, r4
 8015694:	462b      	mov	r3, r5
 8015696:	eb12 0a00 	adds.w	sl, r2, r0
 801569a:	eb43 0b01 	adc.w	fp, r3, r1
 801569e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80156a0:	685b      	ldr	r3, [r3, #4]
 80156a2:	4618      	mov	r0, r3
 80156a4:	f04f 0100 	mov.w	r1, #0
 80156a8:	f04f 0200 	mov.w	r2, #0
 80156ac:	f04f 0300 	mov.w	r3, #0
 80156b0:	008b      	lsls	r3, r1, #2
 80156b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80156b6:	0082      	lsls	r2, r0, #2
 80156b8:	4650      	mov	r0, sl
 80156ba:	4659      	mov	r1, fp
 80156bc:	f7f6 fd18 	bl	800c0f0 <__aeabi_uldivmod>
 80156c0:	4602      	mov	r2, r0
 80156c2:	460b      	mov	r3, r1
 80156c4:	4b0e      	ldr	r3, [pc, #56]	; (8015700 <UART_SetConfig+0x38c>)
 80156c6:	fba3 1302 	umull	r1, r3, r3, r2
 80156ca:	095b      	lsrs	r3, r3, #5
 80156cc:	2164      	movs	r1, #100	; 0x64
 80156ce:	fb01 f303 	mul.w	r3, r1, r3
 80156d2:	1ad3      	subs	r3, r2, r3
 80156d4:	011b      	lsls	r3, r3, #4
 80156d6:	3332      	adds	r3, #50	; 0x32
 80156d8:	4a09      	ldr	r2, [pc, #36]	; (8015700 <UART_SetConfig+0x38c>)
 80156da:	fba2 2303 	umull	r2, r3, r2, r3
 80156de:	095b      	lsrs	r3, r3, #5
 80156e0:	f003 020f 	and.w	r2, r3, #15
 80156e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	4432      	add	r2, r6
 80156ea:	609a      	str	r2, [r3, #8]
}
 80156ec:	bf00      	nop
 80156ee:	377c      	adds	r7, #124	; 0x7c
 80156f0:	46bd      	mov	sp, r7
 80156f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156f6:	bf00      	nop
 80156f8:	40011000 	.word	0x40011000
 80156fc:	40011400 	.word	0x40011400
 8015700:	51eb851f 	.word	0x51eb851f

08015704 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015704:	b084      	sub	sp, #16
 8015706:	b580      	push	{r7, lr}
 8015708:	b084      	sub	sp, #16
 801570a:	af00      	add	r7, sp, #0
 801570c:	6078      	str	r0, [r7, #4]
 801570e:	f107 001c 	add.w	r0, r7, #28
 8015712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8015716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015718:	2b01      	cmp	r3, #1
 801571a:	d122      	bne.n	8015762 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015720:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	68db      	ldr	r3, [r3, #12]
 801572c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8015730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015734:	687a      	ldr	r2, [r7, #4]
 8015736:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	68db      	ldr	r3, [r3, #12]
 801573c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8015744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015746:	2b01      	cmp	r3, #1
 8015748:	d105      	bne.n	8015756 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	68db      	ldr	r3, [r3, #12]
 801574e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8015756:	6878      	ldr	r0, [r7, #4]
 8015758:	f001 fb6a 	bl	8016e30 <USB_CoreReset>
 801575c:	4603      	mov	r3, r0
 801575e:	73fb      	strb	r3, [r7, #15]
 8015760:	e01a      	b.n	8015798 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	68db      	ldr	r3, [r3, #12]
 8015766:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801576e:	6878      	ldr	r0, [r7, #4]
 8015770:	f001 fb5e 	bl	8016e30 <USB_CoreReset>
 8015774:	4603      	mov	r3, r0
 8015776:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8015778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801577a:	2b00      	cmp	r3, #0
 801577c:	d106      	bne.n	801578c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015782:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	639a      	str	r2, [r3, #56]	; 0x38
 801578a:	e005      	b.n	8015798 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015790:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8015798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801579a:	2b01      	cmp	r3, #1
 801579c:	d10b      	bne.n	80157b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	689b      	ldr	r3, [r3, #8]
 80157a2:	f043 0206 	orr.w	r2, r3, #6
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	689b      	ldr	r3, [r3, #8]
 80157ae:	f043 0220 	orr.w	r2, r3, #32
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80157b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80157b8:	4618      	mov	r0, r3
 80157ba:	3710      	adds	r7, #16
 80157bc:	46bd      	mov	sp, r7
 80157be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80157c2:	b004      	add	sp, #16
 80157c4:	4770      	bx	lr
	...

080157c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80157c8:	b480      	push	{r7}
 80157ca:	b087      	sub	sp, #28
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	60f8      	str	r0, [r7, #12]
 80157d0:	60b9      	str	r1, [r7, #8]
 80157d2:	4613      	mov	r3, r2
 80157d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80157d6:	79fb      	ldrb	r3, [r7, #7]
 80157d8:	2b02      	cmp	r3, #2
 80157da:	d165      	bne.n	80158a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80157dc:	68bb      	ldr	r3, [r7, #8]
 80157de:	4a41      	ldr	r2, [pc, #260]	; (80158e4 <USB_SetTurnaroundTime+0x11c>)
 80157e0:	4293      	cmp	r3, r2
 80157e2:	d906      	bls.n	80157f2 <USB_SetTurnaroundTime+0x2a>
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	4a40      	ldr	r2, [pc, #256]	; (80158e8 <USB_SetTurnaroundTime+0x120>)
 80157e8:	4293      	cmp	r3, r2
 80157ea:	d202      	bcs.n	80157f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80157ec:	230f      	movs	r3, #15
 80157ee:	617b      	str	r3, [r7, #20]
 80157f0:	e062      	b.n	80158b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80157f2:	68bb      	ldr	r3, [r7, #8]
 80157f4:	4a3c      	ldr	r2, [pc, #240]	; (80158e8 <USB_SetTurnaroundTime+0x120>)
 80157f6:	4293      	cmp	r3, r2
 80157f8:	d306      	bcc.n	8015808 <USB_SetTurnaroundTime+0x40>
 80157fa:	68bb      	ldr	r3, [r7, #8]
 80157fc:	4a3b      	ldr	r2, [pc, #236]	; (80158ec <USB_SetTurnaroundTime+0x124>)
 80157fe:	4293      	cmp	r3, r2
 8015800:	d202      	bcs.n	8015808 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8015802:	230e      	movs	r3, #14
 8015804:	617b      	str	r3, [r7, #20]
 8015806:	e057      	b.n	80158b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8015808:	68bb      	ldr	r3, [r7, #8]
 801580a:	4a38      	ldr	r2, [pc, #224]	; (80158ec <USB_SetTurnaroundTime+0x124>)
 801580c:	4293      	cmp	r3, r2
 801580e:	d306      	bcc.n	801581e <USB_SetTurnaroundTime+0x56>
 8015810:	68bb      	ldr	r3, [r7, #8]
 8015812:	4a37      	ldr	r2, [pc, #220]	; (80158f0 <USB_SetTurnaroundTime+0x128>)
 8015814:	4293      	cmp	r3, r2
 8015816:	d202      	bcs.n	801581e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8015818:	230d      	movs	r3, #13
 801581a:	617b      	str	r3, [r7, #20]
 801581c:	e04c      	b.n	80158b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801581e:	68bb      	ldr	r3, [r7, #8]
 8015820:	4a33      	ldr	r2, [pc, #204]	; (80158f0 <USB_SetTurnaroundTime+0x128>)
 8015822:	4293      	cmp	r3, r2
 8015824:	d306      	bcc.n	8015834 <USB_SetTurnaroundTime+0x6c>
 8015826:	68bb      	ldr	r3, [r7, #8]
 8015828:	4a32      	ldr	r2, [pc, #200]	; (80158f4 <USB_SetTurnaroundTime+0x12c>)
 801582a:	4293      	cmp	r3, r2
 801582c:	d802      	bhi.n	8015834 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801582e:	230c      	movs	r3, #12
 8015830:	617b      	str	r3, [r7, #20]
 8015832:	e041      	b.n	80158b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8015834:	68bb      	ldr	r3, [r7, #8]
 8015836:	4a2f      	ldr	r2, [pc, #188]	; (80158f4 <USB_SetTurnaroundTime+0x12c>)
 8015838:	4293      	cmp	r3, r2
 801583a:	d906      	bls.n	801584a <USB_SetTurnaroundTime+0x82>
 801583c:	68bb      	ldr	r3, [r7, #8]
 801583e:	4a2e      	ldr	r2, [pc, #184]	; (80158f8 <USB_SetTurnaroundTime+0x130>)
 8015840:	4293      	cmp	r3, r2
 8015842:	d802      	bhi.n	801584a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8015844:	230b      	movs	r3, #11
 8015846:	617b      	str	r3, [r7, #20]
 8015848:	e036      	b.n	80158b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801584a:	68bb      	ldr	r3, [r7, #8]
 801584c:	4a2a      	ldr	r2, [pc, #168]	; (80158f8 <USB_SetTurnaroundTime+0x130>)
 801584e:	4293      	cmp	r3, r2
 8015850:	d906      	bls.n	8015860 <USB_SetTurnaroundTime+0x98>
 8015852:	68bb      	ldr	r3, [r7, #8]
 8015854:	4a29      	ldr	r2, [pc, #164]	; (80158fc <USB_SetTurnaroundTime+0x134>)
 8015856:	4293      	cmp	r3, r2
 8015858:	d802      	bhi.n	8015860 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801585a:	230a      	movs	r3, #10
 801585c:	617b      	str	r3, [r7, #20]
 801585e:	e02b      	b.n	80158b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8015860:	68bb      	ldr	r3, [r7, #8]
 8015862:	4a26      	ldr	r2, [pc, #152]	; (80158fc <USB_SetTurnaroundTime+0x134>)
 8015864:	4293      	cmp	r3, r2
 8015866:	d906      	bls.n	8015876 <USB_SetTurnaroundTime+0xae>
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	4a25      	ldr	r2, [pc, #148]	; (8015900 <USB_SetTurnaroundTime+0x138>)
 801586c:	4293      	cmp	r3, r2
 801586e:	d202      	bcs.n	8015876 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8015870:	2309      	movs	r3, #9
 8015872:	617b      	str	r3, [r7, #20]
 8015874:	e020      	b.n	80158b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	4a21      	ldr	r2, [pc, #132]	; (8015900 <USB_SetTurnaroundTime+0x138>)
 801587a:	4293      	cmp	r3, r2
 801587c:	d306      	bcc.n	801588c <USB_SetTurnaroundTime+0xc4>
 801587e:	68bb      	ldr	r3, [r7, #8]
 8015880:	4a20      	ldr	r2, [pc, #128]	; (8015904 <USB_SetTurnaroundTime+0x13c>)
 8015882:	4293      	cmp	r3, r2
 8015884:	d802      	bhi.n	801588c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8015886:	2308      	movs	r3, #8
 8015888:	617b      	str	r3, [r7, #20]
 801588a:	e015      	b.n	80158b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801588c:	68bb      	ldr	r3, [r7, #8]
 801588e:	4a1d      	ldr	r2, [pc, #116]	; (8015904 <USB_SetTurnaroundTime+0x13c>)
 8015890:	4293      	cmp	r3, r2
 8015892:	d906      	bls.n	80158a2 <USB_SetTurnaroundTime+0xda>
 8015894:	68bb      	ldr	r3, [r7, #8]
 8015896:	4a1c      	ldr	r2, [pc, #112]	; (8015908 <USB_SetTurnaroundTime+0x140>)
 8015898:	4293      	cmp	r3, r2
 801589a:	d202      	bcs.n	80158a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801589c:	2307      	movs	r3, #7
 801589e:	617b      	str	r3, [r7, #20]
 80158a0:	e00a      	b.n	80158b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80158a2:	2306      	movs	r3, #6
 80158a4:	617b      	str	r3, [r7, #20]
 80158a6:	e007      	b.n	80158b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80158a8:	79fb      	ldrb	r3, [r7, #7]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d102      	bne.n	80158b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80158ae:	2309      	movs	r3, #9
 80158b0:	617b      	str	r3, [r7, #20]
 80158b2:	e001      	b.n	80158b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80158b4:	2309      	movs	r3, #9
 80158b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	68db      	ldr	r3, [r3, #12]
 80158bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	68da      	ldr	r2, [r3, #12]
 80158c8:	697b      	ldr	r3, [r7, #20]
 80158ca:	029b      	lsls	r3, r3, #10
 80158cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80158d0:	431a      	orrs	r2, r3
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80158d6:	2300      	movs	r3, #0
}
 80158d8:	4618      	mov	r0, r3
 80158da:	371c      	adds	r7, #28
 80158dc:	46bd      	mov	sp, r7
 80158de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e2:	4770      	bx	lr
 80158e4:	00d8acbf 	.word	0x00d8acbf
 80158e8:	00e4e1c0 	.word	0x00e4e1c0
 80158ec:	00f42400 	.word	0x00f42400
 80158f0:	01067380 	.word	0x01067380
 80158f4:	011a499f 	.word	0x011a499f
 80158f8:	01312cff 	.word	0x01312cff
 80158fc:	014ca43f 	.word	0x014ca43f
 8015900:	016e3600 	.word	0x016e3600
 8015904:	01a6ab1f 	.word	0x01a6ab1f
 8015908:	01e84800 	.word	0x01e84800

0801590c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801590c:	b480      	push	{r7}
 801590e:	b083      	sub	sp, #12
 8015910:	af00      	add	r7, sp, #0
 8015912:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	689b      	ldr	r3, [r3, #8]
 8015918:	f043 0201 	orr.w	r2, r3, #1
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015920:	2300      	movs	r3, #0
}
 8015922:	4618      	mov	r0, r3
 8015924:	370c      	adds	r7, #12
 8015926:	46bd      	mov	sp, r7
 8015928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801592c:	4770      	bx	lr

0801592e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801592e:	b480      	push	{r7}
 8015930:	b083      	sub	sp, #12
 8015932:	af00      	add	r7, sp, #0
 8015934:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	689b      	ldr	r3, [r3, #8]
 801593a:	f023 0201 	bic.w	r2, r3, #1
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015942:	2300      	movs	r3, #0
}
 8015944:	4618      	mov	r0, r3
 8015946:	370c      	adds	r7, #12
 8015948:	46bd      	mov	sp, r7
 801594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594e:	4770      	bx	lr

08015950 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b084      	sub	sp, #16
 8015954:	af00      	add	r7, sp, #0
 8015956:	6078      	str	r0, [r7, #4]
 8015958:	460b      	mov	r3, r1
 801595a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801595c:	2300      	movs	r3, #0
 801595e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	68db      	ldr	r3, [r3, #12]
 8015964:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801596c:	78fb      	ldrb	r3, [r7, #3]
 801596e:	2b01      	cmp	r3, #1
 8015970:	d115      	bne.n	801599e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	68db      	ldr	r3, [r3, #12]
 8015976:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801597e:	2001      	movs	r0, #1
 8015980:	f7fa fef2 	bl	8010768 <HAL_Delay>
      ms++;
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	3301      	adds	r3, #1
 8015988:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801598a:	6878      	ldr	r0, [r7, #4]
 801598c:	f001 f9c1 	bl	8016d12 <USB_GetMode>
 8015990:	4603      	mov	r3, r0
 8015992:	2b01      	cmp	r3, #1
 8015994:	d01e      	beq.n	80159d4 <USB_SetCurrentMode+0x84>
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	2b31      	cmp	r3, #49	; 0x31
 801599a:	d9f0      	bls.n	801597e <USB_SetCurrentMode+0x2e>
 801599c:	e01a      	b.n	80159d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801599e:	78fb      	ldrb	r3, [r7, #3]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d115      	bne.n	80159d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	68db      	ldr	r3, [r3, #12]
 80159a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80159b0:	2001      	movs	r0, #1
 80159b2:	f7fa fed9 	bl	8010768 <HAL_Delay>
      ms++;
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	3301      	adds	r3, #1
 80159ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80159bc:	6878      	ldr	r0, [r7, #4]
 80159be:	f001 f9a8 	bl	8016d12 <USB_GetMode>
 80159c2:	4603      	mov	r3, r0
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d005      	beq.n	80159d4 <USB_SetCurrentMode+0x84>
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	2b31      	cmp	r3, #49	; 0x31
 80159cc:	d9f0      	bls.n	80159b0 <USB_SetCurrentMode+0x60>
 80159ce:	e001      	b.n	80159d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80159d0:	2301      	movs	r3, #1
 80159d2:	e005      	b.n	80159e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	2b32      	cmp	r3, #50	; 0x32
 80159d8:	d101      	bne.n	80159de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80159da:	2301      	movs	r3, #1
 80159dc:	e000      	b.n	80159e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80159de:	2300      	movs	r3, #0
}
 80159e0:	4618      	mov	r0, r3
 80159e2:	3710      	adds	r7, #16
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}

080159e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80159e8:	b084      	sub	sp, #16
 80159ea:	b580      	push	{r7, lr}
 80159ec:	b086      	sub	sp, #24
 80159ee:	af00      	add	r7, sp, #0
 80159f0:	6078      	str	r0, [r7, #4]
 80159f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80159f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80159fa:	2300      	movs	r3, #0
 80159fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8015a02:	2300      	movs	r3, #0
 8015a04:	613b      	str	r3, [r7, #16]
 8015a06:	e009      	b.n	8015a1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8015a08:	687a      	ldr	r2, [r7, #4]
 8015a0a:	693b      	ldr	r3, [r7, #16]
 8015a0c:	3340      	adds	r3, #64	; 0x40
 8015a0e:	009b      	lsls	r3, r3, #2
 8015a10:	4413      	add	r3, r2
 8015a12:	2200      	movs	r2, #0
 8015a14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8015a16:	693b      	ldr	r3, [r7, #16]
 8015a18:	3301      	adds	r3, #1
 8015a1a:	613b      	str	r3, [r7, #16]
 8015a1c:	693b      	ldr	r3, [r7, #16]
 8015a1e:	2b0e      	cmp	r3, #14
 8015a20:	d9f2      	bls.n	8015a08 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8015a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d11c      	bne.n	8015a62 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015a2e:	685b      	ldr	r3, [r3, #4]
 8015a30:	68fa      	ldr	r2, [r7, #12]
 8015a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015a36:	f043 0302 	orr.w	r3, r3, #2
 8015a3a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a4c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a58:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	639a      	str	r2, [r3, #56]	; 0x38
 8015a60:	e00b      	b.n	8015a7a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a66:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a72:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015a80:	461a      	mov	r2, r3
 8015a82:	2300      	movs	r3, #0
 8015a84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015a8c:	4619      	mov	r1, r3
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015a94:	461a      	mov	r2, r3
 8015a96:	680b      	ldr	r3, [r1, #0]
 8015a98:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8015a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a9c:	2b01      	cmp	r3, #1
 8015a9e:	d10c      	bne.n	8015aba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8015aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d104      	bne.n	8015ab0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8015aa6:	2100      	movs	r1, #0
 8015aa8:	6878      	ldr	r0, [r7, #4]
 8015aaa:	f000 f945 	bl	8015d38 <USB_SetDevSpeed>
 8015aae:	e008      	b.n	8015ac2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8015ab0:	2101      	movs	r1, #1
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	f000 f940 	bl	8015d38 <USB_SetDevSpeed>
 8015ab8:	e003      	b.n	8015ac2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8015aba:	2103      	movs	r1, #3
 8015abc:	6878      	ldr	r0, [r7, #4]
 8015abe:	f000 f93b 	bl	8015d38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8015ac2:	2110      	movs	r1, #16
 8015ac4:	6878      	ldr	r0, [r7, #4]
 8015ac6:	f000 f8f3 	bl	8015cb0 <USB_FlushTxFifo>
 8015aca:	4603      	mov	r3, r0
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d001      	beq.n	8015ad4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8015ad0:	2301      	movs	r3, #1
 8015ad2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8015ad4:	6878      	ldr	r0, [r7, #4]
 8015ad6:	f000 f90f 	bl	8015cf8 <USB_FlushRxFifo>
 8015ada:	4603      	mov	r3, r0
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d001      	beq.n	8015ae4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8015ae0:	2301      	movs	r3, #1
 8015ae2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015aea:	461a      	mov	r2, r3
 8015aec:	2300      	movs	r3, #0
 8015aee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015af6:	461a      	mov	r2, r3
 8015af8:	2300      	movs	r3, #0
 8015afa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015b02:	461a      	mov	r2, r3
 8015b04:	2300      	movs	r3, #0
 8015b06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015b08:	2300      	movs	r3, #0
 8015b0a:	613b      	str	r3, [r7, #16]
 8015b0c:	e043      	b.n	8015b96 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015b0e:	693b      	ldr	r3, [r7, #16]
 8015b10:	015a      	lsls	r2, r3, #5
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	4413      	add	r3, r2
 8015b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015b20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015b24:	d118      	bne.n	8015b58 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8015b26:	693b      	ldr	r3, [r7, #16]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d10a      	bne.n	8015b42 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8015b2c:	693b      	ldr	r3, [r7, #16]
 8015b2e:	015a      	lsls	r2, r3, #5
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	4413      	add	r3, r2
 8015b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b38:	461a      	mov	r2, r3
 8015b3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8015b3e:	6013      	str	r3, [r2, #0]
 8015b40:	e013      	b.n	8015b6a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8015b42:	693b      	ldr	r3, [r7, #16]
 8015b44:	015a      	lsls	r2, r3, #5
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	4413      	add	r3, r2
 8015b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b4e:	461a      	mov	r2, r3
 8015b50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8015b54:	6013      	str	r3, [r2, #0]
 8015b56:	e008      	b.n	8015b6a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8015b58:	693b      	ldr	r3, [r7, #16]
 8015b5a:	015a      	lsls	r2, r3, #5
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	4413      	add	r3, r2
 8015b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b64:	461a      	mov	r2, r3
 8015b66:	2300      	movs	r3, #0
 8015b68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8015b6a:	693b      	ldr	r3, [r7, #16]
 8015b6c:	015a      	lsls	r2, r3, #5
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	4413      	add	r3, r2
 8015b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b76:	461a      	mov	r2, r3
 8015b78:	2300      	movs	r3, #0
 8015b7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8015b7c:	693b      	ldr	r3, [r7, #16]
 8015b7e:	015a      	lsls	r2, r3, #5
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	4413      	add	r3, r2
 8015b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b88:	461a      	mov	r2, r3
 8015b8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8015b8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015b90:	693b      	ldr	r3, [r7, #16]
 8015b92:	3301      	adds	r3, #1
 8015b94:	613b      	str	r3, [r7, #16]
 8015b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b98:	693a      	ldr	r2, [r7, #16]
 8015b9a:	429a      	cmp	r2, r3
 8015b9c:	d3b7      	bcc.n	8015b0e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	613b      	str	r3, [r7, #16]
 8015ba2:	e043      	b.n	8015c2c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015ba4:	693b      	ldr	r3, [r7, #16]
 8015ba6:	015a      	lsls	r2, r3, #5
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	4413      	add	r3, r2
 8015bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015bba:	d118      	bne.n	8015bee <USB_DevInit+0x206>
    {
      if (i == 0U)
 8015bbc:	693b      	ldr	r3, [r7, #16]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d10a      	bne.n	8015bd8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8015bc2:	693b      	ldr	r3, [r7, #16]
 8015bc4:	015a      	lsls	r2, r3, #5
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	4413      	add	r3, r2
 8015bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015bce:	461a      	mov	r2, r3
 8015bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8015bd4:	6013      	str	r3, [r2, #0]
 8015bd6:	e013      	b.n	8015c00 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8015bd8:	693b      	ldr	r3, [r7, #16]
 8015bda:	015a      	lsls	r2, r3, #5
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	4413      	add	r3, r2
 8015be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015be4:	461a      	mov	r2, r3
 8015be6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8015bea:	6013      	str	r3, [r2, #0]
 8015bec:	e008      	b.n	8015c00 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8015bee:	693b      	ldr	r3, [r7, #16]
 8015bf0:	015a      	lsls	r2, r3, #5
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	4413      	add	r3, r2
 8015bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015bfa:	461a      	mov	r2, r3
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8015c00:	693b      	ldr	r3, [r7, #16]
 8015c02:	015a      	lsls	r2, r3, #5
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	4413      	add	r3, r2
 8015c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015c0c:	461a      	mov	r2, r3
 8015c0e:	2300      	movs	r3, #0
 8015c10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8015c12:	693b      	ldr	r3, [r7, #16]
 8015c14:	015a      	lsls	r2, r3, #5
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	4413      	add	r3, r2
 8015c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015c1e:	461a      	mov	r2, r3
 8015c20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8015c24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015c26:	693b      	ldr	r3, [r7, #16]
 8015c28:	3301      	adds	r3, #1
 8015c2a:	613b      	str	r3, [r7, #16]
 8015c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c2e:	693a      	ldr	r2, [r7, #16]
 8015c30:	429a      	cmp	r2, r3
 8015c32:	d3b7      	bcc.n	8015ba4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015c3a:	691b      	ldr	r3, [r3, #16]
 8015c3c:	68fa      	ldr	r2, [r7, #12]
 8015c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015c42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015c46:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8015c54:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8015c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d105      	bne.n	8015c68 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	699b      	ldr	r3, [r3, #24]
 8015c60:	f043 0210 	orr.w	r2, r3, #16
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	699a      	ldr	r2, [r3, #24]
 8015c6c:	4b0f      	ldr	r3, [pc, #60]	; (8015cac <USB_DevInit+0x2c4>)
 8015c6e:	4313      	orrs	r3, r2
 8015c70:	687a      	ldr	r2, [r7, #4]
 8015c72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8015c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d005      	beq.n	8015c86 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	699b      	ldr	r3, [r3, #24]
 8015c7e:	f043 0208 	orr.w	r2, r3, #8
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8015c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c88:	2b01      	cmp	r3, #1
 8015c8a:	d107      	bne.n	8015c9c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	699b      	ldr	r3, [r3, #24]
 8015c90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015c94:	f043 0304 	orr.w	r3, r3, #4
 8015c98:	687a      	ldr	r2, [r7, #4]
 8015c9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8015c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	3718      	adds	r7, #24
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015ca8:	b004      	add	sp, #16
 8015caa:	4770      	bx	lr
 8015cac:	803c3800 	.word	0x803c3800

08015cb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8015cb0:	b480      	push	{r7}
 8015cb2:	b085      	sub	sp, #20
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	6078      	str	r0, [r7, #4]
 8015cb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8015cba:	2300      	movs	r3, #0
 8015cbc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8015cbe:	683b      	ldr	r3, [r7, #0]
 8015cc0:	019b      	lsls	r3, r3, #6
 8015cc2:	f043 0220 	orr.w	r2, r3, #32
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	3301      	adds	r3, #1
 8015cce:	60fb      	str	r3, [r7, #12]
 8015cd0:	4a08      	ldr	r2, [pc, #32]	; (8015cf4 <USB_FlushTxFifo+0x44>)
 8015cd2:	4293      	cmp	r3, r2
 8015cd4:	d901      	bls.n	8015cda <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8015cd6:	2303      	movs	r3, #3
 8015cd8:	e006      	b.n	8015ce8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	691b      	ldr	r3, [r3, #16]
 8015cde:	f003 0320 	and.w	r3, r3, #32
 8015ce2:	2b20      	cmp	r3, #32
 8015ce4:	d0f1      	beq.n	8015cca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8015ce6:	2300      	movs	r3, #0
}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	3714      	adds	r7, #20
 8015cec:	46bd      	mov	sp, r7
 8015cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf2:	4770      	bx	lr
 8015cf4:	00030d40 	.word	0x00030d40

08015cf8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8015cf8:	b480      	push	{r7}
 8015cfa:	b085      	sub	sp, #20
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015d00:	2300      	movs	r3, #0
 8015d02:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	2210      	movs	r2, #16
 8015d08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	3301      	adds	r3, #1
 8015d0e:	60fb      	str	r3, [r7, #12]
 8015d10:	4a08      	ldr	r2, [pc, #32]	; (8015d34 <USB_FlushRxFifo+0x3c>)
 8015d12:	4293      	cmp	r3, r2
 8015d14:	d901      	bls.n	8015d1a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8015d16:	2303      	movs	r3, #3
 8015d18:	e006      	b.n	8015d28 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	691b      	ldr	r3, [r3, #16]
 8015d1e:	f003 0310 	and.w	r3, r3, #16
 8015d22:	2b10      	cmp	r3, #16
 8015d24:	d0f1      	beq.n	8015d0a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8015d26:	2300      	movs	r3, #0
}
 8015d28:	4618      	mov	r0, r3
 8015d2a:	3714      	adds	r7, #20
 8015d2c:	46bd      	mov	sp, r7
 8015d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d32:	4770      	bx	lr
 8015d34:	00030d40 	.word	0x00030d40

08015d38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8015d38:	b480      	push	{r7}
 8015d3a:	b085      	sub	sp, #20
 8015d3c:	af00      	add	r7, sp, #0
 8015d3e:	6078      	str	r0, [r7, #4]
 8015d40:	460b      	mov	r3, r1
 8015d42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015d4e:	681a      	ldr	r2, [r3, #0]
 8015d50:	78fb      	ldrb	r3, [r7, #3]
 8015d52:	68f9      	ldr	r1, [r7, #12]
 8015d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015d58:	4313      	orrs	r3, r2
 8015d5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8015d5c:	2300      	movs	r3, #0
}
 8015d5e:	4618      	mov	r0, r3
 8015d60:	3714      	adds	r7, #20
 8015d62:	46bd      	mov	sp, r7
 8015d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d68:	4770      	bx	lr

08015d6a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8015d6a:	b480      	push	{r7}
 8015d6c:	b087      	sub	sp, #28
 8015d6e:	af00      	add	r7, sp, #0
 8015d70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8015d76:	693b      	ldr	r3, [r7, #16]
 8015d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015d7c:	689b      	ldr	r3, [r3, #8]
 8015d7e:	f003 0306 	and.w	r3, r3, #6
 8015d82:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d102      	bne.n	8015d90 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	75fb      	strb	r3, [r7, #23]
 8015d8e:	e00a      	b.n	8015da6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	2b02      	cmp	r3, #2
 8015d94:	d002      	beq.n	8015d9c <USB_GetDevSpeed+0x32>
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	2b06      	cmp	r3, #6
 8015d9a:	d102      	bne.n	8015da2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8015d9c:	2302      	movs	r3, #2
 8015d9e:	75fb      	strb	r3, [r7, #23]
 8015da0:	e001      	b.n	8015da6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8015da2:	230f      	movs	r3, #15
 8015da4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8015da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8015da8:	4618      	mov	r0, r3
 8015daa:	371c      	adds	r7, #28
 8015dac:	46bd      	mov	sp, r7
 8015dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db2:	4770      	bx	lr

08015db4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015db4:	b480      	push	{r7}
 8015db6:	b085      	sub	sp, #20
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
 8015dbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015dc2:	683b      	ldr	r3, [r7, #0]
 8015dc4:	781b      	ldrb	r3, [r3, #0]
 8015dc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	785b      	ldrb	r3, [r3, #1]
 8015dcc:	2b01      	cmp	r3, #1
 8015dce:	d13a      	bne.n	8015e46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015dd6:	69da      	ldr	r2, [r3, #28]
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	781b      	ldrb	r3, [r3, #0]
 8015ddc:	f003 030f 	and.w	r3, r3, #15
 8015de0:	2101      	movs	r1, #1
 8015de2:	fa01 f303 	lsl.w	r3, r1, r3
 8015de6:	b29b      	uxth	r3, r3
 8015de8:	68f9      	ldr	r1, [r7, #12]
 8015dea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015dee:	4313      	orrs	r3, r2
 8015df0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8015df2:	68bb      	ldr	r3, [r7, #8]
 8015df4:	015a      	lsls	r2, r3, #5
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	4413      	add	r3, r2
 8015dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d155      	bne.n	8015eb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015e08:	68bb      	ldr	r3, [r7, #8]
 8015e0a:	015a      	lsls	r2, r3, #5
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	4413      	add	r3, r2
 8015e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015e14:	681a      	ldr	r2, [r3, #0]
 8015e16:	683b      	ldr	r3, [r7, #0]
 8015e18:	689b      	ldr	r3, [r3, #8]
 8015e1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8015e1e:	683b      	ldr	r3, [r7, #0]
 8015e20:	78db      	ldrb	r3, [r3, #3]
 8015e22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015e24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8015e26:	68bb      	ldr	r3, [r7, #8]
 8015e28:	059b      	lsls	r3, r3, #22
 8015e2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015e2c:	4313      	orrs	r3, r2
 8015e2e:	68ba      	ldr	r2, [r7, #8]
 8015e30:	0151      	lsls	r1, r2, #5
 8015e32:	68fa      	ldr	r2, [r7, #12]
 8015e34:	440a      	add	r2, r1
 8015e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015e42:	6013      	str	r3, [r2, #0]
 8015e44:	e036      	b.n	8015eb4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015e4c:	69da      	ldr	r2, [r3, #28]
 8015e4e:	683b      	ldr	r3, [r7, #0]
 8015e50:	781b      	ldrb	r3, [r3, #0]
 8015e52:	f003 030f 	and.w	r3, r3, #15
 8015e56:	2101      	movs	r1, #1
 8015e58:	fa01 f303 	lsl.w	r3, r1, r3
 8015e5c:	041b      	lsls	r3, r3, #16
 8015e5e:	68f9      	ldr	r1, [r7, #12]
 8015e60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015e64:	4313      	orrs	r3, r2
 8015e66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8015e68:	68bb      	ldr	r3, [r7, #8]
 8015e6a:	015a      	lsls	r2, r3, #5
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	4413      	add	r3, r2
 8015e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d11a      	bne.n	8015eb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015e7e:	68bb      	ldr	r3, [r7, #8]
 8015e80:	015a      	lsls	r2, r3, #5
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	4413      	add	r3, r2
 8015e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e8a:	681a      	ldr	r2, [r3, #0]
 8015e8c:	683b      	ldr	r3, [r7, #0]
 8015e8e:	689b      	ldr	r3, [r3, #8]
 8015e90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	78db      	ldrb	r3, [r3, #3]
 8015e98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015e9a:	430b      	orrs	r3, r1
 8015e9c:	4313      	orrs	r3, r2
 8015e9e:	68ba      	ldr	r2, [r7, #8]
 8015ea0:	0151      	lsls	r1, r2, #5
 8015ea2:	68fa      	ldr	r2, [r7, #12]
 8015ea4:	440a      	add	r2, r1
 8015ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015eb2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8015eb4:	2300      	movs	r3, #0
}
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	3714      	adds	r7, #20
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec0:	4770      	bx	lr
	...

08015ec4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015ec4:	b480      	push	{r7}
 8015ec6:	b085      	sub	sp, #20
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
 8015ecc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015ed2:	683b      	ldr	r3, [r7, #0]
 8015ed4:	781b      	ldrb	r3, [r3, #0]
 8015ed6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8015ed8:	683b      	ldr	r3, [r7, #0]
 8015eda:	785b      	ldrb	r3, [r3, #1]
 8015edc:	2b01      	cmp	r3, #1
 8015ede:	d161      	bne.n	8015fa4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015ee0:	68bb      	ldr	r3, [r7, #8]
 8015ee2:	015a      	lsls	r2, r3, #5
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	4413      	add	r3, r2
 8015ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015ef6:	d11f      	bne.n	8015f38 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8015ef8:	68bb      	ldr	r3, [r7, #8]
 8015efa:	015a      	lsls	r2, r3, #5
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	4413      	add	r3, r2
 8015f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	68ba      	ldr	r2, [r7, #8]
 8015f08:	0151      	lsls	r1, r2, #5
 8015f0a:	68fa      	ldr	r2, [r7, #12]
 8015f0c:	440a      	add	r2, r1
 8015f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015f12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015f16:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8015f18:	68bb      	ldr	r3, [r7, #8]
 8015f1a:	015a      	lsls	r2, r3, #5
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	4413      	add	r3, r2
 8015f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	68ba      	ldr	r2, [r7, #8]
 8015f28:	0151      	lsls	r1, r2, #5
 8015f2a:	68fa      	ldr	r2, [r7, #12]
 8015f2c:	440a      	add	r2, r1
 8015f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015f32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015f36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015f40:	683b      	ldr	r3, [r7, #0]
 8015f42:	781b      	ldrb	r3, [r3, #0]
 8015f44:	f003 030f 	and.w	r3, r3, #15
 8015f48:	2101      	movs	r1, #1
 8015f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8015f4e:	b29b      	uxth	r3, r3
 8015f50:	43db      	mvns	r3, r3
 8015f52:	68f9      	ldr	r1, [r7, #12]
 8015f54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015f58:	4013      	ands	r3, r2
 8015f5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f62:	69da      	ldr	r2, [r3, #28]
 8015f64:	683b      	ldr	r3, [r7, #0]
 8015f66:	781b      	ldrb	r3, [r3, #0]
 8015f68:	f003 030f 	and.w	r3, r3, #15
 8015f6c:	2101      	movs	r1, #1
 8015f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8015f72:	b29b      	uxth	r3, r3
 8015f74:	43db      	mvns	r3, r3
 8015f76:	68f9      	ldr	r1, [r7, #12]
 8015f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015f7c:	4013      	ands	r3, r2
 8015f7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8015f80:	68bb      	ldr	r3, [r7, #8]
 8015f82:	015a      	lsls	r2, r3, #5
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	4413      	add	r3, r2
 8015f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015f8c:	681a      	ldr	r2, [r3, #0]
 8015f8e:	68bb      	ldr	r3, [r7, #8]
 8015f90:	0159      	lsls	r1, r3, #5
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	440b      	add	r3, r1
 8015f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015f9a:	4619      	mov	r1, r3
 8015f9c:	4b35      	ldr	r3, [pc, #212]	; (8016074 <USB_DeactivateEndpoint+0x1b0>)
 8015f9e:	4013      	ands	r3, r2
 8015fa0:	600b      	str	r3, [r1, #0]
 8015fa2:	e060      	b.n	8016066 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015fa4:	68bb      	ldr	r3, [r7, #8]
 8015fa6:	015a      	lsls	r2, r3, #5
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	4413      	add	r3, r2
 8015fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015fba:	d11f      	bne.n	8015ffc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8015fbc:	68bb      	ldr	r3, [r7, #8]
 8015fbe:	015a      	lsls	r2, r3, #5
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	4413      	add	r3, r2
 8015fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	68ba      	ldr	r2, [r7, #8]
 8015fcc:	0151      	lsls	r1, r2, #5
 8015fce:	68fa      	ldr	r2, [r7, #12]
 8015fd0:	440a      	add	r2, r1
 8015fd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015fd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015fda:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8015fdc:	68bb      	ldr	r3, [r7, #8]
 8015fde:	015a      	lsls	r2, r3, #5
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	4413      	add	r3, r2
 8015fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	68ba      	ldr	r2, [r7, #8]
 8015fec:	0151      	lsls	r1, r2, #5
 8015fee:	68fa      	ldr	r2, [r7, #12]
 8015ff0:	440a      	add	r2, r1
 8015ff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015ff6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015ffa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016004:	683b      	ldr	r3, [r7, #0]
 8016006:	781b      	ldrb	r3, [r3, #0]
 8016008:	f003 030f 	and.w	r3, r3, #15
 801600c:	2101      	movs	r1, #1
 801600e:	fa01 f303 	lsl.w	r3, r1, r3
 8016012:	041b      	lsls	r3, r3, #16
 8016014:	43db      	mvns	r3, r3
 8016016:	68f9      	ldr	r1, [r7, #12]
 8016018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801601c:	4013      	ands	r3, r2
 801601e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016026:	69da      	ldr	r2, [r3, #28]
 8016028:	683b      	ldr	r3, [r7, #0]
 801602a:	781b      	ldrb	r3, [r3, #0]
 801602c:	f003 030f 	and.w	r3, r3, #15
 8016030:	2101      	movs	r1, #1
 8016032:	fa01 f303 	lsl.w	r3, r1, r3
 8016036:	041b      	lsls	r3, r3, #16
 8016038:	43db      	mvns	r3, r3
 801603a:	68f9      	ldr	r1, [r7, #12]
 801603c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016040:	4013      	ands	r3, r2
 8016042:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8016044:	68bb      	ldr	r3, [r7, #8]
 8016046:	015a      	lsls	r2, r3, #5
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	4413      	add	r3, r2
 801604c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016050:	681a      	ldr	r2, [r3, #0]
 8016052:	68bb      	ldr	r3, [r7, #8]
 8016054:	0159      	lsls	r1, r3, #5
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	440b      	add	r3, r1
 801605a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801605e:	4619      	mov	r1, r3
 8016060:	4b05      	ldr	r3, [pc, #20]	; (8016078 <USB_DeactivateEndpoint+0x1b4>)
 8016062:	4013      	ands	r3, r2
 8016064:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8016066:	2300      	movs	r3, #0
}
 8016068:	4618      	mov	r0, r3
 801606a:	3714      	adds	r7, #20
 801606c:	46bd      	mov	sp, r7
 801606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016072:	4770      	bx	lr
 8016074:	ec337800 	.word	0xec337800
 8016078:	eff37800 	.word	0xeff37800

0801607c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801607c:	b580      	push	{r7, lr}
 801607e:	b08a      	sub	sp, #40	; 0x28
 8016080:	af02      	add	r7, sp, #8
 8016082:	60f8      	str	r0, [r7, #12]
 8016084:	60b9      	str	r1, [r7, #8]
 8016086:	4613      	mov	r3, r2
 8016088:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801608e:	68bb      	ldr	r3, [r7, #8]
 8016090:	781b      	ldrb	r3, [r3, #0]
 8016092:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8016094:	68bb      	ldr	r3, [r7, #8]
 8016096:	785b      	ldrb	r3, [r3, #1]
 8016098:	2b01      	cmp	r3, #1
 801609a:	f040 815c 	bne.w	8016356 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801609e:	68bb      	ldr	r3, [r7, #8]
 80160a0:	695b      	ldr	r3, [r3, #20]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d132      	bne.n	801610c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80160a6:	69bb      	ldr	r3, [r7, #24]
 80160a8:	015a      	lsls	r2, r3, #5
 80160aa:	69fb      	ldr	r3, [r7, #28]
 80160ac:	4413      	add	r3, r2
 80160ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80160b2:	691b      	ldr	r3, [r3, #16]
 80160b4:	69ba      	ldr	r2, [r7, #24]
 80160b6:	0151      	lsls	r1, r2, #5
 80160b8:	69fa      	ldr	r2, [r7, #28]
 80160ba:	440a      	add	r2, r1
 80160bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80160c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80160c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80160c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80160ca:	69bb      	ldr	r3, [r7, #24]
 80160cc:	015a      	lsls	r2, r3, #5
 80160ce:	69fb      	ldr	r3, [r7, #28]
 80160d0:	4413      	add	r3, r2
 80160d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80160d6:	691b      	ldr	r3, [r3, #16]
 80160d8:	69ba      	ldr	r2, [r7, #24]
 80160da:	0151      	lsls	r1, r2, #5
 80160dc:	69fa      	ldr	r2, [r7, #28]
 80160de:	440a      	add	r2, r1
 80160e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80160e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80160e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80160ea:	69bb      	ldr	r3, [r7, #24]
 80160ec:	015a      	lsls	r2, r3, #5
 80160ee:	69fb      	ldr	r3, [r7, #28]
 80160f0:	4413      	add	r3, r2
 80160f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80160f6:	691b      	ldr	r3, [r3, #16]
 80160f8:	69ba      	ldr	r2, [r7, #24]
 80160fa:	0151      	lsls	r1, r2, #5
 80160fc:	69fa      	ldr	r2, [r7, #28]
 80160fe:	440a      	add	r2, r1
 8016100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016104:	0cdb      	lsrs	r3, r3, #19
 8016106:	04db      	lsls	r3, r3, #19
 8016108:	6113      	str	r3, [r2, #16]
 801610a:	e074      	b.n	80161f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801610c:	69bb      	ldr	r3, [r7, #24]
 801610e:	015a      	lsls	r2, r3, #5
 8016110:	69fb      	ldr	r3, [r7, #28]
 8016112:	4413      	add	r3, r2
 8016114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016118:	691b      	ldr	r3, [r3, #16]
 801611a:	69ba      	ldr	r2, [r7, #24]
 801611c:	0151      	lsls	r1, r2, #5
 801611e:	69fa      	ldr	r2, [r7, #28]
 8016120:	440a      	add	r2, r1
 8016122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016126:	0cdb      	lsrs	r3, r3, #19
 8016128:	04db      	lsls	r3, r3, #19
 801612a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801612c:	69bb      	ldr	r3, [r7, #24]
 801612e:	015a      	lsls	r2, r3, #5
 8016130:	69fb      	ldr	r3, [r7, #28]
 8016132:	4413      	add	r3, r2
 8016134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016138:	691b      	ldr	r3, [r3, #16]
 801613a:	69ba      	ldr	r2, [r7, #24]
 801613c:	0151      	lsls	r1, r2, #5
 801613e:	69fa      	ldr	r2, [r7, #28]
 8016140:	440a      	add	r2, r1
 8016142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016146:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801614a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801614e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8016150:	69bb      	ldr	r3, [r7, #24]
 8016152:	015a      	lsls	r2, r3, #5
 8016154:	69fb      	ldr	r3, [r7, #28]
 8016156:	4413      	add	r3, r2
 8016158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801615c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801615e:	68bb      	ldr	r3, [r7, #8]
 8016160:	6959      	ldr	r1, [r3, #20]
 8016162:	68bb      	ldr	r3, [r7, #8]
 8016164:	689b      	ldr	r3, [r3, #8]
 8016166:	440b      	add	r3, r1
 8016168:	1e59      	subs	r1, r3, #1
 801616a:	68bb      	ldr	r3, [r7, #8]
 801616c:	689b      	ldr	r3, [r3, #8]
 801616e:	fbb1 f3f3 	udiv	r3, r1, r3
 8016172:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8016174:	4b9d      	ldr	r3, [pc, #628]	; (80163ec <USB_EPStartXfer+0x370>)
 8016176:	400b      	ands	r3, r1
 8016178:	69b9      	ldr	r1, [r7, #24]
 801617a:	0148      	lsls	r0, r1, #5
 801617c:	69f9      	ldr	r1, [r7, #28]
 801617e:	4401      	add	r1, r0
 8016180:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8016184:	4313      	orrs	r3, r2
 8016186:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8016188:	69bb      	ldr	r3, [r7, #24]
 801618a:	015a      	lsls	r2, r3, #5
 801618c:	69fb      	ldr	r3, [r7, #28]
 801618e:	4413      	add	r3, r2
 8016190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016194:	691a      	ldr	r2, [r3, #16]
 8016196:	68bb      	ldr	r3, [r7, #8]
 8016198:	695b      	ldr	r3, [r3, #20]
 801619a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801619e:	69b9      	ldr	r1, [r7, #24]
 80161a0:	0148      	lsls	r0, r1, #5
 80161a2:	69f9      	ldr	r1, [r7, #28]
 80161a4:	4401      	add	r1, r0
 80161a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80161aa:	4313      	orrs	r3, r2
 80161ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80161ae:	68bb      	ldr	r3, [r7, #8]
 80161b0:	78db      	ldrb	r3, [r3, #3]
 80161b2:	2b01      	cmp	r3, #1
 80161b4:	d11f      	bne.n	80161f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80161b6:	69bb      	ldr	r3, [r7, #24]
 80161b8:	015a      	lsls	r2, r3, #5
 80161ba:	69fb      	ldr	r3, [r7, #28]
 80161bc:	4413      	add	r3, r2
 80161be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80161c2:	691b      	ldr	r3, [r3, #16]
 80161c4:	69ba      	ldr	r2, [r7, #24]
 80161c6:	0151      	lsls	r1, r2, #5
 80161c8:	69fa      	ldr	r2, [r7, #28]
 80161ca:	440a      	add	r2, r1
 80161cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80161d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80161d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80161d6:	69bb      	ldr	r3, [r7, #24]
 80161d8:	015a      	lsls	r2, r3, #5
 80161da:	69fb      	ldr	r3, [r7, #28]
 80161dc:	4413      	add	r3, r2
 80161de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80161e2:	691b      	ldr	r3, [r3, #16]
 80161e4:	69ba      	ldr	r2, [r7, #24]
 80161e6:	0151      	lsls	r1, r2, #5
 80161e8:	69fa      	ldr	r2, [r7, #28]
 80161ea:	440a      	add	r2, r1
 80161ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80161f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80161f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80161f6:	79fb      	ldrb	r3, [r7, #7]
 80161f8:	2b01      	cmp	r3, #1
 80161fa:	d14b      	bne.n	8016294 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80161fc:	68bb      	ldr	r3, [r7, #8]
 80161fe:	691b      	ldr	r3, [r3, #16]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d009      	beq.n	8016218 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8016204:	69bb      	ldr	r3, [r7, #24]
 8016206:	015a      	lsls	r2, r3, #5
 8016208:	69fb      	ldr	r3, [r7, #28]
 801620a:	4413      	add	r3, r2
 801620c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016210:	461a      	mov	r2, r3
 8016212:	68bb      	ldr	r3, [r7, #8]
 8016214:	691b      	ldr	r3, [r3, #16]
 8016216:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8016218:	68bb      	ldr	r3, [r7, #8]
 801621a:	78db      	ldrb	r3, [r3, #3]
 801621c:	2b01      	cmp	r3, #1
 801621e:	d128      	bne.n	8016272 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016220:	69fb      	ldr	r3, [r7, #28]
 8016222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016226:	689b      	ldr	r3, [r3, #8]
 8016228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801622c:	2b00      	cmp	r3, #0
 801622e:	d110      	bne.n	8016252 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8016230:	69bb      	ldr	r3, [r7, #24]
 8016232:	015a      	lsls	r2, r3, #5
 8016234:	69fb      	ldr	r3, [r7, #28]
 8016236:	4413      	add	r3, r2
 8016238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	69ba      	ldr	r2, [r7, #24]
 8016240:	0151      	lsls	r1, r2, #5
 8016242:	69fa      	ldr	r2, [r7, #28]
 8016244:	440a      	add	r2, r1
 8016246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801624a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801624e:	6013      	str	r3, [r2, #0]
 8016250:	e00f      	b.n	8016272 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8016252:	69bb      	ldr	r3, [r7, #24]
 8016254:	015a      	lsls	r2, r3, #5
 8016256:	69fb      	ldr	r3, [r7, #28]
 8016258:	4413      	add	r3, r2
 801625a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	69ba      	ldr	r2, [r7, #24]
 8016262:	0151      	lsls	r1, r2, #5
 8016264:	69fa      	ldr	r2, [r7, #28]
 8016266:	440a      	add	r2, r1
 8016268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801626c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016270:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016272:	69bb      	ldr	r3, [r7, #24]
 8016274:	015a      	lsls	r2, r3, #5
 8016276:	69fb      	ldr	r3, [r7, #28]
 8016278:	4413      	add	r3, r2
 801627a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	69ba      	ldr	r2, [r7, #24]
 8016282:	0151      	lsls	r1, r2, #5
 8016284:	69fa      	ldr	r2, [r7, #28]
 8016286:	440a      	add	r2, r1
 8016288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801628c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8016290:	6013      	str	r3, [r2, #0]
 8016292:	e12f      	b.n	80164f4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016294:	69bb      	ldr	r3, [r7, #24]
 8016296:	015a      	lsls	r2, r3, #5
 8016298:	69fb      	ldr	r3, [r7, #28]
 801629a:	4413      	add	r3, r2
 801629c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	69ba      	ldr	r2, [r7, #24]
 80162a4:	0151      	lsls	r1, r2, #5
 80162a6:	69fa      	ldr	r2, [r7, #28]
 80162a8:	440a      	add	r2, r1
 80162aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80162ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80162b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80162b4:	68bb      	ldr	r3, [r7, #8]
 80162b6:	78db      	ldrb	r3, [r3, #3]
 80162b8:	2b01      	cmp	r3, #1
 80162ba:	d015      	beq.n	80162e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80162bc:	68bb      	ldr	r3, [r7, #8]
 80162be:	695b      	ldr	r3, [r3, #20]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	f000 8117 	beq.w	80164f4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80162c6:	69fb      	ldr	r3, [r7, #28]
 80162c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80162cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80162ce:	68bb      	ldr	r3, [r7, #8]
 80162d0:	781b      	ldrb	r3, [r3, #0]
 80162d2:	f003 030f 	and.w	r3, r3, #15
 80162d6:	2101      	movs	r1, #1
 80162d8:	fa01 f303 	lsl.w	r3, r1, r3
 80162dc:	69f9      	ldr	r1, [r7, #28]
 80162de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80162e2:	4313      	orrs	r3, r2
 80162e4:	634b      	str	r3, [r1, #52]	; 0x34
 80162e6:	e105      	b.n	80164f4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80162e8:	69fb      	ldr	r3, [r7, #28]
 80162ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80162ee:	689b      	ldr	r3, [r3, #8]
 80162f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d110      	bne.n	801631a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80162f8:	69bb      	ldr	r3, [r7, #24]
 80162fa:	015a      	lsls	r2, r3, #5
 80162fc:	69fb      	ldr	r3, [r7, #28]
 80162fe:	4413      	add	r3, r2
 8016300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	69ba      	ldr	r2, [r7, #24]
 8016308:	0151      	lsls	r1, r2, #5
 801630a:	69fa      	ldr	r2, [r7, #28]
 801630c:	440a      	add	r2, r1
 801630e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016312:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016316:	6013      	str	r3, [r2, #0]
 8016318:	e00f      	b.n	801633a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801631a:	69bb      	ldr	r3, [r7, #24]
 801631c:	015a      	lsls	r2, r3, #5
 801631e:	69fb      	ldr	r3, [r7, #28]
 8016320:	4413      	add	r3, r2
 8016322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	69ba      	ldr	r2, [r7, #24]
 801632a:	0151      	lsls	r1, r2, #5
 801632c:	69fa      	ldr	r2, [r7, #28]
 801632e:	440a      	add	r2, r1
 8016330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016338:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801633a:	68bb      	ldr	r3, [r7, #8]
 801633c:	68d9      	ldr	r1, [r3, #12]
 801633e:	68bb      	ldr	r3, [r7, #8]
 8016340:	781a      	ldrb	r2, [r3, #0]
 8016342:	68bb      	ldr	r3, [r7, #8]
 8016344:	695b      	ldr	r3, [r3, #20]
 8016346:	b298      	uxth	r0, r3
 8016348:	79fb      	ldrb	r3, [r7, #7]
 801634a:	9300      	str	r3, [sp, #0]
 801634c:	4603      	mov	r3, r0
 801634e:	68f8      	ldr	r0, [r7, #12]
 8016350:	f000 fa2b 	bl	80167aa <USB_WritePacket>
 8016354:	e0ce      	b.n	80164f4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8016356:	69bb      	ldr	r3, [r7, #24]
 8016358:	015a      	lsls	r2, r3, #5
 801635a:	69fb      	ldr	r3, [r7, #28]
 801635c:	4413      	add	r3, r2
 801635e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016362:	691b      	ldr	r3, [r3, #16]
 8016364:	69ba      	ldr	r2, [r7, #24]
 8016366:	0151      	lsls	r1, r2, #5
 8016368:	69fa      	ldr	r2, [r7, #28]
 801636a:	440a      	add	r2, r1
 801636c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016370:	0cdb      	lsrs	r3, r3, #19
 8016372:	04db      	lsls	r3, r3, #19
 8016374:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8016376:	69bb      	ldr	r3, [r7, #24]
 8016378:	015a      	lsls	r2, r3, #5
 801637a:	69fb      	ldr	r3, [r7, #28]
 801637c:	4413      	add	r3, r2
 801637e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016382:	691b      	ldr	r3, [r3, #16]
 8016384:	69ba      	ldr	r2, [r7, #24]
 8016386:	0151      	lsls	r1, r2, #5
 8016388:	69fa      	ldr	r2, [r7, #28]
 801638a:	440a      	add	r2, r1
 801638c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016390:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8016394:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8016398:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801639a:	68bb      	ldr	r3, [r7, #8]
 801639c:	695b      	ldr	r3, [r3, #20]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d126      	bne.n	80163f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80163a2:	69bb      	ldr	r3, [r7, #24]
 80163a4:	015a      	lsls	r2, r3, #5
 80163a6:	69fb      	ldr	r3, [r7, #28]
 80163a8:	4413      	add	r3, r2
 80163aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80163ae:	691a      	ldr	r2, [r3, #16]
 80163b0:	68bb      	ldr	r3, [r7, #8]
 80163b2:	689b      	ldr	r3, [r3, #8]
 80163b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80163b8:	69b9      	ldr	r1, [r7, #24]
 80163ba:	0148      	lsls	r0, r1, #5
 80163bc:	69f9      	ldr	r1, [r7, #28]
 80163be:	4401      	add	r1, r0
 80163c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80163c4:	4313      	orrs	r3, r2
 80163c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80163c8:	69bb      	ldr	r3, [r7, #24]
 80163ca:	015a      	lsls	r2, r3, #5
 80163cc:	69fb      	ldr	r3, [r7, #28]
 80163ce:	4413      	add	r3, r2
 80163d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80163d4:	691b      	ldr	r3, [r3, #16]
 80163d6:	69ba      	ldr	r2, [r7, #24]
 80163d8:	0151      	lsls	r1, r2, #5
 80163da:	69fa      	ldr	r2, [r7, #28]
 80163dc:	440a      	add	r2, r1
 80163de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80163e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80163e6:	6113      	str	r3, [r2, #16]
 80163e8:	e036      	b.n	8016458 <USB_EPStartXfer+0x3dc>
 80163ea:	bf00      	nop
 80163ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80163f0:	68bb      	ldr	r3, [r7, #8]
 80163f2:	695a      	ldr	r2, [r3, #20]
 80163f4:	68bb      	ldr	r3, [r7, #8]
 80163f6:	689b      	ldr	r3, [r3, #8]
 80163f8:	4413      	add	r3, r2
 80163fa:	1e5a      	subs	r2, r3, #1
 80163fc:	68bb      	ldr	r3, [r7, #8]
 80163fe:	689b      	ldr	r3, [r3, #8]
 8016400:	fbb2 f3f3 	udiv	r3, r2, r3
 8016404:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8016406:	69bb      	ldr	r3, [r7, #24]
 8016408:	015a      	lsls	r2, r3, #5
 801640a:	69fb      	ldr	r3, [r7, #28]
 801640c:	4413      	add	r3, r2
 801640e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016412:	691a      	ldr	r2, [r3, #16]
 8016414:	8afb      	ldrh	r3, [r7, #22]
 8016416:	04d9      	lsls	r1, r3, #19
 8016418:	4b39      	ldr	r3, [pc, #228]	; (8016500 <USB_EPStartXfer+0x484>)
 801641a:	400b      	ands	r3, r1
 801641c:	69b9      	ldr	r1, [r7, #24]
 801641e:	0148      	lsls	r0, r1, #5
 8016420:	69f9      	ldr	r1, [r7, #28]
 8016422:	4401      	add	r1, r0
 8016424:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8016428:	4313      	orrs	r3, r2
 801642a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801642c:	69bb      	ldr	r3, [r7, #24]
 801642e:	015a      	lsls	r2, r3, #5
 8016430:	69fb      	ldr	r3, [r7, #28]
 8016432:	4413      	add	r3, r2
 8016434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016438:	691a      	ldr	r2, [r3, #16]
 801643a:	68bb      	ldr	r3, [r7, #8]
 801643c:	689b      	ldr	r3, [r3, #8]
 801643e:	8af9      	ldrh	r1, [r7, #22]
 8016440:	fb01 f303 	mul.w	r3, r1, r3
 8016444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016448:	69b9      	ldr	r1, [r7, #24]
 801644a:	0148      	lsls	r0, r1, #5
 801644c:	69f9      	ldr	r1, [r7, #28]
 801644e:	4401      	add	r1, r0
 8016450:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8016454:	4313      	orrs	r3, r2
 8016456:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8016458:	79fb      	ldrb	r3, [r7, #7]
 801645a:	2b01      	cmp	r3, #1
 801645c:	d10d      	bne.n	801647a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801645e:	68bb      	ldr	r3, [r7, #8]
 8016460:	68db      	ldr	r3, [r3, #12]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d009      	beq.n	801647a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8016466:	68bb      	ldr	r3, [r7, #8]
 8016468:	68d9      	ldr	r1, [r3, #12]
 801646a:	69bb      	ldr	r3, [r7, #24]
 801646c:	015a      	lsls	r2, r3, #5
 801646e:	69fb      	ldr	r3, [r7, #28]
 8016470:	4413      	add	r3, r2
 8016472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016476:	460a      	mov	r2, r1
 8016478:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801647a:	68bb      	ldr	r3, [r7, #8]
 801647c:	78db      	ldrb	r3, [r3, #3]
 801647e:	2b01      	cmp	r3, #1
 8016480:	d128      	bne.n	80164d4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016482:	69fb      	ldr	r3, [r7, #28]
 8016484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016488:	689b      	ldr	r3, [r3, #8]
 801648a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801648e:	2b00      	cmp	r3, #0
 8016490:	d110      	bne.n	80164b4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8016492:	69bb      	ldr	r3, [r7, #24]
 8016494:	015a      	lsls	r2, r3, #5
 8016496:	69fb      	ldr	r3, [r7, #28]
 8016498:	4413      	add	r3, r2
 801649a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	69ba      	ldr	r2, [r7, #24]
 80164a2:	0151      	lsls	r1, r2, #5
 80164a4:	69fa      	ldr	r2, [r7, #28]
 80164a6:	440a      	add	r2, r1
 80164a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80164ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80164b0:	6013      	str	r3, [r2, #0]
 80164b2:	e00f      	b.n	80164d4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80164b4:	69bb      	ldr	r3, [r7, #24]
 80164b6:	015a      	lsls	r2, r3, #5
 80164b8:	69fb      	ldr	r3, [r7, #28]
 80164ba:	4413      	add	r3, r2
 80164bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	69ba      	ldr	r2, [r7, #24]
 80164c4:	0151      	lsls	r1, r2, #5
 80164c6:	69fa      	ldr	r2, [r7, #28]
 80164c8:	440a      	add	r2, r1
 80164ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80164ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80164d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80164d4:	69bb      	ldr	r3, [r7, #24]
 80164d6:	015a      	lsls	r2, r3, #5
 80164d8:	69fb      	ldr	r3, [r7, #28]
 80164da:	4413      	add	r3, r2
 80164dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	69ba      	ldr	r2, [r7, #24]
 80164e4:	0151      	lsls	r1, r2, #5
 80164e6:	69fa      	ldr	r2, [r7, #28]
 80164e8:	440a      	add	r2, r1
 80164ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80164ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80164f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80164f4:	2300      	movs	r3, #0
}
 80164f6:	4618      	mov	r0, r3
 80164f8:	3720      	adds	r7, #32
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}
 80164fe:	bf00      	nop
 8016500:	1ff80000 	.word	0x1ff80000

08016504 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8016504:	b480      	push	{r7}
 8016506:	b087      	sub	sp, #28
 8016508:	af00      	add	r7, sp, #0
 801650a:	60f8      	str	r0, [r7, #12]
 801650c:	60b9      	str	r1, [r7, #8]
 801650e:	4613      	mov	r3, r2
 8016510:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8016516:	68bb      	ldr	r3, [r7, #8]
 8016518:	781b      	ldrb	r3, [r3, #0]
 801651a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801651c:	68bb      	ldr	r3, [r7, #8]
 801651e:	785b      	ldrb	r3, [r3, #1]
 8016520:	2b01      	cmp	r3, #1
 8016522:	f040 80cd 	bne.w	80166c0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8016526:	68bb      	ldr	r3, [r7, #8]
 8016528:	695b      	ldr	r3, [r3, #20]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d132      	bne.n	8016594 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801652e:	693b      	ldr	r3, [r7, #16]
 8016530:	015a      	lsls	r2, r3, #5
 8016532:	697b      	ldr	r3, [r7, #20]
 8016534:	4413      	add	r3, r2
 8016536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801653a:	691b      	ldr	r3, [r3, #16]
 801653c:	693a      	ldr	r2, [r7, #16]
 801653e:	0151      	lsls	r1, r2, #5
 8016540:	697a      	ldr	r2, [r7, #20]
 8016542:	440a      	add	r2, r1
 8016544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016548:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801654c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8016550:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8016552:	693b      	ldr	r3, [r7, #16]
 8016554:	015a      	lsls	r2, r3, #5
 8016556:	697b      	ldr	r3, [r7, #20]
 8016558:	4413      	add	r3, r2
 801655a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801655e:	691b      	ldr	r3, [r3, #16]
 8016560:	693a      	ldr	r2, [r7, #16]
 8016562:	0151      	lsls	r1, r2, #5
 8016564:	697a      	ldr	r2, [r7, #20]
 8016566:	440a      	add	r2, r1
 8016568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801656c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016570:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016572:	693b      	ldr	r3, [r7, #16]
 8016574:	015a      	lsls	r2, r3, #5
 8016576:	697b      	ldr	r3, [r7, #20]
 8016578:	4413      	add	r3, r2
 801657a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801657e:	691b      	ldr	r3, [r3, #16]
 8016580:	693a      	ldr	r2, [r7, #16]
 8016582:	0151      	lsls	r1, r2, #5
 8016584:	697a      	ldr	r2, [r7, #20]
 8016586:	440a      	add	r2, r1
 8016588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801658c:	0cdb      	lsrs	r3, r3, #19
 801658e:	04db      	lsls	r3, r3, #19
 8016590:	6113      	str	r3, [r2, #16]
 8016592:	e04e      	b.n	8016632 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016594:	693b      	ldr	r3, [r7, #16]
 8016596:	015a      	lsls	r2, r3, #5
 8016598:	697b      	ldr	r3, [r7, #20]
 801659a:	4413      	add	r3, r2
 801659c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80165a0:	691b      	ldr	r3, [r3, #16]
 80165a2:	693a      	ldr	r2, [r7, #16]
 80165a4:	0151      	lsls	r1, r2, #5
 80165a6:	697a      	ldr	r2, [r7, #20]
 80165a8:	440a      	add	r2, r1
 80165aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80165ae:	0cdb      	lsrs	r3, r3, #19
 80165b0:	04db      	lsls	r3, r3, #19
 80165b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80165b4:	693b      	ldr	r3, [r7, #16]
 80165b6:	015a      	lsls	r2, r3, #5
 80165b8:	697b      	ldr	r3, [r7, #20]
 80165ba:	4413      	add	r3, r2
 80165bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80165c0:	691b      	ldr	r3, [r3, #16]
 80165c2:	693a      	ldr	r2, [r7, #16]
 80165c4:	0151      	lsls	r1, r2, #5
 80165c6:	697a      	ldr	r2, [r7, #20]
 80165c8:	440a      	add	r2, r1
 80165ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80165ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80165d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80165d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80165d8:	68bb      	ldr	r3, [r7, #8]
 80165da:	695a      	ldr	r2, [r3, #20]
 80165dc:	68bb      	ldr	r3, [r7, #8]
 80165de:	689b      	ldr	r3, [r3, #8]
 80165e0:	429a      	cmp	r2, r3
 80165e2:	d903      	bls.n	80165ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80165e4:	68bb      	ldr	r3, [r7, #8]
 80165e6:	689a      	ldr	r2, [r3, #8]
 80165e8:	68bb      	ldr	r3, [r7, #8]
 80165ea:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80165ec:	693b      	ldr	r3, [r7, #16]
 80165ee:	015a      	lsls	r2, r3, #5
 80165f0:	697b      	ldr	r3, [r7, #20]
 80165f2:	4413      	add	r3, r2
 80165f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80165f8:	691b      	ldr	r3, [r3, #16]
 80165fa:	693a      	ldr	r2, [r7, #16]
 80165fc:	0151      	lsls	r1, r2, #5
 80165fe:	697a      	ldr	r2, [r7, #20]
 8016600:	440a      	add	r2, r1
 8016602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801660a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801660c:	693b      	ldr	r3, [r7, #16]
 801660e:	015a      	lsls	r2, r3, #5
 8016610:	697b      	ldr	r3, [r7, #20]
 8016612:	4413      	add	r3, r2
 8016614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016618:	691a      	ldr	r2, [r3, #16]
 801661a:	68bb      	ldr	r3, [r7, #8]
 801661c:	695b      	ldr	r3, [r3, #20]
 801661e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016622:	6939      	ldr	r1, [r7, #16]
 8016624:	0148      	lsls	r0, r1, #5
 8016626:	6979      	ldr	r1, [r7, #20]
 8016628:	4401      	add	r1, r0
 801662a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801662e:	4313      	orrs	r3, r2
 8016630:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8016632:	79fb      	ldrb	r3, [r7, #7]
 8016634:	2b01      	cmp	r3, #1
 8016636:	d11e      	bne.n	8016676 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8016638:	68bb      	ldr	r3, [r7, #8]
 801663a:	691b      	ldr	r3, [r3, #16]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d009      	beq.n	8016654 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8016640:	693b      	ldr	r3, [r7, #16]
 8016642:	015a      	lsls	r2, r3, #5
 8016644:	697b      	ldr	r3, [r7, #20]
 8016646:	4413      	add	r3, r2
 8016648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801664c:	461a      	mov	r2, r3
 801664e:	68bb      	ldr	r3, [r7, #8]
 8016650:	691b      	ldr	r3, [r3, #16]
 8016652:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016654:	693b      	ldr	r3, [r7, #16]
 8016656:	015a      	lsls	r2, r3, #5
 8016658:	697b      	ldr	r3, [r7, #20]
 801665a:	4413      	add	r3, r2
 801665c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	693a      	ldr	r2, [r7, #16]
 8016664:	0151      	lsls	r1, r2, #5
 8016666:	697a      	ldr	r2, [r7, #20]
 8016668:	440a      	add	r2, r1
 801666a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801666e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8016672:	6013      	str	r3, [r2, #0]
 8016674:	e092      	b.n	801679c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016676:	693b      	ldr	r3, [r7, #16]
 8016678:	015a      	lsls	r2, r3, #5
 801667a:	697b      	ldr	r3, [r7, #20]
 801667c:	4413      	add	r3, r2
 801667e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	693a      	ldr	r2, [r7, #16]
 8016686:	0151      	lsls	r1, r2, #5
 8016688:	697a      	ldr	r2, [r7, #20]
 801668a:	440a      	add	r2, r1
 801668c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016690:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8016694:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8016696:	68bb      	ldr	r3, [r7, #8]
 8016698:	695b      	ldr	r3, [r3, #20]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d07e      	beq.n	801679c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801669e:	697b      	ldr	r3, [r7, #20]
 80166a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80166a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	781b      	ldrb	r3, [r3, #0]
 80166aa:	f003 030f 	and.w	r3, r3, #15
 80166ae:	2101      	movs	r1, #1
 80166b0:	fa01 f303 	lsl.w	r3, r1, r3
 80166b4:	6979      	ldr	r1, [r7, #20]
 80166b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80166ba:	4313      	orrs	r3, r2
 80166bc:	634b      	str	r3, [r1, #52]	; 0x34
 80166be:	e06d      	b.n	801679c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80166c0:	693b      	ldr	r3, [r7, #16]
 80166c2:	015a      	lsls	r2, r3, #5
 80166c4:	697b      	ldr	r3, [r7, #20]
 80166c6:	4413      	add	r3, r2
 80166c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80166cc:	691b      	ldr	r3, [r3, #16]
 80166ce:	693a      	ldr	r2, [r7, #16]
 80166d0:	0151      	lsls	r1, r2, #5
 80166d2:	697a      	ldr	r2, [r7, #20]
 80166d4:	440a      	add	r2, r1
 80166d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80166da:	0cdb      	lsrs	r3, r3, #19
 80166dc:	04db      	lsls	r3, r3, #19
 80166de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80166e0:	693b      	ldr	r3, [r7, #16]
 80166e2:	015a      	lsls	r2, r3, #5
 80166e4:	697b      	ldr	r3, [r7, #20]
 80166e6:	4413      	add	r3, r2
 80166e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80166ec:	691b      	ldr	r3, [r3, #16]
 80166ee:	693a      	ldr	r2, [r7, #16]
 80166f0:	0151      	lsls	r1, r2, #5
 80166f2:	697a      	ldr	r2, [r7, #20]
 80166f4:	440a      	add	r2, r1
 80166f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80166fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80166fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8016702:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8016704:	68bb      	ldr	r3, [r7, #8]
 8016706:	695b      	ldr	r3, [r3, #20]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d003      	beq.n	8016714 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801670c:	68bb      	ldr	r3, [r7, #8]
 801670e:	689a      	ldr	r2, [r3, #8]
 8016710:	68bb      	ldr	r3, [r7, #8]
 8016712:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016714:	693b      	ldr	r3, [r7, #16]
 8016716:	015a      	lsls	r2, r3, #5
 8016718:	697b      	ldr	r3, [r7, #20]
 801671a:	4413      	add	r3, r2
 801671c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016720:	691b      	ldr	r3, [r3, #16]
 8016722:	693a      	ldr	r2, [r7, #16]
 8016724:	0151      	lsls	r1, r2, #5
 8016726:	697a      	ldr	r2, [r7, #20]
 8016728:	440a      	add	r2, r1
 801672a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801672e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016732:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8016734:	693b      	ldr	r3, [r7, #16]
 8016736:	015a      	lsls	r2, r3, #5
 8016738:	697b      	ldr	r3, [r7, #20]
 801673a:	4413      	add	r3, r2
 801673c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016740:	691a      	ldr	r2, [r3, #16]
 8016742:	68bb      	ldr	r3, [r7, #8]
 8016744:	689b      	ldr	r3, [r3, #8]
 8016746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801674a:	6939      	ldr	r1, [r7, #16]
 801674c:	0148      	lsls	r0, r1, #5
 801674e:	6979      	ldr	r1, [r7, #20]
 8016750:	4401      	add	r1, r0
 8016752:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8016756:	4313      	orrs	r3, r2
 8016758:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801675a:	79fb      	ldrb	r3, [r7, #7]
 801675c:	2b01      	cmp	r3, #1
 801675e:	d10d      	bne.n	801677c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8016760:	68bb      	ldr	r3, [r7, #8]
 8016762:	68db      	ldr	r3, [r3, #12]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d009      	beq.n	801677c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8016768:	68bb      	ldr	r3, [r7, #8]
 801676a:	68d9      	ldr	r1, [r3, #12]
 801676c:	693b      	ldr	r3, [r7, #16]
 801676e:	015a      	lsls	r2, r3, #5
 8016770:	697b      	ldr	r3, [r7, #20]
 8016772:	4413      	add	r3, r2
 8016774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016778:	460a      	mov	r2, r1
 801677a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801677c:	693b      	ldr	r3, [r7, #16]
 801677e:	015a      	lsls	r2, r3, #5
 8016780:	697b      	ldr	r3, [r7, #20]
 8016782:	4413      	add	r3, r2
 8016784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	693a      	ldr	r2, [r7, #16]
 801678c:	0151      	lsls	r1, r2, #5
 801678e:	697a      	ldr	r2, [r7, #20]
 8016790:	440a      	add	r2, r1
 8016792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016796:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801679a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801679c:	2300      	movs	r3, #0
}
 801679e:	4618      	mov	r0, r3
 80167a0:	371c      	adds	r7, #28
 80167a2:	46bd      	mov	sp, r7
 80167a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a8:	4770      	bx	lr

080167aa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80167aa:	b480      	push	{r7}
 80167ac:	b089      	sub	sp, #36	; 0x24
 80167ae:	af00      	add	r7, sp, #0
 80167b0:	60f8      	str	r0, [r7, #12]
 80167b2:	60b9      	str	r1, [r7, #8]
 80167b4:	4611      	mov	r1, r2
 80167b6:	461a      	mov	r2, r3
 80167b8:	460b      	mov	r3, r1
 80167ba:	71fb      	strb	r3, [r7, #7]
 80167bc:	4613      	mov	r3, r2
 80167be:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80167c4:	68bb      	ldr	r3, [r7, #8]
 80167c6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80167c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d123      	bne.n	8016818 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80167d0:	88bb      	ldrh	r3, [r7, #4]
 80167d2:	3303      	adds	r3, #3
 80167d4:	089b      	lsrs	r3, r3, #2
 80167d6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80167d8:	2300      	movs	r3, #0
 80167da:	61bb      	str	r3, [r7, #24]
 80167dc:	e018      	b.n	8016810 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80167de:	79fb      	ldrb	r3, [r7, #7]
 80167e0:	031a      	lsls	r2, r3, #12
 80167e2:	697b      	ldr	r3, [r7, #20]
 80167e4:	4413      	add	r3, r2
 80167e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80167ea:	461a      	mov	r2, r3
 80167ec:	69fb      	ldr	r3, [r7, #28]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80167f2:	69fb      	ldr	r3, [r7, #28]
 80167f4:	3301      	adds	r3, #1
 80167f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80167f8:	69fb      	ldr	r3, [r7, #28]
 80167fa:	3301      	adds	r3, #1
 80167fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80167fe:	69fb      	ldr	r3, [r7, #28]
 8016800:	3301      	adds	r3, #1
 8016802:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8016804:	69fb      	ldr	r3, [r7, #28]
 8016806:	3301      	adds	r3, #1
 8016808:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801680a:	69bb      	ldr	r3, [r7, #24]
 801680c:	3301      	adds	r3, #1
 801680e:	61bb      	str	r3, [r7, #24]
 8016810:	69ba      	ldr	r2, [r7, #24]
 8016812:	693b      	ldr	r3, [r7, #16]
 8016814:	429a      	cmp	r2, r3
 8016816:	d3e2      	bcc.n	80167de <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8016818:	2300      	movs	r3, #0
}
 801681a:	4618      	mov	r0, r3
 801681c:	3724      	adds	r7, #36	; 0x24
 801681e:	46bd      	mov	sp, r7
 8016820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016824:	4770      	bx	lr

08016826 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8016826:	b480      	push	{r7}
 8016828:	b08b      	sub	sp, #44	; 0x2c
 801682a:	af00      	add	r7, sp, #0
 801682c:	60f8      	str	r0, [r7, #12]
 801682e:	60b9      	str	r1, [r7, #8]
 8016830:	4613      	mov	r3, r2
 8016832:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8016838:	68bb      	ldr	r3, [r7, #8]
 801683a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801683c:	88fb      	ldrh	r3, [r7, #6]
 801683e:	089b      	lsrs	r3, r3, #2
 8016840:	b29b      	uxth	r3, r3
 8016842:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8016844:	88fb      	ldrh	r3, [r7, #6]
 8016846:	f003 0303 	and.w	r3, r3, #3
 801684a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801684c:	2300      	movs	r3, #0
 801684e:	623b      	str	r3, [r7, #32]
 8016850:	e014      	b.n	801687c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8016852:	69bb      	ldr	r3, [r7, #24]
 8016854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016858:	681a      	ldr	r2, [r3, #0]
 801685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801685c:	601a      	str	r2, [r3, #0]
    pDest++;
 801685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016860:	3301      	adds	r3, #1
 8016862:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8016864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016866:	3301      	adds	r3, #1
 8016868:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801686c:	3301      	adds	r3, #1
 801686e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8016870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016872:	3301      	adds	r3, #1
 8016874:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8016876:	6a3b      	ldr	r3, [r7, #32]
 8016878:	3301      	adds	r3, #1
 801687a:	623b      	str	r3, [r7, #32]
 801687c:	6a3a      	ldr	r2, [r7, #32]
 801687e:	697b      	ldr	r3, [r7, #20]
 8016880:	429a      	cmp	r2, r3
 8016882:	d3e6      	bcc.n	8016852 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8016884:	8bfb      	ldrh	r3, [r7, #30]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d01e      	beq.n	80168c8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801688a:	2300      	movs	r3, #0
 801688c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801688e:	69bb      	ldr	r3, [r7, #24]
 8016890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016894:	461a      	mov	r2, r3
 8016896:	f107 0310 	add.w	r3, r7, #16
 801689a:	6812      	ldr	r2, [r2, #0]
 801689c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801689e:	693a      	ldr	r2, [r7, #16]
 80168a0:	6a3b      	ldr	r3, [r7, #32]
 80168a2:	b2db      	uxtb	r3, r3
 80168a4:	00db      	lsls	r3, r3, #3
 80168a6:	fa22 f303 	lsr.w	r3, r2, r3
 80168aa:	b2da      	uxtb	r2, r3
 80168ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ae:	701a      	strb	r2, [r3, #0]
      i++;
 80168b0:	6a3b      	ldr	r3, [r7, #32]
 80168b2:	3301      	adds	r3, #1
 80168b4:	623b      	str	r3, [r7, #32]
      pDest++;
 80168b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168b8:	3301      	adds	r3, #1
 80168ba:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80168bc:	8bfb      	ldrh	r3, [r7, #30]
 80168be:	3b01      	subs	r3, #1
 80168c0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80168c2:	8bfb      	ldrh	r3, [r7, #30]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d1ea      	bne.n	801689e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80168c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80168ca:	4618      	mov	r0, r3
 80168cc:	372c      	adds	r7, #44	; 0x2c
 80168ce:	46bd      	mov	sp, r7
 80168d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d4:	4770      	bx	lr

080168d6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80168d6:	b480      	push	{r7}
 80168d8:	b085      	sub	sp, #20
 80168da:	af00      	add	r7, sp, #0
 80168dc:	6078      	str	r0, [r7, #4]
 80168de:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80168e4:	683b      	ldr	r3, [r7, #0]
 80168e6:	781b      	ldrb	r3, [r3, #0]
 80168e8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80168ea:	683b      	ldr	r3, [r7, #0]
 80168ec:	785b      	ldrb	r3, [r3, #1]
 80168ee:	2b01      	cmp	r3, #1
 80168f0:	d12c      	bne.n	801694c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80168f2:	68bb      	ldr	r3, [r7, #8]
 80168f4:	015a      	lsls	r2, r3, #5
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	4413      	add	r3, r2
 80168fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	2b00      	cmp	r3, #0
 8016902:	db12      	blt.n	801692a <USB_EPSetStall+0x54>
 8016904:	68bb      	ldr	r3, [r7, #8]
 8016906:	2b00      	cmp	r3, #0
 8016908:	d00f      	beq.n	801692a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801690a:	68bb      	ldr	r3, [r7, #8]
 801690c:	015a      	lsls	r2, r3, #5
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	4413      	add	r3, r2
 8016912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	68ba      	ldr	r2, [r7, #8]
 801691a:	0151      	lsls	r1, r2, #5
 801691c:	68fa      	ldr	r2, [r7, #12]
 801691e:	440a      	add	r2, r1
 8016920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016924:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8016928:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801692a:	68bb      	ldr	r3, [r7, #8]
 801692c:	015a      	lsls	r2, r3, #5
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	4413      	add	r3, r2
 8016932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	68ba      	ldr	r2, [r7, #8]
 801693a:	0151      	lsls	r1, r2, #5
 801693c:	68fa      	ldr	r2, [r7, #12]
 801693e:	440a      	add	r2, r1
 8016940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016944:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016948:	6013      	str	r3, [r2, #0]
 801694a:	e02b      	b.n	80169a4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801694c:	68bb      	ldr	r3, [r7, #8]
 801694e:	015a      	lsls	r2, r3, #5
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	4413      	add	r3, r2
 8016954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	2b00      	cmp	r3, #0
 801695c:	db12      	blt.n	8016984 <USB_EPSetStall+0xae>
 801695e:	68bb      	ldr	r3, [r7, #8]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d00f      	beq.n	8016984 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8016964:	68bb      	ldr	r3, [r7, #8]
 8016966:	015a      	lsls	r2, r3, #5
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	4413      	add	r3, r2
 801696c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	68ba      	ldr	r2, [r7, #8]
 8016974:	0151      	lsls	r1, r2, #5
 8016976:	68fa      	ldr	r2, [r7, #12]
 8016978:	440a      	add	r2, r1
 801697a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801697e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8016982:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8016984:	68bb      	ldr	r3, [r7, #8]
 8016986:	015a      	lsls	r2, r3, #5
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	4413      	add	r3, r2
 801698c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	68ba      	ldr	r2, [r7, #8]
 8016994:	0151      	lsls	r1, r2, #5
 8016996:	68fa      	ldr	r2, [r7, #12]
 8016998:	440a      	add	r2, r1
 801699a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801699e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80169a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80169a4:	2300      	movs	r3, #0
}
 80169a6:	4618      	mov	r0, r3
 80169a8:	3714      	adds	r7, #20
 80169aa:	46bd      	mov	sp, r7
 80169ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b0:	4770      	bx	lr

080169b2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80169b2:	b480      	push	{r7}
 80169b4:	b085      	sub	sp, #20
 80169b6:	af00      	add	r7, sp, #0
 80169b8:	6078      	str	r0, [r7, #4]
 80169ba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80169c0:	683b      	ldr	r3, [r7, #0]
 80169c2:	781b      	ldrb	r3, [r3, #0]
 80169c4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80169c6:	683b      	ldr	r3, [r7, #0]
 80169c8:	785b      	ldrb	r3, [r3, #1]
 80169ca:	2b01      	cmp	r3, #1
 80169cc:	d128      	bne.n	8016a20 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80169ce:	68bb      	ldr	r3, [r7, #8]
 80169d0:	015a      	lsls	r2, r3, #5
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	4413      	add	r3, r2
 80169d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	68ba      	ldr	r2, [r7, #8]
 80169de:	0151      	lsls	r1, r2, #5
 80169e0:	68fa      	ldr	r2, [r7, #12]
 80169e2:	440a      	add	r2, r1
 80169e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80169e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80169ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80169ee:	683b      	ldr	r3, [r7, #0]
 80169f0:	78db      	ldrb	r3, [r3, #3]
 80169f2:	2b03      	cmp	r3, #3
 80169f4:	d003      	beq.n	80169fe <USB_EPClearStall+0x4c>
 80169f6:	683b      	ldr	r3, [r7, #0]
 80169f8:	78db      	ldrb	r3, [r3, #3]
 80169fa:	2b02      	cmp	r3, #2
 80169fc:	d138      	bne.n	8016a70 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80169fe:	68bb      	ldr	r3, [r7, #8]
 8016a00:	015a      	lsls	r2, r3, #5
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	4413      	add	r3, r2
 8016a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	68ba      	ldr	r2, [r7, #8]
 8016a0e:	0151      	lsls	r1, r2, #5
 8016a10:	68fa      	ldr	r2, [r7, #12]
 8016a12:	440a      	add	r2, r1
 8016a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016a1c:	6013      	str	r3, [r2, #0]
 8016a1e:	e027      	b.n	8016a70 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8016a20:	68bb      	ldr	r3, [r7, #8]
 8016a22:	015a      	lsls	r2, r3, #5
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	4413      	add	r3, r2
 8016a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	68ba      	ldr	r2, [r7, #8]
 8016a30:	0151      	lsls	r1, r2, #5
 8016a32:	68fa      	ldr	r2, [r7, #12]
 8016a34:	440a      	add	r2, r1
 8016a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016a3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8016a3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8016a40:	683b      	ldr	r3, [r7, #0]
 8016a42:	78db      	ldrb	r3, [r3, #3]
 8016a44:	2b03      	cmp	r3, #3
 8016a46:	d003      	beq.n	8016a50 <USB_EPClearStall+0x9e>
 8016a48:	683b      	ldr	r3, [r7, #0]
 8016a4a:	78db      	ldrb	r3, [r3, #3]
 8016a4c:	2b02      	cmp	r3, #2
 8016a4e:	d10f      	bne.n	8016a70 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016a50:	68bb      	ldr	r3, [r7, #8]
 8016a52:	015a      	lsls	r2, r3, #5
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	4413      	add	r3, r2
 8016a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	68ba      	ldr	r2, [r7, #8]
 8016a60:	0151      	lsls	r1, r2, #5
 8016a62:	68fa      	ldr	r2, [r7, #12]
 8016a64:	440a      	add	r2, r1
 8016a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016a6e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8016a70:	2300      	movs	r3, #0
}
 8016a72:	4618      	mov	r0, r3
 8016a74:	3714      	adds	r7, #20
 8016a76:	46bd      	mov	sp, r7
 8016a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a7c:	4770      	bx	lr

08016a7e <USB_StopDevice>:
  * @brief  USB_StopDevice : Stop the usb device mode
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx)
{
 8016a7e:	b580      	push	{r7, lr}
 8016a80:	b086      	sub	sp, #24
 8016a82:	af00      	add	r7, sp, #0
 8016a84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	613b      	str	r3, [r7, #16]
  uint32_t i;

  /* Clear Pending interrupt */
  for (i = 0U; i < 15U; i++)
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	617b      	str	r3, [r7, #20]
 8016a8e:	e016      	b.n	8016abe <USB_StopDevice+0x40>
  {
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8016a90:	697b      	ldr	r3, [r7, #20]
 8016a92:	015a      	lsls	r2, r3, #5
 8016a94:	693b      	ldr	r3, [r7, #16]
 8016a96:	4413      	add	r3, r2
 8016a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016a9c:	461a      	mov	r2, r3
 8016a9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8016aa2:	6093      	str	r3, [r2, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8016aa4:	697b      	ldr	r3, [r7, #20]
 8016aa6:	015a      	lsls	r2, r3, #5
 8016aa8:	693b      	ldr	r3, [r7, #16]
 8016aaa:	4413      	add	r3, r2
 8016aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016ab0:	461a      	mov	r2, r3
 8016ab2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8016ab6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < 15U; i++)
 8016ab8:	697b      	ldr	r3, [r7, #20]
 8016aba:	3301      	adds	r3, #1
 8016abc:	617b      	str	r3, [r7, #20]
 8016abe:	697b      	ldr	r3, [r7, #20]
 8016ac0:	2b0e      	cmp	r3, #14
 8016ac2:	d9e5      	bls.n	8016a90 <USB_StopDevice+0x12>
  }

  /* Clear interrupt masks */
  USBx_DEVICE->DIEPMSK  = 0U;
 8016ac4:	693b      	ldr	r3, [r7, #16]
 8016ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016aca:	461a      	mov	r2, r3
 8016acc:	2300      	movs	r3, #0
 8016ace:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK  = 0U;
 8016ad0:	693b      	ldr	r3, [r7, #16]
 8016ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016ad6:	461a      	mov	r2, r3
 8016ad8:	2300      	movs	r3, #0
 8016ada:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8016adc:	693b      	ldr	r3, [r7, #16]
 8016ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016ae2:	461a      	mov	r2, r3
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	61d3      	str	r3, [r2, #28]

  /* Flush the FIFO */
  ret = USB_FlushRxFifo(USBx);
 8016ae8:	6878      	ldr	r0, [r7, #4]
 8016aea:	f7ff f905 	bl	8015cf8 <USB_FlushRxFifo>
 8016aee:	4603      	mov	r3, r0
 8016af0:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8016af2:	7bfb      	ldrb	r3, [r7, #15]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d001      	beq.n	8016afc <USB_StopDevice+0x7e>
  {
    return ret;
 8016af8:	7bfb      	ldrb	r3, [r7, #15]
 8016afa:	e00b      	b.n	8016b14 <USB_StopDevice+0x96>
  }

  ret = USB_FlushTxFifo(USBx,  0x10U);
 8016afc:	2110      	movs	r1, #16
 8016afe:	6878      	ldr	r0, [r7, #4]
 8016b00:	f7ff f8d6 	bl	8015cb0 <USB_FlushTxFifo>
 8016b04:	4603      	mov	r3, r0
 8016b06:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8016b08:	7bfb      	ldrb	r3, [r7, #15]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d001      	beq.n	8016b12 <USB_StopDevice+0x94>
  {
    return ret;
 8016b0e:	7bfb      	ldrb	r3, [r7, #15]
 8016b10:	e000      	b.n	8016b14 <USB_StopDevice+0x96>
  }

  return ret;
 8016b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b14:	4618      	mov	r0, r3
 8016b16:	3718      	adds	r7, #24
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	bd80      	pop	{r7, pc}

08016b1c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8016b1c:	b480      	push	{r7}
 8016b1e:	b085      	sub	sp, #20
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
 8016b24:	460b      	mov	r3, r1
 8016b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	68fa      	ldr	r2, [r7, #12]
 8016b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016b3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8016b3e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016b46:	681a      	ldr	r2, [r3, #0]
 8016b48:	78fb      	ldrb	r3, [r7, #3]
 8016b4a:	011b      	lsls	r3, r3, #4
 8016b4c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8016b50:	68f9      	ldr	r1, [r7, #12]
 8016b52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016b56:	4313      	orrs	r3, r2
 8016b58:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8016b5a:	2300      	movs	r3, #0
}
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	3714      	adds	r7, #20
 8016b60:	46bd      	mov	sp, r7
 8016b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b66:	4770      	bx	lr

08016b68 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8016b68:	b480      	push	{r7}
 8016b6a:	b085      	sub	sp, #20
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	68fa      	ldr	r2, [r7, #12]
 8016b7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016b82:	f023 0303 	bic.w	r3, r3, #3
 8016b86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016b8e:	685b      	ldr	r3, [r3, #4]
 8016b90:	68fa      	ldr	r2, [r7, #12]
 8016b92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016b96:	f023 0302 	bic.w	r3, r3, #2
 8016b9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016b9c:	2300      	movs	r3, #0
}
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	3714      	adds	r7, #20
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba8:	4770      	bx	lr

08016baa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8016baa:	b480      	push	{r7}
 8016bac:	b085      	sub	sp, #20
 8016bae:	af00      	add	r7, sp, #0
 8016bb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	68fa      	ldr	r2, [r7, #12]
 8016bc0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016bc4:	f023 0303 	bic.w	r3, r3, #3
 8016bc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016bd0:	685b      	ldr	r3, [r3, #4]
 8016bd2:	68fa      	ldr	r2, [r7, #12]
 8016bd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016bd8:	f043 0302 	orr.w	r3, r3, #2
 8016bdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016bde:	2300      	movs	r3, #0
}
 8016be0:	4618      	mov	r0, r3
 8016be2:	3714      	adds	r7, #20
 8016be4:	46bd      	mov	sp, r7
 8016be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bea:	4770      	bx	lr

08016bec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8016bec:	b480      	push	{r7}
 8016bee:	b085      	sub	sp, #20
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	695b      	ldr	r3, [r3, #20]
 8016bf8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	699b      	ldr	r3, [r3, #24]
 8016bfe:	68fa      	ldr	r2, [r7, #12]
 8016c00:	4013      	ands	r3, r2
 8016c02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8016c04:	68fb      	ldr	r3, [r7, #12]
}
 8016c06:	4618      	mov	r0, r3
 8016c08:	3714      	adds	r7, #20
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c10:	4770      	bx	lr

08016c12 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8016c12:	b480      	push	{r7}
 8016c14:	b085      	sub	sp, #20
 8016c16:	af00      	add	r7, sp, #0
 8016c18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c24:	699b      	ldr	r3, [r3, #24]
 8016c26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c2e:	69db      	ldr	r3, [r3, #28]
 8016c30:	68ba      	ldr	r2, [r7, #8]
 8016c32:	4013      	ands	r3, r2
 8016c34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8016c36:	68bb      	ldr	r3, [r7, #8]
 8016c38:	0c1b      	lsrs	r3, r3, #16
}
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	3714      	adds	r7, #20
 8016c3e:	46bd      	mov	sp, r7
 8016c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c44:	4770      	bx	lr

08016c46 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8016c46:	b480      	push	{r7}
 8016c48:	b085      	sub	sp, #20
 8016c4a:	af00      	add	r7, sp, #0
 8016c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c58:	699b      	ldr	r3, [r3, #24]
 8016c5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016c62:	69db      	ldr	r3, [r3, #28]
 8016c64:	68ba      	ldr	r2, [r7, #8]
 8016c66:	4013      	ands	r3, r2
 8016c68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8016c6a:	68bb      	ldr	r3, [r7, #8]
 8016c6c:	b29b      	uxth	r3, r3
}
 8016c6e:	4618      	mov	r0, r3
 8016c70:	3714      	adds	r7, #20
 8016c72:	46bd      	mov	sp, r7
 8016c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c78:	4770      	bx	lr

08016c7a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8016c7a:	b480      	push	{r7}
 8016c7c:	b085      	sub	sp, #20
 8016c7e:	af00      	add	r7, sp, #0
 8016c80:	6078      	str	r0, [r7, #4]
 8016c82:	460b      	mov	r3, r1
 8016c84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8016c8a:	78fb      	ldrb	r3, [r7, #3]
 8016c8c:	015a      	lsls	r2, r3, #5
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	4413      	add	r3, r2
 8016c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016c96:	689b      	ldr	r3, [r3, #8]
 8016c98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016ca0:	695b      	ldr	r3, [r3, #20]
 8016ca2:	68ba      	ldr	r2, [r7, #8]
 8016ca4:	4013      	ands	r3, r2
 8016ca6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016ca8:	68bb      	ldr	r3, [r7, #8]
}
 8016caa:	4618      	mov	r0, r3
 8016cac:	3714      	adds	r7, #20
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb4:	4770      	bx	lr

08016cb6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8016cb6:	b480      	push	{r7}
 8016cb8:	b087      	sub	sp, #28
 8016cba:	af00      	add	r7, sp, #0
 8016cbc:	6078      	str	r0, [r7, #4]
 8016cbe:	460b      	mov	r3, r1
 8016cc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8016cc6:	697b      	ldr	r3, [r7, #20]
 8016cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016ccc:	691b      	ldr	r3, [r3, #16]
 8016cce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8016cd0:	697b      	ldr	r3, [r7, #20]
 8016cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016cd8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8016cda:	78fb      	ldrb	r3, [r7, #3]
 8016cdc:	f003 030f 	and.w	r3, r3, #15
 8016ce0:	68fa      	ldr	r2, [r7, #12]
 8016ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8016ce6:	01db      	lsls	r3, r3, #7
 8016ce8:	b2db      	uxtb	r3, r3
 8016cea:	693a      	ldr	r2, [r7, #16]
 8016cec:	4313      	orrs	r3, r2
 8016cee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8016cf0:	78fb      	ldrb	r3, [r7, #3]
 8016cf2:	015a      	lsls	r2, r3, #5
 8016cf4:	697b      	ldr	r3, [r7, #20]
 8016cf6:	4413      	add	r3, r2
 8016cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016cfc:	689b      	ldr	r3, [r3, #8]
 8016cfe:	693a      	ldr	r2, [r7, #16]
 8016d00:	4013      	ands	r3, r2
 8016d02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016d04:	68bb      	ldr	r3, [r7, #8]
}
 8016d06:	4618      	mov	r0, r3
 8016d08:	371c      	adds	r7, #28
 8016d0a:	46bd      	mov	sp, r7
 8016d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d10:	4770      	bx	lr

08016d12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8016d12:	b480      	push	{r7}
 8016d14:	b083      	sub	sp, #12
 8016d16:	af00      	add	r7, sp, #0
 8016d18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	695b      	ldr	r3, [r3, #20]
 8016d1e:	f003 0301 	and.w	r3, r3, #1
}
 8016d22:	4618      	mov	r0, r3
 8016d24:	370c      	adds	r7, #12
 8016d26:	46bd      	mov	sp, r7
 8016d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d2c:	4770      	bx	lr

08016d2e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8016d2e:	b480      	push	{r7}
 8016d30:	b085      	sub	sp, #20
 8016d32:	af00      	add	r7, sp, #0
 8016d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	68fa      	ldr	r2, [r7, #12]
 8016d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016d48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8016d4c:	f023 0307 	bic.w	r3, r3, #7
 8016d50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016d58:	685b      	ldr	r3, [r3, #4]
 8016d5a:	68fa      	ldr	r2, [r7, #12]
 8016d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016d64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016d66:	2300      	movs	r3, #0
}
 8016d68:	4618      	mov	r0, r3
 8016d6a:	3714      	adds	r7, #20
 8016d6c:	46bd      	mov	sp, r7
 8016d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d72:	4770      	bx	lr

08016d74 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8016d74:	b480      	push	{r7}
 8016d76:	b087      	sub	sp, #28
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	60f8      	str	r0, [r7, #12]
 8016d7c:	460b      	mov	r3, r1
 8016d7e:	607a      	str	r2, [r7, #4]
 8016d80:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	333c      	adds	r3, #60	; 0x3c
 8016d8a:	3304      	adds	r3, #4
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8016d90:	693b      	ldr	r3, [r7, #16]
 8016d92:	4a26      	ldr	r2, [pc, #152]	; (8016e2c <USB_EP0_OutStart+0xb8>)
 8016d94:	4293      	cmp	r3, r2
 8016d96:	d90a      	bls.n	8016dae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016d98:	697b      	ldr	r3, [r7, #20]
 8016d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016da4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016da8:	d101      	bne.n	8016dae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8016daa:	2300      	movs	r3, #0
 8016dac:	e037      	b.n	8016e1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8016dae:	697b      	ldr	r3, [r7, #20]
 8016db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016db4:	461a      	mov	r2, r3
 8016db6:	2300      	movs	r3, #0
 8016db8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016dba:	697b      	ldr	r3, [r7, #20]
 8016dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016dc0:	691b      	ldr	r3, [r3, #16]
 8016dc2:	697a      	ldr	r2, [r7, #20]
 8016dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016dc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016dcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8016dce:	697b      	ldr	r3, [r7, #20]
 8016dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016dd4:	691b      	ldr	r3, [r3, #16]
 8016dd6:	697a      	ldr	r2, [r7, #20]
 8016dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016ddc:	f043 0318 	orr.w	r3, r3, #24
 8016de0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8016de2:	697b      	ldr	r3, [r7, #20]
 8016de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016de8:	691b      	ldr	r3, [r3, #16]
 8016dea:	697a      	ldr	r2, [r7, #20]
 8016dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016df0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8016df4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8016df6:	7afb      	ldrb	r3, [r7, #11]
 8016df8:	2b01      	cmp	r3, #1
 8016dfa:	d10f      	bne.n	8016e1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8016dfc:	697b      	ldr	r3, [r7, #20]
 8016dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016e02:	461a      	mov	r2, r3
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8016e08:	697b      	ldr	r3, [r7, #20]
 8016e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	697a      	ldr	r2, [r7, #20]
 8016e12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016e16:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8016e1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016e1c:	2300      	movs	r3, #0
}
 8016e1e:	4618      	mov	r0, r3
 8016e20:	371c      	adds	r7, #28
 8016e22:	46bd      	mov	sp, r7
 8016e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e28:	4770      	bx	lr
 8016e2a:	bf00      	nop
 8016e2c:	4f54300a 	.word	0x4f54300a

08016e30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8016e30:	b480      	push	{r7}
 8016e32:	b085      	sub	sp, #20
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016e38:	2300      	movs	r3, #0
 8016e3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	3301      	adds	r3, #1
 8016e40:	60fb      	str	r3, [r7, #12]
 8016e42:	4a13      	ldr	r2, [pc, #76]	; (8016e90 <USB_CoreReset+0x60>)
 8016e44:	4293      	cmp	r3, r2
 8016e46:	d901      	bls.n	8016e4c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8016e48:	2303      	movs	r3, #3
 8016e4a:	e01a      	b.n	8016e82 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	691b      	ldr	r3, [r3, #16]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	daf3      	bge.n	8016e3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8016e54:	2300      	movs	r3, #0
 8016e56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	691b      	ldr	r3, [r3, #16]
 8016e5c:	f043 0201 	orr.w	r2, r3, #1
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	3301      	adds	r3, #1
 8016e68:	60fb      	str	r3, [r7, #12]
 8016e6a:	4a09      	ldr	r2, [pc, #36]	; (8016e90 <USB_CoreReset+0x60>)
 8016e6c:	4293      	cmp	r3, r2
 8016e6e:	d901      	bls.n	8016e74 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8016e70:	2303      	movs	r3, #3
 8016e72:	e006      	b.n	8016e82 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	691b      	ldr	r3, [r3, #16]
 8016e78:	f003 0301 	and.w	r3, r3, #1
 8016e7c:	2b01      	cmp	r3, #1
 8016e7e:	d0f1      	beq.n	8016e64 <USB_CoreReset+0x34>

  return HAL_OK;
 8016e80:	2300      	movs	r3, #0
}
 8016e82:	4618      	mov	r0, r3
 8016e84:	3714      	adds	r7, #20
 8016e86:	46bd      	mov	sp, r7
 8016e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8c:	4770      	bx	lr
 8016e8e:	bf00      	nop
 8016e90:	00030d40 	.word	0x00030d40

08016e94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016e94:	b580      	push	{r7, lr}
 8016e96:	b084      	sub	sp, #16
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
 8016e9c:	460b      	mov	r3, r1
 8016e9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8016ea0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8016ea4:	f006 fa9a 	bl	801d3dc <USBD_static_malloc>
 8016ea8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d105      	bne.n	8016ebc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	2200      	movs	r2, #0
 8016eb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8016eb8:	2302      	movs	r3, #2
 8016eba:	e066      	b.n	8016f8a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	68fa      	ldr	r2, [r7, #12]
 8016ec0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	7c1b      	ldrb	r3, [r3, #16]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d119      	bne.n	8016f00 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8016ecc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016ed0:	2202      	movs	r2, #2
 8016ed2:	2181      	movs	r1, #129	; 0x81
 8016ed4:	6878      	ldr	r0, [r7, #4]
 8016ed6:	f006 f95e 	bl	801d196 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	2201      	movs	r2, #1
 8016ede:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8016ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016ee4:	2202      	movs	r2, #2
 8016ee6:	2101      	movs	r1, #1
 8016ee8:	6878      	ldr	r0, [r7, #4]
 8016eea:	f006 f954 	bl	801d196 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	2201      	movs	r2, #1
 8016ef2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	2210      	movs	r2, #16
 8016efa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8016efe:	e016      	b.n	8016f2e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8016f00:	2340      	movs	r3, #64	; 0x40
 8016f02:	2202      	movs	r2, #2
 8016f04:	2181      	movs	r1, #129	; 0x81
 8016f06:	6878      	ldr	r0, [r7, #4]
 8016f08:	f006 f945 	bl	801d196 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	2201      	movs	r2, #1
 8016f10:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8016f12:	2340      	movs	r3, #64	; 0x40
 8016f14:	2202      	movs	r2, #2
 8016f16:	2101      	movs	r1, #1
 8016f18:	6878      	ldr	r0, [r7, #4]
 8016f1a:	f006 f93c 	bl	801d196 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	2201      	movs	r2, #1
 8016f22:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	2210      	movs	r2, #16
 8016f2a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8016f2e:	2308      	movs	r3, #8
 8016f30:	2203      	movs	r2, #3
 8016f32:	2182      	movs	r1, #130	; 0x82
 8016f34:	6878      	ldr	r0, [r7, #4]
 8016f36:	f006 f92e 	bl	801d196 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	2201      	movs	r2, #1
 8016f3e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	2200      	movs	r2, #0
 8016f50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	2200      	movs	r2, #0
 8016f58:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	7c1b      	ldrb	r3, [r3, #16]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d109      	bne.n	8016f78 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016f6e:	2101      	movs	r1, #1
 8016f70:	6878      	ldr	r0, [r7, #4]
 8016f72:	f006 f9ff 	bl	801d374 <USBD_LL_PrepareReceive>
 8016f76:	e007      	b.n	8016f88 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016f7e:	2340      	movs	r3, #64	; 0x40
 8016f80:	2101      	movs	r1, #1
 8016f82:	6878      	ldr	r0, [r7, #4]
 8016f84:	f006 f9f6 	bl	801d374 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016f88:	2300      	movs	r3, #0
}
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	3710      	adds	r7, #16
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	bd80      	pop	{r7, pc}

08016f92 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016f92:	b580      	push	{r7, lr}
 8016f94:	b082      	sub	sp, #8
 8016f96:	af00      	add	r7, sp, #0
 8016f98:	6078      	str	r0, [r7, #4]
 8016f9a:	460b      	mov	r3, r1
 8016f9c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8016f9e:	2181      	movs	r1, #129	; 0x81
 8016fa0:	6878      	ldr	r0, [r7, #4]
 8016fa2:	f006 f91e 	bl	801d1e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	2200      	movs	r2, #0
 8016faa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8016fac:	2101      	movs	r1, #1
 8016fae:	6878      	ldr	r0, [r7, #4]
 8016fb0:	f006 f917 	bl	801d1e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8016fbc:	2182      	movs	r1, #130	; 0x82
 8016fbe:	6878      	ldr	r0, [r7, #4]
 8016fc0:	f006 f90f 	bl	801d1e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	2200      	movs	r2, #0
 8016fc8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	2200      	movs	r2, #0
 8016fd0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d00e      	beq.n	8016ffc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016fe4:	685b      	ldr	r3, [r3, #4]
 8016fe6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016fee:	4618      	mov	r0, r3
 8016ff0:	f006 fa02 	bl	801d3f8 <USBD_static_free>
    pdev->pClassData = NULL;
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8016ffc:	2300      	movs	r3, #0
}
 8016ffe:	4618      	mov	r0, r3
 8017000:	3708      	adds	r7, #8
 8017002:	46bd      	mov	sp, r7
 8017004:	bd80      	pop	{r7, pc}
	...

08017008 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8017008:	b580      	push	{r7, lr}
 801700a:	b086      	sub	sp, #24
 801700c:	af00      	add	r7, sp, #0
 801700e:	6078      	str	r0, [r7, #4]
 8017010:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017018:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801701a:	2300      	movs	r3, #0
 801701c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801701e:	2300      	movs	r3, #0
 8017020:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8017022:	2300      	movs	r3, #0
 8017024:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8017026:	693b      	ldr	r3, [r7, #16]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d101      	bne.n	8017030 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 801702c:	2303      	movs	r3, #3
 801702e:	e0af      	b.n	8017190 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017030:	683b      	ldr	r3, [r7, #0]
 8017032:	781b      	ldrb	r3, [r3, #0]
 8017034:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017038:	2b00      	cmp	r3, #0
 801703a:	d03f      	beq.n	80170bc <USBD_CDC_Setup+0xb4>
 801703c:	2b20      	cmp	r3, #32
 801703e:	f040 809f 	bne.w	8017180 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8017042:	683b      	ldr	r3, [r7, #0]
 8017044:	88db      	ldrh	r3, [r3, #6]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d02e      	beq.n	80170a8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801704a:	683b      	ldr	r3, [r7, #0]
 801704c:	781b      	ldrb	r3, [r3, #0]
 801704e:	b25b      	sxtb	r3, r3
 8017050:	2b00      	cmp	r3, #0
 8017052:	da16      	bge.n	8017082 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801705a:	689b      	ldr	r3, [r3, #8]
 801705c:	683a      	ldr	r2, [r7, #0]
 801705e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8017060:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8017062:	683a      	ldr	r2, [r7, #0]
 8017064:	88d2      	ldrh	r2, [r2, #6]
 8017066:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8017068:	683b      	ldr	r3, [r7, #0]
 801706a:	88db      	ldrh	r3, [r3, #6]
 801706c:	2b07      	cmp	r3, #7
 801706e:	bf28      	it	cs
 8017070:	2307      	movcs	r3, #7
 8017072:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8017074:	693b      	ldr	r3, [r7, #16]
 8017076:	89fa      	ldrh	r2, [r7, #14]
 8017078:	4619      	mov	r1, r3
 801707a:	6878      	ldr	r0, [r7, #4]
 801707c:	f001 fb4d 	bl	801871a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8017080:	e085      	b.n	801718e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8017082:	683b      	ldr	r3, [r7, #0]
 8017084:	785a      	ldrb	r2, [r3, #1]
 8017086:	693b      	ldr	r3, [r7, #16]
 8017088:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801708c:	683b      	ldr	r3, [r7, #0]
 801708e:	88db      	ldrh	r3, [r3, #6]
 8017090:	b2da      	uxtb	r2, r3
 8017092:	693b      	ldr	r3, [r7, #16]
 8017094:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8017098:	6939      	ldr	r1, [r7, #16]
 801709a:	683b      	ldr	r3, [r7, #0]
 801709c:	88db      	ldrh	r3, [r3, #6]
 801709e:	461a      	mov	r2, r3
 80170a0:	6878      	ldr	r0, [r7, #4]
 80170a2:	f001 fb66 	bl	8018772 <USBD_CtlPrepareRx>
      break;
 80170a6:	e072      	b.n	801718e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80170ae:	689b      	ldr	r3, [r3, #8]
 80170b0:	683a      	ldr	r2, [r7, #0]
 80170b2:	7850      	ldrb	r0, [r2, #1]
 80170b4:	2200      	movs	r2, #0
 80170b6:	6839      	ldr	r1, [r7, #0]
 80170b8:	4798      	blx	r3
      break;
 80170ba:	e068      	b.n	801718e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80170bc:	683b      	ldr	r3, [r7, #0]
 80170be:	785b      	ldrb	r3, [r3, #1]
 80170c0:	2b0b      	cmp	r3, #11
 80170c2:	d852      	bhi.n	801716a <USBD_CDC_Setup+0x162>
 80170c4:	a201      	add	r2, pc, #4	; (adr r2, 80170cc <USBD_CDC_Setup+0xc4>)
 80170c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170ca:	bf00      	nop
 80170cc:	080170fd 	.word	0x080170fd
 80170d0:	08017179 	.word	0x08017179
 80170d4:	0801716b 	.word	0x0801716b
 80170d8:	0801716b 	.word	0x0801716b
 80170dc:	0801716b 	.word	0x0801716b
 80170e0:	0801716b 	.word	0x0801716b
 80170e4:	0801716b 	.word	0x0801716b
 80170e8:	0801716b 	.word	0x0801716b
 80170ec:	0801716b 	.word	0x0801716b
 80170f0:	0801716b 	.word	0x0801716b
 80170f4:	08017127 	.word	0x08017127
 80170f8:	08017151 	.word	0x08017151
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017102:	b2db      	uxtb	r3, r3
 8017104:	2b03      	cmp	r3, #3
 8017106:	d107      	bne.n	8017118 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8017108:	f107 030a 	add.w	r3, r7, #10
 801710c:	2202      	movs	r2, #2
 801710e:	4619      	mov	r1, r3
 8017110:	6878      	ldr	r0, [r7, #4]
 8017112:	f001 fb02 	bl	801871a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8017116:	e032      	b.n	801717e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8017118:	6839      	ldr	r1, [r7, #0]
 801711a:	6878      	ldr	r0, [r7, #4]
 801711c:	f001 fa8c 	bl	8018638 <USBD_CtlError>
            ret = USBD_FAIL;
 8017120:	2303      	movs	r3, #3
 8017122:	75fb      	strb	r3, [r7, #23]
          break;
 8017124:	e02b      	b.n	801717e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801712c:	b2db      	uxtb	r3, r3
 801712e:	2b03      	cmp	r3, #3
 8017130:	d107      	bne.n	8017142 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8017132:	f107 030d 	add.w	r3, r7, #13
 8017136:	2201      	movs	r2, #1
 8017138:	4619      	mov	r1, r3
 801713a:	6878      	ldr	r0, [r7, #4]
 801713c:	f001 faed 	bl	801871a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8017140:	e01d      	b.n	801717e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8017142:	6839      	ldr	r1, [r7, #0]
 8017144:	6878      	ldr	r0, [r7, #4]
 8017146:	f001 fa77 	bl	8018638 <USBD_CtlError>
            ret = USBD_FAIL;
 801714a:	2303      	movs	r3, #3
 801714c:	75fb      	strb	r3, [r7, #23]
          break;
 801714e:	e016      	b.n	801717e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017156:	b2db      	uxtb	r3, r3
 8017158:	2b03      	cmp	r3, #3
 801715a:	d00f      	beq.n	801717c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 801715c:	6839      	ldr	r1, [r7, #0]
 801715e:	6878      	ldr	r0, [r7, #4]
 8017160:	f001 fa6a 	bl	8018638 <USBD_CtlError>
            ret = USBD_FAIL;
 8017164:	2303      	movs	r3, #3
 8017166:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8017168:	e008      	b.n	801717c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801716a:	6839      	ldr	r1, [r7, #0]
 801716c:	6878      	ldr	r0, [r7, #4]
 801716e:	f001 fa63 	bl	8018638 <USBD_CtlError>
          ret = USBD_FAIL;
 8017172:	2303      	movs	r3, #3
 8017174:	75fb      	strb	r3, [r7, #23]
          break;
 8017176:	e002      	b.n	801717e <USBD_CDC_Setup+0x176>
          break;
 8017178:	bf00      	nop
 801717a:	e008      	b.n	801718e <USBD_CDC_Setup+0x186>
          break;
 801717c:	bf00      	nop
      }
      break;
 801717e:	e006      	b.n	801718e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8017180:	6839      	ldr	r1, [r7, #0]
 8017182:	6878      	ldr	r0, [r7, #4]
 8017184:	f001 fa58 	bl	8018638 <USBD_CtlError>
      ret = USBD_FAIL;
 8017188:	2303      	movs	r3, #3
 801718a:	75fb      	strb	r3, [r7, #23]
      break;
 801718c:	bf00      	nop
  }

  return (uint8_t)ret;
 801718e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017190:	4618      	mov	r0, r3
 8017192:	3718      	adds	r7, #24
 8017194:	46bd      	mov	sp, r7
 8017196:	bd80      	pop	{r7, pc}

08017198 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b084      	sub	sp, #16
 801719c:	af00      	add	r7, sp, #0
 801719e:	6078      	str	r0, [r7, #4]
 80171a0:	460b      	mov	r3, r1
 80171a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80171aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d101      	bne.n	80171ba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80171b6:	2303      	movs	r3, #3
 80171b8:	e04f      	b.n	801725a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80171c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80171c2:	78fa      	ldrb	r2, [r7, #3]
 80171c4:	6879      	ldr	r1, [r7, #4]
 80171c6:	4613      	mov	r3, r2
 80171c8:	009b      	lsls	r3, r3, #2
 80171ca:	4413      	add	r3, r2
 80171cc:	009b      	lsls	r3, r3, #2
 80171ce:	440b      	add	r3, r1
 80171d0:	3318      	adds	r3, #24
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d029      	beq.n	801722c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80171d8:	78fa      	ldrb	r2, [r7, #3]
 80171da:	6879      	ldr	r1, [r7, #4]
 80171dc:	4613      	mov	r3, r2
 80171de:	009b      	lsls	r3, r3, #2
 80171e0:	4413      	add	r3, r2
 80171e2:	009b      	lsls	r3, r3, #2
 80171e4:	440b      	add	r3, r1
 80171e6:	3318      	adds	r3, #24
 80171e8:	681a      	ldr	r2, [r3, #0]
 80171ea:	78f9      	ldrb	r1, [r7, #3]
 80171ec:	68f8      	ldr	r0, [r7, #12]
 80171ee:	460b      	mov	r3, r1
 80171f0:	00db      	lsls	r3, r3, #3
 80171f2:	1a5b      	subs	r3, r3, r1
 80171f4:	009b      	lsls	r3, r3, #2
 80171f6:	4403      	add	r3, r0
 80171f8:	3344      	adds	r3, #68	; 0x44
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8017200:	fb03 f301 	mul.w	r3, r3, r1
 8017204:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8017206:	2b00      	cmp	r3, #0
 8017208:	d110      	bne.n	801722c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801720a:	78fa      	ldrb	r2, [r7, #3]
 801720c:	6879      	ldr	r1, [r7, #4]
 801720e:	4613      	mov	r3, r2
 8017210:	009b      	lsls	r3, r3, #2
 8017212:	4413      	add	r3, r2
 8017214:	009b      	lsls	r3, r3, #2
 8017216:	440b      	add	r3, r1
 8017218:	3318      	adds	r3, #24
 801721a:	2200      	movs	r2, #0
 801721c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801721e:	78f9      	ldrb	r1, [r7, #3]
 8017220:	2300      	movs	r3, #0
 8017222:	2200      	movs	r2, #0
 8017224:	6878      	ldr	r0, [r7, #4]
 8017226:	f006 f884 	bl	801d332 <USBD_LL_Transmit>
 801722a:	e015      	b.n	8017258 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801722c:	68bb      	ldr	r3, [r7, #8]
 801722e:	2200      	movs	r2, #0
 8017230:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801723a:	691b      	ldr	r3, [r3, #16]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d00b      	beq.n	8017258 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017246:	691b      	ldr	r3, [r3, #16]
 8017248:	68ba      	ldr	r2, [r7, #8]
 801724a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801724e:	68ba      	ldr	r2, [r7, #8]
 8017250:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8017254:	78fa      	ldrb	r2, [r7, #3]
 8017256:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8017258:	2300      	movs	r3, #0
}
 801725a:	4618      	mov	r0, r3
 801725c:	3710      	adds	r7, #16
 801725e:	46bd      	mov	sp, r7
 8017260:	bd80      	pop	{r7, pc}

08017262 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8017262:	b580      	push	{r7, lr}
 8017264:	b084      	sub	sp, #16
 8017266:	af00      	add	r7, sp, #0
 8017268:	6078      	str	r0, [r7, #4]
 801726a:	460b      	mov	r3, r1
 801726c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017274:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801727c:	2b00      	cmp	r3, #0
 801727e:	d101      	bne.n	8017284 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8017280:	2303      	movs	r3, #3
 8017282:	e015      	b.n	80172b0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8017284:	78fb      	ldrb	r3, [r7, #3]
 8017286:	4619      	mov	r1, r3
 8017288:	6878      	ldr	r0, [r7, #4]
 801728a:	f006 f894 	bl	801d3b6 <USBD_LL_GetRxDataSize>
 801728e:	4602      	mov	r2, r0
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801729c:	68db      	ldr	r3, [r3, #12]
 801729e:	68fa      	ldr	r2, [r7, #12]
 80172a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80172a4:	68fa      	ldr	r2, [r7, #12]
 80172a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80172aa:	4611      	mov	r1, r2
 80172ac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80172ae:	2300      	movs	r3, #0
}
 80172b0:	4618      	mov	r0, r3
 80172b2:	3710      	adds	r7, #16
 80172b4:	46bd      	mov	sp, r7
 80172b6:	bd80      	pop	{r7, pc}

080172b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b084      	sub	sp, #16
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80172c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d101      	bne.n	80172d2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80172ce:	2303      	movs	r3, #3
 80172d0:	e01b      	b.n	801730a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d015      	beq.n	8017308 <USBD_CDC_EP0_RxReady+0x50>
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80172e2:	2bff      	cmp	r3, #255	; 0xff
 80172e4:	d010      	beq.n	8017308 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80172ec:	689b      	ldr	r3, [r3, #8]
 80172ee:	68fa      	ldr	r2, [r7, #12]
 80172f0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80172f4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80172f6:	68fa      	ldr	r2, [r7, #12]
 80172f8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80172fc:	b292      	uxth	r2, r2
 80172fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	22ff      	movs	r2, #255	; 0xff
 8017304:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8017308:	2300      	movs	r3, #0
}
 801730a:	4618      	mov	r0, r3
 801730c:	3710      	adds	r7, #16
 801730e:	46bd      	mov	sp, r7
 8017310:	bd80      	pop	{r7, pc}
	...

08017314 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8017314:	b480      	push	{r7}
 8017316:	b083      	sub	sp, #12
 8017318:	af00      	add	r7, sp, #0
 801731a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	2243      	movs	r2, #67	; 0x43
 8017320:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8017322:	4b03      	ldr	r3, [pc, #12]	; (8017330 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8017324:	4618      	mov	r0, r3
 8017326:	370c      	adds	r7, #12
 8017328:	46bd      	mov	sp, r7
 801732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801732e:	4770      	bx	lr
 8017330:	200000e4 	.word	0x200000e4

08017334 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8017334:	b480      	push	{r7}
 8017336:	b083      	sub	sp, #12
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	2243      	movs	r2, #67	; 0x43
 8017340:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8017342:	4b03      	ldr	r3, [pc, #12]	; (8017350 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8017344:	4618      	mov	r0, r3
 8017346:	370c      	adds	r7, #12
 8017348:	46bd      	mov	sp, r7
 801734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801734e:	4770      	bx	lr
 8017350:	200000a0 	.word	0x200000a0

08017354 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8017354:	b480      	push	{r7}
 8017356:	b083      	sub	sp, #12
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	2243      	movs	r2, #67	; 0x43
 8017360:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8017362:	4b03      	ldr	r3, [pc, #12]	; (8017370 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8017364:	4618      	mov	r0, r3
 8017366:	370c      	adds	r7, #12
 8017368:	46bd      	mov	sp, r7
 801736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801736e:	4770      	bx	lr
 8017370:	20000128 	.word	0x20000128

08017374 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8017374:	b480      	push	{r7}
 8017376:	b083      	sub	sp, #12
 8017378:	af00      	add	r7, sp, #0
 801737a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	220a      	movs	r2, #10
 8017380:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8017382:	4b03      	ldr	r3, [pc, #12]	; (8017390 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8017384:	4618      	mov	r0, r3
 8017386:	370c      	adds	r7, #12
 8017388:	46bd      	mov	sp, r7
 801738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801738e:	4770      	bx	lr
 8017390:	2000005c 	.word	0x2000005c

08017394 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8017394:	b480      	push	{r7}
 8017396:	b083      	sub	sp, #12
 8017398:	af00      	add	r7, sp, #0
 801739a:	6078      	str	r0, [r7, #4]
 801739c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801739e:	683b      	ldr	r3, [r7, #0]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d101      	bne.n	80173a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80173a4:	2303      	movs	r3, #3
 80173a6:	e004      	b.n	80173b2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	683a      	ldr	r2, [r7, #0]
 80173ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80173b0:	2300      	movs	r3, #0
}
 80173b2:	4618      	mov	r0, r3
 80173b4:	370c      	adds	r7, #12
 80173b6:	46bd      	mov	sp, r7
 80173b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173bc:	4770      	bx	lr

080173be <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80173be:	b480      	push	{r7}
 80173c0:	b087      	sub	sp, #28
 80173c2:	af00      	add	r7, sp, #0
 80173c4:	60f8      	str	r0, [r7, #12]
 80173c6:	60b9      	str	r1, [r7, #8]
 80173c8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80173d0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80173d2:	697b      	ldr	r3, [r7, #20]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d101      	bne.n	80173dc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80173d8:	2303      	movs	r3, #3
 80173da:	e008      	b.n	80173ee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80173dc:	697b      	ldr	r3, [r7, #20]
 80173de:	68ba      	ldr	r2, [r7, #8]
 80173e0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80173e4:	697b      	ldr	r3, [r7, #20]
 80173e6:	687a      	ldr	r2, [r7, #4]
 80173e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80173ec:	2300      	movs	r3, #0
}
 80173ee:	4618      	mov	r0, r3
 80173f0:	371c      	adds	r7, #28
 80173f2:	46bd      	mov	sp, r7
 80173f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173f8:	4770      	bx	lr

080173fa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80173fa:	b480      	push	{r7}
 80173fc:	b085      	sub	sp, #20
 80173fe:	af00      	add	r7, sp, #0
 8017400:	6078      	str	r0, [r7, #4]
 8017402:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801740a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d101      	bne.n	8017416 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8017412:	2303      	movs	r3, #3
 8017414:	e004      	b.n	8017420 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	683a      	ldr	r2, [r7, #0]
 801741a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801741e:	2300      	movs	r3, #0
}
 8017420:	4618      	mov	r0, r3
 8017422:	3714      	adds	r7, #20
 8017424:	46bd      	mov	sp, r7
 8017426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801742a:	4770      	bx	lr

0801742c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801742c:	b580      	push	{r7, lr}
 801742e:	b084      	sub	sp, #16
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801743a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 801743c:	2301      	movs	r3, #1
 801743e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017446:	2b00      	cmp	r3, #0
 8017448:	d101      	bne.n	801744e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801744a:	2303      	movs	r3, #3
 801744c:	e01a      	b.n	8017484 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 801744e:	68bb      	ldr	r3, [r7, #8]
 8017450:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8017454:	2b00      	cmp	r3, #0
 8017456:	d114      	bne.n	8017482 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8017458:	68bb      	ldr	r3, [r7, #8]
 801745a:	2201      	movs	r2, #1
 801745c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8017460:	68bb      	ldr	r3, [r7, #8]
 8017462:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801746a:	68bb      	ldr	r3, [r7, #8]
 801746c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8017470:	68bb      	ldr	r3, [r7, #8]
 8017472:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8017476:	2181      	movs	r1, #129	; 0x81
 8017478:	6878      	ldr	r0, [r7, #4]
 801747a:	f005 ff5a 	bl	801d332 <USBD_LL_Transmit>

    ret = USBD_OK;
 801747e:	2300      	movs	r3, #0
 8017480:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8017482:	7bfb      	ldrb	r3, [r7, #15]
}
 8017484:	4618      	mov	r0, r3
 8017486:	3710      	adds	r7, #16
 8017488:	46bd      	mov	sp, r7
 801748a:	bd80      	pop	{r7, pc}

0801748c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801748c:	b580      	push	{r7, lr}
 801748e:	b084      	sub	sp, #16
 8017490:	af00      	add	r7, sp, #0
 8017492:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801749a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d101      	bne.n	80174aa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80174a6:	2303      	movs	r3, #3
 80174a8:	e016      	b.n	80174d8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	7c1b      	ldrb	r3, [r3, #16]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d109      	bne.n	80174c6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80174b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80174bc:	2101      	movs	r1, #1
 80174be:	6878      	ldr	r0, [r7, #4]
 80174c0:	f005 ff58 	bl	801d374 <USBD_LL_PrepareReceive>
 80174c4:	e007      	b.n	80174d6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80174cc:	2340      	movs	r3, #64	; 0x40
 80174ce:	2101      	movs	r1, #1
 80174d0:	6878      	ldr	r0, [r7, #4]
 80174d2:	f005 ff4f 	bl	801d374 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80174d6:	2300      	movs	r3, #0
}
 80174d8:	4618      	mov	r0, r3
 80174da:	3710      	adds	r7, #16
 80174dc:	46bd      	mov	sp, r7
 80174de:	bd80      	pop	{r7, pc}

080174e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80174e0:	b580      	push	{r7, lr}
 80174e2:	b086      	sub	sp, #24
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	60f8      	str	r0, [r7, #12]
 80174e8:	60b9      	str	r1, [r7, #8]
 80174ea:	4613      	mov	r3, r2
 80174ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d101      	bne.n	80174f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80174f4:	2303      	movs	r3, #3
 80174f6:	e01f      	b.n	8017538 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	2200      	movs	r2, #0
 80174fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	2200      	movs	r2, #0
 8017504:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	2200      	movs	r2, #0
 801750c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8017510:	68bb      	ldr	r3, [r7, #8]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d003      	beq.n	801751e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	68ba      	ldr	r2, [r7, #8]
 801751a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	2201      	movs	r2, #1
 8017522:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8017526:	68fb      	ldr	r3, [r7, #12]
 8017528:	79fa      	ldrb	r2, [r7, #7]
 801752a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801752c:	68f8      	ldr	r0, [r7, #12]
 801752e:	f005 fd95 	bl	801d05c <USBD_LL_Init>
 8017532:	4603      	mov	r3, r0
 8017534:	75fb      	strb	r3, [r7, #23]

  return ret;
 8017536:	7dfb      	ldrb	r3, [r7, #23]
}
 8017538:	4618      	mov	r0, r3
 801753a:	3718      	adds	r7, #24
 801753c:	46bd      	mov	sp, r7
 801753e:	bd80      	pop	{r7, pc}

08017540 <USBD_DeInit>:
  *         Re-Initialize the device library
  * @param  pdev: device instance
  * @retval status: status
  */
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8017540:	b580      	push	{r7, lr}
 8017542:	b084      	sub	sp, #16
 8017544:	af00      	add	r7, sp, #0
 8017546:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret;

  /* Disconnect the USB Device */
  (void)USBD_LL_Stop(pdev);
 8017548:	6878      	ldr	r0, [r7, #4]
 801754a:	f005 fe09 	bl	801d160 <USBD_LL_Stop>

  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	2201      	movs	r2, #1
 8017552:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801755c:	2b00      	cmp	r3, #0
 801755e:	d011      	beq.n	8017584 <USBD_DeInit+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017566:	685b      	ldr	r3, [r3, #4]
 8017568:	687a      	ldr	r2, [r7, #4]
 801756a:	6852      	ldr	r2, [r2, #4]
 801756c:	b2d2      	uxtb	r2, r2
 801756e:	4611      	mov	r1, r2
 8017570:	6878      	ldr	r0, [r7, #4]
 8017572:	4798      	blx	r3
    pdev->pClass = NULL;
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	2200      	movs	r2, #0
 8017578:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    pdev->pUserData = NULL;
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	2200      	movs	r2, #0
 8017580:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  }

  /* Free Device descriptors resources */
  pdev->pDesc = NULL;
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	2200      	movs	r2, #0
 8017588:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  pdev->pConfDesc = NULL;
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	2200      	movs	r2, #0
 8017590:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* DeInitialize low level driver */
  ret = USBD_LL_DeInit(pdev);
 8017594:	6878      	ldr	r0, [r7, #4]
 8017596:	f005 fdad 	bl	801d0f4 <USBD_LL_DeInit>
 801759a:	4603      	mov	r3, r0
 801759c:	73fb      	strb	r3, [r7, #15]

  return ret;
 801759e:	7bfb      	ldrb	r3, [r7, #15]
}
 80175a0:	4618      	mov	r0, r3
 80175a2:	3710      	adds	r7, #16
 80175a4:	46bd      	mov	sp, r7
 80175a6:	bd80      	pop	{r7, pc}

080175a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80175a8:	b580      	push	{r7, lr}
 80175aa:	b084      	sub	sp, #16
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	6078      	str	r0, [r7, #4]
 80175b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80175b2:	2300      	movs	r3, #0
 80175b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80175b6:	683b      	ldr	r3, [r7, #0]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d101      	bne.n	80175c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80175bc:	2303      	movs	r3, #3
 80175be:	e016      	b.n	80175ee <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	683a      	ldr	r2, [r7, #0]
 80175c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80175ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d00b      	beq.n	80175ec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80175da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175dc:	f107 020e 	add.w	r2, r7, #14
 80175e0:	4610      	mov	r0, r2
 80175e2:	4798      	blx	r3
 80175e4:	4602      	mov	r2, r0
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80175ec:	2300      	movs	r3, #0
}
 80175ee:	4618      	mov	r0, r3
 80175f0:	3710      	adds	r7, #16
 80175f2:	46bd      	mov	sp, r7
 80175f4:	bd80      	pop	{r7, pc}

080175f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80175f6:	b580      	push	{r7, lr}
 80175f8:	b082      	sub	sp, #8
 80175fa:	af00      	add	r7, sp, #0
 80175fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80175fe:	6878      	ldr	r0, [r7, #4]
 8017600:	f005 fd93 	bl	801d12a <USBD_LL_Start>
 8017604:	4603      	mov	r3, r0
}
 8017606:	4618      	mov	r0, r3
 8017608:	3708      	adds	r7, #8
 801760a:	46bd      	mov	sp, r7
 801760c:	bd80      	pop	{r7, pc}

0801760e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801760e:	b480      	push	{r7}
 8017610:	b083      	sub	sp, #12
 8017612:	af00      	add	r7, sp, #0
 8017614:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017616:	2300      	movs	r3, #0
}
 8017618:	4618      	mov	r0, r3
 801761a:	370c      	adds	r7, #12
 801761c:	46bd      	mov	sp, r7
 801761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017622:	4770      	bx	lr

08017624 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b084      	sub	sp, #16
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
 801762c:	460b      	mov	r3, r1
 801762e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8017630:	2303      	movs	r3, #3
 8017632:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801763a:	2b00      	cmp	r3, #0
 801763c:	d009      	beq.n	8017652 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	78fa      	ldrb	r2, [r7, #3]
 8017648:	4611      	mov	r1, r2
 801764a:	6878      	ldr	r0, [r7, #4]
 801764c:	4798      	blx	r3
 801764e:	4603      	mov	r3, r0
 8017650:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8017652:	7bfb      	ldrb	r3, [r7, #15]
}
 8017654:	4618      	mov	r0, r3
 8017656:	3710      	adds	r7, #16
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}

0801765c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b082      	sub	sp, #8
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
 8017664:	460b      	mov	r3, r1
 8017666:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801766e:	2b00      	cmp	r3, #0
 8017670:	d007      	beq.n	8017682 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017678:	685b      	ldr	r3, [r3, #4]
 801767a:	78fa      	ldrb	r2, [r7, #3]
 801767c:	4611      	mov	r1, r2
 801767e:	6878      	ldr	r0, [r7, #4]
 8017680:	4798      	blx	r3
  }

  return USBD_OK;
 8017682:	2300      	movs	r3, #0
}
 8017684:	4618      	mov	r0, r3
 8017686:	3708      	adds	r7, #8
 8017688:	46bd      	mov	sp, r7
 801768a:	bd80      	pop	{r7, pc}

0801768c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b084      	sub	sp, #16
 8017690:	af00      	add	r7, sp, #0
 8017692:	6078      	str	r0, [r7, #4]
 8017694:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801769c:	6839      	ldr	r1, [r7, #0]
 801769e:	4618      	mov	r0, r3
 80176a0:	f000 ff90 	bl	80185c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	2201      	movs	r2, #1
 80176a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80176b2:	461a      	mov	r2, r3
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80176c0:	f003 031f 	and.w	r3, r3, #31
 80176c4:	2b02      	cmp	r3, #2
 80176c6:	d01a      	beq.n	80176fe <USBD_LL_SetupStage+0x72>
 80176c8:	2b02      	cmp	r3, #2
 80176ca:	d822      	bhi.n	8017712 <USBD_LL_SetupStage+0x86>
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d002      	beq.n	80176d6 <USBD_LL_SetupStage+0x4a>
 80176d0:	2b01      	cmp	r3, #1
 80176d2:	d00a      	beq.n	80176ea <USBD_LL_SetupStage+0x5e>
 80176d4:	e01d      	b.n	8017712 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80176dc:	4619      	mov	r1, r3
 80176de:	6878      	ldr	r0, [r7, #4]
 80176e0:	f000 fa62 	bl	8017ba8 <USBD_StdDevReq>
 80176e4:	4603      	mov	r3, r0
 80176e6:	73fb      	strb	r3, [r7, #15]
      break;
 80176e8:	e020      	b.n	801772c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80176f0:	4619      	mov	r1, r3
 80176f2:	6878      	ldr	r0, [r7, #4]
 80176f4:	f000 fac6 	bl	8017c84 <USBD_StdItfReq>
 80176f8:	4603      	mov	r3, r0
 80176fa:	73fb      	strb	r3, [r7, #15]
      break;
 80176fc:	e016      	b.n	801772c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8017704:	4619      	mov	r1, r3
 8017706:	6878      	ldr	r0, [r7, #4]
 8017708:	f000 fb05 	bl	8017d16 <USBD_StdEPReq>
 801770c:	4603      	mov	r3, r0
 801770e:	73fb      	strb	r3, [r7, #15]
      break;
 8017710:	e00c      	b.n	801772c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8017718:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801771c:	b2db      	uxtb	r3, r3
 801771e:	4619      	mov	r1, r3
 8017720:	6878      	ldr	r0, [r7, #4]
 8017722:	f005 fd7d 	bl	801d220 <USBD_LL_StallEP>
 8017726:	4603      	mov	r3, r0
 8017728:	73fb      	strb	r3, [r7, #15]
      break;
 801772a:	bf00      	nop
  }

  return ret;
 801772c:	7bfb      	ldrb	r3, [r7, #15]
}
 801772e:	4618      	mov	r0, r3
 8017730:	3710      	adds	r7, #16
 8017732:	46bd      	mov	sp, r7
 8017734:	bd80      	pop	{r7, pc}

08017736 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8017736:	b580      	push	{r7, lr}
 8017738:	b086      	sub	sp, #24
 801773a:	af00      	add	r7, sp, #0
 801773c:	60f8      	str	r0, [r7, #12]
 801773e:	460b      	mov	r3, r1
 8017740:	607a      	str	r2, [r7, #4]
 8017742:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8017744:	7afb      	ldrb	r3, [r7, #11]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d138      	bne.n	80177bc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8017750:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8017758:	2b03      	cmp	r3, #3
 801775a:	d14a      	bne.n	80177f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801775c:	693b      	ldr	r3, [r7, #16]
 801775e:	689a      	ldr	r2, [r3, #8]
 8017760:	693b      	ldr	r3, [r7, #16]
 8017762:	68db      	ldr	r3, [r3, #12]
 8017764:	429a      	cmp	r2, r3
 8017766:	d913      	bls.n	8017790 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017768:	693b      	ldr	r3, [r7, #16]
 801776a:	689a      	ldr	r2, [r3, #8]
 801776c:	693b      	ldr	r3, [r7, #16]
 801776e:	68db      	ldr	r3, [r3, #12]
 8017770:	1ad2      	subs	r2, r2, r3
 8017772:	693b      	ldr	r3, [r7, #16]
 8017774:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8017776:	693b      	ldr	r3, [r7, #16]
 8017778:	68da      	ldr	r2, [r3, #12]
 801777a:	693b      	ldr	r3, [r7, #16]
 801777c:	689b      	ldr	r3, [r3, #8]
 801777e:	4293      	cmp	r3, r2
 8017780:	bf28      	it	cs
 8017782:	4613      	movcs	r3, r2
 8017784:	461a      	mov	r2, r3
 8017786:	6879      	ldr	r1, [r7, #4]
 8017788:	68f8      	ldr	r0, [r7, #12]
 801778a:	f001 f80f 	bl	80187ac <USBD_CtlContinueRx>
 801778e:	e030      	b.n	80177f2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017796:	b2db      	uxtb	r3, r3
 8017798:	2b03      	cmp	r3, #3
 801779a:	d10b      	bne.n	80177b4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80177a2:	691b      	ldr	r3, [r3, #16]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d005      	beq.n	80177b4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80177ae:	691b      	ldr	r3, [r3, #16]
 80177b0:	68f8      	ldr	r0, [r7, #12]
 80177b2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80177b4:	68f8      	ldr	r0, [r7, #12]
 80177b6:	f001 f80a 	bl	80187ce <USBD_CtlSendStatus>
 80177ba:	e01a      	b.n	80177f2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80177c2:	b2db      	uxtb	r3, r3
 80177c4:	2b03      	cmp	r3, #3
 80177c6:	d114      	bne.n	80177f2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80177ce:	699b      	ldr	r3, [r3, #24]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d00e      	beq.n	80177f2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80177da:	699b      	ldr	r3, [r3, #24]
 80177dc:	7afa      	ldrb	r2, [r7, #11]
 80177de:	4611      	mov	r1, r2
 80177e0:	68f8      	ldr	r0, [r7, #12]
 80177e2:	4798      	blx	r3
 80177e4:	4603      	mov	r3, r0
 80177e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80177e8:	7dfb      	ldrb	r3, [r7, #23]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d001      	beq.n	80177f2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80177ee:	7dfb      	ldrb	r3, [r7, #23]
 80177f0:	e000      	b.n	80177f4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80177f2:	2300      	movs	r3, #0
}
 80177f4:	4618      	mov	r0, r3
 80177f6:	3718      	adds	r7, #24
 80177f8:	46bd      	mov	sp, r7
 80177fa:	bd80      	pop	{r7, pc}

080177fc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80177fc:	b580      	push	{r7, lr}
 80177fe:	b086      	sub	sp, #24
 8017800:	af00      	add	r7, sp, #0
 8017802:	60f8      	str	r0, [r7, #12]
 8017804:	460b      	mov	r3, r1
 8017806:	607a      	str	r2, [r7, #4]
 8017808:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801780a:	7afb      	ldrb	r3, [r7, #11]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d16b      	bne.n	80178e8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	3314      	adds	r3, #20
 8017814:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801781c:	2b02      	cmp	r3, #2
 801781e:	d156      	bne.n	80178ce <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8017820:	693b      	ldr	r3, [r7, #16]
 8017822:	689a      	ldr	r2, [r3, #8]
 8017824:	693b      	ldr	r3, [r7, #16]
 8017826:	68db      	ldr	r3, [r3, #12]
 8017828:	429a      	cmp	r2, r3
 801782a:	d914      	bls.n	8017856 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801782c:	693b      	ldr	r3, [r7, #16]
 801782e:	689a      	ldr	r2, [r3, #8]
 8017830:	693b      	ldr	r3, [r7, #16]
 8017832:	68db      	ldr	r3, [r3, #12]
 8017834:	1ad2      	subs	r2, r2, r3
 8017836:	693b      	ldr	r3, [r7, #16]
 8017838:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801783a:	693b      	ldr	r3, [r7, #16]
 801783c:	689b      	ldr	r3, [r3, #8]
 801783e:	461a      	mov	r2, r3
 8017840:	6879      	ldr	r1, [r7, #4]
 8017842:	68f8      	ldr	r0, [r7, #12]
 8017844:	f000 ff84 	bl	8018750 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017848:	2300      	movs	r3, #0
 801784a:	2200      	movs	r2, #0
 801784c:	2100      	movs	r1, #0
 801784e:	68f8      	ldr	r0, [r7, #12]
 8017850:	f005 fd90 	bl	801d374 <USBD_LL_PrepareReceive>
 8017854:	e03b      	b.n	80178ce <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8017856:	693b      	ldr	r3, [r7, #16]
 8017858:	68da      	ldr	r2, [r3, #12]
 801785a:	693b      	ldr	r3, [r7, #16]
 801785c:	689b      	ldr	r3, [r3, #8]
 801785e:	429a      	cmp	r2, r3
 8017860:	d11c      	bne.n	801789c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8017862:	693b      	ldr	r3, [r7, #16]
 8017864:	685a      	ldr	r2, [r3, #4]
 8017866:	693b      	ldr	r3, [r7, #16]
 8017868:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801786a:	429a      	cmp	r2, r3
 801786c:	d316      	bcc.n	801789c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801786e:	693b      	ldr	r3, [r7, #16]
 8017870:	685a      	ldr	r2, [r3, #4]
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8017878:	429a      	cmp	r2, r3
 801787a:	d20f      	bcs.n	801789c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801787c:	2200      	movs	r2, #0
 801787e:	2100      	movs	r1, #0
 8017880:	68f8      	ldr	r0, [r7, #12]
 8017882:	f000 ff65 	bl	8018750 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	2200      	movs	r2, #0
 801788a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801788e:	2300      	movs	r3, #0
 8017890:	2200      	movs	r2, #0
 8017892:	2100      	movs	r1, #0
 8017894:	68f8      	ldr	r0, [r7, #12]
 8017896:	f005 fd6d 	bl	801d374 <USBD_LL_PrepareReceive>
 801789a:	e018      	b.n	80178ce <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80178a2:	b2db      	uxtb	r3, r3
 80178a4:	2b03      	cmp	r3, #3
 80178a6:	d10b      	bne.n	80178c0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80178ae:	68db      	ldr	r3, [r3, #12]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d005      	beq.n	80178c0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80178ba:	68db      	ldr	r3, [r3, #12]
 80178bc:	68f8      	ldr	r0, [r7, #12]
 80178be:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80178c0:	2180      	movs	r1, #128	; 0x80
 80178c2:	68f8      	ldr	r0, [r7, #12]
 80178c4:	f005 fcac 	bl	801d220 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80178c8:	68f8      	ldr	r0, [r7, #12]
 80178ca:	f000 ff93 	bl	80187f4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80178d4:	2b01      	cmp	r3, #1
 80178d6:	d122      	bne.n	801791e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80178d8:	68f8      	ldr	r0, [r7, #12]
 80178da:	f7ff fe98 	bl	801760e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	2200      	movs	r2, #0
 80178e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80178e6:	e01a      	b.n	801791e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80178ee:	b2db      	uxtb	r3, r3
 80178f0:	2b03      	cmp	r3, #3
 80178f2:	d114      	bne.n	801791e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80178fa:	695b      	ldr	r3, [r3, #20]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d00e      	beq.n	801791e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017906:	695b      	ldr	r3, [r3, #20]
 8017908:	7afa      	ldrb	r2, [r7, #11]
 801790a:	4611      	mov	r1, r2
 801790c:	68f8      	ldr	r0, [r7, #12]
 801790e:	4798      	blx	r3
 8017910:	4603      	mov	r3, r0
 8017912:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8017914:	7dfb      	ldrb	r3, [r7, #23]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d001      	beq.n	801791e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801791a:	7dfb      	ldrb	r3, [r7, #23]
 801791c:	e000      	b.n	8017920 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801791e:	2300      	movs	r3, #0
}
 8017920:	4618      	mov	r0, r3
 8017922:	3718      	adds	r7, #24
 8017924:	46bd      	mov	sp, r7
 8017926:	bd80      	pop	{r7, pc}

08017928 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b082      	sub	sp, #8
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	2201      	movs	r2, #1
 8017934:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	2200      	movs	r2, #0
 801793c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	2200      	movs	r2, #0
 8017944:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	2200      	movs	r2, #0
 801794a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017954:	2b00      	cmp	r3, #0
 8017956:	d101      	bne.n	801795c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8017958:	2303      	movs	r3, #3
 801795a:	e02f      	b.n	80179bc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017962:	2b00      	cmp	r3, #0
 8017964:	d00f      	beq.n	8017986 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801796c:	685b      	ldr	r3, [r3, #4]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d009      	beq.n	8017986 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017978:	685b      	ldr	r3, [r3, #4]
 801797a:	687a      	ldr	r2, [r7, #4]
 801797c:	6852      	ldr	r2, [r2, #4]
 801797e:	b2d2      	uxtb	r2, r2
 8017980:	4611      	mov	r1, r2
 8017982:	6878      	ldr	r0, [r7, #4]
 8017984:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017986:	2340      	movs	r3, #64	; 0x40
 8017988:	2200      	movs	r2, #0
 801798a:	2100      	movs	r1, #0
 801798c:	6878      	ldr	r0, [r7, #4]
 801798e:	f005 fc02 	bl	801d196 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	2201      	movs	r2, #1
 8017996:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	2240      	movs	r2, #64	; 0x40
 801799e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80179a2:	2340      	movs	r3, #64	; 0x40
 80179a4:	2200      	movs	r2, #0
 80179a6:	2180      	movs	r1, #128	; 0x80
 80179a8:	6878      	ldr	r0, [r7, #4]
 80179aa:	f005 fbf4 	bl	801d196 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	2201      	movs	r2, #1
 80179b2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	2240      	movs	r2, #64	; 0x40
 80179b8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80179ba:	2300      	movs	r3, #0
}
 80179bc:	4618      	mov	r0, r3
 80179be:	3708      	adds	r7, #8
 80179c0:	46bd      	mov	sp, r7
 80179c2:	bd80      	pop	{r7, pc}

080179c4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80179c4:	b480      	push	{r7}
 80179c6:	b083      	sub	sp, #12
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	6078      	str	r0, [r7, #4]
 80179cc:	460b      	mov	r3, r1
 80179ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	78fa      	ldrb	r2, [r7, #3]
 80179d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80179d6:	2300      	movs	r3, #0
}
 80179d8:	4618      	mov	r0, r3
 80179da:	370c      	adds	r7, #12
 80179dc:	46bd      	mov	sp, r7
 80179de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e2:	4770      	bx	lr

080179e4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80179e4:	b480      	push	{r7}
 80179e6:	b083      	sub	sp, #12
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80179f2:	b2da      	uxtb	r2, r3
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	2204      	movs	r2, #4
 80179fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8017a02:	2300      	movs	r3, #0
}
 8017a04:	4618      	mov	r0, r3
 8017a06:	370c      	adds	r7, #12
 8017a08:	46bd      	mov	sp, r7
 8017a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a0e:	4770      	bx	lr

08017a10 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8017a10:	b480      	push	{r7}
 8017a12:	b083      	sub	sp, #12
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017a1e:	b2db      	uxtb	r3, r3
 8017a20:	2b04      	cmp	r3, #4
 8017a22:	d106      	bne.n	8017a32 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8017a2a:	b2da      	uxtb	r2, r3
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8017a32:	2300      	movs	r3, #0
}
 8017a34:	4618      	mov	r0, r3
 8017a36:	370c      	adds	r7, #12
 8017a38:	46bd      	mov	sp, r7
 8017a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a3e:	4770      	bx	lr

08017a40 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b082      	sub	sp, #8
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d101      	bne.n	8017a56 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8017a52:	2303      	movs	r3, #3
 8017a54:	e012      	b.n	8017a7c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017a5c:	b2db      	uxtb	r3, r3
 8017a5e:	2b03      	cmp	r3, #3
 8017a60:	d10b      	bne.n	8017a7a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017a68:	69db      	ldr	r3, [r3, #28]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d005      	beq.n	8017a7a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017a74:	69db      	ldr	r3, [r3, #28]
 8017a76:	6878      	ldr	r0, [r7, #4]
 8017a78:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017a7a:	2300      	movs	r3, #0
}
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	3708      	adds	r7, #8
 8017a80:	46bd      	mov	sp, r7
 8017a82:	bd80      	pop	{r7, pc}

08017a84 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8017a84:	b580      	push	{r7, lr}
 8017a86:	b082      	sub	sp, #8
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	6078      	str	r0, [r7, #4]
 8017a8c:	460b      	mov	r3, r1
 8017a8e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d101      	bne.n	8017a9e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8017a9a:	2303      	movs	r3, #3
 8017a9c:	e014      	b.n	8017ac8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017aa4:	b2db      	uxtb	r3, r3
 8017aa6:	2b03      	cmp	r3, #3
 8017aa8:	d10d      	bne.n	8017ac6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017ab0:	6a1b      	ldr	r3, [r3, #32]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d007      	beq.n	8017ac6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017abc:	6a1b      	ldr	r3, [r3, #32]
 8017abe:	78fa      	ldrb	r2, [r7, #3]
 8017ac0:	4611      	mov	r1, r2
 8017ac2:	6878      	ldr	r0, [r7, #4]
 8017ac4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017ac6:	2300      	movs	r3, #0
}
 8017ac8:	4618      	mov	r0, r3
 8017aca:	3708      	adds	r7, #8
 8017acc:	46bd      	mov	sp, r7
 8017ace:	bd80      	pop	{r7, pc}

08017ad0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8017ad0:	b580      	push	{r7, lr}
 8017ad2:	b082      	sub	sp, #8
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	6078      	str	r0, [r7, #4]
 8017ad8:	460b      	mov	r3, r1
 8017ada:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d101      	bne.n	8017aea <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8017ae6:	2303      	movs	r3, #3
 8017ae8:	e014      	b.n	8017b14 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017af0:	b2db      	uxtb	r3, r3
 8017af2:	2b03      	cmp	r3, #3
 8017af4:	d10d      	bne.n	8017b12 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d007      	beq.n	8017b12 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b0a:	78fa      	ldrb	r2, [r7, #3]
 8017b0c:	4611      	mov	r1, r2
 8017b0e:	6878      	ldr	r0, [r7, #4]
 8017b10:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017b12:	2300      	movs	r3, #0
}
 8017b14:	4618      	mov	r0, r3
 8017b16:	3708      	adds	r7, #8
 8017b18:	46bd      	mov	sp, r7
 8017b1a:	bd80      	pop	{r7, pc}

08017b1c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8017b1c:	b480      	push	{r7}
 8017b1e:	b083      	sub	sp, #12
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017b24:	2300      	movs	r3, #0
}
 8017b26:	4618      	mov	r0, r3
 8017b28:	370c      	adds	r7, #12
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b30:	4770      	bx	lr

08017b32 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8017b32:	b580      	push	{r7, lr}
 8017b34:	b082      	sub	sp, #8
 8017b36:	af00      	add	r7, sp, #0
 8017b38:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	2201      	movs	r2, #1
 8017b3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d009      	beq.n	8017b60 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017b52:	685b      	ldr	r3, [r3, #4]
 8017b54:	687a      	ldr	r2, [r7, #4]
 8017b56:	6852      	ldr	r2, [r2, #4]
 8017b58:	b2d2      	uxtb	r2, r2
 8017b5a:	4611      	mov	r1, r2
 8017b5c:	6878      	ldr	r0, [r7, #4]
 8017b5e:	4798      	blx	r3
  }

  return USBD_OK;
 8017b60:	2300      	movs	r3, #0
}
 8017b62:	4618      	mov	r0, r3
 8017b64:	3708      	adds	r7, #8
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bd80      	pop	{r7, pc}

08017b6a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8017b6a:	b480      	push	{r7}
 8017b6c:	b087      	sub	sp, #28
 8017b6e:	af00      	add	r7, sp, #0
 8017b70:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8017b76:	697b      	ldr	r3, [r7, #20]
 8017b78:	781b      	ldrb	r3, [r3, #0]
 8017b7a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8017b7c:	697b      	ldr	r3, [r7, #20]
 8017b7e:	3301      	adds	r3, #1
 8017b80:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8017b82:	697b      	ldr	r3, [r7, #20]
 8017b84:	781b      	ldrb	r3, [r3, #0]
 8017b86:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8017b88:	8a3b      	ldrh	r3, [r7, #16]
 8017b8a:	021b      	lsls	r3, r3, #8
 8017b8c:	b21a      	sxth	r2, r3
 8017b8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017b92:	4313      	orrs	r3, r2
 8017b94:	b21b      	sxth	r3, r3
 8017b96:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8017b98:	89fb      	ldrh	r3, [r7, #14]
}
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	371c      	adds	r7, #28
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba4:	4770      	bx	lr
	...

08017ba8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017ba8:	b580      	push	{r7, lr}
 8017baa:	b084      	sub	sp, #16
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	6078      	str	r0, [r7, #4]
 8017bb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017bb6:	683b      	ldr	r3, [r7, #0]
 8017bb8:	781b      	ldrb	r3, [r3, #0]
 8017bba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017bbe:	2b40      	cmp	r3, #64	; 0x40
 8017bc0:	d005      	beq.n	8017bce <USBD_StdDevReq+0x26>
 8017bc2:	2b40      	cmp	r3, #64	; 0x40
 8017bc4:	d853      	bhi.n	8017c6e <USBD_StdDevReq+0xc6>
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d00b      	beq.n	8017be2 <USBD_StdDevReq+0x3a>
 8017bca:	2b20      	cmp	r3, #32
 8017bcc:	d14f      	bne.n	8017c6e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017bd4:	689b      	ldr	r3, [r3, #8]
 8017bd6:	6839      	ldr	r1, [r7, #0]
 8017bd8:	6878      	ldr	r0, [r7, #4]
 8017bda:	4798      	blx	r3
 8017bdc:	4603      	mov	r3, r0
 8017bde:	73fb      	strb	r3, [r7, #15]
      break;
 8017be0:	e04a      	b.n	8017c78 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017be2:	683b      	ldr	r3, [r7, #0]
 8017be4:	785b      	ldrb	r3, [r3, #1]
 8017be6:	2b09      	cmp	r3, #9
 8017be8:	d83b      	bhi.n	8017c62 <USBD_StdDevReq+0xba>
 8017bea:	a201      	add	r2, pc, #4	; (adr r2, 8017bf0 <USBD_StdDevReq+0x48>)
 8017bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017bf0:	08017c45 	.word	0x08017c45
 8017bf4:	08017c59 	.word	0x08017c59
 8017bf8:	08017c63 	.word	0x08017c63
 8017bfc:	08017c4f 	.word	0x08017c4f
 8017c00:	08017c63 	.word	0x08017c63
 8017c04:	08017c23 	.word	0x08017c23
 8017c08:	08017c19 	.word	0x08017c19
 8017c0c:	08017c63 	.word	0x08017c63
 8017c10:	08017c3b 	.word	0x08017c3b
 8017c14:	08017c2d 	.word	0x08017c2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8017c18:	6839      	ldr	r1, [r7, #0]
 8017c1a:	6878      	ldr	r0, [r7, #4]
 8017c1c:	f000 f9de 	bl	8017fdc <USBD_GetDescriptor>
          break;
 8017c20:	e024      	b.n	8017c6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8017c22:	6839      	ldr	r1, [r7, #0]
 8017c24:	6878      	ldr	r0, [r7, #4]
 8017c26:	f000 fb43 	bl	80182b0 <USBD_SetAddress>
          break;
 8017c2a:	e01f      	b.n	8017c6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8017c2c:	6839      	ldr	r1, [r7, #0]
 8017c2e:	6878      	ldr	r0, [r7, #4]
 8017c30:	f000 fb82 	bl	8018338 <USBD_SetConfig>
 8017c34:	4603      	mov	r3, r0
 8017c36:	73fb      	strb	r3, [r7, #15]
          break;
 8017c38:	e018      	b.n	8017c6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8017c3a:	6839      	ldr	r1, [r7, #0]
 8017c3c:	6878      	ldr	r0, [r7, #4]
 8017c3e:	f000 fc21 	bl	8018484 <USBD_GetConfig>
          break;
 8017c42:	e013      	b.n	8017c6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8017c44:	6839      	ldr	r1, [r7, #0]
 8017c46:	6878      	ldr	r0, [r7, #4]
 8017c48:	f000 fc52 	bl	80184f0 <USBD_GetStatus>
          break;
 8017c4c:	e00e      	b.n	8017c6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8017c4e:	6839      	ldr	r1, [r7, #0]
 8017c50:	6878      	ldr	r0, [r7, #4]
 8017c52:	f000 fc81 	bl	8018558 <USBD_SetFeature>
          break;
 8017c56:	e009      	b.n	8017c6c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8017c58:	6839      	ldr	r1, [r7, #0]
 8017c5a:	6878      	ldr	r0, [r7, #4]
 8017c5c:	f000 fc90 	bl	8018580 <USBD_ClrFeature>
          break;
 8017c60:	e004      	b.n	8017c6c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8017c62:	6839      	ldr	r1, [r7, #0]
 8017c64:	6878      	ldr	r0, [r7, #4]
 8017c66:	f000 fce7 	bl	8018638 <USBD_CtlError>
          break;
 8017c6a:	bf00      	nop
      }
      break;
 8017c6c:	e004      	b.n	8017c78 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8017c6e:	6839      	ldr	r1, [r7, #0]
 8017c70:	6878      	ldr	r0, [r7, #4]
 8017c72:	f000 fce1 	bl	8018638 <USBD_CtlError>
      break;
 8017c76:	bf00      	nop
  }

  return ret;
 8017c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	3710      	adds	r7, #16
 8017c7e:	46bd      	mov	sp, r7
 8017c80:	bd80      	pop	{r7, pc}
 8017c82:	bf00      	nop

08017c84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017c84:	b580      	push	{r7, lr}
 8017c86:	b084      	sub	sp, #16
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	6078      	str	r0, [r7, #4]
 8017c8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017c8e:	2300      	movs	r3, #0
 8017c90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017c92:	683b      	ldr	r3, [r7, #0]
 8017c94:	781b      	ldrb	r3, [r3, #0]
 8017c96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017c9a:	2b40      	cmp	r3, #64	; 0x40
 8017c9c:	d005      	beq.n	8017caa <USBD_StdItfReq+0x26>
 8017c9e:	2b40      	cmp	r3, #64	; 0x40
 8017ca0:	d82f      	bhi.n	8017d02 <USBD_StdItfReq+0x7e>
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d001      	beq.n	8017caa <USBD_StdItfReq+0x26>
 8017ca6:	2b20      	cmp	r3, #32
 8017ca8:	d12b      	bne.n	8017d02 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017cb0:	b2db      	uxtb	r3, r3
 8017cb2:	3b01      	subs	r3, #1
 8017cb4:	2b02      	cmp	r3, #2
 8017cb6:	d81d      	bhi.n	8017cf4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8017cb8:	683b      	ldr	r3, [r7, #0]
 8017cba:	889b      	ldrh	r3, [r3, #4]
 8017cbc:	b2db      	uxtb	r3, r3
 8017cbe:	2b01      	cmp	r3, #1
 8017cc0:	d813      	bhi.n	8017cea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017cc8:	689b      	ldr	r3, [r3, #8]
 8017cca:	6839      	ldr	r1, [r7, #0]
 8017ccc:	6878      	ldr	r0, [r7, #4]
 8017cce:	4798      	blx	r3
 8017cd0:	4603      	mov	r3, r0
 8017cd2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8017cd4:	683b      	ldr	r3, [r7, #0]
 8017cd6:	88db      	ldrh	r3, [r3, #6]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d110      	bne.n	8017cfe <USBD_StdItfReq+0x7a>
 8017cdc:	7bfb      	ldrb	r3, [r7, #15]
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d10d      	bne.n	8017cfe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8017ce2:	6878      	ldr	r0, [r7, #4]
 8017ce4:	f000 fd73 	bl	80187ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8017ce8:	e009      	b.n	8017cfe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8017cea:	6839      	ldr	r1, [r7, #0]
 8017cec:	6878      	ldr	r0, [r7, #4]
 8017cee:	f000 fca3 	bl	8018638 <USBD_CtlError>
          break;
 8017cf2:	e004      	b.n	8017cfe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8017cf4:	6839      	ldr	r1, [r7, #0]
 8017cf6:	6878      	ldr	r0, [r7, #4]
 8017cf8:	f000 fc9e 	bl	8018638 <USBD_CtlError>
          break;
 8017cfc:	e000      	b.n	8017d00 <USBD_StdItfReq+0x7c>
          break;
 8017cfe:	bf00      	nop
      }
      break;
 8017d00:	e004      	b.n	8017d0c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8017d02:	6839      	ldr	r1, [r7, #0]
 8017d04:	6878      	ldr	r0, [r7, #4]
 8017d06:	f000 fc97 	bl	8018638 <USBD_CtlError>
      break;
 8017d0a:	bf00      	nop
  }

  return ret;
 8017d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d0e:	4618      	mov	r0, r3
 8017d10:	3710      	adds	r7, #16
 8017d12:	46bd      	mov	sp, r7
 8017d14:	bd80      	pop	{r7, pc}

08017d16 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017d16:	b580      	push	{r7, lr}
 8017d18:	b084      	sub	sp, #16
 8017d1a:	af00      	add	r7, sp, #0
 8017d1c:	6078      	str	r0, [r7, #4]
 8017d1e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8017d20:	2300      	movs	r3, #0
 8017d22:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8017d24:	683b      	ldr	r3, [r7, #0]
 8017d26:	889b      	ldrh	r3, [r3, #4]
 8017d28:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017d2a:	683b      	ldr	r3, [r7, #0]
 8017d2c:	781b      	ldrb	r3, [r3, #0]
 8017d2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017d32:	2b40      	cmp	r3, #64	; 0x40
 8017d34:	d007      	beq.n	8017d46 <USBD_StdEPReq+0x30>
 8017d36:	2b40      	cmp	r3, #64	; 0x40
 8017d38:	f200 8145 	bhi.w	8017fc6 <USBD_StdEPReq+0x2b0>
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d00c      	beq.n	8017d5a <USBD_StdEPReq+0x44>
 8017d40:	2b20      	cmp	r3, #32
 8017d42:	f040 8140 	bne.w	8017fc6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017d4c:	689b      	ldr	r3, [r3, #8]
 8017d4e:	6839      	ldr	r1, [r7, #0]
 8017d50:	6878      	ldr	r0, [r7, #4]
 8017d52:	4798      	blx	r3
 8017d54:	4603      	mov	r3, r0
 8017d56:	73fb      	strb	r3, [r7, #15]
      break;
 8017d58:	e13a      	b.n	8017fd0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017d5a:	683b      	ldr	r3, [r7, #0]
 8017d5c:	785b      	ldrb	r3, [r3, #1]
 8017d5e:	2b03      	cmp	r3, #3
 8017d60:	d007      	beq.n	8017d72 <USBD_StdEPReq+0x5c>
 8017d62:	2b03      	cmp	r3, #3
 8017d64:	f300 8129 	bgt.w	8017fba <USBD_StdEPReq+0x2a4>
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d07f      	beq.n	8017e6c <USBD_StdEPReq+0x156>
 8017d6c:	2b01      	cmp	r3, #1
 8017d6e:	d03c      	beq.n	8017dea <USBD_StdEPReq+0xd4>
 8017d70:	e123      	b.n	8017fba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017d78:	b2db      	uxtb	r3, r3
 8017d7a:	2b02      	cmp	r3, #2
 8017d7c:	d002      	beq.n	8017d84 <USBD_StdEPReq+0x6e>
 8017d7e:	2b03      	cmp	r3, #3
 8017d80:	d016      	beq.n	8017db0 <USBD_StdEPReq+0x9a>
 8017d82:	e02c      	b.n	8017dde <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017d84:	7bbb      	ldrb	r3, [r7, #14]
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d00d      	beq.n	8017da6 <USBD_StdEPReq+0x90>
 8017d8a:	7bbb      	ldrb	r3, [r7, #14]
 8017d8c:	2b80      	cmp	r3, #128	; 0x80
 8017d8e:	d00a      	beq.n	8017da6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017d90:	7bbb      	ldrb	r3, [r7, #14]
 8017d92:	4619      	mov	r1, r3
 8017d94:	6878      	ldr	r0, [r7, #4]
 8017d96:	f005 fa43 	bl	801d220 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017d9a:	2180      	movs	r1, #128	; 0x80
 8017d9c:	6878      	ldr	r0, [r7, #4]
 8017d9e:	f005 fa3f 	bl	801d220 <USBD_LL_StallEP>
 8017da2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017da4:	e020      	b.n	8017de8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8017da6:	6839      	ldr	r1, [r7, #0]
 8017da8:	6878      	ldr	r0, [r7, #4]
 8017daa:	f000 fc45 	bl	8018638 <USBD_CtlError>
              break;
 8017dae:	e01b      	b.n	8017de8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017db0:	683b      	ldr	r3, [r7, #0]
 8017db2:	885b      	ldrh	r3, [r3, #2]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d10e      	bne.n	8017dd6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8017db8:	7bbb      	ldrb	r3, [r7, #14]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d00b      	beq.n	8017dd6 <USBD_StdEPReq+0xc0>
 8017dbe:	7bbb      	ldrb	r3, [r7, #14]
 8017dc0:	2b80      	cmp	r3, #128	; 0x80
 8017dc2:	d008      	beq.n	8017dd6 <USBD_StdEPReq+0xc0>
 8017dc4:	683b      	ldr	r3, [r7, #0]
 8017dc6:	88db      	ldrh	r3, [r3, #6]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d104      	bne.n	8017dd6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8017dcc:	7bbb      	ldrb	r3, [r7, #14]
 8017dce:	4619      	mov	r1, r3
 8017dd0:	6878      	ldr	r0, [r7, #4]
 8017dd2:	f005 fa25 	bl	801d220 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8017dd6:	6878      	ldr	r0, [r7, #4]
 8017dd8:	f000 fcf9 	bl	80187ce <USBD_CtlSendStatus>

              break;
 8017ddc:	e004      	b.n	8017de8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8017dde:	6839      	ldr	r1, [r7, #0]
 8017de0:	6878      	ldr	r0, [r7, #4]
 8017de2:	f000 fc29 	bl	8018638 <USBD_CtlError>
              break;
 8017de6:	bf00      	nop
          }
          break;
 8017de8:	e0ec      	b.n	8017fc4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017df0:	b2db      	uxtb	r3, r3
 8017df2:	2b02      	cmp	r3, #2
 8017df4:	d002      	beq.n	8017dfc <USBD_StdEPReq+0xe6>
 8017df6:	2b03      	cmp	r3, #3
 8017df8:	d016      	beq.n	8017e28 <USBD_StdEPReq+0x112>
 8017dfa:	e030      	b.n	8017e5e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017dfc:	7bbb      	ldrb	r3, [r7, #14]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d00d      	beq.n	8017e1e <USBD_StdEPReq+0x108>
 8017e02:	7bbb      	ldrb	r3, [r7, #14]
 8017e04:	2b80      	cmp	r3, #128	; 0x80
 8017e06:	d00a      	beq.n	8017e1e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017e08:	7bbb      	ldrb	r3, [r7, #14]
 8017e0a:	4619      	mov	r1, r3
 8017e0c:	6878      	ldr	r0, [r7, #4]
 8017e0e:	f005 fa07 	bl	801d220 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017e12:	2180      	movs	r1, #128	; 0x80
 8017e14:	6878      	ldr	r0, [r7, #4]
 8017e16:	f005 fa03 	bl	801d220 <USBD_LL_StallEP>
 8017e1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017e1c:	e025      	b.n	8017e6a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8017e1e:	6839      	ldr	r1, [r7, #0]
 8017e20:	6878      	ldr	r0, [r7, #4]
 8017e22:	f000 fc09 	bl	8018638 <USBD_CtlError>
              break;
 8017e26:	e020      	b.n	8017e6a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017e28:	683b      	ldr	r3, [r7, #0]
 8017e2a:	885b      	ldrh	r3, [r3, #2]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d11b      	bne.n	8017e68 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017e30:	7bbb      	ldrb	r3, [r7, #14]
 8017e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d004      	beq.n	8017e44 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8017e3a:	7bbb      	ldrb	r3, [r7, #14]
 8017e3c:	4619      	mov	r1, r3
 8017e3e:	6878      	ldr	r0, [r7, #4]
 8017e40:	f005 fa0d 	bl	801d25e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8017e44:	6878      	ldr	r0, [r7, #4]
 8017e46:	f000 fcc2 	bl	80187ce <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017e50:	689b      	ldr	r3, [r3, #8]
 8017e52:	6839      	ldr	r1, [r7, #0]
 8017e54:	6878      	ldr	r0, [r7, #4]
 8017e56:	4798      	blx	r3
 8017e58:	4603      	mov	r3, r0
 8017e5a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8017e5c:	e004      	b.n	8017e68 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8017e5e:	6839      	ldr	r1, [r7, #0]
 8017e60:	6878      	ldr	r0, [r7, #4]
 8017e62:	f000 fbe9 	bl	8018638 <USBD_CtlError>
              break;
 8017e66:	e000      	b.n	8017e6a <USBD_StdEPReq+0x154>
              break;
 8017e68:	bf00      	nop
          }
          break;
 8017e6a:	e0ab      	b.n	8017fc4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017e72:	b2db      	uxtb	r3, r3
 8017e74:	2b02      	cmp	r3, #2
 8017e76:	d002      	beq.n	8017e7e <USBD_StdEPReq+0x168>
 8017e78:	2b03      	cmp	r3, #3
 8017e7a:	d032      	beq.n	8017ee2 <USBD_StdEPReq+0x1cc>
 8017e7c:	e097      	b.n	8017fae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017e7e:	7bbb      	ldrb	r3, [r7, #14]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d007      	beq.n	8017e94 <USBD_StdEPReq+0x17e>
 8017e84:	7bbb      	ldrb	r3, [r7, #14]
 8017e86:	2b80      	cmp	r3, #128	; 0x80
 8017e88:	d004      	beq.n	8017e94 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8017e8a:	6839      	ldr	r1, [r7, #0]
 8017e8c:	6878      	ldr	r0, [r7, #4]
 8017e8e:	f000 fbd3 	bl	8018638 <USBD_CtlError>
                break;
 8017e92:	e091      	b.n	8017fb8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017e94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	da0b      	bge.n	8017eb4 <USBD_StdEPReq+0x19e>
 8017e9c:	7bbb      	ldrb	r3, [r7, #14]
 8017e9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017ea2:	4613      	mov	r3, r2
 8017ea4:	009b      	lsls	r3, r3, #2
 8017ea6:	4413      	add	r3, r2
 8017ea8:	009b      	lsls	r3, r3, #2
 8017eaa:	3310      	adds	r3, #16
 8017eac:	687a      	ldr	r2, [r7, #4]
 8017eae:	4413      	add	r3, r2
 8017eb0:	3304      	adds	r3, #4
 8017eb2:	e00b      	b.n	8017ecc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017eb4:	7bbb      	ldrb	r3, [r7, #14]
 8017eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017eba:	4613      	mov	r3, r2
 8017ebc:	009b      	lsls	r3, r3, #2
 8017ebe:	4413      	add	r3, r2
 8017ec0:	009b      	lsls	r3, r3, #2
 8017ec2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8017ec6:	687a      	ldr	r2, [r7, #4]
 8017ec8:	4413      	add	r3, r2
 8017eca:	3304      	adds	r3, #4
 8017ecc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8017ece:	68bb      	ldr	r3, [r7, #8]
 8017ed0:	2200      	movs	r2, #0
 8017ed2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017ed4:	68bb      	ldr	r3, [r7, #8]
 8017ed6:	2202      	movs	r2, #2
 8017ed8:	4619      	mov	r1, r3
 8017eda:	6878      	ldr	r0, [r7, #4]
 8017edc:	f000 fc1d 	bl	801871a <USBD_CtlSendData>
              break;
 8017ee0:	e06a      	b.n	8017fb8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8017ee2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	da11      	bge.n	8017f0e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017eea:	7bbb      	ldrb	r3, [r7, #14]
 8017eec:	f003 020f 	and.w	r2, r3, #15
 8017ef0:	6879      	ldr	r1, [r7, #4]
 8017ef2:	4613      	mov	r3, r2
 8017ef4:	009b      	lsls	r3, r3, #2
 8017ef6:	4413      	add	r3, r2
 8017ef8:	009b      	lsls	r3, r3, #2
 8017efa:	440b      	add	r3, r1
 8017efc:	3324      	adds	r3, #36	; 0x24
 8017efe:	881b      	ldrh	r3, [r3, #0]
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d117      	bne.n	8017f34 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8017f04:	6839      	ldr	r1, [r7, #0]
 8017f06:	6878      	ldr	r0, [r7, #4]
 8017f08:	f000 fb96 	bl	8018638 <USBD_CtlError>
                  break;
 8017f0c:	e054      	b.n	8017fb8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017f0e:	7bbb      	ldrb	r3, [r7, #14]
 8017f10:	f003 020f 	and.w	r2, r3, #15
 8017f14:	6879      	ldr	r1, [r7, #4]
 8017f16:	4613      	mov	r3, r2
 8017f18:	009b      	lsls	r3, r3, #2
 8017f1a:	4413      	add	r3, r2
 8017f1c:	009b      	lsls	r3, r3, #2
 8017f1e:	440b      	add	r3, r1
 8017f20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8017f24:	881b      	ldrh	r3, [r3, #0]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d104      	bne.n	8017f34 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8017f2a:	6839      	ldr	r1, [r7, #0]
 8017f2c:	6878      	ldr	r0, [r7, #4]
 8017f2e:	f000 fb83 	bl	8018638 <USBD_CtlError>
                  break;
 8017f32:	e041      	b.n	8017fb8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	da0b      	bge.n	8017f54 <USBD_StdEPReq+0x23e>
 8017f3c:	7bbb      	ldrb	r3, [r7, #14]
 8017f3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017f42:	4613      	mov	r3, r2
 8017f44:	009b      	lsls	r3, r3, #2
 8017f46:	4413      	add	r3, r2
 8017f48:	009b      	lsls	r3, r3, #2
 8017f4a:	3310      	adds	r3, #16
 8017f4c:	687a      	ldr	r2, [r7, #4]
 8017f4e:	4413      	add	r3, r2
 8017f50:	3304      	adds	r3, #4
 8017f52:	e00b      	b.n	8017f6c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017f54:	7bbb      	ldrb	r3, [r7, #14]
 8017f56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017f5a:	4613      	mov	r3, r2
 8017f5c:	009b      	lsls	r3, r3, #2
 8017f5e:	4413      	add	r3, r2
 8017f60:	009b      	lsls	r3, r3, #2
 8017f62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8017f66:	687a      	ldr	r2, [r7, #4]
 8017f68:	4413      	add	r3, r2
 8017f6a:	3304      	adds	r3, #4
 8017f6c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017f6e:	7bbb      	ldrb	r3, [r7, #14]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d002      	beq.n	8017f7a <USBD_StdEPReq+0x264>
 8017f74:	7bbb      	ldrb	r3, [r7, #14]
 8017f76:	2b80      	cmp	r3, #128	; 0x80
 8017f78:	d103      	bne.n	8017f82 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8017f7a:	68bb      	ldr	r3, [r7, #8]
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	601a      	str	r2, [r3, #0]
 8017f80:	e00e      	b.n	8017fa0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8017f82:	7bbb      	ldrb	r3, [r7, #14]
 8017f84:	4619      	mov	r1, r3
 8017f86:	6878      	ldr	r0, [r7, #4]
 8017f88:	f005 f988 	bl	801d29c <USBD_LL_IsStallEP>
 8017f8c:	4603      	mov	r3, r0
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d003      	beq.n	8017f9a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8017f92:	68bb      	ldr	r3, [r7, #8]
 8017f94:	2201      	movs	r2, #1
 8017f96:	601a      	str	r2, [r3, #0]
 8017f98:	e002      	b.n	8017fa0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8017f9a:	68bb      	ldr	r3, [r7, #8]
 8017f9c:	2200      	movs	r2, #0
 8017f9e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017fa0:	68bb      	ldr	r3, [r7, #8]
 8017fa2:	2202      	movs	r2, #2
 8017fa4:	4619      	mov	r1, r3
 8017fa6:	6878      	ldr	r0, [r7, #4]
 8017fa8:	f000 fbb7 	bl	801871a <USBD_CtlSendData>
              break;
 8017fac:	e004      	b.n	8017fb8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8017fae:	6839      	ldr	r1, [r7, #0]
 8017fb0:	6878      	ldr	r0, [r7, #4]
 8017fb2:	f000 fb41 	bl	8018638 <USBD_CtlError>
              break;
 8017fb6:	bf00      	nop
          }
          break;
 8017fb8:	e004      	b.n	8017fc4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8017fba:	6839      	ldr	r1, [r7, #0]
 8017fbc:	6878      	ldr	r0, [r7, #4]
 8017fbe:	f000 fb3b 	bl	8018638 <USBD_CtlError>
          break;
 8017fc2:	bf00      	nop
      }
      break;
 8017fc4:	e004      	b.n	8017fd0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8017fc6:	6839      	ldr	r1, [r7, #0]
 8017fc8:	6878      	ldr	r0, [r7, #4]
 8017fca:	f000 fb35 	bl	8018638 <USBD_CtlError>
      break;
 8017fce:	bf00      	nop
  }

  return ret;
 8017fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	3710      	adds	r7, #16
 8017fd6:	46bd      	mov	sp, r7
 8017fd8:	bd80      	pop	{r7, pc}
	...

08017fdc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017fdc:	b580      	push	{r7, lr}
 8017fde:	b084      	sub	sp, #16
 8017fe0:	af00      	add	r7, sp, #0
 8017fe2:	6078      	str	r0, [r7, #4]
 8017fe4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017fe6:	2300      	movs	r3, #0
 8017fe8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8017fea:	2300      	movs	r3, #0
 8017fec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017fee:	2300      	movs	r3, #0
 8017ff0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8017ff2:	683b      	ldr	r3, [r7, #0]
 8017ff4:	885b      	ldrh	r3, [r3, #2]
 8017ff6:	0a1b      	lsrs	r3, r3, #8
 8017ff8:	b29b      	uxth	r3, r3
 8017ffa:	3b01      	subs	r3, #1
 8017ffc:	2b06      	cmp	r3, #6
 8017ffe:	f200 8128 	bhi.w	8018252 <USBD_GetDescriptor+0x276>
 8018002:	a201      	add	r2, pc, #4	; (adr r2, 8018008 <USBD_GetDescriptor+0x2c>)
 8018004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018008:	08018025 	.word	0x08018025
 801800c:	0801803d 	.word	0x0801803d
 8018010:	0801807d 	.word	0x0801807d
 8018014:	08018253 	.word	0x08018253
 8018018:	08018253 	.word	0x08018253
 801801c:	080181f3 	.word	0x080181f3
 8018020:	0801821f 	.word	0x0801821f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	687a      	ldr	r2, [r7, #4]
 801802e:	7c12      	ldrb	r2, [r2, #16]
 8018030:	f107 0108 	add.w	r1, r7, #8
 8018034:	4610      	mov	r0, r2
 8018036:	4798      	blx	r3
 8018038:	60f8      	str	r0, [r7, #12]
      break;
 801803a:	e112      	b.n	8018262 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	7c1b      	ldrb	r3, [r3, #16]
 8018040:	2b00      	cmp	r3, #0
 8018042:	d10d      	bne.n	8018060 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801804a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801804c:	f107 0208 	add.w	r2, r7, #8
 8018050:	4610      	mov	r0, r2
 8018052:	4798      	blx	r3
 8018054:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	3301      	adds	r3, #1
 801805a:	2202      	movs	r2, #2
 801805c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801805e:	e100      	b.n	8018262 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018068:	f107 0208 	add.w	r2, r7, #8
 801806c:	4610      	mov	r0, r2
 801806e:	4798      	blx	r3
 8018070:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8018072:	68fb      	ldr	r3, [r7, #12]
 8018074:	3301      	adds	r3, #1
 8018076:	2202      	movs	r2, #2
 8018078:	701a      	strb	r2, [r3, #0]
      break;
 801807a:	e0f2      	b.n	8018262 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801807c:	683b      	ldr	r3, [r7, #0]
 801807e:	885b      	ldrh	r3, [r3, #2]
 8018080:	b2db      	uxtb	r3, r3
 8018082:	2b05      	cmp	r3, #5
 8018084:	f200 80ac 	bhi.w	80181e0 <USBD_GetDescriptor+0x204>
 8018088:	a201      	add	r2, pc, #4	; (adr r2, 8018090 <USBD_GetDescriptor+0xb4>)
 801808a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801808e:	bf00      	nop
 8018090:	080180a9 	.word	0x080180a9
 8018094:	080180dd 	.word	0x080180dd
 8018098:	08018111 	.word	0x08018111
 801809c:	08018145 	.word	0x08018145
 80180a0:	08018179 	.word	0x08018179
 80180a4:	080181ad 	.word	0x080181ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80180ae:	685b      	ldr	r3, [r3, #4]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d00b      	beq.n	80180cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80180ba:	685b      	ldr	r3, [r3, #4]
 80180bc:	687a      	ldr	r2, [r7, #4]
 80180be:	7c12      	ldrb	r2, [r2, #16]
 80180c0:	f107 0108 	add.w	r1, r7, #8
 80180c4:	4610      	mov	r0, r2
 80180c6:	4798      	blx	r3
 80180c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80180ca:	e091      	b.n	80181f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80180cc:	6839      	ldr	r1, [r7, #0]
 80180ce:	6878      	ldr	r0, [r7, #4]
 80180d0:	f000 fab2 	bl	8018638 <USBD_CtlError>
            err++;
 80180d4:	7afb      	ldrb	r3, [r7, #11]
 80180d6:	3301      	adds	r3, #1
 80180d8:	72fb      	strb	r3, [r7, #11]
          break;
 80180da:	e089      	b.n	80181f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80180e2:	689b      	ldr	r3, [r3, #8]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d00b      	beq.n	8018100 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80180ee:	689b      	ldr	r3, [r3, #8]
 80180f0:	687a      	ldr	r2, [r7, #4]
 80180f2:	7c12      	ldrb	r2, [r2, #16]
 80180f4:	f107 0108 	add.w	r1, r7, #8
 80180f8:	4610      	mov	r0, r2
 80180fa:	4798      	blx	r3
 80180fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80180fe:	e077      	b.n	80181f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018100:	6839      	ldr	r1, [r7, #0]
 8018102:	6878      	ldr	r0, [r7, #4]
 8018104:	f000 fa98 	bl	8018638 <USBD_CtlError>
            err++;
 8018108:	7afb      	ldrb	r3, [r7, #11]
 801810a:	3301      	adds	r3, #1
 801810c:	72fb      	strb	r3, [r7, #11]
          break;
 801810e:	e06f      	b.n	80181f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018116:	68db      	ldr	r3, [r3, #12]
 8018118:	2b00      	cmp	r3, #0
 801811a:	d00b      	beq.n	8018134 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018122:	68db      	ldr	r3, [r3, #12]
 8018124:	687a      	ldr	r2, [r7, #4]
 8018126:	7c12      	ldrb	r2, [r2, #16]
 8018128:	f107 0108 	add.w	r1, r7, #8
 801812c:	4610      	mov	r0, r2
 801812e:	4798      	blx	r3
 8018130:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018132:	e05d      	b.n	80181f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018134:	6839      	ldr	r1, [r7, #0]
 8018136:	6878      	ldr	r0, [r7, #4]
 8018138:	f000 fa7e 	bl	8018638 <USBD_CtlError>
            err++;
 801813c:	7afb      	ldrb	r3, [r7, #11]
 801813e:	3301      	adds	r3, #1
 8018140:	72fb      	strb	r3, [r7, #11]
          break;
 8018142:	e055      	b.n	80181f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801814a:	691b      	ldr	r3, [r3, #16]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d00b      	beq.n	8018168 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018156:	691b      	ldr	r3, [r3, #16]
 8018158:	687a      	ldr	r2, [r7, #4]
 801815a:	7c12      	ldrb	r2, [r2, #16]
 801815c:	f107 0108 	add.w	r1, r7, #8
 8018160:	4610      	mov	r0, r2
 8018162:	4798      	blx	r3
 8018164:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018166:	e043      	b.n	80181f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8018168:	6839      	ldr	r1, [r7, #0]
 801816a:	6878      	ldr	r0, [r7, #4]
 801816c:	f000 fa64 	bl	8018638 <USBD_CtlError>
            err++;
 8018170:	7afb      	ldrb	r3, [r7, #11]
 8018172:	3301      	adds	r3, #1
 8018174:	72fb      	strb	r3, [r7, #11]
          break;
 8018176:	e03b      	b.n	80181f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801817e:	695b      	ldr	r3, [r3, #20]
 8018180:	2b00      	cmp	r3, #0
 8018182:	d00b      	beq.n	801819c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801818a:	695b      	ldr	r3, [r3, #20]
 801818c:	687a      	ldr	r2, [r7, #4]
 801818e:	7c12      	ldrb	r2, [r2, #16]
 8018190:	f107 0108 	add.w	r1, r7, #8
 8018194:	4610      	mov	r0, r2
 8018196:	4798      	blx	r3
 8018198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801819a:	e029      	b.n	80181f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801819c:	6839      	ldr	r1, [r7, #0]
 801819e:	6878      	ldr	r0, [r7, #4]
 80181a0:	f000 fa4a 	bl	8018638 <USBD_CtlError>
            err++;
 80181a4:	7afb      	ldrb	r3, [r7, #11]
 80181a6:	3301      	adds	r3, #1
 80181a8:	72fb      	strb	r3, [r7, #11]
          break;
 80181aa:	e021      	b.n	80181f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80181b2:	699b      	ldr	r3, [r3, #24]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d00b      	beq.n	80181d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80181be:	699b      	ldr	r3, [r3, #24]
 80181c0:	687a      	ldr	r2, [r7, #4]
 80181c2:	7c12      	ldrb	r2, [r2, #16]
 80181c4:	f107 0108 	add.w	r1, r7, #8
 80181c8:	4610      	mov	r0, r2
 80181ca:	4798      	blx	r3
 80181cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80181ce:	e00f      	b.n	80181f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80181d0:	6839      	ldr	r1, [r7, #0]
 80181d2:	6878      	ldr	r0, [r7, #4]
 80181d4:	f000 fa30 	bl	8018638 <USBD_CtlError>
            err++;
 80181d8:	7afb      	ldrb	r3, [r7, #11]
 80181da:	3301      	adds	r3, #1
 80181dc:	72fb      	strb	r3, [r7, #11]
          break;
 80181de:	e007      	b.n	80181f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80181e0:	6839      	ldr	r1, [r7, #0]
 80181e2:	6878      	ldr	r0, [r7, #4]
 80181e4:	f000 fa28 	bl	8018638 <USBD_CtlError>
          err++;
 80181e8:	7afb      	ldrb	r3, [r7, #11]
 80181ea:	3301      	adds	r3, #1
 80181ec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80181ee:	bf00      	nop
      }
      break;
 80181f0:	e037      	b.n	8018262 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	7c1b      	ldrb	r3, [r3, #16]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d109      	bne.n	801820e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018202:	f107 0208 	add.w	r2, r7, #8
 8018206:	4610      	mov	r0, r2
 8018208:	4798      	blx	r3
 801820a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801820c:	e029      	b.n	8018262 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801820e:	6839      	ldr	r1, [r7, #0]
 8018210:	6878      	ldr	r0, [r7, #4]
 8018212:	f000 fa11 	bl	8018638 <USBD_CtlError>
        err++;
 8018216:	7afb      	ldrb	r3, [r7, #11]
 8018218:	3301      	adds	r3, #1
 801821a:	72fb      	strb	r3, [r7, #11]
      break;
 801821c:	e021      	b.n	8018262 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	7c1b      	ldrb	r3, [r3, #16]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d10d      	bne.n	8018242 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801822c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801822e:	f107 0208 	add.w	r2, r7, #8
 8018232:	4610      	mov	r0, r2
 8018234:	4798      	blx	r3
 8018236:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	3301      	adds	r3, #1
 801823c:	2207      	movs	r2, #7
 801823e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018240:	e00f      	b.n	8018262 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8018242:	6839      	ldr	r1, [r7, #0]
 8018244:	6878      	ldr	r0, [r7, #4]
 8018246:	f000 f9f7 	bl	8018638 <USBD_CtlError>
        err++;
 801824a:	7afb      	ldrb	r3, [r7, #11]
 801824c:	3301      	adds	r3, #1
 801824e:	72fb      	strb	r3, [r7, #11]
      break;
 8018250:	e007      	b.n	8018262 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8018252:	6839      	ldr	r1, [r7, #0]
 8018254:	6878      	ldr	r0, [r7, #4]
 8018256:	f000 f9ef 	bl	8018638 <USBD_CtlError>
      err++;
 801825a:	7afb      	ldrb	r3, [r7, #11]
 801825c:	3301      	adds	r3, #1
 801825e:	72fb      	strb	r3, [r7, #11]
      break;
 8018260:	bf00      	nop
  }

  if (err != 0U)
 8018262:	7afb      	ldrb	r3, [r7, #11]
 8018264:	2b00      	cmp	r3, #0
 8018266:	d11e      	bne.n	80182a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8018268:	683b      	ldr	r3, [r7, #0]
 801826a:	88db      	ldrh	r3, [r3, #6]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d016      	beq.n	801829e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8018270:	893b      	ldrh	r3, [r7, #8]
 8018272:	2b00      	cmp	r3, #0
 8018274:	d00e      	beq.n	8018294 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8018276:	683b      	ldr	r3, [r7, #0]
 8018278:	88da      	ldrh	r2, [r3, #6]
 801827a:	893b      	ldrh	r3, [r7, #8]
 801827c:	4293      	cmp	r3, r2
 801827e:	bf28      	it	cs
 8018280:	4613      	movcs	r3, r2
 8018282:	b29b      	uxth	r3, r3
 8018284:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8018286:	893b      	ldrh	r3, [r7, #8]
 8018288:	461a      	mov	r2, r3
 801828a:	68f9      	ldr	r1, [r7, #12]
 801828c:	6878      	ldr	r0, [r7, #4]
 801828e:	f000 fa44 	bl	801871a <USBD_CtlSendData>
 8018292:	e009      	b.n	80182a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8018294:	6839      	ldr	r1, [r7, #0]
 8018296:	6878      	ldr	r0, [r7, #4]
 8018298:	f000 f9ce 	bl	8018638 <USBD_CtlError>
 801829c:	e004      	b.n	80182a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801829e:	6878      	ldr	r0, [r7, #4]
 80182a0:	f000 fa95 	bl	80187ce <USBD_CtlSendStatus>
 80182a4:	e000      	b.n	80182a8 <USBD_GetDescriptor+0x2cc>
    return;
 80182a6:	bf00      	nop
  }
}
 80182a8:	3710      	adds	r7, #16
 80182aa:	46bd      	mov	sp, r7
 80182ac:	bd80      	pop	{r7, pc}
 80182ae:	bf00      	nop

080182b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80182b0:	b580      	push	{r7, lr}
 80182b2:	b084      	sub	sp, #16
 80182b4:	af00      	add	r7, sp, #0
 80182b6:	6078      	str	r0, [r7, #4]
 80182b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80182ba:	683b      	ldr	r3, [r7, #0]
 80182bc:	889b      	ldrh	r3, [r3, #4]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d131      	bne.n	8018326 <USBD_SetAddress+0x76>
 80182c2:	683b      	ldr	r3, [r7, #0]
 80182c4:	88db      	ldrh	r3, [r3, #6]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d12d      	bne.n	8018326 <USBD_SetAddress+0x76>
 80182ca:	683b      	ldr	r3, [r7, #0]
 80182cc:	885b      	ldrh	r3, [r3, #2]
 80182ce:	2b7f      	cmp	r3, #127	; 0x7f
 80182d0:	d829      	bhi.n	8018326 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80182d2:	683b      	ldr	r3, [r7, #0]
 80182d4:	885b      	ldrh	r3, [r3, #2]
 80182d6:	b2db      	uxtb	r3, r3
 80182d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80182dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80182e4:	b2db      	uxtb	r3, r3
 80182e6:	2b03      	cmp	r3, #3
 80182e8:	d104      	bne.n	80182f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80182ea:	6839      	ldr	r1, [r7, #0]
 80182ec:	6878      	ldr	r0, [r7, #4]
 80182ee:	f000 f9a3 	bl	8018638 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80182f2:	e01d      	b.n	8018330 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	7bfa      	ldrb	r2, [r7, #15]
 80182f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80182fc:	7bfb      	ldrb	r3, [r7, #15]
 80182fe:	4619      	mov	r1, r3
 8018300:	6878      	ldr	r0, [r7, #4]
 8018302:	f004 fff7 	bl	801d2f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8018306:	6878      	ldr	r0, [r7, #4]
 8018308:	f000 fa61 	bl	80187ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801830c:	7bfb      	ldrb	r3, [r7, #15]
 801830e:	2b00      	cmp	r3, #0
 8018310:	d004      	beq.n	801831c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	2202      	movs	r2, #2
 8018316:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801831a:	e009      	b.n	8018330 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	2201      	movs	r2, #1
 8018320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018324:	e004      	b.n	8018330 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8018326:	6839      	ldr	r1, [r7, #0]
 8018328:	6878      	ldr	r0, [r7, #4]
 801832a:	f000 f985 	bl	8018638 <USBD_CtlError>
  }
}
 801832e:	bf00      	nop
 8018330:	bf00      	nop
 8018332:	3710      	adds	r7, #16
 8018334:	46bd      	mov	sp, r7
 8018336:	bd80      	pop	{r7, pc}

08018338 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018338:	b580      	push	{r7, lr}
 801833a:	b084      	sub	sp, #16
 801833c:	af00      	add	r7, sp, #0
 801833e:	6078      	str	r0, [r7, #4]
 8018340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018342:	2300      	movs	r3, #0
 8018344:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8018346:	683b      	ldr	r3, [r7, #0]
 8018348:	885b      	ldrh	r3, [r3, #2]
 801834a:	b2da      	uxtb	r2, r3
 801834c:	4b4c      	ldr	r3, [pc, #304]	; (8018480 <USBD_SetConfig+0x148>)
 801834e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8018350:	4b4b      	ldr	r3, [pc, #300]	; (8018480 <USBD_SetConfig+0x148>)
 8018352:	781b      	ldrb	r3, [r3, #0]
 8018354:	2b01      	cmp	r3, #1
 8018356:	d905      	bls.n	8018364 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8018358:	6839      	ldr	r1, [r7, #0]
 801835a:	6878      	ldr	r0, [r7, #4]
 801835c:	f000 f96c 	bl	8018638 <USBD_CtlError>
    return USBD_FAIL;
 8018360:	2303      	movs	r3, #3
 8018362:	e088      	b.n	8018476 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801836a:	b2db      	uxtb	r3, r3
 801836c:	2b02      	cmp	r3, #2
 801836e:	d002      	beq.n	8018376 <USBD_SetConfig+0x3e>
 8018370:	2b03      	cmp	r3, #3
 8018372:	d025      	beq.n	80183c0 <USBD_SetConfig+0x88>
 8018374:	e071      	b.n	801845a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8018376:	4b42      	ldr	r3, [pc, #264]	; (8018480 <USBD_SetConfig+0x148>)
 8018378:	781b      	ldrb	r3, [r3, #0]
 801837a:	2b00      	cmp	r3, #0
 801837c:	d01c      	beq.n	80183b8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801837e:	4b40      	ldr	r3, [pc, #256]	; (8018480 <USBD_SetConfig+0x148>)
 8018380:	781b      	ldrb	r3, [r3, #0]
 8018382:	461a      	mov	r2, r3
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018388:	4b3d      	ldr	r3, [pc, #244]	; (8018480 <USBD_SetConfig+0x148>)
 801838a:	781b      	ldrb	r3, [r3, #0]
 801838c:	4619      	mov	r1, r3
 801838e:	6878      	ldr	r0, [r7, #4]
 8018390:	f7ff f948 	bl	8017624 <USBD_SetClassConfig>
 8018394:	4603      	mov	r3, r0
 8018396:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8018398:	7bfb      	ldrb	r3, [r7, #15]
 801839a:	2b00      	cmp	r3, #0
 801839c:	d004      	beq.n	80183a8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801839e:	6839      	ldr	r1, [r7, #0]
 80183a0:	6878      	ldr	r0, [r7, #4]
 80183a2:	f000 f949 	bl	8018638 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80183a6:	e065      	b.n	8018474 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80183a8:	6878      	ldr	r0, [r7, #4]
 80183aa:	f000 fa10 	bl	80187ce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	2203      	movs	r2, #3
 80183b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80183b6:	e05d      	b.n	8018474 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80183b8:	6878      	ldr	r0, [r7, #4]
 80183ba:	f000 fa08 	bl	80187ce <USBD_CtlSendStatus>
      break;
 80183be:	e059      	b.n	8018474 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80183c0:	4b2f      	ldr	r3, [pc, #188]	; (8018480 <USBD_SetConfig+0x148>)
 80183c2:	781b      	ldrb	r3, [r3, #0]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d112      	bne.n	80183ee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	2202      	movs	r2, #2
 80183cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80183d0:	4b2b      	ldr	r3, [pc, #172]	; (8018480 <USBD_SetConfig+0x148>)
 80183d2:	781b      	ldrb	r3, [r3, #0]
 80183d4:	461a      	mov	r2, r3
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80183da:	4b29      	ldr	r3, [pc, #164]	; (8018480 <USBD_SetConfig+0x148>)
 80183dc:	781b      	ldrb	r3, [r3, #0]
 80183de:	4619      	mov	r1, r3
 80183e0:	6878      	ldr	r0, [r7, #4]
 80183e2:	f7ff f93b 	bl	801765c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80183e6:	6878      	ldr	r0, [r7, #4]
 80183e8:	f000 f9f1 	bl	80187ce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80183ec:	e042      	b.n	8018474 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80183ee:	4b24      	ldr	r3, [pc, #144]	; (8018480 <USBD_SetConfig+0x148>)
 80183f0:	781b      	ldrb	r3, [r3, #0]
 80183f2:	461a      	mov	r2, r3
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	685b      	ldr	r3, [r3, #4]
 80183f8:	429a      	cmp	r2, r3
 80183fa:	d02a      	beq.n	8018452 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	685b      	ldr	r3, [r3, #4]
 8018400:	b2db      	uxtb	r3, r3
 8018402:	4619      	mov	r1, r3
 8018404:	6878      	ldr	r0, [r7, #4]
 8018406:	f7ff f929 	bl	801765c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801840a:	4b1d      	ldr	r3, [pc, #116]	; (8018480 <USBD_SetConfig+0x148>)
 801840c:	781b      	ldrb	r3, [r3, #0]
 801840e:	461a      	mov	r2, r3
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018414:	4b1a      	ldr	r3, [pc, #104]	; (8018480 <USBD_SetConfig+0x148>)
 8018416:	781b      	ldrb	r3, [r3, #0]
 8018418:	4619      	mov	r1, r3
 801841a:	6878      	ldr	r0, [r7, #4]
 801841c:	f7ff f902 	bl	8017624 <USBD_SetClassConfig>
 8018420:	4603      	mov	r3, r0
 8018422:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8018424:	7bfb      	ldrb	r3, [r7, #15]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d00f      	beq.n	801844a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801842a:	6839      	ldr	r1, [r7, #0]
 801842c:	6878      	ldr	r0, [r7, #4]
 801842e:	f000 f903 	bl	8018638 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	685b      	ldr	r3, [r3, #4]
 8018436:	b2db      	uxtb	r3, r3
 8018438:	4619      	mov	r1, r3
 801843a:	6878      	ldr	r0, [r7, #4]
 801843c:	f7ff f90e 	bl	801765c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	2202      	movs	r2, #2
 8018444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8018448:	e014      	b.n	8018474 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801844a:	6878      	ldr	r0, [r7, #4]
 801844c:	f000 f9bf 	bl	80187ce <USBD_CtlSendStatus>
      break;
 8018450:	e010      	b.n	8018474 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8018452:	6878      	ldr	r0, [r7, #4]
 8018454:	f000 f9bb 	bl	80187ce <USBD_CtlSendStatus>
      break;
 8018458:	e00c      	b.n	8018474 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801845a:	6839      	ldr	r1, [r7, #0]
 801845c:	6878      	ldr	r0, [r7, #4]
 801845e:	f000 f8eb 	bl	8018638 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018462:	4b07      	ldr	r3, [pc, #28]	; (8018480 <USBD_SetConfig+0x148>)
 8018464:	781b      	ldrb	r3, [r3, #0]
 8018466:	4619      	mov	r1, r3
 8018468:	6878      	ldr	r0, [r7, #4]
 801846a:	f7ff f8f7 	bl	801765c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801846e:	2303      	movs	r3, #3
 8018470:	73fb      	strb	r3, [r7, #15]
      break;
 8018472:	bf00      	nop
  }

  return ret;
 8018474:	7bfb      	ldrb	r3, [r7, #15]
}
 8018476:	4618      	mov	r0, r3
 8018478:	3710      	adds	r7, #16
 801847a:	46bd      	mov	sp, r7
 801847c:	bd80      	pop	{r7, pc}
 801847e:	bf00      	nop
 8018480:	200005ca 	.word	0x200005ca

08018484 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018484:	b580      	push	{r7, lr}
 8018486:	b082      	sub	sp, #8
 8018488:	af00      	add	r7, sp, #0
 801848a:	6078      	str	r0, [r7, #4]
 801848c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801848e:	683b      	ldr	r3, [r7, #0]
 8018490:	88db      	ldrh	r3, [r3, #6]
 8018492:	2b01      	cmp	r3, #1
 8018494:	d004      	beq.n	80184a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8018496:	6839      	ldr	r1, [r7, #0]
 8018498:	6878      	ldr	r0, [r7, #4]
 801849a:	f000 f8cd 	bl	8018638 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801849e:	e023      	b.n	80184e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80184a6:	b2db      	uxtb	r3, r3
 80184a8:	2b02      	cmp	r3, #2
 80184aa:	dc02      	bgt.n	80184b2 <USBD_GetConfig+0x2e>
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	dc03      	bgt.n	80184b8 <USBD_GetConfig+0x34>
 80184b0:	e015      	b.n	80184de <USBD_GetConfig+0x5a>
 80184b2:	2b03      	cmp	r3, #3
 80184b4:	d00b      	beq.n	80184ce <USBD_GetConfig+0x4a>
 80184b6:	e012      	b.n	80184de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	2200      	movs	r2, #0
 80184bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	3308      	adds	r3, #8
 80184c2:	2201      	movs	r2, #1
 80184c4:	4619      	mov	r1, r3
 80184c6:	6878      	ldr	r0, [r7, #4]
 80184c8:	f000 f927 	bl	801871a <USBD_CtlSendData>
        break;
 80184cc:	e00c      	b.n	80184e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	3304      	adds	r3, #4
 80184d2:	2201      	movs	r2, #1
 80184d4:	4619      	mov	r1, r3
 80184d6:	6878      	ldr	r0, [r7, #4]
 80184d8:	f000 f91f 	bl	801871a <USBD_CtlSendData>
        break;
 80184dc:	e004      	b.n	80184e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80184de:	6839      	ldr	r1, [r7, #0]
 80184e0:	6878      	ldr	r0, [r7, #4]
 80184e2:	f000 f8a9 	bl	8018638 <USBD_CtlError>
        break;
 80184e6:	bf00      	nop
}
 80184e8:	bf00      	nop
 80184ea:	3708      	adds	r7, #8
 80184ec:	46bd      	mov	sp, r7
 80184ee:	bd80      	pop	{r7, pc}

080184f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80184f0:	b580      	push	{r7, lr}
 80184f2:	b082      	sub	sp, #8
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	6078      	str	r0, [r7, #4]
 80184f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018500:	b2db      	uxtb	r3, r3
 8018502:	3b01      	subs	r3, #1
 8018504:	2b02      	cmp	r3, #2
 8018506:	d81e      	bhi.n	8018546 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8018508:	683b      	ldr	r3, [r7, #0]
 801850a:	88db      	ldrh	r3, [r3, #6]
 801850c:	2b02      	cmp	r3, #2
 801850e:	d004      	beq.n	801851a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8018510:	6839      	ldr	r1, [r7, #0]
 8018512:	6878      	ldr	r0, [r7, #4]
 8018514:	f000 f890 	bl	8018638 <USBD_CtlError>
        break;
 8018518:	e01a      	b.n	8018550 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	2201      	movs	r2, #1
 801851e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8018526:	2b00      	cmp	r3, #0
 8018528:	d005      	beq.n	8018536 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	68db      	ldr	r3, [r3, #12]
 801852e:	f043 0202 	orr.w	r2, r3, #2
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	330c      	adds	r3, #12
 801853a:	2202      	movs	r2, #2
 801853c:	4619      	mov	r1, r3
 801853e:	6878      	ldr	r0, [r7, #4]
 8018540:	f000 f8eb 	bl	801871a <USBD_CtlSendData>
      break;
 8018544:	e004      	b.n	8018550 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8018546:	6839      	ldr	r1, [r7, #0]
 8018548:	6878      	ldr	r0, [r7, #4]
 801854a:	f000 f875 	bl	8018638 <USBD_CtlError>
      break;
 801854e:	bf00      	nop
  }
}
 8018550:	bf00      	nop
 8018552:	3708      	adds	r7, #8
 8018554:	46bd      	mov	sp, r7
 8018556:	bd80      	pop	{r7, pc}

08018558 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018558:	b580      	push	{r7, lr}
 801855a:	b082      	sub	sp, #8
 801855c:	af00      	add	r7, sp, #0
 801855e:	6078      	str	r0, [r7, #4]
 8018560:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018562:	683b      	ldr	r3, [r7, #0]
 8018564:	885b      	ldrh	r3, [r3, #2]
 8018566:	2b01      	cmp	r3, #1
 8018568:	d106      	bne.n	8018578 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	2201      	movs	r2, #1
 801856e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8018572:	6878      	ldr	r0, [r7, #4]
 8018574:	f000 f92b 	bl	80187ce <USBD_CtlSendStatus>
  }
}
 8018578:	bf00      	nop
 801857a:	3708      	adds	r7, #8
 801857c:	46bd      	mov	sp, r7
 801857e:	bd80      	pop	{r7, pc}

08018580 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018580:	b580      	push	{r7, lr}
 8018582:	b082      	sub	sp, #8
 8018584:	af00      	add	r7, sp, #0
 8018586:	6078      	str	r0, [r7, #4]
 8018588:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018590:	b2db      	uxtb	r3, r3
 8018592:	3b01      	subs	r3, #1
 8018594:	2b02      	cmp	r3, #2
 8018596:	d80b      	bhi.n	80185b0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018598:	683b      	ldr	r3, [r7, #0]
 801859a:	885b      	ldrh	r3, [r3, #2]
 801859c:	2b01      	cmp	r3, #1
 801859e:	d10c      	bne.n	80185ba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	2200      	movs	r2, #0
 80185a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80185a8:	6878      	ldr	r0, [r7, #4]
 80185aa:	f000 f910 	bl	80187ce <USBD_CtlSendStatus>
      }
      break;
 80185ae:	e004      	b.n	80185ba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80185b0:	6839      	ldr	r1, [r7, #0]
 80185b2:	6878      	ldr	r0, [r7, #4]
 80185b4:	f000 f840 	bl	8018638 <USBD_CtlError>
      break;
 80185b8:	e000      	b.n	80185bc <USBD_ClrFeature+0x3c>
      break;
 80185ba:	bf00      	nop
  }
}
 80185bc:	bf00      	nop
 80185be:	3708      	adds	r7, #8
 80185c0:	46bd      	mov	sp, r7
 80185c2:	bd80      	pop	{r7, pc}

080185c4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80185c4:	b580      	push	{r7, lr}
 80185c6:	b084      	sub	sp, #16
 80185c8:	af00      	add	r7, sp, #0
 80185ca:	6078      	str	r0, [r7, #4]
 80185cc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80185ce:	683b      	ldr	r3, [r7, #0]
 80185d0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80185d2:	68fb      	ldr	r3, [r7, #12]
 80185d4:	781a      	ldrb	r2, [r3, #0]
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	3301      	adds	r3, #1
 80185de:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	781a      	ldrb	r2, [r3, #0]
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	3301      	adds	r3, #1
 80185ec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80185ee:	68f8      	ldr	r0, [r7, #12]
 80185f0:	f7ff fabb 	bl	8017b6a <SWAPBYTE>
 80185f4:	4603      	mov	r3, r0
 80185f6:	461a      	mov	r2, r3
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	3301      	adds	r3, #1
 8018600:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	3301      	adds	r3, #1
 8018606:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8018608:	68f8      	ldr	r0, [r7, #12]
 801860a:	f7ff faae 	bl	8017b6a <SWAPBYTE>
 801860e:	4603      	mov	r3, r0
 8018610:	461a      	mov	r2, r3
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8018616:	68fb      	ldr	r3, [r7, #12]
 8018618:	3301      	adds	r3, #1
 801861a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	3301      	adds	r3, #1
 8018620:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8018622:	68f8      	ldr	r0, [r7, #12]
 8018624:	f7ff faa1 	bl	8017b6a <SWAPBYTE>
 8018628:	4603      	mov	r3, r0
 801862a:	461a      	mov	r2, r3
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	80da      	strh	r2, [r3, #6]
}
 8018630:	bf00      	nop
 8018632:	3710      	adds	r7, #16
 8018634:	46bd      	mov	sp, r7
 8018636:	bd80      	pop	{r7, pc}

08018638 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018638:	b580      	push	{r7, lr}
 801863a:	b082      	sub	sp, #8
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
 8018640:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8018642:	2180      	movs	r1, #128	; 0x80
 8018644:	6878      	ldr	r0, [r7, #4]
 8018646:	f004 fdeb 	bl	801d220 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801864a:	2100      	movs	r1, #0
 801864c:	6878      	ldr	r0, [r7, #4]
 801864e:	f004 fde7 	bl	801d220 <USBD_LL_StallEP>
}
 8018652:	bf00      	nop
 8018654:	3708      	adds	r7, #8
 8018656:	46bd      	mov	sp, r7
 8018658:	bd80      	pop	{r7, pc}

0801865a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801865a:	b580      	push	{r7, lr}
 801865c:	b086      	sub	sp, #24
 801865e:	af00      	add	r7, sp, #0
 8018660:	60f8      	str	r0, [r7, #12]
 8018662:	60b9      	str	r1, [r7, #8]
 8018664:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8018666:	2300      	movs	r3, #0
 8018668:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	2b00      	cmp	r3, #0
 801866e:	d036      	beq.n	80186de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8018674:	6938      	ldr	r0, [r7, #16]
 8018676:	f000 f836 	bl	80186e6 <USBD_GetLen>
 801867a:	4603      	mov	r3, r0
 801867c:	3301      	adds	r3, #1
 801867e:	b29b      	uxth	r3, r3
 8018680:	005b      	lsls	r3, r3, #1
 8018682:	b29a      	uxth	r2, r3
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8018688:	7dfb      	ldrb	r3, [r7, #23]
 801868a:	68ba      	ldr	r2, [r7, #8]
 801868c:	4413      	add	r3, r2
 801868e:	687a      	ldr	r2, [r7, #4]
 8018690:	7812      	ldrb	r2, [r2, #0]
 8018692:	701a      	strb	r2, [r3, #0]
  idx++;
 8018694:	7dfb      	ldrb	r3, [r7, #23]
 8018696:	3301      	adds	r3, #1
 8018698:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801869a:	7dfb      	ldrb	r3, [r7, #23]
 801869c:	68ba      	ldr	r2, [r7, #8]
 801869e:	4413      	add	r3, r2
 80186a0:	2203      	movs	r2, #3
 80186a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80186a4:	7dfb      	ldrb	r3, [r7, #23]
 80186a6:	3301      	adds	r3, #1
 80186a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80186aa:	e013      	b.n	80186d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80186ac:	7dfb      	ldrb	r3, [r7, #23]
 80186ae:	68ba      	ldr	r2, [r7, #8]
 80186b0:	4413      	add	r3, r2
 80186b2:	693a      	ldr	r2, [r7, #16]
 80186b4:	7812      	ldrb	r2, [r2, #0]
 80186b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80186b8:	693b      	ldr	r3, [r7, #16]
 80186ba:	3301      	adds	r3, #1
 80186bc:	613b      	str	r3, [r7, #16]
    idx++;
 80186be:	7dfb      	ldrb	r3, [r7, #23]
 80186c0:	3301      	adds	r3, #1
 80186c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80186c4:	7dfb      	ldrb	r3, [r7, #23]
 80186c6:	68ba      	ldr	r2, [r7, #8]
 80186c8:	4413      	add	r3, r2
 80186ca:	2200      	movs	r2, #0
 80186cc:	701a      	strb	r2, [r3, #0]
    idx++;
 80186ce:	7dfb      	ldrb	r3, [r7, #23]
 80186d0:	3301      	adds	r3, #1
 80186d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80186d4:	693b      	ldr	r3, [r7, #16]
 80186d6:	781b      	ldrb	r3, [r3, #0]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d1e7      	bne.n	80186ac <USBD_GetString+0x52>
 80186dc:	e000      	b.n	80186e0 <USBD_GetString+0x86>
    return;
 80186de:	bf00      	nop
  }
}
 80186e0:	3718      	adds	r7, #24
 80186e2:	46bd      	mov	sp, r7
 80186e4:	bd80      	pop	{r7, pc}

080186e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80186e6:	b480      	push	{r7}
 80186e8:	b085      	sub	sp, #20
 80186ea:	af00      	add	r7, sp, #0
 80186ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80186ee:	2300      	movs	r3, #0
 80186f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80186f6:	e005      	b.n	8018704 <USBD_GetLen+0x1e>
  {
    len++;
 80186f8:	7bfb      	ldrb	r3, [r7, #15]
 80186fa:	3301      	adds	r3, #1
 80186fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80186fe:	68bb      	ldr	r3, [r7, #8]
 8018700:	3301      	adds	r3, #1
 8018702:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8018704:	68bb      	ldr	r3, [r7, #8]
 8018706:	781b      	ldrb	r3, [r3, #0]
 8018708:	2b00      	cmp	r3, #0
 801870a:	d1f5      	bne.n	80186f8 <USBD_GetLen+0x12>
  }

  return len;
 801870c:	7bfb      	ldrb	r3, [r7, #15]
}
 801870e:	4618      	mov	r0, r3
 8018710:	3714      	adds	r7, #20
 8018712:	46bd      	mov	sp, r7
 8018714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018718:	4770      	bx	lr

0801871a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801871a:	b580      	push	{r7, lr}
 801871c:	b084      	sub	sp, #16
 801871e:	af00      	add	r7, sp, #0
 8018720:	60f8      	str	r0, [r7, #12]
 8018722:	60b9      	str	r1, [r7, #8]
 8018724:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	2202      	movs	r2, #2
 801872a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	687a      	ldr	r2, [r7, #4]
 8018732:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	687a      	ldr	r2, [r7, #4]
 8018738:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	68ba      	ldr	r2, [r7, #8]
 801873e:	2100      	movs	r1, #0
 8018740:	68f8      	ldr	r0, [r7, #12]
 8018742:	f004 fdf6 	bl	801d332 <USBD_LL_Transmit>

  return USBD_OK;
 8018746:	2300      	movs	r3, #0
}
 8018748:	4618      	mov	r0, r3
 801874a:	3710      	adds	r7, #16
 801874c:	46bd      	mov	sp, r7
 801874e:	bd80      	pop	{r7, pc}

08018750 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8018750:	b580      	push	{r7, lr}
 8018752:	b084      	sub	sp, #16
 8018754:	af00      	add	r7, sp, #0
 8018756:	60f8      	str	r0, [r7, #12]
 8018758:	60b9      	str	r1, [r7, #8]
 801875a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	68ba      	ldr	r2, [r7, #8]
 8018760:	2100      	movs	r1, #0
 8018762:	68f8      	ldr	r0, [r7, #12]
 8018764:	f004 fde5 	bl	801d332 <USBD_LL_Transmit>

  return USBD_OK;
 8018768:	2300      	movs	r3, #0
}
 801876a:	4618      	mov	r0, r3
 801876c:	3710      	adds	r7, #16
 801876e:	46bd      	mov	sp, r7
 8018770:	bd80      	pop	{r7, pc}

08018772 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8018772:	b580      	push	{r7, lr}
 8018774:	b084      	sub	sp, #16
 8018776:	af00      	add	r7, sp, #0
 8018778:	60f8      	str	r0, [r7, #12]
 801877a:	60b9      	str	r1, [r7, #8]
 801877c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	2203      	movs	r2, #3
 8018782:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	687a      	ldr	r2, [r7, #4]
 801878a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	687a      	ldr	r2, [r7, #4]
 8018792:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	68ba      	ldr	r2, [r7, #8]
 801879a:	2100      	movs	r1, #0
 801879c:	68f8      	ldr	r0, [r7, #12]
 801879e:	f004 fde9 	bl	801d374 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80187a2:	2300      	movs	r3, #0
}
 80187a4:	4618      	mov	r0, r3
 80187a6:	3710      	adds	r7, #16
 80187a8:	46bd      	mov	sp, r7
 80187aa:	bd80      	pop	{r7, pc}

080187ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80187ac:	b580      	push	{r7, lr}
 80187ae:	b084      	sub	sp, #16
 80187b0:	af00      	add	r7, sp, #0
 80187b2:	60f8      	str	r0, [r7, #12]
 80187b4:	60b9      	str	r1, [r7, #8]
 80187b6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	68ba      	ldr	r2, [r7, #8]
 80187bc:	2100      	movs	r1, #0
 80187be:	68f8      	ldr	r0, [r7, #12]
 80187c0:	f004 fdd8 	bl	801d374 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80187c4:	2300      	movs	r3, #0
}
 80187c6:	4618      	mov	r0, r3
 80187c8:	3710      	adds	r7, #16
 80187ca:	46bd      	mov	sp, r7
 80187cc:	bd80      	pop	{r7, pc}

080187ce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80187ce:	b580      	push	{r7, lr}
 80187d0:	b082      	sub	sp, #8
 80187d2:	af00      	add	r7, sp, #0
 80187d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	2204      	movs	r2, #4
 80187da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80187de:	2300      	movs	r3, #0
 80187e0:	2200      	movs	r2, #0
 80187e2:	2100      	movs	r1, #0
 80187e4:	6878      	ldr	r0, [r7, #4]
 80187e6:	f004 fda4 	bl	801d332 <USBD_LL_Transmit>

  return USBD_OK;
 80187ea:	2300      	movs	r3, #0
}
 80187ec:	4618      	mov	r0, r3
 80187ee:	3708      	adds	r7, #8
 80187f0:	46bd      	mov	sp, r7
 80187f2:	bd80      	pop	{r7, pc}

080187f4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b082      	sub	sp, #8
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	2205      	movs	r2, #5
 8018800:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018804:	2300      	movs	r3, #0
 8018806:	2200      	movs	r2, #0
 8018808:	2100      	movs	r1, #0
 801880a:	6878      	ldr	r0, [r7, #4]
 801880c:	f004 fdb2 	bl	801d374 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018810:	2300      	movs	r3, #0
}
 8018812:	4618      	mov	r0, r3
 8018814:	3708      	adds	r7, #8
 8018816:	46bd      	mov	sp, r7
 8018818:	bd80      	pop	{r7, pc}
	...

0801881c <__NVIC_SetPriority>:
{
 801881c:	b480      	push	{r7}
 801881e:	b083      	sub	sp, #12
 8018820:	af00      	add	r7, sp, #0
 8018822:	4603      	mov	r3, r0
 8018824:	6039      	str	r1, [r7, #0]
 8018826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801882c:	2b00      	cmp	r3, #0
 801882e:	db0a      	blt.n	8018846 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018830:	683b      	ldr	r3, [r7, #0]
 8018832:	b2da      	uxtb	r2, r3
 8018834:	490c      	ldr	r1, [pc, #48]	; (8018868 <__NVIC_SetPriority+0x4c>)
 8018836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801883a:	0112      	lsls	r2, r2, #4
 801883c:	b2d2      	uxtb	r2, r2
 801883e:	440b      	add	r3, r1
 8018840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8018844:	e00a      	b.n	801885c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018846:	683b      	ldr	r3, [r7, #0]
 8018848:	b2da      	uxtb	r2, r3
 801884a:	4908      	ldr	r1, [pc, #32]	; (801886c <__NVIC_SetPriority+0x50>)
 801884c:	79fb      	ldrb	r3, [r7, #7]
 801884e:	f003 030f 	and.w	r3, r3, #15
 8018852:	3b04      	subs	r3, #4
 8018854:	0112      	lsls	r2, r2, #4
 8018856:	b2d2      	uxtb	r2, r2
 8018858:	440b      	add	r3, r1
 801885a:	761a      	strb	r2, [r3, #24]
}
 801885c:	bf00      	nop
 801885e:	370c      	adds	r7, #12
 8018860:	46bd      	mov	sp, r7
 8018862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018866:	4770      	bx	lr
 8018868:	e000e100 	.word	0xe000e100
 801886c:	e000ed00 	.word	0xe000ed00

08018870 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8018870:	b580      	push	{r7, lr}
 8018872:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8018874:	4b05      	ldr	r3, [pc, #20]	; (801888c <SysTick_Handler+0x1c>)
 8018876:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8018878:	f002 fe40 	bl	801b4fc <xTaskGetSchedulerState>
 801887c:	4603      	mov	r3, r0
 801887e:	2b01      	cmp	r3, #1
 8018880:	d001      	beq.n	8018886 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8018882:	f003 fd61 	bl	801c348 <xPortSysTickHandler>
  }
}
 8018886:	bf00      	nop
 8018888:	bd80      	pop	{r7, pc}
 801888a:	bf00      	nop
 801888c:	e000e010 	.word	0xe000e010

08018890 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8018890:	b580      	push	{r7, lr}
 8018892:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8018894:	2100      	movs	r1, #0
 8018896:	f06f 0004 	mvn.w	r0, #4
 801889a:	f7ff ffbf 	bl	801881c <__NVIC_SetPriority>
#endif
}
 801889e:	bf00      	nop
 80188a0:	bd80      	pop	{r7, pc}
	...

080188a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80188a4:	b480      	push	{r7}
 80188a6:	b083      	sub	sp, #12
 80188a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80188aa:	f3ef 8305 	mrs	r3, IPSR
 80188ae:	603b      	str	r3, [r7, #0]
  return(result);
 80188b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d003      	beq.n	80188be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80188b6:	f06f 0305 	mvn.w	r3, #5
 80188ba:	607b      	str	r3, [r7, #4]
 80188bc:	e00c      	b.n	80188d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80188be:	4b0a      	ldr	r3, [pc, #40]	; (80188e8 <osKernelInitialize+0x44>)
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d105      	bne.n	80188d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80188c6:	4b08      	ldr	r3, [pc, #32]	; (80188e8 <osKernelInitialize+0x44>)
 80188c8:	2201      	movs	r2, #1
 80188ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80188cc:	2300      	movs	r3, #0
 80188ce:	607b      	str	r3, [r7, #4]
 80188d0:	e002      	b.n	80188d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80188d2:	f04f 33ff 	mov.w	r3, #4294967295
 80188d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80188d8:	687b      	ldr	r3, [r7, #4]
}
 80188da:	4618      	mov	r0, r3
 80188dc:	370c      	adds	r7, #12
 80188de:	46bd      	mov	sp, r7
 80188e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188e4:	4770      	bx	lr
 80188e6:	bf00      	nop
 80188e8:	200005cc 	.word	0x200005cc

080188ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b082      	sub	sp, #8
 80188f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80188f2:	f3ef 8305 	mrs	r3, IPSR
 80188f6:	603b      	str	r3, [r7, #0]
  return(result);
 80188f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d003      	beq.n	8018906 <osKernelStart+0x1a>
    stat = osErrorISR;
 80188fe:	f06f 0305 	mvn.w	r3, #5
 8018902:	607b      	str	r3, [r7, #4]
 8018904:	e010      	b.n	8018928 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8018906:	4b0b      	ldr	r3, [pc, #44]	; (8018934 <osKernelStart+0x48>)
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	2b01      	cmp	r3, #1
 801890c:	d109      	bne.n	8018922 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801890e:	f7ff ffbf 	bl	8018890 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8018912:	4b08      	ldr	r3, [pc, #32]	; (8018934 <osKernelStart+0x48>)
 8018914:	2202      	movs	r2, #2
 8018916:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8018918:	f002 f8e8 	bl	801aaec <vTaskStartScheduler>
      stat = osOK;
 801891c:	2300      	movs	r3, #0
 801891e:	607b      	str	r3, [r7, #4]
 8018920:	e002      	b.n	8018928 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8018922:	f04f 33ff 	mov.w	r3, #4294967295
 8018926:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8018928:	687b      	ldr	r3, [r7, #4]
}
 801892a:	4618      	mov	r0, r3
 801892c:	3708      	adds	r7, #8
 801892e:	46bd      	mov	sp, r7
 8018930:	bd80      	pop	{r7, pc}
 8018932:	bf00      	nop
 8018934:	200005cc 	.word	0x200005cc

08018938 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8018938:	b580      	push	{r7, lr}
 801893a:	b082      	sub	sp, #8
 801893c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801893e:	f3ef 8305 	mrs	r3, IPSR
 8018942:	603b      	str	r3, [r7, #0]
  return(result);
 8018944:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8018946:	2b00      	cmp	r3, #0
 8018948:	d003      	beq.n	8018952 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 801894a:	f002 f9f1 	bl	801ad30 <xTaskGetTickCountFromISR>
 801894e:	6078      	str	r0, [r7, #4]
 8018950:	e002      	b.n	8018958 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8018952:	f002 f9dd 	bl	801ad10 <xTaskGetTickCount>
 8018956:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8018958:	687b      	ldr	r3, [r7, #4]
}
 801895a:	4618      	mov	r0, r3
 801895c:	3708      	adds	r7, #8
 801895e:	46bd      	mov	sp, r7
 8018960:	bd80      	pop	{r7, pc}

08018962 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8018962:	b480      	push	{r7}
 8018964:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8018966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 801896a:	4618      	mov	r0, r3
 801896c:	46bd      	mov	sp, r7
 801896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018972:	4770      	bx	lr

08018974 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8018974:	b580      	push	{r7, lr}
 8018976:	b08e      	sub	sp, #56	; 0x38
 8018978:	af04      	add	r7, sp, #16
 801897a:	60f8      	str	r0, [r7, #12]
 801897c:	60b9      	str	r1, [r7, #8]
 801897e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8018980:	2300      	movs	r3, #0
 8018982:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018984:	f3ef 8305 	mrs	r3, IPSR
 8018988:	617b      	str	r3, [r7, #20]
  return(result);
 801898a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801898c:	2b00      	cmp	r3, #0
 801898e:	d17e      	bne.n	8018a8e <osThreadNew+0x11a>
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	2b00      	cmp	r3, #0
 8018994:	d07b      	beq.n	8018a8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8018996:	2380      	movs	r3, #128	; 0x80
 8018998:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801899a:	2318      	movs	r3, #24
 801899c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801899e:	2300      	movs	r3, #0
 80189a0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80189a2:	f04f 33ff 	mov.w	r3, #4294967295
 80189a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d045      	beq.n	8018a3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d002      	beq.n	80189bc <osThreadNew+0x48>
        name = attr->name;
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	699b      	ldr	r3, [r3, #24]
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d002      	beq.n	80189ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	699b      	ldr	r3, [r3, #24]
 80189c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80189ca:	69fb      	ldr	r3, [r7, #28]
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d008      	beq.n	80189e2 <osThreadNew+0x6e>
 80189d0:	69fb      	ldr	r3, [r7, #28]
 80189d2:	2b38      	cmp	r3, #56	; 0x38
 80189d4:	d805      	bhi.n	80189e2 <osThreadNew+0x6e>
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	685b      	ldr	r3, [r3, #4]
 80189da:	f003 0301 	and.w	r3, r3, #1
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d001      	beq.n	80189e6 <osThreadNew+0x72>
        return (NULL);
 80189e2:	2300      	movs	r3, #0
 80189e4:	e054      	b.n	8018a90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	695b      	ldr	r3, [r3, #20]
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d003      	beq.n	80189f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	695b      	ldr	r3, [r3, #20]
 80189f2:	089b      	lsrs	r3, r3, #2
 80189f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	689b      	ldr	r3, [r3, #8]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d00e      	beq.n	8018a1c <osThreadNew+0xa8>
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	68db      	ldr	r3, [r3, #12]
 8018a02:	2b5b      	cmp	r3, #91	; 0x5b
 8018a04:	d90a      	bls.n	8018a1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d006      	beq.n	8018a1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	695b      	ldr	r3, [r3, #20]
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d002      	beq.n	8018a1c <osThreadNew+0xa8>
        mem = 1;
 8018a16:	2301      	movs	r3, #1
 8018a18:	61bb      	str	r3, [r7, #24]
 8018a1a:	e010      	b.n	8018a3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	689b      	ldr	r3, [r3, #8]
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d10c      	bne.n	8018a3e <osThreadNew+0xca>
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	68db      	ldr	r3, [r3, #12]
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d108      	bne.n	8018a3e <osThreadNew+0xca>
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	691b      	ldr	r3, [r3, #16]
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d104      	bne.n	8018a3e <osThreadNew+0xca>
          mem = 0;
 8018a34:	2300      	movs	r3, #0
 8018a36:	61bb      	str	r3, [r7, #24]
 8018a38:	e001      	b.n	8018a3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8018a3a:	2300      	movs	r3, #0
 8018a3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8018a3e:	69bb      	ldr	r3, [r7, #24]
 8018a40:	2b01      	cmp	r3, #1
 8018a42:	d110      	bne.n	8018a66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8018a48:	687a      	ldr	r2, [r7, #4]
 8018a4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8018a4c:	9202      	str	r2, [sp, #8]
 8018a4e:	9301      	str	r3, [sp, #4]
 8018a50:	69fb      	ldr	r3, [r7, #28]
 8018a52:	9300      	str	r3, [sp, #0]
 8018a54:	68bb      	ldr	r3, [r7, #8]
 8018a56:	6a3a      	ldr	r2, [r7, #32]
 8018a58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018a5a:	68f8      	ldr	r0, [r7, #12]
 8018a5c:	f001 fd1a 	bl	801a494 <xTaskCreateStatic>
 8018a60:	4603      	mov	r3, r0
 8018a62:	613b      	str	r3, [r7, #16]
 8018a64:	e013      	b.n	8018a8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8018a66:	69bb      	ldr	r3, [r7, #24]
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d110      	bne.n	8018a8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8018a6c:	6a3b      	ldr	r3, [r7, #32]
 8018a6e:	b29a      	uxth	r2, r3
 8018a70:	f107 0310 	add.w	r3, r7, #16
 8018a74:	9301      	str	r3, [sp, #4]
 8018a76:	69fb      	ldr	r3, [r7, #28]
 8018a78:	9300      	str	r3, [sp, #0]
 8018a7a:	68bb      	ldr	r3, [r7, #8]
 8018a7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018a7e:	68f8      	ldr	r0, [r7, #12]
 8018a80:	f001 fd65 	bl	801a54e <xTaskCreate>
 8018a84:	4603      	mov	r3, r0
 8018a86:	2b01      	cmp	r3, #1
 8018a88:	d001      	beq.n	8018a8e <osThreadNew+0x11a>
            hTask = NULL;
 8018a8a:	2300      	movs	r3, #0
 8018a8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8018a8e:	693b      	ldr	r3, [r7, #16]
}
 8018a90:	4618      	mov	r0, r3
 8018a92:	3728      	adds	r7, #40	; 0x28
 8018a94:	46bd      	mov	sp, r7
 8018a96:	bd80      	pop	{r7, pc}

08018a98 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8018a98:	b580      	push	{r7, lr}
 8018a9a:	b082      	sub	sp, #8
 8018a9c:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8018a9e:	f002 fd1d 	bl	801b4dc <xTaskGetCurrentTaskHandle>
 8018aa2:	6078      	str	r0, [r7, #4]

  return (id);
 8018aa4:	687b      	ldr	r3, [r7, #4]
}
 8018aa6:	4618      	mov	r0, r3
 8018aa8:	3708      	adds	r7, #8
 8018aaa:	46bd      	mov	sp, r7
 8018aac:	bd80      	pop	{r7, pc}

08018aae <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8018aae:	b580      	push	{r7, lr}
 8018ab0:	b086      	sub	sp, #24
 8018ab2:	af00      	add	r7, sp, #0
 8018ab4:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018aba:	f3ef 8305 	mrs	r3, IPSR
 8018abe:	60bb      	str	r3, [r7, #8]
  return(result);
 8018ac0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d003      	beq.n	8018ace <osThreadTerminate+0x20>
    stat = osErrorISR;
 8018ac6:	f06f 0305 	mvn.w	r3, #5
 8018aca:	617b      	str	r3, [r7, #20]
 8018acc:	e017      	b.n	8018afe <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8018ace:	693b      	ldr	r3, [r7, #16]
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d103      	bne.n	8018adc <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8018ad4:	f06f 0303 	mvn.w	r3, #3
 8018ad8:	617b      	str	r3, [r7, #20]
 8018ada:	e010      	b.n	8018afe <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8018adc:	6938      	ldr	r0, [r7, #16]
 8018ade:	f001 ff9f 	bl	801aa20 <eTaskGetState>
 8018ae2:	4603      	mov	r3, r0
 8018ae4:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8018ae6:	7bfb      	ldrb	r3, [r7, #15]
 8018ae8:	2b04      	cmp	r3, #4
 8018aea:	d005      	beq.n	8018af8 <osThreadTerminate+0x4a>
      stat = osOK;
 8018aec:	2300      	movs	r3, #0
 8018aee:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8018af0:	6938      	ldr	r0, [r7, #16]
 8018af2:	f001 fe71 	bl	801a7d8 <vTaskDelete>
 8018af6:	e002      	b.n	8018afe <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8018af8:	f06f 0302 	mvn.w	r3, #2
 8018afc:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8018afe:	697b      	ldr	r3, [r7, #20]
}
 8018b00:	4618      	mov	r0, r3
 8018b02:	3718      	adds	r7, #24
 8018b04:	46bd      	mov	sp, r7
 8018b06:	bd80      	pop	{r7, pc}

08018b08 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8018b08:	b580      	push	{r7, lr}
 8018b0a:	b084      	sub	sp, #16
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018b10:	f3ef 8305 	mrs	r3, IPSR
 8018b14:	60bb      	str	r3, [r7, #8]
  return(result);
 8018b16:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d003      	beq.n	8018b24 <osDelay+0x1c>
    stat = osErrorISR;
 8018b1c:	f06f 0305 	mvn.w	r3, #5
 8018b20:	60fb      	str	r3, [r7, #12]
 8018b22:	e007      	b.n	8018b34 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8018b24:	2300      	movs	r3, #0
 8018b26:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d002      	beq.n	8018b34 <osDelay+0x2c>
      vTaskDelay(ticks);
 8018b2e:	6878      	ldr	r0, [r7, #4]
 8018b30:	f001 ff42 	bl	801a9b8 <vTaskDelay>
    }
  }

  return (stat);
 8018b34:	68fb      	ldr	r3, [r7, #12]
}
 8018b36:	4618      	mov	r0, r3
 8018b38:	3710      	adds	r7, #16
 8018b3a:	46bd      	mov	sp, r7
 8018b3c:	bd80      	pop	{r7, pc}

08018b3e <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8018b3e:	b580      	push	{r7, lr}
 8018b40:	b086      	sub	sp, #24
 8018b42:	af00      	add	r7, sp, #0
 8018b44:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018b46:	f3ef 8305 	mrs	r3, IPSR
 8018b4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8018b4c:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d003      	beq.n	8018b5a <osDelayUntil+0x1c>
    stat = osErrorISR;
 8018b52:	f06f 0305 	mvn.w	r3, #5
 8018b56:	617b      	str	r3, [r7, #20]
 8018b58:	e019      	b.n	8018b8e <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8018b5a:	2300      	movs	r3, #0
 8018b5c:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8018b5e:	f002 f8d7 	bl	801ad10 <xTaskGetTickCount>
 8018b62:	4603      	mov	r3, r0
 8018b64:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8018b66:	68bb      	ldr	r3, [r7, #8]
 8018b68:	687a      	ldr	r2, [r7, #4]
 8018b6a:	1ad3      	subs	r3, r2, r3
 8018b6c:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8018b6e:	693b      	ldr	r3, [r7, #16]
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d009      	beq.n	8018b88 <osDelayUntil+0x4a>
 8018b74:	693b      	ldr	r3, [r7, #16]
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	db06      	blt.n	8018b88 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8018b7a:	f107 0308 	add.w	r3, r7, #8
 8018b7e:	6939      	ldr	r1, [r7, #16]
 8018b80:	4618      	mov	r0, r3
 8018b82:	f001 fe9b 	bl	801a8bc <vTaskDelayUntil>
 8018b86:	e002      	b.n	8018b8e <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8018b88:	f06f 0303 	mvn.w	r3, #3
 8018b8c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8018b8e:	697b      	ldr	r3, [r7, #20]
}
 8018b90:	4618      	mov	r0, r3
 8018b92:	3718      	adds	r7, #24
 8018b94:	46bd      	mov	sp, r7
 8018b96:	bd80      	pop	{r7, pc}

08018b98 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8018b98:	b580      	push	{r7, lr}
 8018b9a:	b086      	sub	sp, #24
 8018b9c:	af00      	add	r7, sp, #0
 8018b9e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8018ba0:	2300      	movs	r3, #0
 8018ba2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018ba4:	f3ef 8305 	mrs	r3, IPSR
 8018ba8:	60fb      	str	r3, [r7, #12]
  return(result);
 8018baa:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d12d      	bne.n	8018c0c <osEventFlagsNew+0x74>
    mem = -1;
 8018bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8018bb4:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d015      	beq.n	8018be8 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	689b      	ldr	r3, [r3, #8]
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d006      	beq.n	8018bd2 <osEventFlagsNew+0x3a>
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	68db      	ldr	r3, [r3, #12]
 8018bc8:	2b1f      	cmp	r3, #31
 8018bca:	d902      	bls.n	8018bd2 <osEventFlagsNew+0x3a>
        mem = 1;
 8018bcc:	2301      	movs	r3, #1
 8018bce:	613b      	str	r3, [r7, #16]
 8018bd0:	e00c      	b.n	8018bec <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	689b      	ldr	r3, [r3, #8]
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d108      	bne.n	8018bec <osEventFlagsNew+0x54>
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	68db      	ldr	r3, [r3, #12]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d104      	bne.n	8018bec <osEventFlagsNew+0x54>
          mem = 0;
 8018be2:	2300      	movs	r3, #0
 8018be4:	613b      	str	r3, [r7, #16]
 8018be6:	e001      	b.n	8018bec <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8018be8:	2300      	movs	r3, #0
 8018bea:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8018bec:	693b      	ldr	r3, [r7, #16]
 8018bee:	2b01      	cmp	r3, #1
 8018bf0:	d106      	bne.n	8018c00 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	689b      	ldr	r3, [r3, #8]
 8018bf6:	4618      	mov	r0, r3
 8018bf8:	f000 fa2c 	bl	8019054 <xEventGroupCreateStatic>
 8018bfc:	6178      	str	r0, [r7, #20]
 8018bfe:	e005      	b.n	8018c0c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8018c00:	693b      	ldr	r3, [r7, #16]
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d102      	bne.n	8018c0c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8018c06:	f000 fa5c 	bl	80190c2 <xEventGroupCreate>
 8018c0a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8018c0c:	697b      	ldr	r3, [r7, #20]
}
 8018c0e:	4618      	mov	r0, r3
 8018c10:	3718      	adds	r7, #24
 8018c12:	46bd      	mov	sp, r7
 8018c14:	bd80      	pop	{r7, pc}
	...

08018c18 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8018c18:	b580      	push	{r7, lr}
 8018c1a:	b086      	sub	sp, #24
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	6078      	str	r0, [r7, #4]
 8018c20:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8018c26:	693b      	ldr	r3, [r7, #16]
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d004      	beq.n	8018c36 <osEventFlagsSet+0x1e>
 8018c2c:	683b      	ldr	r3, [r7, #0]
 8018c2e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d003      	beq.n	8018c3e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8018c36:	f06f 0303 	mvn.w	r3, #3
 8018c3a:	617b      	str	r3, [r7, #20]
 8018c3c:	e028      	b.n	8018c90 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018c3e:	f3ef 8305 	mrs	r3, IPSR
 8018c42:	60fb      	str	r3, [r7, #12]
  return(result);
 8018c44:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d01d      	beq.n	8018c86 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8018c4a:	2300      	movs	r3, #0
 8018c4c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8018c4e:	f107 0308 	add.w	r3, r7, #8
 8018c52:	461a      	mov	r2, r3
 8018c54:	6839      	ldr	r1, [r7, #0]
 8018c56:	6938      	ldr	r0, [r7, #16]
 8018c58:	f000 fc54 	bl	8019504 <xEventGroupSetBitsFromISR>
 8018c5c:	4603      	mov	r3, r0
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d103      	bne.n	8018c6a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8018c62:	f06f 0302 	mvn.w	r3, #2
 8018c66:	617b      	str	r3, [r7, #20]
 8018c68:	e012      	b.n	8018c90 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8018c6a:	683b      	ldr	r3, [r7, #0]
 8018c6c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8018c6e:	68bb      	ldr	r3, [r7, #8]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d00d      	beq.n	8018c90 <osEventFlagsSet+0x78>
 8018c74:	4b09      	ldr	r3, [pc, #36]	; (8018c9c <osEventFlagsSet+0x84>)
 8018c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018c7a:	601a      	str	r2, [r3, #0]
 8018c7c:	f3bf 8f4f 	dsb	sy
 8018c80:	f3bf 8f6f 	isb	sy
 8018c84:	e004      	b.n	8018c90 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8018c86:	6839      	ldr	r1, [r7, #0]
 8018c88:	6938      	ldr	r0, [r7, #16]
 8018c8a:	f000 fb73 	bl	8019374 <xEventGroupSetBits>
 8018c8e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8018c90:	697b      	ldr	r3, [r7, #20]
}
 8018c92:	4618      	mov	r0, r3
 8018c94:	3718      	adds	r7, #24
 8018c96:	46bd      	mov	sp, r7
 8018c98:	bd80      	pop	{r7, pc}
 8018c9a:	bf00      	nop
 8018c9c:	e000ed04 	.word	0xe000ed04

08018ca0 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8018ca0:	b580      	push	{r7, lr}
 8018ca2:	b086      	sub	sp, #24
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	6078      	str	r0, [r7, #4]
 8018ca8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8018cae:	693b      	ldr	r3, [r7, #16]
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d004      	beq.n	8018cbe <osEventFlagsClear+0x1e>
 8018cb4:	683b      	ldr	r3, [r7, #0]
 8018cb6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d003      	beq.n	8018cc6 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8018cbe:	f06f 0303 	mvn.w	r3, #3
 8018cc2:	617b      	str	r3, [r7, #20]
 8018cc4:	e019      	b.n	8018cfa <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018cc6:	f3ef 8305 	mrs	r3, IPSR
 8018cca:	60fb      	str	r3, [r7, #12]
  return(result);
 8018ccc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d00e      	beq.n	8018cf0 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8018cd2:	6938      	ldr	r0, [r7, #16]
 8018cd4:	f000 fb2a 	bl	801932c <xEventGroupGetBitsFromISR>
 8018cd8:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8018cda:	6839      	ldr	r1, [r7, #0]
 8018cdc:	6938      	ldr	r0, [r7, #16]
 8018cde:	f000 fb11 	bl	8019304 <xEventGroupClearBitsFromISR>
 8018ce2:	4603      	mov	r3, r0
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d108      	bne.n	8018cfa <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8018ce8:	f06f 0302 	mvn.w	r3, #2
 8018cec:	617b      	str	r3, [r7, #20]
 8018cee:	e004      	b.n	8018cfa <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8018cf0:	6839      	ldr	r1, [r7, #0]
 8018cf2:	6938      	ldr	r0, [r7, #16]
 8018cf4:	f000 face 	bl	8019294 <xEventGroupClearBits>
 8018cf8:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8018cfa:	697b      	ldr	r3, [r7, #20]
}
 8018cfc:	4618      	mov	r0, r3
 8018cfe:	3718      	adds	r7, #24
 8018d00:	46bd      	mov	sp, r7
 8018d02:	bd80      	pop	{r7, pc}

08018d04 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8018d04:	b580      	push	{r7, lr}
 8018d06:	b08c      	sub	sp, #48	; 0x30
 8018d08:	af02      	add	r7, sp, #8
 8018d0a:	60f8      	str	r0, [r7, #12]
 8018d0c:	60b9      	str	r1, [r7, #8]
 8018d0e:	607a      	str	r2, [r7, #4]
 8018d10:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8018d12:	68fb      	ldr	r3, [r7, #12]
 8018d14:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8018d16:	69bb      	ldr	r3, [r7, #24]
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d004      	beq.n	8018d26 <osEventFlagsWait+0x22>
 8018d1c:	68bb      	ldr	r3, [r7, #8]
 8018d1e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d003      	beq.n	8018d2e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8018d26:	f06f 0303 	mvn.w	r3, #3
 8018d2a:	61fb      	str	r3, [r7, #28]
 8018d2c:	e04b      	b.n	8018dc6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018d2e:	f3ef 8305 	mrs	r3, IPSR
 8018d32:	617b      	str	r3, [r7, #20]
  return(result);
 8018d34:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d003      	beq.n	8018d42 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8018d3a:	f06f 0305 	mvn.w	r3, #5
 8018d3e:	61fb      	str	r3, [r7, #28]
 8018d40:	e041      	b.n	8018dc6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	f003 0301 	and.w	r3, r3, #1
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	d002      	beq.n	8018d52 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8018d4c:	2301      	movs	r3, #1
 8018d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8018d50:	e001      	b.n	8018d56 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8018d52:	2300      	movs	r3, #0
 8018d54:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	f003 0302 	and.w	r3, r3, #2
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d002      	beq.n	8018d66 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8018d60:	2300      	movs	r3, #0
 8018d62:	623b      	str	r3, [r7, #32]
 8018d64:	e001      	b.n	8018d6a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8018d66:	2301      	movs	r3, #1
 8018d68:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8018d6a:	683b      	ldr	r3, [r7, #0]
 8018d6c:	9300      	str	r3, [sp, #0]
 8018d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d70:	6a3a      	ldr	r2, [r7, #32]
 8018d72:	68b9      	ldr	r1, [r7, #8]
 8018d74:	69b8      	ldr	r0, [r7, #24]
 8018d76:	f000 f9bf 	bl	80190f8 <xEventGroupWaitBits>
 8018d7a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	f003 0301 	and.w	r3, r3, #1
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d010      	beq.n	8018da8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8018d86:	68ba      	ldr	r2, [r7, #8]
 8018d88:	69fb      	ldr	r3, [r7, #28]
 8018d8a:	4013      	ands	r3, r2
 8018d8c:	68ba      	ldr	r2, [r7, #8]
 8018d8e:	429a      	cmp	r2, r3
 8018d90:	d019      	beq.n	8018dc6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8018d92:	683b      	ldr	r3, [r7, #0]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d003      	beq.n	8018da0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8018d98:	f06f 0301 	mvn.w	r3, #1
 8018d9c:	61fb      	str	r3, [r7, #28]
 8018d9e:	e012      	b.n	8018dc6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8018da0:	f06f 0302 	mvn.w	r3, #2
 8018da4:	61fb      	str	r3, [r7, #28]
 8018da6:	e00e      	b.n	8018dc6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8018da8:	68ba      	ldr	r2, [r7, #8]
 8018daa:	69fb      	ldr	r3, [r7, #28]
 8018dac:	4013      	ands	r3, r2
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d109      	bne.n	8018dc6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8018db2:	683b      	ldr	r3, [r7, #0]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d003      	beq.n	8018dc0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8018db8:	f06f 0301 	mvn.w	r3, #1
 8018dbc:	61fb      	str	r3, [r7, #28]
 8018dbe:	e002      	b.n	8018dc6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8018dc0:	f06f 0302 	mvn.w	r3, #2
 8018dc4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8018dc6:	69fb      	ldr	r3, [r7, #28]
}
 8018dc8:	4618      	mov	r0, r3
 8018dca:	3728      	adds	r7, #40	; 0x28
 8018dcc:	46bd      	mov	sp, r7
 8018dce:	bd80      	pop	{r7, pc}

08018dd0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b088      	sub	sp, #32
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8018dd8:	2300      	movs	r3, #0
 8018dda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018ddc:	f3ef 8305 	mrs	r3, IPSR
 8018de0:	60bb      	str	r3, [r7, #8]
  return(result);
 8018de2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d174      	bne.n	8018ed2 <osMutexNew+0x102>
    if (attr != NULL) {
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d003      	beq.n	8018df6 <osMutexNew+0x26>
      type = attr->attr_bits;
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	685b      	ldr	r3, [r3, #4]
 8018df2:	61bb      	str	r3, [r7, #24]
 8018df4:	e001      	b.n	8018dfa <osMutexNew+0x2a>
    } else {
      type = 0U;
 8018df6:	2300      	movs	r3, #0
 8018df8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8018dfa:	69bb      	ldr	r3, [r7, #24]
 8018dfc:	f003 0301 	and.w	r3, r3, #1
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d002      	beq.n	8018e0a <osMutexNew+0x3a>
      rmtx = 1U;
 8018e04:	2301      	movs	r3, #1
 8018e06:	617b      	str	r3, [r7, #20]
 8018e08:	e001      	b.n	8018e0e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8018e0e:	69bb      	ldr	r3, [r7, #24]
 8018e10:	f003 0308 	and.w	r3, r3, #8
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d15c      	bne.n	8018ed2 <osMutexNew+0x102>
      mem = -1;
 8018e18:	f04f 33ff 	mov.w	r3, #4294967295
 8018e1c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d015      	beq.n	8018e50 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	689b      	ldr	r3, [r3, #8]
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d006      	beq.n	8018e3a <osMutexNew+0x6a>
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	68db      	ldr	r3, [r3, #12]
 8018e30:	2b4f      	cmp	r3, #79	; 0x4f
 8018e32:	d902      	bls.n	8018e3a <osMutexNew+0x6a>
          mem = 1;
 8018e34:	2301      	movs	r3, #1
 8018e36:	613b      	str	r3, [r7, #16]
 8018e38:	e00c      	b.n	8018e54 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	689b      	ldr	r3, [r3, #8]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d108      	bne.n	8018e54 <osMutexNew+0x84>
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	68db      	ldr	r3, [r3, #12]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d104      	bne.n	8018e54 <osMutexNew+0x84>
            mem = 0;
 8018e4a:	2300      	movs	r3, #0
 8018e4c:	613b      	str	r3, [r7, #16]
 8018e4e:	e001      	b.n	8018e54 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8018e50:	2300      	movs	r3, #0
 8018e52:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8018e54:	693b      	ldr	r3, [r7, #16]
 8018e56:	2b01      	cmp	r3, #1
 8018e58:	d112      	bne.n	8018e80 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8018e5a:	697b      	ldr	r3, [r7, #20]
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d007      	beq.n	8018e70 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	689b      	ldr	r3, [r3, #8]
 8018e64:	4619      	mov	r1, r3
 8018e66:	2004      	movs	r0, #4
 8018e68:	f000 fd83 	bl	8019972 <xQueueCreateMutexStatic>
 8018e6c:	61f8      	str	r0, [r7, #28]
 8018e6e:	e016      	b.n	8018e9e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	689b      	ldr	r3, [r3, #8]
 8018e74:	4619      	mov	r1, r3
 8018e76:	2001      	movs	r0, #1
 8018e78:	f000 fd7b 	bl	8019972 <xQueueCreateMutexStatic>
 8018e7c:	61f8      	str	r0, [r7, #28]
 8018e7e:	e00e      	b.n	8018e9e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8018e80:	693b      	ldr	r3, [r7, #16]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d10b      	bne.n	8018e9e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8018e86:	697b      	ldr	r3, [r7, #20]
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d004      	beq.n	8018e96 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8018e8c:	2004      	movs	r0, #4
 8018e8e:	f000 fd58 	bl	8019942 <xQueueCreateMutex>
 8018e92:	61f8      	str	r0, [r7, #28]
 8018e94:	e003      	b.n	8018e9e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8018e96:	2001      	movs	r0, #1
 8018e98:	f000 fd53 	bl	8019942 <xQueueCreateMutex>
 8018e9c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8018e9e:	69fb      	ldr	r3, [r7, #28]
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d00c      	beq.n	8018ebe <osMutexNew+0xee>
        if (attr != NULL) {
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d003      	beq.n	8018eb2 <osMutexNew+0xe2>
          name = attr->name;
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	60fb      	str	r3, [r7, #12]
 8018eb0:	e001      	b.n	8018eb6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8018eb2:	2300      	movs	r3, #0
 8018eb4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8018eb6:	68f9      	ldr	r1, [r7, #12]
 8018eb8:	69f8      	ldr	r0, [r7, #28]
 8018eba:	f001 fa8d 	bl	801a3d8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8018ebe:	69fb      	ldr	r3, [r7, #28]
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	d006      	beq.n	8018ed2 <osMutexNew+0x102>
 8018ec4:	697b      	ldr	r3, [r7, #20]
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d003      	beq.n	8018ed2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8018eca:	69fb      	ldr	r3, [r7, #28]
 8018ecc:	f043 0301 	orr.w	r3, r3, #1
 8018ed0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8018ed2:	69fb      	ldr	r3, [r7, #28]
}
 8018ed4:	4618      	mov	r0, r3
 8018ed6:	3720      	adds	r7, #32
 8018ed8:	46bd      	mov	sp, r7
 8018eda:	bd80      	pop	{r7, pc}

08018edc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8018edc:	b580      	push	{r7, lr}
 8018ede:	b086      	sub	sp, #24
 8018ee0:	af00      	add	r7, sp, #0
 8018ee2:	6078      	str	r0, [r7, #4]
 8018ee4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	f023 0301 	bic.w	r3, r3, #1
 8018eec:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	f003 0301 	and.w	r3, r3, #1
 8018ef4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8018ef6:	2300      	movs	r3, #0
 8018ef8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018efa:	f3ef 8305 	mrs	r3, IPSR
 8018efe:	60bb      	str	r3, [r7, #8]
  return(result);
 8018f00:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d003      	beq.n	8018f0e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8018f06:	f06f 0305 	mvn.w	r3, #5
 8018f0a:	617b      	str	r3, [r7, #20]
 8018f0c:	e02c      	b.n	8018f68 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8018f0e:	693b      	ldr	r3, [r7, #16]
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d103      	bne.n	8018f1c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8018f14:	f06f 0303 	mvn.w	r3, #3
 8018f18:	617b      	str	r3, [r7, #20]
 8018f1a:	e025      	b.n	8018f68 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d011      	beq.n	8018f46 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8018f22:	6839      	ldr	r1, [r7, #0]
 8018f24:	6938      	ldr	r0, [r7, #16]
 8018f26:	f000 fd73 	bl	8019a10 <xQueueTakeMutexRecursive>
 8018f2a:	4603      	mov	r3, r0
 8018f2c:	2b01      	cmp	r3, #1
 8018f2e:	d01b      	beq.n	8018f68 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8018f30:	683b      	ldr	r3, [r7, #0]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d003      	beq.n	8018f3e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8018f36:	f06f 0301 	mvn.w	r3, #1
 8018f3a:	617b      	str	r3, [r7, #20]
 8018f3c:	e014      	b.n	8018f68 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8018f3e:	f06f 0302 	mvn.w	r3, #2
 8018f42:	617b      	str	r3, [r7, #20]
 8018f44:	e010      	b.n	8018f68 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8018f46:	6839      	ldr	r1, [r7, #0]
 8018f48:	6938      	ldr	r0, [r7, #16]
 8018f4a:	f001 f811 	bl	8019f70 <xQueueSemaphoreTake>
 8018f4e:	4603      	mov	r3, r0
 8018f50:	2b01      	cmp	r3, #1
 8018f52:	d009      	beq.n	8018f68 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8018f54:	683b      	ldr	r3, [r7, #0]
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d003      	beq.n	8018f62 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8018f5a:	f06f 0301 	mvn.w	r3, #1
 8018f5e:	617b      	str	r3, [r7, #20]
 8018f60:	e002      	b.n	8018f68 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8018f62:	f06f 0302 	mvn.w	r3, #2
 8018f66:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8018f68:	697b      	ldr	r3, [r7, #20]
}
 8018f6a:	4618      	mov	r0, r3
 8018f6c:	3718      	adds	r7, #24
 8018f6e:	46bd      	mov	sp, r7
 8018f70:	bd80      	pop	{r7, pc}

08018f72 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8018f72:	b580      	push	{r7, lr}
 8018f74:	b086      	sub	sp, #24
 8018f76:	af00      	add	r7, sp, #0
 8018f78:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	f023 0301 	bic.w	r3, r3, #1
 8018f80:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	f003 0301 	and.w	r3, r3, #1
 8018f88:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8018f8a:	2300      	movs	r3, #0
 8018f8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018f8e:	f3ef 8305 	mrs	r3, IPSR
 8018f92:	60bb      	str	r3, [r7, #8]
  return(result);
 8018f94:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d003      	beq.n	8018fa2 <osMutexRelease+0x30>
    stat = osErrorISR;
 8018f9a:	f06f 0305 	mvn.w	r3, #5
 8018f9e:	617b      	str	r3, [r7, #20]
 8018fa0:	e01f      	b.n	8018fe2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8018fa2:	693b      	ldr	r3, [r7, #16]
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d103      	bne.n	8018fb0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8018fa8:	f06f 0303 	mvn.w	r3, #3
 8018fac:	617b      	str	r3, [r7, #20]
 8018fae:	e018      	b.n	8018fe2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d009      	beq.n	8018fca <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8018fb6:	6938      	ldr	r0, [r7, #16]
 8018fb8:	f000 fcf6 	bl	80199a8 <xQueueGiveMutexRecursive>
 8018fbc:	4603      	mov	r3, r0
 8018fbe:	2b01      	cmp	r3, #1
 8018fc0:	d00f      	beq.n	8018fe2 <osMutexRelease+0x70>
        stat = osErrorResource;
 8018fc2:	f06f 0302 	mvn.w	r3, #2
 8018fc6:	617b      	str	r3, [r7, #20]
 8018fc8:	e00b      	b.n	8018fe2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8018fca:	2300      	movs	r3, #0
 8018fcc:	2200      	movs	r2, #0
 8018fce:	2100      	movs	r1, #0
 8018fd0:	6938      	ldr	r0, [r7, #16]
 8018fd2:	f000 fd53 	bl	8019a7c <xQueueGenericSend>
 8018fd6:	4603      	mov	r3, r0
 8018fd8:	2b01      	cmp	r3, #1
 8018fda:	d002      	beq.n	8018fe2 <osMutexRelease+0x70>
        stat = osErrorResource;
 8018fdc:	f06f 0302 	mvn.w	r3, #2
 8018fe0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8018fe2:	697b      	ldr	r3, [r7, #20]
}
 8018fe4:	4618      	mov	r0, r3
 8018fe6:	3718      	adds	r7, #24
 8018fe8:	46bd      	mov	sp, r7
 8018fea:	bd80      	pop	{r7, pc}

08018fec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8018fec:	b480      	push	{r7}
 8018fee:	b085      	sub	sp, #20
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	60f8      	str	r0, [r7, #12]
 8018ff4:	60b9      	str	r1, [r7, #8]
 8018ff6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8018ff8:	68fb      	ldr	r3, [r7, #12]
 8018ffa:	4a07      	ldr	r2, [pc, #28]	; (8019018 <vApplicationGetIdleTaskMemory+0x2c>)
 8018ffc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8018ffe:	68bb      	ldr	r3, [r7, #8]
 8019000:	4a06      	ldr	r2, [pc, #24]	; (801901c <vApplicationGetIdleTaskMemory+0x30>)
 8019002:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	2280      	movs	r2, #128	; 0x80
 8019008:	601a      	str	r2, [r3, #0]
}
 801900a:	bf00      	nop
 801900c:	3714      	adds	r7, #20
 801900e:	46bd      	mov	sp, r7
 8019010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019014:	4770      	bx	lr
 8019016:	bf00      	nop
 8019018:	200005d0 	.word	0x200005d0
 801901c:	2000062c 	.word	0x2000062c

08019020 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8019020:	b480      	push	{r7}
 8019022:	b085      	sub	sp, #20
 8019024:	af00      	add	r7, sp, #0
 8019026:	60f8      	str	r0, [r7, #12]
 8019028:	60b9      	str	r1, [r7, #8]
 801902a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801902c:	68fb      	ldr	r3, [r7, #12]
 801902e:	4a07      	ldr	r2, [pc, #28]	; (801904c <vApplicationGetTimerTaskMemory+0x2c>)
 8019030:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8019032:	68bb      	ldr	r3, [r7, #8]
 8019034:	4a06      	ldr	r2, [pc, #24]	; (8019050 <vApplicationGetTimerTaskMemory+0x30>)
 8019036:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801903e:	601a      	str	r2, [r3, #0]
}
 8019040:	bf00      	nop
 8019042:	3714      	adds	r7, #20
 8019044:	46bd      	mov	sp, r7
 8019046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801904a:	4770      	bx	lr
 801904c:	2000082c 	.word	0x2000082c
 8019050:	20000888 	.word	0x20000888

08019054 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8019054:	b580      	push	{r7, lr}
 8019056:	b086      	sub	sp, #24
 8019058:	af00      	add	r7, sp, #0
 801905a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	2b00      	cmp	r3, #0
 8019060:	d10a      	bne.n	8019078 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8019062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019066:	f383 8811 	msr	BASEPRI, r3
 801906a:	f3bf 8f6f 	isb	sy
 801906e:	f3bf 8f4f 	dsb	sy
 8019072:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8019074:	bf00      	nop
 8019076:	e7fe      	b.n	8019076 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8019078:	2320      	movs	r3, #32
 801907a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 801907c:	68bb      	ldr	r3, [r7, #8]
 801907e:	2b20      	cmp	r3, #32
 8019080:	d00a      	beq.n	8019098 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8019082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019086:	f383 8811 	msr	BASEPRI, r3
 801908a:	f3bf 8f6f 	isb	sy
 801908e:	f3bf 8f4f 	dsb	sy
 8019092:	60fb      	str	r3, [r7, #12]
}
 8019094:	bf00      	nop
 8019096:	e7fe      	b.n	8019096 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 801909c:	697b      	ldr	r3, [r7, #20]
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d00a      	beq.n	80190b8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80190a2:	697b      	ldr	r3, [r7, #20]
 80190a4:	2200      	movs	r2, #0
 80190a6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80190a8:	697b      	ldr	r3, [r7, #20]
 80190aa:	3304      	adds	r3, #4
 80190ac:	4618      	mov	r0, r3
 80190ae:	f000 fa3d 	bl	801952c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80190b2:	697b      	ldr	r3, [r7, #20]
 80190b4:	2201      	movs	r2, #1
 80190b6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80190b8:	697b      	ldr	r3, [r7, #20]
	}
 80190ba:	4618      	mov	r0, r3
 80190bc:	3718      	adds	r7, #24
 80190be:	46bd      	mov	sp, r7
 80190c0:	bd80      	pop	{r7, pc}

080190c2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80190c2:	b580      	push	{r7, lr}
 80190c4:	b082      	sub	sp, #8
 80190c6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80190c8:	2020      	movs	r0, #32
 80190ca:	f003 f9cd 	bl	801c468 <pvPortMalloc>
 80190ce:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d00a      	beq.n	80190ec <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	2200      	movs	r2, #0
 80190da:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	3304      	adds	r3, #4
 80190e0:	4618      	mov	r0, r3
 80190e2:	f000 fa23 	bl	801952c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	2200      	movs	r2, #0
 80190ea:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80190ec:	687b      	ldr	r3, [r7, #4]
	}
 80190ee:	4618      	mov	r0, r3
 80190f0:	3708      	adds	r7, #8
 80190f2:	46bd      	mov	sp, r7
 80190f4:	bd80      	pop	{r7, pc}
	...

080190f8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b090      	sub	sp, #64	; 0x40
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	60f8      	str	r0, [r7, #12]
 8019100:	60b9      	str	r1, [r7, #8]
 8019102:	607a      	str	r2, [r7, #4]
 8019104:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8019106:	68fb      	ldr	r3, [r7, #12]
 8019108:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801910a:	2300      	movs	r3, #0
 801910c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801910e:	2300      	movs	r3, #0
 8019110:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	2b00      	cmp	r3, #0
 8019116:	d10a      	bne.n	801912e <xEventGroupWaitBits+0x36>
	__asm volatile
 8019118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801911c:	f383 8811 	msr	BASEPRI, r3
 8019120:	f3bf 8f6f 	isb	sy
 8019124:	f3bf 8f4f 	dsb	sy
 8019128:	623b      	str	r3, [r7, #32]
}
 801912a:	bf00      	nop
 801912c:	e7fe      	b.n	801912c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801912e:	68bb      	ldr	r3, [r7, #8]
 8019130:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8019134:	2b00      	cmp	r3, #0
 8019136:	d00a      	beq.n	801914e <xEventGroupWaitBits+0x56>
	__asm volatile
 8019138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801913c:	f383 8811 	msr	BASEPRI, r3
 8019140:	f3bf 8f6f 	isb	sy
 8019144:	f3bf 8f4f 	dsb	sy
 8019148:	61fb      	str	r3, [r7, #28]
}
 801914a:	bf00      	nop
 801914c:	e7fe      	b.n	801914c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801914e:	68bb      	ldr	r3, [r7, #8]
 8019150:	2b00      	cmp	r3, #0
 8019152:	d10a      	bne.n	801916a <xEventGroupWaitBits+0x72>
	__asm volatile
 8019154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019158:	f383 8811 	msr	BASEPRI, r3
 801915c:	f3bf 8f6f 	isb	sy
 8019160:	f3bf 8f4f 	dsb	sy
 8019164:	61bb      	str	r3, [r7, #24]
}
 8019166:	bf00      	nop
 8019168:	e7fe      	b.n	8019168 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801916a:	f002 f9c7 	bl	801b4fc <xTaskGetSchedulerState>
 801916e:	4603      	mov	r3, r0
 8019170:	2b00      	cmp	r3, #0
 8019172:	d102      	bne.n	801917a <xEventGroupWaitBits+0x82>
 8019174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019176:	2b00      	cmp	r3, #0
 8019178:	d101      	bne.n	801917e <xEventGroupWaitBits+0x86>
 801917a:	2301      	movs	r3, #1
 801917c:	e000      	b.n	8019180 <xEventGroupWaitBits+0x88>
 801917e:	2300      	movs	r3, #0
 8019180:	2b00      	cmp	r3, #0
 8019182:	d10a      	bne.n	801919a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8019184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019188:	f383 8811 	msr	BASEPRI, r3
 801918c:	f3bf 8f6f 	isb	sy
 8019190:	f3bf 8f4f 	dsb	sy
 8019194:	617b      	str	r3, [r7, #20]
}
 8019196:	bf00      	nop
 8019198:	e7fe      	b.n	8019198 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 801919a:	f001 fd0d 	bl	801abb8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801919e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80191a4:	683a      	ldr	r2, [r7, #0]
 80191a6:	68b9      	ldr	r1, [r7, #8]
 80191a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80191aa:	f000 f988 	bl	80194be <prvTestWaitCondition>
 80191ae:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80191b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d00e      	beq.n	80191d4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80191b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191b8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80191ba:	2300      	movs	r3, #0
 80191bc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d028      	beq.n	8019216 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80191c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191c6:	681a      	ldr	r2, [r3, #0]
 80191c8:	68bb      	ldr	r3, [r7, #8]
 80191ca:	43db      	mvns	r3, r3
 80191cc:	401a      	ands	r2, r3
 80191ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191d0:	601a      	str	r2, [r3, #0]
 80191d2:	e020      	b.n	8019216 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80191d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d104      	bne.n	80191e4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80191da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191dc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80191de:	2301      	movs	r3, #1
 80191e0:	633b      	str	r3, [r7, #48]	; 0x30
 80191e2:	e018      	b.n	8019216 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d003      	beq.n	80191f2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80191ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80191f0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80191f2:	683b      	ldr	r3, [r7, #0]
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d003      	beq.n	8019200 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80191f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80191fe:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8019200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019202:	1d18      	adds	r0, r3, #4
 8019204:	68ba      	ldr	r2, [r7, #8]
 8019206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019208:	4313      	orrs	r3, r2
 801920a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801920c:	4619      	mov	r1, r3
 801920e:	f001 fedd 	bl	801afcc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8019212:	2300      	movs	r3, #0
 8019214:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8019216:	f001 fcdd 	bl	801abd4 <xTaskResumeAll>
 801921a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 801921c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801921e:	2b00      	cmp	r3, #0
 8019220:	d031      	beq.n	8019286 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8019222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019224:	2b00      	cmp	r3, #0
 8019226:	d107      	bne.n	8019238 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8019228:	4b19      	ldr	r3, [pc, #100]	; (8019290 <xEventGroupWaitBits+0x198>)
 801922a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801922e:	601a      	str	r2, [r3, #0]
 8019230:	f3bf 8f4f 	dsb	sy
 8019234:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8019238:	f002 fad6 	bl	801b7e8 <uxTaskResetEventItemValue>
 801923c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801923e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019244:	2b00      	cmp	r3, #0
 8019246:	d11a      	bne.n	801927e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8019248:	f002 ffec 	bl	801c224 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 801924c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8019252:	683a      	ldr	r2, [r7, #0]
 8019254:	68b9      	ldr	r1, [r7, #8]
 8019256:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8019258:	f000 f931 	bl	80194be <prvTestWaitCondition>
 801925c:	4603      	mov	r3, r0
 801925e:	2b00      	cmp	r3, #0
 8019260:	d009      	beq.n	8019276 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	2b00      	cmp	r3, #0
 8019266:	d006      	beq.n	8019276 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8019268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801926a:	681a      	ldr	r2, [r3, #0]
 801926c:	68bb      	ldr	r3, [r7, #8]
 801926e:	43db      	mvns	r3, r3
 8019270:	401a      	ands	r2, r3
 8019272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019274:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8019276:	2301      	movs	r3, #1
 8019278:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801927a:	f003 f803 	bl	801c284 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801927e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019280:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8019284:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8019286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8019288:	4618      	mov	r0, r3
 801928a:	3740      	adds	r7, #64	; 0x40
 801928c:	46bd      	mov	sp, r7
 801928e:	bd80      	pop	{r7, pc}
 8019290:	e000ed04 	.word	0xe000ed04

08019294 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8019294:	b580      	push	{r7, lr}
 8019296:	b086      	sub	sp, #24
 8019298:	af00      	add	r7, sp, #0
 801929a:	6078      	str	r0, [r7, #4]
 801929c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d10a      	bne.n	80192be <xEventGroupClearBits+0x2a>
	__asm volatile
 80192a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192ac:	f383 8811 	msr	BASEPRI, r3
 80192b0:	f3bf 8f6f 	isb	sy
 80192b4:	f3bf 8f4f 	dsb	sy
 80192b8:	60fb      	str	r3, [r7, #12]
}
 80192ba:	bf00      	nop
 80192bc:	e7fe      	b.n	80192bc <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80192be:	683b      	ldr	r3, [r7, #0]
 80192c0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d00a      	beq.n	80192de <xEventGroupClearBits+0x4a>
	__asm volatile
 80192c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192cc:	f383 8811 	msr	BASEPRI, r3
 80192d0:	f3bf 8f6f 	isb	sy
 80192d4:	f3bf 8f4f 	dsb	sy
 80192d8:	60bb      	str	r3, [r7, #8]
}
 80192da:	bf00      	nop
 80192dc:	e7fe      	b.n	80192dc <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80192de:	f002 ffa1 	bl	801c224 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80192e2:	697b      	ldr	r3, [r7, #20]
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80192e8:	697b      	ldr	r3, [r7, #20]
 80192ea:	681a      	ldr	r2, [r3, #0]
 80192ec:	683b      	ldr	r3, [r7, #0]
 80192ee:	43db      	mvns	r3, r3
 80192f0:	401a      	ands	r2, r3
 80192f2:	697b      	ldr	r3, [r7, #20]
 80192f4:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80192f6:	f002 ffc5 	bl	801c284 <vPortExitCritical>

	return uxReturn;
 80192fa:	693b      	ldr	r3, [r7, #16]
}
 80192fc:	4618      	mov	r0, r3
 80192fe:	3718      	adds	r7, #24
 8019300:	46bd      	mov	sp, r7
 8019302:	bd80      	pop	{r7, pc}

08019304 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8019304:	b580      	push	{r7, lr}
 8019306:	b084      	sub	sp, #16
 8019308:	af00      	add	r7, sp, #0
 801930a:	6078      	str	r0, [r7, #4]
 801930c:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801930e:	2300      	movs	r3, #0
 8019310:	683a      	ldr	r2, [r7, #0]
 8019312:	6879      	ldr	r1, [r7, #4]
 8019314:	4804      	ldr	r0, [pc, #16]	; (8019328 <xEventGroupClearBitsFromISR+0x24>)
 8019316:	f002 fe35 	bl	801bf84 <xTimerPendFunctionCallFromISR>
 801931a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 801931c:	68fb      	ldr	r3, [r7, #12]
	}
 801931e:	4618      	mov	r0, r3
 8019320:	3710      	adds	r7, #16
 8019322:	46bd      	mov	sp, r7
 8019324:	bd80      	pop	{r7, pc}
 8019326:	bf00      	nop
 8019328:	080194a5 	.word	0x080194a5

0801932c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 801932c:	b480      	push	{r7}
 801932e:	b089      	sub	sp, #36	; 0x24
 8019330:	af00      	add	r7, sp, #0
 8019332:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8019338:	f3ef 8211 	mrs	r2, BASEPRI
 801933c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019340:	f383 8811 	msr	BASEPRI, r3
 8019344:	f3bf 8f6f 	isb	sy
 8019348:	f3bf 8f4f 	dsb	sy
 801934c:	60fa      	str	r2, [r7, #12]
 801934e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8019350:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019352:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8019354:	69fb      	ldr	r3, [r7, #28]
 8019356:	681b      	ldr	r3, [r3, #0]
 8019358:	617b      	str	r3, [r7, #20]
 801935a:	69bb      	ldr	r3, [r7, #24]
 801935c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801935e:	693b      	ldr	r3, [r7, #16]
 8019360:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8019364:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8019366:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8019368:	4618      	mov	r0, r3
 801936a:	3724      	adds	r7, #36	; 0x24
 801936c:	46bd      	mov	sp, r7
 801936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019372:	4770      	bx	lr

08019374 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8019374:	b580      	push	{r7, lr}
 8019376:	b08e      	sub	sp, #56	; 0x38
 8019378:	af00      	add	r7, sp, #0
 801937a:	6078      	str	r0, [r7, #4]
 801937c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801937e:	2300      	movs	r3, #0
 8019380:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8019386:	2300      	movs	r3, #0
 8019388:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	2b00      	cmp	r3, #0
 801938e:	d10a      	bne.n	80193a6 <xEventGroupSetBits+0x32>
	__asm volatile
 8019390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019394:	f383 8811 	msr	BASEPRI, r3
 8019398:	f3bf 8f6f 	isb	sy
 801939c:	f3bf 8f4f 	dsb	sy
 80193a0:	613b      	str	r3, [r7, #16]
}
 80193a2:	bf00      	nop
 80193a4:	e7fe      	b.n	80193a4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80193a6:	683b      	ldr	r3, [r7, #0]
 80193a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d00a      	beq.n	80193c6 <xEventGroupSetBits+0x52>
	__asm volatile
 80193b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193b4:	f383 8811 	msr	BASEPRI, r3
 80193b8:	f3bf 8f6f 	isb	sy
 80193bc:	f3bf 8f4f 	dsb	sy
 80193c0:	60fb      	str	r3, [r7, #12]
}
 80193c2:	bf00      	nop
 80193c4:	e7fe      	b.n	80193c4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80193c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193c8:	3304      	adds	r3, #4
 80193ca:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80193cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193ce:	3308      	adds	r3, #8
 80193d0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80193d2:	f001 fbf1 	bl	801abb8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80193d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193d8:	68db      	ldr	r3, [r3, #12]
 80193da:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80193dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193de:	681a      	ldr	r2, [r3, #0]
 80193e0:	683b      	ldr	r3, [r7, #0]
 80193e2:	431a      	orrs	r2, r3
 80193e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193e6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80193e8:	e03c      	b.n	8019464 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80193ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80193ec:	685b      	ldr	r3, [r3, #4]
 80193ee:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80193f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80193f6:	2300      	movs	r3, #0
 80193f8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80193fa:	69bb      	ldr	r3, [r7, #24]
 80193fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8019400:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8019402:	69bb      	ldr	r3, [r7, #24]
 8019404:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8019408:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801940a:	697b      	ldr	r3, [r7, #20]
 801940c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8019410:	2b00      	cmp	r3, #0
 8019412:	d108      	bne.n	8019426 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8019414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019416:	681a      	ldr	r2, [r3, #0]
 8019418:	69bb      	ldr	r3, [r7, #24]
 801941a:	4013      	ands	r3, r2
 801941c:	2b00      	cmp	r3, #0
 801941e:	d00b      	beq.n	8019438 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8019420:	2301      	movs	r3, #1
 8019422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019424:	e008      	b.n	8019438 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8019426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019428:	681a      	ldr	r2, [r3, #0]
 801942a:	69bb      	ldr	r3, [r7, #24]
 801942c:	4013      	ands	r3, r2
 801942e:	69ba      	ldr	r2, [r7, #24]
 8019430:	429a      	cmp	r2, r3
 8019432:	d101      	bne.n	8019438 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8019434:	2301      	movs	r3, #1
 8019436:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8019438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801943a:	2b00      	cmp	r3, #0
 801943c:	d010      	beq.n	8019460 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801943e:	697b      	ldr	r3, [r7, #20]
 8019440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019444:	2b00      	cmp	r3, #0
 8019446:	d003      	beq.n	8019450 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8019448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801944a:	69bb      	ldr	r3, [r7, #24]
 801944c:	4313      	orrs	r3, r2
 801944e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8019450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8019458:	4619      	mov	r1, r3
 801945a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801945c:	f001 fe82 	bl	801b164 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8019460:	69fb      	ldr	r3, [r7, #28]
 8019462:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8019464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019466:	6a3b      	ldr	r3, [r7, #32]
 8019468:	429a      	cmp	r2, r3
 801946a:	d1be      	bne.n	80193ea <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801946e:	681a      	ldr	r2, [r3, #0]
 8019470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019472:	43db      	mvns	r3, r3
 8019474:	401a      	ands	r2, r3
 8019476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019478:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801947a:	f001 fbab 	bl	801abd4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801947e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019480:	681b      	ldr	r3, [r3, #0]
}
 8019482:	4618      	mov	r0, r3
 8019484:	3738      	adds	r7, #56	; 0x38
 8019486:	46bd      	mov	sp, r7
 8019488:	bd80      	pop	{r7, pc}

0801948a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801948a:	b580      	push	{r7, lr}
 801948c:	b082      	sub	sp, #8
 801948e:	af00      	add	r7, sp, #0
 8019490:	6078      	str	r0, [r7, #4]
 8019492:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8019494:	6839      	ldr	r1, [r7, #0]
 8019496:	6878      	ldr	r0, [r7, #4]
 8019498:	f7ff ff6c 	bl	8019374 <xEventGroupSetBits>
}
 801949c:	bf00      	nop
 801949e:	3708      	adds	r7, #8
 80194a0:	46bd      	mov	sp, r7
 80194a2:	bd80      	pop	{r7, pc}

080194a4 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80194a4:	b580      	push	{r7, lr}
 80194a6:	b082      	sub	sp, #8
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	6078      	str	r0, [r7, #4]
 80194ac:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80194ae:	6839      	ldr	r1, [r7, #0]
 80194b0:	6878      	ldr	r0, [r7, #4]
 80194b2:	f7ff feef 	bl	8019294 <xEventGroupClearBits>
}
 80194b6:	bf00      	nop
 80194b8:	3708      	adds	r7, #8
 80194ba:	46bd      	mov	sp, r7
 80194bc:	bd80      	pop	{r7, pc}

080194be <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80194be:	b480      	push	{r7}
 80194c0:	b087      	sub	sp, #28
 80194c2:	af00      	add	r7, sp, #0
 80194c4:	60f8      	str	r0, [r7, #12]
 80194c6:	60b9      	str	r1, [r7, #8]
 80194c8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80194ca:	2300      	movs	r3, #0
 80194cc:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d107      	bne.n	80194e4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80194d4:	68fa      	ldr	r2, [r7, #12]
 80194d6:	68bb      	ldr	r3, [r7, #8]
 80194d8:	4013      	ands	r3, r2
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d00a      	beq.n	80194f4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80194de:	2301      	movs	r3, #1
 80194e0:	617b      	str	r3, [r7, #20]
 80194e2:	e007      	b.n	80194f4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80194e4:	68fa      	ldr	r2, [r7, #12]
 80194e6:	68bb      	ldr	r3, [r7, #8]
 80194e8:	4013      	ands	r3, r2
 80194ea:	68ba      	ldr	r2, [r7, #8]
 80194ec:	429a      	cmp	r2, r3
 80194ee:	d101      	bne.n	80194f4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80194f0:	2301      	movs	r3, #1
 80194f2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80194f4:	697b      	ldr	r3, [r7, #20]
}
 80194f6:	4618      	mov	r0, r3
 80194f8:	371c      	adds	r7, #28
 80194fa:	46bd      	mov	sp, r7
 80194fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019500:	4770      	bx	lr
	...

08019504 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019504:	b580      	push	{r7, lr}
 8019506:	b086      	sub	sp, #24
 8019508:	af00      	add	r7, sp, #0
 801950a:	60f8      	str	r0, [r7, #12]
 801950c:	60b9      	str	r1, [r7, #8]
 801950e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	68ba      	ldr	r2, [r7, #8]
 8019514:	68f9      	ldr	r1, [r7, #12]
 8019516:	4804      	ldr	r0, [pc, #16]	; (8019528 <xEventGroupSetBitsFromISR+0x24>)
 8019518:	f002 fd34 	bl	801bf84 <xTimerPendFunctionCallFromISR>
 801951c:	6178      	str	r0, [r7, #20]

		return xReturn;
 801951e:	697b      	ldr	r3, [r7, #20]
	}
 8019520:	4618      	mov	r0, r3
 8019522:	3718      	adds	r7, #24
 8019524:	46bd      	mov	sp, r7
 8019526:	bd80      	pop	{r7, pc}
 8019528:	0801948b 	.word	0x0801948b

0801952c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801952c:	b480      	push	{r7}
 801952e:	b083      	sub	sp, #12
 8019530:	af00      	add	r7, sp, #0
 8019532:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	f103 0208 	add.w	r2, r3, #8
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	f04f 32ff 	mov.w	r2, #4294967295
 8019544:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	f103 0208 	add.w	r2, r3, #8
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	f103 0208 	add.w	r2, r3, #8
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	2200      	movs	r2, #0
 801955e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8019560:	bf00      	nop
 8019562:	370c      	adds	r7, #12
 8019564:	46bd      	mov	sp, r7
 8019566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801956a:	4770      	bx	lr

0801956c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801956c:	b480      	push	{r7}
 801956e:	b083      	sub	sp, #12
 8019570:	af00      	add	r7, sp, #0
 8019572:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	2200      	movs	r2, #0
 8019578:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801957a:	bf00      	nop
 801957c:	370c      	adds	r7, #12
 801957e:	46bd      	mov	sp, r7
 8019580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019584:	4770      	bx	lr

08019586 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019586:	b480      	push	{r7}
 8019588:	b085      	sub	sp, #20
 801958a:	af00      	add	r7, sp, #0
 801958c:	6078      	str	r0, [r7, #4]
 801958e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	685b      	ldr	r3, [r3, #4]
 8019594:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8019596:	683b      	ldr	r3, [r7, #0]
 8019598:	68fa      	ldr	r2, [r7, #12]
 801959a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801959c:	68fb      	ldr	r3, [r7, #12]
 801959e:	689a      	ldr	r2, [r3, #8]
 80195a0:	683b      	ldr	r3, [r7, #0]
 80195a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80195a4:	68fb      	ldr	r3, [r7, #12]
 80195a6:	689b      	ldr	r3, [r3, #8]
 80195a8:	683a      	ldr	r2, [r7, #0]
 80195aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	683a      	ldr	r2, [r7, #0]
 80195b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80195b2:	683b      	ldr	r3, [r7, #0]
 80195b4:	687a      	ldr	r2, [r7, #4]
 80195b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	1c5a      	adds	r2, r3, #1
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	601a      	str	r2, [r3, #0]
}
 80195c2:	bf00      	nop
 80195c4:	3714      	adds	r7, #20
 80195c6:	46bd      	mov	sp, r7
 80195c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195cc:	4770      	bx	lr

080195ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80195ce:	b480      	push	{r7}
 80195d0:	b085      	sub	sp, #20
 80195d2:	af00      	add	r7, sp, #0
 80195d4:	6078      	str	r0, [r7, #4]
 80195d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80195d8:	683b      	ldr	r3, [r7, #0]
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80195de:	68bb      	ldr	r3, [r7, #8]
 80195e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80195e4:	d103      	bne.n	80195ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	691b      	ldr	r3, [r3, #16]
 80195ea:	60fb      	str	r3, [r7, #12]
 80195ec:	e00c      	b.n	8019608 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	3308      	adds	r3, #8
 80195f2:	60fb      	str	r3, [r7, #12]
 80195f4:	e002      	b.n	80195fc <vListInsert+0x2e>
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	685b      	ldr	r3, [r3, #4]
 80195fa:	60fb      	str	r3, [r7, #12]
 80195fc:	68fb      	ldr	r3, [r7, #12]
 80195fe:	685b      	ldr	r3, [r3, #4]
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	68ba      	ldr	r2, [r7, #8]
 8019604:	429a      	cmp	r2, r3
 8019606:	d2f6      	bcs.n	80195f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	685a      	ldr	r2, [r3, #4]
 801960c:	683b      	ldr	r3, [r7, #0]
 801960e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8019610:	683b      	ldr	r3, [r7, #0]
 8019612:	685b      	ldr	r3, [r3, #4]
 8019614:	683a      	ldr	r2, [r7, #0]
 8019616:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8019618:	683b      	ldr	r3, [r7, #0]
 801961a:	68fa      	ldr	r2, [r7, #12]
 801961c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	683a      	ldr	r2, [r7, #0]
 8019622:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8019624:	683b      	ldr	r3, [r7, #0]
 8019626:	687a      	ldr	r2, [r7, #4]
 8019628:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	1c5a      	adds	r2, r3, #1
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	601a      	str	r2, [r3, #0]
}
 8019634:	bf00      	nop
 8019636:	3714      	adds	r7, #20
 8019638:	46bd      	mov	sp, r7
 801963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801963e:	4770      	bx	lr

08019640 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8019640:	b480      	push	{r7}
 8019642:	b085      	sub	sp, #20
 8019644:	af00      	add	r7, sp, #0
 8019646:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	691b      	ldr	r3, [r3, #16]
 801964c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	685b      	ldr	r3, [r3, #4]
 8019652:	687a      	ldr	r2, [r7, #4]
 8019654:	6892      	ldr	r2, [r2, #8]
 8019656:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	689b      	ldr	r3, [r3, #8]
 801965c:	687a      	ldr	r2, [r7, #4]
 801965e:	6852      	ldr	r2, [r2, #4]
 8019660:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	685b      	ldr	r3, [r3, #4]
 8019666:	687a      	ldr	r2, [r7, #4]
 8019668:	429a      	cmp	r2, r3
 801966a:	d103      	bne.n	8019674 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	689a      	ldr	r2, [r3, #8]
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	2200      	movs	r2, #0
 8019678:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	1e5a      	subs	r2, r3, #1
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	681b      	ldr	r3, [r3, #0]
}
 8019688:	4618      	mov	r0, r3
 801968a:	3714      	adds	r7, #20
 801968c:	46bd      	mov	sp, r7
 801968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019692:	4770      	bx	lr

08019694 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8019694:	b580      	push	{r7, lr}
 8019696:	b084      	sub	sp, #16
 8019698:	af00      	add	r7, sp, #0
 801969a:	6078      	str	r0, [r7, #4]
 801969c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80196a2:	68fb      	ldr	r3, [r7, #12]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d10a      	bne.n	80196be <xQueueGenericReset+0x2a>
	__asm volatile
 80196a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196ac:	f383 8811 	msr	BASEPRI, r3
 80196b0:	f3bf 8f6f 	isb	sy
 80196b4:	f3bf 8f4f 	dsb	sy
 80196b8:	60bb      	str	r3, [r7, #8]
}
 80196ba:	bf00      	nop
 80196bc:	e7fe      	b.n	80196bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80196be:	f002 fdb1 	bl	801c224 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	681a      	ldr	r2, [r3, #0]
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80196ca:	68f9      	ldr	r1, [r7, #12]
 80196cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80196ce:	fb01 f303 	mul.w	r3, r1, r3
 80196d2:	441a      	add	r2, r3
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80196d8:	68fb      	ldr	r3, [r7, #12]
 80196da:	2200      	movs	r2, #0
 80196dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80196de:	68fb      	ldr	r3, [r7, #12]
 80196e0:	681a      	ldr	r2, [r3, #0]
 80196e2:	68fb      	ldr	r3, [r7, #12]
 80196e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80196e6:	68fb      	ldr	r3, [r7, #12]
 80196e8:	681a      	ldr	r2, [r3, #0]
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80196ee:	3b01      	subs	r3, #1
 80196f0:	68f9      	ldr	r1, [r7, #12]
 80196f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80196f4:	fb01 f303 	mul.w	r3, r1, r3
 80196f8:	441a      	add	r2, r3
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	22ff      	movs	r2, #255	; 0xff
 8019702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	22ff      	movs	r2, #255	; 0xff
 801970a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801970e:	683b      	ldr	r3, [r7, #0]
 8019710:	2b00      	cmp	r3, #0
 8019712:	d114      	bne.n	801973e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	691b      	ldr	r3, [r3, #16]
 8019718:	2b00      	cmp	r3, #0
 801971a:	d01a      	beq.n	8019752 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	3310      	adds	r3, #16
 8019720:	4618      	mov	r0, r3
 8019722:	f001 fcbb 	bl	801b09c <xTaskRemoveFromEventList>
 8019726:	4603      	mov	r3, r0
 8019728:	2b00      	cmp	r3, #0
 801972a:	d012      	beq.n	8019752 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801972c:	4b0c      	ldr	r3, [pc, #48]	; (8019760 <xQueueGenericReset+0xcc>)
 801972e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019732:	601a      	str	r2, [r3, #0]
 8019734:	f3bf 8f4f 	dsb	sy
 8019738:	f3bf 8f6f 	isb	sy
 801973c:	e009      	b.n	8019752 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	3310      	adds	r3, #16
 8019742:	4618      	mov	r0, r3
 8019744:	f7ff fef2 	bl	801952c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8019748:	68fb      	ldr	r3, [r7, #12]
 801974a:	3324      	adds	r3, #36	; 0x24
 801974c:	4618      	mov	r0, r3
 801974e:	f7ff feed 	bl	801952c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8019752:	f002 fd97 	bl	801c284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8019756:	2301      	movs	r3, #1
}
 8019758:	4618      	mov	r0, r3
 801975a:	3710      	adds	r7, #16
 801975c:	46bd      	mov	sp, r7
 801975e:	bd80      	pop	{r7, pc}
 8019760:	e000ed04 	.word	0xe000ed04

08019764 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8019764:	b580      	push	{r7, lr}
 8019766:	b08e      	sub	sp, #56	; 0x38
 8019768:	af02      	add	r7, sp, #8
 801976a:	60f8      	str	r0, [r7, #12]
 801976c:	60b9      	str	r1, [r7, #8]
 801976e:	607a      	str	r2, [r7, #4]
 8019770:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019772:	68fb      	ldr	r3, [r7, #12]
 8019774:	2b00      	cmp	r3, #0
 8019776:	d10a      	bne.n	801978e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8019778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801977c:	f383 8811 	msr	BASEPRI, r3
 8019780:	f3bf 8f6f 	isb	sy
 8019784:	f3bf 8f4f 	dsb	sy
 8019788:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801978a:	bf00      	nop
 801978c:	e7fe      	b.n	801978c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801978e:	683b      	ldr	r3, [r7, #0]
 8019790:	2b00      	cmp	r3, #0
 8019792:	d10a      	bne.n	80197aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8019794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019798:	f383 8811 	msr	BASEPRI, r3
 801979c:	f3bf 8f6f 	isb	sy
 80197a0:	f3bf 8f4f 	dsb	sy
 80197a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80197a6:	bf00      	nop
 80197a8:	e7fe      	b.n	80197a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d002      	beq.n	80197b6 <xQueueGenericCreateStatic+0x52>
 80197b0:	68bb      	ldr	r3, [r7, #8]
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	d001      	beq.n	80197ba <xQueueGenericCreateStatic+0x56>
 80197b6:	2301      	movs	r3, #1
 80197b8:	e000      	b.n	80197bc <xQueueGenericCreateStatic+0x58>
 80197ba:	2300      	movs	r3, #0
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d10a      	bne.n	80197d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80197c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197c4:	f383 8811 	msr	BASEPRI, r3
 80197c8:	f3bf 8f6f 	isb	sy
 80197cc:	f3bf 8f4f 	dsb	sy
 80197d0:	623b      	str	r3, [r7, #32]
}
 80197d2:	bf00      	nop
 80197d4:	e7fe      	b.n	80197d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d102      	bne.n	80197e2 <xQueueGenericCreateStatic+0x7e>
 80197dc:	68bb      	ldr	r3, [r7, #8]
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d101      	bne.n	80197e6 <xQueueGenericCreateStatic+0x82>
 80197e2:	2301      	movs	r3, #1
 80197e4:	e000      	b.n	80197e8 <xQueueGenericCreateStatic+0x84>
 80197e6:	2300      	movs	r3, #0
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d10a      	bne.n	8019802 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80197ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197f0:	f383 8811 	msr	BASEPRI, r3
 80197f4:	f3bf 8f6f 	isb	sy
 80197f8:	f3bf 8f4f 	dsb	sy
 80197fc:	61fb      	str	r3, [r7, #28]
}
 80197fe:	bf00      	nop
 8019800:	e7fe      	b.n	8019800 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8019802:	2350      	movs	r3, #80	; 0x50
 8019804:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8019806:	697b      	ldr	r3, [r7, #20]
 8019808:	2b50      	cmp	r3, #80	; 0x50
 801980a:	d00a      	beq.n	8019822 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019810:	f383 8811 	msr	BASEPRI, r3
 8019814:	f3bf 8f6f 	isb	sy
 8019818:	f3bf 8f4f 	dsb	sy
 801981c:	61bb      	str	r3, [r7, #24]
}
 801981e:	bf00      	nop
 8019820:	e7fe      	b.n	8019820 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8019822:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019824:	683b      	ldr	r3, [r7, #0]
 8019826:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8019828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801982a:	2b00      	cmp	r3, #0
 801982c:	d00d      	beq.n	801984a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801982e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019830:	2201      	movs	r2, #1
 8019832:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019836:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801983a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801983c:	9300      	str	r3, [sp, #0]
 801983e:	4613      	mov	r3, r2
 8019840:	687a      	ldr	r2, [r7, #4]
 8019842:	68b9      	ldr	r1, [r7, #8]
 8019844:	68f8      	ldr	r0, [r7, #12]
 8019846:	f000 f83f 	bl	80198c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801984a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801984c:	4618      	mov	r0, r3
 801984e:	3730      	adds	r7, #48	; 0x30
 8019850:	46bd      	mov	sp, r7
 8019852:	bd80      	pop	{r7, pc}

08019854 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8019854:	b580      	push	{r7, lr}
 8019856:	b08a      	sub	sp, #40	; 0x28
 8019858:	af02      	add	r7, sp, #8
 801985a:	60f8      	str	r0, [r7, #12]
 801985c:	60b9      	str	r1, [r7, #8]
 801985e:	4613      	mov	r3, r2
 8019860:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019862:	68fb      	ldr	r3, [r7, #12]
 8019864:	2b00      	cmp	r3, #0
 8019866:	d10a      	bne.n	801987e <xQueueGenericCreate+0x2a>
	__asm volatile
 8019868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801986c:	f383 8811 	msr	BASEPRI, r3
 8019870:	f3bf 8f6f 	isb	sy
 8019874:	f3bf 8f4f 	dsb	sy
 8019878:	613b      	str	r3, [r7, #16]
}
 801987a:	bf00      	nop
 801987c:	e7fe      	b.n	801987c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801987e:	68fb      	ldr	r3, [r7, #12]
 8019880:	68ba      	ldr	r2, [r7, #8]
 8019882:	fb02 f303 	mul.w	r3, r2, r3
 8019886:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8019888:	69fb      	ldr	r3, [r7, #28]
 801988a:	3350      	adds	r3, #80	; 0x50
 801988c:	4618      	mov	r0, r3
 801988e:	f002 fdeb 	bl	801c468 <pvPortMalloc>
 8019892:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8019894:	69bb      	ldr	r3, [r7, #24]
 8019896:	2b00      	cmp	r3, #0
 8019898:	d011      	beq.n	80198be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801989a:	69bb      	ldr	r3, [r7, #24]
 801989c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801989e:	697b      	ldr	r3, [r7, #20]
 80198a0:	3350      	adds	r3, #80	; 0x50
 80198a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80198a4:	69bb      	ldr	r3, [r7, #24]
 80198a6:	2200      	movs	r2, #0
 80198a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80198ac:	79fa      	ldrb	r2, [r7, #7]
 80198ae:	69bb      	ldr	r3, [r7, #24]
 80198b0:	9300      	str	r3, [sp, #0]
 80198b2:	4613      	mov	r3, r2
 80198b4:	697a      	ldr	r2, [r7, #20]
 80198b6:	68b9      	ldr	r1, [r7, #8]
 80198b8:	68f8      	ldr	r0, [r7, #12]
 80198ba:	f000 f805 	bl	80198c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80198be:	69bb      	ldr	r3, [r7, #24]
	}
 80198c0:	4618      	mov	r0, r3
 80198c2:	3720      	adds	r7, #32
 80198c4:	46bd      	mov	sp, r7
 80198c6:	bd80      	pop	{r7, pc}

080198c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80198c8:	b580      	push	{r7, lr}
 80198ca:	b084      	sub	sp, #16
 80198cc:	af00      	add	r7, sp, #0
 80198ce:	60f8      	str	r0, [r7, #12]
 80198d0:	60b9      	str	r1, [r7, #8]
 80198d2:	607a      	str	r2, [r7, #4]
 80198d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80198d6:	68bb      	ldr	r3, [r7, #8]
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d103      	bne.n	80198e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80198dc:	69bb      	ldr	r3, [r7, #24]
 80198de:	69ba      	ldr	r2, [r7, #24]
 80198e0:	601a      	str	r2, [r3, #0]
 80198e2:	e002      	b.n	80198ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80198e4:	69bb      	ldr	r3, [r7, #24]
 80198e6:	687a      	ldr	r2, [r7, #4]
 80198e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80198ea:	69bb      	ldr	r3, [r7, #24]
 80198ec:	68fa      	ldr	r2, [r7, #12]
 80198ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80198f0:	69bb      	ldr	r3, [r7, #24]
 80198f2:	68ba      	ldr	r2, [r7, #8]
 80198f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80198f6:	2101      	movs	r1, #1
 80198f8:	69b8      	ldr	r0, [r7, #24]
 80198fa:	f7ff fecb 	bl	8019694 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80198fe:	69bb      	ldr	r3, [r7, #24]
 8019900:	78fa      	ldrb	r2, [r7, #3]
 8019902:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8019906:	bf00      	nop
 8019908:	3710      	adds	r7, #16
 801990a:	46bd      	mov	sp, r7
 801990c:	bd80      	pop	{r7, pc}

0801990e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801990e:	b580      	push	{r7, lr}
 8019910:	b082      	sub	sp, #8
 8019912:	af00      	add	r7, sp, #0
 8019914:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	2b00      	cmp	r3, #0
 801991a:	d00e      	beq.n	801993a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	2200      	movs	r2, #0
 8019920:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	2200      	movs	r2, #0
 8019926:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	2200      	movs	r2, #0
 801992c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801992e:	2300      	movs	r3, #0
 8019930:	2200      	movs	r2, #0
 8019932:	2100      	movs	r1, #0
 8019934:	6878      	ldr	r0, [r7, #4]
 8019936:	f000 f8a1 	bl	8019a7c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801993a:	bf00      	nop
 801993c:	3708      	adds	r7, #8
 801993e:	46bd      	mov	sp, r7
 8019940:	bd80      	pop	{r7, pc}

08019942 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8019942:	b580      	push	{r7, lr}
 8019944:	b086      	sub	sp, #24
 8019946:	af00      	add	r7, sp, #0
 8019948:	4603      	mov	r3, r0
 801994a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801994c:	2301      	movs	r3, #1
 801994e:	617b      	str	r3, [r7, #20]
 8019950:	2300      	movs	r3, #0
 8019952:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8019954:	79fb      	ldrb	r3, [r7, #7]
 8019956:	461a      	mov	r2, r3
 8019958:	6939      	ldr	r1, [r7, #16]
 801995a:	6978      	ldr	r0, [r7, #20]
 801995c:	f7ff ff7a 	bl	8019854 <xQueueGenericCreate>
 8019960:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8019962:	68f8      	ldr	r0, [r7, #12]
 8019964:	f7ff ffd3 	bl	801990e <prvInitialiseMutex>

		return xNewQueue;
 8019968:	68fb      	ldr	r3, [r7, #12]
	}
 801996a:	4618      	mov	r0, r3
 801996c:	3718      	adds	r7, #24
 801996e:	46bd      	mov	sp, r7
 8019970:	bd80      	pop	{r7, pc}

08019972 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8019972:	b580      	push	{r7, lr}
 8019974:	b088      	sub	sp, #32
 8019976:	af02      	add	r7, sp, #8
 8019978:	4603      	mov	r3, r0
 801997a:	6039      	str	r1, [r7, #0]
 801997c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801997e:	2301      	movs	r3, #1
 8019980:	617b      	str	r3, [r7, #20]
 8019982:	2300      	movs	r3, #0
 8019984:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8019986:	79fb      	ldrb	r3, [r7, #7]
 8019988:	9300      	str	r3, [sp, #0]
 801998a:	683b      	ldr	r3, [r7, #0]
 801998c:	2200      	movs	r2, #0
 801998e:	6939      	ldr	r1, [r7, #16]
 8019990:	6978      	ldr	r0, [r7, #20]
 8019992:	f7ff fee7 	bl	8019764 <xQueueGenericCreateStatic>
 8019996:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8019998:	68f8      	ldr	r0, [r7, #12]
 801999a:	f7ff ffb8 	bl	801990e <prvInitialiseMutex>

		return xNewQueue;
 801999e:	68fb      	ldr	r3, [r7, #12]
	}
 80199a0:	4618      	mov	r0, r3
 80199a2:	3718      	adds	r7, #24
 80199a4:	46bd      	mov	sp, r7
 80199a6:	bd80      	pop	{r7, pc}

080199a8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80199a8:	b590      	push	{r4, r7, lr}
 80199aa:	b087      	sub	sp, #28
 80199ac:	af00      	add	r7, sp, #0
 80199ae:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80199b0:	687b      	ldr	r3, [r7, #4]
 80199b2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80199b4:	693b      	ldr	r3, [r7, #16]
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d10a      	bne.n	80199d0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80199ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199be:	f383 8811 	msr	BASEPRI, r3
 80199c2:	f3bf 8f6f 	isb	sy
 80199c6:	f3bf 8f4f 	dsb	sy
 80199ca:	60fb      	str	r3, [r7, #12]
}
 80199cc:	bf00      	nop
 80199ce:	e7fe      	b.n	80199ce <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80199d0:	693b      	ldr	r3, [r7, #16]
 80199d2:	689c      	ldr	r4, [r3, #8]
 80199d4:	f001 fd82 	bl	801b4dc <xTaskGetCurrentTaskHandle>
 80199d8:	4603      	mov	r3, r0
 80199da:	429c      	cmp	r4, r3
 80199dc:	d111      	bne.n	8019a02 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80199de:	693b      	ldr	r3, [r7, #16]
 80199e0:	68db      	ldr	r3, [r3, #12]
 80199e2:	1e5a      	subs	r2, r3, #1
 80199e4:	693b      	ldr	r3, [r7, #16]
 80199e6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80199e8:	693b      	ldr	r3, [r7, #16]
 80199ea:	68db      	ldr	r3, [r3, #12]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d105      	bne.n	80199fc <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80199f0:	2300      	movs	r3, #0
 80199f2:	2200      	movs	r2, #0
 80199f4:	2100      	movs	r1, #0
 80199f6:	6938      	ldr	r0, [r7, #16]
 80199f8:	f000 f840 	bl	8019a7c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80199fc:	2301      	movs	r3, #1
 80199fe:	617b      	str	r3, [r7, #20]
 8019a00:	e001      	b.n	8019a06 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8019a02:	2300      	movs	r3, #0
 8019a04:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8019a06:	697b      	ldr	r3, [r7, #20]
	}
 8019a08:	4618      	mov	r0, r3
 8019a0a:	371c      	adds	r7, #28
 8019a0c:	46bd      	mov	sp, r7
 8019a0e:	bd90      	pop	{r4, r7, pc}

08019a10 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8019a10:	b590      	push	{r4, r7, lr}
 8019a12:	b087      	sub	sp, #28
 8019a14:	af00      	add	r7, sp, #0
 8019a16:	6078      	str	r0, [r7, #4]
 8019a18:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8019a1e:	693b      	ldr	r3, [r7, #16]
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d10a      	bne.n	8019a3a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8019a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a28:	f383 8811 	msr	BASEPRI, r3
 8019a2c:	f3bf 8f6f 	isb	sy
 8019a30:	f3bf 8f4f 	dsb	sy
 8019a34:	60fb      	str	r3, [r7, #12]
}
 8019a36:	bf00      	nop
 8019a38:	e7fe      	b.n	8019a38 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8019a3a:	693b      	ldr	r3, [r7, #16]
 8019a3c:	689c      	ldr	r4, [r3, #8]
 8019a3e:	f001 fd4d 	bl	801b4dc <xTaskGetCurrentTaskHandle>
 8019a42:	4603      	mov	r3, r0
 8019a44:	429c      	cmp	r4, r3
 8019a46:	d107      	bne.n	8019a58 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8019a48:	693b      	ldr	r3, [r7, #16]
 8019a4a:	68db      	ldr	r3, [r3, #12]
 8019a4c:	1c5a      	adds	r2, r3, #1
 8019a4e:	693b      	ldr	r3, [r7, #16]
 8019a50:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8019a52:	2301      	movs	r3, #1
 8019a54:	617b      	str	r3, [r7, #20]
 8019a56:	e00c      	b.n	8019a72 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8019a58:	6839      	ldr	r1, [r7, #0]
 8019a5a:	6938      	ldr	r0, [r7, #16]
 8019a5c:	f000 fa88 	bl	8019f70 <xQueueSemaphoreTake>
 8019a60:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8019a62:	697b      	ldr	r3, [r7, #20]
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d004      	beq.n	8019a72 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8019a68:	693b      	ldr	r3, [r7, #16]
 8019a6a:	68db      	ldr	r3, [r3, #12]
 8019a6c:	1c5a      	adds	r2, r3, #1
 8019a6e:	693b      	ldr	r3, [r7, #16]
 8019a70:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8019a72:	697b      	ldr	r3, [r7, #20]
	}
 8019a74:	4618      	mov	r0, r3
 8019a76:	371c      	adds	r7, #28
 8019a78:	46bd      	mov	sp, r7
 8019a7a:	bd90      	pop	{r4, r7, pc}

08019a7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8019a7c:	b580      	push	{r7, lr}
 8019a7e:	b08e      	sub	sp, #56	; 0x38
 8019a80:	af00      	add	r7, sp, #0
 8019a82:	60f8      	str	r0, [r7, #12]
 8019a84:	60b9      	str	r1, [r7, #8]
 8019a86:	607a      	str	r2, [r7, #4]
 8019a88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8019a8a:	2300      	movs	r3, #0
 8019a8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8019a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d10a      	bne.n	8019aae <xQueueGenericSend+0x32>
	__asm volatile
 8019a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a9c:	f383 8811 	msr	BASEPRI, r3
 8019aa0:	f3bf 8f6f 	isb	sy
 8019aa4:	f3bf 8f4f 	dsb	sy
 8019aa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8019aaa:	bf00      	nop
 8019aac:	e7fe      	b.n	8019aac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019aae:	68bb      	ldr	r3, [r7, #8]
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	d103      	bne.n	8019abc <xQueueGenericSend+0x40>
 8019ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	d101      	bne.n	8019ac0 <xQueueGenericSend+0x44>
 8019abc:	2301      	movs	r3, #1
 8019abe:	e000      	b.n	8019ac2 <xQueueGenericSend+0x46>
 8019ac0:	2300      	movs	r3, #0
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d10a      	bne.n	8019adc <xQueueGenericSend+0x60>
	__asm volatile
 8019ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019aca:	f383 8811 	msr	BASEPRI, r3
 8019ace:	f3bf 8f6f 	isb	sy
 8019ad2:	f3bf 8f4f 	dsb	sy
 8019ad6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019ad8:	bf00      	nop
 8019ada:	e7fe      	b.n	8019ada <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019adc:	683b      	ldr	r3, [r7, #0]
 8019ade:	2b02      	cmp	r3, #2
 8019ae0:	d103      	bne.n	8019aea <xQueueGenericSend+0x6e>
 8019ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019ae6:	2b01      	cmp	r3, #1
 8019ae8:	d101      	bne.n	8019aee <xQueueGenericSend+0x72>
 8019aea:	2301      	movs	r3, #1
 8019aec:	e000      	b.n	8019af0 <xQueueGenericSend+0x74>
 8019aee:	2300      	movs	r3, #0
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d10a      	bne.n	8019b0a <xQueueGenericSend+0x8e>
	__asm volatile
 8019af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019af8:	f383 8811 	msr	BASEPRI, r3
 8019afc:	f3bf 8f6f 	isb	sy
 8019b00:	f3bf 8f4f 	dsb	sy
 8019b04:	623b      	str	r3, [r7, #32]
}
 8019b06:	bf00      	nop
 8019b08:	e7fe      	b.n	8019b08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019b0a:	f001 fcf7 	bl	801b4fc <xTaskGetSchedulerState>
 8019b0e:	4603      	mov	r3, r0
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d102      	bne.n	8019b1a <xQueueGenericSend+0x9e>
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d101      	bne.n	8019b1e <xQueueGenericSend+0xa2>
 8019b1a:	2301      	movs	r3, #1
 8019b1c:	e000      	b.n	8019b20 <xQueueGenericSend+0xa4>
 8019b1e:	2300      	movs	r3, #0
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d10a      	bne.n	8019b3a <xQueueGenericSend+0xbe>
	__asm volatile
 8019b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b28:	f383 8811 	msr	BASEPRI, r3
 8019b2c:	f3bf 8f6f 	isb	sy
 8019b30:	f3bf 8f4f 	dsb	sy
 8019b34:	61fb      	str	r3, [r7, #28]
}
 8019b36:	bf00      	nop
 8019b38:	e7fe      	b.n	8019b38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019b3a:	f002 fb73 	bl	801c224 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b46:	429a      	cmp	r2, r3
 8019b48:	d302      	bcc.n	8019b50 <xQueueGenericSend+0xd4>
 8019b4a:	683b      	ldr	r3, [r7, #0]
 8019b4c:	2b02      	cmp	r3, #2
 8019b4e:	d129      	bne.n	8019ba4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019b50:	683a      	ldr	r2, [r7, #0]
 8019b52:	68b9      	ldr	r1, [r7, #8]
 8019b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019b56:	f000 fb2f 	bl	801a1b8 <prvCopyDataToQueue>
 8019b5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d010      	beq.n	8019b86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b66:	3324      	adds	r3, #36	; 0x24
 8019b68:	4618      	mov	r0, r3
 8019b6a:	f001 fa97 	bl	801b09c <xTaskRemoveFromEventList>
 8019b6e:	4603      	mov	r3, r0
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d013      	beq.n	8019b9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8019b74:	4b3f      	ldr	r3, [pc, #252]	; (8019c74 <xQueueGenericSend+0x1f8>)
 8019b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019b7a:	601a      	str	r2, [r3, #0]
 8019b7c:	f3bf 8f4f 	dsb	sy
 8019b80:	f3bf 8f6f 	isb	sy
 8019b84:	e00a      	b.n	8019b9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8019b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b88:	2b00      	cmp	r3, #0
 8019b8a:	d007      	beq.n	8019b9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8019b8c:	4b39      	ldr	r3, [pc, #228]	; (8019c74 <xQueueGenericSend+0x1f8>)
 8019b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019b92:	601a      	str	r2, [r3, #0]
 8019b94:	f3bf 8f4f 	dsb	sy
 8019b98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8019b9c:	f002 fb72 	bl	801c284 <vPortExitCritical>
				return pdPASS;
 8019ba0:	2301      	movs	r3, #1
 8019ba2:	e063      	b.n	8019c6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d103      	bne.n	8019bb2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019baa:	f002 fb6b 	bl	801c284 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8019bae:	2300      	movs	r3, #0
 8019bb0:	e05c      	b.n	8019c6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	d106      	bne.n	8019bc6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019bb8:	f107 0314 	add.w	r3, r7, #20
 8019bbc:	4618      	mov	r0, r3
 8019bbe:	f001 fb33 	bl	801b228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019bc2:	2301      	movs	r3, #1
 8019bc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019bc6:	f002 fb5d 	bl	801c284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019bca:	f000 fff5 	bl	801abb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019bce:	f002 fb29 	bl	801c224 <vPortEnterCritical>
 8019bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019bd8:	b25b      	sxtb	r3, r3
 8019bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019bde:	d103      	bne.n	8019be8 <xQueueGenericSend+0x16c>
 8019be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019be2:	2200      	movs	r2, #0
 8019be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019bee:	b25b      	sxtb	r3, r3
 8019bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019bf4:	d103      	bne.n	8019bfe <xQueueGenericSend+0x182>
 8019bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bf8:	2200      	movs	r2, #0
 8019bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019bfe:	f002 fb41 	bl	801c284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019c02:	1d3a      	adds	r2, r7, #4
 8019c04:	f107 0314 	add.w	r3, r7, #20
 8019c08:	4611      	mov	r1, r2
 8019c0a:	4618      	mov	r0, r3
 8019c0c:	f001 fb22 	bl	801b254 <xTaskCheckForTimeOut>
 8019c10:	4603      	mov	r3, r0
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d124      	bne.n	8019c60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8019c16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019c18:	f000 fbc6 	bl	801a3a8 <prvIsQueueFull>
 8019c1c:	4603      	mov	r3, r0
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d018      	beq.n	8019c54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8019c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c24:	3310      	adds	r3, #16
 8019c26:	687a      	ldr	r2, [r7, #4]
 8019c28:	4611      	mov	r1, r2
 8019c2a:	4618      	mov	r0, r3
 8019c2c:	f001 f9aa 	bl	801af84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8019c30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019c32:	f000 fb51 	bl	801a2d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8019c36:	f000 ffcd 	bl	801abd4 <xTaskResumeAll>
 8019c3a:	4603      	mov	r3, r0
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	f47f af7c 	bne.w	8019b3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8019c42:	4b0c      	ldr	r3, [pc, #48]	; (8019c74 <xQueueGenericSend+0x1f8>)
 8019c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019c48:	601a      	str	r2, [r3, #0]
 8019c4a:	f3bf 8f4f 	dsb	sy
 8019c4e:	f3bf 8f6f 	isb	sy
 8019c52:	e772      	b.n	8019b3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8019c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019c56:	f000 fb3f 	bl	801a2d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019c5a:	f000 ffbb 	bl	801abd4 <xTaskResumeAll>
 8019c5e:	e76c      	b.n	8019b3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8019c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019c62:	f000 fb39 	bl	801a2d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019c66:	f000 ffb5 	bl	801abd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8019c6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8019c6c:	4618      	mov	r0, r3
 8019c6e:	3738      	adds	r7, #56	; 0x38
 8019c70:	46bd      	mov	sp, r7
 8019c72:	bd80      	pop	{r7, pc}
 8019c74:	e000ed04 	.word	0xe000ed04

08019c78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8019c78:	b580      	push	{r7, lr}
 8019c7a:	b090      	sub	sp, #64	; 0x40
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	60f8      	str	r0, [r7, #12]
 8019c80:	60b9      	str	r1, [r7, #8]
 8019c82:	607a      	str	r2, [r7, #4]
 8019c84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8019c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d10a      	bne.n	8019ca6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8019c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c94:	f383 8811 	msr	BASEPRI, r3
 8019c98:	f3bf 8f6f 	isb	sy
 8019c9c:	f3bf 8f4f 	dsb	sy
 8019ca0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8019ca2:	bf00      	nop
 8019ca4:	e7fe      	b.n	8019ca4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019ca6:	68bb      	ldr	r3, [r7, #8]
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d103      	bne.n	8019cb4 <xQueueGenericSendFromISR+0x3c>
 8019cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d101      	bne.n	8019cb8 <xQueueGenericSendFromISR+0x40>
 8019cb4:	2301      	movs	r3, #1
 8019cb6:	e000      	b.n	8019cba <xQueueGenericSendFromISR+0x42>
 8019cb8:	2300      	movs	r3, #0
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d10a      	bne.n	8019cd4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8019cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cc2:	f383 8811 	msr	BASEPRI, r3
 8019cc6:	f3bf 8f6f 	isb	sy
 8019cca:	f3bf 8f4f 	dsb	sy
 8019cce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019cd0:	bf00      	nop
 8019cd2:	e7fe      	b.n	8019cd2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019cd4:	683b      	ldr	r3, [r7, #0]
 8019cd6:	2b02      	cmp	r3, #2
 8019cd8:	d103      	bne.n	8019ce2 <xQueueGenericSendFromISR+0x6a>
 8019cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019cde:	2b01      	cmp	r3, #1
 8019ce0:	d101      	bne.n	8019ce6 <xQueueGenericSendFromISR+0x6e>
 8019ce2:	2301      	movs	r3, #1
 8019ce4:	e000      	b.n	8019ce8 <xQueueGenericSendFromISR+0x70>
 8019ce6:	2300      	movs	r3, #0
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d10a      	bne.n	8019d02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8019cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cf0:	f383 8811 	msr	BASEPRI, r3
 8019cf4:	f3bf 8f6f 	isb	sy
 8019cf8:	f3bf 8f4f 	dsb	sy
 8019cfc:	623b      	str	r3, [r7, #32]
}
 8019cfe:	bf00      	nop
 8019d00:	e7fe      	b.n	8019d00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019d02:	f002 fb71 	bl	801c3e8 <vPortValidateInterruptPriority>
	__asm volatile
 8019d06:	f3ef 8211 	mrs	r2, BASEPRI
 8019d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d0e:	f383 8811 	msr	BASEPRI, r3
 8019d12:	f3bf 8f6f 	isb	sy
 8019d16:	f3bf 8f4f 	dsb	sy
 8019d1a:	61fa      	str	r2, [r7, #28]
 8019d1c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8019d1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019d20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d2a:	429a      	cmp	r2, r3
 8019d2c:	d302      	bcc.n	8019d34 <xQueueGenericSendFromISR+0xbc>
 8019d2e:	683b      	ldr	r3, [r7, #0]
 8019d30:	2b02      	cmp	r3, #2
 8019d32:	d12f      	bne.n	8019d94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019d44:	683a      	ldr	r2, [r7, #0]
 8019d46:	68b9      	ldr	r1, [r7, #8]
 8019d48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019d4a:	f000 fa35 	bl	801a1b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019d4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8019d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d56:	d112      	bne.n	8019d7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d016      	beq.n	8019d8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d62:	3324      	adds	r3, #36	; 0x24
 8019d64:	4618      	mov	r0, r3
 8019d66:	f001 f999 	bl	801b09c <xTaskRemoveFromEventList>
 8019d6a:	4603      	mov	r3, r0
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	d00e      	beq.n	8019d8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d00b      	beq.n	8019d8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	2201      	movs	r2, #1
 8019d7a:	601a      	str	r2, [r3, #0]
 8019d7c:	e007      	b.n	8019d8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019d7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8019d82:	3301      	adds	r3, #1
 8019d84:	b2db      	uxtb	r3, r3
 8019d86:	b25a      	sxtb	r2, r3
 8019d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8019d8e:	2301      	movs	r3, #1
 8019d90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8019d92:	e001      	b.n	8019d98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019d94:	2300      	movs	r3, #0
 8019d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d9a:	617b      	str	r3, [r7, #20]
	__asm volatile
 8019d9c:	697b      	ldr	r3, [r7, #20]
 8019d9e:	f383 8811 	msr	BASEPRI, r3
}
 8019da2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8019da6:	4618      	mov	r0, r3
 8019da8:	3740      	adds	r7, #64	; 0x40
 8019daa:	46bd      	mov	sp, r7
 8019dac:	bd80      	pop	{r7, pc}
	...

08019db0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8019db0:	b580      	push	{r7, lr}
 8019db2:	b08c      	sub	sp, #48	; 0x30
 8019db4:	af00      	add	r7, sp, #0
 8019db6:	60f8      	str	r0, [r7, #12]
 8019db8:	60b9      	str	r1, [r7, #8]
 8019dba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8019dbc:	2300      	movs	r3, #0
 8019dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019dc0:	68fb      	ldr	r3, [r7, #12]
 8019dc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d10a      	bne.n	8019de0 <xQueueReceive+0x30>
	__asm volatile
 8019dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019dce:	f383 8811 	msr	BASEPRI, r3
 8019dd2:	f3bf 8f6f 	isb	sy
 8019dd6:	f3bf 8f4f 	dsb	sy
 8019dda:	623b      	str	r3, [r7, #32]
}
 8019ddc:	bf00      	nop
 8019dde:	e7fe      	b.n	8019dde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019de0:	68bb      	ldr	r3, [r7, #8]
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d103      	bne.n	8019dee <xQueueReceive+0x3e>
 8019de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d101      	bne.n	8019df2 <xQueueReceive+0x42>
 8019dee:	2301      	movs	r3, #1
 8019df0:	e000      	b.n	8019df4 <xQueueReceive+0x44>
 8019df2:	2300      	movs	r3, #0
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d10a      	bne.n	8019e0e <xQueueReceive+0x5e>
	__asm volatile
 8019df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019dfc:	f383 8811 	msr	BASEPRI, r3
 8019e00:	f3bf 8f6f 	isb	sy
 8019e04:	f3bf 8f4f 	dsb	sy
 8019e08:	61fb      	str	r3, [r7, #28]
}
 8019e0a:	bf00      	nop
 8019e0c:	e7fe      	b.n	8019e0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019e0e:	f001 fb75 	bl	801b4fc <xTaskGetSchedulerState>
 8019e12:	4603      	mov	r3, r0
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	d102      	bne.n	8019e1e <xQueueReceive+0x6e>
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d101      	bne.n	8019e22 <xQueueReceive+0x72>
 8019e1e:	2301      	movs	r3, #1
 8019e20:	e000      	b.n	8019e24 <xQueueReceive+0x74>
 8019e22:	2300      	movs	r3, #0
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d10a      	bne.n	8019e3e <xQueueReceive+0x8e>
	__asm volatile
 8019e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e2c:	f383 8811 	msr	BASEPRI, r3
 8019e30:	f3bf 8f6f 	isb	sy
 8019e34:	f3bf 8f4f 	dsb	sy
 8019e38:	61bb      	str	r3, [r7, #24]
}
 8019e3a:	bf00      	nop
 8019e3c:	e7fe      	b.n	8019e3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019e3e:	f002 f9f1 	bl	801c224 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d01f      	beq.n	8019e8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019e4e:	68b9      	ldr	r1, [r7, #8]
 8019e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019e52:	f000 fa1b 	bl	801a28c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e58:	1e5a      	subs	r2, r3, #1
 8019e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e60:	691b      	ldr	r3, [r3, #16]
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d00f      	beq.n	8019e86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e68:	3310      	adds	r3, #16
 8019e6a:	4618      	mov	r0, r3
 8019e6c:	f001 f916 	bl	801b09c <xTaskRemoveFromEventList>
 8019e70:	4603      	mov	r3, r0
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d007      	beq.n	8019e86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019e76:	4b3d      	ldr	r3, [pc, #244]	; (8019f6c <xQueueReceive+0x1bc>)
 8019e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019e7c:	601a      	str	r2, [r3, #0]
 8019e7e:	f3bf 8f4f 	dsb	sy
 8019e82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019e86:	f002 f9fd 	bl	801c284 <vPortExitCritical>
				return pdPASS;
 8019e8a:	2301      	movs	r3, #1
 8019e8c:	e069      	b.n	8019f62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d103      	bne.n	8019e9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019e94:	f002 f9f6 	bl	801c284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019e98:	2300      	movs	r3, #0
 8019e9a:	e062      	b.n	8019f62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e9e:	2b00      	cmp	r3, #0
 8019ea0:	d106      	bne.n	8019eb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019ea2:	f107 0310 	add.w	r3, r7, #16
 8019ea6:	4618      	mov	r0, r3
 8019ea8:	f001 f9be 	bl	801b228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019eac:	2301      	movs	r3, #1
 8019eae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019eb0:	f002 f9e8 	bl	801c284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019eb4:	f000 fe80 	bl	801abb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019eb8:	f002 f9b4 	bl	801c224 <vPortEnterCritical>
 8019ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019ec2:	b25b      	sxtb	r3, r3
 8019ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ec8:	d103      	bne.n	8019ed2 <xQueueReceive+0x122>
 8019eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ecc:	2200      	movs	r2, #0
 8019ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019ed8:	b25b      	sxtb	r3, r3
 8019eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ede:	d103      	bne.n	8019ee8 <xQueueReceive+0x138>
 8019ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ee2:	2200      	movs	r2, #0
 8019ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019ee8:	f002 f9cc 	bl	801c284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019eec:	1d3a      	adds	r2, r7, #4
 8019eee:	f107 0310 	add.w	r3, r7, #16
 8019ef2:	4611      	mov	r1, r2
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	f001 f9ad 	bl	801b254 <xTaskCheckForTimeOut>
 8019efa:	4603      	mov	r3, r0
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d123      	bne.n	8019f48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019f02:	f000 fa3b 	bl	801a37c <prvIsQueueEmpty>
 8019f06:	4603      	mov	r3, r0
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d017      	beq.n	8019f3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f0e:	3324      	adds	r3, #36	; 0x24
 8019f10:	687a      	ldr	r2, [r7, #4]
 8019f12:	4611      	mov	r1, r2
 8019f14:	4618      	mov	r0, r3
 8019f16:	f001 f835 	bl	801af84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019f1c:	f000 f9dc 	bl	801a2d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019f20:	f000 fe58 	bl	801abd4 <xTaskResumeAll>
 8019f24:	4603      	mov	r3, r0
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d189      	bne.n	8019e3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8019f2a:	4b10      	ldr	r3, [pc, #64]	; (8019f6c <xQueueReceive+0x1bc>)
 8019f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019f30:	601a      	str	r2, [r3, #0]
 8019f32:	f3bf 8f4f 	dsb	sy
 8019f36:	f3bf 8f6f 	isb	sy
 8019f3a:	e780      	b.n	8019e3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8019f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019f3e:	f000 f9cb 	bl	801a2d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019f42:	f000 fe47 	bl	801abd4 <xTaskResumeAll>
 8019f46:	e77a      	b.n	8019e3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8019f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019f4a:	f000 f9c5 	bl	801a2d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019f4e:	f000 fe41 	bl	801abd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019f54:	f000 fa12 	bl	801a37c <prvIsQueueEmpty>
 8019f58:	4603      	mov	r3, r0
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	f43f af6f 	beq.w	8019e3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8019f60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8019f62:	4618      	mov	r0, r3
 8019f64:	3730      	adds	r7, #48	; 0x30
 8019f66:	46bd      	mov	sp, r7
 8019f68:	bd80      	pop	{r7, pc}
 8019f6a:	bf00      	nop
 8019f6c:	e000ed04 	.word	0xe000ed04

08019f70 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8019f70:	b580      	push	{r7, lr}
 8019f72:	b08e      	sub	sp, #56	; 0x38
 8019f74:	af00      	add	r7, sp, #0
 8019f76:	6078      	str	r0, [r7, #4]
 8019f78:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8019f7a:	2300      	movs	r3, #0
 8019f7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8019f82:	2300      	movs	r3, #0
 8019f84:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d10a      	bne.n	8019fa2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8019f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f90:	f383 8811 	msr	BASEPRI, r3
 8019f94:	f3bf 8f6f 	isb	sy
 8019f98:	f3bf 8f4f 	dsb	sy
 8019f9c:	623b      	str	r3, [r7, #32]
}
 8019f9e:	bf00      	nop
 8019fa0:	e7fe      	b.n	8019fa0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8019fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d00a      	beq.n	8019fc0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8019faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fae:	f383 8811 	msr	BASEPRI, r3
 8019fb2:	f3bf 8f6f 	isb	sy
 8019fb6:	f3bf 8f4f 	dsb	sy
 8019fba:	61fb      	str	r3, [r7, #28]
}
 8019fbc:	bf00      	nop
 8019fbe:	e7fe      	b.n	8019fbe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019fc0:	f001 fa9c 	bl	801b4fc <xTaskGetSchedulerState>
 8019fc4:	4603      	mov	r3, r0
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d102      	bne.n	8019fd0 <xQueueSemaphoreTake+0x60>
 8019fca:	683b      	ldr	r3, [r7, #0]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d101      	bne.n	8019fd4 <xQueueSemaphoreTake+0x64>
 8019fd0:	2301      	movs	r3, #1
 8019fd2:	e000      	b.n	8019fd6 <xQueueSemaphoreTake+0x66>
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d10a      	bne.n	8019ff0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8019fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fde:	f383 8811 	msr	BASEPRI, r3
 8019fe2:	f3bf 8f6f 	isb	sy
 8019fe6:	f3bf 8f4f 	dsb	sy
 8019fea:	61bb      	str	r3, [r7, #24]
}
 8019fec:	bf00      	nop
 8019fee:	e7fe      	b.n	8019fee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019ff0:	f002 f918 	bl	801c224 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8019ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ff8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8019ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d024      	beq.n	801a04a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801a000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a002:	1e5a      	subs	r2, r3, #1
 801a004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a006:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	d104      	bne.n	801a01a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801a010:	f001 fc02 	bl	801b818 <pvTaskIncrementMutexHeldCount>
 801a014:	4602      	mov	r2, r0
 801a016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a018:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a01c:	691b      	ldr	r3, [r3, #16]
 801a01e:	2b00      	cmp	r3, #0
 801a020:	d00f      	beq.n	801a042 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a024:	3310      	adds	r3, #16
 801a026:	4618      	mov	r0, r3
 801a028:	f001 f838 	bl	801b09c <xTaskRemoveFromEventList>
 801a02c:	4603      	mov	r3, r0
 801a02e:	2b00      	cmp	r3, #0
 801a030:	d007      	beq.n	801a042 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a032:	4b54      	ldr	r3, [pc, #336]	; (801a184 <xQueueSemaphoreTake+0x214>)
 801a034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a038:	601a      	str	r2, [r3, #0]
 801a03a:	f3bf 8f4f 	dsb	sy
 801a03e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a042:	f002 f91f 	bl	801c284 <vPortExitCritical>
				return pdPASS;
 801a046:	2301      	movs	r3, #1
 801a048:	e097      	b.n	801a17a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a04a:	683b      	ldr	r3, [r7, #0]
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	d111      	bne.n	801a074 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801a050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a052:	2b00      	cmp	r3, #0
 801a054:	d00a      	beq.n	801a06c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801a056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a05a:	f383 8811 	msr	BASEPRI, r3
 801a05e:	f3bf 8f6f 	isb	sy
 801a062:	f3bf 8f4f 	dsb	sy
 801a066:	617b      	str	r3, [r7, #20]
}
 801a068:	bf00      	nop
 801a06a:	e7fe      	b.n	801a06a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801a06c:	f002 f90a 	bl	801c284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a070:	2300      	movs	r3, #0
 801a072:	e082      	b.n	801a17a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a076:	2b00      	cmp	r3, #0
 801a078:	d106      	bne.n	801a088 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a07a:	f107 030c 	add.w	r3, r7, #12
 801a07e:	4618      	mov	r0, r3
 801a080:	f001 f8d2 	bl	801b228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a084:	2301      	movs	r3, #1
 801a086:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a088:	f002 f8fc 	bl	801c284 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a08c:	f000 fd94 	bl	801abb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a090:	f002 f8c8 	bl	801c224 <vPortEnterCritical>
 801a094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a09a:	b25b      	sxtb	r3, r3
 801a09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0a0:	d103      	bne.n	801a0aa <xQueueSemaphoreTake+0x13a>
 801a0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0a4:	2200      	movs	r2, #0
 801a0a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a0b0:	b25b      	sxtb	r3, r3
 801a0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0b6:	d103      	bne.n	801a0c0 <xQueueSemaphoreTake+0x150>
 801a0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0ba:	2200      	movs	r2, #0
 801a0bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a0c0:	f002 f8e0 	bl	801c284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a0c4:	463a      	mov	r2, r7
 801a0c6:	f107 030c 	add.w	r3, r7, #12
 801a0ca:	4611      	mov	r1, r2
 801a0cc:	4618      	mov	r0, r3
 801a0ce:	f001 f8c1 	bl	801b254 <xTaskCheckForTimeOut>
 801a0d2:	4603      	mov	r3, r0
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d132      	bne.n	801a13e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a0d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a0da:	f000 f94f 	bl	801a37c <prvIsQueueEmpty>
 801a0de:	4603      	mov	r3, r0
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d026      	beq.n	801a132 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d109      	bne.n	801a100 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801a0ec:	f002 f89a 	bl	801c224 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0f2:	689b      	ldr	r3, [r3, #8]
 801a0f4:	4618      	mov	r0, r3
 801a0f6:	f001 fa1f 	bl	801b538 <xTaskPriorityInherit>
 801a0fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801a0fc:	f002 f8c2 	bl	801c284 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a102:	3324      	adds	r3, #36	; 0x24
 801a104:	683a      	ldr	r2, [r7, #0]
 801a106:	4611      	mov	r1, r2
 801a108:	4618      	mov	r0, r3
 801a10a:	f000 ff3b 	bl	801af84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a10e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a110:	f000 f8e2 	bl	801a2d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a114:	f000 fd5e 	bl	801abd4 <xTaskResumeAll>
 801a118:	4603      	mov	r3, r0
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	f47f af68 	bne.w	8019ff0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801a120:	4b18      	ldr	r3, [pc, #96]	; (801a184 <xQueueSemaphoreTake+0x214>)
 801a122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a126:	601a      	str	r2, [r3, #0]
 801a128:	f3bf 8f4f 	dsb	sy
 801a12c:	f3bf 8f6f 	isb	sy
 801a130:	e75e      	b.n	8019ff0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801a132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a134:	f000 f8d0 	bl	801a2d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a138:	f000 fd4c 	bl	801abd4 <xTaskResumeAll>
 801a13c:	e758      	b.n	8019ff0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801a13e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a140:	f000 f8ca 	bl	801a2d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a144:	f000 fd46 	bl	801abd4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a14a:	f000 f917 	bl	801a37c <prvIsQueueEmpty>
 801a14e:	4603      	mov	r3, r0
 801a150:	2b00      	cmp	r3, #0
 801a152:	f43f af4d 	beq.w	8019ff0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801a156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a158:	2b00      	cmp	r3, #0
 801a15a:	d00d      	beq.n	801a178 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801a15c:	f002 f862 	bl	801c224 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801a160:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a162:	f000 f811 	bl	801a188 <prvGetDisinheritPriorityAfterTimeout>
 801a166:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801a168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a16a:	689b      	ldr	r3, [r3, #8]
 801a16c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a16e:	4618      	mov	r0, r3
 801a170:	f001 fab8 	bl	801b6e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801a174:	f002 f886 	bl	801c284 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a178:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a17a:	4618      	mov	r0, r3
 801a17c:	3738      	adds	r7, #56	; 0x38
 801a17e:	46bd      	mov	sp, r7
 801a180:	bd80      	pop	{r7, pc}
 801a182:	bf00      	nop
 801a184:	e000ed04 	.word	0xe000ed04

0801a188 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801a188:	b480      	push	{r7}
 801a18a:	b085      	sub	sp, #20
 801a18c:	af00      	add	r7, sp, #0
 801a18e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a194:	2b00      	cmp	r3, #0
 801a196:	d006      	beq.n	801a1a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a19c:	681b      	ldr	r3, [r3, #0]
 801a19e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801a1a2:	60fb      	str	r3, [r7, #12]
 801a1a4:	e001      	b.n	801a1aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801a1a6:	2300      	movs	r3, #0
 801a1a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801a1aa:	68fb      	ldr	r3, [r7, #12]
	}
 801a1ac:	4618      	mov	r0, r3
 801a1ae:	3714      	adds	r7, #20
 801a1b0:	46bd      	mov	sp, r7
 801a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1b6:	4770      	bx	lr

0801a1b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801a1b8:	b580      	push	{r7, lr}
 801a1ba:	b086      	sub	sp, #24
 801a1bc:	af00      	add	r7, sp, #0
 801a1be:	60f8      	str	r0, [r7, #12]
 801a1c0:	60b9      	str	r1, [r7, #8]
 801a1c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801a1c4:	2300      	movs	r3, #0
 801a1c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a1c8:	68fb      	ldr	r3, [r7, #12]
 801a1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a1cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d10d      	bne.n	801a1f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a1d6:	68fb      	ldr	r3, [r7, #12]
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d14d      	bne.n	801a27a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a1de:	68fb      	ldr	r3, [r7, #12]
 801a1e0:	689b      	ldr	r3, [r3, #8]
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	f001 fa10 	bl	801b608 <xTaskPriorityDisinherit>
 801a1e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801a1ea:	68fb      	ldr	r3, [r7, #12]
 801a1ec:	2200      	movs	r2, #0
 801a1ee:	609a      	str	r2, [r3, #8]
 801a1f0:	e043      	b.n	801a27a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d119      	bne.n	801a22c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	6858      	ldr	r0, [r3, #4]
 801a1fc:	68fb      	ldr	r3, [r7, #12]
 801a1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a200:	461a      	mov	r2, r3
 801a202:	68b9      	ldr	r1, [r7, #8]
 801a204:	f003 f95c 	bl	801d4c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a208:	68fb      	ldr	r3, [r7, #12]
 801a20a:	685a      	ldr	r2, [r3, #4]
 801a20c:	68fb      	ldr	r3, [r7, #12]
 801a20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a210:	441a      	add	r2, r3
 801a212:	68fb      	ldr	r3, [r7, #12]
 801a214:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	685a      	ldr	r2, [r3, #4]
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	689b      	ldr	r3, [r3, #8]
 801a21e:	429a      	cmp	r2, r3
 801a220:	d32b      	bcc.n	801a27a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801a222:	68fb      	ldr	r3, [r7, #12]
 801a224:	681a      	ldr	r2, [r3, #0]
 801a226:	68fb      	ldr	r3, [r7, #12]
 801a228:	605a      	str	r2, [r3, #4]
 801a22a:	e026      	b.n	801a27a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	68d8      	ldr	r0, [r3, #12]
 801a230:	68fb      	ldr	r3, [r7, #12]
 801a232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a234:	461a      	mov	r2, r3
 801a236:	68b9      	ldr	r1, [r7, #8]
 801a238:	f003 f942 	bl	801d4c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801a23c:	68fb      	ldr	r3, [r7, #12]
 801a23e:	68da      	ldr	r2, [r3, #12]
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a244:	425b      	negs	r3, r3
 801a246:	441a      	add	r2, r3
 801a248:	68fb      	ldr	r3, [r7, #12]
 801a24a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a24c:	68fb      	ldr	r3, [r7, #12]
 801a24e:	68da      	ldr	r2, [r3, #12]
 801a250:	68fb      	ldr	r3, [r7, #12]
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	429a      	cmp	r2, r3
 801a256:	d207      	bcs.n	801a268 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	689a      	ldr	r2, [r3, #8]
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a260:	425b      	negs	r3, r3
 801a262:	441a      	add	r2, r3
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	2b02      	cmp	r3, #2
 801a26c:	d105      	bne.n	801a27a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a26e:	693b      	ldr	r3, [r7, #16]
 801a270:	2b00      	cmp	r3, #0
 801a272:	d002      	beq.n	801a27a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801a274:	693b      	ldr	r3, [r7, #16]
 801a276:	3b01      	subs	r3, #1
 801a278:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a27a:	693b      	ldr	r3, [r7, #16]
 801a27c:	1c5a      	adds	r2, r3, #1
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801a282:	697b      	ldr	r3, [r7, #20]
}
 801a284:	4618      	mov	r0, r3
 801a286:	3718      	adds	r7, #24
 801a288:	46bd      	mov	sp, r7
 801a28a:	bd80      	pop	{r7, pc}

0801a28c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801a28c:	b580      	push	{r7, lr}
 801a28e:	b082      	sub	sp, #8
 801a290:	af00      	add	r7, sp, #0
 801a292:	6078      	str	r0, [r7, #4]
 801a294:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d018      	beq.n	801a2d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	68da      	ldr	r2, [r3, #12]
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a2a6:	441a      	add	r2, r3
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	68da      	ldr	r2, [r3, #12]
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	689b      	ldr	r3, [r3, #8]
 801a2b4:	429a      	cmp	r2, r3
 801a2b6:	d303      	bcc.n	801a2c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	681a      	ldr	r2, [r3, #0]
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	68d9      	ldr	r1, [r3, #12]
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a2c8:	461a      	mov	r2, r3
 801a2ca:	6838      	ldr	r0, [r7, #0]
 801a2cc:	f003 f8f8 	bl	801d4c0 <memcpy>
	}
}
 801a2d0:	bf00      	nop
 801a2d2:	3708      	adds	r7, #8
 801a2d4:	46bd      	mov	sp, r7
 801a2d6:	bd80      	pop	{r7, pc}

0801a2d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801a2d8:	b580      	push	{r7, lr}
 801a2da:	b084      	sub	sp, #16
 801a2dc:	af00      	add	r7, sp, #0
 801a2de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801a2e0:	f001 ffa0 	bl	801c224 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a2ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a2ec:	e011      	b.n	801a312 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d012      	beq.n	801a31c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	3324      	adds	r3, #36	; 0x24
 801a2fa:	4618      	mov	r0, r3
 801a2fc:	f000 fece 	bl	801b09c <xTaskRemoveFromEventList>
 801a300:	4603      	mov	r3, r0
 801a302:	2b00      	cmp	r3, #0
 801a304:	d001      	beq.n	801a30a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801a306:	f001 f807 	bl	801b318 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801a30a:	7bfb      	ldrb	r3, [r7, #15]
 801a30c:	3b01      	subs	r3, #1
 801a30e:	b2db      	uxtb	r3, r3
 801a310:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a316:	2b00      	cmp	r3, #0
 801a318:	dce9      	bgt.n	801a2ee <prvUnlockQueue+0x16>
 801a31a:	e000      	b.n	801a31e <prvUnlockQueue+0x46>
					break;
 801a31c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	22ff      	movs	r2, #255	; 0xff
 801a322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801a326:	f001 ffad 	bl	801c284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801a32a:	f001 ff7b 	bl	801c224 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a334:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a336:	e011      	b.n	801a35c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	691b      	ldr	r3, [r3, #16]
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d012      	beq.n	801a366 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	3310      	adds	r3, #16
 801a344:	4618      	mov	r0, r3
 801a346:	f000 fea9 	bl	801b09c <xTaskRemoveFromEventList>
 801a34a:	4603      	mov	r3, r0
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d001      	beq.n	801a354 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801a350:	f000 ffe2 	bl	801b318 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801a354:	7bbb      	ldrb	r3, [r7, #14]
 801a356:	3b01      	subs	r3, #1
 801a358:	b2db      	uxtb	r3, r3
 801a35a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a35c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a360:	2b00      	cmp	r3, #0
 801a362:	dce9      	bgt.n	801a338 <prvUnlockQueue+0x60>
 801a364:	e000      	b.n	801a368 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801a366:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	22ff      	movs	r2, #255	; 0xff
 801a36c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801a370:	f001 ff88 	bl	801c284 <vPortExitCritical>
}
 801a374:	bf00      	nop
 801a376:	3710      	adds	r7, #16
 801a378:	46bd      	mov	sp, r7
 801a37a:	bd80      	pop	{r7, pc}

0801a37c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801a37c:	b580      	push	{r7, lr}
 801a37e:	b084      	sub	sp, #16
 801a380:	af00      	add	r7, sp, #0
 801a382:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a384:	f001 ff4e 	bl	801c224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d102      	bne.n	801a396 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801a390:	2301      	movs	r3, #1
 801a392:	60fb      	str	r3, [r7, #12]
 801a394:	e001      	b.n	801a39a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801a396:	2300      	movs	r3, #0
 801a398:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a39a:	f001 ff73 	bl	801c284 <vPortExitCritical>

	return xReturn;
 801a39e:	68fb      	ldr	r3, [r7, #12]
}
 801a3a0:	4618      	mov	r0, r3
 801a3a2:	3710      	adds	r7, #16
 801a3a4:	46bd      	mov	sp, r7
 801a3a6:	bd80      	pop	{r7, pc}

0801a3a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801a3a8:	b580      	push	{r7, lr}
 801a3aa:	b084      	sub	sp, #16
 801a3ac:	af00      	add	r7, sp, #0
 801a3ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a3b0:	f001 ff38 	bl	801c224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a3bc:	429a      	cmp	r2, r3
 801a3be:	d102      	bne.n	801a3c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801a3c0:	2301      	movs	r3, #1
 801a3c2:	60fb      	str	r3, [r7, #12]
 801a3c4:	e001      	b.n	801a3ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801a3c6:	2300      	movs	r3, #0
 801a3c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a3ca:	f001 ff5b 	bl	801c284 <vPortExitCritical>

	return xReturn;
 801a3ce:	68fb      	ldr	r3, [r7, #12]
}
 801a3d0:	4618      	mov	r0, r3
 801a3d2:	3710      	adds	r7, #16
 801a3d4:	46bd      	mov	sp, r7
 801a3d6:	bd80      	pop	{r7, pc}

0801a3d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801a3d8:	b480      	push	{r7}
 801a3da:	b085      	sub	sp, #20
 801a3dc:	af00      	add	r7, sp, #0
 801a3de:	6078      	str	r0, [r7, #4]
 801a3e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a3e2:	2300      	movs	r3, #0
 801a3e4:	60fb      	str	r3, [r7, #12]
 801a3e6:	e014      	b.n	801a412 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801a3e8:	4a0f      	ldr	r2, [pc, #60]	; (801a428 <vQueueAddToRegistry+0x50>)
 801a3ea:	68fb      	ldr	r3, [r7, #12]
 801a3ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d10b      	bne.n	801a40c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801a3f4:	490c      	ldr	r1, [pc, #48]	; (801a428 <vQueueAddToRegistry+0x50>)
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	683a      	ldr	r2, [r7, #0]
 801a3fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801a3fe:	4a0a      	ldr	r2, [pc, #40]	; (801a428 <vQueueAddToRegistry+0x50>)
 801a400:	68fb      	ldr	r3, [r7, #12]
 801a402:	00db      	lsls	r3, r3, #3
 801a404:	4413      	add	r3, r2
 801a406:	687a      	ldr	r2, [r7, #4]
 801a408:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801a40a:	e006      	b.n	801a41a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	3301      	adds	r3, #1
 801a410:	60fb      	str	r3, [r7, #12]
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	2b07      	cmp	r3, #7
 801a416:	d9e7      	bls.n	801a3e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801a418:	bf00      	nop
 801a41a:	bf00      	nop
 801a41c:	3714      	adds	r7, #20
 801a41e:	46bd      	mov	sp, r7
 801a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a424:	4770      	bx	lr
 801a426:	bf00      	nop
 801a428:	20008618 	.word	0x20008618

0801a42c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a42c:	b580      	push	{r7, lr}
 801a42e:	b086      	sub	sp, #24
 801a430:	af00      	add	r7, sp, #0
 801a432:	60f8      	str	r0, [r7, #12]
 801a434:	60b9      	str	r1, [r7, #8]
 801a436:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801a438:	68fb      	ldr	r3, [r7, #12]
 801a43a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801a43c:	f001 fef2 	bl	801c224 <vPortEnterCritical>
 801a440:	697b      	ldr	r3, [r7, #20]
 801a442:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a446:	b25b      	sxtb	r3, r3
 801a448:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a44c:	d103      	bne.n	801a456 <vQueueWaitForMessageRestricted+0x2a>
 801a44e:	697b      	ldr	r3, [r7, #20]
 801a450:	2200      	movs	r2, #0
 801a452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a456:	697b      	ldr	r3, [r7, #20]
 801a458:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a45c:	b25b      	sxtb	r3, r3
 801a45e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a462:	d103      	bne.n	801a46c <vQueueWaitForMessageRestricted+0x40>
 801a464:	697b      	ldr	r3, [r7, #20]
 801a466:	2200      	movs	r2, #0
 801a468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a46c:	f001 ff0a 	bl	801c284 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801a470:	697b      	ldr	r3, [r7, #20]
 801a472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a474:	2b00      	cmp	r3, #0
 801a476:	d106      	bne.n	801a486 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801a478:	697b      	ldr	r3, [r7, #20]
 801a47a:	3324      	adds	r3, #36	; 0x24
 801a47c:	687a      	ldr	r2, [r7, #4]
 801a47e:	68b9      	ldr	r1, [r7, #8]
 801a480:	4618      	mov	r0, r3
 801a482:	f000 fddf 	bl	801b044 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801a486:	6978      	ldr	r0, [r7, #20]
 801a488:	f7ff ff26 	bl	801a2d8 <prvUnlockQueue>
	}
 801a48c:	bf00      	nop
 801a48e:	3718      	adds	r7, #24
 801a490:	46bd      	mov	sp, r7
 801a492:	bd80      	pop	{r7, pc}

0801a494 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801a494:	b580      	push	{r7, lr}
 801a496:	b08e      	sub	sp, #56	; 0x38
 801a498:	af04      	add	r7, sp, #16
 801a49a:	60f8      	str	r0, [r7, #12]
 801a49c:	60b9      	str	r1, [r7, #8]
 801a49e:	607a      	str	r2, [r7, #4]
 801a4a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801a4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	d10a      	bne.n	801a4be <xTaskCreateStatic+0x2a>
	__asm volatile
 801a4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4ac:	f383 8811 	msr	BASEPRI, r3
 801a4b0:	f3bf 8f6f 	isb	sy
 801a4b4:	f3bf 8f4f 	dsb	sy
 801a4b8:	623b      	str	r3, [r7, #32]
}
 801a4ba:	bf00      	nop
 801a4bc:	e7fe      	b.n	801a4bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801a4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	d10a      	bne.n	801a4da <xTaskCreateStatic+0x46>
	__asm volatile
 801a4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4c8:	f383 8811 	msr	BASEPRI, r3
 801a4cc:	f3bf 8f6f 	isb	sy
 801a4d0:	f3bf 8f4f 	dsb	sy
 801a4d4:	61fb      	str	r3, [r7, #28]
}
 801a4d6:	bf00      	nop
 801a4d8:	e7fe      	b.n	801a4d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801a4da:	235c      	movs	r3, #92	; 0x5c
 801a4dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801a4de:	693b      	ldr	r3, [r7, #16]
 801a4e0:	2b5c      	cmp	r3, #92	; 0x5c
 801a4e2:	d00a      	beq.n	801a4fa <xTaskCreateStatic+0x66>
	__asm volatile
 801a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4e8:	f383 8811 	msr	BASEPRI, r3
 801a4ec:	f3bf 8f6f 	isb	sy
 801a4f0:	f3bf 8f4f 	dsb	sy
 801a4f4:	61bb      	str	r3, [r7, #24]
}
 801a4f6:	bf00      	nop
 801a4f8:	e7fe      	b.n	801a4f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801a4fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801a4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4fe:	2b00      	cmp	r3, #0
 801a500:	d01e      	beq.n	801a540 <xTaskCreateStatic+0xac>
 801a502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a504:	2b00      	cmp	r3, #0
 801a506:	d01b      	beq.n	801a540 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801a508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a50a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a50e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a510:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801a512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a514:	2202      	movs	r2, #2
 801a516:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801a51a:	2300      	movs	r3, #0
 801a51c:	9303      	str	r3, [sp, #12]
 801a51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a520:	9302      	str	r3, [sp, #8]
 801a522:	f107 0314 	add.w	r3, r7, #20
 801a526:	9301      	str	r3, [sp, #4]
 801a528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a52a:	9300      	str	r3, [sp, #0]
 801a52c:	683b      	ldr	r3, [r7, #0]
 801a52e:	687a      	ldr	r2, [r7, #4]
 801a530:	68b9      	ldr	r1, [r7, #8]
 801a532:	68f8      	ldr	r0, [r7, #12]
 801a534:	f000 f850 	bl	801a5d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a538:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a53a:	f000 f8dd 	bl	801a6f8 <prvAddNewTaskToReadyList>
 801a53e:	e001      	b.n	801a544 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801a540:	2300      	movs	r3, #0
 801a542:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801a544:	697b      	ldr	r3, [r7, #20]
	}
 801a546:	4618      	mov	r0, r3
 801a548:	3728      	adds	r7, #40	; 0x28
 801a54a:	46bd      	mov	sp, r7
 801a54c:	bd80      	pop	{r7, pc}

0801a54e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801a54e:	b580      	push	{r7, lr}
 801a550:	b08c      	sub	sp, #48	; 0x30
 801a552:	af04      	add	r7, sp, #16
 801a554:	60f8      	str	r0, [r7, #12]
 801a556:	60b9      	str	r1, [r7, #8]
 801a558:	603b      	str	r3, [r7, #0]
 801a55a:	4613      	mov	r3, r2
 801a55c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801a55e:	88fb      	ldrh	r3, [r7, #6]
 801a560:	009b      	lsls	r3, r3, #2
 801a562:	4618      	mov	r0, r3
 801a564:	f001 ff80 	bl	801c468 <pvPortMalloc>
 801a568:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801a56a:	697b      	ldr	r3, [r7, #20]
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d00e      	beq.n	801a58e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801a570:	205c      	movs	r0, #92	; 0x5c
 801a572:	f001 ff79 	bl	801c468 <pvPortMalloc>
 801a576:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801a578:	69fb      	ldr	r3, [r7, #28]
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d003      	beq.n	801a586 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801a57e:	69fb      	ldr	r3, [r7, #28]
 801a580:	697a      	ldr	r2, [r7, #20]
 801a582:	631a      	str	r2, [r3, #48]	; 0x30
 801a584:	e005      	b.n	801a592 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801a586:	6978      	ldr	r0, [r7, #20]
 801a588:	f002 f83a 	bl	801c600 <vPortFree>
 801a58c:	e001      	b.n	801a592 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801a58e:	2300      	movs	r3, #0
 801a590:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801a592:	69fb      	ldr	r3, [r7, #28]
 801a594:	2b00      	cmp	r3, #0
 801a596:	d017      	beq.n	801a5c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801a598:	69fb      	ldr	r3, [r7, #28]
 801a59a:	2200      	movs	r2, #0
 801a59c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801a5a0:	88fa      	ldrh	r2, [r7, #6]
 801a5a2:	2300      	movs	r3, #0
 801a5a4:	9303      	str	r3, [sp, #12]
 801a5a6:	69fb      	ldr	r3, [r7, #28]
 801a5a8:	9302      	str	r3, [sp, #8]
 801a5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5ac:	9301      	str	r3, [sp, #4]
 801a5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5b0:	9300      	str	r3, [sp, #0]
 801a5b2:	683b      	ldr	r3, [r7, #0]
 801a5b4:	68b9      	ldr	r1, [r7, #8]
 801a5b6:	68f8      	ldr	r0, [r7, #12]
 801a5b8:	f000 f80e 	bl	801a5d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a5bc:	69f8      	ldr	r0, [r7, #28]
 801a5be:	f000 f89b 	bl	801a6f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801a5c2:	2301      	movs	r3, #1
 801a5c4:	61bb      	str	r3, [r7, #24]
 801a5c6:	e002      	b.n	801a5ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801a5c8:	f04f 33ff 	mov.w	r3, #4294967295
 801a5cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801a5ce:	69bb      	ldr	r3, [r7, #24]
	}
 801a5d0:	4618      	mov	r0, r3
 801a5d2:	3720      	adds	r7, #32
 801a5d4:	46bd      	mov	sp, r7
 801a5d6:	bd80      	pop	{r7, pc}

0801a5d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b088      	sub	sp, #32
 801a5dc:	af00      	add	r7, sp, #0
 801a5de:	60f8      	str	r0, [r7, #12]
 801a5e0:	60b9      	str	r1, [r7, #8]
 801a5e2:	607a      	str	r2, [r7, #4]
 801a5e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801a5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	009b      	lsls	r3, r3, #2
 801a5ee:	461a      	mov	r2, r3
 801a5f0:	21a5      	movs	r1, #165	; 0xa5
 801a5f2:	f002 ff73 	bl	801d4dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801a5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a5f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801a600:	3b01      	subs	r3, #1
 801a602:	009b      	lsls	r3, r3, #2
 801a604:	4413      	add	r3, r2
 801a606:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801a608:	69bb      	ldr	r3, [r7, #24]
 801a60a:	f023 0307 	bic.w	r3, r3, #7
 801a60e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801a610:	69bb      	ldr	r3, [r7, #24]
 801a612:	f003 0307 	and.w	r3, r3, #7
 801a616:	2b00      	cmp	r3, #0
 801a618:	d00a      	beq.n	801a630 <prvInitialiseNewTask+0x58>
	__asm volatile
 801a61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a61e:	f383 8811 	msr	BASEPRI, r3
 801a622:	f3bf 8f6f 	isb	sy
 801a626:	f3bf 8f4f 	dsb	sy
 801a62a:	617b      	str	r3, [r7, #20]
}
 801a62c:	bf00      	nop
 801a62e:	e7fe      	b.n	801a62e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801a630:	68bb      	ldr	r3, [r7, #8]
 801a632:	2b00      	cmp	r3, #0
 801a634:	d01f      	beq.n	801a676 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a636:	2300      	movs	r3, #0
 801a638:	61fb      	str	r3, [r7, #28]
 801a63a:	e012      	b.n	801a662 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801a63c:	68ba      	ldr	r2, [r7, #8]
 801a63e:	69fb      	ldr	r3, [r7, #28]
 801a640:	4413      	add	r3, r2
 801a642:	7819      	ldrb	r1, [r3, #0]
 801a644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a646:	69fb      	ldr	r3, [r7, #28]
 801a648:	4413      	add	r3, r2
 801a64a:	3334      	adds	r3, #52	; 0x34
 801a64c:	460a      	mov	r2, r1
 801a64e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801a650:	68ba      	ldr	r2, [r7, #8]
 801a652:	69fb      	ldr	r3, [r7, #28]
 801a654:	4413      	add	r3, r2
 801a656:	781b      	ldrb	r3, [r3, #0]
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d006      	beq.n	801a66a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a65c:	69fb      	ldr	r3, [r7, #28]
 801a65e:	3301      	adds	r3, #1
 801a660:	61fb      	str	r3, [r7, #28]
 801a662:	69fb      	ldr	r3, [r7, #28]
 801a664:	2b0f      	cmp	r3, #15
 801a666:	d9e9      	bls.n	801a63c <prvInitialiseNewTask+0x64>
 801a668:	e000      	b.n	801a66c <prvInitialiseNewTask+0x94>
			{
				break;
 801a66a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801a66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a66e:	2200      	movs	r2, #0
 801a670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a674:	e003      	b.n	801a67e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801a676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a678:	2200      	movs	r2, #0
 801a67a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801a67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a680:	2b37      	cmp	r3, #55	; 0x37
 801a682:	d901      	bls.n	801a688 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801a684:	2337      	movs	r3, #55	; 0x37
 801a686:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801a688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a68a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a68c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801a68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a690:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a692:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801a694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a696:	2200      	movs	r2, #0
 801a698:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801a69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a69c:	3304      	adds	r3, #4
 801a69e:	4618      	mov	r0, r3
 801a6a0:	f7fe ff64 	bl	801956c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801a6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6a6:	3318      	adds	r3, #24
 801a6a8:	4618      	mov	r0, r3
 801a6aa:	f7fe ff5f 	bl	801956c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a6b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801a6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a6c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801a6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6c6:	2200      	movs	r2, #0
 801a6c8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6cc:	2200      	movs	r2, #0
 801a6ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801a6d2:	683a      	ldr	r2, [r7, #0]
 801a6d4:	68f9      	ldr	r1, [r7, #12]
 801a6d6:	69b8      	ldr	r0, [r7, #24]
 801a6d8:	f001 fc74 	bl	801bfc4 <pxPortInitialiseStack>
 801a6dc:	4602      	mov	r2, r0
 801a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a6e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801a6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	d002      	beq.n	801a6ee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801a6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a6ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a6ee:	bf00      	nop
 801a6f0:	3720      	adds	r7, #32
 801a6f2:	46bd      	mov	sp, r7
 801a6f4:	bd80      	pop	{r7, pc}
	...

0801a6f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801a6f8:	b580      	push	{r7, lr}
 801a6fa:	b082      	sub	sp, #8
 801a6fc:	af00      	add	r7, sp, #0
 801a6fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801a700:	f001 fd90 	bl	801c224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801a704:	4b2d      	ldr	r3, [pc, #180]	; (801a7bc <prvAddNewTaskToReadyList+0xc4>)
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	3301      	adds	r3, #1
 801a70a:	4a2c      	ldr	r2, [pc, #176]	; (801a7bc <prvAddNewTaskToReadyList+0xc4>)
 801a70c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801a70e:	4b2c      	ldr	r3, [pc, #176]	; (801a7c0 <prvAddNewTaskToReadyList+0xc8>)
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	2b00      	cmp	r3, #0
 801a714:	d109      	bne.n	801a72a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801a716:	4a2a      	ldr	r2, [pc, #168]	; (801a7c0 <prvAddNewTaskToReadyList+0xc8>)
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801a71c:	4b27      	ldr	r3, [pc, #156]	; (801a7bc <prvAddNewTaskToReadyList+0xc4>)
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	2b01      	cmp	r3, #1
 801a722:	d110      	bne.n	801a746 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801a724:	f000 fe1c 	bl	801b360 <prvInitialiseTaskLists>
 801a728:	e00d      	b.n	801a746 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801a72a:	4b26      	ldr	r3, [pc, #152]	; (801a7c4 <prvAddNewTaskToReadyList+0xcc>)
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d109      	bne.n	801a746 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801a732:	4b23      	ldr	r3, [pc, #140]	; (801a7c0 <prvAddNewTaskToReadyList+0xc8>)
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a73c:	429a      	cmp	r2, r3
 801a73e:	d802      	bhi.n	801a746 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801a740:	4a1f      	ldr	r2, [pc, #124]	; (801a7c0 <prvAddNewTaskToReadyList+0xc8>)
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801a746:	4b20      	ldr	r3, [pc, #128]	; (801a7c8 <prvAddNewTaskToReadyList+0xd0>)
 801a748:	681b      	ldr	r3, [r3, #0]
 801a74a:	3301      	adds	r3, #1
 801a74c:	4a1e      	ldr	r2, [pc, #120]	; (801a7c8 <prvAddNewTaskToReadyList+0xd0>)
 801a74e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801a750:	4b1d      	ldr	r3, [pc, #116]	; (801a7c8 <prvAddNewTaskToReadyList+0xd0>)
 801a752:	681a      	ldr	r2, [r3, #0]
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a75c:	4b1b      	ldr	r3, [pc, #108]	; (801a7cc <prvAddNewTaskToReadyList+0xd4>)
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	429a      	cmp	r2, r3
 801a762:	d903      	bls.n	801a76c <prvAddNewTaskToReadyList+0x74>
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a768:	4a18      	ldr	r2, [pc, #96]	; (801a7cc <prvAddNewTaskToReadyList+0xd4>)
 801a76a:	6013      	str	r3, [r2, #0]
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a770:	4613      	mov	r3, r2
 801a772:	009b      	lsls	r3, r3, #2
 801a774:	4413      	add	r3, r2
 801a776:	009b      	lsls	r3, r3, #2
 801a778:	4a15      	ldr	r2, [pc, #84]	; (801a7d0 <prvAddNewTaskToReadyList+0xd8>)
 801a77a:	441a      	add	r2, r3
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	3304      	adds	r3, #4
 801a780:	4619      	mov	r1, r3
 801a782:	4610      	mov	r0, r2
 801a784:	f7fe feff 	bl	8019586 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801a788:	f001 fd7c 	bl	801c284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801a78c:	4b0d      	ldr	r3, [pc, #52]	; (801a7c4 <prvAddNewTaskToReadyList+0xcc>)
 801a78e:	681b      	ldr	r3, [r3, #0]
 801a790:	2b00      	cmp	r3, #0
 801a792:	d00e      	beq.n	801a7b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801a794:	4b0a      	ldr	r3, [pc, #40]	; (801a7c0 <prvAddNewTaskToReadyList+0xc8>)
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a79e:	429a      	cmp	r2, r3
 801a7a0:	d207      	bcs.n	801a7b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801a7a2:	4b0c      	ldr	r3, [pc, #48]	; (801a7d4 <prvAddNewTaskToReadyList+0xdc>)
 801a7a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a7a8:	601a      	str	r2, [r3, #0]
 801a7aa:	f3bf 8f4f 	dsb	sy
 801a7ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a7b2:	bf00      	nop
 801a7b4:	3708      	adds	r7, #8
 801a7b6:	46bd      	mov	sp, r7
 801a7b8:	bd80      	pop	{r7, pc}
 801a7ba:	bf00      	nop
 801a7bc:	2000115c 	.word	0x2000115c
 801a7c0:	20000c88 	.word	0x20000c88
 801a7c4:	20001168 	.word	0x20001168
 801a7c8:	20001178 	.word	0x20001178
 801a7cc:	20001164 	.word	0x20001164
 801a7d0:	20000c8c 	.word	0x20000c8c
 801a7d4:	e000ed04 	.word	0xe000ed04

0801a7d8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801a7d8:	b580      	push	{r7, lr}
 801a7da:	b084      	sub	sp, #16
 801a7dc:	af00      	add	r7, sp, #0
 801a7de:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801a7e0:	f001 fd20 	bl	801c224 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d102      	bne.n	801a7f0 <vTaskDelete+0x18>
 801a7ea:	4b2c      	ldr	r3, [pc, #176]	; (801a89c <vTaskDelete+0xc4>)
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	e000      	b.n	801a7f2 <vTaskDelete+0x1a>
 801a7f0:	687b      	ldr	r3, [r7, #4]
 801a7f2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	3304      	adds	r3, #4
 801a7f8:	4618      	mov	r0, r3
 801a7fa:	f7fe ff21 	bl	8019640 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a7fe:	68fb      	ldr	r3, [r7, #12]
 801a800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a802:	2b00      	cmp	r3, #0
 801a804:	d004      	beq.n	801a810 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a806:	68fb      	ldr	r3, [r7, #12]
 801a808:	3318      	adds	r3, #24
 801a80a:	4618      	mov	r0, r3
 801a80c:	f7fe ff18 	bl	8019640 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801a810:	4b23      	ldr	r3, [pc, #140]	; (801a8a0 <vTaskDelete+0xc8>)
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	3301      	adds	r3, #1
 801a816:	4a22      	ldr	r2, [pc, #136]	; (801a8a0 <vTaskDelete+0xc8>)
 801a818:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801a81a:	4b20      	ldr	r3, [pc, #128]	; (801a89c <vTaskDelete+0xc4>)
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	68fa      	ldr	r2, [r7, #12]
 801a820:	429a      	cmp	r2, r3
 801a822:	d10b      	bne.n	801a83c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	3304      	adds	r3, #4
 801a828:	4619      	mov	r1, r3
 801a82a:	481e      	ldr	r0, [pc, #120]	; (801a8a4 <vTaskDelete+0xcc>)
 801a82c:	f7fe feab 	bl	8019586 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801a830:	4b1d      	ldr	r3, [pc, #116]	; (801a8a8 <vTaskDelete+0xd0>)
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	3301      	adds	r3, #1
 801a836:	4a1c      	ldr	r2, [pc, #112]	; (801a8a8 <vTaskDelete+0xd0>)
 801a838:	6013      	str	r3, [r2, #0]
 801a83a:	e009      	b.n	801a850 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801a83c:	4b1b      	ldr	r3, [pc, #108]	; (801a8ac <vTaskDelete+0xd4>)
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	3b01      	subs	r3, #1
 801a842:	4a1a      	ldr	r2, [pc, #104]	; (801a8ac <vTaskDelete+0xd4>)
 801a844:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801a846:	68f8      	ldr	r0, [r7, #12]
 801a848:	f000 fdf8 	bl	801b43c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801a84c:	f000 fe26 	bl	801b49c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 801a850:	f001 fd18 	bl	801c284 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801a854:	4b16      	ldr	r3, [pc, #88]	; (801a8b0 <vTaskDelete+0xd8>)
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	2b00      	cmp	r3, #0
 801a85a:	d01b      	beq.n	801a894 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 801a85c:	4b0f      	ldr	r3, [pc, #60]	; (801a89c <vTaskDelete+0xc4>)
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	68fa      	ldr	r2, [r7, #12]
 801a862:	429a      	cmp	r2, r3
 801a864:	d116      	bne.n	801a894 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801a866:	4b13      	ldr	r3, [pc, #76]	; (801a8b4 <vTaskDelete+0xdc>)
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	d00a      	beq.n	801a884 <vTaskDelete+0xac>
	__asm volatile
 801a86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a872:	f383 8811 	msr	BASEPRI, r3
 801a876:	f3bf 8f6f 	isb	sy
 801a87a:	f3bf 8f4f 	dsb	sy
 801a87e:	60bb      	str	r3, [r7, #8]
}
 801a880:	bf00      	nop
 801a882:	e7fe      	b.n	801a882 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 801a884:	4b0c      	ldr	r3, [pc, #48]	; (801a8b8 <vTaskDelete+0xe0>)
 801a886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a88a:	601a      	str	r2, [r3, #0]
 801a88c:	f3bf 8f4f 	dsb	sy
 801a890:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801a894:	bf00      	nop
 801a896:	3710      	adds	r7, #16
 801a898:	46bd      	mov	sp, r7
 801a89a:	bd80      	pop	{r7, pc}
 801a89c:	20000c88 	.word	0x20000c88
 801a8a0:	20001178 	.word	0x20001178
 801a8a4:	20001130 	.word	0x20001130
 801a8a8:	20001144 	.word	0x20001144
 801a8ac:	2000115c 	.word	0x2000115c
 801a8b0:	20001168 	.word	0x20001168
 801a8b4:	20001184 	.word	0x20001184
 801a8b8:	e000ed04 	.word	0xe000ed04

0801a8bc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801a8bc:	b580      	push	{r7, lr}
 801a8be:	b08a      	sub	sp, #40	; 0x28
 801a8c0:	af00      	add	r7, sp, #0
 801a8c2:	6078      	str	r0, [r7, #4]
 801a8c4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801a8c6:	2300      	movs	r3, #0
 801a8c8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	d10a      	bne.n	801a8e6 <vTaskDelayUntil+0x2a>
	__asm volatile
 801a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8d4:	f383 8811 	msr	BASEPRI, r3
 801a8d8:	f3bf 8f6f 	isb	sy
 801a8dc:	f3bf 8f4f 	dsb	sy
 801a8e0:	617b      	str	r3, [r7, #20]
}
 801a8e2:	bf00      	nop
 801a8e4:	e7fe      	b.n	801a8e4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 801a8e6:	683b      	ldr	r3, [r7, #0]
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	d10a      	bne.n	801a902 <vTaskDelayUntil+0x46>
	__asm volatile
 801a8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8f0:	f383 8811 	msr	BASEPRI, r3
 801a8f4:	f3bf 8f6f 	isb	sy
 801a8f8:	f3bf 8f4f 	dsb	sy
 801a8fc:	613b      	str	r3, [r7, #16]
}
 801a8fe:	bf00      	nop
 801a900:	e7fe      	b.n	801a900 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 801a902:	4b2a      	ldr	r3, [pc, #168]	; (801a9ac <vTaskDelayUntil+0xf0>)
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	2b00      	cmp	r3, #0
 801a908:	d00a      	beq.n	801a920 <vTaskDelayUntil+0x64>
	__asm volatile
 801a90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a90e:	f383 8811 	msr	BASEPRI, r3
 801a912:	f3bf 8f6f 	isb	sy
 801a916:	f3bf 8f4f 	dsb	sy
 801a91a:	60fb      	str	r3, [r7, #12]
}
 801a91c:	bf00      	nop
 801a91e:	e7fe      	b.n	801a91e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 801a920:	f000 f94a 	bl	801abb8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801a924:	4b22      	ldr	r3, [pc, #136]	; (801a9b0 <vTaskDelayUntil+0xf4>)
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	683a      	ldr	r2, [r7, #0]
 801a930:	4413      	add	r3, r2
 801a932:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	681b      	ldr	r3, [r3, #0]
 801a938:	6a3a      	ldr	r2, [r7, #32]
 801a93a:	429a      	cmp	r2, r3
 801a93c:	d20b      	bcs.n	801a956 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	69fa      	ldr	r2, [r7, #28]
 801a944:	429a      	cmp	r2, r3
 801a946:	d211      	bcs.n	801a96c <vTaskDelayUntil+0xb0>
 801a948:	69fa      	ldr	r2, [r7, #28]
 801a94a:	6a3b      	ldr	r3, [r7, #32]
 801a94c:	429a      	cmp	r2, r3
 801a94e:	d90d      	bls.n	801a96c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 801a950:	2301      	movs	r3, #1
 801a952:	627b      	str	r3, [r7, #36]	; 0x24
 801a954:	e00a      	b.n	801a96c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	681b      	ldr	r3, [r3, #0]
 801a95a:	69fa      	ldr	r2, [r7, #28]
 801a95c:	429a      	cmp	r2, r3
 801a95e:	d303      	bcc.n	801a968 <vTaskDelayUntil+0xac>
 801a960:	69fa      	ldr	r2, [r7, #28]
 801a962:	6a3b      	ldr	r3, [r7, #32]
 801a964:	429a      	cmp	r2, r3
 801a966:	d901      	bls.n	801a96c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 801a968:	2301      	movs	r3, #1
 801a96a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	69fa      	ldr	r2, [r7, #28]
 801a970:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801a972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a974:	2b00      	cmp	r3, #0
 801a976:	d006      	beq.n	801a986 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801a978:	69fa      	ldr	r2, [r7, #28]
 801a97a:	6a3b      	ldr	r3, [r7, #32]
 801a97c:	1ad3      	subs	r3, r2, r3
 801a97e:	2100      	movs	r1, #0
 801a980:	4618      	mov	r0, r3
 801a982:	f000 ff5d 	bl	801b840 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801a986:	f000 f925 	bl	801abd4 <xTaskResumeAll>
 801a98a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801a98c:	69bb      	ldr	r3, [r7, #24]
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d107      	bne.n	801a9a2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 801a992:	4b08      	ldr	r3, [pc, #32]	; (801a9b4 <vTaskDelayUntil+0xf8>)
 801a994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a998:	601a      	str	r2, [r3, #0]
 801a99a:	f3bf 8f4f 	dsb	sy
 801a99e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a9a2:	bf00      	nop
 801a9a4:	3728      	adds	r7, #40	; 0x28
 801a9a6:	46bd      	mov	sp, r7
 801a9a8:	bd80      	pop	{r7, pc}
 801a9aa:	bf00      	nop
 801a9ac:	20001184 	.word	0x20001184
 801a9b0:	20001160 	.word	0x20001160
 801a9b4:	e000ed04 	.word	0xe000ed04

0801a9b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801a9b8:	b580      	push	{r7, lr}
 801a9ba:	b084      	sub	sp, #16
 801a9bc:	af00      	add	r7, sp, #0
 801a9be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801a9c0:	2300      	movs	r3, #0
 801a9c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	d017      	beq.n	801a9fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801a9ca:	4b13      	ldr	r3, [pc, #76]	; (801aa18 <vTaskDelay+0x60>)
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	d00a      	beq.n	801a9e8 <vTaskDelay+0x30>
	__asm volatile
 801a9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9d6:	f383 8811 	msr	BASEPRI, r3
 801a9da:	f3bf 8f6f 	isb	sy
 801a9de:	f3bf 8f4f 	dsb	sy
 801a9e2:	60bb      	str	r3, [r7, #8]
}
 801a9e4:	bf00      	nop
 801a9e6:	e7fe      	b.n	801a9e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801a9e8:	f000 f8e6 	bl	801abb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801a9ec:	2100      	movs	r1, #0
 801a9ee:	6878      	ldr	r0, [r7, #4]
 801a9f0:	f000 ff26 	bl	801b840 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801a9f4:	f000 f8ee 	bl	801abd4 <xTaskResumeAll>
 801a9f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801a9fa:	68fb      	ldr	r3, [r7, #12]
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d107      	bne.n	801aa10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801aa00:	4b06      	ldr	r3, [pc, #24]	; (801aa1c <vTaskDelay+0x64>)
 801aa02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aa06:	601a      	str	r2, [r3, #0]
 801aa08:	f3bf 8f4f 	dsb	sy
 801aa0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801aa10:	bf00      	nop
 801aa12:	3710      	adds	r7, #16
 801aa14:	46bd      	mov	sp, r7
 801aa16:	bd80      	pop	{r7, pc}
 801aa18:	20001184 	.word	0x20001184
 801aa1c:	e000ed04 	.word	0xe000ed04

0801aa20 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 801aa20:	b580      	push	{r7, lr}
 801aa22:	b088      	sub	sp, #32
 801aa24:	af00      	add	r7, sp, #0
 801aa26:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801aa2c:	69bb      	ldr	r3, [r7, #24]
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d10a      	bne.n	801aa48 <eTaskGetState+0x28>
	__asm volatile
 801aa32:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa36:	f383 8811 	msr	BASEPRI, r3
 801aa3a:	f3bf 8f6f 	isb	sy
 801aa3e:	f3bf 8f4f 	dsb	sy
 801aa42:	60bb      	str	r3, [r7, #8]
}
 801aa44:	bf00      	nop
 801aa46:	e7fe      	b.n	801aa46 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 801aa48:	4b23      	ldr	r3, [pc, #140]	; (801aad8 <eTaskGetState+0xb8>)
 801aa4a:	681b      	ldr	r3, [r3, #0]
 801aa4c:	69ba      	ldr	r2, [r7, #24]
 801aa4e:	429a      	cmp	r2, r3
 801aa50:	d102      	bne.n	801aa58 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 801aa52:	2300      	movs	r3, #0
 801aa54:	77fb      	strb	r3, [r7, #31]
 801aa56:	e03a      	b.n	801aace <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 801aa58:	f001 fbe4 	bl	801c224 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801aa5c:	69bb      	ldr	r3, [r7, #24]
 801aa5e:	695b      	ldr	r3, [r3, #20]
 801aa60:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 801aa62:	4b1e      	ldr	r3, [pc, #120]	; (801aadc <eTaskGetState+0xbc>)
 801aa64:	681b      	ldr	r3, [r3, #0]
 801aa66:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801aa68:	4b1d      	ldr	r3, [pc, #116]	; (801aae0 <eTaskGetState+0xc0>)
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 801aa6e:	f001 fc09 	bl	801c284 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801aa72:	697a      	ldr	r2, [r7, #20]
 801aa74:	693b      	ldr	r3, [r7, #16]
 801aa76:	429a      	cmp	r2, r3
 801aa78:	d003      	beq.n	801aa82 <eTaskGetState+0x62>
 801aa7a:	697a      	ldr	r2, [r7, #20]
 801aa7c:	68fb      	ldr	r3, [r7, #12]
 801aa7e:	429a      	cmp	r2, r3
 801aa80:	d102      	bne.n	801aa88 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 801aa82:	2302      	movs	r3, #2
 801aa84:	77fb      	strb	r3, [r7, #31]
 801aa86:	e022      	b.n	801aace <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 801aa88:	697b      	ldr	r3, [r7, #20]
 801aa8a:	4a16      	ldr	r2, [pc, #88]	; (801aae4 <eTaskGetState+0xc4>)
 801aa8c:	4293      	cmp	r3, r2
 801aa8e:	d112      	bne.n	801aab6 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801aa90:	69bb      	ldr	r3, [r7, #24]
 801aa92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d10b      	bne.n	801aab0 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801aa98:	69bb      	ldr	r3, [r7, #24]
 801aa9a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801aa9e:	b2db      	uxtb	r3, r3
 801aaa0:	2b01      	cmp	r3, #1
 801aaa2:	d102      	bne.n	801aaaa <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 801aaa4:	2302      	movs	r3, #2
 801aaa6:	77fb      	strb	r3, [r7, #31]
 801aaa8:	e011      	b.n	801aace <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 801aaaa:	2303      	movs	r3, #3
 801aaac:	77fb      	strb	r3, [r7, #31]
 801aaae:	e00e      	b.n	801aace <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801aab0:	2302      	movs	r3, #2
 801aab2:	77fb      	strb	r3, [r7, #31]
 801aab4:	e00b      	b.n	801aace <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801aab6:	697b      	ldr	r3, [r7, #20]
 801aab8:	4a0b      	ldr	r2, [pc, #44]	; (801aae8 <eTaskGetState+0xc8>)
 801aaba:	4293      	cmp	r3, r2
 801aabc:	d002      	beq.n	801aac4 <eTaskGetState+0xa4>
 801aabe:	697b      	ldr	r3, [r7, #20]
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d102      	bne.n	801aaca <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801aac4:	2304      	movs	r3, #4
 801aac6:	77fb      	strb	r3, [r7, #31]
 801aac8:	e001      	b.n	801aace <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801aaca:	2301      	movs	r3, #1
 801aacc:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801aace:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801aad0:	4618      	mov	r0, r3
 801aad2:	3720      	adds	r7, #32
 801aad4:	46bd      	mov	sp, r7
 801aad6:	bd80      	pop	{r7, pc}
 801aad8:	20000c88 	.word	0x20000c88
 801aadc:	20001114 	.word	0x20001114
 801aae0:	20001118 	.word	0x20001118
 801aae4:	20001148 	.word	0x20001148
 801aae8:	20001130 	.word	0x20001130

0801aaec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801aaec:	b580      	push	{r7, lr}
 801aaee:	b08a      	sub	sp, #40	; 0x28
 801aaf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801aaf2:	2300      	movs	r3, #0
 801aaf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801aaf6:	2300      	movs	r3, #0
 801aaf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801aafa:	463a      	mov	r2, r7
 801aafc:	1d39      	adds	r1, r7, #4
 801aafe:	f107 0308 	add.w	r3, r7, #8
 801ab02:	4618      	mov	r0, r3
 801ab04:	f7fe fa72 	bl	8018fec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801ab08:	6839      	ldr	r1, [r7, #0]
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	68ba      	ldr	r2, [r7, #8]
 801ab0e:	9202      	str	r2, [sp, #8]
 801ab10:	9301      	str	r3, [sp, #4]
 801ab12:	2300      	movs	r3, #0
 801ab14:	9300      	str	r3, [sp, #0]
 801ab16:	2300      	movs	r3, #0
 801ab18:	460a      	mov	r2, r1
 801ab1a:	4921      	ldr	r1, [pc, #132]	; (801aba0 <vTaskStartScheduler+0xb4>)
 801ab1c:	4821      	ldr	r0, [pc, #132]	; (801aba4 <vTaskStartScheduler+0xb8>)
 801ab1e:	f7ff fcb9 	bl	801a494 <xTaskCreateStatic>
 801ab22:	4603      	mov	r3, r0
 801ab24:	4a20      	ldr	r2, [pc, #128]	; (801aba8 <vTaskStartScheduler+0xbc>)
 801ab26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801ab28:	4b1f      	ldr	r3, [pc, #124]	; (801aba8 <vTaskStartScheduler+0xbc>)
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d002      	beq.n	801ab36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801ab30:	2301      	movs	r3, #1
 801ab32:	617b      	str	r3, [r7, #20]
 801ab34:	e001      	b.n	801ab3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801ab36:	2300      	movs	r3, #0
 801ab38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801ab3a:	697b      	ldr	r3, [r7, #20]
 801ab3c:	2b01      	cmp	r3, #1
 801ab3e:	d102      	bne.n	801ab46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801ab40:	f000 fed2 	bl	801b8e8 <xTimerCreateTimerTask>
 801ab44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801ab46:	697b      	ldr	r3, [r7, #20]
 801ab48:	2b01      	cmp	r3, #1
 801ab4a:	d116      	bne.n	801ab7a <vTaskStartScheduler+0x8e>
	__asm volatile
 801ab4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab50:	f383 8811 	msr	BASEPRI, r3
 801ab54:	f3bf 8f6f 	isb	sy
 801ab58:	f3bf 8f4f 	dsb	sy
 801ab5c:	613b      	str	r3, [r7, #16]
}
 801ab5e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801ab60:	4b12      	ldr	r3, [pc, #72]	; (801abac <vTaskStartScheduler+0xc0>)
 801ab62:	f04f 32ff 	mov.w	r2, #4294967295
 801ab66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801ab68:	4b11      	ldr	r3, [pc, #68]	; (801abb0 <vTaskStartScheduler+0xc4>)
 801ab6a:	2201      	movs	r2, #1
 801ab6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801ab6e:	4b11      	ldr	r3, [pc, #68]	; (801abb4 <vTaskStartScheduler+0xc8>)
 801ab70:	2200      	movs	r2, #0
 801ab72:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801ab74:	f001 fab4 	bl	801c0e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801ab78:	e00e      	b.n	801ab98 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801ab7a:	697b      	ldr	r3, [r7, #20]
 801ab7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab80:	d10a      	bne.n	801ab98 <vTaskStartScheduler+0xac>
	__asm volatile
 801ab82:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab86:	f383 8811 	msr	BASEPRI, r3
 801ab8a:	f3bf 8f6f 	isb	sy
 801ab8e:	f3bf 8f4f 	dsb	sy
 801ab92:	60fb      	str	r3, [r7, #12]
}
 801ab94:	bf00      	nop
 801ab96:	e7fe      	b.n	801ab96 <vTaskStartScheduler+0xaa>
}
 801ab98:	bf00      	nop
 801ab9a:	3718      	adds	r7, #24
 801ab9c:	46bd      	mov	sp, r7
 801ab9e:	bd80      	pop	{r7, pc}
 801aba0:	0801e8f4 	.word	0x0801e8f4
 801aba4:	0801b331 	.word	0x0801b331
 801aba8:	20001180 	.word	0x20001180
 801abac:	2000117c 	.word	0x2000117c
 801abb0:	20001168 	.word	0x20001168
 801abb4:	20001160 	.word	0x20001160

0801abb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801abb8:	b480      	push	{r7}
 801abba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801abbc:	4b04      	ldr	r3, [pc, #16]	; (801abd0 <vTaskSuspendAll+0x18>)
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	3301      	adds	r3, #1
 801abc2:	4a03      	ldr	r2, [pc, #12]	; (801abd0 <vTaskSuspendAll+0x18>)
 801abc4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801abc6:	bf00      	nop
 801abc8:	46bd      	mov	sp, r7
 801abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abce:	4770      	bx	lr
 801abd0:	20001184 	.word	0x20001184

0801abd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801abd4:	b580      	push	{r7, lr}
 801abd6:	b084      	sub	sp, #16
 801abd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801abda:	2300      	movs	r3, #0
 801abdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801abde:	2300      	movs	r3, #0
 801abe0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801abe2:	4b42      	ldr	r3, [pc, #264]	; (801acec <xTaskResumeAll+0x118>)
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d10a      	bne.n	801ac00 <xTaskResumeAll+0x2c>
	__asm volatile
 801abea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801abee:	f383 8811 	msr	BASEPRI, r3
 801abf2:	f3bf 8f6f 	isb	sy
 801abf6:	f3bf 8f4f 	dsb	sy
 801abfa:	603b      	str	r3, [r7, #0]
}
 801abfc:	bf00      	nop
 801abfe:	e7fe      	b.n	801abfe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801ac00:	f001 fb10 	bl	801c224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801ac04:	4b39      	ldr	r3, [pc, #228]	; (801acec <xTaskResumeAll+0x118>)
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	3b01      	subs	r3, #1
 801ac0a:	4a38      	ldr	r2, [pc, #224]	; (801acec <xTaskResumeAll+0x118>)
 801ac0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ac0e:	4b37      	ldr	r3, [pc, #220]	; (801acec <xTaskResumeAll+0x118>)
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	d162      	bne.n	801acdc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801ac16:	4b36      	ldr	r3, [pc, #216]	; (801acf0 <xTaskResumeAll+0x11c>)
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d05e      	beq.n	801acdc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801ac1e:	e02f      	b.n	801ac80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ac20:	4b34      	ldr	r3, [pc, #208]	; (801acf4 <xTaskResumeAll+0x120>)
 801ac22:	68db      	ldr	r3, [r3, #12]
 801ac24:	68db      	ldr	r3, [r3, #12]
 801ac26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801ac28:	68fb      	ldr	r3, [r7, #12]
 801ac2a:	3318      	adds	r3, #24
 801ac2c:	4618      	mov	r0, r3
 801ac2e:	f7fe fd07 	bl	8019640 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	3304      	adds	r3, #4
 801ac36:	4618      	mov	r0, r3
 801ac38:	f7fe fd02 	bl	8019640 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801ac3c:	68fb      	ldr	r3, [r7, #12]
 801ac3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ac40:	4b2d      	ldr	r3, [pc, #180]	; (801acf8 <xTaskResumeAll+0x124>)
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	429a      	cmp	r2, r3
 801ac46:	d903      	bls.n	801ac50 <xTaskResumeAll+0x7c>
 801ac48:	68fb      	ldr	r3, [r7, #12]
 801ac4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac4c:	4a2a      	ldr	r2, [pc, #168]	; (801acf8 <xTaskResumeAll+0x124>)
 801ac4e:	6013      	str	r3, [r2, #0]
 801ac50:	68fb      	ldr	r3, [r7, #12]
 801ac52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ac54:	4613      	mov	r3, r2
 801ac56:	009b      	lsls	r3, r3, #2
 801ac58:	4413      	add	r3, r2
 801ac5a:	009b      	lsls	r3, r3, #2
 801ac5c:	4a27      	ldr	r2, [pc, #156]	; (801acfc <xTaskResumeAll+0x128>)
 801ac5e:	441a      	add	r2, r3
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	3304      	adds	r3, #4
 801ac64:	4619      	mov	r1, r3
 801ac66:	4610      	mov	r0, r2
 801ac68:	f7fe fc8d 	bl	8019586 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801ac6c:	68fb      	ldr	r3, [r7, #12]
 801ac6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ac70:	4b23      	ldr	r3, [pc, #140]	; (801ad00 <xTaskResumeAll+0x12c>)
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac76:	429a      	cmp	r2, r3
 801ac78:	d302      	bcc.n	801ac80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801ac7a:	4b22      	ldr	r3, [pc, #136]	; (801ad04 <xTaskResumeAll+0x130>)
 801ac7c:	2201      	movs	r2, #1
 801ac7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801ac80:	4b1c      	ldr	r3, [pc, #112]	; (801acf4 <xTaskResumeAll+0x120>)
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d1cb      	bne.n	801ac20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801ac88:	68fb      	ldr	r3, [r7, #12]
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d001      	beq.n	801ac92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801ac8e:	f000 fc05 	bl	801b49c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801ac92:	4b1d      	ldr	r3, [pc, #116]	; (801ad08 <xTaskResumeAll+0x134>)
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d010      	beq.n	801acc0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801ac9e:	f000 f859 	bl	801ad54 <xTaskIncrementTick>
 801aca2:	4603      	mov	r3, r0
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	d002      	beq.n	801acae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801aca8:	4b16      	ldr	r3, [pc, #88]	; (801ad04 <xTaskResumeAll+0x130>)
 801acaa:	2201      	movs	r2, #1
 801acac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	3b01      	subs	r3, #1
 801acb2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d1f1      	bne.n	801ac9e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801acba:	4b13      	ldr	r3, [pc, #76]	; (801ad08 <xTaskResumeAll+0x134>)
 801acbc:	2200      	movs	r2, #0
 801acbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801acc0:	4b10      	ldr	r3, [pc, #64]	; (801ad04 <xTaskResumeAll+0x130>)
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d009      	beq.n	801acdc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801acc8:	2301      	movs	r3, #1
 801acca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801accc:	4b0f      	ldr	r3, [pc, #60]	; (801ad0c <xTaskResumeAll+0x138>)
 801acce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801acd2:	601a      	str	r2, [r3, #0]
 801acd4:	f3bf 8f4f 	dsb	sy
 801acd8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801acdc:	f001 fad2 	bl	801c284 <vPortExitCritical>

	return xAlreadyYielded;
 801ace0:	68bb      	ldr	r3, [r7, #8]
}
 801ace2:	4618      	mov	r0, r3
 801ace4:	3710      	adds	r7, #16
 801ace6:	46bd      	mov	sp, r7
 801ace8:	bd80      	pop	{r7, pc}
 801acea:	bf00      	nop
 801acec:	20001184 	.word	0x20001184
 801acf0:	2000115c 	.word	0x2000115c
 801acf4:	2000111c 	.word	0x2000111c
 801acf8:	20001164 	.word	0x20001164
 801acfc:	20000c8c 	.word	0x20000c8c
 801ad00:	20000c88 	.word	0x20000c88
 801ad04:	20001170 	.word	0x20001170
 801ad08:	2000116c 	.word	0x2000116c
 801ad0c:	e000ed04 	.word	0xe000ed04

0801ad10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801ad10:	b480      	push	{r7}
 801ad12:	b083      	sub	sp, #12
 801ad14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801ad16:	4b05      	ldr	r3, [pc, #20]	; (801ad2c <xTaskGetTickCount+0x1c>)
 801ad18:	681b      	ldr	r3, [r3, #0]
 801ad1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801ad1c:	687b      	ldr	r3, [r7, #4]
}
 801ad1e:	4618      	mov	r0, r3
 801ad20:	370c      	adds	r7, #12
 801ad22:	46bd      	mov	sp, r7
 801ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad28:	4770      	bx	lr
 801ad2a:	bf00      	nop
 801ad2c:	20001160 	.word	0x20001160

0801ad30 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801ad30:	b580      	push	{r7, lr}
 801ad32:	b082      	sub	sp, #8
 801ad34:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801ad36:	f001 fb57 	bl	801c3e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801ad3a:	2300      	movs	r3, #0
 801ad3c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801ad3e:	4b04      	ldr	r3, [pc, #16]	; (801ad50 <xTaskGetTickCountFromISR+0x20>)
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801ad44:	683b      	ldr	r3, [r7, #0]
}
 801ad46:	4618      	mov	r0, r3
 801ad48:	3708      	adds	r7, #8
 801ad4a:	46bd      	mov	sp, r7
 801ad4c:	bd80      	pop	{r7, pc}
 801ad4e:	bf00      	nop
 801ad50:	20001160 	.word	0x20001160

0801ad54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801ad54:	b580      	push	{r7, lr}
 801ad56:	b086      	sub	sp, #24
 801ad58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801ad5a:	2300      	movs	r3, #0
 801ad5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ad5e:	4b4f      	ldr	r3, [pc, #316]	; (801ae9c <xTaskIncrementTick+0x148>)
 801ad60:	681b      	ldr	r3, [r3, #0]
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	f040 808f 	bne.w	801ae86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801ad68:	4b4d      	ldr	r3, [pc, #308]	; (801aea0 <xTaskIncrementTick+0x14c>)
 801ad6a:	681b      	ldr	r3, [r3, #0]
 801ad6c:	3301      	adds	r3, #1
 801ad6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801ad70:	4a4b      	ldr	r2, [pc, #300]	; (801aea0 <xTaskIncrementTick+0x14c>)
 801ad72:	693b      	ldr	r3, [r7, #16]
 801ad74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801ad76:	693b      	ldr	r3, [r7, #16]
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d120      	bne.n	801adbe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801ad7c:	4b49      	ldr	r3, [pc, #292]	; (801aea4 <xTaskIncrementTick+0x150>)
 801ad7e:	681b      	ldr	r3, [r3, #0]
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	d00a      	beq.n	801ad9c <xTaskIncrementTick+0x48>
	__asm volatile
 801ad86:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad8a:	f383 8811 	msr	BASEPRI, r3
 801ad8e:	f3bf 8f6f 	isb	sy
 801ad92:	f3bf 8f4f 	dsb	sy
 801ad96:	603b      	str	r3, [r7, #0]
}
 801ad98:	bf00      	nop
 801ad9a:	e7fe      	b.n	801ad9a <xTaskIncrementTick+0x46>
 801ad9c:	4b41      	ldr	r3, [pc, #260]	; (801aea4 <xTaskIncrementTick+0x150>)
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	60fb      	str	r3, [r7, #12]
 801ada2:	4b41      	ldr	r3, [pc, #260]	; (801aea8 <xTaskIncrementTick+0x154>)
 801ada4:	681b      	ldr	r3, [r3, #0]
 801ada6:	4a3f      	ldr	r2, [pc, #252]	; (801aea4 <xTaskIncrementTick+0x150>)
 801ada8:	6013      	str	r3, [r2, #0]
 801adaa:	4a3f      	ldr	r2, [pc, #252]	; (801aea8 <xTaskIncrementTick+0x154>)
 801adac:	68fb      	ldr	r3, [r7, #12]
 801adae:	6013      	str	r3, [r2, #0]
 801adb0:	4b3e      	ldr	r3, [pc, #248]	; (801aeac <xTaskIncrementTick+0x158>)
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	3301      	adds	r3, #1
 801adb6:	4a3d      	ldr	r2, [pc, #244]	; (801aeac <xTaskIncrementTick+0x158>)
 801adb8:	6013      	str	r3, [r2, #0]
 801adba:	f000 fb6f 	bl	801b49c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801adbe:	4b3c      	ldr	r3, [pc, #240]	; (801aeb0 <xTaskIncrementTick+0x15c>)
 801adc0:	681b      	ldr	r3, [r3, #0]
 801adc2:	693a      	ldr	r2, [r7, #16]
 801adc4:	429a      	cmp	r2, r3
 801adc6:	d349      	bcc.n	801ae5c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801adc8:	4b36      	ldr	r3, [pc, #216]	; (801aea4 <xTaskIncrementTick+0x150>)
 801adca:	681b      	ldr	r3, [r3, #0]
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	2b00      	cmp	r3, #0
 801add0:	d104      	bne.n	801addc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801add2:	4b37      	ldr	r3, [pc, #220]	; (801aeb0 <xTaskIncrementTick+0x15c>)
 801add4:	f04f 32ff 	mov.w	r2, #4294967295
 801add8:	601a      	str	r2, [r3, #0]
					break;
 801adda:	e03f      	b.n	801ae5c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801addc:	4b31      	ldr	r3, [pc, #196]	; (801aea4 <xTaskIncrementTick+0x150>)
 801adde:	681b      	ldr	r3, [r3, #0]
 801ade0:	68db      	ldr	r3, [r3, #12]
 801ade2:	68db      	ldr	r3, [r3, #12]
 801ade4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801ade6:	68bb      	ldr	r3, [r7, #8]
 801ade8:	685b      	ldr	r3, [r3, #4]
 801adea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801adec:	693a      	ldr	r2, [r7, #16]
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	429a      	cmp	r2, r3
 801adf2:	d203      	bcs.n	801adfc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801adf4:	4a2e      	ldr	r2, [pc, #184]	; (801aeb0 <xTaskIncrementTick+0x15c>)
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801adfa:	e02f      	b.n	801ae5c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801adfc:	68bb      	ldr	r3, [r7, #8]
 801adfe:	3304      	adds	r3, #4
 801ae00:	4618      	mov	r0, r3
 801ae02:	f7fe fc1d 	bl	8019640 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801ae06:	68bb      	ldr	r3, [r7, #8]
 801ae08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d004      	beq.n	801ae18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801ae0e:	68bb      	ldr	r3, [r7, #8]
 801ae10:	3318      	adds	r3, #24
 801ae12:	4618      	mov	r0, r3
 801ae14:	f7fe fc14 	bl	8019640 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801ae18:	68bb      	ldr	r3, [r7, #8]
 801ae1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ae1c:	4b25      	ldr	r3, [pc, #148]	; (801aeb4 <xTaskIncrementTick+0x160>)
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	429a      	cmp	r2, r3
 801ae22:	d903      	bls.n	801ae2c <xTaskIncrementTick+0xd8>
 801ae24:	68bb      	ldr	r3, [r7, #8]
 801ae26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae28:	4a22      	ldr	r2, [pc, #136]	; (801aeb4 <xTaskIncrementTick+0x160>)
 801ae2a:	6013      	str	r3, [r2, #0]
 801ae2c:	68bb      	ldr	r3, [r7, #8]
 801ae2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ae30:	4613      	mov	r3, r2
 801ae32:	009b      	lsls	r3, r3, #2
 801ae34:	4413      	add	r3, r2
 801ae36:	009b      	lsls	r3, r3, #2
 801ae38:	4a1f      	ldr	r2, [pc, #124]	; (801aeb8 <xTaskIncrementTick+0x164>)
 801ae3a:	441a      	add	r2, r3
 801ae3c:	68bb      	ldr	r3, [r7, #8]
 801ae3e:	3304      	adds	r3, #4
 801ae40:	4619      	mov	r1, r3
 801ae42:	4610      	mov	r0, r2
 801ae44:	f7fe fb9f 	bl	8019586 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801ae48:	68bb      	ldr	r3, [r7, #8]
 801ae4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ae4c:	4b1b      	ldr	r3, [pc, #108]	; (801aebc <xTaskIncrementTick+0x168>)
 801ae4e:	681b      	ldr	r3, [r3, #0]
 801ae50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae52:	429a      	cmp	r2, r3
 801ae54:	d3b8      	bcc.n	801adc8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801ae56:	2301      	movs	r3, #1
 801ae58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801ae5a:	e7b5      	b.n	801adc8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801ae5c:	4b17      	ldr	r3, [pc, #92]	; (801aebc <xTaskIncrementTick+0x168>)
 801ae5e:	681b      	ldr	r3, [r3, #0]
 801ae60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ae62:	4915      	ldr	r1, [pc, #84]	; (801aeb8 <xTaskIncrementTick+0x164>)
 801ae64:	4613      	mov	r3, r2
 801ae66:	009b      	lsls	r3, r3, #2
 801ae68:	4413      	add	r3, r2
 801ae6a:	009b      	lsls	r3, r3, #2
 801ae6c:	440b      	add	r3, r1
 801ae6e:	681b      	ldr	r3, [r3, #0]
 801ae70:	2b01      	cmp	r3, #1
 801ae72:	d901      	bls.n	801ae78 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801ae74:	2301      	movs	r3, #1
 801ae76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801ae78:	4b11      	ldr	r3, [pc, #68]	; (801aec0 <xTaskIncrementTick+0x16c>)
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d007      	beq.n	801ae90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801ae80:	2301      	movs	r3, #1
 801ae82:	617b      	str	r3, [r7, #20]
 801ae84:	e004      	b.n	801ae90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801ae86:	4b0f      	ldr	r3, [pc, #60]	; (801aec4 <xTaskIncrementTick+0x170>)
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	3301      	adds	r3, #1
 801ae8c:	4a0d      	ldr	r2, [pc, #52]	; (801aec4 <xTaskIncrementTick+0x170>)
 801ae8e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801ae90:	697b      	ldr	r3, [r7, #20]
}
 801ae92:	4618      	mov	r0, r3
 801ae94:	3718      	adds	r7, #24
 801ae96:	46bd      	mov	sp, r7
 801ae98:	bd80      	pop	{r7, pc}
 801ae9a:	bf00      	nop
 801ae9c:	20001184 	.word	0x20001184
 801aea0:	20001160 	.word	0x20001160
 801aea4:	20001114 	.word	0x20001114
 801aea8:	20001118 	.word	0x20001118
 801aeac:	20001174 	.word	0x20001174
 801aeb0:	2000117c 	.word	0x2000117c
 801aeb4:	20001164 	.word	0x20001164
 801aeb8:	20000c8c 	.word	0x20000c8c
 801aebc:	20000c88 	.word	0x20000c88
 801aec0:	20001170 	.word	0x20001170
 801aec4:	2000116c 	.word	0x2000116c

0801aec8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801aec8:	b480      	push	{r7}
 801aeca:	b085      	sub	sp, #20
 801aecc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801aece:	4b28      	ldr	r3, [pc, #160]	; (801af70 <vTaskSwitchContext+0xa8>)
 801aed0:	681b      	ldr	r3, [r3, #0]
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d003      	beq.n	801aede <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801aed6:	4b27      	ldr	r3, [pc, #156]	; (801af74 <vTaskSwitchContext+0xac>)
 801aed8:	2201      	movs	r2, #1
 801aeda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801aedc:	e041      	b.n	801af62 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801aede:	4b25      	ldr	r3, [pc, #148]	; (801af74 <vTaskSwitchContext+0xac>)
 801aee0:	2200      	movs	r2, #0
 801aee2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aee4:	4b24      	ldr	r3, [pc, #144]	; (801af78 <vTaskSwitchContext+0xb0>)
 801aee6:	681b      	ldr	r3, [r3, #0]
 801aee8:	60fb      	str	r3, [r7, #12]
 801aeea:	e010      	b.n	801af0e <vTaskSwitchContext+0x46>
 801aeec:	68fb      	ldr	r3, [r7, #12]
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	d10a      	bne.n	801af08 <vTaskSwitchContext+0x40>
	__asm volatile
 801aef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aef6:	f383 8811 	msr	BASEPRI, r3
 801aefa:	f3bf 8f6f 	isb	sy
 801aefe:	f3bf 8f4f 	dsb	sy
 801af02:	607b      	str	r3, [r7, #4]
}
 801af04:	bf00      	nop
 801af06:	e7fe      	b.n	801af06 <vTaskSwitchContext+0x3e>
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	3b01      	subs	r3, #1
 801af0c:	60fb      	str	r3, [r7, #12]
 801af0e:	491b      	ldr	r1, [pc, #108]	; (801af7c <vTaskSwitchContext+0xb4>)
 801af10:	68fa      	ldr	r2, [r7, #12]
 801af12:	4613      	mov	r3, r2
 801af14:	009b      	lsls	r3, r3, #2
 801af16:	4413      	add	r3, r2
 801af18:	009b      	lsls	r3, r3, #2
 801af1a:	440b      	add	r3, r1
 801af1c:	681b      	ldr	r3, [r3, #0]
 801af1e:	2b00      	cmp	r3, #0
 801af20:	d0e4      	beq.n	801aeec <vTaskSwitchContext+0x24>
 801af22:	68fa      	ldr	r2, [r7, #12]
 801af24:	4613      	mov	r3, r2
 801af26:	009b      	lsls	r3, r3, #2
 801af28:	4413      	add	r3, r2
 801af2a:	009b      	lsls	r3, r3, #2
 801af2c:	4a13      	ldr	r2, [pc, #76]	; (801af7c <vTaskSwitchContext+0xb4>)
 801af2e:	4413      	add	r3, r2
 801af30:	60bb      	str	r3, [r7, #8]
 801af32:	68bb      	ldr	r3, [r7, #8]
 801af34:	685b      	ldr	r3, [r3, #4]
 801af36:	685a      	ldr	r2, [r3, #4]
 801af38:	68bb      	ldr	r3, [r7, #8]
 801af3a:	605a      	str	r2, [r3, #4]
 801af3c:	68bb      	ldr	r3, [r7, #8]
 801af3e:	685a      	ldr	r2, [r3, #4]
 801af40:	68bb      	ldr	r3, [r7, #8]
 801af42:	3308      	adds	r3, #8
 801af44:	429a      	cmp	r2, r3
 801af46:	d104      	bne.n	801af52 <vTaskSwitchContext+0x8a>
 801af48:	68bb      	ldr	r3, [r7, #8]
 801af4a:	685b      	ldr	r3, [r3, #4]
 801af4c:	685a      	ldr	r2, [r3, #4]
 801af4e:	68bb      	ldr	r3, [r7, #8]
 801af50:	605a      	str	r2, [r3, #4]
 801af52:	68bb      	ldr	r3, [r7, #8]
 801af54:	685b      	ldr	r3, [r3, #4]
 801af56:	68db      	ldr	r3, [r3, #12]
 801af58:	4a09      	ldr	r2, [pc, #36]	; (801af80 <vTaskSwitchContext+0xb8>)
 801af5a:	6013      	str	r3, [r2, #0]
 801af5c:	4a06      	ldr	r2, [pc, #24]	; (801af78 <vTaskSwitchContext+0xb0>)
 801af5e:	68fb      	ldr	r3, [r7, #12]
 801af60:	6013      	str	r3, [r2, #0]
}
 801af62:	bf00      	nop
 801af64:	3714      	adds	r7, #20
 801af66:	46bd      	mov	sp, r7
 801af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af6c:	4770      	bx	lr
 801af6e:	bf00      	nop
 801af70:	20001184 	.word	0x20001184
 801af74:	20001170 	.word	0x20001170
 801af78:	20001164 	.word	0x20001164
 801af7c:	20000c8c 	.word	0x20000c8c
 801af80:	20000c88 	.word	0x20000c88

0801af84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801af84:	b580      	push	{r7, lr}
 801af86:	b084      	sub	sp, #16
 801af88:	af00      	add	r7, sp, #0
 801af8a:	6078      	str	r0, [r7, #4]
 801af8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	2b00      	cmp	r3, #0
 801af92:	d10a      	bne.n	801afaa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801af94:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af98:	f383 8811 	msr	BASEPRI, r3
 801af9c:	f3bf 8f6f 	isb	sy
 801afa0:	f3bf 8f4f 	dsb	sy
 801afa4:	60fb      	str	r3, [r7, #12]
}
 801afa6:	bf00      	nop
 801afa8:	e7fe      	b.n	801afa8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801afaa:	4b07      	ldr	r3, [pc, #28]	; (801afc8 <vTaskPlaceOnEventList+0x44>)
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	3318      	adds	r3, #24
 801afb0:	4619      	mov	r1, r3
 801afb2:	6878      	ldr	r0, [r7, #4]
 801afb4:	f7fe fb0b 	bl	80195ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801afb8:	2101      	movs	r1, #1
 801afba:	6838      	ldr	r0, [r7, #0]
 801afbc:	f000 fc40 	bl	801b840 <prvAddCurrentTaskToDelayedList>
}
 801afc0:	bf00      	nop
 801afc2:	3710      	adds	r7, #16
 801afc4:	46bd      	mov	sp, r7
 801afc6:	bd80      	pop	{r7, pc}
 801afc8:	20000c88 	.word	0x20000c88

0801afcc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801afcc:	b580      	push	{r7, lr}
 801afce:	b086      	sub	sp, #24
 801afd0:	af00      	add	r7, sp, #0
 801afd2:	60f8      	str	r0, [r7, #12]
 801afd4:	60b9      	str	r1, [r7, #8]
 801afd6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801afd8:	68fb      	ldr	r3, [r7, #12]
 801afda:	2b00      	cmp	r3, #0
 801afdc:	d10a      	bne.n	801aff4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801afde:	f04f 0350 	mov.w	r3, #80	; 0x50
 801afe2:	f383 8811 	msr	BASEPRI, r3
 801afe6:	f3bf 8f6f 	isb	sy
 801afea:	f3bf 8f4f 	dsb	sy
 801afee:	617b      	str	r3, [r7, #20]
}
 801aff0:	bf00      	nop
 801aff2:	e7fe      	b.n	801aff2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801aff4:	4b11      	ldr	r3, [pc, #68]	; (801b03c <vTaskPlaceOnUnorderedEventList+0x70>)
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d10a      	bne.n	801b012 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 801affc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b000:	f383 8811 	msr	BASEPRI, r3
 801b004:	f3bf 8f6f 	isb	sy
 801b008:	f3bf 8f4f 	dsb	sy
 801b00c:	613b      	str	r3, [r7, #16]
}
 801b00e:	bf00      	nop
 801b010:	e7fe      	b.n	801b010 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801b012:	4b0b      	ldr	r3, [pc, #44]	; (801b040 <vTaskPlaceOnUnorderedEventList+0x74>)
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	68ba      	ldr	r2, [r7, #8]
 801b018:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801b01c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b01e:	4b08      	ldr	r3, [pc, #32]	; (801b040 <vTaskPlaceOnUnorderedEventList+0x74>)
 801b020:	681b      	ldr	r3, [r3, #0]
 801b022:	3318      	adds	r3, #24
 801b024:	4619      	mov	r1, r3
 801b026:	68f8      	ldr	r0, [r7, #12]
 801b028:	f7fe faad 	bl	8019586 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801b02c:	2101      	movs	r1, #1
 801b02e:	6878      	ldr	r0, [r7, #4]
 801b030:	f000 fc06 	bl	801b840 <prvAddCurrentTaskToDelayedList>
}
 801b034:	bf00      	nop
 801b036:	3718      	adds	r7, #24
 801b038:	46bd      	mov	sp, r7
 801b03a:	bd80      	pop	{r7, pc}
 801b03c:	20001184 	.word	0x20001184
 801b040:	20000c88 	.word	0x20000c88

0801b044 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801b044:	b580      	push	{r7, lr}
 801b046:	b086      	sub	sp, #24
 801b048:	af00      	add	r7, sp, #0
 801b04a:	60f8      	str	r0, [r7, #12]
 801b04c:	60b9      	str	r1, [r7, #8]
 801b04e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801b050:	68fb      	ldr	r3, [r7, #12]
 801b052:	2b00      	cmp	r3, #0
 801b054:	d10a      	bne.n	801b06c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801b056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b05a:	f383 8811 	msr	BASEPRI, r3
 801b05e:	f3bf 8f6f 	isb	sy
 801b062:	f3bf 8f4f 	dsb	sy
 801b066:	617b      	str	r3, [r7, #20]
}
 801b068:	bf00      	nop
 801b06a:	e7fe      	b.n	801b06a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b06c:	4b0a      	ldr	r3, [pc, #40]	; (801b098 <vTaskPlaceOnEventListRestricted+0x54>)
 801b06e:	681b      	ldr	r3, [r3, #0]
 801b070:	3318      	adds	r3, #24
 801b072:	4619      	mov	r1, r3
 801b074:	68f8      	ldr	r0, [r7, #12]
 801b076:	f7fe fa86 	bl	8019586 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d002      	beq.n	801b086 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801b080:	f04f 33ff 	mov.w	r3, #4294967295
 801b084:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801b086:	6879      	ldr	r1, [r7, #4]
 801b088:	68b8      	ldr	r0, [r7, #8]
 801b08a:	f000 fbd9 	bl	801b840 <prvAddCurrentTaskToDelayedList>
	}
 801b08e:	bf00      	nop
 801b090:	3718      	adds	r7, #24
 801b092:	46bd      	mov	sp, r7
 801b094:	bd80      	pop	{r7, pc}
 801b096:	bf00      	nop
 801b098:	20000c88 	.word	0x20000c88

0801b09c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801b09c:	b580      	push	{r7, lr}
 801b09e:	b086      	sub	sp, #24
 801b0a0:	af00      	add	r7, sp, #0
 801b0a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	68db      	ldr	r3, [r3, #12]
 801b0a8:	68db      	ldr	r3, [r3, #12]
 801b0aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801b0ac:	693b      	ldr	r3, [r7, #16]
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d10a      	bne.n	801b0c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801b0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0b6:	f383 8811 	msr	BASEPRI, r3
 801b0ba:	f3bf 8f6f 	isb	sy
 801b0be:	f3bf 8f4f 	dsb	sy
 801b0c2:	60fb      	str	r3, [r7, #12]
}
 801b0c4:	bf00      	nop
 801b0c6:	e7fe      	b.n	801b0c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801b0c8:	693b      	ldr	r3, [r7, #16]
 801b0ca:	3318      	adds	r3, #24
 801b0cc:	4618      	mov	r0, r3
 801b0ce:	f7fe fab7 	bl	8019640 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b0d2:	4b1e      	ldr	r3, [pc, #120]	; (801b14c <xTaskRemoveFromEventList+0xb0>)
 801b0d4:	681b      	ldr	r3, [r3, #0]
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d11d      	bne.n	801b116 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801b0da:	693b      	ldr	r3, [r7, #16]
 801b0dc:	3304      	adds	r3, #4
 801b0de:	4618      	mov	r0, r3
 801b0e0:	f7fe faae 	bl	8019640 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801b0e4:	693b      	ldr	r3, [r7, #16]
 801b0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b0e8:	4b19      	ldr	r3, [pc, #100]	; (801b150 <xTaskRemoveFromEventList+0xb4>)
 801b0ea:	681b      	ldr	r3, [r3, #0]
 801b0ec:	429a      	cmp	r2, r3
 801b0ee:	d903      	bls.n	801b0f8 <xTaskRemoveFromEventList+0x5c>
 801b0f0:	693b      	ldr	r3, [r7, #16]
 801b0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b0f4:	4a16      	ldr	r2, [pc, #88]	; (801b150 <xTaskRemoveFromEventList+0xb4>)
 801b0f6:	6013      	str	r3, [r2, #0]
 801b0f8:	693b      	ldr	r3, [r7, #16]
 801b0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b0fc:	4613      	mov	r3, r2
 801b0fe:	009b      	lsls	r3, r3, #2
 801b100:	4413      	add	r3, r2
 801b102:	009b      	lsls	r3, r3, #2
 801b104:	4a13      	ldr	r2, [pc, #76]	; (801b154 <xTaskRemoveFromEventList+0xb8>)
 801b106:	441a      	add	r2, r3
 801b108:	693b      	ldr	r3, [r7, #16]
 801b10a:	3304      	adds	r3, #4
 801b10c:	4619      	mov	r1, r3
 801b10e:	4610      	mov	r0, r2
 801b110:	f7fe fa39 	bl	8019586 <vListInsertEnd>
 801b114:	e005      	b.n	801b122 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801b116:	693b      	ldr	r3, [r7, #16]
 801b118:	3318      	adds	r3, #24
 801b11a:	4619      	mov	r1, r3
 801b11c:	480e      	ldr	r0, [pc, #56]	; (801b158 <xTaskRemoveFromEventList+0xbc>)
 801b11e:	f7fe fa32 	bl	8019586 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b122:	693b      	ldr	r3, [r7, #16]
 801b124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b126:	4b0d      	ldr	r3, [pc, #52]	; (801b15c <xTaskRemoveFromEventList+0xc0>)
 801b128:	681b      	ldr	r3, [r3, #0]
 801b12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b12c:	429a      	cmp	r2, r3
 801b12e:	d905      	bls.n	801b13c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801b130:	2301      	movs	r3, #1
 801b132:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801b134:	4b0a      	ldr	r3, [pc, #40]	; (801b160 <xTaskRemoveFromEventList+0xc4>)
 801b136:	2201      	movs	r2, #1
 801b138:	601a      	str	r2, [r3, #0]
 801b13a:	e001      	b.n	801b140 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801b13c:	2300      	movs	r3, #0
 801b13e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801b140:	697b      	ldr	r3, [r7, #20]
}
 801b142:	4618      	mov	r0, r3
 801b144:	3718      	adds	r7, #24
 801b146:	46bd      	mov	sp, r7
 801b148:	bd80      	pop	{r7, pc}
 801b14a:	bf00      	nop
 801b14c:	20001184 	.word	0x20001184
 801b150:	20001164 	.word	0x20001164
 801b154:	20000c8c 	.word	0x20000c8c
 801b158:	2000111c 	.word	0x2000111c
 801b15c:	20000c88 	.word	0x20000c88
 801b160:	20001170 	.word	0x20001170

0801b164 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801b164:	b580      	push	{r7, lr}
 801b166:	b086      	sub	sp, #24
 801b168:	af00      	add	r7, sp, #0
 801b16a:	6078      	str	r0, [r7, #4]
 801b16c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801b16e:	4b29      	ldr	r3, [pc, #164]	; (801b214 <vTaskRemoveFromUnorderedEventList+0xb0>)
 801b170:	681b      	ldr	r3, [r3, #0]
 801b172:	2b00      	cmp	r3, #0
 801b174:	d10a      	bne.n	801b18c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801b176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b17a:	f383 8811 	msr	BASEPRI, r3
 801b17e:	f3bf 8f6f 	isb	sy
 801b182:	f3bf 8f4f 	dsb	sy
 801b186:	613b      	str	r3, [r7, #16]
}
 801b188:	bf00      	nop
 801b18a:	e7fe      	b.n	801b18a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801b18c:	683b      	ldr	r3, [r7, #0]
 801b18e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	68db      	ldr	r3, [r3, #12]
 801b19a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801b19c:	697b      	ldr	r3, [r7, #20]
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d10a      	bne.n	801b1b8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801b1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b1a6:	f383 8811 	msr	BASEPRI, r3
 801b1aa:	f3bf 8f6f 	isb	sy
 801b1ae:	f3bf 8f4f 	dsb	sy
 801b1b2:	60fb      	str	r3, [r7, #12]
}
 801b1b4:	bf00      	nop
 801b1b6:	e7fe      	b.n	801b1b6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 801b1b8:	6878      	ldr	r0, [r7, #4]
 801b1ba:	f7fe fa41 	bl	8019640 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801b1be:	697b      	ldr	r3, [r7, #20]
 801b1c0:	3304      	adds	r3, #4
 801b1c2:	4618      	mov	r0, r3
 801b1c4:	f7fe fa3c 	bl	8019640 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801b1c8:	697b      	ldr	r3, [r7, #20]
 801b1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b1cc:	4b12      	ldr	r3, [pc, #72]	; (801b218 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	429a      	cmp	r2, r3
 801b1d2:	d903      	bls.n	801b1dc <vTaskRemoveFromUnorderedEventList+0x78>
 801b1d4:	697b      	ldr	r3, [r7, #20]
 801b1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b1d8:	4a0f      	ldr	r2, [pc, #60]	; (801b218 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801b1da:	6013      	str	r3, [r2, #0]
 801b1dc:	697b      	ldr	r3, [r7, #20]
 801b1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b1e0:	4613      	mov	r3, r2
 801b1e2:	009b      	lsls	r3, r3, #2
 801b1e4:	4413      	add	r3, r2
 801b1e6:	009b      	lsls	r3, r3, #2
 801b1e8:	4a0c      	ldr	r2, [pc, #48]	; (801b21c <vTaskRemoveFromUnorderedEventList+0xb8>)
 801b1ea:	441a      	add	r2, r3
 801b1ec:	697b      	ldr	r3, [r7, #20]
 801b1ee:	3304      	adds	r3, #4
 801b1f0:	4619      	mov	r1, r3
 801b1f2:	4610      	mov	r0, r2
 801b1f4:	f7fe f9c7 	bl	8019586 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b1f8:	697b      	ldr	r3, [r7, #20]
 801b1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b1fc:	4b08      	ldr	r3, [pc, #32]	; (801b220 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b202:	429a      	cmp	r2, r3
 801b204:	d902      	bls.n	801b20c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801b206:	4b07      	ldr	r3, [pc, #28]	; (801b224 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801b208:	2201      	movs	r2, #1
 801b20a:	601a      	str	r2, [r3, #0]
	}
}
 801b20c:	bf00      	nop
 801b20e:	3718      	adds	r7, #24
 801b210:	46bd      	mov	sp, r7
 801b212:	bd80      	pop	{r7, pc}
 801b214:	20001184 	.word	0x20001184
 801b218:	20001164 	.word	0x20001164
 801b21c:	20000c8c 	.word	0x20000c8c
 801b220:	20000c88 	.word	0x20000c88
 801b224:	20001170 	.word	0x20001170

0801b228 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801b228:	b480      	push	{r7}
 801b22a:	b083      	sub	sp, #12
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801b230:	4b06      	ldr	r3, [pc, #24]	; (801b24c <vTaskInternalSetTimeOutState+0x24>)
 801b232:	681a      	ldr	r2, [r3, #0]
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801b238:	4b05      	ldr	r3, [pc, #20]	; (801b250 <vTaskInternalSetTimeOutState+0x28>)
 801b23a:	681a      	ldr	r2, [r3, #0]
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	605a      	str	r2, [r3, #4]
}
 801b240:	bf00      	nop
 801b242:	370c      	adds	r7, #12
 801b244:	46bd      	mov	sp, r7
 801b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b24a:	4770      	bx	lr
 801b24c:	20001174 	.word	0x20001174
 801b250:	20001160 	.word	0x20001160

0801b254 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801b254:	b580      	push	{r7, lr}
 801b256:	b088      	sub	sp, #32
 801b258:	af00      	add	r7, sp, #0
 801b25a:	6078      	str	r0, [r7, #4]
 801b25c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	2b00      	cmp	r3, #0
 801b262:	d10a      	bne.n	801b27a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801b264:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b268:	f383 8811 	msr	BASEPRI, r3
 801b26c:	f3bf 8f6f 	isb	sy
 801b270:	f3bf 8f4f 	dsb	sy
 801b274:	613b      	str	r3, [r7, #16]
}
 801b276:	bf00      	nop
 801b278:	e7fe      	b.n	801b278 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801b27a:	683b      	ldr	r3, [r7, #0]
 801b27c:	2b00      	cmp	r3, #0
 801b27e:	d10a      	bne.n	801b296 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801b280:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b284:	f383 8811 	msr	BASEPRI, r3
 801b288:	f3bf 8f6f 	isb	sy
 801b28c:	f3bf 8f4f 	dsb	sy
 801b290:	60fb      	str	r3, [r7, #12]
}
 801b292:	bf00      	nop
 801b294:	e7fe      	b.n	801b294 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801b296:	f000 ffc5 	bl	801c224 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801b29a:	4b1d      	ldr	r3, [pc, #116]	; (801b310 <xTaskCheckForTimeOut+0xbc>)
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	685b      	ldr	r3, [r3, #4]
 801b2a4:	69ba      	ldr	r2, [r7, #24]
 801b2a6:	1ad3      	subs	r3, r2, r3
 801b2a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801b2aa:	683b      	ldr	r3, [r7, #0]
 801b2ac:	681b      	ldr	r3, [r3, #0]
 801b2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b2b2:	d102      	bne.n	801b2ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801b2b4:	2300      	movs	r3, #0
 801b2b6:	61fb      	str	r3, [r7, #28]
 801b2b8:	e023      	b.n	801b302 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	681a      	ldr	r2, [r3, #0]
 801b2be:	4b15      	ldr	r3, [pc, #84]	; (801b314 <xTaskCheckForTimeOut+0xc0>)
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	429a      	cmp	r2, r3
 801b2c4:	d007      	beq.n	801b2d6 <xTaskCheckForTimeOut+0x82>
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	685b      	ldr	r3, [r3, #4]
 801b2ca:	69ba      	ldr	r2, [r7, #24]
 801b2cc:	429a      	cmp	r2, r3
 801b2ce:	d302      	bcc.n	801b2d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801b2d0:	2301      	movs	r3, #1
 801b2d2:	61fb      	str	r3, [r7, #28]
 801b2d4:	e015      	b.n	801b302 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801b2d6:	683b      	ldr	r3, [r7, #0]
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	697a      	ldr	r2, [r7, #20]
 801b2dc:	429a      	cmp	r2, r3
 801b2de:	d20b      	bcs.n	801b2f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801b2e0:	683b      	ldr	r3, [r7, #0]
 801b2e2:	681a      	ldr	r2, [r3, #0]
 801b2e4:	697b      	ldr	r3, [r7, #20]
 801b2e6:	1ad2      	subs	r2, r2, r3
 801b2e8:	683b      	ldr	r3, [r7, #0]
 801b2ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801b2ec:	6878      	ldr	r0, [r7, #4]
 801b2ee:	f7ff ff9b 	bl	801b228 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801b2f2:	2300      	movs	r3, #0
 801b2f4:	61fb      	str	r3, [r7, #28]
 801b2f6:	e004      	b.n	801b302 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801b2f8:	683b      	ldr	r3, [r7, #0]
 801b2fa:	2200      	movs	r2, #0
 801b2fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801b2fe:	2301      	movs	r3, #1
 801b300:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801b302:	f000 ffbf 	bl	801c284 <vPortExitCritical>

	return xReturn;
 801b306:	69fb      	ldr	r3, [r7, #28]
}
 801b308:	4618      	mov	r0, r3
 801b30a:	3720      	adds	r7, #32
 801b30c:	46bd      	mov	sp, r7
 801b30e:	bd80      	pop	{r7, pc}
 801b310:	20001160 	.word	0x20001160
 801b314:	20001174 	.word	0x20001174

0801b318 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801b318:	b480      	push	{r7}
 801b31a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801b31c:	4b03      	ldr	r3, [pc, #12]	; (801b32c <vTaskMissedYield+0x14>)
 801b31e:	2201      	movs	r2, #1
 801b320:	601a      	str	r2, [r3, #0]
}
 801b322:	bf00      	nop
 801b324:	46bd      	mov	sp, r7
 801b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b32a:	4770      	bx	lr
 801b32c:	20001170 	.word	0x20001170

0801b330 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801b330:	b580      	push	{r7, lr}
 801b332:	b082      	sub	sp, #8
 801b334:	af00      	add	r7, sp, #0
 801b336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801b338:	f000 f852 	bl	801b3e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801b33c:	4b06      	ldr	r3, [pc, #24]	; (801b358 <prvIdleTask+0x28>)
 801b33e:	681b      	ldr	r3, [r3, #0]
 801b340:	2b01      	cmp	r3, #1
 801b342:	d9f9      	bls.n	801b338 <prvIdleTask+0x8>
			{
				taskYIELD();
 801b344:	4b05      	ldr	r3, [pc, #20]	; (801b35c <prvIdleTask+0x2c>)
 801b346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b34a:	601a      	str	r2, [r3, #0]
 801b34c:	f3bf 8f4f 	dsb	sy
 801b350:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801b354:	e7f0      	b.n	801b338 <prvIdleTask+0x8>
 801b356:	bf00      	nop
 801b358:	20000c8c 	.word	0x20000c8c
 801b35c:	e000ed04 	.word	0xe000ed04

0801b360 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801b360:	b580      	push	{r7, lr}
 801b362:	b082      	sub	sp, #8
 801b364:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b366:	2300      	movs	r3, #0
 801b368:	607b      	str	r3, [r7, #4]
 801b36a:	e00c      	b.n	801b386 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801b36c:	687a      	ldr	r2, [r7, #4]
 801b36e:	4613      	mov	r3, r2
 801b370:	009b      	lsls	r3, r3, #2
 801b372:	4413      	add	r3, r2
 801b374:	009b      	lsls	r3, r3, #2
 801b376:	4a12      	ldr	r2, [pc, #72]	; (801b3c0 <prvInitialiseTaskLists+0x60>)
 801b378:	4413      	add	r3, r2
 801b37a:	4618      	mov	r0, r3
 801b37c:	f7fe f8d6 	bl	801952c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	3301      	adds	r3, #1
 801b384:	607b      	str	r3, [r7, #4]
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	2b37      	cmp	r3, #55	; 0x37
 801b38a:	d9ef      	bls.n	801b36c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801b38c:	480d      	ldr	r0, [pc, #52]	; (801b3c4 <prvInitialiseTaskLists+0x64>)
 801b38e:	f7fe f8cd 	bl	801952c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801b392:	480d      	ldr	r0, [pc, #52]	; (801b3c8 <prvInitialiseTaskLists+0x68>)
 801b394:	f7fe f8ca 	bl	801952c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801b398:	480c      	ldr	r0, [pc, #48]	; (801b3cc <prvInitialiseTaskLists+0x6c>)
 801b39a:	f7fe f8c7 	bl	801952c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801b39e:	480c      	ldr	r0, [pc, #48]	; (801b3d0 <prvInitialiseTaskLists+0x70>)
 801b3a0:	f7fe f8c4 	bl	801952c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801b3a4:	480b      	ldr	r0, [pc, #44]	; (801b3d4 <prvInitialiseTaskLists+0x74>)
 801b3a6:	f7fe f8c1 	bl	801952c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801b3aa:	4b0b      	ldr	r3, [pc, #44]	; (801b3d8 <prvInitialiseTaskLists+0x78>)
 801b3ac:	4a05      	ldr	r2, [pc, #20]	; (801b3c4 <prvInitialiseTaskLists+0x64>)
 801b3ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801b3b0:	4b0a      	ldr	r3, [pc, #40]	; (801b3dc <prvInitialiseTaskLists+0x7c>)
 801b3b2:	4a05      	ldr	r2, [pc, #20]	; (801b3c8 <prvInitialiseTaskLists+0x68>)
 801b3b4:	601a      	str	r2, [r3, #0]
}
 801b3b6:	bf00      	nop
 801b3b8:	3708      	adds	r7, #8
 801b3ba:	46bd      	mov	sp, r7
 801b3bc:	bd80      	pop	{r7, pc}
 801b3be:	bf00      	nop
 801b3c0:	20000c8c 	.word	0x20000c8c
 801b3c4:	200010ec 	.word	0x200010ec
 801b3c8:	20001100 	.word	0x20001100
 801b3cc:	2000111c 	.word	0x2000111c
 801b3d0:	20001130 	.word	0x20001130
 801b3d4:	20001148 	.word	0x20001148
 801b3d8:	20001114 	.word	0x20001114
 801b3dc:	20001118 	.word	0x20001118

0801b3e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801b3e0:	b580      	push	{r7, lr}
 801b3e2:	b082      	sub	sp, #8
 801b3e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b3e6:	e019      	b.n	801b41c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801b3e8:	f000 ff1c 	bl	801c224 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b3ec:	4b10      	ldr	r3, [pc, #64]	; (801b430 <prvCheckTasksWaitingTermination+0x50>)
 801b3ee:	68db      	ldr	r3, [r3, #12]
 801b3f0:	68db      	ldr	r3, [r3, #12]
 801b3f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	3304      	adds	r3, #4
 801b3f8:	4618      	mov	r0, r3
 801b3fa:	f7fe f921 	bl	8019640 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801b3fe:	4b0d      	ldr	r3, [pc, #52]	; (801b434 <prvCheckTasksWaitingTermination+0x54>)
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	3b01      	subs	r3, #1
 801b404:	4a0b      	ldr	r2, [pc, #44]	; (801b434 <prvCheckTasksWaitingTermination+0x54>)
 801b406:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801b408:	4b0b      	ldr	r3, [pc, #44]	; (801b438 <prvCheckTasksWaitingTermination+0x58>)
 801b40a:	681b      	ldr	r3, [r3, #0]
 801b40c:	3b01      	subs	r3, #1
 801b40e:	4a0a      	ldr	r2, [pc, #40]	; (801b438 <prvCheckTasksWaitingTermination+0x58>)
 801b410:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801b412:	f000 ff37 	bl	801c284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801b416:	6878      	ldr	r0, [r7, #4]
 801b418:	f000 f810 	bl	801b43c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b41c:	4b06      	ldr	r3, [pc, #24]	; (801b438 <prvCheckTasksWaitingTermination+0x58>)
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	2b00      	cmp	r3, #0
 801b422:	d1e1      	bne.n	801b3e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801b424:	bf00      	nop
 801b426:	bf00      	nop
 801b428:	3708      	adds	r7, #8
 801b42a:	46bd      	mov	sp, r7
 801b42c:	bd80      	pop	{r7, pc}
 801b42e:	bf00      	nop
 801b430:	20001130 	.word	0x20001130
 801b434:	2000115c 	.word	0x2000115c
 801b438:	20001144 	.word	0x20001144

0801b43c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801b43c:	b580      	push	{r7, lr}
 801b43e:	b084      	sub	sp, #16
 801b440:	af00      	add	r7, sp, #0
 801b442:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d108      	bne.n	801b460 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b452:	4618      	mov	r0, r3
 801b454:	f001 f8d4 	bl	801c600 <vPortFree>
				vPortFree( pxTCB );
 801b458:	6878      	ldr	r0, [r7, #4]
 801b45a:	f001 f8d1 	bl	801c600 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801b45e:	e018      	b.n	801b492 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801b466:	2b01      	cmp	r3, #1
 801b468:	d103      	bne.n	801b472 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801b46a:	6878      	ldr	r0, [r7, #4]
 801b46c:	f001 f8c8 	bl	801c600 <vPortFree>
	}
 801b470:	e00f      	b.n	801b492 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801b478:	2b02      	cmp	r3, #2
 801b47a:	d00a      	beq.n	801b492 <prvDeleteTCB+0x56>
	__asm volatile
 801b47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b480:	f383 8811 	msr	BASEPRI, r3
 801b484:	f3bf 8f6f 	isb	sy
 801b488:	f3bf 8f4f 	dsb	sy
 801b48c:	60fb      	str	r3, [r7, #12]
}
 801b48e:	bf00      	nop
 801b490:	e7fe      	b.n	801b490 <prvDeleteTCB+0x54>
	}
 801b492:	bf00      	nop
 801b494:	3710      	adds	r7, #16
 801b496:	46bd      	mov	sp, r7
 801b498:	bd80      	pop	{r7, pc}
	...

0801b49c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801b49c:	b480      	push	{r7}
 801b49e:	b083      	sub	sp, #12
 801b4a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b4a2:	4b0c      	ldr	r3, [pc, #48]	; (801b4d4 <prvResetNextTaskUnblockTime+0x38>)
 801b4a4:	681b      	ldr	r3, [r3, #0]
 801b4a6:	681b      	ldr	r3, [r3, #0]
 801b4a8:	2b00      	cmp	r3, #0
 801b4aa:	d104      	bne.n	801b4b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801b4ac:	4b0a      	ldr	r3, [pc, #40]	; (801b4d8 <prvResetNextTaskUnblockTime+0x3c>)
 801b4ae:	f04f 32ff 	mov.w	r2, #4294967295
 801b4b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801b4b4:	e008      	b.n	801b4c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b4b6:	4b07      	ldr	r3, [pc, #28]	; (801b4d4 <prvResetNextTaskUnblockTime+0x38>)
 801b4b8:	681b      	ldr	r3, [r3, #0]
 801b4ba:	68db      	ldr	r3, [r3, #12]
 801b4bc:	68db      	ldr	r3, [r3, #12]
 801b4be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	685b      	ldr	r3, [r3, #4]
 801b4c4:	4a04      	ldr	r2, [pc, #16]	; (801b4d8 <prvResetNextTaskUnblockTime+0x3c>)
 801b4c6:	6013      	str	r3, [r2, #0]
}
 801b4c8:	bf00      	nop
 801b4ca:	370c      	adds	r7, #12
 801b4cc:	46bd      	mov	sp, r7
 801b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4d2:	4770      	bx	lr
 801b4d4:	20001114 	.word	0x20001114
 801b4d8:	2000117c 	.word	0x2000117c

0801b4dc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801b4dc:	b480      	push	{r7}
 801b4de:	b083      	sub	sp, #12
 801b4e0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801b4e2:	4b05      	ldr	r3, [pc, #20]	; (801b4f8 <xTaskGetCurrentTaskHandle+0x1c>)
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	607b      	str	r3, [r7, #4]

		return xReturn;
 801b4e8:	687b      	ldr	r3, [r7, #4]
	}
 801b4ea:	4618      	mov	r0, r3
 801b4ec:	370c      	adds	r7, #12
 801b4ee:	46bd      	mov	sp, r7
 801b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4f4:	4770      	bx	lr
 801b4f6:	bf00      	nop
 801b4f8:	20000c88 	.word	0x20000c88

0801b4fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801b4fc:	b480      	push	{r7}
 801b4fe:	b083      	sub	sp, #12
 801b500:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801b502:	4b0b      	ldr	r3, [pc, #44]	; (801b530 <xTaskGetSchedulerState+0x34>)
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	2b00      	cmp	r3, #0
 801b508:	d102      	bne.n	801b510 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801b50a:	2301      	movs	r3, #1
 801b50c:	607b      	str	r3, [r7, #4]
 801b50e:	e008      	b.n	801b522 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b510:	4b08      	ldr	r3, [pc, #32]	; (801b534 <xTaskGetSchedulerState+0x38>)
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	2b00      	cmp	r3, #0
 801b516:	d102      	bne.n	801b51e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801b518:	2302      	movs	r3, #2
 801b51a:	607b      	str	r3, [r7, #4]
 801b51c:	e001      	b.n	801b522 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801b51e:	2300      	movs	r3, #0
 801b520:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801b522:	687b      	ldr	r3, [r7, #4]
	}
 801b524:	4618      	mov	r0, r3
 801b526:	370c      	adds	r7, #12
 801b528:	46bd      	mov	sp, r7
 801b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b52e:	4770      	bx	lr
 801b530:	20001168 	.word	0x20001168
 801b534:	20001184 	.word	0x20001184

0801b538 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801b538:	b580      	push	{r7, lr}
 801b53a:	b084      	sub	sp, #16
 801b53c:	af00      	add	r7, sp, #0
 801b53e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801b544:	2300      	movs	r3, #0
 801b546:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d051      	beq.n	801b5f2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801b54e:	68bb      	ldr	r3, [r7, #8]
 801b550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b552:	4b2a      	ldr	r3, [pc, #168]	; (801b5fc <xTaskPriorityInherit+0xc4>)
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b558:	429a      	cmp	r2, r3
 801b55a:	d241      	bcs.n	801b5e0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b55c:	68bb      	ldr	r3, [r7, #8]
 801b55e:	699b      	ldr	r3, [r3, #24]
 801b560:	2b00      	cmp	r3, #0
 801b562:	db06      	blt.n	801b572 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b564:	4b25      	ldr	r3, [pc, #148]	; (801b5fc <xTaskPriorityInherit+0xc4>)
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b56a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801b56e:	68bb      	ldr	r3, [r7, #8]
 801b570:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801b572:	68bb      	ldr	r3, [r7, #8]
 801b574:	6959      	ldr	r1, [r3, #20]
 801b576:	68bb      	ldr	r3, [r7, #8]
 801b578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b57a:	4613      	mov	r3, r2
 801b57c:	009b      	lsls	r3, r3, #2
 801b57e:	4413      	add	r3, r2
 801b580:	009b      	lsls	r3, r3, #2
 801b582:	4a1f      	ldr	r2, [pc, #124]	; (801b600 <xTaskPriorityInherit+0xc8>)
 801b584:	4413      	add	r3, r2
 801b586:	4299      	cmp	r1, r3
 801b588:	d122      	bne.n	801b5d0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b58a:	68bb      	ldr	r3, [r7, #8]
 801b58c:	3304      	adds	r3, #4
 801b58e:	4618      	mov	r0, r3
 801b590:	f7fe f856 	bl	8019640 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b594:	4b19      	ldr	r3, [pc, #100]	; (801b5fc <xTaskPriorityInherit+0xc4>)
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b59a:	68bb      	ldr	r3, [r7, #8]
 801b59c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801b59e:	68bb      	ldr	r3, [r7, #8]
 801b5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b5a2:	4b18      	ldr	r3, [pc, #96]	; (801b604 <xTaskPriorityInherit+0xcc>)
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	429a      	cmp	r2, r3
 801b5a8:	d903      	bls.n	801b5b2 <xTaskPriorityInherit+0x7a>
 801b5aa:	68bb      	ldr	r3, [r7, #8]
 801b5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b5ae:	4a15      	ldr	r2, [pc, #84]	; (801b604 <xTaskPriorityInherit+0xcc>)
 801b5b0:	6013      	str	r3, [r2, #0]
 801b5b2:	68bb      	ldr	r3, [r7, #8]
 801b5b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b5b6:	4613      	mov	r3, r2
 801b5b8:	009b      	lsls	r3, r3, #2
 801b5ba:	4413      	add	r3, r2
 801b5bc:	009b      	lsls	r3, r3, #2
 801b5be:	4a10      	ldr	r2, [pc, #64]	; (801b600 <xTaskPriorityInherit+0xc8>)
 801b5c0:	441a      	add	r2, r3
 801b5c2:	68bb      	ldr	r3, [r7, #8]
 801b5c4:	3304      	adds	r3, #4
 801b5c6:	4619      	mov	r1, r3
 801b5c8:	4610      	mov	r0, r2
 801b5ca:	f7fd ffdc 	bl	8019586 <vListInsertEnd>
 801b5ce:	e004      	b.n	801b5da <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b5d0:	4b0a      	ldr	r3, [pc, #40]	; (801b5fc <xTaskPriorityInherit+0xc4>)
 801b5d2:	681b      	ldr	r3, [r3, #0]
 801b5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b5d6:	68bb      	ldr	r3, [r7, #8]
 801b5d8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801b5da:	2301      	movs	r3, #1
 801b5dc:	60fb      	str	r3, [r7, #12]
 801b5de:	e008      	b.n	801b5f2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801b5e0:	68bb      	ldr	r3, [r7, #8]
 801b5e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b5e4:	4b05      	ldr	r3, [pc, #20]	; (801b5fc <xTaskPriorityInherit+0xc4>)
 801b5e6:	681b      	ldr	r3, [r3, #0]
 801b5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b5ea:	429a      	cmp	r2, r3
 801b5ec:	d201      	bcs.n	801b5f2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801b5ee:	2301      	movs	r3, #1
 801b5f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b5f2:	68fb      	ldr	r3, [r7, #12]
	}
 801b5f4:	4618      	mov	r0, r3
 801b5f6:	3710      	adds	r7, #16
 801b5f8:	46bd      	mov	sp, r7
 801b5fa:	bd80      	pop	{r7, pc}
 801b5fc:	20000c88 	.word	0x20000c88
 801b600:	20000c8c 	.word	0x20000c8c
 801b604:	20001164 	.word	0x20001164

0801b608 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801b608:	b580      	push	{r7, lr}
 801b60a:	b086      	sub	sp, #24
 801b60c:	af00      	add	r7, sp, #0
 801b60e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801b614:	2300      	movs	r3, #0
 801b616:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	2b00      	cmp	r3, #0
 801b61c:	d056      	beq.n	801b6cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801b61e:	4b2e      	ldr	r3, [pc, #184]	; (801b6d8 <xTaskPriorityDisinherit+0xd0>)
 801b620:	681b      	ldr	r3, [r3, #0]
 801b622:	693a      	ldr	r2, [r7, #16]
 801b624:	429a      	cmp	r2, r3
 801b626:	d00a      	beq.n	801b63e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801b628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b62c:	f383 8811 	msr	BASEPRI, r3
 801b630:	f3bf 8f6f 	isb	sy
 801b634:	f3bf 8f4f 	dsb	sy
 801b638:	60fb      	str	r3, [r7, #12]
}
 801b63a:	bf00      	nop
 801b63c:	e7fe      	b.n	801b63c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801b63e:	693b      	ldr	r3, [r7, #16]
 801b640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b642:	2b00      	cmp	r3, #0
 801b644:	d10a      	bne.n	801b65c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801b646:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b64a:	f383 8811 	msr	BASEPRI, r3
 801b64e:	f3bf 8f6f 	isb	sy
 801b652:	f3bf 8f4f 	dsb	sy
 801b656:	60bb      	str	r3, [r7, #8]
}
 801b658:	bf00      	nop
 801b65a:	e7fe      	b.n	801b65a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801b65c:	693b      	ldr	r3, [r7, #16]
 801b65e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b660:	1e5a      	subs	r2, r3, #1
 801b662:	693b      	ldr	r3, [r7, #16]
 801b664:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801b666:	693b      	ldr	r3, [r7, #16]
 801b668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b66a:	693b      	ldr	r3, [r7, #16]
 801b66c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b66e:	429a      	cmp	r2, r3
 801b670:	d02c      	beq.n	801b6cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801b672:	693b      	ldr	r3, [r7, #16]
 801b674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b676:	2b00      	cmp	r3, #0
 801b678:	d128      	bne.n	801b6cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b67a:	693b      	ldr	r3, [r7, #16]
 801b67c:	3304      	adds	r3, #4
 801b67e:	4618      	mov	r0, r3
 801b680:	f7fd ffde 	bl	8019640 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801b684:	693b      	ldr	r3, [r7, #16]
 801b686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b688:	693b      	ldr	r3, [r7, #16]
 801b68a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b68c:	693b      	ldr	r3, [r7, #16]
 801b68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b690:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801b694:	693b      	ldr	r3, [r7, #16]
 801b696:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801b698:	693b      	ldr	r3, [r7, #16]
 801b69a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b69c:	4b0f      	ldr	r3, [pc, #60]	; (801b6dc <xTaskPriorityDisinherit+0xd4>)
 801b69e:	681b      	ldr	r3, [r3, #0]
 801b6a0:	429a      	cmp	r2, r3
 801b6a2:	d903      	bls.n	801b6ac <xTaskPriorityDisinherit+0xa4>
 801b6a4:	693b      	ldr	r3, [r7, #16]
 801b6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6a8:	4a0c      	ldr	r2, [pc, #48]	; (801b6dc <xTaskPriorityDisinherit+0xd4>)
 801b6aa:	6013      	str	r3, [r2, #0]
 801b6ac:	693b      	ldr	r3, [r7, #16]
 801b6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b6b0:	4613      	mov	r3, r2
 801b6b2:	009b      	lsls	r3, r3, #2
 801b6b4:	4413      	add	r3, r2
 801b6b6:	009b      	lsls	r3, r3, #2
 801b6b8:	4a09      	ldr	r2, [pc, #36]	; (801b6e0 <xTaskPriorityDisinherit+0xd8>)
 801b6ba:	441a      	add	r2, r3
 801b6bc:	693b      	ldr	r3, [r7, #16]
 801b6be:	3304      	adds	r3, #4
 801b6c0:	4619      	mov	r1, r3
 801b6c2:	4610      	mov	r0, r2
 801b6c4:	f7fd ff5f 	bl	8019586 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801b6c8:	2301      	movs	r3, #1
 801b6ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b6cc:	697b      	ldr	r3, [r7, #20]
	}
 801b6ce:	4618      	mov	r0, r3
 801b6d0:	3718      	adds	r7, #24
 801b6d2:	46bd      	mov	sp, r7
 801b6d4:	bd80      	pop	{r7, pc}
 801b6d6:	bf00      	nop
 801b6d8:	20000c88 	.word	0x20000c88
 801b6dc:	20001164 	.word	0x20001164
 801b6e0:	20000c8c 	.word	0x20000c8c

0801b6e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801b6e4:	b580      	push	{r7, lr}
 801b6e6:	b088      	sub	sp, #32
 801b6e8:	af00      	add	r7, sp, #0
 801b6ea:	6078      	str	r0, [r7, #4]
 801b6ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801b6f2:	2301      	movs	r3, #1
 801b6f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d06a      	beq.n	801b7d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801b6fc:	69bb      	ldr	r3, [r7, #24]
 801b6fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b700:	2b00      	cmp	r3, #0
 801b702:	d10a      	bne.n	801b71a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801b704:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b708:	f383 8811 	msr	BASEPRI, r3
 801b70c:	f3bf 8f6f 	isb	sy
 801b710:	f3bf 8f4f 	dsb	sy
 801b714:	60fb      	str	r3, [r7, #12]
}
 801b716:	bf00      	nop
 801b718:	e7fe      	b.n	801b718 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801b71a:	69bb      	ldr	r3, [r7, #24]
 801b71c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b71e:	683a      	ldr	r2, [r7, #0]
 801b720:	429a      	cmp	r2, r3
 801b722:	d902      	bls.n	801b72a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801b724:	683b      	ldr	r3, [r7, #0]
 801b726:	61fb      	str	r3, [r7, #28]
 801b728:	e002      	b.n	801b730 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801b72a:	69bb      	ldr	r3, [r7, #24]
 801b72c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b72e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801b730:	69bb      	ldr	r3, [r7, #24]
 801b732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b734:	69fa      	ldr	r2, [r7, #28]
 801b736:	429a      	cmp	r2, r3
 801b738:	d04b      	beq.n	801b7d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801b73a:	69bb      	ldr	r3, [r7, #24]
 801b73c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b73e:	697a      	ldr	r2, [r7, #20]
 801b740:	429a      	cmp	r2, r3
 801b742:	d146      	bne.n	801b7d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801b744:	4b25      	ldr	r3, [pc, #148]	; (801b7dc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801b746:	681b      	ldr	r3, [r3, #0]
 801b748:	69ba      	ldr	r2, [r7, #24]
 801b74a:	429a      	cmp	r2, r3
 801b74c:	d10a      	bne.n	801b764 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801b74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b752:	f383 8811 	msr	BASEPRI, r3
 801b756:	f3bf 8f6f 	isb	sy
 801b75a:	f3bf 8f4f 	dsb	sy
 801b75e:	60bb      	str	r3, [r7, #8]
}
 801b760:	bf00      	nop
 801b762:	e7fe      	b.n	801b762 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801b764:	69bb      	ldr	r3, [r7, #24]
 801b766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b768:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801b76a:	69bb      	ldr	r3, [r7, #24]
 801b76c:	69fa      	ldr	r2, [r7, #28]
 801b76e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b770:	69bb      	ldr	r3, [r7, #24]
 801b772:	699b      	ldr	r3, [r3, #24]
 801b774:	2b00      	cmp	r3, #0
 801b776:	db04      	blt.n	801b782 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b778:	69fb      	ldr	r3, [r7, #28]
 801b77a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801b77e:	69bb      	ldr	r3, [r7, #24]
 801b780:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801b782:	69bb      	ldr	r3, [r7, #24]
 801b784:	6959      	ldr	r1, [r3, #20]
 801b786:	693a      	ldr	r2, [r7, #16]
 801b788:	4613      	mov	r3, r2
 801b78a:	009b      	lsls	r3, r3, #2
 801b78c:	4413      	add	r3, r2
 801b78e:	009b      	lsls	r3, r3, #2
 801b790:	4a13      	ldr	r2, [pc, #76]	; (801b7e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801b792:	4413      	add	r3, r2
 801b794:	4299      	cmp	r1, r3
 801b796:	d11c      	bne.n	801b7d2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b798:	69bb      	ldr	r3, [r7, #24]
 801b79a:	3304      	adds	r3, #4
 801b79c:	4618      	mov	r0, r3
 801b79e:	f7fd ff4f 	bl	8019640 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801b7a2:	69bb      	ldr	r3, [r7, #24]
 801b7a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b7a6:	4b0f      	ldr	r3, [pc, #60]	; (801b7e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801b7a8:	681b      	ldr	r3, [r3, #0]
 801b7aa:	429a      	cmp	r2, r3
 801b7ac:	d903      	bls.n	801b7b6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801b7ae:	69bb      	ldr	r3, [r7, #24]
 801b7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7b2:	4a0c      	ldr	r2, [pc, #48]	; (801b7e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801b7b4:	6013      	str	r3, [r2, #0]
 801b7b6:	69bb      	ldr	r3, [r7, #24]
 801b7b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b7ba:	4613      	mov	r3, r2
 801b7bc:	009b      	lsls	r3, r3, #2
 801b7be:	4413      	add	r3, r2
 801b7c0:	009b      	lsls	r3, r3, #2
 801b7c2:	4a07      	ldr	r2, [pc, #28]	; (801b7e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801b7c4:	441a      	add	r2, r3
 801b7c6:	69bb      	ldr	r3, [r7, #24]
 801b7c8:	3304      	adds	r3, #4
 801b7ca:	4619      	mov	r1, r3
 801b7cc:	4610      	mov	r0, r2
 801b7ce:	f7fd feda 	bl	8019586 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b7d2:	bf00      	nop
 801b7d4:	3720      	adds	r7, #32
 801b7d6:	46bd      	mov	sp, r7
 801b7d8:	bd80      	pop	{r7, pc}
 801b7da:	bf00      	nop
 801b7dc:	20000c88 	.word	0x20000c88
 801b7e0:	20000c8c 	.word	0x20000c8c
 801b7e4:	20001164 	.word	0x20001164

0801b7e8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801b7e8:	b480      	push	{r7}
 801b7ea:	b083      	sub	sp, #12
 801b7ec:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801b7ee:	4b09      	ldr	r3, [pc, #36]	; (801b814 <uxTaskResetEventItemValue+0x2c>)
 801b7f0:	681b      	ldr	r3, [r3, #0]
 801b7f2:	699b      	ldr	r3, [r3, #24]
 801b7f4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b7f6:	4b07      	ldr	r3, [pc, #28]	; (801b814 <uxTaskResetEventItemValue+0x2c>)
 801b7f8:	681b      	ldr	r3, [r3, #0]
 801b7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b7fc:	4b05      	ldr	r3, [pc, #20]	; (801b814 <uxTaskResetEventItemValue+0x2c>)
 801b7fe:	681b      	ldr	r3, [r3, #0]
 801b800:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 801b804:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801b806:	687b      	ldr	r3, [r7, #4]
}
 801b808:	4618      	mov	r0, r3
 801b80a:	370c      	adds	r7, #12
 801b80c:	46bd      	mov	sp, r7
 801b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b812:	4770      	bx	lr
 801b814:	20000c88 	.word	0x20000c88

0801b818 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801b818:	b480      	push	{r7}
 801b81a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801b81c:	4b07      	ldr	r3, [pc, #28]	; (801b83c <pvTaskIncrementMutexHeldCount+0x24>)
 801b81e:	681b      	ldr	r3, [r3, #0]
 801b820:	2b00      	cmp	r3, #0
 801b822:	d004      	beq.n	801b82e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801b824:	4b05      	ldr	r3, [pc, #20]	; (801b83c <pvTaskIncrementMutexHeldCount+0x24>)
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b82a:	3201      	adds	r2, #1
 801b82c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801b82e:	4b03      	ldr	r3, [pc, #12]	; (801b83c <pvTaskIncrementMutexHeldCount+0x24>)
 801b830:	681b      	ldr	r3, [r3, #0]
	}
 801b832:	4618      	mov	r0, r3
 801b834:	46bd      	mov	sp, r7
 801b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b83a:	4770      	bx	lr
 801b83c:	20000c88 	.word	0x20000c88

0801b840 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801b840:	b580      	push	{r7, lr}
 801b842:	b084      	sub	sp, #16
 801b844:	af00      	add	r7, sp, #0
 801b846:	6078      	str	r0, [r7, #4]
 801b848:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801b84a:	4b21      	ldr	r3, [pc, #132]	; (801b8d0 <prvAddCurrentTaskToDelayedList+0x90>)
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b850:	4b20      	ldr	r3, [pc, #128]	; (801b8d4 <prvAddCurrentTaskToDelayedList+0x94>)
 801b852:	681b      	ldr	r3, [r3, #0]
 801b854:	3304      	adds	r3, #4
 801b856:	4618      	mov	r0, r3
 801b858:	f7fd fef2 	bl	8019640 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b862:	d10a      	bne.n	801b87a <prvAddCurrentTaskToDelayedList+0x3a>
 801b864:	683b      	ldr	r3, [r7, #0]
 801b866:	2b00      	cmp	r3, #0
 801b868:	d007      	beq.n	801b87a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b86a:	4b1a      	ldr	r3, [pc, #104]	; (801b8d4 <prvAddCurrentTaskToDelayedList+0x94>)
 801b86c:	681b      	ldr	r3, [r3, #0]
 801b86e:	3304      	adds	r3, #4
 801b870:	4619      	mov	r1, r3
 801b872:	4819      	ldr	r0, [pc, #100]	; (801b8d8 <prvAddCurrentTaskToDelayedList+0x98>)
 801b874:	f7fd fe87 	bl	8019586 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801b878:	e026      	b.n	801b8c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801b87a:	68fa      	ldr	r2, [r7, #12]
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	4413      	add	r3, r2
 801b880:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801b882:	4b14      	ldr	r3, [pc, #80]	; (801b8d4 <prvAddCurrentTaskToDelayedList+0x94>)
 801b884:	681b      	ldr	r3, [r3, #0]
 801b886:	68ba      	ldr	r2, [r7, #8]
 801b888:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801b88a:	68ba      	ldr	r2, [r7, #8]
 801b88c:	68fb      	ldr	r3, [r7, #12]
 801b88e:	429a      	cmp	r2, r3
 801b890:	d209      	bcs.n	801b8a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b892:	4b12      	ldr	r3, [pc, #72]	; (801b8dc <prvAddCurrentTaskToDelayedList+0x9c>)
 801b894:	681a      	ldr	r2, [r3, #0]
 801b896:	4b0f      	ldr	r3, [pc, #60]	; (801b8d4 <prvAddCurrentTaskToDelayedList+0x94>)
 801b898:	681b      	ldr	r3, [r3, #0]
 801b89a:	3304      	adds	r3, #4
 801b89c:	4619      	mov	r1, r3
 801b89e:	4610      	mov	r0, r2
 801b8a0:	f7fd fe95 	bl	80195ce <vListInsert>
}
 801b8a4:	e010      	b.n	801b8c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b8a6:	4b0e      	ldr	r3, [pc, #56]	; (801b8e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 801b8a8:	681a      	ldr	r2, [r3, #0]
 801b8aa:	4b0a      	ldr	r3, [pc, #40]	; (801b8d4 <prvAddCurrentTaskToDelayedList+0x94>)
 801b8ac:	681b      	ldr	r3, [r3, #0]
 801b8ae:	3304      	adds	r3, #4
 801b8b0:	4619      	mov	r1, r3
 801b8b2:	4610      	mov	r0, r2
 801b8b4:	f7fd fe8b 	bl	80195ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801b8b8:	4b0a      	ldr	r3, [pc, #40]	; (801b8e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801b8ba:	681b      	ldr	r3, [r3, #0]
 801b8bc:	68ba      	ldr	r2, [r7, #8]
 801b8be:	429a      	cmp	r2, r3
 801b8c0:	d202      	bcs.n	801b8c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801b8c2:	4a08      	ldr	r2, [pc, #32]	; (801b8e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801b8c4:	68bb      	ldr	r3, [r7, #8]
 801b8c6:	6013      	str	r3, [r2, #0]
}
 801b8c8:	bf00      	nop
 801b8ca:	3710      	adds	r7, #16
 801b8cc:	46bd      	mov	sp, r7
 801b8ce:	bd80      	pop	{r7, pc}
 801b8d0:	20001160 	.word	0x20001160
 801b8d4:	20000c88 	.word	0x20000c88
 801b8d8:	20001148 	.word	0x20001148
 801b8dc:	20001118 	.word	0x20001118
 801b8e0:	20001114 	.word	0x20001114
 801b8e4:	2000117c 	.word	0x2000117c

0801b8e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801b8e8:	b580      	push	{r7, lr}
 801b8ea:	b08a      	sub	sp, #40	; 0x28
 801b8ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801b8ee:	2300      	movs	r3, #0
 801b8f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801b8f2:	f000 fb07 	bl	801bf04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801b8f6:	4b1c      	ldr	r3, [pc, #112]	; (801b968 <xTimerCreateTimerTask+0x80>)
 801b8f8:	681b      	ldr	r3, [r3, #0]
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	d021      	beq.n	801b942 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801b8fe:	2300      	movs	r3, #0
 801b900:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801b902:	2300      	movs	r3, #0
 801b904:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801b906:	1d3a      	adds	r2, r7, #4
 801b908:	f107 0108 	add.w	r1, r7, #8
 801b90c:	f107 030c 	add.w	r3, r7, #12
 801b910:	4618      	mov	r0, r3
 801b912:	f7fd fb85 	bl	8019020 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801b916:	6879      	ldr	r1, [r7, #4]
 801b918:	68bb      	ldr	r3, [r7, #8]
 801b91a:	68fa      	ldr	r2, [r7, #12]
 801b91c:	9202      	str	r2, [sp, #8]
 801b91e:	9301      	str	r3, [sp, #4]
 801b920:	2302      	movs	r3, #2
 801b922:	9300      	str	r3, [sp, #0]
 801b924:	2300      	movs	r3, #0
 801b926:	460a      	mov	r2, r1
 801b928:	4910      	ldr	r1, [pc, #64]	; (801b96c <xTimerCreateTimerTask+0x84>)
 801b92a:	4811      	ldr	r0, [pc, #68]	; (801b970 <xTimerCreateTimerTask+0x88>)
 801b92c:	f7fe fdb2 	bl	801a494 <xTaskCreateStatic>
 801b930:	4603      	mov	r3, r0
 801b932:	4a10      	ldr	r2, [pc, #64]	; (801b974 <xTimerCreateTimerTask+0x8c>)
 801b934:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801b936:	4b0f      	ldr	r3, [pc, #60]	; (801b974 <xTimerCreateTimerTask+0x8c>)
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	2b00      	cmp	r3, #0
 801b93c:	d001      	beq.n	801b942 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801b93e:	2301      	movs	r3, #1
 801b940:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801b942:	697b      	ldr	r3, [r7, #20]
 801b944:	2b00      	cmp	r3, #0
 801b946:	d10a      	bne.n	801b95e <xTimerCreateTimerTask+0x76>
	__asm volatile
 801b948:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b94c:	f383 8811 	msr	BASEPRI, r3
 801b950:	f3bf 8f6f 	isb	sy
 801b954:	f3bf 8f4f 	dsb	sy
 801b958:	613b      	str	r3, [r7, #16]
}
 801b95a:	bf00      	nop
 801b95c:	e7fe      	b.n	801b95c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801b95e:	697b      	ldr	r3, [r7, #20]
}
 801b960:	4618      	mov	r0, r3
 801b962:	3718      	adds	r7, #24
 801b964:	46bd      	mov	sp, r7
 801b966:	bd80      	pop	{r7, pc}
 801b968:	200011b8 	.word	0x200011b8
 801b96c:	0801e8fc 	.word	0x0801e8fc
 801b970:	0801baad 	.word	0x0801baad
 801b974:	200011bc 	.word	0x200011bc

0801b978 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801b978:	b580      	push	{r7, lr}
 801b97a:	b08a      	sub	sp, #40	; 0x28
 801b97c:	af00      	add	r7, sp, #0
 801b97e:	60f8      	str	r0, [r7, #12]
 801b980:	60b9      	str	r1, [r7, #8]
 801b982:	607a      	str	r2, [r7, #4]
 801b984:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801b986:	2300      	movs	r3, #0
 801b988:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801b98a:	68fb      	ldr	r3, [r7, #12]
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	d10a      	bne.n	801b9a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 801b990:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b994:	f383 8811 	msr	BASEPRI, r3
 801b998:	f3bf 8f6f 	isb	sy
 801b99c:	f3bf 8f4f 	dsb	sy
 801b9a0:	623b      	str	r3, [r7, #32]
}
 801b9a2:	bf00      	nop
 801b9a4:	e7fe      	b.n	801b9a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801b9a6:	4b1a      	ldr	r3, [pc, #104]	; (801ba10 <xTimerGenericCommand+0x98>)
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d02a      	beq.n	801ba04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801b9ae:	68bb      	ldr	r3, [r7, #8]
 801b9b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801b9b6:	68fb      	ldr	r3, [r7, #12]
 801b9b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801b9ba:	68bb      	ldr	r3, [r7, #8]
 801b9bc:	2b05      	cmp	r3, #5
 801b9be:	dc18      	bgt.n	801b9f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801b9c0:	f7ff fd9c 	bl	801b4fc <xTaskGetSchedulerState>
 801b9c4:	4603      	mov	r3, r0
 801b9c6:	2b02      	cmp	r3, #2
 801b9c8:	d109      	bne.n	801b9de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801b9ca:	4b11      	ldr	r3, [pc, #68]	; (801ba10 <xTimerGenericCommand+0x98>)
 801b9cc:	6818      	ldr	r0, [r3, #0]
 801b9ce:	f107 0110 	add.w	r1, r7, #16
 801b9d2:	2300      	movs	r3, #0
 801b9d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b9d6:	f7fe f851 	bl	8019a7c <xQueueGenericSend>
 801b9da:	6278      	str	r0, [r7, #36]	; 0x24
 801b9dc:	e012      	b.n	801ba04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801b9de:	4b0c      	ldr	r3, [pc, #48]	; (801ba10 <xTimerGenericCommand+0x98>)
 801b9e0:	6818      	ldr	r0, [r3, #0]
 801b9e2:	f107 0110 	add.w	r1, r7, #16
 801b9e6:	2300      	movs	r3, #0
 801b9e8:	2200      	movs	r2, #0
 801b9ea:	f7fe f847 	bl	8019a7c <xQueueGenericSend>
 801b9ee:	6278      	str	r0, [r7, #36]	; 0x24
 801b9f0:	e008      	b.n	801ba04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801b9f2:	4b07      	ldr	r3, [pc, #28]	; (801ba10 <xTimerGenericCommand+0x98>)
 801b9f4:	6818      	ldr	r0, [r3, #0]
 801b9f6:	f107 0110 	add.w	r1, r7, #16
 801b9fa:	2300      	movs	r3, #0
 801b9fc:	683a      	ldr	r2, [r7, #0]
 801b9fe:	f7fe f93b 	bl	8019c78 <xQueueGenericSendFromISR>
 801ba02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801ba04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ba06:	4618      	mov	r0, r3
 801ba08:	3728      	adds	r7, #40	; 0x28
 801ba0a:	46bd      	mov	sp, r7
 801ba0c:	bd80      	pop	{r7, pc}
 801ba0e:	bf00      	nop
 801ba10:	200011b8 	.word	0x200011b8

0801ba14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801ba14:	b580      	push	{r7, lr}
 801ba16:	b088      	sub	sp, #32
 801ba18:	af02      	add	r7, sp, #8
 801ba1a:	6078      	str	r0, [r7, #4]
 801ba1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ba1e:	4b22      	ldr	r3, [pc, #136]	; (801baa8 <prvProcessExpiredTimer+0x94>)
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	68db      	ldr	r3, [r3, #12]
 801ba24:	68db      	ldr	r3, [r3, #12]
 801ba26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801ba28:	697b      	ldr	r3, [r7, #20]
 801ba2a:	3304      	adds	r3, #4
 801ba2c:	4618      	mov	r0, r3
 801ba2e:	f7fd fe07 	bl	8019640 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801ba32:	697b      	ldr	r3, [r7, #20]
 801ba34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ba38:	f003 0304 	and.w	r3, r3, #4
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	d022      	beq.n	801ba86 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801ba40:	697b      	ldr	r3, [r7, #20]
 801ba42:	699a      	ldr	r2, [r3, #24]
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	18d1      	adds	r1, r2, r3
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	683a      	ldr	r2, [r7, #0]
 801ba4c:	6978      	ldr	r0, [r7, #20]
 801ba4e:	f000 f8d1 	bl	801bbf4 <prvInsertTimerInActiveList>
 801ba52:	4603      	mov	r3, r0
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d01f      	beq.n	801ba98 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801ba58:	2300      	movs	r3, #0
 801ba5a:	9300      	str	r3, [sp, #0]
 801ba5c:	2300      	movs	r3, #0
 801ba5e:	687a      	ldr	r2, [r7, #4]
 801ba60:	2100      	movs	r1, #0
 801ba62:	6978      	ldr	r0, [r7, #20]
 801ba64:	f7ff ff88 	bl	801b978 <xTimerGenericCommand>
 801ba68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801ba6a:	693b      	ldr	r3, [r7, #16]
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	d113      	bne.n	801ba98 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801ba70:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba74:	f383 8811 	msr	BASEPRI, r3
 801ba78:	f3bf 8f6f 	isb	sy
 801ba7c:	f3bf 8f4f 	dsb	sy
 801ba80:	60fb      	str	r3, [r7, #12]
}
 801ba82:	bf00      	nop
 801ba84:	e7fe      	b.n	801ba84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801ba86:	697b      	ldr	r3, [r7, #20]
 801ba88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ba8c:	f023 0301 	bic.w	r3, r3, #1
 801ba90:	b2da      	uxtb	r2, r3
 801ba92:	697b      	ldr	r3, [r7, #20]
 801ba94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ba98:	697b      	ldr	r3, [r7, #20]
 801ba9a:	6a1b      	ldr	r3, [r3, #32]
 801ba9c:	6978      	ldr	r0, [r7, #20]
 801ba9e:	4798      	blx	r3
}
 801baa0:	bf00      	nop
 801baa2:	3718      	adds	r7, #24
 801baa4:	46bd      	mov	sp, r7
 801baa6:	bd80      	pop	{r7, pc}
 801baa8:	200011b0 	.word	0x200011b0

0801baac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801baac:	b580      	push	{r7, lr}
 801baae:	b084      	sub	sp, #16
 801bab0:	af00      	add	r7, sp, #0
 801bab2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bab4:	f107 0308 	add.w	r3, r7, #8
 801bab8:	4618      	mov	r0, r3
 801baba:	f000 f857 	bl	801bb6c <prvGetNextExpireTime>
 801babe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801bac0:	68bb      	ldr	r3, [r7, #8]
 801bac2:	4619      	mov	r1, r3
 801bac4:	68f8      	ldr	r0, [r7, #12]
 801bac6:	f000 f803 	bl	801bad0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801baca:	f000 f8d5 	bl	801bc78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bace:	e7f1      	b.n	801bab4 <prvTimerTask+0x8>

0801bad0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801bad0:	b580      	push	{r7, lr}
 801bad2:	b084      	sub	sp, #16
 801bad4:	af00      	add	r7, sp, #0
 801bad6:	6078      	str	r0, [r7, #4]
 801bad8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801bada:	f7ff f86d 	bl	801abb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801bade:	f107 0308 	add.w	r3, r7, #8
 801bae2:	4618      	mov	r0, r3
 801bae4:	f000 f866 	bl	801bbb4 <prvSampleTimeNow>
 801bae8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801baea:	68bb      	ldr	r3, [r7, #8]
 801baec:	2b00      	cmp	r3, #0
 801baee:	d130      	bne.n	801bb52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801baf0:	683b      	ldr	r3, [r7, #0]
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	d10a      	bne.n	801bb0c <prvProcessTimerOrBlockTask+0x3c>
 801baf6:	687a      	ldr	r2, [r7, #4]
 801baf8:	68fb      	ldr	r3, [r7, #12]
 801bafa:	429a      	cmp	r2, r3
 801bafc:	d806      	bhi.n	801bb0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801bafe:	f7ff f869 	bl	801abd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801bb02:	68f9      	ldr	r1, [r7, #12]
 801bb04:	6878      	ldr	r0, [r7, #4]
 801bb06:	f7ff ff85 	bl	801ba14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801bb0a:	e024      	b.n	801bb56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801bb0c:	683b      	ldr	r3, [r7, #0]
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	d008      	beq.n	801bb24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801bb12:	4b13      	ldr	r3, [pc, #76]	; (801bb60 <prvProcessTimerOrBlockTask+0x90>)
 801bb14:	681b      	ldr	r3, [r3, #0]
 801bb16:	681b      	ldr	r3, [r3, #0]
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	d101      	bne.n	801bb20 <prvProcessTimerOrBlockTask+0x50>
 801bb1c:	2301      	movs	r3, #1
 801bb1e:	e000      	b.n	801bb22 <prvProcessTimerOrBlockTask+0x52>
 801bb20:	2300      	movs	r3, #0
 801bb22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801bb24:	4b0f      	ldr	r3, [pc, #60]	; (801bb64 <prvProcessTimerOrBlockTask+0x94>)
 801bb26:	6818      	ldr	r0, [r3, #0]
 801bb28:	687a      	ldr	r2, [r7, #4]
 801bb2a:	68fb      	ldr	r3, [r7, #12]
 801bb2c:	1ad3      	subs	r3, r2, r3
 801bb2e:	683a      	ldr	r2, [r7, #0]
 801bb30:	4619      	mov	r1, r3
 801bb32:	f7fe fc7b 	bl	801a42c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801bb36:	f7ff f84d 	bl	801abd4 <xTaskResumeAll>
 801bb3a:	4603      	mov	r3, r0
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d10a      	bne.n	801bb56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801bb40:	4b09      	ldr	r3, [pc, #36]	; (801bb68 <prvProcessTimerOrBlockTask+0x98>)
 801bb42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801bb46:	601a      	str	r2, [r3, #0]
 801bb48:	f3bf 8f4f 	dsb	sy
 801bb4c:	f3bf 8f6f 	isb	sy
}
 801bb50:	e001      	b.n	801bb56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801bb52:	f7ff f83f 	bl	801abd4 <xTaskResumeAll>
}
 801bb56:	bf00      	nop
 801bb58:	3710      	adds	r7, #16
 801bb5a:	46bd      	mov	sp, r7
 801bb5c:	bd80      	pop	{r7, pc}
 801bb5e:	bf00      	nop
 801bb60:	200011b4 	.word	0x200011b4
 801bb64:	200011b8 	.word	0x200011b8
 801bb68:	e000ed04 	.word	0xe000ed04

0801bb6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801bb6c:	b480      	push	{r7}
 801bb6e:	b085      	sub	sp, #20
 801bb70:	af00      	add	r7, sp, #0
 801bb72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801bb74:	4b0e      	ldr	r3, [pc, #56]	; (801bbb0 <prvGetNextExpireTime+0x44>)
 801bb76:	681b      	ldr	r3, [r3, #0]
 801bb78:	681b      	ldr	r3, [r3, #0]
 801bb7a:	2b00      	cmp	r3, #0
 801bb7c:	d101      	bne.n	801bb82 <prvGetNextExpireTime+0x16>
 801bb7e:	2201      	movs	r2, #1
 801bb80:	e000      	b.n	801bb84 <prvGetNextExpireTime+0x18>
 801bb82:	2200      	movs	r2, #0
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d105      	bne.n	801bb9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801bb90:	4b07      	ldr	r3, [pc, #28]	; (801bbb0 <prvGetNextExpireTime+0x44>)
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	68db      	ldr	r3, [r3, #12]
 801bb96:	681b      	ldr	r3, [r3, #0]
 801bb98:	60fb      	str	r3, [r7, #12]
 801bb9a:	e001      	b.n	801bba0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801bb9c:	2300      	movs	r3, #0
 801bb9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801bba0:	68fb      	ldr	r3, [r7, #12]
}
 801bba2:	4618      	mov	r0, r3
 801bba4:	3714      	adds	r7, #20
 801bba6:	46bd      	mov	sp, r7
 801bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbac:	4770      	bx	lr
 801bbae:	bf00      	nop
 801bbb0:	200011b0 	.word	0x200011b0

0801bbb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801bbb4:	b580      	push	{r7, lr}
 801bbb6:	b084      	sub	sp, #16
 801bbb8:	af00      	add	r7, sp, #0
 801bbba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801bbbc:	f7ff f8a8 	bl	801ad10 <xTaskGetTickCount>
 801bbc0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801bbc2:	4b0b      	ldr	r3, [pc, #44]	; (801bbf0 <prvSampleTimeNow+0x3c>)
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	68fa      	ldr	r2, [r7, #12]
 801bbc8:	429a      	cmp	r2, r3
 801bbca:	d205      	bcs.n	801bbd8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801bbcc:	f000 f936 	bl	801be3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	2201      	movs	r2, #1
 801bbd4:	601a      	str	r2, [r3, #0]
 801bbd6:	e002      	b.n	801bbde <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	2200      	movs	r2, #0
 801bbdc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801bbde:	4a04      	ldr	r2, [pc, #16]	; (801bbf0 <prvSampleTimeNow+0x3c>)
 801bbe0:	68fb      	ldr	r3, [r7, #12]
 801bbe2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801bbe4:	68fb      	ldr	r3, [r7, #12]
}
 801bbe6:	4618      	mov	r0, r3
 801bbe8:	3710      	adds	r7, #16
 801bbea:	46bd      	mov	sp, r7
 801bbec:	bd80      	pop	{r7, pc}
 801bbee:	bf00      	nop
 801bbf0:	200011c0 	.word	0x200011c0

0801bbf4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801bbf4:	b580      	push	{r7, lr}
 801bbf6:	b086      	sub	sp, #24
 801bbf8:	af00      	add	r7, sp, #0
 801bbfa:	60f8      	str	r0, [r7, #12]
 801bbfc:	60b9      	str	r1, [r7, #8]
 801bbfe:	607a      	str	r2, [r7, #4]
 801bc00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801bc02:	2300      	movs	r3, #0
 801bc04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801bc06:	68fb      	ldr	r3, [r7, #12]
 801bc08:	68ba      	ldr	r2, [r7, #8]
 801bc0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801bc0c:	68fb      	ldr	r3, [r7, #12]
 801bc0e:	68fa      	ldr	r2, [r7, #12]
 801bc10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801bc12:	68ba      	ldr	r2, [r7, #8]
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	429a      	cmp	r2, r3
 801bc18:	d812      	bhi.n	801bc40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bc1a:	687a      	ldr	r2, [r7, #4]
 801bc1c:	683b      	ldr	r3, [r7, #0]
 801bc1e:	1ad2      	subs	r2, r2, r3
 801bc20:	68fb      	ldr	r3, [r7, #12]
 801bc22:	699b      	ldr	r3, [r3, #24]
 801bc24:	429a      	cmp	r2, r3
 801bc26:	d302      	bcc.n	801bc2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801bc28:	2301      	movs	r3, #1
 801bc2a:	617b      	str	r3, [r7, #20]
 801bc2c:	e01b      	b.n	801bc66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801bc2e:	4b10      	ldr	r3, [pc, #64]	; (801bc70 <prvInsertTimerInActiveList+0x7c>)
 801bc30:	681a      	ldr	r2, [r3, #0]
 801bc32:	68fb      	ldr	r3, [r7, #12]
 801bc34:	3304      	adds	r3, #4
 801bc36:	4619      	mov	r1, r3
 801bc38:	4610      	mov	r0, r2
 801bc3a:	f7fd fcc8 	bl	80195ce <vListInsert>
 801bc3e:	e012      	b.n	801bc66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801bc40:	687a      	ldr	r2, [r7, #4]
 801bc42:	683b      	ldr	r3, [r7, #0]
 801bc44:	429a      	cmp	r2, r3
 801bc46:	d206      	bcs.n	801bc56 <prvInsertTimerInActiveList+0x62>
 801bc48:	68ba      	ldr	r2, [r7, #8]
 801bc4a:	683b      	ldr	r3, [r7, #0]
 801bc4c:	429a      	cmp	r2, r3
 801bc4e:	d302      	bcc.n	801bc56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801bc50:	2301      	movs	r3, #1
 801bc52:	617b      	str	r3, [r7, #20]
 801bc54:	e007      	b.n	801bc66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801bc56:	4b07      	ldr	r3, [pc, #28]	; (801bc74 <prvInsertTimerInActiveList+0x80>)
 801bc58:	681a      	ldr	r2, [r3, #0]
 801bc5a:	68fb      	ldr	r3, [r7, #12]
 801bc5c:	3304      	adds	r3, #4
 801bc5e:	4619      	mov	r1, r3
 801bc60:	4610      	mov	r0, r2
 801bc62:	f7fd fcb4 	bl	80195ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 801bc66:	697b      	ldr	r3, [r7, #20]
}
 801bc68:	4618      	mov	r0, r3
 801bc6a:	3718      	adds	r7, #24
 801bc6c:	46bd      	mov	sp, r7
 801bc6e:	bd80      	pop	{r7, pc}
 801bc70:	200011b4 	.word	0x200011b4
 801bc74:	200011b0 	.word	0x200011b0

0801bc78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801bc78:	b580      	push	{r7, lr}
 801bc7a:	b08e      	sub	sp, #56	; 0x38
 801bc7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801bc7e:	e0ca      	b.n	801be16 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	da18      	bge.n	801bcb8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801bc86:	1d3b      	adds	r3, r7, #4
 801bc88:	3304      	adds	r3, #4
 801bc8a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801bc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	d10a      	bne.n	801bca8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801bc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bc96:	f383 8811 	msr	BASEPRI, r3
 801bc9a:	f3bf 8f6f 	isb	sy
 801bc9e:	f3bf 8f4f 	dsb	sy
 801bca2:	61fb      	str	r3, [r7, #28]
}
 801bca4:	bf00      	nop
 801bca6:	e7fe      	b.n	801bca6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801bca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bcaa:	681b      	ldr	r3, [r3, #0]
 801bcac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bcae:	6850      	ldr	r0, [r2, #4]
 801bcb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bcb2:	6892      	ldr	r2, [r2, #8]
 801bcb4:	4611      	mov	r1, r2
 801bcb6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	f2c0 80aa 	blt.w	801be14 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801bcc0:	68fb      	ldr	r3, [r7, #12]
 801bcc2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801bcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcc6:	695b      	ldr	r3, [r3, #20]
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	d004      	beq.n	801bcd6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcce:	3304      	adds	r3, #4
 801bcd0:	4618      	mov	r0, r3
 801bcd2:	f7fd fcb5 	bl	8019640 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801bcd6:	463b      	mov	r3, r7
 801bcd8:	4618      	mov	r0, r3
 801bcda:	f7ff ff6b 	bl	801bbb4 <prvSampleTimeNow>
 801bcde:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	2b09      	cmp	r3, #9
 801bce4:	f200 8097 	bhi.w	801be16 <prvProcessReceivedCommands+0x19e>
 801bce8:	a201      	add	r2, pc, #4	; (adr r2, 801bcf0 <prvProcessReceivedCommands+0x78>)
 801bcea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bcee:	bf00      	nop
 801bcf0:	0801bd19 	.word	0x0801bd19
 801bcf4:	0801bd19 	.word	0x0801bd19
 801bcf8:	0801bd19 	.word	0x0801bd19
 801bcfc:	0801bd8d 	.word	0x0801bd8d
 801bd00:	0801bda1 	.word	0x0801bda1
 801bd04:	0801bdeb 	.word	0x0801bdeb
 801bd08:	0801bd19 	.word	0x0801bd19
 801bd0c:	0801bd19 	.word	0x0801bd19
 801bd10:	0801bd8d 	.word	0x0801bd8d
 801bd14:	0801bda1 	.word	0x0801bda1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801bd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bd1e:	f043 0301 	orr.w	r3, r3, #1
 801bd22:	b2da      	uxtb	r2, r3
 801bd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801bd2a:	68ba      	ldr	r2, [r7, #8]
 801bd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd2e:	699b      	ldr	r3, [r3, #24]
 801bd30:	18d1      	adds	r1, r2, r3
 801bd32:	68bb      	ldr	r3, [r7, #8]
 801bd34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bd36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bd38:	f7ff ff5c 	bl	801bbf4 <prvInsertTimerInActiveList>
 801bd3c:	4603      	mov	r3, r0
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	d069      	beq.n	801be16 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd44:	6a1b      	ldr	r3, [r3, #32]
 801bd46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bd48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bd50:	f003 0304 	and.w	r3, r3, #4
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	d05e      	beq.n	801be16 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801bd58:	68ba      	ldr	r2, [r7, #8]
 801bd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd5c:	699b      	ldr	r3, [r3, #24]
 801bd5e:	441a      	add	r2, r3
 801bd60:	2300      	movs	r3, #0
 801bd62:	9300      	str	r3, [sp, #0]
 801bd64:	2300      	movs	r3, #0
 801bd66:	2100      	movs	r1, #0
 801bd68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bd6a:	f7ff fe05 	bl	801b978 <xTimerGenericCommand>
 801bd6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801bd70:	6a3b      	ldr	r3, [r7, #32]
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d14f      	bne.n	801be16 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801bd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bd7a:	f383 8811 	msr	BASEPRI, r3
 801bd7e:	f3bf 8f6f 	isb	sy
 801bd82:	f3bf 8f4f 	dsb	sy
 801bd86:	61bb      	str	r3, [r7, #24]
}
 801bd88:	bf00      	nop
 801bd8a:	e7fe      	b.n	801bd8a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bd92:	f023 0301 	bic.w	r3, r3, #1
 801bd96:	b2da      	uxtb	r2, r3
 801bd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801bd9e:	e03a      	b.n	801be16 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801bda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bda2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bda6:	f043 0301 	orr.w	r3, r3, #1
 801bdaa:	b2da      	uxtb	r2, r3
 801bdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801bdb2:	68ba      	ldr	r2, [r7, #8]
 801bdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdb6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801bdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdba:	699b      	ldr	r3, [r3, #24]
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d10a      	bne.n	801bdd6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801bdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bdc4:	f383 8811 	msr	BASEPRI, r3
 801bdc8:	f3bf 8f6f 	isb	sy
 801bdcc:	f3bf 8f4f 	dsb	sy
 801bdd0:	617b      	str	r3, [r7, #20]
}
 801bdd2:	bf00      	nop
 801bdd4:	e7fe      	b.n	801bdd4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801bdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdd8:	699a      	ldr	r2, [r3, #24]
 801bdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bddc:	18d1      	adds	r1, r2, r3
 801bdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bde0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bde2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bde4:	f7ff ff06 	bl	801bbf4 <prvInsertTimerInActiveList>
					break;
 801bde8:	e015      	b.n	801be16 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801bdea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bdf0:	f003 0302 	and.w	r3, r3, #2
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	d103      	bne.n	801be00 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801bdf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bdfa:	f000 fc01 	bl	801c600 <vPortFree>
 801bdfe:	e00a      	b.n	801be16 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801be00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801be06:	f023 0301 	bic.w	r3, r3, #1
 801be0a:	b2da      	uxtb	r2, r3
 801be0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801be12:	e000      	b.n	801be16 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801be14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801be16:	4b08      	ldr	r3, [pc, #32]	; (801be38 <prvProcessReceivedCommands+0x1c0>)
 801be18:	681b      	ldr	r3, [r3, #0]
 801be1a:	1d39      	adds	r1, r7, #4
 801be1c:	2200      	movs	r2, #0
 801be1e:	4618      	mov	r0, r3
 801be20:	f7fd ffc6 	bl	8019db0 <xQueueReceive>
 801be24:	4603      	mov	r3, r0
 801be26:	2b00      	cmp	r3, #0
 801be28:	f47f af2a 	bne.w	801bc80 <prvProcessReceivedCommands+0x8>
	}
}
 801be2c:	bf00      	nop
 801be2e:	bf00      	nop
 801be30:	3730      	adds	r7, #48	; 0x30
 801be32:	46bd      	mov	sp, r7
 801be34:	bd80      	pop	{r7, pc}
 801be36:	bf00      	nop
 801be38:	200011b8 	.word	0x200011b8

0801be3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801be3c:	b580      	push	{r7, lr}
 801be3e:	b088      	sub	sp, #32
 801be40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801be42:	e048      	b.n	801bed6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801be44:	4b2d      	ldr	r3, [pc, #180]	; (801befc <prvSwitchTimerLists+0xc0>)
 801be46:	681b      	ldr	r3, [r3, #0]
 801be48:	68db      	ldr	r3, [r3, #12]
 801be4a:	681b      	ldr	r3, [r3, #0]
 801be4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801be4e:	4b2b      	ldr	r3, [pc, #172]	; (801befc <prvSwitchTimerLists+0xc0>)
 801be50:	681b      	ldr	r3, [r3, #0]
 801be52:	68db      	ldr	r3, [r3, #12]
 801be54:	68db      	ldr	r3, [r3, #12]
 801be56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801be58:	68fb      	ldr	r3, [r7, #12]
 801be5a:	3304      	adds	r3, #4
 801be5c:	4618      	mov	r0, r3
 801be5e:	f7fd fbef 	bl	8019640 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801be62:	68fb      	ldr	r3, [r7, #12]
 801be64:	6a1b      	ldr	r3, [r3, #32]
 801be66:	68f8      	ldr	r0, [r7, #12]
 801be68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801be70:	f003 0304 	and.w	r3, r3, #4
 801be74:	2b00      	cmp	r3, #0
 801be76:	d02e      	beq.n	801bed6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801be78:	68fb      	ldr	r3, [r7, #12]
 801be7a:	699b      	ldr	r3, [r3, #24]
 801be7c:	693a      	ldr	r2, [r7, #16]
 801be7e:	4413      	add	r3, r2
 801be80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801be82:	68ba      	ldr	r2, [r7, #8]
 801be84:	693b      	ldr	r3, [r7, #16]
 801be86:	429a      	cmp	r2, r3
 801be88:	d90e      	bls.n	801bea8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801be8a:	68fb      	ldr	r3, [r7, #12]
 801be8c:	68ba      	ldr	r2, [r7, #8]
 801be8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801be90:	68fb      	ldr	r3, [r7, #12]
 801be92:	68fa      	ldr	r2, [r7, #12]
 801be94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801be96:	4b19      	ldr	r3, [pc, #100]	; (801befc <prvSwitchTimerLists+0xc0>)
 801be98:	681a      	ldr	r2, [r3, #0]
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	3304      	adds	r3, #4
 801be9e:	4619      	mov	r1, r3
 801bea0:	4610      	mov	r0, r2
 801bea2:	f7fd fb94 	bl	80195ce <vListInsert>
 801bea6:	e016      	b.n	801bed6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801bea8:	2300      	movs	r3, #0
 801beaa:	9300      	str	r3, [sp, #0]
 801beac:	2300      	movs	r3, #0
 801beae:	693a      	ldr	r2, [r7, #16]
 801beb0:	2100      	movs	r1, #0
 801beb2:	68f8      	ldr	r0, [r7, #12]
 801beb4:	f7ff fd60 	bl	801b978 <xTimerGenericCommand>
 801beb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	d10a      	bne.n	801bed6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801bec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bec4:	f383 8811 	msr	BASEPRI, r3
 801bec8:	f3bf 8f6f 	isb	sy
 801becc:	f3bf 8f4f 	dsb	sy
 801bed0:	603b      	str	r3, [r7, #0]
}
 801bed2:	bf00      	nop
 801bed4:	e7fe      	b.n	801bed4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801bed6:	4b09      	ldr	r3, [pc, #36]	; (801befc <prvSwitchTimerLists+0xc0>)
 801bed8:	681b      	ldr	r3, [r3, #0]
 801beda:	681b      	ldr	r3, [r3, #0]
 801bedc:	2b00      	cmp	r3, #0
 801bede:	d1b1      	bne.n	801be44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801bee0:	4b06      	ldr	r3, [pc, #24]	; (801befc <prvSwitchTimerLists+0xc0>)
 801bee2:	681b      	ldr	r3, [r3, #0]
 801bee4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801bee6:	4b06      	ldr	r3, [pc, #24]	; (801bf00 <prvSwitchTimerLists+0xc4>)
 801bee8:	681b      	ldr	r3, [r3, #0]
 801beea:	4a04      	ldr	r2, [pc, #16]	; (801befc <prvSwitchTimerLists+0xc0>)
 801beec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801beee:	4a04      	ldr	r2, [pc, #16]	; (801bf00 <prvSwitchTimerLists+0xc4>)
 801bef0:	697b      	ldr	r3, [r7, #20]
 801bef2:	6013      	str	r3, [r2, #0]
}
 801bef4:	bf00      	nop
 801bef6:	3718      	adds	r7, #24
 801bef8:	46bd      	mov	sp, r7
 801befa:	bd80      	pop	{r7, pc}
 801befc:	200011b0 	.word	0x200011b0
 801bf00:	200011b4 	.word	0x200011b4

0801bf04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801bf04:	b580      	push	{r7, lr}
 801bf06:	b082      	sub	sp, #8
 801bf08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801bf0a:	f000 f98b 	bl	801c224 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801bf0e:	4b15      	ldr	r3, [pc, #84]	; (801bf64 <prvCheckForValidListAndQueue+0x60>)
 801bf10:	681b      	ldr	r3, [r3, #0]
 801bf12:	2b00      	cmp	r3, #0
 801bf14:	d120      	bne.n	801bf58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801bf16:	4814      	ldr	r0, [pc, #80]	; (801bf68 <prvCheckForValidListAndQueue+0x64>)
 801bf18:	f7fd fb08 	bl	801952c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801bf1c:	4813      	ldr	r0, [pc, #76]	; (801bf6c <prvCheckForValidListAndQueue+0x68>)
 801bf1e:	f7fd fb05 	bl	801952c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801bf22:	4b13      	ldr	r3, [pc, #76]	; (801bf70 <prvCheckForValidListAndQueue+0x6c>)
 801bf24:	4a10      	ldr	r2, [pc, #64]	; (801bf68 <prvCheckForValidListAndQueue+0x64>)
 801bf26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801bf28:	4b12      	ldr	r3, [pc, #72]	; (801bf74 <prvCheckForValidListAndQueue+0x70>)
 801bf2a:	4a10      	ldr	r2, [pc, #64]	; (801bf6c <prvCheckForValidListAndQueue+0x68>)
 801bf2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801bf2e:	2300      	movs	r3, #0
 801bf30:	9300      	str	r3, [sp, #0]
 801bf32:	4b11      	ldr	r3, [pc, #68]	; (801bf78 <prvCheckForValidListAndQueue+0x74>)
 801bf34:	4a11      	ldr	r2, [pc, #68]	; (801bf7c <prvCheckForValidListAndQueue+0x78>)
 801bf36:	2110      	movs	r1, #16
 801bf38:	200a      	movs	r0, #10
 801bf3a:	f7fd fc13 	bl	8019764 <xQueueGenericCreateStatic>
 801bf3e:	4603      	mov	r3, r0
 801bf40:	4a08      	ldr	r2, [pc, #32]	; (801bf64 <prvCheckForValidListAndQueue+0x60>)
 801bf42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801bf44:	4b07      	ldr	r3, [pc, #28]	; (801bf64 <prvCheckForValidListAndQueue+0x60>)
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	d005      	beq.n	801bf58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801bf4c:	4b05      	ldr	r3, [pc, #20]	; (801bf64 <prvCheckForValidListAndQueue+0x60>)
 801bf4e:	681b      	ldr	r3, [r3, #0]
 801bf50:	490b      	ldr	r1, [pc, #44]	; (801bf80 <prvCheckForValidListAndQueue+0x7c>)
 801bf52:	4618      	mov	r0, r3
 801bf54:	f7fe fa40 	bl	801a3d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801bf58:	f000 f994 	bl	801c284 <vPortExitCritical>
}
 801bf5c:	bf00      	nop
 801bf5e:	46bd      	mov	sp, r7
 801bf60:	bd80      	pop	{r7, pc}
 801bf62:	bf00      	nop
 801bf64:	200011b8 	.word	0x200011b8
 801bf68:	20001188 	.word	0x20001188
 801bf6c:	2000119c 	.word	0x2000119c
 801bf70:	200011b0 	.word	0x200011b0
 801bf74:	200011b4 	.word	0x200011b4
 801bf78:	20001264 	.word	0x20001264
 801bf7c:	200011c4 	.word	0x200011c4
 801bf80:	0801e904 	.word	0x0801e904

0801bf84 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801bf84:	b580      	push	{r7, lr}
 801bf86:	b08a      	sub	sp, #40	; 0x28
 801bf88:	af00      	add	r7, sp, #0
 801bf8a:	60f8      	str	r0, [r7, #12]
 801bf8c:	60b9      	str	r1, [r7, #8]
 801bf8e:	607a      	str	r2, [r7, #4]
 801bf90:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801bf92:	f06f 0301 	mvn.w	r3, #1
 801bf96:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801bf98:	68fb      	ldr	r3, [r7, #12]
 801bf9a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801bf9c:	68bb      	ldr	r3, [r7, #8]
 801bf9e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801bfa4:	4b06      	ldr	r3, [pc, #24]	; (801bfc0 <xTimerPendFunctionCallFromISR+0x3c>)
 801bfa6:	6818      	ldr	r0, [r3, #0]
 801bfa8:	f107 0114 	add.w	r1, r7, #20
 801bfac:	2300      	movs	r3, #0
 801bfae:	683a      	ldr	r2, [r7, #0]
 801bfb0:	f7fd fe62 	bl	8019c78 <xQueueGenericSendFromISR>
 801bfb4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801bfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801bfb8:	4618      	mov	r0, r3
 801bfba:	3728      	adds	r7, #40	; 0x28
 801bfbc:	46bd      	mov	sp, r7
 801bfbe:	bd80      	pop	{r7, pc}
 801bfc0:	200011b8 	.word	0x200011b8

0801bfc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801bfc4:	b480      	push	{r7}
 801bfc6:	b085      	sub	sp, #20
 801bfc8:	af00      	add	r7, sp, #0
 801bfca:	60f8      	str	r0, [r7, #12]
 801bfcc:	60b9      	str	r1, [r7, #8]
 801bfce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801bfd0:	68fb      	ldr	r3, [r7, #12]
 801bfd2:	3b04      	subs	r3, #4
 801bfd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801bfd6:	68fb      	ldr	r3, [r7, #12]
 801bfd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801bfdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801bfde:	68fb      	ldr	r3, [r7, #12]
 801bfe0:	3b04      	subs	r3, #4
 801bfe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801bfe4:	68bb      	ldr	r3, [r7, #8]
 801bfe6:	f023 0201 	bic.w	r2, r3, #1
 801bfea:	68fb      	ldr	r3, [r7, #12]
 801bfec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801bfee:	68fb      	ldr	r3, [r7, #12]
 801bff0:	3b04      	subs	r3, #4
 801bff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801bff4:	4a0c      	ldr	r2, [pc, #48]	; (801c028 <pxPortInitialiseStack+0x64>)
 801bff6:	68fb      	ldr	r3, [r7, #12]
 801bff8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801bffa:	68fb      	ldr	r3, [r7, #12]
 801bffc:	3b14      	subs	r3, #20
 801bffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801c000:	687a      	ldr	r2, [r7, #4]
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801c006:	68fb      	ldr	r3, [r7, #12]
 801c008:	3b04      	subs	r3, #4
 801c00a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801c00c:	68fb      	ldr	r3, [r7, #12]
 801c00e:	f06f 0202 	mvn.w	r2, #2
 801c012:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801c014:	68fb      	ldr	r3, [r7, #12]
 801c016:	3b20      	subs	r3, #32
 801c018:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801c01a:	68fb      	ldr	r3, [r7, #12]
}
 801c01c:	4618      	mov	r0, r3
 801c01e:	3714      	adds	r7, #20
 801c020:	46bd      	mov	sp, r7
 801c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c026:	4770      	bx	lr
 801c028:	0801c02d 	.word	0x0801c02d

0801c02c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801c02c:	b480      	push	{r7}
 801c02e:	b085      	sub	sp, #20
 801c030:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801c032:	2300      	movs	r3, #0
 801c034:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801c036:	4b12      	ldr	r3, [pc, #72]	; (801c080 <prvTaskExitError+0x54>)
 801c038:	681b      	ldr	r3, [r3, #0]
 801c03a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c03e:	d00a      	beq.n	801c056 <prvTaskExitError+0x2a>
	__asm volatile
 801c040:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c044:	f383 8811 	msr	BASEPRI, r3
 801c048:	f3bf 8f6f 	isb	sy
 801c04c:	f3bf 8f4f 	dsb	sy
 801c050:	60fb      	str	r3, [r7, #12]
}
 801c052:	bf00      	nop
 801c054:	e7fe      	b.n	801c054 <prvTaskExitError+0x28>
	__asm volatile
 801c056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c05a:	f383 8811 	msr	BASEPRI, r3
 801c05e:	f3bf 8f6f 	isb	sy
 801c062:	f3bf 8f4f 	dsb	sy
 801c066:	60bb      	str	r3, [r7, #8]
}
 801c068:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801c06a:	bf00      	nop
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d0fc      	beq.n	801c06c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801c072:	bf00      	nop
 801c074:	bf00      	nop
 801c076:	3714      	adds	r7, #20
 801c078:	46bd      	mov	sp, r7
 801c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c07e:	4770      	bx	lr
 801c080:	2000016c 	.word	0x2000016c
	...

0801c090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801c090:	4b07      	ldr	r3, [pc, #28]	; (801c0b0 <pxCurrentTCBConst2>)
 801c092:	6819      	ldr	r1, [r3, #0]
 801c094:	6808      	ldr	r0, [r1, #0]
 801c096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c09a:	f380 8809 	msr	PSP, r0
 801c09e:	f3bf 8f6f 	isb	sy
 801c0a2:	f04f 0000 	mov.w	r0, #0
 801c0a6:	f380 8811 	msr	BASEPRI, r0
 801c0aa:	4770      	bx	lr
 801c0ac:	f3af 8000 	nop.w

0801c0b0 <pxCurrentTCBConst2>:
 801c0b0:	20000c88 	.word	0x20000c88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801c0b4:	bf00      	nop
 801c0b6:	bf00      	nop

0801c0b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801c0b8:	4808      	ldr	r0, [pc, #32]	; (801c0dc <prvPortStartFirstTask+0x24>)
 801c0ba:	6800      	ldr	r0, [r0, #0]
 801c0bc:	6800      	ldr	r0, [r0, #0]
 801c0be:	f380 8808 	msr	MSP, r0
 801c0c2:	f04f 0000 	mov.w	r0, #0
 801c0c6:	f380 8814 	msr	CONTROL, r0
 801c0ca:	b662      	cpsie	i
 801c0cc:	b661      	cpsie	f
 801c0ce:	f3bf 8f4f 	dsb	sy
 801c0d2:	f3bf 8f6f 	isb	sy
 801c0d6:	df00      	svc	0
 801c0d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801c0da:	bf00      	nop
 801c0dc:	e000ed08 	.word	0xe000ed08

0801c0e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801c0e0:	b580      	push	{r7, lr}
 801c0e2:	b086      	sub	sp, #24
 801c0e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801c0e6:	4b46      	ldr	r3, [pc, #280]	; (801c200 <xPortStartScheduler+0x120>)
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	4a46      	ldr	r2, [pc, #280]	; (801c204 <xPortStartScheduler+0x124>)
 801c0ec:	4293      	cmp	r3, r2
 801c0ee:	d10a      	bne.n	801c106 <xPortStartScheduler+0x26>
	__asm volatile
 801c0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c0f4:	f383 8811 	msr	BASEPRI, r3
 801c0f8:	f3bf 8f6f 	isb	sy
 801c0fc:	f3bf 8f4f 	dsb	sy
 801c100:	613b      	str	r3, [r7, #16]
}
 801c102:	bf00      	nop
 801c104:	e7fe      	b.n	801c104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801c106:	4b3e      	ldr	r3, [pc, #248]	; (801c200 <xPortStartScheduler+0x120>)
 801c108:	681b      	ldr	r3, [r3, #0]
 801c10a:	4a3f      	ldr	r2, [pc, #252]	; (801c208 <xPortStartScheduler+0x128>)
 801c10c:	4293      	cmp	r3, r2
 801c10e:	d10a      	bne.n	801c126 <xPortStartScheduler+0x46>
	__asm volatile
 801c110:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c114:	f383 8811 	msr	BASEPRI, r3
 801c118:	f3bf 8f6f 	isb	sy
 801c11c:	f3bf 8f4f 	dsb	sy
 801c120:	60fb      	str	r3, [r7, #12]
}
 801c122:	bf00      	nop
 801c124:	e7fe      	b.n	801c124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801c126:	4b39      	ldr	r3, [pc, #228]	; (801c20c <xPortStartScheduler+0x12c>)
 801c128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801c12a:	697b      	ldr	r3, [r7, #20]
 801c12c:	781b      	ldrb	r3, [r3, #0]
 801c12e:	b2db      	uxtb	r3, r3
 801c130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801c132:	697b      	ldr	r3, [r7, #20]
 801c134:	22ff      	movs	r2, #255	; 0xff
 801c136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801c138:	697b      	ldr	r3, [r7, #20]
 801c13a:	781b      	ldrb	r3, [r3, #0]
 801c13c:	b2db      	uxtb	r3, r3
 801c13e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801c140:	78fb      	ldrb	r3, [r7, #3]
 801c142:	b2db      	uxtb	r3, r3
 801c144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801c148:	b2da      	uxtb	r2, r3
 801c14a:	4b31      	ldr	r3, [pc, #196]	; (801c210 <xPortStartScheduler+0x130>)
 801c14c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801c14e:	4b31      	ldr	r3, [pc, #196]	; (801c214 <xPortStartScheduler+0x134>)
 801c150:	2207      	movs	r2, #7
 801c152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c154:	e009      	b.n	801c16a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801c156:	4b2f      	ldr	r3, [pc, #188]	; (801c214 <xPortStartScheduler+0x134>)
 801c158:	681b      	ldr	r3, [r3, #0]
 801c15a:	3b01      	subs	r3, #1
 801c15c:	4a2d      	ldr	r2, [pc, #180]	; (801c214 <xPortStartScheduler+0x134>)
 801c15e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801c160:	78fb      	ldrb	r3, [r7, #3]
 801c162:	b2db      	uxtb	r3, r3
 801c164:	005b      	lsls	r3, r3, #1
 801c166:	b2db      	uxtb	r3, r3
 801c168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c16a:	78fb      	ldrb	r3, [r7, #3]
 801c16c:	b2db      	uxtb	r3, r3
 801c16e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c172:	2b80      	cmp	r3, #128	; 0x80
 801c174:	d0ef      	beq.n	801c156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801c176:	4b27      	ldr	r3, [pc, #156]	; (801c214 <xPortStartScheduler+0x134>)
 801c178:	681b      	ldr	r3, [r3, #0]
 801c17a:	f1c3 0307 	rsb	r3, r3, #7
 801c17e:	2b04      	cmp	r3, #4
 801c180:	d00a      	beq.n	801c198 <xPortStartScheduler+0xb8>
	__asm volatile
 801c182:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c186:	f383 8811 	msr	BASEPRI, r3
 801c18a:	f3bf 8f6f 	isb	sy
 801c18e:	f3bf 8f4f 	dsb	sy
 801c192:	60bb      	str	r3, [r7, #8]
}
 801c194:	bf00      	nop
 801c196:	e7fe      	b.n	801c196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801c198:	4b1e      	ldr	r3, [pc, #120]	; (801c214 <xPortStartScheduler+0x134>)
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	021b      	lsls	r3, r3, #8
 801c19e:	4a1d      	ldr	r2, [pc, #116]	; (801c214 <xPortStartScheduler+0x134>)
 801c1a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801c1a2:	4b1c      	ldr	r3, [pc, #112]	; (801c214 <xPortStartScheduler+0x134>)
 801c1a4:	681b      	ldr	r3, [r3, #0]
 801c1a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801c1aa:	4a1a      	ldr	r2, [pc, #104]	; (801c214 <xPortStartScheduler+0x134>)
 801c1ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	b2da      	uxtb	r2, r3
 801c1b2:	697b      	ldr	r3, [r7, #20]
 801c1b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801c1b6:	4b18      	ldr	r3, [pc, #96]	; (801c218 <xPortStartScheduler+0x138>)
 801c1b8:	681b      	ldr	r3, [r3, #0]
 801c1ba:	4a17      	ldr	r2, [pc, #92]	; (801c218 <xPortStartScheduler+0x138>)
 801c1bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801c1c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801c1c2:	4b15      	ldr	r3, [pc, #84]	; (801c218 <xPortStartScheduler+0x138>)
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	4a14      	ldr	r2, [pc, #80]	; (801c218 <xPortStartScheduler+0x138>)
 801c1c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801c1cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801c1ce:	f000 f8dd 	bl	801c38c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801c1d2:	4b12      	ldr	r3, [pc, #72]	; (801c21c <xPortStartScheduler+0x13c>)
 801c1d4:	2200      	movs	r2, #0
 801c1d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801c1d8:	f000 f8fc 	bl	801c3d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801c1dc:	4b10      	ldr	r3, [pc, #64]	; (801c220 <xPortStartScheduler+0x140>)
 801c1de:	681b      	ldr	r3, [r3, #0]
 801c1e0:	4a0f      	ldr	r2, [pc, #60]	; (801c220 <xPortStartScheduler+0x140>)
 801c1e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801c1e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801c1e8:	f7ff ff66 	bl	801c0b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801c1ec:	f7fe fe6c 	bl	801aec8 <vTaskSwitchContext>
	prvTaskExitError();
 801c1f0:	f7ff ff1c 	bl	801c02c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801c1f4:	2300      	movs	r3, #0
}
 801c1f6:	4618      	mov	r0, r3
 801c1f8:	3718      	adds	r7, #24
 801c1fa:	46bd      	mov	sp, r7
 801c1fc:	bd80      	pop	{r7, pc}
 801c1fe:	bf00      	nop
 801c200:	e000ed00 	.word	0xe000ed00
 801c204:	410fc271 	.word	0x410fc271
 801c208:	410fc270 	.word	0x410fc270
 801c20c:	e000e400 	.word	0xe000e400
 801c210:	200012b4 	.word	0x200012b4
 801c214:	200012b8 	.word	0x200012b8
 801c218:	e000ed20 	.word	0xe000ed20
 801c21c:	2000016c 	.word	0x2000016c
 801c220:	e000ef34 	.word	0xe000ef34

0801c224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801c224:	b480      	push	{r7}
 801c226:	b083      	sub	sp, #12
 801c228:	af00      	add	r7, sp, #0
	__asm volatile
 801c22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c22e:	f383 8811 	msr	BASEPRI, r3
 801c232:	f3bf 8f6f 	isb	sy
 801c236:	f3bf 8f4f 	dsb	sy
 801c23a:	607b      	str	r3, [r7, #4]
}
 801c23c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801c23e:	4b0f      	ldr	r3, [pc, #60]	; (801c27c <vPortEnterCritical+0x58>)
 801c240:	681b      	ldr	r3, [r3, #0]
 801c242:	3301      	adds	r3, #1
 801c244:	4a0d      	ldr	r2, [pc, #52]	; (801c27c <vPortEnterCritical+0x58>)
 801c246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801c248:	4b0c      	ldr	r3, [pc, #48]	; (801c27c <vPortEnterCritical+0x58>)
 801c24a:	681b      	ldr	r3, [r3, #0]
 801c24c:	2b01      	cmp	r3, #1
 801c24e:	d10f      	bne.n	801c270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801c250:	4b0b      	ldr	r3, [pc, #44]	; (801c280 <vPortEnterCritical+0x5c>)
 801c252:	681b      	ldr	r3, [r3, #0]
 801c254:	b2db      	uxtb	r3, r3
 801c256:	2b00      	cmp	r3, #0
 801c258:	d00a      	beq.n	801c270 <vPortEnterCritical+0x4c>
	__asm volatile
 801c25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c25e:	f383 8811 	msr	BASEPRI, r3
 801c262:	f3bf 8f6f 	isb	sy
 801c266:	f3bf 8f4f 	dsb	sy
 801c26a:	603b      	str	r3, [r7, #0]
}
 801c26c:	bf00      	nop
 801c26e:	e7fe      	b.n	801c26e <vPortEnterCritical+0x4a>
	}
}
 801c270:	bf00      	nop
 801c272:	370c      	adds	r7, #12
 801c274:	46bd      	mov	sp, r7
 801c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c27a:	4770      	bx	lr
 801c27c:	2000016c 	.word	0x2000016c
 801c280:	e000ed04 	.word	0xe000ed04

0801c284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801c284:	b480      	push	{r7}
 801c286:	b083      	sub	sp, #12
 801c288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801c28a:	4b12      	ldr	r3, [pc, #72]	; (801c2d4 <vPortExitCritical+0x50>)
 801c28c:	681b      	ldr	r3, [r3, #0]
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d10a      	bne.n	801c2a8 <vPortExitCritical+0x24>
	__asm volatile
 801c292:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c296:	f383 8811 	msr	BASEPRI, r3
 801c29a:	f3bf 8f6f 	isb	sy
 801c29e:	f3bf 8f4f 	dsb	sy
 801c2a2:	607b      	str	r3, [r7, #4]
}
 801c2a4:	bf00      	nop
 801c2a6:	e7fe      	b.n	801c2a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801c2a8:	4b0a      	ldr	r3, [pc, #40]	; (801c2d4 <vPortExitCritical+0x50>)
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	3b01      	subs	r3, #1
 801c2ae:	4a09      	ldr	r2, [pc, #36]	; (801c2d4 <vPortExitCritical+0x50>)
 801c2b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801c2b2:	4b08      	ldr	r3, [pc, #32]	; (801c2d4 <vPortExitCritical+0x50>)
 801c2b4:	681b      	ldr	r3, [r3, #0]
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	d105      	bne.n	801c2c6 <vPortExitCritical+0x42>
 801c2ba:	2300      	movs	r3, #0
 801c2bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c2be:	683b      	ldr	r3, [r7, #0]
 801c2c0:	f383 8811 	msr	BASEPRI, r3
}
 801c2c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801c2c6:	bf00      	nop
 801c2c8:	370c      	adds	r7, #12
 801c2ca:	46bd      	mov	sp, r7
 801c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2d0:	4770      	bx	lr
 801c2d2:	bf00      	nop
 801c2d4:	2000016c 	.word	0x2000016c
	...

0801c2e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801c2e0:	f3ef 8009 	mrs	r0, PSP
 801c2e4:	f3bf 8f6f 	isb	sy
 801c2e8:	4b15      	ldr	r3, [pc, #84]	; (801c340 <pxCurrentTCBConst>)
 801c2ea:	681a      	ldr	r2, [r3, #0]
 801c2ec:	f01e 0f10 	tst.w	lr, #16
 801c2f0:	bf08      	it	eq
 801c2f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801c2f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2fa:	6010      	str	r0, [r2, #0]
 801c2fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 801c300:	f04f 0050 	mov.w	r0, #80	; 0x50
 801c304:	f380 8811 	msr	BASEPRI, r0
 801c308:	f3bf 8f4f 	dsb	sy
 801c30c:	f3bf 8f6f 	isb	sy
 801c310:	f7fe fdda 	bl	801aec8 <vTaskSwitchContext>
 801c314:	f04f 0000 	mov.w	r0, #0
 801c318:	f380 8811 	msr	BASEPRI, r0
 801c31c:	bc09      	pop	{r0, r3}
 801c31e:	6819      	ldr	r1, [r3, #0]
 801c320:	6808      	ldr	r0, [r1, #0]
 801c322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c326:	f01e 0f10 	tst.w	lr, #16
 801c32a:	bf08      	it	eq
 801c32c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801c330:	f380 8809 	msr	PSP, r0
 801c334:	f3bf 8f6f 	isb	sy
 801c338:	4770      	bx	lr
 801c33a:	bf00      	nop
 801c33c:	f3af 8000 	nop.w

0801c340 <pxCurrentTCBConst>:
 801c340:	20000c88 	.word	0x20000c88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801c344:	bf00      	nop
 801c346:	bf00      	nop

0801c348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801c348:	b580      	push	{r7, lr}
 801c34a:	b082      	sub	sp, #8
 801c34c:	af00      	add	r7, sp, #0
	__asm volatile
 801c34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c352:	f383 8811 	msr	BASEPRI, r3
 801c356:	f3bf 8f6f 	isb	sy
 801c35a:	f3bf 8f4f 	dsb	sy
 801c35e:	607b      	str	r3, [r7, #4]
}
 801c360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801c362:	f7fe fcf7 	bl	801ad54 <xTaskIncrementTick>
 801c366:	4603      	mov	r3, r0
 801c368:	2b00      	cmp	r3, #0
 801c36a:	d003      	beq.n	801c374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801c36c:	4b06      	ldr	r3, [pc, #24]	; (801c388 <xPortSysTickHandler+0x40>)
 801c36e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c372:	601a      	str	r2, [r3, #0]
 801c374:	2300      	movs	r3, #0
 801c376:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c378:	683b      	ldr	r3, [r7, #0]
 801c37a:	f383 8811 	msr	BASEPRI, r3
}
 801c37e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801c380:	bf00      	nop
 801c382:	3708      	adds	r7, #8
 801c384:	46bd      	mov	sp, r7
 801c386:	bd80      	pop	{r7, pc}
 801c388:	e000ed04 	.word	0xe000ed04

0801c38c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801c38c:	b480      	push	{r7}
 801c38e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801c390:	4b0b      	ldr	r3, [pc, #44]	; (801c3c0 <vPortSetupTimerInterrupt+0x34>)
 801c392:	2200      	movs	r2, #0
 801c394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801c396:	4b0b      	ldr	r3, [pc, #44]	; (801c3c4 <vPortSetupTimerInterrupt+0x38>)
 801c398:	2200      	movs	r2, #0
 801c39a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801c39c:	4b0a      	ldr	r3, [pc, #40]	; (801c3c8 <vPortSetupTimerInterrupt+0x3c>)
 801c39e:	681b      	ldr	r3, [r3, #0]
 801c3a0:	4a0a      	ldr	r2, [pc, #40]	; (801c3cc <vPortSetupTimerInterrupt+0x40>)
 801c3a2:	fba2 2303 	umull	r2, r3, r2, r3
 801c3a6:	099b      	lsrs	r3, r3, #6
 801c3a8:	4a09      	ldr	r2, [pc, #36]	; (801c3d0 <vPortSetupTimerInterrupt+0x44>)
 801c3aa:	3b01      	subs	r3, #1
 801c3ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801c3ae:	4b04      	ldr	r3, [pc, #16]	; (801c3c0 <vPortSetupTimerInterrupt+0x34>)
 801c3b0:	2207      	movs	r2, #7
 801c3b2:	601a      	str	r2, [r3, #0]
}
 801c3b4:	bf00      	nop
 801c3b6:	46bd      	mov	sp, r7
 801c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3bc:	4770      	bx	lr
 801c3be:	bf00      	nop
 801c3c0:	e000e010 	.word	0xe000e010
 801c3c4:	e000e018 	.word	0xe000e018
 801c3c8:	20000000 	.word	0x20000000
 801c3cc:	10624dd3 	.word	0x10624dd3
 801c3d0:	e000e014 	.word	0xe000e014

0801c3d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801c3d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801c3e4 <vPortEnableVFP+0x10>
 801c3d8:	6801      	ldr	r1, [r0, #0]
 801c3da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801c3de:	6001      	str	r1, [r0, #0]
 801c3e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801c3e2:	bf00      	nop
 801c3e4:	e000ed88 	.word	0xe000ed88

0801c3e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801c3e8:	b480      	push	{r7}
 801c3ea:	b085      	sub	sp, #20
 801c3ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801c3ee:	f3ef 8305 	mrs	r3, IPSR
 801c3f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801c3f4:	68fb      	ldr	r3, [r7, #12]
 801c3f6:	2b0f      	cmp	r3, #15
 801c3f8:	d914      	bls.n	801c424 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801c3fa:	4a17      	ldr	r2, [pc, #92]	; (801c458 <vPortValidateInterruptPriority+0x70>)
 801c3fc:	68fb      	ldr	r3, [r7, #12]
 801c3fe:	4413      	add	r3, r2
 801c400:	781b      	ldrb	r3, [r3, #0]
 801c402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801c404:	4b15      	ldr	r3, [pc, #84]	; (801c45c <vPortValidateInterruptPriority+0x74>)
 801c406:	781b      	ldrb	r3, [r3, #0]
 801c408:	7afa      	ldrb	r2, [r7, #11]
 801c40a:	429a      	cmp	r2, r3
 801c40c:	d20a      	bcs.n	801c424 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801c40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c412:	f383 8811 	msr	BASEPRI, r3
 801c416:	f3bf 8f6f 	isb	sy
 801c41a:	f3bf 8f4f 	dsb	sy
 801c41e:	607b      	str	r3, [r7, #4]
}
 801c420:	bf00      	nop
 801c422:	e7fe      	b.n	801c422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801c424:	4b0e      	ldr	r3, [pc, #56]	; (801c460 <vPortValidateInterruptPriority+0x78>)
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801c42c:	4b0d      	ldr	r3, [pc, #52]	; (801c464 <vPortValidateInterruptPriority+0x7c>)
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	429a      	cmp	r2, r3
 801c432:	d90a      	bls.n	801c44a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801c434:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c438:	f383 8811 	msr	BASEPRI, r3
 801c43c:	f3bf 8f6f 	isb	sy
 801c440:	f3bf 8f4f 	dsb	sy
 801c444:	603b      	str	r3, [r7, #0]
}
 801c446:	bf00      	nop
 801c448:	e7fe      	b.n	801c448 <vPortValidateInterruptPriority+0x60>
	}
 801c44a:	bf00      	nop
 801c44c:	3714      	adds	r7, #20
 801c44e:	46bd      	mov	sp, r7
 801c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c454:	4770      	bx	lr
 801c456:	bf00      	nop
 801c458:	e000e3f0 	.word	0xe000e3f0
 801c45c:	200012b4 	.word	0x200012b4
 801c460:	e000ed0c 	.word	0xe000ed0c
 801c464:	200012b8 	.word	0x200012b8

0801c468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801c468:	b580      	push	{r7, lr}
 801c46a:	b08a      	sub	sp, #40	; 0x28
 801c46c:	af00      	add	r7, sp, #0
 801c46e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801c470:	2300      	movs	r3, #0
 801c472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801c474:	f7fe fba0 	bl	801abb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801c478:	4b5b      	ldr	r3, [pc, #364]	; (801c5e8 <pvPortMalloc+0x180>)
 801c47a:	681b      	ldr	r3, [r3, #0]
 801c47c:	2b00      	cmp	r3, #0
 801c47e:	d101      	bne.n	801c484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801c480:	f000 f920 	bl	801c6c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801c484:	4b59      	ldr	r3, [pc, #356]	; (801c5ec <pvPortMalloc+0x184>)
 801c486:	681a      	ldr	r2, [r3, #0]
 801c488:	687b      	ldr	r3, [r7, #4]
 801c48a:	4013      	ands	r3, r2
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	f040 8093 	bne.w	801c5b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	2b00      	cmp	r3, #0
 801c496:	d01d      	beq.n	801c4d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801c498:	2208      	movs	r2, #8
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	4413      	add	r3, r2
 801c49e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	f003 0307 	and.w	r3, r3, #7
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	d014      	beq.n	801c4d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	f023 0307 	bic.w	r3, r3, #7
 801c4b0:	3308      	adds	r3, #8
 801c4b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	f003 0307 	and.w	r3, r3, #7
 801c4ba:	2b00      	cmp	r3, #0
 801c4bc:	d00a      	beq.n	801c4d4 <pvPortMalloc+0x6c>
	__asm volatile
 801c4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c4c2:	f383 8811 	msr	BASEPRI, r3
 801c4c6:	f3bf 8f6f 	isb	sy
 801c4ca:	f3bf 8f4f 	dsb	sy
 801c4ce:	617b      	str	r3, [r7, #20]
}
 801c4d0:	bf00      	nop
 801c4d2:	e7fe      	b.n	801c4d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d06e      	beq.n	801c5b8 <pvPortMalloc+0x150>
 801c4da:	4b45      	ldr	r3, [pc, #276]	; (801c5f0 <pvPortMalloc+0x188>)
 801c4dc:	681b      	ldr	r3, [r3, #0]
 801c4de:	687a      	ldr	r2, [r7, #4]
 801c4e0:	429a      	cmp	r2, r3
 801c4e2:	d869      	bhi.n	801c5b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801c4e4:	4b43      	ldr	r3, [pc, #268]	; (801c5f4 <pvPortMalloc+0x18c>)
 801c4e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801c4e8:	4b42      	ldr	r3, [pc, #264]	; (801c5f4 <pvPortMalloc+0x18c>)
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c4ee:	e004      	b.n	801c4fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801c4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801c4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4f6:	681b      	ldr	r3, [r3, #0]
 801c4f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4fc:	685b      	ldr	r3, [r3, #4]
 801c4fe:	687a      	ldr	r2, [r7, #4]
 801c500:	429a      	cmp	r2, r3
 801c502:	d903      	bls.n	801c50c <pvPortMalloc+0xa4>
 801c504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c506:	681b      	ldr	r3, [r3, #0]
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d1f1      	bne.n	801c4f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801c50c:	4b36      	ldr	r3, [pc, #216]	; (801c5e8 <pvPortMalloc+0x180>)
 801c50e:	681b      	ldr	r3, [r3, #0]
 801c510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c512:	429a      	cmp	r2, r3
 801c514:	d050      	beq.n	801c5b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801c516:	6a3b      	ldr	r3, [r7, #32]
 801c518:	681b      	ldr	r3, [r3, #0]
 801c51a:	2208      	movs	r2, #8
 801c51c:	4413      	add	r3, r2
 801c51e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801c520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c522:	681a      	ldr	r2, [r3, #0]
 801c524:	6a3b      	ldr	r3, [r7, #32]
 801c526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801c528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c52a:	685a      	ldr	r2, [r3, #4]
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	1ad2      	subs	r2, r2, r3
 801c530:	2308      	movs	r3, #8
 801c532:	005b      	lsls	r3, r3, #1
 801c534:	429a      	cmp	r2, r3
 801c536:	d91f      	bls.n	801c578 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801c538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	4413      	add	r3, r2
 801c53e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c540:	69bb      	ldr	r3, [r7, #24]
 801c542:	f003 0307 	and.w	r3, r3, #7
 801c546:	2b00      	cmp	r3, #0
 801c548:	d00a      	beq.n	801c560 <pvPortMalloc+0xf8>
	__asm volatile
 801c54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c54e:	f383 8811 	msr	BASEPRI, r3
 801c552:	f3bf 8f6f 	isb	sy
 801c556:	f3bf 8f4f 	dsb	sy
 801c55a:	613b      	str	r3, [r7, #16]
}
 801c55c:	bf00      	nop
 801c55e:	e7fe      	b.n	801c55e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801c560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c562:	685a      	ldr	r2, [r3, #4]
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	1ad2      	subs	r2, r2, r3
 801c568:	69bb      	ldr	r3, [r7, #24]
 801c56a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801c56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c56e:	687a      	ldr	r2, [r7, #4]
 801c570:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801c572:	69b8      	ldr	r0, [r7, #24]
 801c574:	f000 f908 	bl	801c788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801c578:	4b1d      	ldr	r3, [pc, #116]	; (801c5f0 <pvPortMalloc+0x188>)
 801c57a:	681a      	ldr	r2, [r3, #0]
 801c57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c57e:	685b      	ldr	r3, [r3, #4]
 801c580:	1ad3      	subs	r3, r2, r3
 801c582:	4a1b      	ldr	r2, [pc, #108]	; (801c5f0 <pvPortMalloc+0x188>)
 801c584:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801c586:	4b1a      	ldr	r3, [pc, #104]	; (801c5f0 <pvPortMalloc+0x188>)
 801c588:	681a      	ldr	r2, [r3, #0]
 801c58a:	4b1b      	ldr	r3, [pc, #108]	; (801c5f8 <pvPortMalloc+0x190>)
 801c58c:	681b      	ldr	r3, [r3, #0]
 801c58e:	429a      	cmp	r2, r3
 801c590:	d203      	bcs.n	801c59a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801c592:	4b17      	ldr	r3, [pc, #92]	; (801c5f0 <pvPortMalloc+0x188>)
 801c594:	681b      	ldr	r3, [r3, #0]
 801c596:	4a18      	ldr	r2, [pc, #96]	; (801c5f8 <pvPortMalloc+0x190>)
 801c598:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801c59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c59c:	685a      	ldr	r2, [r3, #4]
 801c59e:	4b13      	ldr	r3, [pc, #76]	; (801c5ec <pvPortMalloc+0x184>)
 801c5a0:	681b      	ldr	r3, [r3, #0]
 801c5a2:	431a      	orrs	r2, r3
 801c5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801c5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5aa:	2200      	movs	r2, #0
 801c5ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801c5ae:	4b13      	ldr	r3, [pc, #76]	; (801c5fc <pvPortMalloc+0x194>)
 801c5b0:	681b      	ldr	r3, [r3, #0]
 801c5b2:	3301      	adds	r3, #1
 801c5b4:	4a11      	ldr	r2, [pc, #68]	; (801c5fc <pvPortMalloc+0x194>)
 801c5b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801c5b8:	f7fe fb0c 	bl	801abd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801c5bc:	69fb      	ldr	r3, [r7, #28]
 801c5be:	f003 0307 	and.w	r3, r3, #7
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	d00a      	beq.n	801c5dc <pvPortMalloc+0x174>
	__asm volatile
 801c5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c5ca:	f383 8811 	msr	BASEPRI, r3
 801c5ce:	f3bf 8f6f 	isb	sy
 801c5d2:	f3bf 8f4f 	dsb	sy
 801c5d6:	60fb      	str	r3, [r7, #12]
}
 801c5d8:	bf00      	nop
 801c5da:	e7fe      	b.n	801c5da <pvPortMalloc+0x172>
	return pvReturn;
 801c5dc:	69fb      	ldr	r3, [r7, #28]
}
 801c5de:	4618      	mov	r0, r3
 801c5e0:	3728      	adds	r7, #40	; 0x28
 801c5e2:	46bd      	mov	sp, r7
 801c5e4:	bd80      	pop	{r7, pc}
 801c5e6:	bf00      	nop
 801c5e8:	20004ec4 	.word	0x20004ec4
 801c5ec:	20004ed8 	.word	0x20004ed8
 801c5f0:	20004ec8 	.word	0x20004ec8
 801c5f4:	20004ebc 	.word	0x20004ebc
 801c5f8:	20004ecc 	.word	0x20004ecc
 801c5fc:	20004ed0 	.word	0x20004ed0

0801c600 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801c600:	b580      	push	{r7, lr}
 801c602:	b086      	sub	sp, #24
 801c604:	af00      	add	r7, sp, #0
 801c606:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	2b00      	cmp	r3, #0
 801c610:	d04d      	beq.n	801c6ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801c612:	2308      	movs	r3, #8
 801c614:	425b      	negs	r3, r3
 801c616:	697a      	ldr	r2, [r7, #20]
 801c618:	4413      	add	r3, r2
 801c61a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801c61c:	697b      	ldr	r3, [r7, #20]
 801c61e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801c620:	693b      	ldr	r3, [r7, #16]
 801c622:	685a      	ldr	r2, [r3, #4]
 801c624:	4b24      	ldr	r3, [pc, #144]	; (801c6b8 <vPortFree+0xb8>)
 801c626:	681b      	ldr	r3, [r3, #0]
 801c628:	4013      	ands	r3, r2
 801c62a:	2b00      	cmp	r3, #0
 801c62c:	d10a      	bne.n	801c644 <vPortFree+0x44>
	__asm volatile
 801c62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c632:	f383 8811 	msr	BASEPRI, r3
 801c636:	f3bf 8f6f 	isb	sy
 801c63a:	f3bf 8f4f 	dsb	sy
 801c63e:	60fb      	str	r3, [r7, #12]
}
 801c640:	bf00      	nop
 801c642:	e7fe      	b.n	801c642 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801c644:	693b      	ldr	r3, [r7, #16]
 801c646:	681b      	ldr	r3, [r3, #0]
 801c648:	2b00      	cmp	r3, #0
 801c64a:	d00a      	beq.n	801c662 <vPortFree+0x62>
	__asm volatile
 801c64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c650:	f383 8811 	msr	BASEPRI, r3
 801c654:	f3bf 8f6f 	isb	sy
 801c658:	f3bf 8f4f 	dsb	sy
 801c65c:	60bb      	str	r3, [r7, #8]
}
 801c65e:	bf00      	nop
 801c660:	e7fe      	b.n	801c660 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801c662:	693b      	ldr	r3, [r7, #16]
 801c664:	685a      	ldr	r2, [r3, #4]
 801c666:	4b14      	ldr	r3, [pc, #80]	; (801c6b8 <vPortFree+0xb8>)
 801c668:	681b      	ldr	r3, [r3, #0]
 801c66a:	4013      	ands	r3, r2
 801c66c:	2b00      	cmp	r3, #0
 801c66e:	d01e      	beq.n	801c6ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801c670:	693b      	ldr	r3, [r7, #16]
 801c672:	681b      	ldr	r3, [r3, #0]
 801c674:	2b00      	cmp	r3, #0
 801c676:	d11a      	bne.n	801c6ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801c678:	693b      	ldr	r3, [r7, #16]
 801c67a:	685a      	ldr	r2, [r3, #4]
 801c67c:	4b0e      	ldr	r3, [pc, #56]	; (801c6b8 <vPortFree+0xb8>)
 801c67e:	681b      	ldr	r3, [r3, #0]
 801c680:	43db      	mvns	r3, r3
 801c682:	401a      	ands	r2, r3
 801c684:	693b      	ldr	r3, [r7, #16]
 801c686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801c688:	f7fe fa96 	bl	801abb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801c68c:	693b      	ldr	r3, [r7, #16]
 801c68e:	685a      	ldr	r2, [r3, #4]
 801c690:	4b0a      	ldr	r3, [pc, #40]	; (801c6bc <vPortFree+0xbc>)
 801c692:	681b      	ldr	r3, [r3, #0]
 801c694:	4413      	add	r3, r2
 801c696:	4a09      	ldr	r2, [pc, #36]	; (801c6bc <vPortFree+0xbc>)
 801c698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801c69a:	6938      	ldr	r0, [r7, #16]
 801c69c:	f000 f874 	bl	801c788 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801c6a0:	4b07      	ldr	r3, [pc, #28]	; (801c6c0 <vPortFree+0xc0>)
 801c6a2:	681b      	ldr	r3, [r3, #0]
 801c6a4:	3301      	adds	r3, #1
 801c6a6:	4a06      	ldr	r2, [pc, #24]	; (801c6c0 <vPortFree+0xc0>)
 801c6a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801c6aa:	f7fe fa93 	bl	801abd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801c6ae:	bf00      	nop
 801c6b0:	3718      	adds	r7, #24
 801c6b2:	46bd      	mov	sp, r7
 801c6b4:	bd80      	pop	{r7, pc}
 801c6b6:	bf00      	nop
 801c6b8:	20004ed8 	.word	0x20004ed8
 801c6bc:	20004ec8 	.word	0x20004ec8
 801c6c0:	20004ed4 	.word	0x20004ed4

0801c6c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801c6c4:	b480      	push	{r7}
 801c6c6:	b085      	sub	sp, #20
 801c6c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801c6ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801c6ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801c6d0:	4b27      	ldr	r3, [pc, #156]	; (801c770 <prvHeapInit+0xac>)
 801c6d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	f003 0307 	and.w	r3, r3, #7
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	d00c      	beq.n	801c6f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801c6de:	68fb      	ldr	r3, [r7, #12]
 801c6e0:	3307      	adds	r3, #7
 801c6e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c6e4:	68fb      	ldr	r3, [r7, #12]
 801c6e6:	f023 0307 	bic.w	r3, r3, #7
 801c6ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801c6ec:	68ba      	ldr	r2, [r7, #8]
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	1ad3      	subs	r3, r2, r3
 801c6f2:	4a1f      	ldr	r2, [pc, #124]	; (801c770 <prvHeapInit+0xac>)
 801c6f4:	4413      	add	r3, r2
 801c6f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801c6f8:	68fb      	ldr	r3, [r7, #12]
 801c6fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801c6fc:	4a1d      	ldr	r2, [pc, #116]	; (801c774 <prvHeapInit+0xb0>)
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801c702:	4b1c      	ldr	r3, [pc, #112]	; (801c774 <prvHeapInit+0xb0>)
 801c704:	2200      	movs	r2, #0
 801c706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	68ba      	ldr	r2, [r7, #8]
 801c70c:	4413      	add	r3, r2
 801c70e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801c710:	2208      	movs	r2, #8
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	1a9b      	subs	r3, r3, r2
 801c716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c718:	68fb      	ldr	r3, [r7, #12]
 801c71a:	f023 0307 	bic.w	r3, r3, #7
 801c71e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	4a15      	ldr	r2, [pc, #84]	; (801c778 <prvHeapInit+0xb4>)
 801c724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801c726:	4b14      	ldr	r3, [pc, #80]	; (801c778 <prvHeapInit+0xb4>)
 801c728:	681b      	ldr	r3, [r3, #0]
 801c72a:	2200      	movs	r2, #0
 801c72c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801c72e:	4b12      	ldr	r3, [pc, #72]	; (801c778 <prvHeapInit+0xb4>)
 801c730:	681b      	ldr	r3, [r3, #0]
 801c732:	2200      	movs	r2, #0
 801c734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801c736:	687b      	ldr	r3, [r7, #4]
 801c738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801c73a:	683b      	ldr	r3, [r7, #0]
 801c73c:	68fa      	ldr	r2, [r7, #12]
 801c73e:	1ad2      	subs	r2, r2, r3
 801c740:	683b      	ldr	r3, [r7, #0]
 801c742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801c744:	4b0c      	ldr	r3, [pc, #48]	; (801c778 <prvHeapInit+0xb4>)
 801c746:	681a      	ldr	r2, [r3, #0]
 801c748:	683b      	ldr	r3, [r7, #0]
 801c74a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c74c:	683b      	ldr	r3, [r7, #0]
 801c74e:	685b      	ldr	r3, [r3, #4]
 801c750:	4a0a      	ldr	r2, [pc, #40]	; (801c77c <prvHeapInit+0xb8>)
 801c752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c754:	683b      	ldr	r3, [r7, #0]
 801c756:	685b      	ldr	r3, [r3, #4]
 801c758:	4a09      	ldr	r2, [pc, #36]	; (801c780 <prvHeapInit+0xbc>)
 801c75a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801c75c:	4b09      	ldr	r3, [pc, #36]	; (801c784 <prvHeapInit+0xc0>)
 801c75e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801c762:	601a      	str	r2, [r3, #0]
}
 801c764:	bf00      	nop
 801c766:	3714      	adds	r7, #20
 801c768:	46bd      	mov	sp, r7
 801c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c76e:	4770      	bx	lr
 801c770:	200012bc 	.word	0x200012bc
 801c774:	20004ebc 	.word	0x20004ebc
 801c778:	20004ec4 	.word	0x20004ec4
 801c77c:	20004ecc 	.word	0x20004ecc
 801c780:	20004ec8 	.word	0x20004ec8
 801c784:	20004ed8 	.word	0x20004ed8

0801c788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801c788:	b480      	push	{r7}
 801c78a:	b085      	sub	sp, #20
 801c78c:	af00      	add	r7, sp, #0
 801c78e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801c790:	4b28      	ldr	r3, [pc, #160]	; (801c834 <prvInsertBlockIntoFreeList+0xac>)
 801c792:	60fb      	str	r3, [r7, #12]
 801c794:	e002      	b.n	801c79c <prvInsertBlockIntoFreeList+0x14>
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	681b      	ldr	r3, [r3, #0]
 801c79a:	60fb      	str	r3, [r7, #12]
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	687a      	ldr	r2, [r7, #4]
 801c7a2:	429a      	cmp	r2, r3
 801c7a4:	d8f7      	bhi.n	801c796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801c7a6:	68fb      	ldr	r3, [r7, #12]
 801c7a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801c7aa:	68fb      	ldr	r3, [r7, #12]
 801c7ac:	685b      	ldr	r3, [r3, #4]
 801c7ae:	68ba      	ldr	r2, [r7, #8]
 801c7b0:	4413      	add	r3, r2
 801c7b2:	687a      	ldr	r2, [r7, #4]
 801c7b4:	429a      	cmp	r2, r3
 801c7b6:	d108      	bne.n	801c7ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	685a      	ldr	r2, [r3, #4]
 801c7bc:	687b      	ldr	r3, [r7, #4]
 801c7be:	685b      	ldr	r3, [r3, #4]
 801c7c0:	441a      	add	r2, r3
 801c7c2:	68fb      	ldr	r3, [r7, #12]
 801c7c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801c7ca:	687b      	ldr	r3, [r7, #4]
 801c7cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	685b      	ldr	r3, [r3, #4]
 801c7d2:	68ba      	ldr	r2, [r7, #8]
 801c7d4:	441a      	add	r2, r3
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	681b      	ldr	r3, [r3, #0]
 801c7da:	429a      	cmp	r2, r3
 801c7dc:	d118      	bne.n	801c810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801c7de:	68fb      	ldr	r3, [r7, #12]
 801c7e0:	681a      	ldr	r2, [r3, #0]
 801c7e2:	4b15      	ldr	r3, [pc, #84]	; (801c838 <prvInsertBlockIntoFreeList+0xb0>)
 801c7e4:	681b      	ldr	r3, [r3, #0]
 801c7e6:	429a      	cmp	r2, r3
 801c7e8:	d00d      	beq.n	801c806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801c7ea:	687b      	ldr	r3, [r7, #4]
 801c7ec:	685a      	ldr	r2, [r3, #4]
 801c7ee:	68fb      	ldr	r3, [r7, #12]
 801c7f0:	681b      	ldr	r3, [r3, #0]
 801c7f2:	685b      	ldr	r3, [r3, #4]
 801c7f4:	441a      	add	r2, r3
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801c7fa:	68fb      	ldr	r3, [r7, #12]
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	681a      	ldr	r2, [r3, #0]
 801c800:	687b      	ldr	r3, [r7, #4]
 801c802:	601a      	str	r2, [r3, #0]
 801c804:	e008      	b.n	801c818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801c806:	4b0c      	ldr	r3, [pc, #48]	; (801c838 <prvInsertBlockIntoFreeList+0xb0>)
 801c808:	681a      	ldr	r2, [r3, #0]
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	601a      	str	r2, [r3, #0]
 801c80e:	e003      	b.n	801c818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801c810:	68fb      	ldr	r3, [r7, #12]
 801c812:	681a      	ldr	r2, [r3, #0]
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801c818:	68fa      	ldr	r2, [r7, #12]
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	429a      	cmp	r2, r3
 801c81e:	d002      	beq.n	801c826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801c820:	68fb      	ldr	r3, [r7, #12]
 801c822:	687a      	ldr	r2, [r7, #4]
 801c824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801c826:	bf00      	nop
 801c828:	3714      	adds	r7, #20
 801c82a:	46bd      	mov	sp, r7
 801c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c830:	4770      	bx	lr
 801c832:	bf00      	nop
 801c834:	20004ebc 	.word	0x20004ebc
 801c838:	20004ec4 	.word	0x20004ec4

0801c83c <MX_USB_DEVICE_Init>:

/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(void) {
 801c83c:	b580      	push	{r7, lr}
 801c83e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 801c840:	2200      	movs	r2, #0
 801c842:	4912      	ldr	r1, [pc, #72]	; (801c88c <MX_USB_DEVICE_Init+0x50>)
 801c844:	4812      	ldr	r0, [pc, #72]	; (801c890 <MX_USB_DEVICE_Init+0x54>)
 801c846:	f7fa fe4b 	bl	80174e0 <USBD_Init>
 801c84a:	4603      	mov	r3, r0
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	d001      	beq.n	801c854 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 801c850:	f7f3 fae0 	bl	800fe14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801c854:	490f      	ldr	r1, [pc, #60]	; (801c894 <MX_USB_DEVICE_Init+0x58>)
 801c856:	480e      	ldr	r0, [pc, #56]	; (801c890 <MX_USB_DEVICE_Init+0x54>)
 801c858:	f7fa fea6 	bl	80175a8 <USBD_RegisterClass>
 801c85c:	4603      	mov	r3, r0
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d001      	beq.n	801c866 <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 801c862:	f7f3 fad7 	bl	800fe14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801c866:	490c      	ldr	r1, [pc, #48]	; (801c898 <MX_USB_DEVICE_Init+0x5c>)
 801c868:	4809      	ldr	r0, [pc, #36]	; (801c890 <MX_USB_DEVICE_Init+0x54>)
 801c86a:	f7fa fd93 	bl	8017394 <USBD_CDC_RegisterInterface>
 801c86e:	4603      	mov	r3, r0
 801c870:	2b00      	cmp	r3, #0
 801c872:	d001      	beq.n	801c878 <MX_USB_DEVICE_Init+0x3c>
    Error_Handler();
 801c874:	f7f3 face 	bl	800fe14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801c878:	4805      	ldr	r0, [pc, #20]	; (801c890 <MX_USB_DEVICE_Init+0x54>)
 801c87a:	f7fa febc 	bl	80175f6 <USBD_Start>
 801c87e:	4603      	mov	r3, r0
 801c880:	2b00      	cmp	r3, #0
 801c882:	d001      	beq.n	801c888 <MX_USB_DEVICE_Init+0x4c>
    Error_Handler();
 801c884:	f7f3 fac6 	bl	800fe14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801c888:	bf00      	nop
 801c88a:	bd80      	pop	{r7, pc}
 801c88c:	20000184 	.word	0x20000184
 801c890:	20008658 	.word	0x20008658
 801c894:	20000068 	.word	0x20000068
 801c898:	20000170 	.word	0x20000170

0801c89c <MX_USB_DEVICE_DeInit>:

void MX_USB_DEVICE_DeInit(void) {
 801c89c:	b580      	push	{r7, lr}
 801c89e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_DeInit(&hUsbDeviceFS) != USBD_OK) {
 801c8a0:	4804      	ldr	r0, [pc, #16]	; (801c8b4 <MX_USB_DEVICE_DeInit+0x18>)
 801c8a2:	f7fa fe4d 	bl	8017540 <USBD_DeInit>
 801c8a6:	4603      	mov	r3, r0
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d001      	beq.n	801c8b0 <MX_USB_DEVICE_DeInit+0x14>
    Error_Handler();
 801c8ac:	f7f3 fab2 	bl	800fe14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801c8b0:	bf00      	nop
 801c8b2:	bd80      	pop	{r7, pc}
 801c8b4:	20008658 	.word	0x20008658

0801c8b8 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 801c8b8:	b580      	push	{r7, lr}
 801c8ba:	af00      	add	r7, sp, #0
  TIM_Config();
 801c8bc:	f000 f91c 	bl	801caf8 <TIM_Config>

  if (HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK) {
 801c8c0:	480b      	ldr	r0, [pc, #44]	; (801c8f0 <CDC_Init_FS+0x38>)
 801c8c2:	f7f7 fe1b 	bl	80144fc <HAL_TIM_Base_Start_IT>
 801c8c6:	4603      	mov	r3, r0
 801c8c8:	2b00      	cmp	r3, #0
 801c8ca:	d001      	beq.n	801c8d0 <CDC_Init_FS+0x18>
    /* Starting Error */
    Error_Handler();
 801c8cc:	f7f3 faa2 	bl	800fe14 <Error_Handler>
  }
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 512);
 801c8d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c8d4:	4907      	ldr	r1, [pc, #28]	; (801c8f4 <CDC_Init_FS+0x3c>)
 801c8d6:	4808      	ldr	r0, [pc, #32]	; (801c8f8 <CDC_Init_FS+0x40>)
 801c8d8:	f7fa fd71 	bl	80173be <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801c8dc:	4907      	ldr	r1, [pc, #28]	; (801c8fc <CDC_Init_FS+0x44>)
 801c8de:	4806      	ldr	r0, [pc, #24]	; (801c8f8 <CDC_Init_FS+0x40>)
 801c8e0:	f7fa fd8b 	bl	80173fa <USBD_CDC_SetRxBuffer>

  usb_initialized = true;
 801c8e4:	4b06      	ldr	r3, [pc, #24]	; (801c900 <CDC_Init_FS+0x48>)
 801c8e6:	2201      	movs	r2, #1
 801c8e8:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 801c8ea:	2300      	movs	r3, #0
}
 801c8ec:	4618      	mov	r0, r3
 801c8ee:	bd80      	pop	{r7, pc}
 801c8f0:	20008bac 	.word	0x20008bac
 801c8f4:	20008968 	.word	0x20008968
 801c8f8:	20008658 	.word	0x20008658
 801c8fc:	20008928 	.word	0x20008928
 801c900:	20004edc 	.word	0x20004edc

0801c904 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 801c904:	b580      	push	{r7, lr}
 801c906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  HAL_TIM_Base_DeInit(&TimHandle);
 801c908:	4802      	ldr	r0, [pc, #8]	; (801c914 <CDC_DeInit_FS+0x10>)
 801c90a:	f7f7 fd8e 	bl	801442a <HAL_TIM_Base_DeInit>
  return (USBD_OK);
 801c90e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801c910:	4618      	mov	r0, r3
 801c912:	bd80      	pop	{r7, pc}
 801c914:	20008bac 	.word	0x20008bac

0801c918 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 801c918:	b480      	push	{r7}
 801c91a:	b085      	sub	sp, #20
 801c91c:	af00      	add	r7, sp, #0
 801c91e:	4603      	mov	r3, r0
 801c920:	6039      	str	r1, [r7, #0]
 801c922:	71fb      	strb	r3, [r7, #7]
 801c924:	4613      	mov	r3, r2
 801c926:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  UNUSED(length);
  uint32_t speed = 115200;
 801c928:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 801c92c:	60fb      	str	r3, [r7, #12]
  switch (cmd) {
 801c92e:	79fb      	ldrb	r3, [r7, #7]
 801c930:	2b23      	cmp	r3, #35	; 0x23
 801c932:	d86e      	bhi.n	801ca12 <CDC_Control_FS+0xfa>
 801c934:	a201      	add	r2, pc, #4	; (adr r2, 801c93c <CDC_Control_FS+0x24>)
 801c936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c93a:	bf00      	nop
 801c93c:	0801ca13 	.word	0x0801ca13
 801c940:	0801ca13 	.word	0x0801ca13
 801c944:	0801ca13 	.word	0x0801ca13
 801c948:	0801ca13 	.word	0x0801ca13
 801c94c:	0801ca13 	.word	0x0801ca13
 801c950:	0801ca13 	.word	0x0801ca13
 801c954:	0801ca13 	.word	0x0801ca13
 801c958:	0801ca13 	.word	0x0801ca13
 801c95c:	0801ca13 	.word	0x0801ca13
 801c960:	0801ca13 	.word	0x0801ca13
 801c964:	0801ca13 	.word	0x0801ca13
 801c968:	0801ca13 	.word	0x0801ca13
 801c96c:	0801ca13 	.word	0x0801ca13
 801c970:	0801ca13 	.word	0x0801ca13
 801c974:	0801ca13 	.word	0x0801ca13
 801c978:	0801ca13 	.word	0x0801ca13
 801c97c:	0801ca13 	.word	0x0801ca13
 801c980:	0801ca13 	.word	0x0801ca13
 801c984:	0801ca13 	.word	0x0801ca13
 801c988:	0801ca13 	.word	0x0801ca13
 801c98c:	0801ca13 	.word	0x0801ca13
 801c990:	0801ca13 	.word	0x0801ca13
 801c994:	0801ca13 	.word	0x0801ca13
 801c998:	0801ca13 	.word	0x0801ca13
 801c99c:	0801ca13 	.word	0x0801ca13
 801c9a0:	0801ca13 	.word	0x0801ca13
 801c9a4:	0801ca13 	.word	0x0801ca13
 801c9a8:	0801ca13 	.word	0x0801ca13
 801c9ac:	0801ca13 	.word	0x0801ca13
 801c9b0:	0801ca13 	.word	0x0801ca13
 801c9b4:	0801ca13 	.word	0x0801ca13
 801c9b8:	0801ca13 	.word	0x0801ca13
 801c9bc:	0801ca13 	.word	0x0801ca13
 801c9c0:	0801c9cd 	.word	0x0801c9cd
 801c9c4:	0801ca13 	.word	0x0801ca13
 801c9c8:	0801ca13 	.word	0x0801ca13
    case CDC_SET_LINE_CODING:

      break;

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(speed);
 801c9cc:	68fb      	ldr	r3, [r7, #12]
 801c9ce:	b2da      	uxtb	r2, r3
 801c9d0:	683b      	ldr	r3, [r7, #0]
 801c9d2:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(speed >> 8);
 801c9d4:	68fb      	ldr	r3, [r7, #12]
 801c9d6:	0a1a      	lsrs	r2, r3, #8
 801c9d8:	683b      	ldr	r3, [r7, #0]
 801c9da:	3301      	adds	r3, #1
 801c9dc:	b2d2      	uxtb	r2, r2
 801c9de:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(speed >> 16);
 801c9e0:	68fb      	ldr	r3, [r7, #12]
 801c9e2:	0c1a      	lsrs	r2, r3, #16
 801c9e4:	683b      	ldr	r3, [r7, #0]
 801c9e6:	3302      	adds	r3, #2
 801c9e8:	b2d2      	uxtb	r2, r2
 801c9ea:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(speed >> 24);
 801c9ec:	68fb      	ldr	r3, [r7, #12]
 801c9ee:	0e1a      	lsrs	r2, r3, #24
 801c9f0:	683b      	ldr	r3, [r7, #0]
 801c9f2:	3303      	adds	r3, #3
 801c9f4:	b2d2      	uxtb	r2, r2
 801c9f6:	701a      	strb	r2, [r3, #0]
      pbuf[4] = 0;
 801c9f8:	683b      	ldr	r3, [r7, #0]
 801c9fa:	3304      	adds	r3, #4
 801c9fc:	2200      	movs	r2, #0
 801c9fe:	701a      	strb	r2, [r3, #0]
      pbuf[5] = 0;
 801ca00:	683b      	ldr	r3, [r7, #0]
 801ca02:	3305      	adds	r3, #5
 801ca04:	2200      	movs	r2, #0
 801ca06:	701a      	strb	r2, [r3, #0]
      pbuf[6] = 8;
 801ca08:	683b      	ldr	r3, [r7, #0]
 801ca0a:	3306      	adds	r3, #6
 801ca0c:	2208      	movs	r2, #8
 801ca0e:	701a      	strb	r2, [r3, #0]
      break;
 801ca10:	e000      	b.n	801ca14 <CDC_Control_FS+0xfc>
    case CDC_SEND_BREAK:

      break;

    default:
      break;
 801ca12:	bf00      	nop
  }

  return (USBD_OK);
 801ca14:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801ca16:	4618      	mov	r0, r3
 801ca18:	3714      	adds	r7, #20
 801ca1a:	46bd      	mov	sp, r7
 801ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca20:	4770      	bx	lr
 801ca22:	bf00      	nop

0801ca24 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 801ca24:	b580      	push	{r7, lr}
 801ca26:	b084      	sub	sp, #16
 801ca28:	af00      	add	r7, sp, #0
 801ca2a:	6078      	str	r0, [r7, #4]
 801ca2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t buf_length = *Len;
 801ca2e:	683b      	ldr	r3, [r7, #0]
 801ca30:	681b      	ldr	r3, [r3, #0]
 801ca32:	60fb      	str	r3, [r7, #12]
  if (buf_length != 0) {
 801ca34:	68fb      	ldr	r3, [r7, #12]
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d004      	beq.n	801ca44 <CDC_Receive_FS+0x20>
    fifo_write_bytes(&usb_input_fifo, Buf, buf_length);
 801ca3a:	68fa      	ldr	r2, [r7, #12]
 801ca3c:	6879      	ldr	r1, [r7, #4]
 801ca3e:	4807      	ldr	r0, [pc, #28]	; (801ca5c <CDC_Receive_FS+0x38>)
 801ca40:	f7f3 fcd3 	bl	80103ea <fifo_write_bytes>
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801ca44:	6879      	ldr	r1, [r7, #4]
 801ca46:	4806      	ldr	r0, [pc, #24]	; (801ca60 <CDC_Receive_FS+0x3c>)
 801ca48:	f7fa fcd7 	bl	80173fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801ca4c:	4804      	ldr	r0, [pc, #16]	; (801ca60 <CDC_Receive_FS+0x3c>)
 801ca4e:	f7fa fd1d 	bl	801748c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801ca52:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801ca54:	4618      	mov	r0, r3
 801ca56:	3710      	adds	r7, #16
 801ca58:	46bd      	mov	sp, r7
 801ca5a:	bd80      	pop	{r7, pc}
 801ca5c:	20005308 	.word	0x20005308
 801ca60:	20008658 	.word	0x20008658

0801ca64 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 801ca64:	b480      	push	{r7}
 801ca66:	b087      	sub	sp, #28
 801ca68:	af00      	add	r7, sp, #0
 801ca6a:	60f8      	str	r0, [r7, #12]
 801ca6c:	60b9      	str	r1, [r7, #8]
 801ca6e:	4613      	mov	r3, r2
 801ca70:	71fb      	strb	r3, [r7, #7]
  int8_t result = USBD_OK;
 801ca72:	2300      	movs	r3, #0
 801ca74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801ca76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ca7a:	4618      	mov	r0, r3
 801ca7c:	371c      	adds	r7, #28
 801ca7e:	46bd      	mov	sp, r7
 801ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca84:	4770      	bx	lr
	...

0801ca88 <TIM5_IRQHandler>:

void TIMUsb_IRQHandler(void) {
 801ca88:	b580      	push	{r7, lr}
 801ca8a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TimHandle);
 801ca8c:	4802      	ldr	r0, [pc, #8]	; (801ca98 <TIM5_IRQHandler+0x10>)
 801ca8e:	f7f7 ff4f 	bl	8014930 <HAL_TIM_IRQHandler>
}
 801ca92:	bf00      	nop
 801ca94:	bd80      	pop	{r7, pc}
 801ca96:	bf00      	nop
 801ca98:	20008bac 	.word	0x20008bac

0801ca9c <CDC_Transmit_Elapsed>:

void CDC_Transmit_Elapsed() {
 801ca9c:	b580      	push	{r7, lr}
 801ca9e:	b082      	sub	sp, #8
 801caa0:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 801caa2:	4b12      	ldr	r3, [pc, #72]	; (801caec <CDC_Transmit_Elapsed+0x50>)
 801caa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801caa8:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState == 0) {
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	d116      	bne.n	801cae2 <CDC_Transmit_Elapsed+0x46>
    // Check usb fifo and print out to usb
    uint32_t len = fifo_get_length(&usb_output_fifo);
 801cab4:	480e      	ldr	r0, [pc, #56]	; (801caf0 <CDC_Transmit_Elapsed+0x54>)
 801cab6:	f7f3 fba2 	bl	80101fe <fifo_get_length>
 801caba:	6038      	str	r0, [r7, #0]
    if (len) {
 801cabc:	683b      	ldr	r3, [r7, #0]
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	d00f      	beq.n	801cae2 <CDC_Transmit_Elapsed+0x46>
      if (fifo_read_bytes(&usb_output_fifo, UserTxBufferFS, len)) {
 801cac2:	683a      	ldr	r2, [r7, #0]
 801cac4:	490b      	ldr	r1, [pc, #44]	; (801caf4 <CDC_Transmit_Elapsed+0x58>)
 801cac6:	480a      	ldr	r0, [pc, #40]	; (801caf0 <CDC_Transmit_Elapsed+0x54>)
 801cac8:	f7f3 fc21 	bl	801030e <fifo_read_bytes>
 801cacc:	4603      	mov	r3, r0
 801cace:	2b00      	cmp	r3, #0
 801cad0:	d007      	beq.n	801cae2 <CDC_Transmit_Elapsed+0x46>
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, len);
 801cad2:	683a      	ldr	r2, [r7, #0]
 801cad4:	4907      	ldr	r1, [pc, #28]	; (801caf4 <CDC_Transmit_Elapsed+0x58>)
 801cad6:	4805      	ldr	r0, [pc, #20]	; (801caec <CDC_Transmit_Elapsed+0x50>)
 801cad8:	f7fa fc71 	bl	80173be <USBD_CDC_SetTxBuffer>
        USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801cadc:	4803      	ldr	r0, [pc, #12]	; (801caec <CDC_Transmit_Elapsed+0x50>)
 801cade:	f7fa fca5 	bl	801742c <USBD_CDC_TransmitPacket>
      }
    }
  }
}
 801cae2:	bf00      	nop
 801cae4:	3708      	adds	r7, #8
 801cae6:	46bd      	mov	sp, r7
 801cae8:	bd80      	pop	{r7, pc}
 801caea:	bf00      	nop
 801caec:	20008658 	.word	0x20008658
 801caf0:	2000552c 	.word	0x2000552c
 801caf4:	20008968 	.word	0x20008968

0801caf8 <TIM_Config>:

static void TIM_Config(void) {
 801caf8:	b580      	push	{r7, lr}
 801cafa:	b082      	sub	sp, #8
 801cafc:	af00      	add	r7, sp, #0
   /* Enable TIM peripherals Clock */
  TIMUsb_CLK_ENABLE();
 801cafe:	2300      	movs	r3, #0
 801cb00:	607b      	str	r3, [r7, #4]
 801cb02:	4b1b      	ldr	r3, [pc, #108]	; (801cb70 <TIM_Config+0x78>)
 801cb04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb06:	4a1a      	ldr	r2, [pc, #104]	; (801cb70 <TIM_Config+0x78>)
 801cb08:	f043 0308 	orr.w	r3, r3, #8
 801cb0c:	6413      	str	r3, [r2, #64]	; 0x40
 801cb0e:	4b18      	ldr	r3, [pc, #96]	; (801cb70 <TIM_Config+0x78>)
 801cb10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb12:	f003 0308 	and.w	r3, r3, #8
 801cb16:	607b      	str	r3, [r7, #4]
 801cb18:	687b      	ldr	r3, [r7, #4]

  /* Set TIMUsb instance */
  TimHandle.Instance = TIMUsb;
 801cb1a:	4b16      	ldr	r3, [pc, #88]	; (801cb74 <TIM_Config+0x7c>)
 801cb1c:	4a16      	ldr	r2, [pc, #88]	; (801cb78 <TIM_Config+0x80>)
 801cb1e:	601a      	str	r2, [r3, #0]

  TimHandle.Init.Period = (CDC_POLLING_INTERVAL * 1000) - 1;
 801cb20:	4b14      	ldr	r3, [pc, #80]	; (801cb74 <TIM_Config+0x7c>)
 801cb22:	f240 72cf 	movw	r2, #1999	; 0x7cf
 801cb26:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = (SystemCoreClock / 2 / (1000000)) - 1;
 801cb28:	4b14      	ldr	r3, [pc, #80]	; (801cb7c <TIM_Config+0x84>)
 801cb2a:	681b      	ldr	r3, [r3, #0]
 801cb2c:	4a14      	ldr	r2, [pc, #80]	; (801cb80 <TIM_Config+0x88>)
 801cb2e:	fba2 2303 	umull	r2, r3, r2, r3
 801cb32:	0cdb      	lsrs	r3, r3, #19
 801cb34:	3b01      	subs	r3, #1
 801cb36:	4a0f      	ldr	r2, [pc, #60]	; (801cb74 <TIM_Config+0x7c>)
 801cb38:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 801cb3a:	4b0e      	ldr	r3, [pc, #56]	; (801cb74 <TIM_Config+0x7c>)
 801cb3c:	2200      	movs	r2, #0
 801cb3e:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 801cb40:	4b0c      	ldr	r3, [pc, #48]	; (801cb74 <TIM_Config+0x7c>)
 801cb42:	2200      	movs	r2, #0
 801cb44:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK) {
 801cb46:	480b      	ldr	r0, [pc, #44]	; (801cb74 <TIM_Config+0x7c>)
 801cb48:	f7f7 fc20 	bl	801438c <HAL_TIM_Base_Init>
 801cb4c:	4603      	mov	r3, r0
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d001      	beq.n	801cb56 <TIM_Config+0x5e>
    /* Initialization Error */
    Error_Handler();
 801cb52:	f7f3 f95f 	bl	800fe14 <Error_Handler>
  }


  /* Configure the NVIC for TIMx */
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(TIMUsb_IRQn, 0, 0);
 801cb56:	2200      	movs	r2, #0
 801cb58:	2100      	movs	r1, #0
 801cb5a:	2032      	movs	r0, #50	; 0x32
 801cb5c:	f7f4 f9c2 	bl	8010ee4 <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMUsb_IRQn);
 801cb60:	2032      	movs	r0, #50	; 0x32
 801cb62:	f7f4 f9db 	bl	8010f1c <HAL_NVIC_EnableIRQ>
}
 801cb66:	bf00      	nop
 801cb68:	3708      	adds	r7, #8
 801cb6a:	46bd      	mov	sp, r7
 801cb6c:	bd80      	pop	{r7, pc}
 801cb6e:	bf00      	nop
 801cb70:	40023800 	.word	0x40023800
 801cb74:	20008bac 	.word	0x20008bac
 801cb78:	40000c00 	.word	0x40000c00
 801cb7c:	20000000 	.word	0x20000000
 801cb80:	431bde83 	.word	0x431bde83

0801cb84 <USBD_FS_DeviceDescriptor>:
 * @brief  Return the device descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801cb84:	b480      	push	{r7}
 801cb86:	b083      	sub	sp, #12
 801cb88:	af00      	add	r7, sp, #0
 801cb8a:	4603      	mov	r3, r0
 801cb8c:	6039      	str	r1, [r7, #0]
 801cb8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801cb90:	683b      	ldr	r3, [r7, #0]
 801cb92:	2212      	movs	r2, #18
 801cb94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801cb96:	4b03      	ldr	r3, [pc, #12]	; (801cba4 <USBD_FS_DeviceDescriptor+0x20>)
}
 801cb98:	4618      	mov	r0, r3
 801cb9a:	370c      	adds	r7, #12
 801cb9c:	46bd      	mov	sp, r7
 801cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cba2:	4770      	bx	lr
 801cba4:	200001a0 	.word	0x200001a0

0801cba8 <USBD_FS_LangIDStrDescriptor>:
 * @brief  Return the LangID string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801cba8:	b480      	push	{r7}
 801cbaa:	b083      	sub	sp, #12
 801cbac:	af00      	add	r7, sp, #0
 801cbae:	4603      	mov	r3, r0
 801cbb0:	6039      	str	r1, [r7, #0]
 801cbb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801cbb4:	683b      	ldr	r3, [r7, #0]
 801cbb6:	2204      	movs	r2, #4
 801cbb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801cbba:	4b03      	ldr	r3, [pc, #12]	; (801cbc8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801cbbc:	4618      	mov	r0, r3
 801cbbe:	370c      	adds	r7, #12
 801cbc0:	46bd      	mov	sp, r7
 801cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbc6:	4770      	bx	lr
 801cbc8:	200001b4 	.word	0x200001b4

0801cbcc <USBD_FS_ProductStrDescriptor>:
 * @brief  Return the product string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801cbcc:	b580      	push	{r7, lr}
 801cbce:	b082      	sub	sp, #8
 801cbd0:	af00      	add	r7, sp, #0
 801cbd2:	4603      	mov	r3, r0
 801cbd4:	6039      	str	r1, [r7, #0]
 801cbd6:	71fb      	strb	r3, [r7, #7]
  if (speed == 0) {
 801cbd8:	79fb      	ldrb	r3, [r7, #7]
 801cbda:	2b00      	cmp	r3, #0
 801cbdc:	d105      	bne.n	801cbea <USBD_FS_ProductStrDescriptor+0x1e>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cbde:	683a      	ldr	r2, [r7, #0]
 801cbe0:	4907      	ldr	r1, [pc, #28]	; (801cc00 <USBD_FS_ProductStrDescriptor+0x34>)
 801cbe2:	4808      	ldr	r0, [pc, #32]	; (801cc04 <USBD_FS_ProductStrDescriptor+0x38>)
 801cbe4:	f7fb fd39 	bl	801865a <USBD_GetString>
 801cbe8:	e004      	b.n	801cbf4 <USBD_FS_ProductStrDescriptor+0x28>
  } else {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cbea:	683a      	ldr	r2, [r7, #0]
 801cbec:	4904      	ldr	r1, [pc, #16]	; (801cc00 <USBD_FS_ProductStrDescriptor+0x34>)
 801cbee:	4805      	ldr	r0, [pc, #20]	; (801cc04 <USBD_FS_ProductStrDescriptor+0x38>)
 801cbf0:	f7fb fd33 	bl	801865a <USBD_GetString>
  }
  return USBD_StrDesc;
 801cbf4:	4b02      	ldr	r3, [pc, #8]	; (801cc00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801cbf6:	4618      	mov	r0, r3
 801cbf8:	3708      	adds	r7, #8
 801cbfa:	46bd      	mov	sp, r7
 801cbfc:	bd80      	pop	{r7, pc}
 801cbfe:	bf00      	nop
 801cc00:	20008bf4 	.word	0x20008bf4
 801cc04:	0801e90c 	.word	0x0801e90c

0801cc08 <USBD_FS_ManufacturerStrDescriptor>:
 * @brief  Return the manufacturer string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801cc08:	b580      	push	{r7, lr}
 801cc0a:	b082      	sub	sp, #8
 801cc0c:	af00      	add	r7, sp, #0
 801cc0e:	4603      	mov	r3, r0
 801cc10:	6039      	str	r1, [r7, #0]
 801cc12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801cc14:	683a      	ldr	r2, [r7, #0]
 801cc16:	4904      	ldr	r1, [pc, #16]	; (801cc28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801cc18:	4804      	ldr	r0, [pc, #16]	; (801cc2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801cc1a:	f7fb fd1e 	bl	801865a <USBD_GetString>
  return USBD_StrDesc;
 801cc1e:	4b02      	ldr	r3, [pc, #8]	; (801cc28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801cc20:	4618      	mov	r0, r3
 801cc22:	3708      	adds	r7, #8
 801cc24:	46bd      	mov	sp, r7
 801cc26:	bd80      	pop	{r7, pc}
 801cc28:	20008bf4 	.word	0x20008bf4
 801cc2c:	0801e91c 	.word	0x0801e91c

0801cc30 <USBD_FS_SerialStrDescriptor>:
 * @brief  Return the serial number string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801cc30:	b580      	push	{r7, lr}
 801cc32:	b082      	sub	sp, #8
 801cc34:	af00      	add	r7, sp, #0
 801cc36:	4603      	mov	r3, r0
 801cc38:	6039      	str	r1, [r7, #0]
 801cc3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801cc3c:	683b      	ldr	r3, [r7, #0]
 801cc3e:	221a      	movs	r2, #26
 801cc40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801cc42:	f000 f843 	bl	801cccc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *)USBD_StringSerial;
 801cc46:	4b02      	ldr	r3, [pc, #8]	; (801cc50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801cc48:	4618      	mov	r0, r3
 801cc4a:	3708      	adds	r7, #8
 801cc4c:	46bd      	mov	sp, r7
 801cc4e:	bd80      	pop	{r7, pc}
 801cc50:	200001b8 	.word	0x200001b8

0801cc54 <USBD_FS_ConfigStrDescriptor>:
 * @brief  Return the configuration string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801cc54:	b580      	push	{r7, lr}
 801cc56:	b082      	sub	sp, #8
 801cc58:	af00      	add	r7, sp, #0
 801cc5a:	4603      	mov	r3, r0
 801cc5c:	6039      	str	r1, [r7, #0]
 801cc5e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH) {
 801cc60:	79fb      	ldrb	r3, [r7, #7]
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	d105      	bne.n	801cc72 <USBD_FS_ConfigStrDescriptor+0x1e>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cc66:	683a      	ldr	r2, [r7, #0]
 801cc68:	4907      	ldr	r1, [pc, #28]	; (801cc88 <USBD_FS_ConfigStrDescriptor+0x34>)
 801cc6a:	4808      	ldr	r0, [pc, #32]	; (801cc8c <USBD_FS_ConfigStrDescriptor+0x38>)
 801cc6c:	f7fb fcf5 	bl	801865a <USBD_GetString>
 801cc70:	e004      	b.n	801cc7c <USBD_FS_ConfigStrDescriptor+0x28>
  } else {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cc72:	683a      	ldr	r2, [r7, #0]
 801cc74:	4904      	ldr	r1, [pc, #16]	; (801cc88 <USBD_FS_ConfigStrDescriptor+0x34>)
 801cc76:	4805      	ldr	r0, [pc, #20]	; (801cc8c <USBD_FS_ConfigStrDescriptor+0x38>)
 801cc78:	f7fb fcef 	bl	801865a <USBD_GetString>
  }
  return USBD_StrDesc;
 801cc7c:	4b02      	ldr	r3, [pc, #8]	; (801cc88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801cc7e:	4618      	mov	r0, r3
 801cc80:	3708      	adds	r7, #8
 801cc82:	46bd      	mov	sp, r7
 801cc84:	bd80      	pop	{r7, pc}
 801cc86:	bf00      	nop
 801cc88:	20008bf4 	.word	0x20008bf4
 801cc8c:	0801e924 	.word	0x0801e924

0801cc90 <USBD_FS_InterfaceStrDescriptor>:
 * @brief  Return the interface string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801cc90:	b580      	push	{r7, lr}
 801cc92:	b082      	sub	sp, #8
 801cc94:	af00      	add	r7, sp, #0
 801cc96:	4603      	mov	r3, r0
 801cc98:	6039      	str	r1, [r7, #0]
 801cc9a:	71fb      	strb	r3, [r7, #7]
  if (speed == 0) {
 801cc9c:	79fb      	ldrb	r3, [r7, #7]
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	d105      	bne.n	801ccae <USBD_FS_InterfaceStrDescriptor+0x1e>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cca2:	683a      	ldr	r2, [r7, #0]
 801cca4:	4907      	ldr	r1, [pc, #28]	; (801ccc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801cca6:	4808      	ldr	r0, [pc, #32]	; (801ccc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801cca8:	f7fb fcd7 	bl	801865a <USBD_GetString>
 801ccac:	e004      	b.n	801ccb8 <USBD_FS_InterfaceStrDescriptor+0x28>
  } else {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ccae:	683a      	ldr	r2, [r7, #0]
 801ccb0:	4904      	ldr	r1, [pc, #16]	; (801ccc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801ccb2:	4805      	ldr	r0, [pc, #20]	; (801ccc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801ccb4:	f7fb fcd1 	bl	801865a <USBD_GetString>
  }
  return USBD_StrDesc;
 801ccb8:	4b02      	ldr	r3, [pc, #8]	; (801ccc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801ccba:	4618      	mov	r0, r3
 801ccbc:	3708      	adds	r7, #8
 801ccbe:	46bd      	mov	sp, r7
 801ccc0:	bd80      	pop	{r7, pc}
 801ccc2:	bf00      	nop
 801ccc4:	20008bf4 	.word	0x20008bf4
 801ccc8:	0801e930 	.word	0x0801e930

0801cccc <Get_SerialNum>:
/**
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void) {
 801cccc:	b580      	push	{r7, lr}
 801ccce:	b084      	sub	sp, #16
 801ccd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 801ccd2:	4b0f      	ldr	r3, [pc, #60]	; (801cd10 <Get_SerialNum+0x44>)
 801ccd4:	681b      	ldr	r3, [r3, #0]
 801ccd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 801ccd8:	4b0e      	ldr	r3, [pc, #56]	; (801cd14 <Get_SerialNum+0x48>)
 801ccda:	681b      	ldr	r3, [r3, #0]
 801ccdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 801ccde:	4b0e      	ldr	r3, [pc, #56]	; (801cd18 <Get_SerialNum+0x4c>)
 801cce0:	681b      	ldr	r3, [r3, #0]
 801cce2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801cce4:	68fa      	ldr	r2, [r7, #12]
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	4413      	add	r3, r2
 801ccea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0) {
 801ccec:	68fb      	ldr	r3, [r7, #12]
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	d009      	beq.n	801cd06 <Get_SerialNum+0x3a>
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801ccf2:	2208      	movs	r2, #8
 801ccf4:	4909      	ldr	r1, [pc, #36]	; (801cd1c <Get_SerialNum+0x50>)
 801ccf6:	68f8      	ldr	r0, [r7, #12]
 801ccf8:	f000 f814 	bl	801cd24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801ccfc:	2204      	movs	r2, #4
 801ccfe:	4908      	ldr	r1, [pc, #32]	; (801cd20 <Get_SerialNum+0x54>)
 801cd00:	68b8      	ldr	r0, [r7, #8]
 801cd02:	f000 f80f 	bl	801cd24 <IntToUnicode>
  }
}
 801cd06:	bf00      	nop
 801cd08:	3710      	adds	r7, #16
 801cd0a:	46bd      	mov	sp, r7
 801cd0c:	bd80      	pop	{r7, pc}
 801cd0e:	bf00      	nop
 801cd10:	1fff7a10 	.word	0x1fff7a10
 801cd14:	1fff7a14 	.word	0x1fff7a14
 801cd18:	1fff7a18 	.word	0x1fff7a18
 801cd1c:	200001ba 	.word	0x200001ba
 801cd20:	200001ca 	.word	0x200001ca

0801cd24 <IntToUnicode>:
 * @param  value: value to convert
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len) {
 801cd24:	b480      	push	{r7}
 801cd26:	b087      	sub	sp, #28
 801cd28:	af00      	add	r7, sp, #0
 801cd2a:	60f8      	str	r0, [r7, #12]
 801cd2c:	60b9      	str	r1, [r7, #8]
 801cd2e:	4613      	mov	r3, r2
 801cd30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801cd32:	2300      	movs	r3, #0
 801cd34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++) {
 801cd36:	2300      	movs	r3, #0
 801cd38:	75fb      	strb	r3, [r7, #23]
 801cd3a:	e027      	b.n	801cd8c <IntToUnicode+0x68>
    if (((value >> 28)) < 0xA) {
 801cd3c:	68fb      	ldr	r3, [r7, #12]
 801cd3e:	0f1b      	lsrs	r3, r3, #28
 801cd40:	2b09      	cmp	r3, #9
 801cd42:	d80b      	bhi.n	801cd5c <IntToUnicode+0x38>
      pbuf[2 * idx] = (value >> 28) + '0';
 801cd44:	68fb      	ldr	r3, [r7, #12]
 801cd46:	0f1b      	lsrs	r3, r3, #28
 801cd48:	b2da      	uxtb	r2, r3
 801cd4a:	7dfb      	ldrb	r3, [r7, #23]
 801cd4c:	005b      	lsls	r3, r3, #1
 801cd4e:	4619      	mov	r1, r3
 801cd50:	68bb      	ldr	r3, [r7, #8]
 801cd52:	440b      	add	r3, r1
 801cd54:	3230      	adds	r2, #48	; 0x30
 801cd56:	b2d2      	uxtb	r2, r2
 801cd58:	701a      	strb	r2, [r3, #0]
 801cd5a:	e00a      	b.n	801cd72 <IntToUnicode+0x4e>
    } else {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801cd5c:	68fb      	ldr	r3, [r7, #12]
 801cd5e:	0f1b      	lsrs	r3, r3, #28
 801cd60:	b2da      	uxtb	r2, r3
 801cd62:	7dfb      	ldrb	r3, [r7, #23]
 801cd64:	005b      	lsls	r3, r3, #1
 801cd66:	4619      	mov	r1, r3
 801cd68:	68bb      	ldr	r3, [r7, #8]
 801cd6a:	440b      	add	r3, r1
 801cd6c:	3237      	adds	r2, #55	; 0x37
 801cd6e:	b2d2      	uxtb	r2, r2
 801cd70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	011b      	lsls	r3, r3, #4
 801cd76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801cd78:	7dfb      	ldrb	r3, [r7, #23]
 801cd7a:	005b      	lsls	r3, r3, #1
 801cd7c:	3301      	adds	r3, #1
 801cd7e:	68ba      	ldr	r2, [r7, #8]
 801cd80:	4413      	add	r3, r2
 801cd82:	2200      	movs	r2, #0
 801cd84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++) {
 801cd86:	7dfb      	ldrb	r3, [r7, #23]
 801cd88:	3301      	adds	r3, #1
 801cd8a:	75fb      	strb	r3, [r7, #23]
 801cd8c:	7dfa      	ldrb	r2, [r7, #23]
 801cd8e:	79fb      	ldrb	r3, [r7, #7]
 801cd90:	429a      	cmp	r2, r3
 801cd92:	d3d3      	bcc.n	801cd3c <IntToUnicode+0x18>
  }
}
 801cd94:	bf00      	nop
 801cd96:	bf00      	nop
 801cd98:	371c      	adds	r7, #28
 801cd9a:	46bd      	mov	sp, r7
 801cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cda0:	4770      	bx	lr
	...

0801cda4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801cda4:	b580      	push	{r7, lr}
 801cda6:	b08a      	sub	sp, #40	; 0x28
 801cda8:	af00      	add	r7, sp, #0
 801cdaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801cdac:	f107 0314 	add.w	r3, r7, #20
 801cdb0:	2200      	movs	r2, #0
 801cdb2:	601a      	str	r2, [r3, #0]
 801cdb4:	605a      	str	r2, [r3, #4]
 801cdb6:	609a      	str	r2, [r3, #8]
 801cdb8:	60da      	str	r2, [r3, #12]
 801cdba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	681b      	ldr	r3, [r3, #0]
 801cdc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801cdc4:	d13a      	bne.n	801ce3c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801cdc6:	2300      	movs	r3, #0
 801cdc8:	613b      	str	r3, [r7, #16]
 801cdca:	4b1e      	ldr	r3, [pc, #120]	; (801ce44 <HAL_PCD_MspInit+0xa0>)
 801cdcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cdce:	4a1d      	ldr	r2, [pc, #116]	; (801ce44 <HAL_PCD_MspInit+0xa0>)
 801cdd0:	f043 0301 	orr.w	r3, r3, #1
 801cdd4:	6313      	str	r3, [r2, #48]	; 0x30
 801cdd6:	4b1b      	ldr	r3, [pc, #108]	; (801ce44 <HAL_PCD_MspInit+0xa0>)
 801cdd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cdda:	f003 0301 	and.w	r3, r3, #1
 801cdde:	613b      	str	r3, [r7, #16]
 801cde0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801cde2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801cde6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cde8:	2302      	movs	r3, #2
 801cdea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cdec:	2300      	movs	r3, #0
 801cdee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cdf0:	2303      	movs	r3, #3
 801cdf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801cdf4:	230a      	movs	r3, #10
 801cdf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801cdf8:	f107 0314 	add.w	r3, r7, #20
 801cdfc:	4619      	mov	r1, r3
 801cdfe:	4812      	ldr	r0, [pc, #72]	; (801ce48 <HAL_PCD_MspInit+0xa4>)
 801ce00:	f7f4 fb90 	bl	8011524 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801ce04:	4b0f      	ldr	r3, [pc, #60]	; (801ce44 <HAL_PCD_MspInit+0xa0>)
 801ce06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ce08:	4a0e      	ldr	r2, [pc, #56]	; (801ce44 <HAL_PCD_MspInit+0xa0>)
 801ce0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ce0e:	6353      	str	r3, [r2, #52]	; 0x34
 801ce10:	2300      	movs	r3, #0
 801ce12:	60fb      	str	r3, [r7, #12]
 801ce14:	4b0b      	ldr	r3, [pc, #44]	; (801ce44 <HAL_PCD_MspInit+0xa0>)
 801ce16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ce18:	4a0a      	ldr	r2, [pc, #40]	; (801ce44 <HAL_PCD_MspInit+0xa0>)
 801ce1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801ce1e:	6453      	str	r3, [r2, #68]	; 0x44
 801ce20:	4b08      	ldr	r3, [pc, #32]	; (801ce44 <HAL_PCD_MspInit+0xa0>)
 801ce22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ce24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801ce28:	60fb      	str	r3, [r7, #12]
 801ce2a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801ce2c:	2200      	movs	r2, #0
 801ce2e:	2100      	movs	r1, #0
 801ce30:	2043      	movs	r0, #67	; 0x43
 801ce32:	f7f4 f857 	bl	8010ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801ce36:	2043      	movs	r0, #67	; 0x43
 801ce38:	f7f4 f870 	bl	8010f1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801ce3c:	bf00      	nop
 801ce3e:	3728      	adds	r7, #40	; 0x28
 801ce40:	46bd      	mov	sp, r7
 801ce42:	bd80      	pop	{r7, pc}
 801ce44:	40023800 	.word	0x40023800
 801ce48:	40020000 	.word	0x40020000

0801ce4c <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 801ce4c:	b580      	push	{r7, lr}
 801ce4e:	b082      	sub	sp, #8
 801ce50:	af00      	add	r7, sp, #0
 801ce52:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	681b      	ldr	r3, [r3, #0]
 801ce58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ce5c:	d10d      	bne.n	801ce7a <HAL_PCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 801ce5e:	4b09      	ldr	r3, [pc, #36]	; (801ce84 <HAL_PCD_MspDeInit+0x38>)
 801ce60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ce62:	4a08      	ldr	r2, [pc, #32]	; (801ce84 <HAL_PCD_MspDeInit+0x38>)
 801ce64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ce68:	6353      	str	r3, [r2, #52]	; 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 801ce6a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801ce6e:	4806      	ldr	r0, [pc, #24]	; (801ce88 <HAL_PCD_MspDeInit+0x3c>)
 801ce70:	f7f4 fcdc 	bl	801182c <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 801ce74:	2043      	movs	r0, #67	; 0x43
 801ce76:	f7f4 f85f 	bl	8010f38 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 801ce7a:	bf00      	nop
 801ce7c:	3708      	adds	r7, #8
 801ce7e:	46bd      	mov	sp, r7
 801ce80:	bd80      	pop	{r7, pc}
 801ce82:	bf00      	nop
 801ce84:	40023800 	.word	0x40023800
 801ce88:	40020000 	.word	0x40020000

0801ce8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ce8c:	b580      	push	{r7, lr}
 801ce8e:	b082      	sub	sp, #8
 801ce90:	af00      	add	r7, sp, #0
 801ce92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801ce9a:	687b      	ldr	r3, [r7, #4]
 801ce9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801cea0:	4619      	mov	r1, r3
 801cea2:	4610      	mov	r0, r2
 801cea4:	f7fa fbf2 	bl	801768c <USBD_LL_SetupStage>
}
 801cea8:	bf00      	nop
 801ceaa:	3708      	adds	r7, #8
 801ceac:	46bd      	mov	sp, r7
 801ceae:	bd80      	pop	{r7, pc}

0801ceb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ceb0:	b580      	push	{r7, lr}
 801ceb2:	b082      	sub	sp, #8
 801ceb4:	af00      	add	r7, sp, #0
 801ceb6:	6078      	str	r0, [r7, #4]
 801ceb8:	460b      	mov	r3, r1
 801ceba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801cec2:	78fa      	ldrb	r2, [r7, #3]
 801cec4:	6879      	ldr	r1, [r7, #4]
 801cec6:	4613      	mov	r3, r2
 801cec8:	00db      	lsls	r3, r3, #3
 801ceca:	1a9b      	subs	r3, r3, r2
 801cecc:	009b      	lsls	r3, r3, #2
 801cece:	440b      	add	r3, r1
 801ced0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ced4:	681a      	ldr	r2, [r3, #0]
 801ced6:	78fb      	ldrb	r3, [r7, #3]
 801ced8:	4619      	mov	r1, r3
 801ceda:	f7fa fc2c 	bl	8017736 <USBD_LL_DataOutStage>
}
 801cede:	bf00      	nop
 801cee0:	3708      	adds	r7, #8
 801cee2:	46bd      	mov	sp, r7
 801cee4:	bd80      	pop	{r7, pc}

0801cee6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cee6:	b580      	push	{r7, lr}
 801cee8:	b082      	sub	sp, #8
 801ceea:	af00      	add	r7, sp, #0
 801ceec:	6078      	str	r0, [r7, #4]
 801ceee:	460b      	mov	r3, r1
 801cef0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801cef8:	78fa      	ldrb	r2, [r7, #3]
 801cefa:	6879      	ldr	r1, [r7, #4]
 801cefc:	4613      	mov	r3, r2
 801cefe:	00db      	lsls	r3, r3, #3
 801cf00:	1a9b      	subs	r3, r3, r2
 801cf02:	009b      	lsls	r3, r3, #2
 801cf04:	440b      	add	r3, r1
 801cf06:	3348      	adds	r3, #72	; 0x48
 801cf08:	681a      	ldr	r2, [r3, #0]
 801cf0a:	78fb      	ldrb	r3, [r7, #3]
 801cf0c:	4619      	mov	r1, r3
 801cf0e:	f7fa fc75 	bl	80177fc <USBD_LL_DataInStage>
}
 801cf12:	bf00      	nop
 801cf14:	3708      	adds	r7, #8
 801cf16:	46bd      	mov	sp, r7
 801cf18:	bd80      	pop	{r7, pc}

0801cf1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cf1a:	b580      	push	{r7, lr}
 801cf1c:	b082      	sub	sp, #8
 801cf1e:	af00      	add	r7, sp, #0
 801cf20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801cf28:	4618      	mov	r0, r3
 801cf2a:	f7fa fd89 	bl	8017a40 <USBD_LL_SOF>
}
 801cf2e:	bf00      	nop
 801cf30:	3708      	adds	r7, #8
 801cf32:	46bd      	mov	sp, r7
 801cf34:	bd80      	pop	{r7, pc}

0801cf36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cf36:	b580      	push	{r7, lr}
 801cf38:	b084      	sub	sp, #16
 801cf3a:	af00      	add	r7, sp, #0
 801cf3c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801cf3e:	2301      	movs	r3, #1
 801cf40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	68db      	ldr	r3, [r3, #12]
 801cf46:	2b02      	cmp	r3, #2
 801cf48:	d001      	beq.n	801cf4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801cf4a:	f7f2 ff63 	bl	800fe14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801cf54:	7bfa      	ldrb	r2, [r7, #15]
 801cf56:	4611      	mov	r1, r2
 801cf58:	4618      	mov	r0, r3
 801cf5a:	f7fa fd33 	bl	80179c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801cf64:	4618      	mov	r0, r3
 801cf66:	f7fa fcdf 	bl	8017928 <USBD_LL_Reset>
}
 801cf6a:	bf00      	nop
 801cf6c:	3710      	adds	r7, #16
 801cf6e:	46bd      	mov	sp, r7
 801cf70:	bd80      	pop	{r7, pc}
	...

0801cf74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cf74:	b580      	push	{r7, lr}
 801cf76:	b082      	sub	sp, #8
 801cf78:	af00      	add	r7, sp, #0
 801cf7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801cf7c:	687b      	ldr	r3, [r7, #4]
 801cf7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801cf82:	4618      	mov	r0, r3
 801cf84:	f7fa fd2e 	bl	80179e4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	681b      	ldr	r3, [r3, #0]
 801cf8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801cf90:	681b      	ldr	r3, [r3, #0]
 801cf92:	687a      	ldr	r2, [r7, #4]
 801cf94:	6812      	ldr	r2, [r2, #0]
 801cf96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801cf9a:	f043 0301 	orr.w	r3, r3, #1
 801cf9e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801cfa0:	687b      	ldr	r3, [r7, #4]
 801cfa2:	6a1b      	ldr	r3, [r3, #32]
 801cfa4:	2b00      	cmp	r3, #0
 801cfa6:	d005      	beq.n	801cfb4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801cfa8:	4b04      	ldr	r3, [pc, #16]	; (801cfbc <HAL_PCD_SuspendCallback+0x48>)
 801cfaa:	691b      	ldr	r3, [r3, #16]
 801cfac:	4a03      	ldr	r2, [pc, #12]	; (801cfbc <HAL_PCD_SuspendCallback+0x48>)
 801cfae:	f043 0306 	orr.w	r3, r3, #6
 801cfb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801cfb4:	bf00      	nop
 801cfb6:	3708      	adds	r7, #8
 801cfb8:	46bd      	mov	sp, r7
 801cfba:	bd80      	pop	{r7, pc}
 801cfbc:	e000ed00 	.word	0xe000ed00

0801cfc0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cfc0:	b580      	push	{r7, lr}
 801cfc2:	b082      	sub	sp, #8
 801cfc4:	af00      	add	r7, sp, #0
 801cfc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801cfc8:	687b      	ldr	r3, [r7, #4]
 801cfca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801cfce:	4618      	mov	r0, r3
 801cfd0:	f7fa fd1e 	bl	8017a10 <USBD_LL_Resume>
}
 801cfd4:	bf00      	nop
 801cfd6:	3708      	adds	r7, #8
 801cfd8:	46bd      	mov	sp, r7
 801cfda:	bd80      	pop	{r7, pc}

0801cfdc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cfdc:	b580      	push	{r7, lr}
 801cfde:	b082      	sub	sp, #8
 801cfe0:	af00      	add	r7, sp, #0
 801cfe2:	6078      	str	r0, [r7, #4]
 801cfe4:	460b      	mov	r3, r1
 801cfe6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801cfe8:	687b      	ldr	r3, [r7, #4]
 801cfea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801cfee:	78fa      	ldrb	r2, [r7, #3]
 801cff0:	4611      	mov	r1, r2
 801cff2:	4618      	mov	r0, r3
 801cff4:	f7fa fd6c 	bl	8017ad0 <USBD_LL_IsoOUTIncomplete>
}
 801cff8:	bf00      	nop
 801cffa:	3708      	adds	r7, #8
 801cffc:	46bd      	mov	sp, r7
 801cffe:	bd80      	pop	{r7, pc}

0801d000 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d000:	b580      	push	{r7, lr}
 801d002:	b082      	sub	sp, #8
 801d004:	af00      	add	r7, sp, #0
 801d006:	6078      	str	r0, [r7, #4]
 801d008:	460b      	mov	r3, r1
 801d00a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801d012:	78fa      	ldrb	r2, [r7, #3]
 801d014:	4611      	mov	r1, r2
 801d016:	4618      	mov	r0, r3
 801d018:	f7fa fd34 	bl	8017a84 <USBD_LL_IsoINIncomplete>
}
 801d01c:	bf00      	nop
 801d01e:	3708      	adds	r7, #8
 801d020:	46bd      	mov	sp, r7
 801d022:	bd80      	pop	{r7, pc}

0801d024 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d024:	b580      	push	{r7, lr}
 801d026:	b082      	sub	sp, #8
 801d028:	af00      	add	r7, sp, #0
 801d02a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801d02c:	687b      	ldr	r3, [r7, #4]
 801d02e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801d032:	4618      	mov	r0, r3
 801d034:	f7fa fd72 	bl	8017b1c <USBD_LL_DevConnected>
}
 801d038:	bf00      	nop
 801d03a:	3708      	adds	r7, #8
 801d03c:	46bd      	mov	sp, r7
 801d03e:	bd80      	pop	{r7, pc}

0801d040 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d040:	b580      	push	{r7, lr}
 801d042:	b082      	sub	sp, #8
 801d044:	af00      	add	r7, sp, #0
 801d046:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801d04e:	4618      	mov	r0, r3
 801d050:	f7fa fd6f 	bl	8017b32 <USBD_LL_DevDisconnected>
}
 801d054:	bf00      	nop
 801d056:	3708      	adds	r7, #8
 801d058:	46bd      	mov	sp, r7
 801d05a:	bd80      	pop	{r7, pc}

0801d05c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d05c:	b580      	push	{r7, lr}
 801d05e:	b082      	sub	sp, #8
 801d060:	af00      	add	r7, sp, #0
 801d062:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801d064:	687b      	ldr	r3, [r7, #4]
 801d066:	781b      	ldrb	r3, [r3, #0]
 801d068:	2b00      	cmp	r3, #0
 801d06a:	d13c      	bne.n	801d0e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801d06c:	4a20      	ldr	r2, [pc, #128]	; (801d0f0 <USBD_LL_Init+0x94>)
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	4a1e      	ldr	r2, [pc, #120]	; (801d0f0 <USBD_LL_Init+0x94>)
 801d078:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801d07c:	4b1c      	ldr	r3, [pc, #112]	; (801d0f0 <USBD_LL_Init+0x94>)
 801d07e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801d082:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801d084:	4b1a      	ldr	r3, [pc, #104]	; (801d0f0 <USBD_LL_Init+0x94>)
 801d086:	2204      	movs	r2, #4
 801d088:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801d08a:	4b19      	ldr	r3, [pc, #100]	; (801d0f0 <USBD_LL_Init+0x94>)
 801d08c:	2202      	movs	r2, #2
 801d08e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801d090:	4b17      	ldr	r3, [pc, #92]	; (801d0f0 <USBD_LL_Init+0x94>)
 801d092:	2200      	movs	r2, #0
 801d094:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d096:	4b16      	ldr	r3, [pc, #88]	; (801d0f0 <USBD_LL_Init+0x94>)
 801d098:	2202      	movs	r2, #2
 801d09a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801d09c:	4b14      	ldr	r3, [pc, #80]	; (801d0f0 <USBD_LL_Init+0x94>)
 801d09e:	2200      	movs	r2, #0
 801d0a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801d0a2:	4b13      	ldr	r3, [pc, #76]	; (801d0f0 <USBD_LL_Init+0x94>)
 801d0a4:	2200      	movs	r2, #0
 801d0a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801d0a8:	4b11      	ldr	r3, [pc, #68]	; (801d0f0 <USBD_LL_Init+0x94>)
 801d0aa:	2200      	movs	r2, #0
 801d0ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801d0ae:	4b10      	ldr	r3, [pc, #64]	; (801d0f0 <USBD_LL_Init+0x94>)
 801d0b0:	2200      	movs	r2, #0
 801d0b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801d0b4:	4b0e      	ldr	r3, [pc, #56]	; (801d0f0 <USBD_LL_Init+0x94>)
 801d0b6:	2200      	movs	r2, #0
 801d0b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801d0ba:	480d      	ldr	r0, [pc, #52]	; (801d0f0 <USBD_LL_Init+0x94>)
 801d0bc:	f7f4 fce4 	bl	8011a88 <HAL_PCD_Init>
 801d0c0:	4603      	mov	r3, r0
 801d0c2:	2b00      	cmp	r3, #0
 801d0c4:	d001      	beq.n	801d0ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801d0c6:	f7f2 fea5 	bl	800fe14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801d0ca:	2180      	movs	r1, #128	; 0x80
 801d0cc:	4808      	ldr	r0, [pc, #32]	; (801d0f0 <USBD_LL_Init+0x94>)
 801d0ce:	f7f5 fe9e 	bl	8012e0e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801d0d2:	2240      	movs	r2, #64	; 0x40
 801d0d4:	2100      	movs	r1, #0
 801d0d6:	4806      	ldr	r0, [pc, #24]	; (801d0f0 <USBD_LL_Init+0x94>)
 801d0d8:	f7f5 fe52 	bl	8012d80 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801d0dc:	2280      	movs	r2, #128	; 0x80
 801d0de:	2101      	movs	r1, #1
 801d0e0:	4803      	ldr	r0, [pc, #12]	; (801d0f0 <USBD_LL_Init+0x94>)
 801d0e2:	f7f5 fe4d 	bl	8012d80 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801d0e6:	2300      	movs	r3, #0
}
 801d0e8:	4618      	mov	r0, r3
 801d0ea:	3708      	adds	r7, #8
 801d0ec:	46bd      	mov	sp, r7
 801d0ee:	bd80      	pop	{r7, pc}
 801d0f0:	20008df4 	.word	0x20008df4

0801d0f4 <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 801d0f4:	b580      	push	{r7, lr}
 801d0f6:	b084      	sub	sp, #16
 801d0f8:	af00      	add	r7, sp, #0
 801d0fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d0fc:	2300      	movs	r3, #0
 801d0fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d100:	2300      	movs	r3, #0
 801d102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801d10a:	4618      	mov	r0, r3
 801d10c:	f7f4 fdd9 	bl	8011cc2 <HAL_PCD_DeInit>
 801d110:	4603      	mov	r3, r0
 801d112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d114:	7bfb      	ldrb	r3, [r7, #15]
 801d116:	4618      	mov	r0, r3
 801d118:	f000 f978 	bl	801d40c <USBD_Get_USB_Status>
 801d11c:	4603      	mov	r3, r0
 801d11e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d120:	7bbb      	ldrb	r3, [r7, #14]
}
 801d122:	4618      	mov	r0, r3
 801d124:	3710      	adds	r7, #16
 801d126:	46bd      	mov	sp, r7
 801d128:	bd80      	pop	{r7, pc}

0801d12a <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d12a:	b580      	push	{r7, lr}
 801d12c:	b084      	sub	sp, #16
 801d12e:	af00      	add	r7, sp, #0
 801d130:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d132:	2300      	movs	r3, #0
 801d134:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d136:	2300      	movs	r3, #0
 801d138:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801d140:	4618      	mov	r0, r3
 801d142:	f7f4 fde1 	bl	8011d08 <HAL_PCD_Start>
 801d146:	4603      	mov	r3, r0
 801d148:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d14a:	7bfb      	ldrb	r3, [r7, #15]
 801d14c:	4618      	mov	r0, r3
 801d14e:	f000 f95d 	bl	801d40c <USBD_Get_USB_Status>
 801d152:	4603      	mov	r3, r0
 801d154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d156:	7bbb      	ldrb	r3, [r7, #14]
}
 801d158:	4618      	mov	r0, r3
 801d15a:	3710      	adds	r7, #16
 801d15c:	46bd      	mov	sp, r7
 801d15e:	bd80      	pop	{r7, pc}

0801d160 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801d160:	b580      	push	{r7, lr}
 801d162:	b084      	sub	sp, #16
 801d164:	af00      	add	r7, sp, #0
 801d166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d168:	2300      	movs	r3, #0
 801d16a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d16c:	2300      	movs	r3, #0
 801d16e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801d170:	687b      	ldr	r3, [r7, #4]
 801d172:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801d176:	4618      	mov	r0, r3
 801d178:	f7f4 fdf9 	bl	8011d6e <HAL_PCD_Stop>
 801d17c:	4603      	mov	r3, r0
 801d17e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d180:	7bfb      	ldrb	r3, [r7, #15]
 801d182:	4618      	mov	r0, r3
 801d184:	f000 f942 	bl	801d40c <USBD_Get_USB_Status>
 801d188:	4603      	mov	r3, r0
 801d18a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d18c:	7bbb      	ldrb	r3, [r7, #14]
}
 801d18e:	4618      	mov	r0, r3
 801d190:	3710      	adds	r7, #16
 801d192:	46bd      	mov	sp, r7
 801d194:	bd80      	pop	{r7, pc}

0801d196 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d196:	b580      	push	{r7, lr}
 801d198:	b084      	sub	sp, #16
 801d19a:	af00      	add	r7, sp, #0
 801d19c:	6078      	str	r0, [r7, #4]
 801d19e:	4608      	mov	r0, r1
 801d1a0:	4611      	mov	r1, r2
 801d1a2:	461a      	mov	r2, r3
 801d1a4:	4603      	mov	r3, r0
 801d1a6:	70fb      	strb	r3, [r7, #3]
 801d1a8:	460b      	mov	r3, r1
 801d1aa:	70bb      	strb	r3, [r7, #2]
 801d1ac:	4613      	mov	r3, r2
 801d1ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d1b0:	2300      	movs	r3, #0
 801d1b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d1b4:	2300      	movs	r3, #0
 801d1b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801d1be:	78bb      	ldrb	r3, [r7, #2]
 801d1c0:	883a      	ldrh	r2, [r7, #0]
 801d1c2:	78f9      	ldrb	r1, [r7, #3]
 801d1c4:	f7f5 f9e3 	bl	801258e <HAL_PCD_EP_Open>
 801d1c8:	4603      	mov	r3, r0
 801d1ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d1cc:	7bfb      	ldrb	r3, [r7, #15]
 801d1ce:	4618      	mov	r0, r3
 801d1d0:	f000 f91c 	bl	801d40c <USBD_Get_USB_Status>
 801d1d4:	4603      	mov	r3, r0
 801d1d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d1d8:	7bbb      	ldrb	r3, [r7, #14]
}
 801d1da:	4618      	mov	r0, r3
 801d1dc:	3710      	adds	r7, #16
 801d1de:	46bd      	mov	sp, r7
 801d1e0:	bd80      	pop	{r7, pc}

0801d1e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d1e2:	b580      	push	{r7, lr}
 801d1e4:	b084      	sub	sp, #16
 801d1e6:	af00      	add	r7, sp, #0
 801d1e8:	6078      	str	r0, [r7, #4]
 801d1ea:	460b      	mov	r3, r1
 801d1ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d1ee:	2300      	movs	r3, #0
 801d1f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d1f2:	2300      	movs	r3, #0
 801d1f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d1f6:	687b      	ldr	r3, [r7, #4]
 801d1f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801d1fc:	78fa      	ldrb	r2, [r7, #3]
 801d1fe:	4611      	mov	r1, r2
 801d200:	4618      	mov	r0, r3
 801d202:	f7f5 fa2c 	bl	801265e <HAL_PCD_EP_Close>
 801d206:	4603      	mov	r3, r0
 801d208:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d20a:	7bfb      	ldrb	r3, [r7, #15]
 801d20c:	4618      	mov	r0, r3
 801d20e:	f000 f8fd 	bl	801d40c <USBD_Get_USB_Status>
 801d212:	4603      	mov	r3, r0
 801d214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d216:	7bbb      	ldrb	r3, [r7, #14]
}
 801d218:	4618      	mov	r0, r3
 801d21a:	3710      	adds	r7, #16
 801d21c:	46bd      	mov	sp, r7
 801d21e:	bd80      	pop	{r7, pc}

0801d220 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d220:	b580      	push	{r7, lr}
 801d222:	b084      	sub	sp, #16
 801d224:	af00      	add	r7, sp, #0
 801d226:	6078      	str	r0, [r7, #4]
 801d228:	460b      	mov	r3, r1
 801d22a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d22c:	2300      	movs	r3, #0
 801d22e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d230:	2300      	movs	r3, #0
 801d232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801d23a:	78fa      	ldrb	r2, [r7, #3]
 801d23c:	4611      	mov	r1, r2
 801d23e:	4618      	mov	r0, r3
 801d240:	f7f5 fb04 	bl	801284c <HAL_PCD_EP_SetStall>
 801d244:	4603      	mov	r3, r0
 801d246:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d248:	7bfb      	ldrb	r3, [r7, #15]
 801d24a:	4618      	mov	r0, r3
 801d24c:	f000 f8de 	bl	801d40c <USBD_Get_USB_Status>
 801d250:	4603      	mov	r3, r0
 801d252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d254:	7bbb      	ldrb	r3, [r7, #14]
}
 801d256:	4618      	mov	r0, r3
 801d258:	3710      	adds	r7, #16
 801d25a:	46bd      	mov	sp, r7
 801d25c:	bd80      	pop	{r7, pc}

0801d25e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d25e:	b580      	push	{r7, lr}
 801d260:	b084      	sub	sp, #16
 801d262:	af00      	add	r7, sp, #0
 801d264:	6078      	str	r0, [r7, #4]
 801d266:	460b      	mov	r3, r1
 801d268:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d26a:	2300      	movs	r3, #0
 801d26c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d26e:	2300      	movs	r3, #0
 801d270:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801d278:	78fa      	ldrb	r2, [r7, #3]
 801d27a:	4611      	mov	r1, r2
 801d27c:	4618      	mov	r0, r3
 801d27e:	f7f5 fb49 	bl	8012914 <HAL_PCD_EP_ClrStall>
 801d282:	4603      	mov	r3, r0
 801d284:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d286:	7bfb      	ldrb	r3, [r7, #15]
 801d288:	4618      	mov	r0, r3
 801d28a:	f000 f8bf 	bl	801d40c <USBD_Get_USB_Status>
 801d28e:	4603      	mov	r3, r0
 801d290:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d292:	7bbb      	ldrb	r3, [r7, #14]
}
 801d294:	4618      	mov	r0, r3
 801d296:	3710      	adds	r7, #16
 801d298:	46bd      	mov	sp, r7
 801d29a:	bd80      	pop	{r7, pc}

0801d29c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d29c:	b480      	push	{r7}
 801d29e:	b085      	sub	sp, #20
 801d2a0:	af00      	add	r7, sp, #0
 801d2a2:	6078      	str	r0, [r7, #4]
 801d2a4:	460b      	mov	r3, r1
 801d2a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801d2ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d2b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d2b4:	2b00      	cmp	r3, #0
 801d2b6:	da0b      	bge.n	801d2d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d2b8:	78fb      	ldrb	r3, [r7, #3]
 801d2ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801d2be:	68f9      	ldr	r1, [r7, #12]
 801d2c0:	4613      	mov	r3, r2
 801d2c2:	00db      	lsls	r3, r3, #3
 801d2c4:	1a9b      	subs	r3, r3, r2
 801d2c6:	009b      	lsls	r3, r3, #2
 801d2c8:	440b      	add	r3, r1
 801d2ca:	333e      	adds	r3, #62	; 0x3e
 801d2cc:	781b      	ldrb	r3, [r3, #0]
 801d2ce:	e00b      	b.n	801d2e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d2d0:	78fb      	ldrb	r3, [r7, #3]
 801d2d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801d2d6:	68f9      	ldr	r1, [r7, #12]
 801d2d8:	4613      	mov	r3, r2
 801d2da:	00db      	lsls	r3, r3, #3
 801d2dc:	1a9b      	subs	r3, r3, r2
 801d2de:	009b      	lsls	r3, r3, #2
 801d2e0:	440b      	add	r3, r1
 801d2e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801d2e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d2e8:	4618      	mov	r0, r3
 801d2ea:	3714      	adds	r7, #20
 801d2ec:	46bd      	mov	sp, r7
 801d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2f2:	4770      	bx	lr

0801d2f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d2f4:	b580      	push	{r7, lr}
 801d2f6:	b084      	sub	sp, #16
 801d2f8:	af00      	add	r7, sp, #0
 801d2fa:	6078      	str	r0, [r7, #4]
 801d2fc:	460b      	mov	r3, r1
 801d2fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d300:	2300      	movs	r3, #0
 801d302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d304:	2300      	movs	r3, #0
 801d306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d308:	687b      	ldr	r3, [r7, #4]
 801d30a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801d30e:	78fa      	ldrb	r2, [r7, #3]
 801d310:	4611      	mov	r1, r2
 801d312:	4618      	mov	r0, r3
 801d314:	f7f5 f916 	bl	8012544 <HAL_PCD_SetAddress>
 801d318:	4603      	mov	r3, r0
 801d31a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d31c:	7bfb      	ldrb	r3, [r7, #15]
 801d31e:	4618      	mov	r0, r3
 801d320:	f000 f874 	bl	801d40c <USBD_Get_USB_Status>
 801d324:	4603      	mov	r3, r0
 801d326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d328:	7bbb      	ldrb	r3, [r7, #14]
}
 801d32a:	4618      	mov	r0, r3
 801d32c:	3710      	adds	r7, #16
 801d32e:	46bd      	mov	sp, r7
 801d330:	bd80      	pop	{r7, pc}

0801d332 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d332:	b580      	push	{r7, lr}
 801d334:	b086      	sub	sp, #24
 801d336:	af00      	add	r7, sp, #0
 801d338:	60f8      	str	r0, [r7, #12]
 801d33a:	607a      	str	r2, [r7, #4]
 801d33c:	603b      	str	r3, [r7, #0]
 801d33e:	460b      	mov	r3, r1
 801d340:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d342:	2300      	movs	r3, #0
 801d344:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d346:	2300      	movs	r3, #0
 801d348:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d34a:	68fb      	ldr	r3, [r7, #12]
 801d34c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801d350:	7af9      	ldrb	r1, [r7, #11]
 801d352:	683b      	ldr	r3, [r7, #0]
 801d354:	687a      	ldr	r2, [r7, #4]
 801d356:	f7f5 fa2f 	bl	80127b8 <HAL_PCD_EP_Transmit>
 801d35a:	4603      	mov	r3, r0
 801d35c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d35e:	7dfb      	ldrb	r3, [r7, #23]
 801d360:	4618      	mov	r0, r3
 801d362:	f000 f853 	bl	801d40c <USBD_Get_USB_Status>
 801d366:	4603      	mov	r3, r0
 801d368:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d36a:	7dbb      	ldrb	r3, [r7, #22]
}
 801d36c:	4618      	mov	r0, r3
 801d36e:	3718      	adds	r7, #24
 801d370:	46bd      	mov	sp, r7
 801d372:	bd80      	pop	{r7, pc}

0801d374 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d374:	b580      	push	{r7, lr}
 801d376:	b086      	sub	sp, #24
 801d378:	af00      	add	r7, sp, #0
 801d37a:	60f8      	str	r0, [r7, #12]
 801d37c:	607a      	str	r2, [r7, #4]
 801d37e:	603b      	str	r3, [r7, #0]
 801d380:	460b      	mov	r3, r1
 801d382:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d384:	2300      	movs	r3, #0
 801d386:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d388:	2300      	movs	r3, #0
 801d38a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d38c:	68fb      	ldr	r3, [r7, #12]
 801d38e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801d392:	7af9      	ldrb	r1, [r7, #11]
 801d394:	683b      	ldr	r3, [r7, #0]
 801d396:	687a      	ldr	r2, [r7, #4]
 801d398:	f7f5 f9ab 	bl	80126f2 <HAL_PCD_EP_Receive>
 801d39c:	4603      	mov	r3, r0
 801d39e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d3a0:	7dfb      	ldrb	r3, [r7, #23]
 801d3a2:	4618      	mov	r0, r3
 801d3a4:	f000 f832 	bl	801d40c <USBD_Get_USB_Status>
 801d3a8:	4603      	mov	r3, r0
 801d3aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d3ac:	7dbb      	ldrb	r3, [r7, #22]
}
 801d3ae:	4618      	mov	r0, r3
 801d3b0:	3718      	adds	r7, #24
 801d3b2:	46bd      	mov	sp, r7
 801d3b4:	bd80      	pop	{r7, pc}

0801d3b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d3b6:	b580      	push	{r7, lr}
 801d3b8:	b082      	sub	sp, #8
 801d3ba:	af00      	add	r7, sp, #0
 801d3bc:	6078      	str	r0, [r7, #4]
 801d3be:	460b      	mov	r3, r1
 801d3c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d3c2:	687b      	ldr	r3, [r7, #4]
 801d3c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801d3c8:	78fa      	ldrb	r2, [r7, #3]
 801d3ca:	4611      	mov	r1, r2
 801d3cc:	4618      	mov	r0, r3
 801d3ce:	f7f5 f9db 	bl	8012788 <HAL_PCD_EP_GetRxCount>
 801d3d2:	4603      	mov	r3, r0
}
 801d3d4:	4618      	mov	r0, r3
 801d3d6:	3708      	adds	r7, #8
 801d3d8:	46bd      	mov	sp, r7
 801d3da:	bd80      	pop	{r7, pc}

0801d3dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d3dc:	b480      	push	{r7}
 801d3de:	b083      	sub	sp, #12
 801d3e0:	af00      	add	r7, sp, #0
 801d3e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d3e4:	4b03      	ldr	r3, [pc, #12]	; (801d3f4 <USBD_static_malloc+0x18>)
}
 801d3e6:	4618      	mov	r0, r3
 801d3e8:	370c      	adds	r7, #12
 801d3ea:	46bd      	mov	sp, r7
 801d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3f0:	4770      	bx	lr
 801d3f2:	bf00      	nop
 801d3f4:	20004ee0 	.word	0x20004ee0

0801d3f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d3f8:	b480      	push	{r7}
 801d3fa:	b083      	sub	sp, #12
 801d3fc:	af00      	add	r7, sp, #0
 801d3fe:	6078      	str	r0, [r7, #4]

}
 801d400:	bf00      	nop
 801d402:	370c      	adds	r7, #12
 801d404:	46bd      	mov	sp, r7
 801d406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d40a:	4770      	bx	lr

0801d40c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d40c:	b480      	push	{r7}
 801d40e:	b085      	sub	sp, #20
 801d410:	af00      	add	r7, sp, #0
 801d412:	4603      	mov	r3, r0
 801d414:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d416:	2300      	movs	r3, #0
 801d418:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801d41a:	79fb      	ldrb	r3, [r7, #7]
 801d41c:	2b03      	cmp	r3, #3
 801d41e:	d817      	bhi.n	801d450 <USBD_Get_USB_Status+0x44>
 801d420:	a201      	add	r2, pc, #4	; (adr r2, 801d428 <USBD_Get_USB_Status+0x1c>)
 801d422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d426:	bf00      	nop
 801d428:	0801d439 	.word	0x0801d439
 801d42c:	0801d43f 	.word	0x0801d43f
 801d430:	0801d445 	.word	0x0801d445
 801d434:	0801d44b 	.word	0x0801d44b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d438:	2300      	movs	r3, #0
 801d43a:	73fb      	strb	r3, [r7, #15]
    break;
 801d43c:	e00b      	b.n	801d456 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d43e:	2303      	movs	r3, #3
 801d440:	73fb      	strb	r3, [r7, #15]
    break;
 801d442:	e008      	b.n	801d456 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d444:	2301      	movs	r3, #1
 801d446:	73fb      	strb	r3, [r7, #15]
    break;
 801d448:	e005      	b.n	801d456 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d44a:	2303      	movs	r3, #3
 801d44c:	73fb      	strb	r3, [r7, #15]
    break;
 801d44e:	e002      	b.n	801d456 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801d450:	2303      	movs	r3, #3
 801d452:	73fb      	strb	r3, [r7, #15]
    break;
 801d454:	bf00      	nop
  }
  return usb_status;
 801d456:	7bfb      	ldrb	r3, [r7, #15]
}
 801d458:	4618      	mov	r0, r3
 801d45a:	3714      	adds	r7, #20
 801d45c:	46bd      	mov	sp, r7
 801d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d462:	4770      	bx	lr

0801d464 <atoi>:
 801d464:	220a      	movs	r2, #10
 801d466:	2100      	movs	r1, #0
 801d468:	f000 b980 	b.w	801d76c <strtol>

0801d46c <__errno>:
 801d46c:	4b01      	ldr	r3, [pc, #4]	; (801d474 <__errno+0x8>)
 801d46e:	6818      	ldr	r0, [r3, #0]
 801d470:	4770      	bx	lr
 801d472:	bf00      	nop
 801d474:	200001d4 	.word	0x200001d4

0801d478 <__libc_init_array>:
 801d478:	b570      	push	{r4, r5, r6, lr}
 801d47a:	4d0d      	ldr	r5, [pc, #52]	; (801d4b0 <__libc_init_array+0x38>)
 801d47c:	4c0d      	ldr	r4, [pc, #52]	; (801d4b4 <__libc_init_array+0x3c>)
 801d47e:	1b64      	subs	r4, r4, r5
 801d480:	10a4      	asrs	r4, r4, #2
 801d482:	2600      	movs	r6, #0
 801d484:	42a6      	cmp	r6, r4
 801d486:	d109      	bne.n	801d49c <__libc_init_array+0x24>
 801d488:	4d0b      	ldr	r5, [pc, #44]	; (801d4b8 <__libc_init_array+0x40>)
 801d48a:	4c0c      	ldr	r4, [pc, #48]	; (801d4bc <__libc_init_array+0x44>)
 801d48c:	f000 fe38 	bl	801e100 <_init>
 801d490:	1b64      	subs	r4, r4, r5
 801d492:	10a4      	asrs	r4, r4, #2
 801d494:	2600      	movs	r6, #0
 801d496:	42a6      	cmp	r6, r4
 801d498:	d105      	bne.n	801d4a6 <__libc_init_array+0x2e>
 801d49a:	bd70      	pop	{r4, r5, r6, pc}
 801d49c:	f855 3b04 	ldr.w	r3, [r5], #4
 801d4a0:	4798      	blx	r3
 801d4a2:	3601      	adds	r6, #1
 801d4a4:	e7ee      	b.n	801d484 <__libc_init_array+0xc>
 801d4a6:	f855 3b04 	ldr.w	r3, [r5], #4
 801d4aa:	4798      	blx	r3
 801d4ac:	3601      	adds	r6, #1
 801d4ae:	e7f2      	b.n	801d496 <__libc_init_array+0x1e>
 801d4b0:	0801edb8 	.word	0x0801edb8
 801d4b4:	0801edb8 	.word	0x0801edb8
 801d4b8:	0801edb8 	.word	0x0801edb8
 801d4bc:	0801edbc 	.word	0x0801edbc

0801d4c0 <memcpy>:
 801d4c0:	440a      	add	r2, r1
 801d4c2:	4291      	cmp	r1, r2
 801d4c4:	f100 33ff 	add.w	r3, r0, #4294967295
 801d4c8:	d100      	bne.n	801d4cc <memcpy+0xc>
 801d4ca:	4770      	bx	lr
 801d4cc:	b510      	push	{r4, lr}
 801d4ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d4d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d4d6:	4291      	cmp	r1, r2
 801d4d8:	d1f9      	bne.n	801d4ce <memcpy+0xe>
 801d4da:	bd10      	pop	{r4, pc}

0801d4dc <memset>:
 801d4dc:	4402      	add	r2, r0
 801d4de:	4603      	mov	r3, r0
 801d4e0:	4293      	cmp	r3, r2
 801d4e2:	d100      	bne.n	801d4e6 <memset+0xa>
 801d4e4:	4770      	bx	lr
 801d4e6:	f803 1b01 	strb.w	r1, [r3], #1
 801d4ea:	e7f9      	b.n	801d4e0 <memset+0x4>

0801d4ec <sniprintf>:
 801d4ec:	b40c      	push	{r2, r3}
 801d4ee:	b530      	push	{r4, r5, lr}
 801d4f0:	4b17      	ldr	r3, [pc, #92]	; (801d550 <sniprintf+0x64>)
 801d4f2:	1e0c      	subs	r4, r1, #0
 801d4f4:	681d      	ldr	r5, [r3, #0]
 801d4f6:	b09d      	sub	sp, #116	; 0x74
 801d4f8:	da08      	bge.n	801d50c <sniprintf+0x20>
 801d4fa:	238b      	movs	r3, #139	; 0x8b
 801d4fc:	602b      	str	r3, [r5, #0]
 801d4fe:	f04f 30ff 	mov.w	r0, #4294967295
 801d502:	b01d      	add	sp, #116	; 0x74
 801d504:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d508:	b002      	add	sp, #8
 801d50a:	4770      	bx	lr
 801d50c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801d510:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d514:	bf14      	ite	ne
 801d516:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d51a:	4623      	moveq	r3, r4
 801d51c:	9304      	str	r3, [sp, #16]
 801d51e:	9307      	str	r3, [sp, #28]
 801d520:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d524:	9002      	str	r0, [sp, #8]
 801d526:	9006      	str	r0, [sp, #24]
 801d528:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d52c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d52e:	ab21      	add	r3, sp, #132	; 0x84
 801d530:	a902      	add	r1, sp, #8
 801d532:	4628      	mov	r0, r5
 801d534:	9301      	str	r3, [sp, #4]
 801d536:	f000 fa3f 	bl	801d9b8 <_svfiprintf_r>
 801d53a:	1c43      	adds	r3, r0, #1
 801d53c:	bfbc      	itt	lt
 801d53e:	238b      	movlt	r3, #139	; 0x8b
 801d540:	602b      	strlt	r3, [r5, #0]
 801d542:	2c00      	cmp	r4, #0
 801d544:	d0dd      	beq.n	801d502 <sniprintf+0x16>
 801d546:	9b02      	ldr	r3, [sp, #8]
 801d548:	2200      	movs	r2, #0
 801d54a:	701a      	strb	r2, [r3, #0]
 801d54c:	e7d9      	b.n	801d502 <sniprintf+0x16>
 801d54e:	bf00      	nop
 801d550:	200001d4 	.word	0x200001d4

0801d554 <strcasecmp>:
 801d554:	b570      	push	{r4, r5, r6, lr}
 801d556:	4d0c      	ldr	r5, [pc, #48]	; (801d588 <strcasecmp+0x34>)
 801d558:	4604      	mov	r4, r0
 801d55a:	462e      	mov	r6, r5
 801d55c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d560:	5d5a      	ldrb	r2, [r3, r5]
 801d562:	f002 0203 	and.w	r2, r2, #3
 801d566:	2a01      	cmp	r2, #1
 801d568:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d56c:	5cb0      	ldrb	r0, [r6, r2]
 801d56e:	f000 0003 	and.w	r0, r0, #3
 801d572:	bf08      	it	eq
 801d574:	3320      	addeq	r3, #32
 801d576:	2801      	cmp	r0, #1
 801d578:	bf08      	it	eq
 801d57a:	3220      	addeq	r2, #32
 801d57c:	1a98      	subs	r0, r3, r2
 801d57e:	d101      	bne.n	801d584 <strcasecmp+0x30>
 801d580:	2a00      	cmp	r2, #0
 801d582:	d1eb      	bne.n	801d55c <strcasecmp+0x8>
 801d584:	bd70      	pop	{r4, r5, r6, pc}
 801d586:	bf00      	nop
 801d588:	0801ec7c 	.word	0x0801ec7c

0801d58c <strchr>:
 801d58c:	b2c9      	uxtb	r1, r1
 801d58e:	4603      	mov	r3, r0
 801d590:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d594:	b11a      	cbz	r2, 801d59e <strchr+0x12>
 801d596:	428a      	cmp	r2, r1
 801d598:	d1f9      	bne.n	801d58e <strchr+0x2>
 801d59a:	4618      	mov	r0, r3
 801d59c:	4770      	bx	lr
 801d59e:	2900      	cmp	r1, #0
 801d5a0:	bf18      	it	ne
 801d5a2:	2300      	movne	r3, #0
 801d5a4:	e7f9      	b.n	801d59a <strchr+0xe>
	...

0801d5a8 <strncasecmp>:
 801d5a8:	b570      	push	{r4, r5, r6, lr}
 801d5aa:	4e0f      	ldr	r6, [pc, #60]	; (801d5e8 <strncasecmp+0x40>)
 801d5ac:	4604      	mov	r4, r0
 801d5ae:	440a      	add	r2, r1
 801d5b0:	428a      	cmp	r2, r1
 801d5b2:	d101      	bne.n	801d5b8 <strncasecmp+0x10>
 801d5b4:	2000      	movs	r0, #0
 801d5b6:	e013      	b.n	801d5e0 <strncasecmp+0x38>
 801d5b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d5bc:	5d98      	ldrb	r0, [r3, r6]
 801d5be:	f000 0003 	and.w	r0, r0, #3
 801d5c2:	2801      	cmp	r0, #1
 801d5c4:	f811 0b01 	ldrb.w	r0, [r1], #1
 801d5c8:	5c35      	ldrb	r5, [r6, r0]
 801d5ca:	f005 0503 	and.w	r5, r5, #3
 801d5ce:	bf08      	it	eq
 801d5d0:	3320      	addeq	r3, #32
 801d5d2:	2d01      	cmp	r5, #1
 801d5d4:	bf08      	it	eq
 801d5d6:	3020      	addeq	r0, #32
 801d5d8:	1a1b      	subs	r3, r3, r0
 801d5da:	d102      	bne.n	801d5e2 <strncasecmp+0x3a>
 801d5dc:	2800      	cmp	r0, #0
 801d5de:	d1e7      	bne.n	801d5b0 <strncasecmp+0x8>
 801d5e0:	bd70      	pop	{r4, r5, r6, pc}
 801d5e2:	4618      	mov	r0, r3
 801d5e4:	e7fc      	b.n	801d5e0 <strncasecmp+0x38>
 801d5e6:	bf00      	nop
 801d5e8:	0801ec7c 	.word	0x0801ec7c

0801d5ec <strncmp>:
 801d5ec:	b510      	push	{r4, lr}
 801d5ee:	b16a      	cbz	r2, 801d60c <strncmp+0x20>
 801d5f0:	3901      	subs	r1, #1
 801d5f2:	1884      	adds	r4, r0, r2
 801d5f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 801d5f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d5fc:	4293      	cmp	r3, r2
 801d5fe:	d103      	bne.n	801d608 <strncmp+0x1c>
 801d600:	42a0      	cmp	r0, r4
 801d602:	d001      	beq.n	801d608 <strncmp+0x1c>
 801d604:	2b00      	cmp	r3, #0
 801d606:	d1f5      	bne.n	801d5f4 <strncmp+0x8>
 801d608:	1a98      	subs	r0, r3, r2
 801d60a:	bd10      	pop	{r4, pc}
 801d60c:	4610      	mov	r0, r2
 801d60e:	e7fc      	b.n	801d60a <strncmp+0x1e>

0801d610 <strncpy>:
 801d610:	b510      	push	{r4, lr}
 801d612:	3901      	subs	r1, #1
 801d614:	4603      	mov	r3, r0
 801d616:	b132      	cbz	r2, 801d626 <strncpy+0x16>
 801d618:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d61c:	f803 4b01 	strb.w	r4, [r3], #1
 801d620:	3a01      	subs	r2, #1
 801d622:	2c00      	cmp	r4, #0
 801d624:	d1f7      	bne.n	801d616 <strncpy+0x6>
 801d626:	441a      	add	r2, r3
 801d628:	2100      	movs	r1, #0
 801d62a:	4293      	cmp	r3, r2
 801d62c:	d100      	bne.n	801d630 <strncpy+0x20>
 801d62e:	bd10      	pop	{r4, pc}
 801d630:	f803 1b01 	strb.w	r1, [r3], #1
 801d634:	e7f9      	b.n	801d62a <strncpy+0x1a>

0801d636 <strstr>:
 801d636:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d638:	780c      	ldrb	r4, [r1, #0]
 801d63a:	b164      	cbz	r4, 801d656 <strstr+0x20>
 801d63c:	4603      	mov	r3, r0
 801d63e:	781a      	ldrb	r2, [r3, #0]
 801d640:	4618      	mov	r0, r3
 801d642:	1c5e      	adds	r6, r3, #1
 801d644:	b90a      	cbnz	r2, 801d64a <strstr+0x14>
 801d646:	4610      	mov	r0, r2
 801d648:	e005      	b.n	801d656 <strstr+0x20>
 801d64a:	4294      	cmp	r4, r2
 801d64c:	d108      	bne.n	801d660 <strstr+0x2a>
 801d64e:	460d      	mov	r5, r1
 801d650:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801d654:	b902      	cbnz	r2, 801d658 <strstr+0x22>
 801d656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d658:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801d65c:	4297      	cmp	r7, r2
 801d65e:	d0f7      	beq.n	801d650 <strstr+0x1a>
 801d660:	4633      	mov	r3, r6
 801d662:	e7ec      	b.n	801d63e <strstr+0x8>

0801d664 <_strtol_l.isra.0>:
 801d664:	2b01      	cmp	r3, #1
 801d666:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d66a:	d001      	beq.n	801d670 <_strtol_l.isra.0+0xc>
 801d66c:	2b24      	cmp	r3, #36	; 0x24
 801d66e:	d906      	bls.n	801d67e <_strtol_l.isra.0+0x1a>
 801d670:	f7ff fefc 	bl	801d46c <__errno>
 801d674:	2316      	movs	r3, #22
 801d676:	6003      	str	r3, [r0, #0]
 801d678:	2000      	movs	r0, #0
 801d67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d67e:	4f3a      	ldr	r7, [pc, #232]	; (801d768 <_strtol_l.isra.0+0x104>)
 801d680:	468e      	mov	lr, r1
 801d682:	4676      	mov	r6, lr
 801d684:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801d688:	5de5      	ldrb	r5, [r4, r7]
 801d68a:	f015 0508 	ands.w	r5, r5, #8
 801d68e:	d1f8      	bne.n	801d682 <_strtol_l.isra.0+0x1e>
 801d690:	2c2d      	cmp	r4, #45	; 0x2d
 801d692:	d134      	bne.n	801d6fe <_strtol_l.isra.0+0x9a>
 801d694:	f89e 4000 	ldrb.w	r4, [lr]
 801d698:	f04f 0801 	mov.w	r8, #1
 801d69c:	f106 0e02 	add.w	lr, r6, #2
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	d05c      	beq.n	801d75e <_strtol_l.isra.0+0xfa>
 801d6a4:	2b10      	cmp	r3, #16
 801d6a6:	d10c      	bne.n	801d6c2 <_strtol_l.isra.0+0x5e>
 801d6a8:	2c30      	cmp	r4, #48	; 0x30
 801d6aa:	d10a      	bne.n	801d6c2 <_strtol_l.isra.0+0x5e>
 801d6ac:	f89e 4000 	ldrb.w	r4, [lr]
 801d6b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801d6b4:	2c58      	cmp	r4, #88	; 0x58
 801d6b6:	d14d      	bne.n	801d754 <_strtol_l.isra.0+0xf0>
 801d6b8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801d6bc:	2310      	movs	r3, #16
 801d6be:	f10e 0e02 	add.w	lr, lr, #2
 801d6c2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801d6c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d6ca:	2600      	movs	r6, #0
 801d6cc:	fbbc f9f3 	udiv	r9, ip, r3
 801d6d0:	4635      	mov	r5, r6
 801d6d2:	fb03 ca19 	mls	sl, r3, r9, ip
 801d6d6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801d6da:	2f09      	cmp	r7, #9
 801d6dc:	d818      	bhi.n	801d710 <_strtol_l.isra.0+0xac>
 801d6de:	463c      	mov	r4, r7
 801d6e0:	42a3      	cmp	r3, r4
 801d6e2:	dd24      	ble.n	801d72e <_strtol_l.isra.0+0xca>
 801d6e4:	2e00      	cmp	r6, #0
 801d6e6:	db1f      	blt.n	801d728 <_strtol_l.isra.0+0xc4>
 801d6e8:	45a9      	cmp	r9, r5
 801d6ea:	d31d      	bcc.n	801d728 <_strtol_l.isra.0+0xc4>
 801d6ec:	d101      	bne.n	801d6f2 <_strtol_l.isra.0+0x8e>
 801d6ee:	45a2      	cmp	sl, r4
 801d6f0:	db1a      	blt.n	801d728 <_strtol_l.isra.0+0xc4>
 801d6f2:	fb05 4503 	mla	r5, r5, r3, r4
 801d6f6:	2601      	movs	r6, #1
 801d6f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801d6fc:	e7eb      	b.n	801d6d6 <_strtol_l.isra.0+0x72>
 801d6fe:	2c2b      	cmp	r4, #43	; 0x2b
 801d700:	bf08      	it	eq
 801d702:	f89e 4000 	ldrbeq.w	r4, [lr]
 801d706:	46a8      	mov	r8, r5
 801d708:	bf08      	it	eq
 801d70a:	f106 0e02 	addeq.w	lr, r6, #2
 801d70e:	e7c7      	b.n	801d6a0 <_strtol_l.isra.0+0x3c>
 801d710:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801d714:	2f19      	cmp	r7, #25
 801d716:	d801      	bhi.n	801d71c <_strtol_l.isra.0+0xb8>
 801d718:	3c37      	subs	r4, #55	; 0x37
 801d71a:	e7e1      	b.n	801d6e0 <_strtol_l.isra.0+0x7c>
 801d71c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801d720:	2f19      	cmp	r7, #25
 801d722:	d804      	bhi.n	801d72e <_strtol_l.isra.0+0xca>
 801d724:	3c57      	subs	r4, #87	; 0x57
 801d726:	e7db      	b.n	801d6e0 <_strtol_l.isra.0+0x7c>
 801d728:	f04f 36ff 	mov.w	r6, #4294967295
 801d72c:	e7e4      	b.n	801d6f8 <_strtol_l.isra.0+0x94>
 801d72e:	2e00      	cmp	r6, #0
 801d730:	da05      	bge.n	801d73e <_strtol_l.isra.0+0xda>
 801d732:	2322      	movs	r3, #34	; 0x22
 801d734:	6003      	str	r3, [r0, #0]
 801d736:	4665      	mov	r5, ip
 801d738:	b942      	cbnz	r2, 801d74c <_strtol_l.isra.0+0xe8>
 801d73a:	4628      	mov	r0, r5
 801d73c:	e79d      	b.n	801d67a <_strtol_l.isra.0+0x16>
 801d73e:	f1b8 0f00 	cmp.w	r8, #0
 801d742:	d000      	beq.n	801d746 <_strtol_l.isra.0+0xe2>
 801d744:	426d      	negs	r5, r5
 801d746:	2a00      	cmp	r2, #0
 801d748:	d0f7      	beq.n	801d73a <_strtol_l.isra.0+0xd6>
 801d74a:	b10e      	cbz	r6, 801d750 <_strtol_l.isra.0+0xec>
 801d74c:	f10e 31ff 	add.w	r1, lr, #4294967295
 801d750:	6011      	str	r1, [r2, #0]
 801d752:	e7f2      	b.n	801d73a <_strtol_l.isra.0+0xd6>
 801d754:	2430      	movs	r4, #48	; 0x30
 801d756:	2b00      	cmp	r3, #0
 801d758:	d1b3      	bne.n	801d6c2 <_strtol_l.isra.0+0x5e>
 801d75a:	2308      	movs	r3, #8
 801d75c:	e7b1      	b.n	801d6c2 <_strtol_l.isra.0+0x5e>
 801d75e:	2c30      	cmp	r4, #48	; 0x30
 801d760:	d0a4      	beq.n	801d6ac <_strtol_l.isra.0+0x48>
 801d762:	230a      	movs	r3, #10
 801d764:	e7ad      	b.n	801d6c2 <_strtol_l.isra.0+0x5e>
 801d766:	bf00      	nop
 801d768:	0801ec7c 	.word	0x0801ec7c

0801d76c <strtol>:
 801d76c:	4613      	mov	r3, r2
 801d76e:	460a      	mov	r2, r1
 801d770:	4601      	mov	r1, r0
 801d772:	4802      	ldr	r0, [pc, #8]	; (801d77c <strtol+0x10>)
 801d774:	6800      	ldr	r0, [r0, #0]
 801d776:	f7ff bf75 	b.w	801d664 <_strtol_l.isra.0>
 801d77a:	bf00      	nop
 801d77c:	200001d4 	.word	0x200001d4

0801d780 <_strtoul_l.isra.0>:
 801d780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d784:	4e3b      	ldr	r6, [pc, #236]	; (801d874 <_strtoul_l.isra.0+0xf4>)
 801d786:	4686      	mov	lr, r0
 801d788:	468c      	mov	ip, r1
 801d78a:	4660      	mov	r0, ip
 801d78c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801d790:	5da5      	ldrb	r5, [r4, r6]
 801d792:	f015 0508 	ands.w	r5, r5, #8
 801d796:	d1f8      	bne.n	801d78a <_strtoul_l.isra.0+0xa>
 801d798:	2c2d      	cmp	r4, #45	; 0x2d
 801d79a:	d134      	bne.n	801d806 <_strtoul_l.isra.0+0x86>
 801d79c:	f89c 4000 	ldrb.w	r4, [ip]
 801d7a0:	f04f 0801 	mov.w	r8, #1
 801d7a4:	f100 0c02 	add.w	ip, r0, #2
 801d7a8:	2b00      	cmp	r3, #0
 801d7aa:	d05e      	beq.n	801d86a <_strtoul_l.isra.0+0xea>
 801d7ac:	2b10      	cmp	r3, #16
 801d7ae:	d10c      	bne.n	801d7ca <_strtoul_l.isra.0+0x4a>
 801d7b0:	2c30      	cmp	r4, #48	; 0x30
 801d7b2:	d10a      	bne.n	801d7ca <_strtoul_l.isra.0+0x4a>
 801d7b4:	f89c 0000 	ldrb.w	r0, [ip]
 801d7b8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801d7bc:	2858      	cmp	r0, #88	; 0x58
 801d7be:	d14f      	bne.n	801d860 <_strtoul_l.isra.0+0xe0>
 801d7c0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801d7c4:	2310      	movs	r3, #16
 801d7c6:	f10c 0c02 	add.w	ip, ip, #2
 801d7ca:	f04f 37ff 	mov.w	r7, #4294967295
 801d7ce:	2500      	movs	r5, #0
 801d7d0:	fbb7 f7f3 	udiv	r7, r7, r3
 801d7d4:	fb03 f907 	mul.w	r9, r3, r7
 801d7d8:	ea6f 0909 	mvn.w	r9, r9
 801d7dc:	4628      	mov	r0, r5
 801d7de:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801d7e2:	2e09      	cmp	r6, #9
 801d7e4:	d818      	bhi.n	801d818 <_strtoul_l.isra.0+0x98>
 801d7e6:	4634      	mov	r4, r6
 801d7e8:	42a3      	cmp	r3, r4
 801d7ea:	dd24      	ble.n	801d836 <_strtoul_l.isra.0+0xb6>
 801d7ec:	2d00      	cmp	r5, #0
 801d7ee:	db1f      	blt.n	801d830 <_strtoul_l.isra.0+0xb0>
 801d7f0:	4287      	cmp	r7, r0
 801d7f2:	d31d      	bcc.n	801d830 <_strtoul_l.isra.0+0xb0>
 801d7f4:	d101      	bne.n	801d7fa <_strtoul_l.isra.0+0x7a>
 801d7f6:	45a1      	cmp	r9, r4
 801d7f8:	db1a      	blt.n	801d830 <_strtoul_l.isra.0+0xb0>
 801d7fa:	fb00 4003 	mla	r0, r0, r3, r4
 801d7fe:	2501      	movs	r5, #1
 801d800:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801d804:	e7eb      	b.n	801d7de <_strtoul_l.isra.0+0x5e>
 801d806:	2c2b      	cmp	r4, #43	; 0x2b
 801d808:	bf08      	it	eq
 801d80a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801d80e:	46a8      	mov	r8, r5
 801d810:	bf08      	it	eq
 801d812:	f100 0c02 	addeq.w	ip, r0, #2
 801d816:	e7c7      	b.n	801d7a8 <_strtoul_l.isra.0+0x28>
 801d818:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801d81c:	2e19      	cmp	r6, #25
 801d81e:	d801      	bhi.n	801d824 <_strtoul_l.isra.0+0xa4>
 801d820:	3c37      	subs	r4, #55	; 0x37
 801d822:	e7e1      	b.n	801d7e8 <_strtoul_l.isra.0+0x68>
 801d824:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801d828:	2e19      	cmp	r6, #25
 801d82a:	d804      	bhi.n	801d836 <_strtoul_l.isra.0+0xb6>
 801d82c:	3c57      	subs	r4, #87	; 0x57
 801d82e:	e7db      	b.n	801d7e8 <_strtoul_l.isra.0+0x68>
 801d830:	f04f 35ff 	mov.w	r5, #4294967295
 801d834:	e7e4      	b.n	801d800 <_strtoul_l.isra.0+0x80>
 801d836:	2d00      	cmp	r5, #0
 801d838:	da07      	bge.n	801d84a <_strtoul_l.isra.0+0xca>
 801d83a:	2322      	movs	r3, #34	; 0x22
 801d83c:	f8ce 3000 	str.w	r3, [lr]
 801d840:	f04f 30ff 	mov.w	r0, #4294967295
 801d844:	b942      	cbnz	r2, 801d858 <_strtoul_l.isra.0+0xd8>
 801d846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d84a:	f1b8 0f00 	cmp.w	r8, #0
 801d84e:	d000      	beq.n	801d852 <_strtoul_l.isra.0+0xd2>
 801d850:	4240      	negs	r0, r0
 801d852:	2a00      	cmp	r2, #0
 801d854:	d0f7      	beq.n	801d846 <_strtoul_l.isra.0+0xc6>
 801d856:	b10d      	cbz	r5, 801d85c <_strtoul_l.isra.0+0xdc>
 801d858:	f10c 31ff 	add.w	r1, ip, #4294967295
 801d85c:	6011      	str	r1, [r2, #0]
 801d85e:	e7f2      	b.n	801d846 <_strtoul_l.isra.0+0xc6>
 801d860:	2430      	movs	r4, #48	; 0x30
 801d862:	2b00      	cmp	r3, #0
 801d864:	d1b1      	bne.n	801d7ca <_strtoul_l.isra.0+0x4a>
 801d866:	2308      	movs	r3, #8
 801d868:	e7af      	b.n	801d7ca <_strtoul_l.isra.0+0x4a>
 801d86a:	2c30      	cmp	r4, #48	; 0x30
 801d86c:	d0a2      	beq.n	801d7b4 <_strtoul_l.isra.0+0x34>
 801d86e:	230a      	movs	r3, #10
 801d870:	e7ab      	b.n	801d7ca <_strtoul_l.isra.0+0x4a>
 801d872:	bf00      	nop
 801d874:	0801ec7c 	.word	0x0801ec7c

0801d878 <strtoul>:
 801d878:	4613      	mov	r3, r2
 801d87a:	460a      	mov	r2, r1
 801d87c:	4601      	mov	r1, r0
 801d87e:	4802      	ldr	r0, [pc, #8]	; (801d888 <strtoul+0x10>)
 801d880:	6800      	ldr	r0, [r0, #0]
 801d882:	f7ff bf7d 	b.w	801d780 <_strtoul_l.isra.0>
 801d886:	bf00      	nop
 801d888:	200001d4 	.word	0x200001d4

0801d88c <_vsniprintf_r>:
 801d88c:	b530      	push	{r4, r5, lr}
 801d88e:	1e14      	subs	r4, r2, #0
 801d890:	4605      	mov	r5, r0
 801d892:	b09b      	sub	sp, #108	; 0x6c
 801d894:	4618      	mov	r0, r3
 801d896:	da05      	bge.n	801d8a4 <_vsniprintf_r+0x18>
 801d898:	238b      	movs	r3, #139	; 0x8b
 801d89a:	602b      	str	r3, [r5, #0]
 801d89c:	f04f 30ff 	mov.w	r0, #4294967295
 801d8a0:	b01b      	add	sp, #108	; 0x6c
 801d8a2:	bd30      	pop	{r4, r5, pc}
 801d8a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 801d8a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d8ac:	bf14      	ite	ne
 801d8ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d8b2:	4623      	moveq	r3, r4
 801d8b4:	9302      	str	r3, [sp, #8]
 801d8b6:	9305      	str	r3, [sp, #20]
 801d8b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d8bc:	9100      	str	r1, [sp, #0]
 801d8be:	9104      	str	r1, [sp, #16]
 801d8c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d8c4:	4602      	mov	r2, r0
 801d8c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d8c8:	4669      	mov	r1, sp
 801d8ca:	4628      	mov	r0, r5
 801d8cc:	f000 f874 	bl	801d9b8 <_svfiprintf_r>
 801d8d0:	1c43      	adds	r3, r0, #1
 801d8d2:	bfbc      	itt	lt
 801d8d4:	238b      	movlt	r3, #139	; 0x8b
 801d8d6:	602b      	strlt	r3, [r5, #0]
 801d8d8:	2c00      	cmp	r4, #0
 801d8da:	d0e1      	beq.n	801d8a0 <_vsniprintf_r+0x14>
 801d8dc:	9b00      	ldr	r3, [sp, #0]
 801d8de:	2200      	movs	r2, #0
 801d8e0:	701a      	strb	r2, [r3, #0]
 801d8e2:	e7dd      	b.n	801d8a0 <_vsniprintf_r+0x14>

0801d8e4 <vsniprintf>:
 801d8e4:	b507      	push	{r0, r1, r2, lr}
 801d8e6:	9300      	str	r3, [sp, #0]
 801d8e8:	4613      	mov	r3, r2
 801d8ea:	460a      	mov	r2, r1
 801d8ec:	4601      	mov	r1, r0
 801d8ee:	4803      	ldr	r0, [pc, #12]	; (801d8fc <vsniprintf+0x18>)
 801d8f0:	6800      	ldr	r0, [r0, #0]
 801d8f2:	f7ff ffcb 	bl	801d88c <_vsniprintf_r>
 801d8f6:	b003      	add	sp, #12
 801d8f8:	f85d fb04 	ldr.w	pc, [sp], #4
 801d8fc:	200001d4 	.word	0x200001d4

0801d900 <__ssputs_r>:
 801d900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d904:	688e      	ldr	r6, [r1, #8]
 801d906:	429e      	cmp	r6, r3
 801d908:	4682      	mov	sl, r0
 801d90a:	460c      	mov	r4, r1
 801d90c:	4690      	mov	r8, r2
 801d90e:	461f      	mov	r7, r3
 801d910:	d838      	bhi.n	801d984 <__ssputs_r+0x84>
 801d912:	898a      	ldrh	r2, [r1, #12]
 801d914:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d918:	d032      	beq.n	801d980 <__ssputs_r+0x80>
 801d91a:	6825      	ldr	r5, [r4, #0]
 801d91c:	6909      	ldr	r1, [r1, #16]
 801d91e:	eba5 0901 	sub.w	r9, r5, r1
 801d922:	6965      	ldr	r5, [r4, #20]
 801d924:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d928:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d92c:	3301      	adds	r3, #1
 801d92e:	444b      	add	r3, r9
 801d930:	106d      	asrs	r5, r5, #1
 801d932:	429d      	cmp	r5, r3
 801d934:	bf38      	it	cc
 801d936:	461d      	movcc	r5, r3
 801d938:	0553      	lsls	r3, r2, #21
 801d93a:	d531      	bpl.n	801d9a0 <__ssputs_r+0xa0>
 801d93c:	4629      	mov	r1, r5
 801d93e:	f000 fb39 	bl	801dfb4 <_malloc_r>
 801d942:	4606      	mov	r6, r0
 801d944:	b950      	cbnz	r0, 801d95c <__ssputs_r+0x5c>
 801d946:	230c      	movs	r3, #12
 801d948:	f8ca 3000 	str.w	r3, [sl]
 801d94c:	89a3      	ldrh	r3, [r4, #12]
 801d94e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d952:	81a3      	strh	r3, [r4, #12]
 801d954:	f04f 30ff 	mov.w	r0, #4294967295
 801d958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d95c:	6921      	ldr	r1, [r4, #16]
 801d95e:	464a      	mov	r2, r9
 801d960:	f7ff fdae 	bl	801d4c0 <memcpy>
 801d964:	89a3      	ldrh	r3, [r4, #12]
 801d966:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d96a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d96e:	81a3      	strh	r3, [r4, #12]
 801d970:	6126      	str	r6, [r4, #16]
 801d972:	6165      	str	r5, [r4, #20]
 801d974:	444e      	add	r6, r9
 801d976:	eba5 0509 	sub.w	r5, r5, r9
 801d97a:	6026      	str	r6, [r4, #0]
 801d97c:	60a5      	str	r5, [r4, #8]
 801d97e:	463e      	mov	r6, r7
 801d980:	42be      	cmp	r6, r7
 801d982:	d900      	bls.n	801d986 <__ssputs_r+0x86>
 801d984:	463e      	mov	r6, r7
 801d986:	4632      	mov	r2, r6
 801d988:	6820      	ldr	r0, [r4, #0]
 801d98a:	4641      	mov	r1, r8
 801d98c:	f000 faa8 	bl	801dee0 <memmove>
 801d990:	68a3      	ldr	r3, [r4, #8]
 801d992:	6822      	ldr	r2, [r4, #0]
 801d994:	1b9b      	subs	r3, r3, r6
 801d996:	4432      	add	r2, r6
 801d998:	60a3      	str	r3, [r4, #8]
 801d99a:	6022      	str	r2, [r4, #0]
 801d99c:	2000      	movs	r0, #0
 801d99e:	e7db      	b.n	801d958 <__ssputs_r+0x58>
 801d9a0:	462a      	mov	r2, r5
 801d9a2:	f000 fb61 	bl	801e068 <_realloc_r>
 801d9a6:	4606      	mov	r6, r0
 801d9a8:	2800      	cmp	r0, #0
 801d9aa:	d1e1      	bne.n	801d970 <__ssputs_r+0x70>
 801d9ac:	6921      	ldr	r1, [r4, #16]
 801d9ae:	4650      	mov	r0, sl
 801d9b0:	f000 fab0 	bl	801df14 <_free_r>
 801d9b4:	e7c7      	b.n	801d946 <__ssputs_r+0x46>
	...

0801d9b8 <_svfiprintf_r>:
 801d9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9bc:	4698      	mov	r8, r3
 801d9be:	898b      	ldrh	r3, [r1, #12]
 801d9c0:	061b      	lsls	r3, r3, #24
 801d9c2:	b09d      	sub	sp, #116	; 0x74
 801d9c4:	4607      	mov	r7, r0
 801d9c6:	460d      	mov	r5, r1
 801d9c8:	4614      	mov	r4, r2
 801d9ca:	d50e      	bpl.n	801d9ea <_svfiprintf_r+0x32>
 801d9cc:	690b      	ldr	r3, [r1, #16]
 801d9ce:	b963      	cbnz	r3, 801d9ea <_svfiprintf_r+0x32>
 801d9d0:	2140      	movs	r1, #64	; 0x40
 801d9d2:	f000 faef 	bl	801dfb4 <_malloc_r>
 801d9d6:	6028      	str	r0, [r5, #0]
 801d9d8:	6128      	str	r0, [r5, #16]
 801d9da:	b920      	cbnz	r0, 801d9e6 <_svfiprintf_r+0x2e>
 801d9dc:	230c      	movs	r3, #12
 801d9de:	603b      	str	r3, [r7, #0]
 801d9e0:	f04f 30ff 	mov.w	r0, #4294967295
 801d9e4:	e0d1      	b.n	801db8a <_svfiprintf_r+0x1d2>
 801d9e6:	2340      	movs	r3, #64	; 0x40
 801d9e8:	616b      	str	r3, [r5, #20]
 801d9ea:	2300      	movs	r3, #0
 801d9ec:	9309      	str	r3, [sp, #36]	; 0x24
 801d9ee:	2320      	movs	r3, #32
 801d9f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d9f4:	f8cd 800c 	str.w	r8, [sp, #12]
 801d9f8:	2330      	movs	r3, #48	; 0x30
 801d9fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801dba4 <_svfiprintf_r+0x1ec>
 801d9fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801da02:	f04f 0901 	mov.w	r9, #1
 801da06:	4623      	mov	r3, r4
 801da08:	469a      	mov	sl, r3
 801da0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801da0e:	b10a      	cbz	r2, 801da14 <_svfiprintf_r+0x5c>
 801da10:	2a25      	cmp	r2, #37	; 0x25
 801da12:	d1f9      	bne.n	801da08 <_svfiprintf_r+0x50>
 801da14:	ebba 0b04 	subs.w	fp, sl, r4
 801da18:	d00b      	beq.n	801da32 <_svfiprintf_r+0x7a>
 801da1a:	465b      	mov	r3, fp
 801da1c:	4622      	mov	r2, r4
 801da1e:	4629      	mov	r1, r5
 801da20:	4638      	mov	r0, r7
 801da22:	f7ff ff6d 	bl	801d900 <__ssputs_r>
 801da26:	3001      	adds	r0, #1
 801da28:	f000 80aa 	beq.w	801db80 <_svfiprintf_r+0x1c8>
 801da2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801da2e:	445a      	add	r2, fp
 801da30:	9209      	str	r2, [sp, #36]	; 0x24
 801da32:	f89a 3000 	ldrb.w	r3, [sl]
 801da36:	2b00      	cmp	r3, #0
 801da38:	f000 80a2 	beq.w	801db80 <_svfiprintf_r+0x1c8>
 801da3c:	2300      	movs	r3, #0
 801da3e:	f04f 32ff 	mov.w	r2, #4294967295
 801da42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801da46:	f10a 0a01 	add.w	sl, sl, #1
 801da4a:	9304      	str	r3, [sp, #16]
 801da4c:	9307      	str	r3, [sp, #28]
 801da4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801da52:	931a      	str	r3, [sp, #104]	; 0x68
 801da54:	4654      	mov	r4, sl
 801da56:	2205      	movs	r2, #5
 801da58:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da5c:	4851      	ldr	r0, [pc, #324]	; (801dba4 <_svfiprintf_r+0x1ec>)
 801da5e:	f7ee faf7 	bl	800c050 <memchr>
 801da62:	9a04      	ldr	r2, [sp, #16]
 801da64:	b9d8      	cbnz	r0, 801da9e <_svfiprintf_r+0xe6>
 801da66:	06d0      	lsls	r0, r2, #27
 801da68:	bf44      	itt	mi
 801da6a:	2320      	movmi	r3, #32
 801da6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801da70:	0711      	lsls	r1, r2, #28
 801da72:	bf44      	itt	mi
 801da74:	232b      	movmi	r3, #43	; 0x2b
 801da76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801da7a:	f89a 3000 	ldrb.w	r3, [sl]
 801da7e:	2b2a      	cmp	r3, #42	; 0x2a
 801da80:	d015      	beq.n	801daae <_svfiprintf_r+0xf6>
 801da82:	9a07      	ldr	r2, [sp, #28]
 801da84:	4654      	mov	r4, sl
 801da86:	2000      	movs	r0, #0
 801da88:	f04f 0c0a 	mov.w	ip, #10
 801da8c:	4621      	mov	r1, r4
 801da8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801da92:	3b30      	subs	r3, #48	; 0x30
 801da94:	2b09      	cmp	r3, #9
 801da96:	d94e      	bls.n	801db36 <_svfiprintf_r+0x17e>
 801da98:	b1b0      	cbz	r0, 801dac8 <_svfiprintf_r+0x110>
 801da9a:	9207      	str	r2, [sp, #28]
 801da9c:	e014      	b.n	801dac8 <_svfiprintf_r+0x110>
 801da9e:	eba0 0308 	sub.w	r3, r0, r8
 801daa2:	fa09 f303 	lsl.w	r3, r9, r3
 801daa6:	4313      	orrs	r3, r2
 801daa8:	9304      	str	r3, [sp, #16]
 801daaa:	46a2      	mov	sl, r4
 801daac:	e7d2      	b.n	801da54 <_svfiprintf_r+0x9c>
 801daae:	9b03      	ldr	r3, [sp, #12]
 801dab0:	1d19      	adds	r1, r3, #4
 801dab2:	681b      	ldr	r3, [r3, #0]
 801dab4:	9103      	str	r1, [sp, #12]
 801dab6:	2b00      	cmp	r3, #0
 801dab8:	bfbb      	ittet	lt
 801daba:	425b      	neglt	r3, r3
 801dabc:	f042 0202 	orrlt.w	r2, r2, #2
 801dac0:	9307      	strge	r3, [sp, #28]
 801dac2:	9307      	strlt	r3, [sp, #28]
 801dac4:	bfb8      	it	lt
 801dac6:	9204      	strlt	r2, [sp, #16]
 801dac8:	7823      	ldrb	r3, [r4, #0]
 801daca:	2b2e      	cmp	r3, #46	; 0x2e
 801dacc:	d10c      	bne.n	801dae8 <_svfiprintf_r+0x130>
 801dace:	7863      	ldrb	r3, [r4, #1]
 801dad0:	2b2a      	cmp	r3, #42	; 0x2a
 801dad2:	d135      	bne.n	801db40 <_svfiprintf_r+0x188>
 801dad4:	9b03      	ldr	r3, [sp, #12]
 801dad6:	1d1a      	adds	r2, r3, #4
 801dad8:	681b      	ldr	r3, [r3, #0]
 801dada:	9203      	str	r2, [sp, #12]
 801dadc:	2b00      	cmp	r3, #0
 801dade:	bfb8      	it	lt
 801dae0:	f04f 33ff 	movlt.w	r3, #4294967295
 801dae4:	3402      	adds	r4, #2
 801dae6:	9305      	str	r3, [sp, #20]
 801dae8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801dbb4 <_svfiprintf_r+0x1fc>
 801daec:	7821      	ldrb	r1, [r4, #0]
 801daee:	2203      	movs	r2, #3
 801daf0:	4650      	mov	r0, sl
 801daf2:	f7ee faad 	bl	800c050 <memchr>
 801daf6:	b140      	cbz	r0, 801db0a <_svfiprintf_r+0x152>
 801daf8:	2340      	movs	r3, #64	; 0x40
 801dafa:	eba0 000a 	sub.w	r0, r0, sl
 801dafe:	fa03 f000 	lsl.w	r0, r3, r0
 801db02:	9b04      	ldr	r3, [sp, #16]
 801db04:	4303      	orrs	r3, r0
 801db06:	3401      	adds	r4, #1
 801db08:	9304      	str	r3, [sp, #16]
 801db0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db0e:	4826      	ldr	r0, [pc, #152]	; (801dba8 <_svfiprintf_r+0x1f0>)
 801db10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801db14:	2206      	movs	r2, #6
 801db16:	f7ee fa9b 	bl	800c050 <memchr>
 801db1a:	2800      	cmp	r0, #0
 801db1c:	d038      	beq.n	801db90 <_svfiprintf_r+0x1d8>
 801db1e:	4b23      	ldr	r3, [pc, #140]	; (801dbac <_svfiprintf_r+0x1f4>)
 801db20:	bb1b      	cbnz	r3, 801db6a <_svfiprintf_r+0x1b2>
 801db22:	9b03      	ldr	r3, [sp, #12]
 801db24:	3307      	adds	r3, #7
 801db26:	f023 0307 	bic.w	r3, r3, #7
 801db2a:	3308      	adds	r3, #8
 801db2c:	9303      	str	r3, [sp, #12]
 801db2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db30:	4433      	add	r3, r6
 801db32:	9309      	str	r3, [sp, #36]	; 0x24
 801db34:	e767      	b.n	801da06 <_svfiprintf_r+0x4e>
 801db36:	fb0c 3202 	mla	r2, ip, r2, r3
 801db3a:	460c      	mov	r4, r1
 801db3c:	2001      	movs	r0, #1
 801db3e:	e7a5      	b.n	801da8c <_svfiprintf_r+0xd4>
 801db40:	2300      	movs	r3, #0
 801db42:	3401      	adds	r4, #1
 801db44:	9305      	str	r3, [sp, #20]
 801db46:	4619      	mov	r1, r3
 801db48:	f04f 0c0a 	mov.w	ip, #10
 801db4c:	4620      	mov	r0, r4
 801db4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801db52:	3a30      	subs	r2, #48	; 0x30
 801db54:	2a09      	cmp	r2, #9
 801db56:	d903      	bls.n	801db60 <_svfiprintf_r+0x1a8>
 801db58:	2b00      	cmp	r3, #0
 801db5a:	d0c5      	beq.n	801dae8 <_svfiprintf_r+0x130>
 801db5c:	9105      	str	r1, [sp, #20]
 801db5e:	e7c3      	b.n	801dae8 <_svfiprintf_r+0x130>
 801db60:	fb0c 2101 	mla	r1, ip, r1, r2
 801db64:	4604      	mov	r4, r0
 801db66:	2301      	movs	r3, #1
 801db68:	e7f0      	b.n	801db4c <_svfiprintf_r+0x194>
 801db6a:	ab03      	add	r3, sp, #12
 801db6c:	9300      	str	r3, [sp, #0]
 801db6e:	462a      	mov	r2, r5
 801db70:	4b0f      	ldr	r3, [pc, #60]	; (801dbb0 <_svfiprintf_r+0x1f8>)
 801db72:	a904      	add	r1, sp, #16
 801db74:	4638      	mov	r0, r7
 801db76:	f3af 8000 	nop.w
 801db7a:	1c42      	adds	r2, r0, #1
 801db7c:	4606      	mov	r6, r0
 801db7e:	d1d6      	bne.n	801db2e <_svfiprintf_r+0x176>
 801db80:	89ab      	ldrh	r3, [r5, #12]
 801db82:	065b      	lsls	r3, r3, #25
 801db84:	f53f af2c 	bmi.w	801d9e0 <_svfiprintf_r+0x28>
 801db88:	9809      	ldr	r0, [sp, #36]	; 0x24
 801db8a:	b01d      	add	sp, #116	; 0x74
 801db8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db90:	ab03      	add	r3, sp, #12
 801db92:	9300      	str	r3, [sp, #0]
 801db94:	462a      	mov	r2, r5
 801db96:	4b06      	ldr	r3, [pc, #24]	; (801dbb0 <_svfiprintf_r+0x1f8>)
 801db98:	a904      	add	r1, sp, #16
 801db9a:	4638      	mov	r0, r7
 801db9c:	f000 f87a 	bl	801dc94 <_printf_i>
 801dba0:	e7eb      	b.n	801db7a <_svfiprintf_r+0x1c2>
 801dba2:	bf00      	nop
 801dba4:	0801ed7c 	.word	0x0801ed7c
 801dba8:	0801ed86 	.word	0x0801ed86
 801dbac:	00000000 	.word	0x00000000
 801dbb0:	0801d901 	.word	0x0801d901
 801dbb4:	0801ed82 	.word	0x0801ed82

0801dbb8 <_printf_common>:
 801dbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dbbc:	4616      	mov	r6, r2
 801dbbe:	4699      	mov	r9, r3
 801dbc0:	688a      	ldr	r2, [r1, #8]
 801dbc2:	690b      	ldr	r3, [r1, #16]
 801dbc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801dbc8:	4293      	cmp	r3, r2
 801dbca:	bfb8      	it	lt
 801dbcc:	4613      	movlt	r3, r2
 801dbce:	6033      	str	r3, [r6, #0]
 801dbd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801dbd4:	4607      	mov	r7, r0
 801dbd6:	460c      	mov	r4, r1
 801dbd8:	b10a      	cbz	r2, 801dbde <_printf_common+0x26>
 801dbda:	3301      	adds	r3, #1
 801dbdc:	6033      	str	r3, [r6, #0]
 801dbde:	6823      	ldr	r3, [r4, #0]
 801dbe0:	0699      	lsls	r1, r3, #26
 801dbe2:	bf42      	ittt	mi
 801dbe4:	6833      	ldrmi	r3, [r6, #0]
 801dbe6:	3302      	addmi	r3, #2
 801dbe8:	6033      	strmi	r3, [r6, #0]
 801dbea:	6825      	ldr	r5, [r4, #0]
 801dbec:	f015 0506 	ands.w	r5, r5, #6
 801dbf0:	d106      	bne.n	801dc00 <_printf_common+0x48>
 801dbf2:	f104 0a19 	add.w	sl, r4, #25
 801dbf6:	68e3      	ldr	r3, [r4, #12]
 801dbf8:	6832      	ldr	r2, [r6, #0]
 801dbfa:	1a9b      	subs	r3, r3, r2
 801dbfc:	42ab      	cmp	r3, r5
 801dbfe:	dc26      	bgt.n	801dc4e <_printf_common+0x96>
 801dc00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801dc04:	1e13      	subs	r3, r2, #0
 801dc06:	6822      	ldr	r2, [r4, #0]
 801dc08:	bf18      	it	ne
 801dc0a:	2301      	movne	r3, #1
 801dc0c:	0692      	lsls	r2, r2, #26
 801dc0e:	d42b      	bmi.n	801dc68 <_printf_common+0xb0>
 801dc10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801dc14:	4649      	mov	r1, r9
 801dc16:	4638      	mov	r0, r7
 801dc18:	47c0      	blx	r8
 801dc1a:	3001      	adds	r0, #1
 801dc1c:	d01e      	beq.n	801dc5c <_printf_common+0xa4>
 801dc1e:	6823      	ldr	r3, [r4, #0]
 801dc20:	68e5      	ldr	r5, [r4, #12]
 801dc22:	6832      	ldr	r2, [r6, #0]
 801dc24:	f003 0306 	and.w	r3, r3, #6
 801dc28:	2b04      	cmp	r3, #4
 801dc2a:	bf08      	it	eq
 801dc2c:	1aad      	subeq	r5, r5, r2
 801dc2e:	68a3      	ldr	r3, [r4, #8]
 801dc30:	6922      	ldr	r2, [r4, #16]
 801dc32:	bf0c      	ite	eq
 801dc34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dc38:	2500      	movne	r5, #0
 801dc3a:	4293      	cmp	r3, r2
 801dc3c:	bfc4      	itt	gt
 801dc3e:	1a9b      	subgt	r3, r3, r2
 801dc40:	18ed      	addgt	r5, r5, r3
 801dc42:	2600      	movs	r6, #0
 801dc44:	341a      	adds	r4, #26
 801dc46:	42b5      	cmp	r5, r6
 801dc48:	d11a      	bne.n	801dc80 <_printf_common+0xc8>
 801dc4a:	2000      	movs	r0, #0
 801dc4c:	e008      	b.n	801dc60 <_printf_common+0xa8>
 801dc4e:	2301      	movs	r3, #1
 801dc50:	4652      	mov	r2, sl
 801dc52:	4649      	mov	r1, r9
 801dc54:	4638      	mov	r0, r7
 801dc56:	47c0      	blx	r8
 801dc58:	3001      	adds	r0, #1
 801dc5a:	d103      	bne.n	801dc64 <_printf_common+0xac>
 801dc5c:	f04f 30ff 	mov.w	r0, #4294967295
 801dc60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc64:	3501      	adds	r5, #1
 801dc66:	e7c6      	b.n	801dbf6 <_printf_common+0x3e>
 801dc68:	18e1      	adds	r1, r4, r3
 801dc6a:	1c5a      	adds	r2, r3, #1
 801dc6c:	2030      	movs	r0, #48	; 0x30
 801dc6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801dc72:	4422      	add	r2, r4
 801dc74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801dc78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801dc7c:	3302      	adds	r3, #2
 801dc7e:	e7c7      	b.n	801dc10 <_printf_common+0x58>
 801dc80:	2301      	movs	r3, #1
 801dc82:	4622      	mov	r2, r4
 801dc84:	4649      	mov	r1, r9
 801dc86:	4638      	mov	r0, r7
 801dc88:	47c0      	blx	r8
 801dc8a:	3001      	adds	r0, #1
 801dc8c:	d0e6      	beq.n	801dc5c <_printf_common+0xa4>
 801dc8e:	3601      	adds	r6, #1
 801dc90:	e7d9      	b.n	801dc46 <_printf_common+0x8e>
	...

0801dc94 <_printf_i>:
 801dc94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dc98:	460c      	mov	r4, r1
 801dc9a:	4691      	mov	r9, r2
 801dc9c:	7e27      	ldrb	r7, [r4, #24]
 801dc9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801dca0:	2f78      	cmp	r7, #120	; 0x78
 801dca2:	4680      	mov	r8, r0
 801dca4:	469a      	mov	sl, r3
 801dca6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801dcaa:	d807      	bhi.n	801dcbc <_printf_i+0x28>
 801dcac:	2f62      	cmp	r7, #98	; 0x62
 801dcae:	d80a      	bhi.n	801dcc6 <_printf_i+0x32>
 801dcb0:	2f00      	cmp	r7, #0
 801dcb2:	f000 80d8 	beq.w	801de66 <_printf_i+0x1d2>
 801dcb6:	2f58      	cmp	r7, #88	; 0x58
 801dcb8:	f000 80a3 	beq.w	801de02 <_printf_i+0x16e>
 801dcbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801dcc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801dcc4:	e03a      	b.n	801dd3c <_printf_i+0xa8>
 801dcc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801dcca:	2b15      	cmp	r3, #21
 801dccc:	d8f6      	bhi.n	801dcbc <_printf_i+0x28>
 801dcce:	a001      	add	r0, pc, #4	; (adr r0, 801dcd4 <_printf_i+0x40>)
 801dcd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801dcd4:	0801dd2d 	.word	0x0801dd2d
 801dcd8:	0801dd41 	.word	0x0801dd41
 801dcdc:	0801dcbd 	.word	0x0801dcbd
 801dce0:	0801dcbd 	.word	0x0801dcbd
 801dce4:	0801dcbd 	.word	0x0801dcbd
 801dce8:	0801dcbd 	.word	0x0801dcbd
 801dcec:	0801dd41 	.word	0x0801dd41
 801dcf0:	0801dcbd 	.word	0x0801dcbd
 801dcf4:	0801dcbd 	.word	0x0801dcbd
 801dcf8:	0801dcbd 	.word	0x0801dcbd
 801dcfc:	0801dcbd 	.word	0x0801dcbd
 801dd00:	0801de4d 	.word	0x0801de4d
 801dd04:	0801dd71 	.word	0x0801dd71
 801dd08:	0801de2f 	.word	0x0801de2f
 801dd0c:	0801dcbd 	.word	0x0801dcbd
 801dd10:	0801dcbd 	.word	0x0801dcbd
 801dd14:	0801de6f 	.word	0x0801de6f
 801dd18:	0801dcbd 	.word	0x0801dcbd
 801dd1c:	0801dd71 	.word	0x0801dd71
 801dd20:	0801dcbd 	.word	0x0801dcbd
 801dd24:	0801dcbd 	.word	0x0801dcbd
 801dd28:	0801de37 	.word	0x0801de37
 801dd2c:	680b      	ldr	r3, [r1, #0]
 801dd2e:	1d1a      	adds	r2, r3, #4
 801dd30:	681b      	ldr	r3, [r3, #0]
 801dd32:	600a      	str	r2, [r1, #0]
 801dd34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801dd38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801dd3c:	2301      	movs	r3, #1
 801dd3e:	e0a3      	b.n	801de88 <_printf_i+0x1f4>
 801dd40:	6825      	ldr	r5, [r4, #0]
 801dd42:	6808      	ldr	r0, [r1, #0]
 801dd44:	062e      	lsls	r6, r5, #24
 801dd46:	f100 0304 	add.w	r3, r0, #4
 801dd4a:	d50a      	bpl.n	801dd62 <_printf_i+0xce>
 801dd4c:	6805      	ldr	r5, [r0, #0]
 801dd4e:	600b      	str	r3, [r1, #0]
 801dd50:	2d00      	cmp	r5, #0
 801dd52:	da03      	bge.n	801dd5c <_printf_i+0xc8>
 801dd54:	232d      	movs	r3, #45	; 0x2d
 801dd56:	426d      	negs	r5, r5
 801dd58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dd5c:	485e      	ldr	r0, [pc, #376]	; (801ded8 <_printf_i+0x244>)
 801dd5e:	230a      	movs	r3, #10
 801dd60:	e019      	b.n	801dd96 <_printf_i+0x102>
 801dd62:	f015 0f40 	tst.w	r5, #64	; 0x40
 801dd66:	6805      	ldr	r5, [r0, #0]
 801dd68:	600b      	str	r3, [r1, #0]
 801dd6a:	bf18      	it	ne
 801dd6c:	b22d      	sxthne	r5, r5
 801dd6e:	e7ef      	b.n	801dd50 <_printf_i+0xbc>
 801dd70:	680b      	ldr	r3, [r1, #0]
 801dd72:	6825      	ldr	r5, [r4, #0]
 801dd74:	1d18      	adds	r0, r3, #4
 801dd76:	6008      	str	r0, [r1, #0]
 801dd78:	0628      	lsls	r0, r5, #24
 801dd7a:	d501      	bpl.n	801dd80 <_printf_i+0xec>
 801dd7c:	681d      	ldr	r5, [r3, #0]
 801dd7e:	e002      	b.n	801dd86 <_printf_i+0xf2>
 801dd80:	0669      	lsls	r1, r5, #25
 801dd82:	d5fb      	bpl.n	801dd7c <_printf_i+0xe8>
 801dd84:	881d      	ldrh	r5, [r3, #0]
 801dd86:	4854      	ldr	r0, [pc, #336]	; (801ded8 <_printf_i+0x244>)
 801dd88:	2f6f      	cmp	r7, #111	; 0x6f
 801dd8a:	bf0c      	ite	eq
 801dd8c:	2308      	moveq	r3, #8
 801dd8e:	230a      	movne	r3, #10
 801dd90:	2100      	movs	r1, #0
 801dd92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801dd96:	6866      	ldr	r6, [r4, #4]
 801dd98:	60a6      	str	r6, [r4, #8]
 801dd9a:	2e00      	cmp	r6, #0
 801dd9c:	bfa2      	ittt	ge
 801dd9e:	6821      	ldrge	r1, [r4, #0]
 801dda0:	f021 0104 	bicge.w	r1, r1, #4
 801dda4:	6021      	strge	r1, [r4, #0]
 801dda6:	b90d      	cbnz	r5, 801ddac <_printf_i+0x118>
 801dda8:	2e00      	cmp	r6, #0
 801ddaa:	d04d      	beq.n	801de48 <_printf_i+0x1b4>
 801ddac:	4616      	mov	r6, r2
 801ddae:	fbb5 f1f3 	udiv	r1, r5, r3
 801ddb2:	fb03 5711 	mls	r7, r3, r1, r5
 801ddb6:	5dc7      	ldrb	r7, [r0, r7]
 801ddb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ddbc:	462f      	mov	r7, r5
 801ddbe:	42bb      	cmp	r3, r7
 801ddc0:	460d      	mov	r5, r1
 801ddc2:	d9f4      	bls.n	801ddae <_printf_i+0x11a>
 801ddc4:	2b08      	cmp	r3, #8
 801ddc6:	d10b      	bne.n	801dde0 <_printf_i+0x14c>
 801ddc8:	6823      	ldr	r3, [r4, #0]
 801ddca:	07df      	lsls	r7, r3, #31
 801ddcc:	d508      	bpl.n	801dde0 <_printf_i+0x14c>
 801ddce:	6923      	ldr	r3, [r4, #16]
 801ddd0:	6861      	ldr	r1, [r4, #4]
 801ddd2:	4299      	cmp	r1, r3
 801ddd4:	bfde      	ittt	le
 801ddd6:	2330      	movle	r3, #48	; 0x30
 801ddd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801dddc:	f106 36ff 	addle.w	r6, r6, #4294967295
 801dde0:	1b92      	subs	r2, r2, r6
 801dde2:	6122      	str	r2, [r4, #16]
 801dde4:	f8cd a000 	str.w	sl, [sp]
 801dde8:	464b      	mov	r3, r9
 801ddea:	aa03      	add	r2, sp, #12
 801ddec:	4621      	mov	r1, r4
 801ddee:	4640      	mov	r0, r8
 801ddf0:	f7ff fee2 	bl	801dbb8 <_printf_common>
 801ddf4:	3001      	adds	r0, #1
 801ddf6:	d14c      	bne.n	801de92 <_printf_i+0x1fe>
 801ddf8:	f04f 30ff 	mov.w	r0, #4294967295
 801ddfc:	b004      	add	sp, #16
 801ddfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de02:	4835      	ldr	r0, [pc, #212]	; (801ded8 <_printf_i+0x244>)
 801de04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801de08:	6823      	ldr	r3, [r4, #0]
 801de0a:	680e      	ldr	r6, [r1, #0]
 801de0c:	061f      	lsls	r7, r3, #24
 801de0e:	f856 5b04 	ldr.w	r5, [r6], #4
 801de12:	600e      	str	r6, [r1, #0]
 801de14:	d514      	bpl.n	801de40 <_printf_i+0x1ac>
 801de16:	07d9      	lsls	r1, r3, #31
 801de18:	bf44      	itt	mi
 801de1a:	f043 0320 	orrmi.w	r3, r3, #32
 801de1e:	6023      	strmi	r3, [r4, #0]
 801de20:	b91d      	cbnz	r5, 801de2a <_printf_i+0x196>
 801de22:	6823      	ldr	r3, [r4, #0]
 801de24:	f023 0320 	bic.w	r3, r3, #32
 801de28:	6023      	str	r3, [r4, #0]
 801de2a:	2310      	movs	r3, #16
 801de2c:	e7b0      	b.n	801dd90 <_printf_i+0xfc>
 801de2e:	6823      	ldr	r3, [r4, #0]
 801de30:	f043 0320 	orr.w	r3, r3, #32
 801de34:	6023      	str	r3, [r4, #0]
 801de36:	2378      	movs	r3, #120	; 0x78
 801de38:	4828      	ldr	r0, [pc, #160]	; (801dedc <_printf_i+0x248>)
 801de3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801de3e:	e7e3      	b.n	801de08 <_printf_i+0x174>
 801de40:	065e      	lsls	r6, r3, #25
 801de42:	bf48      	it	mi
 801de44:	b2ad      	uxthmi	r5, r5
 801de46:	e7e6      	b.n	801de16 <_printf_i+0x182>
 801de48:	4616      	mov	r6, r2
 801de4a:	e7bb      	b.n	801ddc4 <_printf_i+0x130>
 801de4c:	680b      	ldr	r3, [r1, #0]
 801de4e:	6826      	ldr	r6, [r4, #0]
 801de50:	6960      	ldr	r0, [r4, #20]
 801de52:	1d1d      	adds	r5, r3, #4
 801de54:	600d      	str	r5, [r1, #0]
 801de56:	0635      	lsls	r5, r6, #24
 801de58:	681b      	ldr	r3, [r3, #0]
 801de5a:	d501      	bpl.n	801de60 <_printf_i+0x1cc>
 801de5c:	6018      	str	r0, [r3, #0]
 801de5e:	e002      	b.n	801de66 <_printf_i+0x1d2>
 801de60:	0671      	lsls	r1, r6, #25
 801de62:	d5fb      	bpl.n	801de5c <_printf_i+0x1c8>
 801de64:	8018      	strh	r0, [r3, #0]
 801de66:	2300      	movs	r3, #0
 801de68:	6123      	str	r3, [r4, #16]
 801de6a:	4616      	mov	r6, r2
 801de6c:	e7ba      	b.n	801dde4 <_printf_i+0x150>
 801de6e:	680b      	ldr	r3, [r1, #0]
 801de70:	1d1a      	adds	r2, r3, #4
 801de72:	600a      	str	r2, [r1, #0]
 801de74:	681e      	ldr	r6, [r3, #0]
 801de76:	6862      	ldr	r2, [r4, #4]
 801de78:	2100      	movs	r1, #0
 801de7a:	4630      	mov	r0, r6
 801de7c:	f7ee f8e8 	bl	800c050 <memchr>
 801de80:	b108      	cbz	r0, 801de86 <_printf_i+0x1f2>
 801de82:	1b80      	subs	r0, r0, r6
 801de84:	6060      	str	r0, [r4, #4]
 801de86:	6863      	ldr	r3, [r4, #4]
 801de88:	6123      	str	r3, [r4, #16]
 801de8a:	2300      	movs	r3, #0
 801de8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801de90:	e7a8      	b.n	801dde4 <_printf_i+0x150>
 801de92:	6923      	ldr	r3, [r4, #16]
 801de94:	4632      	mov	r2, r6
 801de96:	4649      	mov	r1, r9
 801de98:	4640      	mov	r0, r8
 801de9a:	47d0      	blx	sl
 801de9c:	3001      	adds	r0, #1
 801de9e:	d0ab      	beq.n	801ddf8 <_printf_i+0x164>
 801dea0:	6823      	ldr	r3, [r4, #0]
 801dea2:	079b      	lsls	r3, r3, #30
 801dea4:	d413      	bmi.n	801dece <_printf_i+0x23a>
 801dea6:	68e0      	ldr	r0, [r4, #12]
 801dea8:	9b03      	ldr	r3, [sp, #12]
 801deaa:	4298      	cmp	r0, r3
 801deac:	bfb8      	it	lt
 801deae:	4618      	movlt	r0, r3
 801deb0:	e7a4      	b.n	801ddfc <_printf_i+0x168>
 801deb2:	2301      	movs	r3, #1
 801deb4:	4632      	mov	r2, r6
 801deb6:	4649      	mov	r1, r9
 801deb8:	4640      	mov	r0, r8
 801deba:	47d0      	blx	sl
 801debc:	3001      	adds	r0, #1
 801debe:	d09b      	beq.n	801ddf8 <_printf_i+0x164>
 801dec0:	3501      	adds	r5, #1
 801dec2:	68e3      	ldr	r3, [r4, #12]
 801dec4:	9903      	ldr	r1, [sp, #12]
 801dec6:	1a5b      	subs	r3, r3, r1
 801dec8:	42ab      	cmp	r3, r5
 801deca:	dcf2      	bgt.n	801deb2 <_printf_i+0x21e>
 801decc:	e7eb      	b.n	801dea6 <_printf_i+0x212>
 801dece:	2500      	movs	r5, #0
 801ded0:	f104 0619 	add.w	r6, r4, #25
 801ded4:	e7f5      	b.n	801dec2 <_printf_i+0x22e>
 801ded6:	bf00      	nop
 801ded8:	0801ed8d 	.word	0x0801ed8d
 801dedc:	0801ed9e 	.word	0x0801ed9e

0801dee0 <memmove>:
 801dee0:	4288      	cmp	r0, r1
 801dee2:	b510      	push	{r4, lr}
 801dee4:	eb01 0402 	add.w	r4, r1, r2
 801dee8:	d902      	bls.n	801def0 <memmove+0x10>
 801deea:	4284      	cmp	r4, r0
 801deec:	4623      	mov	r3, r4
 801deee:	d807      	bhi.n	801df00 <memmove+0x20>
 801def0:	1e43      	subs	r3, r0, #1
 801def2:	42a1      	cmp	r1, r4
 801def4:	d008      	beq.n	801df08 <memmove+0x28>
 801def6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801defa:	f803 2f01 	strb.w	r2, [r3, #1]!
 801defe:	e7f8      	b.n	801def2 <memmove+0x12>
 801df00:	4402      	add	r2, r0
 801df02:	4601      	mov	r1, r0
 801df04:	428a      	cmp	r2, r1
 801df06:	d100      	bne.n	801df0a <memmove+0x2a>
 801df08:	bd10      	pop	{r4, pc}
 801df0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801df0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801df12:	e7f7      	b.n	801df04 <memmove+0x24>

0801df14 <_free_r>:
 801df14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801df16:	2900      	cmp	r1, #0
 801df18:	d048      	beq.n	801dfac <_free_r+0x98>
 801df1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801df1e:	9001      	str	r0, [sp, #4]
 801df20:	2b00      	cmp	r3, #0
 801df22:	f1a1 0404 	sub.w	r4, r1, #4
 801df26:	bfb8      	it	lt
 801df28:	18e4      	addlt	r4, r4, r3
 801df2a:	f000 f8d3 	bl	801e0d4 <__malloc_lock>
 801df2e:	4a20      	ldr	r2, [pc, #128]	; (801dfb0 <_free_r+0x9c>)
 801df30:	9801      	ldr	r0, [sp, #4]
 801df32:	6813      	ldr	r3, [r2, #0]
 801df34:	4615      	mov	r5, r2
 801df36:	b933      	cbnz	r3, 801df46 <_free_r+0x32>
 801df38:	6063      	str	r3, [r4, #4]
 801df3a:	6014      	str	r4, [r2, #0]
 801df3c:	b003      	add	sp, #12
 801df3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801df42:	f000 b8cd 	b.w	801e0e0 <__malloc_unlock>
 801df46:	42a3      	cmp	r3, r4
 801df48:	d90b      	bls.n	801df62 <_free_r+0x4e>
 801df4a:	6821      	ldr	r1, [r4, #0]
 801df4c:	1862      	adds	r2, r4, r1
 801df4e:	4293      	cmp	r3, r2
 801df50:	bf04      	itt	eq
 801df52:	681a      	ldreq	r2, [r3, #0]
 801df54:	685b      	ldreq	r3, [r3, #4]
 801df56:	6063      	str	r3, [r4, #4]
 801df58:	bf04      	itt	eq
 801df5a:	1852      	addeq	r2, r2, r1
 801df5c:	6022      	streq	r2, [r4, #0]
 801df5e:	602c      	str	r4, [r5, #0]
 801df60:	e7ec      	b.n	801df3c <_free_r+0x28>
 801df62:	461a      	mov	r2, r3
 801df64:	685b      	ldr	r3, [r3, #4]
 801df66:	b10b      	cbz	r3, 801df6c <_free_r+0x58>
 801df68:	42a3      	cmp	r3, r4
 801df6a:	d9fa      	bls.n	801df62 <_free_r+0x4e>
 801df6c:	6811      	ldr	r1, [r2, #0]
 801df6e:	1855      	adds	r5, r2, r1
 801df70:	42a5      	cmp	r5, r4
 801df72:	d10b      	bne.n	801df8c <_free_r+0x78>
 801df74:	6824      	ldr	r4, [r4, #0]
 801df76:	4421      	add	r1, r4
 801df78:	1854      	adds	r4, r2, r1
 801df7a:	42a3      	cmp	r3, r4
 801df7c:	6011      	str	r1, [r2, #0]
 801df7e:	d1dd      	bne.n	801df3c <_free_r+0x28>
 801df80:	681c      	ldr	r4, [r3, #0]
 801df82:	685b      	ldr	r3, [r3, #4]
 801df84:	6053      	str	r3, [r2, #4]
 801df86:	4421      	add	r1, r4
 801df88:	6011      	str	r1, [r2, #0]
 801df8a:	e7d7      	b.n	801df3c <_free_r+0x28>
 801df8c:	d902      	bls.n	801df94 <_free_r+0x80>
 801df8e:	230c      	movs	r3, #12
 801df90:	6003      	str	r3, [r0, #0]
 801df92:	e7d3      	b.n	801df3c <_free_r+0x28>
 801df94:	6825      	ldr	r5, [r4, #0]
 801df96:	1961      	adds	r1, r4, r5
 801df98:	428b      	cmp	r3, r1
 801df9a:	bf04      	itt	eq
 801df9c:	6819      	ldreq	r1, [r3, #0]
 801df9e:	685b      	ldreq	r3, [r3, #4]
 801dfa0:	6063      	str	r3, [r4, #4]
 801dfa2:	bf04      	itt	eq
 801dfa4:	1949      	addeq	r1, r1, r5
 801dfa6:	6021      	streq	r1, [r4, #0]
 801dfa8:	6054      	str	r4, [r2, #4]
 801dfaa:	e7c7      	b.n	801df3c <_free_r+0x28>
 801dfac:	b003      	add	sp, #12
 801dfae:	bd30      	pop	{r4, r5, pc}
 801dfb0:	20005100 	.word	0x20005100

0801dfb4 <_malloc_r>:
 801dfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfb6:	1ccd      	adds	r5, r1, #3
 801dfb8:	f025 0503 	bic.w	r5, r5, #3
 801dfbc:	3508      	adds	r5, #8
 801dfbe:	2d0c      	cmp	r5, #12
 801dfc0:	bf38      	it	cc
 801dfc2:	250c      	movcc	r5, #12
 801dfc4:	2d00      	cmp	r5, #0
 801dfc6:	4606      	mov	r6, r0
 801dfc8:	db01      	blt.n	801dfce <_malloc_r+0x1a>
 801dfca:	42a9      	cmp	r1, r5
 801dfcc:	d903      	bls.n	801dfd6 <_malloc_r+0x22>
 801dfce:	230c      	movs	r3, #12
 801dfd0:	6033      	str	r3, [r6, #0]
 801dfd2:	2000      	movs	r0, #0
 801dfd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dfd6:	f000 f87d 	bl	801e0d4 <__malloc_lock>
 801dfda:	4921      	ldr	r1, [pc, #132]	; (801e060 <_malloc_r+0xac>)
 801dfdc:	680a      	ldr	r2, [r1, #0]
 801dfde:	4614      	mov	r4, r2
 801dfe0:	b99c      	cbnz	r4, 801e00a <_malloc_r+0x56>
 801dfe2:	4f20      	ldr	r7, [pc, #128]	; (801e064 <_malloc_r+0xb0>)
 801dfe4:	683b      	ldr	r3, [r7, #0]
 801dfe6:	b923      	cbnz	r3, 801dff2 <_malloc_r+0x3e>
 801dfe8:	4621      	mov	r1, r4
 801dfea:	4630      	mov	r0, r6
 801dfec:	f000 f862 	bl	801e0b4 <_sbrk_r>
 801dff0:	6038      	str	r0, [r7, #0]
 801dff2:	4629      	mov	r1, r5
 801dff4:	4630      	mov	r0, r6
 801dff6:	f000 f85d 	bl	801e0b4 <_sbrk_r>
 801dffa:	1c43      	adds	r3, r0, #1
 801dffc:	d123      	bne.n	801e046 <_malloc_r+0x92>
 801dffe:	230c      	movs	r3, #12
 801e000:	6033      	str	r3, [r6, #0]
 801e002:	4630      	mov	r0, r6
 801e004:	f000 f86c 	bl	801e0e0 <__malloc_unlock>
 801e008:	e7e3      	b.n	801dfd2 <_malloc_r+0x1e>
 801e00a:	6823      	ldr	r3, [r4, #0]
 801e00c:	1b5b      	subs	r3, r3, r5
 801e00e:	d417      	bmi.n	801e040 <_malloc_r+0x8c>
 801e010:	2b0b      	cmp	r3, #11
 801e012:	d903      	bls.n	801e01c <_malloc_r+0x68>
 801e014:	6023      	str	r3, [r4, #0]
 801e016:	441c      	add	r4, r3
 801e018:	6025      	str	r5, [r4, #0]
 801e01a:	e004      	b.n	801e026 <_malloc_r+0x72>
 801e01c:	6863      	ldr	r3, [r4, #4]
 801e01e:	42a2      	cmp	r2, r4
 801e020:	bf0c      	ite	eq
 801e022:	600b      	streq	r3, [r1, #0]
 801e024:	6053      	strne	r3, [r2, #4]
 801e026:	4630      	mov	r0, r6
 801e028:	f000 f85a 	bl	801e0e0 <__malloc_unlock>
 801e02c:	f104 000b 	add.w	r0, r4, #11
 801e030:	1d23      	adds	r3, r4, #4
 801e032:	f020 0007 	bic.w	r0, r0, #7
 801e036:	1ac2      	subs	r2, r0, r3
 801e038:	d0cc      	beq.n	801dfd4 <_malloc_r+0x20>
 801e03a:	1a1b      	subs	r3, r3, r0
 801e03c:	50a3      	str	r3, [r4, r2]
 801e03e:	e7c9      	b.n	801dfd4 <_malloc_r+0x20>
 801e040:	4622      	mov	r2, r4
 801e042:	6864      	ldr	r4, [r4, #4]
 801e044:	e7cc      	b.n	801dfe0 <_malloc_r+0x2c>
 801e046:	1cc4      	adds	r4, r0, #3
 801e048:	f024 0403 	bic.w	r4, r4, #3
 801e04c:	42a0      	cmp	r0, r4
 801e04e:	d0e3      	beq.n	801e018 <_malloc_r+0x64>
 801e050:	1a21      	subs	r1, r4, r0
 801e052:	4630      	mov	r0, r6
 801e054:	f000 f82e 	bl	801e0b4 <_sbrk_r>
 801e058:	3001      	adds	r0, #1
 801e05a:	d1dd      	bne.n	801e018 <_malloc_r+0x64>
 801e05c:	e7cf      	b.n	801dffe <_malloc_r+0x4a>
 801e05e:	bf00      	nop
 801e060:	20005100 	.word	0x20005100
 801e064:	20005104 	.word	0x20005104

0801e068 <_realloc_r>:
 801e068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e06a:	4607      	mov	r7, r0
 801e06c:	4614      	mov	r4, r2
 801e06e:	460e      	mov	r6, r1
 801e070:	b921      	cbnz	r1, 801e07c <_realloc_r+0x14>
 801e072:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e076:	4611      	mov	r1, r2
 801e078:	f7ff bf9c 	b.w	801dfb4 <_malloc_r>
 801e07c:	b922      	cbnz	r2, 801e088 <_realloc_r+0x20>
 801e07e:	f7ff ff49 	bl	801df14 <_free_r>
 801e082:	4625      	mov	r5, r4
 801e084:	4628      	mov	r0, r5
 801e086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e088:	f000 f830 	bl	801e0ec <_malloc_usable_size_r>
 801e08c:	42a0      	cmp	r0, r4
 801e08e:	d20f      	bcs.n	801e0b0 <_realloc_r+0x48>
 801e090:	4621      	mov	r1, r4
 801e092:	4638      	mov	r0, r7
 801e094:	f7ff ff8e 	bl	801dfb4 <_malloc_r>
 801e098:	4605      	mov	r5, r0
 801e09a:	2800      	cmp	r0, #0
 801e09c:	d0f2      	beq.n	801e084 <_realloc_r+0x1c>
 801e09e:	4631      	mov	r1, r6
 801e0a0:	4622      	mov	r2, r4
 801e0a2:	f7ff fa0d 	bl	801d4c0 <memcpy>
 801e0a6:	4631      	mov	r1, r6
 801e0a8:	4638      	mov	r0, r7
 801e0aa:	f7ff ff33 	bl	801df14 <_free_r>
 801e0ae:	e7e9      	b.n	801e084 <_realloc_r+0x1c>
 801e0b0:	4635      	mov	r5, r6
 801e0b2:	e7e7      	b.n	801e084 <_realloc_r+0x1c>

0801e0b4 <_sbrk_r>:
 801e0b4:	b538      	push	{r3, r4, r5, lr}
 801e0b6:	4d06      	ldr	r5, [pc, #24]	; (801e0d0 <_sbrk_r+0x1c>)
 801e0b8:	2300      	movs	r3, #0
 801e0ba:	4604      	mov	r4, r0
 801e0bc:	4608      	mov	r0, r1
 801e0be:	602b      	str	r3, [r5, #0]
 801e0c0:	f7f0 fb50 	bl	800e764 <_sbrk>
 801e0c4:	1c43      	adds	r3, r0, #1
 801e0c6:	d102      	bne.n	801e0ce <_sbrk_r+0x1a>
 801e0c8:	682b      	ldr	r3, [r5, #0]
 801e0ca:	b103      	cbz	r3, 801e0ce <_sbrk_r+0x1a>
 801e0cc:	6023      	str	r3, [r4, #0]
 801e0ce:	bd38      	pop	{r3, r4, r5, pc}
 801e0d0:	200091fc 	.word	0x200091fc

0801e0d4 <__malloc_lock>:
 801e0d4:	4801      	ldr	r0, [pc, #4]	; (801e0dc <__malloc_lock+0x8>)
 801e0d6:	f000 b811 	b.w	801e0fc <__retarget_lock_acquire_recursive>
 801e0da:	bf00      	nop
 801e0dc:	20009204 	.word	0x20009204

0801e0e0 <__malloc_unlock>:
 801e0e0:	4801      	ldr	r0, [pc, #4]	; (801e0e8 <__malloc_unlock+0x8>)
 801e0e2:	f000 b80c 	b.w	801e0fe <__retarget_lock_release_recursive>
 801e0e6:	bf00      	nop
 801e0e8:	20009204 	.word	0x20009204

0801e0ec <_malloc_usable_size_r>:
 801e0ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e0f0:	1f18      	subs	r0, r3, #4
 801e0f2:	2b00      	cmp	r3, #0
 801e0f4:	bfbc      	itt	lt
 801e0f6:	580b      	ldrlt	r3, [r1, r0]
 801e0f8:	18c0      	addlt	r0, r0, r3
 801e0fa:	4770      	bx	lr

0801e0fc <__retarget_lock_acquire_recursive>:
 801e0fc:	4770      	bx	lr

0801e0fe <__retarget_lock_release_recursive>:
 801e0fe:	4770      	bx	lr

0801e100 <_init>:
 801e100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e102:	bf00      	nop
 801e104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e106:	bc08      	pop	{r3}
 801e108:	469e      	mov	lr, r3
 801e10a:	4770      	bx	lr

0801e10c <_fini>:
 801e10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e10e:	bf00      	nop
 801e110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e112:	bc08      	pop	{r3}
 801e114:	469e      	mov	lr, r3
 801e116:	4770      	bx	lr

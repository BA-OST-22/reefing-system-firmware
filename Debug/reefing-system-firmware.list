
reefing-system-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7cc  0800c000  0800c000  0001c000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0801b7cc  0801b7cc  0002b7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bc30  0801bc30  0003022c  2**0
                  CONTENTS
  4 .ARM          00000008  0801bc30  0801bc30  0002bc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bc38  0801bc38  0003022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bc38  0801bc38  0002bc38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bc3c  0801bc3c  0002bc3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0801bc40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000085b0  2000022c  0801be6c  0003022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200087dc  0801be6c  000387dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00052308  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008252  00000000  00000000  00082564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e18  00000000  00000000  0008a7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002ad8  00000000  00000000  0008d5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b3ae  00000000  00000000  000900a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003457f  00000000  00000000  0009b456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3d6e  00000000  00000000  000cf9d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00183743  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c414  00000000  00000000  00183798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	2000022c 	.word	0x2000022c
 800c01c:	00000000 	.word	0x00000000
 800c020:	0801b7b4 	.word	0x0801b7b4

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	20000230 	.word	0x20000230
 800c03c:	0801b7b4 	.word	0x0801b7b4

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <memchr>:
 800c050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c054:	2a10      	cmp	r2, #16
 800c056:	db2b      	blt.n	800c0b0 <memchr+0x60>
 800c058:	f010 0f07 	tst.w	r0, #7
 800c05c:	d008      	beq.n	800c070 <memchr+0x20>
 800c05e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c062:	3a01      	subs	r2, #1
 800c064:	428b      	cmp	r3, r1
 800c066:	d02d      	beq.n	800c0c4 <memchr+0x74>
 800c068:	f010 0f07 	tst.w	r0, #7
 800c06c:	b342      	cbz	r2, 800c0c0 <memchr+0x70>
 800c06e:	d1f6      	bne.n	800c05e <memchr+0xe>
 800c070:	b4f0      	push	{r4, r5, r6, r7}
 800c072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800c076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800c07a:	f022 0407 	bic.w	r4, r2, #7
 800c07e:	f07f 0700 	mvns.w	r7, #0
 800c082:	2300      	movs	r3, #0
 800c084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800c088:	3c08      	subs	r4, #8
 800c08a:	ea85 0501 	eor.w	r5, r5, r1
 800c08e:	ea86 0601 	eor.w	r6, r6, r1
 800c092:	fa85 f547 	uadd8	r5, r5, r7
 800c096:	faa3 f587 	sel	r5, r3, r7
 800c09a:	fa86 f647 	uadd8	r6, r6, r7
 800c09e:	faa5 f687 	sel	r6, r5, r7
 800c0a2:	b98e      	cbnz	r6, 800c0c8 <memchr+0x78>
 800c0a4:	d1ee      	bne.n	800c084 <memchr+0x34>
 800c0a6:	bcf0      	pop	{r4, r5, r6, r7}
 800c0a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c0ac:	f002 0207 	and.w	r2, r2, #7
 800c0b0:	b132      	cbz	r2, 800c0c0 <memchr+0x70>
 800c0b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c0b6:	3a01      	subs	r2, #1
 800c0b8:	ea83 0301 	eor.w	r3, r3, r1
 800c0bc:	b113      	cbz	r3, 800c0c4 <memchr+0x74>
 800c0be:	d1f8      	bne.n	800c0b2 <memchr+0x62>
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	4770      	bx	lr
 800c0c4:	3801      	subs	r0, #1
 800c0c6:	4770      	bx	lr
 800c0c8:	2d00      	cmp	r5, #0
 800c0ca:	bf06      	itte	eq
 800c0cc:	4635      	moveq	r5, r6
 800c0ce:	3803      	subeq	r0, #3
 800c0d0:	3807      	subne	r0, #7
 800c0d2:	f015 0f01 	tst.w	r5, #1
 800c0d6:	d107      	bne.n	800c0e8 <memchr+0x98>
 800c0d8:	3001      	adds	r0, #1
 800c0da:	f415 7f80 	tst.w	r5, #256	; 0x100
 800c0de:	bf02      	ittt	eq
 800c0e0:	3001      	addeq	r0, #1
 800c0e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 800c0e6:	3001      	addeq	r0, #1
 800c0e8:	bcf0      	pop	{r4, r5, r6, r7}
 800c0ea:	3801      	subs	r0, #1
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop

0800c0f0 <__aeabi_uldivmod>:
 800c0f0:	b953      	cbnz	r3, 800c108 <__aeabi_uldivmod+0x18>
 800c0f2:	b94a      	cbnz	r2, 800c108 <__aeabi_uldivmod+0x18>
 800c0f4:	2900      	cmp	r1, #0
 800c0f6:	bf08      	it	eq
 800c0f8:	2800      	cmpeq	r0, #0
 800c0fa:	bf1c      	itt	ne
 800c0fc:	f04f 31ff 	movne.w	r1, #4294967295
 800c100:	f04f 30ff 	movne.w	r0, #4294967295
 800c104:	f000 b96e 	b.w	800c3e4 <__aeabi_idiv0>
 800c108:	f1ad 0c08 	sub.w	ip, sp, #8
 800c10c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c110:	f000 f806 	bl	800c120 <__udivmoddi4>
 800c114:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c11c:	b004      	add	sp, #16
 800c11e:	4770      	bx	lr

0800c120 <__udivmoddi4>:
 800c120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c124:	9d08      	ldr	r5, [sp, #32]
 800c126:	4604      	mov	r4, r0
 800c128:	468c      	mov	ip, r1
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f040 8083 	bne.w	800c236 <__udivmoddi4+0x116>
 800c130:	428a      	cmp	r2, r1
 800c132:	4617      	mov	r7, r2
 800c134:	d947      	bls.n	800c1c6 <__udivmoddi4+0xa6>
 800c136:	fab2 f282 	clz	r2, r2
 800c13a:	b142      	cbz	r2, 800c14e <__udivmoddi4+0x2e>
 800c13c:	f1c2 0020 	rsb	r0, r2, #32
 800c140:	fa24 f000 	lsr.w	r0, r4, r0
 800c144:	4091      	lsls	r1, r2
 800c146:	4097      	lsls	r7, r2
 800c148:	ea40 0c01 	orr.w	ip, r0, r1
 800c14c:	4094      	lsls	r4, r2
 800c14e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800c152:	0c23      	lsrs	r3, r4, #16
 800c154:	fbbc f6f8 	udiv	r6, ip, r8
 800c158:	fa1f fe87 	uxth.w	lr, r7
 800c15c:	fb08 c116 	mls	r1, r8, r6, ip
 800c160:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c164:	fb06 f10e 	mul.w	r1, r6, lr
 800c168:	4299      	cmp	r1, r3
 800c16a:	d909      	bls.n	800c180 <__udivmoddi4+0x60>
 800c16c:	18fb      	adds	r3, r7, r3
 800c16e:	f106 30ff 	add.w	r0, r6, #4294967295
 800c172:	f080 8119 	bcs.w	800c3a8 <__udivmoddi4+0x288>
 800c176:	4299      	cmp	r1, r3
 800c178:	f240 8116 	bls.w	800c3a8 <__udivmoddi4+0x288>
 800c17c:	3e02      	subs	r6, #2
 800c17e:	443b      	add	r3, r7
 800c180:	1a5b      	subs	r3, r3, r1
 800c182:	b2a4      	uxth	r4, r4
 800c184:	fbb3 f0f8 	udiv	r0, r3, r8
 800c188:	fb08 3310 	mls	r3, r8, r0, r3
 800c18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c190:	fb00 fe0e 	mul.w	lr, r0, lr
 800c194:	45a6      	cmp	lr, r4
 800c196:	d909      	bls.n	800c1ac <__udivmoddi4+0x8c>
 800c198:	193c      	adds	r4, r7, r4
 800c19a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c19e:	f080 8105 	bcs.w	800c3ac <__udivmoddi4+0x28c>
 800c1a2:	45a6      	cmp	lr, r4
 800c1a4:	f240 8102 	bls.w	800c3ac <__udivmoddi4+0x28c>
 800c1a8:	3802      	subs	r0, #2
 800c1aa:	443c      	add	r4, r7
 800c1ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c1b0:	eba4 040e 	sub.w	r4, r4, lr
 800c1b4:	2600      	movs	r6, #0
 800c1b6:	b11d      	cbz	r5, 800c1c0 <__udivmoddi4+0xa0>
 800c1b8:	40d4      	lsrs	r4, r2
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	e9c5 4300 	strd	r4, r3, [r5]
 800c1c0:	4631      	mov	r1, r6
 800c1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c6:	b902      	cbnz	r2, 800c1ca <__udivmoddi4+0xaa>
 800c1c8:	deff      	udf	#255	; 0xff
 800c1ca:	fab2 f282 	clz	r2, r2
 800c1ce:	2a00      	cmp	r2, #0
 800c1d0:	d150      	bne.n	800c274 <__udivmoddi4+0x154>
 800c1d2:	1bcb      	subs	r3, r1, r7
 800c1d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c1d8:	fa1f f887 	uxth.w	r8, r7
 800c1dc:	2601      	movs	r6, #1
 800c1de:	fbb3 fcfe 	udiv	ip, r3, lr
 800c1e2:	0c21      	lsrs	r1, r4, #16
 800c1e4:	fb0e 331c 	mls	r3, lr, ip, r3
 800c1e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c1ec:	fb08 f30c 	mul.w	r3, r8, ip
 800c1f0:	428b      	cmp	r3, r1
 800c1f2:	d907      	bls.n	800c204 <__udivmoddi4+0xe4>
 800c1f4:	1879      	adds	r1, r7, r1
 800c1f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c1fa:	d202      	bcs.n	800c202 <__udivmoddi4+0xe2>
 800c1fc:	428b      	cmp	r3, r1
 800c1fe:	f200 80e9 	bhi.w	800c3d4 <__udivmoddi4+0x2b4>
 800c202:	4684      	mov	ip, r0
 800c204:	1ac9      	subs	r1, r1, r3
 800c206:	b2a3      	uxth	r3, r4
 800c208:	fbb1 f0fe 	udiv	r0, r1, lr
 800c20c:	fb0e 1110 	mls	r1, lr, r0, r1
 800c210:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800c214:	fb08 f800 	mul.w	r8, r8, r0
 800c218:	45a0      	cmp	r8, r4
 800c21a:	d907      	bls.n	800c22c <__udivmoddi4+0x10c>
 800c21c:	193c      	adds	r4, r7, r4
 800c21e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c222:	d202      	bcs.n	800c22a <__udivmoddi4+0x10a>
 800c224:	45a0      	cmp	r8, r4
 800c226:	f200 80d9 	bhi.w	800c3dc <__udivmoddi4+0x2bc>
 800c22a:	4618      	mov	r0, r3
 800c22c:	eba4 0408 	sub.w	r4, r4, r8
 800c230:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800c234:	e7bf      	b.n	800c1b6 <__udivmoddi4+0x96>
 800c236:	428b      	cmp	r3, r1
 800c238:	d909      	bls.n	800c24e <__udivmoddi4+0x12e>
 800c23a:	2d00      	cmp	r5, #0
 800c23c:	f000 80b1 	beq.w	800c3a2 <__udivmoddi4+0x282>
 800c240:	2600      	movs	r6, #0
 800c242:	e9c5 0100 	strd	r0, r1, [r5]
 800c246:	4630      	mov	r0, r6
 800c248:	4631      	mov	r1, r6
 800c24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c24e:	fab3 f683 	clz	r6, r3
 800c252:	2e00      	cmp	r6, #0
 800c254:	d14a      	bne.n	800c2ec <__udivmoddi4+0x1cc>
 800c256:	428b      	cmp	r3, r1
 800c258:	d302      	bcc.n	800c260 <__udivmoddi4+0x140>
 800c25a:	4282      	cmp	r2, r0
 800c25c:	f200 80b8 	bhi.w	800c3d0 <__udivmoddi4+0x2b0>
 800c260:	1a84      	subs	r4, r0, r2
 800c262:	eb61 0103 	sbc.w	r1, r1, r3
 800c266:	2001      	movs	r0, #1
 800c268:	468c      	mov	ip, r1
 800c26a:	2d00      	cmp	r5, #0
 800c26c:	d0a8      	beq.n	800c1c0 <__udivmoddi4+0xa0>
 800c26e:	e9c5 4c00 	strd	r4, ip, [r5]
 800c272:	e7a5      	b.n	800c1c0 <__udivmoddi4+0xa0>
 800c274:	f1c2 0320 	rsb	r3, r2, #32
 800c278:	fa20 f603 	lsr.w	r6, r0, r3
 800c27c:	4097      	lsls	r7, r2
 800c27e:	fa01 f002 	lsl.w	r0, r1, r2
 800c282:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c286:	40d9      	lsrs	r1, r3
 800c288:	4330      	orrs	r0, r6
 800c28a:	0c03      	lsrs	r3, r0, #16
 800c28c:	fbb1 f6fe 	udiv	r6, r1, lr
 800c290:	fa1f f887 	uxth.w	r8, r7
 800c294:	fb0e 1116 	mls	r1, lr, r6, r1
 800c298:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c29c:	fb06 f108 	mul.w	r1, r6, r8
 800c2a0:	4299      	cmp	r1, r3
 800c2a2:	fa04 f402 	lsl.w	r4, r4, r2
 800c2a6:	d909      	bls.n	800c2bc <__udivmoddi4+0x19c>
 800c2a8:	18fb      	adds	r3, r7, r3
 800c2aa:	f106 3cff 	add.w	ip, r6, #4294967295
 800c2ae:	f080 808d 	bcs.w	800c3cc <__udivmoddi4+0x2ac>
 800c2b2:	4299      	cmp	r1, r3
 800c2b4:	f240 808a 	bls.w	800c3cc <__udivmoddi4+0x2ac>
 800c2b8:	3e02      	subs	r6, #2
 800c2ba:	443b      	add	r3, r7
 800c2bc:	1a5b      	subs	r3, r3, r1
 800c2be:	b281      	uxth	r1, r0
 800c2c0:	fbb3 f0fe 	udiv	r0, r3, lr
 800c2c4:	fb0e 3310 	mls	r3, lr, r0, r3
 800c2c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c2cc:	fb00 f308 	mul.w	r3, r0, r8
 800c2d0:	428b      	cmp	r3, r1
 800c2d2:	d907      	bls.n	800c2e4 <__udivmoddi4+0x1c4>
 800c2d4:	1879      	adds	r1, r7, r1
 800c2d6:	f100 3cff 	add.w	ip, r0, #4294967295
 800c2da:	d273      	bcs.n	800c3c4 <__udivmoddi4+0x2a4>
 800c2dc:	428b      	cmp	r3, r1
 800c2de:	d971      	bls.n	800c3c4 <__udivmoddi4+0x2a4>
 800c2e0:	3802      	subs	r0, #2
 800c2e2:	4439      	add	r1, r7
 800c2e4:	1acb      	subs	r3, r1, r3
 800c2e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800c2ea:	e778      	b.n	800c1de <__udivmoddi4+0xbe>
 800c2ec:	f1c6 0c20 	rsb	ip, r6, #32
 800c2f0:	fa03 f406 	lsl.w	r4, r3, r6
 800c2f4:	fa22 f30c 	lsr.w	r3, r2, ip
 800c2f8:	431c      	orrs	r4, r3
 800c2fa:	fa20 f70c 	lsr.w	r7, r0, ip
 800c2fe:	fa01 f306 	lsl.w	r3, r1, r6
 800c302:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800c306:	fa21 f10c 	lsr.w	r1, r1, ip
 800c30a:	431f      	orrs	r7, r3
 800c30c:	0c3b      	lsrs	r3, r7, #16
 800c30e:	fbb1 f9fe 	udiv	r9, r1, lr
 800c312:	fa1f f884 	uxth.w	r8, r4
 800c316:	fb0e 1119 	mls	r1, lr, r9, r1
 800c31a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800c31e:	fb09 fa08 	mul.w	sl, r9, r8
 800c322:	458a      	cmp	sl, r1
 800c324:	fa02 f206 	lsl.w	r2, r2, r6
 800c328:	fa00 f306 	lsl.w	r3, r0, r6
 800c32c:	d908      	bls.n	800c340 <__udivmoddi4+0x220>
 800c32e:	1861      	adds	r1, r4, r1
 800c330:	f109 30ff 	add.w	r0, r9, #4294967295
 800c334:	d248      	bcs.n	800c3c8 <__udivmoddi4+0x2a8>
 800c336:	458a      	cmp	sl, r1
 800c338:	d946      	bls.n	800c3c8 <__udivmoddi4+0x2a8>
 800c33a:	f1a9 0902 	sub.w	r9, r9, #2
 800c33e:	4421      	add	r1, r4
 800c340:	eba1 010a 	sub.w	r1, r1, sl
 800c344:	b2bf      	uxth	r7, r7
 800c346:	fbb1 f0fe 	udiv	r0, r1, lr
 800c34a:	fb0e 1110 	mls	r1, lr, r0, r1
 800c34e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c352:	fb00 f808 	mul.w	r8, r0, r8
 800c356:	45b8      	cmp	r8, r7
 800c358:	d907      	bls.n	800c36a <__udivmoddi4+0x24a>
 800c35a:	19e7      	adds	r7, r4, r7
 800c35c:	f100 31ff 	add.w	r1, r0, #4294967295
 800c360:	d22e      	bcs.n	800c3c0 <__udivmoddi4+0x2a0>
 800c362:	45b8      	cmp	r8, r7
 800c364:	d92c      	bls.n	800c3c0 <__udivmoddi4+0x2a0>
 800c366:	3802      	subs	r0, #2
 800c368:	4427      	add	r7, r4
 800c36a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c36e:	eba7 0708 	sub.w	r7, r7, r8
 800c372:	fba0 8902 	umull	r8, r9, r0, r2
 800c376:	454f      	cmp	r7, r9
 800c378:	46c6      	mov	lr, r8
 800c37a:	4649      	mov	r1, r9
 800c37c:	d31a      	bcc.n	800c3b4 <__udivmoddi4+0x294>
 800c37e:	d017      	beq.n	800c3b0 <__udivmoddi4+0x290>
 800c380:	b15d      	cbz	r5, 800c39a <__udivmoddi4+0x27a>
 800c382:	ebb3 020e 	subs.w	r2, r3, lr
 800c386:	eb67 0701 	sbc.w	r7, r7, r1
 800c38a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800c38e:	40f2      	lsrs	r2, r6
 800c390:	ea4c 0202 	orr.w	r2, ip, r2
 800c394:	40f7      	lsrs	r7, r6
 800c396:	e9c5 2700 	strd	r2, r7, [r5]
 800c39a:	2600      	movs	r6, #0
 800c39c:	4631      	mov	r1, r6
 800c39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3a2:	462e      	mov	r6, r5
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	e70b      	b.n	800c1c0 <__udivmoddi4+0xa0>
 800c3a8:	4606      	mov	r6, r0
 800c3aa:	e6e9      	b.n	800c180 <__udivmoddi4+0x60>
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	e6fd      	b.n	800c1ac <__udivmoddi4+0x8c>
 800c3b0:	4543      	cmp	r3, r8
 800c3b2:	d2e5      	bcs.n	800c380 <__udivmoddi4+0x260>
 800c3b4:	ebb8 0e02 	subs.w	lr, r8, r2
 800c3b8:	eb69 0104 	sbc.w	r1, r9, r4
 800c3bc:	3801      	subs	r0, #1
 800c3be:	e7df      	b.n	800c380 <__udivmoddi4+0x260>
 800c3c0:	4608      	mov	r0, r1
 800c3c2:	e7d2      	b.n	800c36a <__udivmoddi4+0x24a>
 800c3c4:	4660      	mov	r0, ip
 800c3c6:	e78d      	b.n	800c2e4 <__udivmoddi4+0x1c4>
 800c3c8:	4681      	mov	r9, r0
 800c3ca:	e7b9      	b.n	800c340 <__udivmoddi4+0x220>
 800c3cc:	4666      	mov	r6, ip
 800c3ce:	e775      	b.n	800c2bc <__udivmoddi4+0x19c>
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	e74a      	b.n	800c26a <__udivmoddi4+0x14a>
 800c3d4:	f1ac 0c02 	sub.w	ip, ip, #2
 800c3d8:	4439      	add	r1, r7
 800c3da:	e713      	b.n	800c204 <__udivmoddi4+0xe4>
 800c3dc:	3802      	subs	r0, #2
 800c3de:	443c      	add	r4, r7
 800c3e0:	e724      	b.n	800c22c <__udivmoddi4+0x10c>
 800c3e2:	bf00      	nop

0800c3e4 <__aeabi_idiv0>:
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop

0800c3e8 <config_init>:
									  .config.timer_duration = 0};

config_u global_config = {};


void config_init() {
 800c3e8:	b480      	push	{r7}
 800c3ea:	af00      	add	r7, sp, #0

}
 800c3ec:	bf00      	nop
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr
	...

0800c3f8 <config_defaults>:

void config_defaults() {
 800c3f8:	b490      	push	{r4, r7}
 800c3fa:	af00      	add	r7, sp, #0
	memcpy(&global_config, &DEFAULT_CONFIG, sizeof(global_config));
 800c3fc:	4a04      	ldr	r2, [pc, #16]	; (800c410 <config_defaults+0x18>)
 800c3fe:	4b05      	ldr	r3, [pc, #20]	; (800c414 <config_defaults+0x1c>)
 800c400:	4614      	mov	r4, r2
 800c402:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c404:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800c408:	bf00      	nop
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bc90      	pop	{r4, r7}
 800c40e:	4770      	bx	lr
 800c410:	20000248 	.word	0x20000248
 800c414:	0801ba9c 	.word	0x0801ba9c

0800c418 <config_load>:

/** persistence functions **/
void config_load() {
 800c418:	b580      	push	{r7, lr}
 800c41a:	af00      	add	r7, sp, #0
  ee_read(0, sizeof(config_t), global_config.config_array);
 800c41c:	4a03      	ldr	r2, [pc, #12]	; (800c42c <config_load+0x14>)
 800c41e:	2110      	movs	r1, #16
 800c420:	2000      	movs	r0, #0
 800c422:	f000 f84d 	bl	800c4c0 <ee_read>
}
 800c426:	bf00      	nop
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	20000248 	.word	0x20000248

0800c430 <config_save>:


bool config_save() {
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
  bool status = false;
 800c436:	2300      	movs	r3, #0
 800c438:	71fb      	strb	r3, [r7, #7]
  status = ee_format();
 800c43a:	f000 f817 	bl	800c46c <ee_format>
 800c43e:	4603      	mov	r3, r0
 800c440:	71fb      	strb	r3, [r7, #7]
  if(status == false) return status;
 800c442:	79fb      	ldrb	r3, [r7, #7]
 800c444:	f083 0301 	eor.w	r3, r3, #1
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d001      	beq.n	800c452 <config_save+0x22>
 800c44e:	79fb      	ldrb	r3, [r7, #7]
 800c450:	e005      	b.n	800c45e <config_save+0x2e>
  return ee_write(0, sizeof(config_t), global_config.config_array);
 800c452:	4a05      	ldr	r2, [pc, #20]	; (800c468 <config_save+0x38>)
 800c454:	2110      	movs	r1, #16
 800c456:	2000      	movs	r0, #0
 800c458:	f000 f861 	bl	800c51e <ee_write>
 800c45c:	4603      	mov	r3, r0
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3708      	adds	r7, #8
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	20000248 	.word	0x20000248

0800c46c <ee_format>:
bool ee_init(void) {
  return true;
}


bool ee_format() {
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af00      	add	r7, sp, #0
  uint32_t error;
  HAL_FLASH_Unlock();
 800c472:	f002 ff2d 	bl	800f2d0 <HAL_FLASH_Unlock>
  FLASH_EraseInitTypeDef flashErase;

  flashErase.NbSectors = 1;
 800c476:	2301      	movs	r3, #1
 800c478:	60fb      	str	r3, [r7, #12]
  flashErase.Sector =  _EE_USE_FLASH_PAGE_OR_SECTOR;
 800c47a:	2301      	movs	r3, #1
 800c47c:	60bb      	str	r3, [r7, #8]
  flashErase.TypeErase = FLASH_TYPEERASE_SECTORS;
 800c47e:	2300      	movs	r3, #0
 800c480:	603b      	str	r3, [r7, #0]
  flashErase.Banks = _EE_FLASH_BANK;
 800c482:	2301      	movs	r3, #1
 800c484:	607b      	str	r3, [r7, #4]
  flashErase.VoltageRange = _EE_VOLTAGE_RANGE;
 800c486:	2302      	movs	r3, #2
 800c488:	613b      	str	r3, [r7, #16]

  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 800c48a:	f107 0214 	add.w	r2, r7, #20
 800c48e:	463b      	mov	r3, r7
 800c490:	4611      	mov	r1, r2
 800c492:	4618      	mov	r0, r3
 800c494:	f003 f88e 	bl	800f5b4 <HAL_FLASHEx_Erase>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d109      	bne.n	800c4b2 <ee_format+0x46>
  {
    HAL_FLASH_Lock();
 800c49e:	f002 ff39 	bl	800f314 <HAL_FLASH_Lock>
    if (error != 0xFFFFFFFF)
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a8:	d001      	beq.n	800c4ae <ee_format+0x42>
      return false;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	e004      	b.n	800c4b8 <ee_format+0x4c>
    else
    {
      return true;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	e002      	b.n	800c4b8 <ee_format+0x4c>
    }
  }
  HAL_FLASH_Lock();
 800c4b2:	f002 ff2f 	bl	800f314 <HAL_FLASH_Lock>
  return false;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3718      	adds	r7, #24
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <ee_read>:

bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data) {
 800c4c0:	b480      	push	{r7}
 800c4c2:	b087      	sub	sp, #28
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c4d6:	d901      	bls.n	800c4dc <ee_read+0x1c>
    return false;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	e01a      	b.n	800c512 <ee_read+0x52>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	617b      	str	r3, [r7, #20]
 800c4e0:	e010      	b.n	800c504 <ee_read+0x44>
  {
    if (data != NULL)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00a      	beq.n	800c4fe <ee_read+0x3e>
    {
      *data = (*(uint8_t*) (i + _EE_ADDR_INUSE));
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800c4ee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800c4f2:	781a      	ldrb	r2, [r3, #0]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	701a      	strb	r2, [r3, #0]
      data++;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	607b      	str	r3, [r7, #4]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	3301      	adds	r3, #1
 800c502:	617b      	str	r3, [r7, #20]
 800c504:	68ba      	ldr	r2, [r7, #8]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	4413      	add	r3, r2
 800c50a:	697a      	ldr	r2, [r7, #20]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d3e8      	bcc.n	800c4e2 <ee_read+0x22>
    }
  }
  return true;
 800c510:	2301      	movs	r3, #1
}
 800c512:	4618      	mov	r0, r3
 800c514:	371c      	adds	r7, #28
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr

0800c51e <ee_write>:

bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data) {
 800c51e:	b580      	push	{r7, lr}
 800c520:	b086      	sub	sp, #24
 800c522:	af00      	add	r7, sp, #0
 800c524:	60f8      	str	r0, [r7, #12]
 800c526:	60b9      	str	r1, [r7, #8]
 800c528:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	4413      	add	r3, r2
 800c530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c534:	d901      	bls.n	800c53a <ee_write+0x1c>
    return false;
 800c536:	2300      	movs	r3, #0
 800c538:	e02b      	b.n	800c592 <ee_write+0x74>
  if (data == NULL)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d101      	bne.n	800c544 <ee_write+0x26>
    return false;
 800c540:	2300      	movs	r3, #0
 800c542:	e026      	b.n	800c592 <ee_write+0x74>
  HAL_FLASH_Unlock();
 800c544:	f002 fec4 	bl	800f2d0 <HAL_FLASH_Unlock>
  for (uint32_t i = 0; i < len ; i++)
 800c548:	2300      	movs	r3, #0
 800c54a:	617b      	str	r3, [r7, #20]
 800c54c:	e01a      	b.n	800c584 <ee_write+0x66>
  {		
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i])) != HAL_OK)
 800c54e:	697a      	ldr	r2, [r7, #20]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	4413      	add	r3, r2
 800c554:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800c558:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	4413      	add	r3, r2
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	b2da      	uxtb	r2, r3
 800c566:	f04f 0300 	mov.w	r3, #0
 800c56a:	2000      	movs	r0, #0
 800c56c:	f002 fe5c 	bl	800f228 <HAL_FLASH_Program>
 800c570:	4603      	mov	r3, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	d003      	beq.n	800c57e <ee_write+0x60>
    {
      HAL_FLASH_Lock();
 800c576:	f002 fecd 	bl	800f314 <HAL_FLASH_Lock>
      return false;
 800c57a:	2300      	movs	r3, #0
 800c57c:	e009      	b.n	800c592 <ee_write+0x74>
  for (uint32_t i = 0; i < len ; i++)
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	3301      	adds	r3, #1
 800c582:	617b      	str	r3, [r7, #20]
 800c584:	697a      	ldr	r2, [r7, #20]
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d3e0      	bcc.n	800c54e <ee_write+0x30>
    }
  }	
  HAL_FLASH_Lock();
 800c58c:	f002 fec2 	bl	800f314 <HAL_FLASH_Lock>
  return true;
 800c590:	2301      	movs	r3, #1
}
 800c592:	4618      	mov	r0, r3
 800c594:	3718      	adds	r7, #24
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
	...

0800c59c <buzzer_set_volume>:
  dev->end_time = osKernelGetTickCount() + duration;
  dev->start = 1;
}

// Set the volume between 0 and 100
void buzzer_set_volume(BUZ_DEV *dev, uint16_t volume) {
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b08a      	sub	sp, #40	; 0x28
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	807b      	strh	r3, [r7, #2]
  if (volume > 100) volume = 100;
 800c5a8:	887b      	ldrh	r3, [r7, #2]
 800c5aa:	2b64      	cmp	r3, #100	; 0x64
 800c5ac:	d901      	bls.n	800c5b2 <buzzer_set_volume+0x16>
 800c5ae:	2364      	movs	r3, #100	; 0x64
 800c5b0:	807b      	strh	r3, [r7, #2]

  TIM_OC_InitTypeDef sConfigOC;
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c5b2:	2360      	movs	r3, #96	; 0x60
 800c5b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = (dev->arr / 200) * volume;  // set the pulse duration
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	891b      	ldrh	r3, [r3, #8]
 800c5ba:	4a19      	ldr	r2, [pc, #100]	; (800c620 <buzzer_set_volume+0x84>)
 800c5bc:	fba2 2303 	umull	r2, r3, r2, r3
 800c5c0:	099b      	lsrs	r3, r3, #6
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	887b      	ldrh	r3, [r7, #2]
 800c5c8:	fb03 f302 	mul.w	r3, r3, r2
 800c5cc:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	61fb      	str	r3, [r7, #28]
  HAL_TIM_PWM_ConfigChannel(dev->timer, &sConfigOC, dev->channel);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6818      	ldr	r0, [r3, #0]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	685a      	ldr	r2, [r3, #4]
 800c5de:	f107 030c 	add.w	r3, r7, #12
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	f006 f9d0 	bl	8012988 <HAL_TIM_PWM_ConfigChannel>

  // Start the pwm channel again if it should be running
  if (dev->started)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	7a9b      	ldrb	r3, [r3, #10]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d008      	beq.n	800c602 <buzzer_set_volume+0x66>
    HAL_TIM_PWM_Start(dev->timer, dev->channel);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	4610      	mov	r0, r2
 800c5fc:	f005 ffa8 	bl	8012550 <HAL_TIM_PWM_Start>
 800c600:	e007      	b.n	800c612 <buzzer_set_volume+0x76>
  else
    HAL_TIM_PWM_Stop(dev->timer, dev->channel);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	4619      	mov	r1, r3
 800c60c:	4610      	mov	r0, r2
 800c60e:	f006 f84f 	bl	80126b0 <HAL_TIM_PWM_Stop>

  dev->volume = volume;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	887a      	ldrh	r2, [r7, #2]
 800c616:	819a      	strh	r2, [r3, #12]
}
 800c618:	bf00      	nop
 800c61a:	3728      	adds	r7, #40	; 0x28
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}
 800c620:	51eb851f 	.word	0x51eb851f

0800c624 <buzzer_set_freq>:

// Set buzzer frequency between 200 and 10kHz
void buzzer_set_freq(BUZ_DEV *dev, uint32_t frequency) {
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
  // FREQ = CORE_FREQ / ((AAR+1) * (PSC+1))
  uint32_t core_freq = HAL_RCC_GetHCLKFreq();
 800c62e:	f005 f875 	bl	801171c <HAL_RCC_GetHCLKFreq>
 800c632:	60f8      	str	r0, [r7, #12]
  uint32_t psc = 1;
 800c634:	2301      	movs	r3, #1
 800c636:	60bb      	str	r3, [r7, #8]
  // guards
  if (frequency > 10000)
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	f242 7210 	movw	r2, #10000	; 0x2710
 800c63e:	4293      	cmp	r3, r2
 800c640:	d903      	bls.n	800c64a <buzzer_set_freq+0x26>
    frequency = 10000;
 800c642:	f242 7310 	movw	r3, #10000	; 0x2710
 800c646:	603b      	str	r3, [r7, #0]
 800c648:	e004      	b.n	800c654 <buzzer_set_freq+0x30>
  else if (frequency < 200)
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	2bc7      	cmp	r3, #199	; 0xc7
 800c64e:	d801      	bhi.n	800c654 <buzzer_set_freq+0x30>
    frequency = 200;
 800c650:	23c8      	movs	r3, #200	; 0xc8
 800c652:	603b      	str	r3, [r7, #0]

  dev->arr = (uint16_t)(core_freq / (frequency * psc + frequency)) - 1;
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	3301      	adds	r3, #1
 800c658:	683a      	ldr	r2, [r7, #0]
 800c65a:	fb02 f303 	mul.w	r3, r2, r3
 800c65e:	68fa      	ldr	r2, [r7, #12]
 800c660:	fbb2 f3f3 	udiv	r3, r2, r3
 800c664:	b29b      	uxth	r3, r3
 800c666:	3b01      	subs	r3, #1
 800c668:	b29a      	uxth	r2, r3
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	811a      	strh	r2, [r3, #8]

  // Update timer period
  dev->timer->Init.Period = dev->arr;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	891a      	ldrh	r2, [r3, #8]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	60da      	str	r2, [r3, #12]
  dev->timer->Init.Prescaler = psc;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	68ba      	ldr	r2, [r7, #8]
 800c67e:	605a      	str	r2, [r3, #4]
  HAL_TIM_PWM_Init(dev->timer);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4618      	mov	r0, r3
 800c686:	f005 ff13 	bl	80124b0 <HAL_TIM_PWM_Init>

  // Update pulse as the freq changed
  buzzer_set_volume(dev, dev->volume);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	899b      	ldrh	r3, [r3, #12]
 800c68e:	4619      	mov	r1, r3
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f7ff ff83 	bl	800c59c <buzzer_set_volume>
}
 800c696:	bf00      	nop
 800c698:	3710      	adds	r7, #16
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}

0800c69e <buzzer_start>:

// Starts pwm timer
void buzzer_start(BUZ_DEV *dev) {
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b082      	sub	sp, #8
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
  dev->started = 1;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	729a      	strb	r2, [r3, #10]
  HAL_TIM_PWM_Start(dev->timer, dev->channel);  // start pwm generation
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681a      	ldr	r2, [r3, #0]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	4610      	mov	r0, r2
 800c6b8:	f005 ff4a 	bl	8012550 <HAL_TIM_PWM_Start>
}
 800c6bc:	bf00      	nop
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <buzzer_stop>:

// Stops pwm timer
void buzzer_stop(BUZ_DEV *dev) {
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  dev->started = 0;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	729a      	strb	r2, [r3, #10]
  HAL_TIM_PWM_Stop(dev->timer, dev->channel);  // stop pwm generation
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	4619      	mov	r1, r3
 800c6dc:	4610      	mov	r0, r2
 800c6de:	f005 ffe7 	bl	80126b0 <HAL_TIM_PWM_Stop>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	2140      	movs	r1, #64	; 0x40
 800c6e6:	4803      	ldr	r0, [pc, #12]	; (800c6f4 <buzzer_stop+0x30>)
 800c6e8:	f003 fa22 	bl	800fb30 <HAL_GPIO_WritePin>
}
 800c6ec:	bf00      	nop
 800c6ee:	3708      	adds	r7, #8
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	40020400 	.word	0x40020400

0800c6f8 <wake_up>:
    SystemClock_Config();
    HAL_ResumeTick();

}

void wake_up(){
 800c6f8:	b480      	push	{r7}
 800c6fa:	af00      	add	r7, sp, #0
	/* Clear Wake Up Flag */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800c6fc:	4b05      	ldr	r3, [pc, #20]	; (800c714 <wake_up+0x1c>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a04      	ldr	r2, [pc, #16]	; (800c714 <wake_up+0x1c>)
 800c702:	f043 0304 	orr.w	r3, r3, #4
 800c706:	6013      	str	r3, [r2, #0]
}
 800c708:	bf00      	nop
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
 800c712:	bf00      	nop
 800c714:	40007000 	.word	0x40007000

0800c718 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	4603      	mov	r3, r0
 800c720:	80fb      	strh	r3, [r7, #6]
  wake_up();
 800c722:	f7ff ffe9 	bl	800c6f8 <wake_up>
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c726:	4a03      	ldr	r2, [pc, #12]	; (800c734 <HAL_GPIO_EXTI_Callback+0x1c>)
 800c728:	88fb      	ldrh	r3, [r7, #6]
 800c72a:	6153      	str	r3, [r2, #20]
}
 800c72c:	bf00      	nop
 800c72e:	3708      	adds	r7, #8
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	40013c00 	.word	0x40013c00

0800c738 <update_fsm>:
	"DESCENT",
	"DEPLOYMENT",
	"RECOVERY",
};

void update_fsm(fsm_t* fsm){
 800c738:	b580      	push	{r7, lr}
 800c73a:	b086      	sub	sp, #24
 800c73c:	af02      	add	r7, sp, #8
 800c73e:	6078      	str	r0, [r7, #4]
	fsm_state_e old_state = fsm->flight_state;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	73fb      	strb	r3, [r7, #15]
	switch(fsm->flight_state){
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	3b01      	subs	r3, #1
 800c74c:	2b07      	cmp	r3, #7
 800c74e:	d833      	bhi.n	800c7b8 <update_fsm+0x80>
 800c750:	a201      	add	r2, pc, #4	; (adr r2, 800c758 <update_fsm+0x20>)
 800c752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c756:	bf00      	nop
 800c758:	0800c779 	.word	0x0800c779
 800c75c:	0800c781 	.word	0x0800c781
 800c760:	0800c789 	.word	0x0800c789
 800c764:	0800c791 	.word	0x0800c791
 800c768:	0800c799 	.word	0x0800c799
 800c76c:	0800c7a1 	.word	0x0800c7a1
 800c770:	0800c7a9 	.word	0x0800c7a9
 800c774:	0800c7b1 	.word	0x0800c7b1
	case IDLE:
		check_idle_state(fsm);
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 f83f 	bl	800c7fc <check_idle_state>
		break;
 800c77e:	e01c      	b.n	800c7ba <update_fsm+0x82>
	case DEEP_SLEEP:
		check_deepsleep_state(fsm);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 f8a1 	bl	800c8c8 <check_deepsleep_state>
		break;
 800c786:	e018      	b.n	800c7ba <update_fsm+0x82>
	case READY:
		check_ready_state(fsm);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 f8e5 	bl	800c958 <check_ready_state>
		break;
 800c78e:	e014      	b.n	800c7ba <update_fsm+0x82>
	case READY_SLEEP:
		check_readysleep_state(fsm);
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 f90f 	bl	800c9b4 <check_readysleep_state>
		break;
 800c796:	e010      	b.n	800c7ba <update_fsm+0x82>
	case ASCENT:
		check_ascent_state(fsm);
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 f915 	bl	800c9c8 <check_ascent_state>
		break;
 800c79e:	e00c      	b.n	800c7ba <update_fsm+0x82>
	case DESCENT:
		check_descent_state(fsm);
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 f91b 	bl	800c9dc <check_descent_state>
		break;
 800c7a6:	e008      	b.n	800c7ba <update_fsm+0x82>
	case DEPLOYMENT:
		check_deplyoment_state(fsm);
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 f921 	bl	800c9f0 <check_deplyoment_state>
		break;
 800c7ae:	e004      	b.n	800c7ba <update_fsm+0x82>
	case RECOVERY:
		check_recovery_state(fsm);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 f927 	bl	800ca04 <check_recovery_state>
		break;
 800c7b6:	e000      	b.n	800c7ba <update_fsm+0x82>
	default:
		break;
 800c7b8:	bf00      	nop
	}

	if(old_state != fsm->flight_state){
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	7bfa      	ldrb	r2, [r7, #15]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d011      	beq.n	800c7e8 <update_fsm+0xb0>
		log_warn("State Transition %s to %s", state_name[old_state], state_name[fsm->flight_state]);
 800c7c4:	490a      	ldr	r1, [pc, #40]	; (800c7f0 <update_fsm+0xb8>)
 800c7c6:	7bfb      	ldrb	r3, [r7, #15]
 800c7c8:	4a0a      	ldr	r2, [pc, #40]	; (800c7f4 <update_fsm+0xbc>)
 800c7ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	7812      	ldrb	r2, [r2, #0]
 800c7d2:	4610      	mov	r0, r2
 800c7d4:	4a07      	ldr	r2, [pc, #28]	; (800c7f4 <update_fsm+0xbc>)
 800c7d6:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800c7da:	9201      	str	r2, [sp, #4]
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	4b06      	ldr	r3, [pc, #24]	; (800c7f8 <update_fsm+0xc0>)
 800c7e0:	223c      	movs	r2, #60	; 0x3c
 800c7e2:	2003      	movs	r0, #3
 800c7e4:	f002 f880 	bl	800e8e8 <log_log>
	}
}
 800c7e8:	bf00      	nop
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	0801b837 	.word	0x0801b837
 800c7f4:	0801baac 	.word	0x0801baac
 800c7f8:	0801b840 	.word	0x0801b840

0800c7fc <check_idle_state>:

static void check_idle_state(fsm_t* fsm){
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]

	/* When button is pressed */
	if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0){
 800c804:	2104      	movs	r1, #4
 800c806:	482f      	ldr	r0, [pc, #188]	; (800c8c4 <check_idle_state+0xc8>)
 800c808:	f003 f97a 	bl	800fb00 <HAL_GPIO_ReadPin>
 800c80c:	4603      	mov	r3, r0
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d10f      	bne.n	800c832 <check_idle_state+0x36>
		if(fsm->memory[1] == 0){
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d105      	bne.n	800c826 <check_idle_state+0x2a>
			fsm->memory[0]++;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	1c5a      	adds	r2, r3, #1
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	605a      	str	r2, [r3, #4]
 800c824:	e015      	b.n	800c852 <check_idle_state+0x56>
		} else {
			fsm->memory[2]++;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	1c5a      	adds	r2, r3, #1
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	60da      	str	r2, [r3, #12]
 800c830:	e00f      	b.n	800c852 <check_idle_state+0x56>
		}
	}
	/* When button is not pressed */
	else {
		/* Short button press */
		if(fsm->memory[0] > SHORT_BUTTON_PRESS){
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	2b32      	cmp	r3, #50	; 0x32
 800c838:	d905      	bls.n	800c846 <check_idle_state+0x4a>
			fsm->memory[1]++; // Count timeout between button press
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	689b      	ldr	r3, [r3, #8]
 800c83e:	1c5a      	adds	r2, r3, #1
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	609a      	str	r2, [r3, #8]
 800c844:	e005      	b.n	800c852 <check_idle_state+0x56>
		}
		/* Button bounce or no press */
		else{
			fsm->memory[0] = 0;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2200      	movs	r2, #0
 800c84a:	605a      	str	r2, [r3, #4]
			fsm->memory[2] = 0;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	60da      	str	r2, [r3, #12]
		}
	}

	/* Long button press */
	if (fsm->memory[0] > LONG_BUTTON_PRESS){
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c85a:	d90d      	bls.n	800c878 <check_idle_state+0x7c>
		/* State Transition to READY */
		fsm->memory[0] = 0;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	605a      	str	r2, [r3, #4]
		fsm->memory[1] = 0;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	609a      	str	r2, [r3, #8]
		fsm->memory[2] = 0;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	60da      	str	r2, [r3, #12]
		fsm->flight_state = READY;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2203      	movs	r2, #3
 800c872:	701a      	strb	r2, [r3, #0]
		state_transition_idle_ready();
 800c874:	f000 f8de 	bl	800ca34 <state_transition_idle_ready>
	}

	/* Long press after short press */
	if(fsm->memory[2] > LONG_BUTTON_PRESS){
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c880:	d90d      	bls.n	800c89e <check_idle_state+0xa2>
		/* State Transition to DEEP_SLEEP */
		fsm->memory[0] = 0;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	605a      	str	r2, [r3, #4]
		fsm->memory[1] = 0;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	609a      	str	r2, [r3, #8]
		fsm->memory[2] = 0;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	60da      	str	r2, [r3, #12]
		fsm->flight_state = DEEP_SLEEP;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2202      	movs	r2, #2
 800c898:	701a      	strb	r2, [r3, #0]
		state_transition_idle_deepsleep();
 800c89a:	f000 f8c4 	bl	800ca26 <state_transition_idle_deepsleep>
	}

	/* Timeout after short press */
	if(fsm->memory[1] > TIMEOUT_BETWEEN_BUTTON_PRESS){
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	689b      	ldr	r3, [r3, #8]
 800c8a2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c8a6:	d908      	bls.n	800c8ba <check_idle_state+0xbe>
		fsm->memory[0] = 0;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	605a      	str	r2, [r3, #4]
		fsm->memory[1] = 0;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	609a      	str	r2, [r3, #8]
		fsm->memory[2] = 0;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	60da      	str	r2, [r3, #12]
	}
}
 800c8ba:	bf00      	nop
 800c8bc:	3708      	adds	r7, #8
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
 800c8c2:	bf00      	nop
 800c8c4:	40020000 	.word	0x40020000

0800c8c8 <check_deepsleep_state>:

static void check_deepsleep_state(fsm_t* fsm){
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]

	/* When button is pressed */
	if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0){
 800c8d0:	2104      	movs	r1, #4
 800c8d2:	4820      	ldr	r0, [pc, #128]	; (800c954 <check_deepsleep_state+0x8c>)
 800c8d4:	f003 f914 	bl	800fb00 <HAL_GPIO_ReadPin>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d10f      	bne.n	800c8fe <check_deepsleep_state+0x36>
		if(fsm->memory[1] == 0){
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d105      	bne.n	800c8f2 <check_deepsleep_state+0x2a>
			fsm->memory[0]++;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	1c5a      	adds	r2, r3, #1
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	605a      	str	r2, [r3, #4]
 800c8f0:	e00a      	b.n	800c908 <check_deepsleep_state+0x40>
		} else {
			fsm->memory[2]++;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	1c5a      	adds	r2, r3, #1
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	60da      	str	r2, [r3, #12]
 800c8fc:	e004      	b.n	800c908 <check_deepsleep_state+0x40>
		}
	}
	/* When button is not pressed */
	else {
		fsm->memory[1]++; // Count timeout between button press
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	689b      	ldr	r3, [r3, #8]
 800c902:	1c5a      	adds	r2, r3, #1
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	609a      	str	r2, [r3, #8]
	}

	/* Long press after short press */
	if(fsm->memory[2] > LONG_BUTTON_PRESS){
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c910:	d90d      	bls.n	800c92e <check_deepsleep_state+0x66>
		/* State Transition to IDLE */
		fsm->memory[0] = 0;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	605a      	str	r2, [r3, #4]
		fsm->memory[1] = 0;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	609a      	str	r2, [r3, #8]
		fsm->memory[2] = 0;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	60da      	str	r2, [r3, #12]
		fsm->flight_state = IDLE;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2201      	movs	r2, #1
 800c928:	701a      	strb	r2, [r3, #0]
		state_transition_deepsleep_idle();
 800c92a:	f000 f875 	bl	800ca18 <state_transition_deepsleep_idle>
	}

	/* Timeout after short press */
	if(fsm->memory[1] > TIMEOUT_BETWEEN_BUTTON_PRESS){
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c936:	d908      	bls.n	800c94a <check_deepsleep_state+0x82>
		fsm->memory[0] = 0;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2200      	movs	r2, #0
 800c93c:	605a      	str	r2, [r3, #4]
		fsm->memory[1] = 0;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2200      	movs	r2, #0
 800c942:	609a      	str	r2, [r3, #8]
		fsm->memory[2] = 0;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2200      	movs	r2, #0
 800c948:	60da      	str	r2, [r3, #12]
	}
}
 800c94a:	bf00      	nop
 800c94c:	3708      	adds	r7, #8
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	40020000 	.word	0x40020000

0800c958 <check_ready_state>:

static void check_ready_state(fsm_t* fsm){
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]

	/* When button is pressed */
	if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0){
 800c960:	2104      	movs	r1, #4
 800c962:	4813      	ldr	r0, [pc, #76]	; (800c9b0 <check_ready_state+0x58>)
 800c964:	f003 f8cc 	bl	800fb00 <HAL_GPIO_ReadPin>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d105      	bne.n	800c97a <check_ready_state+0x22>
		fsm->memory[0]++;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	1c5a      	adds	r2, r3, #1
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	605a      	str	r2, [r3, #4]
 800c978:	e002      	b.n	800c980 <check_ready_state+0x28>
	}
	/* When button is not pressed */
	else {
		fsm->memory[0] = 0; // Count timeout between button press
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2200      	movs	r2, #0
 800c97e:	605a      	str	r2, [r3, #4]
	}

	/* Long button press */
	if (fsm->memory[0] > LONG_BUTTON_PRESS){
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c988:	d90d      	bls.n	800c9a6 <check_ready_state+0x4e>
		/* State Transition to IDLE */
		fsm->memory[0] = 0;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	605a      	str	r2, [r3, #4]
		fsm->memory[1] = 0;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	609a      	str	r2, [r3, #8]
		fsm->memory[2] = 0;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	60da      	str	r2, [r3, #12]
		fsm->flight_state = IDLE;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	701a      	strb	r2, [r3, #0]
		state_transition_ready_idle();
 800c9a2:	f000 f84e 	bl	800ca42 <state_transition_ready_idle>
	}
}
 800c9a6:	bf00      	nop
 800c9a8:	3708      	adds	r7, #8
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	40020000 	.word	0x40020000

0800c9b4 <check_readysleep_state>:

static void check_readysleep_state(fsm_t* fsm){
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]

}
 800c9bc:	bf00      	nop
 800c9be:	370c      	adds	r7, #12
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr

0800c9c8 <check_ascent_state>:

static void check_ascent_state(fsm_t* fsm){
 800c9c8:	b480      	push	{r7}
 800c9ca:	b083      	sub	sp, #12
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]

}
 800c9d0:	bf00      	nop
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <check_descent_state>:

static void check_descent_state(fsm_t* fsm){
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]

}
 800c9e4:	bf00      	nop
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <check_deplyoment_state>:

static void check_deplyoment_state(fsm_t* fsm){
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]

}
 800c9f8:	bf00      	nop
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <check_recovery_state>:

static void check_recovery_state(fsm_t* fsm){
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]

}
 800ca0c:	bf00      	nop
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr

0800ca18 <state_transition_deepsleep_idle>:

#include "state_transition.h"
#include "init/init.h"

/* Transition Deep Sleep -> Idle */
void state_transition_deepsleep_idle(){
 800ca18:	b480      	push	{r7}
 800ca1a:	af00      	add	r7, sp, #0

}
 800ca1c:	bf00      	nop
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr

0800ca26 <state_transition_idle_deepsleep>:

/* Transition Idle -> Deep Sleep */
void state_transition_idle_deepsleep(){
 800ca26:	b480      	push	{r7}
 800ca28:	af00      	add	r7, sp, #0

}
 800ca2a:	bf00      	nop
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr

0800ca34 <state_transition_idle_ready>:

/* Transition Idle -> Ready */
void state_transition_idle_ready(){
 800ca34:	b480      	push	{r7}
 800ca36:	af00      	add	r7, sp, #0

}
 800ca38:	bf00      	nop
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr

0800ca42 <state_transition_ready_idle>:

/* Transition Ready -> Idle */
void state_transition_ready_idle(){
 800ca42:	b480      	push	{r7}
 800ca44:	af00      	add	r7, sp, #0

}
 800ca46:	bf00      	nop
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <main>:
#include "usbd_cdc_if.h"

#include "init/init.h"


int main(void) {
 800ca50:	b580      	push	{r7, lr}
 800ca52:	af00      	add	r7, sp, #0
  //HAL_GPIO_WritePin(P_EN_CUT_GPIO_Port, P_EN_CUT_Pin, GPIO_PIN_SET);
  //HAL_GPIO_WritePin(CUT_EN_GPIO_Port, CUT_EN_Pin, GPIO_PIN_SET);

  init();
 800ca54:	f000 fa8e 	bl	800cf74 <init>
  while (1) {
 800ca58:	e7fe      	b.n	800ca58 <main+0x8>
	...

0800ca5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a08      	ldr	r2, [pc, #32]	; (800ca8c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d102      	bne.n	800ca74 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800ca6e:	f002 f811 	bl	800ea94 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if (htim->Instance == TIM5) {
	  CDC_Transmit_Elapsed();
  }
  /* USER CODE END Callback 1 */
}
 800ca72:	e006      	b.n	800ca82 <HAL_TIM_PeriodElapsedCallback+0x26>
  else if (htim->Instance == TIM5) {
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a05      	ldr	r2, [pc, #20]	; (800ca90 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d101      	bne.n	800ca82 <HAL_TIM_PeriodElapsedCallback+0x26>
	  CDC_Transmit_Elapsed();
 800ca7e:	f00d fd5d 	bl	801a53c <CDC_Transmit_Elapsed>
}
 800ca82:	bf00      	nop
 800ca84:	3708      	adds	r7, #8
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	40010000 	.word	0x40010000
 800ca90:	40000c00 	.word	0x40000c00

0800ca94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	607b      	str	r3, [r7, #4]
 800ca9e:	4b12      	ldr	r3, [pc, #72]	; (800cae8 <HAL_MspInit+0x54>)
 800caa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caa2:	4a11      	ldr	r2, [pc, #68]	; (800cae8 <HAL_MspInit+0x54>)
 800caa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800caa8:	6453      	str	r3, [r2, #68]	; 0x44
 800caaa:	4b0f      	ldr	r3, [pc, #60]	; (800cae8 <HAL_MspInit+0x54>)
 800caac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cab2:	607b      	str	r3, [r7, #4]
 800cab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800cab6:	2300      	movs	r3, #0
 800cab8:	603b      	str	r3, [r7, #0]
 800caba:	4b0b      	ldr	r3, [pc, #44]	; (800cae8 <HAL_MspInit+0x54>)
 800cabc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cabe:	4a0a      	ldr	r2, [pc, #40]	; (800cae8 <HAL_MspInit+0x54>)
 800cac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cac4:	6413      	str	r3, [r2, #64]	; 0x40
 800cac6:	4b08      	ldr	r3, [pc, #32]	; (800cae8 <HAL_MspInit+0x54>)
 800cac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cace:	603b      	str	r3, [r7, #0]
 800cad0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800cad2:	2200      	movs	r2, #0
 800cad4:	210f      	movs	r1, #15
 800cad6:	f06f 0001 	mvn.w	r0, #1
 800cada:	f002 fb6d 	bl	800f1b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cade:	bf00      	nop
 800cae0:	3708      	adds	r7, #8
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	40023800 	.word	0x40023800

0800caec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b08a      	sub	sp, #40	; 0x28
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800caf4:	f107 0314 	add.w	r3, r7, #20
 800caf8:	2200      	movs	r2, #0
 800cafa:	601a      	str	r2, [r3, #0]
 800cafc:	605a      	str	r2, [r3, #4]
 800cafe:	609a      	str	r2, [r3, #8]
 800cb00:	60da      	str	r2, [r3, #12]
 800cb02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a17      	ldr	r2, [pc, #92]	; (800cb68 <HAL_ADC_MspInit+0x7c>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d127      	bne.n	800cb5e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800cb0e:	2300      	movs	r3, #0
 800cb10:	613b      	str	r3, [r7, #16]
 800cb12:	4b16      	ldr	r3, [pc, #88]	; (800cb6c <HAL_ADC_MspInit+0x80>)
 800cb14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb16:	4a15      	ldr	r2, [pc, #84]	; (800cb6c <HAL_ADC_MspInit+0x80>)
 800cb18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb1c:	6453      	str	r3, [r2, #68]	; 0x44
 800cb1e:	4b13      	ldr	r3, [pc, #76]	; (800cb6c <HAL_ADC_MspInit+0x80>)
 800cb20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb26:	613b      	str	r3, [r7, #16]
 800cb28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	60fb      	str	r3, [r7, #12]
 800cb2e:	4b0f      	ldr	r3, [pc, #60]	; (800cb6c <HAL_ADC_MspInit+0x80>)
 800cb30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb32:	4a0e      	ldr	r2, [pc, #56]	; (800cb6c <HAL_ADC_MspInit+0x80>)
 800cb34:	f043 0301 	orr.w	r3, r3, #1
 800cb38:	6313      	str	r3, [r2, #48]	; 0x30
 800cb3a:	4b0c      	ldr	r3, [pc, #48]	; (800cb6c <HAL_ADC_MspInit+0x80>)
 800cb3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb3e:	f003 0301 	and.w	r3, r3, #1
 800cb42:	60fb      	str	r3, [r7, #12]
 800cb44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = V_BAT_Pin|LIGHT_Pin;
 800cb46:	2303      	movs	r3, #3
 800cb48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cb4a:	2303      	movs	r3, #3
 800cb4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb52:	f107 0314 	add.w	r3, r7, #20
 800cb56:	4619      	mov	r1, r3
 800cb58:	4805      	ldr	r0, [pc, #20]	; (800cb70 <HAL_ADC_MspInit+0x84>)
 800cb5a:	f002 fe4d 	bl	800f7f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800cb5e:	bf00      	nop
 800cb60:	3728      	adds	r7, #40	; 0x28
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	40012000 	.word	0x40012000
 800cb6c:	40023800 	.word	0x40023800
 800cb70:	40020000 	.word	0x40020000

0800cb74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b08c      	sub	sp, #48	; 0x30
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb7c:	f107 031c 	add.w	r3, r7, #28
 800cb80:	2200      	movs	r2, #0
 800cb82:	601a      	str	r2, [r3, #0]
 800cb84:	605a      	str	r2, [r3, #4]
 800cb86:	609a      	str	r2, [r3, #8]
 800cb88:	60da      	str	r2, [r3, #12]
 800cb8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a32      	ldr	r2, [pc, #200]	; (800cc5c <HAL_SPI_MspInit+0xe8>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d12c      	bne.n	800cbf0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800cb96:	2300      	movs	r3, #0
 800cb98:	61bb      	str	r3, [r7, #24]
 800cb9a:	4b31      	ldr	r3, [pc, #196]	; (800cc60 <HAL_SPI_MspInit+0xec>)
 800cb9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb9e:	4a30      	ldr	r2, [pc, #192]	; (800cc60 <HAL_SPI_MspInit+0xec>)
 800cba0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cba4:	6453      	str	r3, [r2, #68]	; 0x44
 800cba6:	4b2e      	ldr	r3, [pc, #184]	; (800cc60 <HAL_SPI_MspInit+0xec>)
 800cba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cbae:	61bb      	str	r3, [r7, #24]
 800cbb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	617b      	str	r3, [r7, #20]
 800cbb6:	4b2a      	ldr	r3, [pc, #168]	; (800cc60 <HAL_SPI_MspInit+0xec>)
 800cbb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbba:	4a29      	ldr	r2, [pc, #164]	; (800cc60 <HAL_SPI_MspInit+0xec>)
 800cbbc:	f043 0301 	orr.w	r3, r3, #1
 800cbc0:	6313      	str	r3, [r2, #48]	; 0x30
 800cbc2:	4b27      	ldr	r3, [pc, #156]	; (800cc60 <HAL_SPI_MspInit+0xec>)
 800cbc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbc6:	f003 0301 	and.w	r3, r3, #1
 800cbca:	617b      	str	r3, [r7, #20]
 800cbcc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800cbce:	23e0      	movs	r3, #224	; 0xe0
 800cbd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbd2:	2302      	movs	r3, #2
 800cbd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbda:	2303      	movs	r3, #3
 800cbdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800cbde:	2305      	movs	r3, #5
 800cbe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cbe2:	f107 031c 	add.w	r3, r7, #28
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	481e      	ldr	r0, [pc, #120]	; (800cc64 <HAL_SPI_MspInit+0xf0>)
 800cbea:	f002 fe05 	bl	800f7f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800cbee:	e031      	b.n	800cc54 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4a1c      	ldr	r2, [pc, #112]	; (800cc68 <HAL_SPI_MspInit+0xf4>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d12c      	bne.n	800cc54 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	613b      	str	r3, [r7, #16]
 800cbfe:	4b18      	ldr	r3, [pc, #96]	; (800cc60 <HAL_SPI_MspInit+0xec>)
 800cc00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc02:	4a17      	ldr	r2, [pc, #92]	; (800cc60 <HAL_SPI_MspInit+0xec>)
 800cc04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cc08:	6413      	str	r3, [r2, #64]	; 0x40
 800cc0a:	4b15      	ldr	r3, [pc, #84]	; (800cc60 <HAL_SPI_MspInit+0xec>)
 800cc0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc12:	613b      	str	r3, [r7, #16]
 800cc14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cc16:	2300      	movs	r3, #0
 800cc18:	60fb      	str	r3, [r7, #12]
 800cc1a:	4b11      	ldr	r3, [pc, #68]	; (800cc60 <HAL_SPI_MspInit+0xec>)
 800cc1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc1e:	4a10      	ldr	r2, [pc, #64]	; (800cc60 <HAL_SPI_MspInit+0xec>)
 800cc20:	f043 0302 	orr.w	r3, r3, #2
 800cc24:	6313      	str	r3, [r2, #48]	; 0x30
 800cc26:	4b0e      	ldr	r3, [pc, #56]	; (800cc60 <HAL_SPI_MspInit+0xec>)
 800cc28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc2a:	f003 0302 	and.w	r3, r3, #2
 800cc2e:	60fb      	str	r3, [r7, #12]
 800cc30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800cc32:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800cc36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc38:	2302      	movs	r3, #2
 800cc3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc40:	2303      	movs	r3, #3
 800cc42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800cc44:	2305      	movs	r3, #5
 800cc46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cc48:	f107 031c 	add.w	r3, r7, #28
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	4807      	ldr	r0, [pc, #28]	; (800cc6c <HAL_SPI_MspInit+0xf8>)
 800cc50:	f002 fdd2 	bl	800f7f8 <HAL_GPIO_Init>
}
 800cc54:	bf00      	nop
 800cc56:	3730      	adds	r7, #48	; 0x30
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	40013000 	.word	0x40013000
 800cc60:	40023800 	.word	0x40023800
 800cc64:	40020000 	.word	0x40020000
 800cc68:	40003800 	.word	0x40003800
 800cc6c:	40020400 	.word	0x40020400

0800cc70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b085      	sub	sp, #20
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a0b      	ldr	r2, [pc, #44]	; (800ccac <HAL_TIM_PWM_MspInit+0x3c>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d10d      	bne.n	800cc9e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800cc82:	2300      	movs	r3, #0
 800cc84:	60fb      	str	r3, [r7, #12]
 800cc86:	4b0a      	ldr	r3, [pc, #40]	; (800ccb0 <HAL_TIM_PWM_MspInit+0x40>)
 800cc88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc8a:	4a09      	ldr	r2, [pc, #36]	; (800ccb0 <HAL_TIM_PWM_MspInit+0x40>)
 800cc8c:	f043 0304 	orr.w	r3, r3, #4
 800cc90:	6413      	str	r3, [r2, #64]	; 0x40
 800cc92:	4b07      	ldr	r3, [pc, #28]	; (800ccb0 <HAL_TIM_PWM_MspInit+0x40>)
 800cc94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc96:	f003 0304 	and.w	r3, r3, #4
 800cc9a:	60fb      	str	r3, [r7, #12]
 800cc9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800cc9e:	bf00      	nop
 800cca0:	3714      	adds	r7, #20
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr
 800ccaa:	bf00      	nop
 800ccac:	40000800 	.word	0x40000800
 800ccb0:	40023800 	.word	0x40023800

0800ccb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b088      	sub	sp, #32
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccbc:	f107 030c 	add.w	r3, r7, #12
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	601a      	str	r2, [r3, #0]
 800ccc4:	605a      	str	r2, [r3, #4]
 800ccc6:	609a      	str	r2, [r3, #8]
 800ccc8:	60da      	str	r2, [r3, #12]
 800ccca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a12      	ldr	r2, [pc, #72]	; (800cd1c <HAL_TIM_MspPostInit+0x68>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d11d      	bne.n	800cd12 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	60bb      	str	r3, [r7, #8]
 800ccda:	4b11      	ldr	r3, [pc, #68]	; (800cd20 <HAL_TIM_MspPostInit+0x6c>)
 800ccdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccde:	4a10      	ldr	r2, [pc, #64]	; (800cd20 <HAL_TIM_MspPostInit+0x6c>)
 800cce0:	f043 0302 	orr.w	r3, r3, #2
 800cce4:	6313      	str	r3, [r2, #48]	; 0x30
 800cce6:	4b0e      	ldr	r3, [pc, #56]	; (800cd20 <HAL_TIM_MspPostInit+0x6c>)
 800cce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccea:	f003 0302 	and.w	r3, r3, #2
 800ccee:	60bb      	str	r3, [r7, #8]
 800ccf0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800ccf2:	2340      	movs	r3, #64	; 0x40
 800ccf4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccf6:	2302      	movs	r3, #2
 800ccf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800cd02:	2302      	movs	r3, #2
 800cd04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800cd06:	f107 030c 	add.w	r3, r7, #12
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	4805      	ldr	r0, [pc, #20]	; (800cd24 <HAL_TIM_MspPostInit+0x70>)
 800cd0e:	f002 fd73 	bl	800f7f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800cd12:	bf00      	nop
 800cd14:	3720      	adds	r7, #32
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	40000800 	.word	0x40000800
 800cd20:	40023800 	.word	0x40023800
 800cd24:	40020400 	.word	0x40020400

0800cd28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b08a      	sub	sp, #40	; 0x28
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd30:	f107 0314 	add.w	r3, r7, #20
 800cd34:	2200      	movs	r2, #0
 800cd36:	601a      	str	r2, [r3, #0]
 800cd38:	605a      	str	r2, [r3, #4]
 800cd3a:	609a      	str	r2, [r3, #8]
 800cd3c:	60da      	str	r2, [r3, #12]
 800cd3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4a19      	ldr	r2, [pc, #100]	; (800cdac <HAL_UART_MspInit+0x84>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d12c      	bne.n	800cda4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	613b      	str	r3, [r7, #16]
 800cd4e:	4b18      	ldr	r3, [pc, #96]	; (800cdb0 <HAL_UART_MspInit+0x88>)
 800cd50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd52:	4a17      	ldr	r2, [pc, #92]	; (800cdb0 <HAL_UART_MspInit+0x88>)
 800cd54:	f043 0310 	orr.w	r3, r3, #16
 800cd58:	6453      	str	r3, [r2, #68]	; 0x44
 800cd5a:	4b15      	ldr	r3, [pc, #84]	; (800cdb0 <HAL_UART_MspInit+0x88>)
 800cd5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd5e:	f003 0310 	and.w	r3, r3, #16
 800cd62:	613b      	str	r3, [r7, #16]
 800cd64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd66:	2300      	movs	r3, #0
 800cd68:	60fb      	str	r3, [r7, #12]
 800cd6a:	4b11      	ldr	r3, [pc, #68]	; (800cdb0 <HAL_UART_MspInit+0x88>)
 800cd6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd6e:	4a10      	ldr	r2, [pc, #64]	; (800cdb0 <HAL_UART_MspInit+0x88>)
 800cd70:	f043 0301 	orr.w	r3, r3, #1
 800cd74:	6313      	str	r3, [r2, #48]	; 0x30
 800cd76:	4b0e      	ldr	r3, [pc, #56]	; (800cdb0 <HAL_UART_MspInit+0x88>)
 800cd78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd7a:	f003 0301 	and.w	r3, r3, #1
 800cd7e:	60fb      	str	r3, [r7, #12]
 800cd80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800cd82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800cd86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd88:	2302      	movs	r3, #2
 800cd8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd90:	2303      	movs	r3, #3
 800cd92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800cd94:	2307      	movs	r3, #7
 800cd96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd98:	f107 0314 	add.w	r3, r7, #20
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	4805      	ldr	r0, [pc, #20]	; (800cdb4 <HAL_UART_MspInit+0x8c>)
 800cda0:	f002 fd2a 	bl	800f7f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800cda4:	bf00      	nop
 800cda6:	3728      	adds	r7, #40	; 0x28
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	40011000 	.word	0x40011000
 800cdb0:	40023800 	.word	0x40023800
 800cdb4:	40020000 	.word	0x40020000

0800cdb8 <HAL_InitTick>:
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b08c      	sub	sp, #48	; 0x30
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	62bb      	str	r3, [r7, #40]	; 0x28
 800cdc8:	2200      	movs	r2, #0
 800cdca:	6879      	ldr	r1, [r7, #4]
 800cdcc:	2019      	movs	r0, #25
 800cdce:	f002 f9f3 	bl	800f1b8 <HAL_NVIC_SetPriority>
 800cdd2:	2019      	movs	r0, #25
 800cdd4:	f002 fa0c 	bl	800f1f0 <HAL_NVIC_EnableIRQ>
 800cdd8:	2300      	movs	r3, #0
 800cdda:	60fb      	str	r3, [r7, #12]
 800cddc:	4b1e      	ldr	r3, [pc, #120]	; (800ce58 <HAL_InitTick+0xa0>)
 800cdde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cde0:	4a1d      	ldr	r2, [pc, #116]	; (800ce58 <HAL_InitTick+0xa0>)
 800cde2:	f043 0301 	orr.w	r3, r3, #1
 800cde6:	6453      	str	r3, [r2, #68]	; 0x44
 800cde8:	4b1b      	ldr	r3, [pc, #108]	; (800ce58 <HAL_InitTick+0xa0>)
 800cdea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdec:	f003 0301 	and.w	r3, r3, #1
 800cdf0:	60fb      	str	r3, [r7, #12]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f107 0210 	add.w	r2, r7, #16
 800cdf8:	f107 0314 	add.w	r3, r7, #20
 800cdfc:	4611      	mov	r1, r2
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f004 fcc0 	bl	8011784 <HAL_RCC_GetClockConfig>
 800ce04:	f004 fcaa 	bl	801175c <HAL_RCC_GetPCLK2Freq>
 800ce08:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ce0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0c:	4a13      	ldr	r2, [pc, #76]	; (800ce5c <HAL_InitTick+0xa4>)
 800ce0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce12:	0c9b      	lsrs	r3, r3, #18
 800ce14:	3b01      	subs	r3, #1
 800ce16:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce18:	4b11      	ldr	r3, [pc, #68]	; (800ce60 <HAL_InitTick+0xa8>)
 800ce1a:	4a12      	ldr	r2, [pc, #72]	; (800ce64 <HAL_InitTick+0xac>)
 800ce1c:	601a      	str	r2, [r3, #0]
 800ce1e:	4b10      	ldr	r3, [pc, #64]	; (800ce60 <HAL_InitTick+0xa8>)
 800ce20:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ce24:	60da      	str	r2, [r3, #12]
 800ce26:	4a0e      	ldr	r2, [pc, #56]	; (800ce60 <HAL_InitTick+0xa8>)
 800ce28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2a:	6053      	str	r3, [r2, #4]
 800ce2c:	4b0c      	ldr	r3, [pc, #48]	; (800ce60 <HAL_InitTick+0xa8>)
 800ce2e:	2200      	movs	r2, #0
 800ce30:	611a      	str	r2, [r3, #16]
 800ce32:	4b0b      	ldr	r3, [pc, #44]	; (800ce60 <HAL_InitTick+0xa8>)
 800ce34:	2200      	movs	r2, #0
 800ce36:	609a      	str	r2, [r3, #8]
 800ce38:	4809      	ldr	r0, [pc, #36]	; (800ce60 <HAL_InitTick+0xa8>)
 800ce3a:	f005 fa7d 	bl	8012338 <HAL_TIM_Base_Init>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d104      	bne.n	800ce4e <HAL_InitTick+0x96>
 800ce44:	4806      	ldr	r0, [pc, #24]	; (800ce60 <HAL_InitTick+0xa8>)
 800ce46:	f005 fad1 	bl	80123ec <HAL_TIM_Base_Start_IT>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	e000      	b.n	800ce50 <HAL_InitTick+0x98>
 800ce4e:	2301      	movs	r3, #1
 800ce50:	4618      	mov	r0, r3
 800ce52:	3730      	adds	r7, #48	; 0x30
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	40023800 	.word	0x40023800
 800ce5c:	431bde83 	.word	0x431bde83
 800ce60:	200053b4 	.word	0x200053b4
 800ce64:	40010000 	.word	0x40010000

0800ce68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ce6c:	e7fe      	b.n	800ce6c <NMI_Handler+0x4>

0800ce6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ce6e:	b480      	push	{r7}
 800ce70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ce72:	e7fe      	b.n	800ce72 <HardFault_Handler+0x4>

0800ce74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ce74:	b480      	push	{r7}
 800ce76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ce78:	e7fe      	b.n	800ce78 <MemManage_Handler+0x4>

0800ce7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ce7a:	b480      	push	{r7}
 800ce7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ce7e:	e7fe      	b.n	800ce7e <BusFault_Handler+0x4>

0800ce80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ce80:	b480      	push	{r7}
 800ce82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ce84:	e7fe      	b.n	800ce84 <UsageFault_Handler+0x4>

0800ce86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ce86:	b480      	push	{r7}
 800ce88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ce8a:	bf00      	nop
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800ce98:	2004      	movs	r0, #4
 800ce9a:	f002 fe63 	bl	800fb64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800ce9e:	bf00      	nop
 800cea0:	bd80      	pop	{r7, pc}
	...

0800cea4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800cea8:	4802      	ldr	r0, [pc, #8]	; (800ceb4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800ceaa:	f005 fc65 	bl	8012778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800ceae:	bf00      	nop
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	200053b4 	.word	0x200053b4

0800ceb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT2_Pin);
 800cebc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800cec0:	f002 fe50 	bl	800fb64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 800cec4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800cec8:	f002 fe4c 	bl	800fb64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800cecc:	bf00      	nop
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800ced4:	4802      	ldr	r0, [pc, #8]	; (800cee0 <OTG_FS_IRQHandler+0x10>)
 800ced6:	f002 ffad 	bl	800fe34 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800ceda:	bf00      	nop
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	bf00      	nop
 800cee0:	200083c4 	.word	0x200083c4

0800cee4 <_sbrk>:
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b086      	sub	sp, #24
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	4a14      	ldr	r2, [pc, #80]	; (800cf40 <_sbrk+0x5c>)
 800ceee:	4b15      	ldr	r3, [pc, #84]	; (800cf44 <_sbrk+0x60>)
 800cef0:	1ad3      	subs	r3, r2, r3
 800cef2:	617b      	str	r3, [r7, #20]
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	613b      	str	r3, [r7, #16]
 800cef8:	4b13      	ldr	r3, [pc, #76]	; (800cf48 <_sbrk+0x64>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d102      	bne.n	800cf06 <_sbrk+0x22>
 800cf00:	4b11      	ldr	r3, [pc, #68]	; (800cf48 <_sbrk+0x64>)
 800cf02:	4a12      	ldr	r2, [pc, #72]	; (800cf4c <_sbrk+0x68>)
 800cf04:	601a      	str	r2, [r3, #0]
 800cf06:	4b10      	ldr	r3, [pc, #64]	; (800cf48 <_sbrk+0x64>)
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	693a      	ldr	r2, [r7, #16]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d207      	bcs.n	800cf24 <_sbrk+0x40>
 800cf14:	f00d ffa0 	bl	801ae58 <__errno>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	220c      	movs	r2, #12
 800cf1c:	601a      	str	r2, [r3, #0]
 800cf1e:	f04f 33ff 	mov.w	r3, #4294967295
 800cf22:	e009      	b.n	800cf38 <_sbrk+0x54>
 800cf24:	4b08      	ldr	r3, [pc, #32]	; (800cf48 <_sbrk+0x64>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	60fb      	str	r3, [r7, #12]
 800cf2a:	4b07      	ldr	r3, [pc, #28]	; (800cf48 <_sbrk+0x64>)
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4413      	add	r3, r2
 800cf32:	4a05      	ldr	r2, [pc, #20]	; (800cf48 <_sbrk+0x64>)
 800cf34:	6013      	str	r3, [r2, #0]
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3718      	adds	r7, #24
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}
 800cf40:	20020000 	.word	0x20020000
 800cf44:	00000400 	.word	0x00000400
 800cf48:	20000258 	.word	0x20000258
 800cf4c:	200087e0 	.word	0x200087e0

0800cf50 <SystemInit>:
 800cf50:	b480      	push	{r7}
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	4b06      	ldr	r3, [pc, #24]	; (800cf70 <SystemInit+0x20>)
 800cf56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf5a:	4a05      	ldr	r2, [pc, #20]	; (800cf70 <SystemInit+0x20>)
 800cf5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cf60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800cf64:	bf00      	nop
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop
 800cf70:	e000ed00 	.word	0xe000ed00

0800cf74 <init>:
static void MX_SPI1_Init(void);
static void MX_SPI2_Init(void);
static void MX_USART1_UART_Init(void);
void StartDefaultTask(void *argument);

void init(){
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0

	/* Hardware init */

	HAL_Init();
 800cf7a:	f001 fd69 	bl	800ea50 <HAL_Init>

	SystemClock_Config();
 800cf7e:	f000 f8b3 	bl	800d0e8 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800cf82:	f000 fa69 	bl	800d458 <MX_GPIO_Init>
	MX_ADC1_Init();
 800cf86:	f000 f917 	bl	800d1b8 <MX_ADC1_Init>
	MX_TIM4_Init();
 800cf8a:	f000 f9e1 	bl	800d350 <MX_TIM4_Init>
	MX_SPI1_Init();
 800cf8e:	f000 f973 	bl	800d278 <MX_SPI1_Init>
	MX_SPI2_Init();
 800cf92:	f000 f9a7 	bl	800d2e4 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 800cf96:	f000 fa35 	bl	800d404 <MX_USART1_UART_Init>

	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800cf9a:	2008      	movs	r0, #8
 800cf9c:	f002 f936 	bl	800f20c <HAL_NVIC_DisableIRQ>

	/* FreeRTOS Init */

	osKernelInitialize();
 800cfa0:	f009 faf4 	bl	801658c <osKernelInitialize>

	buzzer_event_id = osEventFlagsNew(NULL);
 800cfa4:	2000      	movs	r0, #0
 800cfa6:	f009 fc33 	bl	8016810 <osEventFlagsNew>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	4a37      	ldr	r2, [pc, #220]	; (800d08c <init+0x118>)
 800cfae:	6013      	str	r3, [r2, #0]

	osThreadNew(task_sensor_read, NULL, &task_sensor_read_attributes);
 800cfb0:	4a37      	ldr	r2, [pc, #220]	; (800d090 <init+0x11c>)
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	4837      	ldr	r0, [pc, #220]	; (800d094 <init+0x120>)
 800cfb6:	f009 fb51 	bl	801665c <osThreadNew>
	osThreadNew(task_fsm, NULL, &task_fsm_attributes);
 800cfba:	4a37      	ldr	r2, [pc, #220]	; (800d098 <init+0x124>)
 800cfbc:	2100      	movs	r1, #0
 800cfbe:	4837      	ldr	r0, [pc, #220]	; (800d09c <init+0x128>)
 800cfc0:	f009 fb4c 	bl	801665c <osThreadNew>
	osThreadNew(task_buzzer, NULL, &task_buzzer_attributes);
 800cfc4:	4a36      	ldr	r2, [pc, #216]	; (800d0a0 <init+0x12c>)
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	4836      	ldr	r0, [pc, #216]	; (800d0a4 <init+0x130>)
 800cfca:	f009 fb47 	bl	801665c <osThreadNew>
	osThreadNew(task_heater, NULL, &task_heater_attributes);
 800cfce:	4a36      	ldr	r2, [pc, #216]	; (800d0a8 <init+0x134>)
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	4836      	ldr	r0, [pc, #216]	; (800d0ac <init+0x138>)
 800cfd4:	f009 fb42 	bl	801665c <osThreadNew>
	osThreadNew(task_state_est, NULL, &task_state_est_attributes);
 800cfd8:	4a35      	ldr	r2, [pc, #212]	; (800d0b0 <init+0x13c>)
 800cfda:	2100      	movs	r1, #0
 800cfdc:	4835      	ldr	r0, [pc, #212]	; (800d0b4 <init+0x140>)
 800cfde:	f009 fb3d 	bl	801665c <osThreadNew>

	/* USB Init */

	fifo_init(&usb_output_fifo, usb_fifo_out_buffer, USB_OUTPUT_BUFFER_SIZE);
 800cfe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfe6:	4934      	ldr	r1, [pc, #208]	; (800d0b8 <init+0x144>)
 800cfe8:	4834      	ldr	r0, [pc, #208]	; (800d0bc <init+0x148>)
 800cfea:	f001 fb3b 	bl	800e664 <fifo_init>
	fifo_init(&usb_input_fifo, usb_fifo_in_buffer, USB_INPUT_BUFFER_SIZE);
 800cfee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cff2:	4933      	ldr	r1, [pc, #204]	; (800d0c0 <init+0x14c>)
 800cff4:	4833      	ldr	r0, [pc, #204]	; (800d0c4 <init+0x150>)
 800cff6:	f001 fb35 	bl	800e664 <fifo_init>

	log_init();
 800cffa:	f001 fc51 	bl	800e8a0 <log_init>

	if(HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin)){
 800cffe:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d002:	4831      	ldr	r0, [pc, #196]	; (800d0c8 <init+0x154>)
 800d004:	f002 fd7c 	bl	800fb00 <HAL_GPIO_ReadPin>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d007      	beq.n	800d01e <init+0xaa>
		MX_USB_DEVICE_Init();
 800d00e:	f00d f975 	bl	801a2fc <MX_USB_DEVICE_Init>
		/* Give the USB some time to initialize */
		HAL_Delay(1500);
 800d012:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800d016:	f001 fd5d 	bl	800ead4 <HAL_Delay>
		log_enable();
 800d01a:	f001 fc59 	bl	800e8d0 <log_enable>
	}

	/* Config Init */

	config_init();
 800d01e:	f7ff f9e3 	bl	800c3e8 <config_init>
	config_load();
 800d022:	f7ff f9f9 	bl	800c418 <config_load>

	if(global_config.config.config_version != CONFIG_VERSION){
 800d026:	4b29      	ldr	r3, [pc, #164]	; (800d0cc <init+0x158>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	2b64      	cmp	r3, #100	; 0x64
 800d02c:	d022      	beq.n	800d074 <init+0x100>
		log_warn("Config version mismatch");
 800d02e:	4928      	ldr	r1, [pc, #160]	; (800d0d0 <init+0x15c>)
 800d030:	4b28      	ldr	r3, [pc, #160]	; (800d0d4 <init+0x160>)
 800d032:	2247      	movs	r2, #71	; 0x47
 800d034:	2003      	movs	r0, #3
 800d036:	f001 fc57 	bl	800e8e8 <log_log>
		log_info("Resetting to defaults..");
 800d03a:	4925      	ldr	r1, [pc, #148]	; (800d0d0 <init+0x15c>)
 800d03c:	4b26      	ldr	r3, [pc, #152]	; (800d0d8 <init+0x164>)
 800d03e:	2248      	movs	r2, #72	; 0x48
 800d040:	2002      	movs	r0, #2
 800d042:	f001 fc51 	bl	800e8e8 <log_log>
		config_defaults();
 800d046:	f7ff f9d7 	bl	800c3f8 <config_defaults>
		bool status = config_save();
 800d04a:	f7ff f9f1 	bl	800c430 <config_save>
 800d04e:	4603      	mov	r3, r0
 800d050:	71fb      	strb	r3, [r7, #7]
		if(status){
 800d052:	79fb      	ldrb	r3, [r7, #7]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d006      	beq.n	800d066 <init+0xf2>
			log_info("Reset successful!");
 800d058:	491d      	ldr	r1, [pc, #116]	; (800d0d0 <init+0x15c>)
 800d05a:	4b20      	ldr	r3, [pc, #128]	; (800d0dc <init+0x168>)
 800d05c:	224c      	movs	r2, #76	; 0x4c
 800d05e:	2002      	movs	r0, #2
 800d060:	f001 fc42 	bl	800e8e8 <log_log>
 800d064:	e00c      	b.n	800d080 <init+0x10c>
		} else {
			log_error("Error resetting config!");
 800d066:	491a      	ldr	r1, [pc, #104]	; (800d0d0 <init+0x15c>)
 800d068:	4b1d      	ldr	r3, [pc, #116]	; (800d0e0 <init+0x16c>)
 800d06a:	224e      	movs	r2, #78	; 0x4e
 800d06c:	2004      	movs	r0, #4
 800d06e:	f001 fc3b 	bl	800e8e8 <log_log>
 800d072:	e005      	b.n	800d080 <init+0x10c>
		}
	} else {
		log_info("Config loading successful!");
 800d074:	4916      	ldr	r1, [pc, #88]	; (800d0d0 <init+0x15c>)
 800d076:	4b1b      	ldr	r3, [pc, #108]	; (800d0e4 <init+0x170>)
 800d078:	2251      	movs	r2, #81	; 0x51
 800d07a:	2002      	movs	r0, #2
 800d07c:	f001 fc34 	bl	800e8e8 <log_log>
	}

	/* Start FreeRTOS Kernel */

	osKernelStart();
 800d080:	f009 faa8 	bl	80165d4 <osKernelStart>
}
 800d084:	bf00      	nop
 800d086:	3708      	adds	r7, #8
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}
 800d08c:	20005198 	.word	0x20005198
 800d090:	0801bae8 	.word	0x0801bae8
 800d094:	0800e459 	.word	0x0800e459
 800d098:	0801bb0c 	.word	0x0801bb0c
 800d09c:	0800e385 	.word	0x0800e385
 800d0a0:	0801bb78 	.word	0x0801bb78
 800d0a4:	0800e299 	.word	0x0800e299
 800d0a8:	0801bb54 	.word	0x0801bb54
 800d0ac:	0800e3d5 	.word	0x0800e3d5
 800d0b0:	0801bb30 	.word	0x0801bb30
 800d0b4:	0800e629 	.word	0x0800e629
 800d0b8:	2000519c 	.word	0x2000519c
 800d0bc:	2000539c 	.word	0x2000539c
 800d0c0:	20004f80 	.word	0x20004f80
 800d0c4:	20005180 	.word	0x20005180
 800d0c8:	40020000 	.word	0x40020000
 800d0cc:	20000248 	.word	0x20000248
 800d0d0:	0801b8c1 	.word	0x0801b8c1
 800d0d4:	0801b8c8 	.word	0x0801b8c8
 800d0d8:	0801b8e0 	.word	0x0801b8e0
 800d0dc:	0801b8f8 	.word	0x0801b8f8
 800d0e0:	0801b90c 	.word	0x0801b90c
 800d0e4:	0801b924 	.word	0x0801b924

0800d0e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b094      	sub	sp, #80	; 0x50
 800d0ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d0ee:	f107 0320 	add.w	r3, r7, #32
 800d0f2:	2230      	movs	r2, #48	; 0x30
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f00d fee6 	bl	801aec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d0fc:	f107 030c 	add.w	r3, r7, #12
 800d100:	2200      	movs	r2, #0
 800d102:	601a      	str	r2, [r3, #0]
 800d104:	605a      	str	r2, [r3, #4]
 800d106:	609a      	str	r2, [r3, #8]
 800d108:	60da      	str	r2, [r3, #12]
 800d10a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d10c:	2300      	movs	r3, #0
 800d10e:	60bb      	str	r3, [r7, #8]
 800d110:	4b27      	ldr	r3, [pc, #156]	; (800d1b0 <SystemClock_Config+0xc8>)
 800d112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d114:	4a26      	ldr	r2, [pc, #152]	; (800d1b0 <SystemClock_Config+0xc8>)
 800d116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d11a:	6413      	str	r3, [r2, #64]	; 0x40
 800d11c:	4b24      	ldr	r3, [pc, #144]	; (800d1b0 <SystemClock_Config+0xc8>)
 800d11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d124:	60bb      	str	r3, [r7, #8]
 800d126:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d128:	2300      	movs	r3, #0
 800d12a:	607b      	str	r3, [r7, #4]
 800d12c:	4b21      	ldr	r3, [pc, #132]	; (800d1b4 <SystemClock_Config+0xcc>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a20      	ldr	r2, [pc, #128]	; (800d1b4 <SystemClock_Config+0xcc>)
 800d132:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d136:	6013      	str	r3, [r2, #0]
 800d138:	4b1e      	ldr	r3, [pc, #120]	; (800d1b4 <SystemClock_Config+0xcc>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d140:	607b      	str	r3, [r7, #4]
 800d142:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d144:	2301      	movs	r3, #1
 800d146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d148:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d14c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d14e:	2302      	movs	r3, #2
 800d150:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d152:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d156:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800d158:	2304      	movs	r3, #4
 800d15a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800d15c:	2360      	movs	r3, #96	; 0x60
 800d15e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800d160:	2306      	movs	r3, #6
 800d162:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800d164:	2304      	movs	r3, #4
 800d166:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d168:	f107 0320 	add.w	r3, r7, #32
 800d16c:	4618      	mov	r0, r3
 800d16e:	f003 fe95 	bl	8010e9c <HAL_RCC_OscConfig>
 800d172:	4603      	mov	r3, r0
 800d174:	2b00      	cmp	r3, #0
 800d176:	d001      	beq.n	800d17c <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d178:	f001 f888 	bl	800e28c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d17c:	230f      	movs	r3, #15
 800d17e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d180:	2302      	movs	r3, #2
 800d182:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800d184:	2380      	movs	r3, #128	; 0x80
 800d186:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800d188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d18c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d18e:	2300      	movs	r3, #0
 800d190:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800d192:	f107 030c 	add.w	r3, r7, #12
 800d196:	2100      	movs	r1, #0
 800d198:	4618      	mov	r0, r3
 800d19a:	f004 f8f7 	bl	801138c <HAL_RCC_ClockConfig>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d001      	beq.n	800d1a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800d1a4:	f001 f872 	bl	800e28c <Error_Handler>
  }
}
 800d1a8:	bf00      	nop
 800d1aa:	3750      	adds	r7, #80	; 0x50
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}
 800d1b0:	40023800 	.word	0x40023800
 800d1b4:	40007000 	.word	0x40007000

0800d1b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800d1be:	463b      	mov	r3, r7
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	601a      	str	r2, [r3, #0]
 800d1c4:	605a      	str	r2, [r3, #4]
 800d1c6:	609a      	str	r2, [r3, #8]
 800d1c8:	60da      	str	r2, [r3, #12]
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800d1ca:	4b28      	ldr	r3, [pc, #160]	; (800d26c <MX_ADC1_Init+0xb4>)
 800d1cc:	4a28      	ldr	r2, [pc, #160]	; (800d270 <MX_ADC1_Init+0xb8>)
 800d1ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800d1d0:	4b26      	ldr	r3, [pc, #152]	; (800d26c <MX_ADC1_Init+0xb4>)
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800d1d6:	4b25      	ldr	r3, [pc, #148]	; (800d26c <MX_ADC1_Init+0xb4>)
 800d1d8:	2200      	movs	r2, #0
 800d1da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800d1dc:	4b23      	ldr	r3, [pc, #140]	; (800d26c <MX_ADC1_Init+0xb4>)
 800d1de:	2201      	movs	r2, #1
 800d1e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800d1e2:	4b22      	ldr	r3, [pc, #136]	; (800d26c <MX_ADC1_Init+0xb4>)
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800d1e8:	4b20      	ldr	r3, [pc, #128]	; (800d26c <MX_ADC1_Init+0xb4>)
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d1f0:	4b1e      	ldr	r3, [pc, #120]	; (800d26c <MX_ADC1_Init+0xb4>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d1f6:	4b1d      	ldr	r3, [pc, #116]	; (800d26c <MX_ADC1_Init+0xb4>)
 800d1f8:	4a1e      	ldr	r2, [pc, #120]	; (800d274 <MX_ADC1_Init+0xbc>)
 800d1fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d1fc:	4b1b      	ldr	r3, [pc, #108]	; (800d26c <MX_ADC1_Init+0xb4>)
 800d1fe:	2200      	movs	r2, #0
 800d200:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800d202:	4b1a      	ldr	r3, [pc, #104]	; (800d26c <MX_ADC1_Init+0xb4>)
 800d204:	2202      	movs	r2, #2
 800d206:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800d208:	4b18      	ldr	r3, [pc, #96]	; (800d26c <MX_ADC1_Init+0xb4>)
 800d20a:	2200      	movs	r2, #0
 800d20c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d210:	4b16      	ldr	r3, [pc, #88]	; (800d26c <MX_ADC1_Init+0xb4>)
 800d212:	2201      	movs	r2, #1
 800d214:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800d216:	4815      	ldr	r0, [pc, #84]	; (800d26c <MX_ADC1_Init+0xb4>)
 800d218:	f001 fc80 	bl	800eb1c <HAL_ADC_Init>
 800d21c:	4603      	mov	r3, r0
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d001      	beq.n	800d226 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800d222:	f001 f833 	bl	800e28c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800d226:	2300      	movs	r3, #0
 800d228:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800d22a:	2301      	movs	r3, #1
 800d22c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800d22e:	2303      	movs	r3, #3
 800d230:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d232:	463b      	mov	r3, r7
 800d234:	4619      	mov	r1, r3
 800d236:	480d      	ldr	r0, [pc, #52]	; (800d26c <MX_ADC1_Init+0xb4>)
 800d238:	f001 fcb4 	bl	800eba4 <HAL_ADC_ConfigChannel>
 800d23c:	4603      	mov	r3, r0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d001      	beq.n	800d246 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800d242:	f001 f823 	bl	800e28c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800d246:	2301      	movs	r3, #1
 800d248:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800d24a:	2302      	movs	r3, #2
 800d24c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800d24e:	463b      	mov	r3, r7
 800d250:	4619      	mov	r1, r3
 800d252:	4806      	ldr	r0, [pc, #24]	; (800d26c <MX_ADC1_Init+0xb4>)
 800d254:	f001 fca6 	bl	800eba4 <HAL_ADC_ConfigChannel>
 800d258:	4603      	mov	r3, r0
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d001      	beq.n	800d262 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800d25e:	f001 f815 	bl	800e28c <Error_Handler>
  }
}
 800d262:	bf00      	nop
 800d264:	3710      	adds	r7, #16
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	20007adc 	.word	0x20007adc
 800d270:	40012000 	.word	0x40012000
 800d274:	0f000001 	.word	0x0f000001

0800d278 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800d27c:	4b17      	ldr	r3, [pc, #92]	; (800d2dc <MX_SPI1_Init+0x64>)
 800d27e:	4a18      	ldr	r2, [pc, #96]	; (800d2e0 <MX_SPI1_Init+0x68>)
 800d280:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d282:	4b16      	ldr	r3, [pc, #88]	; (800d2dc <MX_SPI1_Init+0x64>)
 800d284:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d288:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d28a:	4b14      	ldr	r3, [pc, #80]	; (800d2dc <MX_SPI1_Init+0x64>)
 800d28c:	2200      	movs	r2, #0
 800d28e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d290:	4b12      	ldr	r3, [pc, #72]	; (800d2dc <MX_SPI1_Init+0x64>)
 800d292:	2200      	movs	r2, #0
 800d294:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d296:	4b11      	ldr	r3, [pc, #68]	; (800d2dc <MX_SPI1_Init+0x64>)
 800d298:	2200      	movs	r2, #0
 800d29a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d29c:	4b0f      	ldr	r3, [pc, #60]	; (800d2dc <MX_SPI1_Init+0x64>)
 800d29e:	2200      	movs	r2, #0
 800d2a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800d2a2:	4b0e      	ldr	r3, [pc, #56]	; (800d2dc <MX_SPI1_Init+0x64>)
 800d2a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d2aa:	4b0c      	ldr	r3, [pc, #48]	; (800d2dc <MX_SPI1_Init+0x64>)
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d2b0:	4b0a      	ldr	r3, [pc, #40]	; (800d2dc <MX_SPI1_Init+0x64>)
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d2b6:	4b09      	ldr	r3, [pc, #36]	; (800d2dc <MX_SPI1_Init+0x64>)
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d2bc:	4b07      	ldr	r3, [pc, #28]	; (800d2dc <MX_SPI1_Init+0x64>)
 800d2be:	2200      	movs	r2, #0
 800d2c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800d2c2:	4b06      	ldr	r3, [pc, #24]	; (800d2dc <MX_SPI1_Init+0x64>)
 800d2c4:	220a      	movs	r2, #10
 800d2c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d2c8:	4804      	ldr	r0, [pc, #16]	; (800d2dc <MX_SPI1_Init+0x64>)
 800d2ca:	f004 fa8d 	bl	80117e8 <HAL_SPI_Init>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d001      	beq.n	800d2d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800d2d4:	f000 ffda 	bl	800e28c <Error_Handler>
  }
}
 800d2d8:	bf00      	nop
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	20007b68 	.word	0x20007b68
 800d2e0:	40013000 	.word	0x40013000

0800d2e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	af00      	add	r7, sp, #0
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800d2e8:	4b17      	ldr	r3, [pc, #92]	; (800d348 <MX_SPI2_Init+0x64>)
 800d2ea:	4a18      	ldr	r2, [pc, #96]	; (800d34c <MX_SPI2_Init+0x68>)
 800d2ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800d2ee:	4b16      	ldr	r3, [pc, #88]	; (800d348 <MX_SPI2_Init+0x64>)
 800d2f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d2f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800d2f6:	4b14      	ldr	r3, [pc, #80]	; (800d348 <MX_SPI2_Init+0x64>)
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800d2fc:	4b12      	ldr	r3, [pc, #72]	; (800d348 <MX_SPI2_Init+0x64>)
 800d2fe:	2200      	movs	r2, #0
 800d300:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d302:	4b11      	ldr	r3, [pc, #68]	; (800d348 <MX_SPI2_Init+0x64>)
 800d304:	2200      	movs	r2, #0
 800d306:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d308:	4b0f      	ldr	r3, [pc, #60]	; (800d348 <MX_SPI2_Init+0x64>)
 800d30a:	2200      	movs	r2, #0
 800d30c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800d30e:	4b0e      	ldr	r3, [pc, #56]	; (800d348 <MX_SPI2_Init+0x64>)
 800d310:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d314:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d316:	4b0c      	ldr	r3, [pc, #48]	; (800d348 <MX_SPI2_Init+0x64>)
 800d318:	2200      	movs	r2, #0
 800d31a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d31c:	4b0a      	ldr	r3, [pc, #40]	; (800d348 <MX_SPI2_Init+0x64>)
 800d31e:	2200      	movs	r2, #0
 800d320:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800d322:	4b09      	ldr	r3, [pc, #36]	; (800d348 <MX_SPI2_Init+0x64>)
 800d324:	2200      	movs	r2, #0
 800d326:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d328:	4b07      	ldr	r3, [pc, #28]	; (800d348 <MX_SPI2_Init+0x64>)
 800d32a:	2200      	movs	r2, #0
 800d32c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800d32e:	4b06      	ldr	r3, [pc, #24]	; (800d348 <MX_SPI2_Init+0x64>)
 800d330:	220a      	movs	r2, #10
 800d332:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800d334:	4804      	ldr	r0, [pc, #16]	; (800d348 <MX_SPI2_Init+0x64>)
 800d336:	f004 fa57 	bl	80117e8 <HAL_SPI_Init>
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d001      	beq.n	800d344 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800d340:	f000 ffa4 	bl	800e28c <Error_Handler>
  }
}
 800d344:	bf00      	nop
 800d346:	bd80      	pop	{r7, pc}
 800d348:	20007a3c 	.word	0x20007a3c
 800d34c:	40003800 	.word	0x40003800

0800d350 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b08a      	sub	sp, #40	; 0x28
 800d354:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d356:	f107 0320 	add.w	r3, r7, #32
 800d35a:	2200      	movs	r2, #0
 800d35c:	601a      	str	r2, [r3, #0]
 800d35e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d360:	1d3b      	adds	r3, r7, #4
 800d362:	2200      	movs	r2, #0
 800d364:	601a      	str	r2, [r3, #0]
 800d366:	605a      	str	r2, [r3, #4]
 800d368:	609a      	str	r2, [r3, #8]
 800d36a:	60da      	str	r2, [r3, #12]
 800d36c:	611a      	str	r2, [r3, #16]
 800d36e:	615a      	str	r2, [r3, #20]
 800d370:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800d372:	4b22      	ldr	r3, [pc, #136]	; (800d3fc <MX_TIM4_Init+0xac>)
 800d374:	4a22      	ldr	r2, [pc, #136]	; (800d400 <MX_TIM4_Init+0xb0>)
 800d376:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16;
 800d378:	4b20      	ldr	r3, [pc, #128]	; (800d3fc <MX_TIM4_Init+0xac>)
 800d37a:	2210      	movs	r2, #16
 800d37c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d37e:	4b1f      	ldr	r3, [pc, #124]	; (800d3fc <MX_TIM4_Init+0xac>)
 800d380:	2200      	movs	r2, #0
 800d382:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 800d384:	4b1d      	ldr	r3, [pc, #116]	; (800d3fc <MX_TIM4_Init+0xac>)
 800d386:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d38a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d38c:	4b1b      	ldr	r3, [pc, #108]	; (800d3fc <MX_TIM4_Init+0xac>)
 800d38e:	2200      	movs	r2, #0
 800d390:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d392:	4b1a      	ldr	r3, [pc, #104]	; (800d3fc <MX_TIM4_Init+0xac>)
 800d394:	2200      	movs	r2, #0
 800d396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800d398:	4818      	ldr	r0, [pc, #96]	; (800d3fc <MX_TIM4_Init+0xac>)
 800d39a:	f005 f889 	bl	80124b0 <HAL_TIM_PWM_Init>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d001      	beq.n	800d3a8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800d3a4:	f000 ff72 	bl	800e28c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800d3b0:	f107 0320 	add.w	r3, r7, #32
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	4811      	ldr	r0, [pc, #68]	; (800d3fc <MX_TIM4_Init+0xac>)
 800d3b8:	f005 fe02 	bl	8012fc0 <HAL_TIMEx_MasterConfigSynchronization>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d001      	beq.n	800d3c6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800d3c2:	f000 ff63 	bl	800e28c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d3c6:	2360      	movs	r3, #96	; 0x60
 800d3c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 800d3ca:	23fa      	movs	r3, #250	; 0xfa
 800d3cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d3d6:	1d3b      	adds	r3, r7, #4
 800d3d8:	2200      	movs	r2, #0
 800d3da:	4619      	mov	r1, r3
 800d3dc:	4807      	ldr	r0, [pc, #28]	; (800d3fc <MX_TIM4_Init+0xac>)
 800d3de:	f005 fad3 	bl	8012988 <HAL_TIM_PWM_ConfigChannel>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d001      	beq.n	800d3ec <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800d3e8:	f000 ff50 	bl	800e28c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800d3ec:	4803      	ldr	r0, [pc, #12]	; (800d3fc <MX_TIM4_Init+0xac>)
 800d3ee:	f7ff fc61 	bl	800ccb4 <HAL_TIM_MspPostInit>
}
 800d3f2:	bf00      	nop
 800d3f4:	3728      	adds	r7, #40	; 0x28
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	20007a94 	.word	0x20007a94
 800d400:	40000800 	.word	0x40000800

0800d404 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 800d408:	4b11      	ldr	r3, [pc, #68]	; (800d450 <MX_USART1_UART_Init+0x4c>)
 800d40a:	4a12      	ldr	r2, [pc, #72]	; (800d454 <MX_USART1_UART_Init+0x50>)
 800d40c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d40e:	4b10      	ldr	r3, [pc, #64]	; (800d450 <MX_USART1_UART_Init+0x4c>)
 800d410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d414:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d416:	4b0e      	ldr	r3, [pc, #56]	; (800d450 <MX_USART1_UART_Init+0x4c>)
 800d418:	2200      	movs	r2, #0
 800d41a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d41c:	4b0c      	ldr	r3, [pc, #48]	; (800d450 <MX_USART1_UART_Init+0x4c>)
 800d41e:	2200      	movs	r2, #0
 800d420:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d422:	4b0b      	ldr	r3, [pc, #44]	; (800d450 <MX_USART1_UART_Init+0x4c>)
 800d424:	2200      	movs	r2, #0
 800d426:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d428:	4b09      	ldr	r3, [pc, #36]	; (800d450 <MX_USART1_UART_Init+0x4c>)
 800d42a:	220c      	movs	r2, #12
 800d42c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d42e:	4b08      	ldr	r3, [pc, #32]	; (800d450 <MX_USART1_UART_Init+0x4c>)
 800d430:	2200      	movs	r2, #0
 800d432:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d434:	4b06      	ldr	r3, [pc, #24]	; (800d450 <MX_USART1_UART_Init+0x4c>)
 800d436:	2200      	movs	r2, #0
 800d438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d43a:	4805      	ldr	r0, [pc, #20]	; (800d450 <MX_USART1_UART_Init+0x4c>)
 800d43c:	f005 fe42 	bl	80130c4 <HAL_UART_Init>
 800d440:	4603      	mov	r3, r0
 800d442:	2b00      	cmp	r3, #0
 800d444:	d001      	beq.n	800d44a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800d446:	f000 ff21 	bl	800e28c <Error_Handler>
  }
}
 800d44a:	bf00      	nop
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	20007b24 	.word	0x20007b24
 800d454:	40011000 	.word	0x40011000

0800d458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b08a      	sub	sp, #40	; 0x28
 800d45c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d45e:	f107 0314 	add.w	r3, r7, #20
 800d462:	2200      	movs	r2, #0
 800d464:	601a      	str	r2, [r3, #0]
 800d466:	605a      	str	r2, [r3, #4]
 800d468:	609a      	str	r2, [r3, #8]
 800d46a:	60da      	str	r2, [r3, #12]
 800d46c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d46e:	2300      	movs	r3, #0
 800d470:	613b      	str	r3, [r7, #16]
 800d472:	4b5d      	ldr	r3, [pc, #372]	; (800d5e8 <MX_GPIO_Init+0x190>)
 800d474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d476:	4a5c      	ldr	r2, [pc, #368]	; (800d5e8 <MX_GPIO_Init+0x190>)
 800d478:	f043 0304 	orr.w	r3, r3, #4
 800d47c:	6313      	str	r3, [r2, #48]	; 0x30
 800d47e:	4b5a      	ldr	r3, [pc, #360]	; (800d5e8 <MX_GPIO_Init+0x190>)
 800d480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d482:	f003 0304 	and.w	r3, r3, #4
 800d486:	613b      	str	r3, [r7, #16]
 800d488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d48a:	2300      	movs	r3, #0
 800d48c:	60fb      	str	r3, [r7, #12]
 800d48e:	4b56      	ldr	r3, [pc, #344]	; (800d5e8 <MX_GPIO_Init+0x190>)
 800d490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d492:	4a55      	ldr	r2, [pc, #340]	; (800d5e8 <MX_GPIO_Init+0x190>)
 800d494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d498:	6313      	str	r3, [r2, #48]	; 0x30
 800d49a:	4b53      	ldr	r3, [pc, #332]	; (800d5e8 <MX_GPIO_Init+0x190>)
 800d49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d49e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4a2:	60fb      	str	r3, [r7, #12]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	60bb      	str	r3, [r7, #8]
 800d4aa:	4b4f      	ldr	r3, [pc, #316]	; (800d5e8 <MX_GPIO_Init+0x190>)
 800d4ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ae:	4a4e      	ldr	r2, [pc, #312]	; (800d5e8 <MX_GPIO_Init+0x190>)
 800d4b0:	f043 0301 	orr.w	r3, r3, #1
 800d4b4:	6313      	str	r3, [r2, #48]	; 0x30
 800d4b6:	4b4c      	ldr	r3, [pc, #304]	; (800d5e8 <MX_GPIO_Init+0x190>)
 800d4b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ba:	f003 0301 	and.w	r3, r3, #1
 800d4be:	60bb      	str	r3, [r7, #8]
 800d4c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	607b      	str	r3, [r7, #4]
 800d4c6:	4b48      	ldr	r3, [pc, #288]	; (800d5e8 <MX_GPIO_Init+0x190>)
 800d4c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ca:	4a47      	ldr	r2, [pc, #284]	; (800d5e8 <MX_GPIO_Init+0x190>)
 800d4cc:	f043 0302 	orr.w	r3, r3, #2
 800d4d0:	6313      	str	r3, [r2, #48]	; 0x30
 800d4d2:	4b45      	ldr	r3, [pc, #276]	; (800d5e8 <MX_GPIO_Init+0x190>)
 800d4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4d6:	f003 0302 	and.w	r3, r3, #2
 800d4da:	607b      	str	r3, [r7, #4]
 800d4dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d4e4:	4841      	ldr	r0, [pc, #260]	; (800d5ec <MX_GPIO_Init+0x194>)
 800d4e6:	f002 fb23 	bl	800fb30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TC_CS_Pin|R_CS_Pin, GPIO_PIN_RESET);
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	2118      	movs	r1, #24
 800d4ee:	4840      	ldr	r0, [pc, #256]	; (800d5f0 <MX_GPIO_Init+0x198>)
 800d4f0:	f002 fb1e 	bl	800fb30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BARO_CS_Pin|IMU_CS_Pin|DCDC_EN_Pin|CUT_EN_Pin
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	f240 31b6 	movw	r1, #950	; 0x3b6
 800d4fa:	483e      	ldr	r0, [pc, #248]	; (800d5f4 <MX_GPIO_Init+0x19c>)
 800d4fc:	f002 fb18 	bl	800fb30 <HAL_GPIO_WritePin>
                          |P_EN_LIGHT_Pin|P_EN_CUT_Pin|P_EN_RADIO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800d500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d506:	2301      	movs	r3, #1
 800d508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d50a:	2300      	movs	r3, #0
 800d50c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d50e:	2300      	movs	r3, #0
 800d510:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800d512:	f107 0314 	add.w	r3, r7, #20
 800d516:	4619      	mov	r1, r3
 800d518:	4834      	ldr	r0, [pc, #208]	; (800d5ec <MX_GPIO_Init+0x194>)
 800d51a:	f002 f96d 	bl	800f7f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800d51e:	2304      	movs	r3, #4
 800d520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d522:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800d526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d528:	2300      	movs	r3, #0
 800d52a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800d52c:	f107 0314 	add.w	r3, r7, #20
 800d530:	4619      	mov	r1, r3
 800d532:	482f      	ldr	r0, [pc, #188]	; (800d5f0 <MX_GPIO_Init+0x198>)
 800d534:	f002 f960 	bl	800f7f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_CS_Pin R_CS_Pin */
  GPIO_InitStruct.Pin = TC_CS_Pin|R_CS_Pin;
 800d538:	2318      	movs	r3, #24
 800d53a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d53c:	2301      	movs	r3, #1
 800d53e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d540:	2300      	movs	r3, #0
 800d542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d544:	2300      	movs	r3, #0
 800d546:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d548:	f107 0314 	add.w	r3, r7, #20
 800d54c:	4619      	mov	r1, r3
 800d54e:	4828      	ldr	r0, [pc, #160]	; (800d5f0 <MX_GPIO_Init+0x198>)
 800d550:	f002 f952 	bl	800f7f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_INT_Pin */
  GPIO_InitStruct.Pin = RF_INT_Pin;
 800d554:	2301      	movs	r3, #1
 800d556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d558:	2300      	movs	r3, #0
 800d55a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d55c:	2300      	movs	r3, #0
 800d55e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_INT_GPIO_Port, &GPIO_InitStruct);
 800d560:	f107 0314 	add.w	r3, r7, #20
 800d564:	4619      	mov	r1, r3
 800d566:	4823      	ldr	r0, [pc, #140]	; (800d5f4 <MX_GPIO_Init+0x19c>)
 800d568:	f002 f946 	bl	800f7f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BARO_CS_Pin IMU_CS_Pin DCDC_EN_Pin CUT_EN_Pin
                           P_EN_LIGHT_Pin P_EN_CUT_Pin P_EN_RADIO_Pin */
  GPIO_InitStruct.Pin = BARO_CS_Pin|IMU_CS_Pin|DCDC_EN_Pin|CUT_EN_Pin
 800d56c:	f240 33b6 	movw	r3, #950	; 0x3b6
 800d570:	617b      	str	r3, [r7, #20]
                          |P_EN_LIGHT_Pin|P_EN_CUT_Pin|P_EN_RADIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d572:	2301      	movs	r3, #1
 800d574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d576:	2300      	movs	r3, #0
 800d578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d57a:	2300      	movs	r3, #0
 800d57c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d57e:	f107 0314 	add.w	r3, r7, #20
 800d582:	4619      	mov	r1, r3
 800d584:	481b      	ldr	r0, [pc, #108]	; (800d5f4 <MX_GPIO_Init+0x19c>)
 800d586:	f002 f937 	bl	800f7f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|IMU_INT1_Pin;
 800d58a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d58e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d590:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800d594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d596:	2300      	movs	r3, #0
 800d598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d59a:	f107 0314 	add.w	r3, r7, #20
 800d59e:	4619      	mov	r1, r3
 800d5a0:	4814      	ldr	r0, [pc, #80]	; (800d5f4 <MX_GPIO_Init+0x19c>)
 800d5a2:	f002 f929 	bl	800f7f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DET_Pin CHRG_Pin */
  GPIO_InitStruct.Pin = USB_DET_Pin|CHRG_Pin;
 800d5a6:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800d5aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d5b4:	f107 0314 	add.w	r3, r7, #20
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	480d      	ldr	r0, [pc, #52]	; (800d5f0 <MX_GPIO_Init+0x198>)
 800d5bc:	f002 f91c 	bl	800f7f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	2105      	movs	r1, #5
 800d5c4:	2008      	movs	r0, #8
 800d5c6:	f001 fdf7 	bl	800f1b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800d5ca:	2008      	movs	r0, #8
 800d5cc:	f001 fe10 	bl	800f1f0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	2105      	movs	r1, #5
 800d5d4:	2028      	movs	r0, #40	; 0x28
 800d5d6:	f001 fdef 	bl	800f1b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800d5da:	2028      	movs	r0, #40	; 0x28
 800d5dc:	f001 fe08 	bl	800f1f0 <HAL_NVIC_EnableIRQ>
}
 800d5e0:	bf00      	nop
 800d5e2:	3728      	adds	r7, #40	; 0x28
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	40023800 	.word	0x40023800
 800d5ec:	40020800 	.word	0x40020800
 800d5f0:	40020000 	.word	0x40020000
 800d5f4:	40020400 	.word	0x40020400

0800d5f8 <lsm6dsr_read_reg>:
 800d5f8:	b590      	push	{r4, r7, lr}
 800d5fa:	b087      	sub	sp, #28
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	60f8      	str	r0, [r7, #12]
 800d600:	607a      	str	r2, [r7, #4]
 800d602:	461a      	mov	r2, r3
 800d604:	460b      	mov	r3, r1
 800d606:	72fb      	strb	r3, [r7, #11]
 800d608:	4613      	mov	r3, r2
 800d60a:	813b      	strh	r3, [r7, #8]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	685c      	ldr	r4, [r3, #4]
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6898      	ldr	r0, [r3, #8]
 800d614:	893b      	ldrh	r3, [r7, #8]
 800d616:	7af9      	ldrb	r1, [r7, #11]
 800d618:	687a      	ldr	r2, [r7, #4]
 800d61a:	47a0      	blx	r4
 800d61c:	6178      	str	r0, [r7, #20]
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	4618      	mov	r0, r3
 800d622:	371c      	adds	r7, #28
 800d624:	46bd      	mov	sp, r7
 800d626:	bd90      	pop	{r4, r7, pc}

0800d628 <lsm6dsr_write_reg>:
 800d628:	b590      	push	{r4, r7, lr}
 800d62a:	b087      	sub	sp, #28
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	607a      	str	r2, [r7, #4]
 800d632:	461a      	mov	r2, r3
 800d634:	460b      	mov	r3, r1
 800d636:	72fb      	strb	r3, [r7, #11]
 800d638:	4613      	mov	r3, r2
 800d63a:	813b      	strh	r3, [r7, #8]
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681c      	ldr	r4, [r3, #0]
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	6898      	ldr	r0, [r3, #8]
 800d644:	893b      	ldrh	r3, [r7, #8]
 800d646:	7af9      	ldrb	r1, [r7, #11]
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	47a0      	blx	r4
 800d64c:	6178      	str	r0, [r7, #20]
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	4618      	mov	r0, r3
 800d652:	371c      	adds	r7, #28
 800d654:	46bd      	mov	sp, r7
 800d656:	bd90      	pop	{r4, r7, pc}

0800d658 <lsm6dsr_from_fs16g_to_mg>:
 800d658:	b480      	push	{r7}
 800d65a:	b083      	sub	sp, #12
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	4603      	mov	r3, r0
 800d660:	80fb      	strh	r3, [r7, #6]
 800d662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d666:	ee07 3a90 	vmov	s15, r3
 800d66a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d66e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800d684 <lsm6dsr_from_fs16g_to_mg+0x2c>
 800d672:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d676:	eeb0 0a67 	vmov.f32	s0, s15
 800d67a:	370c      	adds	r7, #12
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr
 800d684:	3ef9db23 	.word	0x3ef9db23

0800d688 <lsm6dsr_xl_full_scale_set>:
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	460b      	mov	r3, r1
 800d692:	70fb      	strb	r3, [r7, #3]
 800d694:	f107 0208 	add.w	r2, r7, #8
 800d698:	2301      	movs	r3, #1
 800d69a:	2110      	movs	r1, #16
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7ff ffab 	bl	800d5f8 <lsm6dsr_read_reg>
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d10f      	bne.n	800d6ca <lsm6dsr_xl_full_scale_set+0x42>
 800d6aa:	78fb      	ldrb	r3, [r7, #3]
 800d6ac:	f003 0303 	and.w	r3, r3, #3
 800d6b0:	b2da      	uxtb	r2, r3
 800d6b2:	7a3b      	ldrb	r3, [r7, #8]
 800d6b4:	f362 0383 	bfi	r3, r2, #2, #2
 800d6b8:	723b      	strb	r3, [r7, #8]
 800d6ba:	f107 0208 	add.w	r2, r7, #8
 800d6be:	2301      	movs	r3, #1
 800d6c0:	2110      	movs	r1, #16
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f7ff ffb0 	bl	800d628 <lsm6dsr_write_reg>
 800d6c8:	60f8      	str	r0, [r7, #12]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3710      	adds	r7, #16
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}

0800d6d4 <lsm6dsr_xl_data_rate_set>:
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b086      	sub	sp, #24
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	460b      	mov	r3, r1
 800d6de:	70fb      	strb	r3, [r7, #3]
 800d6e0:	78fb      	ldrb	r3, [r7, #3]
 800d6e2:	75fb      	strb	r3, [r7, #23]
 800d6e4:	f107 030c 	add.w	r3, r7, #12
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 fd23 	bl	800e136 <lsm6dsr_fsm_enable_get>
 800d6f0:	6138      	str	r0, [r7, #16]
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	f040 80c4 	bne.w	800d882 <lsm6dsr_xl_data_rate_set+0x1ae>
 800d6fa:	7b3b      	ldrb	r3, [r7, #12]
 800d6fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d700:	b2da      	uxtb	r2, r3
 800d702:	7b3b      	ldrb	r3, [r7, #12]
 800d704:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	4313      	orrs	r3, r2
 800d70c:	b2da      	uxtb	r2, r3
 800d70e:	7b3b      	ldrb	r3, [r7, #12]
 800d710:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d714:	b2db      	uxtb	r3, r3
 800d716:	4313      	orrs	r3, r2
 800d718:	b2da      	uxtb	r2, r3
 800d71a:	7b3b      	ldrb	r3, [r7, #12]
 800d71c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d720:	b2db      	uxtb	r3, r3
 800d722:	4313      	orrs	r3, r2
 800d724:	b2da      	uxtb	r2, r3
 800d726:	7b3b      	ldrb	r3, [r7, #12]
 800d728:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	4313      	orrs	r3, r2
 800d730:	b2da      	uxtb	r2, r3
 800d732:	7b3b      	ldrb	r3, [r7, #12]
 800d734:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	4313      	orrs	r3, r2
 800d73c:	b2da      	uxtb	r2, r3
 800d73e:	7b3b      	ldrb	r3, [r7, #12]
 800d740:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800d744:	b2db      	uxtb	r3, r3
 800d746:	4313      	orrs	r3, r2
 800d748:	b2da      	uxtb	r2, r3
 800d74a:	7b3b      	ldrb	r3, [r7, #12]
 800d74c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d750:	b2db      	uxtb	r3, r3
 800d752:	4313      	orrs	r3, r2
 800d754:	b2da      	uxtb	r2, r3
 800d756:	7b7b      	ldrb	r3, [r7, #13]
 800d758:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d75c:	b2db      	uxtb	r3, r3
 800d75e:	4313      	orrs	r3, r2
 800d760:	b2da      	uxtb	r2, r3
 800d762:	7b7b      	ldrb	r3, [r7, #13]
 800d764:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d768:	b2db      	uxtb	r3, r3
 800d76a:	4313      	orrs	r3, r2
 800d76c:	b2da      	uxtb	r2, r3
 800d76e:	7b7b      	ldrb	r3, [r7, #13]
 800d770:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d774:	b2db      	uxtb	r3, r3
 800d776:	4313      	orrs	r3, r2
 800d778:	b2da      	uxtb	r2, r3
 800d77a:	7b7b      	ldrb	r3, [r7, #13]
 800d77c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d780:	b2db      	uxtb	r3, r3
 800d782:	4313      	orrs	r3, r2
 800d784:	b2da      	uxtb	r2, r3
 800d786:	7b7b      	ldrb	r3, [r7, #13]
 800d788:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d78c:	b2db      	uxtb	r3, r3
 800d78e:	4313      	orrs	r3, r2
 800d790:	b2da      	uxtb	r2, r3
 800d792:	7b7b      	ldrb	r3, [r7, #13]
 800d794:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	4313      	orrs	r3, r2
 800d79c:	b2da      	uxtb	r2, r3
 800d79e:	7b7b      	ldrb	r3, [r7, #13]
 800d7a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800d7a4:	b2db      	uxtb	r3, r3
 800d7a6:	4313      	orrs	r3, r2
 800d7a8:	b2da      	uxtb	r2, r3
 800d7aa:	7b7b      	ldrb	r3, [r7, #13]
 800d7ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	4313      	orrs	r3, r2
 800d7b4:	b2db      	uxtb	r3, r3
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	d163      	bne.n	800d882 <lsm6dsr_xl_data_rate_set+0x1ae>
 800d7ba:	f107 030b 	add.w	r3, r7, #11
 800d7be:	4619      	mov	r1, r3
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 fce5 	bl	800e190 <lsm6dsr_fsm_data_rate_get>
 800d7c6:	6138      	str	r0, [r7, #16]
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d159      	bne.n	800d882 <lsm6dsr_xl_data_rate_set+0x1ae>
 800d7ce:	7afb      	ldrb	r3, [r7, #11]
 800d7d0:	2b03      	cmp	r3, #3
 800d7d2:	d853      	bhi.n	800d87c <lsm6dsr_xl_data_rate_set+0x1a8>
 800d7d4:	a201      	add	r2, pc, #4	; (adr r2, 800d7dc <lsm6dsr_xl_data_rate_set+0x108>)
 800d7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7da:	bf00      	nop
 800d7dc:	0800d7ed 	.word	0x0800d7ed
 800d7e0:	0800d7ff 	.word	0x0800d7ff
 800d7e4:	0800d81d 	.word	0x0800d81d
 800d7e8:	0800d847 	.word	0x0800d847
 800d7ec:	78fb      	ldrb	r3, [r7, #3]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d102      	bne.n	800d7f8 <lsm6dsr_xl_data_rate_set+0x124>
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	75fb      	strb	r3, [r7, #23]
 800d7f6:	e045      	b.n	800d884 <lsm6dsr_xl_data_rate_set+0x1b0>
 800d7f8:	78fb      	ldrb	r3, [r7, #3]
 800d7fa:	75fb      	strb	r3, [r7, #23]
 800d7fc:	e042      	b.n	800d884 <lsm6dsr_xl_data_rate_set+0x1b0>
 800d7fe:	78fb      	ldrb	r3, [r7, #3]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d102      	bne.n	800d80a <lsm6dsr_xl_data_rate_set+0x136>
 800d804:	2302      	movs	r3, #2
 800d806:	75fb      	strb	r3, [r7, #23]
 800d808:	e03c      	b.n	800d884 <lsm6dsr_xl_data_rate_set+0x1b0>
 800d80a:	78fb      	ldrb	r3, [r7, #3]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d102      	bne.n	800d816 <lsm6dsr_xl_data_rate_set+0x142>
 800d810:	2302      	movs	r3, #2
 800d812:	75fb      	strb	r3, [r7, #23]
 800d814:	e036      	b.n	800d884 <lsm6dsr_xl_data_rate_set+0x1b0>
 800d816:	78fb      	ldrb	r3, [r7, #3]
 800d818:	75fb      	strb	r3, [r7, #23]
 800d81a:	e033      	b.n	800d884 <lsm6dsr_xl_data_rate_set+0x1b0>
 800d81c:	78fb      	ldrb	r3, [r7, #3]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d102      	bne.n	800d828 <lsm6dsr_xl_data_rate_set+0x154>
 800d822:	2303      	movs	r3, #3
 800d824:	75fb      	strb	r3, [r7, #23]
 800d826:	e02d      	b.n	800d884 <lsm6dsr_xl_data_rate_set+0x1b0>
 800d828:	78fb      	ldrb	r3, [r7, #3]
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d102      	bne.n	800d834 <lsm6dsr_xl_data_rate_set+0x160>
 800d82e:	2303      	movs	r3, #3
 800d830:	75fb      	strb	r3, [r7, #23]
 800d832:	e027      	b.n	800d884 <lsm6dsr_xl_data_rate_set+0x1b0>
 800d834:	78fb      	ldrb	r3, [r7, #3]
 800d836:	2b02      	cmp	r3, #2
 800d838:	d102      	bne.n	800d840 <lsm6dsr_xl_data_rate_set+0x16c>
 800d83a:	2303      	movs	r3, #3
 800d83c:	75fb      	strb	r3, [r7, #23]
 800d83e:	e021      	b.n	800d884 <lsm6dsr_xl_data_rate_set+0x1b0>
 800d840:	78fb      	ldrb	r3, [r7, #3]
 800d842:	75fb      	strb	r3, [r7, #23]
 800d844:	e01e      	b.n	800d884 <lsm6dsr_xl_data_rate_set+0x1b0>
 800d846:	78fb      	ldrb	r3, [r7, #3]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d102      	bne.n	800d852 <lsm6dsr_xl_data_rate_set+0x17e>
 800d84c:	2304      	movs	r3, #4
 800d84e:	75fb      	strb	r3, [r7, #23]
 800d850:	e018      	b.n	800d884 <lsm6dsr_xl_data_rate_set+0x1b0>
 800d852:	78fb      	ldrb	r3, [r7, #3]
 800d854:	2b01      	cmp	r3, #1
 800d856:	d102      	bne.n	800d85e <lsm6dsr_xl_data_rate_set+0x18a>
 800d858:	2304      	movs	r3, #4
 800d85a:	75fb      	strb	r3, [r7, #23]
 800d85c:	e012      	b.n	800d884 <lsm6dsr_xl_data_rate_set+0x1b0>
 800d85e:	78fb      	ldrb	r3, [r7, #3]
 800d860:	2b02      	cmp	r3, #2
 800d862:	d102      	bne.n	800d86a <lsm6dsr_xl_data_rate_set+0x196>
 800d864:	2304      	movs	r3, #4
 800d866:	75fb      	strb	r3, [r7, #23]
 800d868:	e00c      	b.n	800d884 <lsm6dsr_xl_data_rate_set+0x1b0>
 800d86a:	78fb      	ldrb	r3, [r7, #3]
 800d86c:	2b03      	cmp	r3, #3
 800d86e:	d102      	bne.n	800d876 <lsm6dsr_xl_data_rate_set+0x1a2>
 800d870:	2304      	movs	r3, #4
 800d872:	75fb      	strb	r3, [r7, #23]
 800d874:	e006      	b.n	800d884 <lsm6dsr_xl_data_rate_set+0x1b0>
 800d876:	78fb      	ldrb	r3, [r7, #3]
 800d878:	75fb      	strb	r3, [r7, #23]
 800d87a:	e003      	b.n	800d884 <lsm6dsr_xl_data_rate_set+0x1b0>
 800d87c:	78fb      	ldrb	r3, [r7, #3]
 800d87e:	75fb      	strb	r3, [r7, #23]
 800d880:	e000      	b.n	800d884 <lsm6dsr_xl_data_rate_set+0x1b0>
 800d882:	bf00      	nop
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d107      	bne.n	800d89a <lsm6dsr_xl_data_rate_set+0x1c6>
 800d88a:	f107 0208 	add.w	r2, r7, #8
 800d88e:	2301      	movs	r3, #1
 800d890:	2110      	movs	r1, #16
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f7ff feb0 	bl	800d5f8 <lsm6dsr_read_reg>
 800d898:	6138      	str	r0, [r7, #16]
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d10f      	bne.n	800d8c0 <lsm6dsr_xl_data_rate_set+0x1ec>
 800d8a0:	7dfb      	ldrb	r3, [r7, #23]
 800d8a2:	f003 030f 	and.w	r3, r3, #15
 800d8a6:	b2da      	uxtb	r2, r3
 800d8a8:	7a3b      	ldrb	r3, [r7, #8]
 800d8aa:	f362 1307 	bfi	r3, r2, #4, #4
 800d8ae:	723b      	strb	r3, [r7, #8]
 800d8b0:	f107 0208 	add.w	r2, r7, #8
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	2110      	movs	r1, #16
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f7ff feb5 	bl	800d628 <lsm6dsr_write_reg>
 800d8be:	6138      	str	r0, [r7, #16]
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3718      	adds	r7, #24
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}
 800d8ca:	bf00      	nop

0800d8cc <lsm6dsr_gy_full_scale_set>:
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	70fb      	strb	r3, [r7, #3]
 800d8d8:	f107 0208 	add.w	r2, r7, #8
 800d8dc:	2301      	movs	r3, #1
 800d8de:	2111      	movs	r1, #17
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f7ff fe89 	bl	800d5f8 <lsm6dsr_read_reg>
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d10f      	bne.n	800d90e <lsm6dsr_gy_full_scale_set+0x42>
 800d8ee:	78fb      	ldrb	r3, [r7, #3]
 800d8f0:	f003 030f 	and.w	r3, r3, #15
 800d8f4:	b2da      	uxtb	r2, r3
 800d8f6:	7a3b      	ldrb	r3, [r7, #8]
 800d8f8:	f362 0303 	bfi	r3, r2, #0, #4
 800d8fc:	723b      	strb	r3, [r7, #8]
 800d8fe:	f107 0208 	add.w	r2, r7, #8
 800d902:	2301      	movs	r3, #1
 800d904:	2111      	movs	r1, #17
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f7ff fe8e 	bl	800d628 <lsm6dsr_write_reg>
 800d90c:	60f8      	str	r0, [r7, #12]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	4618      	mov	r0, r3
 800d912:	3710      	adds	r7, #16
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <lsm6dsr_gy_data_rate_set>:
 800d918:	b580      	push	{r7, lr}
 800d91a:	b086      	sub	sp, #24
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	460b      	mov	r3, r1
 800d922:	70fb      	strb	r3, [r7, #3]
 800d924:	78fb      	ldrb	r3, [r7, #3]
 800d926:	75fb      	strb	r3, [r7, #23]
 800d928:	f107 030c 	add.w	r3, r7, #12
 800d92c:	4619      	mov	r1, r3
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 fc01 	bl	800e136 <lsm6dsr_fsm_enable_get>
 800d934:	6138      	str	r0, [r7, #16]
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	f040 80c4 	bne.w	800dac6 <lsm6dsr_gy_data_rate_set+0x1ae>
 800d93e:	7b3b      	ldrb	r3, [r7, #12]
 800d940:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d944:	b2da      	uxtb	r2, r3
 800d946:	7b3b      	ldrb	r3, [r7, #12]
 800d948:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	4313      	orrs	r3, r2
 800d950:	b2da      	uxtb	r2, r3
 800d952:	7b3b      	ldrb	r3, [r7, #12]
 800d954:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	4313      	orrs	r3, r2
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	7b3b      	ldrb	r3, [r7, #12]
 800d960:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d964:	b2db      	uxtb	r3, r3
 800d966:	4313      	orrs	r3, r2
 800d968:	b2da      	uxtb	r2, r3
 800d96a:	7b3b      	ldrb	r3, [r7, #12]
 800d96c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d970:	b2db      	uxtb	r3, r3
 800d972:	4313      	orrs	r3, r2
 800d974:	b2da      	uxtb	r2, r3
 800d976:	7b3b      	ldrb	r3, [r7, #12]
 800d978:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	4313      	orrs	r3, r2
 800d980:	b2da      	uxtb	r2, r3
 800d982:	7b3b      	ldrb	r3, [r7, #12]
 800d984:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	4313      	orrs	r3, r2
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	7b3b      	ldrb	r3, [r7, #12]
 800d990:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d994:	b2db      	uxtb	r3, r3
 800d996:	4313      	orrs	r3, r2
 800d998:	b2da      	uxtb	r2, r3
 800d99a:	7b7b      	ldrb	r3, [r7, #13]
 800d99c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	b2da      	uxtb	r2, r3
 800d9a6:	7b7b      	ldrb	r3, [r7, #13]
 800d9a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	b2da      	uxtb	r2, r3
 800d9b2:	7b7b      	ldrb	r3, [r7, #13]
 800d9b4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	b2da      	uxtb	r2, r3
 800d9be:	7b7b      	ldrb	r3, [r7, #13]
 800d9c0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	4313      	orrs	r3, r2
 800d9c8:	b2da      	uxtb	r2, r3
 800d9ca:	7b7b      	ldrb	r3, [r7, #13]
 800d9cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800d9d0:	b2db      	uxtb	r3, r3
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	b2da      	uxtb	r2, r3
 800d9d6:	7b7b      	ldrb	r3, [r7, #13]
 800d9d8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	b2da      	uxtb	r2, r3
 800d9e2:	7b7b      	ldrb	r3, [r7, #13]
 800d9e4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	4313      	orrs	r3, r2
 800d9ec:	b2da      	uxtb	r2, r3
 800d9ee:	7b7b      	ldrb	r3, [r7, #13]
 800d9f0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d163      	bne.n	800dac6 <lsm6dsr_gy_data_rate_set+0x1ae>
 800d9fe:	f107 030b 	add.w	r3, r7, #11
 800da02:	4619      	mov	r1, r3
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f000 fbc3 	bl	800e190 <lsm6dsr_fsm_data_rate_get>
 800da0a:	6138      	str	r0, [r7, #16]
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d159      	bne.n	800dac6 <lsm6dsr_gy_data_rate_set+0x1ae>
 800da12:	7afb      	ldrb	r3, [r7, #11]
 800da14:	2b03      	cmp	r3, #3
 800da16:	d853      	bhi.n	800dac0 <lsm6dsr_gy_data_rate_set+0x1a8>
 800da18:	a201      	add	r2, pc, #4	; (adr r2, 800da20 <lsm6dsr_gy_data_rate_set+0x108>)
 800da1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da1e:	bf00      	nop
 800da20:	0800da31 	.word	0x0800da31
 800da24:	0800da43 	.word	0x0800da43
 800da28:	0800da61 	.word	0x0800da61
 800da2c:	0800da8b 	.word	0x0800da8b
 800da30:	78fb      	ldrb	r3, [r7, #3]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d102      	bne.n	800da3c <lsm6dsr_gy_data_rate_set+0x124>
 800da36:	2301      	movs	r3, #1
 800da38:	75fb      	strb	r3, [r7, #23]
 800da3a:	e045      	b.n	800dac8 <lsm6dsr_gy_data_rate_set+0x1b0>
 800da3c:	78fb      	ldrb	r3, [r7, #3]
 800da3e:	75fb      	strb	r3, [r7, #23]
 800da40:	e042      	b.n	800dac8 <lsm6dsr_gy_data_rate_set+0x1b0>
 800da42:	78fb      	ldrb	r3, [r7, #3]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d102      	bne.n	800da4e <lsm6dsr_gy_data_rate_set+0x136>
 800da48:	2302      	movs	r3, #2
 800da4a:	75fb      	strb	r3, [r7, #23]
 800da4c:	e03c      	b.n	800dac8 <lsm6dsr_gy_data_rate_set+0x1b0>
 800da4e:	78fb      	ldrb	r3, [r7, #3]
 800da50:	2b01      	cmp	r3, #1
 800da52:	d102      	bne.n	800da5a <lsm6dsr_gy_data_rate_set+0x142>
 800da54:	2302      	movs	r3, #2
 800da56:	75fb      	strb	r3, [r7, #23]
 800da58:	e036      	b.n	800dac8 <lsm6dsr_gy_data_rate_set+0x1b0>
 800da5a:	78fb      	ldrb	r3, [r7, #3]
 800da5c:	75fb      	strb	r3, [r7, #23]
 800da5e:	e033      	b.n	800dac8 <lsm6dsr_gy_data_rate_set+0x1b0>
 800da60:	78fb      	ldrb	r3, [r7, #3]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d102      	bne.n	800da6c <lsm6dsr_gy_data_rate_set+0x154>
 800da66:	2303      	movs	r3, #3
 800da68:	75fb      	strb	r3, [r7, #23]
 800da6a:	e02d      	b.n	800dac8 <lsm6dsr_gy_data_rate_set+0x1b0>
 800da6c:	78fb      	ldrb	r3, [r7, #3]
 800da6e:	2b01      	cmp	r3, #1
 800da70:	d102      	bne.n	800da78 <lsm6dsr_gy_data_rate_set+0x160>
 800da72:	2303      	movs	r3, #3
 800da74:	75fb      	strb	r3, [r7, #23]
 800da76:	e027      	b.n	800dac8 <lsm6dsr_gy_data_rate_set+0x1b0>
 800da78:	78fb      	ldrb	r3, [r7, #3]
 800da7a:	2b02      	cmp	r3, #2
 800da7c:	d102      	bne.n	800da84 <lsm6dsr_gy_data_rate_set+0x16c>
 800da7e:	2303      	movs	r3, #3
 800da80:	75fb      	strb	r3, [r7, #23]
 800da82:	e021      	b.n	800dac8 <lsm6dsr_gy_data_rate_set+0x1b0>
 800da84:	78fb      	ldrb	r3, [r7, #3]
 800da86:	75fb      	strb	r3, [r7, #23]
 800da88:	e01e      	b.n	800dac8 <lsm6dsr_gy_data_rate_set+0x1b0>
 800da8a:	78fb      	ldrb	r3, [r7, #3]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d102      	bne.n	800da96 <lsm6dsr_gy_data_rate_set+0x17e>
 800da90:	2304      	movs	r3, #4
 800da92:	75fb      	strb	r3, [r7, #23]
 800da94:	e018      	b.n	800dac8 <lsm6dsr_gy_data_rate_set+0x1b0>
 800da96:	78fb      	ldrb	r3, [r7, #3]
 800da98:	2b01      	cmp	r3, #1
 800da9a:	d102      	bne.n	800daa2 <lsm6dsr_gy_data_rate_set+0x18a>
 800da9c:	2304      	movs	r3, #4
 800da9e:	75fb      	strb	r3, [r7, #23]
 800daa0:	e012      	b.n	800dac8 <lsm6dsr_gy_data_rate_set+0x1b0>
 800daa2:	78fb      	ldrb	r3, [r7, #3]
 800daa4:	2b02      	cmp	r3, #2
 800daa6:	d102      	bne.n	800daae <lsm6dsr_gy_data_rate_set+0x196>
 800daa8:	2304      	movs	r3, #4
 800daaa:	75fb      	strb	r3, [r7, #23]
 800daac:	e00c      	b.n	800dac8 <lsm6dsr_gy_data_rate_set+0x1b0>
 800daae:	78fb      	ldrb	r3, [r7, #3]
 800dab0:	2b03      	cmp	r3, #3
 800dab2:	d102      	bne.n	800daba <lsm6dsr_gy_data_rate_set+0x1a2>
 800dab4:	2304      	movs	r3, #4
 800dab6:	75fb      	strb	r3, [r7, #23]
 800dab8:	e006      	b.n	800dac8 <lsm6dsr_gy_data_rate_set+0x1b0>
 800daba:	78fb      	ldrb	r3, [r7, #3]
 800dabc:	75fb      	strb	r3, [r7, #23]
 800dabe:	e003      	b.n	800dac8 <lsm6dsr_gy_data_rate_set+0x1b0>
 800dac0:	78fb      	ldrb	r3, [r7, #3]
 800dac2:	75fb      	strb	r3, [r7, #23]
 800dac4:	e000      	b.n	800dac8 <lsm6dsr_gy_data_rate_set+0x1b0>
 800dac6:	bf00      	nop
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d107      	bne.n	800dade <lsm6dsr_gy_data_rate_set+0x1c6>
 800dace:	f107 0208 	add.w	r2, r7, #8
 800dad2:	2301      	movs	r3, #1
 800dad4:	2111      	movs	r1, #17
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f7ff fd8e 	bl	800d5f8 <lsm6dsr_read_reg>
 800dadc:	6138      	str	r0, [r7, #16]
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d10f      	bne.n	800db04 <lsm6dsr_gy_data_rate_set+0x1ec>
 800dae4:	7dfb      	ldrb	r3, [r7, #23]
 800dae6:	f003 030f 	and.w	r3, r3, #15
 800daea:	b2da      	uxtb	r2, r3
 800daec:	7a3b      	ldrb	r3, [r7, #8]
 800daee:	f362 1307 	bfi	r3, r2, #4, #4
 800daf2:	723b      	strb	r3, [r7, #8]
 800daf4:	f107 0208 	add.w	r2, r7, #8
 800daf8:	2301      	movs	r3, #1
 800dafa:	2111      	movs	r1, #17
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f7ff fd93 	bl	800d628 <lsm6dsr_write_reg>
 800db02:	6138      	str	r0, [r7, #16]
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	4618      	mov	r0, r3
 800db08:	3718      	adds	r7, #24
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop

0800db10 <lsm6dsr_block_data_update_set>:
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
 800db18:	460b      	mov	r3, r1
 800db1a:	70fb      	strb	r3, [r7, #3]
 800db1c:	f107 0208 	add.w	r2, r7, #8
 800db20:	2301      	movs	r3, #1
 800db22:	2112      	movs	r1, #18
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f7ff fd67 	bl	800d5f8 <lsm6dsr_read_reg>
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d10f      	bne.n	800db52 <lsm6dsr_block_data_update_set+0x42>
 800db32:	78fb      	ldrb	r3, [r7, #3]
 800db34:	f003 0301 	and.w	r3, r3, #1
 800db38:	b2da      	uxtb	r2, r3
 800db3a:	7a3b      	ldrb	r3, [r7, #8]
 800db3c:	f362 1386 	bfi	r3, r2, #6, #1
 800db40:	723b      	strb	r3, [r7, #8]
 800db42:	f107 0208 	add.w	r2, r7, #8
 800db46:	2301      	movs	r3, #1
 800db48:	2112      	movs	r1, #18
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f7ff fd6c 	bl	800d628 <lsm6dsr_write_reg>
 800db50:	60f8      	str	r0, [r7, #12]
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	4618      	mov	r0, r3
 800db56:	3710      	adds	r7, #16
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <lsm6dsr_acceleration_raw_get>:
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b086      	sub	sp, #24
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	6039      	str	r1, [r7, #0]
 800db66:	f107 020c 	add.w	r2, r7, #12
 800db6a:	2306      	movs	r3, #6
 800db6c:	2128      	movs	r1, #40	; 0x28
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f7ff fd42 	bl	800d5f8 <lsm6dsr_read_reg>
 800db74:	6178      	str	r0, [r7, #20]
 800db76:	7b7b      	ldrb	r3, [r7, #13]
 800db78:	b21a      	sxth	r2, r3
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	801a      	strh	r2, [r3, #0]
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db84:	b29b      	uxth	r3, r3
 800db86:	021b      	lsls	r3, r3, #8
 800db88:	b29a      	uxth	r2, r3
 800db8a:	7b3b      	ldrb	r3, [r7, #12]
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	4413      	add	r3, r2
 800db90:	b29b      	uxth	r3, r3
 800db92:	b21a      	sxth	r2, r3
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	801a      	strh	r2, [r3, #0]
 800db98:	7bfa      	ldrb	r2, [r7, #15]
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	3302      	adds	r3, #2
 800db9e:	b212      	sxth	r2, r2
 800dba0:	801a      	strh	r2, [r3, #0]
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	3302      	adds	r3, #2
 800dba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	021b      	lsls	r3, r3, #8
 800dbae:	b29a      	uxth	r2, r3
 800dbb0:	7bbb      	ldrb	r3, [r7, #14]
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	4413      	add	r3, r2
 800dbb6:	b29a      	uxth	r2, r3
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	3302      	adds	r3, #2
 800dbbc:	b212      	sxth	r2, r2
 800dbbe:	801a      	strh	r2, [r3, #0]
 800dbc0:	7c7a      	ldrb	r2, [r7, #17]
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	3304      	adds	r3, #4
 800dbc6:	b212      	sxth	r2, r2
 800dbc8:	801a      	strh	r2, [r3, #0]
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	3304      	adds	r3, #4
 800dbce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbd2:	b29b      	uxth	r3, r3
 800dbd4:	021b      	lsls	r3, r3, #8
 800dbd6:	b29a      	uxth	r2, r3
 800dbd8:	7c3b      	ldrb	r3, [r7, #16]
 800dbda:	b29b      	uxth	r3, r3
 800dbdc:	4413      	add	r3, r2
 800dbde:	b29a      	uxth	r2, r3
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	3304      	adds	r3, #4
 800dbe4:	b212      	sxth	r2, r2
 800dbe6:	801a      	strh	r2, [r3, #0]
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	4618      	mov	r0, r3
 800dbec:	3718      	adds	r7, #24
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}

0800dbf2 <lsm6dsr_mem_bank_set>:
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	b084      	sub	sp, #16
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	70fb      	strb	r3, [r7, #3]
 800dbfe:	f107 0208 	add.w	r2, r7, #8
 800dc02:	2301      	movs	r3, #1
 800dc04:	2101      	movs	r1, #1
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f7ff fcf6 	bl	800d5f8 <lsm6dsr_read_reg>
 800dc0c:	60f8      	str	r0, [r7, #12]
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d10f      	bne.n	800dc34 <lsm6dsr_mem_bank_set+0x42>
 800dc14:	78fb      	ldrb	r3, [r7, #3]
 800dc16:	f003 0303 	and.w	r3, r3, #3
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	7a3b      	ldrb	r3, [r7, #8]
 800dc1e:	f362 1387 	bfi	r3, r2, #6, #2
 800dc22:	723b      	strb	r3, [r7, #8]
 800dc24:	f107 0208 	add.w	r2, r7, #8
 800dc28:	2301      	movs	r3, #1
 800dc2a:	2101      	movs	r1, #1
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f7ff fcfb 	bl	800d628 <lsm6dsr_write_reg>
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	4618      	mov	r0, r3
 800dc38:	3710      	adds	r7, #16
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}

0800dc3e <lsm6dsr_device_id_get>:
 800dc3e:	b580      	push	{r7, lr}
 800dc40:	b084      	sub	sp, #16
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	6078      	str	r0, [r7, #4]
 800dc46:	6039      	str	r1, [r7, #0]
 800dc48:	2301      	movs	r3, #1
 800dc4a:	683a      	ldr	r2, [r7, #0]
 800dc4c:	210f      	movs	r1, #15
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f7ff fcd2 	bl	800d5f8 <lsm6dsr_read_reg>
 800dc54:	60f8      	str	r0, [r7, #12]
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3710      	adds	r7, #16
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}

0800dc60 <lsm6dsr_reset_set>:
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	460b      	mov	r3, r1
 800dc6a:	70fb      	strb	r3, [r7, #3]
 800dc6c:	f107 0208 	add.w	r2, r7, #8
 800dc70:	2301      	movs	r3, #1
 800dc72:	2112      	movs	r1, #18
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f7ff fcbf 	bl	800d5f8 <lsm6dsr_read_reg>
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d10f      	bne.n	800dca2 <lsm6dsr_reset_set+0x42>
 800dc82:	78fb      	ldrb	r3, [r7, #3]
 800dc84:	f003 0301 	and.w	r3, r3, #1
 800dc88:	b2da      	uxtb	r2, r3
 800dc8a:	7a3b      	ldrb	r3, [r7, #8]
 800dc8c:	f362 0300 	bfi	r3, r2, #0, #1
 800dc90:	723b      	strb	r3, [r7, #8]
 800dc92:	f107 0208 	add.w	r2, r7, #8
 800dc96:	2301      	movs	r3, #1
 800dc98:	2112      	movs	r1, #18
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f7ff fcc4 	bl	800d628 <lsm6dsr_write_reg>
 800dca0:	60f8      	str	r0, [r7, #12]
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	4618      	mov	r0, r3
 800dca6:	3710      	adds	r7, #16
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <lsm6dsr_xl_hp_path_internal_set>:
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b084      	sub	sp, #16
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	70fb      	strb	r3, [r7, #3]
 800dcb8:	f107 0208 	add.w	r2, r7, #8
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	2156      	movs	r1, #86	; 0x56
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f7ff fc99 	bl	800d5f8 <lsm6dsr_read_reg>
 800dcc6:	60f8      	str	r0, [r7, #12]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d10f      	bne.n	800dcee <lsm6dsr_xl_hp_path_internal_set+0x42>
 800dcce:	78fb      	ldrb	r3, [r7, #3]
 800dcd0:	f003 0301 	and.w	r3, r3, #1
 800dcd4:	b2da      	uxtb	r2, r3
 800dcd6:	7a3b      	ldrb	r3, [r7, #8]
 800dcd8:	f362 1304 	bfi	r3, r2, #4, #1
 800dcdc:	723b      	strb	r3, [r7, #8]
 800dcde:	f107 0208 	add.w	r2, r7, #8
 800dce2:	2301      	movs	r3, #1
 800dce4:	2156      	movs	r1, #86	; 0x56
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f7ff fc9e 	bl	800d628 <lsm6dsr_write_reg>
 800dcec:	60f8      	str	r0, [r7, #12]
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3710      	adds	r7, #16
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <lsm6dsr_i3c_disable_set>:
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b086      	sub	sp, #24
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	460b      	mov	r3, r1
 800dd02:	70fb      	strb	r3, [r7, #3]
 800dd04:	f107 0210 	add.w	r2, r7, #16
 800dd08:	2301      	movs	r3, #1
 800dd0a:	2118      	movs	r1, #24
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f7ff fc73 	bl	800d5f8 <lsm6dsr_read_reg>
 800dd12:	6178      	str	r0, [r7, #20]
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d111      	bne.n	800dd3e <lsm6dsr_i3c_disable_set+0x46>
 800dd1a:	78fb      	ldrb	r3, [r7, #3]
 800dd1c:	09db      	lsrs	r3, r3, #7
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	f003 0301 	and.w	r3, r3, #1
 800dd24:	b2da      	uxtb	r2, r3
 800dd26:	7c3b      	ldrb	r3, [r7, #16]
 800dd28:	f362 0341 	bfi	r3, r2, #1, #1
 800dd2c:	743b      	strb	r3, [r7, #16]
 800dd2e:	f107 0210 	add.w	r2, r7, #16
 800dd32:	2301      	movs	r3, #1
 800dd34:	2118      	movs	r1, #24
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f7ff fc76 	bl	800d628 <lsm6dsr_write_reg>
 800dd3c:	6178      	str	r0, [r7, #20]
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d107      	bne.n	800dd54 <lsm6dsr_i3c_disable_set+0x5c>
 800dd44:	f107 020c 	add.w	r2, r7, #12
 800dd48:	2301      	movs	r3, #1
 800dd4a:	2162      	movs	r1, #98	; 0x62
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f7ff fc53 	bl	800d5f8 <lsm6dsr_read_reg>
 800dd52:	6178      	str	r0, [r7, #20]
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d10f      	bne.n	800dd7a <lsm6dsr_i3c_disable_set+0x82>
 800dd5a:	78fb      	ldrb	r3, [r7, #3]
 800dd5c:	f003 0303 	and.w	r3, r3, #3
 800dd60:	b2da      	uxtb	r2, r3
 800dd62:	7b3b      	ldrb	r3, [r7, #12]
 800dd64:	f362 03c4 	bfi	r3, r2, #3, #2
 800dd68:	733b      	strb	r3, [r7, #12]
 800dd6a:	f107 020c 	add.w	r2, r7, #12
 800dd6e:	2301      	movs	r3, #1
 800dd70:	2162      	movs	r1, #98	; 0x62
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7ff fc58 	bl	800d628 <lsm6dsr_write_reg>
 800dd78:	6178      	str	r0, [r7, #20]
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3718      	adds	r7, #24
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <lsm6dsr_pin_int1_route_set>:
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
 800dd8e:	2102      	movs	r1, #2
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7ff ff2e 	bl	800dbf2 <lsm6dsr_mem_bank_set>
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d107      	bne.n	800ddae <lsm6dsr_pin_int1_route_set+0x2a>
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	1c9a      	adds	r2, r3, #2
 800dda2:	2301      	movs	r3, #1
 800dda4:	210a      	movs	r1, #10
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f7ff fc3e 	bl	800d628 <lsm6dsr_write_reg>
 800ddac:	60f8      	str	r0, [r7, #12]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d107      	bne.n	800ddc4 <lsm6dsr_pin_int1_route_set+0x40>
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	1cda      	adds	r2, r3, #3
 800ddb8:	2301      	movs	r3, #1
 800ddba:	210b      	movs	r1, #11
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7ff fc33 	bl	800d628 <lsm6dsr_write_reg>
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d107      	bne.n	800ddda <lsm6dsr_pin_int1_route_set+0x56>
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	1d1a      	adds	r2, r3, #4
 800ddce:	2301      	movs	r3, #1
 800ddd0:	210c      	movs	r1, #12
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f7ff fc28 	bl	800d628 <lsm6dsr_write_reg>
 800ddd8:	60f8      	str	r0, [r7, #12]
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d104      	bne.n	800ddea <lsm6dsr_pin_int1_route_set+0x66>
 800dde0:	2100      	movs	r1, #0
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f7ff ff05 	bl	800dbf2 <lsm6dsr_mem_bank_set>
 800dde8:	60f8      	str	r0, [r7, #12]
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	f040 809e 	bne.w	800df2e <lsm6dsr_pin_int1_route_set+0x1aa>
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	789b      	ldrb	r3, [r3, #2]
 800ddf6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ddfa:	b2da      	uxtb	r2, r3
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	789b      	ldrb	r3, [r3, #2]
 800de00:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800de04:	b2db      	uxtb	r3, r3
 800de06:	4313      	orrs	r3, r2
 800de08:	b2da      	uxtb	r2, r3
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	789b      	ldrb	r3, [r3, #2]
 800de0e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800de12:	b2db      	uxtb	r3, r3
 800de14:	4313      	orrs	r3, r2
 800de16:	b2da      	uxtb	r2, r3
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	789b      	ldrb	r3, [r3, #2]
 800de1c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800de20:	b2db      	uxtb	r3, r3
 800de22:	4313      	orrs	r3, r2
 800de24:	b2da      	uxtb	r2, r3
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	78db      	ldrb	r3, [r3, #3]
 800de2a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800de2e:	b2db      	uxtb	r3, r3
 800de30:	4313      	orrs	r3, r2
 800de32:	b2da      	uxtb	r2, r3
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	78db      	ldrb	r3, [r3, #3]
 800de38:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	4313      	orrs	r3, r2
 800de40:	b2da      	uxtb	r2, r3
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	78db      	ldrb	r3, [r3, #3]
 800de46:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	4313      	orrs	r3, r2
 800de4e:	b2da      	uxtb	r2, r3
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	78db      	ldrb	r3, [r3, #3]
 800de54:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	4313      	orrs	r3, r2
 800de5c:	b2da      	uxtb	r2, r3
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	78db      	ldrb	r3, [r3, #3]
 800de62:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800de66:	b2db      	uxtb	r3, r3
 800de68:	4313      	orrs	r3, r2
 800de6a:	b2da      	uxtb	r2, r3
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	78db      	ldrb	r3, [r3, #3]
 800de70:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800de74:	b2db      	uxtb	r3, r3
 800de76:	4313      	orrs	r3, r2
 800de78:	b2da      	uxtb	r2, r3
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	78db      	ldrb	r3, [r3, #3]
 800de7e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800de82:	b2db      	uxtb	r3, r3
 800de84:	4313      	orrs	r3, r2
 800de86:	b2da      	uxtb	r2, r3
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	78db      	ldrb	r3, [r3, #3]
 800de8c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800de90:	b2db      	uxtb	r3, r3
 800de92:	4313      	orrs	r3, r2
 800de94:	b2da      	uxtb	r2, r3
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	791b      	ldrb	r3, [r3, #4]
 800de9a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800de9e:	b2db      	uxtb	r3, r3
 800dea0:	4313      	orrs	r3, r2
 800dea2:	b2da      	uxtb	r2, r3
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	791b      	ldrb	r3, [r3, #4]
 800dea8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800deac:	b2db      	uxtb	r3, r3
 800deae:	4313      	orrs	r3, r2
 800deb0:	b2da      	uxtb	r2, r3
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	791b      	ldrb	r3, [r3, #4]
 800deb6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800deba:	b2db      	uxtb	r3, r3
 800debc:	4313      	orrs	r3, r2
 800debe:	b2da      	uxtb	r2, r3
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	791b      	ldrb	r3, [r3, #4]
 800dec4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	4313      	orrs	r3, r2
 800decc:	b2da      	uxtb	r2, r3
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	791b      	ldrb	r3, [r3, #4]
 800ded2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ded6:	b2db      	uxtb	r3, r3
 800ded8:	4313      	orrs	r3, r2
 800deda:	b2da      	uxtb	r2, r3
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	791b      	ldrb	r3, [r3, #4]
 800dee0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	4313      	orrs	r3, r2
 800dee8:	b2da      	uxtb	r2, r3
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	791b      	ldrb	r3, [r3, #4]
 800deee:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800def2:	b2db      	uxtb	r3, r3
 800def4:	4313      	orrs	r3, r2
 800def6:	b2da      	uxtb	r2, r3
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	791b      	ldrb	r3, [r3, #4]
 800defc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800df00:	b2db      	uxtb	r3, r3
 800df02:	4313      	orrs	r3, r2
 800df04:	b2db      	uxtb	r3, r3
 800df06:	2b00      	cmp	r3, #0
 800df08:	d005      	beq.n	800df16 <lsm6dsr_pin_int1_route_set+0x192>
 800df0a:	683a      	ldr	r2, [r7, #0]
 800df0c:	7853      	ldrb	r3, [r2, #1]
 800df0e:	f043 0302 	orr.w	r3, r3, #2
 800df12:	7053      	strb	r3, [r2, #1]
 800df14:	e004      	b.n	800df20 <lsm6dsr_pin_int1_route_set+0x19c>
 800df16:	683a      	ldr	r2, [r7, #0]
 800df18:	7853      	ldrb	r3, [r2, #1]
 800df1a:	f36f 0341 	bfc	r3, #1, #1
 800df1e:	7053      	strb	r3, [r2, #1]
 800df20:	683a      	ldr	r2, [r7, #0]
 800df22:	2301      	movs	r3, #1
 800df24:	210d      	movs	r1, #13
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7ff fb7e 	bl	800d628 <lsm6dsr_write_reg>
 800df2c:	60f8      	str	r0, [r7, #12]
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d107      	bne.n	800df44 <lsm6dsr_pin_int1_route_set+0x1c0>
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	1c5a      	adds	r2, r3, #1
 800df38:	2301      	movs	r3, #1
 800df3a:	215e      	movs	r1, #94	; 0x5e
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f7ff fb73 	bl	800d628 <lsm6dsr_write_reg>
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d172      	bne.n	800e030 <lsm6dsr_pin_int1_route_set+0x2ac>
 800df4a:	f107 0208 	add.w	r2, r7, #8
 800df4e:	2301      	movs	r3, #1
 800df50:	2158      	movs	r1, #88	; 0x58
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f7ff fb50 	bl	800d5f8 <lsm6dsr_read_reg>
 800df58:	60f8      	str	r0, [r7, #12]
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800df62:	b2da      	uxtb	r2, r3
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	4313      	orrs	r3, r2
 800df70:	b2da      	uxtb	r2, r3
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	4313      	orrs	r3, r2
 800df7e:	b2da      	uxtb	r2, r3
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	4313      	orrs	r3, r2
 800df8c:	b2da      	uxtb	r2, r3
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800df96:	b2db      	uxtb	r3, r3
 800df98:	4313      	orrs	r3, r2
 800df9a:	b2da      	uxtb	r2, r3
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	781b      	ldrb	r3, [r3, #0]
 800dfa0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	4313      	orrs	r3, r2
 800dfa8:	b2da      	uxtb	r2, r3
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800dfb2:	b2db      	uxtb	r3, r3
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	b2da      	uxtb	r2, r3
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800dfc0:	b2db      	uxtb	r3, r3
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	b2da      	uxtb	r2, r3
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	785b      	ldrb	r3, [r3, #1]
 800dfca:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	b2da      	uxtb	r2, r3
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	785b      	ldrb	r3, [r3, #1]
 800dfd8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	b2da      	uxtb	r2, r3
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	785b      	ldrb	r3, [r3, #1]
 800dfe6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800dfea:	b2db      	uxtb	r3, r3
 800dfec:	4313      	orrs	r3, r2
 800dfee:	b2da      	uxtb	r2, r3
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	785b      	ldrb	r3, [r3, #1]
 800dff4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dff8:	b2db      	uxtb	r3, r3
 800dffa:	4313      	orrs	r3, r2
 800dffc:	b2da      	uxtb	r2, r3
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	785b      	ldrb	r3, [r3, #1]
 800e002:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800e006:	b2db      	uxtb	r3, r3
 800e008:	4313      	orrs	r3, r2
 800e00a:	b2da      	uxtb	r2, r3
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	785b      	ldrb	r3, [r3, #1]
 800e010:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e014:	b2db      	uxtb	r3, r3
 800e016:	4313      	orrs	r3, r2
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d004      	beq.n	800e028 <lsm6dsr_pin_int1_route_set+0x2a4>
 800e01e:	7a3b      	ldrb	r3, [r7, #8]
 800e020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e024:	723b      	strb	r3, [r7, #8]
 800e026:	e003      	b.n	800e030 <lsm6dsr_pin_int1_route_set+0x2ac>
 800e028:	7a3b      	ldrb	r3, [r7, #8]
 800e02a:	f36f 13c7 	bfc	r3, #7, #1
 800e02e:	723b      	strb	r3, [r7, #8]
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d107      	bne.n	800e046 <lsm6dsr_pin_int1_route_set+0x2c2>
 800e036:	f107 0208 	add.w	r2, r7, #8
 800e03a:	2301      	movs	r3, #1
 800e03c:	2158      	movs	r1, #88	; 0x58
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f7ff faf2 	bl	800d628 <lsm6dsr_write_reg>
 800e044:	60f8      	str	r0, [r7, #12]
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	4618      	mov	r0, r3
 800e04a:	3710      	adds	r7, #16
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <lsm6dsr_pin_int1_route_get>:
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
 800e05a:	2102      	movs	r1, #2
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f7ff fdc8 	bl	800dbf2 <lsm6dsr_mem_bank_set>
 800e062:	60f8      	str	r0, [r7, #12]
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d107      	bne.n	800e07a <lsm6dsr_pin_int1_route_get+0x2a>
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	1c9a      	adds	r2, r3, #2
 800e06e:	2301      	movs	r3, #1
 800e070:	210a      	movs	r1, #10
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f7ff fac0 	bl	800d5f8 <lsm6dsr_read_reg>
 800e078:	60f8      	str	r0, [r7, #12]
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d107      	bne.n	800e090 <lsm6dsr_pin_int1_route_get+0x40>
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	1cda      	adds	r2, r3, #3
 800e084:	2301      	movs	r3, #1
 800e086:	210b      	movs	r1, #11
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f7ff fab5 	bl	800d5f8 <lsm6dsr_read_reg>
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d107      	bne.n	800e0a6 <lsm6dsr_pin_int1_route_get+0x56>
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	1d1a      	adds	r2, r3, #4
 800e09a:	2301      	movs	r3, #1
 800e09c:	210c      	movs	r1, #12
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f7ff faaa 	bl	800d5f8 <lsm6dsr_read_reg>
 800e0a4:	60f8      	str	r0, [r7, #12]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d104      	bne.n	800e0b6 <lsm6dsr_pin_int1_route_get+0x66>
 800e0ac:	2100      	movs	r1, #0
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f7ff fd9f 	bl	800dbf2 <lsm6dsr_mem_bank_set>
 800e0b4:	60f8      	str	r0, [r7, #12]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d106      	bne.n	800e0ca <lsm6dsr_pin_int1_route_get+0x7a>
 800e0bc:	683a      	ldr	r2, [r7, #0]
 800e0be:	2301      	movs	r3, #1
 800e0c0:	210d      	movs	r1, #13
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f7ff fa98 	bl	800d5f8 <lsm6dsr_read_reg>
 800e0c8:	60f8      	str	r0, [r7, #12]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d107      	bne.n	800e0e0 <lsm6dsr_pin_int1_route_get+0x90>
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	1c5a      	adds	r2, r3, #1
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	215e      	movs	r1, #94	; 0x5e
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f7ff fa8d 	bl	800d5f8 <lsm6dsr_read_reg>
 800e0de:	60f8      	str	r0, [r7, #12]
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3710      	adds	r7, #16
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}

0800e0ea <lsm6dsr_wkup_threshold_set>:
 800e0ea:	b580      	push	{r7, lr}
 800e0ec:	b084      	sub	sp, #16
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	6078      	str	r0, [r7, #4]
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	70fb      	strb	r3, [r7, #3]
 800e0f6:	f107 0208 	add.w	r2, r7, #8
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	215b      	movs	r1, #91	; 0x5b
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f7ff fa7a 	bl	800d5f8 <lsm6dsr_read_reg>
 800e104:	60f8      	str	r0, [r7, #12]
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d10f      	bne.n	800e12c <lsm6dsr_wkup_threshold_set+0x42>
 800e10c:	78fb      	ldrb	r3, [r7, #3]
 800e10e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e112:	b2da      	uxtb	r2, r3
 800e114:	7a3b      	ldrb	r3, [r7, #8]
 800e116:	f362 0305 	bfi	r3, r2, #0, #6
 800e11a:	723b      	strb	r3, [r7, #8]
 800e11c:	f107 0208 	add.w	r2, r7, #8
 800e120:	2301      	movs	r3, #1
 800e122:	215b      	movs	r1, #91	; 0x5b
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f7ff fa7f 	bl	800d628 <lsm6dsr_write_reg>
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	4618      	mov	r0, r3
 800e130:	3710      	adds	r7, #16
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}

0800e136 <lsm6dsr_fsm_enable_get>:
 800e136:	b580      	push	{r7, lr}
 800e138:	b084      	sub	sp, #16
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	6078      	str	r0, [r7, #4]
 800e13e:	6039      	str	r1, [r7, #0]
 800e140:	2102      	movs	r1, #2
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f7ff fd55 	bl	800dbf2 <lsm6dsr_mem_bank_set>
 800e148:	60f8      	str	r0, [r7, #12]
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d106      	bne.n	800e15e <lsm6dsr_fsm_enable_get+0x28>
 800e150:	683a      	ldr	r2, [r7, #0]
 800e152:	2301      	movs	r3, #1
 800e154:	2146      	movs	r1, #70	; 0x46
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f7ff fa4e 	bl	800d5f8 <lsm6dsr_read_reg>
 800e15c:	60f8      	str	r0, [r7, #12]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d107      	bne.n	800e174 <lsm6dsr_fsm_enable_get+0x3e>
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	1c5a      	adds	r2, r3, #1
 800e168:	2301      	movs	r3, #1
 800e16a:	2147      	movs	r1, #71	; 0x47
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f7ff fa43 	bl	800d5f8 <lsm6dsr_read_reg>
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d104      	bne.n	800e184 <lsm6dsr_fsm_enable_get+0x4e>
 800e17a:	2100      	movs	r1, #0
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f7ff fd38 	bl	800dbf2 <lsm6dsr_mem_bank_set>
 800e182:	60f8      	str	r0, [r7, #12]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	4618      	mov	r0, r3
 800e188:	3710      	adds	r7, #16
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
	...

0800e190 <lsm6dsr_fsm_data_rate_get>:
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
 800e19a:	2102      	movs	r1, #2
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f7ff fd28 	bl	800dbf2 <lsm6dsr_mem_bank_set>
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d107      	bne.n	800e1ba <lsm6dsr_fsm_data_rate_get+0x2a>
 800e1aa:	f107 0208 	add.w	r2, r7, #8
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	215f      	movs	r1, #95	; 0x5f
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f7ff fa20 	bl	800d5f8 <lsm6dsr_read_reg>
 800e1b8:	60f8      	str	r0, [r7, #12]
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d104      	bne.n	800e1ca <lsm6dsr_fsm_data_rate_get+0x3a>
 800e1c0:	2100      	movs	r1, #0
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f7ff fd15 	bl	800dbf2 <lsm6dsr_mem_bank_set>
 800e1c8:	60f8      	str	r0, [r7, #12]
 800e1ca:	7a3b      	ldrb	r3, [r7, #8]
 800e1cc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800e1d0:	b2db      	uxtb	r3, r3
 800e1d2:	2b03      	cmp	r3, #3
 800e1d4:	d81a      	bhi.n	800e20c <lsm6dsr_fsm_data_rate_get+0x7c>
 800e1d6:	a201      	add	r2, pc, #4	; (adr r2, 800e1dc <lsm6dsr_fsm_data_rate_get+0x4c>)
 800e1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1dc:	0800e1ed 	.word	0x0800e1ed
 800e1e0:	0800e1f5 	.word	0x0800e1f5
 800e1e4:	0800e1fd 	.word	0x0800e1fd
 800e1e8:	0800e205 	.word	0x0800e205
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	701a      	strb	r2, [r3, #0]
 800e1f2:	e00f      	b.n	800e214 <lsm6dsr_fsm_data_rate_get+0x84>
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	701a      	strb	r2, [r3, #0]
 800e1fa:	e00b      	b.n	800e214 <lsm6dsr_fsm_data_rate_get+0x84>
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	2202      	movs	r2, #2
 800e200:	701a      	strb	r2, [r3, #0]
 800e202:	e007      	b.n	800e214 <lsm6dsr_fsm_data_rate_get+0x84>
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	2203      	movs	r2, #3
 800e208:	701a      	strb	r2, [r3, #0]
 800e20a:	e003      	b.n	800e214 <lsm6dsr_fsm_data_rate_get+0x84>
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	2200      	movs	r2, #0
 800e210:	701a      	strb	r2, [r3, #0]
 800e212:	bf00      	nop
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	4618      	mov	r0, r3
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop

0800e220 <get_temperature>:
#include "max6675.h"

#define MAX_SPI_HANDLE hspi2


thermocouple_status_t get_temperature(float *temperature){
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
	uint8_t tmp[2];
	HAL_GPIO_WritePin(TC_CS_GPIO_Port, TC_CS_Pin, GPIO_PIN_RESET);
 800e228:	2200      	movs	r2, #0
 800e22a:	2108      	movs	r1, #8
 800e22c:	4815      	ldr	r0, [pc, #84]	; (800e284 <get_temperature+0x64>)
 800e22e:	f001 fc7f 	bl	800fb30 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&MAX_SPI_HANDLE, tmp, 2, 2);
 800e232:	f107 010c 	add.w	r1, r7, #12
 800e236:	2302      	movs	r3, #2
 800e238:	2202      	movs	r2, #2
 800e23a:	4813      	ldr	r0, [pc, #76]	; (800e288 <get_temperature+0x68>)
 800e23c:	f003 fc99 	bl	8011b72 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(TC_CS_GPIO_Port, TC_CS_Pin, GPIO_PIN_SET);
 800e240:	2201      	movs	r2, #1
 800e242:	2108      	movs	r1, #8
 800e244:	480f      	ldr	r0, [pc, #60]	; (800e284 <get_temperature+0x64>)
 800e246:	f001 fc73 	bl	800fb30 <HAL_GPIO_WritePin>
	if(tmp[1] & 0x04){
 800e24a:	7b7b      	ldrb	r3, [r7, #13]
 800e24c:	f003 0304 	and.w	r3, r3, #4
 800e250:	2b00      	cmp	r3, #0
 800e252:	d001      	beq.n	800e258 <get_temperature+0x38>
		return TMP_OPEN;
 800e254:	2301      	movs	r3, #1
 800e256:	e011      	b.n	800e27c <get_temperature+0x5c>
	} else {
		*temperature = (((uint16_t)(tmp[0]) << 5) + ((tmp[1] & 0xF8) >> 3))/4.0f;
 800e258:	7b3b      	ldrb	r3, [r7, #12]
 800e25a:	015b      	lsls	r3, r3, #5
 800e25c:	7b7a      	ldrb	r2, [r7, #13]
 800e25e:	08d2      	lsrs	r2, r2, #3
 800e260:	b2d2      	uxtb	r2, r2
 800e262:	4413      	add	r3, r2
 800e264:	ee07 3a90 	vmov	s15, r3
 800e268:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e26c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800e270:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	edc3 7a00 	vstr	s15, [r3]
		return TMP_OK;
 800e27a:	2300      	movs	r3, #0
	}
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3710      	adds	r7, #16
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	40020000 	.word	0x40020000
 800e288:	20007a3c 	.word	0x20007a3c

0800e28c <Error_Handler>:
TIM_HandleTypeDef htim4;

UART_HandleTypeDef huart1;

void Error_Handler(void)
{
 800e28c:	b480      	push	{r7}
 800e28e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800e290:	b672      	cpsid	i
}
 800e292:	bf00      	nop
  __disable_irq();
  while (1)
 800e294:	e7fe      	b.n	800e294 <Error_Handler+0x8>
	...

0800e298 <task_buzzer>:
	"DBFG" // bootup
    "ace",  // ready
    "eca",  // not ready
};

void task_buzzer(void *argument) {
 800e298:	b580      	push	{r7, lr}
 800e29a:	b086      	sub	sp, #24
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
	beeps_t id;

	buzzer_set_volume(&BUZZER, 20);
 800e2a0:	2114      	movs	r1, #20
 800e2a2:	4833      	ldr	r0, [pc, #204]	; (800e370 <task_buzzer+0xd8>)
 800e2a4:	f7fe f97a 	bl	800c59c <buzzer_set_volume>
	buzzer_set_freq(&BUZZER, 2500);
 800e2a8:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800e2ac:	4830      	ldr	r0, [pc, #192]	; (800e370 <task_buzzer+0xd8>)
 800e2ae:	f7fe f9b9 	bl	800c624 <buzzer_set_freq>

	while (1) {
		id = osEventFlagsWait(buzzer_event_id, 0x0001U, osFlagsWaitAny, osWaitForever);
 800e2b2:	4b30      	ldr	r3, [pc, #192]	; (800e374 <task_buzzer+0xdc>)
 800e2b4:	6818      	ldr	r0, [r3, #0]
 800e2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	2101      	movs	r1, #1
 800e2be:	f008 fb5d 	bl	801697c <osEventFlagsWait>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	73fb      	strb	r3, [r7, #15]
		osEventFlagsClear(buzzer_event_id, id);
 800e2c6:	4b2b      	ldr	r3, [pc, #172]	; (800e374 <task_buzzer+0xdc>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	7bfa      	ldrb	r2, [r7, #15]
 800e2cc:	4611      	mov	r1, r2
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f008 fb22 	bl	8016918 <osEventFlagsClear>
		uint32_t duration = 0;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < nr_buz[id]; i++){
 800e2d8:	2300      	movs	r3, #0
 800e2da:	613b      	str	r3, [r7, #16]
 800e2dc:	e03b      	b.n	800e356 <task_buzzer+0xbe>
			char pitch = beep_codes[id][i];
 800e2de:	7bfa      	ldrb	r2, [r7, #15]
 800e2e0:	4925      	ldr	r1, [pc, #148]	; (800e378 <task_buzzer+0xe0>)
 800e2e2:	4613      	mov	r3, r2
 800e2e4:	00db      	lsls	r3, r3, #3
 800e2e6:	4413      	add	r3, r2
 800e2e8:	18ca      	adds	r2, r1, r3
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	4413      	add	r3, r2
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	73bb      	strb	r3, [r7, #14]
			if (pitch >= 'A' && pitch <= 'H') {
 800e2f2:	7bbb      	ldrb	r3, [r7, #14]
 800e2f4:	2b40      	cmp	r3, #64	; 0x40
 800e2f6:	d90e      	bls.n	800e316 <task_buzzer+0x7e>
 800e2f8:	7bbb      	ldrb	r3, [r7, #14]
 800e2fa:	2b48      	cmp	r3, #72	; 0x48
 800e2fc:	d80b      	bhi.n	800e316 <task_buzzer+0x7e>
				buzzer_set_freq(&BUZZER, pitch_lookup[pitch - 'A']);
 800e2fe:	7bbb      	ldrb	r3, [r7, #14]
 800e300:	3b41      	subs	r3, #65	; 0x41
 800e302:	4a1e      	ldr	r2, [pc, #120]	; (800e37c <task_buzzer+0xe4>)
 800e304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e308:	4619      	mov	r1, r3
 800e30a:	4819      	ldr	r0, [pc, #100]	; (800e370 <task_buzzer+0xd8>)
 800e30c:	f7fe f98a 	bl	800c624 <buzzer_set_freq>
				duration = BUZZER_LONG_BEEP;
 800e310:	2364      	movs	r3, #100	; 0x64
 800e312:	617b      	str	r3, [r7, #20]
 800e314:	e010      	b.n	800e338 <task_buzzer+0xa0>
			} else if (pitch >= 'a' && pitch <= 'h') {
 800e316:	7bbb      	ldrb	r3, [r7, #14]
 800e318:	2b60      	cmp	r3, #96	; 0x60
 800e31a:	d90d      	bls.n	800e338 <task_buzzer+0xa0>
 800e31c:	7bbb      	ldrb	r3, [r7, #14]
 800e31e:	2b68      	cmp	r3, #104	; 0x68
 800e320:	d80a      	bhi.n	800e338 <task_buzzer+0xa0>
				buzzer_set_freq(&BUZZER, pitch_lookup[pitch - 'a']);
 800e322:	7bbb      	ldrb	r3, [r7, #14]
 800e324:	3b61      	subs	r3, #97	; 0x61
 800e326:	4a15      	ldr	r2, [pc, #84]	; (800e37c <task_buzzer+0xe4>)
 800e328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e32c:	4619      	mov	r1, r3
 800e32e:	4810      	ldr	r0, [pc, #64]	; (800e370 <task_buzzer+0xd8>)
 800e330:	f7fe f978 	bl	800c624 <buzzer_set_freq>
				duration = BUZZER_SHORT_BEEP;
 800e334:	2328      	movs	r3, #40	; 0x28
 800e336:	617b      	str	r3, [r7, #20]
			}
			buzzer_start(&BUZZER);
 800e338:	480d      	ldr	r0, [pc, #52]	; (800e370 <task_buzzer+0xd8>)
 800e33a:	f7fe f9b0 	bl	800c69e <buzzer_start>
			osDelay(duration);
 800e33e:	6978      	ldr	r0, [r7, #20]
 800e340:	f008 fa1e 	bl	8016780 <osDelay>
			buzzer_stop(&BUZZER);
 800e344:	480a      	ldr	r0, [pc, #40]	; (800e370 <task_buzzer+0xd8>)
 800e346:	f7fe f9bd 	bl	800c6c4 <buzzer_stop>
			osDelay(BUZZER_SHORT_PAUSE);
 800e34a:	2064      	movs	r0, #100	; 0x64
 800e34c:	f008 fa18 	bl	8016780 <osDelay>
		for(int i = 0; i < nr_buz[id]; i++){
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	3301      	adds	r3, #1
 800e354:	613b      	str	r3, [r7, #16]
 800e356:	7bfb      	ldrb	r3, [r7, #15]
 800e358:	4a09      	ldr	r2, [pc, #36]	; (800e380 <task_buzzer+0xe8>)
 800e35a:	5cd3      	ldrb	r3, [r2, r3]
 800e35c:	461a      	mov	r2, r3
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	4293      	cmp	r3, r2
 800e362:	dbbc      	blt.n	800e2de <task_buzzer+0x46>
		}

		// Wait at least 1s before buzzing again
		osDelay(BUZZER_LONG_PAUSE);
 800e364:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e368:	f008 fa0a 	bl	8016780 <osDelay>
	while (1) {
 800e36c:	e7a1      	b.n	800e2b2 <task_buzzer+0x1a>
 800e36e:	bf00      	nop
 800e370:	20000000 	.word	0x20000000
 800e374:	20005198 	.word	0x20005198
 800e378:	0801bbc4 	.word	0x0801bbc4
 800e37c:	0801bb9c 	.word	0x0801bb9c
 800e380:	0801bbbc 	.word	0x0801bbbc

0800e384 <task_fsm>:
#include "config/config.h"

#include "util/log.h"
#include "flight/fsm.h"

void task_fsm(void *argument) {
 800e384:	b580      	push	{r7, lr}
 800e386:	b08a      	sub	sp, #40	; 0x28
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
	fsm_t fsm;
	fsm.flight_state = IDLE;
 800e38c:	2301      	movs	r3, #1
 800e38e:	733b      	strb	r3, [r7, #12]

	osEventFlagsSet(buzzer_event_id, BEEP_BOOTUP);
 800e390:	4b0e      	ldr	r3, [pc, #56]	; (800e3cc <task_fsm+0x48>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	2103      	movs	r1, #3
 800e396:	4618      	mov	r0, r3
 800e398:	f008 fa7a 	bl	8016890 <osEventFlagsSet>


	uint32_t tick_count = osKernelGetTickCount();
 800e39c:	f008 f940 	bl	8016620 <osKernelGetTickCount>
 800e3a0:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 800e3a2:	f008 f952 	bl	801664a <osKernelGetTickFreq>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	4a09      	ldr	r2, [pc, #36]	; (800e3d0 <task_fsm+0x4c>)
 800e3aa:	fba2 2303 	umull	r2, r3, r2, r3
 800e3ae:	095b      	lsrs	r3, r3, #5
 800e3b0:	623b      	str	r3, [r7, #32]
	while (1) {
		update_fsm(&fsm);
 800e3b2:	f107 030c 	add.w	r3, r7, #12
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7fe f9be 	bl	800c738 <update_fsm>
		tick_count += tick_update;
 800e3bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3be:	6a3b      	ldr	r3, [r7, #32]
 800e3c0:	4413      	add	r3, r2
 800e3c2:	627b      	str	r3, [r7, #36]	; 0x24
		osDelayUntil(tick_count);
 800e3c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3c6:	f008 f9f6 	bl	80167b6 <osDelayUntil>
		update_fsm(&fsm);
 800e3ca:	e7f2      	b.n	800e3b2 <task_fsm+0x2e>
 800e3cc:	20005198 	.word	0x20005198
 800e3d0:	51eb851f 	.word	0x51eb851f

0800e3d4 <task_heater>:
#include "util/log.h"
#include "target/target.h"

#define SAMPLING_FREQ_HEATER 1 //Hz

void task_heater(void *argument) {
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b088      	sub	sp, #32
 800e3d8:	af02      	add	r7, sp, #8
 800e3da:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(P_EN_CUT_GPIO_Port, P_EN_CUT_Pin, GPIO_PIN_SET);
 800e3dc:	2201      	movs	r2, #1
 800e3de:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e3e2:	4819      	ldr	r0, [pc, #100]	; (800e448 <task_heater+0x74>)
 800e3e4:	f001 fba4 	bl	800fb30 <HAL_GPIO_WritePin>

	uint32_t tick_count = osKernelGetTickCount();
 800e3e8:	f008 f91a 	bl	8016620 <osKernelGetTickCount>
 800e3ec:	6178      	str	r0, [r7, #20]
	uint32_t tick_update = 5000; //osKernelGetTickFreq() / SAMPLING_FREQ_HEATER;
 800e3ee:	f241 3388 	movw	r3, #5000	; 0x1388
 800e3f2:	613b      	str	r3, [r7, #16]
	while (1) {
		float temperature = 0;
 800e3f4:	f04f 0300 	mov.w	r3, #0
 800e3f8:	60bb      	str	r3, [r7, #8]
		thermocouple_status_t status;

		status = get_temperature(&temperature);
 800e3fa:	f107 0308 	add.w	r3, r7, #8
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7ff ff0e 	bl	800e220 <get_temperature>
 800e404:	4603      	mov	r3, r0
 800e406:	73fb      	strb	r3, [r7, #15]

		if(status != TMP_OK) {
 800e408:	7bfb      	ldrb	r3, [r7, #15]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d006      	beq.n	800e41c <task_heater+0x48>
			log_error("No thermocouple connected!");
 800e40e:	490f      	ldr	r1, [pc, #60]	; (800e44c <task_heater+0x78>)
 800e410:	4b0f      	ldr	r3, [pc, #60]	; (800e450 <task_heater+0x7c>)
 800e412:	2220      	movs	r2, #32
 800e414:	2004      	movs	r0, #4
 800e416:	f000 fa67 	bl	800e8e8 <log_log>
 800e41a:	e00c      	b.n	800e436 <task_heater+0x62>
		} else {
			log_info("Current thermocouple temperature: %ld", (int32_t)temperature);
 800e41c:	490b      	ldr	r1, [pc, #44]	; (800e44c <task_heater+0x78>)
 800e41e:	edd7 7a02 	vldr	s15, [r7, #8]
 800e422:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e426:	ee17 3a90 	vmov	r3, s15
 800e42a:	9300      	str	r3, [sp, #0]
 800e42c:	4b09      	ldr	r3, [pc, #36]	; (800e454 <task_heater+0x80>)
 800e42e:	2222      	movs	r2, #34	; 0x22
 800e430:	2002      	movs	r0, #2
 800e432:	f000 fa59 	bl	800e8e8 <log_log>
		}
		//dcdc_set_voltage(8);
		//dcdc_enable();

		tick_count += tick_update;
 800e436:	697a      	ldr	r2, [r7, #20]
 800e438:	693b      	ldr	r3, [r7, #16]
 800e43a:	4413      	add	r3, r2
 800e43c:	617b      	str	r3, [r7, #20]
		osDelayUntil(tick_count);
 800e43e:	6978      	ldr	r0, [r7, #20]
 800e440:	f008 f9b9 	bl	80167b6 <osDelayUntil>
	while (1) {
 800e444:	e7d6      	b.n	800e3f4 <task_heater+0x20>
 800e446:	bf00      	nop
 800e448:	40020400 	.word	0x40020400
 800e44c:	0801b952 	.word	0x0801b952
 800e450:	0801b960 	.word	0x0801b960
 800e454:	0801b97c 	.word	0x0801b97c

0800e458 <task_sensor_read>:
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len);
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len);

void task_sensor_read(void *argument) {
 800e458:	b580      	push	{r7, lr}
 800e45a:	b08e      	sub	sp, #56	; 0x38
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]

	static stmdev_ctx_t dev_ctx;

	uint32_t tick_count = osKernelGetTickCount();
 800e460:	f008 f8de 	bl	8016620 <osKernelGetTickCount>
 800e464:	6378      	str	r0, [r7, #52]	; 0x34
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 800e466:	f008 f8f0 	bl	801664a <osKernelGetTickFreq>
 800e46a:	4603      	mov	r3, r0
 800e46c:	4a3d      	ldr	r2, [pc, #244]	; (800e564 <task_sensor_read+0x10c>)
 800e46e:	fba2 2303 	umull	r2, r3, r2, r3
 800e472:	095b      	lsrs	r3, r3, #5
 800e474:	633b      	str	r3, [r7, #48]	; 0x30

	dev_ctx.write_reg = platform_write;
 800e476:	4b3c      	ldr	r3, [pc, #240]	; (800e568 <task_sensor_read+0x110>)
 800e478:	4a3c      	ldr	r2, [pc, #240]	; (800e56c <task_sensor_read+0x114>)
 800e47a:	601a      	str	r2, [r3, #0]
	dev_ctx.read_reg = platform_read;
 800e47c:	4b3a      	ldr	r3, [pc, #232]	; (800e568 <task_sensor_read+0x110>)
 800e47e:	4a3c      	ldr	r2, [pc, #240]	; (800e570 <task_sensor_read+0x118>)
 800e480:	605a      	str	r2, [r3, #4]
	dev_ctx.handle = &hspi1;
 800e482:	4b39      	ldr	r3, [pc, #228]	; (800e568 <task_sensor_read+0x110>)
 800e484:	4a3b      	ldr	r2, [pc, #236]	; (800e574 <task_sensor_read+0x11c>)
 800e486:	609a      	str	r2, [r3, #8]

	uint8_t whoamI;
	lsm6dsr_pin_int1_route_t int1_route;

	lsm6dsr_device_id_get(&dev_ctx, &whoamI);
 800e488:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800e48c:	4619      	mov	r1, r3
 800e48e:	4836      	ldr	r0, [pc, #216]	; (800e568 <task_sensor_read+0x110>)
 800e490:	f7ff fbd5 	bl	800dc3e <lsm6dsr_device_id_get>

	if (whoamI != LSM6DSR_ID)
 800e494:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e498:	2b6b      	cmp	r3, #107	; 0x6b
 800e49a:	d000      	beq.n	800e49e <task_sensor_read+0x46>
	  while (1);
 800e49c:	e7fe      	b.n	800e49c <task_sensor_read+0x44>

	lsm6dsr_reset_set(&dev_ctx, PROPERTY_ENABLE);
 800e49e:	2101      	movs	r1, #1
 800e4a0:	4831      	ldr	r0, [pc, #196]	; (800e568 <task_sensor_read+0x110>)
 800e4a2:	f7ff fbdd 	bl	800dc60 <lsm6dsr_reset_set>
	HAL_Delay(10);
 800e4a6:	200a      	movs	r0, #10
 800e4a8:	f000 fb14 	bl	800ead4 <HAL_Delay>

	/* Disable I3C interface */
	lsm6dsr_i3c_disable_set(&dev_ctx, LSM6DSR_I3C_DISABLE);
 800e4ac:	2180      	movs	r1, #128	; 0x80
 800e4ae:	482e      	ldr	r0, [pc, #184]	; (800e568 <task_sensor_read+0x110>)
 800e4b0:	f7ff fc22 	bl	800dcf8 <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 800e4b4:	2101      	movs	r1, #1
 800e4b6:	482c      	ldr	r0, [pc, #176]	; (800e568 <task_sensor_read+0x110>)
 800e4b8:	f7ff fb2a 	bl	800db10 <lsm6dsr_block_data_update_set>
	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&dev_ctx, LSM6DSR_XL_ODR_12Hz5);
 800e4bc:	2101      	movs	r1, #1
 800e4be:	482a      	ldr	r0, [pc, #168]	; (800e568 <task_sensor_read+0x110>)
 800e4c0:	f7ff f908 	bl	800d6d4 <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&dev_ctx, LSM6DSR_GY_ODR_12Hz5);
 800e4c4:	2101      	movs	r1, #1
 800e4c6:	4828      	ldr	r0, [pc, #160]	; (800e568 <task_sensor_read+0x110>)
 800e4c8:	f7ff fa26 	bl	800d918 <lsm6dsr_gy_data_rate_set>
	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&dev_ctx, LSM6DSR_16g);
 800e4cc:	2101      	movs	r1, #1
 800e4ce:	4826      	ldr	r0, [pc, #152]	; (800e568 <task_sensor_read+0x110>)
 800e4d0:	f7ff f8da 	bl	800d688 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&dev_ctx, LSM6DSR_2000dps);
 800e4d4:	210c      	movs	r1, #12
 800e4d6:	4824      	ldr	r0, [pc, #144]	; (800e568 <task_sensor_read+0x110>)
 800e4d8:	f7ff f9f8 	bl	800d8cc <lsm6dsr_gy_full_scale_set>
	*/
	//lsm6dsr_xl_hp_path_on_out_set(&dev_ctx, LSM6DSR_LP_ODR_DIV_100);
	//lsm6dsr_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);

	/* Apply high-pass digital filter on Wake-Up function */
	lsm6dsr_xl_hp_path_internal_set(&dev_ctx, LSM6DSR_USE_SLOPE);
 800e4dc:	2100      	movs	r1, #0
 800e4de:	4822      	ldr	r0, [pc, #136]	; (800e568 <task_sensor_read+0x110>)
 800e4e0:	f7ff fbe4 	bl	800dcac <lsm6dsr_xl_hp_path_internal_set>
	/* Set Wake-Up threshold: 1 LSb corresponds to FS_XL/2^6 */
	lsm6dsr_wkup_threshold_set(&dev_ctx, 2);
 800e4e4:	2102      	movs	r1, #2
 800e4e6:	4820      	ldr	r0, [pc, #128]	; (800e568 <task_sensor_read+0x110>)
 800e4e8:	f7ff fdff 	bl	800e0ea <lsm6dsr_wkup_threshold_set>

	/* interrupt generation on Wake-Up INT1 pin */
	lsm6dsr_pin_int1_route_get(&dev_ctx, &int1_route);
 800e4ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	481d      	ldr	r0, [pc, #116]	; (800e568 <task_sensor_read+0x110>)
 800e4f4:	f7ff fdac 	bl	800e050 <lsm6dsr_pin_int1_route_get>
	int1_route.md1_cfg.int1_wu = PROPERTY_ENABLE;
 800e4f8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e4fc:	f043 0320 	orr.w	r3, r3, #32
 800e500:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	lsm6dsr_pin_int1_route_set(&dev_ctx, &int1_route);
 800e504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e508:	4619      	mov	r1, r3
 800e50a:	4817      	ldr	r0, [pc, #92]	; (800e568 <task_sensor_read+0x110>)
 800e50c:	f7ff fc3a 	bl	800dd84 <lsm6dsr_pin_int1_route_set>

		int16_t data_raw_acceleration[3];
		float acceleration_mg[3];
		int16_t data_raw_angular_rate[3];

		lsm6dsr_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 800e510:	f107 0320 	add.w	r3, r7, #32
 800e514:	4619      	mov	r1, r3
 800e516:	4814      	ldr	r0, [pc, #80]	; (800e568 <task_sensor_read+0x110>)
 800e518:	f7ff fb20 	bl	800db5c <lsm6dsr_acceleration_raw_get>
		acceleration_mg[0] = lsm6dsr_from_fs16g_to_mg(data_raw_acceleration[0]);
 800e51c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e520:	4618      	mov	r0, r3
 800e522:	f7ff f899 	bl	800d658 <lsm6dsr_from_fs16g_to_mg>
 800e526:	eef0 7a40 	vmov.f32	s15, s0
 800e52a:	edc7 7a05 	vstr	s15, [r7, #20]
		acceleration_mg[1] = lsm6dsr_from_fs16g_to_mg(data_raw_acceleration[1]);
 800e52e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e532:	4618      	mov	r0, r3
 800e534:	f7ff f890 	bl	800d658 <lsm6dsr_from_fs16g_to_mg>
 800e538:	eef0 7a40 	vmov.f32	s15, s0
 800e53c:	edc7 7a06 	vstr	s15, [r7, #24]
		acceleration_mg[2] =  lsm6dsr_from_fs16g_to_mg(data_raw_acceleration[2]);
 800e540:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e544:	4618      	mov	r0, r3
 800e546:	f7ff f887 	bl	800d658 <lsm6dsr_from_fs16g_to_mg>
 800e54a:	eef0 7a40 	vmov.f32	s15, s0
 800e54e:	edc7 7a07 	vstr	s15, [r7, #28]



		tick_count += tick_update;
 800e552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e556:	4413      	add	r3, r2
 800e558:	637b      	str	r3, [r7, #52]	; 0x34
		osDelayUntil(tick_count);
 800e55a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e55c:	f008 f92b 	bl	80167b6 <osDelayUntil>
	while (1) {
 800e560:	e7d6      	b.n	800e510 <task_sensor_read+0xb8>
 800e562:	bf00      	nop
 800e564:	51eb851f 	.word	0x51eb851f
 800e568:	2000025c 	.word	0x2000025c
 800e56c:	0800e579 	.word	0x0800e579
 800e570:	0800e5c9 	.word	0x0800e5c9
 800e574:	20007b68 	.word	0x20007b68

0800e578 <platform_write>:
	}
}

static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	60f8      	str	r0, [r7, #12]
 800e580:	607a      	str	r2, [r7, #4]
 800e582:	461a      	mov	r2, r3
 800e584:	460b      	mov	r3, r1
 800e586:	72fb      	strb	r3, [r7, #11]
 800e588:	4613      	mov	r3, r2
 800e58a:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 800e58c:	2200      	movs	r2, #0
 800e58e:	2104      	movs	r1, #4
 800e590:	480c      	ldr	r0, [pc, #48]	; (800e5c4 <platform_write+0x4c>)
 800e592:	f001 facd 	bl	800fb30 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 2);
 800e596:	f107 010b 	add.w	r1, r7, #11
 800e59a:	2302      	movs	r3, #2
 800e59c:	2201      	movs	r2, #1
 800e59e:	68f8      	ldr	r0, [r7, #12]
 800e5a0:	f003 f9ab 	bl	80118fa <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 2);
 800e5a4:	893a      	ldrh	r2, [r7, #8]
 800e5a6:	2302      	movs	r3, #2
 800e5a8:	6879      	ldr	r1, [r7, #4]
 800e5aa:	68f8      	ldr	r0, [r7, #12]
 800e5ac:	f003 f9a5 	bl	80118fa <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	2104      	movs	r1, #4
 800e5b4:	4803      	ldr	r0, [pc, #12]	; (800e5c4 <platform_write+0x4c>)
 800e5b6:	f001 fabb 	bl	800fb30 <HAL_GPIO_WritePin>
  return 0;
 800e5ba:	2300      	movs	r3, #0
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3710      	adds	r7, #16
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}
 800e5c4:	40020400 	.word	0x40020400

0800e5c8 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	607a      	str	r2, [r7, #4]
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	72fb      	strb	r3, [r7, #11]
 800e5d8:	4613      	mov	r3, r2
 800e5da:	813b      	strh	r3, [r7, #8]
  reg |= 0x80;
 800e5dc:	7afb      	ldrb	r3, [r7, #11]
 800e5de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	2104      	movs	r1, #4
 800e5ea:	480e      	ldr	r0, [pc, #56]	; (800e624 <platform_read+0x5c>)
 800e5ec:	f001 faa0 	bl	800fb30 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 800e5f0:	f107 010b 	add.w	r1, r7, #11
 800e5f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	68f8      	ldr	r0, [r7, #12]
 800e5fc:	f003 f97d 	bl	80118fa <HAL_SPI_Transmit>
  HAL_SPI_Receive(handle, bufp, len, 1000);
 800e600:	893a      	ldrh	r2, [r7, #8]
 800e602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e606:	6879      	ldr	r1, [r7, #4]
 800e608:	68f8      	ldr	r0, [r7, #12]
 800e60a:	f003 fab2 	bl	8011b72 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 800e60e:	2201      	movs	r2, #1
 800e610:	2104      	movs	r1, #4
 800e612:	4804      	ldr	r0, [pc, #16]	; (800e624 <platform_read+0x5c>)
 800e614:	f001 fa8c 	bl	800fb30 <HAL_GPIO_WritePin>
  return 0;
 800e618:	2300      	movs	r3, #0
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3710      	adds	r7, #16
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
 800e622:	bf00      	nop
 800e624:	40020400 	.word	0x40020400

0800e628 <task_state_est>:
#include "cmsis_os.h"
#include "task_state_est.h"
#include "config/globals.h"
#include "util/log.h"

void task_state_est(void *argument) {
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]

	uint32_t tick_count = osKernelGetTickCount();
 800e630:	f007 fff6 	bl	8016620 <osKernelGetTickCount>
 800e634:	60f8      	str	r0, [r7, #12]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 800e636:	f008 f808 	bl	801664a <osKernelGetTickFreq>
 800e63a:	4603      	mov	r3, r0
 800e63c:	4a08      	ldr	r2, [pc, #32]	; (800e660 <task_state_est+0x38>)
 800e63e:	fba2 2303 	umull	r2, r3, r2, r3
 800e642:	095b      	lsrs	r3, r3, #5
 800e644:	60bb      	str	r3, [r7, #8]
	osDelay(2000);
 800e646:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e64a:	f008 f899 	bl	8016780 <osDelay>
	while (1) {
		tick_count += tick_update;
 800e64e:	68fa      	ldr	r2, [r7, #12]
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	4413      	add	r3, r2
 800e654:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick_count);
 800e656:	68f8      	ldr	r0, [r7, #12]
 800e658:	f008 f8ad 	bl	80167b6 <osDelayUntil>
		tick_count += tick_update;
 800e65c:	e7f7      	b.n	800e64e <task_state_est+0x26>
 800e65e:	bf00      	nop
 800e660:	51eb851f 	.word	0x51eb851f

0800e664 <fifo_init>:
 800e664:	b580      	push	{r7, lr}
 800e666:	b084      	sub	sp, #16
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	60b9      	str	r1, [r7, #8]
 800e66e:	607a      	str	r2, [r7, #4]
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	68ba      	ldr	r2, [r7, #8]
 800e674:	611a      	str	r2, [r3, #16]
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	60da      	str	r2, [r3, #12]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2200      	movs	r2, #0
 800e680:	751a      	strb	r2, [r3, #20]
 800e682:	68f8      	ldr	r0, [r7, #12]
 800e684:	f000 f804 	bl	800e690 <fifo_flush>
 800e688:	bf00      	nop
 800e68a:	3710      	adds	r7, #16
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <fifo_flush>:
 800e690:	b480      	push	{r7}
 800e692:	b083      	sub	sp, #12
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	7d1b      	ldrb	r3, [r3, #20]
 800e69c:	b2db      	uxtb	r3, r3
 800e69e:	f083 0301 	eor.w	r3, r3, #1
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d00e      	beq.n	800e6c6 <fifo_flush+0x36>
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2201      	movs	r2, #1
 800e6ac:	751a      	strb	r2, [r3, #20]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	605a      	str	r2, [r3, #4]
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	601a      	str	r2, [r3, #0]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	609a      	str	r2, [r3, #8]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	751a      	strb	r2, [r3, #20]
 800e6c6:	bf00      	nop
 800e6c8:	370c      	adds	r7, #12
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr

0800e6d2 <fifo_get_length>:
 800e6d2:	b480      	push	{r7}
 800e6d4:	b083      	sub	sp, #12
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	6078      	str	r0, [r7, #4]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	689b      	ldr	r3, [r3, #8]
 800e6de:	4618      	mov	r0, r3
 800e6e0:	370c      	adds	r7, #12
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr

0800e6ea <fifo_read_bytes>:
 800e6ea:	b580      	push	{r7, lr}
 800e6ec:	b086      	sub	sp, #24
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	60f8      	str	r0, [r7, #12]
 800e6f2:	60b9      	str	r1, [r7, #8]
 800e6f4:	607a      	str	r2, [r7, #4]
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	7d1b      	ldrb	r3, [r3, #20]
 800e6fa:	b2db      	uxtb	r3, r3
 800e6fc:	f083 0301 	eor.w	r3, r3, #1
 800e700:	b2db      	uxtb	r3, r3
 800e702:	2b00      	cmp	r3, #0
 800e704:	d05a      	beq.n	800e7bc <fifo_read_bytes+0xd2>
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2201      	movs	r2, #1
 800e70a:	751a      	strb	r2, [r3, #20]
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	689b      	ldr	r3, [r3, #8]
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	429a      	cmp	r2, r3
 800e714:	d904      	bls.n	800e720 <fifo_read_bytes+0x36>
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2200      	movs	r2, #0
 800e71a:	751a      	strb	r2, [r3, #20]
 800e71c:	2300      	movs	r3, #0
 800e71e:	e04e      	b.n	800e7be <fifo_read_bytes+0xd4>
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	685a      	ldr	r2, [r3, #4]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	441a      	add	r2, r3
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	68db      	ldr	r3, [r3, #12]
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d923      	bls.n	800e778 <fifo_read_bytes+0x8e>
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	685a      	ldr	r2, [r3, #4]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	4413      	add	r3, r2
 800e738:	68fa      	ldr	r2, [r7, #12]
 800e73a:	68d2      	ldr	r2, [r2, #12]
 800e73c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e740:	fb02 f201 	mul.w	r2, r2, r1
 800e744:	1a9b      	subs	r3, r3, r2
 800e746:	617b      	str	r3, [r7, #20]
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	1ad3      	subs	r3, r2, r3
 800e74e:	613b      	str	r3, [r7, #16]
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	691a      	ldr	r2, [r3, #16]
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	685b      	ldr	r3, [r3, #4]
 800e758:	4413      	add	r3, r2
 800e75a:	693a      	ldr	r2, [r7, #16]
 800e75c:	4619      	mov	r1, r3
 800e75e:	68b8      	ldr	r0, [r7, #8]
 800e760:	f00c fba4 	bl	801aeac <memcpy>
 800e764:	68ba      	ldr	r2, [r7, #8]
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	18d0      	adds	r0, r2, r3
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	691b      	ldr	r3, [r3, #16]
 800e76e:	697a      	ldr	r2, [r7, #20]
 800e770:	4619      	mov	r1, r3
 800e772:	f00c fb9b 	bl	801aeac <memcpy>
 800e776:	e009      	b.n	800e78c <fifo_read_bytes+0xa2>
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	691a      	ldr	r2, [r3, #16]
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	4413      	add	r3, r2
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	4619      	mov	r1, r3
 800e786:	68b8      	ldr	r0, [r7, #8]
 800e788:	f00c fb90 	bl	801aeac <memcpy>
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	685a      	ldr	r2, [r3, #4]
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	4413      	add	r3, r2
 800e794:	68fa      	ldr	r2, [r7, #12]
 800e796:	68d2      	ldr	r2, [r2, #12]
 800e798:	fbb3 f1f2 	udiv	r1, r3, r2
 800e79c:	fb02 f201 	mul.w	r2, r2, r1
 800e7a0:	1a9a      	subs	r2, r3, r2
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	605a      	str	r2, [r3, #4]
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	689a      	ldr	r2, [r3, #8]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	1ad2      	subs	r2, r2, r3
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	609a      	str	r2, [r3, #8]
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	751a      	strb	r2, [r3, #20]
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	e000      	b.n	800e7be <fifo_read_bytes+0xd4>
 800e7bc:	2300      	movs	r3, #0
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3718      	adds	r7, #24
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <fifo_write_bytes>:
 800e7c6:	b580      	push	{r7, lr}
 800e7c8:	b086      	sub	sp, #24
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	60f8      	str	r0, [r7, #12]
 800e7ce:	60b9      	str	r1, [r7, #8]
 800e7d0:	607a      	str	r2, [r7, #4]
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	7d1b      	ldrb	r3, [r3, #20]
 800e7d6:	b2db      	uxtb	r3, r3
 800e7d8:	f083 0301 	eor.w	r3, r3, #1
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d059      	beq.n	800e896 <fifo_write_bytes+0xd0>
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	2201      	movs	r2, #1
 800e7e6:	751a      	strb	r2, [r3, #20]
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	68da      	ldr	r2, [r3, #12]
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	689b      	ldr	r3, [r3, #8]
 800e7f0:	1ad3      	subs	r3, r2, r3
 800e7f2:	687a      	ldr	r2, [r7, #4]
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d904      	bls.n	800e802 <fifo_write_bytes+0x3c>
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	751a      	strb	r2, [r3, #20]
 800e7fe:	2300      	movs	r3, #0
 800e800:	e04a      	b.n	800e898 <fifo_write_bytes+0xd2>
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681a      	ldr	r2, [r3, #0]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	441a      	add	r2, r3
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	68db      	ldr	r3, [r3, #12]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d91f      	bls.n	800e852 <fifo_write_bytes+0x8c>
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	441a      	add	r2, r3
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	1ad3      	subs	r3, r2, r3
 800e820:	617b      	str	r3, [r7, #20]
 800e822:	687a      	ldr	r2, [r7, #4]
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	1ad3      	subs	r3, r2, r3
 800e828:	613b      	str	r3, [r7, #16]
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	691a      	ldr	r2, [r3, #16]
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4413      	add	r3, r2
 800e834:	693a      	ldr	r2, [r7, #16]
 800e836:	68b9      	ldr	r1, [r7, #8]
 800e838:	4618      	mov	r0, r3
 800e83a:	f00c fb37 	bl	801aeac <memcpy>
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	6918      	ldr	r0, [r3, #16]
 800e842:	68ba      	ldr	r2, [r7, #8]
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	4413      	add	r3, r2
 800e848:	697a      	ldr	r2, [r7, #20]
 800e84a:	4619      	mov	r1, r3
 800e84c:	f00c fb2e 	bl	801aeac <memcpy>
 800e850:	e009      	b.n	800e866 <fifo_write_bytes+0xa0>
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	691a      	ldr	r2, [r3, #16]
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	4413      	add	r3, r2
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	68b9      	ldr	r1, [r7, #8]
 800e860:	4618      	mov	r0, r3
 800e862:	f00c fb23 	bl	801aeac <memcpy>
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	4413      	add	r3, r2
 800e86e:	68fa      	ldr	r2, [r7, #12]
 800e870:	68d2      	ldr	r2, [r2, #12]
 800e872:	fbb3 f1f2 	udiv	r1, r3, r2
 800e876:	fb02 f201 	mul.w	r2, r2, r1
 800e87a:	1a9a      	subs	r2, r3, r2
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	601a      	str	r2, [r3, #0]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	689a      	ldr	r2, [r3, #8]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	441a      	add	r2, r3
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	609a      	str	r2, [r3, #8]
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2200      	movs	r2, #0
 800e890:	751a      	strb	r2, [r3, #20]
 800e892:	2301      	movs	r3, #1
 800e894:	e000      	b.n	800e898 <fifo_write_bytes+0xd2>
 800e896:	2300      	movs	r3, #0
 800e898:	4618      	mov	r0, r3
 800e89a:	3718      	adds	r7, #24
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <log_init>:
static const char *level_colors[] = {"\x1b[94m", "\x1b[36m", "\x1b[32m", "\x1b[33m", "\x1b[31m", "\x1b[35m"};

osMutexId_t print_mutex;
static char print_buffer[PRINT_BUFFER_LEN];

void log_init(){
 800e8a0:	b590      	push	{r4, r7, lr}
 800e8a2:	b085      	sub	sp, #20
 800e8a4:	af00      	add	r7, sp, #0
	const osMutexAttr_t print_mutex_attr = {
 800e8a6:	4b08      	ldr	r3, [pc, #32]	; (800e8c8 <log_init+0x28>)
 800e8a8:	463c      	mov	r4, r7
 800e8aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e8ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  "print_mutex",       // human readable mutex name
	   osMutexPrioInherit,  // attr_bits
	   NULL,                // memory for control block
	   0U                   // size for control block
	};
	print_mutex = osMutexNew(&print_mutex_attr);
 800e8b0:	463b      	mov	r3, r7
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f008 f8c8 	bl	8016a48 <osMutexNew>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	4a04      	ldr	r2, [pc, #16]	; (800e8cc <log_init+0x2c>)
 800e8bc:	6013      	str	r3, [r2, #0]
}
 800e8be:	bf00      	nop
 800e8c0:	3714      	adds	r7, #20
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd90      	pop	{r4, r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	0801ba10 	.word	0x0801ba10
 800e8cc:	20007bc0 	.word	0x20007bc0

0800e8d0 <log_enable>:

void log_set_level(int level) {
  L.level = level;
}

void log_enable() {
 800e8d0:	b480      	push	{r7}
 800e8d2:	af00      	add	r7, sp, #0
  L.enabled = true;
 800e8d4:	4b03      	ldr	r3, [pc, #12]	; (800e8e4 <log_enable+0x14>)
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	711a      	strb	r2, [r3, #4]
}
 800e8da:	bf00      	nop
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr
 800e8e4:	20000268 	.word	0x20000268

0800e8e8 <log_log>:

bool log_is_enabled() {
  return L.enabled;
}

void log_log(int level, const char *file, int line, const char *format, ...) {
 800e8e8:	b408      	push	{r3}
 800e8ea:	b580      	push	{r7, lr}
 800e8ec:	b08b      	sub	sp, #44	; 0x2c
 800e8ee:	af04      	add	r7, sp, #16
 800e8f0:	60f8      	str	r0, [r7, #12]
 800e8f2:	60b9      	str	r1, [r7, #8]
 800e8f4:	607a      	str	r2, [r7, #4]
  if (L.enabled && level >= L.level && osMutexAcquire(print_mutex, 0U) == osOK) {
 800e8f6:	4b35      	ldr	r3, [pc, #212]	; (800e9cc <log_log+0xe4>)
 800e8f8:	791b      	ldrb	r3, [r3, #4]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d05f      	beq.n	800e9be <log_log+0xd6>
 800e8fe:	4b33      	ldr	r3, [pc, #204]	; (800e9cc <log_log+0xe4>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	68fa      	ldr	r2, [r7, #12]
 800e904:	429a      	cmp	r2, r3
 800e906:	db5a      	blt.n	800e9be <log_log+0xd6>
 800e908:	4b31      	ldr	r3, [pc, #196]	; (800e9d0 <log_log+0xe8>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2100      	movs	r1, #0
 800e90e:	4618      	mov	r0, r3
 800e910:	f008 f920 	bl	8016b54 <osMutexAcquire>
 800e914:	4603      	mov	r3, r0
 800e916:	2b00      	cmp	r3, #0
 800e918:	d151      	bne.n	800e9be <log_log+0xd6>
    /* fill buffer with metadata */
    static char buf_ts[16];
    buf_ts[snprintf(buf_ts, sizeof(buf_ts), "%lu", osKernelGetTickCount())] = '\0';
 800e91a:	f007 fe81 	bl	8016620 <osKernelGetTickCount>
 800e91e:	4603      	mov	r3, r0
 800e920:	4a2c      	ldr	r2, [pc, #176]	; (800e9d4 <log_log+0xec>)
 800e922:	2110      	movs	r1, #16
 800e924:	482c      	ldr	r0, [pc, #176]	; (800e9d8 <log_log+0xf0>)
 800e926:	f00c fad7 	bl	801aed8 <sniprintf>
 800e92a:	4603      	mov	r3, r0
 800e92c:	4a2a      	ldr	r2, [pc, #168]	; (800e9d8 <log_log+0xf0>)
 800e92e:	2100      	movs	r1, #0
 800e930:	54d1      	strb	r1, [r2, r3]
    static char buf_loc[30];
    buf_loc[snprintf(buf_loc, sizeof(buf_loc), "%s:%d:", file, line)] = '\0';
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	9300      	str	r3, [sp, #0]
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	4a28      	ldr	r2, [pc, #160]	; (800e9dc <log_log+0xf4>)
 800e93a:	211e      	movs	r1, #30
 800e93c:	4828      	ldr	r0, [pc, #160]	; (800e9e0 <log_log+0xf8>)
 800e93e:	f00c facb 	bl	801aed8 <sniprintf>
 800e942:	4603      	mov	r3, r0
 800e944:	4a26      	ldr	r2, [pc, #152]	; (800e9e0 <log_log+0xf8>)
 800e946:	2100      	movs	r1, #0
 800e948:	54d1      	strb	r1, [r2, r3]
    int len;
    len = snprintf(print_buffer, PRINT_BUFFER_LEN, "%6s %s%5s\x1b[0m \x1b[90m%30s\x1b[0m ", buf_ts, level_colors[level],
 800e94a:	4a26      	ldr	r2, [pc, #152]	; (800e9e4 <log_log+0xfc>)
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e952:	4925      	ldr	r1, [pc, #148]	; (800e9e8 <log_log+0x100>)
 800e954:	68fa      	ldr	r2, [r7, #12]
 800e956:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e95a:	4921      	ldr	r1, [pc, #132]	; (800e9e0 <log_log+0xf8>)
 800e95c:	9102      	str	r1, [sp, #8]
 800e95e:	9201      	str	r2, [sp, #4]
 800e960:	9300      	str	r3, [sp, #0]
 800e962:	4b1d      	ldr	r3, [pc, #116]	; (800e9d8 <log_log+0xf0>)
 800e964:	4a21      	ldr	r2, [pc, #132]	; (800e9ec <log_log+0x104>)
 800e966:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800e96a:	4821      	ldr	r0, [pc, #132]	; (800e9f0 <log_log+0x108>)
 800e96c:	f00c fab4 	bl	801aed8 <sniprintf>
 800e970:	6178      	str	r0, [r7, #20]
                   level_strings[level], buf_loc);
    va_list argptr;
    va_start(argptr, format);
 800e972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e976:	613b      	str	r3, [r7, #16]
    vsnprintf(print_buffer + len, PRINT_BUFFER_LEN, format, argptr);
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	4a1d      	ldr	r2, [pc, #116]	; (800e9f0 <log_log+0x108>)
 800e97c:	1898      	adds	r0, r3, r2
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e982:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800e986:	f00c fb07 	bl	801af98 <vsniprintf>
    va_end(argptr);
    snprintf(print_buffer + strlen(print_buffer), PRINT_BUFFER_LEN, "\n");
 800e98a:	4819      	ldr	r0, [pc, #100]	; (800e9f0 <log_log+0x108>)
 800e98c:	f7fd fb58 	bl	800c040 <strlen>
 800e990:	4603      	mov	r3, r0
 800e992:	4a17      	ldr	r2, [pc, #92]	; (800e9f0 <log_log+0x108>)
 800e994:	4413      	add	r3, r2
 800e996:	4a17      	ldr	r2, [pc, #92]	; (800e9f4 <log_log+0x10c>)
 800e998:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800e99c:	4618      	mov	r0, r3
 800e99e:	f00c fa9b 	bl	801aed8 <sniprintf>
    fifo_write_bytes(&usb_output_fifo, (uint8_t *)print_buffer, strlen(print_buffer));
 800e9a2:	4813      	ldr	r0, [pc, #76]	; (800e9f0 <log_log+0x108>)
 800e9a4:	f7fd fb4c 	bl	800c040 <strlen>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	4910      	ldr	r1, [pc, #64]	; (800e9f0 <log_log+0x108>)
 800e9ae:	4812      	ldr	r0, [pc, #72]	; (800e9f8 <log_log+0x110>)
 800e9b0:	f7ff ff09 	bl	800e7c6 <fifo_write_bytes>
    osMutexRelease(print_mutex);
 800e9b4:	4b06      	ldr	r3, [pc, #24]	; (800e9d0 <log_log+0xe8>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f008 f916 	bl	8016bea <osMutexRelease>
  }
}
 800e9be:	bf00      	nop
 800e9c0:	371c      	adds	r7, #28
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e9c8:	b001      	add	sp, #4
 800e9ca:	4770      	bx	lr
 800e9cc:	20000268 	.word	0x20000268
 800e9d0:	20007bc0 	.word	0x20007bc0
 800e9d4:	0801ba20 	.word	0x0801ba20
 800e9d8:	20000414 	.word	0x20000414
 800e9dc:	0801ba24 	.word	0x0801ba24
 800e9e0:	20000424 	.word	0x20000424
 800e9e4:	20000030 	.word	0x20000030
 800e9e8:	20000018 	.word	0x20000018
 800e9ec:	0801ba2c 	.word	0x0801ba2c
 800e9f0:	20000270 	.word	0x20000270
 800e9f4:	0801ba4c 	.word	0x0801ba4c
 800e9f8:	2000539c 	.word	0x2000539c

0800e9fc <Reset_Handler>:
 800e9fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ea34 <LoopFillZerobss+0x12>
 800ea00:	480d      	ldr	r0, [pc, #52]	; (800ea38 <LoopFillZerobss+0x16>)
 800ea02:	490e      	ldr	r1, [pc, #56]	; (800ea3c <LoopFillZerobss+0x1a>)
 800ea04:	4a0e      	ldr	r2, [pc, #56]	; (800ea40 <LoopFillZerobss+0x1e>)
 800ea06:	2300      	movs	r3, #0
 800ea08:	e002      	b.n	800ea10 <LoopCopyDataInit>

0800ea0a <CopyDataInit>:
 800ea0a:	58d4      	ldr	r4, [r2, r3]
 800ea0c:	50c4      	str	r4, [r0, r3]
 800ea0e:	3304      	adds	r3, #4

0800ea10 <LoopCopyDataInit>:
 800ea10:	18c4      	adds	r4, r0, r3
 800ea12:	428c      	cmp	r4, r1
 800ea14:	d3f9      	bcc.n	800ea0a <CopyDataInit>
 800ea16:	4a0b      	ldr	r2, [pc, #44]	; (800ea44 <LoopFillZerobss+0x22>)
 800ea18:	4c0b      	ldr	r4, [pc, #44]	; (800ea48 <LoopFillZerobss+0x26>)
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	e001      	b.n	800ea22 <LoopFillZerobss>

0800ea1e <FillZerobss>:
 800ea1e:	6013      	str	r3, [r2, #0]
 800ea20:	3204      	adds	r2, #4

0800ea22 <LoopFillZerobss>:
 800ea22:	42a2      	cmp	r2, r4
 800ea24:	d3fb      	bcc.n	800ea1e <FillZerobss>
 800ea26:	f7fe fa93 	bl	800cf50 <SystemInit>
 800ea2a:	f00c fa1b 	bl	801ae64 <__libc_init_array>
 800ea2e:	f7fe f80f 	bl	800ca50 <main>
 800ea32:	4770      	bx	lr
 800ea34:	20020000 	.word	0x20020000
 800ea38:	20000000 	.word	0x20000000
 800ea3c:	2000022c 	.word	0x2000022c
 800ea40:	0801bc40 	.word	0x0801bc40
 800ea44:	2000022c 	.word	0x2000022c
 800ea48:	200087dc 	.word	0x200087dc

0800ea4c <ADC_IRQHandler>:
 800ea4c:	e7fe      	b.n	800ea4c <ADC_IRQHandler>
	...

0800ea50 <HAL_Init>:
 800ea50:	b580      	push	{r7, lr}
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	4b0e      	ldr	r3, [pc, #56]	; (800ea90 <HAL_Init+0x40>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	4a0d      	ldr	r2, [pc, #52]	; (800ea90 <HAL_Init+0x40>)
 800ea5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ea5e:	6013      	str	r3, [r2, #0]
 800ea60:	4b0b      	ldr	r3, [pc, #44]	; (800ea90 <HAL_Init+0x40>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	4a0a      	ldr	r2, [pc, #40]	; (800ea90 <HAL_Init+0x40>)
 800ea66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ea6a:	6013      	str	r3, [r2, #0]
 800ea6c:	4b08      	ldr	r3, [pc, #32]	; (800ea90 <HAL_Init+0x40>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4a07      	ldr	r2, [pc, #28]	; (800ea90 <HAL_Init+0x40>)
 800ea72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea76:	6013      	str	r3, [r2, #0]
 800ea78:	2003      	movs	r0, #3
 800ea7a:	f000 fb92 	bl	800f1a2 <HAL_NVIC_SetPriorityGrouping>
 800ea7e:	200f      	movs	r0, #15
 800ea80:	f7fe f99a 	bl	800cdb8 <HAL_InitTick>
 800ea84:	f7fe f806 	bl	800ca94 <HAL_MspInit>
 800ea88:	2300      	movs	r3, #0
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	40023c00 	.word	0x40023c00

0800ea94 <HAL_IncTick>:
 800ea94:	b480      	push	{r7}
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	4b06      	ldr	r3, [pc, #24]	; (800eab4 <HAL_IncTick+0x20>)
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	4b06      	ldr	r3, [pc, #24]	; (800eab8 <HAL_IncTick+0x24>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	4413      	add	r3, r2
 800eaa4:	4a04      	ldr	r2, [pc, #16]	; (800eab8 <HAL_IncTick+0x24>)
 800eaa6:	6013      	str	r3, [r2, #0]
 800eaa8:	bf00      	nop
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab0:	4770      	bx	lr
 800eab2:	bf00      	nop
 800eab4:	2000004c 	.word	0x2000004c
 800eab8:	20007bc4 	.word	0x20007bc4

0800eabc <HAL_GetTick>:
 800eabc:	b480      	push	{r7}
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	4b03      	ldr	r3, [pc, #12]	; (800ead0 <HAL_GetTick+0x14>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	4618      	mov	r0, r3
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr
 800eace:	bf00      	nop
 800ead0:	20007bc4 	.word	0x20007bc4

0800ead4 <HAL_Delay>:
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	f7ff ffee 	bl	800eabc <HAL_GetTick>
 800eae0:	60b8      	str	r0, [r7, #8]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	60fb      	str	r3, [r7, #12]
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaec:	d005      	beq.n	800eafa <HAL_Delay+0x26>
 800eaee:	4b0a      	ldr	r3, [pc, #40]	; (800eb18 <HAL_Delay+0x44>)
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	4413      	add	r3, r2
 800eaf8:	60fb      	str	r3, [r7, #12]
 800eafa:	bf00      	nop
 800eafc:	f7ff ffde 	bl	800eabc <HAL_GetTick>
 800eb00:	4602      	mov	r2, r0
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	1ad3      	subs	r3, r2, r3
 800eb06:	68fa      	ldr	r2, [r7, #12]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d8f7      	bhi.n	800eafc <HAL_Delay+0x28>
 800eb0c:	bf00      	nop
 800eb0e:	bf00      	nop
 800eb10:	3710      	adds	r7, #16
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	2000004c 	.word	0x2000004c

0800eb1c <HAL_ADC_Init>:
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	2300      	movs	r3, #0
 800eb26:	73fb      	strb	r3, [r7, #15]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d101      	bne.n	800eb32 <HAL_ADC_Init+0x16>
 800eb2e:	2301      	movs	r3, #1
 800eb30:	e033      	b.n	800eb9a <HAL_ADC_Init+0x7e>
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d109      	bne.n	800eb4e <HAL_ADC_Init+0x32>
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f7fd ffd6 	bl	800caec <HAL_ADC_MspInit>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2200      	movs	r2, #0
 800eb44:	645a      	str	r2, [r3, #68]	; 0x44
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb52:	f003 0310 	and.w	r3, r3, #16
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d118      	bne.n	800eb8c <HAL_ADC_Init+0x70>
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800eb62:	f023 0302 	bic.w	r3, r3, #2
 800eb66:	f043 0202 	orr.w	r2, r3, #2
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	641a      	str	r2, [r3, #64]	; 0x40
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f000 f94a 	bl	800ee08 <ADC_Init>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2200      	movs	r2, #0
 800eb78:	645a      	str	r2, [r3, #68]	; 0x44
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb7e:	f023 0303 	bic.w	r3, r3, #3
 800eb82:	f043 0201 	orr.w	r2, r3, #1
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	641a      	str	r2, [r3, #64]	; 0x40
 800eb8a:	e001      	b.n	800eb90 <HAL_ADC_Init+0x74>
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	73fb      	strb	r3, [r7, #15]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2200      	movs	r2, #0
 800eb94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800eb98:	7bfb      	ldrb	r3, [r7, #15]
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3710      	adds	r7, #16
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
	...

0800eba4 <HAL_ADC_ConfigChannel>:
 800eba4:	b480      	push	{r7}
 800eba6:	b085      	sub	sp, #20
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
 800ebae:	2300      	movs	r3, #0
 800ebb0:	60bb      	str	r3, [r7, #8]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ebb8:	2b01      	cmp	r3, #1
 800ebba:	d101      	bne.n	800ebc0 <HAL_ADC_ConfigChannel+0x1c>
 800ebbc:	2302      	movs	r3, #2
 800ebbe:	e113      	b.n	800ede8 <HAL_ADC_ConfigChannel+0x244>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	2b09      	cmp	r3, #9
 800ebce:	d925      	bls.n	800ec1c <HAL_ADC_ConfigChannel+0x78>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	68d9      	ldr	r1, [r3, #12]
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	461a      	mov	r2, r3
 800ebde:	4613      	mov	r3, r2
 800ebe0:	005b      	lsls	r3, r3, #1
 800ebe2:	4413      	add	r3, r2
 800ebe4:	3b1e      	subs	r3, #30
 800ebe6:	2207      	movs	r2, #7
 800ebe8:	fa02 f303 	lsl.w	r3, r2, r3
 800ebec:	43da      	mvns	r2, r3
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	400a      	ands	r2, r1
 800ebf4:	60da      	str	r2, [r3, #12]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	68d9      	ldr	r1, [r3, #12]
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	689a      	ldr	r2, [r3, #8]
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	4618      	mov	r0, r3
 800ec08:	4603      	mov	r3, r0
 800ec0a:	005b      	lsls	r3, r3, #1
 800ec0c:	4403      	add	r3, r0
 800ec0e:	3b1e      	subs	r3, #30
 800ec10:	409a      	lsls	r2, r3
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	430a      	orrs	r2, r1
 800ec18:	60da      	str	r2, [r3, #12]
 800ec1a:	e022      	b.n	800ec62 <HAL_ADC_ConfigChannel+0xbe>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	6919      	ldr	r1, [r3, #16]
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	b29b      	uxth	r3, r3
 800ec28:	461a      	mov	r2, r3
 800ec2a:	4613      	mov	r3, r2
 800ec2c:	005b      	lsls	r3, r3, #1
 800ec2e:	4413      	add	r3, r2
 800ec30:	2207      	movs	r2, #7
 800ec32:	fa02 f303 	lsl.w	r3, r2, r3
 800ec36:	43da      	mvns	r2, r3
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	400a      	ands	r2, r1
 800ec3e:	611a      	str	r2, [r3, #16]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	6919      	ldr	r1, [r3, #16]
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	689a      	ldr	r2, [r3, #8]
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	4618      	mov	r0, r3
 800ec52:	4603      	mov	r3, r0
 800ec54:	005b      	lsls	r3, r3, #1
 800ec56:	4403      	add	r3, r0
 800ec58:	409a      	lsls	r2, r3
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	430a      	orrs	r2, r1
 800ec60:	611a      	str	r2, [r3, #16]
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	2b06      	cmp	r3, #6
 800ec68:	d824      	bhi.n	800ecb4 <HAL_ADC_ConfigChannel+0x110>
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	685a      	ldr	r2, [r3, #4]
 800ec74:	4613      	mov	r3, r2
 800ec76:	009b      	lsls	r3, r3, #2
 800ec78:	4413      	add	r3, r2
 800ec7a:	3b05      	subs	r3, #5
 800ec7c:	221f      	movs	r2, #31
 800ec7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ec82:	43da      	mvns	r2, r3
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	400a      	ands	r2, r1
 800ec8a:	635a      	str	r2, [r3, #52]	; 0x34
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	4618      	mov	r0, r3
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	685a      	ldr	r2, [r3, #4]
 800ec9e:	4613      	mov	r3, r2
 800eca0:	009b      	lsls	r3, r3, #2
 800eca2:	4413      	add	r3, r2
 800eca4:	3b05      	subs	r3, #5
 800eca6:	fa00 f203 	lsl.w	r2, r0, r3
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	430a      	orrs	r2, r1
 800ecb0:	635a      	str	r2, [r3, #52]	; 0x34
 800ecb2:	e04c      	b.n	800ed4e <HAL_ADC_ConfigChannel+0x1aa>
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	2b0c      	cmp	r3, #12
 800ecba:	d824      	bhi.n	800ed06 <HAL_ADC_ConfigChannel+0x162>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	685a      	ldr	r2, [r3, #4]
 800ecc6:	4613      	mov	r3, r2
 800ecc8:	009b      	lsls	r3, r3, #2
 800ecca:	4413      	add	r3, r2
 800eccc:	3b23      	subs	r3, #35	; 0x23
 800ecce:	221f      	movs	r2, #31
 800ecd0:	fa02 f303 	lsl.w	r3, r2, r3
 800ecd4:	43da      	mvns	r2, r3
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	400a      	ands	r2, r1
 800ecdc:	631a      	str	r2, [r3, #48]	; 0x30
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	4618      	mov	r0, r3
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	685a      	ldr	r2, [r3, #4]
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	009b      	lsls	r3, r3, #2
 800ecf4:	4413      	add	r3, r2
 800ecf6:	3b23      	subs	r3, #35	; 0x23
 800ecf8:	fa00 f203 	lsl.w	r2, r0, r3
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	430a      	orrs	r2, r1
 800ed02:	631a      	str	r2, [r3, #48]	; 0x30
 800ed04:	e023      	b.n	800ed4e <HAL_ADC_ConfigChannel+0x1aa>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	685a      	ldr	r2, [r3, #4]
 800ed10:	4613      	mov	r3, r2
 800ed12:	009b      	lsls	r3, r3, #2
 800ed14:	4413      	add	r3, r2
 800ed16:	3b41      	subs	r3, #65	; 0x41
 800ed18:	221f      	movs	r2, #31
 800ed1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ed1e:	43da      	mvns	r2, r3
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	400a      	ands	r2, r1
 800ed26:	62da      	str	r2, [r3, #44]	; 0x2c
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	4618      	mov	r0, r3
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	685a      	ldr	r2, [r3, #4]
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	009b      	lsls	r3, r3, #2
 800ed3e:	4413      	add	r3, r2
 800ed40:	3b41      	subs	r3, #65	; 0x41
 800ed42:	fa00 f203 	lsl.w	r2, r0, r3
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	430a      	orrs	r2, r1
 800ed4c:	62da      	str	r2, [r3, #44]	; 0x2c
 800ed4e:	4b29      	ldr	r3, [pc, #164]	; (800edf4 <HAL_ADC_ConfigChannel+0x250>)
 800ed50:	60fb      	str	r3, [r7, #12]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	4a28      	ldr	r2, [pc, #160]	; (800edf8 <HAL_ADC_ConfigChannel+0x254>)
 800ed58:	4293      	cmp	r3, r2
 800ed5a:	d10f      	bne.n	800ed7c <HAL_ADC_ConfigChannel+0x1d8>
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	2b12      	cmp	r3, #18
 800ed62:	d10b      	bne.n	800ed7c <HAL_ADC_ConfigChannel+0x1d8>
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	685b      	ldr	r3, [r3, #4]
 800ed68:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	605a      	str	r2, [r3, #4]
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	605a      	str	r2, [r3, #4]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4a1d      	ldr	r2, [pc, #116]	; (800edf8 <HAL_ADC_ConfigChannel+0x254>)
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d12b      	bne.n	800edde <HAL_ADC_ConfigChannel+0x23a>
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	4a1c      	ldr	r2, [pc, #112]	; (800edfc <HAL_ADC_ConfigChannel+0x258>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d003      	beq.n	800ed98 <HAL_ADC_ConfigChannel+0x1f4>
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	2b11      	cmp	r3, #17
 800ed96:	d122      	bne.n	800edde <HAL_ADC_ConfigChannel+0x23a>
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	605a      	str	r2, [r3, #4]
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	605a      	str	r2, [r3, #4]
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4a11      	ldr	r2, [pc, #68]	; (800edfc <HAL_ADC_ConfigChannel+0x258>)
 800edb6:	4293      	cmp	r3, r2
 800edb8:	d111      	bne.n	800edde <HAL_ADC_ConfigChannel+0x23a>
 800edba:	4b11      	ldr	r3, [pc, #68]	; (800ee00 <HAL_ADC_ConfigChannel+0x25c>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	4a11      	ldr	r2, [pc, #68]	; (800ee04 <HAL_ADC_ConfigChannel+0x260>)
 800edc0:	fba2 2303 	umull	r2, r3, r2, r3
 800edc4:	0c9a      	lsrs	r2, r3, #18
 800edc6:	4613      	mov	r3, r2
 800edc8:	009b      	lsls	r3, r3, #2
 800edca:	4413      	add	r3, r2
 800edcc:	005b      	lsls	r3, r3, #1
 800edce:	60bb      	str	r3, [r7, #8]
 800edd0:	e002      	b.n	800edd8 <HAL_ADC_ConfigChannel+0x234>
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	3b01      	subs	r3, #1
 800edd6:	60bb      	str	r3, [r7, #8]
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d1f9      	bne.n	800edd2 <HAL_ADC_ConfigChannel+0x22e>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2200      	movs	r2, #0
 800ede2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ede6:	2300      	movs	r3, #0
 800ede8:	4618      	mov	r0, r3
 800edea:	3714      	adds	r7, #20
 800edec:	46bd      	mov	sp, r7
 800edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf2:	4770      	bx	lr
 800edf4:	40012300 	.word	0x40012300
 800edf8:	40012000 	.word	0x40012000
 800edfc:	10000012 	.word	0x10000012
 800ee00:	20000014 	.word	0x20000014
 800ee04:	431bde83 	.word	0x431bde83

0800ee08 <ADC_Init>:
 800ee08:	b480      	push	{r7}
 800ee0a:	b085      	sub	sp, #20
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	4b79      	ldr	r3, [pc, #484]	; (800eff8 <ADC_Init+0x1f0>)
 800ee12:	60fb      	str	r3, [r7, #12]
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	685b      	ldr	r3, [r3, #4]
 800ee18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	605a      	str	r2, [r3, #4]
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	685a      	ldr	r2, [r3, #4]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	431a      	orrs	r2, r3
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	605a      	str	r2, [r3, #4]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	685a      	ldr	r2, [r3, #4]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ee3c:	605a      	str	r2, [r3, #4]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	6859      	ldr	r1, [r3, #4]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	691b      	ldr	r3, [r3, #16]
 800ee48:	021a      	lsls	r2, r3, #8
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	430a      	orrs	r2, r1
 800ee50:	605a      	str	r2, [r3, #4]
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	685a      	ldr	r2, [r3, #4]
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800ee60:	605a      	str	r2, [r3, #4]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	6859      	ldr	r1, [r3, #4]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	689a      	ldr	r2, [r3, #8]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	430a      	orrs	r2, r1
 800ee72:	605a      	str	r2, [r3, #4]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	689a      	ldr	r2, [r3, #8]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ee82:	609a      	str	r2, [r3, #8]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	6899      	ldr	r1, [r3, #8]
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	68da      	ldr	r2, [r3, #12]
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	430a      	orrs	r2, r1
 800ee94:	609a      	str	r2, [r3, #8]
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee9a:	4a58      	ldr	r2, [pc, #352]	; (800effc <ADC_Init+0x1f4>)
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d022      	beq.n	800eee6 <ADC_Init+0xde>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	689a      	ldr	r2, [r3, #8]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800eeae:	609a      	str	r2, [r3, #8]
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	6899      	ldr	r1, [r3, #8]
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	430a      	orrs	r2, r1
 800eec0:	609a      	str	r2, [r3, #8]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	689a      	ldr	r2, [r3, #8]
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800eed0:	609a      	str	r2, [r3, #8]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	6899      	ldr	r1, [r3, #8]
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	430a      	orrs	r2, r1
 800eee2:	609a      	str	r2, [r3, #8]
 800eee4:	e00f      	b.n	800ef06 <ADC_Init+0xfe>
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	689a      	ldr	r2, [r3, #8]
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800eef4:	609a      	str	r2, [r3, #8]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	689a      	ldr	r2, [r3, #8]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ef04:	609a      	str	r2, [r3, #8]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	689a      	ldr	r2, [r3, #8]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f022 0202 	bic.w	r2, r2, #2
 800ef14:	609a      	str	r2, [r3, #8]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	6899      	ldr	r1, [r3, #8]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	7e1b      	ldrb	r3, [r3, #24]
 800ef20:	005a      	lsls	r2, r3, #1
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	430a      	orrs	r2, r1
 800ef28:	609a      	str	r2, [r3, #8]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d01b      	beq.n	800ef6c <ADC_Init+0x164>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	685a      	ldr	r2, [r3, #4]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ef42:	605a      	str	r2, [r3, #4]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	685a      	ldr	r2, [r3, #4]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800ef52:	605a      	str	r2, [r3, #4]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	6859      	ldr	r1, [r3, #4]
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef5e:	3b01      	subs	r3, #1
 800ef60:	035a      	lsls	r2, r3, #13
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	430a      	orrs	r2, r1
 800ef68:	605a      	str	r2, [r3, #4]
 800ef6a:	e007      	b.n	800ef7c <ADC_Init+0x174>
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	685a      	ldr	r2, [r3, #4]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ef7a:	605a      	str	r2, [r3, #4]
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800ef8a:	62da      	str	r2, [r3, #44]	; 0x2c
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	69db      	ldr	r3, [r3, #28]
 800ef96:	3b01      	subs	r3, #1
 800ef98:	051a      	lsls	r2, r3, #20
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	430a      	orrs	r2, r1
 800efa0:	62da      	str	r2, [r3, #44]	; 0x2c
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	689a      	ldr	r2, [r3, #8]
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800efb0:	609a      	str	r2, [r3, #8]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	6899      	ldr	r1, [r3, #8]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800efbe:	025a      	lsls	r2, r3, #9
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	430a      	orrs	r2, r1
 800efc6:	609a      	str	r2, [r3, #8]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	689a      	ldr	r2, [r3, #8]
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800efd6:	609a      	str	r2, [r3, #8]
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	6899      	ldr	r1, [r3, #8]
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	695b      	ldr	r3, [r3, #20]
 800efe2:	029a      	lsls	r2, r3, #10
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	430a      	orrs	r2, r1
 800efea:	609a      	str	r2, [r3, #8]
 800efec:	bf00      	nop
 800efee:	3714      	adds	r7, #20
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr
 800eff8:	40012300 	.word	0x40012300
 800effc:	0f000001 	.word	0x0f000001

0800f000 <__NVIC_SetPriorityGrouping>:
 800f000:	b480      	push	{r7}
 800f002:	b085      	sub	sp, #20
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f003 0307 	and.w	r3, r3, #7
 800f00e:	60fb      	str	r3, [r7, #12]
 800f010:	4b0c      	ldr	r3, [pc, #48]	; (800f044 <__NVIC_SetPriorityGrouping+0x44>)
 800f012:	68db      	ldr	r3, [r3, #12]
 800f014:	60bb      	str	r3, [r7, #8]
 800f016:	68ba      	ldr	r2, [r7, #8]
 800f018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f01c:	4013      	ands	r3, r2
 800f01e:	60bb      	str	r3, [r7, #8]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	021a      	lsls	r2, r3, #8
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	4313      	orrs	r3, r2
 800f028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f02c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f030:	60bb      	str	r3, [r7, #8]
 800f032:	4a04      	ldr	r2, [pc, #16]	; (800f044 <__NVIC_SetPriorityGrouping+0x44>)
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	60d3      	str	r3, [r2, #12]
 800f038:	bf00      	nop
 800f03a:	3714      	adds	r7, #20
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr
 800f044:	e000ed00 	.word	0xe000ed00

0800f048 <__NVIC_GetPriorityGrouping>:
 800f048:	b480      	push	{r7}
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	4b04      	ldr	r3, [pc, #16]	; (800f060 <__NVIC_GetPriorityGrouping+0x18>)
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	0a1b      	lsrs	r3, r3, #8
 800f052:	f003 0307 	and.w	r3, r3, #7
 800f056:	4618      	mov	r0, r3
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr
 800f060:	e000ed00 	.word	0xe000ed00

0800f064 <__NVIC_EnableIRQ>:
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	4603      	mov	r3, r0
 800f06c:	71fb      	strb	r3, [r7, #7]
 800f06e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f072:	2b00      	cmp	r3, #0
 800f074:	db0b      	blt.n	800f08e <__NVIC_EnableIRQ+0x2a>
 800f076:	79fb      	ldrb	r3, [r7, #7]
 800f078:	f003 021f 	and.w	r2, r3, #31
 800f07c:	4907      	ldr	r1, [pc, #28]	; (800f09c <__NVIC_EnableIRQ+0x38>)
 800f07e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f082:	095b      	lsrs	r3, r3, #5
 800f084:	2001      	movs	r0, #1
 800f086:	fa00 f202 	lsl.w	r2, r0, r2
 800f08a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f08e:	bf00      	nop
 800f090:	370c      	adds	r7, #12
 800f092:	46bd      	mov	sp, r7
 800f094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f098:	4770      	bx	lr
 800f09a:	bf00      	nop
 800f09c:	e000e100 	.word	0xe000e100

0800f0a0 <__NVIC_DisableIRQ>:
 800f0a0:	b480      	push	{r7}
 800f0a2:	b083      	sub	sp, #12
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	71fb      	strb	r3, [r7, #7]
 800f0aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	db12      	blt.n	800f0d8 <__NVIC_DisableIRQ+0x38>
 800f0b2:	79fb      	ldrb	r3, [r7, #7]
 800f0b4:	f003 021f 	and.w	r2, r3, #31
 800f0b8:	490a      	ldr	r1, [pc, #40]	; (800f0e4 <__NVIC_DisableIRQ+0x44>)
 800f0ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0be:	095b      	lsrs	r3, r3, #5
 800f0c0:	2001      	movs	r0, #1
 800f0c2:	fa00 f202 	lsl.w	r2, r0, r2
 800f0c6:	3320      	adds	r3, #32
 800f0c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f0cc:	f3bf 8f4f 	dsb	sy
 800f0d0:	bf00      	nop
 800f0d2:	f3bf 8f6f 	isb	sy
 800f0d6:	bf00      	nop
 800f0d8:	bf00      	nop
 800f0da:	370c      	adds	r7, #12
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr
 800f0e4:	e000e100 	.word	0xe000e100

0800f0e8 <__NVIC_SetPriority>:
 800f0e8:	b480      	push	{r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	6039      	str	r1, [r7, #0]
 800f0f2:	71fb      	strb	r3, [r7, #7]
 800f0f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	db0a      	blt.n	800f112 <__NVIC_SetPriority+0x2a>
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	b2da      	uxtb	r2, r3
 800f100:	490c      	ldr	r1, [pc, #48]	; (800f134 <__NVIC_SetPriority+0x4c>)
 800f102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f106:	0112      	lsls	r2, r2, #4
 800f108:	b2d2      	uxtb	r2, r2
 800f10a:	440b      	add	r3, r1
 800f10c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800f110:	e00a      	b.n	800f128 <__NVIC_SetPriority+0x40>
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	b2da      	uxtb	r2, r3
 800f116:	4908      	ldr	r1, [pc, #32]	; (800f138 <__NVIC_SetPriority+0x50>)
 800f118:	79fb      	ldrb	r3, [r7, #7]
 800f11a:	f003 030f 	and.w	r3, r3, #15
 800f11e:	3b04      	subs	r3, #4
 800f120:	0112      	lsls	r2, r2, #4
 800f122:	b2d2      	uxtb	r2, r2
 800f124:	440b      	add	r3, r1
 800f126:	761a      	strb	r2, [r3, #24]
 800f128:	bf00      	nop
 800f12a:	370c      	adds	r7, #12
 800f12c:	46bd      	mov	sp, r7
 800f12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f132:	4770      	bx	lr
 800f134:	e000e100 	.word	0xe000e100
 800f138:	e000ed00 	.word	0xe000ed00

0800f13c <NVIC_EncodePriority>:
 800f13c:	b480      	push	{r7}
 800f13e:	b089      	sub	sp, #36	; 0x24
 800f140:	af00      	add	r7, sp, #0
 800f142:	60f8      	str	r0, [r7, #12]
 800f144:	60b9      	str	r1, [r7, #8]
 800f146:	607a      	str	r2, [r7, #4]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f003 0307 	and.w	r3, r3, #7
 800f14e:	61fb      	str	r3, [r7, #28]
 800f150:	69fb      	ldr	r3, [r7, #28]
 800f152:	f1c3 0307 	rsb	r3, r3, #7
 800f156:	2b04      	cmp	r3, #4
 800f158:	bf28      	it	cs
 800f15a:	2304      	movcs	r3, #4
 800f15c:	61bb      	str	r3, [r7, #24]
 800f15e:	69fb      	ldr	r3, [r7, #28]
 800f160:	3304      	adds	r3, #4
 800f162:	2b06      	cmp	r3, #6
 800f164:	d902      	bls.n	800f16c <NVIC_EncodePriority+0x30>
 800f166:	69fb      	ldr	r3, [r7, #28]
 800f168:	3b03      	subs	r3, #3
 800f16a:	e000      	b.n	800f16e <NVIC_EncodePriority+0x32>
 800f16c:	2300      	movs	r3, #0
 800f16e:	617b      	str	r3, [r7, #20]
 800f170:	f04f 32ff 	mov.w	r2, #4294967295
 800f174:	69bb      	ldr	r3, [r7, #24]
 800f176:	fa02 f303 	lsl.w	r3, r2, r3
 800f17a:	43da      	mvns	r2, r3
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	401a      	ands	r2, r3
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	409a      	lsls	r2, r3
 800f184:	f04f 31ff 	mov.w	r1, #4294967295
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	fa01 f303 	lsl.w	r3, r1, r3
 800f18e:	43d9      	mvns	r1, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	400b      	ands	r3, r1
 800f194:	4313      	orrs	r3, r2
 800f196:	4618      	mov	r0, r3
 800f198:	3724      	adds	r7, #36	; 0x24
 800f19a:	46bd      	mov	sp, r7
 800f19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a0:	4770      	bx	lr

0800f1a2 <HAL_NVIC_SetPriorityGrouping>:
 800f1a2:	b580      	push	{r7, lr}
 800f1a4:	b082      	sub	sp, #8
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	6078      	str	r0, [r7, #4]
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f7ff ff28 	bl	800f000 <__NVIC_SetPriorityGrouping>
 800f1b0:	bf00      	nop
 800f1b2:	3708      	adds	r7, #8
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}

0800f1b8 <HAL_NVIC_SetPriority>:
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b086      	sub	sp, #24
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	4603      	mov	r3, r0
 800f1c0:	60b9      	str	r1, [r7, #8]
 800f1c2:	607a      	str	r2, [r7, #4]
 800f1c4:	73fb      	strb	r3, [r7, #15]
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	617b      	str	r3, [r7, #20]
 800f1ca:	f7ff ff3d 	bl	800f048 <__NVIC_GetPriorityGrouping>
 800f1ce:	6178      	str	r0, [r7, #20]
 800f1d0:	687a      	ldr	r2, [r7, #4]
 800f1d2:	68b9      	ldr	r1, [r7, #8]
 800f1d4:	6978      	ldr	r0, [r7, #20]
 800f1d6:	f7ff ffb1 	bl	800f13c <NVIC_EncodePriority>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1e0:	4611      	mov	r1, r2
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7ff ff80 	bl	800f0e8 <__NVIC_SetPriority>
 800f1e8:	bf00      	nop
 800f1ea:	3718      	adds	r7, #24
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}

0800f1f0 <HAL_NVIC_EnableIRQ>:
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	71fb      	strb	r3, [r7, #7]
 800f1fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1fe:	4618      	mov	r0, r3
 800f200:	f7ff ff30 	bl	800f064 <__NVIC_EnableIRQ>
 800f204:	bf00      	nop
 800f206:	3708      	adds	r7, #8
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <HAL_NVIC_DisableIRQ>:
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
 800f212:	4603      	mov	r3, r0
 800f214:	71fb      	strb	r3, [r7, #7]
 800f216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7ff ff40 	bl	800f0a0 <__NVIC_DisableIRQ>
 800f220:	bf00      	nop
 800f222:	3708      	adds	r7, #8
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}

0800f228 <HAL_FLASH_Program>:
 800f228:	b580      	push	{r7, lr}
 800f22a:	b086      	sub	sp, #24
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	60f8      	str	r0, [r7, #12]
 800f230:	60b9      	str	r1, [r7, #8]
 800f232:	e9c7 2300 	strd	r2, r3, [r7]
 800f236:	2301      	movs	r3, #1
 800f238:	75fb      	strb	r3, [r7, #23]
 800f23a:	4b23      	ldr	r3, [pc, #140]	; (800f2c8 <HAL_FLASH_Program+0xa0>)
 800f23c:	7e1b      	ldrb	r3, [r3, #24]
 800f23e:	2b01      	cmp	r3, #1
 800f240:	d101      	bne.n	800f246 <HAL_FLASH_Program+0x1e>
 800f242:	2302      	movs	r3, #2
 800f244:	e03b      	b.n	800f2be <HAL_FLASH_Program+0x96>
 800f246:	4b20      	ldr	r3, [pc, #128]	; (800f2c8 <HAL_FLASH_Program+0xa0>)
 800f248:	2201      	movs	r2, #1
 800f24a:	761a      	strb	r2, [r3, #24]
 800f24c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f250:	f000 f870 	bl	800f334 <FLASH_WaitForLastOperation>
 800f254:	4603      	mov	r3, r0
 800f256:	75fb      	strb	r3, [r7, #23]
 800f258:	7dfb      	ldrb	r3, [r7, #23]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d12b      	bne.n	800f2b6 <HAL_FLASH_Program+0x8e>
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d105      	bne.n	800f270 <HAL_FLASH_Program+0x48>
 800f264:	783b      	ldrb	r3, [r7, #0]
 800f266:	4619      	mov	r1, r3
 800f268:	68b8      	ldr	r0, [r7, #8]
 800f26a:	f000 f91b 	bl	800f4a4 <FLASH_Program_Byte>
 800f26e:	e016      	b.n	800f29e <HAL_FLASH_Program+0x76>
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2b01      	cmp	r3, #1
 800f274:	d105      	bne.n	800f282 <HAL_FLASH_Program+0x5a>
 800f276:	883b      	ldrh	r3, [r7, #0]
 800f278:	4619      	mov	r1, r3
 800f27a:	68b8      	ldr	r0, [r7, #8]
 800f27c:	f000 f8ee 	bl	800f45c <FLASH_Program_HalfWord>
 800f280:	e00d      	b.n	800f29e <HAL_FLASH_Program+0x76>
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2b02      	cmp	r3, #2
 800f286:	d105      	bne.n	800f294 <HAL_FLASH_Program+0x6c>
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	4619      	mov	r1, r3
 800f28c:	68b8      	ldr	r0, [r7, #8]
 800f28e:	f000 f8c3 	bl	800f418 <FLASH_Program_Word>
 800f292:	e004      	b.n	800f29e <HAL_FLASH_Program+0x76>
 800f294:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f298:	68b8      	ldr	r0, [r7, #8]
 800f29a:	f000 f88b 	bl	800f3b4 <FLASH_Program_DoubleWord>
 800f29e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f2a2:	f000 f847 	bl	800f334 <FLASH_WaitForLastOperation>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	75fb      	strb	r3, [r7, #23]
 800f2aa:	4b08      	ldr	r3, [pc, #32]	; (800f2cc <HAL_FLASH_Program+0xa4>)
 800f2ac:	691b      	ldr	r3, [r3, #16]
 800f2ae:	4a07      	ldr	r2, [pc, #28]	; (800f2cc <HAL_FLASH_Program+0xa4>)
 800f2b0:	f023 0301 	bic.w	r3, r3, #1
 800f2b4:	6113      	str	r3, [r2, #16]
 800f2b6:	4b04      	ldr	r3, [pc, #16]	; (800f2c8 <HAL_FLASH_Program+0xa0>)
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	761a      	strb	r2, [r3, #24]
 800f2bc:	7dfb      	ldrb	r3, [r7, #23]
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3718      	adds	r7, #24
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
 800f2c6:	bf00      	nop
 800f2c8:	20007bc8 	.word	0x20007bc8
 800f2cc:	40023c00 	.word	0x40023c00

0800f2d0 <HAL_FLASH_Unlock>:
 800f2d0:	b480      	push	{r7}
 800f2d2:	b083      	sub	sp, #12
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	71fb      	strb	r3, [r7, #7]
 800f2da:	4b0b      	ldr	r3, [pc, #44]	; (800f308 <HAL_FLASH_Unlock+0x38>)
 800f2dc:	691b      	ldr	r3, [r3, #16]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	da0b      	bge.n	800f2fa <HAL_FLASH_Unlock+0x2a>
 800f2e2:	4b09      	ldr	r3, [pc, #36]	; (800f308 <HAL_FLASH_Unlock+0x38>)
 800f2e4:	4a09      	ldr	r2, [pc, #36]	; (800f30c <HAL_FLASH_Unlock+0x3c>)
 800f2e6:	605a      	str	r2, [r3, #4]
 800f2e8:	4b07      	ldr	r3, [pc, #28]	; (800f308 <HAL_FLASH_Unlock+0x38>)
 800f2ea:	4a09      	ldr	r2, [pc, #36]	; (800f310 <HAL_FLASH_Unlock+0x40>)
 800f2ec:	605a      	str	r2, [r3, #4]
 800f2ee:	4b06      	ldr	r3, [pc, #24]	; (800f308 <HAL_FLASH_Unlock+0x38>)
 800f2f0:	691b      	ldr	r3, [r3, #16]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	da01      	bge.n	800f2fa <HAL_FLASH_Unlock+0x2a>
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	71fb      	strb	r3, [r7, #7]
 800f2fa:	79fb      	ldrb	r3, [r7, #7]
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	370c      	adds	r7, #12
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr
 800f308:	40023c00 	.word	0x40023c00
 800f30c:	45670123 	.word	0x45670123
 800f310:	cdef89ab 	.word	0xcdef89ab

0800f314 <HAL_FLASH_Lock>:
 800f314:	b480      	push	{r7}
 800f316:	af00      	add	r7, sp, #0
 800f318:	4b05      	ldr	r3, [pc, #20]	; (800f330 <HAL_FLASH_Lock+0x1c>)
 800f31a:	691b      	ldr	r3, [r3, #16]
 800f31c:	4a04      	ldr	r2, [pc, #16]	; (800f330 <HAL_FLASH_Lock+0x1c>)
 800f31e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f322:	6113      	str	r3, [r2, #16]
 800f324:	2300      	movs	r3, #0
 800f326:	4618      	mov	r0, r3
 800f328:	46bd      	mov	sp, r7
 800f32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32e:	4770      	bx	lr
 800f330:	40023c00 	.word	0x40023c00

0800f334 <FLASH_WaitForLastOperation>:
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	2300      	movs	r3, #0
 800f33e:	60fb      	str	r3, [r7, #12]
 800f340:	4b1a      	ldr	r3, [pc, #104]	; (800f3ac <FLASH_WaitForLastOperation+0x78>)
 800f342:	2200      	movs	r2, #0
 800f344:	61da      	str	r2, [r3, #28]
 800f346:	f7ff fbb9 	bl	800eabc <HAL_GetTick>
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	e010      	b.n	800f370 <FLASH_WaitForLastOperation+0x3c>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f354:	d00c      	beq.n	800f370 <FLASH_WaitForLastOperation+0x3c>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d007      	beq.n	800f36c <FLASH_WaitForLastOperation+0x38>
 800f35c:	f7ff fbae 	bl	800eabc <HAL_GetTick>
 800f360:	4602      	mov	r2, r0
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	1ad3      	subs	r3, r2, r3
 800f366:	687a      	ldr	r2, [r7, #4]
 800f368:	429a      	cmp	r2, r3
 800f36a:	d201      	bcs.n	800f370 <FLASH_WaitForLastOperation+0x3c>
 800f36c:	2303      	movs	r3, #3
 800f36e:	e019      	b.n	800f3a4 <FLASH_WaitForLastOperation+0x70>
 800f370:	4b0f      	ldr	r3, [pc, #60]	; (800f3b0 <FLASH_WaitForLastOperation+0x7c>)
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d1e8      	bne.n	800f34e <FLASH_WaitForLastOperation+0x1a>
 800f37c:	4b0c      	ldr	r3, [pc, #48]	; (800f3b0 <FLASH_WaitForLastOperation+0x7c>)
 800f37e:	68db      	ldr	r3, [r3, #12]
 800f380:	f003 0301 	and.w	r3, r3, #1
 800f384:	2b00      	cmp	r3, #0
 800f386:	d002      	beq.n	800f38e <FLASH_WaitForLastOperation+0x5a>
 800f388:	4b09      	ldr	r3, [pc, #36]	; (800f3b0 <FLASH_WaitForLastOperation+0x7c>)
 800f38a:	2201      	movs	r2, #1
 800f38c:	60da      	str	r2, [r3, #12]
 800f38e:	4b08      	ldr	r3, [pc, #32]	; (800f3b0 <FLASH_WaitForLastOperation+0x7c>)
 800f390:	68db      	ldr	r3, [r3, #12]
 800f392:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800f396:	2b00      	cmp	r3, #0
 800f398:	d003      	beq.n	800f3a2 <FLASH_WaitForLastOperation+0x6e>
 800f39a:	f000 f8a5 	bl	800f4e8 <FLASH_SetErrorCode>
 800f39e:	2301      	movs	r3, #1
 800f3a0:	e000      	b.n	800f3a4 <FLASH_WaitForLastOperation+0x70>
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3710      	adds	r7, #16
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}
 800f3ac:	20007bc8 	.word	0x20007bc8
 800f3b0:	40023c00 	.word	0x40023c00

0800f3b4 <FLASH_Program_DoubleWord>:
 800f3b4:	b480      	push	{r7}
 800f3b6:	b085      	sub	sp, #20
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	60f8      	str	r0, [r7, #12]
 800f3bc:	e9c7 2300 	strd	r2, r3, [r7]
 800f3c0:	4b14      	ldr	r3, [pc, #80]	; (800f414 <FLASH_Program_DoubleWord+0x60>)
 800f3c2:	691b      	ldr	r3, [r3, #16]
 800f3c4:	4a13      	ldr	r2, [pc, #76]	; (800f414 <FLASH_Program_DoubleWord+0x60>)
 800f3c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3ca:	6113      	str	r3, [r2, #16]
 800f3cc:	4b11      	ldr	r3, [pc, #68]	; (800f414 <FLASH_Program_DoubleWord+0x60>)
 800f3ce:	691b      	ldr	r3, [r3, #16]
 800f3d0:	4a10      	ldr	r2, [pc, #64]	; (800f414 <FLASH_Program_DoubleWord+0x60>)
 800f3d2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f3d6:	6113      	str	r3, [r2, #16]
 800f3d8:	4b0e      	ldr	r3, [pc, #56]	; (800f414 <FLASH_Program_DoubleWord+0x60>)
 800f3da:	691b      	ldr	r3, [r3, #16]
 800f3dc:	4a0d      	ldr	r2, [pc, #52]	; (800f414 <FLASH_Program_DoubleWord+0x60>)
 800f3de:	f043 0301 	orr.w	r3, r3, #1
 800f3e2:	6113      	str	r3, [r2, #16]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	683a      	ldr	r2, [r7, #0]
 800f3e8:	601a      	str	r2, [r3, #0]
 800f3ea:	f3bf 8f6f 	isb	sy
 800f3ee:	bf00      	nop
 800f3f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f3f4:	f04f 0200 	mov.w	r2, #0
 800f3f8:	f04f 0300 	mov.w	r3, #0
 800f3fc:	000a      	movs	r2, r1
 800f3fe:	2300      	movs	r3, #0
 800f400:	68f9      	ldr	r1, [r7, #12]
 800f402:	3104      	adds	r1, #4
 800f404:	4613      	mov	r3, r2
 800f406:	600b      	str	r3, [r1, #0]
 800f408:	bf00      	nop
 800f40a:	3714      	adds	r7, #20
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr
 800f414:	40023c00 	.word	0x40023c00

0800f418 <FLASH_Program_Word>:
 800f418:	b480      	push	{r7}
 800f41a:	b083      	sub	sp, #12
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	6039      	str	r1, [r7, #0]
 800f422:	4b0d      	ldr	r3, [pc, #52]	; (800f458 <FLASH_Program_Word+0x40>)
 800f424:	691b      	ldr	r3, [r3, #16]
 800f426:	4a0c      	ldr	r2, [pc, #48]	; (800f458 <FLASH_Program_Word+0x40>)
 800f428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f42c:	6113      	str	r3, [r2, #16]
 800f42e:	4b0a      	ldr	r3, [pc, #40]	; (800f458 <FLASH_Program_Word+0x40>)
 800f430:	691b      	ldr	r3, [r3, #16]
 800f432:	4a09      	ldr	r2, [pc, #36]	; (800f458 <FLASH_Program_Word+0x40>)
 800f434:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f438:	6113      	str	r3, [r2, #16]
 800f43a:	4b07      	ldr	r3, [pc, #28]	; (800f458 <FLASH_Program_Word+0x40>)
 800f43c:	691b      	ldr	r3, [r3, #16]
 800f43e:	4a06      	ldr	r2, [pc, #24]	; (800f458 <FLASH_Program_Word+0x40>)
 800f440:	f043 0301 	orr.w	r3, r3, #1
 800f444:	6113      	str	r3, [r2, #16]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	683a      	ldr	r2, [r7, #0]
 800f44a:	601a      	str	r2, [r3, #0]
 800f44c:	bf00      	nop
 800f44e:	370c      	adds	r7, #12
 800f450:	46bd      	mov	sp, r7
 800f452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f456:	4770      	bx	lr
 800f458:	40023c00 	.word	0x40023c00

0800f45c <FLASH_Program_HalfWord>:
 800f45c:	b480      	push	{r7}
 800f45e:	b083      	sub	sp, #12
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	460b      	mov	r3, r1
 800f466:	807b      	strh	r3, [r7, #2]
 800f468:	4b0d      	ldr	r3, [pc, #52]	; (800f4a0 <FLASH_Program_HalfWord+0x44>)
 800f46a:	691b      	ldr	r3, [r3, #16]
 800f46c:	4a0c      	ldr	r2, [pc, #48]	; (800f4a0 <FLASH_Program_HalfWord+0x44>)
 800f46e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f472:	6113      	str	r3, [r2, #16]
 800f474:	4b0a      	ldr	r3, [pc, #40]	; (800f4a0 <FLASH_Program_HalfWord+0x44>)
 800f476:	691b      	ldr	r3, [r3, #16]
 800f478:	4a09      	ldr	r2, [pc, #36]	; (800f4a0 <FLASH_Program_HalfWord+0x44>)
 800f47a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f47e:	6113      	str	r3, [r2, #16]
 800f480:	4b07      	ldr	r3, [pc, #28]	; (800f4a0 <FLASH_Program_HalfWord+0x44>)
 800f482:	691b      	ldr	r3, [r3, #16]
 800f484:	4a06      	ldr	r2, [pc, #24]	; (800f4a0 <FLASH_Program_HalfWord+0x44>)
 800f486:	f043 0301 	orr.w	r3, r3, #1
 800f48a:	6113      	str	r3, [r2, #16]
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	887a      	ldrh	r2, [r7, #2]
 800f490:	801a      	strh	r2, [r3, #0]
 800f492:	bf00      	nop
 800f494:	370c      	adds	r7, #12
 800f496:	46bd      	mov	sp, r7
 800f498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49c:	4770      	bx	lr
 800f49e:	bf00      	nop
 800f4a0:	40023c00 	.word	0x40023c00

0800f4a4 <FLASH_Program_Byte>:
 800f4a4:	b480      	push	{r7}
 800f4a6:	b083      	sub	sp, #12
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	460b      	mov	r3, r1
 800f4ae:	70fb      	strb	r3, [r7, #3]
 800f4b0:	4b0c      	ldr	r3, [pc, #48]	; (800f4e4 <FLASH_Program_Byte+0x40>)
 800f4b2:	691b      	ldr	r3, [r3, #16]
 800f4b4:	4a0b      	ldr	r2, [pc, #44]	; (800f4e4 <FLASH_Program_Byte+0x40>)
 800f4b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f4ba:	6113      	str	r3, [r2, #16]
 800f4bc:	4b09      	ldr	r3, [pc, #36]	; (800f4e4 <FLASH_Program_Byte+0x40>)
 800f4be:	4a09      	ldr	r2, [pc, #36]	; (800f4e4 <FLASH_Program_Byte+0x40>)
 800f4c0:	691b      	ldr	r3, [r3, #16]
 800f4c2:	6113      	str	r3, [r2, #16]
 800f4c4:	4b07      	ldr	r3, [pc, #28]	; (800f4e4 <FLASH_Program_Byte+0x40>)
 800f4c6:	691b      	ldr	r3, [r3, #16]
 800f4c8:	4a06      	ldr	r2, [pc, #24]	; (800f4e4 <FLASH_Program_Byte+0x40>)
 800f4ca:	f043 0301 	orr.w	r3, r3, #1
 800f4ce:	6113      	str	r3, [r2, #16]
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	78fa      	ldrb	r2, [r7, #3]
 800f4d4:	701a      	strb	r2, [r3, #0]
 800f4d6:	bf00      	nop
 800f4d8:	370c      	adds	r7, #12
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e0:	4770      	bx	lr
 800f4e2:	bf00      	nop
 800f4e4:	40023c00 	.word	0x40023c00

0800f4e8 <FLASH_SetErrorCode>:
 800f4e8:	b480      	push	{r7}
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	4b2f      	ldr	r3, [pc, #188]	; (800f5ac <FLASH_SetErrorCode+0xc4>)
 800f4ee:	68db      	ldr	r3, [r3, #12]
 800f4f0:	f003 0310 	and.w	r3, r3, #16
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d008      	beq.n	800f50a <FLASH_SetErrorCode+0x22>
 800f4f8:	4b2d      	ldr	r3, [pc, #180]	; (800f5b0 <FLASH_SetErrorCode+0xc8>)
 800f4fa:	69db      	ldr	r3, [r3, #28]
 800f4fc:	f043 0310 	orr.w	r3, r3, #16
 800f500:	4a2b      	ldr	r2, [pc, #172]	; (800f5b0 <FLASH_SetErrorCode+0xc8>)
 800f502:	61d3      	str	r3, [r2, #28]
 800f504:	4b29      	ldr	r3, [pc, #164]	; (800f5ac <FLASH_SetErrorCode+0xc4>)
 800f506:	2210      	movs	r2, #16
 800f508:	60da      	str	r2, [r3, #12]
 800f50a:	4b28      	ldr	r3, [pc, #160]	; (800f5ac <FLASH_SetErrorCode+0xc4>)
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	f003 0320 	and.w	r3, r3, #32
 800f512:	2b00      	cmp	r3, #0
 800f514:	d008      	beq.n	800f528 <FLASH_SetErrorCode+0x40>
 800f516:	4b26      	ldr	r3, [pc, #152]	; (800f5b0 <FLASH_SetErrorCode+0xc8>)
 800f518:	69db      	ldr	r3, [r3, #28]
 800f51a:	f043 0308 	orr.w	r3, r3, #8
 800f51e:	4a24      	ldr	r2, [pc, #144]	; (800f5b0 <FLASH_SetErrorCode+0xc8>)
 800f520:	61d3      	str	r3, [r2, #28]
 800f522:	4b22      	ldr	r3, [pc, #136]	; (800f5ac <FLASH_SetErrorCode+0xc4>)
 800f524:	2220      	movs	r2, #32
 800f526:	60da      	str	r2, [r3, #12]
 800f528:	4b20      	ldr	r3, [pc, #128]	; (800f5ac <FLASH_SetErrorCode+0xc4>)
 800f52a:	68db      	ldr	r3, [r3, #12]
 800f52c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f530:	2b00      	cmp	r3, #0
 800f532:	d008      	beq.n	800f546 <FLASH_SetErrorCode+0x5e>
 800f534:	4b1e      	ldr	r3, [pc, #120]	; (800f5b0 <FLASH_SetErrorCode+0xc8>)
 800f536:	69db      	ldr	r3, [r3, #28]
 800f538:	f043 0304 	orr.w	r3, r3, #4
 800f53c:	4a1c      	ldr	r2, [pc, #112]	; (800f5b0 <FLASH_SetErrorCode+0xc8>)
 800f53e:	61d3      	str	r3, [r2, #28]
 800f540:	4b1a      	ldr	r3, [pc, #104]	; (800f5ac <FLASH_SetErrorCode+0xc4>)
 800f542:	2240      	movs	r2, #64	; 0x40
 800f544:	60da      	str	r2, [r3, #12]
 800f546:	4b19      	ldr	r3, [pc, #100]	; (800f5ac <FLASH_SetErrorCode+0xc4>)
 800f548:	68db      	ldr	r3, [r3, #12]
 800f54a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d008      	beq.n	800f564 <FLASH_SetErrorCode+0x7c>
 800f552:	4b17      	ldr	r3, [pc, #92]	; (800f5b0 <FLASH_SetErrorCode+0xc8>)
 800f554:	69db      	ldr	r3, [r3, #28]
 800f556:	f043 0302 	orr.w	r3, r3, #2
 800f55a:	4a15      	ldr	r2, [pc, #84]	; (800f5b0 <FLASH_SetErrorCode+0xc8>)
 800f55c:	61d3      	str	r3, [r2, #28]
 800f55e:	4b13      	ldr	r3, [pc, #76]	; (800f5ac <FLASH_SetErrorCode+0xc4>)
 800f560:	2280      	movs	r2, #128	; 0x80
 800f562:	60da      	str	r2, [r3, #12]
 800f564:	4b11      	ldr	r3, [pc, #68]	; (800f5ac <FLASH_SetErrorCode+0xc4>)
 800f566:	68db      	ldr	r3, [r3, #12]
 800f568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d009      	beq.n	800f584 <FLASH_SetErrorCode+0x9c>
 800f570:	4b0f      	ldr	r3, [pc, #60]	; (800f5b0 <FLASH_SetErrorCode+0xc8>)
 800f572:	69db      	ldr	r3, [r3, #28]
 800f574:	f043 0301 	orr.w	r3, r3, #1
 800f578:	4a0d      	ldr	r2, [pc, #52]	; (800f5b0 <FLASH_SetErrorCode+0xc8>)
 800f57a:	61d3      	str	r3, [r2, #28]
 800f57c:	4b0b      	ldr	r3, [pc, #44]	; (800f5ac <FLASH_SetErrorCode+0xc4>)
 800f57e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f582:	60da      	str	r2, [r3, #12]
 800f584:	4b09      	ldr	r3, [pc, #36]	; (800f5ac <FLASH_SetErrorCode+0xc4>)
 800f586:	68db      	ldr	r3, [r3, #12]
 800f588:	f003 0302 	and.w	r3, r3, #2
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d008      	beq.n	800f5a2 <FLASH_SetErrorCode+0xba>
 800f590:	4b07      	ldr	r3, [pc, #28]	; (800f5b0 <FLASH_SetErrorCode+0xc8>)
 800f592:	69db      	ldr	r3, [r3, #28]
 800f594:	f043 0320 	orr.w	r3, r3, #32
 800f598:	4a05      	ldr	r2, [pc, #20]	; (800f5b0 <FLASH_SetErrorCode+0xc8>)
 800f59a:	61d3      	str	r3, [r2, #28]
 800f59c:	4b03      	ldr	r3, [pc, #12]	; (800f5ac <FLASH_SetErrorCode+0xc4>)
 800f59e:	2202      	movs	r2, #2
 800f5a0:	60da      	str	r2, [r3, #12]
 800f5a2:	bf00      	nop
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr
 800f5ac:	40023c00 	.word	0x40023c00
 800f5b0:	20007bc8 	.word	0x20007bc8

0800f5b4 <HAL_FLASHEx_Erase>:
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b084      	sub	sp, #16
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
 800f5bc:	6039      	str	r1, [r7, #0]
 800f5be:	2301      	movs	r3, #1
 800f5c0:	73fb      	strb	r3, [r7, #15]
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	60bb      	str	r3, [r7, #8]
 800f5c6:	4b31      	ldr	r3, [pc, #196]	; (800f68c <HAL_FLASHEx_Erase+0xd8>)
 800f5c8:	7e1b      	ldrb	r3, [r3, #24]
 800f5ca:	2b01      	cmp	r3, #1
 800f5cc:	d101      	bne.n	800f5d2 <HAL_FLASHEx_Erase+0x1e>
 800f5ce:	2302      	movs	r3, #2
 800f5d0:	e058      	b.n	800f684 <HAL_FLASHEx_Erase+0xd0>
 800f5d2:	4b2e      	ldr	r3, [pc, #184]	; (800f68c <HAL_FLASHEx_Erase+0xd8>)
 800f5d4:	2201      	movs	r2, #1
 800f5d6:	761a      	strb	r2, [r3, #24]
 800f5d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f5dc:	f7ff feaa 	bl	800f334 <FLASH_WaitForLastOperation>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	73fb      	strb	r3, [r7, #15]
 800f5e4:	7bfb      	ldrb	r3, [r7, #15]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d148      	bne.n	800f67c <HAL_FLASHEx_Erase+0xc8>
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800f5f0:	601a      	str	r2, [r3, #0]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	2b01      	cmp	r3, #1
 800f5f8:	d115      	bne.n	800f626 <HAL_FLASHEx_Erase+0x72>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	691b      	ldr	r3, [r3, #16]
 800f5fe:	b2da      	uxtb	r2, r3
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	4619      	mov	r1, r3
 800f606:	4610      	mov	r0, r2
 800f608:	f000 f844 	bl	800f694 <FLASH_MassErase>
 800f60c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f610:	f7ff fe90 	bl	800f334 <FLASH_WaitForLastOperation>
 800f614:	4603      	mov	r3, r0
 800f616:	73fb      	strb	r3, [r7, #15]
 800f618:	4b1d      	ldr	r3, [pc, #116]	; (800f690 <HAL_FLASHEx_Erase+0xdc>)
 800f61a:	691b      	ldr	r3, [r3, #16]
 800f61c:	4a1c      	ldr	r2, [pc, #112]	; (800f690 <HAL_FLASHEx_Erase+0xdc>)
 800f61e:	f023 0304 	bic.w	r3, r3, #4
 800f622:	6113      	str	r3, [r2, #16]
 800f624:	e028      	b.n	800f678 <HAL_FLASHEx_Erase+0xc4>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	689b      	ldr	r3, [r3, #8]
 800f62a:	60bb      	str	r3, [r7, #8]
 800f62c:	e01c      	b.n	800f668 <HAL_FLASHEx_Erase+0xb4>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	691b      	ldr	r3, [r3, #16]
 800f632:	b2db      	uxtb	r3, r3
 800f634:	4619      	mov	r1, r3
 800f636:	68b8      	ldr	r0, [r7, #8]
 800f638:	f000 f850 	bl	800f6dc <FLASH_Erase_Sector>
 800f63c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800f640:	f7ff fe78 	bl	800f334 <FLASH_WaitForLastOperation>
 800f644:	4603      	mov	r3, r0
 800f646:	73fb      	strb	r3, [r7, #15]
 800f648:	4b11      	ldr	r3, [pc, #68]	; (800f690 <HAL_FLASHEx_Erase+0xdc>)
 800f64a:	691b      	ldr	r3, [r3, #16]
 800f64c:	4a10      	ldr	r2, [pc, #64]	; (800f690 <HAL_FLASHEx_Erase+0xdc>)
 800f64e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800f652:	6113      	str	r3, [r2, #16]
 800f654:	7bfb      	ldrb	r3, [r7, #15]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d003      	beq.n	800f662 <HAL_FLASHEx_Erase+0xae>
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	68ba      	ldr	r2, [r7, #8]
 800f65e:	601a      	str	r2, [r3, #0]
 800f660:	e00a      	b.n	800f678 <HAL_FLASHEx_Erase+0xc4>
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	3301      	adds	r3, #1
 800f666:	60bb      	str	r3, [r7, #8]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	68da      	ldr	r2, [r3, #12]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	689b      	ldr	r3, [r3, #8]
 800f670:	4413      	add	r3, r2
 800f672:	68ba      	ldr	r2, [r7, #8]
 800f674:	429a      	cmp	r2, r3
 800f676:	d3da      	bcc.n	800f62e <HAL_FLASHEx_Erase+0x7a>
 800f678:	f000 f878 	bl	800f76c <FLASH_FlushCaches>
 800f67c:	4b03      	ldr	r3, [pc, #12]	; (800f68c <HAL_FLASHEx_Erase+0xd8>)
 800f67e:	2200      	movs	r2, #0
 800f680:	761a      	strb	r2, [r3, #24]
 800f682:	7bfb      	ldrb	r3, [r7, #15]
 800f684:	4618      	mov	r0, r3
 800f686:	3710      	adds	r7, #16
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}
 800f68c:	20007bc8 	.word	0x20007bc8
 800f690:	40023c00 	.word	0x40023c00

0800f694 <FLASH_MassErase>:
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
 800f69a:	4603      	mov	r3, r0
 800f69c:	6039      	str	r1, [r7, #0]
 800f69e:	71fb      	strb	r3, [r7, #7]
 800f6a0:	4b0d      	ldr	r3, [pc, #52]	; (800f6d8 <FLASH_MassErase+0x44>)
 800f6a2:	691b      	ldr	r3, [r3, #16]
 800f6a4:	4a0c      	ldr	r2, [pc, #48]	; (800f6d8 <FLASH_MassErase+0x44>)
 800f6a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6aa:	6113      	str	r3, [r2, #16]
 800f6ac:	4b0a      	ldr	r3, [pc, #40]	; (800f6d8 <FLASH_MassErase+0x44>)
 800f6ae:	691b      	ldr	r3, [r3, #16]
 800f6b0:	4a09      	ldr	r2, [pc, #36]	; (800f6d8 <FLASH_MassErase+0x44>)
 800f6b2:	f043 0304 	orr.w	r3, r3, #4
 800f6b6:	6113      	str	r3, [r2, #16]
 800f6b8:	4b07      	ldr	r3, [pc, #28]	; (800f6d8 <FLASH_MassErase+0x44>)
 800f6ba:	691a      	ldr	r2, [r3, #16]
 800f6bc:	79fb      	ldrb	r3, [r7, #7]
 800f6be:	021b      	lsls	r3, r3, #8
 800f6c0:	4313      	orrs	r3, r2
 800f6c2:	4a05      	ldr	r2, [pc, #20]	; (800f6d8 <FLASH_MassErase+0x44>)
 800f6c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f6c8:	6113      	str	r3, [r2, #16]
 800f6ca:	bf00      	nop
 800f6cc:	370c      	adds	r7, #12
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d4:	4770      	bx	lr
 800f6d6:	bf00      	nop
 800f6d8:	40023c00 	.word	0x40023c00

0800f6dc <FLASH_Erase_Sector>:
 800f6dc:	b480      	push	{r7}
 800f6de:	b085      	sub	sp, #20
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	460b      	mov	r3, r1
 800f6e6:	70fb      	strb	r3, [r7, #3]
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	60fb      	str	r3, [r7, #12]
 800f6ec:	78fb      	ldrb	r3, [r7, #3]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d102      	bne.n	800f6f8 <FLASH_Erase_Sector+0x1c>
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	60fb      	str	r3, [r7, #12]
 800f6f6:	e010      	b.n	800f71a <FLASH_Erase_Sector+0x3e>
 800f6f8:	78fb      	ldrb	r3, [r7, #3]
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d103      	bne.n	800f706 <FLASH_Erase_Sector+0x2a>
 800f6fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f702:	60fb      	str	r3, [r7, #12]
 800f704:	e009      	b.n	800f71a <FLASH_Erase_Sector+0x3e>
 800f706:	78fb      	ldrb	r3, [r7, #3]
 800f708:	2b02      	cmp	r3, #2
 800f70a:	d103      	bne.n	800f714 <FLASH_Erase_Sector+0x38>
 800f70c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f710:	60fb      	str	r3, [r7, #12]
 800f712:	e002      	b.n	800f71a <FLASH_Erase_Sector+0x3e>
 800f714:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f718:	60fb      	str	r3, [r7, #12]
 800f71a:	4b13      	ldr	r3, [pc, #76]	; (800f768 <FLASH_Erase_Sector+0x8c>)
 800f71c:	691b      	ldr	r3, [r3, #16]
 800f71e:	4a12      	ldr	r2, [pc, #72]	; (800f768 <FLASH_Erase_Sector+0x8c>)
 800f720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f724:	6113      	str	r3, [r2, #16]
 800f726:	4b10      	ldr	r3, [pc, #64]	; (800f768 <FLASH_Erase_Sector+0x8c>)
 800f728:	691a      	ldr	r2, [r3, #16]
 800f72a:	490f      	ldr	r1, [pc, #60]	; (800f768 <FLASH_Erase_Sector+0x8c>)
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	4313      	orrs	r3, r2
 800f730:	610b      	str	r3, [r1, #16]
 800f732:	4b0d      	ldr	r3, [pc, #52]	; (800f768 <FLASH_Erase_Sector+0x8c>)
 800f734:	691b      	ldr	r3, [r3, #16]
 800f736:	4a0c      	ldr	r2, [pc, #48]	; (800f768 <FLASH_Erase_Sector+0x8c>)
 800f738:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f73c:	6113      	str	r3, [r2, #16]
 800f73e:	4b0a      	ldr	r3, [pc, #40]	; (800f768 <FLASH_Erase_Sector+0x8c>)
 800f740:	691a      	ldr	r2, [r3, #16]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	00db      	lsls	r3, r3, #3
 800f746:	4313      	orrs	r3, r2
 800f748:	4a07      	ldr	r2, [pc, #28]	; (800f768 <FLASH_Erase_Sector+0x8c>)
 800f74a:	f043 0302 	orr.w	r3, r3, #2
 800f74e:	6113      	str	r3, [r2, #16]
 800f750:	4b05      	ldr	r3, [pc, #20]	; (800f768 <FLASH_Erase_Sector+0x8c>)
 800f752:	691b      	ldr	r3, [r3, #16]
 800f754:	4a04      	ldr	r2, [pc, #16]	; (800f768 <FLASH_Erase_Sector+0x8c>)
 800f756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f75a:	6113      	str	r3, [r2, #16]
 800f75c:	bf00      	nop
 800f75e:	3714      	adds	r7, #20
 800f760:	46bd      	mov	sp, r7
 800f762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f766:	4770      	bx	lr
 800f768:	40023c00 	.word	0x40023c00

0800f76c <FLASH_FlushCaches>:
 800f76c:	b480      	push	{r7}
 800f76e:	af00      	add	r7, sp, #0
 800f770:	4b20      	ldr	r3, [pc, #128]	; (800f7f4 <FLASH_FlushCaches+0x88>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d017      	beq.n	800f7ac <FLASH_FlushCaches+0x40>
 800f77c:	4b1d      	ldr	r3, [pc, #116]	; (800f7f4 <FLASH_FlushCaches+0x88>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	4a1c      	ldr	r2, [pc, #112]	; (800f7f4 <FLASH_FlushCaches+0x88>)
 800f782:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f786:	6013      	str	r3, [r2, #0]
 800f788:	4b1a      	ldr	r3, [pc, #104]	; (800f7f4 <FLASH_FlushCaches+0x88>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	4a19      	ldr	r2, [pc, #100]	; (800f7f4 <FLASH_FlushCaches+0x88>)
 800f78e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f792:	6013      	str	r3, [r2, #0]
 800f794:	4b17      	ldr	r3, [pc, #92]	; (800f7f4 <FLASH_FlushCaches+0x88>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	4a16      	ldr	r2, [pc, #88]	; (800f7f4 <FLASH_FlushCaches+0x88>)
 800f79a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f79e:	6013      	str	r3, [r2, #0]
 800f7a0:	4b14      	ldr	r3, [pc, #80]	; (800f7f4 <FLASH_FlushCaches+0x88>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	4a13      	ldr	r2, [pc, #76]	; (800f7f4 <FLASH_FlushCaches+0x88>)
 800f7a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f7aa:	6013      	str	r3, [r2, #0]
 800f7ac:	4b11      	ldr	r3, [pc, #68]	; (800f7f4 <FLASH_FlushCaches+0x88>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d017      	beq.n	800f7e8 <FLASH_FlushCaches+0x7c>
 800f7b8:	4b0e      	ldr	r3, [pc, #56]	; (800f7f4 <FLASH_FlushCaches+0x88>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	4a0d      	ldr	r2, [pc, #52]	; (800f7f4 <FLASH_FlushCaches+0x88>)
 800f7be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f7c2:	6013      	str	r3, [r2, #0]
 800f7c4:	4b0b      	ldr	r3, [pc, #44]	; (800f7f4 <FLASH_FlushCaches+0x88>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	4a0a      	ldr	r2, [pc, #40]	; (800f7f4 <FLASH_FlushCaches+0x88>)
 800f7ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f7ce:	6013      	str	r3, [r2, #0]
 800f7d0:	4b08      	ldr	r3, [pc, #32]	; (800f7f4 <FLASH_FlushCaches+0x88>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	4a07      	ldr	r2, [pc, #28]	; (800f7f4 <FLASH_FlushCaches+0x88>)
 800f7d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f7da:	6013      	str	r3, [r2, #0]
 800f7dc:	4b05      	ldr	r3, [pc, #20]	; (800f7f4 <FLASH_FlushCaches+0x88>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	4a04      	ldr	r2, [pc, #16]	; (800f7f4 <FLASH_FlushCaches+0x88>)
 800f7e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f7e6:	6013      	str	r3, [r2, #0]
 800f7e8:	bf00      	nop
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f0:	4770      	bx	lr
 800f7f2:	bf00      	nop
 800f7f4:	40023c00 	.word	0x40023c00

0800f7f8 <HAL_GPIO_Init>:
 800f7f8:	b480      	push	{r7}
 800f7fa:	b089      	sub	sp, #36	; 0x24
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
 800f800:	6039      	str	r1, [r7, #0]
 800f802:	2300      	movs	r3, #0
 800f804:	617b      	str	r3, [r7, #20]
 800f806:	2300      	movs	r3, #0
 800f808:	613b      	str	r3, [r7, #16]
 800f80a:	2300      	movs	r3, #0
 800f80c:	61bb      	str	r3, [r7, #24]
 800f80e:	2300      	movs	r3, #0
 800f810:	61fb      	str	r3, [r7, #28]
 800f812:	e159      	b.n	800fac8 <HAL_GPIO_Init+0x2d0>
 800f814:	2201      	movs	r2, #1
 800f816:	69fb      	ldr	r3, [r7, #28]
 800f818:	fa02 f303 	lsl.w	r3, r2, r3
 800f81c:	617b      	str	r3, [r7, #20]
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	697a      	ldr	r2, [r7, #20]
 800f824:	4013      	ands	r3, r2
 800f826:	613b      	str	r3, [r7, #16]
 800f828:	693a      	ldr	r2, [r7, #16]
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	429a      	cmp	r2, r3
 800f82e:	f040 8148 	bne.w	800fac2 <HAL_GPIO_Init+0x2ca>
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	685b      	ldr	r3, [r3, #4]
 800f836:	f003 0303 	and.w	r3, r3, #3
 800f83a:	2b01      	cmp	r3, #1
 800f83c:	d005      	beq.n	800f84a <HAL_GPIO_Init+0x52>
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	685b      	ldr	r3, [r3, #4]
 800f842:	f003 0303 	and.w	r3, r3, #3
 800f846:	2b02      	cmp	r3, #2
 800f848:	d130      	bne.n	800f8ac <HAL_GPIO_Init+0xb4>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	689b      	ldr	r3, [r3, #8]
 800f84e:	61bb      	str	r3, [r7, #24]
 800f850:	69fb      	ldr	r3, [r7, #28]
 800f852:	005b      	lsls	r3, r3, #1
 800f854:	2203      	movs	r2, #3
 800f856:	fa02 f303 	lsl.w	r3, r2, r3
 800f85a:	43db      	mvns	r3, r3
 800f85c:	69ba      	ldr	r2, [r7, #24]
 800f85e:	4013      	ands	r3, r2
 800f860:	61bb      	str	r3, [r7, #24]
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	68da      	ldr	r2, [r3, #12]
 800f866:	69fb      	ldr	r3, [r7, #28]
 800f868:	005b      	lsls	r3, r3, #1
 800f86a:	fa02 f303 	lsl.w	r3, r2, r3
 800f86e:	69ba      	ldr	r2, [r7, #24]
 800f870:	4313      	orrs	r3, r2
 800f872:	61bb      	str	r3, [r7, #24]
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	69ba      	ldr	r2, [r7, #24]
 800f878:	609a      	str	r2, [r3, #8]
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	685b      	ldr	r3, [r3, #4]
 800f87e:	61bb      	str	r3, [r7, #24]
 800f880:	2201      	movs	r2, #1
 800f882:	69fb      	ldr	r3, [r7, #28]
 800f884:	fa02 f303 	lsl.w	r3, r2, r3
 800f888:	43db      	mvns	r3, r3
 800f88a:	69ba      	ldr	r2, [r7, #24]
 800f88c:	4013      	ands	r3, r2
 800f88e:	61bb      	str	r3, [r7, #24]
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	685b      	ldr	r3, [r3, #4]
 800f894:	091b      	lsrs	r3, r3, #4
 800f896:	f003 0201 	and.w	r2, r3, #1
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	fa02 f303 	lsl.w	r3, r2, r3
 800f8a0:	69ba      	ldr	r2, [r7, #24]
 800f8a2:	4313      	orrs	r3, r2
 800f8a4:	61bb      	str	r3, [r7, #24]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	69ba      	ldr	r2, [r7, #24]
 800f8aa:	605a      	str	r2, [r3, #4]
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	f003 0303 	and.w	r3, r3, #3
 800f8b4:	2b03      	cmp	r3, #3
 800f8b6:	d017      	beq.n	800f8e8 <HAL_GPIO_Init+0xf0>
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	68db      	ldr	r3, [r3, #12]
 800f8bc:	61bb      	str	r3, [r7, #24]
 800f8be:	69fb      	ldr	r3, [r7, #28]
 800f8c0:	005b      	lsls	r3, r3, #1
 800f8c2:	2203      	movs	r2, #3
 800f8c4:	fa02 f303 	lsl.w	r3, r2, r3
 800f8c8:	43db      	mvns	r3, r3
 800f8ca:	69ba      	ldr	r2, [r7, #24]
 800f8cc:	4013      	ands	r3, r2
 800f8ce:	61bb      	str	r3, [r7, #24]
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	689a      	ldr	r2, [r3, #8]
 800f8d4:	69fb      	ldr	r3, [r7, #28]
 800f8d6:	005b      	lsls	r3, r3, #1
 800f8d8:	fa02 f303 	lsl.w	r3, r2, r3
 800f8dc:	69ba      	ldr	r2, [r7, #24]
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	61bb      	str	r3, [r7, #24]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	69ba      	ldr	r2, [r7, #24]
 800f8e6:	60da      	str	r2, [r3, #12]
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	685b      	ldr	r3, [r3, #4]
 800f8ec:	f003 0303 	and.w	r3, r3, #3
 800f8f0:	2b02      	cmp	r3, #2
 800f8f2:	d123      	bne.n	800f93c <HAL_GPIO_Init+0x144>
 800f8f4:	69fb      	ldr	r3, [r7, #28]
 800f8f6:	08da      	lsrs	r2, r3, #3
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	3208      	adds	r2, #8
 800f8fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f900:	61bb      	str	r3, [r7, #24]
 800f902:	69fb      	ldr	r3, [r7, #28]
 800f904:	f003 0307 	and.w	r3, r3, #7
 800f908:	009b      	lsls	r3, r3, #2
 800f90a:	220f      	movs	r2, #15
 800f90c:	fa02 f303 	lsl.w	r3, r2, r3
 800f910:	43db      	mvns	r3, r3
 800f912:	69ba      	ldr	r2, [r7, #24]
 800f914:	4013      	ands	r3, r2
 800f916:	61bb      	str	r3, [r7, #24]
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	691a      	ldr	r2, [r3, #16]
 800f91c:	69fb      	ldr	r3, [r7, #28]
 800f91e:	f003 0307 	and.w	r3, r3, #7
 800f922:	009b      	lsls	r3, r3, #2
 800f924:	fa02 f303 	lsl.w	r3, r2, r3
 800f928:	69ba      	ldr	r2, [r7, #24]
 800f92a:	4313      	orrs	r3, r2
 800f92c:	61bb      	str	r3, [r7, #24]
 800f92e:	69fb      	ldr	r3, [r7, #28]
 800f930:	08da      	lsrs	r2, r3, #3
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	3208      	adds	r2, #8
 800f936:	69b9      	ldr	r1, [r7, #24]
 800f938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	61bb      	str	r3, [r7, #24]
 800f942:	69fb      	ldr	r3, [r7, #28]
 800f944:	005b      	lsls	r3, r3, #1
 800f946:	2203      	movs	r2, #3
 800f948:	fa02 f303 	lsl.w	r3, r2, r3
 800f94c:	43db      	mvns	r3, r3
 800f94e:	69ba      	ldr	r2, [r7, #24]
 800f950:	4013      	ands	r3, r2
 800f952:	61bb      	str	r3, [r7, #24]
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	685b      	ldr	r3, [r3, #4]
 800f958:	f003 0203 	and.w	r2, r3, #3
 800f95c:	69fb      	ldr	r3, [r7, #28]
 800f95e:	005b      	lsls	r3, r3, #1
 800f960:	fa02 f303 	lsl.w	r3, r2, r3
 800f964:	69ba      	ldr	r2, [r7, #24]
 800f966:	4313      	orrs	r3, r2
 800f968:	61bb      	str	r3, [r7, #24]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	69ba      	ldr	r2, [r7, #24]
 800f96e:	601a      	str	r2, [r3, #0]
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	685b      	ldr	r3, [r3, #4]
 800f974:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f978:	2b00      	cmp	r3, #0
 800f97a:	f000 80a2 	beq.w	800fac2 <HAL_GPIO_Init+0x2ca>
 800f97e:	2300      	movs	r3, #0
 800f980:	60fb      	str	r3, [r7, #12]
 800f982:	4b57      	ldr	r3, [pc, #348]	; (800fae0 <HAL_GPIO_Init+0x2e8>)
 800f984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f986:	4a56      	ldr	r2, [pc, #344]	; (800fae0 <HAL_GPIO_Init+0x2e8>)
 800f988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f98c:	6453      	str	r3, [r2, #68]	; 0x44
 800f98e:	4b54      	ldr	r3, [pc, #336]	; (800fae0 <HAL_GPIO_Init+0x2e8>)
 800f990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f996:	60fb      	str	r3, [r7, #12]
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	4a52      	ldr	r2, [pc, #328]	; (800fae4 <HAL_GPIO_Init+0x2ec>)
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	089b      	lsrs	r3, r3, #2
 800f9a0:	3302      	adds	r3, #2
 800f9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9a6:	61bb      	str	r3, [r7, #24]
 800f9a8:	69fb      	ldr	r3, [r7, #28]
 800f9aa:	f003 0303 	and.w	r3, r3, #3
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	220f      	movs	r2, #15
 800f9b2:	fa02 f303 	lsl.w	r3, r2, r3
 800f9b6:	43db      	mvns	r3, r3
 800f9b8:	69ba      	ldr	r2, [r7, #24]
 800f9ba:	4013      	ands	r3, r2
 800f9bc:	61bb      	str	r3, [r7, #24]
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	4a49      	ldr	r2, [pc, #292]	; (800fae8 <HAL_GPIO_Init+0x2f0>)
 800f9c2:	4293      	cmp	r3, r2
 800f9c4:	d019      	beq.n	800f9fa <HAL_GPIO_Init+0x202>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	4a48      	ldr	r2, [pc, #288]	; (800faec <HAL_GPIO_Init+0x2f4>)
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	d013      	beq.n	800f9f6 <HAL_GPIO_Init+0x1fe>
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	4a47      	ldr	r2, [pc, #284]	; (800faf0 <HAL_GPIO_Init+0x2f8>)
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	d00d      	beq.n	800f9f2 <HAL_GPIO_Init+0x1fa>
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	4a46      	ldr	r2, [pc, #280]	; (800faf4 <HAL_GPIO_Init+0x2fc>)
 800f9da:	4293      	cmp	r3, r2
 800f9dc:	d007      	beq.n	800f9ee <HAL_GPIO_Init+0x1f6>
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	4a45      	ldr	r2, [pc, #276]	; (800faf8 <HAL_GPIO_Init+0x300>)
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	d101      	bne.n	800f9ea <HAL_GPIO_Init+0x1f2>
 800f9e6:	2304      	movs	r3, #4
 800f9e8:	e008      	b.n	800f9fc <HAL_GPIO_Init+0x204>
 800f9ea:	2307      	movs	r3, #7
 800f9ec:	e006      	b.n	800f9fc <HAL_GPIO_Init+0x204>
 800f9ee:	2303      	movs	r3, #3
 800f9f0:	e004      	b.n	800f9fc <HAL_GPIO_Init+0x204>
 800f9f2:	2302      	movs	r3, #2
 800f9f4:	e002      	b.n	800f9fc <HAL_GPIO_Init+0x204>
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	e000      	b.n	800f9fc <HAL_GPIO_Init+0x204>
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	69fa      	ldr	r2, [r7, #28]
 800f9fe:	f002 0203 	and.w	r2, r2, #3
 800fa02:	0092      	lsls	r2, r2, #2
 800fa04:	4093      	lsls	r3, r2
 800fa06:	69ba      	ldr	r2, [r7, #24]
 800fa08:	4313      	orrs	r3, r2
 800fa0a:	61bb      	str	r3, [r7, #24]
 800fa0c:	4935      	ldr	r1, [pc, #212]	; (800fae4 <HAL_GPIO_Init+0x2ec>)
 800fa0e:	69fb      	ldr	r3, [r7, #28]
 800fa10:	089b      	lsrs	r3, r3, #2
 800fa12:	3302      	adds	r3, #2
 800fa14:	69ba      	ldr	r2, [r7, #24]
 800fa16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fa1a:	4b38      	ldr	r3, [pc, #224]	; (800fafc <HAL_GPIO_Init+0x304>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	61bb      	str	r3, [r7, #24]
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	43db      	mvns	r3, r3
 800fa24:	69ba      	ldr	r2, [r7, #24]
 800fa26:	4013      	ands	r3, r2
 800fa28:	61bb      	str	r3, [r7, #24]
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d003      	beq.n	800fa3e <HAL_GPIO_Init+0x246>
 800fa36:	69ba      	ldr	r2, [r7, #24]
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	4313      	orrs	r3, r2
 800fa3c:	61bb      	str	r3, [r7, #24]
 800fa3e:	4a2f      	ldr	r2, [pc, #188]	; (800fafc <HAL_GPIO_Init+0x304>)
 800fa40:	69bb      	ldr	r3, [r7, #24]
 800fa42:	6013      	str	r3, [r2, #0]
 800fa44:	4b2d      	ldr	r3, [pc, #180]	; (800fafc <HAL_GPIO_Init+0x304>)
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	61bb      	str	r3, [r7, #24]
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	43db      	mvns	r3, r3
 800fa4e:	69ba      	ldr	r2, [r7, #24]
 800fa50:	4013      	ands	r3, r2
 800fa52:	61bb      	str	r3, [r7, #24]
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	685b      	ldr	r3, [r3, #4]
 800fa58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d003      	beq.n	800fa68 <HAL_GPIO_Init+0x270>
 800fa60:	69ba      	ldr	r2, [r7, #24]
 800fa62:	693b      	ldr	r3, [r7, #16]
 800fa64:	4313      	orrs	r3, r2
 800fa66:	61bb      	str	r3, [r7, #24]
 800fa68:	4a24      	ldr	r2, [pc, #144]	; (800fafc <HAL_GPIO_Init+0x304>)
 800fa6a:	69bb      	ldr	r3, [r7, #24]
 800fa6c:	6053      	str	r3, [r2, #4]
 800fa6e:	4b23      	ldr	r3, [pc, #140]	; (800fafc <HAL_GPIO_Init+0x304>)
 800fa70:	689b      	ldr	r3, [r3, #8]
 800fa72:	61bb      	str	r3, [r7, #24]
 800fa74:	693b      	ldr	r3, [r7, #16]
 800fa76:	43db      	mvns	r3, r3
 800fa78:	69ba      	ldr	r2, [r7, #24]
 800fa7a:	4013      	ands	r3, r2
 800fa7c:	61bb      	str	r3, [r7, #24]
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d003      	beq.n	800fa92 <HAL_GPIO_Init+0x29a>
 800fa8a:	69ba      	ldr	r2, [r7, #24]
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	61bb      	str	r3, [r7, #24]
 800fa92:	4a1a      	ldr	r2, [pc, #104]	; (800fafc <HAL_GPIO_Init+0x304>)
 800fa94:	69bb      	ldr	r3, [r7, #24]
 800fa96:	6093      	str	r3, [r2, #8]
 800fa98:	4b18      	ldr	r3, [pc, #96]	; (800fafc <HAL_GPIO_Init+0x304>)
 800fa9a:	68db      	ldr	r3, [r3, #12]
 800fa9c:	61bb      	str	r3, [r7, #24]
 800fa9e:	693b      	ldr	r3, [r7, #16]
 800faa0:	43db      	mvns	r3, r3
 800faa2:	69ba      	ldr	r2, [r7, #24]
 800faa4:	4013      	ands	r3, r2
 800faa6:	61bb      	str	r3, [r7, #24]
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	685b      	ldr	r3, [r3, #4]
 800faac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d003      	beq.n	800fabc <HAL_GPIO_Init+0x2c4>
 800fab4:	69ba      	ldr	r2, [r7, #24]
 800fab6:	693b      	ldr	r3, [r7, #16]
 800fab8:	4313      	orrs	r3, r2
 800faba:	61bb      	str	r3, [r7, #24]
 800fabc:	4a0f      	ldr	r2, [pc, #60]	; (800fafc <HAL_GPIO_Init+0x304>)
 800fabe:	69bb      	ldr	r3, [r7, #24]
 800fac0:	60d3      	str	r3, [r2, #12]
 800fac2:	69fb      	ldr	r3, [r7, #28]
 800fac4:	3301      	adds	r3, #1
 800fac6:	61fb      	str	r3, [r7, #28]
 800fac8:	69fb      	ldr	r3, [r7, #28]
 800faca:	2b0f      	cmp	r3, #15
 800facc:	f67f aea2 	bls.w	800f814 <HAL_GPIO_Init+0x1c>
 800fad0:	bf00      	nop
 800fad2:	bf00      	nop
 800fad4:	3724      	adds	r7, #36	; 0x24
 800fad6:	46bd      	mov	sp, r7
 800fad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fadc:	4770      	bx	lr
 800fade:	bf00      	nop
 800fae0:	40023800 	.word	0x40023800
 800fae4:	40013800 	.word	0x40013800
 800fae8:	40020000 	.word	0x40020000
 800faec:	40020400 	.word	0x40020400
 800faf0:	40020800 	.word	0x40020800
 800faf4:	40020c00 	.word	0x40020c00
 800faf8:	40021000 	.word	0x40021000
 800fafc:	40013c00 	.word	0x40013c00

0800fb00 <HAL_GPIO_ReadPin>:
 800fb00:	b480      	push	{r7}
 800fb02:	b085      	sub	sp, #20
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	460b      	mov	r3, r1
 800fb0a:	807b      	strh	r3, [r7, #2]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	691a      	ldr	r2, [r3, #16]
 800fb10:	887b      	ldrh	r3, [r7, #2]
 800fb12:	4013      	ands	r3, r2
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d002      	beq.n	800fb1e <HAL_GPIO_ReadPin+0x1e>
 800fb18:	2301      	movs	r3, #1
 800fb1a:	73fb      	strb	r3, [r7, #15]
 800fb1c:	e001      	b.n	800fb22 <HAL_GPIO_ReadPin+0x22>
 800fb1e:	2300      	movs	r3, #0
 800fb20:	73fb      	strb	r3, [r7, #15]
 800fb22:	7bfb      	ldrb	r3, [r7, #15]
 800fb24:	4618      	mov	r0, r3
 800fb26:	3714      	adds	r7, #20
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr

0800fb30 <HAL_GPIO_WritePin>:
 800fb30:	b480      	push	{r7}
 800fb32:	b083      	sub	sp, #12
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	460b      	mov	r3, r1
 800fb3a:	807b      	strh	r3, [r7, #2]
 800fb3c:	4613      	mov	r3, r2
 800fb3e:	707b      	strb	r3, [r7, #1]
 800fb40:	787b      	ldrb	r3, [r7, #1]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d003      	beq.n	800fb4e <HAL_GPIO_WritePin+0x1e>
 800fb46:	887a      	ldrh	r2, [r7, #2]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	619a      	str	r2, [r3, #24]
 800fb4c:	e003      	b.n	800fb56 <HAL_GPIO_WritePin+0x26>
 800fb4e:	887b      	ldrh	r3, [r7, #2]
 800fb50:	041a      	lsls	r2, r3, #16
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	619a      	str	r2, [r3, #24]
 800fb56:	bf00      	nop
 800fb58:	370c      	adds	r7, #12
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb60:	4770      	bx	lr
	...

0800fb64 <HAL_GPIO_EXTI_IRQHandler>:
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	80fb      	strh	r3, [r7, #6]
 800fb6e:	4b08      	ldr	r3, [pc, #32]	; (800fb90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800fb70:	695a      	ldr	r2, [r3, #20]
 800fb72:	88fb      	ldrh	r3, [r7, #6]
 800fb74:	4013      	ands	r3, r2
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d006      	beq.n	800fb88 <HAL_GPIO_EXTI_IRQHandler+0x24>
 800fb7a:	4a05      	ldr	r2, [pc, #20]	; (800fb90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800fb7c:	88fb      	ldrh	r3, [r7, #6]
 800fb7e:	6153      	str	r3, [r2, #20]
 800fb80:	88fb      	ldrh	r3, [r7, #6]
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7fc fdc8 	bl	800c718 <HAL_GPIO_EXTI_Callback>
 800fb88:	bf00      	nop
 800fb8a:	3708      	adds	r7, #8
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}
 800fb90:	40013c00 	.word	0x40013c00

0800fb94 <HAL_PCD_Init>:
 800fb94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb96:	b08f      	sub	sp, #60	; 0x3c
 800fb98:	af0a      	add	r7, sp, #40	; 0x28
 800fb9a:	6078      	str	r0, [r7, #4]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d101      	bne.n	800fba6 <HAL_PCD_Init+0x12>
 800fba2:	2301      	movs	r3, #1
 800fba4:	e10f      	b.n	800fdc6 <HAL_PCD_Init+0x232>
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	60bb      	str	r3, [r7, #8]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d106      	bne.n	800fbc6 <HAL_PCD_Init+0x32>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f00a fe3f 	bl	801a844 <HAL_PCD_MspInit>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2203      	movs	r2, #3
 800fbca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d102      	bne.n	800fbe0 <HAL_PCD_Init+0x4c>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	611a      	str	r2, [r3, #16]
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f003 fd98 	bl	801371a <USB_DisableGlobalInt>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	603b      	str	r3, [r7, #0]
 800fbf0:	687e      	ldr	r6, [r7, #4]
 800fbf2:	466d      	mov	r5, sp
 800fbf4:	f106 0410 	add.w	r4, r6, #16
 800fbf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fbfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fbfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fbfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fc00:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fc04:	e885 0003 	stmia.w	r5, {r0, r1}
 800fc08:	1d33      	adds	r3, r6, #4
 800fc0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fc0c:	6838      	ldr	r0, [r7, #0]
 800fc0e:	f003 fc6f 	bl	80134f0 <USB_CoreInit>
 800fc12:	4603      	mov	r3, r0
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d005      	beq.n	800fc24 <HAL_PCD_Init+0x90>
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2202      	movs	r2, #2
 800fc1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
 800fc20:	2301      	movs	r3, #1
 800fc22:	e0d0      	b.n	800fdc6 <HAL_PCD_Init+0x232>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	2100      	movs	r1, #0
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f003 fd86 	bl	801373c <USB_SetCurrentMode>
 800fc30:	2300      	movs	r3, #0
 800fc32:	73fb      	strb	r3, [r7, #15]
 800fc34:	e04a      	b.n	800fccc <HAL_PCD_Init+0x138>
 800fc36:	7bfa      	ldrb	r2, [r7, #15]
 800fc38:	6879      	ldr	r1, [r7, #4]
 800fc3a:	4613      	mov	r3, r2
 800fc3c:	00db      	lsls	r3, r3, #3
 800fc3e:	1a9b      	subs	r3, r3, r2
 800fc40:	009b      	lsls	r3, r3, #2
 800fc42:	440b      	add	r3, r1
 800fc44:	333d      	adds	r3, #61	; 0x3d
 800fc46:	2201      	movs	r2, #1
 800fc48:	701a      	strb	r2, [r3, #0]
 800fc4a:	7bfa      	ldrb	r2, [r7, #15]
 800fc4c:	6879      	ldr	r1, [r7, #4]
 800fc4e:	4613      	mov	r3, r2
 800fc50:	00db      	lsls	r3, r3, #3
 800fc52:	1a9b      	subs	r3, r3, r2
 800fc54:	009b      	lsls	r3, r3, #2
 800fc56:	440b      	add	r3, r1
 800fc58:	333c      	adds	r3, #60	; 0x3c
 800fc5a:	7bfa      	ldrb	r2, [r7, #15]
 800fc5c:	701a      	strb	r2, [r3, #0]
 800fc5e:	7bfa      	ldrb	r2, [r7, #15]
 800fc60:	7bfb      	ldrb	r3, [r7, #15]
 800fc62:	b298      	uxth	r0, r3
 800fc64:	6879      	ldr	r1, [r7, #4]
 800fc66:	4613      	mov	r3, r2
 800fc68:	00db      	lsls	r3, r3, #3
 800fc6a:	1a9b      	subs	r3, r3, r2
 800fc6c:	009b      	lsls	r3, r3, #2
 800fc6e:	440b      	add	r3, r1
 800fc70:	3342      	adds	r3, #66	; 0x42
 800fc72:	4602      	mov	r2, r0
 800fc74:	801a      	strh	r2, [r3, #0]
 800fc76:	7bfa      	ldrb	r2, [r7, #15]
 800fc78:	6879      	ldr	r1, [r7, #4]
 800fc7a:	4613      	mov	r3, r2
 800fc7c:	00db      	lsls	r3, r3, #3
 800fc7e:	1a9b      	subs	r3, r3, r2
 800fc80:	009b      	lsls	r3, r3, #2
 800fc82:	440b      	add	r3, r1
 800fc84:	333f      	adds	r3, #63	; 0x3f
 800fc86:	2200      	movs	r2, #0
 800fc88:	701a      	strb	r2, [r3, #0]
 800fc8a:	7bfa      	ldrb	r2, [r7, #15]
 800fc8c:	6879      	ldr	r1, [r7, #4]
 800fc8e:	4613      	mov	r3, r2
 800fc90:	00db      	lsls	r3, r3, #3
 800fc92:	1a9b      	subs	r3, r3, r2
 800fc94:	009b      	lsls	r3, r3, #2
 800fc96:	440b      	add	r3, r1
 800fc98:	3344      	adds	r3, #68	; 0x44
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	601a      	str	r2, [r3, #0]
 800fc9e:	7bfa      	ldrb	r2, [r7, #15]
 800fca0:	6879      	ldr	r1, [r7, #4]
 800fca2:	4613      	mov	r3, r2
 800fca4:	00db      	lsls	r3, r3, #3
 800fca6:	1a9b      	subs	r3, r3, r2
 800fca8:	009b      	lsls	r3, r3, #2
 800fcaa:	440b      	add	r3, r1
 800fcac:	3348      	adds	r3, #72	; 0x48
 800fcae:	2200      	movs	r2, #0
 800fcb0:	601a      	str	r2, [r3, #0]
 800fcb2:	7bfa      	ldrb	r2, [r7, #15]
 800fcb4:	6879      	ldr	r1, [r7, #4]
 800fcb6:	4613      	mov	r3, r2
 800fcb8:	00db      	lsls	r3, r3, #3
 800fcba:	1a9b      	subs	r3, r3, r2
 800fcbc:	009b      	lsls	r3, r3, #2
 800fcbe:	440b      	add	r3, r1
 800fcc0:	3350      	adds	r3, #80	; 0x50
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	601a      	str	r2, [r3, #0]
 800fcc6:	7bfb      	ldrb	r3, [r7, #15]
 800fcc8:	3301      	adds	r3, #1
 800fcca:	73fb      	strb	r3, [r7, #15]
 800fccc:	7bfa      	ldrb	r2, [r7, #15]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d3af      	bcc.n	800fc36 <HAL_PCD_Init+0xa2>
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	73fb      	strb	r3, [r7, #15]
 800fcda:	e044      	b.n	800fd66 <HAL_PCD_Init+0x1d2>
 800fcdc:	7bfa      	ldrb	r2, [r7, #15]
 800fcde:	6879      	ldr	r1, [r7, #4]
 800fce0:	4613      	mov	r3, r2
 800fce2:	00db      	lsls	r3, r3, #3
 800fce4:	1a9b      	subs	r3, r3, r2
 800fce6:	009b      	lsls	r3, r3, #2
 800fce8:	440b      	add	r3, r1
 800fcea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800fcee:	2200      	movs	r2, #0
 800fcf0:	701a      	strb	r2, [r3, #0]
 800fcf2:	7bfa      	ldrb	r2, [r7, #15]
 800fcf4:	6879      	ldr	r1, [r7, #4]
 800fcf6:	4613      	mov	r3, r2
 800fcf8:	00db      	lsls	r3, r3, #3
 800fcfa:	1a9b      	subs	r3, r3, r2
 800fcfc:	009b      	lsls	r3, r3, #2
 800fcfe:	440b      	add	r3, r1
 800fd00:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800fd04:	7bfa      	ldrb	r2, [r7, #15]
 800fd06:	701a      	strb	r2, [r3, #0]
 800fd08:	7bfa      	ldrb	r2, [r7, #15]
 800fd0a:	6879      	ldr	r1, [r7, #4]
 800fd0c:	4613      	mov	r3, r2
 800fd0e:	00db      	lsls	r3, r3, #3
 800fd10:	1a9b      	subs	r3, r3, r2
 800fd12:	009b      	lsls	r3, r3, #2
 800fd14:	440b      	add	r3, r1
 800fd16:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	701a      	strb	r2, [r3, #0]
 800fd1e:	7bfa      	ldrb	r2, [r7, #15]
 800fd20:	6879      	ldr	r1, [r7, #4]
 800fd22:	4613      	mov	r3, r2
 800fd24:	00db      	lsls	r3, r3, #3
 800fd26:	1a9b      	subs	r3, r3, r2
 800fd28:	009b      	lsls	r3, r3, #2
 800fd2a:	440b      	add	r3, r1
 800fd2c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800fd30:	2200      	movs	r2, #0
 800fd32:	601a      	str	r2, [r3, #0]
 800fd34:	7bfa      	ldrb	r2, [r7, #15]
 800fd36:	6879      	ldr	r1, [r7, #4]
 800fd38:	4613      	mov	r3, r2
 800fd3a:	00db      	lsls	r3, r3, #3
 800fd3c:	1a9b      	subs	r3, r3, r2
 800fd3e:	009b      	lsls	r3, r3, #2
 800fd40:	440b      	add	r3, r1
 800fd42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fd46:	2200      	movs	r2, #0
 800fd48:	601a      	str	r2, [r3, #0]
 800fd4a:	7bfa      	ldrb	r2, [r7, #15]
 800fd4c:	6879      	ldr	r1, [r7, #4]
 800fd4e:	4613      	mov	r3, r2
 800fd50:	00db      	lsls	r3, r3, #3
 800fd52:	1a9b      	subs	r3, r3, r2
 800fd54:	009b      	lsls	r3, r3, #2
 800fd56:	440b      	add	r3, r1
 800fd58:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	601a      	str	r2, [r3, #0]
 800fd60:	7bfb      	ldrb	r3, [r7, #15]
 800fd62:	3301      	adds	r3, #1
 800fd64:	73fb      	strb	r3, [r7, #15]
 800fd66:	7bfa      	ldrb	r2, [r7, #15]
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	685b      	ldr	r3, [r3, #4]
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d3b5      	bcc.n	800fcdc <HAL_PCD_Init+0x148>
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	603b      	str	r3, [r7, #0]
 800fd76:	687e      	ldr	r6, [r7, #4]
 800fd78:	466d      	mov	r5, sp
 800fd7a:	f106 0410 	add.w	r4, r6, #16
 800fd7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fd82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fd86:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fd8a:	e885 0003 	stmia.w	r5, {r0, r1}
 800fd8e:	1d33      	adds	r3, r6, #4
 800fd90:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fd92:	6838      	ldr	r0, [r7, #0]
 800fd94:	f003 fd1e 	bl	80137d4 <USB_DevInit>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d005      	beq.n	800fdaa <HAL_PCD_Init+0x216>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2202      	movs	r2, #2
 800fda2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
 800fda6:	2301      	movs	r3, #1
 800fda8:	e00d      	b.n	800fdc6 <HAL_PCD_Init+0x232>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2200      	movs	r2, #0
 800fdae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2201      	movs	r2, #1
 800fdb6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f004 fd9a 	bl	80148f8 <USB_DevDisconnect>
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3714      	adds	r7, #20
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fdce <HAL_PCD_Start>:
 800fdce:	b580      	push	{r7, lr}
 800fdd0:	b084      	sub	sp, #16
 800fdd2:	af00      	add	r7, sp, #0
 800fdd4:	6078      	str	r0, [r7, #4]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	60fb      	str	r3, [r7, #12]
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800fde2:	2b01      	cmp	r3, #1
 800fde4:	d101      	bne.n	800fdea <HAL_PCD_Start+0x1c>
 800fde6:	2302      	movs	r3, #2
 800fde8:	e020      	b.n	800fe2c <HAL_PCD_Start+0x5e>
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2201      	movs	r2, #1
 800fdee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdf6:	2b01      	cmp	r3, #1
 800fdf8:	d109      	bne.n	800fe0e <HAL_PCD_Start+0x40>
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	699b      	ldr	r3, [r3, #24]
 800fdfe:	2b01      	cmp	r3, #1
 800fe00:	d005      	beq.n	800fe0e <HAL_PCD_Start+0x40>
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	639a      	str	r2, [r3, #56]	; 0x38
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	4618      	mov	r0, r3
 800fe14:	f003 fc70 	bl	80136f8 <USB_EnableGlobalInt>
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f004 fd4a 	bl	80148b6 <USB_DevConnect>
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2200      	movs	r2, #0
 800fe26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3710      	adds	r7, #16
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <HAL_PCD_IRQHandler>:
 800fe34:	b590      	push	{r4, r7, lr}
 800fe36:	b08d      	sub	sp, #52	; 0x34
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	623b      	str	r3, [r7, #32]
 800fe42:	6a3b      	ldr	r3, [r7, #32]
 800fe44:	61fb      	str	r3, [r7, #28]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f004 fe08 	bl	8014a60 <USB_GetMode>
 800fe50:	4603      	mov	r3, r0
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	f040 839d 	bne.w	8010592 <HAL_PCD_IRQHandler+0x75e>
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f004 fd6c 	bl	801493a <USB_ReadInterrupts>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	f000 8393 	beq.w	8010590 <HAL_PCD_IRQHandler+0x75c>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f004 fd63 	bl	801493a <USB_ReadInterrupts>
 800fe74:	4603      	mov	r3, r0
 800fe76:	f003 0302 	and.w	r3, r3, #2
 800fe7a:	2b02      	cmp	r3, #2
 800fe7c:	d107      	bne.n	800fe8e <HAL_PCD_IRQHandler+0x5a>
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	695a      	ldr	r2, [r3, #20]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	f002 0202 	and.w	r2, r2, #2
 800fe8c:	615a      	str	r2, [r3, #20]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	4618      	mov	r0, r3
 800fe94:	f004 fd51 	bl	801493a <USB_ReadInterrupts>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	f003 0310 	and.w	r3, r3, #16
 800fe9e:	2b10      	cmp	r3, #16
 800fea0:	d161      	bne.n	800ff66 <HAL_PCD_IRQHandler+0x132>
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	699a      	ldr	r2, [r3, #24]
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	f022 0210 	bic.w	r2, r2, #16
 800feb0:	619a      	str	r2, [r3, #24]
 800feb2:	6a3b      	ldr	r3, [r7, #32]
 800feb4:	6a1b      	ldr	r3, [r3, #32]
 800feb6:	61bb      	str	r3, [r7, #24]
 800feb8:	69bb      	ldr	r3, [r7, #24]
 800feba:	f003 020f 	and.w	r2, r3, #15
 800febe:	4613      	mov	r3, r2
 800fec0:	00db      	lsls	r3, r3, #3
 800fec2:	1a9b      	subs	r3, r3, r2
 800fec4:	009b      	lsls	r3, r3, #2
 800fec6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800feca:	687a      	ldr	r2, [r7, #4]
 800fecc:	4413      	add	r3, r2
 800fece:	3304      	adds	r3, #4
 800fed0:	617b      	str	r3, [r7, #20]
 800fed2:	69bb      	ldr	r3, [r7, #24]
 800fed4:	0c5b      	lsrs	r3, r3, #17
 800fed6:	f003 030f 	and.w	r3, r3, #15
 800feda:	2b02      	cmp	r3, #2
 800fedc:	d124      	bne.n	800ff28 <HAL_PCD_IRQHandler+0xf4>
 800fede:	69ba      	ldr	r2, [r7, #24]
 800fee0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800fee4:	4013      	ands	r3, r2
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d035      	beq.n	800ff56 <HAL_PCD_IRQHandler+0x122>
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	68d9      	ldr	r1, [r3, #12]
 800feee:	69bb      	ldr	r3, [r7, #24]
 800fef0:	091b      	lsrs	r3, r3, #4
 800fef2:	b29b      	uxth	r3, r3
 800fef4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fef8:	b29b      	uxth	r3, r3
 800fefa:	461a      	mov	r2, r3
 800fefc:	6a38      	ldr	r0, [r7, #32]
 800fefe:	f004 fb88 	bl	8014612 <USB_ReadPacket>
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	68da      	ldr	r2, [r3, #12]
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	091b      	lsrs	r3, r3, #4
 800ff0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ff0e:	441a      	add	r2, r3
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	60da      	str	r2, [r3, #12]
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	699a      	ldr	r2, [r3, #24]
 800ff18:	69bb      	ldr	r3, [r7, #24]
 800ff1a:	091b      	lsrs	r3, r3, #4
 800ff1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ff20:	441a      	add	r2, r3
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	619a      	str	r2, [r3, #24]
 800ff26:	e016      	b.n	800ff56 <HAL_PCD_IRQHandler+0x122>
 800ff28:	69bb      	ldr	r3, [r7, #24]
 800ff2a:	0c5b      	lsrs	r3, r3, #17
 800ff2c:	f003 030f 	and.w	r3, r3, #15
 800ff30:	2b06      	cmp	r3, #6
 800ff32:	d110      	bne.n	800ff56 <HAL_PCD_IRQHandler+0x122>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ff3a:	2208      	movs	r2, #8
 800ff3c:	4619      	mov	r1, r3
 800ff3e:	6a38      	ldr	r0, [r7, #32]
 800ff40:	f004 fb67 	bl	8014612 <USB_ReadPacket>
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	699a      	ldr	r2, [r3, #24]
 800ff48:	69bb      	ldr	r3, [r7, #24]
 800ff4a:	091b      	lsrs	r3, r3, #4
 800ff4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ff50:	441a      	add	r2, r3
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	619a      	str	r2, [r3, #24]
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	699a      	ldr	r2, [r3, #24]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	f042 0210 	orr.w	r2, r2, #16
 800ff64:	619a      	str	r2, [r3, #24]
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f004 fce5 	bl	801493a <USB_ReadInterrupts>
 800ff70:	4603      	mov	r3, r0
 800ff72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ff76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ff7a:	d16e      	bne.n	801005a <HAL_PCD_IRQHandler+0x226>
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	627b      	str	r3, [r7, #36]	; 0x24
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	4618      	mov	r0, r3
 800ff86:	f004 fceb 	bl	8014960 <USB_ReadDevAllOutEpInterrupt>
 800ff8a:	62b8      	str	r0, [r7, #40]	; 0x28
 800ff8c:	e062      	b.n	8010054 <HAL_PCD_IRQHandler+0x220>
 800ff8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff90:	f003 0301 	and.w	r3, r3, #1
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d057      	beq.n	8010048 <HAL_PCD_IRQHandler+0x214>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff9e:	b2d2      	uxtb	r2, r2
 800ffa0:	4611      	mov	r1, r2
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f004 fd10 	bl	80149c8 <USB_ReadDevOutEPInterrupt>
 800ffa8:	6138      	str	r0, [r7, #16]
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	f003 0301 	and.w	r3, r3, #1
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d00c      	beq.n	800ffce <HAL_PCD_IRQHandler+0x19a>
 800ffb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb6:	015a      	lsls	r2, r3, #5
 800ffb8:	69fb      	ldr	r3, [r7, #28]
 800ffba:	4413      	add	r3, r2
 800ffbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	6093      	str	r3, [r2, #8]
 800ffc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f000 fdb1 	bl	8010b30 <PCD_EP_OutXfrComplete_int>
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	f003 0308 	and.w	r3, r3, #8
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d00c      	beq.n	800fff2 <HAL_PCD_IRQHandler+0x1be>
 800ffd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffda:	015a      	lsls	r2, r3, #5
 800ffdc:	69fb      	ldr	r3, [r7, #28]
 800ffde:	4413      	add	r3, r2
 800ffe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	2308      	movs	r3, #8
 800ffe8:	6093      	str	r3, [r2, #8]
 800ffea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f000 feab 	bl	8010d48 <PCD_EP_OutSetupPacket_int>
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	f003 0310 	and.w	r3, r3, #16
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d008      	beq.n	801000e <HAL_PCD_IRQHandler+0x1da>
 800fffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffe:	015a      	lsls	r2, r3, #5
 8010000:	69fb      	ldr	r3, [r7, #28]
 8010002:	4413      	add	r3, r2
 8010004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010008:	461a      	mov	r2, r3
 801000a:	2310      	movs	r3, #16
 801000c:	6093      	str	r3, [r2, #8]
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	f003 0320 	and.w	r3, r3, #32
 8010014:	2b00      	cmp	r3, #0
 8010016:	d008      	beq.n	801002a <HAL_PCD_IRQHandler+0x1f6>
 8010018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801001a:	015a      	lsls	r2, r3, #5
 801001c:	69fb      	ldr	r3, [r7, #28]
 801001e:	4413      	add	r3, r2
 8010020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010024:	461a      	mov	r2, r3
 8010026:	2320      	movs	r3, #32
 8010028:	6093      	str	r3, [r2, #8]
 801002a:	693b      	ldr	r3, [r7, #16]
 801002c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010030:	2b00      	cmp	r3, #0
 8010032:	d009      	beq.n	8010048 <HAL_PCD_IRQHandler+0x214>
 8010034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010036:	015a      	lsls	r2, r3, #5
 8010038:	69fb      	ldr	r3, [r7, #28]
 801003a:	4413      	add	r3, r2
 801003c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010040:	461a      	mov	r2, r3
 8010042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010046:	6093      	str	r3, [r2, #8]
 8010048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801004a:	3301      	adds	r3, #1
 801004c:	627b      	str	r3, [r7, #36]	; 0x24
 801004e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010050:	085b      	lsrs	r3, r3, #1
 8010052:	62bb      	str	r3, [r7, #40]	; 0x28
 8010054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010056:	2b00      	cmp	r3, #0
 8010058:	d199      	bne.n	800ff8e <HAL_PCD_IRQHandler+0x15a>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	4618      	mov	r0, r3
 8010060:	f004 fc6b 	bl	801493a <USB_ReadInterrupts>
 8010064:	4603      	mov	r3, r0
 8010066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801006a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801006e:	f040 80c0 	bne.w	80101f2 <HAL_PCD_IRQHandler+0x3be>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	4618      	mov	r0, r3
 8010078:	f004 fc8c 	bl	8014994 <USB_ReadDevAllInEpInterrupt>
 801007c:	62b8      	str	r0, [r7, #40]	; 0x28
 801007e:	2300      	movs	r3, #0
 8010080:	627b      	str	r3, [r7, #36]	; 0x24
 8010082:	e0b2      	b.n	80101ea <HAL_PCD_IRQHandler+0x3b6>
 8010084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010086:	f003 0301 	and.w	r3, r3, #1
 801008a:	2b00      	cmp	r3, #0
 801008c:	f000 80a7 	beq.w	80101de <HAL_PCD_IRQHandler+0x3aa>
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010096:	b2d2      	uxtb	r2, r2
 8010098:	4611      	mov	r1, r2
 801009a:	4618      	mov	r0, r3
 801009c:	f004 fcb2 	bl	8014a04 <USB_ReadDevInEPInterrupt>
 80100a0:	6138      	str	r0, [r7, #16]
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	f003 0301 	and.w	r3, r3, #1
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d057      	beq.n	801015c <HAL_PCD_IRQHandler+0x328>
 80100ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ae:	f003 030f 	and.w	r3, r3, #15
 80100b2:	2201      	movs	r2, #1
 80100b4:	fa02 f303 	lsl.w	r3, r2, r3
 80100b8:	60fb      	str	r3, [r7, #12]
 80100ba:	69fb      	ldr	r3, [r7, #28]
 80100bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	43db      	mvns	r3, r3
 80100c6:	69f9      	ldr	r1, [r7, #28]
 80100c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100cc:	4013      	ands	r3, r2
 80100ce:	634b      	str	r3, [r1, #52]	; 0x34
 80100d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d2:	015a      	lsls	r2, r3, #5
 80100d4:	69fb      	ldr	r3, [r7, #28]
 80100d6:	4413      	add	r3, r2
 80100d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100dc:	461a      	mov	r2, r3
 80100de:	2301      	movs	r3, #1
 80100e0:	6093      	str	r3, [r2, #8]
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	691b      	ldr	r3, [r3, #16]
 80100e6:	2b01      	cmp	r3, #1
 80100e8:	d132      	bne.n	8010150 <HAL_PCD_IRQHandler+0x31c>
 80100ea:	6879      	ldr	r1, [r7, #4]
 80100ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100ee:	4613      	mov	r3, r2
 80100f0:	00db      	lsls	r3, r3, #3
 80100f2:	1a9b      	subs	r3, r3, r2
 80100f4:	009b      	lsls	r3, r3, #2
 80100f6:	440b      	add	r3, r1
 80100f8:	3348      	adds	r3, #72	; 0x48
 80100fa:	6819      	ldr	r1, [r3, #0]
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010100:	4613      	mov	r3, r2
 8010102:	00db      	lsls	r3, r3, #3
 8010104:	1a9b      	subs	r3, r3, r2
 8010106:	009b      	lsls	r3, r3, #2
 8010108:	4403      	add	r3, r0
 801010a:	3344      	adds	r3, #68	; 0x44
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	4419      	add	r1, r3
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010114:	4613      	mov	r3, r2
 8010116:	00db      	lsls	r3, r3, #3
 8010118:	1a9b      	subs	r3, r3, r2
 801011a:	009b      	lsls	r3, r3, #2
 801011c:	4403      	add	r3, r0
 801011e:	3348      	adds	r3, #72	; 0x48
 8010120:	6019      	str	r1, [r3, #0]
 8010122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010124:	2b00      	cmp	r3, #0
 8010126:	d113      	bne.n	8010150 <HAL_PCD_IRQHandler+0x31c>
 8010128:	6879      	ldr	r1, [r7, #4]
 801012a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801012c:	4613      	mov	r3, r2
 801012e:	00db      	lsls	r3, r3, #3
 8010130:	1a9b      	subs	r3, r3, r2
 8010132:	009b      	lsls	r3, r3, #2
 8010134:	440b      	add	r3, r1
 8010136:	3350      	adds	r3, #80	; 0x50
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d108      	bne.n	8010150 <HAL_PCD_IRQHandler+0x31c>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6818      	ldr	r0, [r3, #0]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010148:	461a      	mov	r2, r3
 801014a:	2101      	movs	r1, #1
 801014c:	f004 fcba 	bl	8014ac4 <USB_EP0_OutStart>
 8010150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010152:	b2db      	uxtb	r3, r3
 8010154:	4619      	mov	r1, r3
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f00a fbf5 	bl	801a946 <HAL_PCD_DataInStageCallback>
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	f003 0308 	and.w	r3, r3, #8
 8010162:	2b00      	cmp	r3, #0
 8010164:	d008      	beq.n	8010178 <HAL_PCD_IRQHandler+0x344>
 8010166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010168:	015a      	lsls	r2, r3, #5
 801016a:	69fb      	ldr	r3, [r7, #28]
 801016c:	4413      	add	r3, r2
 801016e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010172:	461a      	mov	r2, r3
 8010174:	2308      	movs	r3, #8
 8010176:	6093      	str	r3, [r2, #8]
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	f003 0310 	and.w	r3, r3, #16
 801017e:	2b00      	cmp	r3, #0
 8010180:	d008      	beq.n	8010194 <HAL_PCD_IRQHandler+0x360>
 8010182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010184:	015a      	lsls	r2, r3, #5
 8010186:	69fb      	ldr	r3, [r7, #28]
 8010188:	4413      	add	r3, r2
 801018a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801018e:	461a      	mov	r2, r3
 8010190:	2310      	movs	r3, #16
 8010192:	6093      	str	r3, [r2, #8]
 8010194:	693b      	ldr	r3, [r7, #16]
 8010196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801019a:	2b00      	cmp	r3, #0
 801019c:	d008      	beq.n	80101b0 <HAL_PCD_IRQHandler+0x37c>
 801019e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a0:	015a      	lsls	r2, r3, #5
 80101a2:	69fb      	ldr	r3, [r7, #28]
 80101a4:	4413      	add	r3, r2
 80101a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101aa:	461a      	mov	r2, r3
 80101ac:	2340      	movs	r3, #64	; 0x40
 80101ae:	6093      	str	r3, [r2, #8]
 80101b0:	693b      	ldr	r3, [r7, #16]
 80101b2:	f003 0302 	and.w	r3, r3, #2
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d008      	beq.n	80101cc <HAL_PCD_IRQHandler+0x398>
 80101ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101bc:	015a      	lsls	r2, r3, #5
 80101be:	69fb      	ldr	r3, [r7, #28]
 80101c0:	4413      	add	r3, r2
 80101c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101c6:	461a      	mov	r2, r3
 80101c8:	2302      	movs	r3, #2
 80101ca:	6093      	str	r3, [r2, #8]
 80101cc:	693b      	ldr	r3, [r7, #16]
 80101ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d003      	beq.n	80101de <HAL_PCD_IRQHandler+0x3aa>
 80101d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f000 fc1b 	bl	8010a14 <PCD_WriteEmptyTxFifo>
 80101de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e0:	3301      	adds	r3, #1
 80101e2:	627b      	str	r3, [r7, #36]	; 0x24
 80101e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101e6:	085b      	lsrs	r3, r3, #1
 80101e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80101ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	f47f af49 	bne.w	8010084 <HAL_PCD_IRQHandler+0x250>
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	4618      	mov	r0, r3
 80101f8:	f004 fb9f 	bl	801493a <USB_ReadInterrupts>
 80101fc:	4603      	mov	r3, r0
 80101fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010206:	d122      	bne.n	801024e <HAL_PCD_IRQHandler+0x41a>
 8010208:	69fb      	ldr	r3, [r7, #28]
 801020a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801020e:	685b      	ldr	r3, [r3, #4]
 8010210:	69fa      	ldr	r2, [r7, #28]
 8010212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010216:	f023 0301 	bic.w	r3, r3, #1
 801021a:	6053      	str	r3, [r2, #4]
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8010222:	2b01      	cmp	r3, #1
 8010224:	d108      	bne.n	8010238 <HAL_PCD_IRQHandler+0x404>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2200      	movs	r2, #0
 801022a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
 801022e:	2100      	movs	r1, #0
 8010230:	6878      	ldr	r0, [r7, #4]
 8010232:	f000 fe27 	bl	8010e84 <HAL_PCDEx_LPM_Callback>
 8010236:	e002      	b.n	801023e <HAL_PCD_IRQHandler+0x40a>
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f00a fbf1 	bl	801aa20 <HAL_PCD_ResumeCallback>
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	695a      	ldr	r2, [r3, #20]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801024c:	615a      	str	r2, [r3, #20]
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	4618      	mov	r0, r3
 8010254:	f004 fb71 	bl	801493a <USB_ReadInterrupts>
 8010258:	4603      	mov	r3, r0
 801025a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801025e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010262:	d112      	bne.n	801028a <HAL_PCD_IRQHandler+0x456>
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801026a:	689b      	ldr	r3, [r3, #8]
 801026c:	f003 0301 	and.w	r3, r3, #1
 8010270:	2b01      	cmp	r3, #1
 8010272:	d102      	bne.n	801027a <HAL_PCD_IRQHandler+0x446>
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f00a fbad 	bl	801a9d4 <HAL_PCD_SuspendCallback>
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	695a      	ldr	r2, [r3, #20]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8010288:	615a      	str	r2, [r3, #20]
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	4618      	mov	r0, r3
 8010290:	f004 fb53 	bl	801493a <USB_ReadInterrupts>
 8010294:	4603      	mov	r3, r0
 8010296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801029a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801029e:	f040 80c7 	bne.w	8010430 <HAL_PCD_IRQHandler+0x5fc>
 80102a2:	69fb      	ldr	r3, [r7, #28]
 80102a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102a8:	685b      	ldr	r3, [r3, #4]
 80102aa:	69fa      	ldr	r2, [r7, #28]
 80102ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80102b0:	f023 0301 	bic.w	r3, r3, #1
 80102b4:	6053      	str	r3, [r2, #4]
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	2110      	movs	r1, #16
 80102bc:	4618      	mov	r0, r3
 80102be:	f003 fbed 	bl	8013a9c <USB_FlushTxFifo>
 80102c2:	2300      	movs	r3, #0
 80102c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102c6:	e056      	b.n	8010376 <HAL_PCD_IRQHandler+0x542>
 80102c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ca:	015a      	lsls	r2, r3, #5
 80102cc:	69fb      	ldr	r3, [r7, #28]
 80102ce:	4413      	add	r3, r2
 80102d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102d4:	461a      	mov	r2, r3
 80102d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80102da:	6093      	str	r3, [r2, #8]
 80102dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102de:	015a      	lsls	r2, r3, #5
 80102e0:	69fb      	ldr	r3, [r7, #28]
 80102e2:	4413      	add	r3, r2
 80102e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102ec:	0151      	lsls	r1, r2, #5
 80102ee:	69fa      	ldr	r2, [r7, #28]
 80102f0:	440a      	add	r2, r1
 80102f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80102fa:	6013      	str	r3, [r2, #0]
 80102fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fe:	015a      	lsls	r2, r3, #5
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	4413      	add	r3, r2
 8010304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801030c:	0151      	lsls	r1, r2, #5
 801030e:	69fa      	ldr	r2, [r7, #28]
 8010310:	440a      	add	r2, r1
 8010312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010316:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801031a:	6013      	str	r3, [r2, #0]
 801031c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031e:	015a      	lsls	r2, r3, #5
 8010320:	69fb      	ldr	r3, [r7, #28]
 8010322:	4413      	add	r3, r2
 8010324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010328:	461a      	mov	r2, r3
 801032a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801032e:	6093      	str	r3, [r2, #8]
 8010330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010332:	015a      	lsls	r2, r3, #5
 8010334:	69fb      	ldr	r3, [r7, #28]
 8010336:	4413      	add	r3, r2
 8010338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010340:	0151      	lsls	r1, r2, #5
 8010342:	69fa      	ldr	r2, [r7, #28]
 8010344:	440a      	add	r2, r1
 8010346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801034a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801034e:	6013      	str	r3, [r2, #0]
 8010350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010352:	015a      	lsls	r2, r3, #5
 8010354:	69fb      	ldr	r3, [r7, #28]
 8010356:	4413      	add	r3, r2
 8010358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010360:	0151      	lsls	r1, r2, #5
 8010362:	69fa      	ldr	r2, [r7, #28]
 8010364:	440a      	add	r2, r1
 8010366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801036a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801036e:	6013      	str	r3, [r2, #0]
 8010370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010372:	3301      	adds	r3, #1
 8010374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	685b      	ldr	r3, [r3, #4]
 801037a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801037c:	429a      	cmp	r2, r3
 801037e:	d3a3      	bcc.n	80102c8 <HAL_PCD_IRQHandler+0x494>
 8010380:	69fb      	ldr	r3, [r7, #28]
 8010382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010386:	69db      	ldr	r3, [r3, #28]
 8010388:	69fa      	ldr	r2, [r7, #28]
 801038a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801038e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8010392:	61d3      	str	r3, [r2, #28]
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010398:	2b00      	cmp	r3, #0
 801039a:	d016      	beq.n	80103ca <HAL_PCD_IRQHandler+0x596>
 801039c:	69fb      	ldr	r3, [r7, #28]
 801039e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103a6:	69fa      	ldr	r2, [r7, #28]
 80103a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80103ac:	f043 030b 	orr.w	r3, r3, #11
 80103b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80103b4:	69fb      	ldr	r3, [r7, #28]
 80103b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103bc:	69fa      	ldr	r2, [r7, #28]
 80103be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80103c2:	f043 030b 	orr.w	r3, r3, #11
 80103c6:	6453      	str	r3, [r2, #68]	; 0x44
 80103c8:	e015      	b.n	80103f6 <HAL_PCD_IRQHandler+0x5c2>
 80103ca:	69fb      	ldr	r3, [r7, #28]
 80103cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103d0:	695b      	ldr	r3, [r3, #20]
 80103d2:	69fa      	ldr	r2, [r7, #28]
 80103d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80103d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80103dc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80103e0:	6153      	str	r3, [r2, #20]
 80103e2:	69fb      	ldr	r3, [r7, #28]
 80103e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103e8:	691b      	ldr	r3, [r3, #16]
 80103ea:	69fa      	ldr	r2, [r7, #28]
 80103ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80103f0:	f043 030b 	orr.w	r3, r3, #11
 80103f4:	6113      	str	r3, [r2, #16]
 80103f6:	69fb      	ldr	r3, [r7, #28]
 80103f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	69fa      	ldr	r2, [r7, #28]
 8010400:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010404:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010408:	6013      	str	r3, [r2, #0]
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6818      	ldr	r0, [r3, #0]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	691b      	ldr	r3, [r3, #16]
 8010412:	b2d9      	uxtb	r1, r3
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801041a:	461a      	mov	r2, r3
 801041c:	f004 fb52 	bl	8014ac4 <USB_EP0_OutStart>
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	695a      	ldr	r2, [r3, #20]
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 801042e:	615a      	str	r2, [r3, #20]
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	4618      	mov	r0, r3
 8010436:	f004 fa80 	bl	801493a <USB_ReadInterrupts>
 801043a:	4603      	mov	r3, r0
 801043c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010444:	d124      	bne.n	8010490 <HAL_PCD_IRQHandler+0x65c>
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	4618      	mov	r0, r3
 801044c:	f004 fb16 	bl	8014a7c <USB_ActivateSetup>
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	4618      	mov	r0, r3
 8010456:	f003 fb7e 	bl	8013b56 <USB_GetDevSpeed>
 801045a:	4603      	mov	r3, r0
 801045c:	461a      	mov	r2, r3
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	60da      	str	r2, [r3, #12]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681c      	ldr	r4, [r3, #0]
 8010466:	f001 f959 	bl	801171c <HAL_RCC_GetHCLKFreq>
 801046a:	4601      	mov	r1, r0
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	68db      	ldr	r3, [r3, #12]
 8010470:	b2db      	uxtb	r3, r3
 8010472:	461a      	mov	r2, r3
 8010474:	4620      	mov	r0, r4
 8010476:	f003 f89d 	bl	80135b4 <USB_SetTurnaroundTime>
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f00a fa8b 	bl	801a996 <HAL_PCD_ResetCallback>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	695a      	ldr	r2, [r3, #20]
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 801048e:	615a      	str	r2, [r3, #20]
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	4618      	mov	r0, r3
 8010496:	f004 fa50 	bl	801493a <USB_ReadInterrupts>
 801049a:	4603      	mov	r3, r0
 801049c:	f003 0308 	and.w	r3, r3, #8
 80104a0:	2b08      	cmp	r3, #8
 80104a2:	d10a      	bne.n	80104ba <HAL_PCD_IRQHandler+0x686>
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f00a fa68 	bl	801a97a <HAL_PCD_SOFCallback>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	695a      	ldr	r2, [r3, #20]
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	f002 0208 	and.w	r2, r2, #8
 80104b8:	615a      	str	r2, [r3, #20]
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	4618      	mov	r0, r3
 80104c0:	f004 fa3b 	bl	801493a <USB_ReadInterrupts>
 80104c4:	4603      	mov	r3, r0
 80104c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80104ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80104ce:	d10f      	bne.n	80104f0 <HAL_PCD_IRQHandler+0x6bc>
 80104d0:	2300      	movs	r3, #0
 80104d2:	627b      	str	r3, [r7, #36]	; 0x24
 80104d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d6:	b2db      	uxtb	r3, r3
 80104d8:	4619      	mov	r1, r3
 80104da:	6878      	ldr	r0, [r7, #4]
 80104dc:	f00a fac0 	bl	801aa60 <HAL_PCD_ISOINIncompleteCallback>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	695a      	ldr	r2, [r3, #20]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80104ee:	615a      	str	r2, [r3, #20]
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	4618      	mov	r0, r3
 80104f6:	f004 fa20 	bl	801493a <USB_ReadInterrupts>
 80104fa:	4603      	mov	r3, r0
 80104fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010500:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010504:	d10f      	bne.n	8010526 <HAL_PCD_IRQHandler+0x6f2>
 8010506:	2300      	movs	r3, #0
 8010508:	627b      	str	r3, [r7, #36]	; 0x24
 801050a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801050c:	b2db      	uxtb	r3, r3
 801050e:	4619      	mov	r1, r3
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f00a fa93 	bl	801aa3c <HAL_PCD_ISOOUTIncompleteCallback>
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	695a      	ldr	r2, [r3, #20]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8010524:	615a      	str	r2, [r3, #20]
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	4618      	mov	r0, r3
 801052c:	f004 fa05 	bl	801493a <USB_ReadInterrupts>
 8010530:	4603      	mov	r3, r0
 8010532:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801053a:	d10a      	bne.n	8010552 <HAL_PCD_IRQHandler+0x71e>
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f00a faa1 	bl	801aa84 <HAL_PCD_ConnectCallback>
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	695a      	ldr	r2, [r3, #20]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8010550:	615a      	str	r2, [r3, #20]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	4618      	mov	r0, r3
 8010558:	f004 f9ef 	bl	801493a <USB_ReadInterrupts>
 801055c:	4603      	mov	r3, r0
 801055e:	f003 0304 	and.w	r3, r3, #4
 8010562:	2b04      	cmp	r3, #4
 8010564:	d115      	bne.n	8010592 <HAL_PCD_IRQHandler+0x75e>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	61bb      	str	r3, [r7, #24]
 801056e:	69bb      	ldr	r3, [r7, #24]
 8010570:	f003 0304 	and.w	r3, r3, #4
 8010574:	2b00      	cmp	r3, #0
 8010576:	d002      	beq.n	801057e <HAL_PCD_IRQHandler+0x74a>
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f00a fa91 	bl	801aaa0 <HAL_PCD_DisconnectCallback>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	6859      	ldr	r1, [r3, #4]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	69ba      	ldr	r2, [r7, #24]
 801058a:	430a      	orrs	r2, r1
 801058c:	605a      	str	r2, [r3, #4]
 801058e:	e000      	b.n	8010592 <HAL_PCD_IRQHandler+0x75e>
 8010590:	bf00      	nop
 8010592:	3734      	adds	r7, #52	; 0x34
 8010594:	46bd      	mov	sp, r7
 8010596:	bd90      	pop	{r4, r7, pc}

08010598 <HAL_PCD_SetAddress>:
 8010598:	b580      	push	{r7, lr}
 801059a:	b082      	sub	sp, #8
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	460b      	mov	r3, r1
 80105a2:	70fb      	strb	r3, [r7, #3]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80105aa:	2b01      	cmp	r3, #1
 80105ac:	d101      	bne.n	80105b2 <HAL_PCD_SetAddress+0x1a>
 80105ae:	2302      	movs	r3, #2
 80105b0:	e013      	b.n	80105da <HAL_PCD_SetAddress+0x42>
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2201      	movs	r2, #1
 80105b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	78fa      	ldrb	r2, [r7, #3]
 80105be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	78fa      	ldrb	r2, [r7, #3]
 80105c8:	4611      	mov	r1, r2
 80105ca:	4618      	mov	r0, r3
 80105cc:	f004 f94d 	bl	801486a <USB_SetDevAddress>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2200      	movs	r2, #0
 80105d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 80105d8:	2300      	movs	r3, #0
 80105da:	4618      	mov	r0, r3
 80105dc:	3708      	adds	r7, #8
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}

080105e2 <HAL_PCD_EP_Open>:
 80105e2:	b580      	push	{r7, lr}
 80105e4:	b084      	sub	sp, #16
 80105e6:	af00      	add	r7, sp, #0
 80105e8:	6078      	str	r0, [r7, #4]
 80105ea:	4608      	mov	r0, r1
 80105ec:	4611      	mov	r1, r2
 80105ee:	461a      	mov	r2, r3
 80105f0:	4603      	mov	r3, r0
 80105f2:	70fb      	strb	r3, [r7, #3]
 80105f4:	460b      	mov	r3, r1
 80105f6:	803b      	strh	r3, [r7, #0]
 80105f8:	4613      	mov	r3, r2
 80105fa:	70bb      	strb	r3, [r7, #2]
 80105fc:	2300      	movs	r3, #0
 80105fe:	72fb      	strb	r3, [r7, #11]
 8010600:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010604:	2b00      	cmp	r3, #0
 8010606:	da0f      	bge.n	8010628 <HAL_PCD_EP_Open+0x46>
 8010608:	78fb      	ldrb	r3, [r7, #3]
 801060a:	f003 020f 	and.w	r2, r3, #15
 801060e:	4613      	mov	r3, r2
 8010610:	00db      	lsls	r3, r3, #3
 8010612:	1a9b      	subs	r3, r3, r2
 8010614:	009b      	lsls	r3, r3, #2
 8010616:	3338      	adds	r3, #56	; 0x38
 8010618:	687a      	ldr	r2, [r7, #4]
 801061a:	4413      	add	r3, r2
 801061c:	3304      	adds	r3, #4
 801061e:	60fb      	str	r3, [r7, #12]
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	2201      	movs	r2, #1
 8010624:	705a      	strb	r2, [r3, #1]
 8010626:	e00f      	b.n	8010648 <HAL_PCD_EP_Open+0x66>
 8010628:	78fb      	ldrb	r3, [r7, #3]
 801062a:	f003 020f 	and.w	r2, r3, #15
 801062e:	4613      	mov	r3, r2
 8010630:	00db      	lsls	r3, r3, #3
 8010632:	1a9b      	subs	r3, r3, r2
 8010634:	009b      	lsls	r3, r3, #2
 8010636:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801063a:	687a      	ldr	r2, [r7, #4]
 801063c:	4413      	add	r3, r2
 801063e:	3304      	adds	r3, #4
 8010640:	60fb      	str	r3, [r7, #12]
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	2200      	movs	r2, #0
 8010646:	705a      	strb	r2, [r3, #1]
 8010648:	78fb      	ldrb	r3, [r7, #3]
 801064a:	f003 030f 	and.w	r3, r3, #15
 801064e:	b2da      	uxtb	r2, r3
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	701a      	strb	r2, [r3, #0]
 8010654:	883a      	ldrh	r2, [r7, #0]
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	609a      	str	r2, [r3, #8]
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	78ba      	ldrb	r2, [r7, #2]
 801065e:	70da      	strb	r2, [r3, #3]
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	785b      	ldrb	r3, [r3, #1]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d004      	beq.n	8010672 <HAL_PCD_EP_Open+0x90>
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	b29a      	uxth	r2, r3
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	80da      	strh	r2, [r3, #6]
 8010672:	78bb      	ldrb	r3, [r7, #2]
 8010674:	2b02      	cmp	r3, #2
 8010676:	d102      	bne.n	801067e <HAL_PCD_EP_Open+0x9c>
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	2200      	movs	r2, #0
 801067c:	711a      	strb	r2, [r3, #4]
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8010684:	2b01      	cmp	r3, #1
 8010686:	d101      	bne.n	801068c <HAL_PCD_EP_Open+0xaa>
 8010688:	2302      	movs	r3, #2
 801068a:	e00e      	b.n	80106aa <HAL_PCD_EP_Open+0xc8>
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2201      	movs	r2, #1
 8010690:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	68f9      	ldr	r1, [r7, #12]
 801069a:	4618      	mov	r0, r3
 801069c:	f003 fa80 	bl	8013ba0 <USB_ActivateEndpoint>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2200      	movs	r2, #0
 80106a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 80106a8:	7afb      	ldrb	r3, [r7, #11]
 80106aa:	4618      	mov	r0, r3
 80106ac:	3710      	adds	r7, #16
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}

080106b2 <HAL_PCD_EP_Close>:
 80106b2:	b580      	push	{r7, lr}
 80106b4:	b084      	sub	sp, #16
 80106b6:	af00      	add	r7, sp, #0
 80106b8:	6078      	str	r0, [r7, #4]
 80106ba:	460b      	mov	r3, r1
 80106bc:	70fb      	strb	r3, [r7, #3]
 80106be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	da0f      	bge.n	80106e6 <HAL_PCD_EP_Close+0x34>
 80106c6:	78fb      	ldrb	r3, [r7, #3]
 80106c8:	f003 020f 	and.w	r2, r3, #15
 80106cc:	4613      	mov	r3, r2
 80106ce:	00db      	lsls	r3, r3, #3
 80106d0:	1a9b      	subs	r3, r3, r2
 80106d2:	009b      	lsls	r3, r3, #2
 80106d4:	3338      	adds	r3, #56	; 0x38
 80106d6:	687a      	ldr	r2, [r7, #4]
 80106d8:	4413      	add	r3, r2
 80106da:	3304      	adds	r3, #4
 80106dc:	60fb      	str	r3, [r7, #12]
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	2201      	movs	r2, #1
 80106e2:	705a      	strb	r2, [r3, #1]
 80106e4:	e00f      	b.n	8010706 <HAL_PCD_EP_Close+0x54>
 80106e6:	78fb      	ldrb	r3, [r7, #3]
 80106e8:	f003 020f 	and.w	r2, r3, #15
 80106ec:	4613      	mov	r3, r2
 80106ee:	00db      	lsls	r3, r3, #3
 80106f0:	1a9b      	subs	r3, r3, r2
 80106f2:	009b      	lsls	r3, r3, #2
 80106f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80106f8:	687a      	ldr	r2, [r7, #4]
 80106fa:	4413      	add	r3, r2
 80106fc:	3304      	adds	r3, #4
 80106fe:	60fb      	str	r3, [r7, #12]
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	2200      	movs	r2, #0
 8010704:	705a      	strb	r2, [r3, #1]
 8010706:	78fb      	ldrb	r3, [r7, #3]
 8010708:	f003 030f 	and.w	r3, r3, #15
 801070c:	b2da      	uxtb	r2, r3
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	701a      	strb	r2, [r3, #0]
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8010718:	2b01      	cmp	r3, #1
 801071a:	d101      	bne.n	8010720 <HAL_PCD_EP_Close+0x6e>
 801071c:	2302      	movs	r3, #2
 801071e:	e00e      	b.n	801073e <HAL_PCD_EP_Close+0x8c>
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2201      	movs	r2, #1
 8010724:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	68f9      	ldr	r1, [r7, #12]
 801072e:	4618      	mov	r0, r3
 8010730:	f003 fabe 	bl	8013cb0 <USB_DeactivateEndpoint>
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2200      	movs	r2, #0
 8010738:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 801073c:	2300      	movs	r3, #0
 801073e:	4618      	mov	r0, r3
 8010740:	3710      	adds	r7, #16
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}

08010746 <HAL_PCD_EP_Receive>:
 8010746:	b580      	push	{r7, lr}
 8010748:	b086      	sub	sp, #24
 801074a:	af00      	add	r7, sp, #0
 801074c:	60f8      	str	r0, [r7, #12]
 801074e:	607a      	str	r2, [r7, #4]
 8010750:	603b      	str	r3, [r7, #0]
 8010752:	460b      	mov	r3, r1
 8010754:	72fb      	strb	r3, [r7, #11]
 8010756:	7afb      	ldrb	r3, [r7, #11]
 8010758:	f003 020f 	and.w	r2, r3, #15
 801075c:	4613      	mov	r3, r2
 801075e:	00db      	lsls	r3, r3, #3
 8010760:	1a9b      	subs	r3, r3, r2
 8010762:	009b      	lsls	r3, r3, #2
 8010764:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8010768:	68fa      	ldr	r2, [r7, #12]
 801076a:	4413      	add	r3, r2
 801076c:	3304      	adds	r3, #4
 801076e:	617b      	str	r3, [r7, #20]
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	687a      	ldr	r2, [r7, #4]
 8010774:	60da      	str	r2, [r3, #12]
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	683a      	ldr	r2, [r7, #0]
 801077a:	615a      	str	r2, [r3, #20]
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	2200      	movs	r2, #0
 8010780:	619a      	str	r2, [r3, #24]
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	2200      	movs	r2, #0
 8010786:	705a      	strb	r2, [r3, #1]
 8010788:	7afb      	ldrb	r3, [r7, #11]
 801078a:	f003 030f 	and.w	r3, r3, #15
 801078e:	b2da      	uxtb	r2, r3
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	701a      	strb	r2, [r3, #0]
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	691b      	ldr	r3, [r3, #16]
 8010798:	2b01      	cmp	r3, #1
 801079a:	d102      	bne.n	80107a2 <HAL_PCD_EP_Receive+0x5c>
 801079c:	687a      	ldr	r2, [r7, #4]
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	611a      	str	r2, [r3, #16]
 80107a2:	7afb      	ldrb	r3, [r7, #11]
 80107a4:	f003 030f 	and.w	r3, r3, #15
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d109      	bne.n	80107c0 <HAL_PCD_EP_Receive+0x7a>
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	6818      	ldr	r0, [r3, #0]
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	691b      	ldr	r3, [r3, #16]
 80107b4:	b2db      	uxtb	r3, r3
 80107b6:	461a      	mov	r2, r3
 80107b8:	6979      	ldr	r1, [r7, #20]
 80107ba:	f003 fd99 	bl	80142f0 <USB_EP0StartXfer>
 80107be:	e008      	b.n	80107d2 <HAL_PCD_EP_Receive+0x8c>
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	6818      	ldr	r0, [r3, #0]
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	691b      	ldr	r3, [r3, #16]
 80107c8:	b2db      	uxtb	r3, r3
 80107ca:	461a      	mov	r2, r3
 80107cc:	6979      	ldr	r1, [r7, #20]
 80107ce:	f003 fb4b 	bl	8013e68 <USB_EPStartXfer>
 80107d2:	2300      	movs	r3, #0
 80107d4:	4618      	mov	r0, r3
 80107d6:	3718      	adds	r7, #24
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}

080107dc <HAL_PCD_EP_GetRxCount>:
 80107dc:	b480      	push	{r7}
 80107de:	b083      	sub	sp, #12
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
 80107e4:	460b      	mov	r3, r1
 80107e6:	70fb      	strb	r3, [r7, #3]
 80107e8:	78fb      	ldrb	r3, [r7, #3]
 80107ea:	f003 020f 	and.w	r2, r3, #15
 80107ee:	6879      	ldr	r1, [r7, #4]
 80107f0:	4613      	mov	r3, r2
 80107f2:	00db      	lsls	r3, r3, #3
 80107f4:	1a9b      	subs	r3, r3, r2
 80107f6:	009b      	lsls	r3, r3, #2
 80107f8:	440b      	add	r3, r1
 80107fa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	4618      	mov	r0, r3
 8010802:	370c      	adds	r7, #12
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr

0801080c <HAL_PCD_EP_Transmit>:
 801080c:	b580      	push	{r7, lr}
 801080e:	b086      	sub	sp, #24
 8010810:	af00      	add	r7, sp, #0
 8010812:	60f8      	str	r0, [r7, #12]
 8010814:	607a      	str	r2, [r7, #4]
 8010816:	603b      	str	r3, [r7, #0]
 8010818:	460b      	mov	r3, r1
 801081a:	72fb      	strb	r3, [r7, #11]
 801081c:	7afb      	ldrb	r3, [r7, #11]
 801081e:	f003 020f 	and.w	r2, r3, #15
 8010822:	4613      	mov	r3, r2
 8010824:	00db      	lsls	r3, r3, #3
 8010826:	1a9b      	subs	r3, r3, r2
 8010828:	009b      	lsls	r3, r3, #2
 801082a:	3338      	adds	r3, #56	; 0x38
 801082c:	68fa      	ldr	r2, [r7, #12]
 801082e:	4413      	add	r3, r2
 8010830:	3304      	adds	r3, #4
 8010832:	617b      	str	r3, [r7, #20]
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	687a      	ldr	r2, [r7, #4]
 8010838:	60da      	str	r2, [r3, #12]
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	683a      	ldr	r2, [r7, #0]
 801083e:	615a      	str	r2, [r3, #20]
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	2200      	movs	r2, #0
 8010844:	619a      	str	r2, [r3, #24]
 8010846:	697b      	ldr	r3, [r7, #20]
 8010848:	2201      	movs	r2, #1
 801084a:	705a      	strb	r2, [r3, #1]
 801084c:	7afb      	ldrb	r3, [r7, #11]
 801084e:	f003 030f 	and.w	r3, r3, #15
 8010852:	b2da      	uxtb	r2, r3
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	701a      	strb	r2, [r3, #0]
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	691b      	ldr	r3, [r3, #16]
 801085c:	2b01      	cmp	r3, #1
 801085e:	d102      	bne.n	8010866 <HAL_PCD_EP_Transmit+0x5a>
 8010860:	687a      	ldr	r2, [r7, #4]
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	611a      	str	r2, [r3, #16]
 8010866:	7afb      	ldrb	r3, [r7, #11]
 8010868:	f003 030f 	and.w	r3, r3, #15
 801086c:	2b00      	cmp	r3, #0
 801086e:	d109      	bne.n	8010884 <HAL_PCD_EP_Transmit+0x78>
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	6818      	ldr	r0, [r3, #0]
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	691b      	ldr	r3, [r3, #16]
 8010878:	b2db      	uxtb	r3, r3
 801087a:	461a      	mov	r2, r3
 801087c:	6979      	ldr	r1, [r7, #20]
 801087e:	f003 fd37 	bl	80142f0 <USB_EP0StartXfer>
 8010882:	e008      	b.n	8010896 <HAL_PCD_EP_Transmit+0x8a>
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	6818      	ldr	r0, [r3, #0]
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	691b      	ldr	r3, [r3, #16]
 801088c:	b2db      	uxtb	r3, r3
 801088e:	461a      	mov	r2, r3
 8010890:	6979      	ldr	r1, [r7, #20]
 8010892:	f003 fae9 	bl	8013e68 <USB_EPStartXfer>
 8010896:	2300      	movs	r3, #0
 8010898:	4618      	mov	r0, r3
 801089a:	3718      	adds	r7, #24
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}

080108a0 <HAL_PCD_EP_SetStall>:
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b084      	sub	sp, #16
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	460b      	mov	r3, r1
 80108aa:	70fb      	strb	r3, [r7, #3]
 80108ac:	78fb      	ldrb	r3, [r7, #3]
 80108ae:	f003 020f 	and.w	r2, r3, #15
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	685b      	ldr	r3, [r3, #4]
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d901      	bls.n	80108be <HAL_PCD_EP_SetStall+0x1e>
 80108ba:	2301      	movs	r3, #1
 80108bc:	e050      	b.n	8010960 <HAL_PCD_EP_SetStall+0xc0>
 80108be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	da0f      	bge.n	80108e6 <HAL_PCD_EP_SetStall+0x46>
 80108c6:	78fb      	ldrb	r3, [r7, #3]
 80108c8:	f003 020f 	and.w	r2, r3, #15
 80108cc:	4613      	mov	r3, r2
 80108ce:	00db      	lsls	r3, r3, #3
 80108d0:	1a9b      	subs	r3, r3, r2
 80108d2:	009b      	lsls	r3, r3, #2
 80108d4:	3338      	adds	r3, #56	; 0x38
 80108d6:	687a      	ldr	r2, [r7, #4]
 80108d8:	4413      	add	r3, r2
 80108da:	3304      	adds	r3, #4
 80108dc:	60fb      	str	r3, [r7, #12]
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	2201      	movs	r2, #1
 80108e2:	705a      	strb	r2, [r3, #1]
 80108e4:	e00d      	b.n	8010902 <HAL_PCD_EP_SetStall+0x62>
 80108e6:	78fa      	ldrb	r2, [r7, #3]
 80108e8:	4613      	mov	r3, r2
 80108ea:	00db      	lsls	r3, r3, #3
 80108ec:	1a9b      	subs	r3, r3, r2
 80108ee:	009b      	lsls	r3, r3, #2
 80108f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80108f4:	687a      	ldr	r2, [r7, #4]
 80108f6:	4413      	add	r3, r2
 80108f8:	3304      	adds	r3, #4
 80108fa:	60fb      	str	r3, [r7, #12]
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2200      	movs	r2, #0
 8010900:	705a      	strb	r2, [r3, #1]
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	2201      	movs	r2, #1
 8010906:	709a      	strb	r2, [r3, #2]
 8010908:	78fb      	ldrb	r3, [r7, #3]
 801090a:	f003 030f 	and.w	r3, r3, #15
 801090e:	b2da      	uxtb	r2, r3
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	701a      	strb	r2, [r3, #0]
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801091a:	2b01      	cmp	r3, #1
 801091c:	d101      	bne.n	8010922 <HAL_PCD_EP_SetStall+0x82>
 801091e:	2302      	movs	r3, #2
 8010920:	e01e      	b.n	8010960 <HAL_PCD_EP_SetStall+0xc0>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	2201      	movs	r2, #1
 8010926:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	68f9      	ldr	r1, [r7, #12]
 8010930:	4618      	mov	r0, r3
 8010932:	f003 fec6 	bl	80146c2 <USB_EPSetStall>
 8010936:	78fb      	ldrb	r3, [r7, #3]
 8010938:	f003 030f 	and.w	r3, r3, #15
 801093c:	2b00      	cmp	r3, #0
 801093e:	d10a      	bne.n	8010956 <HAL_PCD_EP_SetStall+0xb6>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6818      	ldr	r0, [r3, #0]
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	691b      	ldr	r3, [r3, #16]
 8010948:	b2d9      	uxtb	r1, r3
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010950:	461a      	mov	r2, r3
 8010952:	f004 f8b7 	bl	8014ac4 <USB_EP0_OutStart>
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2200      	movs	r2, #0
 801095a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 801095e:	2300      	movs	r3, #0
 8010960:	4618      	mov	r0, r3
 8010962:	3710      	adds	r7, #16
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}

08010968 <HAL_PCD_EP_ClrStall>:
 8010968:	b580      	push	{r7, lr}
 801096a:	b084      	sub	sp, #16
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	460b      	mov	r3, r1
 8010972:	70fb      	strb	r3, [r7, #3]
 8010974:	78fb      	ldrb	r3, [r7, #3]
 8010976:	f003 020f 	and.w	r2, r3, #15
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	685b      	ldr	r3, [r3, #4]
 801097e:	429a      	cmp	r2, r3
 8010980:	d901      	bls.n	8010986 <HAL_PCD_EP_ClrStall+0x1e>
 8010982:	2301      	movs	r3, #1
 8010984:	e042      	b.n	8010a0c <HAL_PCD_EP_ClrStall+0xa4>
 8010986:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801098a:	2b00      	cmp	r3, #0
 801098c:	da0f      	bge.n	80109ae <HAL_PCD_EP_ClrStall+0x46>
 801098e:	78fb      	ldrb	r3, [r7, #3]
 8010990:	f003 020f 	and.w	r2, r3, #15
 8010994:	4613      	mov	r3, r2
 8010996:	00db      	lsls	r3, r3, #3
 8010998:	1a9b      	subs	r3, r3, r2
 801099a:	009b      	lsls	r3, r3, #2
 801099c:	3338      	adds	r3, #56	; 0x38
 801099e:	687a      	ldr	r2, [r7, #4]
 80109a0:	4413      	add	r3, r2
 80109a2:	3304      	adds	r3, #4
 80109a4:	60fb      	str	r3, [r7, #12]
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	2201      	movs	r2, #1
 80109aa:	705a      	strb	r2, [r3, #1]
 80109ac:	e00f      	b.n	80109ce <HAL_PCD_EP_ClrStall+0x66>
 80109ae:	78fb      	ldrb	r3, [r7, #3]
 80109b0:	f003 020f 	and.w	r2, r3, #15
 80109b4:	4613      	mov	r3, r2
 80109b6:	00db      	lsls	r3, r3, #3
 80109b8:	1a9b      	subs	r3, r3, r2
 80109ba:	009b      	lsls	r3, r3, #2
 80109bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80109c0:	687a      	ldr	r2, [r7, #4]
 80109c2:	4413      	add	r3, r2
 80109c4:	3304      	adds	r3, #4
 80109c6:	60fb      	str	r3, [r7, #12]
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	2200      	movs	r2, #0
 80109cc:	705a      	strb	r2, [r3, #1]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	2200      	movs	r2, #0
 80109d2:	709a      	strb	r2, [r3, #2]
 80109d4:	78fb      	ldrb	r3, [r7, #3]
 80109d6:	f003 030f 	and.w	r3, r3, #15
 80109da:	b2da      	uxtb	r2, r3
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	701a      	strb	r2, [r3, #0]
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80109e6:	2b01      	cmp	r3, #1
 80109e8:	d101      	bne.n	80109ee <HAL_PCD_EP_ClrStall+0x86>
 80109ea:	2302      	movs	r3, #2
 80109ec:	e00e      	b.n	8010a0c <HAL_PCD_EP_ClrStall+0xa4>
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	2201      	movs	r2, #1
 80109f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	68f9      	ldr	r1, [r7, #12]
 80109fc:	4618      	mov	r0, r3
 80109fe:	f003 fece 	bl	801479e <USB_EPClearStall>
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2200      	movs	r2, #0
 8010a06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	3710      	adds	r7, #16
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}

08010a14 <PCD_WriteEmptyTxFifo>:
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b08a      	sub	sp, #40	; 0x28
 8010a18:	af02      	add	r7, sp, #8
 8010a1a:	6078      	str	r0, [r7, #4]
 8010a1c:	6039      	str	r1, [r7, #0]
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	617b      	str	r3, [r7, #20]
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	613b      	str	r3, [r7, #16]
 8010a28:	683a      	ldr	r2, [r7, #0]
 8010a2a:	4613      	mov	r3, r2
 8010a2c:	00db      	lsls	r3, r3, #3
 8010a2e:	1a9b      	subs	r3, r3, r2
 8010a30:	009b      	lsls	r3, r3, #2
 8010a32:	3338      	adds	r3, #56	; 0x38
 8010a34:	687a      	ldr	r2, [r7, #4]
 8010a36:	4413      	add	r3, r2
 8010a38:	3304      	adds	r3, #4
 8010a3a:	60fb      	str	r3, [r7, #12]
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	699a      	ldr	r2, [r3, #24]
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	695b      	ldr	r3, [r3, #20]
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d901      	bls.n	8010a4c <PCD_WriteEmptyTxFifo+0x38>
 8010a48:	2301      	movs	r3, #1
 8010a4a:	e06c      	b.n	8010b26 <PCD_WriteEmptyTxFifo+0x112>
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	695a      	ldr	r2, [r3, #20]
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	699b      	ldr	r3, [r3, #24]
 8010a54:	1ad3      	subs	r3, r2, r3
 8010a56:	61fb      	str	r3, [r7, #28]
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	689b      	ldr	r3, [r3, #8]
 8010a5c:	69fa      	ldr	r2, [r7, #28]
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	d902      	bls.n	8010a68 <PCD_WriteEmptyTxFifo+0x54>
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	689b      	ldr	r3, [r3, #8]
 8010a66:	61fb      	str	r3, [r7, #28]
 8010a68:	69fb      	ldr	r3, [r7, #28]
 8010a6a:	3303      	adds	r3, #3
 8010a6c:	089b      	lsrs	r3, r3, #2
 8010a6e:	61bb      	str	r3, [r7, #24]
 8010a70:	e02b      	b.n	8010aca <PCD_WriteEmptyTxFifo+0xb6>
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	695a      	ldr	r2, [r3, #20]
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	699b      	ldr	r3, [r3, #24]
 8010a7a:	1ad3      	subs	r3, r2, r3
 8010a7c:	61fb      	str	r3, [r7, #28]
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	689b      	ldr	r3, [r3, #8]
 8010a82:	69fa      	ldr	r2, [r7, #28]
 8010a84:	429a      	cmp	r2, r3
 8010a86:	d902      	bls.n	8010a8e <PCD_WriteEmptyTxFifo+0x7a>
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	689b      	ldr	r3, [r3, #8]
 8010a8c:	61fb      	str	r3, [r7, #28]
 8010a8e:	69fb      	ldr	r3, [r7, #28]
 8010a90:	3303      	adds	r3, #3
 8010a92:	089b      	lsrs	r3, r3, #2
 8010a94:	61bb      	str	r3, [r7, #24]
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	68d9      	ldr	r1, [r3, #12]
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	b2da      	uxtb	r2, r3
 8010a9e:	69fb      	ldr	r3, [r7, #28]
 8010aa0:	b298      	uxth	r0, r3
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	691b      	ldr	r3, [r3, #16]
 8010aa6:	b2db      	uxtb	r3, r3
 8010aa8:	9300      	str	r3, [sp, #0]
 8010aaa:	4603      	mov	r3, r0
 8010aac:	6978      	ldr	r0, [r7, #20]
 8010aae:	f003 fd72 	bl	8014596 <USB_WritePacket>
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	68da      	ldr	r2, [r3, #12]
 8010ab6:	69fb      	ldr	r3, [r7, #28]
 8010ab8:	441a      	add	r2, r3
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	60da      	str	r2, [r3, #12]
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	699a      	ldr	r2, [r3, #24]
 8010ac2:	69fb      	ldr	r3, [r7, #28]
 8010ac4:	441a      	add	r2, r3
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	619a      	str	r2, [r3, #24]
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	015a      	lsls	r2, r3, #5
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	4413      	add	r3, r2
 8010ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ad6:	699b      	ldr	r3, [r3, #24]
 8010ad8:	b29b      	uxth	r3, r3
 8010ada:	69ba      	ldr	r2, [r7, #24]
 8010adc:	429a      	cmp	r2, r3
 8010ade:	d809      	bhi.n	8010af4 <PCD_WriteEmptyTxFifo+0xe0>
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	699a      	ldr	r2, [r3, #24]
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	695b      	ldr	r3, [r3, #20]
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	d203      	bcs.n	8010af4 <PCD_WriteEmptyTxFifo+0xe0>
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	695b      	ldr	r3, [r3, #20]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d1be      	bne.n	8010a72 <PCD_WriteEmptyTxFifo+0x5e>
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	695a      	ldr	r2, [r3, #20]
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	699b      	ldr	r3, [r3, #24]
 8010afc:	429a      	cmp	r2, r3
 8010afe:	d811      	bhi.n	8010b24 <PCD_WriteEmptyTxFifo+0x110>
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	f003 030f 	and.w	r3, r3, #15
 8010b06:	2201      	movs	r2, #1
 8010b08:	fa02 f303 	lsl.w	r3, r2, r3
 8010b0c:	60bb      	str	r3, [r7, #8]
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	43db      	mvns	r3, r3
 8010b1a:	6939      	ldr	r1, [r7, #16]
 8010b1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010b20:	4013      	ands	r3, r2
 8010b22:	634b      	str	r3, [r1, #52]	; 0x34
 8010b24:	2300      	movs	r3, #0
 8010b26:	4618      	mov	r0, r3
 8010b28:	3720      	adds	r7, #32
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}
	...

08010b30 <PCD_EP_OutXfrComplete_int>:
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b086      	sub	sp, #24
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	6039      	str	r1, [r7, #0]
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	617b      	str	r3, [r7, #20]
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	613b      	str	r3, [r7, #16]
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	333c      	adds	r3, #60	; 0x3c
 8010b48:	3304      	adds	r3, #4
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	60fb      	str	r3, [r7, #12]
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	015a      	lsls	r2, r3, #5
 8010b52:	693b      	ldr	r3, [r7, #16]
 8010b54:	4413      	add	r3, r2
 8010b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b5a:	689b      	ldr	r3, [r3, #8]
 8010b5c:	60bb      	str	r3, [r7, #8]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	691b      	ldr	r3, [r3, #16]
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	f040 80a0 	bne.w	8010ca8 <PCD_EP_OutXfrComplete_int+0x178>
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	f003 0308 	and.w	r3, r3, #8
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d015      	beq.n	8010b9e <PCD_EP_OutXfrComplete_int+0x6e>
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	4a72      	ldr	r2, [pc, #456]	; (8010d40 <PCD_EP_OutXfrComplete_int+0x210>)
 8010b76:	4293      	cmp	r3, r2
 8010b78:	f240 80dd 	bls.w	8010d36 <PCD_EP_OutXfrComplete_int+0x206>
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	f000 80d7 	beq.w	8010d36 <PCD_EP_OutXfrComplete_int+0x206>
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	015a      	lsls	r2, r3, #5
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	4413      	add	r3, r2
 8010b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b94:	461a      	mov	r2, r3
 8010b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010b9a:	6093      	str	r3, [r2, #8]
 8010b9c:	e0cb      	b.n	8010d36 <PCD_EP_OutXfrComplete_int+0x206>
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	f003 0320 	and.w	r3, r3, #32
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d009      	beq.n	8010bbc <PCD_EP_OutXfrComplete_int+0x8c>
 8010ba8:	683b      	ldr	r3, [r7, #0]
 8010baa:	015a      	lsls	r2, r3, #5
 8010bac:	693b      	ldr	r3, [r7, #16]
 8010bae:	4413      	add	r3, r2
 8010bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bb4:	461a      	mov	r2, r3
 8010bb6:	2320      	movs	r3, #32
 8010bb8:	6093      	str	r3, [r2, #8]
 8010bba:	e0bc      	b.n	8010d36 <PCD_EP_OutXfrComplete_int+0x206>
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	f040 80b7 	bne.w	8010d36 <PCD_EP_OutXfrComplete_int+0x206>
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	4a5d      	ldr	r2, [pc, #372]	; (8010d40 <PCD_EP_OutXfrComplete_int+0x210>)
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	d90f      	bls.n	8010bf0 <PCD_EP_OutXfrComplete_int+0xc0>
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d00a      	beq.n	8010bf0 <PCD_EP_OutXfrComplete_int+0xc0>
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	015a      	lsls	r2, r3, #5
 8010bde:	693b      	ldr	r3, [r7, #16]
 8010be0:	4413      	add	r3, r2
 8010be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010be6:	461a      	mov	r2, r3
 8010be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010bec:	6093      	str	r3, [r2, #8]
 8010bee:	e0a2      	b.n	8010d36 <PCD_EP_OutXfrComplete_int+0x206>
 8010bf0:	6879      	ldr	r1, [r7, #4]
 8010bf2:	683a      	ldr	r2, [r7, #0]
 8010bf4:	4613      	mov	r3, r2
 8010bf6:	00db      	lsls	r3, r3, #3
 8010bf8:	1a9b      	subs	r3, r3, r2
 8010bfa:	009b      	lsls	r3, r3, #2
 8010bfc:	440b      	add	r3, r1
 8010bfe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8010c02:	681a      	ldr	r2, [r3, #0]
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	0159      	lsls	r1, r3, #5
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	440b      	add	r3, r1
 8010c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c10:	691b      	ldr	r3, [r3, #16]
 8010c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010c16:	1ad1      	subs	r1, r2, r3
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	683a      	ldr	r2, [r7, #0]
 8010c1c:	4613      	mov	r3, r2
 8010c1e:	00db      	lsls	r3, r3, #3
 8010c20:	1a9b      	subs	r3, r3, r2
 8010c22:	009b      	lsls	r3, r3, #2
 8010c24:	4403      	add	r3, r0
 8010c26:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8010c2a:	6019      	str	r1, [r3, #0]
 8010c2c:	6879      	ldr	r1, [r7, #4]
 8010c2e:	683a      	ldr	r2, [r7, #0]
 8010c30:	4613      	mov	r3, r2
 8010c32:	00db      	lsls	r3, r3, #3
 8010c34:	1a9b      	subs	r3, r3, r2
 8010c36:	009b      	lsls	r3, r3, #2
 8010c38:	440b      	add	r3, r1
 8010c3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010c3e:	6819      	ldr	r1, [r3, #0]
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	683a      	ldr	r2, [r7, #0]
 8010c44:	4613      	mov	r3, r2
 8010c46:	00db      	lsls	r3, r3, #3
 8010c48:	1a9b      	subs	r3, r3, r2
 8010c4a:	009b      	lsls	r3, r3, #2
 8010c4c:	4403      	add	r3, r0
 8010c4e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	4419      	add	r1, r3
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	683a      	ldr	r2, [r7, #0]
 8010c5a:	4613      	mov	r3, r2
 8010c5c:	00db      	lsls	r3, r3, #3
 8010c5e:	1a9b      	subs	r3, r3, r2
 8010c60:	009b      	lsls	r3, r3, #2
 8010c62:	4403      	add	r3, r0
 8010c64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010c68:	6019      	str	r1, [r3, #0]
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d114      	bne.n	8010c9a <PCD_EP_OutXfrComplete_int+0x16a>
 8010c70:	6879      	ldr	r1, [r7, #4]
 8010c72:	683a      	ldr	r2, [r7, #0]
 8010c74:	4613      	mov	r3, r2
 8010c76:	00db      	lsls	r3, r3, #3
 8010c78:	1a9b      	subs	r3, r3, r2
 8010c7a:	009b      	lsls	r3, r3, #2
 8010c7c:	440b      	add	r3, r1
 8010c7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d108      	bne.n	8010c9a <PCD_EP_OutXfrComplete_int+0x16a>
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6818      	ldr	r0, [r3, #0]
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010c92:	461a      	mov	r2, r3
 8010c94:	2101      	movs	r1, #1
 8010c96:	f003 ff15 	bl	8014ac4 <USB_EP0_OutStart>
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	b2db      	uxtb	r3, r3
 8010c9e:	4619      	mov	r1, r3
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f009 fe35 	bl	801a910 <HAL_PCD_DataOutStageCallback>
 8010ca6:	e046      	b.n	8010d36 <PCD_EP_OutXfrComplete_int+0x206>
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	4a26      	ldr	r2, [pc, #152]	; (8010d44 <PCD_EP_OutXfrComplete_int+0x214>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d124      	bne.n	8010cfa <PCD_EP_OutXfrComplete_int+0x1ca>
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d00a      	beq.n	8010cd0 <PCD_EP_OutXfrComplete_int+0x1a0>
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	015a      	lsls	r2, r3, #5
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	4413      	add	r3, r2
 8010cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cc6:	461a      	mov	r2, r3
 8010cc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010ccc:	6093      	str	r3, [r2, #8]
 8010cce:	e032      	b.n	8010d36 <PCD_EP_OutXfrComplete_int+0x206>
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	f003 0320 	and.w	r3, r3, #32
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d008      	beq.n	8010cec <PCD_EP_OutXfrComplete_int+0x1bc>
 8010cda:	683b      	ldr	r3, [r7, #0]
 8010cdc:	015a      	lsls	r2, r3, #5
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	4413      	add	r3, r2
 8010ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ce6:	461a      	mov	r2, r3
 8010ce8:	2320      	movs	r3, #32
 8010cea:	6093      	str	r3, [r2, #8]
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	b2db      	uxtb	r3, r3
 8010cf0:	4619      	mov	r1, r3
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f009 fe0c 	bl	801a910 <HAL_PCD_DataOutStageCallback>
 8010cf8:	e01d      	b.n	8010d36 <PCD_EP_OutXfrComplete_int+0x206>
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d114      	bne.n	8010d2a <PCD_EP_OutXfrComplete_int+0x1fa>
 8010d00:	6879      	ldr	r1, [r7, #4]
 8010d02:	683a      	ldr	r2, [r7, #0]
 8010d04:	4613      	mov	r3, r2
 8010d06:	00db      	lsls	r3, r3, #3
 8010d08:	1a9b      	subs	r3, r3, r2
 8010d0a:	009b      	lsls	r3, r3, #2
 8010d0c:	440b      	add	r3, r1
 8010d0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d108      	bne.n	8010d2a <PCD_EP_OutXfrComplete_int+0x1fa>
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6818      	ldr	r0, [r3, #0]
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010d22:	461a      	mov	r2, r3
 8010d24:	2100      	movs	r1, #0
 8010d26:	f003 fecd 	bl	8014ac4 <USB_EP0_OutStart>
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	b2db      	uxtb	r3, r3
 8010d2e:	4619      	mov	r1, r3
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f009 fded 	bl	801a910 <HAL_PCD_DataOutStageCallback>
 8010d36:	2300      	movs	r3, #0
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3718      	adds	r7, #24
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}
 8010d40:	4f54300a 	.word	0x4f54300a
 8010d44:	4f54310a 	.word	0x4f54310a

08010d48 <PCD_EP_OutSetupPacket_int>:
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b086      	sub	sp, #24
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
 8010d50:	6039      	str	r1, [r7, #0]
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	617b      	str	r3, [r7, #20]
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	613b      	str	r3, [r7, #16]
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	333c      	adds	r3, #60	; 0x3c
 8010d60:	3304      	adds	r3, #4
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	60fb      	str	r3, [r7, #12]
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	015a      	lsls	r2, r3, #5
 8010d6a:	693b      	ldr	r3, [r7, #16]
 8010d6c:	4413      	add	r3, r2
 8010d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d72:	689b      	ldr	r3, [r3, #8]
 8010d74:	60bb      	str	r3, [r7, #8]
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	4a15      	ldr	r2, [pc, #84]	; (8010dd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8010d7a:	4293      	cmp	r3, r2
 8010d7c:	d90e      	bls.n	8010d9c <PCD_EP_OutSetupPacket_int+0x54>
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d009      	beq.n	8010d9c <PCD_EP_OutSetupPacket_int+0x54>
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	015a      	lsls	r2, r3, #5
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	4413      	add	r3, r2
 8010d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d94:	461a      	mov	r2, r3
 8010d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d9a:	6093      	str	r3, [r2, #8]
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f009 fda5 	bl	801a8ec <HAL_PCD_SetupStageCallback>
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	4a0a      	ldr	r2, [pc, #40]	; (8010dd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8010da6:	4293      	cmp	r3, r2
 8010da8:	d90c      	bls.n	8010dc4 <PCD_EP_OutSetupPacket_int+0x7c>
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	691b      	ldr	r3, [r3, #16]
 8010dae:	2b01      	cmp	r3, #1
 8010db0:	d108      	bne.n	8010dc4 <PCD_EP_OutSetupPacket_int+0x7c>
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6818      	ldr	r0, [r3, #0]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010dbc:	461a      	mov	r2, r3
 8010dbe:	2101      	movs	r1, #1
 8010dc0:	f003 fe80 	bl	8014ac4 <USB_EP0_OutStart>
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	3718      	adds	r7, #24
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bd80      	pop	{r7, pc}
 8010dce:	bf00      	nop
 8010dd0:	4f54300a 	.word	0x4f54300a

08010dd4 <HAL_PCDEx_SetTxFiFo>:
 8010dd4:	b480      	push	{r7}
 8010dd6:	b085      	sub	sp, #20
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	460b      	mov	r3, r1
 8010dde:	70fb      	strb	r3, [r7, #3]
 8010de0:	4613      	mov	r3, r2
 8010de2:	803b      	strh	r3, [r7, #0]
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dea:	60bb      	str	r3, [r7, #8]
 8010dec:	78fb      	ldrb	r3, [r7, #3]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d107      	bne.n	8010e02 <HAL_PCDEx_SetTxFiFo+0x2e>
 8010df2:	883b      	ldrh	r3, [r7, #0]
 8010df4:	0419      	lsls	r1, r3, #16
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	68ba      	ldr	r2, [r7, #8]
 8010dfc:	430a      	orrs	r2, r1
 8010dfe:	629a      	str	r2, [r3, #40]	; 0x28
 8010e00:	e028      	b.n	8010e54 <HAL_PCDEx_SetTxFiFo+0x80>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e08:	0c1b      	lsrs	r3, r3, #16
 8010e0a:	68ba      	ldr	r2, [r7, #8]
 8010e0c:	4413      	add	r3, r2
 8010e0e:	60bb      	str	r3, [r7, #8]
 8010e10:	2300      	movs	r3, #0
 8010e12:	73fb      	strb	r3, [r7, #15]
 8010e14:	e00d      	b.n	8010e32 <HAL_PCDEx_SetTxFiFo+0x5e>
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681a      	ldr	r2, [r3, #0]
 8010e1a:	7bfb      	ldrb	r3, [r7, #15]
 8010e1c:	3340      	adds	r3, #64	; 0x40
 8010e1e:	009b      	lsls	r3, r3, #2
 8010e20:	4413      	add	r3, r2
 8010e22:	685b      	ldr	r3, [r3, #4]
 8010e24:	0c1b      	lsrs	r3, r3, #16
 8010e26:	68ba      	ldr	r2, [r7, #8]
 8010e28:	4413      	add	r3, r2
 8010e2a:	60bb      	str	r3, [r7, #8]
 8010e2c:	7bfb      	ldrb	r3, [r7, #15]
 8010e2e:	3301      	adds	r3, #1
 8010e30:	73fb      	strb	r3, [r7, #15]
 8010e32:	7bfa      	ldrb	r2, [r7, #15]
 8010e34:	78fb      	ldrb	r3, [r7, #3]
 8010e36:	3b01      	subs	r3, #1
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	d3ec      	bcc.n	8010e16 <HAL_PCDEx_SetTxFiFo+0x42>
 8010e3c:	883b      	ldrh	r3, [r7, #0]
 8010e3e:	0418      	lsls	r0, r3, #16
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6819      	ldr	r1, [r3, #0]
 8010e44:	78fb      	ldrb	r3, [r7, #3]
 8010e46:	3b01      	subs	r3, #1
 8010e48:	68ba      	ldr	r2, [r7, #8]
 8010e4a:	4302      	orrs	r2, r0
 8010e4c:	3340      	adds	r3, #64	; 0x40
 8010e4e:	009b      	lsls	r3, r3, #2
 8010e50:	440b      	add	r3, r1
 8010e52:	605a      	str	r2, [r3, #4]
 8010e54:	2300      	movs	r3, #0
 8010e56:	4618      	mov	r0, r3
 8010e58:	3714      	adds	r7, #20
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e60:	4770      	bx	lr

08010e62 <HAL_PCDEx_SetRxFiFo>:
 8010e62:	b480      	push	{r7}
 8010e64:	b083      	sub	sp, #12
 8010e66:	af00      	add	r7, sp, #0
 8010e68:	6078      	str	r0, [r7, #4]
 8010e6a:	460b      	mov	r3, r1
 8010e6c:	807b      	strh	r3, [r7, #2]
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	887a      	ldrh	r2, [r7, #2]
 8010e74:	625a      	str	r2, [r3, #36]	; 0x24
 8010e76:	2300      	movs	r3, #0
 8010e78:	4618      	mov	r0, r3
 8010e7a:	370c      	adds	r7, #12
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr

08010e84 <HAL_PCDEx_LPM_Callback>:
 8010e84:	b480      	push	{r7}
 8010e86:	b083      	sub	sp, #12
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
 8010e8c:	460b      	mov	r3, r1
 8010e8e:	70fb      	strb	r3, [r7, #3]
 8010e90:	bf00      	nop
 8010e92:	370c      	adds	r7, #12
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr

08010e9c <HAL_RCC_OscConfig>:
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b086      	sub	sp, #24
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d101      	bne.n	8010eae <HAL_RCC_OscConfig+0x12>
 8010eaa:	2301      	movs	r3, #1
 8010eac:	e264      	b.n	8011378 <HAL_RCC_OscConfig+0x4dc>
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	f003 0301 	and.w	r3, r3, #1
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d075      	beq.n	8010fa6 <HAL_RCC_OscConfig+0x10a>
 8010eba:	4ba3      	ldr	r3, [pc, #652]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010ebc:	689b      	ldr	r3, [r3, #8]
 8010ebe:	f003 030c 	and.w	r3, r3, #12
 8010ec2:	2b04      	cmp	r3, #4
 8010ec4:	d00c      	beq.n	8010ee0 <HAL_RCC_OscConfig+0x44>
 8010ec6:	4ba0      	ldr	r3, [pc, #640]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010ec8:	689b      	ldr	r3, [r3, #8]
 8010eca:	f003 030c 	and.w	r3, r3, #12
 8010ece:	2b08      	cmp	r3, #8
 8010ed0:	d112      	bne.n	8010ef8 <HAL_RCC_OscConfig+0x5c>
 8010ed2:	4b9d      	ldr	r3, [pc, #628]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010ed4:	685b      	ldr	r3, [r3, #4]
 8010ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010ede:	d10b      	bne.n	8010ef8 <HAL_RCC_OscConfig+0x5c>
 8010ee0:	4b99      	ldr	r3, [pc, #612]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d05b      	beq.n	8010fa4 <HAL_RCC_OscConfig+0x108>
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d157      	bne.n	8010fa4 <HAL_RCC_OscConfig+0x108>
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	e23f      	b.n	8011378 <HAL_RCC_OscConfig+0x4dc>
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f00:	d106      	bne.n	8010f10 <HAL_RCC_OscConfig+0x74>
 8010f02:	4b91      	ldr	r3, [pc, #580]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	4a90      	ldr	r2, [pc, #576]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010f0c:	6013      	str	r3, [r2, #0]
 8010f0e:	e01d      	b.n	8010f4c <HAL_RCC_OscConfig+0xb0>
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	685b      	ldr	r3, [r3, #4]
 8010f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010f18:	d10c      	bne.n	8010f34 <HAL_RCC_OscConfig+0x98>
 8010f1a:	4b8b      	ldr	r3, [pc, #556]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	4a8a      	ldr	r2, [pc, #552]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010f24:	6013      	str	r3, [r2, #0]
 8010f26:	4b88      	ldr	r3, [pc, #544]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	4a87      	ldr	r2, [pc, #540]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010f30:	6013      	str	r3, [r2, #0]
 8010f32:	e00b      	b.n	8010f4c <HAL_RCC_OscConfig+0xb0>
 8010f34:	4b84      	ldr	r3, [pc, #528]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	4a83      	ldr	r2, [pc, #524]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010f3e:	6013      	str	r3, [r2, #0]
 8010f40:	4b81      	ldr	r3, [pc, #516]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	4a80      	ldr	r2, [pc, #512]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010f4a:	6013      	str	r3, [r2, #0]
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d013      	beq.n	8010f7c <HAL_RCC_OscConfig+0xe0>
 8010f54:	f7fd fdb2 	bl	800eabc <HAL_GetTick>
 8010f58:	6138      	str	r0, [r7, #16]
 8010f5a:	e008      	b.n	8010f6e <HAL_RCC_OscConfig+0xd2>
 8010f5c:	f7fd fdae 	bl	800eabc <HAL_GetTick>
 8010f60:	4602      	mov	r2, r0
 8010f62:	693b      	ldr	r3, [r7, #16]
 8010f64:	1ad3      	subs	r3, r2, r3
 8010f66:	2b64      	cmp	r3, #100	; 0x64
 8010f68:	d901      	bls.n	8010f6e <HAL_RCC_OscConfig+0xd2>
 8010f6a:	2303      	movs	r3, #3
 8010f6c:	e204      	b.n	8011378 <HAL_RCC_OscConfig+0x4dc>
 8010f6e:	4b76      	ldr	r3, [pc, #472]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d0f0      	beq.n	8010f5c <HAL_RCC_OscConfig+0xc0>
 8010f7a:	e014      	b.n	8010fa6 <HAL_RCC_OscConfig+0x10a>
 8010f7c:	f7fd fd9e 	bl	800eabc <HAL_GetTick>
 8010f80:	6138      	str	r0, [r7, #16]
 8010f82:	e008      	b.n	8010f96 <HAL_RCC_OscConfig+0xfa>
 8010f84:	f7fd fd9a 	bl	800eabc <HAL_GetTick>
 8010f88:	4602      	mov	r2, r0
 8010f8a:	693b      	ldr	r3, [r7, #16]
 8010f8c:	1ad3      	subs	r3, r2, r3
 8010f8e:	2b64      	cmp	r3, #100	; 0x64
 8010f90:	d901      	bls.n	8010f96 <HAL_RCC_OscConfig+0xfa>
 8010f92:	2303      	movs	r3, #3
 8010f94:	e1f0      	b.n	8011378 <HAL_RCC_OscConfig+0x4dc>
 8010f96:	4b6c      	ldr	r3, [pc, #432]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d1f0      	bne.n	8010f84 <HAL_RCC_OscConfig+0xe8>
 8010fa2:	e000      	b.n	8010fa6 <HAL_RCC_OscConfig+0x10a>
 8010fa4:	bf00      	nop
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	f003 0302 	and.w	r3, r3, #2
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d063      	beq.n	801107a <HAL_RCC_OscConfig+0x1de>
 8010fb2:	4b65      	ldr	r3, [pc, #404]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010fb4:	689b      	ldr	r3, [r3, #8]
 8010fb6:	f003 030c 	and.w	r3, r3, #12
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d00b      	beq.n	8010fd6 <HAL_RCC_OscConfig+0x13a>
 8010fbe:	4b62      	ldr	r3, [pc, #392]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010fc0:	689b      	ldr	r3, [r3, #8]
 8010fc2:	f003 030c 	and.w	r3, r3, #12
 8010fc6:	2b08      	cmp	r3, #8
 8010fc8:	d11c      	bne.n	8011004 <HAL_RCC_OscConfig+0x168>
 8010fca:	4b5f      	ldr	r3, [pc, #380]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010fcc:	685b      	ldr	r3, [r3, #4]
 8010fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d116      	bne.n	8011004 <HAL_RCC_OscConfig+0x168>
 8010fd6:	4b5c      	ldr	r3, [pc, #368]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	f003 0302 	and.w	r3, r3, #2
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d005      	beq.n	8010fee <HAL_RCC_OscConfig+0x152>
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	68db      	ldr	r3, [r3, #12]
 8010fe6:	2b01      	cmp	r3, #1
 8010fe8:	d001      	beq.n	8010fee <HAL_RCC_OscConfig+0x152>
 8010fea:	2301      	movs	r3, #1
 8010fec:	e1c4      	b.n	8011378 <HAL_RCC_OscConfig+0x4dc>
 8010fee:	4b56      	ldr	r3, [pc, #344]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	691b      	ldr	r3, [r3, #16]
 8010ffa:	00db      	lsls	r3, r3, #3
 8010ffc:	4952      	ldr	r1, [pc, #328]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8010ffe:	4313      	orrs	r3, r2
 8011000:	600b      	str	r3, [r1, #0]
 8011002:	e03a      	b.n	801107a <HAL_RCC_OscConfig+0x1de>
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d020      	beq.n	801104e <HAL_RCC_OscConfig+0x1b2>
 801100c:	4b4f      	ldr	r3, [pc, #316]	; (801114c <HAL_RCC_OscConfig+0x2b0>)
 801100e:	2201      	movs	r2, #1
 8011010:	601a      	str	r2, [r3, #0]
 8011012:	f7fd fd53 	bl	800eabc <HAL_GetTick>
 8011016:	6138      	str	r0, [r7, #16]
 8011018:	e008      	b.n	801102c <HAL_RCC_OscConfig+0x190>
 801101a:	f7fd fd4f 	bl	800eabc <HAL_GetTick>
 801101e:	4602      	mov	r2, r0
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	1ad3      	subs	r3, r2, r3
 8011024:	2b02      	cmp	r3, #2
 8011026:	d901      	bls.n	801102c <HAL_RCC_OscConfig+0x190>
 8011028:	2303      	movs	r3, #3
 801102a:	e1a5      	b.n	8011378 <HAL_RCC_OscConfig+0x4dc>
 801102c:	4b46      	ldr	r3, [pc, #280]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	f003 0302 	and.w	r3, r3, #2
 8011034:	2b00      	cmp	r3, #0
 8011036:	d0f0      	beq.n	801101a <HAL_RCC_OscConfig+0x17e>
 8011038:	4b43      	ldr	r3, [pc, #268]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	691b      	ldr	r3, [r3, #16]
 8011044:	00db      	lsls	r3, r3, #3
 8011046:	4940      	ldr	r1, [pc, #256]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8011048:	4313      	orrs	r3, r2
 801104a:	600b      	str	r3, [r1, #0]
 801104c:	e015      	b.n	801107a <HAL_RCC_OscConfig+0x1de>
 801104e:	4b3f      	ldr	r3, [pc, #252]	; (801114c <HAL_RCC_OscConfig+0x2b0>)
 8011050:	2200      	movs	r2, #0
 8011052:	601a      	str	r2, [r3, #0]
 8011054:	f7fd fd32 	bl	800eabc <HAL_GetTick>
 8011058:	6138      	str	r0, [r7, #16]
 801105a:	e008      	b.n	801106e <HAL_RCC_OscConfig+0x1d2>
 801105c:	f7fd fd2e 	bl	800eabc <HAL_GetTick>
 8011060:	4602      	mov	r2, r0
 8011062:	693b      	ldr	r3, [r7, #16]
 8011064:	1ad3      	subs	r3, r2, r3
 8011066:	2b02      	cmp	r3, #2
 8011068:	d901      	bls.n	801106e <HAL_RCC_OscConfig+0x1d2>
 801106a:	2303      	movs	r3, #3
 801106c:	e184      	b.n	8011378 <HAL_RCC_OscConfig+0x4dc>
 801106e:	4b36      	ldr	r3, [pc, #216]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	f003 0302 	and.w	r3, r3, #2
 8011076:	2b00      	cmp	r3, #0
 8011078:	d1f0      	bne.n	801105c <HAL_RCC_OscConfig+0x1c0>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	f003 0308 	and.w	r3, r3, #8
 8011082:	2b00      	cmp	r3, #0
 8011084:	d030      	beq.n	80110e8 <HAL_RCC_OscConfig+0x24c>
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	695b      	ldr	r3, [r3, #20]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d016      	beq.n	80110bc <HAL_RCC_OscConfig+0x220>
 801108e:	4b30      	ldr	r3, [pc, #192]	; (8011150 <HAL_RCC_OscConfig+0x2b4>)
 8011090:	2201      	movs	r2, #1
 8011092:	601a      	str	r2, [r3, #0]
 8011094:	f7fd fd12 	bl	800eabc <HAL_GetTick>
 8011098:	6138      	str	r0, [r7, #16]
 801109a:	e008      	b.n	80110ae <HAL_RCC_OscConfig+0x212>
 801109c:	f7fd fd0e 	bl	800eabc <HAL_GetTick>
 80110a0:	4602      	mov	r2, r0
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	1ad3      	subs	r3, r2, r3
 80110a6:	2b02      	cmp	r3, #2
 80110a8:	d901      	bls.n	80110ae <HAL_RCC_OscConfig+0x212>
 80110aa:	2303      	movs	r3, #3
 80110ac:	e164      	b.n	8011378 <HAL_RCC_OscConfig+0x4dc>
 80110ae:	4b26      	ldr	r3, [pc, #152]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 80110b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110b2:	f003 0302 	and.w	r3, r3, #2
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d0f0      	beq.n	801109c <HAL_RCC_OscConfig+0x200>
 80110ba:	e015      	b.n	80110e8 <HAL_RCC_OscConfig+0x24c>
 80110bc:	4b24      	ldr	r3, [pc, #144]	; (8011150 <HAL_RCC_OscConfig+0x2b4>)
 80110be:	2200      	movs	r2, #0
 80110c0:	601a      	str	r2, [r3, #0]
 80110c2:	f7fd fcfb 	bl	800eabc <HAL_GetTick>
 80110c6:	6138      	str	r0, [r7, #16]
 80110c8:	e008      	b.n	80110dc <HAL_RCC_OscConfig+0x240>
 80110ca:	f7fd fcf7 	bl	800eabc <HAL_GetTick>
 80110ce:	4602      	mov	r2, r0
 80110d0:	693b      	ldr	r3, [r7, #16]
 80110d2:	1ad3      	subs	r3, r2, r3
 80110d4:	2b02      	cmp	r3, #2
 80110d6:	d901      	bls.n	80110dc <HAL_RCC_OscConfig+0x240>
 80110d8:	2303      	movs	r3, #3
 80110da:	e14d      	b.n	8011378 <HAL_RCC_OscConfig+0x4dc>
 80110dc:	4b1a      	ldr	r3, [pc, #104]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 80110de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110e0:	f003 0302 	and.w	r3, r3, #2
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d1f0      	bne.n	80110ca <HAL_RCC_OscConfig+0x22e>
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	f003 0304 	and.w	r3, r3, #4
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	f000 80a0 	beq.w	8011236 <HAL_RCC_OscConfig+0x39a>
 80110f6:	2300      	movs	r3, #0
 80110f8:	75fb      	strb	r3, [r7, #23]
 80110fa:	4b13      	ldr	r3, [pc, #76]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 80110fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011102:	2b00      	cmp	r3, #0
 8011104:	d10f      	bne.n	8011126 <HAL_RCC_OscConfig+0x28a>
 8011106:	2300      	movs	r3, #0
 8011108:	60bb      	str	r3, [r7, #8]
 801110a:	4b0f      	ldr	r3, [pc, #60]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 801110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801110e:	4a0e      	ldr	r2, [pc, #56]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8011110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011114:	6413      	str	r3, [r2, #64]	; 0x40
 8011116:	4b0c      	ldr	r3, [pc, #48]	; (8011148 <HAL_RCC_OscConfig+0x2ac>)
 8011118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801111e:	60bb      	str	r3, [r7, #8]
 8011120:	68bb      	ldr	r3, [r7, #8]
 8011122:	2301      	movs	r3, #1
 8011124:	75fb      	strb	r3, [r7, #23]
 8011126:	4b0b      	ldr	r3, [pc, #44]	; (8011154 <HAL_RCC_OscConfig+0x2b8>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801112e:	2b00      	cmp	r3, #0
 8011130:	d121      	bne.n	8011176 <HAL_RCC_OscConfig+0x2da>
 8011132:	4b08      	ldr	r3, [pc, #32]	; (8011154 <HAL_RCC_OscConfig+0x2b8>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	4a07      	ldr	r2, [pc, #28]	; (8011154 <HAL_RCC_OscConfig+0x2b8>)
 8011138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801113c:	6013      	str	r3, [r2, #0]
 801113e:	f7fd fcbd 	bl	800eabc <HAL_GetTick>
 8011142:	6138      	str	r0, [r7, #16]
 8011144:	e011      	b.n	801116a <HAL_RCC_OscConfig+0x2ce>
 8011146:	bf00      	nop
 8011148:	40023800 	.word	0x40023800
 801114c:	42470000 	.word	0x42470000
 8011150:	42470e80 	.word	0x42470e80
 8011154:	40007000 	.word	0x40007000
 8011158:	f7fd fcb0 	bl	800eabc <HAL_GetTick>
 801115c:	4602      	mov	r2, r0
 801115e:	693b      	ldr	r3, [r7, #16]
 8011160:	1ad3      	subs	r3, r2, r3
 8011162:	2b02      	cmp	r3, #2
 8011164:	d901      	bls.n	801116a <HAL_RCC_OscConfig+0x2ce>
 8011166:	2303      	movs	r3, #3
 8011168:	e106      	b.n	8011378 <HAL_RCC_OscConfig+0x4dc>
 801116a:	4b85      	ldr	r3, [pc, #532]	; (8011380 <HAL_RCC_OscConfig+0x4e4>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011172:	2b00      	cmp	r3, #0
 8011174:	d0f0      	beq.n	8011158 <HAL_RCC_OscConfig+0x2bc>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	689b      	ldr	r3, [r3, #8]
 801117a:	2b01      	cmp	r3, #1
 801117c:	d106      	bne.n	801118c <HAL_RCC_OscConfig+0x2f0>
 801117e:	4b81      	ldr	r3, [pc, #516]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 8011180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011182:	4a80      	ldr	r2, [pc, #512]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 8011184:	f043 0301 	orr.w	r3, r3, #1
 8011188:	6713      	str	r3, [r2, #112]	; 0x70
 801118a:	e01c      	b.n	80111c6 <HAL_RCC_OscConfig+0x32a>
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	689b      	ldr	r3, [r3, #8]
 8011190:	2b05      	cmp	r3, #5
 8011192:	d10c      	bne.n	80111ae <HAL_RCC_OscConfig+0x312>
 8011194:	4b7b      	ldr	r3, [pc, #492]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 8011196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011198:	4a7a      	ldr	r2, [pc, #488]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 801119a:	f043 0304 	orr.w	r3, r3, #4
 801119e:	6713      	str	r3, [r2, #112]	; 0x70
 80111a0:	4b78      	ldr	r3, [pc, #480]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 80111a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111a4:	4a77      	ldr	r2, [pc, #476]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 80111a6:	f043 0301 	orr.w	r3, r3, #1
 80111aa:	6713      	str	r3, [r2, #112]	; 0x70
 80111ac:	e00b      	b.n	80111c6 <HAL_RCC_OscConfig+0x32a>
 80111ae:	4b75      	ldr	r3, [pc, #468]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 80111b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111b2:	4a74      	ldr	r2, [pc, #464]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 80111b4:	f023 0301 	bic.w	r3, r3, #1
 80111b8:	6713      	str	r3, [r2, #112]	; 0x70
 80111ba:	4b72      	ldr	r3, [pc, #456]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 80111bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111be:	4a71      	ldr	r2, [pc, #452]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 80111c0:	f023 0304 	bic.w	r3, r3, #4
 80111c4:	6713      	str	r3, [r2, #112]	; 0x70
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	689b      	ldr	r3, [r3, #8]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d015      	beq.n	80111fa <HAL_RCC_OscConfig+0x35e>
 80111ce:	f7fd fc75 	bl	800eabc <HAL_GetTick>
 80111d2:	6138      	str	r0, [r7, #16]
 80111d4:	e00a      	b.n	80111ec <HAL_RCC_OscConfig+0x350>
 80111d6:	f7fd fc71 	bl	800eabc <HAL_GetTick>
 80111da:	4602      	mov	r2, r0
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	1ad3      	subs	r3, r2, r3
 80111e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80111e4:	4293      	cmp	r3, r2
 80111e6:	d901      	bls.n	80111ec <HAL_RCC_OscConfig+0x350>
 80111e8:	2303      	movs	r3, #3
 80111ea:	e0c5      	b.n	8011378 <HAL_RCC_OscConfig+0x4dc>
 80111ec:	4b65      	ldr	r3, [pc, #404]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 80111ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111f0:	f003 0302 	and.w	r3, r3, #2
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d0ee      	beq.n	80111d6 <HAL_RCC_OscConfig+0x33a>
 80111f8:	e014      	b.n	8011224 <HAL_RCC_OscConfig+0x388>
 80111fa:	f7fd fc5f 	bl	800eabc <HAL_GetTick>
 80111fe:	6138      	str	r0, [r7, #16]
 8011200:	e00a      	b.n	8011218 <HAL_RCC_OscConfig+0x37c>
 8011202:	f7fd fc5b 	bl	800eabc <HAL_GetTick>
 8011206:	4602      	mov	r2, r0
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	1ad3      	subs	r3, r2, r3
 801120c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011210:	4293      	cmp	r3, r2
 8011212:	d901      	bls.n	8011218 <HAL_RCC_OscConfig+0x37c>
 8011214:	2303      	movs	r3, #3
 8011216:	e0af      	b.n	8011378 <HAL_RCC_OscConfig+0x4dc>
 8011218:	4b5a      	ldr	r3, [pc, #360]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 801121a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801121c:	f003 0302 	and.w	r3, r3, #2
 8011220:	2b00      	cmp	r3, #0
 8011222:	d1ee      	bne.n	8011202 <HAL_RCC_OscConfig+0x366>
 8011224:	7dfb      	ldrb	r3, [r7, #23]
 8011226:	2b01      	cmp	r3, #1
 8011228:	d105      	bne.n	8011236 <HAL_RCC_OscConfig+0x39a>
 801122a:	4b56      	ldr	r3, [pc, #344]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 801122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801122e:	4a55      	ldr	r2, [pc, #340]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 8011230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011234:	6413      	str	r3, [r2, #64]	; 0x40
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	699b      	ldr	r3, [r3, #24]
 801123a:	2b00      	cmp	r3, #0
 801123c:	f000 809b 	beq.w	8011376 <HAL_RCC_OscConfig+0x4da>
 8011240:	4b50      	ldr	r3, [pc, #320]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 8011242:	689b      	ldr	r3, [r3, #8]
 8011244:	f003 030c 	and.w	r3, r3, #12
 8011248:	2b08      	cmp	r3, #8
 801124a:	d05c      	beq.n	8011306 <HAL_RCC_OscConfig+0x46a>
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	699b      	ldr	r3, [r3, #24]
 8011250:	2b02      	cmp	r3, #2
 8011252:	d141      	bne.n	80112d8 <HAL_RCC_OscConfig+0x43c>
 8011254:	4b4c      	ldr	r3, [pc, #304]	; (8011388 <HAL_RCC_OscConfig+0x4ec>)
 8011256:	2200      	movs	r2, #0
 8011258:	601a      	str	r2, [r3, #0]
 801125a:	f7fd fc2f 	bl	800eabc <HAL_GetTick>
 801125e:	6138      	str	r0, [r7, #16]
 8011260:	e008      	b.n	8011274 <HAL_RCC_OscConfig+0x3d8>
 8011262:	f7fd fc2b 	bl	800eabc <HAL_GetTick>
 8011266:	4602      	mov	r2, r0
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	1ad3      	subs	r3, r2, r3
 801126c:	2b02      	cmp	r3, #2
 801126e:	d901      	bls.n	8011274 <HAL_RCC_OscConfig+0x3d8>
 8011270:	2303      	movs	r3, #3
 8011272:	e081      	b.n	8011378 <HAL_RCC_OscConfig+0x4dc>
 8011274:	4b43      	ldr	r3, [pc, #268]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801127c:	2b00      	cmp	r3, #0
 801127e:	d1f0      	bne.n	8011262 <HAL_RCC_OscConfig+0x3c6>
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	69da      	ldr	r2, [r3, #28]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	6a1b      	ldr	r3, [r3, #32]
 8011288:	431a      	orrs	r2, r3
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801128e:	019b      	lsls	r3, r3, #6
 8011290:	431a      	orrs	r2, r3
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011296:	085b      	lsrs	r3, r3, #1
 8011298:	3b01      	subs	r3, #1
 801129a:	041b      	lsls	r3, r3, #16
 801129c:	431a      	orrs	r2, r3
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112a2:	061b      	lsls	r3, r3, #24
 80112a4:	4937      	ldr	r1, [pc, #220]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 80112a6:	4313      	orrs	r3, r2
 80112a8:	604b      	str	r3, [r1, #4]
 80112aa:	4b37      	ldr	r3, [pc, #220]	; (8011388 <HAL_RCC_OscConfig+0x4ec>)
 80112ac:	2201      	movs	r2, #1
 80112ae:	601a      	str	r2, [r3, #0]
 80112b0:	f7fd fc04 	bl	800eabc <HAL_GetTick>
 80112b4:	6138      	str	r0, [r7, #16]
 80112b6:	e008      	b.n	80112ca <HAL_RCC_OscConfig+0x42e>
 80112b8:	f7fd fc00 	bl	800eabc <HAL_GetTick>
 80112bc:	4602      	mov	r2, r0
 80112be:	693b      	ldr	r3, [r7, #16]
 80112c0:	1ad3      	subs	r3, r2, r3
 80112c2:	2b02      	cmp	r3, #2
 80112c4:	d901      	bls.n	80112ca <HAL_RCC_OscConfig+0x42e>
 80112c6:	2303      	movs	r3, #3
 80112c8:	e056      	b.n	8011378 <HAL_RCC_OscConfig+0x4dc>
 80112ca:	4b2e      	ldr	r3, [pc, #184]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d0f0      	beq.n	80112b8 <HAL_RCC_OscConfig+0x41c>
 80112d6:	e04e      	b.n	8011376 <HAL_RCC_OscConfig+0x4da>
 80112d8:	4b2b      	ldr	r3, [pc, #172]	; (8011388 <HAL_RCC_OscConfig+0x4ec>)
 80112da:	2200      	movs	r2, #0
 80112dc:	601a      	str	r2, [r3, #0]
 80112de:	f7fd fbed 	bl	800eabc <HAL_GetTick>
 80112e2:	6138      	str	r0, [r7, #16]
 80112e4:	e008      	b.n	80112f8 <HAL_RCC_OscConfig+0x45c>
 80112e6:	f7fd fbe9 	bl	800eabc <HAL_GetTick>
 80112ea:	4602      	mov	r2, r0
 80112ec:	693b      	ldr	r3, [r7, #16]
 80112ee:	1ad3      	subs	r3, r2, r3
 80112f0:	2b02      	cmp	r3, #2
 80112f2:	d901      	bls.n	80112f8 <HAL_RCC_OscConfig+0x45c>
 80112f4:	2303      	movs	r3, #3
 80112f6:	e03f      	b.n	8011378 <HAL_RCC_OscConfig+0x4dc>
 80112f8:	4b22      	ldr	r3, [pc, #136]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011300:	2b00      	cmp	r3, #0
 8011302:	d1f0      	bne.n	80112e6 <HAL_RCC_OscConfig+0x44a>
 8011304:	e037      	b.n	8011376 <HAL_RCC_OscConfig+0x4da>
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	699b      	ldr	r3, [r3, #24]
 801130a:	2b01      	cmp	r3, #1
 801130c:	d101      	bne.n	8011312 <HAL_RCC_OscConfig+0x476>
 801130e:	2301      	movs	r3, #1
 8011310:	e032      	b.n	8011378 <HAL_RCC_OscConfig+0x4dc>
 8011312:	4b1c      	ldr	r3, [pc, #112]	; (8011384 <HAL_RCC_OscConfig+0x4e8>)
 8011314:	685b      	ldr	r3, [r3, #4]
 8011316:	60fb      	str	r3, [r7, #12]
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	699b      	ldr	r3, [r3, #24]
 801131c:	2b01      	cmp	r3, #1
 801131e:	d028      	beq.n	8011372 <HAL_RCC_OscConfig+0x4d6>
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	69db      	ldr	r3, [r3, #28]
 801132a:	429a      	cmp	r2, r3
 801132c:	d121      	bne.n	8011372 <HAL_RCC_OscConfig+0x4d6>
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6a1b      	ldr	r3, [r3, #32]
 8011338:	429a      	cmp	r2, r3
 801133a:	d11a      	bne.n	8011372 <HAL_RCC_OscConfig+0x4d6>
 801133c:	68fa      	ldr	r2, [r7, #12]
 801133e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8011342:	4013      	ands	r3, r2
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011348:	0192      	lsls	r2, r2, #6
 801134a:	4293      	cmp	r3, r2
 801134c:	d111      	bne.n	8011372 <HAL_RCC_OscConfig+0x4d6>
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011358:	085b      	lsrs	r3, r3, #1
 801135a:	3b01      	subs	r3, #1
 801135c:	041b      	lsls	r3, r3, #16
 801135e:	429a      	cmp	r2, r3
 8011360:	d107      	bne.n	8011372 <HAL_RCC_OscConfig+0x4d6>
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801136c:	061b      	lsls	r3, r3, #24
 801136e:	429a      	cmp	r2, r3
 8011370:	d001      	beq.n	8011376 <HAL_RCC_OscConfig+0x4da>
 8011372:	2301      	movs	r3, #1
 8011374:	e000      	b.n	8011378 <HAL_RCC_OscConfig+0x4dc>
 8011376:	2300      	movs	r3, #0
 8011378:	4618      	mov	r0, r3
 801137a:	3718      	adds	r7, #24
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}
 8011380:	40007000 	.word	0x40007000
 8011384:	40023800 	.word	0x40023800
 8011388:	42470060 	.word	0x42470060

0801138c <HAL_RCC_ClockConfig>:
 801138c:	b580      	push	{r7, lr}
 801138e:	b084      	sub	sp, #16
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
 8011394:	6039      	str	r1, [r7, #0]
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d101      	bne.n	80113a0 <HAL_RCC_ClockConfig+0x14>
 801139c:	2301      	movs	r3, #1
 801139e:	e0cc      	b.n	801153a <HAL_RCC_ClockConfig+0x1ae>
 80113a0:	4b68      	ldr	r3, [pc, #416]	; (8011544 <HAL_RCC_ClockConfig+0x1b8>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	f003 0307 	and.w	r3, r3, #7
 80113a8:	683a      	ldr	r2, [r7, #0]
 80113aa:	429a      	cmp	r2, r3
 80113ac:	d90c      	bls.n	80113c8 <HAL_RCC_ClockConfig+0x3c>
 80113ae:	4b65      	ldr	r3, [pc, #404]	; (8011544 <HAL_RCC_ClockConfig+0x1b8>)
 80113b0:	683a      	ldr	r2, [r7, #0]
 80113b2:	b2d2      	uxtb	r2, r2
 80113b4:	701a      	strb	r2, [r3, #0]
 80113b6:	4b63      	ldr	r3, [pc, #396]	; (8011544 <HAL_RCC_ClockConfig+0x1b8>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	f003 0307 	and.w	r3, r3, #7
 80113be:	683a      	ldr	r2, [r7, #0]
 80113c0:	429a      	cmp	r2, r3
 80113c2:	d001      	beq.n	80113c8 <HAL_RCC_ClockConfig+0x3c>
 80113c4:	2301      	movs	r3, #1
 80113c6:	e0b8      	b.n	801153a <HAL_RCC_ClockConfig+0x1ae>
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	f003 0302 	and.w	r3, r3, #2
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d020      	beq.n	8011416 <HAL_RCC_ClockConfig+0x8a>
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	f003 0304 	and.w	r3, r3, #4
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d005      	beq.n	80113ec <HAL_RCC_ClockConfig+0x60>
 80113e0:	4b59      	ldr	r3, [pc, #356]	; (8011548 <HAL_RCC_ClockConfig+0x1bc>)
 80113e2:	689b      	ldr	r3, [r3, #8]
 80113e4:	4a58      	ldr	r2, [pc, #352]	; (8011548 <HAL_RCC_ClockConfig+0x1bc>)
 80113e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80113ea:	6093      	str	r3, [r2, #8]
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	f003 0308 	and.w	r3, r3, #8
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d005      	beq.n	8011404 <HAL_RCC_ClockConfig+0x78>
 80113f8:	4b53      	ldr	r3, [pc, #332]	; (8011548 <HAL_RCC_ClockConfig+0x1bc>)
 80113fa:	689b      	ldr	r3, [r3, #8]
 80113fc:	4a52      	ldr	r2, [pc, #328]	; (8011548 <HAL_RCC_ClockConfig+0x1bc>)
 80113fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011402:	6093      	str	r3, [r2, #8]
 8011404:	4b50      	ldr	r3, [pc, #320]	; (8011548 <HAL_RCC_ClockConfig+0x1bc>)
 8011406:	689b      	ldr	r3, [r3, #8]
 8011408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	689b      	ldr	r3, [r3, #8]
 8011410:	494d      	ldr	r1, [pc, #308]	; (8011548 <HAL_RCC_ClockConfig+0x1bc>)
 8011412:	4313      	orrs	r3, r2
 8011414:	608b      	str	r3, [r1, #8]
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	f003 0301 	and.w	r3, r3, #1
 801141e:	2b00      	cmp	r3, #0
 8011420:	d044      	beq.n	80114ac <HAL_RCC_ClockConfig+0x120>
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	685b      	ldr	r3, [r3, #4]
 8011426:	2b01      	cmp	r3, #1
 8011428:	d107      	bne.n	801143a <HAL_RCC_ClockConfig+0xae>
 801142a:	4b47      	ldr	r3, [pc, #284]	; (8011548 <HAL_RCC_ClockConfig+0x1bc>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011432:	2b00      	cmp	r3, #0
 8011434:	d119      	bne.n	801146a <HAL_RCC_ClockConfig+0xde>
 8011436:	2301      	movs	r3, #1
 8011438:	e07f      	b.n	801153a <HAL_RCC_ClockConfig+0x1ae>
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	2b02      	cmp	r3, #2
 8011440:	d003      	beq.n	801144a <HAL_RCC_ClockConfig+0xbe>
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	685b      	ldr	r3, [r3, #4]
 8011446:	2b03      	cmp	r3, #3
 8011448:	d107      	bne.n	801145a <HAL_RCC_ClockConfig+0xce>
 801144a:	4b3f      	ldr	r3, [pc, #252]	; (8011548 <HAL_RCC_ClockConfig+0x1bc>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011452:	2b00      	cmp	r3, #0
 8011454:	d109      	bne.n	801146a <HAL_RCC_ClockConfig+0xde>
 8011456:	2301      	movs	r3, #1
 8011458:	e06f      	b.n	801153a <HAL_RCC_ClockConfig+0x1ae>
 801145a:	4b3b      	ldr	r3, [pc, #236]	; (8011548 <HAL_RCC_ClockConfig+0x1bc>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f003 0302 	and.w	r3, r3, #2
 8011462:	2b00      	cmp	r3, #0
 8011464:	d101      	bne.n	801146a <HAL_RCC_ClockConfig+0xde>
 8011466:	2301      	movs	r3, #1
 8011468:	e067      	b.n	801153a <HAL_RCC_ClockConfig+0x1ae>
 801146a:	4b37      	ldr	r3, [pc, #220]	; (8011548 <HAL_RCC_ClockConfig+0x1bc>)
 801146c:	689b      	ldr	r3, [r3, #8]
 801146e:	f023 0203 	bic.w	r2, r3, #3
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	685b      	ldr	r3, [r3, #4]
 8011476:	4934      	ldr	r1, [pc, #208]	; (8011548 <HAL_RCC_ClockConfig+0x1bc>)
 8011478:	4313      	orrs	r3, r2
 801147a:	608b      	str	r3, [r1, #8]
 801147c:	f7fd fb1e 	bl	800eabc <HAL_GetTick>
 8011480:	60f8      	str	r0, [r7, #12]
 8011482:	e00a      	b.n	801149a <HAL_RCC_ClockConfig+0x10e>
 8011484:	f7fd fb1a 	bl	800eabc <HAL_GetTick>
 8011488:	4602      	mov	r2, r0
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	1ad3      	subs	r3, r2, r3
 801148e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011492:	4293      	cmp	r3, r2
 8011494:	d901      	bls.n	801149a <HAL_RCC_ClockConfig+0x10e>
 8011496:	2303      	movs	r3, #3
 8011498:	e04f      	b.n	801153a <HAL_RCC_ClockConfig+0x1ae>
 801149a:	4b2b      	ldr	r3, [pc, #172]	; (8011548 <HAL_RCC_ClockConfig+0x1bc>)
 801149c:	689b      	ldr	r3, [r3, #8]
 801149e:	f003 020c 	and.w	r2, r3, #12
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	009b      	lsls	r3, r3, #2
 80114a8:	429a      	cmp	r2, r3
 80114aa:	d1eb      	bne.n	8011484 <HAL_RCC_ClockConfig+0xf8>
 80114ac:	4b25      	ldr	r3, [pc, #148]	; (8011544 <HAL_RCC_ClockConfig+0x1b8>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	f003 0307 	and.w	r3, r3, #7
 80114b4:	683a      	ldr	r2, [r7, #0]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d20c      	bcs.n	80114d4 <HAL_RCC_ClockConfig+0x148>
 80114ba:	4b22      	ldr	r3, [pc, #136]	; (8011544 <HAL_RCC_ClockConfig+0x1b8>)
 80114bc:	683a      	ldr	r2, [r7, #0]
 80114be:	b2d2      	uxtb	r2, r2
 80114c0:	701a      	strb	r2, [r3, #0]
 80114c2:	4b20      	ldr	r3, [pc, #128]	; (8011544 <HAL_RCC_ClockConfig+0x1b8>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	f003 0307 	and.w	r3, r3, #7
 80114ca:	683a      	ldr	r2, [r7, #0]
 80114cc:	429a      	cmp	r2, r3
 80114ce:	d001      	beq.n	80114d4 <HAL_RCC_ClockConfig+0x148>
 80114d0:	2301      	movs	r3, #1
 80114d2:	e032      	b.n	801153a <HAL_RCC_ClockConfig+0x1ae>
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	f003 0304 	and.w	r3, r3, #4
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d008      	beq.n	80114f2 <HAL_RCC_ClockConfig+0x166>
 80114e0:	4b19      	ldr	r3, [pc, #100]	; (8011548 <HAL_RCC_ClockConfig+0x1bc>)
 80114e2:	689b      	ldr	r3, [r3, #8]
 80114e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	68db      	ldr	r3, [r3, #12]
 80114ec:	4916      	ldr	r1, [pc, #88]	; (8011548 <HAL_RCC_ClockConfig+0x1bc>)
 80114ee:	4313      	orrs	r3, r2
 80114f0:	608b      	str	r3, [r1, #8]
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	f003 0308 	and.w	r3, r3, #8
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d009      	beq.n	8011512 <HAL_RCC_ClockConfig+0x186>
 80114fe:	4b12      	ldr	r3, [pc, #72]	; (8011548 <HAL_RCC_ClockConfig+0x1bc>)
 8011500:	689b      	ldr	r3, [r3, #8]
 8011502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	691b      	ldr	r3, [r3, #16]
 801150a:	00db      	lsls	r3, r3, #3
 801150c:	490e      	ldr	r1, [pc, #56]	; (8011548 <HAL_RCC_ClockConfig+0x1bc>)
 801150e:	4313      	orrs	r3, r2
 8011510:	608b      	str	r3, [r1, #8]
 8011512:	f000 f821 	bl	8011558 <HAL_RCC_GetSysClockFreq>
 8011516:	4602      	mov	r2, r0
 8011518:	4b0b      	ldr	r3, [pc, #44]	; (8011548 <HAL_RCC_ClockConfig+0x1bc>)
 801151a:	689b      	ldr	r3, [r3, #8]
 801151c:	091b      	lsrs	r3, r3, #4
 801151e:	f003 030f 	and.w	r3, r3, #15
 8011522:	490a      	ldr	r1, [pc, #40]	; (801154c <HAL_RCC_ClockConfig+0x1c0>)
 8011524:	5ccb      	ldrb	r3, [r1, r3]
 8011526:	fa22 f303 	lsr.w	r3, r2, r3
 801152a:	4a09      	ldr	r2, [pc, #36]	; (8011550 <HAL_RCC_ClockConfig+0x1c4>)
 801152c:	6013      	str	r3, [r2, #0]
 801152e:	4b09      	ldr	r3, [pc, #36]	; (8011554 <HAL_RCC_ClockConfig+0x1c8>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	4618      	mov	r0, r3
 8011534:	f7fb fc40 	bl	800cdb8 <HAL_InitTick>
 8011538:	2300      	movs	r3, #0
 801153a:	4618      	mov	r0, r3
 801153c:	3710      	adds	r7, #16
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}
 8011542:	bf00      	nop
 8011544:	40023c00 	.word	0x40023c00
 8011548:	40023800 	.word	0x40023800
 801154c:	0801bad0 	.word	0x0801bad0
 8011550:	20000014 	.word	0x20000014
 8011554:	20000048 	.word	0x20000048

08011558 <HAL_RCC_GetSysClockFreq>:
 8011558:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801155c:	b084      	sub	sp, #16
 801155e:	af00      	add	r7, sp, #0
 8011560:	2300      	movs	r3, #0
 8011562:	607b      	str	r3, [r7, #4]
 8011564:	2300      	movs	r3, #0
 8011566:	60fb      	str	r3, [r7, #12]
 8011568:	2300      	movs	r3, #0
 801156a:	603b      	str	r3, [r7, #0]
 801156c:	2300      	movs	r3, #0
 801156e:	60bb      	str	r3, [r7, #8]
 8011570:	4b67      	ldr	r3, [pc, #412]	; (8011710 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8011572:	689b      	ldr	r3, [r3, #8]
 8011574:	f003 030c 	and.w	r3, r3, #12
 8011578:	2b08      	cmp	r3, #8
 801157a:	d00d      	beq.n	8011598 <HAL_RCC_GetSysClockFreq+0x40>
 801157c:	2b08      	cmp	r3, #8
 801157e:	f200 80bd 	bhi.w	80116fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8011582:	2b00      	cmp	r3, #0
 8011584:	d002      	beq.n	801158c <HAL_RCC_GetSysClockFreq+0x34>
 8011586:	2b04      	cmp	r3, #4
 8011588:	d003      	beq.n	8011592 <HAL_RCC_GetSysClockFreq+0x3a>
 801158a:	e0b7      	b.n	80116fc <HAL_RCC_GetSysClockFreq+0x1a4>
 801158c:	4b61      	ldr	r3, [pc, #388]	; (8011714 <HAL_RCC_GetSysClockFreq+0x1bc>)
 801158e:	60bb      	str	r3, [r7, #8]
 8011590:	e0b7      	b.n	8011702 <HAL_RCC_GetSysClockFreq+0x1aa>
 8011592:	4b61      	ldr	r3, [pc, #388]	; (8011718 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8011594:	60bb      	str	r3, [r7, #8]
 8011596:	e0b4      	b.n	8011702 <HAL_RCC_GetSysClockFreq+0x1aa>
 8011598:	4b5d      	ldr	r3, [pc, #372]	; (8011710 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801159a:	685b      	ldr	r3, [r3, #4]
 801159c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80115a0:	607b      	str	r3, [r7, #4]
 80115a2:	4b5b      	ldr	r3, [pc, #364]	; (8011710 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80115a4:	685b      	ldr	r3, [r3, #4]
 80115a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d04d      	beq.n	801164a <HAL_RCC_GetSysClockFreq+0xf2>
 80115ae:	4b58      	ldr	r3, [pc, #352]	; (8011710 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80115b0:	685b      	ldr	r3, [r3, #4]
 80115b2:	099b      	lsrs	r3, r3, #6
 80115b4:	461a      	mov	r2, r3
 80115b6:	f04f 0300 	mov.w	r3, #0
 80115ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80115be:	f04f 0100 	mov.w	r1, #0
 80115c2:	ea02 0800 	and.w	r8, r2, r0
 80115c6:	ea03 0901 	and.w	r9, r3, r1
 80115ca:	4640      	mov	r0, r8
 80115cc:	4649      	mov	r1, r9
 80115ce:	f04f 0200 	mov.w	r2, #0
 80115d2:	f04f 0300 	mov.w	r3, #0
 80115d6:	014b      	lsls	r3, r1, #5
 80115d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80115dc:	0142      	lsls	r2, r0, #5
 80115de:	4610      	mov	r0, r2
 80115e0:	4619      	mov	r1, r3
 80115e2:	ebb0 0008 	subs.w	r0, r0, r8
 80115e6:	eb61 0109 	sbc.w	r1, r1, r9
 80115ea:	f04f 0200 	mov.w	r2, #0
 80115ee:	f04f 0300 	mov.w	r3, #0
 80115f2:	018b      	lsls	r3, r1, #6
 80115f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80115f8:	0182      	lsls	r2, r0, #6
 80115fa:	1a12      	subs	r2, r2, r0
 80115fc:	eb63 0301 	sbc.w	r3, r3, r1
 8011600:	f04f 0000 	mov.w	r0, #0
 8011604:	f04f 0100 	mov.w	r1, #0
 8011608:	00d9      	lsls	r1, r3, #3
 801160a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801160e:	00d0      	lsls	r0, r2, #3
 8011610:	4602      	mov	r2, r0
 8011612:	460b      	mov	r3, r1
 8011614:	eb12 0208 	adds.w	r2, r2, r8
 8011618:	eb43 0309 	adc.w	r3, r3, r9
 801161c:	f04f 0000 	mov.w	r0, #0
 8011620:	f04f 0100 	mov.w	r1, #0
 8011624:	0259      	lsls	r1, r3, #9
 8011626:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 801162a:	0250      	lsls	r0, r2, #9
 801162c:	4602      	mov	r2, r0
 801162e:	460b      	mov	r3, r1
 8011630:	4610      	mov	r0, r2
 8011632:	4619      	mov	r1, r3
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	461a      	mov	r2, r3
 8011638:	f04f 0300 	mov.w	r3, #0
 801163c:	f7fa fd58 	bl	800c0f0 <__aeabi_uldivmod>
 8011640:	4602      	mov	r2, r0
 8011642:	460b      	mov	r3, r1
 8011644:	4613      	mov	r3, r2
 8011646:	60fb      	str	r3, [r7, #12]
 8011648:	e04a      	b.n	80116e0 <HAL_RCC_GetSysClockFreq+0x188>
 801164a:	4b31      	ldr	r3, [pc, #196]	; (8011710 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801164c:	685b      	ldr	r3, [r3, #4]
 801164e:	099b      	lsrs	r3, r3, #6
 8011650:	461a      	mov	r2, r3
 8011652:	f04f 0300 	mov.w	r3, #0
 8011656:	f240 10ff 	movw	r0, #511	; 0x1ff
 801165a:	f04f 0100 	mov.w	r1, #0
 801165e:	ea02 0400 	and.w	r4, r2, r0
 8011662:	ea03 0501 	and.w	r5, r3, r1
 8011666:	4620      	mov	r0, r4
 8011668:	4629      	mov	r1, r5
 801166a:	f04f 0200 	mov.w	r2, #0
 801166e:	f04f 0300 	mov.w	r3, #0
 8011672:	014b      	lsls	r3, r1, #5
 8011674:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8011678:	0142      	lsls	r2, r0, #5
 801167a:	4610      	mov	r0, r2
 801167c:	4619      	mov	r1, r3
 801167e:	1b00      	subs	r0, r0, r4
 8011680:	eb61 0105 	sbc.w	r1, r1, r5
 8011684:	f04f 0200 	mov.w	r2, #0
 8011688:	f04f 0300 	mov.w	r3, #0
 801168c:	018b      	lsls	r3, r1, #6
 801168e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8011692:	0182      	lsls	r2, r0, #6
 8011694:	1a12      	subs	r2, r2, r0
 8011696:	eb63 0301 	sbc.w	r3, r3, r1
 801169a:	f04f 0000 	mov.w	r0, #0
 801169e:	f04f 0100 	mov.w	r1, #0
 80116a2:	00d9      	lsls	r1, r3, #3
 80116a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80116a8:	00d0      	lsls	r0, r2, #3
 80116aa:	4602      	mov	r2, r0
 80116ac:	460b      	mov	r3, r1
 80116ae:	1912      	adds	r2, r2, r4
 80116b0:	eb45 0303 	adc.w	r3, r5, r3
 80116b4:	f04f 0000 	mov.w	r0, #0
 80116b8:	f04f 0100 	mov.w	r1, #0
 80116bc:	0299      	lsls	r1, r3, #10
 80116be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80116c2:	0290      	lsls	r0, r2, #10
 80116c4:	4602      	mov	r2, r0
 80116c6:	460b      	mov	r3, r1
 80116c8:	4610      	mov	r0, r2
 80116ca:	4619      	mov	r1, r3
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	461a      	mov	r2, r3
 80116d0:	f04f 0300 	mov.w	r3, #0
 80116d4:	f7fa fd0c 	bl	800c0f0 <__aeabi_uldivmod>
 80116d8:	4602      	mov	r2, r0
 80116da:	460b      	mov	r3, r1
 80116dc:	4613      	mov	r3, r2
 80116de:	60fb      	str	r3, [r7, #12]
 80116e0:	4b0b      	ldr	r3, [pc, #44]	; (8011710 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	0c1b      	lsrs	r3, r3, #16
 80116e6:	f003 0303 	and.w	r3, r3, #3
 80116ea:	3301      	adds	r3, #1
 80116ec:	005b      	lsls	r3, r3, #1
 80116ee:	603b      	str	r3, [r7, #0]
 80116f0:	68fa      	ldr	r2, [r7, #12]
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80116f8:	60bb      	str	r3, [r7, #8]
 80116fa:	e002      	b.n	8011702 <HAL_RCC_GetSysClockFreq+0x1aa>
 80116fc:	4b05      	ldr	r3, [pc, #20]	; (8011714 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80116fe:	60bb      	str	r3, [r7, #8]
 8011700:	bf00      	nop
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	4618      	mov	r0, r3
 8011706:	3710      	adds	r7, #16
 8011708:	46bd      	mov	sp, r7
 801170a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801170e:	bf00      	nop
 8011710:	40023800 	.word	0x40023800
 8011714:	00f42400 	.word	0x00f42400
 8011718:	007a1200 	.word	0x007a1200

0801171c <HAL_RCC_GetHCLKFreq>:
 801171c:	b480      	push	{r7}
 801171e:	af00      	add	r7, sp, #0
 8011720:	4b03      	ldr	r3, [pc, #12]	; (8011730 <HAL_RCC_GetHCLKFreq+0x14>)
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	4618      	mov	r0, r3
 8011726:	46bd      	mov	sp, r7
 8011728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172c:	4770      	bx	lr
 801172e:	bf00      	nop
 8011730:	20000014 	.word	0x20000014

08011734 <HAL_RCC_GetPCLK1Freq>:
 8011734:	b580      	push	{r7, lr}
 8011736:	af00      	add	r7, sp, #0
 8011738:	f7ff fff0 	bl	801171c <HAL_RCC_GetHCLKFreq>
 801173c:	4602      	mov	r2, r0
 801173e:	4b05      	ldr	r3, [pc, #20]	; (8011754 <HAL_RCC_GetPCLK1Freq+0x20>)
 8011740:	689b      	ldr	r3, [r3, #8]
 8011742:	0a9b      	lsrs	r3, r3, #10
 8011744:	f003 0307 	and.w	r3, r3, #7
 8011748:	4903      	ldr	r1, [pc, #12]	; (8011758 <HAL_RCC_GetPCLK1Freq+0x24>)
 801174a:	5ccb      	ldrb	r3, [r1, r3]
 801174c:	fa22 f303 	lsr.w	r3, r2, r3
 8011750:	4618      	mov	r0, r3
 8011752:	bd80      	pop	{r7, pc}
 8011754:	40023800 	.word	0x40023800
 8011758:	0801bae0 	.word	0x0801bae0

0801175c <HAL_RCC_GetPCLK2Freq>:
 801175c:	b580      	push	{r7, lr}
 801175e:	af00      	add	r7, sp, #0
 8011760:	f7ff ffdc 	bl	801171c <HAL_RCC_GetHCLKFreq>
 8011764:	4602      	mov	r2, r0
 8011766:	4b05      	ldr	r3, [pc, #20]	; (801177c <HAL_RCC_GetPCLK2Freq+0x20>)
 8011768:	689b      	ldr	r3, [r3, #8]
 801176a:	0b5b      	lsrs	r3, r3, #13
 801176c:	f003 0307 	and.w	r3, r3, #7
 8011770:	4903      	ldr	r1, [pc, #12]	; (8011780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011772:	5ccb      	ldrb	r3, [r1, r3]
 8011774:	fa22 f303 	lsr.w	r3, r2, r3
 8011778:	4618      	mov	r0, r3
 801177a:	bd80      	pop	{r7, pc}
 801177c:	40023800 	.word	0x40023800
 8011780:	0801bae0 	.word	0x0801bae0

08011784 <HAL_RCC_GetClockConfig>:
 8011784:	b480      	push	{r7}
 8011786:	b083      	sub	sp, #12
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	6039      	str	r1, [r7, #0]
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	220f      	movs	r2, #15
 8011792:	601a      	str	r2, [r3, #0]
 8011794:	4b12      	ldr	r3, [pc, #72]	; (80117e0 <HAL_RCC_GetClockConfig+0x5c>)
 8011796:	689b      	ldr	r3, [r3, #8]
 8011798:	f003 0203 	and.w	r2, r3, #3
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	605a      	str	r2, [r3, #4]
 80117a0:	4b0f      	ldr	r3, [pc, #60]	; (80117e0 <HAL_RCC_GetClockConfig+0x5c>)
 80117a2:	689b      	ldr	r3, [r3, #8]
 80117a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	609a      	str	r2, [r3, #8]
 80117ac:	4b0c      	ldr	r3, [pc, #48]	; (80117e0 <HAL_RCC_GetClockConfig+0x5c>)
 80117ae:	689b      	ldr	r3, [r3, #8]
 80117b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	60da      	str	r2, [r3, #12]
 80117b8:	4b09      	ldr	r3, [pc, #36]	; (80117e0 <HAL_RCC_GetClockConfig+0x5c>)
 80117ba:	689b      	ldr	r3, [r3, #8]
 80117bc:	08db      	lsrs	r3, r3, #3
 80117be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	611a      	str	r2, [r3, #16]
 80117c6:	4b07      	ldr	r3, [pc, #28]	; (80117e4 <HAL_RCC_GetClockConfig+0x60>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	f003 0207 	and.w	r2, r3, #7
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	601a      	str	r2, [r3, #0]
 80117d2:	bf00      	nop
 80117d4:	370c      	adds	r7, #12
 80117d6:	46bd      	mov	sp, r7
 80117d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117dc:	4770      	bx	lr
 80117de:	bf00      	nop
 80117e0:	40023800 	.word	0x40023800
 80117e4:	40023c00 	.word	0x40023c00

080117e8 <HAL_SPI_Init>:
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d101      	bne.n	80117fa <HAL_SPI_Init+0x12>
 80117f6:	2301      	movs	r3, #1
 80117f8:	e07b      	b.n	80118f2 <HAL_SPI_Init+0x10a>
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d108      	bne.n	8011814 <HAL_SPI_Init+0x2c>
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	685b      	ldr	r3, [r3, #4]
 8011806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801180a:	d009      	beq.n	8011820 <HAL_SPI_Init+0x38>
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2200      	movs	r2, #0
 8011810:	61da      	str	r2, [r3, #28]
 8011812:	e005      	b.n	8011820 <HAL_SPI_Init+0x38>
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	2200      	movs	r2, #0
 8011818:	611a      	str	r2, [r3, #16]
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	2200      	movs	r2, #0
 801181e:	615a      	str	r2, [r3, #20]
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2200      	movs	r2, #0
 8011824:	629a      	str	r2, [r3, #40]	; 0x28
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801182c:	b2db      	uxtb	r3, r3
 801182e:	2b00      	cmp	r3, #0
 8011830:	d106      	bne.n	8011840 <HAL_SPI_Init+0x58>
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	2200      	movs	r2, #0
 8011836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	f7fb f99a 	bl	800cb74 <HAL_SPI_MspInit>
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2202      	movs	r2, #2
 8011844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	681a      	ldr	r2, [r3, #0]
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011856:	601a      	str	r2, [r3, #0]
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	685b      	ldr	r3, [r3, #4]
 801185c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	689b      	ldr	r3, [r3, #8]
 8011864:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8011868:	431a      	orrs	r2, r3
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	68db      	ldr	r3, [r3, #12]
 801186e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011872:	431a      	orrs	r2, r3
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	691b      	ldr	r3, [r3, #16]
 8011878:	f003 0302 	and.w	r3, r3, #2
 801187c:	431a      	orrs	r2, r3
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	695b      	ldr	r3, [r3, #20]
 8011882:	f003 0301 	and.w	r3, r3, #1
 8011886:	431a      	orrs	r2, r3
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	699b      	ldr	r3, [r3, #24]
 801188c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011890:	431a      	orrs	r2, r3
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	69db      	ldr	r3, [r3, #28]
 8011896:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801189a:	431a      	orrs	r2, r3
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6a1b      	ldr	r3, [r3, #32]
 80118a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80118a4:	ea42 0103 	orr.w	r1, r2, r3
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	430a      	orrs	r2, r1
 80118b6:	601a      	str	r2, [r3, #0]
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	699b      	ldr	r3, [r3, #24]
 80118bc:	0c1b      	lsrs	r3, r3, #16
 80118be:	f003 0104 	and.w	r1, r3, #4
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118c6:	f003 0210 	and.w	r2, r3, #16
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	430a      	orrs	r2, r1
 80118d0:	605a      	str	r2, [r3, #4]
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	69da      	ldr	r2, [r3, #28]
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80118e0:	61da      	str	r2, [r3, #28]
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	2200      	movs	r2, #0
 80118e6:	655a      	str	r2, [r3, #84]	; 0x54
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2201      	movs	r2, #1
 80118ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80118f0:	2300      	movs	r3, #0
 80118f2:	4618      	mov	r0, r3
 80118f4:	3708      	adds	r7, #8
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}

080118fa <HAL_SPI_Transmit>:
 80118fa:	b580      	push	{r7, lr}
 80118fc:	b088      	sub	sp, #32
 80118fe:	af00      	add	r7, sp, #0
 8011900:	60f8      	str	r0, [r7, #12]
 8011902:	60b9      	str	r1, [r7, #8]
 8011904:	603b      	str	r3, [r7, #0]
 8011906:	4613      	mov	r3, r2
 8011908:	80fb      	strh	r3, [r7, #6]
 801190a:	2300      	movs	r3, #0
 801190c:	77fb      	strb	r3, [r7, #31]
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011914:	2b01      	cmp	r3, #1
 8011916:	d101      	bne.n	801191c <HAL_SPI_Transmit+0x22>
 8011918:	2302      	movs	r3, #2
 801191a:	e126      	b.n	8011b6a <HAL_SPI_Transmit+0x270>
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	2201      	movs	r2, #1
 8011920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8011924:	f7fd f8ca 	bl	800eabc <HAL_GetTick>
 8011928:	61b8      	str	r0, [r7, #24]
 801192a:	88fb      	ldrh	r3, [r7, #6]
 801192c:	82fb      	strh	r3, [r7, #22]
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011934:	b2db      	uxtb	r3, r3
 8011936:	2b01      	cmp	r3, #1
 8011938:	d002      	beq.n	8011940 <HAL_SPI_Transmit+0x46>
 801193a:	2302      	movs	r3, #2
 801193c:	77fb      	strb	r3, [r7, #31]
 801193e:	e10b      	b.n	8011b58 <HAL_SPI_Transmit+0x25e>
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d002      	beq.n	801194c <HAL_SPI_Transmit+0x52>
 8011946:	88fb      	ldrh	r3, [r7, #6]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d102      	bne.n	8011952 <HAL_SPI_Transmit+0x58>
 801194c:	2301      	movs	r3, #1
 801194e:	77fb      	strb	r3, [r7, #31]
 8011950:	e102      	b.n	8011b58 <HAL_SPI_Transmit+0x25e>
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	2203      	movs	r2, #3
 8011956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	2200      	movs	r2, #0
 801195e:	655a      	str	r2, [r3, #84]	; 0x54
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	68ba      	ldr	r2, [r7, #8]
 8011964:	631a      	str	r2, [r3, #48]	; 0x30
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	88fa      	ldrh	r2, [r7, #6]
 801196a:	869a      	strh	r2, [r3, #52]	; 0x34
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	88fa      	ldrh	r2, [r7, #6]
 8011970:	86da      	strh	r2, [r3, #54]	; 0x36
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	2200      	movs	r2, #0
 8011976:	639a      	str	r2, [r3, #56]	; 0x38
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	2200      	movs	r2, #0
 801197c:	879a      	strh	r2, [r3, #60]	; 0x3c
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	2200      	movs	r2, #0
 8011982:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	2200      	movs	r2, #0
 8011988:	645a      	str	r2, [r3, #68]	; 0x44
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	2200      	movs	r2, #0
 801198e:	641a      	str	r2, [r3, #64]	; 0x40
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	689b      	ldr	r3, [r3, #8]
 8011994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011998:	d10f      	bne.n	80119ba <HAL_SPI_Transmit+0xc0>
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	681a      	ldr	r2, [r3, #0]
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80119a8:	601a      	str	r2, [r3, #0]
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	681a      	ldr	r2, [r3, #0]
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80119b8:	601a      	str	r2, [r3, #0]
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119c4:	2b40      	cmp	r3, #64	; 0x40
 80119c6:	d007      	beq.n	80119d8 <HAL_SPI_Transmit+0xde>
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	681a      	ldr	r2, [r3, #0]
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80119d6:	601a      	str	r2, [r3, #0]
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	68db      	ldr	r3, [r3, #12]
 80119dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80119e0:	d14b      	bne.n	8011a7a <HAL_SPI_Transmit+0x180>
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	685b      	ldr	r3, [r3, #4]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d002      	beq.n	80119f0 <HAL_SPI_Transmit+0xf6>
 80119ea:	8afb      	ldrh	r3, [r7, #22]
 80119ec:	2b01      	cmp	r3, #1
 80119ee:	d13e      	bne.n	8011a6e <HAL_SPI_Transmit+0x174>
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119f4:	881a      	ldrh	r2, [r3, #0]
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	60da      	str	r2, [r3, #12]
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a00:	1c9a      	adds	r2, r3, #2
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	631a      	str	r2, [r3, #48]	; 0x30
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011a0a:	b29b      	uxth	r3, r3
 8011a0c:	3b01      	subs	r3, #1
 8011a0e:	b29a      	uxth	r2, r3
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	86da      	strh	r2, [r3, #54]	; 0x36
 8011a14:	e02b      	b.n	8011a6e <HAL_SPI_Transmit+0x174>
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	689b      	ldr	r3, [r3, #8]
 8011a1c:	f003 0302 	and.w	r3, r3, #2
 8011a20:	2b02      	cmp	r3, #2
 8011a22:	d112      	bne.n	8011a4a <HAL_SPI_Transmit+0x150>
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a28:	881a      	ldrh	r2, [r3, #0]
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	60da      	str	r2, [r3, #12]
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a34:	1c9a      	adds	r2, r3, #2
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	631a      	str	r2, [r3, #48]	; 0x30
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011a3e:	b29b      	uxth	r3, r3
 8011a40:	3b01      	subs	r3, #1
 8011a42:	b29a      	uxth	r2, r3
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	86da      	strh	r2, [r3, #54]	; 0x36
 8011a48:	e011      	b.n	8011a6e <HAL_SPI_Transmit+0x174>
 8011a4a:	f7fd f837 	bl	800eabc <HAL_GetTick>
 8011a4e:	4602      	mov	r2, r0
 8011a50:	69bb      	ldr	r3, [r7, #24]
 8011a52:	1ad3      	subs	r3, r2, r3
 8011a54:	683a      	ldr	r2, [r7, #0]
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d803      	bhi.n	8011a62 <HAL_SPI_Transmit+0x168>
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a60:	d102      	bne.n	8011a68 <HAL_SPI_Transmit+0x16e>
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d102      	bne.n	8011a6e <HAL_SPI_Transmit+0x174>
 8011a68:	2303      	movs	r3, #3
 8011a6a:	77fb      	strb	r3, [r7, #31]
 8011a6c:	e074      	b.n	8011b58 <HAL_SPI_Transmit+0x25e>
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011a72:	b29b      	uxth	r3, r3
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d1ce      	bne.n	8011a16 <HAL_SPI_Transmit+0x11c>
 8011a78:	e04c      	b.n	8011b14 <HAL_SPI_Transmit+0x21a>
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	685b      	ldr	r3, [r3, #4]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d002      	beq.n	8011a88 <HAL_SPI_Transmit+0x18e>
 8011a82:	8afb      	ldrh	r3, [r7, #22]
 8011a84:	2b01      	cmp	r3, #1
 8011a86:	d140      	bne.n	8011b0a <HAL_SPI_Transmit+0x210>
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	330c      	adds	r3, #12
 8011a92:	7812      	ldrb	r2, [r2, #0]
 8011a94:	701a      	strb	r2, [r3, #0]
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a9a:	1c5a      	adds	r2, r3, #1
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011aa4:	b29b      	uxth	r3, r3
 8011aa6:	3b01      	subs	r3, #1
 8011aa8:	b29a      	uxth	r2, r3
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	86da      	strh	r2, [r3, #54]	; 0x36
 8011aae:	e02c      	b.n	8011b0a <HAL_SPI_Transmit+0x210>
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	689b      	ldr	r3, [r3, #8]
 8011ab6:	f003 0302 	and.w	r3, r3, #2
 8011aba:	2b02      	cmp	r3, #2
 8011abc:	d113      	bne.n	8011ae6 <HAL_SPI_Transmit+0x1ec>
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	330c      	adds	r3, #12
 8011ac8:	7812      	ldrb	r2, [r2, #0]
 8011aca:	701a      	strb	r2, [r3, #0]
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ad0:	1c5a      	adds	r2, r3, #1
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	631a      	str	r2, [r3, #48]	; 0x30
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011ada:	b29b      	uxth	r3, r3
 8011adc:	3b01      	subs	r3, #1
 8011ade:	b29a      	uxth	r2, r3
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	86da      	strh	r2, [r3, #54]	; 0x36
 8011ae4:	e011      	b.n	8011b0a <HAL_SPI_Transmit+0x210>
 8011ae6:	f7fc ffe9 	bl	800eabc <HAL_GetTick>
 8011aea:	4602      	mov	r2, r0
 8011aec:	69bb      	ldr	r3, [r7, #24]
 8011aee:	1ad3      	subs	r3, r2, r3
 8011af0:	683a      	ldr	r2, [r7, #0]
 8011af2:	429a      	cmp	r2, r3
 8011af4:	d803      	bhi.n	8011afe <HAL_SPI_Transmit+0x204>
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011afc:	d102      	bne.n	8011b04 <HAL_SPI_Transmit+0x20a>
 8011afe:	683b      	ldr	r3, [r7, #0]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d102      	bne.n	8011b0a <HAL_SPI_Transmit+0x210>
 8011b04:	2303      	movs	r3, #3
 8011b06:	77fb      	strb	r3, [r7, #31]
 8011b08:	e026      	b.n	8011b58 <HAL_SPI_Transmit+0x25e>
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011b0e:	b29b      	uxth	r3, r3
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d1cd      	bne.n	8011ab0 <HAL_SPI_Transmit+0x1b6>
 8011b14:	69ba      	ldr	r2, [r7, #24]
 8011b16:	6839      	ldr	r1, [r7, #0]
 8011b18:	68f8      	ldr	r0, [r7, #12]
 8011b1a:	f000 fbcb 	bl	80122b4 <SPI_EndRxTxTransaction>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d002      	beq.n	8011b2a <HAL_SPI_Transmit+0x230>
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	2220      	movs	r2, #32
 8011b28:	655a      	str	r2, [r3, #84]	; 0x54
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	689b      	ldr	r3, [r3, #8]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d10a      	bne.n	8011b48 <HAL_SPI_Transmit+0x24e>
 8011b32:	2300      	movs	r3, #0
 8011b34:	613b      	str	r3, [r7, #16]
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	68db      	ldr	r3, [r3, #12]
 8011b3c:	613b      	str	r3, [r7, #16]
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	689b      	ldr	r3, [r3, #8]
 8011b44:	613b      	str	r3, [r7, #16]
 8011b46:	693b      	ldr	r3, [r7, #16]
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d002      	beq.n	8011b56 <HAL_SPI_Transmit+0x25c>
 8011b50:	2301      	movs	r3, #1
 8011b52:	77fb      	strb	r3, [r7, #31]
 8011b54:	e000      	b.n	8011b58 <HAL_SPI_Transmit+0x25e>
 8011b56:	bf00      	nop
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	2201      	movs	r2, #1
 8011b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	2200      	movs	r2, #0
 8011b64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8011b68:	7ffb      	ldrb	r3, [r7, #31]
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3720      	adds	r7, #32
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}

08011b72 <HAL_SPI_Receive>:
 8011b72:	b580      	push	{r7, lr}
 8011b74:	b088      	sub	sp, #32
 8011b76:	af02      	add	r7, sp, #8
 8011b78:	60f8      	str	r0, [r7, #12]
 8011b7a:	60b9      	str	r1, [r7, #8]
 8011b7c:	603b      	str	r3, [r7, #0]
 8011b7e:	4613      	mov	r3, r2
 8011b80:	80fb      	strh	r3, [r7, #6]
 8011b82:	2300      	movs	r3, #0
 8011b84:	75fb      	strb	r3, [r7, #23]
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	685b      	ldr	r3, [r3, #4]
 8011b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011b8e:	d112      	bne.n	8011bb6 <HAL_SPI_Receive+0x44>
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	689b      	ldr	r3, [r3, #8]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d10e      	bne.n	8011bb6 <HAL_SPI_Receive+0x44>
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2204      	movs	r2, #4
 8011b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8011ba0:	88fa      	ldrh	r2, [r7, #6]
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	9300      	str	r3, [sp, #0]
 8011ba6:	4613      	mov	r3, r2
 8011ba8:	68ba      	ldr	r2, [r7, #8]
 8011baa:	68b9      	ldr	r1, [r7, #8]
 8011bac:	68f8      	ldr	r0, [r7, #12]
 8011bae:	f000 f8f1 	bl	8011d94 <HAL_SPI_TransmitReceive>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	e0ea      	b.n	8011d8c <HAL_SPI_Receive+0x21a>
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011bbc:	2b01      	cmp	r3, #1
 8011bbe:	d101      	bne.n	8011bc4 <HAL_SPI_Receive+0x52>
 8011bc0:	2302      	movs	r3, #2
 8011bc2:	e0e3      	b.n	8011d8c <HAL_SPI_Receive+0x21a>
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	2201      	movs	r2, #1
 8011bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8011bcc:	f7fc ff76 	bl	800eabc <HAL_GetTick>
 8011bd0:	6138      	str	r0, [r7, #16]
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011bd8:	b2db      	uxtb	r3, r3
 8011bda:	2b01      	cmp	r3, #1
 8011bdc:	d002      	beq.n	8011be4 <HAL_SPI_Receive+0x72>
 8011bde:	2302      	movs	r3, #2
 8011be0:	75fb      	strb	r3, [r7, #23]
 8011be2:	e0ca      	b.n	8011d7a <HAL_SPI_Receive+0x208>
 8011be4:	68bb      	ldr	r3, [r7, #8]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d002      	beq.n	8011bf0 <HAL_SPI_Receive+0x7e>
 8011bea:	88fb      	ldrh	r3, [r7, #6]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d102      	bne.n	8011bf6 <HAL_SPI_Receive+0x84>
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	75fb      	strb	r3, [r7, #23]
 8011bf4:	e0c1      	b.n	8011d7a <HAL_SPI_Receive+0x208>
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	2204      	movs	r2, #4
 8011bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	2200      	movs	r2, #0
 8011c02:	655a      	str	r2, [r3, #84]	; 0x54
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	68ba      	ldr	r2, [r7, #8]
 8011c08:	639a      	str	r2, [r3, #56]	; 0x38
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	88fa      	ldrh	r2, [r7, #6]
 8011c0e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	88fa      	ldrh	r2, [r7, #6]
 8011c14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	2200      	movs	r2, #0
 8011c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	2200      	movs	r2, #0
 8011c20:	869a      	strh	r2, [r3, #52]	; 0x34
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	2200      	movs	r2, #0
 8011c26:	86da      	strh	r2, [r3, #54]	; 0x36
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	641a      	str	r2, [r3, #64]	; 0x40
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	2200      	movs	r2, #0
 8011c32:	645a      	str	r2, [r3, #68]	; 0x44
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	689b      	ldr	r3, [r3, #8]
 8011c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c3c:	d10f      	bne.n	8011c5e <HAL_SPI_Receive+0xec>
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	681a      	ldr	r2, [r3, #0]
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011c4c:	601a      	str	r2, [r3, #0]
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	681a      	ldr	r2, [r3, #0]
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011c5c:	601a      	str	r2, [r3, #0]
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c68:	2b40      	cmp	r3, #64	; 0x40
 8011c6a:	d007      	beq.n	8011c7c <HAL_SPI_Receive+0x10a>
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	681a      	ldr	r2, [r3, #0]
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011c7a:	601a      	str	r2, [r3, #0]
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	68db      	ldr	r3, [r3, #12]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d162      	bne.n	8011d4a <HAL_SPI_Receive+0x1d8>
 8011c84:	e02e      	b.n	8011ce4 <HAL_SPI_Receive+0x172>
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	689b      	ldr	r3, [r3, #8]
 8011c8c:	f003 0301 	and.w	r3, r3, #1
 8011c90:	2b01      	cmp	r3, #1
 8011c92:	d115      	bne.n	8011cc0 <HAL_SPI_Receive+0x14e>
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	f103 020c 	add.w	r2, r3, #12
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ca0:	7812      	ldrb	r2, [r2, #0]
 8011ca2:	b2d2      	uxtb	r2, r2
 8011ca4:	701a      	strb	r2, [r3, #0]
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011caa:	1c5a      	adds	r2, r3, #1
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	639a      	str	r2, [r3, #56]	; 0x38
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011cb4:	b29b      	uxth	r3, r3
 8011cb6:	3b01      	subs	r3, #1
 8011cb8:	b29a      	uxth	r2, r3
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011cbe:	e011      	b.n	8011ce4 <HAL_SPI_Receive+0x172>
 8011cc0:	f7fc fefc 	bl	800eabc <HAL_GetTick>
 8011cc4:	4602      	mov	r2, r0
 8011cc6:	693b      	ldr	r3, [r7, #16]
 8011cc8:	1ad3      	subs	r3, r2, r3
 8011cca:	683a      	ldr	r2, [r7, #0]
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	d803      	bhi.n	8011cd8 <HAL_SPI_Receive+0x166>
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cd6:	d102      	bne.n	8011cde <HAL_SPI_Receive+0x16c>
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d102      	bne.n	8011ce4 <HAL_SPI_Receive+0x172>
 8011cde:	2303      	movs	r3, #3
 8011ce0:	75fb      	strb	r3, [r7, #23]
 8011ce2:	e04a      	b.n	8011d7a <HAL_SPI_Receive+0x208>
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011ce8:	b29b      	uxth	r3, r3
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d1cb      	bne.n	8011c86 <HAL_SPI_Receive+0x114>
 8011cee:	e031      	b.n	8011d54 <HAL_SPI_Receive+0x1e2>
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	689b      	ldr	r3, [r3, #8]
 8011cf6:	f003 0301 	and.w	r3, r3, #1
 8011cfa:	2b01      	cmp	r3, #1
 8011cfc:	d113      	bne.n	8011d26 <HAL_SPI_Receive+0x1b4>
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	68da      	ldr	r2, [r3, #12]
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d08:	b292      	uxth	r2, r2
 8011d0a:	801a      	strh	r2, [r3, #0]
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d10:	1c9a      	adds	r2, r3, #2
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	639a      	str	r2, [r3, #56]	; 0x38
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011d1a:	b29b      	uxth	r3, r3
 8011d1c:	3b01      	subs	r3, #1
 8011d1e:	b29a      	uxth	r2, r3
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011d24:	e011      	b.n	8011d4a <HAL_SPI_Receive+0x1d8>
 8011d26:	f7fc fec9 	bl	800eabc <HAL_GetTick>
 8011d2a:	4602      	mov	r2, r0
 8011d2c:	693b      	ldr	r3, [r7, #16]
 8011d2e:	1ad3      	subs	r3, r2, r3
 8011d30:	683a      	ldr	r2, [r7, #0]
 8011d32:	429a      	cmp	r2, r3
 8011d34:	d803      	bhi.n	8011d3e <HAL_SPI_Receive+0x1cc>
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d3c:	d102      	bne.n	8011d44 <HAL_SPI_Receive+0x1d2>
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d102      	bne.n	8011d4a <HAL_SPI_Receive+0x1d8>
 8011d44:	2303      	movs	r3, #3
 8011d46:	75fb      	strb	r3, [r7, #23]
 8011d48:	e017      	b.n	8011d7a <HAL_SPI_Receive+0x208>
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d1cd      	bne.n	8011cf0 <HAL_SPI_Receive+0x17e>
 8011d54:	693a      	ldr	r2, [r7, #16]
 8011d56:	6839      	ldr	r1, [r7, #0]
 8011d58:	68f8      	ldr	r0, [r7, #12]
 8011d5a:	f000 fa45 	bl	80121e8 <SPI_EndRxTransaction>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d002      	beq.n	8011d6a <HAL_SPI_Receive+0x1f8>
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	2220      	movs	r2, #32
 8011d68:	655a      	str	r2, [r3, #84]	; 0x54
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d002      	beq.n	8011d78 <HAL_SPI_Receive+0x206>
 8011d72:	2301      	movs	r3, #1
 8011d74:	75fb      	strb	r3, [r7, #23]
 8011d76:	e000      	b.n	8011d7a <HAL_SPI_Receive+0x208>
 8011d78:	bf00      	nop
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	2201      	movs	r2, #1
 8011d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	2200      	movs	r2, #0
 8011d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8011d8a:	7dfb      	ldrb	r3, [r7, #23]
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	3718      	adds	r7, #24
 8011d90:	46bd      	mov	sp, r7
 8011d92:	bd80      	pop	{r7, pc}

08011d94 <HAL_SPI_TransmitReceive>:
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b08c      	sub	sp, #48	; 0x30
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	60f8      	str	r0, [r7, #12]
 8011d9c:	60b9      	str	r1, [r7, #8]
 8011d9e:	607a      	str	r2, [r7, #4]
 8011da0:	807b      	strh	r3, [r7, #2]
 8011da2:	2301      	movs	r3, #1
 8011da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011da6:	2300      	movs	r3, #0
 8011da8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011db2:	2b01      	cmp	r3, #1
 8011db4:	d101      	bne.n	8011dba <HAL_SPI_TransmitReceive+0x26>
 8011db6:	2302      	movs	r3, #2
 8011db8:	e18a      	b.n	80120d0 <HAL_SPI_TransmitReceive+0x33c>
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	2201      	movs	r2, #1
 8011dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8011dc2:	f7fc fe7b 	bl	800eabc <HAL_GetTick>
 8011dc6:	6278      	str	r0, [r7, #36]	; 0x24
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	685b      	ldr	r3, [r3, #4]
 8011dd6:	61fb      	str	r3, [r7, #28]
 8011dd8:	887b      	ldrh	r3, [r7, #2]
 8011dda:	837b      	strh	r3, [r7, #26]
 8011ddc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011de0:	2b01      	cmp	r3, #1
 8011de2:	d00f      	beq.n	8011e04 <HAL_SPI_TransmitReceive+0x70>
 8011de4:	69fb      	ldr	r3, [r7, #28]
 8011de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011dea:	d107      	bne.n	8011dfc <HAL_SPI_TransmitReceive+0x68>
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	689b      	ldr	r3, [r3, #8]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d103      	bne.n	8011dfc <HAL_SPI_TransmitReceive+0x68>
 8011df4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011df8:	2b04      	cmp	r3, #4
 8011dfa:	d003      	beq.n	8011e04 <HAL_SPI_TransmitReceive+0x70>
 8011dfc:	2302      	movs	r3, #2
 8011dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011e02:	e15b      	b.n	80120bc <HAL_SPI_TransmitReceive+0x328>
 8011e04:	68bb      	ldr	r3, [r7, #8]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d005      	beq.n	8011e16 <HAL_SPI_TransmitReceive+0x82>
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d002      	beq.n	8011e16 <HAL_SPI_TransmitReceive+0x82>
 8011e10:	887b      	ldrh	r3, [r7, #2]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d103      	bne.n	8011e1e <HAL_SPI_TransmitReceive+0x8a>
 8011e16:	2301      	movs	r3, #1
 8011e18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011e1c:	e14e      	b.n	80120bc <HAL_SPI_TransmitReceive+0x328>
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011e24:	b2db      	uxtb	r3, r3
 8011e26:	2b04      	cmp	r3, #4
 8011e28:	d003      	beq.n	8011e32 <HAL_SPI_TransmitReceive+0x9e>
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	2205      	movs	r2, #5
 8011e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	2200      	movs	r2, #0
 8011e36:	655a      	str	r2, [r3, #84]	; 0x54
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	687a      	ldr	r2, [r7, #4]
 8011e3c:	639a      	str	r2, [r3, #56]	; 0x38
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	887a      	ldrh	r2, [r7, #2]
 8011e42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	887a      	ldrh	r2, [r7, #2]
 8011e48:	879a      	strh	r2, [r3, #60]	; 0x3c
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	68ba      	ldr	r2, [r7, #8]
 8011e4e:	631a      	str	r2, [r3, #48]	; 0x30
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	887a      	ldrh	r2, [r7, #2]
 8011e54:	86da      	strh	r2, [r3, #54]	; 0x36
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	887a      	ldrh	r2, [r7, #2]
 8011e5a:	869a      	strh	r2, [r3, #52]	; 0x34
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	641a      	str	r2, [r3, #64]	; 0x40
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	2200      	movs	r2, #0
 8011e66:	645a      	str	r2, [r3, #68]	; 0x44
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e72:	2b40      	cmp	r3, #64	; 0x40
 8011e74:	d007      	beq.n	8011e86 <HAL_SPI_TransmitReceive+0xf2>
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	681a      	ldr	r2, [r3, #0]
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011e84:	601a      	str	r2, [r3, #0]
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	68db      	ldr	r3, [r3, #12]
 8011e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011e8e:	d178      	bne.n	8011f82 <HAL_SPI_TransmitReceive+0x1ee>
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	685b      	ldr	r3, [r3, #4]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d002      	beq.n	8011e9e <HAL_SPI_TransmitReceive+0x10a>
 8011e98:	8b7b      	ldrh	r3, [r7, #26]
 8011e9a:	2b01      	cmp	r3, #1
 8011e9c:	d166      	bne.n	8011f6c <HAL_SPI_TransmitReceive+0x1d8>
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ea2:	881a      	ldrh	r2, [r3, #0]
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	60da      	str	r2, [r3, #12]
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011eae:	1c9a      	adds	r2, r3, #2
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	631a      	str	r2, [r3, #48]	; 0x30
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011eb8:	b29b      	uxth	r3, r3
 8011eba:	3b01      	subs	r3, #1
 8011ebc:	b29a      	uxth	r2, r3
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	86da      	strh	r2, [r3, #54]	; 0x36
 8011ec2:	e053      	b.n	8011f6c <HAL_SPI_TransmitReceive+0x1d8>
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	689b      	ldr	r3, [r3, #8]
 8011eca:	f003 0302 	and.w	r3, r3, #2
 8011ece:	2b02      	cmp	r3, #2
 8011ed0:	d11b      	bne.n	8011f0a <HAL_SPI_TransmitReceive+0x176>
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011ed6:	b29b      	uxth	r3, r3
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d016      	beq.n	8011f0a <HAL_SPI_TransmitReceive+0x176>
 8011edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ede:	2b01      	cmp	r3, #1
 8011ee0:	d113      	bne.n	8011f0a <HAL_SPI_TransmitReceive+0x176>
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ee6:	881a      	ldrh	r2, [r3, #0]
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	60da      	str	r2, [r3, #12]
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ef2:	1c9a      	adds	r2, r3, #2
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011efc:	b29b      	uxth	r3, r3
 8011efe:	3b01      	subs	r3, #1
 8011f00:	b29a      	uxth	r2, r3
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	86da      	strh	r2, [r3, #54]	; 0x36
 8011f06:	2300      	movs	r3, #0
 8011f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	689b      	ldr	r3, [r3, #8]
 8011f10:	f003 0301 	and.w	r3, r3, #1
 8011f14:	2b01      	cmp	r3, #1
 8011f16:	d119      	bne.n	8011f4c <HAL_SPI_TransmitReceive+0x1b8>
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011f1c:	b29b      	uxth	r3, r3
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d014      	beq.n	8011f4c <HAL_SPI_TransmitReceive+0x1b8>
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	68da      	ldr	r2, [r3, #12]
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f2c:	b292      	uxth	r2, r2
 8011f2e:	801a      	strh	r2, [r3, #0]
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f34:	1c9a      	adds	r2, r3, #2
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	639a      	str	r2, [r3, #56]	; 0x38
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	3b01      	subs	r3, #1
 8011f42:	b29a      	uxth	r2, r3
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011f48:	2301      	movs	r3, #1
 8011f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f4c:	f7fc fdb6 	bl	800eabc <HAL_GetTick>
 8011f50:	4602      	mov	r2, r0
 8011f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f54:	1ad3      	subs	r3, r2, r3
 8011f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	d807      	bhi.n	8011f6c <HAL_SPI_TransmitReceive+0x1d8>
 8011f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f62:	d003      	beq.n	8011f6c <HAL_SPI_TransmitReceive+0x1d8>
 8011f64:	2303      	movs	r3, #3
 8011f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011f6a:	e0a7      	b.n	80120bc <HAL_SPI_TransmitReceive+0x328>
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011f70:	b29b      	uxth	r3, r3
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d1a6      	bne.n	8011ec4 <HAL_SPI_TransmitReceive+0x130>
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011f7a:	b29b      	uxth	r3, r3
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d1a1      	bne.n	8011ec4 <HAL_SPI_TransmitReceive+0x130>
 8011f80:	e07c      	b.n	801207c <HAL_SPI_TransmitReceive+0x2e8>
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	685b      	ldr	r3, [r3, #4]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d002      	beq.n	8011f90 <HAL_SPI_TransmitReceive+0x1fc>
 8011f8a:	8b7b      	ldrh	r3, [r7, #26]
 8011f8c:	2b01      	cmp	r3, #1
 8011f8e:	d16b      	bne.n	8012068 <HAL_SPI_TransmitReceive+0x2d4>
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	330c      	adds	r3, #12
 8011f9a:	7812      	ldrb	r2, [r2, #0]
 8011f9c:	701a      	strb	r2, [r3, #0]
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fa2:	1c5a      	adds	r2, r3, #1
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011fac:	b29b      	uxth	r3, r3
 8011fae:	3b01      	subs	r3, #1
 8011fb0:	b29a      	uxth	r2, r3
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	86da      	strh	r2, [r3, #54]	; 0x36
 8011fb6:	e057      	b.n	8012068 <HAL_SPI_TransmitReceive+0x2d4>
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	689b      	ldr	r3, [r3, #8]
 8011fbe:	f003 0302 	and.w	r3, r3, #2
 8011fc2:	2b02      	cmp	r3, #2
 8011fc4:	d11c      	bne.n	8012000 <HAL_SPI_TransmitReceive+0x26c>
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011fca:	b29b      	uxth	r3, r3
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d017      	beq.n	8012000 <HAL_SPI_TransmitReceive+0x26c>
 8011fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd2:	2b01      	cmp	r3, #1
 8011fd4:	d114      	bne.n	8012000 <HAL_SPI_TransmitReceive+0x26c>
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	330c      	adds	r3, #12
 8011fe0:	7812      	ldrb	r2, [r2, #0]
 8011fe2:	701a      	strb	r2, [r3, #0]
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fe8:	1c5a      	adds	r2, r3, #1
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	631a      	str	r2, [r3, #48]	; 0x30
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011ff2:	b29b      	uxth	r3, r3
 8011ff4:	3b01      	subs	r3, #1
 8011ff6:	b29a      	uxth	r2, r3
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	86da      	strh	r2, [r3, #54]	; 0x36
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	689b      	ldr	r3, [r3, #8]
 8012006:	f003 0301 	and.w	r3, r3, #1
 801200a:	2b01      	cmp	r3, #1
 801200c:	d119      	bne.n	8012042 <HAL_SPI_TransmitReceive+0x2ae>
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012012:	b29b      	uxth	r3, r3
 8012014:	2b00      	cmp	r3, #0
 8012016:	d014      	beq.n	8012042 <HAL_SPI_TransmitReceive+0x2ae>
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	68da      	ldr	r2, [r3, #12]
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012022:	b2d2      	uxtb	r2, r2
 8012024:	701a      	strb	r2, [r3, #0]
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801202a:	1c5a      	adds	r2, r3, #1
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	639a      	str	r2, [r3, #56]	; 0x38
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012034:	b29b      	uxth	r3, r3
 8012036:	3b01      	subs	r3, #1
 8012038:	b29a      	uxth	r2, r3
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801203e:	2301      	movs	r3, #1
 8012040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012042:	f7fc fd3b 	bl	800eabc <HAL_GetTick>
 8012046:	4602      	mov	r2, r0
 8012048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801204a:	1ad3      	subs	r3, r2, r3
 801204c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801204e:	429a      	cmp	r2, r3
 8012050:	d803      	bhi.n	801205a <HAL_SPI_TransmitReceive+0x2c6>
 8012052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012058:	d102      	bne.n	8012060 <HAL_SPI_TransmitReceive+0x2cc>
 801205a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801205c:	2b00      	cmp	r3, #0
 801205e:	d103      	bne.n	8012068 <HAL_SPI_TransmitReceive+0x2d4>
 8012060:	2303      	movs	r3, #3
 8012062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012066:	e029      	b.n	80120bc <HAL_SPI_TransmitReceive+0x328>
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801206c:	b29b      	uxth	r3, r3
 801206e:	2b00      	cmp	r3, #0
 8012070:	d1a2      	bne.n	8011fb8 <HAL_SPI_TransmitReceive+0x224>
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012076:	b29b      	uxth	r3, r3
 8012078:	2b00      	cmp	r3, #0
 801207a:	d19d      	bne.n	8011fb8 <HAL_SPI_TransmitReceive+0x224>
 801207c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801207e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012080:	68f8      	ldr	r0, [r7, #12]
 8012082:	f000 f917 	bl	80122b4 <SPI_EndRxTxTransaction>
 8012086:	4603      	mov	r3, r0
 8012088:	2b00      	cmp	r3, #0
 801208a:	d006      	beq.n	801209a <HAL_SPI_TransmitReceive+0x306>
 801208c:	2301      	movs	r3, #1
 801208e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	2220      	movs	r2, #32
 8012096:	655a      	str	r2, [r3, #84]	; 0x54
 8012098:	e010      	b.n	80120bc <HAL_SPI_TransmitReceive+0x328>
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	689b      	ldr	r3, [r3, #8]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d10b      	bne.n	80120ba <HAL_SPI_TransmitReceive+0x326>
 80120a2:	2300      	movs	r3, #0
 80120a4:	617b      	str	r3, [r7, #20]
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	68db      	ldr	r3, [r3, #12]
 80120ac:	617b      	str	r3, [r7, #20]
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	689b      	ldr	r3, [r3, #8]
 80120b4:	617b      	str	r3, [r7, #20]
 80120b6:	697b      	ldr	r3, [r7, #20]
 80120b8:	e000      	b.n	80120bc <HAL_SPI_TransmitReceive+0x328>
 80120ba:	bf00      	nop
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	2201      	movs	r2, #1
 80120c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	2200      	movs	r2, #0
 80120c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80120cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80120d0:	4618      	mov	r0, r3
 80120d2:	3730      	adds	r7, #48	; 0x30
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}

080120d8 <SPI_WaitFlagStateUntilTimeout>:
 80120d8:	b580      	push	{r7, lr}
 80120da:	b088      	sub	sp, #32
 80120dc:	af00      	add	r7, sp, #0
 80120de:	60f8      	str	r0, [r7, #12]
 80120e0:	60b9      	str	r1, [r7, #8]
 80120e2:	603b      	str	r3, [r7, #0]
 80120e4:	4613      	mov	r3, r2
 80120e6:	71fb      	strb	r3, [r7, #7]
 80120e8:	f7fc fce8 	bl	800eabc <HAL_GetTick>
 80120ec:	4602      	mov	r2, r0
 80120ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f0:	1a9b      	subs	r3, r3, r2
 80120f2:	683a      	ldr	r2, [r7, #0]
 80120f4:	4413      	add	r3, r2
 80120f6:	61fb      	str	r3, [r7, #28]
 80120f8:	f7fc fce0 	bl	800eabc <HAL_GetTick>
 80120fc:	61b8      	str	r0, [r7, #24]
 80120fe:	4b39      	ldr	r3, [pc, #228]	; (80121e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	015b      	lsls	r3, r3, #5
 8012104:	0d1b      	lsrs	r3, r3, #20
 8012106:	69fa      	ldr	r2, [r7, #28]
 8012108:	fb02 f303 	mul.w	r3, r2, r3
 801210c:	617b      	str	r3, [r7, #20]
 801210e:	e054      	b.n	80121ba <SPI_WaitFlagStateUntilTimeout+0xe2>
 8012110:	683b      	ldr	r3, [r7, #0]
 8012112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012116:	d050      	beq.n	80121ba <SPI_WaitFlagStateUntilTimeout+0xe2>
 8012118:	f7fc fcd0 	bl	800eabc <HAL_GetTick>
 801211c:	4602      	mov	r2, r0
 801211e:	69bb      	ldr	r3, [r7, #24]
 8012120:	1ad3      	subs	r3, r2, r3
 8012122:	69fa      	ldr	r2, [r7, #28]
 8012124:	429a      	cmp	r2, r3
 8012126:	d902      	bls.n	801212e <SPI_WaitFlagStateUntilTimeout+0x56>
 8012128:	69fb      	ldr	r3, [r7, #28]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d13d      	bne.n	80121aa <SPI_WaitFlagStateUntilTimeout+0xd2>
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	685a      	ldr	r2, [r3, #4]
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801213c:	605a      	str	r2, [r3, #4]
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	685b      	ldr	r3, [r3, #4]
 8012142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012146:	d111      	bne.n	801216c <SPI_WaitFlagStateUntilTimeout+0x94>
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	689b      	ldr	r3, [r3, #8]
 801214c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012150:	d004      	beq.n	801215c <SPI_WaitFlagStateUntilTimeout+0x84>
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	689b      	ldr	r3, [r3, #8]
 8012156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801215a:	d107      	bne.n	801216c <SPI_WaitFlagStateUntilTimeout+0x94>
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	681a      	ldr	r2, [r3, #0]
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801216a:	601a      	str	r2, [r3, #0]
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012174:	d10f      	bne.n	8012196 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	681a      	ldr	r2, [r3, #0]
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012184:	601a      	str	r2, [r3, #0]
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	681a      	ldr	r2, [r3, #0]
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012194:	601a      	str	r2, [r3, #0]
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	2201      	movs	r2, #1
 801219a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	2200      	movs	r2, #0
 80121a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80121a6:	2303      	movs	r3, #3
 80121a8:	e017      	b.n	80121da <SPI_WaitFlagStateUntilTimeout+0x102>
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d101      	bne.n	80121b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
 80121b0:	2300      	movs	r3, #0
 80121b2:	61fb      	str	r3, [r7, #28]
 80121b4:	697b      	ldr	r3, [r7, #20]
 80121b6:	3b01      	subs	r3, #1
 80121b8:	617b      	str	r3, [r7, #20]
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	689a      	ldr	r2, [r3, #8]
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	4013      	ands	r3, r2
 80121c4:	68ba      	ldr	r2, [r7, #8]
 80121c6:	429a      	cmp	r2, r3
 80121c8:	bf0c      	ite	eq
 80121ca:	2301      	moveq	r3, #1
 80121cc:	2300      	movne	r3, #0
 80121ce:	b2db      	uxtb	r3, r3
 80121d0:	461a      	mov	r2, r3
 80121d2:	79fb      	ldrb	r3, [r7, #7]
 80121d4:	429a      	cmp	r2, r3
 80121d6:	d19b      	bne.n	8012110 <SPI_WaitFlagStateUntilTimeout+0x38>
 80121d8:	2300      	movs	r3, #0
 80121da:	4618      	mov	r0, r3
 80121dc:	3720      	adds	r7, #32
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}
 80121e2:	bf00      	nop
 80121e4:	20000014 	.word	0x20000014

080121e8 <SPI_EndRxTransaction>:
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b086      	sub	sp, #24
 80121ec:	af02      	add	r7, sp, #8
 80121ee:	60f8      	str	r0, [r7, #12]
 80121f0:	60b9      	str	r1, [r7, #8]
 80121f2:	607a      	str	r2, [r7, #4]
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	685b      	ldr	r3, [r3, #4]
 80121f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80121fc:	d111      	bne.n	8012222 <SPI_EndRxTransaction+0x3a>
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	689b      	ldr	r3, [r3, #8]
 8012202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012206:	d004      	beq.n	8012212 <SPI_EndRxTransaction+0x2a>
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	689b      	ldr	r3, [r3, #8]
 801220c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012210:	d107      	bne.n	8012222 <SPI_EndRxTransaction+0x3a>
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	681a      	ldr	r2, [r3, #0]
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012220:	601a      	str	r2, [r3, #0]
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	685b      	ldr	r3, [r3, #4]
 8012226:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801222a:	d12a      	bne.n	8012282 <SPI_EndRxTransaction+0x9a>
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	689b      	ldr	r3, [r3, #8]
 8012230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012234:	d012      	beq.n	801225c <SPI_EndRxTransaction+0x74>
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	9300      	str	r3, [sp, #0]
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	2200      	movs	r2, #0
 801223e:	2180      	movs	r1, #128	; 0x80
 8012240:	68f8      	ldr	r0, [r7, #12]
 8012242:	f7ff ff49 	bl	80120d8 <SPI_WaitFlagStateUntilTimeout>
 8012246:	4603      	mov	r3, r0
 8012248:	2b00      	cmp	r3, #0
 801224a:	d02d      	beq.n	80122a8 <SPI_EndRxTransaction+0xc0>
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012250:	f043 0220 	orr.w	r2, r3, #32
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	655a      	str	r2, [r3, #84]	; 0x54
 8012258:	2303      	movs	r3, #3
 801225a:	e026      	b.n	80122aa <SPI_EndRxTransaction+0xc2>
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	9300      	str	r3, [sp, #0]
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	2200      	movs	r2, #0
 8012264:	2101      	movs	r1, #1
 8012266:	68f8      	ldr	r0, [r7, #12]
 8012268:	f7ff ff36 	bl	80120d8 <SPI_WaitFlagStateUntilTimeout>
 801226c:	4603      	mov	r3, r0
 801226e:	2b00      	cmp	r3, #0
 8012270:	d01a      	beq.n	80122a8 <SPI_EndRxTransaction+0xc0>
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012276:	f043 0220 	orr.w	r2, r3, #32
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	655a      	str	r2, [r3, #84]	; 0x54
 801227e:	2303      	movs	r3, #3
 8012280:	e013      	b.n	80122aa <SPI_EndRxTransaction+0xc2>
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	9300      	str	r3, [sp, #0]
 8012286:	68bb      	ldr	r3, [r7, #8]
 8012288:	2200      	movs	r2, #0
 801228a:	2101      	movs	r1, #1
 801228c:	68f8      	ldr	r0, [r7, #12]
 801228e:	f7ff ff23 	bl	80120d8 <SPI_WaitFlagStateUntilTimeout>
 8012292:	4603      	mov	r3, r0
 8012294:	2b00      	cmp	r3, #0
 8012296:	d007      	beq.n	80122a8 <SPI_EndRxTransaction+0xc0>
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801229c:	f043 0220 	orr.w	r2, r3, #32
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	655a      	str	r2, [r3, #84]	; 0x54
 80122a4:	2303      	movs	r3, #3
 80122a6:	e000      	b.n	80122aa <SPI_EndRxTransaction+0xc2>
 80122a8:	2300      	movs	r3, #0
 80122aa:	4618      	mov	r0, r3
 80122ac:	3710      	adds	r7, #16
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
	...

080122b4 <SPI_EndRxTxTransaction>:
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b088      	sub	sp, #32
 80122b8:	af02      	add	r7, sp, #8
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	60b9      	str	r1, [r7, #8]
 80122be:	607a      	str	r2, [r7, #4]
 80122c0:	4b1b      	ldr	r3, [pc, #108]	; (8012330 <SPI_EndRxTxTransaction+0x7c>)
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	4a1b      	ldr	r2, [pc, #108]	; (8012334 <SPI_EndRxTxTransaction+0x80>)
 80122c6:	fba2 2303 	umull	r2, r3, r2, r3
 80122ca:	0d5b      	lsrs	r3, r3, #21
 80122cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80122d0:	fb02 f303 	mul.w	r3, r2, r3
 80122d4:	617b      	str	r3, [r7, #20]
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	685b      	ldr	r3, [r3, #4]
 80122da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80122de:	d112      	bne.n	8012306 <SPI_EndRxTxTransaction+0x52>
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	9300      	str	r3, [sp, #0]
 80122e4:	68bb      	ldr	r3, [r7, #8]
 80122e6:	2200      	movs	r2, #0
 80122e8:	2180      	movs	r1, #128	; 0x80
 80122ea:	68f8      	ldr	r0, [r7, #12]
 80122ec:	f7ff fef4 	bl	80120d8 <SPI_WaitFlagStateUntilTimeout>
 80122f0:	4603      	mov	r3, r0
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d016      	beq.n	8012324 <SPI_EndRxTxTransaction+0x70>
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122fa:	f043 0220 	orr.w	r2, r3, #32
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	655a      	str	r2, [r3, #84]	; 0x54
 8012302:	2303      	movs	r3, #3
 8012304:	e00f      	b.n	8012326 <SPI_EndRxTxTransaction+0x72>
 8012306:	697b      	ldr	r3, [r7, #20]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d00a      	beq.n	8012322 <SPI_EndRxTxTransaction+0x6e>
 801230c:	697b      	ldr	r3, [r7, #20]
 801230e:	3b01      	subs	r3, #1
 8012310:	617b      	str	r3, [r7, #20]
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	689b      	ldr	r3, [r3, #8]
 8012318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801231c:	2b80      	cmp	r3, #128	; 0x80
 801231e:	d0f2      	beq.n	8012306 <SPI_EndRxTxTransaction+0x52>
 8012320:	e000      	b.n	8012324 <SPI_EndRxTxTransaction+0x70>
 8012322:	bf00      	nop
 8012324:	2300      	movs	r3, #0
 8012326:	4618      	mov	r0, r3
 8012328:	3718      	adds	r7, #24
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}
 801232e:	bf00      	nop
 8012330:	20000014 	.word	0x20000014
 8012334:	165e9f81 	.word	0x165e9f81

08012338 <HAL_TIM_Base_Init>:
 8012338:	b580      	push	{r7, lr}
 801233a:	b082      	sub	sp, #8
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d101      	bne.n	801234a <HAL_TIM_Base_Init+0x12>
 8012346:	2301      	movs	r3, #1
 8012348:	e041      	b.n	80123ce <HAL_TIM_Base_Init+0x96>
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012350:	b2db      	uxtb	r3, r3
 8012352:	2b00      	cmp	r3, #0
 8012354:	d106      	bne.n	8012364 <HAL_TIM_Base_Init+0x2c>
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2200      	movs	r2, #0
 801235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801235e:	6878      	ldr	r0, [r7, #4]
 8012360:	f000 f839 	bl	80123d6 <HAL_TIM_Base_MspInit>
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2202      	movs	r2, #2
 8012368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681a      	ldr	r2, [r3, #0]
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	3304      	adds	r3, #4
 8012374:	4619      	mov	r1, r3
 8012376:	4610      	mov	r0, r2
 8012378:	f000 fbf0 	bl	8012b5c <TIM_Base_SetConfig>
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	2201      	movs	r2, #1
 8012380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	2201      	movs	r2, #1
 8012388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	2201      	movs	r2, #1
 8012390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2201      	movs	r2, #1
 8012398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2201      	movs	r2, #1
 80123a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2201      	movs	r2, #1
 80123a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2201      	movs	r2, #1
 80123b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2201      	movs	r2, #1
 80123b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2201      	movs	r2, #1
 80123c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2201      	movs	r2, #1
 80123c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80123cc:	2300      	movs	r3, #0
 80123ce:	4618      	mov	r0, r3
 80123d0:	3708      	adds	r7, #8
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}

080123d6 <HAL_TIM_Base_MspInit>:
 80123d6:	b480      	push	{r7}
 80123d8:	b083      	sub	sp, #12
 80123da:	af00      	add	r7, sp, #0
 80123dc:	6078      	str	r0, [r7, #4]
 80123de:	bf00      	nop
 80123e0:	370c      	adds	r7, #12
 80123e2:	46bd      	mov	sp, r7
 80123e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e8:	4770      	bx	lr
	...

080123ec <HAL_TIM_Base_Start_IT>:
 80123ec:	b480      	push	{r7}
 80123ee:	b085      	sub	sp, #20
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80123fa:	b2db      	uxtb	r3, r3
 80123fc:	2b01      	cmp	r3, #1
 80123fe:	d001      	beq.n	8012404 <HAL_TIM_Base_Start_IT+0x18>
 8012400:	2301      	movs	r3, #1
 8012402:	e044      	b.n	801248e <HAL_TIM_Base_Start_IT+0xa2>
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2202      	movs	r2, #2
 8012408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	68da      	ldr	r2, [r3, #12]
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	f042 0201 	orr.w	r2, r2, #1
 801241a:	60da      	str	r2, [r3, #12]
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	4a1e      	ldr	r2, [pc, #120]	; (801249c <HAL_TIM_Base_Start_IT+0xb0>)
 8012422:	4293      	cmp	r3, r2
 8012424:	d018      	beq.n	8012458 <HAL_TIM_Base_Start_IT+0x6c>
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801242e:	d013      	beq.n	8012458 <HAL_TIM_Base_Start_IT+0x6c>
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	4a1a      	ldr	r2, [pc, #104]	; (80124a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8012436:	4293      	cmp	r3, r2
 8012438:	d00e      	beq.n	8012458 <HAL_TIM_Base_Start_IT+0x6c>
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	4a19      	ldr	r2, [pc, #100]	; (80124a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8012440:	4293      	cmp	r3, r2
 8012442:	d009      	beq.n	8012458 <HAL_TIM_Base_Start_IT+0x6c>
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	4a17      	ldr	r2, [pc, #92]	; (80124a8 <HAL_TIM_Base_Start_IT+0xbc>)
 801244a:	4293      	cmp	r3, r2
 801244c:	d004      	beq.n	8012458 <HAL_TIM_Base_Start_IT+0x6c>
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	4a16      	ldr	r2, [pc, #88]	; (80124ac <HAL_TIM_Base_Start_IT+0xc0>)
 8012454:	4293      	cmp	r3, r2
 8012456:	d111      	bne.n	801247c <HAL_TIM_Base_Start_IT+0x90>
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	689b      	ldr	r3, [r3, #8]
 801245e:	f003 0307 	and.w	r3, r3, #7
 8012462:	60fb      	str	r3, [r7, #12]
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	2b06      	cmp	r3, #6
 8012468:	d010      	beq.n	801248c <HAL_TIM_Base_Start_IT+0xa0>
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	681a      	ldr	r2, [r3, #0]
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	f042 0201 	orr.w	r2, r2, #1
 8012478:	601a      	str	r2, [r3, #0]
 801247a:	e007      	b.n	801248c <HAL_TIM_Base_Start_IT+0xa0>
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	681a      	ldr	r2, [r3, #0]
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	f042 0201 	orr.w	r2, r2, #1
 801248a:	601a      	str	r2, [r3, #0]
 801248c:	2300      	movs	r3, #0
 801248e:	4618      	mov	r0, r3
 8012490:	3714      	adds	r7, #20
 8012492:	46bd      	mov	sp, r7
 8012494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012498:	4770      	bx	lr
 801249a:	bf00      	nop
 801249c:	40010000 	.word	0x40010000
 80124a0:	40000400 	.word	0x40000400
 80124a4:	40000800 	.word	0x40000800
 80124a8:	40000c00 	.word	0x40000c00
 80124ac:	40014000 	.word	0x40014000

080124b0 <HAL_TIM_PWM_Init>:
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b082      	sub	sp, #8
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d101      	bne.n	80124c2 <HAL_TIM_PWM_Init+0x12>
 80124be:	2301      	movs	r3, #1
 80124c0:	e041      	b.n	8012546 <HAL_TIM_PWM_Init+0x96>
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80124c8:	b2db      	uxtb	r3, r3
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d106      	bne.n	80124dc <HAL_TIM_PWM_Init+0x2c>
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	2200      	movs	r2, #0
 80124d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80124d6:	6878      	ldr	r0, [r7, #4]
 80124d8:	f7fa fbca 	bl	800cc70 <HAL_TIM_PWM_MspInit>
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2202      	movs	r2, #2
 80124e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681a      	ldr	r2, [r3, #0]
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	3304      	adds	r3, #4
 80124ec:	4619      	mov	r1, r3
 80124ee:	4610      	mov	r0, r2
 80124f0:	f000 fb34 	bl	8012b5c <TIM_Base_SetConfig>
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2201      	movs	r2, #1
 80124f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	2201      	movs	r2, #1
 8012500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2201      	movs	r2, #1
 8012508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2201      	movs	r2, #1
 8012510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2201      	movs	r2, #1
 8012518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	2201      	movs	r2, #1
 8012520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2201      	movs	r2, #1
 8012528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	2201      	movs	r2, #1
 8012530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2201      	movs	r2, #1
 8012538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	2201      	movs	r2, #1
 8012540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8012544:	2300      	movs	r3, #0
 8012546:	4618      	mov	r0, r3
 8012548:	3708      	adds	r7, #8
 801254a:	46bd      	mov	sp, r7
 801254c:	bd80      	pop	{r7, pc}
	...

08012550 <HAL_TIM_PWM_Start>:
 8012550:	b580      	push	{r7, lr}
 8012552:	b084      	sub	sp, #16
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
 8012558:	6039      	str	r1, [r7, #0]
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d109      	bne.n	8012574 <HAL_TIM_PWM_Start+0x24>
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012566:	b2db      	uxtb	r3, r3
 8012568:	2b01      	cmp	r3, #1
 801256a:	bf14      	ite	ne
 801256c:	2301      	movne	r3, #1
 801256e:	2300      	moveq	r3, #0
 8012570:	b2db      	uxtb	r3, r3
 8012572:	e022      	b.n	80125ba <HAL_TIM_PWM_Start+0x6a>
 8012574:	683b      	ldr	r3, [r7, #0]
 8012576:	2b04      	cmp	r3, #4
 8012578:	d109      	bne.n	801258e <HAL_TIM_PWM_Start+0x3e>
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012580:	b2db      	uxtb	r3, r3
 8012582:	2b01      	cmp	r3, #1
 8012584:	bf14      	ite	ne
 8012586:	2301      	movne	r3, #1
 8012588:	2300      	moveq	r3, #0
 801258a:	b2db      	uxtb	r3, r3
 801258c:	e015      	b.n	80125ba <HAL_TIM_PWM_Start+0x6a>
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	2b08      	cmp	r3, #8
 8012592:	d109      	bne.n	80125a8 <HAL_TIM_PWM_Start+0x58>
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801259a:	b2db      	uxtb	r3, r3
 801259c:	2b01      	cmp	r3, #1
 801259e:	bf14      	ite	ne
 80125a0:	2301      	movne	r3, #1
 80125a2:	2300      	moveq	r3, #0
 80125a4:	b2db      	uxtb	r3, r3
 80125a6:	e008      	b.n	80125ba <HAL_TIM_PWM_Start+0x6a>
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80125ae:	b2db      	uxtb	r3, r3
 80125b0:	2b01      	cmp	r3, #1
 80125b2:	bf14      	ite	ne
 80125b4:	2301      	movne	r3, #1
 80125b6:	2300      	moveq	r3, #0
 80125b8:	b2db      	uxtb	r3, r3
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d001      	beq.n	80125c2 <HAL_TIM_PWM_Start+0x72>
 80125be:	2301      	movs	r3, #1
 80125c0:	e068      	b.n	8012694 <HAL_TIM_PWM_Start+0x144>
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d104      	bne.n	80125d2 <HAL_TIM_PWM_Start+0x82>
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2202      	movs	r2, #2
 80125cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80125d0:	e013      	b.n	80125fa <HAL_TIM_PWM_Start+0xaa>
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	2b04      	cmp	r3, #4
 80125d6:	d104      	bne.n	80125e2 <HAL_TIM_PWM_Start+0x92>
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2202      	movs	r2, #2
 80125dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80125e0:	e00b      	b.n	80125fa <HAL_TIM_PWM_Start+0xaa>
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	2b08      	cmp	r3, #8
 80125e6:	d104      	bne.n	80125f2 <HAL_TIM_PWM_Start+0xa2>
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	2202      	movs	r2, #2
 80125ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80125f0:	e003      	b.n	80125fa <HAL_TIM_PWM_Start+0xaa>
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2202      	movs	r2, #2
 80125f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	2201      	movs	r2, #1
 8012600:	6839      	ldr	r1, [r7, #0]
 8012602:	4618      	mov	r0, r3
 8012604:	f000 fcb6 	bl	8012f74 <TIM_CCxChannelCmd>
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	4a23      	ldr	r2, [pc, #140]	; (801269c <HAL_TIM_PWM_Start+0x14c>)
 801260e:	4293      	cmp	r3, r2
 8012610:	d107      	bne.n	8012622 <HAL_TIM_PWM_Start+0xd2>
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012620:	645a      	str	r2, [r3, #68]	; 0x44
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	4a1d      	ldr	r2, [pc, #116]	; (801269c <HAL_TIM_PWM_Start+0x14c>)
 8012628:	4293      	cmp	r3, r2
 801262a:	d018      	beq.n	801265e <HAL_TIM_PWM_Start+0x10e>
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012634:	d013      	beq.n	801265e <HAL_TIM_PWM_Start+0x10e>
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	4a19      	ldr	r2, [pc, #100]	; (80126a0 <HAL_TIM_PWM_Start+0x150>)
 801263c:	4293      	cmp	r3, r2
 801263e:	d00e      	beq.n	801265e <HAL_TIM_PWM_Start+0x10e>
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	4a17      	ldr	r2, [pc, #92]	; (80126a4 <HAL_TIM_PWM_Start+0x154>)
 8012646:	4293      	cmp	r3, r2
 8012648:	d009      	beq.n	801265e <HAL_TIM_PWM_Start+0x10e>
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	4a16      	ldr	r2, [pc, #88]	; (80126a8 <HAL_TIM_PWM_Start+0x158>)
 8012650:	4293      	cmp	r3, r2
 8012652:	d004      	beq.n	801265e <HAL_TIM_PWM_Start+0x10e>
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	4a14      	ldr	r2, [pc, #80]	; (80126ac <HAL_TIM_PWM_Start+0x15c>)
 801265a:	4293      	cmp	r3, r2
 801265c:	d111      	bne.n	8012682 <HAL_TIM_PWM_Start+0x132>
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	689b      	ldr	r3, [r3, #8]
 8012664:	f003 0307 	and.w	r3, r3, #7
 8012668:	60fb      	str	r3, [r7, #12]
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	2b06      	cmp	r3, #6
 801266e:	d010      	beq.n	8012692 <HAL_TIM_PWM_Start+0x142>
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	681a      	ldr	r2, [r3, #0]
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	f042 0201 	orr.w	r2, r2, #1
 801267e:	601a      	str	r2, [r3, #0]
 8012680:	e007      	b.n	8012692 <HAL_TIM_PWM_Start+0x142>
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	681a      	ldr	r2, [r3, #0]
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	f042 0201 	orr.w	r2, r2, #1
 8012690:	601a      	str	r2, [r3, #0]
 8012692:	2300      	movs	r3, #0
 8012694:	4618      	mov	r0, r3
 8012696:	3710      	adds	r7, #16
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}
 801269c:	40010000 	.word	0x40010000
 80126a0:	40000400 	.word	0x40000400
 80126a4:	40000800 	.word	0x40000800
 80126a8:	40000c00 	.word	0x40000c00
 80126ac:	40014000 	.word	0x40014000

080126b0 <HAL_TIM_PWM_Stop>:
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b082      	sub	sp, #8
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
 80126b8:	6039      	str	r1, [r7, #0]
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	2200      	movs	r2, #0
 80126c0:	6839      	ldr	r1, [r7, #0]
 80126c2:	4618      	mov	r0, r3
 80126c4:	f000 fc56 	bl	8012f74 <TIM_CCxChannelCmd>
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	4a29      	ldr	r2, [pc, #164]	; (8012774 <HAL_TIM_PWM_Stop+0xc4>)
 80126ce:	4293      	cmp	r3, r2
 80126d0:	d117      	bne.n	8012702 <HAL_TIM_PWM_Stop+0x52>
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	6a1a      	ldr	r2, [r3, #32]
 80126d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80126dc:	4013      	ands	r3, r2
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d10f      	bne.n	8012702 <HAL_TIM_PWM_Stop+0x52>
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	6a1a      	ldr	r2, [r3, #32]
 80126e8:	f240 4344 	movw	r3, #1092	; 0x444
 80126ec:	4013      	ands	r3, r2
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d107      	bne.n	8012702 <HAL_TIM_PWM_Stop+0x52>
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012700:	645a      	str	r2, [r3, #68]	; 0x44
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	6a1a      	ldr	r2, [r3, #32]
 8012708:	f241 1311 	movw	r3, #4369	; 0x1111
 801270c:	4013      	ands	r3, r2
 801270e:	2b00      	cmp	r3, #0
 8012710:	d10f      	bne.n	8012732 <HAL_TIM_PWM_Stop+0x82>
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	6a1a      	ldr	r2, [r3, #32]
 8012718:	f240 4344 	movw	r3, #1092	; 0x444
 801271c:	4013      	ands	r3, r2
 801271e:	2b00      	cmp	r3, #0
 8012720:	d107      	bne.n	8012732 <HAL_TIM_PWM_Stop+0x82>
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	681a      	ldr	r2, [r3, #0]
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	f022 0201 	bic.w	r2, r2, #1
 8012730:	601a      	str	r2, [r3, #0]
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d104      	bne.n	8012742 <HAL_TIM_PWM_Stop+0x92>
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2201      	movs	r2, #1
 801273c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012740:	e013      	b.n	801276a <HAL_TIM_PWM_Stop+0xba>
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	2b04      	cmp	r3, #4
 8012746:	d104      	bne.n	8012752 <HAL_TIM_PWM_Stop+0xa2>
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	2201      	movs	r2, #1
 801274c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012750:	e00b      	b.n	801276a <HAL_TIM_PWM_Stop+0xba>
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	2b08      	cmp	r3, #8
 8012756:	d104      	bne.n	8012762 <HAL_TIM_PWM_Stop+0xb2>
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	2201      	movs	r2, #1
 801275c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012760:	e003      	b.n	801276a <HAL_TIM_PWM_Stop+0xba>
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	2201      	movs	r2, #1
 8012766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801276a:	2300      	movs	r3, #0
 801276c:	4618      	mov	r0, r3
 801276e:	3708      	adds	r7, #8
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}
 8012774:	40010000 	.word	0x40010000

08012778 <HAL_TIM_IRQHandler>:
 8012778:	b580      	push	{r7, lr}
 801277a:	b082      	sub	sp, #8
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	691b      	ldr	r3, [r3, #16]
 8012786:	f003 0302 	and.w	r3, r3, #2
 801278a:	2b02      	cmp	r3, #2
 801278c:	d122      	bne.n	80127d4 <HAL_TIM_IRQHandler+0x5c>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	68db      	ldr	r3, [r3, #12]
 8012794:	f003 0302 	and.w	r3, r3, #2
 8012798:	2b02      	cmp	r3, #2
 801279a:	d11b      	bne.n	80127d4 <HAL_TIM_IRQHandler+0x5c>
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	f06f 0202 	mvn.w	r2, #2
 80127a4:	611a      	str	r2, [r3, #16]
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	2201      	movs	r2, #1
 80127aa:	771a      	strb	r2, [r3, #28]
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	699b      	ldr	r3, [r3, #24]
 80127b2:	f003 0303 	and.w	r3, r3, #3
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d003      	beq.n	80127c2 <HAL_TIM_IRQHandler+0x4a>
 80127ba:	6878      	ldr	r0, [r7, #4]
 80127bc:	f000 f9b0 	bl	8012b20 <HAL_TIM_IC_CaptureCallback>
 80127c0:	e005      	b.n	80127ce <HAL_TIM_IRQHandler+0x56>
 80127c2:	6878      	ldr	r0, [r7, #4]
 80127c4:	f000 f9a2 	bl	8012b0c <HAL_TIM_OC_DelayElapsedCallback>
 80127c8:	6878      	ldr	r0, [r7, #4]
 80127ca:	f000 f9b3 	bl	8012b34 <HAL_TIM_PWM_PulseFinishedCallback>
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2200      	movs	r2, #0
 80127d2:	771a      	strb	r2, [r3, #28]
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	691b      	ldr	r3, [r3, #16]
 80127da:	f003 0304 	and.w	r3, r3, #4
 80127de:	2b04      	cmp	r3, #4
 80127e0:	d122      	bne.n	8012828 <HAL_TIM_IRQHandler+0xb0>
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	68db      	ldr	r3, [r3, #12]
 80127e8:	f003 0304 	and.w	r3, r3, #4
 80127ec:	2b04      	cmp	r3, #4
 80127ee:	d11b      	bne.n	8012828 <HAL_TIM_IRQHandler+0xb0>
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	f06f 0204 	mvn.w	r2, #4
 80127f8:	611a      	str	r2, [r3, #16]
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	2202      	movs	r2, #2
 80127fe:	771a      	strb	r2, [r3, #28]
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	699b      	ldr	r3, [r3, #24]
 8012806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801280a:	2b00      	cmp	r3, #0
 801280c:	d003      	beq.n	8012816 <HAL_TIM_IRQHandler+0x9e>
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f000 f986 	bl	8012b20 <HAL_TIM_IC_CaptureCallback>
 8012814:	e005      	b.n	8012822 <HAL_TIM_IRQHandler+0xaa>
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f000 f978 	bl	8012b0c <HAL_TIM_OC_DelayElapsedCallback>
 801281c:	6878      	ldr	r0, [r7, #4]
 801281e:	f000 f989 	bl	8012b34 <HAL_TIM_PWM_PulseFinishedCallback>
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	2200      	movs	r2, #0
 8012826:	771a      	strb	r2, [r3, #28]
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	691b      	ldr	r3, [r3, #16]
 801282e:	f003 0308 	and.w	r3, r3, #8
 8012832:	2b08      	cmp	r3, #8
 8012834:	d122      	bne.n	801287c <HAL_TIM_IRQHandler+0x104>
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	68db      	ldr	r3, [r3, #12]
 801283c:	f003 0308 	and.w	r3, r3, #8
 8012840:	2b08      	cmp	r3, #8
 8012842:	d11b      	bne.n	801287c <HAL_TIM_IRQHandler+0x104>
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	f06f 0208 	mvn.w	r2, #8
 801284c:	611a      	str	r2, [r3, #16]
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	2204      	movs	r2, #4
 8012852:	771a      	strb	r2, [r3, #28]
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	69db      	ldr	r3, [r3, #28]
 801285a:	f003 0303 	and.w	r3, r3, #3
 801285e:	2b00      	cmp	r3, #0
 8012860:	d003      	beq.n	801286a <HAL_TIM_IRQHandler+0xf2>
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f000 f95c 	bl	8012b20 <HAL_TIM_IC_CaptureCallback>
 8012868:	e005      	b.n	8012876 <HAL_TIM_IRQHandler+0xfe>
 801286a:	6878      	ldr	r0, [r7, #4]
 801286c:	f000 f94e 	bl	8012b0c <HAL_TIM_OC_DelayElapsedCallback>
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	f000 f95f 	bl	8012b34 <HAL_TIM_PWM_PulseFinishedCallback>
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	2200      	movs	r2, #0
 801287a:	771a      	strb	r2, [r3, #28]
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	691b      	ldr	r3, [r3, #16]
 8012882:	f003 0310 	and.w	r3, r3, #16
 8012886:	2b10      	cmp	r3, #16
 8012888:	d122      	bne.n	80128d0 <HAL_TIM_IRQHandler+0x158>
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	68db      	ldr	r3, [r3, #12]
 8012890:	f003 0310 	and.w	r3, r3, #16
 8012894:	2b10      	cmp	r3, #16
 8012896:	d11b      	bne.n	80128d0 <HAL_TIM_IRQHandler+0x158>
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	f06f 0210 	mvn.w	r2, #16
 80128a0:	611a      	str	r2, [r3, #16]
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	2208      	movs	r2, #8
 80128a6:	771a      	strb	r2, [r3, #28]
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	69db      	ldr	r3, [r3, #28]
 80128ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d003      	beq.n	80128be <HAL_TIM_IRQHandler+0x146>
 80128b6:	6878      	ldr	r0, [r7, #4]
 80128b8:	f000 f932 	bl	8012b20 <HAL_TIM_IC_CaptureCallback>
 80128bc:	e005      	b.n	80128ca <HAL_TIM_IRQHandler+0x152>
 80128be:	6878      	ldr	r0, [r7, #4]
 80128c0:	f000 f924 	bl	8012b0c <HAL_TIM_OC_DelayElapsedCallback>
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f000 f935 	bl	8012b34 <HAL_TIM_PWM_PulseFinishedCallback>
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	2200      	movs	r2, #0
 80128ce:	771a      	strb	r2, [r3, #28]
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	691b      	ldr	r3, [r3, #16]
 80128d6:	f003 0301 	and.w	r3, r3, #1
 80128da:	2b01      	cmp	r3, #1
 80128dc:	d10e      	bne.n	80128fc <HAL_TIM_IRQHandler+0x184>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	68db      	ldr	r3, [r3, #12]
 80128e4:	f003 0301 	and.w	r3, r3, #1
 80128e8:	2b01      	cmp	r3, #1
 80128ea:	d107      	bne.n	80128fc <HAL_TIM_IRQHandler+0x184>
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	f06f 0201 	mvn.w	r2, #1
 80128f4:	611a      	str	r2, [r3, #16]
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f7fa f8b0 	bl	800ca5c <HAL_TIM_PeriodElapsedCallback>
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	691b      	ldr	r3, [r3, #16]
 8012902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012906:	2b80      	cmp	r3, #128	; 0x80
 8012908:	d10e      	bne.n	8012928 <HAL_TIM_IRQHandler+0x1b0>
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	68db      	ldr	r3, [r3, #12]
 8012910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012914:	2b80      	cmp	r3, #128	; 0x80
 8012916:	d107      	bne.n	8012928 <HAL_TIM_IRQHandler+0x1b0>
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8012920:	611a      	str	r2, [r3, #16]
 8012922:	6878      	ldr	r0, [r7, #4]
 8012924:	f000 fbc4 	bl	80130b0 <HAL_TIMEx_BreakCallback>
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	691b      	ldr	r3, [r3, #16]
 801292e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012932:	2b40      	cmp	r3, #64	; 0x40
 8012934:	d10e      	bne.n	8012954 <HAL_TIM_IRQHandler+0x1dc>
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	68db      	ldr	r3, [r3, #12]
 801293c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012940:	2b40      	cmp	r3, #64	; 0x40
 8012942:	d107      	bne.n	8012954 <HAL_TIM_IRQHandler+0x1dc>
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801294c:	611a      	str	r2, [r3, #16]
 801294e:	6878      	ldr	r0, [r7, #4]
 8012950:	f000 f8fa 	bl	8012b48 <HAL_TIM_TriggerCallback>
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	691b      	ldr	r3, [r3, #16]
 801295a:	f003 0320 	and.w	r3, r3, #32
 801295e:	2b20      	cmp	r3, #32
 8012960:	d10e      	bne.n	8012980 <HAL_TIM_IRQHandler+0x208>
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	68db      	ldr	r3, [r3, #12]
 8012968:	f003 0320 	and.w	r3, r3, #32
 801296c:	2b20      	cmp	r3, #32
 801296e:	d107      	bne.n	8012980 <HAL_TIM_IRQHandler+0x208>
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	f06f 0220 	mvn.w	r2, #32
 8012978:	611a      	str	r2, [r3, #16]
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f000 fb8e 	bl	801309c <HAL_TIMEx_CommutCallback>
 8012980:	bf00      	nop
 8012982:	3708      	adds	r7, #8
 8012984:	46bd      	mov	sp, r7
 8012986:	bd80      	pop	{r7, pc}

08012988 <HAL_TIM_PWM_ConfigChannel>:
 8012988:	b580      	push	{r7, lr}
 801298a:	b086      	sub	sp, #24
 801298c:	af00      	add	r7, sp, #0
 801298e:	60f8      	str	r0, [r7, #12]
 8012990:	60b9      	str	r1, [r7, #8]
 8012992:	607a      	str	r2, [r7, #4]
 8012994:	2300      	movs	r3, #0
 8012996:	75fb      	strb	r3, [r7, #23]
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801299e:	2b01      	cmp	r3, #1
 80129a0:	d101      	bne.n	80129a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80129a2:	2302      	movs	r3, #2
 80129a4:	e0ae      	b.n	8012b04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	2201      	movs	r2, #1
 80129aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	2b0c      	cmp	r3, #12
 80129b2:	f200 809f 	bhi.w	8012af4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80129b6:	a201      	add	r2, pc, #4	; (adr r2, 80129bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80129b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129bc:	080129f1 	.word	0x080129f1
 80129c0:	08012af5 	.word	0x08012af5
 80129c4:	08012af5 	.word	0x08012af5
 80129c8:	08012af5 	.word	0x08012af5
 80129cc:	08012a31 	.word	0x08012a31
 80129d0:	08012af5 	.word	0x08012af5
 80129d4:	08012af5 	.word	0x08012af5
 80129d8:	08012af5 	.word	0x08012af5
 80129dc:	08012a73 	.word	0x08012a73
 80129e0:	08012af5 	.word	0x08012af5
 80129e4:	08012af5 	.word	0x08012af5
 80129e8:	08012af5 	.word	0x08012af5
 80129ec:	08012ab3 	.word	0x08012ab3
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	68b9      	ldr	r1, [r7, #8]
 80129f6:	4618      	mov	r0, r3
 80129f8:	f000 f930 	bl	8012c5c <TIM_OC1_SetConfig>
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	699a      	ldr	r2, [r3, #24]
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	f042 0208 	orr.w	r2, r2, #8
 8012a0a:	619a      	str	r2, [r3, #24]
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	699a      	ldr	r2, [r3, #24]
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	f022 0204 	bic.w	r2, r2, #4
 8012a1a:	619a      	str	r2, [r3, #24]
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	6999      	ldr	r1, [r3, #24]
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	691a      	ldr	r2, [r3, #16]
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	430a      	orrs	r2, r1
 8012a2c:	619a      	str	r2, [r3, #24]
 8012a2e:	e064      	b.n	8012afa <HAL_TIM_PWM_ConfigChannel+0x172>
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	68b9      	ldr	r1, [r7, #8]
 8012a36:	4618      	mov	r0, r3
 8012a38:	f000 f976 	bl	8012d28 <TIM_OC2_SetConfig>
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	699a      	ldr	r2, [r3, #24]
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012a4a:	619a      	str	r2, [r3, #24]
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	699a      	ldr	r2, [r3, #24]
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012a5a:	619a      	str	r2, [r3, #24]
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	6999      	ldr	r1, [r3, #24]
 8012a62:	68bb      	ldr	r3, [r7, #8]
 8012a64:	691b      	ldr	r3, [r3, #16]
 8012a66:	021a      	lsls	r2, r3, #8
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	430a      	orrs	r2, r1
 8012a6e:	619a      	str	r2, [r3, #24]
 8012a70:	e043      	b.n	8012afa <HAL_TIM_PWM_ConfigChannel+0x172>
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	68b9      	ldr	r1, [r7, #8]
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f000 f9c1 	bl	8012e00 <TIM_OC3_SetConfig>
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	69da      	ldr	r2, [r3, #28]
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	f042 0208 	orr.w	r2, r2, #8
 8012a8c:	61da      	str	r2, [r3, #28]
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	69da      	ldr	r2, [r3, #28]
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	f022 0204 	bic.w	r2, r2, #4
 8012a9c:	61da      	str	r2, [r3, #28]
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	69d9      	ldr	r1, [r3, #28]
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	691a      	ldr	r2, [r3, #16]
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	430a      	orrs	r2, r1
 8012aae:	61da      	str	r2, [r3, #28]
 8012ab0:	e023      	b.n	8012afa <HAL_TIM_PWM_ConfigChannel+0x172>
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	68b9      	ldr	r1, [r7, #8]
 8012ab8:	4618      	mov	r0, r3
 8012aba:	f000 fa0b 	bl	8012ed4 <TIM_OC4_SetConfig>
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	69da      	ldr	r2, [r3, #28]
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012acc:	61da      	str	r2, [r3, #28]
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	69da      	ldr	r2, [r3, #28]
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012adc:	61da      	str	r2, [r3, #28]
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	69d9      	ldr	r1, [r3, #28]
 8012ae4:	68bb      	ldr	r3, [r7, #8]
 8012ae6:	691b      	ldr	r3, [r3, #16]
 8012ae8:	021a      	lsls	r2, r3, #8
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	430a      	orrs	r2, r1
 8012af0:	61da      	str	r2, [r3, #28]
 8012af2:	e002      	b.n	8012afa <HAL_TIM_PWM_ConfigChannel+0x172>
 8012af4:	2301      	movs	r3, #1
 8012af6:	75fb      	strb	r3, [r7, #23]
 8012af8:	bf00      	nop
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	2200      	movs	r2, #0
 8012afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8012b02:	7dfb      	ldrb	r3, [r7, #23]
 8012b04:	4618      	mov	r0, r3
 8012b06:	3718      	adds	r7, #24
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}

08012b0c <HAL_TIM_OC_DelayElapsedCallback>:
 8012b0c:	b480      	push	{r7}
 8012b0e:	b083      	sub	sp, #12
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
 8012b14:	bf00      	nop
 8012b16:	370c      	adds	r7, #12
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1e:	4770      	bx	lr

08012b20 <HAL_TIM_IC_CaptureCallback>:
 8012b20:	b480      	push	{r7}
 8012b22:	b083      	sub	sp, #12
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
 8012b28:	bf00      	nop
 8012b2a:	370c      	adds	r7, #12
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b32:	4770      	bx	lr

08012b34 <HAL_TIM_PWM_PulseFinishedCallback>:
 8012b34:	b480      	push	{r7}
 8012b36:	b083      	sub	sp, #12
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
 8012b3c:	bf00      	nop
 8012b3e:	370c      	adds	r7, #12
 8012b40:	46bd      	mov	sp, r7
 8012b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b46:	4770      	bx	lr

08012b48 <HAL_TIM_TriggerCallback>:
 8012b48:	b480      	push	{r7}
 8012b4a:	b083      	sub	sp, #12
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
 8012b50:	bf00      	nop
 8012b52:	370c      	adds	r7, #12
 8012b54:	46bd      	mov	sp, r7
 8012b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5a:	4770      	bx	lr

08012b5c <TIM_Base_SetConfig>:
 8012b5c:	b480      	push	{r7}
 8012b5e:	b085      	sub	sp, #20
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
 8012b64:	6039      	str	r1, [r7, #0]
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	60fb      	str	r3, [r7, #12]
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	4a34      	ldr	r2, [pc, #208]	; (8012c40 <TIM_Base_SetConfig+0xe4>)
 8012b70:	4293      	cmp	r3, r2
 8012b72:	d00f      	beq.n	8012b94 <TIM_Base_SetConfig+0x38>
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012b7a:	d00b      	beq.n	8012b94 <TIM_Base_SetConfig+0x38>
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	4a31      	ldr	r2, [pc, #196]	; (8012c44 <TIM_Base_SetConfig+0xe8>)
 8012b80:	4293      	cmp	r3, r2
 8012b82:	d007      	beq.n	8012b94 <TIM_Base_SetConfig+0x38>
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	4a30      	ldr	r2, [pc, #192]	; (8012c48 <TIM_Base_SetConfig+0xec>)
 8012b88:	4293      	cmp	r3, r2
 8012b8a:	d003      	beq.n	8012b94 <TIM_Base_SetConfig+0x38>
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	4a2f      	ldr	r2, [pc, #188]	; (8012c4c <TIM_Base_SetConfig+0xf0>)
 8012b90:	4293      	cmp	r3, r2
 8012b92:	d108      	bne.n	8012ba6 <TIM_Base_SetConfig+0x4a>
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012b9a:	60fb      	str	r3, [r7, #12]
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	685b      	ldr	r3, [r3, #4]
 8012ba0:	68fa      	ldr	r2, [r7, #12]
 8012ba2:	4313      	orrs	r3, r2
 8012ba4:	60fb      	str	r3, [r7, #12]
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	4a25      	ldr	r2, [pc, #148]	; (8012c40 <TIM_Base_SetConfig+0xe4>)
 8012baa:	4293      	cmp	r3, r2
 8012bac:	d01b      	beq.n	8012be6 <TIM_Base_SetConfig+0x8a>
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012bb4:	d017      	beq.n	8012be6 <TIM_Base_SetConfig+0x8a>
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	4a22      	ldr	r2, [pc, #136]	; (8012c44 <TIM_Base_SetConfig+0xe8>)
 8012bba:	4293      	cmp	r3, r2
 8012bbc:	d013      	beq.n	8012be6 <TIM_Base_SetConfig+0x8a>
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	4a21      	ldr	r2, [pc, #132]	; (8012c48 <TIM_Base_SetConfig+0xec>)
 8012bc2:	4293      	cmp	r3, r2
 8012bc4:	d00f      	beq.n	8012be6 <TIM_Base_SetConfig+0x8a>
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	4a20      	ldr	r2, [pc, #128]	; (8012c4c <TIM_Base_SetConfig+0xf0>)
 8012bca:	4293      	cmp	r3, r2
 8012bcc:	d00b      	beq.n	8012be6 <TIM_Base_SetConfig+0x8a>
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	4a1f      	ldr	r2, [pc, #124]	; (8012c50 <TIM_Base_SetConfig+0xf4>)
 8012bd2:	4293      	cmp	r3, r2
 8012bd4:	d007      	beq.n	8012be6 <TIM_Base_SetConfig+0x8a>
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	4a1e      	ldr	r2, [pc, #120]	; (8012c54 <TIM_Base_SetConfig+0xf8>)
 8012bda:	4293      	cmp	r3, r2
 8012bdc:	d003      	beq.n	8012be6 <TIM_Base_SetConfig+0x8a>
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	4a1d      	ldr	r2, [pc, #116]	; (8012c58 <TIM_Base_SetConfig+0xfc>)
 8012be2:	4293      	cmp	r3, r2
 8012be4:	d108      	bne.n	8012bf8 <TIM_Base_SetConfig+0x9c>
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012bec:	60fb      	str	r3, [r7, #12]
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	68db      	ldr	r3, [r3, #12]
 8012bf2:	68fa      	ldr	r2, [r7, #12]
 8012bf4:	4313      	orrs	r3, r2
 8012bf6:	60fb      	str	r3, [r7, #12]
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012bfe:	683b      	ldr	r3, [r7, #0]
 8012c00:	695b      	ldr	r3, [r3, #20]
 8012c02:	4313      	orrs	r3, r2
 8012c04:	60fb      	str	r3, [r7, #12]
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	68fa      	ldr	r2, [r7, #12]
 8012c0a:	601a      	str	r2, [r3, #0]
 8012c0c:	683b      	ldr	r3, [r7, #0]
 8012c0e:	689a      	ldr	r2, [r3, #8]
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	62da      	str	r2, [r3, #44]	; 0x2c
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	681a      	ldr	r2, [r3, #0]
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	629a      	str	r2, [r3, #40]	; 0x28
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	4a08      	ldr	r2, [pc, #32]	; (8012c40 <TIM_Base_SetConfig+0xe4>)
 8012c20:	4293      	cmp	r3, r2
 8012c22:	d103      	bne.n	8012c2c <TIM_Base_SetConfig+0xd0>
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	691a      	ldr	r2, [r3, #16]
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2201      	movs	r2, #1
 8012c30:	615a      	str	r2, [r3, #20]
 8012c32:	bf00      	nop
 8012c34:	3714      	adds	r7, #20
 8012c36:	46bd      	mov	sp, r7
 8012c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3c:	4770      	bx	lr
 8012c3e:	bf00      	nop
 8012c40:	40010000 	.word	0x40010000
 8012c44:	40000400 	.word	0x40000400
 8012c48:	40000800 	.word	0x40000800
 8012c4c:	40000c00 	.word	0x40000c00
 8012c50:	40014000 	.word	0x40014000
 8012c54:	40014400 	.word	0x40014400
 8012c58:	40014800 	.word	0x40014800

08012c5c <TIM_OC1_SetConfig>:
 8012c5c:	b480      	push	{r7}
 8012c5e:	b087      	sub	sp, #28
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	6039      	str	r1, [r7, #0]
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	6a1b      	ldr	r3, [r3, #32]
 8012c6a:	f023 0201 	bic.w	r2, r3, #1
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	621a      	str	r2, [r3, #32]
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	6a1b      	ldr	r3, [r3, #32]
 8012c76:	617b      	str	r3, [r7, #20]
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	685b      	ldr	r3, [r3, #4]
 8012c7c:	613b      	str	r3, [r7, #16]
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	699b      	ldr	r3, [r3, #24]
 8012c82:	60fb      	str	r3, [r7, #12]
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012c8a:	60fb      	str	r3, [r7, #12]
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	f023 0303 	bic.w	r3, r3, #3
 8012c92:	60fb      	str	r3, [r7, #12]
 8012c94:	683b      	ldr	r3, [r7, #0]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	68fa      	ldr	r2, [r7, #12]
 8012c9a:	4313      	orrs	r3, r2
 8012c9c:	60fb      	str	r3, [r7, #12]
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	f023 0302 	bic.w	r3, r3, #2
 8012ca4:	617b      	str	r3, [r7, #20]
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	689b      	ldr	r3, [r3, #8]
 8012caa:	697a      	ldr	r2, [r7, #20]
 8012cac:	4313      	orrs	r3, r2
 8012cae:	617b      	str	r3, [r7, #20]
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	4a1c      	ldr	r2, [pc, #112]	; (8012d24 <TIM_OC1_SetConfig+0xc8>)
 8012cb4:	4293      	cmp	r3, r2
 8012cb6:	d10c      	bne.n	8012cd2 <TIM_OC1_SetConfig+0x76>
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	f023 0308 	bic.w	r3, r3, #8
 8012cbe:	617b      	str	r3, [r7, #20]
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	68db      	ldr	r3, [r3, #12]
 8012cc4:	697a      	ldr	r2, [r7, #20]
 8012cc6:	4313      	orrs	r3, r2
 8012cc8:	617b      	str	r3, [r7, #20]
 8012cca:	697b      	ldr	r3, [r7, #20]
 8012ccc:	f023 0304 	bic.w	r3, r3, #4
 8012cd0:	617b      	str	r3, [r7, #20]
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	4a13      	ldr	r2, [pc, #76]	; (8012d24 <TIM_OC1_SetConfig+0xc8>)
 8012cd6:	4293      	cmp	r3, r2
 8012cd8:	d111      	bne.n	8012cfe <TIM_OC1_SetConfig+0xa2>
 8012cda:	693b      	ldr	r3, [r7, #16]
 8012cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012ce0:	613b      	str	r3, [r7, #16]
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012ce8:	613b      	str	r3, [r7, #16]
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	695b      	ldr	r3, [r3, #20]
 8012cee:	693a      	ldr	r2, [r7, #16]
 8012cf0:	4313      	orrs	r3, r2
 8012cf2:	613b      	str	r3, [r7, #16]
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	699b      	ldr	r3, [r3, #24]
 8012cf8:	693a      	ldr	r2, [r7, #16]
 8012cfa:	4313      	orrs	r3, r2
 8012cfc:	613b      	str	r3, [r7, #16]
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	693a      	ldr	r2, [r7, #16]
 8012d02:	605a      	str	r2, [r3, #4]
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	68fa      	ldr	r2, [r7, #12]
 8012d08:	619a      	str	r2, [r3, #24]
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	685a      	ldr	r2, [r3, #4]
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	635a      	str	r2, [r3, #52]	; 0x34
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	697a      	ldr	r2, [r7, #20]
 8012d16:	621a      	str	r2, [r3, #32]
 8012d18:	bf00      	nop
 8012d1a:	371c      	adds	r7, #28
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d22:	4770      	bx	lr
 8012d24:	40010000 	.word	0x40010000

08012d28 <TIM_OC2_SetConfig>:
 8012d28:	b480      	push	{r7}
 8012d2a:	b087      	sub	sp, #28
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
 8012d30:	6039      	str	r1, [r7, #0]
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	6a1b      	ldr	r3, [r3, #32]
 8012d36:	f023 0210 	bic.w	r2, r3, #16
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	621a      	str	r2, [r3, #32]
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	6a1b      	ldr	r3, [r3, #32]
 8012d42:	617b      	str	r3, [r7, #20]
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	685b      	ldr	r3, [r3, #4]
 8012d48:	613b      	str	r3, [r7, #16]
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	699b      	ldr	r3, [r3, #24]
 8012d4e:	60fb      	str	r3, [r7, #12]
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012d56:	60fb      	str	r3, [r7, #12]
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012d5e:	60fb      	str	r3, [r7, #12]
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	021b      	lsls	r3, r3, #8
 8012d66:	68fa      	ldr	r2, [r7, #12]
 8012d68:	4313      	orrs	r3, r2
 8012d6a:	60fb      	str	r3, [r7, #12]
 8012d6c:	697b      	ldr	r3, [r7, #20]
 8012d6e:	f023 0320 	bic.w	r3, r3, #32
 8012d72:	617b      	str	r3, [r7, #20]
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	689b      	ldr	r3, [r3, #8]
 8012d78:	011b      	lsls	r3, r3, #4
 8012d7a:	697a      	ldr	r2, [r7, #20]
 8012d7c:	4313      	orrs	r3, r2
 8012d7e:	617b      	str	r3, [r7, #20]
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	4a1e      	ldr	r2, [pc, #120]	; (8012dfc <TIM_OC2_SetConfig+0xd4>)
 8012d84:	4293      	cmp	r3, r2
 8012d86:	d10d      	bne.n	8012da4 <TIM_OC2_SetConfig+0x7c>
 8012d88:	697b      	ldr	r3, [r7, #20]
 8012d8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012d8e:	617b      	str	r3, [r7, #20]
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	68db      	ldr	r3, [r3, #12]
 8012d94:	011b      	lsls	r3, r3, #4
 8012d96:	697a      	ldr	r2, [r7, #20]
 8012d98:	4313      	orrs	r3, r2
 8012d9a:	617b      	str	r3, [r7, #20]
 8012d9c:	697b      	ldr	r3, [r7, #20]
 8012d9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012da2:	617b      	str	r3, [r7, #20]
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	4a15      	ldr	r2, [pc, #84]	; (8012dfc <TIM_OC2_SetConfig+0xd4>)
 8012da8:	4293      	cmp	r3, r2
 8012daa:	d113      	bne.n	8012dd4 <TIM_OC2_SetConfig+0xac>
 8012dac:	693b      	ldr	r3, [r7, #16]
 8012dae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012db2:	613b      	str	r3, [r7, #16]
 8012db4:	693b      	ldr	r3, [r7, #16]
 8012db6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012dba:	613b      	str	r3, [r7, #16]
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	695b      	ldr	r3, [r3, #20]
 8012dc0:	009b      	lsls	r3, r3, #2
 8012dc2:	693a      	ldr	r2, [r7, #16]
 8012dc4:	4313      	orrs	r3, r2
 8012dc6:	613b      	str	r3, [r7, #16]
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	699b      	ldr	r3, [r3, #24]
 8012dcc:	009b      	lsls	r3, r3, #2
 8012dce:	693a      	ldr	r2, [r7, #16]
 8012dd0:	4313      	orrs	r3, r2
 8012dd2:	613b      	str	r3, [r7, #16]
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	693a      	ldr	r2, [r7, #16]
 8012dd8:	605a      	str	r2, [r3, #4]
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	68fa      	ldr	r2, [r7, #12]
 8012dde:	619a      	str	r2, [r3, #24]
 8012de0:	683b      	ldr	r3, [r7, #0]
 8012de2:	685a      	ldr	r2, [r3, #4]
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	639a      	str	r2, [r3, #56]	; 0x38
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	697a      	ldr	r2, [r7, #20]
 8012dec:	621a      	str	r2, [r3, #32]
 8012dee:	bf00      	nop
 8012df0:	371c      	adds	r7, #28
 8012df2:	46bd      	mov	sp, r7
 8012df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df8:	4770      	bx	lr
 8012dfa:	bf00      	nop
 8012dfc:	40010000 	.word	0x40010000

08012e00 <TIM_OC3_SetConfig>:
 8012e00:	b480      	push	{r7}
 8012e02:	b087      	sub	sp, #28
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
 8012e08:	6039      	str	r1, [r7, #0]
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	6a1b      	ldr	r3, [r3, #32]
 8012e0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	621a      	str	r2, [r3, #32]
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	6a1b      	ldr	r3, [r3, #32]
 8012e1a:	617b      	str	r3, [r7, #20]
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	685b      	ldr	r3, [r3, #4]
 8012e20:	613b      	str	r3, [r7, #16]
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	69db      	ldr	r3, [r3, #28]
 8012e26:	60fb      	str	r3, [r7, #12]
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012e2e:	60fb      	str	r3, [r7, #12]
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	f023 0303 	bic.w	r3, r3, #3
 8012e36:	60fb      	str	r3, [r7, #12]
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	68fa      	ldr	r2, [r7, #12]
 8012e3e:	4313      	orrs	r3, r2
 8012e40:	60fb      	str	r3, [r7, #12]
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012e48:	617b      	str	r3, [r7, #20]
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	689b      	ldr	r3, [r3, #8]
 8012e4e:	021b      	lsls	r3, r3, #8
 8012e50:	697a      	ldr	r2, [r7, #20]
 8012e52:	4313      	orrs	r3, r2
 8012e54:	617b      	str	r3, [r7, #20]
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	4a1d      	ldr	r2, [pc, #116]	; (8012ed0 <TIM_OC3_SetConfig+0xd0>)
 8012e5a:	4293      	cmp	r3, r2
 8012e5c:	d10d      	bne.n	8012e7a <TIM_OC3_SetConfig+0x7a>
 8012e5e:	697b      	ldr	r3, [r7, #20]
 8012e60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012e64:	617b      	str	r3, [r7, #20]
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	68db      	ldr	r3, [r3, #12]
 8012e6a:	021b      	lsls	r3, r3, #8
 8012e6c:	697a      	ldr	r2, [r7, #20]
 8012e6e:	4313      	orrs	r3, r2
 8012e70:	617b      	str	r3, [r7, #20]
 8012e72:	697b      	ldr	r3, [r7, #20]
 8012e74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012e78:	617b      	str	r3, [r7, #20]
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	4a14      	ldr	r2, [pc, #80]	; (8012ed0 <TIM_OC3_SetConfig+0xd0>)
 8012e7e:	4293      	cmp	r3, r2
 8012e80:	d113      	bne.n	8012eaa <TIM_OC3_SetConfig+0xaa>
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012e88:	613b      	str	r3, [r7, #16]
 8012e8a:	693b      	ldr	r3, [r7, #16]
 8012e8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012e90:	613b      	str	r3, [r7, #16]
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	695b      	ldr	r3, [r3, #20]
 8012e96:	011b      	lsls	r3, r3, #4
 8012e98:	693a      	ldr	r2, [r7, #16]
 8012e9a:	4313      	orrs	r3, r2
 8012e9c:	613b      	str	r3, [r7, #16]
 8012e9e:	683b      	ldr	r3, [r7, #0]
 8012ea0:	699b      	ldr	r3, [r3, #24]
 8012ea2:	011b      	lsls	r3, r3, #4
 8012ea4:	693a      	ldr	r2, [r7, #16]
 8012ea6:	4313      	orrs	r3, r2
 8012ea8:	613b      	str	r3, [r7, #16]
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	693a      	ldr	r2, [r7, #16]
 8012eae:	605a      	str	r2, [r3, #4]
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	68fa      	ldr	r2, [r7, #12]
 8012eb4:	61da      	str	r2, [r3, #28]
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	685a      	ldr	r2, [r3, #4]
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	63da      	str	r2, [r3, #60]	; 0x3c
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	697a      	ldr	r2, [r7, #20]
 8012ec2:	621a      	str	r2, [r3, #32]
 8012ec4:	bf00      	nop
 8012ec6:	371c      	adds	r7, #28
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ece:	4770      	bx	lr
 8012ed0:	40010000 	.word	0x40010000

08012ed4 <TIM_OC4_SetConfig>:
 8012ed4:	b480      	push	{r7}
 8012ed6:	b087      	sub	sp, #28
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
 8012edc:	6039      	str	r1, [r7, #0]
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	6a1b      	ldr	r3, [r3, #32]
 8012ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	621a      	str	r2, [r3, #32]
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	6a1b      	ldr	r3, [r3, #32]
 8012eee:	613b      	str	r3, [r7, #16]
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	685b      	ldr	r3, [r3, #4]
 8012ef4:	617b      	str	r3, [r7, #20]
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	69db      	ldr	r3, [r3, #28]
 8012efa:	60fb      	str	r3, [r7, #12]
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012f02:	60fb      	str	r3, [r7, #12]
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012f0a:	60fb      	str	r3, [r7, #12]
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	021b      	lsls	r3, r3, #8
 8012f12:	68fa      	ldr	r2, [r7, #12]
 8012f14:	4313      	orrs	r3, r2
 8012f16:	60fb      	str	r3, [r7, #12]
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012f1e:	613b      	str	r3, [r7, #16]
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	689b      	ldr	r3, [r3, #8]
 8012f24:	031b      	lsls	r3, r3, #12
 8012f26:	693a      	ldr	r2, [r7, #16]
 8012f28:	4313      	orrs	r3, r2
 8012f2a:	613b      	str	r3, [r7, #16]
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	4a10      	ldr	r2, [pc, #64]	; (8012f70 <TIM_OC4_SetConfig+0x9c>)
 8012f30:	4293      	cmp	r3, r2
 8012f32:	d109      	bne.n	8012f48 <TIM_OC4_SetConfig+0x74>
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012f3a:	617b      	str	r3, [r7, #20]
 8012f3c:	683b      	ldr	r3, [r7, #0]
 8012f3e:	695b      	ldr	r3, [r3, #20]
 8012f40:	019b      	lsls	r3, r3, #6
 8012f42:	697a      	ldr	r2, [r7, #20]
 8012f44:	4313      	orrs	r3, r2
 8012f46:	617b      	str	r3, [r7, #20]
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	697a      	ldr	r2, [r7, #20]
 8012f4c:	605a      	str	r2, [r3, #4]
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	68fa      	ldr	r2, [r7, #12]
 8012f52:	61da      	str	r2, [r3, #28]
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	685a      	ldr	r2, [r3, #4]
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	641a      	str	r2, [r3, #64]	; 0x40
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	693a      	ldr	r2, [r7, #16]
 8012f60:	621a      	str	r2, [r3, #32]
 8012f62:	bf00      	nop
 8012f64:	371c      	adds	r7, #28
 8012f66:	46bd      	mov	sp, r7
 8012f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop
 8012f70:	40010000 	.word	0x40010000

08012f74 <TIM_CCxChannelCmd>:
 8012f74:	b480      	push	{r7}
 8012f76:	b087      	sub	sp, #28
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	60f8      	str	r0, [r7, #12]
 8012f7c:	60b9      	str	r1, [r7, #8]
 8012f7e:	607a      	str	r2, [r7, #4]
 8012f80:	68bb      	ldr	r3, [r7, #8]
 8012f82:	f003 031f 	and.w	r3, r3, #31
 8012f86:	2201      	movs	r2, #1
 8012f88:	fa02 f303 	lsl.w	r3, r2, r3
 8012f8c:	617b      	str	r3, [r7, #20]
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	6a1a      	ldr	r2, [r3, #32]
 8012f92:	697b      	ldr	r3, [r7, #20]
 8012f94:	43db      	mvns	r3, r3
 8012f96:	401a      	ands	r2, r3
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	621a      	str	r2, [r3, #32]
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	6a1a      	ldr	r2, [r3, #32]
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	f003 031f 	and.w	r3, r3, #31
 8012fa6:	6879      	ldr	r1, [r7, #4]
 8012fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8012fac:	431a      	orrs	r2, r3
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	621a      	str	r2, [r3, #32]
 8012fb2:	bf00      	nop
 8012fb4:	371c      	adds	r7, #28
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr
	...

08012fc0 <HAL_TIMEx_MasterConfigSynchronization>:
 8012fc0:	b480      	push	{r7}
 8012fc2:	b085      	sub	sp, #20
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
 8012fc8:	6039      	str	r1, [r7, #0]
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012fd0:	2b01      	cmp	r3, #1
 8012fd2:	d101      	bne.n	8012fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012fd4:	2302      	movs	r3, #2
 8012fd6:	e050      	b.n	801307a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	2201      	movs	r2, #1
 8012fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	2202      	movs	r2, #2
 8012fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	685b      	ldr	r3, [r3, #4]
 8012fee:	60fb      	str	r3, [r7, #12]
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	689b      	ldr	r3, [r3, #8]
 8012ff6:	60bb      	str	r3, [r7, #8]
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ffe:	60fb      	str	r3, [r7, #12]
 8013000:	683b      	ldr	r3, [r7, #0]
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	68fa      	ldr	r2, [r7, #12]
 8013006:	4313      	orrs	r3, r2
 8013008:	60fb      	str	r3, [r7, #12]
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	68fa      	ldr	r2, [r7, #12]
 8013010:	605a      	str	r2, [r3, #4]
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	4a1c      	ldr	r2, [pc, #112]	; (8013088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8013018:	4293      	cmp	r3, r2
 801301a:	d018      	beq.n	801304e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013024:	d013      	beq.n	801304e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	4a18      	ldr	r2, [pc, #96]	; (801308c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 801302c:	4293      	cmp	r3, r2
 801302e:	d00e      	beq.n	801304e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	4a16      	ldr	r2, [pc, #88]	; (8013090 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8013036:	4293      	cmp	r3, r2
 8013038:	d009      	beq.n	801304e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	4a15      	ldr	r2, [pc, #84]	; (8013094 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8013040:	4293      	cmp	r3, r2
 8013042:	d004      	beq.n	801304e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	4a13      	ldr	r2, [pc, #76]	; (8013098 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 801304a:	4293      	cmp	r3, r2
 801304c:	d10c      	bne.n	8013068 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013054:	60bb      	str	r3, [r7, #8]
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	685b      	ldr	r3, [r3, #4]
 801305a:	68ba      	ldr	r2, [r7, #8]
 801305c:	4313      	orrs	r3, r2
 801305e:	60bb      	str	r3, [r7, #8]
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	68ba      	ldr	r2, [r7, #8]
 8013066:	609a      	str	r2, [r3, #8]
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2201      	movs	r2, #1
 801306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	2200      	movs	r2, #0
 8013074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8013078:	2300      	movs	r3, #0
 801307a:	4618      	mov	r0, r3
 801307c:	3714      	adds	r7, #20
 801307e:	46bd      	mov	sp, r7
 8013080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013084:	4770      	bx	lr
 8013086:	bf00      	nop
 8013088:	40010000 	.word	0x40010000
 801308c:	40000400 	.word	0x40000400
 8013090:	40000800 	.word	0x40000800
 8013094:	40000c00 	.word	0x40000c00
 8013098:	40014000 	.word	0x40014000

0801309c <HAL_TIMEx_CommutCallback>:
 801309c:	b480      	push	{r7}
 801309e:	b083      	sub	sp, #12
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
 80130a4:	bf00      	nop
 80130a6:	370c      	adds	r7, #12
 80130a8:	46bd      	mov	sp, r7
 80130aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ae:	4770      	bx	lr

080130b0 <HAL_TIMEx_BreakCallback>:
 80130b0:	b480      	push	{r7}
 80130b2:	b083      	sub	sp, #12
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
 80130b8:	bf00      	nop
 80130ba:	370c      	adds	r7, #12
 80130bc:	46bd      	mov	sp, r7
 80130be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c2:	4770      	bx	lr

080130c4 <HAL_UART_Init>:
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b082      	sub	sp, #8
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d101      	bne.n	80130d6 <HAL_UART_Init+0x12>
 80130d2:	2301      	movs	r3, #1
 80130d4:	e03f      	b.n	8013156 <HAL_UART_Init+0x92>
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80130dc:	b2db      	uxtb	r3, r3
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d106      	bne.n	80130f0 <HAL_UART_Init+0x2c>
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	2200      	movs	r2, #0
 80130e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80130ea:	6878      	ldr	r0, [r7, #4]
 80130ec:	f7f9 fe1c 	bl	800cd28 <HAL_UART_MspInit>
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	2224      	movs	r2, #36	; 0x24
 80130f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	68da      	ldr	r2, [r3, #12]
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013106:	60da      	str	r2, [r3, #12]
 8013108:	6878      	ldr	r0, [r7, #4]
 801310a:	f000 f829 	bl	8013160 <UART_SetConfig>
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	691a      	ldr	r2, [r3, #16]
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801311c:	611a      	str	r2, [r3, #16]
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	695a      	ldr	r2, [r3, #20]
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801312c:	615a      	str	r2, [r3, #20]
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	68da      	ldr	r2, [r3, #12]
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801313c:	60da      	str	r2, [r3, #12]
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	2200      	movs	r2, #0
 8013142:	641a      	str	r2, [r3, #64]	; 0x40
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2220      	movs	r2, #32
 8013148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2220      	movs	r2, #32
 8013150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013154:	2300      	movs	r3, #0
 8013156:	4618      	mov	r0, r3
 8013158:	3708      	adds	r7, #8
 801315a:	46bd      	mov	sp, r7
 801315c:	bd80      	pop	{r7, pc}
	...

08013160 <UART_SetConfig>:
 8013160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013164:	b09f      	sub	sp, #124	; 0x7c
 8013166:	af00      	add	r7, sp, #0
 8013168:	66f8      	str	r0, [r7, #108]	; 0x6c
 801316a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	691b      	ldr	r3, [r3, #16]
 8013170:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8013174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013176:	68d9      	ldr	r1, [r3, #12]
 8013178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801317a:	681a      	ldr	r2, [r3, #0]
 801317c:	ea40 0301 	orr.w	r3, r0, r1
 8013180:	6113      	str	r3, [r2, #16]
 8013182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013184:	689a      	ldr	r2, [r3, #8]
 8013186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013188:	691b      	ldr	r3, [r3, #16]
 801318a:	431a      	orrs	r2, r3
 801318c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801318e:	695b      	ldr	r3, [r3, #20]
 8013190:	431a      	orrs	r2, r3
 8013192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013194:	69db      	ldr	r3, [r3, #28]
 8013196:	4313      	orrs	r3, r2
 8013198:	673b      	str	r3, [r7, #112]	; 0x70
 801319a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	68db      	ldr	r3, [r3, #12]
 80131a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80131a4:	f021 010c 	bic.w	r1, r1, #12
 80131a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80131ae:	430b      	orrs	r3, r1
 80131b0:	60d3      	str	r3, [r2, #12]
 80131b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	695b      	ldr	r3, [r3, #20]
 80131b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80131bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80131be:	6999      	ldr	r1, [r3, #24]
 80131c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80131c2:	681a      	ldr	r2, [r3, #0]
 80131c4:	ea40 0301 	orr.w	r3, r0, r1
 80131c8:	6153      	str	r3, [r2, #20]
 80131ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80131cc:	681a      	ldr	r2, [r3, #0]
 80131ce:	4bc5      	ldr	r3, [pc, #788]	; (80134e4 <UART_SetConfig+0x384>)
 80131d0:	429a      	cmp	r2, r3
 80131d2:	d004      	beq.n	80131de <UART_SetConfig+0x7e>
 80131d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80131d6:	681a      	ldr	r2, [r3, #0]
 80131d8:	4bc3      	ldr	r3, [pc, #780]	; (80134e8 <UART_SetConfig+0x388>)
 80131da:	429a      	cmp	r2, r3
 80131dc:	d103      	bne.n	80131e6 <UART_SetConfig+0x86>
 80131de:	f7fe fabd 	bl	801175c <HAL_RCC_GetPCLK2Freq>
 80131e2:	6778      	str	r0, [r7, #116]	; 0x74
 80131e4:	e002      	b.n	80131ec <UART_SetConfig+0x8c>
 80131e6:	f7fe faa5 	bl	8011734 <HAL_RCC_GetPCLK1Freq>
 80131ea:	6778      	str	r0, [r7, #116]	; 0x74
 80131ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80131ee:	69db      	ldr	r3, [r3, #28]
 80131f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80131f4:	f040 80b6 	bne.w	8013364 <UART_SetConfig+0x204>
 80131f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80131fa:	461c      	mov	r4, r3
 80131fc:	f04f 0500 	mov.w	r5, #0
 8013200:	4622      	mov	r2, r4
 8013202:	462b      	mov	r3, r5
 8013204:	1891      	adds	r1, r2, r2
 8013206:	6439      	str	r1, [r7, #64]	; 0x40
 8013208:	415b      	adcs	r3, r3
 801320a:	647b      	str	r3, [r7, #68]	; 0x44
 801320c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013210:	1912      	adds	r2, r2, r4
 8013212:	eb45 0303 	adc.w	r3, r5, r3
 8013216:	f04f 0000 	mov.w	r0, #0
 801321a:	f04f 0100 	mov.w	r1, #0
 801321e:	00d9      	lsls	r1, r3, #3
 8013220:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013224:	00d0      	lsls	r0, r2, #3
 8013226:	4602      	mov	r2, r0
 8013228:	460b      	mov	r3, r1
 801322a:	1911      	adds	r1, r2, r4
 801322c:	6639      	str	r1, [r7, #96]	; 0x60
 801322e:	416b      	adcs	r3, r5
 8013230:	667b      	str	r3, [r7, #100]	; 0x64
 8013232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013234:	685b      	ldr	r3, [r3, #4]
 8013236:	461a      	mov	r2, r3
 8013238:	f04f 0300 	mov.w	r3, #0
 801323c:	1891      	adds	r1, r2, r2
 801323e:	63b9      	str	r1, [r7, #56]	; 0x38
 8013240:	415b      	adcs	r3, r3
 8013242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013244:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8013248:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801324c:	f7f8 ff50 	bl	800c0f0 <__aeabi_uldivmod>
 8013250:	4602      	mov	r2, r0
 8013252:	460b      	mov	r3, r1
 8013254:	4ba5      	ldr	r3, [pc, #660]	; (80134ec <UART_SetConfig+0x38c>)
 8013256:	fba3 2302 	umull	r2, r3, r3, r2
 801325a:	095b      	lsrs	r3, r3, #5
 801325c:	011e      	lsls	r6, r3, #4
 801325e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013260:	461c      	mov	r4, r3
 8013262:	f04f 0500 	mov.w	r5, #0
 8013266:	4622      	mov	r2, r4
 8013268:	462b      	mov	r3, r5
 801326a:	1891      	adds	r1, r2, r2
 801326c:	6339      	str	r1, [r7, #48]	; 0x30
 801326e:	415b      	adcs	r3, r3
 8013270:	637b      	str	r3, [r7, #52]	; 0x34
 8013272:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8013276:	1912      	adds	r2, r2, r4
 8013278:	eb45 0303 	adc.w	r3, r5, r3
 801327c:	f04f 0000 	mov.w	r0, #0
 8013280:	f04f 0100 	mov.w	r1, #0
 8013284:	00d9      	lsls	r1, r3, #3
 8013286:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801328a:	00d0      	lsls	r0, r2, #3
 801328c:	4602      	mov	r2, r0
 801328e:	460b      	mov	r3, r1
 8013290:	1911      	adds	r1, r2, r4
 8013292:	65b9      	str	r1, [r7, #88]	; 0x58
 8013294:	416b      	adcs	r3, r5
 8013296:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801329a:	685b      	ldr	r3, [r3, #4]
 801329c:	461a      	mov	r2, r3
 801329e:	f04f 0300 	mov.w	r3, #0
 80132a2:	1891      	adds	r1, r2, r2
 80132a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80132a6:	415b      	adcs	r3, r3
 80132a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80132aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80132ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80132b2:	f7f8 ff1d 	bl	800c0f0 <__aeabi_uldivmod>
 80132b6:	4602      	mov	r2, r0
 80132b8:	460b      	mov	r3, r1
 80132ba:	4b8c      	ldr	r3, [pc, #560]	; (80134ec <UART_SetConfig+0x38c>)
 80132bc:	fba3 1302 	umull	r1, r3, r3, r2
 80132c0:	095b      	lsrs	r3, r3, #5
 80132c2:	2164      	movs	r1, #100	; 0x64
 80132c4:	fb01 f303 	mul.w	r3, r1, r3
 80132c8:	1ad3      	subs	r3, r2, r3
 80132ca:	00db      	lsls	r3, r3, #3
 80132cc:	3332      	adds	r3, #50	; 0x32
 80132ce:	4a87      	ldr	r2, [pc, #540]	; (80134ec <UART_SetConfig+0x38c>)
 80132d0:	fba2 2303 	umull	r2, r3, r2, r3
 80132d4:	095b      	lsrs	r3, r3, #5
 80132d6:	005b      	lsls	r3, r3, #1
 80132d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80132dc:	441e      	add	r6, r3
 80132de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80132e0:	4618      	mov	r0, r3
 80132e2:	f04f 0100 	mov.w	r1, #0
 80132e6:	4602      	mov	r2, r0
 80132e8:	460b      	mov	r3, r1
 80132ea:	1894      	adds	r4, r2, r2
 80132ec:	623c      	str	r4, [r7, #32]
 80132ee:	415b      	adcs	r3, r3
 80132f0:	627b      	str	r3, [r7, #36]	; 0x24
 80132f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80132f6:	1812      	adds	r2, r2, r0
 80132f8:	eb41 0303 	adc.w	r3, r1, r3
 80132fc:	f04f 0400 	mov.w	r4, #0
 8013300:	f04f 0500 	mov.w	r5, #0
 8013304:	00dd      	lsls	r5, r3, #3
 8013306:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801330a:	00d4      	lsls	r4, r2, #3
 801330c:	4622      	mov	r2, r4
 801330e:	462b      	mov	r3, r5
 8013310:	1814      	adds	r4, r2, r0
 8013312:	653c      	str	r4, [r7, #80]	; 0x50
 8013314:	414b      	adcs	r3, r1
 8013316:	657b      	str	r3, [r7, #84]	; 0x54
 8013318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801331a:	685b      	ldr	r3, [r3, #4]
 801331c:	461a      	mov	r2, r3
 801331e:	f04f 0300 	mov.w	r3, #0
 8013322:	1891      	adds	r1, r2, r2
 8013324:	61b9      	str	r1, [r7, #24]
 8013326:	415b      	adcs	r3, r3
 8013328:	61fb      	str	r3, [r7, #28]
 801332a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801332e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8013332:	f7f8 fedd 	bl	800c0f0 <__aeabi_uldivmod>
 8013336:	4602      	mov	r2, r0
 8013338:	460b      	mov	r3, r1
 801333a:	4b6c      	ldr	r3, [pc, #432]	; (80134ec <UART_SetConfig+0x38c>)
 801333c:	fba3 1302 	umull	r1, r3, r3, r2
 8013340:	095b      	lsrs	r3, r3, #5
 8013342:	2164      	movs	r1, #100	; 0x64
 8013344:	fb01 f303 	mul.w	r3, r1, r3
 8013348:	1ad3      	subs	r3, r2, r3
 801334a:	00db      	lsls	r3, r3, #3
 801334c:	3332      	adds	r3, #50	; 0x32
 801334e:	4a67      	ldr	r2, [pc, #412]	; (80134ec <UART_SetConfig+0x38c>)
 8013350:	fba2 2303 	umull	r2, r3, r2, r3
 8013354:	095b      	lsrs	r3, r3, #5
 8013356:	f003 0207 	and.w	r2, r3, #7
 801335a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	4432      	add	r2, r6
 8013360:	609a      	str	r2, [r3, #8]
 8013362:	e0b9      	b.n	80134d8 <UART_SetConfig+0x378>
 8013364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013366:	461c      	mov	r4, r3
 8013368:	f04f 0500 	mov.w	r5, #0
 801336c:	4622      	mov	r2, r4
 801336e:	462b      	mov	r3, r5
 8013370:	1891      	adds	r1, r2, r2
 8013372:	6139      	str	r1, [r7, #16]
 8013374:	415b      	adcs	r3, r3
 8013376:	617b      	str	r3, [r7, #20]
 8013378:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801337c:	1912      	adds	r2, r2, r4
 801337e:	eb45 0303 	adc.w	r3, r5, r3
 8013382:	f04f 0000 	mov.w	r0, #0
 8013386:	f04f 0100 	mov.w	r1, #0
 801338a:	00d9      	lsls	r1, r3, #3
 801338c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8013390:	00d0      	lsls	r0, r2, #3
 8013392:	4602      	mov	r2, r0
 8013394:	460b      	mov	r3, r1
 8013396:	eb12 0804 	adds.w	r8, r2, r4
 801339a:	eb43 0905 	adc.w	r9, r3, r5
 801339e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80133a0:	685b      	ldr	r3, [r3, #4]
 80133a2:	4618      	mov	r0, r3
 80133a4:	f04f 0100 	mov.w	r1, #0
 80133a8:	f04f 0200 	mov.w	r2, #0
 80133ac:	f04f 0300 	mov.w	r3, #0
 80133b0:	008b      	lsls	r3, r1, #2
 80133b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80133b6:	0082      	lsls	r2, r0, #2
 80133b8:	4640      	mov	r0, r8
 80133ba:	4649      	mov	r1, r9
 80133bc:	f7f8 fe98 	bl	800c0f0 <__aeabi_uldivmod>
 80133c0:	4602      	mov	r2, r0
 80133c2:	460b      	mov	r3, r1
 80133c4:	4b49      	ldr	r3, [pc, #292]	; (80134ec <UART_SetConfig+0x38c>)
 80133c6:	fba3 2302 	umull	r2, r3, r3, r2
 80133ca:	095b      	lsrs	r3, r3, #5
 80133cc:	011e      	lsls	r6, r3, #4
 80133ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80133d0:	4618      	mov	r0, r3
 80133d2:	f04f 0100 	mov.w	r1, #0
 80133d6:	4602      	mov	r2, r0
 80133d8:	460b      	mov	r3, r1
 80133da:	1894      	adds	r4, r2, r2
 80133dc:	60bc      	str	r4, [r7, #8]
 80133de:	415b      	adcs	r3, r3
 80133e0:	60fb      	str	r3, [r7, #12]
 80133e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80133e6:	1812      	adds	r2, r2, r0
 80133e8:	eb41 0303 	adc.w	r3, r1, r3
 80133ec:	f04f 0400 	mov.w	r4, #0
 80133f0:	f04f 0500 	mov.w	r5, #0
 80133f4:	00dd      	lsls	r5, r3, #3
 80133f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80133fa:	00d4      	lsls	r4, r2, #3
 80133fc:	4622      	mov	r2, r4
 80133fe:	462b      	mov	r3, r5
 8013400:	1814      	adds	r4, r2, r0
 8013402:	64bc      	str	r4, [r7, #72]	; 0x48
 8013404:	414b      	adcs	r3, r1
 8013406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801340a:	685b      	ldr	r3, [r3, #4]
 801340c:	4618      	mov	r0, r3
 801340e:	f04f 0100 	mov.w	r1, #0
 8013412:	f04f 0200 	mov.w	r2, #0
 8013416:	f04f 0300 	mov.w	r3, #0
 801341a:	008b      	lsls	r3, r1, #2
 801341c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8013420:	0082      	lsls	r2, r0, #2
 8013422:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8013426:	f7f8 fe63 	bl	800c0f0 <__aeabi_uldivmod>
 801342a:	4602      	mov	r2, r0
 801342c:	460b      	mov	r3, r1
 801342e:	4b2f      	ldr	r3, [pc, #188]	; (80134ec <UART_SetConfig+0x38c>)
 8013430:	fba3 1302 	umull	r1, r3, r3, r2
 8013434:	095b      	lsrs	r3, r3, #5
 8013436:	2164      	movs	r1, #100	; 0x64
 8013438:	fb01 f303 	mul.w	r3, r1, r3
 801343c:	1ad3      	subs	r3, r2, r3
 801343e:	011b      	lsls	r3, r3, #4
 8013440:	3332      	adds	r3, #50	; 0x32
 8013442:	4a2a      	ldr	r2, [pc, #168]	; (80134ec <UART_SetConfig+0x38c>)
 8013444:	fba2 2303 	umull	r2, r3, r2, r3
 8013448:	095b      	lsrs	r3, r3, #5
 801344a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801344e:	441e      	add	r6, r3
 8013450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013452:	4618      	mov	r0, r3
 8013454:	f04f 0100 	mov.w	r1, #0
 8013458:	4602      	mov	r2, r0
 801345a:	460b      	mov	r3, r1
 801345c:	1894      	adds	r4, r2, r2
 801345e:	603c      	str	r4, [r7, #0]
 8013460:	415b      	adcs	r3, r3
 8013462:	607b      	str	r3, [r7, #4]
 8013464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013468:	1812      	adds	r2, r2, r0
 801346a:	eb41 0303 	adc.w	r3, r1, r3
 801346e:	f04f 0400 	mov.w	r4, #0
 8013472:	f04f 0500 	mov.w	r5, #0
 8013476:	00dd      	lsls	r5, r3, #3
 8013478:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801347c:	00d4      	lsls	r4, r2, #3
 801347e:	4622      	mov	r2, r4
 8013480:	462b      	mov	r3, r5
 8013482:	eb12 0a00 	adds.w	sl, r2, r0
 8013486:	eb43 0b01 	adc.w	fp, r3, r1
 801348a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801348c:	685b      	ldr	r3, [r3, #4]
 801348e:	4618      	mov	r0, r3
 8013490:	f04f 0100 	mov.w	r1, #0
 8013494:	f04f 0200 	mov.w	r2, #0
 8013498:	f04f 0300 	mov.w	r3, #0
 801349c:	008b      	lsls	r3, r1, #2
 801349e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80134a2:	0082      	lsls	r2, r0, #2
 80134a4:	4650      	mov	r0, sl
 80134a6:	4659      	mov	r1, fp
 80134a8:	f7f8 fe22 	bl	800c0f0 <__aeabi_uldivmod>
 80134ac:	4602      	mov	r2, r0
 80134ae:	460b      	mov	r3, r1
 80134b0:	4b0e      	ldr	r3, [pc, #56]	; (80134ec <UART_SetConfig+0x38c>)
 80134b2:	fba3 1302 	umull	r1, r3, r3, r2
 80134b6:	095b      	lsrs	r3, r3, #5
 80134b8:	2164      	movs	r1, #100	; 0x64
 80134ba:	fb01 f303 	mul.w	r3, r1, r3
 80134be:	1ad3      	subs	r3, r2, r3
 80134c0:	011b      	lsls	r3, r3, #4
 80134c2:	3332      	adds	r3, #50	; 0x32
 80134c4:	4a09      	ldr	r2, [pc, #36]	; (80134ec <UART_SetConfig+0x38c>)
 80134c6:	fba2 2303 	umull	r2, r3, r2, r3
 80134ca:	095b      	lsrs	r3, r3, #5
 80134cc:	f003 020f 	and.w	r2, r3, #15
 80134d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	4432      	add	r2, r6
 80134d6:	609a      	str	r2, [r3, #8]
 80134d8:	bf00      	nop
 80134da:	377c      	adds	r7, #124	; 0x7c
 80134dc:	46bd      	mov	sp, r7
 80134de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134e2:	bf00      	nop
 80134e4:	40011000 	.word	0x40011000
 80134e8:	40011400 	.word	0x40011400
 80134ec:	51eb851f 	.word	0x51eb851f

080134f0 <USB_CoreInit>:
 80134f0:	b084      	sub	sp, #16
 80134f2:	b580      	push	{r7, lr}
 80134f4:	b084      	sub	sp, #16
 80134f6:	af00      	add	r7, sp, #0
 80134f8:	6078      	str	r0, [r7, #4]
 80134fa:	f107 001c 	add.w	r0, r7, #28
 80134fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8013502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013504:	2b01      	cmp	r3, #1
 8013506:	d122      	bne.n	801354e <USB_CoreInit+0x5e>
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801350c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	639a      	str	r2, [r3, #56]	; 0x38
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	68db      	ldr	r3, [r3, #12]
 8013518:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 801351c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013520:	687a      	ldr	r2, [r7, #4]
 8013522:	60d3      	str	r3, [r2, #12]
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	68db      	ldr	r3, [r3, #12]
 8013528:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	60da      	str	r2, [r3, #12]
 8013530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013532:	2b01      	cmp	r3, #1
 8013534:	d105      	bne.n	8013542 <USB_CoreInit+0x52>
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	68db      	ldr	r3, [r3, #12]
 801353a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	60da      	str	r2, [r3, #12]
 8013542:	6878      	ldr	r0, [r7, #4]
 8013544:	f001 fb1c 	bl	8014b80 <USB_CoreReset>
 8013548:	4603      	mov	r3, r0
 801354a:	73fb      	strb	r3, [r7, #15]
 801354c:	e01a      	b.n	8013584 <USB_CoreInit+0x94>
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	68db      	ldr	r3, [r3, #12]
 8013552:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	60da      	str	r2, [r3, #12]
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	f001 fb10 	bl	8014b80 <USB_CoreReset>
 8013560:	4603      	mov	r3, r0
 8013562:	73fb      	strb	r3, [r7, #15]
 8013564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013566:	2b00      	cmp	r3, #0
 8013568:	d106      	bne.n	8013578 <USB_CoreInit+0x88>
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801356e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	639a      	str	r2, [r3, #56]	; 0x38
 8013576:	e005      	b.n	8013584 <USB_CoreInit+0x94>
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801357c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	639a      	str	r2, [r3, #56]	; 0x38
 8013584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013586:	2b01      	cmp	r3, #1
 8013588:	d10b      	bne.n	80135a2 <USB_CoreInit+0xb2>
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	689b      	ldr	r3, [r3, #8]
 801358e:	f043 0206 	orr.w	r2, r3, #6
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	609a      	str	r2, [r3, #8]
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	689b      	ldr	r3, [r3, #8]
 801359a:	f043 0220 	orr.w	r2, r3, #32
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	609a      	str	r2, [r3, #8]
 80135a2:	7bfb      	ldrb	r3, [r7, #15]
 80135a4:	4618      	mov	r0, r3
 80135a6:	3710      	adds	r7, #16
 80135a8:	46bd      	mov	sp, r7
 80135aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80135ae:	b004      	add	sp, #16
 80135b0:	4770      	bx	lr
	...

080135b4 <USB_SetTurnaroundTime>:
 80135b4:	b480      	push	{r7}
 80135b6:	b087      	sub	sp, #28
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	60f8      	str	r0, [r7, #12]
 80135bc:	60b9      	str	r1, [r7, #8]
 80135be:	4613      	mov	r3, r2
 80135c0:	71fb      	strb	r3, [r7, #7]
 80135c2:	79fb      	ldrb	r3, [r7, #7]
 80135c4:	2b02      	cmp	r3, #2
 80135c6:	d165      	bne.n	8013694 <USB_SetTurnaroundTime+0xe0>
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	4a41      	ldr	r2, [pc, #260]	; (80136d0 <USB_SetTurnaroundTime+0x11c>)
 80135cc:	4293      	cmp	r3, r2
 80135ce:	d906      	bls.n	80135de <USB_SetTurnaroundTime+0x2a>
 80135d0:	68bb      	ldr	r3, [r7, #8]
 80135d2:	4a40      	ldr	r2, [pc, #256]	; (80136d4 <USB_SetTurnaroundTime+0x120>)
 80135d4:	4293      	cmp	r3, r2
 80135d6:	d202      	bcs.n	80135de <USB_SetTurnaroundTime+0x2a>
 80135d8:	230f      	movs	r3, #15
 80135da:	617b      	str	r3, [r7, #20]
 80135dc:	e062      	b.n	80136a4 <USB_SetTurnaroundTime+0xf0>
 80135de:	68bb      	ldr	r3, [r7, #8]
 80135e0:	4a3c      	ldr	r2, [pc, #240]	; (80136d4 <USB_SetTurnaroundTime+0x120>)
 80135e2:	4293      	cmp	r3, r2
 80135e4:	d306      	bcc.n	80135f4 <USB_SetTurnaroundTime+0x40>
 80135e6:	68bb      	ldr	r3, [r7, #8]
 80135e8:	4a3b      	ldr	r2, [pc, #236]	; (80136d8 <USB_SetTurnaroundTime+0x124>)
 80135ea:	4293      	cmp	r3, r2
 80135ec:	d202      	bcs.n	80135f4 <USB_SetTurnaroundTime+0x40>
 80135ee:	230e      	movs	r3, #14
 80135f0:	617b      	str	r3, [r7, #20]
 80135f2:	e057      	b.n	80136a4 <USB_SetTurnaroundTime+0xf0>
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	4a38      	ldr	r2, [pc, #224]	; (80136d8 <USB_SetTurnaroundTime+0x124>)
 80135f8:	4293      	cmp	r3, r2
 80135fa:	d306      	bcc.n	801360a <USB_SetTurnaroundTime+0x56>
 80135fc:	68bb      	ldr	r3, [r7, #8]
 80135fe:	4a37      	ldr	r2, [pc, #220]	; (80136dc <USB_SetTurnaroundTime+0x128>)
 8013600:	4293      	cmp	r3, r2
 8013602:	d202      	bcs.n	801360a <USB_SetTurnaroundTime+0x56>
 8013604:	230d      	movs	r3, #13
 8013606:	617b      	str	r3, [r7, #20]
 8013608:	e04c      	b.n	80136a4 <USB_SetTurnaroundTime+0xf0>
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	4a33      	ldr	r2, [pc, #204]	; (80136dc <USB_SetTurnaroundTime+0x128>)
 801360e:	4293      	cmp	r3, r2
 8013610:	d306      	bcc.n	8013620 <USB_SetTurnaroundTime+0x6c>
 8013612:	68bb      	ldr	r3, [r7, #8]
 8013614:	4a32      	ldr	r2, [pc, #200]	; (80136e0 <USB_SetTurnaroundTime+0x12c>)
 8013616:	4293      	cmp	r3, r2
 8013618:	d802      	bhi.n	8013620 <USB_SetTurnaroundTime+0x6c>
 801361a:	230c      	movs	r3, #12
 801361c:	617b      	str	r3, [r7, #20]
 801361e:	e041      	b.n	80136a4 <USB_SetTurnaroundTime+0xf0>
 8013620:	68bb      	ldr	r3, [r7, #8]
 8013622:	4a2f      	ldr	r2, [pc, #188]	; (80136e0 <USB_SetTurnaroundTime+0x12c>)
 8013624:	4293      	cmp	r3, r2
 8013626:	d906      	bls.n	8013636 <USB_SetTurnaroundTime+0x82>
 8013628:	68bb      	ldr	r3, [r7, #8]
 801362a:	4a2e      	ldr	r2, [pc, #184]	; (80136e4 <USB_SetTurnaroundTime+0x130>)
 801362c:	4293      	cmp	r3, r2
 801362e:	d802      	bhi.n	8013636 <USB_SetTurnaroundTime+0x82>
 8013630:	230b      	movs	r3, #11
 8013632:	617b      	str	r3, [r7, #20]
 8013634:	e036      	b.n	80136a4 <USB_SetTurnaroundTime+0xf0>
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	4a2a      	ldr	r2, [pc, #168]	; (80136e4 <USB_SetTurnaroundTime+0x130>)
 801363a:	4293      	cmp	r3, r2
 801363c:	d906      	bls.n	801364c <USB_SetTurnaroundTime+0x98>
 801363e:	68bb      	ldr	r3, [r7, #8]
 8013640:	4a29      	ldr	r2, [pc, #164]	; (80136e8 <USB_SetTurnaroundTime+0x134>)
 8013642:	4293      	cmp	r3, r2
 8013644:	d802      	bhi.n	801364c <USB_SetTurnaroundTime+0x98>
 8013646:	230a      	movs	r3, #10
 8013648:	617b      	str	r3, [r7, #20]
 801364a:	e02b      	b.n	80136a4 <USB_SetTurnaroundTime+0xf0>
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	4a26      	ldr	r2, [pc, #152]	; (80136e8 <USB_SetTurnaroundTime+0x134>)
 8013650:	4293      	cmp	r3, r2
 8013652:	d906      	bls.n	8013662 <USB_SetTurnaroundTime+0xae>
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	4a25      	ldr	r2, [pc, #148]	; (80136ec <USB_SetTurnaroundTime+0x138>)
 8013658:	4293      	cmp	r3, r2
 801365a:	d202      	bcs.n	8013662 <USB_SetTurnaroundTime+0xae>
 801365c:	2309      	movs	r3, #9
 801365e:	617b      	str	r3, [r7, #20]
 8013660:	e020      	b.n	80136a4 <USB_SetTurnaroundTime+0xf0>
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	4a21      	ldr	r2, [pc, #132]	; (80136ec <USB_SetTurnaroundTime+0x138>)
 8013666:	4293      	cmp	r3, r2
 8013668:	d306      	bcc.n	8013678 <USB_SetTurnaroundTime+0xc4>
 801366a:	68bb      	ldr	r3, [r7, #8]
 801366c:	4a20      	ldr	r2, [pc, #128]	; (80136f0 <USB_SetTurnaroundTime+0x13c>)
 801366e:	4293      	cmp	r3, r2
 8013670:	d802      	bhi.n	8013678 <USB_SetTurnaroundTime+0xc4>
 8013672:	2308      	movs	r3, #8
 8013674:	617b      	str	r3, [r7, #20]
 8013676:	e015      	b.n	80136a4 <USB_SetTurnaroundTime+0xf0>
 8013678:	68bb      	ldr	r3, [r7, #8]
 801367a:	4a1d      	ldr	r2, [pc, #116]	; (80136f0 <USB_SetTurnaroundTime+0x13c>)
 801367c:	4293      	cmp	r3, r2
 801367e:	d906      	bls.n	801368e <USB_SetTurnaroundTime+0xda>
 8013680:	68bb      	ldr	r3, [r7, #8]
 8013682:	4a1c      	ldr	r2, [pc, #112]	; (80136f4 <USB_SetTurnaroundTime+0x140>)
 8013684:	4293      	cmp	r3, r2
 8013686:	d202      	bcs.n	801368e <USB_SetTurnaroundTime+0xda>
 8013688:	2307      	movs	r3, #7
 801368a:	617b      	str	r3, [r7, #20]
 801368c:	e00a      	b.n	80136a4 <USB_SetTurnaroundTime+0xf0>
 801368e:	2306      	movs	r3, #6
 8013690:	617b      	str	r3, [r7, #20]
 8013692:	e007      	b.n	80136a4 <USB_SetTurnaroundTime+0xf0>
 8013694:	79fb      	ldrb	r3, [r7, #7]
 8013696:	2b00      	cmp	r3, #0
 8013698:	d102      	bne.n	80136a0 <USB_SetTurnaroundTime+0xec>
 801369a:	2309      	movs	r3, #9
 801369c:	617b      	str	r3, [r7, #20]
 801369e:	e001      	b.n	80136a4 <USB_SetTurnaroundTime+0xf0>
 80136a0:	2309      	movs	r3, #9
 80136a2:	617b      	str	r3, [r7, #20]
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	68db      	ldr	r3, [r3, #12]
 80136a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	60da      	str	r2, [r3, #12]
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	68da      	ldr	r2, [r3, #12]
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	029b      	lsls	r3, r3, #10
 80136b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80136bc:	431a      	orrs	r2, r3
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	60da      	str	r2, [r3, #12]
 80136c2:	2300      	movs	r3, #0
 80136c4:	4618      	mov	r0, r3
 80136c6:	371c      	adds	r7, #28
 80136c8:	46bd      	mov	sp, r7
 80136ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ce:	4770      	bx	lr
 80136d0:	00d8acbf 	.word	0x00d8acbf
 80136d4:	00e4e1c0 	.word	0x00e4e1c0
 80136d8:	00f42400 	.word	0x00f42400
 80136dc:	01067380 	.word	0x01067380
 80136e0:	011a499f 	.word	0x011a499f
 80136e4:	01312cff 	.word	0x01312cff
 80136e8:	014ca43f 	.word	0x014ca43f
 80136ec:	016e3600 	.word	0x016e3600
 80136f0:	01a6ab1f 	.word	0x01a6ab1f
 80136f4:	01e84800 	.word	0x01e84800

080136f8 <USB_EnableGlobalInt>:
 80136f8:	b480      	push	{r7}
 80136fa:	b083      	sub	sp, #12
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	689b      	ldr	r3, [r3, #8]
 8013704:	f043 0201 	orr.w	r2, r3, #1
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	609a      	str	r2, [r3, #8]
 801370c:	2300      	movs	r3, #0
 801370e:	4618      	mov	r0, r3
 8013710:	370c      	adds	r7, #12
 8013712:	46bd      	mov	sp, r7
 8013714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013718:	4770      	bx	lr

0801371a <USB_DisableGlobalInt>:
 801371a:	b480      	push	{r7}
 801371c:	b083      	sub	sp, #12
 801371e:	af00      	add	r7, sp, #0
 8013720:	6078      	str	r0, [r7, #4]
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	689b      	ldr	r3, [r3, #8]
 8013726:	f023 0201 	bic.w	r2, r3, #1
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	609a      	str	r2, [r3, #8]
 801372e:	2300      	movs	r3, #0
 8013730:	4618      	mov	r0, r3
 8013732:	370c      	adds	r7, #12
 8013734:	46bd      	mov	sp, r7
 8013736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801373a:	4770      	bx	lr

0801373c <USB_SetCurrentMode>:
 801373c:	b580      	push	{r7, lr}
 801373e:	b084      	sub	sp, #16
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
 8013744:	460b      	mov	r3, r1
 8013746:	70fb      	strb	r3, [r7, #3]
 8013748:	2300      	movs	r3, #0
 801374a:	60fb      	str	r3, [r7, #12]
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	68db      	ldr	r3, [r3, #12]
 8013750:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	60da      	str	r2, [r3, #12]
 8013758:	78fb      	ldrb	r3, [r7, #3]
 801375a:	2b01      	cmp	r3, #1
 801375c:	d115      	bne.n	801378a <USB_SetCurrentMode+0x4e>
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	68db      	ldr	r3, [r3, #12]
 8013762:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	60da      	str	r2, [r3, #12]
 801376a:	2001      	movs	r0, #1
 801376c:	f7fb f9b2 	bl	800ead4 <HAL_Delay>
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	3301      	adds	r3, #1
 8013774:	60fb      	str	r3, [r7, #12]
 8013776:	6878      	ldr	r0, [r7, #4]
 8013778:	f001 f972 	bl	8014a60 <USB_GetMode>
 801377c:	4603      	mov	r3, r0
 801377e:	2b01      	cmp	r3, #1
 8013780:	d01e      	beq.n	80137c0 <USB_SetCurrentMode+0x84>
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	2b31      	cmp	r3, #49	; 0x31
 8013786:	d9f0      	bls.n	801376a <USB_SetCurrentMode+0x2e>
 8013788:	e01a      	b.n	80137c0 <USB_SetCurrentMode+0x84>
 801378a:	78fb      	ldrb	r3, [r7, #3]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d115      	bne.n	80137bc <USB_SetCurrentMode+0x80>
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	68db      	ldr	r3, [r3, #12]
 8013794:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	60da      	str	r2, [r3, #12]
 801379c:	2001      	movs	r0, #1
 801379e:	f7fb f999 	bl	800ead4 <HAL_Delay>
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	3301      	adds	r3, #1
 80137a6:	60fb      	str	r3, [r7, #12]
 80137a8:	6878      	ldr	r0, [r7, #4]
 80137aa:	f001 f959 	bl	8014a60 <USB_GetMode>
 80137ae:	4603      	mov	r3, r0
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d005      	beq.n	80137c0 <USB_SetCurrentMode+0x84>
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	2b31      	cmp	r3, #49	; 0x31
 80137b8:	d9f0      	bls.n	801379c <USB_SetCurrentMode+0x60>
 80137ba:	e001      	b.n	80137c0 <USB_SetCurrentMode+0x84>
 80137bc:	2301      	movs	r3, #1
 80137be:	e005      	b.n	80137cc <USB_SetCurrentMode+0x90>
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	2b32      	cmp	r3, #50	; 0x32
 80137c4:	d101      	bne.n	80137ca <USB_SetCurrentMode+0x8e>
 80137c6:	2301      	movs	r3, #1
 80137c8:	e000      	b.n	80137cc <USB_SetCurrentMode+0x90>
 80137ca:	2300      	movs	r3, #0
 80137cc:	4618      	mov	r0, r3
 80137ce:	3710      	adds	r7, #16
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}

080137d4 <USB_DevInit>:
 80137d4:	b084      	sub	sp, #16
 80137d6:	b580      	push	{r7, lr}
 80137d8:	b086      	sub	sp, #24
 80137da:	af00      	add	r7, sp, #0
 80137dc:	6078      	str	r0, [r7, #4]
 80137de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80137e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80137e6:	2300      	movs	r3, #0
 80137e8:	75fb      	strb	r3, [r7, #23]
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	60fb      	str	r3, [r7, #12]
 80137ee:	2300      	movs	r3, #0
 80137f0:	613b      	str	r3, [r7, #16]
 80137f2:	e009      	b.n	8013808 <USB_DevInit+0x34>
 80137f4:	687a      	ldr	r2, [r7, #4]
 80137f6:	693b      	ldr	r3, [r7, #16]
 80137f8:	3340      	adds	r3, #64	; 0x40
 80137fa:	009b      	lsls	r3, r3, #2
 80137fc:	4413      	add	r3, r2
 80137fe:	2200      	movs	r2, #0
 8013800:	605a      	str	r2, [r3, #4]
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	3301      	adds	r3, #1
 8013806:	613b      	str	r3, [r7, #16]
 8013808:	693b      	ldr	r3, [r7, #16]
 801380a:	2b0e      	cmp	r3, #14
 801380c:	d9f2      	bls.n	80137f4 <USB_DevInit+0x20>
 801380e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013810:	2b00      	cmp	r3, #0
 8013812:	d11c      	bne.n	801384e <USB_DevInit+0x7a>
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801381a:	685b      	ldr	r3, [r3, #4]
 801381c:	68fa      	ldr	r2, [r7, #12]
 801381e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013822:	f043 0302 	orr.w	r3, r3, #2
 8013826:	6053      	str	r3, [r2, #4]
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801382c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	639a      	str	r2, [r3, #56]	; 0x38
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013838:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	639a      	str	r2, [r3, #56]	; 0x38
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013844:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	639a      	str	r2, [r3, #56]	; 0x38
 801384c:	e00b      	b.n	8013866 <USB_DevInit+0x92>
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013852:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	639a      	str	r2, [r3, #56]	; 0x38
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801385e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	639a      	str	r2, [r3, #56]	; 0x38
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801386c:	461a      	mov	r2, r3
 801386e:	2300      	movs	r3, #0
 8013870:	6013      	str	r3, [r2, #0]
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013878:	4619      	mov	r1, r3
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013880:	461a      	mov	r2, r3
 8013882:	680b      	ldr	r3, [r1, #0]
 8013884:	6013      	str	r3, [r2, #0]
 8013886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013888:	2b01      	cmp	r3, #1
 801388a:	d10c      	bne.n	80138a6 <USB_DevInit+0xd2>
 801388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801388e:	2b00      	cmp	r3, #0
 8013890:	d104      	bne.n	801389c <USB_DevInit+0xc8>
 8013892:	2100      	movs	r1, #0
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f000 f945 	bl	8013b24 <USB_SetDevSpeed>
 801389a:	e008      	b.n	80138ae <USB_DevInit+0xda>
 801389c:	2101      	movs	r1, #1
 801389e:	6878      	ldr	r0, [r7, #4]
 80138a0:	f000 f940 	bl	8013b24 <USB_SetDevSpeed>
 80138a4:	e003      	b.n	80138ae <USB_DevInit+0xda>
 80138a6:	2103      	movs	r1, #3
 80138a8:	6878      	ldr	r0, [r7, #4]
 80138aa:	f000 f93b 	bl	8013b24 <USB_SetDevSpeed>
 80138ae:	2110      	movs	r1, #16
 80138b0:	6878      	ldr	r0, [r7, #4]
 80138b2:	f000 f8f3 	bl	8013a9c <USB_FlushTxFifo>
 80138b6:	4603      	mov	r3, r0
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d001      	beq.n	80138c0 <USB_DevInit+0xec>
 80138bc:	2301      	movs	r3, #1
 80138be:	75fb      	strb	r3, [r7, #23]
 80138c0:	6878      	ldr	r0, [r7, #4]
 80138c2:	f000 f90f 	bl	8013ae4 <USB_FlushRxFifo>
 80138c6:	4603      	mov	r3, r0
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d001      	beq.n	80138d0 <USB_DevInit+0xfc>
 80138cc:	2301      	movs	r3, #1
 80138ce:	75fb      	strb	r3, [r7, #23]
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138d6:	461a      	mov	r2, r3
 80138d8:	2300      	movs	r3, #0
 80138da:	6113      	str	r3, [r2, #16]
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138e2:	461a      	mov	r2, r3
 80138e4:	2300      	movs	r3, #0
 80138e6:	6153      	str	r3, [r2, #20]
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138ee:	461a      	mov	r2, r3
 80138f0:	2300      	movs	r3, #0
 80138f2:	61d3      	str	r3, [r2, #28]
 80138f4:	2300      	movs	r3, #0
 80138f6:	613b      	str	r3, [r7, #16]
 80138f8:	e043      	b.n	8013982 <USB_DevInit+0x1ae>
 80138fa:	693b      	ldr	r3, [r7, #16]
 80138fc:	015a      	lsls	r2, r3, #5
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	4413      	add	r3, r2
 8013902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801390c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013910:	d118      	bne.n	8013944 <USB_DevInit+0x170>
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d10a      	bne.n	801392e <USB_DevInit+0x15a>
 8013918:	693b      	ldr	r3, [r7, #16]
 801391a:	015a      	lsls	r2, r3, #5
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	4413      	add	r3, r2
 8013920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013924:	461a      	mov	r2, r3
 8013926:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801392a:	6013      	str	r3, [r2, #0]
 801392c:	e013      	b.n	8013956 <USB_DevInit+0x182>
 801392e:	693b      	ldr	r3, [r7, #16]
 8013930:	015a      	lsls	r2, r3, #5
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	4413      	add	r3, r2
 8013936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801393a:	461a      	mov	r2, r3
 801393c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013940:	6013      	str	r3, [r2, #0]
 8013942:	e008      	b.n	8013956 <USB_DevInit+0x182>
 8013944:	693b      	ldr	r3, [r7, #16]
 8013946:	015a      	lsls	r2, r3, #5
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	4413      	add	r3, r2
 801394c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013950:	461a      	mov	r2, r3
 8013952:	2300      	movs	r3, #0
 8013954:	6013      	str	r3, [r2, #0]
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	015a      	lsls	r2, r3, #5
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	4413      	add	r3, r2
 801395e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013962:	461a      	mov	r2, r3
 8013964:	2300      	movs	r3, #0
 8013966:	6113      	str	r3, [r2, #16]
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	015a      	lsls	r2, r3, #5
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	4413      	add	r3, r2
 8013970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013974:	461a      	mov	r2, r3
 8013976:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801397a:	6093      	str	r3, [r2, #8]
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	3301      	adds	r3, #1
 8013980:	613b      	str	r3, [r7, #16]
 8013982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013984:	693a      	ldr	r2, [r7, #16]
 8013986:	429a      	cmp	r2, r3
 8013988:	d3b7      	bcc.n	80138fa <USB_DevInit+0x126>
 801398a:	2300      	movs	r3, #0
 801398c:	613b      	str	r3, [r7, #16]
 801398e:	e043      	b.n	8013a18 <USB_DevInit+0x244>
 8013990:	693b      	ldr	r3, [r7, #16]
 8013992:	015a      	lsls	r2, r3, #5
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	4413      	add	r3, r2
 8013998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139a6:	d118      	bne.n	80139da <USB_DevInit+0x206>
 80139a8:	693b      	ldr	r3, [r7, #16]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d10a      	bne.n	80139c4 <USB_DevInit+0x1f0>
 80139ae:	693b      	ldr	r3, [r7, #16]
 80139b0:	015a      	lsls	r2, r3, #5
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	4413      	add	r3, r2
 80139b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139ba:	461a      	mov	r2, r3
 80139bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80139c0:	6013      	str	r3, [r2, #0]
 80139c2:	e013      	b.n	80139ec <USB_DevInit+0x218>
 80139c4:	693b      	ldr	r3, [r7, #16]
 80139c6:	015a      	lsls	r2, r3, #5
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	4413      	add	r3, r2
 80139cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139d0:	461a      	mov	r2, r3
 80139d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80139d6:	6013      	str	r3, [r2, #0]
 80139d8:	e008      	b.n	80139ec <USB_DevInit+0x218>
 80139da:	693b      	ldr	r3, [r7, #16]
 80139dc:	015a      	lsls	r2, r3, #5
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	4413      	add	r3, r2
 80139e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139e6:	461a      	mov	r2, r3
 80139e8:	2300      	movs	r3, #0
 80139ea:	6013      	str	r3, [r2, #0]
 80139ec:	693b      	ldr	r3, [r7, #16]
 80139ee:	015a      	lsls	r2, r3, #5
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	4413      	add	r3, r2
 80139f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139f8:	461a      	mov	r2, r3
 80139fa:	2300      	movs	r3, #0
 80139fc:	6113      	str	r3, [r2, #16]
 80139fe:	693b      	ldr	r3, [r7, #16]
 8013a00:	015a      	lsls	r2, r3, #5
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	4413      	add	r3, r2
 8013a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a0a:	461a      	mov	r2, r3
 8013a0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013a10:	6093      	str	r3, [r2, #8]
 8013a12:	693b      	ldr	r3, [r7, #16]
 8013a14:	3301      	adds	r3, #1
 8013a16:	613b      	str	r3, [r7, #16]
 8013a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1a:	693a      	ldr	r2, [r7, #16]
 8013a1c:	429a      	cmp	r2, r3
 8013a1e:	d3b7      	bcc.n	8013990 <USB_DevInit+0x1bc>
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a26:	691b      	ldr	r3, [r3, #16]
 8013a28:	68fa      	ldr	r2, [r7, #12]
 8013a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013a2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013a32:	6113      	str	r3, [r2, #16]
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	2200      	movs	r2, #0
 8013a38:	619a      	str	r2, [r3, #24]
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013a40:	615a      	str	r2, [r3, #20]
 8013a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d105      	bne.n	8013a54 <USB_DevInit+0x280>
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	699b      	ldr	r3, [r3, #24]
 8013a4c:	f043 0210 	orr.w	r2, r3, #16
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	619a      	str	r2, [r3, #24]
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	699a      	ldr	r2, [r3, #24]
 8013a58:	4b0f      	ldr	r3, [pc, #60]	; (8013a98 <USB_DevInit+0x2c4>)
 8013a5a:	4313      	orrs	r3, r2
 8013a5c:	687a      	ldr	r2, [r7, #4]
 8013a5e:	6193      	str	r3, [r2, #24]
 8013a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d005      	beq.n	8013a72 <USB_DevInit+0x29e>
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	699b      	ldr	r3, [r3, #24]
 8013a6a:	f043 0208 	orr.w	r2, r3, #8
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	619a      	str	r2, [r3, #24]
 8013a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a74:	2b01      	cmp	r3, #1
 8013a76:	d107      	bne.n	8013a88 <USB_DevInit+0x2b4>
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	699b      	ldr	r3, [r3, #24]
 8013a7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a80:	f043 0304 	orr.w	r3, r3, #4
 8013a84:	687a      	ldr	r2, [r7, #4]
 8013a86:	6193      	str	r3, [r2, #24]
 8013a88:	7dfb      	ldrb	r3, [r7, #23]
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	3718      	adds	r7, #24
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013a94:	b004      	add	sp, #16
 8013a96:	4770      	bx	lr
 8013a98:	803c3800 	.word	0x803c3800

08013a9c <USB_FlushTxFifo>:
 8013a9c:	b480      	push	{r7}
 8013a9e:	b085      	sub	sp, #20
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
 8013aa4:	6039      	str	r1, [r7, #0]
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	60fb      	str	r3, [r7, #12]
 8013aaa:	683b      	ldr	r3, [r7, #0]
 8013aac:	019b      	lsls	r3, r3, #6
 8013aae:	f043 0220 	orr.w	r2, r3, #32
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	611a      	str	r2, [r3, #16]
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	3301      	adds	r3, #1
 8013aba:	60fb      	str	r3, [r7, #12]
 8013abc:	4a08      	ldr	r2, [pc, #32]	; (8013ae0 <USB_FlushTxFifo+0x44>)
 8013abe:	4293      	cmp	r3, r2
 8013ac0:	d901      	bls.n	8013ac6 <USB_FlushTxFifo+0x2a>
 8013ac2:	2303      	movs	r3, #3
 8013ac4:	e006      	b.n	8013ad4 <USB_FlushTxFifo+0x38>
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	691b      	ldr	r3, [r3, #16]
 8013aca:	f003 0320 	and.w	r3, r3, #32
 8013ace:	2b20      	cmp	r3, #32
 8013ad0:	d0f1      	beq.n	8013ab6 <USB_FlushTxFifo+0x1a>
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	3714      	adds	r7, #20
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ade:	4770      	bx	lr
 8013ae0:	00030d40 	.word	0x00030d40

08013ae4 <USB_FlushRxFifo>:
 8013ae4:	b480      	push	{r7}
 8013ae6:	b085      	sub	sp, #20
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
 8013aec:	2300      	movs	r3, #0
 8013aee:	60fb      	str	r3, [r7, #12]
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2210      	movs	r2, #16
 8013af4:	611a      	str	r2, [r3, #16]
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	3301      	adds	r3, #1
 8013afa:	60fb      	str	r3, [r7, #12]
 8013afc:	4a08      	ldr	r2, [pc, #32]	; (8013b20 <USB_FlushRxFifo+0x3c>)
 8013afe:	4293      	cmp	r3, r2
 8013b00:	d901      	bls.n	8013b06 <USB_FlushRxFifo+0x22>
 8013b02:	2303      	movs	r3, #3
 8013b04:	e006      	b.n	8013b14 <USB_FlushRxFifo+0x30>
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	691b      	ldr	r3, [r3, #16]
 8013b0a:	f003 0310 	and.w	r3, r3, #16
 8013b0e:	2b10      	cmp	r3, #16
 8013b10:	d0f1      	beq.n	8013af6 <USB_FlushRxFifo+0x12>
 8013b12:	2300      	movs	r3, #0
 8013b14:	4618      	mov	r0, r3
 8013b16:	3714      	adds	r7, #20
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1e:	4770      	bx	lr
 8013b20:	00030d40 	.word	0x00030d40

08013b24 <USB_SetDevSpeed>:
 8013b24:	b480      	push	{r7}
 8013b26:	b085      	sub	sp, #20
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
 8013b2c:	460b      	mov	r3, r1
 8013b2e:	70fb      	strb	r3, [r7, #3]
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	60fb      	str	r3, [r7, #12]
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b3a:	681a      	ldr	r2, [r3, #0]
 8013b3c:	78fb      	ldrb	r3, [r7, #3]
 8013b3e:	68f9      	ldr	r1, [r7, #12]
 8013b40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013b44:	4313      	orrs	r3, r2
 8013b46:	600b      	str	r3, [r1, #0]
 8013b48:	2300      	movs	r3, #0
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	3714      	adds	r7, #20
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b54:	4770      	bx	lr

08013b56 <USB_GetDevSpeed>:
 8013b56:	b480      	push	{r7}
 8013b58:	b087      	sub	sp, #28
 8013b5a:	af00      	add	r7, sp, #0
 8013b5c:	6078      	str	r0, [r7, #4]
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	613b      	str	r3, [r7, #16]
 8013b62:	693b      	ldr	r3, [r7, #16]
 8013b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b68:	689b      	ldr	r3, [r3, #8]
 8013b6a:	f003 0306 	and.w	r3, r3, #6
 8013b6e:	60fb      	str	r3, [r7, #12]
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d102      	bne.n	8013b7c <USB_GetDevSpeed+0x26>
 8013b76:	2300      	movs	r3, #0
 8013b78:	75fb      	strb	r3, [r7, #23]
 8013b7a:	e00a      	b.n	8013b92 <USB_GetDevSpeed+0x3c>
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	2b02      	cmp	r3, #2
 8013b80:	d002      	beq.n	8013b88 <USB_GetDevSpeed+0x32>
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	2b06      	cmp	r3, #6
 8013b86:	d102      	bne.n	8013b8e <USB_GetDevSpeed+0x38>
 8013b88:	2302      	movs	r3, #2
 8013b8a:	75fb      	strb	r3, [r7, #23]
 8013b8c:	e001      	b.n	8013b92 <USB_GetDevSpeed+0x3c>
 8013b8e:	230f      	movs	r3, #15
 8013b90:	75fb      	strb	r3, [r7, #23]
 8013b92:	7dfb      	ldrb	r3, [r7, #23]
 8013b94:	4618      	mov	r0, r3
 8013b96:	371c      	adds	r7, #28
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9e:	4770      	bx	lr

08013ba0 <USB_ActivateEndpoint>:
 8013ba0:	b480      	push	{r7}
 8013ba2:	b085      	sub	sp, #20
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
 8013ba8:	6039      	str	r1, [r7, #0]
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	60fb      	str	r3, [r7, #12]
 8013bae:	683b      	ldr	r3, [r7, #0]
 8013bb0:	781b      	ldrb	r3, [r3, #0]
 8013bb2:	60bb      	str	r3, [r7, #8]
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	785b      	ldrb	r3, [r3, #1]
 8013bb8:	2b01      	cmp	r3, #1
 8013bba:	d13a      	bne.n	8013c32 <USB_ActivateEndpoint+0x92>
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bc2:	69da      	ldr	r2, [r3, #28]
 8013bc4:	683b      	ldr	r3, [r7, #0]
 8013bc6:	781b      	ldrb	r3, [r3, #0]
 8013bc8:	f003 030f 	and.w	r3, r3, #15
 8013bcc:	2101      	movs	r1, #1
 8013bce:	fa01 f303 	lsl.w	r3, r1, r3
 8013bd2:	b29b      	uxth	r3, r3
 8013bd4:	68f9      	ldr	r1, [r7, #12]
 8013bd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013bda:	4313      	orrs	r3, r2
 8013bdc:	61cb      	str	r3, [r1, #28]
 8013bde:	68bb      	ldr	r3, [r7, #8]
 8013be0:	015a      	lsls	r2, r3, #5
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	4413      	add	r3, r2
 8013be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d155      	bne.n	8013ca0 <USB_ActivateEndpoint+0x100>
 8013bf4:	68bb      	ldr	r3, [r7, #8]
 8013bf6:	015a      	lsls	r2, r3, #5
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	4413      	add	r3, r2
 8013bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c00:	681a      	ldr	r2, [r3, #0]
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	689b      	ldr	r3, [r3, #8]
 8013c06:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8013c0a:	683b      	ldr	r3, [r7, #0]
 8013c0c:	78db      	ldrb	r3, [r3, #3]
 8013c0e:	049b      	lsls	r3, r3, #18
 8013c10:	4319      	orrs	r1, r3
 8013c12:	68bb      	ldr	r3, [r7, #8]
 8013c14:	059b      	lsls	r3, r3, #22
 8013c16:	430b      	orrs	r3, r1
 8013c18:	4313      	orrs	r3, r2
 8013c1a:	68ba      	ldr	r2, [r7, #8]
 8013c1c:	0151      	lsls	r1, r2, #5
 8013c1e:	68fa      	ldr	r2, [r7, #12]
 8013c20:	440a      	add	r2, r1
 8013c22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013c2e:	6013      	str	r3, [r2, #0]
 8013c30:	e036      	b.n	8013ca0 <USB_ActivateEndpoint+0x100>
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c38:	69da      	ldr	r2, [r3, #28]
 8013c3a:	683b      	ldr	r3, [r7, #0]
 8013c3c:	781b      	ldrb	r3, [r3, #0]
 8013c3e:	f003 030f 	and.w	r3, r3, #15
 8013c42:	2101      	movs	r1, #1
 8013c44:	fa01 f303 	lsl.w	r3, r1, r3
 8013c48:	041b      	lsls	r3, r3, #16
 8013c4a:	68f9      	ldr	r1, [r7, #12]
 8013c4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013c50:	4313      	orrs	r3, r2
 8013c52:	61cb      	str	r3, [r1, #28]
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	015a      	lsls	r2, r3, #5
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	4413      	add	r3, r2
 8013c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d11a      	bne.n	8013ca0 <USB_ActivateEndpoint+0x100>
 8013c6a:	68bb      	ldr	r3, [r7, #8]
 8013c6c:	015a      	lsls	r2, r3, #5
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	4413      	add	r3, r2
 8013c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c76:	681a      	ldr	r2, [r3, #0]
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	689b      	ldr	r3, [r3, #8]
 8013c7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8013c80:	683b      	ldr	r3, [r7, #0]
 8013c82:	78db      	ldrb	r3, [r3, #3]
 8013c84:	049b      	lsls	r3, r3, #18
 8013c86:	430b      	orrs	r3, r1
 8013c88:	4313      	orrs	r3, r2
 8013c8a:	68ba      	ldr	r2, [r7, #8]
 8013c8c:	0151      	lsls	r1, r2, #5
 8013c8e:	68fa      	ldr	r2, [r7, #12]
 8013c90:	440a      	add	r2, r1
 8013c92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013c9e:	6013      	str	r3, [r2, #0]
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3714      	adds	r7, #20
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cac:	4770      	bx	lr
	...

08013cb0 <USB_DeactivateEndpoint>:
 8013cb0:	b480      	push	{r7}
 8013cb2:	b085      	sub	sp, #20
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
 8013cb8:	6039      	str	r1, [r7, #0]
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	60fb      	str	r3, [r7, #12]
 8013cbe:	683b      	ldr	r3, [r7, #0]
 8013cc0:	781b      	ldrb	r3, [r3, #0]
 8013cc2:	60bb      	str	r3, [r7, #8]
 8013cc4:	683b      	ldr	r3, [r7, #0]
 8013cc6:	785b      	ldrb	r3, [r3, #1]
 8013cc8:	2b01      	cmp	r3, #1
 8013cca:	d161      	bne.n	8013d90 <USB_DeactivateEndpoint+0xe0>
 8013ccc:	68bb      	ldr	r3, [r7, #8]
 8013cce:	015a      	lsls	r2, r3, #5
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	4413      	add	r3, r2
 8013cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013cde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013ce2:	d11f      	bne.n	8013d24 <USB_DeactivateEndpoint+0x74>
 8013ce4:	68bb      	ldr	r3, [r7, #8]
 8013ce6:	015a      	lsls	r2, r3, #5
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	4413      	add	r3, r2
 8013cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	68ba      	ldr	r2, [r7, #8]
 8013cf4:	0151      	lsls	r1, r2, #5
 8013cf6:	68fa      	ldr	r2, [r7, #12]
 8013cf8:	440a      	add	r2, r1
 8013cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013d02:	6013      	str	r3, [r2, #0]
 8013d04:	68bb      	ldr	r3, [r7, #8]
 8013d06:	015a      	lsls	r2, r3, #5
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	4413      	add	r3, r2
 8013d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	68ba      	ldr	r2, [r7, #8]
 8013d14:	0151      	lsls	r1, r2, #5
 8013d16:	68fa      	ldr	r2, [r7, #12]
 8013d18:	440a      	add	r2, r1
 8013d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013d22:	6013      	str	r3, [r2, #0]
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013d2c:	683b      	ldr	r3, [r7, #0]
 8013d2e:	781b      	ldrb	r3, [r3, #0]
 8013d30:	f003 030f 	and.w	r3, r3, #15
 8013d34:	2101      	movs	r1, #1
 8013d36:	fa01 f303 	lsl.w	r3, r1, r3
 8013d3a:	b29b      	uxth	r3, r3
 8013d3c:	43db      	mvns	r3, r3
 8013d3e:	68f9      	ldr	r1, [r7, #12]
 8013d40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013d44:	4013      	ands	r3, r2
 8013d46:	63cb      	str	r3, [r1, #60]	; 0x3c
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d4e:	69da      	ldr	r2, [r3, #28]
 8013d50:	683b      	ldr	r3, [r7, #0]
 8013d52:	781b      	ldrb	r3, [r3, #0]
 8013d54:	f003 030f 	and.w	r3, r3, #15
 8013d58:	2101      	movs	r1, #1
 8013d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8013d5e:	b29b      	uxth	r3, r3
 8013d60:	43db      	mvns	r3, r3
 8013d62:	68f9      	ldr	r1, [r7, #12]
 8013d64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013d68:	4013      	ands	r3, r2
 8013d6a:	61cb      	str	r3, [r1, #28]
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	015a      	lsls	r2, r3, #5
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	4413      	add	r3, r2
 8013d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d78:	681a      	ldr	r2, [r3, #0]
 8013d7a:	68bb      	ldr	r3, [r7, #8]
 8013d7c:	0159      	lsls	r1, r3, #5
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	440b      	add	r3, r1
 8013d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d86:	4619      	mov	r1, r3
 8013d88:	4b35      	ldr	r3, [pc, #212]	; (8013e60 <USB_DeactivateEndpoint+0x1b0>)
 8013d8a:	4013      	ands	r3, r2
 8013d8c:	600b      	str	r3, [r1, #0]
 8013d8e:	e060      	b.n	8013e52 <USB_DeactivateEndpoint+0x1a2>
 8013d90:	68bb      	ldr	r3, [r7, #8]
 8013d92:	015a      	lsls	r2, r3, #5
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	4413      	add	r3, r2
 8013d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013da6:	d11f      	bne.n	8013de8 <USB_DeactivateEndpoint+0x138>
 8013da8:	68bb      	ldr	r3, [r7, #8]
 8013daa:	015a      	lsls	r2, r3, #5
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	4413      	add	r3, r2
 8013db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	68ba      	ldr	r2, [r7, #8]
 8013db8:	0151      	lsls	r1, r2, #5
 8013dba:	68fa      	ldr	r2, [r7, #12]
 8013dbc:	440a      	add	r2, r1
 8013dbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013dc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013dc6:	6013      	str	r3, [r2, #0]
 8013dc8:	68bb      	ldr	r3, [r7, #8]
 8013dca:	015a      	lsls	r2, r3, #5
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	4413      	add	r3, r2
 8013dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	68ba      	ldr	r2, [r7, #8]
 8013dd8:	0151      	lsls	r1, r2, #5
 8013dda:	68fa      	ldr	r2, [r7, #12]
 8013ddc:	440a      	add	r2, r1
 8013dde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013de2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013de6:	6013      	str	r3, [r2, #0]
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	781b      	ldrb	r3, [r3, #0]
 8013df4:	f003 030f 	and.w	r3, r3, #15
 8013df8:	2101      	movs	r1, #1
 8013dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8013dfe:	041b      	lsls	r3, r3, #16
 8013e00:	43db      	mvns	r3, r3
 8013e02:	68f9      	ldr	r1, [r7, #12]
 8013e04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013e08:	4013      	ands	r3, r2
 8013e0a:	63cb      	str	r3, [r1, #60]	; 0x3c
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e12:	69da      	ldr	r2, [r3, #28]
 8013e14:	683b      	ldr	r3, [r7, #0]
 8013e16:	781b      	ldrb	r3, [r3, #0]
 8013e18:	f003 030f 	and.w	r3, r3, #15
 8013e1c:	2101      	movs	r1, #1
 8013e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8013e22:	041b      	lsls	r3, r3, #16
 8013e24:	43db      	mvns	r3, r3
 8013e26:	68f9      	ldr	r1, [r7, #12]
 8013e28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013e2c:	4013      	ands	r3, r2
 8013e2e:	61cb      	str	r3, [r1, #28]
 8013e30:	68bb      	ldr	r3, [r7, #8]
 8013e32:	015a      	lsls	r2, r3, #5
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	4413      	add	r3, r2
 8013e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e3c:	681a      	ldr	r2, [r3, #0]
 8013e3e:	68bb      	ldr	r3, [r7, #8]
 8013e40:	0159      	lsls	r1, r3, #5
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	440b      	add	r3, r1
 8013e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e4a:	4619      	mov	r1, r3
 8013e4c:	4b05      	ldr	r3, [pc, #20]	; (8013e64 <USB_DeactivateEndpoint+0x1b4>)
 8013e4e:	4013      	ands	r3, r2
 8013e50:	600b      	str	r3, [r1, #0]
 8013e52:	2300      	movs	r3, #0
 8013e54:	4618      	mov	r0, r3
 8013e56:	3714      	adds	r7, #20
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5e:	4770      	bx	lr
 8013e60:	ec337800 	.word	0xec337800
 8013e64:	eff37800 	.word	0xeff37800

08013e68 <USB_EPStartXfer>:
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b08a      	sub	sp, #40	; 0x28
 8013e6c:	af02      	add	r7, sp, #8
 8013e6e:	60f8      	str	r0, [r7, #12]
 8013e70:	60b9      	str	r1, [r7, #8]
 8013e72:	4613      	mov	r3, r2
 8013e74:	71fb      	strb	r3, [r7, #7]
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	61fb      	str	r3, [r7, #28]
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	781b      	ldrb	r3, [r3, #0]
 8013e7e:	61bb      	str	r3, [r7, #24]
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	785b      	ldrb	r3, [r3, #1]
 8013e84:	2b01      	cmp	r3, #1
 8013e86:	f040 815c 	bne.w	8014142 <USB_EPStartXfer+0x2da>
 8013e8a:	68bb      	ldr	r3, [r7, #8]
 8013e8c:	695b      	ldr	r3, [r3, #20]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d132      	bne.n	8013ef8 <USB_EPStartXfer+0x90>
 8013e92:	69bb      	ldr	r3, [r7, #24]
 8013e94:	015a      	lsls	r2, r3, #5
 8013e96:	69fb      	ldr	r3, [r7, #28]
 8013e98:	4413      	add	r3, r2
 8013e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e9e:	691b      	ldr	r3, [r3, #16]
 8013ea0:	69ba      	ldr	r2, [r7, #24]
 8013ea2:	0151      	lsls	r1, r2, #5
 8013ea4:	69fa      	ldr	r2, [r7, #28]
 8013ea6:	440a      	add	r2, r1
 8013ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013eac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013eb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013eb4:	6113      	str	r3, [r2, #16]
 8013eb6:	69bb      	ldr	r3, [r7, #24]
 8013eb8:	015a      	lsls	r2, r3, #5
 8013eba:	69fb      	ldr	r3, [r7, #28]
 8013ebc:	4413      	add	r3, r2
 8013ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ec2:	691b      	ldr	r3, [r3, #16]
 8013ec4:	69ba      	ldr	r2, [r7, #24]
 8013ec6:	0151      	lsls	r1, r2, #5
 8013ec8:	69fa      	ldr	r2, [r7, #28]
 8013eca:	440a      	add	r2, r1
 8013ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ed0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013ed4:	6113      	str	r3, [r2, #16]
 8013ed6:	69bb      	ldr	r3, [r7, #24]
 8013ed8:	015a      	lsls	r2, r3, #5
 8013eda:	69fb      	ldr	r3, [r7, #28]
 8013edc:	4413      	add	r3, r2
 8013ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ee2:	691b      	ldr	r3, [r3, #16]
 8013ee4:	69ba      	ldr	r2, [r7, #24]
 8013ee6:	0151      	lsls	r1, r2, #5
 8013ee8:	69fa      	ldr	r2, [r7, #28]
 8013eea:	440a      	add	r2, r1
 8013eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ef0:	0cdb      	lsrs	r3, r3, #19
 8013ef2:	04db      	lsls	r3, r3, #19
 8013ef4:	6113      	str	r3, [r2, #16]
 8013ef6:	e074      	b.n	8013fe2 <USB_EPStartXfer+0x17a>
 8013ef8:	69bb      	ldr	r3, [r7, #24]
 8013efa:	015a      	lsls	r2, r3, #5
 8013efc:	69fb      	ldr	r3, [r7, #28]
 8013efe:	4413      	add	r3, r2
 8013f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f04:	691b      	ldr	r3, [r3, #16]
 8013f06:	69ba      	ldr	r2, [r7, #24]
 8013f08:	0151      	lsls	r1, r2, #5
 8013f0a:	69fa      	ldr	r2, [r7, #28]
 8013f0c:	440a      	add	r2, r1
 8013f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f12:	0cdb      	lsrs	r3, r3, #19
 8013f14:	04db      	lsls	r3, r3, #19
 8013f16:	6113      	str	r3, [r2, #16]
 8013f18:	69bb      	ldr	r3, [r7, #24]
 8013f1a:	015a      	lsls	r2, r3, #5
 8013f1c:	69fb      	ldr	r3, [r7, #28]
 8013f1e:	4413      	add	r3, r2
 8013f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f24:	691b      	ldr	r3, [r3, #16]
 8013f26:	69ba      	ldr	r2, [r7, #24]
 8013f28:	0151      	lsls	r1, r2, #5
 8013f2a:	69fa      	ldr	r2, [r7, #28]
 8013f2c:	440a      	add	r2, r1
 8013f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013f36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013f3a:	6113      	str	r3, [r2, #16]
 8013f3c:	69bb      	ldr	r3, [r7, #24]
 8013f3e:	015a      	lsls	r2, r3, #5
 8013f40:	69fb      	ldr	r3, [r7, #28]
 8013f42:	4413      	add	r3, r2
 8013f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f48:	691a      	ldr	r2, [r3, #16]
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	6959      	ldr	r1, [r3, #20]
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	689b      	ldr	r3, [r3, #8]
 8013f52:	440b      	add	r3, r1
 8013f54:	1e59      	subs	r1, r3, #1
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	689b      	ldr	r3, [r3, #8]
 8013f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8013f5e:	04d9      	lsls	r1, r3, #19
 8013f60:	4b9d      	ldr	r3, [pc, #628]	; (80141d8 <USB_EPStartXfer+0x370>)
 8013f62:	400b      	ands	r3, r1
 8013f64:	69b9      	ldr	r1, [r7, #24]
 8013f66:	0148      	lsls	r0, r1, #5
 8013f68:	69f9      	ldr	r1, [r7, #28]
 8013f6a:	4401      	add	r1, r0
 8013f6c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013f70:	4313      	orrs	r3, r2
 8013f72:	610b      	str	r3, [r1, #16]
 8013f74:	69bb      	ldr	r3, [r7, #24]
 8013f76:	015a      	lsls	r2, r3, #5
 8013f78:	69fb      	ldr	r3, [r7, #28]
 8013f7a:	4413      	add	r3, r2
 8013f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f80:	691a      	ldr	r2, [r3, #16]
 8013f82:	68bb      	ldr	r3, [r7, #8]
 8013f84:	695b      	ldr	r3, [r3, #20]
 8013f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013f8a:	69b9      	ldr	r1, [r7, #24]
 8013f8c:	0148      	lsls	r0, r1, #5
 8013f8e:	69f9      	ldr	r1, [r7, #28]
 8013f90:	4401      	add	r1, r0
 8013f92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013f96:	4313      	orrs	r3, r2
 8013f98:	610b      	str	r3, [r1, #16]
 8013f9a:	68bb      	ldr	r3, [r7, #8]
 8013f9c:	78db      	ldrb	r3, [r3, #3]
 8013f9e:	2b01      	cmp	r3, #1
 8013fa0:	d11f      	bne.n	8013fe2 <USB_EPStartXfer+0x17a>
 8013fa2:	69bb      	ldr	r3, [r7, #24]
 8013fa4:	015a      	lsls	r2, r3, #5
 8013fa6:	69fb      	ldr	r3, [r7, #28]
 8013fa8:	4413      	add	r3, r2
 8013faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fae:	691b      	ldr	r3, [r3, #16]
 8013fb0:	69ba      	ldr	r2, [r7, #24]
 8013fb2:	0151      	lsls	r1, r2, #5
 8013fb4:	69fa      	ldr	r2, [r7, #28]
 8013fb6:	440a      	add	r2, r1
 8013fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013fbc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013fc0:	6113      	str	r3, [r2, #16]
 8013fc2:	69bb      	ldr	r3, [r7, #24]
 8013fc4:	015a      	lsls	r2, r3, #5
 8013fc6:	69fb      	ldr	r3, [r7, #28]
 8013fc8:	4413      	add	r3, r2
 8013fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fce:	691b      	ldr	r3, [r3, #16]
 8013fd0:	69ba      	ldr	r2, [r7, #24]
 8013fd2:	0151      	lsls	r1, r2, #5
 8013fd4:	69fa      	ldr	r2, [r7, #28]
 8013fd6:	440a      	add	r2, r1
 8013fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013fdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013fe0:	6113      	str	r3, [r2, #16]
 8013fe2:	79fb      	ldrb	r3, [r7, #7]
 8013fe4:	2b01      	cmp	r3, #1
 8013fe6:	d14b      	bne.n	8014080 <USB_EPStartXfer+0x218>
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	691b      	ldr	r3, [r3, #16]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d009      	beq.n	8014004 <USB_EPStartXfer+0x19c>
 8013ff0:	69bb      	ldr	r3, [r7, #24]
 8013ff2:	015a      	lsls	r2, r3, #5
 8013ff4:	69fb      	ldr	r3, [r7, #28]
 8013ff6:	4413      	add	r3, r2
 8013ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ffc:	461a      	mov	r2, r3
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	691b      	ldr	r3, [r3, #16]
 8014002:	6153      	str	r3, [r2, #20]
 8014004:	68bb      	ldr	r3, [r7, #8]
 8014006:	78db      	ldrb	r3, [r3, #3]
 8014008:	2b01      	cmp	r3, #1
 801400a:	d128      	bne.n	801405e <USB_EPStartXfer+0x1f6>
 801400c:	69fb      	ldr	r3, [r7, #28]
 801400e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014012:	689b      	ldr	r3, [r3, #8]
 8014014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014018:	2b00      	cmp	r3, #0
 801401a:	d110      	bne.n	801403e <USB_EPStartXfer+0x1d6>
 801401c:	69bb      	ldr	r3, [r7, #24]
 801401e:	015a      	lsls	r2, r3, #5
 8014020:	69fb      	ldr	r3, [r7, #28]
 8014022:	4413      	add	r3, r2
 8014024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	69ba      	ldr	r2, [r7, #24]
 801402c:	0151      	lsls	r1, r2, #5
 801402e:	69fa      	ldr	r2, [r7, #28]
 8014030:	440a      	add	r2, r1
 8014032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014036:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801403a:	6013      	str	r3, [r2, #0]
 801403c:	e00f      	b.n	801405e <USB_EPStartXfer+0x1f6>
 801403e:	69bb      	ldr	r3, [r7, #24]
 8014040:	015a      	lsls	r2, r3, #5
 8014042:	69fb      	ldr	r3, [r7, #28]
 8014044:	4413      	add	r3, r2
 8014046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	69ba      	ldr	r2, [r7, #24]
 801404e:	0151      	lsls	r1, r2, #5
 8014050:	69fa      	ldr	r2, [r7, #28]
 8014052:	440a      	add	r2, r1
 8014054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801405c:	6013      	str	r3, [r2, #0]
 801405e:	69bb      	ldr	r3, [r7, #24]
 8014060:	015a      	lsls	r2, r3, #5
 8014062:	69fb      	ldr	r3, [r7, #28]
 8014064:	4413      	add	r3, r2
 8014066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	69ba      	ldr	r2, [r7, #24]
 801406e:	0151      	lsls	r1, r2, #5
 8014070:	69fa      	ldr	r2, [r7, #28]
 8014072:	440a      	add	r2, r1
 8014074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014078:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801407c:	6013      	str	r3, [r2, #0]
 801407e:	e12f      	b.n	80142e0 <USB_EPStartXfer+0x478>
 8014080:	69bb      	ldr	r3, [r7, #24]
 8014082:	015a      	lsls	r2, r3, #5
 8014084:	69fb      	ldr	r3, [r7, #28]
 8014086:	4413      	add	r3, r2
 8014088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	69ba      	ldr	r2, [r7, #24]
 8014090:	0151      	lsls	r1, r2, #5
 8014092:	69fa      	ldr	r2, [r7, #28]
 8014094:	440a      	add	r2, r1
 8014096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801409a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801409e:	6013      	str	r3, [r2, #0]
 80140a0:	68bb      	ldr	r3, [r7, #8]
 80140a2:	78db      	ldrb	r3, [r3, #3]
 80140a4:	2b01      	cmp	r3, #1
 80140a6:	d015      	beq.n	80140d4 <USB_EPStartXfer+0x26c>
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	695b      	ldr	r3, [r3, #20]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	f000 8117 	beq.w	80142e0 <USB_EPStartXfer+0x478>
 80140b2:	69fb      	ldr	r3, [r7, #28]
 80140b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80140b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80140ba:	68bb      	ldr	r3, [r7, #8]
 80140bc:	781b      	ldrb	r3, [r3, #0]
 80140be:	f003 030f 	and.w	r3, r3, #15
 80140c2:	2101      	movs	r1, #1
 80140c4:	fa01 f303 	lsl.w	r3, r1, r3
 80140c8:	69f9      	ldr	r1, [r7, #28]
 80140ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80140ce:	4313      	orrs	r3, r2
 80140d0:	634b      	str	r3, [r1, #52]	; 0x34
 80140d2:	e105      	b.n	80142e0 <USB_EPStartXfer+0x478>
 80140d4:	69fb      	ldr	r3, [r7, #28]
 80140d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80140da:	689b      	ldr	r3, [r3, #8]
 80140dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d110      	bne.n	8014106 <USB_EPStartXfer+0x29e>
 80140e4:	69bb      	ldr	r3, [r7, #24]
 80140e6:	015a      	lsls	r2, r3, #5
 80140e8:	69fb      	ldr	r3, [r7, #28]
 80140ea:	4413      	add	r3, r2
 80140ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	69ba      	ldr	r2, [r7, #24]
 80140f4:	0151      	lsls	r1, r2, #5
 80140f6:	69fa      	ldr	r2, [r7, #28]
 80140f8:	440a      	add	r2, r1
 80140fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80140fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014102:	6013      	str	r3, [r2, #0]
 8014104:	e00f      	b.n	8014126 <USB_EPStartXfer+0x2be>
 8014106:	69bb      	ldr	r3, [r7, #24]
 8014108:	015a      	lsls	r2, r3, #5
 801410a:	69fb      	ldr	r3, [r7, #28]
 801410c:	4413      	add	r3, r2
 801410e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	69ba      	ldr	r2, [r7, #24]
 8014116:	0151      	lsls	r1, r2, #5
 8014118:	69fa      	ldr	r2, [r7, #28]
 801411a:	440a      	add	r2, r1
 801411c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014124:	6013      	str	r3, [r2, #0]
 8014126:	68bb      	ldr	r3, [r7, #8]
 8014128:	68d9      	ldr	r1, [r3, #12]
 801412a:	68bb      	ldr	r3, [r7, #8]
 801412c:	781a      	ldrb	r2, [r3, #0]
 801412e:	68bb      	ldr	r3, [r7, #8]
 8014130:	695b      	ldr	r3, [r3, #20]
 8014132:	b298      	uxth	r0, r3
 8014134:	79fb      	ldrb	r3, [r7, #7]
 8014136:	9300      	str	r3, [sp, #0]
 8014138:	4603      	mov	r3, r0
 801413a:	68f8      	ldr	r0, [r7, #12]
 801413c:	f000 fa2b 	bl	8014596 <USB_WritePacket>
 8014140:	e0ce      	b.n	80142e0 <USB_EPStartXfer+0x478>
 8014142:	69bb      	ldr	r3, [r7, #24]
 8014144:	015a      	lsls	r2, r3, #5
 8014146:	69fb      	ldr	r3, [r7, #28]
 8014148:	4413      	add	r3, r2
 801414a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801414e:	691b      	ldr	r3, [r3, #16]
 8014150:	69ba      	ldr	r2, [r7, #24]
 8014152:	0151      	lsls	r1, r2, #5
 8014154:	69fa      	ldr	r2, [r7, #28]
 8014156:	440a      	add	r2, r1
 8014158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801415c:	0cdb      	lsrs	r3, r3, #19
 801415e:	04db      	lsls	r3, r3, #19
 8014160:	6113      	str	r3, [r2, #16]
 8014162:	69bb      	ldr	r3, [r7, #24]
 8014164:	015a      	lsls	r2, r3, #5
 8014166:	69fb      	ldr	r3, [r7, #28]
 8014168:	4413      	add	r3, r2
 801416a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801416e:	691b      	ldr	r3, [r3, #16]
 8014170:	69ba      	ldr	r2, [r7, #24]
 8014172:	0151      	lsls	r1, r2, #5
 8014174:	69fa      	ldr	r2, [r7, #28]
 8014176:	440a      	add	r2, r1
 8014178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801417c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014180:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014184:	6113      	str	r3, [r2, #16]
 8014186:	68bb      	ldr	r3, [r7, #8]
 8014188:	695b      	ldr	r3, [r3, #20]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d126      	bne.n	80141dc <USB_EPStartXfer+0x374>
 801418e:	69bb      	ldr	r3, [r7, #24]
 8014190:	015a      	lsls	r2, r3, #5
 8014192:	69fb      	ldr	r3, [r7, #28]
 8014194:	4413      	add	r3, r2
 8014196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801419a:	691a      	ldr	r2, [r3, #16]
 801419c:	68bb      	ldr	r3, [r7, #8]
 801419e:	689b      	ldr	r3, [r3, #8]
 80141a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80141a4:	69b9      	ldr	r1, [r7, #24]
 80141a6:	0148      	lsls	r0, r1, #5
 80141a8:	69f9      	ldr	r1, [r7, #28]
 80141aa:	4401      	add	r1, r0
 80141ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80141b0:	4313      	orrs	r3, r2
 80141b2:	610b      	str	r3, [r1, #16]
 80141b4:	69bb      	ldr	r3, [r7, #24]
 80141b6:	015a      	lsls	r2, r3, #5
 80141b8:	69fb      	ldr	r3, [r7, #28]
 80141ba:	4413      	add	r3, r2
 80141bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141c0:	691b      	ldr	r3, [r3, #16]
 80141c2:	69ba      	ldr	r2, [r7, #24]
 80141c4:	0151      	lsls	r1, r2, #5
 80141c6:	69fa      	ldr	r2, [r7, #28]
 80141c8:	440a      	add	r2, r1
 80141ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80141ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80141d2:	6113      	str	r3, [r2, #16]
 80141d4:	e036      	b.n	8014244 <USB_EPStartXfer+0x3dc>
 80141d6:	bf00      	nop
 80141d8:	1ff80000 	.word	0x1ff80000
 80141dc:	68bb      	ldr	r3, [r7, #8]
 80141de:	695a      	ldr	r2, [r3, #20]
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	689b      	ldr	r3, [r3, #8]
 80141e4:	4413      	add	r3, r2
 80141e6:	1e5a      	subs	r2, r3, #1
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	689b      	ldr	r3, [r3, #8]
 80141ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80141f0:	82fb      	strh	r3, [r7, #22]
 80141f2:	69bb      	ldr	r3, [r7, #24]
 80141f4:	015a      	lsls	r2, r3, #5
 80141f6:	69fb      	ldr	r3, [r7, #28]
 80141f8:	4413      	add	r3, r2
 80141fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141fe:	691a      	ldr	r2, [r3, #16]
 8014200:	8afb      	ldrh	r3, [r7, #22]
 8014202:	04d9      	lsls	r1, r3, #19
 8014204:	4b39      	ldr	r3, [pc, #228]	; (80142ec <USB_EPStartXfer+0x484>)
 8014206:	400b      	ands	r3, r1
 8014208:	69b9      	ldr	r1, [r7, #24]
 801420a:	0148      	lsls	r0, r1, #5
 801420c:	69f9      	ldr	r1, [r7, #28]
 801420e:	4401      	add	r1, r0
 8014210:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014214:	4313      	orrs	r3, r2
 8014216:	610b      	str	r3, [r1, #16]
 8014218:	69bb      	ldr	r3, [r7, #24]
 801421a:	015a      	lsls	r2, r3, #5
 801421c:	69fb      	ldr	r3, [r7, #28]
 801421e:	4413      	add	r3, r2
 8014220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014224:	691a      	ldr	r2, [r3, #16]
 8014226:	68bb      	ldr	r3, [r7, #8]
 8014228:	689b      	ldr	r3, [r3, #8]
 801422a:	8af9      	ldrh	r1, [r7, #22]
 801422c:	fb01 f303 	mul.w	r3, r1, r3
 8014230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014234:	69b9      	ldr	r1, [r7, #24]
 8014236:	0148      	lsls	r0, r1, #5
 8014238:	69f9      	ldr	r1, [r7, #28]
 801423a:	4401      	add	r1, r0
 801423c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014240:	4313      	orrs	r3, r2
 8014242:	610b      	str	r3, [r1, #16]
 8014244:	79fb      	ldrb	r3, [r7, #7]
 8014246:	2b01      	cmp	r3, #1
 8014248:	d10d      	bne.n	8014266 <USB_EPStartXfer+0x3fe>
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	68db      	ldr	r3, [r3, #12]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d009      	beq.n	8014266 <USB_EPStartXfer+0x3fe>
 8014252:	68bb      	ldr	r3, [r7, #8]
 8014254:	68d9      	ldr	r1, [r3, #12]
 8014256:	69bb      	ldr	r3, [r7, #24]
 8014258:	015a      	lsls	r2, r3, #5
 801425a:	69fb      	ldr	r3, [r7, #28]
 801425c:	4413      	add	r3, r2
 801425e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014262:	460a      	mov	r2, r1
 8014264:	615a      	str	r2, [r3, #20]
 8014266:	68bb      	ldr	r3, [r7, #8]
 8014268:	78db      	ldrb	r3, [r3, #3]
 801426a:	2b01      	cmp	r3, #1
 801426c:	d128      	bne.n	80142c0 <USB_EPStartXfer+0x458>
 801426e:	69fb      	ldr	r3, [r7, #28]
 8014270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014274:	689b      	ldr	r3, [r3, #8]
 8014276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801427a:	2b00      	cmp	r3, #0
 801427c:	d110      	bne.n	80142a0 <USB_EPStartXfer+0x438>
 801427e:	69bb      	ldr	r3, [r7, #24]
 8014280:	015a      	lsls	r2, r3, #5
 8014282:	69fb      	ldr	r3, [r7, #28]
 8014284:	4413      	add	r3, r2
 8014286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	69ba      	ldr	r2, [r7, #24]
 801428e:	0151      	lsls	r1, r2, #5
 8014290:	69fa      	ldr	r2, [r7, #28]
 8014292:	440a      	add	r2, r1
 8014294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014298:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801429c:	6013      	str	r3, [r2, #0]
 801429e:	e00f      	b.n	80142c0 <USB_EPStartXfer+0x458>
 80142a0:	69bb      	ldr	r3, [r7, #24]
 80142a2:	015a      	lsls	r2, r3, #5
 80142a4:	69fb      	ldr	r3, [r7, #28]
 80142a6:	4413      	add	r3, r2
 80142a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	69ba      	ldr	r2, [r7, #24]
 80142b0:	0151      	lsls	r1, r2, #5
 80142b2:	69fa      	ldr	r2, [r7, #28]
 80142b4:	440a      	add	r2, r1
 80142b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80142ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80142be:	6013      	str	r3, [r2, #0]
 80142c0:	69bb      	ldr	r3, [r7, #24]
 80142c2:	015a      	lsls	r2, r3, #5
 80142c4:	69fb      	ldr	r3, [r7, #28]
 80142c6:	4413      	add	r3, r2
 80142c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	69ba      	ldr	r2, [r7, #24]
 80142d0:	0151      	lsls	r1, r2, #5
 80142d2:	69fa      	ldr	r2, [r7, #28]
 80142d4:	440a      	add	r2, r1
 80142d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80142da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80142de:	6013      	str	r3, [r2, #0]
 80142e0:	2300      	movs	r3, #0
 80142e2:	4618      	mov	r0, r3
 80142e4:	3720      	adds	r7, #32
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}
 80142ea:	bf00      	nop
 80142ec:	1ff80000 	.word	0x1ff80000

080142f0 <USB_EP0StartXfer>:
 80142f0:	b480      	push	{r7}
 80142f2:	b087      	sub	sp, #28
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	60f8      	str	r0, [r7, #12]
 80142f8:	60b9      	str	r1, [r7, #8]
 80142fa:	4613      	mov	r3, r2
 80142fc:	71fb      	strb	r3, [r7, #7]
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	617b      	str	r3, [r7, #20]
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	781b      	ldrb	r3, [r3, #0]
 8014306:	613b      	str	r3, [r7, #16]
 8014308:	68bb      	ldr	r3, [r7, #8]
 801430a:	785b      	ldrb	r3, [r3, #1]
 801430c:	2b01      	cmp	r3, #1
 801430e:	f040 80cd 	bne.w	80144ac <USB_EP0StartXfer+0x1bc>
 8014312:	68bb      	ldr	r3, [r7, #8]
 8014314:	695b      	ldr	r3, [r3, #20]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d132      	bne.n	8014380 <USB_EP0StartXfer+0x90>
 801431a:	693b      	ldr	r3, [r7, #16]
 801431c:	015a      	lsls	r2, r3, #5
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	4413      	add	r3, r2
 8014322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014326:	691b      	ldr	r3, [r3, #16]
 8014328:	693a      	ldr	r2, [r7, #16]
 801432a:	0151      	lsls	r1, r2, #5
 801432c:	697a      	ldr	r2, [r7, #20]
 801432e:	440a      	add	r2, r1
 8014330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014334:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014338:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801433c:	6113      	str	r3, [r2, #16]
 801433e:	693b      	ldr	r3, [r7, #16]
 8014340:	015a      	lsls	r2, r3, #5
 8014342:	697b      	ldr	r3, [r7, #20]
 8014344:	4413      	add	r3, r2
 8014346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801434a:	691b      	ldr	r3, [r3, #16]
 801434c:	693a      	ldr	r2, [r7, #16]
 801434e:	0151      	lsls	r1, r2, #5
 8014350:	697a      	ldr	r2, [r7, #20]
 8014352:	440a      	add	r2, r1
 8014354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014358:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801435c:	6113      	str	r3, [r2, #16]
 801435e:	693b      	ldr	r3, [r7, #16]
 8014360:	015a      	lsls	r2, r3, #5
 8014362:	697b      	ldr	r3, [r7, #20]
 8014364:	4413      	add	r3, r2
 8014366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801436a:	691b      	ldr	r3, [r3, #16]
 801436c:	693a      	ldr	r2, [r7, #16]
 801436e:	0151      	lsls	r1, r2, #5
 8014370:	697a      	ldr	r2, [r7, #20]
 8014372:	440a      	add	r2, r1
 8014374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014378:	0cdb      	lsrs	r3, r3, #19
 801437a:	04db      	lsls	r3, r3, #19
 801437c:	6113      	str	r3, [r2, #16]
 801437e:	e04e      	b.n	801441e <USB_EP0StartXfer+0x12e>
 8014380:	693b      	ldr	r3, [r7, #16]
 8014382:	015a      	lsls	r2, r3, #5
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	4413      	add	r3, r2
 8014388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801438c:	691b      	ldr	r3, [r3, #16]
 801438e:	693a      	ldr	r2, [r7, #16]
 8014390:	0151      	lsls	r1, r2, #5
 8014392:	697a      	ldr	r2, [r7, #20]
 8014394:	440a      	add	r2, r1
 8014396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801439a:	0cdb      	lsrs	r3, r3, #19
 801439c:	04db      	lsls	r3, r3, #19
 801439e:	6113      	str	r3, [r2, #16]
 80143a0:	693b      	ldr	r3, [r7, #16]
 80143a2:	015a      	lsls	r2, r3, #5
 80143a4:	697b      	ldr	r3, [r7, #20]
 80143a6:	4413      	add	r3, r2
 80143a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143ac:	691b      	ldr	r3, [r3, #16]
 80143ae:	693a      	ldr	r2, [r7, #16]
 80143b0:	0151      	lsls	r1, r2, #5
 80143b2:	697a      	ldr	r2, [r7, #20]
 80143b4:	440a      	add	r2, r1
 80143b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80143be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80143c2:	6113      	str	r3, [r2, #16]
 80143c4:	68bb      	ldr	r3, [r7, #8]
 80143c6:	695a      	ldr	r2, [r3, #20]
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	689b      	ldr	r3, [r3, #8]
 80143cc:	429a      	cmp	r2, r3
 80143ce:	d903      	bls.n	80143d8 <USB_EP0StartXfer+0xe8>
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	689a      	ldr	r2, [r3, #8]
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	615a      	str	r2, [r3, #20]
 80143d8:	693b      	ldr	r3, [r7, #16]
 80143da:	015a      	lsls	r2, r3, #5
 80143dc:	697b      	ldr	r3, [r7, #20]
 80143de:	4413      	add	r3, r2
 80143e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143e4:	691b      	ldr	r3, [r3, #16]
 80143e6:	693a      	ldr	r2, [r7, #16]
 80143e8:	0151      	lsls	r1, r2, #5
 80143ea:	697a      	ldr	r2, [r7, #20]
 80143ec:	440a      	add	r2, r1
 80143ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80143f6:	6113      	str	r3, [r2, #16]
 80143f8:	693b      	ldr	r3, [r7, #16]
 80143fa:	015a      	lsls	r2, r3, #5
 80143fc:	697b      	ldr	r3, [r7, #20]
 80143fe:	4413      	add	r3, r2
 8014400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014404:	691a      	ldr	r2, [r3, #16]
 8014406:	68bb      	ldr	r3, [r7, #8]
 8014408:	695b      	ldr	r3, [r3, #20]
 801440a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801440e:	6939      	ldr	r1, [r7, #16]
 8014410:	0148      	lsls	r0, r1, #5
 8014412:	6979      	ldr	r1, [r7, #20]
 8014414:	4401      	add	r1, r0
 8014416:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801441a:	4313      	orrs	r3, r2
 801441c:	610b      	str	r3, [r1, #16]
 801441e:	79fb      	ldrb	r3, [r7, #7]
 8014420:	2b01      	cmp	r3, #1
 8014422:	d11e      	bne.n	8014462 <USB_EP0StartXfer+0x172>
 8014424:	68bb      	ldr	r3, [r7, #8]
 8014426:	691b      	ldr	r3, [r3, #16]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d009      	beq.n	8014440 <USB_EP0StartXfer+0x150>
 801442c:	693b      	ldr	r3, [r7, #16]
 801442e:	015a      	lsls	r2, r3, #5
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	4413      	add	r3, r2
 8014434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014438:	461a      	mov	r2, r3
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	691b      	ldr	r3, [r3, #16]
 801443e:	6153      	str	r3, [r2, #20]
 8014440:	693b      	ldr	r3, [r7, #16]
 8014442:	015a      	lsls	r2, r3, #5
 8014444:	697b      	ldr	r3, [r7, #20]
 8014446:	4413      	add	r3, r2
 8014448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	693a      	ldr	r2, [r7, #16]
 8014450:	0151      	lsls	r1, r2, #5
 8014452:	697a      	ldr	r2, [r7, #20]
 8014454:	440a      	add	r2, r1
 8014456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801445a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801445e:	6013      	str	r3, [r2, #0]
 8014460:	e092      	b.n	8014588 <USB_EP0StartXfer+0x298>
 8014462:	693b      	ldr	r3, [r7, #16]
 8014464:	015a      	lsls	r2, r3, #5
 8014466:	697b      	ldr	r3, [r7, #20]
 8014468:	4413      	add	r3, r2
 801446a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	693a      	ldr	r2, [r7, #16]
 8014472:	0151      	lsls	r1, r2, #5
 8014474:	697a      	ldr	r2, [r7, #20]
 8014476:	440a      	add	r2, r1
 8014478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801447c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014480:	6013      	str	r3, [r2, #0]
 8014482:	68bb      	ldr	r3, [r7, #8]
 8014484:	695b      	ldr	r3, [r3, #20]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d07e      	beq.n	8014588 <USB_EP0StartXfer+0x298>
 801448a:	697b      	ldr	r3, [r7, #20]
 801448c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014492:	68bb      	ldr	r3, [r7, #8]
 8014494:	781b      	ldrb	r3, [r3, #0]
 8014496:	f003 030f 	and.w	r3, r3, #15
 801449a:	2101      	movs	r1, #1
 801449c:	fa01 f303 	lsl.w	r3, r1, r3
 80144a0:	6979      	ldr	r1, [r7, #20]
 80144a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80144a6:	4313      	orrs	r3, r2
 80144a8:	634b      	str	r3, [r1, #52]	; 0x34
 80144aa:	e06d      	b.n	8014588 <USB_EP0StartXfer+0x298>
 80144ac:	693b      	ldr	r3, [r7, #16]
 80144ae:	015a      	lsls	r2, r3, #5
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	4413      	add	r3, r2
 80144b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144b8:	691b      	ldr	r3, [r3, #16]
 80144ba:	693a      	ldr	r2, [r7, #16]
 80144bc:	0151      	lsls	r1, r2, #5
 80144be:	697a      	ldr	r2, [r7, #20]
 80144c0:	440a      	add	r2, r1
 80144c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80144c6:	0cdb      	lsrs	r3, r3, #19
 80144c8:	04db      	lsls	r3, r3, #19
 80144ca:	6113      	str	r3, [r2, #16]
 80144cc:	693b      	ldr	r3, [r7, #16]
 80144ce:	015a      	lsls	r2, r3, #5
 80144d0:	697b      	ldr	r3, [r7, #20]
 80144d2:	4413      	add	r3, r2
 80144d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144d8:	691b      	ldr	r3, [r3, #16]
 80144da:	693a      	ldr	r2, [r7, #16]
 80144dc:	0151      	lsls	r1, r2, #5
 80144de:	697a      	ldr	r2, [r7, #20]
 80144e0:	440a      	add	r2, r1
 80144e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80144e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80144ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80144ee:	6113      	str	r3, [r2, #16]
 80144f0:	68bb      	ldr	r3, [r7, #8]
 80144f2:	695b      	ldr	r3, [r3, #20]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d003      	beq.n	8014500 <USB_EP0StartXfer+0x210>
 80144f8:	68bb      	ldr	r3, [r7, #8]
 80144fa:	689a      	ldr	r2, [r3, #8]
 80144fc:	68bb      	ldr	r3, [r7, #8]
 80144fe:	615a      	str	r2, [r3, #20]
 8014500:	693b      	ldr	r3, [r7, #16]
 8014502:	015a      	lsls	r2, r3, #5
 8014504:	697b      	ldr	r3, [r7, #20]
 8014506:	4413      	add	r3, r2
 8014508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801450c:	691b      	ldr	r3, [r3, #16]
 801450e:	693a      	ldr	r2, [r7, #16]
 8014510:	0151      	lsls	r1, r2, #5
 8014512:	697a      	ldr	r2, [r7, #20]
 8014514:	440a      	add	r2, r1
 8014516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801451a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801451e:	6113      	str	r3, [r2, #16]
 8014520:	693b      	ldr	r3, [r7, #16]
 8014522:	015a      	lsls	r2, r3, #5
 8014524:	697b      	ldr	r3, [r7, #20]
 8014526:	4413      	add	r3, r2
 8014528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801452c:	691a      	ldr	r2, [r3, #16]
 801452e:	68bb      	ldr	r3, [r7, #8]
 8014530:	689b      	ldr	r3, [r3, #8]
 8014532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014536:	6939      	ldr	r1, [r7, #16]
 8014538:	0148      	lsls	r0, r1, #5
 801453a:	6979      	ldr	r1, [r7, #20]
 801453c:	4401      	add	r1, r0
 801453e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014542:	4313      	orrs	r3, r2
 8014544:	610b      	str	r3, [r1, #16]
 8014546:	79fb      	ldrb	r3, [r7, #7]
 8014548:	2b01      	cmp	r3, #1
 801454a:	d10d      	bne.n	8014568 <USB_EP0StartXfer+0x278>
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	68db      	ldr	r3, [r3, #12]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d009      	beq.n	8014568 <USB_EP0StartXfer+0x278>
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	68d9      	ldr	r1, [r3, #12]
 8014558:	693b      	ldr	r3, [r7, #16]
 801455a:	015a      	lsls	r2, r3, #5
 801455c:	697b      	ldr	r3, [r7, #20]
 801455e:	4413      	add	r3, r2
 8014560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014564:	460a      	mov	r2, r1
 8014566:	615a      	str	r2, [r3, #20]
 8014568:	693b      	ldr	r3, [r7, #16]
 801456a:	015a      	lsls	r2, r3, #5
 801456c:	697b      	ldr	r3, [r7, #20]
 801456e:	4413      	add	r3, r2
 8014570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	693a      	ldr	r2, [r7, #16]
 8014578:	0151      	lsls	r1, r2, #5
 801457a:	697a      	ldr	r2, [r7, #20]
 801457c:	440a      	add	r2, r1
 801457e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014582:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014586:	6013      	str	r3, [r2, #0]
 8014588:	2300      	movs	r3, #0
 801458a:	4618      	mov	r0, r3
 801458c:	371c      	adds	r7, #28
 801458e:	46bd      	mov	sp, r7
 8014590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014594:	4770      	bx	lr

08014596 <USB_WritePacket>:
 8014596:	b480      	push	{r7}
 8014598:	b089      	sub	sp, #36	; 0x24
 801459a:	af00      	add	r7, sp, #0
 801459c:	60f8      	str	r0, [r7, #12]
 801459e:	60b9      	str	r1, [r7, #8]
 80145a0:	4611      	mov	r1, r2
 80145a2:	461a      	mov	r2, r3
 80145a4:	460b      	mov	r3, r1
 80145a6:	71fb      	strb	r3, [r7, #7]
 80145a8:	4613      	mov	r3, r2
 80145aa:	80bb      	strh	r3, [r7, #4]
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	617b      	str	r3, [r7, #20]
 80145b0:	68bb      	ldr	r3, [r7, #8]
 80145b2:	61fb      	str	r3, [r7, #28]
 80145b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d123      	bne.n	8014604 <USB_WritePacket+0x6e>
 80145bc:	88bb      	ldrh	r3, [r7, #4]
 80145be:	3303      	adds	r3, #3
 80145c0:	089b      	lsrs	r3, r3, #2
 80145c2:	613b      	str	r3, [r7, #16]
 80145c4:	2300      	movs	r3, #0
 80145c6:	61bb      	str	r3, [r7, #24]
 80145c8:	e018      	b.n	80145fc <USB_WritePacket+0x66>
 80145ca:	79fb      	ldrb	r3, [r7, #7]
 80145cc:	031a      	lsls	r2, r3, #12
 80145ce:	697b      	ldr	r3, [r7, #20]
 80145d0:	4413      	add	r3, r2
 80145d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80145d6:	461a      	mov	r2, r3
 80145d8:	69fb      	ldr	r3, [r7, #28]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	6013      	str	r3, [r2, #0]
 80145de:	69fb      	ldr	r3, [r7, #28]
 80145e0:	3301      	adds	r3, #1
 80145e2:	61fb      	str	r3, [r7, #28]
 80145e4:	69fb      	ldr	r3, [r7, #28]
 80145e6:	3301      	adds	r3, #1
 80145e8:	61fb      	str	r3, [r7, #28]
 80145ea:	69fb      	ldr	r3, [r7, #28]
 80145ec:	3301      	adds	r3, #1
 80145ee:	61fb      	str	r3, [r7, #28]
 80145f0:	69fb      	ldr	r3, [r7, #28]
 80145f2:	3301      	adds	r3, #1
 80145f4:	61fb      	str	r3, [r7, #28]
 80145f6:	69bb      	ldr	r3, [r7, #24]
 80145f8:	3301      	adds	r3, #1
 80145fa:	61bb      	str	r3, [r7, #24]
 80145fc:	69ba      	ldr	r2, [r7, #24]
 80145fe:	693b      	ldr	r3, [r7, #16]
 8014600:	429a      	cmp	r2, r3
 8014602:	d3e2      	bcc.n	80145ca <USB_WritePacket+0x34>
 8014604:	2300      	movs	r3, #0
 8014606:	4618      	mov	r0, r3
 8014608:	3724      	adds	r7, #36	; 0x24
 801460a:	46bd      	mov	sp, r7
 801460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014610:	4770      	bx	lr

08014612 <USB_ReadPacket>:
 8014612:	b480      	push	{r7}
 8014614:	b08b      	sub	sp, #44	; 0x2c
 8014616:	af00      	add	r7, sp, #0
 8014618:	60f8      	str	r0, [r7, #12]
 801461a:	60b9      	str	r1, [r7, #8]
 801461c:	4613      	mov	r3, r2
 801461e:	80fb      	strh	r3, [r7, #6]
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	61bb      	str	r3, [r7, #24]
 8014624:	68bb      	ldr	r3, [r7, #8]
 8014626:	627b      	str	r3, [r7, #36]	; 0x24
 8014628:	88fb      	ldrh	r3, [r7, #6]
 801462a:	089b      	lsrs	r3, r3, #2
 801462c:	b29b      	uxth	r3, r3
 801462e:	617b      	str	r3, [r7, #20]
 8014630:	88fb      	ldrh	r3, [r7, #6]
 8014632:	f003 0303 	and.w	r3, r3, #3
 8014636:	83fb      	strh	r3, [r7, #30]
 8014638:	2300      	movs	r3, #0
 801463a:	623b      	str	r3, [r7, #32]
 801463c:	e014      	b.n	8014668 <USB_ReadPacket+0x56>
 801463e:	69bb      	ldr	r3, [r7, #24]
 8014640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014644:	681a      	ldr	r2, [r3, #0]
 8014646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014648:	601a      	str	r2, [r3, #0]
 801464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801464c:	3301      	adds	r3, #1
 801464e:	627b      	str	r3, [r7, #36]	; 0x24
 8014650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014652:	3301      	adds	r3, #1
 8014654:	627b      	str	r3, [r7, #36]	; 0x24
 8014656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014658:	3301      	adds	r3, #1
 801465a:	627b      	str	r3, [r7, #36]	; 0x24
 801465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801465e:	3301      	adds	r3, #1
 8014660:	627b      	str	r3, [r7, #36]	; 0x24
 8014662:	6a3b      	ldr	r3, [r7, #32]
 8014664:	3301      	adds	r3, #1
 8014666:	623b      	str	r3, [r7, #32]
 8014668:	6a3a      	ldr	r2, [r7, #32]
 801466a:	697b      	ldr	r3, [r7, #20]
 801466c:	429a      	cmp	r2, r3
 801466e:	d3e6      	bcc.n	801463e <USB_ReadPacket+0x2c>
 8014670:	8bfb      	ldrh	r3, [r7, #30]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d01e      	beq.n	80146b4 <USB_ReadPacket+0xa2>
 8014676:	2300      	movs	r3, #0
 8014678:	623b      	str	r3, [r7, #32]
 801467a:	69bb      	ldr	r3, [r7, #24]
 801467c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014680:	461a      	mov	r2, r3
 8014682:	f107 0310 	add.w	r3, r7, #16
 8014686:	6812      	ldr	r2, [r2, #0]
 8014688:	601a      	str	r2, [r3, #0]
 801468a:	693a      	ldr	r2, [r7, #16]
 801468c:	6a3b      	ldr	r3, [r7, #32]
 801468e:	b2db      	uxtb	r3, r3
 8014690:	00db      	lsls	r3, r3, #3
 8014692:	fa22 f303 	lsr.w	r3, r2, r3
 8014696:	b2da      	uxtb	r2, r3
 8014698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801469a:	701a      	strb	r2, [r3, #0]
 801469c:	6a3b      	ldr	r3, [r7, #32]
 801469e:	3301      	adds	r3, #1
 80146a0:	623b      	str	r3, [r7, #32]
 80146a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146a4:	3301      	adds	r3, #1
 80146a6:	627b      	str	r3, [r7, #36]	; 0x24
 80146a8:	8bfb      	ldrh	r3, [r7, #30]
 80146aa:	3b01      	subs	r3, #1
 80146ac:	83fb      	strh	r3, [r7, #30]
 80146ae:	8bfb      	ldrh	r3, [r7, #30]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d1ea      	bne.n	801468a <USB_ReadPacket+0x78>
 80146b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b6:	4618      	mov	r0, r3
 80146b8:	372c      	adds	r7, #44	; 0x2c
 80146ba:	46bd      	mov	sp, r7
 80146bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c0:	4770      	bx	lr

080146c2 <USB_EPSetStall>:
 80146c2:	b480      	push	{r7}
 80146c4:	b085      	sub	sp, #20
 80146c6:	af00      	add	r7, sp, #0
 80146c8:	6078      	str	r0, [r7, #4]
 80146ca:	6039      	str	r1, [r7, #0]
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	60fb      	str	r3, [r7, #12]
 80146d0:	683b      	ldr	r3, [r7, #0]
 80146d2:	781b      	ldrb	r3, [r3, #0]
 80146d4:	60bb      	str	r3, [r7, #8]
 80146d6:	683b      	ldr	r3, [r7, #0]
 80146d8:	785b      	ldrb	r3, [r3, #1]
 80146da:	2b01      	cmp	r3, #1
 80146dc:	d12c      	bne.n	8014738 <USB_EPSetStall+0x76>
 80146de:	68bb      	ldr	r3, [r7, #8]
 80146e0:	015a      	lsls	r2, r3, #5
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	4413      	add	r3, r2
 80146e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	db12      	blt.n	8014716 <USB_EPSetStall+0x54>
 80146f0:	68bb      	ldr	r3, [r7, #8]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d00f      	beq.n	8014716 <USB_EPSetStall+0x54>
 80146f6:	68bb      	ldr	r3, [r7, #8]
 80146f8:	015a      	lsls	r2, r3, #5
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	4413      	add	r3, r2
 80146fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	68ba      	ldr	r2, [r7, #8]
 8014706:	0151      	lsls	r1, r2, #5
 8014708:	68fa      	ldr	r2, [r7, #12]
 801470a:	440a      	add	r2, r1
 801470c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014710:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014714:	6013      	str	r3, [r2, #0]
 8014716:	68bb      	ldr	r3, [r7, #8]
 8014718:	015a      	lsls	r2, r3, #5
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	4413      	add	r3, r2
 801471e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	68ba      	ldr	r2, [r7, #8]
 8014726:	0151      	lsls	r1, r2, #5
 8014728:	68fa      	ldr	r2, [r7, #12]
 801472a:	440a      	add	r2, r1
 801472c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014734:	6013      	str	r3, [r2, #0]
 8014736:	e02b      	b.n	8014790 <USB_EPSetStall+0xce>
 8014738:	68bb      	ldr	r3, [r7, #8]
 801473a:	015a      	lsls	r2, r3, #5
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	4413      	add	r3, r2
 8014740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	2b00      	cmp	r3, #0
 8014748:	db12      	blt.n	8014770 <USB_EPSetStall+0xae>
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d00f      	beq.n	8014770 <USB_EPSetStall+0xae>
 8014750:	68bb      	ldr	r3, [r7, #8]
 8014752:	015a      	lsls	r2, r3, #5
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	4413      	add	r3, r2
 8014758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	68ba      	ldr	r2, [r7, #8]
 8014760:	0151      	lsls	r1, r2, #5
 8014762:	68fa      	ldr	r2, [r7, #12]
 8014764:	440a      	add	r2, r1
 8014766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801476a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801476e:	6013      	str	r3, [r2, #0]
 8014770:	68bb      	ldr	r3, [r7, #8]
 8014772:	015a      	lsls	r2, r3, #5
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	4413      	add	r3, r2
 8014778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	68ba      	ldr	r2, [r7, #8]
 8014780:	0151      	lsls	r1, r2, #5
 8014782:	68fa      	ldr	r2, [r7, #12]
 8014784:	440a      	add	r2, r1
 8014786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801478a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801478e:	6013      	str	r3, [r2, #0]
 8014790:	2300      	movs	r3, #0
 8014792:	4618      	mov	r0, r3
 8014794:	3714      	adds	r7, #20
 8014796:	46bd      	mov	sp, r7
 8014798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801479c:	4770      	bx	lr

0801479e <USB_EPClearStall>:
 801479e:	b480      	push	{r7}
 80147a0:	b085      	sub	sp, #20
 80147a2:	af00      	add	r7, sp, #0
 80147a4:	6078      	str	r0, [r7, #4]
 80147a6:	6039      	str	r1, [r7, #0]
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	60fb      	str	r3, [r7, #12]
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	781b      	ldrb	r3, [r3, #0]
 80147b0:	60bb      	str	r3, [r7, #8]
 80147b2:	683b      	ldr	r3, [r7, #0]
 80147b4:	785b      	ldrb	r3, [r3, #1]
 80147b6:	2b01      	cmp	r3, #1
 80147b8:	d128      	bne.n	801480c <USB_EPClearStall+0x6e>
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	015a      	lsls	r2, r3, #5
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	4413      	add	r3, r2
 80147c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	68ba      	ldr	r2, [r7, #8]
 80147ca:	0151      	lsls	r1, r2, #5
 80147cc:	68fa      	ldr	r2, [r7, #12]
 80147ce:	440a      	add	r2, r1
 80147d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80147d8:	6013      	str	r3, [r2, #0]
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	78db      	ldrb	r3, [r3, #3]
 80147de:	2b03      	cmp	r3, #3
 80147e0:	d003      	beq.n	80147ea <USB_EPClearStall+0x4c>
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	78db      	ldrb	r3, [r3, #3]
 80147e6:	2b02      	cmp	r3, #2
 80147e8:	d138      	bne.n	801485c <USB_EPClearStall+0xbe>
 80147ea:	68bb      	ldr	r3, [r7, #8]
 80147ec:	015a      	lsls	r2, r3, #5
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	4413      	add	r3, r2
 80147f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	68ba      	ldr	r2, [r7, #8]
 80147fa:	0151      	lsls	r1, r2, #5
 80147fc:	68fa      	ldr	r2, [r7, #12]
 80147fe:	440a      	add	r2, r1
 8014800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014808:	6013      	str	r3, [r2, #0]
 801480a:	e027      	b.n	801485c <USB_EPClearStall+0xbe>
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	015a      	lsls	r2, r3, #5
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	4413      	add	r3, r2
 8014814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	68ba      	ldr	r2, [r7, #8]
 801481c:	0151      	lsls	r1, r2, #5
 801481e:	68fa      	ldr	r2, [r7, #12]
 8014820:	440a      	add	r2, r1
 8014822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014826:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801482a:	6013      	str	r3, [r2, #0]
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	78db      	ldrb	r3, [r3, #3]
 8014830:	2b03      	cmp	r3, #3
 8014832:	d003      	beq.n	801483c <USB_EPClearStall+0x9e>
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	78db      	ldrb	r3, [r3, #3]
 8014838:	2b02      	cmp	r3, #2
 801483a:	d10f      	bne.n	801485c <USB_EPClearStall+0xbe>
 801483c:	68bb      	ldr	r3, [r7, #8]
 801483e:	015a      	lsls	r2, r3, #5
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	4413      	add	r3, r2
 8014844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	68ba      	ldr	r2, [r7, #8]
 801484c:	0151      	lsls	r1, r2, #5
 801484e:	68fa      	ldr	r2, [r7, #12]
 8014850:	440a      	add	r2, r1
 8014852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801485a:	6013      	str	r3, [r2, #0]
 801485c:	2300      	movs	r3, #0
 801485e:	4618      	mov	r0, r3
 8014860:	3714      	adds	r7, #20
 8014862:	46bd      	mov	sp, r7
 8014864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014868:	4770      	bx	lr

0801486a <USB_SetDevAddress>:
 801486a:	b480      	push	{r7}
 801486c:	b085      	sub	sp, #20
 801486e:	af00      	add	r7, sp, #0
 8014870:	6078      	str	r0, [r7, #4]
 8014872:	460b      	mov	r3, r1
 8014874:	70fb      	strb	r3, [r7, #3]
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	60fb      	str	r3, [r7, #12]
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	68fa      	ldr	r2, [r7, #12]
 8014884:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014888:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801488c:	6013      	str	r3, [r2, #0]
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014894:	681a      	ldr	r2, [r3, #0]
 8014896:	78fb      	ldrb	r3, [r7, #3]
 8014898:	011b      	lsls	r3, r3, #4
 801489a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801489e:	68f9      	ldr	r1, [r7, #12]
 80148a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80148a4:	4313      	orrs	r3, r2
 80148a6:	600b      	str	r3, [r1, #0]
 80148a8:	2300      	movs	r3, #0
 80148aa:	4618      	mov	r0, r3
 80148ac:	3714      	adds	r7, #20
 80148ae:	46bd      	mov	sp, r7
 80148b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b4:	4770      	bx	lr

080148b6 <USB_DevConnect>:
 80148b6:	b480      	push	{r7}
 80148b8:	b085      	sub	sp, #20
 80148ba:	af00      	add	r7, sp, #0
 80148bc:	6078      	str	r0, [r7, #4]
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	60fb      	str	r3, [r7, #12]
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	68fa      	ldr	r2, [r7, #12]
 80148cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80148d0:	f023 0303 	bic.w	r3, r3, #3
 80148d4:	6013      	str	r3, [r2, #0]
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80148dc:	685b      	ldr	r3, [r3, #4]
 80148de:	68fa      	ldr	r2, [r7, #12]
 80148e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80148e4:	f023 0302 	bic.w	r3, r3, #2
 80148e8:	6053      	str	r3, [r2, #4]
 80148ea:	2300      	movs	r3, #0
 80148ec:	4618      	mov	r0, r3
 80148ee:	3714      	adds	r7, #20
 80148f0:	46bd      	mov	sp, r7
 80148f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f6:	4770      	bx	lr

080148f8 <USB_DevDisconnect>:
 80148f8:	b480      	push	{r7}
 80148fa:	b085      	sub	sp, #20
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	60fb      	str	r3, [r7, #12]
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	68fa      	ldr	r2, [r7, #12]
 801490e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014912:	f023 0303 	bic.w	r3, r3, #3
 8014916:	6013      	str	r3, [r2, #0]
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801491e:	685b      	ldr	r3, [r3, #4]
 8014920:	68fa      	ldr	r2, [r7, #12]
 8014922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014926:	f043 0302 	orr.w	r3, r3, #2
 801492a:	6053      	str	r3, [r2, #4]
 801492c:	2300      	movs	r3, #0
 801492e:	4618      	mov	r0, r3
 8014930:	3714      	adds	r7, #20
 8014932:	46bd      	mov	sp, r7
 8014934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014938:	4770      	bx	lr

0801493a <USB_ReadInterrupts>:
 801493a:	b480      	push	{r7}
 801493c:	b085      	sub	sp, #20
 801493e:	af00      	add	r7, sp, #0
 8014940:	6078      	str	r0, [r7, #4]
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	695b      	ldr	r3, [r3, #20]
 8014946:	60fb      	str	r3, [r7, #12]
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	699b      	ldr	r3, [r3, #24]
 801494c:	68fa      	ldr	r2, [r7, #12]
 801494e:	4013      	ands	r3, r2
 8014950:	60fb      	str	r3, [r7, #12]
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	4618      	mov	r0, r3
 8014956:	3714      	adds	r7, #20
 8014958:	46bd      	mov	sp, r7
 801495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495e:	4770      	bx	lr

08014960 <USB_ReadDevAllOutEpInterrupt>:
 8014960:	b480      	push	{r7}
 8014962:	b085      	sub	sp, #20
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	60fb      	str	r3, [r7, #12]
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014972:	699b      	ldr	r3, [r3, #24]
 8014974:	60bb      	str	r3, [r7, #8]
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801497c:	69db      	ldr	r3, [r3, #28]
 801497e:	68ba      	ldr	r2, [r7, #8]
 8014980:	4013      	ands	r3, r2
 8014982:	60bb      	str	r3, [r7, #8]
 8014984:	68bb      	ldr	r3, [r7, #8]
 8014986:	0c1b      	lsrs	r3, r3, #16
 8014988:	4618      	mov	r0, r3
 801498a:	3714      	adds	r7, #20
 801498c:	46bd      	mov	sp, r7
 801498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014992:	4770      	bx	lr

08014994 <USB_ReadDevAllInEpInterrupt>:
 8014994:	b480      	push	{r7}
 8014996:	b085      	sub	sp, #20
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	60fb      	str	r3, [r7, #12]
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149a6:	699b      	ldr	r3, [r3, #24]
 80149a8:	60bb      	str	r3, [r7, #8]
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149b0:	69db      	ldr	r3, [r3, #28]
 80149b2:	68ba      	ldr	r2, [r7, #8]
 80149b4:	4013      	ands	r3, r2
 80149b6:	60bb      	str	r3, [r7, #8]
 80149b8:	68bb      	ldr	r3, [r7, #8]
 80149ba:	b29b      	uxth	r3, r3
 80149bc:	4618      	mov	r0, r3
 80149be:	3714      	adds	r7, #20
 80149c0:	46bd      	mov	sp, r7
 80149c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c6:	4770      	bx	lr

080149c8 <USB_ReadDevOutEPInterrupt>:
 80149c8:	b480      	push	{r7}
 80149ca:	b085      	sub	sp, #20
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
 80149d0:	460b      	mov	r3, r1
 80149d2:	70fb      	strb	r3, [r7, #3]
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	60fb      	str	r3, [r7, #12]
 80149d8:	78fb      	ldrb	r3, [r7, #3]
 80149da:	015a      	lsls	r2, r3, #5
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	4413      	add	r3, r2
 80149e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149e4:	689b      	ldr	r3, [r3, #8]
 80149e6:	60bb      	str	r3, [r7, #8]
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149ee:	695b      	ldr	r3, [r3, #20]
 80149f0:	68ba      	ldr	r2, [r7, #8]
 80149f2:	4013      	ands	r3, r2
 80149f4:	60bb      	str	r3, [r7, #8]
 80149f6:	68bb      	ldr	r3, [r7, #8]
 80149f8:	4618      	mov	r0, r3
 80149fa:	3714      	adds	r7, #20
 80149fc:	46bd      	mov	sp, r7
 80149fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a02:	4770      	bx	lr

08014a04 <USB_ReadDevInEPInterrupt>:
 8014a04:	b480      	push	{r7}
 8014a06:	b087      	sub	sp, #28
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
 8014a0c:	460b      	mov	r3, r1
 8014a0e:	70fb      	strb	r3, [r7, #3]
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	617b      	str	r3, [r7, #20]
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a1a:	691b      	ldr	r3, [r3, #16]
 8014a1c:	613b      	str	r3, [r7, #16]
 8014a1e:	697b      	ldr	r3, [r7, #20]
 8014a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a26:	60fb      	str	r3, [r7, #12]
 8014a28:	78fb      	ldrb	r3, [r7, #3]
 8014a2a:	f003 030f 	and.w	r3, r3, #15
 8014a2e:	68fa      	ldr	r2, [r7, #12]
 8014a30:	fa22 f303 	lsr.w	r3, r2, r3
 8014a34:	01db      	lsls	r3, r3, #7
 8014a36:	b2db      	uxtb	r3, r3
 8014a38:	693a      	ldr	r2, [r7, #16]
 8014a3a:	4313      	orrs	r3, r2
 8014a3c:	613b      	str	r3, [r7, #16]
 8014a3e:	78fb      	ldrb	r3, [r7, #3]
 8014a40:	015a      	lsls	r2, r3, #5
 8014a42:	697b      	ldr	r3, [r7, #20]
 8014a44:	4413      	add	r3, r2
 8014a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a4a:	689b      	ldr	r3, [r3, #8]
 8014a4c:	693a      	ldr	r2, [r7, #16]
 8014a4e:	4013      	ands	r3, r2
 8014a50:	60bb      	str	r3, [r7, #8]
 8014a52:	68bb      	ldr	r3, [r7, #8]
 8014a54:	4618      	mov	r0, r3
 8014a56:	371c      	adds	r7, #28
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5e:	4770      	bx	lr

08014a60 <USB_GetMode>:
 8014a60:	b480      	push	{r7}
 8014a62:	b083      	sub	sp, #12
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	695b      	ldr	r3, [r3, #20]
 8014a6c:	f003 0301 	and.w	r3, r3, #1
 8014a70:	4618      	mov	r0, r3
 8014a72:	370c      	adds	r7, #12
 8014a74:	46bd      	mov	sp, r7
 8014a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7a:	4770      	bx	lr

08014a7c <USB_ActivateSetup>:
 8014a7c:	b480      	push	{r7}
 8014a7e:	b085      	sub	sp, #20
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	60fb      	str	r3, [r7, #12]
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	68fa      	ldr	r2, [r7, #12]
 8014a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014a96:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014a9a:	f023 0307 	bic.w	r3, r3, #7
 8014a9e:	6013      	str	r3, [r2, #0]
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014aa6:	685b      	ldr	r3, [r3, #4]
 8014aa8:	68fa      	ldr	r2, [r7, #12]
 8014aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014ab2:	6053      	str	r3, [r2, #4]
 8014ab4:	2300      	movs	r3, #0
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	3714      	adds	r7, #20
 8014aba:	46bd      	mov	sp, r7
 8014abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac0:	4770      	bx	lr
	...

08014ac4 <USB_EP0_OutStart>:
 8014ac4:	b480      	push	{r7}
 8014ac6:	b087      	sub	sp, #28
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	60f8      	str	r0, [r7, #12]
 8014acc:	460b      	mov	r3, r1
 8014ace:	607a      	str	r2, [r7, #4]
 8014ad0:	72fb      	strb	r3, [r7, #11]
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	617b      	str	r3, [r7, #20]
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	333c      	adds	r3, #60	; 0x3c
 8014ada:	3304      	adds	r3, #4
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	613b      	str	r3, [r7, #16]
 8014ae0:	693b      	ldr	r3, [r7, #16]
 8014ae2:	4a26      	ldr	r2, [pc, #152]	; (8014b7c <USB_EP0_OutStart+0xb8>)
 8014ae4:	4293      	cmp	r3, r2
 8014ae6:	d90a      	bls.n	8014afe <USB_EP0_OutStart+0x3a>
 8014ae8:	697b      	ldr	r3, [r7, #20]
 8014aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014af8:	d101      	bne.n	8014afe <USB_EP0_OutStart+0x3a>
 8014afa:	2300      	movs	r3, #0
 8014afc:	e037      	b.n	8014b6e <USB_EP0_OutStart+0xaa>
 8014afe:	697b      	ldr	r3, [r7, #20]
 8014b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b04:	461a      	mov	r2, r3
 8014b06:	2300      	movs	r3, #0
 8014b08:	6113      	str	r3, [r2, #16]
 8014b0a:	697b      	ldr	r3, [r7, #20]
 8014b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b10:	691b      	ldr	r3, [r3, #16]
 8014b12:	697a      	ldr	r2, [r7, #20]
 8014b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014b1c:	6113      	str	r3, [r2, #16]
 8014b1e:	697b      	ldr	r3, [r7, #20]
 8014b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b24:	691b      	ldr	r3, [r3, #16]
 8014b26:	697a      	ldr	r2, [r7, #20]
 8014b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b2c:	f043 0318 	orr.w	r3, r3, #24
 8014b30:	6113      	str	r3, [r2, #16]
 8014b32:	697b      	ldr	r3, [r7, #20]
 8014b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b38:	691b      	ldr	r3, [r3, #16]
 8014b3a:	697a      	ldr	r2, [r7, #20]
 8014b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014b44:	6113      	str	r3, [r2, #16]
 8014b46:	7afb      	ldrb	r3, [r7, #11]
 8014b48:	2b01      	cmp	r3, #1
 8014b4a:	d10f      	bne.n	8014b6c <USB_EP0_OutStart+0xa8>
 8014b4c:	697b      	ldr	r3, [r7, #20]
 8014b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b52:	461a      	mov	r2, r3
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	6153      	str	r3, [r2, #20]
 8014b58:	697b      	ldr	r3, [r7, #20]
 8014b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	697a      	ldr	r2, [r7, #20]
 8014b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014b6a:	6013      	str	r3, [r2, #0]
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	4618      	mov	r0, r3
 8014b70:	371c      	adds	r7, #28
 8014b72:	46bd      	mov	sp, r7
 8014b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b78:	4770      	bx	lr
 8014b7a:	bf00      	nop
 8014b7c:	4f54300a 	.word	0x4f54300a

08014b80 <USB_CoreReset>:
 8014b80:	b480      	push	{r7}
 8014b82:	b085      	sub	sp, #20
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
 8014b88:	2300      	movs	r3, #0
 8014b8a:	60fb      	str	r3, [r7, #12]
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	3301      	adds	r3, #1
 8014b90:	60fb      	str	r3, [r7, #12]
 8014b92:	4a13      	ldr	r2, [pc, #76]	; (8014be0 <USB_CoreReset+0x60>)
 8014b94:	4293      	cmp	r3, r2
 8014b96:	d901      	bls.n	8014b9c <USB_CoreReset+0x1c>
 8014b98:	2303      	movs	r3, #3
 8014b9a:	e01a      	b.n	8014bd2 <USB_CoreReset+0x52>
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	691b      	ldr	r3, [r3, #16]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	daf3      	bge.n	8014b8c <USB_CoreReset+0xc>
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	60fb      	str	r3, [r7, #12]
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	691b      	ldr	r3, [r3, #16]
 8014bac:	f043 0201 	orr.w	r2, r3, #1
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	611a      	str	r2, [r3, #16]
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	3301      	adds	r3, #1
 8014bb8:	60fb      	str	r3, [r7, #12]
 8014bba:	4a09      	ldr	r2, [pc, #36]	; (8014be0 <USB_CoreReset+0x60>)
 8014bbc:	4293      	cmp	r3, r2
 8014bbe:	d901      	bls.n	8014bc4 <USB_CoreReset+0x44>
 8014bc0:	2303      	movs	r3, #3
 8014bc2:	e006      	b.n	8014bd2 <USB_CoreReset+0x52>
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	691b      	ldr	r3, [r3, #16]
 8014bc8:	f003 0301 	and.w	r3, r3, #1
 8014bcc:	2b01      	cmp	r3, #1
 8014bce:	d0f1      	beq.n	8014bb4 <USB_CoreReset+0x34>
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	3714      	adds	r7, #20
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bdc:	4770      	bx	lr
 8014bde:	bf00      	nop
 8014be0:	00030d40 	.word	0x00030d40

08014be4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b084      	sub	sp, #16
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
 8014bec:	460b      	mov	r3, r1
 8014bee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014bf0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014bf4:	f006 f8ec 	bl	801add0 <USBD_static_malloc>
 8014bf8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d105      	bne.n	8014c0c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	2200      	movs	r2, #0
 8014c04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8014c08:	2302      	movs	r3, #2
 8014c0a:	e066      	b.n	8014cda <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	68fa      	ldr	r2, [r7, #12]
 8014c10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	7c1b      	ldrb	r3, [r3, #16]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d119      	bne.n	8014c50 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014c20:	2202      	movs	r2, #2
 8014c22:	2181      	movs	r1, #129	; 0x81
 8014c24:	6878      	ldr	r0, [r7, #4]
 8014c26:	f005 ffb0 	bl	801ab8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	2201      	movs	r2, #1
 8014c2e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014c34:	2202      	movs	r2, #2
 8014c36:	2101      	movs	r1, #1
 8014c38:	6878      	ldr	r0, [r7, #4]
 8014c3a:	f005 ffa6 	bl	801ab8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	2201      	movs	r2, #1
 8014c42:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	2210      	movs	r2, #16
 8014c4a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8014c4e:	e016      	b.n	8014c7e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014c50:	2340      	movs	r3, #64	; 0x40
 8014c52:	2202      	movs	r2, #2
 8014c54:	2181      	movs	r1, #129	; 0x81
 8014c56:	6878      	ldr	r0, [r7, #4]
 8014c58:	f005 ff97 	bl	801ab8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	2201      	movs	r2, #1
 8014c60:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014c62:	2340      	movs	r3, #64	; 0x40
 8014c64:	2202      	movs	r2, #2
 8014c66:	2101      	movs	r1, #1
 8014c68:	6878      	ldr	r0, [r7, #4]
 8014c6a:	f005 ff8e 	bl	801ab8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	2201      	movs	r2, #1
 8014c72:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	2210      	movs	r2, #16
 8014c7a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014c7e:	2308      	movs	r3, #8
 8014c80:	2203      	movs	r2, #3
 8014c82:	2182      	movs	r1, #130	; 0x82
 8014c84:	6878      	ldr	r0, [r7, #4]
 8014c86:	f005 ff80 	bl	801ab8a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	2201      	movs	r2, #1
 8014c8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	2200      	movs	r2, #0
 8014ca0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	7c1b      	ldrb	r3, [r3, #16]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d109      	bne.n	8014cc8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014cba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014cbe:	2101      	movs	r1, #1
 8014cc0:	6878      	ldr	r0, [r7, #4]
 8014cc2:	f006 f851 	bl	801ad68 <USBD_LL_PrepareReceive>
 8014cc6:	e007      	b.n	8014cd8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014cce:	2340      	movs	r3, #64	; 0x40
 8014cd0:	2101      	movs	r1, #1
 8014cd2:	6878      	ldr	r0, [r7, #4]
 8014cd4:	f006 f848 	bl	801ad68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014cd8:	2300      	movs	r3, #0
}
 8014cda:	4618      	mov	r0, r3
 8014cdc:	3710      	adds	r7, #16
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bd80      	pop	{r7, pc}

08014ce2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014ce2:	b580      	push	{r7, lr}
 8014ce4:	b082      	sub	sp, #8
 8014ce6:	af00      	add	r7, sp, #0
 8014ce8:	6078      	str	r0, [r7, #4]
 8014cea:	460b      	mov	r3, r1
 8014cec:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8014cee:	2181      	movs	r1, #129	; 0x81
 8014cf0:	6878      	ldr	r0, [r7, #4]
 8014cf2:	f005 ff70 	bl	801abd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8014cfc:	2101      	movs	r1, #1
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f005 ff69 	bl	801abd6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	2200      	movs	r2, #0
 8014d08:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8014d0c:	2182      	movs	r1, #130	; 0x82
 8014d0e:	6878      	ldr	r0, [r7, #4]
 8014d10:	f005 ff61 	bl	801abd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	2200      	movs	r2, #0
 8014d18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	2200      	movs	r2, #0
 8014d20:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d00e      	beq.n	8014d4c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014d34:	685b      	ldr	r3, [r3, #4]
 8014d36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f006 f854 	bl	801adec <USBD_static_free>
    pdev->pClassData = NULL;
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	2200      	movs	r2, #0
 8014d48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014d4c:	2300      	movs	r3, #0
}
 8014d4e:	4618      	mov	r0, r3
 8014d50:	3708      	adds	r7, #8
 8014d52:	46bd      	mov	sp, r7
 8014d54:	bd80      	pop	{r7, pc}
	...

08014d58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b086      	sub	sp, #24
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
 8014d60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014d68:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014d6e:	2300      	movs	r3, #0
 8014d70:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014d72:	2300      	movs	r3, #0
 8014d74:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014d76:	693b      	ldr	r3, [r7, #16]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d101      	bne.n	8014d80 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8014d7c:	2303      	movs	r3, #3
 8014d7e:	e0af      	b.n	8014ee0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014d80:	683b      	ldr	r3, [r7, #0]
 8014d82:	781b      	ldrb	r3, [r3, #0]
 8014d84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d03f      	beq.n	8014e0c <USBD_CDC_Setup+0xb4>
 8014d8c:	2b20      	cmp	r3, #32
 8014d8e:	f040 809f 	bne.w	8014ed0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014d92:	683b      	ldr	r3, [r7, #0]
 8014d94:	88db      	ldrh	r3, [r3, #6]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d02e      	beq.n	8014df8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014d9a:	683b      	ldr	r3, [r7, #0]
 8014d9c:	781b      	ldrb	r3, [r3, #0]
 8014d9e:	b25b      	sxtb	r3, r3
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	da16      	bge.n	8014dd2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014daa:	689b      	ldr	r3, [r3, #8]
 8014dac:	683a      	ldr	r2, [r7, #0]
 8014dae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8014db0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014db2:	683a      	ldr	r2, [r7, #0]
 8014db4:	88d2      	ldrh	r2, [r2, #6]
 8014db6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014db8:	683b      	ldr	r3, [r7, #0]
 8014dba:	88db      	ldrh	r3, [r3, #6]
 8014dbc:	2b07      	cmp	r3, #7
 8014dbe:	bf28      	it	cs
 8014dc0:	2307      	movcs	r3, #7
 8014dc2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014dc4:	693b      	ldr	r3, [r7, #16]
 8014dc6:	89fa      	ldrh	r2, [r7, #14]
 8014dc8:	4619      	mov	r1, r3
 8014dca:	6878      	ldr	r0, [r7, #4]
 8014dcc:	f001 fb19 	bl	8016402 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8014dd0:	e085      	b.n	8014ede <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8014dd2:	683b      	ldr	r3, [r7, #0]
 8014dd4:	785a      	ldrb	r2, [r3, #1]
 8014dd6:	693b      	ldr	r3, [r7, #16]
 8014dd8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8014ddc:	683b      	ldr	r3, [r7, #0]
 8014dde:	88db      	ldrh	r3, [r3, #6]
 8014de0:	b2da      	uxtb	r2, r3
 8014de2:	693b      	ldr	r3, [r7, #16]
 8014de4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8014de8:	6939      	ldr	r1, [r7, #16]
 8014dea:	683b      	ldr	r3, [r7, #0]
 8014dec:	88db      	ldrh	r3, [r3, #6]
 8014dee:	461a      	mov	r2, r3
 8014df0:	6878      	ldr	r0, [r7, #4]
 8014df2:	f001 fb32 	bl	801645a <USBD_CtlPrepareRx>
      break;
 8014df6:	e072      	b.n	8014ede <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014dfe:	689b      	ldr	r3, [r3, #8]
 8014e00:	683a      	ldr	r2, [r7, #0]
 8014e02:	7850      	ldrb	r0, [r2, #1]
 8014e04:	2200      	movs	r2, #0
 8014e06:	6839      	ldr	r1, [r7, #0]
 8014e08:	4798      	blx	r3
      break;
 8014e0a:	e068      	b.n	8014ede <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014e0c:	683b      	ldr	r3, [r7, #0]
 8014e0e:	785b      	ldrb	r3, [r3, #1]
 8014e10:	2b0b      	cmp	r3, #11
 8014e12:	d852      	bhi.n	8014eba <USBD_CDC_Setup+0x162>
 8014e14:	a201      	add	r2, pc, #4	; (adr r2, 8014e1c <USBD_CDC_Setup+0xc4>)
 8014e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e1a:	bf00      	nop
 8014e1c:	08014e4d 	.word	0x08014e4d
 8014e20:	08014ec9 	.word	0x08014ec9
 8014e24:	08014ebb 	.word	0x08014ebb
 8014e28:	08014ebb 	.word	0x08014ebb
 8014e2c:	08014ebb 	.word	0x08014ebb
 8014e30:	08014ebb 	.word	0x08014ebb
 8014e34:	08014ebb 	.word	0x08014ebb
 8014e38:	08014ebb 	.word	0x08014ebb
 8014e3c:	08014ebb 	.word	0x08014ebb
 8014e40:	08014ebb 	.word	0x08014ebb
 8014e44:	08014e77 	.word	0x08014e77
 8014e48:	08014ea1 	.word	0x08014ea1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e52:	b2db      	uxtb	r3, r3
 8014e54:	2b03      	cmp	r3, #3
 8014e56:	d107      	bne.n	8014e68 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014e58:	f107 030a 	add.w	r3, r7, #10
 8014e5c:	2202      	movs	r2, #2
 8014e5e:	4619      	mov	r1, r3
 8014e60:	6878      	ldr	r0, [r7, #4]
 8014e62:	f001 face 	bl	8016402 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014e66:	e032      	b.n	8014ece <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014e68:	6839      	ldr	r1, [r7, #0]
 8014e6a:	6878      	ldr	r0, [r7, #4]
 8014e6c:	f001 fa58 	bl	8016320 <USBD_CtlError>
            ret = USBD_FAIL;
 8014e70:	2303      	movs	r3, #3
 8014e72:	75fb      	strb	r3, [r7, #23]
          break;
 8014e74:	e02b      	b.n	8014ece <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e7c:	b2db      	uxtb	r3, r3
 8014e7e:	2b03      	cmp	r3, #3
 8014e80:	d107      	bne.n	8014e92 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014e82:	f107 030d 	add.w	r3, r7, #13
 8014e86:	2201      	movs	r2, #1
 8014e88:	4619      	mov	r1, r3
 8014e8a:	6878      	ldr	r0, [r7, #4]
 8014e8c:	f001 fab9 	bl	8016402 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014e90:	e01d      	b.n	8014ece <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014e92:	6839      	ldr	r1, [r7, #0]
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f001 fa43 	bl	8016320 <USBD_CtlError>
            ret = USBD_FAIL;
 8014e9a:	2303      	movs	r3, #3
 8014e9c:	75fb      	strb	r3, [r7, #23]
          break;
 8014e9e:	e016      	b.n	8014ece <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ea6:	b2db      	uxtb	r3, r3
 8014ea8:	2b03      	cmp	r3, #3
 8014eaa:	d00f      	beq.n	8014ecc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8014eac:	6839      	ldr	r1, [r7, #0]
 8014eae:	6878      	ldr	r0, [r7, #4]
 8014eb0:	f001 fa36 	bl	8016320 <USBD_CtlError>
            ret = USBD_FAIL;
 8014eb4:	2303      	movs	r3, #3
 8014eb6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014eb8:	e008      	b.n	8014ecc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014eba:	6839      	ldr	r1, [r7, #0]
 8014ebc:	6878      	ldr	r0, [r7, #4]
 8014ebe:	f001 fa2f 	bl	8016320 <USBD_CtlError>
          ret = USBD_FAIL;
 8014ec2:	2303      	movs	r3, #3
 8014ec4:	75fb      	strb	r3, [r7, #23]
          break;
 8014ec6:	e002      	b.n	8014ece <USBD_CDC_Setup+0x176>
          break;
 8014ec8:	bf00      	nop
 8014eca:	e008      	b.n	8014ede <USBD_CDC_Setup+0x186>
          break;
 8014ecc:	bf00      	nop
      }
      break;
 8014ece:	e006      	b.n	8014ede <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8014ed0:	6839      	ldr	r1, [r7, #0]
 8014ed2:	6878      	ldr	r0, [r7, #4]
 8014ed4:	f001 fa24 	bl	8016320 <USBD_CtlError>
      ret = USBD_FAIL;
 8014ed8:	2303      	movs	r3, #3
 8014eda:	75fb      	strb	r3, [r7, #23]
      break;
 8014edc:	bf00      	nop
  }

  return (uint8_t)ret;
 8014ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	3718      	adds	r7, #24
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	bd80      	pop	{r7, pc}

08014ee8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b084      	sub	sp, #16
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
 8014ef0:	460b      	mov	r3, r1
 8014ef2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014efa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d101      	bne.n	8014f0a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014f06:	2303      	movs	r3, #3
 8014f08:	e04f      	b.n	8014faa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014f10:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014f12:	78fa      	ldrb	r2, [r7, #3]
 8014f14:	6879      	ldr	r1, [r7, #4]
 8014f16:	4613      	mov	r3, r2
 8014f18:	009b      	lsls	r3, r3, #2
 8014f1a:	4413      	add	r3, r2
 8014f1c:	009b      	lsls	r3, r3, #2
 8014f1e:	440b      	add	r3, r1
 8014f20:	3318      	adds	r3, #24
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d029      	beq.n	8014f7c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8014f28:	78fa      	ldrb	r2, [r7, #3]
 8014f2a:	6879      	ldr	r1, [r7, #4]
 8014f2c:	4613      	mov	r3, r2
 8014f2e:	009b      	lsls	r3, r3, #2
 8014f30:	4413      	add	r3, r2
 8014f32:	009b      	lsls	r3, r3, #2
 8014f34:	440b      	add	r3, r1
 8014f36:	3318      	adds	r3, #24
 8014f38:	681a      	ldr	r2, [r3, #0]
 8014f3a:	78f9      	ldrb	r1, [r7, #3]
 8014f3c:	68f8      	ldr	r0, [r7, #12]
 8014f3e:	460b      	mov	r3, r1
 8014f40:	00db      	lsls	r3, r3, #3
 8014f42:	1a5b      	subs	r3, r3, r1
 8014f44:	009b      	lsls	r3, r3, #2
 8014f46:	4403      	add	r3, r0
 8014f48:	3344      	adds	r3, #68	; 0x44
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8014f50:	fb03 f301 	mul.w	r3, r3, r1
 8014f54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d110      	bne.n	8014f7c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8014f5a:	78fa      	ldrb	r2, [r7, #3]
 8014f5c:	6879      	ldr	r1, [r7, #4]
 8014f5e:	4613      	mov	r3, r2
 8014f60:	009b      	lsls	r3, r3, #2
 8014f62:	4413      	add	r3, r2
 8014f64:	009b      	lsls	r3, r3, #2
 8014f66:	440b      	add	r3, r1
 8014f68:	3318      	adds	r3, #24
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014f6e:	78f9      	ldrb	r1, [r7, #3]
 8014f70:	2300      	movs	r3, #0
 8014f72:	2200      	movs	r2, #0
 8014f74:	6878      	ldr	r0, [r7, #4]
 8014f76:	f005 fed6 	bl	801ad26 <USBD_LL_Transmit>
 8014f7a:	e015      	b.n	8014fa8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8014f7c:	68bb      	ldr	r3, [r7, #8]
 8014f7e:	2200      	movs	r2, #0
 8014f80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014f8a:	691b      	ldr	r3, [r3, #16]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d00b      	beq.n	8014fa8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014f96:	691b      	ldr	r3, [r3, #16]
 8014f98:	68ba      	ldr	r2, [r7, #8]
 8014f9a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014f9e:	68ba      	ldr	r2, [r7, #8]
 8014fa0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014fa4:	78fa      	ldrb	r2, [r7, #3]
 8014fa6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014fa8:	2300      	movs	r3, #0
}
 8014faa:	4618      	mov	r0, r3
 8014fac:	3710      	adds	r7, #16
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	bd80      	pop	{r7, pc}

08014fb2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014fb2:	b580      	push	{r7, lr}
 8014fb4:	b084      	sub	sp, #16
 8014fb6:	af00      	add	r7, sp, #0
 8014fb8:	6078      	str	r0, [r7, #4]
 8014fba:	460b      	mov	r3, r1
 8014fbc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014fc4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d101      	bne.n	8014fd4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014fd0:	2303      	movs	r3, #3
 8014fd2:	e015      	b.n	8015000 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014fd4:	78fb      	ldrb	r3, [r7, #3]
 8014fd6:	4619      	mov	r1, r3
 8014fd8:	6878      	ldr	r0, [r7, #4]
 8014fda:	f005 fee6 	bl	801adaa <USBD_LL_GetRxDataSize>
 8014fde:	4602      	mov	r2, r0
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014fec:	68db      	ldr	r3, [r3, #12]
 8014fee:	68fa      	ldr	r2, [r7, #12]
 8014ff0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014ff4:	68fa      	ldr	r2, [r7, #12]
 8014ff6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014ffa:	4611      	mov	r1, r2
 8014ffc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014ffe:	2300      	movs	r3, #0
}
 8015000:	4618      	mov	r0, r3
 8015002:	3710      	adds	r7, #16
 8015004:	46bd      	mov	sp, r7
 8015006:	bd80      	pop	{r7, pc}

08015008 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015008:	b580      	push	{r7, lr}
 801500a:	b084      	sub	sp, #16
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015016:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	2b00      	cmp	r3, #0
 801501c:	d101      	bne.n	8015022 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 801501e:	2303      	movs	r3, #3
 8015020:	e01b      	b.n	801505a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015028:	2b00      	cmp	r3, #0
 801502a:	d015      	beq.n	8015058 <USBD_CDC_EP0_RxReady+0x50>
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8015032:	2bff      	cmp	r3, #255	; 0xff
 8015034:	d010      	beq.n	8015058 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801503c:	689b      	ldr	r3, [r3, #8]
 801503e:	68fa      	ldr	r2, [r7, #12]
 8015040:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8015044:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8015046:	68fa      	ldr	r2, [r7, #12]
 8015048:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801504c:	b292      	uxth	r2, r2
 801504e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	22ff      	movs	r2, #255	; 0xff
 8015054:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8015058:	2300      	movs	r3, #0
}
 801505a:	4618      	mov	r0, r3
 801505c:	3710      	adds	r7, #16
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}
	...

08015064 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015064:	b480      	push	{r7}
 8015066:	b083      	sub	sp, #12
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	2243      	movs	r2, #67	; 0x43
 8015070:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8015072:	4b03      	ldr	r3, [pc, #12]	; (8015080 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8015074:	4618      	mov	r0, r3
 8015076:	370c      	adds	r7, #12
 8015078:	46bd      	mov	sp, r7
 801507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507e:	4770      	bx	lr
 8015080:	200000d8 	.word	0x200000d8

08015084 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015084:	b480      	push	{r7}
 8015086:	b083      	sub	sp, #12
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2243      	movs	r2, #67	; 0x43
 8015090:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8015092:	4b03      	ldr	r3, [pc, #12]	; (80150a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8015094:	4618      	mov	r0, r3
 8015096:	370c      	adds	r7, #12
 8015098:	46bd      	mov	sp, r7
 801509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509e:	4770      	bx	lr
 80150a0:	20000094 	.word	0x20000094

080150a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80150a4:	b480      	push	{r7}
 80150a6:	b083      	sub	sp, #12
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	2243      	movs	r2, #67	; 0x43
 80150b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80150b2:	4b03      	ldr	r3, [pc, #12]	; (80150c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80150b4:	4618      	mov	r0, r3
 80150b6:	370c      	adds	r7, #12
 80150b8:	46bd      	mov	sp, r7
 80150ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150be:	4770      	bx	lr
 80150c0:	2000011c 	.word	0x2000011c

080150c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80150c4:	b480      	push	{r7}
 80150c6:	b083      	sub	sp, #12
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	220a      	movs	r2, #10
 80150d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80150d2:	4b03      	ldr	r3, [pc, #12]	; (80150e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80150d4:	4618      	mov	r0, r3
 80150d6:	370c      	adds	r7, #12
 80150d8:	46bd      	mov	sp, r7
 80150da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150de:	4770      	bx	lr
 80150e0:	20000050 	.word	0x20000050

080150e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80150e4:	b480      	push	{r7}
 80150e6:	b083      	sub	sp, #12
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
 80150ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80150ee:	683b      	ldr	r3, [r7, #0]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d101      	bne.n	80150f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80150f4:	2303      	movs	r3, #3
 80150f6:	e004      	b.n	8015102 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	683a      	ldr	r2, [r7, #0]
 80150fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8015100:	2300      	movs	r3, #0
}
 8015102:	4618      	mov	r0, r3
 8015104:	370c      	adds	r7, #12
 8015106:	46bd      	mov	sp, r7
 8015108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801510c:	4770      	bx	lr

0801510e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801510e:	b480      	push	{r7}
 8015110:	b087      	sub	sp, #28
 8015112:	af00      	add	r7, sp, #0
 8015114:	60f8      	str	r0, [r7, #12]
 8015116:	60b9      	str	r1, [r7, #8]
 8015118:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015120:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8015122:	697b      	ldr	r3, [r7, #20]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d101      	bne.n	801512c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8015128:	2303      	movs	r3, #3
 801512a:	e008      	b.n	801513e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 801512c:	697b      	ldr	r3, [r7, #20]
 801512e:	68ba      	ldr	r2, [r7, #8]
 8015130:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015134:	697b      	ldr	r3, [r7, #20]
 8015136:	687a      	ldr	r2, [r7, #4]
 8015138:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801513c:	2300      	movs	r3, #0
}
 801513e:	4618      	mov	r0, r3
 8015140:	371c      	adds	r7, #28
 8015142:	46bd      	mov	sp, r7
 8015144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015148:	4770      	bx	lr

0801514a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801514a:	b480      	push	{r7}
 801514c:	b085      	sub	sp, #20
 801514e:	af00      	add	r7, sp, #0
 8015150:	6078      	str	r0, [r7, #4]
 8015152:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801515a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d101      	bne.n	8015166 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8015162:	2303      	movs	r3, #3
 8015164:	e004      	b.n	8015170 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	683a      	ldr	r2, [r7, #0]
 801516a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801516e:	2300      	movs	r3, #0
}
 8015170:	4618      	mov	r0, r3
 8015172:	3714      	adds	r7, #20
 8015174:	46bd      	mov	sp, r7
 8015176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517a:	4770      	bx	lr

0801517c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b084      	sub	sp, #16
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801518a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 801518c:	2301      	movs	r3, #1
 801518e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015196:	2b00      	cmp	r3, #0
 8015198:	d101      	bne.n	801519e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801519a:	2303      	movs	r3, #3
 801519c:	e01a      	b.n	80151d4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 801519e:	68bb      	ldr	r3, [r7, #8]
 80151a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d114      	bne.n	80151d2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80151a8:	68bb      	ldr	r3, [r7, #8]
 80151aa:	2201      	movs	r2, #1
 80151ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80151b0:	68bb      	ldr	r3, [r7, #8]
 80151b2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80151ba:	68bb      	ldr	r3, [r7, #8]
 80151bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80151c0:	68bb      	ldr	r3, [r7, #8]
 80151c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80151c6:	2181      	movs	r1, #129	; 0x81
 80151c8:	6878      	ldr	r0, [r7, #4]
 80151ca:	f005 fdac 	bl	801ad26 <USBD_LL_Transmit>

    ret = USBD_OK;
 80151ce:	2300      	movs	r3, #0
 80151d0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80151d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80151d4:	4618      	mov	r0, r3
 80151d6:	3710      	adds	r7, #16
 80151d8:	46bd      	mov	sp, r7
 80151da:	bd80      	pop	{r7, pc}

080151dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b084      	sub	sp, #16
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80151ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d101      	bne.n	80151fa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80151f6:	2303      	movs	r3, #3
 80151f8:	e016      	b.n	8015228 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	7c1b      	ldrb	r3, [r3, #16]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d109      	bne.n	8015216 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015208:	f44f 7300 	mov.w	r3, #512	; 0x200
 801520c:	2101      	movs	r1, #1
 801520e:	6878      	ldr	r0, [r7, #4]
 8015210:	f005 fdaa 	bl	801ad68 <USBD_LL_PrepareReceive>
 8015214:	e007      	b.n	8015226 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801521c:	2340      	movs	r3, #64	; 0x40
 801521e:	2101      	movs	r1, #1
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	f005 fda1 	bl	801ad68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015226:	2300      	movs	r3, #0
}
 8015228:	4618      	mov	r0, r3
 801522a:	3710      	adds	r7, #16
 801522c:	46bd      	mov	sp, r7
 801522e:	bd80      	pop	{r7, pc}

08015230 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015230:	b580      	push	{r7, lr}
 8015232:	b086      	sub	sp, #24
 8015234:	af00      	add	r7, sp, #0
 8015236:	60f8      	str	r0, [r7, #12]
 8015238:	60b9      	str	r1, [r7, #8]
 801523a:	4613      	mov	r3, r2
 801523c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d101      	bne.n	8015248 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8015244:	2303      	movs	r3, #3
 8015246:	e01f      	b.n	8015288 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	2200      	movs	r2, #0
 801524c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	2200      	movs	r2, #0
 8015254:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	2200      	movs	r2, #0
 801525c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015260:	68bb      	ldr	r3, [r7, #8]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d003      	beq.n	801526e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	68ba      	ldr	r2, [r7, #8]
 801526a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	2201      	movs	r2, #1
 8015272:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	79fa      	ldrb	r2, [r7, #7]
 801527a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801527c:	68f8      	ldr	r0, [r7, #12]
 801527e:	f005 fc1d 	bl	801aabc <USBD_LL_Init>
 8015282:	4603      	mov	r3, r0
 8015284:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015286:	7dfb      	ldrb	r3, [r7, #23]
}
 8015288:	4618      	mov	r0, r3
 801528a:	3718      	adds	r7, #24
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}

08015290 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b084      	sub	sp, #16
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
 8015298:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801529a:	2300      	movs	r3, #0
 801529c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d101      	bne.n	80152a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80152a4:	2303      	movs	r3, #3
 80152a6:	e016      	b.n	80152d6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	683a      	ldr	r2, [r7, #0]
 80152ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d00b      	beq.n	80152d4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152c4:	f107 020e 	add.w	r2, r7, #14
 80152c8:	4610      	mov	r0, r2
 80152ca:	4798      	blx	r3
 80152cc:	4602      	mov	r2, r0
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80152d4:	2300      	movs	r3, #0
}
 80152d6:	4618      	mov	r0, r3
 80152d8:	3710      	adds	r7, #16
 80152da:	46bd      	mov	sp, r7
 80152dc:	bd80      	pop	{r7, pc}

080152de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80152de:	b580      	push	{r7, lr}
 80152e0:	b082      	sub	sp, #8
 80152e2:	af00      	add	r7, sp, #0
 80152e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80152e6:	6878      	ldr	r0, [r7, #4]
 80152e8:	f005 fc34 	bl	801ab54 <USBD_LL_Start>
 80152ec:	4603      	mov	r3, r0
}
 80152ee:	4618      	mov	r0, r3
 80152f0:	3708      	adds	r7, #8
 80152f2:	46bd      	mov	sp, r7
 80152f4:	bd80      	pop	{r7, pc}

080152f6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80152f6:	b480      	push	{r7}
 80152f8:	b083      	sub	sp, #12
 80152fa:	af00      	add	r7, sp, #0
 80152fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80152fe:	2300      	movs	r3, #0
}
 8015300:	4618      	mov	r0, r3
 8015302:	370c      	adds	r7, #12
 8015304:	46bd      	mov	sp, r7
 8015306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530a:	4770      	bx	lr

0801530c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801530c:	b580      	push	{r7, lr}
 801530e:	b084      	sub	sp, #16
 8015310:	af00      	add	r7, sp, #0
 8015312:	6078      	str	r0, [r7, #4]
 8015314:	460b      	mov	r3, r1
 8015316:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8015318:	2303      	movs	r3, #3
 801531a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015322:	2b00      	cmp	r3, #0
 8015324:	d009      	beq.n	801533a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	78fa      	ldrb	r2, [r7, #3]
 8015330:	4611      	mov	r1, r2
 8015332:	6878      	ldr	r0, [r7, #4]
 8015334:	4798      	blx	r3
 8015336:	4603      	mov	r3, r0
 8015338:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801533a:	7bfb      	ldrb	r3, [r7, #15]
}
 801533c:	4618      	mov	r0, r3
 801533e:	3710      	adds	r7, #16
 8015340:	46bd      	mov	sp, r7
 8015342:	bd80      	pop	{r7, pc}

08015344 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b082      	sub	sp, #8
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
 801534c:	460b      	mov	r3, r1
 801534e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015356:	2b00      	cmp	r3, #0
 8015358:	d007      	beq.n	801536a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015360:	685b      	ldr	r3, [r3, #4]
 8015362:	78fa      	ldrb	r2, [r7, #3]
 8015364:	4611      	mov	r1, r2
 8015366:	6878      	ldr	r0, [r7, #4]
 8015368:	4798      	blx	r3
  }

  return USBD_OK;
 801536a:	2300      	movs	r3, #0
}
 801536c:	4618      	mov	r0, r3
 801536e:	3708      	adds	r7, #8
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}

08015374 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b084      	sub	sp, #16
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
 801537c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015384:	6839      	ldr	r1, [r7, #0]
 8015386:	4618      	mov	r0, r3
 8015388:	f000 ff90 	bl	80162ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	2201      	movs	r2, #1
 8015390:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801539a:	461a      	mov	r2, r3
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80153a8:	f003 031f 	and.w	r3, r3, #31
 80153ac:	2b02      	cmp	r3, #2
 80153ae:	d01a      	beq.n	80153e6 <USBD_LL_SetupStage+0x72>
 80153b0:	2b02      	cmp	r3, #2
 80153b2:	d822      	bhi.n	80153fa <USBD_LL_SetupStage+0x86>
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d002      	beq.n	80153be <USBD_LL_SetupStage+0x4a>
 80153b8:	2b01      	cmp	r3, #1
 80153ba:	d00a      	beq.n	80153d2 <USBD_LL_SetupStage+0x5e>
 80153bc:	e01d      	b.n	80153fa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153c4:	4619      	mov	r1, r3
 80153c6:	6878      	ldr	r0, [r7, #4]
 80153c8:	f000 fa62 	bl	8015890 <USBD_StdDevReq>
 80153cc:	4603      	mov	r3, r0
 80153ce:	73fb      	strb	r3, [r7, #15]
      break;
 80153d0:	e020      	b.n	8015414 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153d8:	4619      	mov	r1, r3
 80153da:	6878      	ldr	r0, [r7, #4]
 80153dc:	f000 fac6 	bl	801596c <USBD_StdItfReq>
 80153e0:	4603      	mov	r3, r0
 80153e2:	73fb      	strb	r3, [r7, #15]
      break;
 80153e4:	e016      	b.n	8015414 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153ec:	4619      	mov	r1, r3
 80153ee:	6878      	ldr	r0, [r7, #4]
 80153f0:	f000 fb05 	bl	80159fe <USBD_StdEPReq>
 80153f4:	4603      	mov	r3, r0
 80153f6:	73fb      	strb	r3, [r7, #15]
      break;
 80153f8:	e00c      	b.n	8015414 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015400:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015404:	b2db      	uxtb	r3, r3
 8015406:	4619      	mov	r1, r3
 8015408:	6878      	ldr	r0, [r7, #4]
 801540a:	f005 fc03 	bl	801ac14 <USBD_LL_StallEP>
 801540e:	4603      	mov	r3, r0
 8015410:	73fb      	strb	r3, [r7, #15]
      break;
 8015412:	bf00      	nop
  }

  return ret;
 8015414:	7bfb      	ldrb	r3, [r7, #15]
}
 8015416:	4618      	mov	r0, r3
 8015418:	3710      	adds	r7, #16
 801541a:	46bd      	mov	sp, r7
 801541c:	bd80      	pop	{r7, pc}

0801541e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801541e:	b580      	push	{r7, lr}
 8015420:	b086      	sub	sp, #24
 8015422:	af00      	add	r7, sp, #0
 8015424:	60f8      	str	r0, [r7, #12]
 8015426:	460b      	mov	r3, r1
 8015428:	607a      	str	r2, [r7, #4]
 801542a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801542c:	7afb      	ldrb	r3, [r7, #11]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d138      	bne.n	80154a4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015438:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015440:	2b03      	cmp	r3, #3
 8015442:	d14a      	bne.n	80154da <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8015444:	693b      	ldr	r3, [r7, #16]
 8015446:	689a      	ldr	r2, [r3, #8]
 8015448:	693b      	ldr	r3, [r7, #16]
 801544a:	68db      	ldr	r3, [r3, #12]
 801544c:	429a      	cmp	r2, r3
 801544e:	d913      	bls.n	8015478 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015450:	693b      	ldr	r3, [r7, #16]
 8015452:	689a      	ldr	r2, [r3, #8]
 8015454:	693b      	ldr	r3, [r7, #16]
 8015456:	68db      	ldr	r3, [r3, #12]
 8015458:	1ad2      	subs	r2, r2, r3
 801545a:	693b      	ldr	r3, [r7, #16]
 801545c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801545e:	693b      	ldr	r3, [r7, #16]
 8015460:	68da      	ldr	r2, [r3, #12]
 8015462:	693b      	ldr	r3, [r7, #16]
 8015464:	689b      	ldr	r3, [r3, #8]
 8015466:	4293      	cmp	r3, r2
 8015468:	bf28      	it	cs
 801546a:	4613      	movcs	r3, r2
 801546c:	461a      	mov	r2, r3
 801546e:	6879      	ldr	r1, [r7, #4]
 8015470:	68f8      	ldr	r0, [r7, #12]
 8015472:	f001 f80f 	bl	8016494 <USBD_CtlContinueRx>
 8015476:	e030      	b.n	80154da <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801547e:	b2db      	uxtb	r3, r3
 8015480:	2b03      	cmp	r3, #3
 8015482:	d10b      	bne.n	801549c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801548a:	691b      	ldr	r3, [r3, #16]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d005      	beq.n	801549c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015496:	691b      	ldr	r3, [r3, #16]
 8015498:	68f8      	ldr	r0, [r7, #12]
 801549a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801549c:	68f8      	ldr	r0, [r7, #12]
 801549e:	f001 f80a 	bl	80164b6 <USBD_CtlSendStatus>
 80154a2:	e01a      	b.n	80154da <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154aa:	b2db      	uxtb	r3, r3
 80154ac:	2b03      	cmp	r3, #3
 80154ae:	d114      	bne.n	80154da <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154b6:	699b      	ldr	r3, [r3, #24]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d00e      	beq.n	80154da <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154c2:	699b      	ldr	r3, [r3, #24]
 80154c4:	7afa      	ldrb	r2, [r7, #11]
 80154c6:	4611      	mov	r1, r2
 80154c8:	68f8      	ldr	r0, [r7, #12]
 80154ca:	4798      	blx	r3
 80154cc:	4603      	mov	r3, r0
 80154ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80154d0:	7dfb      	ldrb	r3, [r7, #23]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d001      	beq.n	80154da <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80154d6:	7dfb      	ldrb	r3, [r7, #23]
 80154d8:	e000      	b.n	80154dc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80154da:	2300      	movs	r3, #0
}
 80154dc:	4618      	mov	r0, r3
 80154de:	3718      	adds	r7, #24
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}

080154e4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b086      	sub	sp, #24
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	60f8      	str	r0, [r7, #12]
 80154ec:	460b      	mov	r3, r1
 80154ee:	607a      	str	r2, [r7, #4]
 80154f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80154f2:	7afb      	ldrb	r3, [r7, #11]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d16b      	bne.n	80155d0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	3314      	adds	r3, #20
 80154fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015504:	2b02      	cmp	r3, #2
 8015506:	d156      	bne.n	80155b6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8015508:	693b      	ldr	r3, [r7, #16]
 801550a:	689a      	ldr	r2, [r3, #8]
 801550c:	693b      	ldr	r3, [r7, #16]
 801550e:	68db      	ldr	r3, [r3, #12]
 8015510:	429a      	cmp	r2, r3
 8015512:	d914      	bls.n	801553e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015514:	693b      	ldr	r3, [r7, #16]
 8015516:	689a      	ldr	r2, [r3, #8]
 8015518:	693b      	ldr	r3, [r7, #16]
 801551a:	68db      	ldr	r3, [r3, #12]
 801551c:	1ad2      	subs	r2, r2, r3
 801551e:	693b      	ldr	r3, [r7, #16]
 8015520:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015522:	693b      	ldr	r3, [r7, #16]
 8015524:	689b      	ldr	r3, [r3, #8]
 8015526:	461a      	mov	r2, r3
 8015528:	6879      	ldr	r1, [r7, #4]
 801552a:	68f8      	ldr	r0, [r7, #12]
 801552c:	f000 ff84 	bl	8016438 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015530:	2300      	movs	r3, #0
 8015532:	2200      	movs	r2, #0
 8015534:	2100      	movs	r1, #0
 8015536:	68f8      	ldr	r0, [r7, #12]
 8015538:	f005 fc16 	bl	801ad68 <USBD_LL_PrepareReceive>
 801553c:	e03b      	b.n	80155b6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801553e:	693b      	ldr	r3, [r7, #16]
 8015540:	68da      	ldr	r2, [r3, #12]
 8015542:	693b      	ldr	r3, [r7, #16]
 8015544:	689b      	ldr	r3, [r3, #8]
 8015546:	429a      	cmp	r2, r3
 8015548:	d11c      	bne.n	8015584 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801554a:	693b      	ldr	r3, [r7, #16]
 801554c:	685a      	ldr	r2, [r3, #4]
 801554e:	693b      	ldr	r3, [r7, #16]
 8015550:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015552:	429a      	cmp	r2, r3
 8015554:	d316      	bcc.n	8015584 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015556:	693b      	ldr	r3, [r7, #16]
 8015558:	685a      	ldr	r2, [r3, #4]
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015560:	429a      	cmp	r2, r3
 8015562:	d20f      	bcs.n	8015584 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015564:	2200      	movs	r2, #0
 8015566:	2100      	movs	r1, #0
 8015568:	68f8      	ldr	r0, [r7, #12]
 801556a:	f000 ff65 	bl	8016438 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	2200      	movs	r2, #0
 8015572:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015576:	2300      	movs	r3, #0
 8015578:	2200      	movs	r2, #0
 801557a:	2100      	movs	r1, #0
 801557c:	68f8      	ldr	r0, [r7, #12]
 801557e:	f005 fbf3 	bl	801ad68 <USBD_LL_PrepareReceive>
 8015582:	e018      	b.n	80155b6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801558a:	b2db      	uxtb	r3, r3
 801558c:	2b03      	cmp	r3, #3
 801558e:	d10b      	bne.n	80155a8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015596:	68db      	ldr	r3, [r3, #12]
 8015598:	2b00      	cmp	r3, #0
 801559a:	d005      	beq.n	80155a8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155a2:	68db      	ldr	r3, [r3, #12]
 80155a4:	68f8      	ldr	r0, [r7, #12]
 80155a6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80155a8:	2180      	movs	r1, #128	; 0x80
 80155aa:	68f8      	ldr	r0, [r7, #12]
 80155ac:	f005 fb32 	bl	801ac14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80155b0:	68f8      	ldr	r0, [r7, #12]
 80155b2:	f000 ff93 	bl	80164dc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80155bc:	2b01      	cmp	r3, #1
 80155be:	d122      	bne.n	8015606 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80155c0:	68f8      	ldr	r0, [r7, #12]
 80155c2:	f7ff fe98 	bl	80152f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	2200      	movs	r2, #0
 80155ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80155ce:	e01a      	b.n	8015606 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155d6:	b2db      	uxtb	r3, r3
 80155d8:	2b03      	cmp	r3, #3
 80155da:	d114      	bne.n	8015606 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155e2:	695b      	ldr	r3, [r3, #20]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d00e      	beq.n	8015606 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155ee:	695b      	ldr	r3, [r3, #20]
 80155f0:	7afa      	ldrb	r2, [r7, #11]
 80155f2:	4611      	mov	r1, r2
 80155f4:	68f8      	ldr	r0, [r7, #12]
 80155f6:	4798      	blx	r3
 80155f8:	4603      	mov	r3, r0
 80155fa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80155fc:	7dfb      	ldrb	r3, [r7, #23]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d001      	beq.n	8015606 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8015602:	7dfb      	ldrb	r3, [r7, #23]
 8015604:	e000      	b.n	8015608 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8015606:	2300      	movs	r3, #0
}
 8015608:	4618      	mov	r0, r3
 801560a:	3718      	adds	r7, #24
 801560c:	46bd      	mov	sp, r7
 801560e:	bd80      	pop	{r7, pc}

08015610 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b082      	sub	sp, #8
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	2201      	movs	r2, #1
 801561c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	2200      	movs	r2, #0
 8015624:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	2200      	movs	r2, #0
 801562c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	2200      	movs	r2, #0
 8015632:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801563c:	2b00      	cmp	r3, #0
 801563e:	d101      	bne.n	8015644 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8015640:	2303      	movs	r3, #3
 8015642:	e02f      	b.n	80156a4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801564a:	2b00      	cmp	r3, #0
 801564c:	d00f      	beq.n	801566e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015654:	685b      	ldr	r3, [r3, #4]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d009      	beq.n	801566e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015660:	685b      	ldr	r3, [r3, #4]
 8015662:	687a      	ldr	r2, [r7, #4]
 8015664:	6852      	ldr	r2, [r2, #4]
 8015666:	b2d2      	uxtb	r2, r2
 8015668:	4611      	mov	r1, r2
 801566a:	6878      	ldr	r0, [r7, #4]
 801566c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801566e:	2340      	movs	r3, #64	; 0x40
 8015670:	2200      	movs	r2, #0
 8015672:	2100      	movs	r1, #0
 8015674:	6878      	ldr	r0, [r7, #4]
 8015676:	f005 fa88 	bl	801ab8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	2201      	movs	r2, #1
 801567e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	2240      	movs	r2, #64	; 0x40
 8015686:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801568a:	2340      	movs	r3, #64	; 0x40
 801568c:	2200      	movs	r2, #0
 801568e:	2180      	movs	r1, #128	; 0x80
 8015690:	6878      	ldr	r0, [r7, #4]
 8015692:	f005 fa7a 	bl	801ab8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	2201      	movs	r2, #1
 801569a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	2240      	movs	r2, #64	; 0x40
 80156a0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80156a2:	2300      	movs	r3, #0
}
 80156a4:	4618      	mov	r0, r3
 80156a6:	3708      	adds	r7, #8
 80156a8:	46bd      	mov	sp, r7
 80156aa:	bd80      	pop	{r7, pc}

080156ac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80156ac:	b480      	push	{r7}
 80156ae:	b083      	sub	sp, #12
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	6078      	str	r0, [r7, #4]
 80156b4:	460b      	mov	r3, r1
 80156b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	78fa      	ldrb	r2, [r7, #3]
 80156bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80156be:	2300      	movs	r3, #0
}
 80156c0:	4618      	mov	r0, r3
 80156c2:	370c      	adds	r7, #12
 80156c4:	46bd      	mov	sp, r7
 80156c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ca:	4770      	bx	lr

080156cc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80156cc:	b480      	push	{r7}
 80156ce:	b083      	sub	sp, #12
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156da:	b2da      	uxtb	r2, r3
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	2204      	movs	r2, #4
 80156e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80156ea:	2300      	movs	r3, #0
}
 80156ec:	4618      	mov	r0, r3
 80156ee:	370c      	adds	r7, #12
 80156f0:	46bd      	mov	sp, r7
 80156f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f6:	4770      	bx	lr

080156f8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80156f8:	b480      	push	{r7}
 80156fa:	b083      	sub	sp, #12
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015706:	b2db      	uxtb	r3, r3
 8015708:	2b04      	cmp	r3, #4
 801570a:	d106      	bne.n	801571a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015712:	b2da      	uxtb	r2, r3
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801571a:	2300      	movs	r3, #0
}
 801571c:	4618      	mov	r0, r3
 801571e:	370c      	adds	r7, #12
 8015720:	46bd      	mov	sp, r7
 8015722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015726:	4770      	bx	lr

08015728 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b082      	sub	sp, #8
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015736:	2b00      	cmp	r3, #0
 8015738:	d101      	bne.n	801573e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801573a:	2303      	movs	r3, #3
 801573c:	e012      	b.n	8015764 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015744:	b2db      	uxtb	r3, r3
 8015746:	2b03      	cmp	r3, #3
 8015748:	d10b      	bne.n	8015762 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015750:	69db      	ldr	r3, [r3, #28]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d005      	beq.n	8015762 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801575c:	69db      	ldr	r3, [r3, #28]
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015762:	2300      	movs	r3, #0
}
 8015764:	4618      	mov	r0, r3
 8015766:	3708      	adds	r7, #8
 8015768:	46bd      	mov	sp, r7
 801576a:	bd80      	pop	{r7, pc}

0801576c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801576c:	b580      	push	{r7, lr}
 801576e:	b082      	sub	sp, #8
 8015770:	af00      	add	r7, sp, #0
 8015772:	6078      	str	r0, [r7, #4]
 8015774:	460b      	mov	r3, r1
 8015776:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801577e:	2b00      	cmp	r3, #0
 8015780:	d101      	bne.n	8015786 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8015782:	2303      	movs	r3, #3
 8015784:	e014      	b.n	80157b0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801578c:	b2db      	uxtb	r3, r3
 801578e:	2b03      	cmp	r3, #3
 8015790:	d10d      	bne.n	80157ae <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015798:	6a1b      	ldr	r3, [r3, #32]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d007      	beq.n	80157ae <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157a4:	6a1b      	ldr	r3, [r3, #32]
 80157a6:	78fa      	ldrb	r2, [r7, #3]
 80157a8:	4611      	mov	r1, r2
 80157aa:	6878      	ldr	r0, [r7, #4]
 80157ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80157ae:	2300      	movs	r3, #0
}
 80157b0:	4618      	mov	r0, r3
 80157b2:	3708      	adds	r7, #8
 80157b4:	46bd      	mov	sp, r7
 80157b6:	bd80      	pop	{r7, pc}

080157b8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b082      	sub	sp, #8
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
 80157c0:	460b      	mov	r3, r1
 80157c2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d101      	bne.n	80157d2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80157ce:	2303      	movs	r3, #3
 80157d0:	e014      	b.n	80157fc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157d8:	b2db      	uxtb	r3, r3
 80157da:	2b03      	cmp	r3, #3
 80157dc:	d10d      	bne.n	80157fa <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d007      	beq.n	80157fa <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157f2:	78fa      	ldrb	r2, [r7, #3]
 80157f4:	4611      	mov	r1, r2
 80157f6:	6878      	ldr	r0, [r7, #4]
 80157f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80157fa:	2300      	movs	r3, #0
}
 80157fc:	4618      	mov	r0, r3
 80157fe:	3708      	adds	r7, #8
 8015800:	46bd      	mov	sp, r7
 8015802:	bd80      	pop	{r7, pc}

08015804 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015804:	b480      	push	{r7}
 8015806:	b083      	sub	sp, #12
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801580c:	2300      	movs	r3, #0
}
 801580e:	4618      	mov	r0, r3
 8015810:	370c      	adds	r7, #12
 8015812:	46bd      	mov	sp, r7
 8015814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015818:	4770      	bx	lr

0801581a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801581a:	b580      	push	{r7, lr}
 801581c:	b082      	sub	sp, #8
 801581e:	af00      	add	r7, sp, #0
 8015820:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	2201      	movs	r2, #1
 8015826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015830:	2b00      	cmp	r3, #0
 8015832:	d009      	beq.n	8015848 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801583a:	685b      	ldr	r3, [r3, #4]
 801583c:	687a      	ldr	r2, [r7, #4]
 801583e:	6852      	ldr	r2, [r2, #4]
 8015840:	b2d2      	uxtb	r2, r2
 8015842:	4611      	mov	r1, r2
 8015844:	6878      	ldr	r0, [r7, #4]
 8015846:	4798      	blx	r3
  }

  return USBD_OK;
 8015848:	2300      	movs	r3, #0
}
 801584a:	4618      	mov	r0, r3
 801584c:	3708      	adds	r7, #8
 801584e:	46bd      	mov	sp, r7
 8015850:	bd80      	pop	{r7, pc}

08015852 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015852:	b480      	push	{r7}
 8015854:	b087      	sub	sp, #28
 8015856:	af00      	add	r7, sp, #0
 8015858:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801585e:	697b      	ldr	r3, [r7, #20]
 8015860:	781b      	ldrb	r3, [r3, #0]
 8015862:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015864:	697b      	ldr	r3, [r7, #20]
 8015866:	3301      	adds	r3, #1
 8015868:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801586a:	697b      	ldr	r3, [r7, #20]
 801586c:	781b      	ldrb	r3, [r3, #0]
 801586e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015870:	8a3b      	ldrh	r3, [r7, #16]
 8015872:	021b      	lsls	r3, r3, #8
 8015874:	b21a      	sxth	r2, r3
 8015876:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801587a:	4313      	orrs	r3, r2
 801587c:	b21b      	sxth	r3, r3
 801587e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015880:	89fb      	ldrh	r3, [r7, #14]
}
 8015882:	4618      	mov	r0, r3
 8015884:	371c      	adds	r7, #28
 8015886:	46bd      	mov	sp, r7
 8015888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801588c:	4770      	bx	lr
	...

08015890 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b084      	sub	sp, #16
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
 8015898:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801589a:	2300      	movs	r3, #0
 801589c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801589e:	683b      	ldr	r3, [r7, #0]
 80158a0:	781b      	ldrb	r3, [r3, #0]
 80158a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80158a6:	2b40      	cmp	r3, #64	; 0x40
 80158a8:	d005      	beq.n	80158b6 <USBD_StdDevReq+0x26>
 80158aa:	2b40      	cmp	r3, #64	; 0x40
 80158ac:	d853      	bhi.n	8015956 <USBD_StdDevReq+0xc6>
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d00b      	beq.n	80158ca <USBD_StdDevReq+0x3a>
 80158b2:	2b20      	cmp	r3, #32
 80158b4:	d14f      	bne.n	8015956 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158bc:	689b      	ldr	r3, [r3, #8]
 80158be:	6839      	ldr	r1, [r7, #0]
 80158c0:	6878      	ldr	r0, [r7, #4]
 80158c2:	4798      	blx	r3
 80158c4:	4603      	mov	r3, r0
 80158c6:	73fb      	strb	r3, [r7, #15]
      break;
 80158c8:	e04a      	b.n	8015960 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80158ca:	683b      	ldr	r3, [r7, #0]
 80158cc:	785b      	ldrb	r3, [r3, #1]
 80158ce:	2b09      	cmp	r3, #9
 80158d0:	d83b      	bhi.n	801594a <USBD_StdDevReq+0xba>
 80158d2:	a201      	add	r2, pc, #4	; (adr r2, 80158d8 <USBD_StdDevReq+0x48>)
 80158d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158d8:	0801592d 	.word	0x0801592d
 80158dc:	08015941 	.word	0x08015941
 80158e0:	0801594b 	.word	0x0801594b
 80158e4:	08015937 	.word	0x08015937
 80158e8:	0801594b 	.word	0x0801594b
 80158ec:	0801590b 	.word	0x0801590b
 80158f0:	08015901 	.word	0x08015901
 80158f4:	0801594b 	.word	0x0801594b
 80158f8:	08015923 	.word	0x08015923
 80158fc:	08015915 	.word	0x08015915
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015900:	6839      	ldr	r1, [r7, #0]
 8015902:	6878      	ldr	r0, [r7, #4]
 8015904:	f000 f9de 	bl	8015cc4 <USBD_GetDescriptor>
          break;
 8015908:	e024      	b.n	8015954 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801590a:	6839      	ldr	r1, [r7, #0]
 801590c:	6878      	ldr	r0, [r7, #4]
 801590e:	f000 fb43 	bl	8015f98 <USBD_SetAddress>
          break;
 8015912:	e01f      	b.n	8015954 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015914:	6839      	ldr	r1, [r7, #0]
 8015916:	6878      	ldr	r0, [r7, #4]
 8015918:	f000 fb82 	bl	8016020 <USBD_SetConfig>
 801591c:	4603      	mov	r3, r0
 801591e:	73fb      	strb	r3, [r7, #15]
          break;
 8015920:	e018      	b.n	8015954 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015922:	6839      	ldr	r1, [r7, #0]
 8015924:	6878      	ldr	r0, [r7, #4]
 8015926:	f000 fc21 	bl	801616c <USBD_GetConfig>
          break;
 801592a:	e013      	b.n	8015954 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801592c:	6839      	ldr	r1, [r7, #0]
 801592e:	6878      	ldr	r0, [r7, #4]
 8015930:	f000 fc52 	bl	80161d8 <USBD_GetStatus>
          break;
 8015934:	e00e      	b.n	8015954 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015936:	6839      	ldr	r1, [r7, #0]
 8015938:	6878      	ldr	r0, [r7, #4]
 801593a:	f000 fc81 	bl	8016240 <USBD_SetFeature>
          break;
 801593e:	e009      	b.n	8015954 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015940:	6839      	ldr	r1, [r7, #0]
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f000 fc90 	bl	8016268 <USBD_ClrFeature>
          break;
 8015948:	e004      	b.n	8015954 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801594a:	6839      	ldr	r1, [r7, #0]
 801594c:	6878      	ldr	r0, [r7, #4]
 801594e:	f000 fce7 	bl	8016320 <USBD_CtlError>
          break;
 8015952:	bf00      	nop
      }
      break;
 8015954:	e004      	b.n	8015960 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8015956:	6839      	ldr	r1, [r7, #0]
 8015958:	6878      	ldr	r0, [r7, #4]
 801595a:	f000 fce1 	bl	8016320 <USBD_CtlError>
      break;
 801595e:	bf00      	nop
  }

  return ret;
 8015960:	7bfb      	ldrb	r3, [r7, #15]
}
 8015962:	4618      	mov	r0, r3
 8015964:	3710      	adds	r7, #16
 8015966:	46bd      	mov	sp, r7
 8015968:	bd80      	pop	{r7, pc}
 801596a:	bf00      	nop

0801596c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b084      	sub	sp, #16
 8015970:	af00      	add	r7, sp, #0
 8015972:	6078      	str	r0, [r7, #4]
 8015974:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015976:	2300      	movs	r3, #0
 8015978:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801597a:	683b      	ldr	r3, [r7, #0]
 801597c:	781b      	ldrb	r3, [r3, #0]
 801597e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015982:	2b40      	cmp	r3, #64	; 0x40
 8015984:	d005      	beq.n	8015992 <USBD_StdItfReq+0x26>
 8015986:	2b40      	cmp	r3, #64	; 0x40
 8015988:	d82f      	bhi.n	80159ea <USBD_StdItfReq+0x7e>
 801598a:	2b00      	cmp	r3, #0
 801598c:	d001      	beq.n	8015992 <USBD_StdItfReq+0x26>
 801598e:	2b20      	cmp	r3, #32
 8015990:	d12b      	bne.n	80159ea <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015998:	b2db      	uxtb	r3, r3
 801599a:	3b01      	subs	r3, #1
 801599c:	2b02      	cmp	r3, #2
 801599e:	d81d      	bhi.n	80159dc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80159a0:	683b      	ldr	r3, [r7, #0]
 80159a2:	889b      	ldrh	r3, [r3, #4]
 80159a4:	b2db      	uxtb	r3, r3
 80159a6:	2b01      	cmp	r3, #1
 80159a8:	d813      	bhi.n	80159d2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159b0:	689b      	ldr	r3, [r3, #8]
 80159b2:	6839      	ldr	r1, [r7, #0]
 80159b4:	6878      	ldr	r0, [r7, #4]
 80159b6:	4798      	blx	r3
 80159b8:	4603      	mov	r3, r0
 80159ba:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80159bc:	683b      	ldr	r3, [r7, #0]
 80159be:	88db      	ldrh	r3, [r3, #6]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d110      	bne.n	80159e6 <USBD_StdItfReq+0x7a>
 80159c4:	7bfb      	ldrb	r3, [r7, #15]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d10d      	bne.n	80159e6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80159ca:	6878      	ldr	r0, [r7, #4]
 80159cc:	f000 fd73 	bl	80164b6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80159d0:	e009      	b.n	80159e6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80159d2:	6839      	ldr	r1, [r7, #0]
 80159d4:	6878      	ldr	r0, [r7, #4]
 80159d6:	f000 fca3 	bl	8016320 <USBD_CtlError>
          break;
 80159da:	e004      	b.n	80159e6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80159dc:	6839      	ldr	r1, [r7, #0]
 80159de:	6878      	ldr	r0, [r7, #4]
 80159e0:	f000 fc9e 	bl	8016320 <USBD_CtlError>
          break;
 80159e4:	e000      	b.n	80159e8 <USBD_StdItfReq+0x7c>
          break;
 80159e6:	bf00      	nop
      }
      break;
 80159e8:	e004      	b.n	80159f4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80159ea:	6839      	ldr	r1, [r7, #0]
 80159ec:	6878      	ldr	r0, [r7, #4]
 80159ee:	f000 fc97 	bl	8016320 <USBD_CtlError>
      break;
 80159f2:	bf00      	nop
  }

  return ret;
 80159f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3710      	adds	r7, #16
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}

080159fe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80159fe:	b580      	push	{r7, lr}
 8015a00:	b084      	sub	sp, #16
 8015a02:	af00      	add	r7, sp, #0
 8015a04:	6078      	str	r0, [r7, #4]
 8015a06:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8015a08:	2300      	movs	r3, #0
 8015a0a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8015a0c:	683b      	ldr	r3, [r7, #0]
 8015a0e:	889b      	ldrh	r3, [r3, #4]
 8015a10:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a12:	683b      	ldr	r3, [r7, #0]
 8015a14:	781b      	ldrb	r3, [r3, #0]
 8015a16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015a1a:	2b40      	cmp	r3, #64	; 0x40
 8015a1c:	d007      	beq.n	8015a2e <USBD_StdEPReq+0x30>
 8015a1e:	2b40      	cmp	r3, #64	; 0x40
 8015a20:	f200 8145 	bhi.w	8015cae <USBD_StdEPReq+0x2b0>
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d00c      	beq.n	8015a42 <USBD_StdEPReq+0x44>
 8015a28:	2b20      	cmp	r3, #32
 8015a2a:	f040 8140 	bne.w	8015cae <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a34:	689b      	ldr	r3, [r3, #8]
 8015a36:	6839      	ldr	r1, [r7, #0]
 8015a38:	6878      	ldr	r0, [r7, #4]
 8015a3a:	4798      	blx	r3
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8015a40:	e13a      	b.n	8015cb8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015a42:	683b      	ldr	r3, [r7, #0]
 8015a44:	785b      	ldrb	r3, [r3, #1]
 8015a46:	2b03      	cmp	r3, #3
 8015a48:	d007      	beq.n	8015a5a <USBD_StdEPReq+0x5c>
 8015a4a:	2b03      	cmp	r3, #3
 8015a4c:	f300 8129 	bgt.w	8015ca2 <USBD_StdEPReq+0x2a4>
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d07f      	beq.n	8015b54 <USBD_StdEPReq+0x156>
 8015a54:	2b01      	cmp	r3, #1
 8015a56:	d03c      	beq.n	8015ad2 <USBD_StdEPReq+0xd4>
 8015a58:	e123      	b.n	8015ca2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a60:	b2db      	uxtb	r3, r3
 8015a62:	2b02      	cmp	r3, #2
 8015a64:	d002      	beq.n	8015a6c <USBD_StdEPReq+0x6e>
 8015a66:	2b03      	cmp	r3, #3
 8015a68:	d016      	beq.n	8015a98 <USBD_StdEPReq+0x9a>
 8015a6a:	e02c      	b.n	8015ac6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a6c:	7bbb      	ldrb	r3, [r7, #14]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d00d      	beq.n	8015a8e <USBD_StdEPReq+0x90>
 8015a72:	7bbb      	ldrb	r3, [r7, #14]
 8015a74:	2b80      	cmp	r3, #128	; 0x80
 8015a76:	d00a      	beq.n	8015a8e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a78:	7bbb      	ldrb	r3, [r7, #14]
 8015a7a:	4619      	mov	r1, r3
 8015a7c:	6878      	ldr	r0, [r7, #4]
 8015a7e:	f005 f8c9 	bl	801ac14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a82:	2180      	movs	r1, #128	; 0x80
 8015a84:	6878      	ldr	r0, [r7, #4]
 8015a86:	f005 f8c5 	bl	801ac14 <USBD_LL_StallEP>
 8015a8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015a8c:	e020      	b.n	8015ad0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8015a8e:	6839      	ldr	r1, [r7, #0]
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f000 fc45 	bl	8016320 <USBD_CtlError>
              break;
 8015a96:	e01b      	b.n	8015ad0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015a98:	683b      	ldr	r3, [r7, #0]
 8015a9a:	885b      	ldrh	r3, [r3, #2]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d10e      	bne.n	8015abe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015aa0:	7bbb      	ldrb	r3, [r7, #14]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d00b      	beq.n	8015abe <USBD_StdEPReq+0xc0>
 8015aa6:	7bbb      	ldrb	r3, [r7, #14]
 8015aa8:	2b80      	cmp	r3, #128	; 0x80
 8015aaa:	d008      	beq.n	8015abe <USBD_StdEPReq+0xc0>
 8015aac:	683b      	ldr	r3, [r7, #0]
 8015aae:	88db      	ldrh	r3, [r3, #6]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d104      	bne.n	8015abe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015ab4:	7bbb      	ldrb	r3, [r7, #14]
 8015ab6:	4619      	mov	r1, r3
 8015ab8:	6878      	ldr	r0, [r7, #4]
 8015aba:	f005 f8ab 	bl	801ac14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015abe:	6878      	ldr	r0, [r7, #4]
 8015ac0:	f000 fcf9 	bl	80164b6 <USBD_CtlSendStatus>

              break;
 8015ac4:	e004      	b.n	8015ad0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8015ac6:	6839      	ldr	r1, [r7, #0]
 8015ac8:	6878      	ldr	r0, [r7, #4]
 8015aca:	f000 fc29 	bl	8016320 <USBD_CtlError>
              break;
 8015ace:	bf00      	nop
          }
          break;
 8015ad0:	e0ec      	b.n	8015cac <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ad8:	b2db      	uxtb	r3, r3
 8015ada:	2b02      	cmp	r3, #2
 8015adc:	d002      	beq.n	8015ae4 <USBD_StdEPReq+0xe6>
 8015ade:	2b03      	cmp	r3, #3
 8015ae0:	d016      	beq.n	8015b10 <USBD_StdEPReq+0x112>
 8015ae2:	e030      	b.n	8015b46 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ae4:	7bbb      	ldrb	r3, [r7, #14]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d00d      	beq.n	8015b06 <USBD_StdEPReq+0x108>
 8015aea:	7bbb      	ldrb	r3, [r7, #14]
 8015aec:	2b80      	cmp	r3, #128	; 0x80
 8015aee:	d00a      	beq.n	8015b06 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015af0:	7bbb      	ldrb	r3, [r7, #14]
 8015af2:	4619      	mov	r1, r3
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	f005 f88d 	bl	801ac14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015afa:	2180      	movs	r1, #128	; 0x80
 8015afc:	6878      	ldr	r0, [r7, #4]
 8015afe:	f005 f889 	bl	801ac14 <USBD_LL_StallEP>
 8015b02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015b04:	e025      	b.n	8015b52 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8015b06:	6839      	ldr	r1, [r7, #0]
 8015b08:	6878      	ldr	r0, [r7, #4]
 8015b0a:	f000 fc09 	bl	8016320 <USBD_CtlError>
              break;
 8015b0e:	e020      	b.n	8015b52 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015b10:	683b      	ldr	r3, [r7, #0]
 8015b12:	885b      	ldrh	r3, [r3, #2]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d11b      	bne.n	8015b50 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015b18:	7bbb      	ldrb	r3, [r7, #14]
 8015b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d004      	beq.n	8015b2c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015b22:	7bbb      	ldrb	r3, [r7, #14]
 8015b24:	4619      	mov	r1, r3
 8015b26:	6878      	ldr	r0, [r7, #4]
 8015b28:	f005 f893 	bl	801ac52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015b2c:	6878      	ldr	r0, [r7, #4]
 8015b2e:	f000 fcc2 	bl	80164b6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b38:	689b      	ldr	r3, [r3, #8]
 8015b3a:	6839      	ldr	r1, [r7, #0]
 8015b3c:	6878      	ldr	r0, [r7, #4]
 8015b3e:	4798      	blx	r3
 8015b40:	4603      	mov	r3, r0
 8015b42:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8015b44:	e004      	b.n	8015b50 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8015b46:	6839      	ldr	r1, [r7, #0]
 8015b48:	6878      	ldr	r0, [r7, #4]
 8015b4a:	f000 fbe9 	bl	8016320 <USBD_CtlError>
              break;
 8015b4e:	e000      	b.n	8015b52 <USBD_StdEPReq+0x154>
              break;
 8015b50:	bf00      	nop
          }
          break;
 8015b52:	e0ab      	b.n	8015cac <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b5a:	b2db      	uxtb	r3, r3
 8015b5c:	2b02      	cmp	r3, #2
 8015b5e:	d002      	beq.n	8015b66 <USBD_StdEPReq+0x168>
 8015b60:	2b03      	cmp	r3, #3
 8015b62:	d032      	beq.n	8015bca <USBD_StdEPReq+0x1cc>
 8015b64:	e097      	b.n	8015c96 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015b66:	7bbb      	ldrb	r3, [r7, #14]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d007      	beq.n	8015b7c <USBD_StdEPReq+0x17e>
 8015b6c:	7bbb      	ldrb	r3, [r7, #14]
 8015b6e:	2b80      	cmp	r3, #128	; 0x80
 8015b70:	d004      	beq.n	8015b7c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8015b72:	6839      	ldr	r1, [r7, #0]
 8015b74:	6878      	ldr	r0, [r7, #4]
 8015b76:	f000 fbd3 	bl	8016320 <USBD_CtlError>
                break;
 8015b7a:	e091      	b.n	8015ca0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	da0b      	bge.n	8015b9c <USBD_StdEPReq+0x19e>
 8015b84:	7bbb      	ldrb	r3, [r7, #14]
 8015b86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b8a:	4613      	mov	r3, r2
 8015b8c:	009b      	lsls	r3, r3, #2
 8015b8e:	4413      	add	r3, r2
 8015b90:	009b      	lsls	r3, r3, #2
 8015b92:	3310      	adds	r3, #16
 8015b94:	687a      	ldr	r2, [r7, #4]
 8015b96:	4413      	add	r3, r2
 8015b98:	3304      	adds	r3, #4
 8015b9a:	e00b      	b.n	8015bb4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015b9c:	7bbb      	ldrb	r3, [r7, #14]
 8015b9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ba2:	4613      	mov	r3, r2
 8015ba4:	009b      	lsls	r3, r3, #2
 8015ba6:	4413      	add	r3, r2
 8015ba8:	009b      	lsls	r3, r3, #2
 8015baa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015bae:	687a      	ldr	r2, [r7, #4]
 8015bb0:	4413      	add	r3, r2
 8015bb2:	3304      	adds	r3, #4
 8015bb4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015bb6:	68bb      	ldr	r3, [r7, #8]
 8015bb8:	2200      	movs	r2, #0
 8015bba:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015bbc:	68bb      	ldr	r3, [r7, #8]
 8015bbe:	2202      	movs	r2, #2
 8015bc0:	4619      	mov	r1, r3
 8015bc2:	6878      	ldr	r0, [r7, #4]
 8015bc4:	f000 fc1d 	bl	8016402 <USBD_CtlSendData>
              break;
 8015bc8:	e06a      	b.n	8015ca0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015bca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	da11      	bge.n	8015bf6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015bd2:	7bbb      	ldrb	r3, [r7, #14]
 8015bd4:	f003 020f 	and.w	r2, r3, #15
 8015bd8:	6879      	ldr	r1, [r7, #4]
 8015bda:	4613      	mov	r3, r2
 8015bdc:	009b      	lsls	r3, r3, #2
 8015bde:	4413      	add	r3, r2
 8015be0:	009b      	lsls	r3, r3, #2
 8015be2:	440b      	add	r3, r1
 8015be4:	3324      	adds	r3, #36	; 0x24
 8015be6:	881b      	ldrh	r3, [r3, #0]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d117      	bne.n	8015c1c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8015bec:	6839      	ldr	r1, [r7, #0]
 8015bee:	6878      	ldr	r0, [r7, #4]
 8015bf0:	f000 fb96 	bl	8016320 <USBD_CtlError>
                  break;
 8015bf4:	e054      	b.n	8015ca0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015bf6:	7bbb      	ldrb	r3, [r7, #14]
 8015bf8:	f003 020f 	and.w	r2, r3, #15
 8015bfc:	6879      	ldr	r1, [r7, #4]
 8015bfe:	4613      	mov	r3, r2
 8015c00:	009b      	lsls	r3, r3, #2
 8015c02:	4413      	add	r3, r2
 8015c04:	009b      	lsls	r3, r3, #2
 8015c06:	440b      	add	r3, r1
 8015c08:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015c0c:	881b      	ldrh	r3, [r3, #0]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d104      	bne.n	8015c1c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8015c12:	6839      	ldr	r1, [r7, #0]
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f000 fb83 	bl	8016320 <USBD_CtlError>
                  break;
 8015c1a:	e041      	b.n	8015ca0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	da0b      	bge.n	8015c3c <USBD_StdEPReq+0x23e>
 8015c24:	7bbb      	ldrb	r3, [r7, #14]
 8015c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c2a:	4613      	mov	r3, r2
 8015c2c:	009b      	lsls	r3, r3, #2
 8015c2e:	4413      	add	r3, r2
 8015c30:	009b      	lsls	r3, r3, #2
 8015c32:	3310      	adds	r3, #16
 8015c34:	687a      	ldr	r2, [r7, #4]
 8015c36:	4413      	add	r3, r2
 8015c38:	3304      	adds	r3, #4
 8015c3a:	e00b      	b.n	8015c54 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015c3c:	7bbb      	ldrb	r3, [r7, #14]
 8015c3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c42:	4613      	mov	r3, r2
 8015c44:	009b      	lsls	r3, r3, #2
 8015c46:	4413      	add	r3, r2
 8015c48:	009b      	lsls	r3, r3, #2
 8015c4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015c4e:	687a      	ldr	r2, [r7, #4]
 8015c50:	4413      	add	r3, r2
 8015c52:	3304      	adds	r3, #4
 8015c54:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015c56:	7bbb      	ldrb	r3, [r7, #14]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d002      	beq.n	8015c62 <USBD_StdEPReq+0x264>
 8015c5c:	7bbb      	ldrb	r3, [r7, #14]
 8015c5e:	2b80      	cmp	r3, #128	; 0x80
 8015c60:	d103      	bne.n	8015c6a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8015c62:	68bb      	ldr	r3, [r7, #8]
 8015c64:	2200      	movs	r2, #0
 8015c66:	601a      	str	r2, [r3, #0]
 8015c68:	e00e      	b.n	8015c88 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015c6a:	7bbb      	ldrb	r3, [r7, #14]
 8015c6c:	4619      	mov	r1, r3
 8015c6e:	6878      	ldr	r0, [r7, #4]
 8015c70:	f005 f80e 	bl	801ac90 <USBD_LL_IsStallEP>
 8015c74:	4603      	mov	r3, r0
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d003      	beq.n	8015c82 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8015c7a:	68bb      	ldr	r3, [r7, #8]
 8015c7c:	2201      	movs	r2, #1
 8015c7e:	601a      	str	r2, [r3, #0]
 8015c80:	e002      	b.n	8015c88 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8015c82:	68bb      	ldr	r3, [r7, #8]
 8015c84:	2200      	movs	r2, #0
 8015c86:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015c88:	68bb      	ldr	r3, [r7, #8]
 8015c8a:	2202      	movs	r2, #2
 8015c8c:	4619      	mov	r1, r3
 8015c8e:	6878      	ldr	r0, [r7, #4]
 8015c90:	f000 fbb7 	bl	8016402 <USBD_CtlSendData>
              break;
 8015c94:	e004      	b.n	8015ca0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8015c96:	6839      	ldr	r1, [r7, #0]
 8015c98:	6878      	ldr	r0, [r7, #4]
 8015c9a:	f000 fb41 	bl	8016320 <USBD_CtlError>
              break;
 8015c9e:	bf00      	nop
          }
          break;
 8015ca0:	e004      	b.n	8015cac <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8015ca2:	6839      	ldr	r1, [r7, #0]
 8015ca4:	6878      	ldr	r0, [r7, #4]
 8015ca6:	f000 fb3b 	bl	8016320 <USBD_CtlError>
          break;
 8015caa:	bf00      	nop
      }
      break;
 8015cac:	e004      	b.n	8015cb8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8015cae:	6839      	ldr	r1, [r7, #0]
 8015cb0:	6878      	ldr	r0, [r7, #4]
 8015cb2:	f000 fb35 	bl	8016320 <USBD_CtlError>
      break;
 8015cb6:	bf00      	nop
  }

  return ret;
 8015cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cba:	4618      	mov	r0, r3
 8015cbc:	3710      	adds	r7, #16
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	bd80      	pop	{r7, pc}
	...

08015cc4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b084      	sub	sp, #16
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
 8015ccc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015cce:	2300      	movs	r3, #0
 8015cd0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015cda:	683b      	ldr	r3, [r7, #0]
 8015cdc:	885b      	ldrh	r3, [r3, #2]
 8015cde:	0a1b      	lsrs	r3, r3, #8
 8015ce0:	b29b      	uxth	r3, r3
 8015ce2:	3b01      	subs	r3, #1
 8015ce4:	2b06      	cmp	r3, #6
 8015ce6:	f200 8128 	bhi.w	8015f3a <USBD_GetDescriptor+0x276>
 8015cea:	a201      	add	r2, pc, #4	; (adr r2, 8015cf0 <USBD_GetDescriptor+0x2c>)
 8015cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cf0:	08015d0d 	.word	0x08015d0d
 8015cf4:	08015d25 	.word	0x08015d25
 8015cf8:	08015d65 	.word	0x08015d65
 8015cfc:	08015f3b 	.word	0x08015f3b
 8015d00:	08015f3b 	.word	0x08015f3b
 8015d04:	08015edb 	.word	0x08015edb
 8015d08:	08015f07 	.word	0x08015f07
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	687a      	ldr	r2, [r7, #4]
 8015d16:	7c12      	ldrb	r2, [r2, #16]
 8015d18:	f107 0108 	add.w	r1, r7, #8
 8015d1c:	4610      	mov	r0, r2
 8015d1e:	4798      	blx	r3
 8015d20:	60f8      	str	r0, [r7, #12]
      break;
 8015d22:	e112      	b.n	8015f4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	7c1b      	ldrb	r3, [r3, #16]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d10d      	bne.n	8015d48 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d34:	f107 0208 	add.w	r2, r7, #8
 8015d38:	4610      	mov	r0, r2
 8015d3a:	4798      	blx	r3
 8015d3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	3301      	adds	r3, #1
 8015d42:	2202      	movs	r2, #2
 8015d44:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015d46:	e100      	b.n	8015f4a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d50:	f107 0208 	add.w	r2, r7, #8
 8015d54:	4610      	mov	r0, r2
 8015d56:	4798      	blx	r3
 8015d58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	3301      	adds	r3, #1
 8015d5e:	2202      	movs	r2, #2
 8015d60:	701a      	strb	r2, [r3, #0]
      break;
 8015d62:	e0f2      	b.n	8015f4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015d64:	683b      	ldr	r3, [r7, #0]
 8015d66:	885b      	ldrh	r3, [r3, #2]
 8015d68:	b2db      	uxtb	r3, r3
 8015d6a:	2b05      	cmp	r3, #5
 8015d6c:	f200 80ac 	bhi.w	8015ec8 <USBD_GetDescriptor+0x204>
 8015d70:	a201      	add	r2, pc, #4	; (adr r2, 8015d78 <USBD_GetDescriptor+0xb4>)
 8015d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d76:	bf00      	nop
 8015d78:	08015d91 	.word	0x08015d91
 8015d7c:	08015dc5 	.word	0x08015dc5
 8015d80:	08015df9 	.word	0x08015df9
 8015d84:	08015e2d 	.word	0x08015e2d
 8015d88:	08015e61 	.word	0x08015e61
 8015d8c:	08015e95 	.word	0x08015e95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d96:	685b      	ldr	r3, [r3, #4]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d00b      	beq.n	8015db4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015da2:	685b      	ldr	r3, [r3, #4]
 8015da4:	687a      	ldr	r2, [r7, #4]
 8015da6:	7c12      	ldrb	r2, [r2, #16]
 8015da8:	f107 0108 	add.w	r1, r7, #8
 8015dac:	4610      	mov	r0, r2
 8015dae:	4798      	blx	r3
 8015db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015db2:	e091      	b.n	8015ed8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015db4:	6839      	ldr	r1, [r7, #0]
 8015db6:	6878      	ldr	r0, [r7, #4]
 8015db8:	f000 fab2 	bl	8016320 <USBD_CtlError>
            err++;
 8015dbc:	7afb      	ldrb	r3, [r7, #11]
 8015dbe:	3301      	adds	r3, #1
 8015dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8015dc2:	e089      	b.n	8015ed8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dca:	689b      	ldr	r3, [r3, #8]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d00b      	beq.n	8015de8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dd6:	689b      	ldr	r3, [r3, #8]
 8015dd8:	687a      	ldr	r2, [r7, #4]
 8015dda:	7c12      	ldrb	r2, [r2, #16]
 8015ddc:	f107 0108 	add.w	r1, r7, #8
 8015de0:	4610      	mov	r0, r2
 8015de2:	4798      	blx	r3
 8015de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015de6:	e077      	b.n	8015ed8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015de8:	6839      	ldr	r1, [r7, #0]
 8015dea:	6878      	ldr	r0, [r7, #4]
 8015dec:	f000 fa98 	bl	8016320 <USBD_CtlError>
            err++;
 8015df0:	7afb      	ldrb	r3, [r7, #11]
 8015df2:	3301      	adds	r3, #1
 8015df4:	72fb      	strb	r3, [r7, #11]
          break;
 8015df6:	e06f      	b.n	8015ed8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dfe:	68db      	ldr	r3, [r3, #12]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d00b      	beq.n	8015e1c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e0a:	68db      	ldr	r3, [r3, #12]
 8015e0c:	687a      	ldr	r2, [r7, #4]
 8015e0e:	7c12      	ldrb	r2, [r2, #16]
 8015e10:	f107 0108 	add.w	r1, r7, #8
 8015e14:	4610      	mov	r0, r2
 8015e16:	4798      	blx	r3
 8015e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e1a:	e05d      	b.n	8015ed8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e1c:	6839      	ldr	r1, [r7, #0]
 8015e1e:	6878      	ldr	r0, [r7, #4]
 8015e20:	f000 fa7e 	bl	8016320 <USBD_CtlError>
            err++;
 8015e24:	7afb      	ldrb	r3, [r7, #11]
 8015e26:	3301      	adds	r3, #1
 8015e28:	72fb      	strb	r3, [r7, #11]
          break;
 8015e2a:	e055      	b.n	8015ed8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e32:	691b      	ldr	r3, [r3, #16]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d00b      	beq.n	8015e50 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e3e:	691b      	ldr	r3, [r3, #16]
 8015e40:	687a      	ldr	r2, [r7, #4]
 8015e42:	7c12      	ldrb	r2, [r2, #16]
 8015e44:	f107 0108 	add.w	r1, r7, #8
 8015e48:	4610      	mov	r0, r2
 8015e4a:	4798      	blx	r3
 8015e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e4e:	e043      	b.n	8015ed8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e50:	6839      	ldr	r1, [r7, #0]
 8015e52:	6878      	ldr	r0, [r7, #4]
 8015e54:	f000 fa64 	bl	8016320 <USBD_CtlError>
            err++;
 8015e58:	7afb      	ldrb	r3, [r7, #11]
 8015e5a:	3301      	adds	r3, #1
 8015e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8015e5e:	e03b      	b.n	8015ed8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e66:	695b      	ldr	r3, [r3, #20]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d00b      	beq.n	8015e84 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e72:	695b      	ldr	r3, [r3, #20]
 8015e74:	687a      	ldr	r2, [r7, #4]
 8015e76:	7c12      	ldrb	r2, [r2, #16]
 8015e78:	f107 0108 	add.w	r1, r7, #8
 8015e7c:	4610      	mov	r0, r2
 8015e7e:	4798      	blx	r3
 8015e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e82:	e029      	b.n	8015ed8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e84:	6839      	ldr	r1, [r7, #0]
 8015e86:	6878      	ldr	r0, [r7, #4]
 8015e88:	f000 fa4a 	bl	8016320 <USBD_CtlError>
            err++;
 8015e8c:	7afb      	ldrb	r3, [r7, #11]
 8015e8e:	3301      	adds	r3, #1
 8015e90:	72fb      	strb	r3, [r7, #11]
          break;
 8015e92:	e021      	b.n	8015ed8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e9a:	699b      	ldr	r3, [r3, #24]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d00b      	beq.n	8015eb8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ea6:	699b      	ldr	r3, [r3, #24]
 8015ea8:	687a      	ldr	r2, [r7, #4]
 8015eaa:	7c12      	ldrb	r2, [r2, #16]
 8015eac:	f107 0108 	add.w	r1, r7, #8
 8015eb0:	4610      	mov	r0, r2
 8015eb2:	4798      	blx	r3
 8015eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015eb6:	e00f      	b.n	8015ed8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015eb8:	6839      	ldr	r1, [r7, #0]
 8015eba:	6878      	ldr	r0, [r7, #4]
 8015ebc:	f000 fa30 	bl	8016320 <USBD_CtlError>
            err++;
 8015ec0:	7afb      	ldrb	r3, [r7, #11]
 8015ec2:	3301      	adds	r3, #1
 8015ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8015ec6:	e007      	b.n	8015ed8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015ec8:	6839      	ldr	r1, [r7, #0]
 8015eca:	6878      	ldr	r0, [r7, #4]
 8015ecc:	f000 fa28 	bl	8016320 <USBD_CtlError>
          err++;
 8015ed0:	7afb      	ldrb	r3, [r7, #11]
 8015ed2:	3301      	adds	r3, #1
 8015ed4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8015ed6:	bf00      	nop
      }
      break;
 8015ed8:	e037      	b.n	8015f4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	7c1b      	ldrb	r3, [r3, #16]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d109      	bne.n	8015ef6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015eea:	f107 0208 	add.w	r2, r7, #8
 8015eee:	4610      	mov	r0, r2
 8015ef0:	4798      	blx	r3
 8015ef2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015ef4:	e029      	b.n	8015f4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015ef6:	6839      	ldr	r1, [r7, #0]
 8015ef8:	6878      	ldr	r0, [r7, #4]
 8015efa:	f000 fa11 	bl	8016320 <USBD_CtlError>
        err++;
 8015efe:	7afb      	ldrb	r3, [r7, #11]
 8015f00:	3301      	adds	r3, #1
 8015f02:	72fb      	strb	r3, [r7, #11]
      break;
 8015f04:	e021      	b.n	8015f4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	7c1b      	ldrb	r3, [r3, #16]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d10d      	bne.n	8015f2a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f16:	f107 0208 	add.w	r2, r7, #8
 8015f1a:	4610      	mov	r0, r2
 8015f1c:	4798      	blx	r3
 8015f1e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	3301      	adds	r3, #1
 8015f24:	2207      	movs	r2, #7
 8015f26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f28:	e00f      	b.n	8015f4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015f2a:	6839      	ldr	r1, [r7, #0]
 8015f2c:	6878      	ldr	r0, [r7, #4]
 8015f2e:	f000 f9f7 	bl	8016320 <USBD_CtlError>
        err++;
 8015f32:	7afb      	ldrb	r3, [r7, #11]
 8015f34:	3301      	adds	r3, #1
 8015f36:	72fb      	strb	r3, [r7, #11]
      break;
 8015f38:	e007      	b.n	8015f4a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015f3a:	6839      	ldr	r1, [r7, #0]
 8015f3c:	6878      	ldr	r0, [r7, #4]
 8015f3e:	f000 f9ef 	bl	8016320 <USBD_CtlError>
      err++;
 8015f42:	7afb      	ldrb	r3, [r7, #11]
 8015f44:	3301      	adds	r3, #1
 8015f46:	72fb      	strb	r3, [r7, #11]
      break;
 8015f48:	bf00      	nop
  }

  if (err != 0U)
 8015f4a:	7afb      	ldrb	r3, [r7, #11]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d11e      	bne.n	8015f8e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015f50:	683b      	ldr	r3, [r7, #0]
 8015f52:	88db      	ldrh	r3, [r3, #6]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d016      	beq.n	8015f86 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015f58:	893b      	ldrh	r3, [r7, #8]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d00e      	beq.n	8015f7c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015f5e:	683b      	ldr	r3, [r7, #0]
 8015f60:	88da      	ldrh	r2, [r3, #6]
 8015f62:	893b      	ldrh	r3, [r7, #8]
 8015f64:	4293      	cmp	r3, r2
 8015f66:	bf28      	it	cs
 8015f68:	4613      	movcs	r3, r2
 8015f6a:	b29b      	uxth	r3, r3
 8015f6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015f6e:	893b      	ldrh	r3, [r7, #8]
 8015f70:	461a      	mov	r2, r3
 8015f72:	68f9      	ldr	r1, [r7, #12]
 8015f74:	6878      	ldr	r0, [r7, #4]
 8015f76:	f000 fa44 	bl	8016402 <USBD_CtlSendData>
 8015f7a:	e009      	b.n	8015f90 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015f7c:	6839      	ldr	r1, [r7, #0]
 8015f7e:	6878      	ldr	r0, [r7, #4]
 8015f80:	f000 f9ce 	bl	8016320 <USBD_CtlError>
 8015f84:	e004      	b.n	8015f90 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	f000 fa95 	bl	80164b6 <USBD_CtlSendStatus>
 8015f8c:	e000      	b.n	8015f90 <USBD_GetDescriptor+0x2cc>
    return;
 8015f8e:	bf00      	nop
  }
}
 8015f90:	3710      	adds	r7, #16
 8015f92:	46bd      	mov	sp, r7
 8015f94:	bd80      	pop	{r7, pc}
 8015f96:	bf00      	nop

08015f98 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b084      	sub	sp, #16
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
 8015fa0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015fa2:	683b      	ldr	r3, [r7, #0]
 8015fa4:	889b      	ldrh	r3, [r3, #4]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d131      	bne.n	801600e <USBD_SetAddress+0x76>
 8015faa:	683b      	ldr	r3, [r7, #0]
 8015fac:	88db      	ldrh	r3, [r3, #6]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d12d      	bne.n	801600e <USBD_SetAddress+0x76>
 8015fb2:	683b      	ldr	r3, [r7, #0]
 8015fb4:	885b      	ldrh	r3, [r3, #2]
 8015fb6:	2b7f      	cmp	r3, #127	; 0x7f
 8015fb8:	d829      	bhi.n	801600e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015fba:	683b      	ldr	r3, [r7, #0]
 8015fbc:	885b      	ldrh	r3, [r3, #2]
 8015fbe:	b2db      	uxtb	r3, r3
 8015fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015fc4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fcc:	b2db      	uxtb	r3, r3
 8015fce:	2b03      	cmp	r3, #3
 8015fd0:	d104      	bne.n	8015fdc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015fd2:	6839      	ldr	r1, [r7, #0]
 8015fd4:	6878      	ldr	r0, [r7, #4]
 8015fd6:	f000 f9a3 	bl	8016320 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015fda:	e01d      	b.n	8016018 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	7bfa      	ldrb	r2, [r7, #15]
 8015fe0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015fe4:	7bfb      	ldrb	r3, [r7, #15]
 8015fe6:	4619      	mov	r1, r3
 8015fe8:	6878      	ldr	r0, [r7, #4]
 8015fea:	f004 fe7d 	bl	801ace8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	f000 fa61 	bl	80164b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015ff4:	7bfb      	ldrb	r3, [r7, #15]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d004      	beq.n	8016004 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	2202      	movs	r2, #2
 8015ffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016002:	e009      	b.n	8016018 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	2201      	movs	r2, #1
 8016008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801600c:	e004      	b.n	8016018 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801600e:	6839      	ldr	r1, [r7, #0]
 8016010:	6878      	ldr	r0, [r7, #4]
 8016012:	f000 f985 	bl	8016320 <USBD_CtlError>
  }
}
 8016016:	bf00      	nop
 8016018:	bf00      	nop
 801601a:	3710      	adds	r7, #16
 801601c:	46bd      	mov	sp, r7
 801601e:	bd80      	pop	{r7, pc}

08016020 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b084      	sub	sp, #16
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
 8016028:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801602a:	2300      	movs	r3, #0
 801602c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801602e:	683b      	ldr	r3, [r7, #0]
 8016030:	885b      	ldrh	r3, [r3, #2]
 8016032:	b2da      	uxtb	r2, r3
 8016034:	4b4c      	ldr	r3, [pc, #304]	; (8016168 <USBD_SetConfig+0x148>)
 8016036:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016038:	4b4b      	ldr	r3, [pc, #300]	; (8016168 <USBD_SetConfig+0x148>)
 801603a:	781b      	ldrb	r3, [r3, #0]
 801603c:	2b01      	cmp	r3, #1
 801603e:	d905      	bls.n	801604c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016040:	6839      	ldr	r1, [r7, #0]
 8016042:	6878      	ldr	r0, [r7, #4]
 8016044:	f000 f96c 	bl	8016320 <USBD_CtlError>
    return USBD_FAIL;
 8016048:	2303      	movs	r3, #3
 801604a:	e088      	b.n	801615e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016052:	b2db      	uxtb	r3, r3
 8016054:	2b02      	cmp	r3, #2
 8016056:	d002      	beq.n	801605e <USBD_SetConfig+0x3e>
 8016058:	2b03      	cmp	r3, #3
 801605a:	d025      	beq.n	80160a8 <USBD_SetConfig+0x88>
 801605c:	e071      	b.n	8016142 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801605e:	4b42      	ldr	r3, [pc, #264]	; (8016168 <USBD_SetConfig+0x148>)
 8016060:	781b      	ldrb	r3, [r3, #0]
 8016062:	2b00      	cmp	r3, #0
 8016064:	d01c      	beq.n	80160a0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8016066:	4b40      	ldr	r3, [pc, #256]	; (8016168 <USBD_SetConfig+0x148>)
 8016068:	781b      	ldrb	r3, [r3, #0]
 801606a:	461a      	mov	r2, r3
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016070:	4b3d      	ldr	r3, [pc, #244]	; (8016168 <USBD_SetConfig+0x148>)
 8016072:	781b      	ldrb	r3, [r3, #0]
 8016074:	4619      	mov	r1, r3
 8016076:	6878      	ldr	r0, [r7, #4]
 8016078:	f7ff f948 	bl	801530c <USBD_SetClassConfig>
 801607c:	4603      	mov	r3, r0
 801607e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016080:	7bfb      	ldrb	r3, [r7, #15]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d004      	beq.n	8016090 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8016086:	6839      	ldr	r1, [r7, #0]
 8016088:	6878      	ldr	r0, [r7, #4]
 801608a:	f000 f949 	bl	8016320 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801608e:	e065      	b.n	801615c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8016090:	6878      	ldr	r0, [r7, #4]
 8016092:	f000 fa10 	bl	80164b6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	2203      	movs	r2, #3
 801609a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801609e:	e05d      	b.n	801615c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f000 fa08 	bl	80164b6 <USBD_CtlSendStatus>
      break;
 80160a6:	e059      	b.n	801615c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80160a8:	4b2f      	ldr	r3, [pc, #188]	; (8016168 <USBD_SetConfig+0x148>)
 80160aa:	781b      	ldrb	r3, [r3, #0]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d112      	bne.n	80160d6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	2202      	movs	r2, #2
 80160b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80160b8:	4b2b      	ldr	r3, [pc, #172]	; (8016168 <USBD_SetConfig+0x148>)
 80160ba:	781b      	ldrb	r3, [r3, #0]
 80160bc:	461a      	mov	r2, r3
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80160c2:	4b29      	ldr	r3, [pc, #164]	; (8016168 <USBD_SetConfig+0x148>)
 80160c4:	781b      	ldrb	r3, [r3, #0]
 80160c6:	4619      	mov	r1, r3
 80160c8:	6878      	ldr	r0, [r7, #4]
 80160ca:	f7ff f93b 	bl	8015344 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80160ce:	6878      	ldr	r0, [r7, #4]
 80160d0:	f000 f9f1 	bl	80164b6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80160d4:	e042      	b.n	801615c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80160d6:	4b24      	ldr	r3, [pc, #144]	; (8016168 <USBD_SetConfig+0x148>)
 80160d8:	781b      	ldrb	r3, [r3, #0]
 80160da:	461a      	mov	r2, r3
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	685b      	ldr	r3, [r3, #4]
 80160e0:	429a      	cmp	r2, r3
 80160e2:	d02a      	beq.n	801613a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	685b      	ldr	r3, [r3, #4]
 80160e8:	b2db      	uxtb	r3, r3
 80160ea:	4619      	mov	r1, r3
 80160ec:	6878      	ldr	r0, [r7, #4]
 80160ee:	f7ff f929 	bl	8015344 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80160f2:	4b1d      	ldr	r3, [pc, #116]	; (8016168 <USBD_SetConfig+0x148>)
 80160f4:	781b      	ldrb	r3, [r3, #0]
 80160f6:	461a      	mov	r2, r3
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80160fc:	4b1a      	ldr	r3, [pc, #104]	; (8016168 <USBD_SetConfig+0x148>)
 80160fe:	781b      	ldrb	r3, [r3, #0]
 8016100:	4619      	mov	r1, r3
 8016102:	6878      	ldr	r0, [r7, #4]
 8016104:	f7ff f902 	bl	801530c <USBD_SetClassConfig>
 8016108:	4603      	mov	r3, r0
 801610a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801610c:	7bfb      	ldrb	r3, [r7, #15]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d00f      	beq.n	8016132 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8016112:	6839      	ldr	r1, [r7, #0]
 8016114:	6878      	ldr	r0, [r7, #4]
 8016116:	f000 f903 	bl	8016320 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	685b      	ldr	r3, [r3, #4]
 801611e:	b2db      	uxtb	r3, r3
 8016120:	4619      	mov	r1, r3
 8016122:	6878      	ldr	r0, [r7, #4]
 8016124:	f7ff f90e 	bl	8015344 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	2202      	movs	r2, #2
 801612c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016130:	e014      	b.n	801615c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8016132:	6878      	ldr	r0, [r7, #4]
 8016134:	f000 f9bf 	bl	80164b6 <USBD_CtlSendStatus>
      break;
 8016138:	e010      	b.n	801615c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801613a:	6878      	ldr	r0, [r7, #4]
 801613c:	f000 f9bb 	bl	80164b6 <USBD_CtlSendStatus>
      break;
 8016140:	e00c      	b.n	801615c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8016142:	6839      	ldr	r1, [r7, #0]
 8016144:	6878      	ldr	r0, [r7, #4]
 8016146:	f000 f8eb 	bl	8016320 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801614a:	4b07      	ldr	r3, [pc, #28]	; (8016168 <USBD_SetConfig+0x148>)
 801614c:	781b      	ldrb	r3, [r3, #0]
 801614e:	4619      	mov	r1, r3
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	f7ff f8f7 	bl	8015344 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016156:	2303      	movs	r3, #3
 8016158:	73fb      	strb	r3, [r7, #15]
      break;
 801615a:	bf00      	nop
  }

  return ret;
 801615c:	7bfb      	ldrb	r3, [r7, #15]
}
 801615e:	4618      	mov	r0, r3
 8016160:	3710      	adds	r7, #16
 8016162:	46bd      	mov	sp, r7
 8016164:	bd80      	pop	{r7, pc}
 8016166:	bf00      	nop
 8016168:	20000442 	.word	0x20000442

0801616c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801616c:	b580      	push	{r7, lr}
 801616e:	b082      	sub	sp, #8
 8016170:	af00      	add	r7, sp, #0
 8016172:	6078      	str	r0, [r7, #4]
 8016174:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016176:	683b      	ldr	r3, [r7, #0]
 8016178:	88db      	ldrh	r3, [r3, #6]
 801617a:	2b01      	cmp	r3, #1
 801617c:	d004      	beq.n	8016188 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801617e:	6839      	ldr	r1, [r7, #0]
 8016180:	6878      	ldr	r0, [r7, #4]
 8016182:	f000 f8cd 	bl	8016320 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016186:	e023      	b.n	80161d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801618e:	b2db      	uxtb	r3, r3
 8016190:	2b02      	cmp	r3, #2
 8016192:	dc02      	bgt.n	801619a <USBD_GetConfig+0x2e>
 8016194:	2b00      	cmp	r3, #0
 8016196:	dc03      	bgt.n	80161a0 <USBD_GetConfig+0x34>
 8016198:	e015      	b.n	80161c6 <USBD_GetConfig+0x5a>
 801619a:	2b03      	cmp	r3, #3
 801619c:	d00b      	beq.n	80161b6 <USBD_GetConfig+0x4a>
 801619e:	e012      	b.n	80161c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	2200      	movs	r2, #0
 80161a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	3308      	adds	r3, #8
 80161aa:	2201      	movs	r2, #1
 80161ac:	4619      	mov	r1, r3
 80161ae:	6878      	ldr	r0, [r7, #4]
 80161b0:	f000 f927 	bl	8016402 <USBD_CtlSendData>
        break;
 80161b4:	e00c      	b.n	80161d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	3304      	adds	r3, #4
 80161ba:	2201      	movs	r2, #1
 80161bc:	4619      	mov	r1, r3
 80161be:	6878      	ldr	r0, [r7, #4]
 80161c0:	f000 f91f 	bl	8016402 <USBD_CtlSendData>
        break;
 80161c4:	e004      	b.n	80161d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80161c6:	6839      	ldr	r1, [r7, #0]
 80161c8:	6878      	ldr	r0, [r7, #4]
 80161ca:	f000 f8a9 	bl	8016320 <USBD_CtlError>
        break;
 80161ce:	bf00      	nop
}
 80161d0:	bf00      	nop
 80161d2:	3708      	adds	r7, #8
 80161d4:	46bd      	mov	sp, r7
 80161d6:	bd80      	pop	{r7, pc}

080161d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161d8:	b580      	push	{r7, lr}
 80161da:	b082      	sub	sp, #8
 80161dc:	af00      	add	r7, sp, #0
 80161de:	6078      	str	r0, [r7, #4]
 80161e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161e8:	b2db      	uxtb	r3, r3
 80161ea:	3b01      	subs	r3, #1
 80161ec:	2b02      	cmp	r3, #2
 80161ee:	d81e      	bhi.n	801622e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80161f0:	683b      	ldr	r3, [r7, #0]
 80161f2:	88db      	ldrh	r3, [r3, #6]
 80161f4:	2b02      	cmp	r3, #2
 80161f6:	d004      	beq.n	8016202 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80161f8:	6839      	ldr	r1, [r7, #0]
 80161fa:	6878      	ldr	r0, [r7, #4]
 80161fc:	f000 f890 	bl	8016320 <USBD_CtlError>
        break;
 8016200:	e01a      	b.n	8016238 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	2201      	movs	r2, #1
 8016206:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801620e:	2b00      	cmp	r3, #0
 8016210:	d005      	beq.n	801621e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	68db      	ldr	r3, [r3, #12]
 8016216:	f043 0202 	orr.w	r2, r3, #2
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	330c      	adds	r3, #12
 8016222:	2202      	movs	r2, #2
 8016224:	4619      	mov	r1, r3
 8016226:	6878      	ldr	r0, [r7, #4]
 8016228:	f000 f8eb 	bl	8016402 <USBD_CtlSendData>
      break;
 801622c:	e004      	b.n	8016238 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801622e:	6839      	ldr	r1, [r7, #0]
 8016230:	6878      	ldr	r0, [r7, #4]
 8016232:	f000 f875 	bl	8016320 <USBD_CtlError>
      break;
 8016236:	bf00      	nop
  }
}
 8016238:	bf00      	nop
 801623a:	3708      	adds	r7, #8
 801623c:	46bd      	mov	sp, r7
 801623e:	bd80      	pop	{r7, pc}

08016240 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016240:	b580      	push	{r7, lr}
 8016242:	b082      	sub	sp, #8
 8016244:	af00      	add	r7, sp, #0
 8016246:	6078      	str	r0, [r7, #4]
 8016248:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801624a:	683b      	ldr	r3, [r7, #0]
 801624c:	885b      	ldrh	r3, [r3, #2]
 801624e:	2b01      	cmp	r3, #1
 8016250:	d106      	bne.n	8016260 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	2201      	movs	r2, #1
 8016256:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801625a:	6878      	ldr	r0, [r7, #4]
 801625c:	f000 f92b 	bl	80164b6 <USBD_CtlSendStatus>
  }
}
 8016260:	bf00      	nop
 8016262:	3708      	adds	r7, #8
 8016264:	46bd      	mov	sp, r7
 8016266:	bd80      	pop	{r7, pc}

08016268 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b082      	sub	sp, #8
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]
 8016270:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016278:	b2db      	uxtb	r3, r3
 801627a:	3b01      	subs	r3, #1
 801627c:	2b02      	cmp	r3, #2
 801627e:	d80b      	bhi.n	8016298 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016280:	683b      	ldr	r3, [r7, #0]
 8016282:	885b      	ldrh	r3, [r3, #2]
 8016284:	2b01      	cmp	r3, #1
 8016286:	d10c      	bne.n	80162a2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	2200      	movs	r2, #0
 801628c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016290:	6878      	ldr	r0, [r7, #4]
 8016292:	f000 f910 	bl	80164b6 <USBD_CtlSendStatus>
      }
      break;
 8016296:	e004      	b.n	80162a2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016298:	6839      	ldr	r1, [r7, #0]
 801629a:	6878      	ldr	r0, [r7, #4]
 801629c:	f000 f840 	bl	8016320 <USBD_CtlError>
      break;
 80162a0:	e000      	b.n	80162a4 <USBD_ClrFeature+0x3c>
      break;
 80162a2:	bf00      	nop
  }
}
 80162a4:	bf00      	nop
 80162a6:	3708      	adds	r7, #8
 80162a8:	46bd      	mov	sp, r7
 80162aa:	bd80      	pop	{r7, pc}

080162ac <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b084      	sub	sp, #16
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
 80162b4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80162b6:	683b      	ldr	r3, [r7, #0]
 80162b8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	781a      	ldrb	r2, [r3, #0]
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	3301      	adds	r3, #1
 80162c6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	781a      	ldrb	r2, [r3, #0]
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	3301      	adds	r3, #1
 80162d4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80162d6:	68f8      	ldr	r0, [r7, #12]
 80162d8:	f7ff fabb 	bl	8015852 <SWAPBYTE>
 80162dc:	4603      	mov	r3, r0
 80162de:	461a      	mov	r2, r3
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	3301      	adds	r3, #1
 80162e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	3301      	adds	r3, #1
 80162ee:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80162f0:	68f8      	ldr	r0, [r7, #12]
 80162f2:	f7ff faae 	bl	8015852 <SWAPBYTE>
 80162f6:	4603      	mov	r3, r0
 80162f8:	461a      	mov	r2, r3
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	3301      	adds	r3, #1
 8016302:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	3301      	adds	r3, #1
 8016308:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801630a:	68f8      	ldr	r0, [r7, #12]
 801630c:	f7ff faa1 	bl	8015852 <SWAPBYTE>
 8016310:	4603      	mov	r3, r0
 8016312:	461a      	mov	r2, r3
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	80da      	strh	r2, [r3, #6]
}
 8016318:	bf00      	nop
 801631a:	3710      	adds	r7, #16
 801631c:	46bd      	mov	sp, r7
 801631e:	bd80      	pop	{r7, pc}

08016320 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016320:	b580      	push	{r7, lr}
 8016322:	b082      	sub	sp, #8
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]
 8016328:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801632a:	2180      	movs	r1, #128	; 0x80
 801632c:	6878      	ldr	r0, [r7, #4]
 801632e:	f004 fc71 	bl	801ac14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016332:	2100      	movs	r1, #0
 8016334:	6878      	ldr	r0, [r7, #4]
 8016336:	f004 fc6d 	bl	801ac14 <USBD_LL_StallEP>
}
 801633a:	bf00      	nop
 801633c:	3708      	adds	r7, #8
 801633e:	46bd      	mov	sp, r7
 8016340:	bd80      	pop	{r7, pc}

08016342 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016342:	b580      	push	{r7, lr}
 8016344:	b086      	sub	sp, #24
 8016346:	af00      	add	r7, sp, #0
 8016348:	60f8      	str	r0, [r7, #12]
 801634a:	60b9      	str	r1, [r7, #8]
 801634c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801634e:	2300      	movs	r3, #0
 8016350:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d036      	beq.n	80163c6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801635c:	6938      	ldr	r0, [r7, #16]
 801635e:	f000 f836 	bl	80163ce <USBD_GetLen>
 8016362:	4603      	mov	r3, r0
 8016364:	3301      	adds	r3, #1
 8016366:	b29b      	uxth	r3, r3
 8016368:	005b      	lsls	r3, r3, #1
 801636a:	b29a      	uxth	r2, r3
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016370:	7dfb      	ldrb	r3, [r7, #23]
 8016372:	68ba      	ldr	r2, [r7, #8]
 8016374:	4413      	add	r3, r2
 8016376:	687a      	ldr	r2, [r7, #4]
 8016378:	7812      	ldrb	r2, [r2, #0]
 801637a:	701a      	strb	r2, [r3, #0]
  idx++;
 801637c:	7dfb      	ldrb	r3, [r7, #23]
 801637e:	3301      	adds	r3, #1
 8016380:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016382:	7dfb      	ldrb	r3, [r7, #23]
 8016384:	68ba      	ldr	r2, [r7, #8]
 8016386:	4413      	add	r3, r2
 8016388:	2203      	movs	r2, #3
 801638a:	701a      	strb	r2, [r3, #0]
  idx++;
 801638c:	7dfb      	ldrb	r3, [r7, #23]
 801638e:	3301      	adds	r3, #1
 8016390:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016392:	e013      	b.n	80163bc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016394:	7dfb      	ldrb	r3, [r7, #23]
 8016396:	68ba      	ldr	r2, [r7, #8]
 8016398:	4413      	add	r3, r2
 801639a:	693a      	ldr	r2, [r7, #16]
 801639c:	7812      	ldrb	r2, [r2, #0]
 801639e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80163a0:	693b      	ldr	r3, [r7, #16]
 80163a2:	3301      	adds	r3, #1
 80163a4:	613b      	str	r3, [r7, #16]
    idx++;
 80163a6:	7dfb      	ldrb	r3, [r7, #23]
 80163a8:	3301      	adds	r3, #1
 80163aa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80163ac:	7dfb      	ldrb	r3, [r7, #23]
 80163ae:	68ba      	ldr	r2, [r7, #8]
 80163b0:	4413      	add	r3, r2
 80163b2:	2200      	movs	r2, #0
 80163b4:	701a      	strb	r2, [r3, #0]
    idx++;
 80163b6:	7dfb      	ldrb	r3, [r7, #23]
 80163b8:	3301      	adds	r3, #1
 80163ba:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80163bc:	693b      	ldr	r3, [r7, #16]
 80163be:	781b      	ldrb	r3, [r3, #0]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d1e7      	bne.n	8016394 <USBD_GetString+0x52>
 80163c4:	e000      	b.n	80163c8 <USBD_GetString+0x86>
    return;
 80163c6:	bf00      	nop
  }
}
 80163c8:	3718      	adds	r7, #24
 80163ca:	46bd      	mov	sp, r7
 80163cc:	bd80      	pop	{r7, pc}

080163ce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80163ce:	b480      	push	{r7}
 80163d0:	b085      	sub	sp, #20
 80163d2:	af00      	add	r7, sp, #0
 80163d4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80163d6:	2300      	movs	r3, #0
 80163d8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80163de:	e005      	b.n	80163ec <USBD_GetLen+0x1e>
  {
    len++;
 80163e0:	7bfb      	ldrb	r3, [r7, #15]
 80163e2:	3301      	adds	r3, #1
 80163e4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80163e6:	68bb      	ldr	r3, [r7, #8]
 80163e8:	3301      	adds	r3, #1
 80163ea:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80163ec:	68bb      	ldr	r3, [r7, #8]
 80163ee:	781b      	ldrb	r3, [r3, #0]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d1f5      	bne.n	80163e0 <USBD_GetLen+0x12>
  }

  return len;
 80163f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80163f6:	4618      	mov	r0, r3
 80163f8:	3714      	adds	r7, #20
 80163fa:	46bd      	mov	sp, r7
 80163fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016400:	4770      	bx	lr

08016402 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016402:	b580      	push	{r7, lr}
 8016404:	b084      	sub	sp, #16
 8016406:	af00      	add	r7, sp, #0
 8016408:	60f8      	str	r0, [r7, #12]
 801640a:	60b9      	str	r1, [r7, #8]
 801640c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	2202      	movs	r2, #2
 8016412:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	687a      	ldr	r2, [r7, #4]
 801641a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	687a      	ldr	r2, [r7, #4]
 8016420:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	68ba      	ldr	r2, [r7, #8]
 8016426:	2100      	movs	r1, #0
 8016428:	68f8      	ldr	r0, [r7, #12]
 801642a:	f004 fc7c 	bl	801ad26 <USBD_LL_Transmit>

  return USBD_OK;
 801642e:	2300      	movs	r3, #0
}
 8016430:	4618      	mov	r0, r3
 8016432:	3710      	adds	r7, #16
 8016434:	46bd      	mov	sp, r7
 8016436:	bd80      	pop	{r7, pc}

08016438 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016438:	b580      	push	{r7, lr}
 801643a:	b084      	sub	sp, #16
 801643c:	af00      	add	r7, sp, #0
 801643e:	60f8      	str	r0, [r7, #12]
 8016440:	60b9      	str	r1, [r7, #8]
 8016442:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	68ba      	ldr	r2, [r7, #8]
 8016448:	2100      	movs	r1, #0
 801644a:	68f8      	ldr	r0, [r7, #12]
 801644c:	f004 fc6b 	bl	801ad26 <USBD_LL_Transmit>

  return USBD_OK;
 8016450:	2300      	movs	r3, #0
}
 8016452:	4618      	mov	r0, r3
 8016454:	3710      	adds	r7, #16
 8016456:	46bd      	mov	sp, r7
 8016458:	bd80      	pop	{r7, pc}

0801645a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801645a:	b580      	push	{r7, lr}
 801645c:	b084      	sub	sp, #16
 801645e:	af00      	add	r7, sp, #0
 8016460:	60f8      	str	r0, [r7, #12]
 8016462:	60b9      	str	r1, [r7, #8]
 8016464:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	2203      	movs	r2, #3
 801646a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	687a      	ldr	r2, [r7, #4]
 8016472:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	687a      	ldr	r2, [r7, #4]
 801647a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	68ba      	ldr	r2, [r7, #8]
 8016482:	2100      	movs	r1, #0
 8016484:	68f8      	ldr	r0, [r7, #12]
 8016486:	f004 fc6f 	bl	801ad68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801648a:	2300      	movs	r3, #0
}
 801648c:	4618      	mov	r0, r3
 801648e:	3710      	adds	r7, #16
 8016490:	46bd      	mov	sp, r7
 8016492:	bd80      	pop	{r7, pc}

08016494 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b084      	sub	sp, #16
 8016498:	af00      	add	r7, sp, #0
 801649a:	60f8      	str	r0, [r7, #12]
 801649c:	60b9      	str	r1, [r7, #8]
 801649e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	68ba      	ldr	r2, [r7, #8]
 80164a4:	2100      	movs	r1, #0
 80164a6:	68f8      	ldr	r0, [r7, #12]
 80164a8:	f004 fc5e 	bl	801ad68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80164ac:	2300      	movs	r3, #0
}
 80164ae:	4618      	mov	r0, r3
 80164b0:	3710      	adds	r7, #16
 80164b2:	46bd      	mov	sp, r7
 80164b4:	bd80      	pop	{r7, pc}

080164b6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80164b6:	b580      	push	{r7, lr}
 80164b8:	b082      	sub	sp, #8
 80164ba:	af00      	add	r7, sp, #0
 80164bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	2204      	movs	r2, #4
 80164c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80164c6:	2300      	movs	r3, #0
 80164c8:	2200      	movs	r2, #0
 80164ca:	2100      	movs	r1, #0
 80164cc:	6878      	ldr	r0, [r7, #4]
 80164ce:	f004 fc2a 	bl	801ad26 <USBD_LL_Transmit>

  return USBD_OK;
 80164d2:	2300      	movs	r3, #0
}
 80164d4:	4618      	mov	r0, r3
 80164d6:	3708      	adds	r7, #8
 80164d8:	46bd      	mov	sp, r7
 80164da:	bd80      	pop	{r7, pc}

080164dc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	b082      	sub	sp, #8
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	2205      	movs	r2, #5
 80164e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80164ec:	2300      	movs	r3, #0
 80164ee:	2200      	movs	r2, #0
 80164f0:	2100      	movs	r1, #0
 80164f2:	6878      	ldr	r0, [r7, #4]
 80164f4:	f004 fc38 	bl	801ad68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80164f8:	2300      	movs	r3, #0
}
 80164fa:	4618      	mov	r0, r3
 80164fc:	3708      	adds	r7, #8
 80164fe:	46bd      	mov	sp, r7
 8016500:	bd80      	pop	{r7, pc}
	...

08016504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8016504:	b480      	push	{r7}
 8016506:	b083      	sub	sp, #12
 8016508:	af00      	add	r7, sp, #0
 801650a:	4603      	mov	r3, r0
 801650c:	6039      	str	r1, [r7, #0]
 801650e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016514:	2b00      	cmp	r3, #0
 8016516:	db0a      	blt.n	801652e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016518:	683b      	ldr	r3, [r7, #0]
 801651a:	b2da      	uxtb	r2, r3
 801651c:	490c      	ldr	r1, [pc, #48]	; (8016550 <__NVIC_SetPriority+0x4c>)
 801651e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016522:	0112      	lsls	r2, r2, #4
 8016524:	b2d2      	uxtb	r2, r2
 8016526:	440b      	add	r3, r1
 8016528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801652c:	e00a      	b.n	8016544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801652e:	683b      	ldr	r3, [r7, #0]
 8016530:	b2da      	uxtb	r2, r3
 8016532:	4908      	ldr	r1, [pc, #32]	; (8016554 <__NVIC_SetPriority+0x50>)
 8016534:	79fb      	ldrb	r3, [r7, #7]
 8016536:	f003 030f 	and.w	r3, r3, #15
 801653a:	3b04      	subs	r3, #4
 801653c:	0112      	lsls	r2, r2, #4
 801653e:	b2d2      	uxtb	r2, r2
 8016540:	440b      	add	r3, r1
 8016542:	761a      	strb	r2, [r3, #24]
}
 8016544:	bf00      	nop
 8016546:	370c      	adds	r7, #12
 8016548:	46bd      	mov	sp, r7
 801654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801654e:	4770      	bx	lr
 8016550:	e000e100 	.word	0xe000e100
 8016554:	e000ed00 	.word	0xe000ed00

08016558 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016558:	b580      	push	{r7, lr}
 801655a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801655c:	4b05      	ldr	r3, [pc, #20]	; (8016574 <SysTick_Handler+0x1c>)
 801655e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016560:	f002 fd30 	bl	8018fc4 <xTaskGetSchedulerState>
 8016564:	4603      	mov	r3, r0
 8016566:	2b01      	cmp	r3, #1
 8016568:	d001      	beq.n	801656e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801656a:	f003 fc4d 	bl	8019e08 <xPortSysTickHandler>
  }
}
 801656e:	bf00      	nop
 8016570:	bd80      	pop	{r7, pc}
 8016572:	bf00      	nop
 8016574:	e000e010 	.word	0xe000e010

08016578 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016578:	b580      	push	{r7, lr}
 801657a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801657c:	2100      	movs	r1, #0
 801657e:	f06f 0004 	mvn.w	r0, #4
 8016582:	f7ff ffbf 	bl	8016504 <__NVIC_SetPriority>
#endif
}
 8016586:	bf00      	nop
 8016588:	bd80      	pop	{r7, pc}
	...

0801658c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801658c:	b480      	push	{r7}
 801658e:	b083      	sub	sp, #12
 8016590:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016592:	f3ef 8305 	mrs	r3, IPSR
 8016596:	603b      	str	r3, [r7, #0]
  return(result);
 8016598:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801659a:	2b00      	cmp	r3, #0
 801659c:	d003      	beq.n	80165a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801659e:	f06f 0305 	mvn.w	r3, #5
 80165a2:	607b      	str	r3, [r7, #4]
 80165a4:	e00c      	b.n	80165c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80165a6:	4b0a      	ldr	r3, [pc, #40]	; (80165d0 <osKernelInitialize+0x44>)
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d105      	bne.n	80165ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80165ae:	4b08      	ldr	r3, [pc, #32]	; (80165d0 <osKernelInitialize+0x44>)
 80165b0:	2201      	movs	r2, #1
 80165b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80165b4:	2300      	movs	r3, #0
 80165b6:	607b      	str	r3, [r7, #4]
 80165b8:	e002      	b.n	80165c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80165ba:	f04f 33ff 	mov.w	r3, #4294967295
 80165be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80165c0:	687b      	ldr	r3, [r7, #4]
}
 80165c2:	4618      	mov	r0, r3
 80165c4:	370c      	adds	r7, #12
 80165c6:	46bd      	mov	sp, r7
 80165c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165cc:	4770      	bx	lr
 80165ce:	bf00      	nop
 80165d0:	20000444 	.word	0x20000444

080165d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b082      	sub	sp, #8
 80165d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80165da:	f3ef 8305 	mrs	r3, IPSR
 80165de:	603b      	str	r3, [r7, #0]
  return(result);
 80165e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d003      	beq.n	80165ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80165e6:	f06f 0305 	mvn.w	r3, #5
 80165ea:	607b      	str	r3, [r7, #4]
 80165ec:	e010      	b.n	8016610 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80165ee:	4b0b      	ldr	r3, [pc, #44]	; (801661c <osKernelStart+0x48>)
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	2b01      	cmp	r3, #1
 80165f4:	d109      	bne.n	801660a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80165f6:	f7ff ffbf 	bl	8016578 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80165fa:	4b08      	ldr	r3, [pc, #32]	; (801661c <osKernelStart+0x48>)
 80165fc:	2202      	movs	r2, #2
 80165fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016600:	f001 ffd8 	bl	80185b4 <vTaskStartScheduler>
      stat = osOK;
 8016604:	2300      	movs	r3, #0
 8016606:	607b      	str	r3, [r7, #4]
 8016608:	e002      	b.n	8016610 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801660a:	f04f 33ff 	mov.w	r3, #4294967295
 801660e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016610:	687b      	ldr	r3, [r7, #4]
}
 8016612:	4618      	mov	r0, r3
 8016614:	3708      	adds	r7, #8
 8016616:	46bd      	mov	sp, r7
 8016618:	bd80      	pop	{r7, pc}
 801661a:	bf00      	nop
 801661c:	20000444 	.word	0x20000444

08016620 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8016620:	b580      	push	{r7, lr}
 8016622:	b082      	sub	sp, #8
 8016624:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016626:	f3ef 8305 	mrs	r3, IPSR
 801662a:	603b      	str	r3, [r7, #0]
  return(result);
 801662c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 801662e:	2b00      	cmp	r3, #0
 8016630:	d003      	beq.n	801663a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8016632:	f002 f8e1 	bl	80187f8 <xTaskGetTickCountFromISR>
 8016636:	6078      	str	r0, [r7, #4]
 8016638:	e002      	b.n	8016640 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 801663a:	f002 f8cd 	bl	80187d8 <xTaskGetTickCount>
 801663e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8016640:	687b      	ldr	r3, [r7, #4]
}
 8016642:	4618      	mov	r0, r3
 8016644:	3708      	adds	r7, #8
 8016646:	46bd      	mov	sp, r7
 8016648:	bd80      	pop	{r7, pc}

0801664a <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 801664a:	b480      	push	{r7}
 801664c:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 801664e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8016652:	4618      	mov	r0, r3
 8016654:	46bd      	mov	sp, r7
 8016656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801665a:	4770      	bx	lr

0801665c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801665c:	b580      	push	{r7, lr}
 801665e:	b08e      	sub	sp, #56	; 0x38
 8016660:	af04      	add	r7, sp, #16
 8016662:	60f8      	str	r0, [r7, #12]
 8016664:	60b9      	str	r1, [r7, #8]
 8016666:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016668:	2300      	movs	r3, #0
 801666a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801666c:	f3ef 8305 	mrs	r3, IPSR
 8016670:	617b      	str	r3, [r7, #20]
  return(result);
 8016672:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016674:	2b00      	cmp	r3, #0
 8016676:	d17e      	bne.n	8016776 <osThreadNew+0x11a>
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d07b      	beq.n	8016776 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801667e:	2380      	movs	r3, #128	; 0x80
 8016680:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016682:	2318      	movs	r3, #24
 8016684:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016686:	2300      	movs	r3, #0
 8016688:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801668a:	f04f 33ff 	mov.w	r3, #4294967295
 801668e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d045      	beq.n	8016722 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d002      	beq.n	80166a4 <osThreadNew+0x48>
        name = attr->name;
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	699b      	ldr	r3, [r3, #24]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d002      	beq.n	80166b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	699b      	ldr	r3, [r3, #24]
 80166b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80166b2:	69fb      	ldr	r3, [r7, #28]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d008      	beq.n	80166ca <osThreadNew+0x6e>
 80166b8:	69fb      	ldr	r3, [r7, #28]
 80166ba:	2b38      	cmp	r3, #56	; 0x38
 80166bc:	d805      	bhi.n	80166ca <osThreadNew+0x6e>
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	685b      	ldr	r3, [r3, #4]
 80166c2:	f003 0301 	and.w	r3, r3, #1
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d001      	beq.n	80166ce <osThreadNew+0x72>
        return (NULL);
 80166ca:	2300      	movs	r3, #0
 80166cc:	e054      	b.n	8016778 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	695b      	ldr	r3, [r3, #20]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d003      	beq.n	80166de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	695b      	ldr	r3, [r3, #20]
 80166da:	089b      	lsrs	r3, r3, #2
 80166dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	689b      	ldr	r3, [r3, #8]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d00e      	beq.n	8016704 <osThreadNew+0xa8>
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	68db      	ldr	r3, [r3, #12]
 80166ea:	2b5b      	cmp	r3, #91	; 0x5b
 80166ec:	d90a      	bls.n	8016704 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d006      	beq.n	8016704 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	695b      	ldr	r3, [r3, #20]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d002      	beq.n	8016704 <osThreadNew+0xa8>
        mem = 1;
 80166fe:	2301      	movs	r3, #1
 8016700:	61bb      	str	r3, [r7, #24]
 8016702:	e010      	b.n	8016726 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	689b      	ldr	r3, [r3, #8]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d10c      	bne.n	8016726 <osThreadNew+0xca>
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	68db      	ldr	r3, [r3, #12]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d108      	bne.n	8016726 <osThreadNew+0xca>
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	691b      	ldr	r3, [r3, #16]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d104      	bne.n	8016726 <osThreadNew+0xca>
          mem = 0;
 801671c:	2300      	movs	r3, #0
 801671e:	61bb      	str	r3, [r7, #24]
 8016720:	e001      	b.n	8016726 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8016722:	2300      	movs	r3, #0
 8016724:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016726:	69bb      	ldr	r3, [r7, #24]
 8016728:	2b01      	cmp	r3, #1
 801672a:	d110      	bne.n	801674e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8016730:	687a      	ldr	r2, [r7, #4]
 8016732:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016734:	9202      	str	r2, [sp, #8]
 8016736:	9301      	str	r3, [sp, #4]
 8016738:	69fb      	ldr	r3, [r7, #28]
 801673a:	9300      	str	r3, [sp, #0]
 801673c:	68bb      	ldr	r3, [r7, #8]
 801673e:	6a3a      	ldr	r2, [r7, #32]
 8016740:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016742:	68f8      	ldr	r0, [r7, #12]
 8016744:	f001 fce2 	bl	801810c <xTaskCreateStatic>
 8016748:	4603      	mov	r3, r0
 801674a:	613b      	str	r3, [r7, #16]
 801674c:	e013      	b.n	8016776 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801674e:	69bb      	ldr	r3, [r7, #24]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d110      	bne.n	8016776 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016754:	6a3b      	ldr	r3, [r7, #32]
 8016756:	b29a      	uxth	r2, r3
 8016758:	f107 0310 	add.w	r3, r7, #16
 801675c:	9301      	str	r3, [sp, #4]
 801675e:	69fb      	ldr	r3, [r7, #28]
 8016760:	9300      	str	r3, [sp, #0]
 8016762:	68bb      	ldr	r3, [r7, #8]
 8016764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016766:	68f8      	ldr	r0, [r7, #12]
 8016768:	f001 fd2d 	bl	80181c6 <xTaskCreate>
 801676c:	4603      	mov	r3, r0
 801676e:	2b01      	cmp	r3, #1
 8016770:	d001      	beq.n	8016776 <osThreadNew+0x11a>
            hTask = NULL;
 8016772:	2300      	movs	r3, #0
 8016774:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016776:	693b      	ldr	r3, [r7, #16]
}
 8016778:	4618      	mov	r0, r3
 801677a:	3728      	adds	r7, #40	; 0x28
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}

08016780 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016780:	b580      	push	{r7, lr}
 8016782:	b084      	sub	sp, #16
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016788:	f3ef 8305 	mrs	r3, IPSR
 801678c:	60bb      	str	r3, [r7, #8]
  return(result);
 801678e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016790:	2b00      	cmp	r3, #0
 8016792:	d003      	beq.n	801679c <osDelay+0x1c>
    stat = osErrorISR;
 8016794:	f06f 0305 	mvn.w	r3, #5
 8016798:	60fb      	str	r3, [r7, #12]
 801679a:	e007      	b.n	80167ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801679c:	2300      	movs	r3, #0
 801679e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d002      	beq.n	80167ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80167a6:	6878      	ldr	r0, [r7, #4]
 80167a8:	f001 fed0 	bl	801854c <vTaskDelay>
    }
  }

  return (stat);
 80167ac:	68fb      	ldr	r3, [r7, #12]
}
 80167ae:	4618      	mov	r0, r3
 80167b0:	3710      	adds	r7, #16
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd80      	pop	{r7, pc}

080167b6 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 80167b6:	b580      	push	{r7, lr}
 80167b8:	b086      	sub	sp, #24
 80167ba:	af00      	add	r7, sp, #0
 80167bc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80167be:	f3ef 8305 	mrs	r3, IPSR
 80167c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80167c4:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d003      	beq.n	80167d2 <osDelayUntil+0x1c>
    stat = osErrorISR;
 80167ca:	f06f 0305 	mvn.w	r3, #5
 80167ce:	617b      	str	r3, [r7, #20]
 80167d0:	e019      	b.n	8016806 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 80167d2:	2300      	movs	r3, #0
 80167d4:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 80167d6:	f001 ffff 	bl	80187d8 <xTaskGetTickCount>
 80167da:	4603      	mov	r3, r0
 80167dc:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80167de:	68bb      	ldr	r3, [r7, #8]
 80167e0:	687a      	ldr	r2, [r7, #4]
 80167e2:	1ad3      	subs	r3, r2, r3
 80167e4:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80167e6:	693b      	ldr	r3, [r7, #16]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d009      	beq.n	8016800 <osDelayUntil+0x4a>
 80167ec:	693b      	ldr	r3, [r7, #16]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	db06      	blt.n	8016800 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 80167f2:	f107 0308 	add.w	r3, r7, #8
 80167f6:	6939      	ldr	r1, [r7, #16]
 80167f8:	4618      	mov	r0, r3
 80167fa:	f001 fe29 	bl	8018450 <vTaskDelayUntil>
 80167fe:	e002      	b.n	8016806 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8016800:	f06f 0303 	mvn.w	r3, #3
 8016804:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8016806:	697b      	ldr	r3, [r7, #20]
}
 8016808:	4618      	mov	r0, r3
 801680a:	3718      	adds	r7, #24
 801680c:	46bd      	mov	sp, r7
 801680e:	bd80      	pop	{r7, pc}

08016810 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8016810:	b580      	push	{r7, lr}
 8016812:	b086      	sub	sp, #24
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8016818:	2300      	movs	r3, #0
 801681a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801681c:	f3ef 8305 	mrs	r3, IPSR
 8016820:	60fb      	str	r3, [r7, #12]
  return(result);
 8016822:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8016824:	2b00      	cmp	r3, #0
 8016826:	d12d      	bne.n	8016884 <osEventFlagsNew+0x74>
    mem = -1;
 8016828:	f04f 33ff 	mov.w	r3, #4294967295
 801682c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	2b00      	cmp	r3, #0
 8016832:	d015      	beq.n	8016860 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	689b      	ldr	r3, [r3, #8]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d006      	beq.n	801684a <osEventFlagsNew+0x3a>
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	68db      	ldr	r3, [r3, #12]
 8016840:	2b1f      	cmp	r3, #31
 8016842:	d902      	bls.n	801684a <osEventFlagsNew+0x3a>
        mem = 1;
 8016844:	2301      	movs	r3, #1
 8016846:	613b      	str	r3, [r7, #16]
 8016848:	e00c      	b.n	8016864 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	689b      	ldr	r3, [r3, #8]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d108      	bne.n	8016864 <osEventFlagsNew+0x54>
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	68db      	ldr	r3, [r3, #12]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d104      	bne.n	8016864 <osEventFlagsNew+0x54>
          mem = 0;
 801685a:	2300      	movs	r3, #0
 801685c:	613b      	str	r3, [r7, #16]
 801685e:	e001      	b.n	8016864 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8016860:	2300      	movs	r3, #0
 8016862:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8016864:	693b      	ldr	r3, [r7, #16]
 8016866:	2b01      	cmp	r3, #1
 8016868:	d106      	bne.n	8016878 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	689b      	ldr	r3, [r3, #8]
 801686e:	4618      	mov	r0, r3
 8016870:	f000 fa2c 	bl	8016ccc <xEventGroupCreateStatic>
 8016874:	6178      	str	r0, [r7, #20]
 8016876:	e005      	b.n	8016884 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8016878:	693b      	ldr	r3, [r7, #16]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d102      	bne.n	8016884 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 801687e:	f000 fa5c 	bl	8016d3a <xEventGroupCreate>
 8016882:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8016884:	697b      	ldr	r3, [r7, #20]
}
 8016886:	4618      	mov	r0, r3
 8016888:	3718      	adds	r7, #24
 801688a:	46bd      	mov	sp, r7
 801688c:	bd80      	pop	{r7, pc}
	...

08016890 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8016890:	b580      	push	{r7, lr}
 8016892:	b086      	sub	sp, #24
 8016894:	af00      	add	r7, sp, #0
 8016896:	6078      	str	r0, [r7, #4]
 8016898:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801689e:	693b      	ldr	r3, [r7, #16]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d004      	beq.n	80168ae <osEventFlagsSet+0x1e>
 80168a4:	683b      	ldr	r3, [r7, #0]
 80168a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d003      	beq.n	80168b6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80168ae:	f06f 0303 	mvn.w	r3, #3
 80168b2:	617b      	str	r3, [r7, #20]
 80168b4:	e028      	b.n	8016908 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80168b6:	f3ef 8305 	mrs	r3, IPSR
 80168ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80168bc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d01d      	beq.n	80168fe <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80168c2:	2300      	movs	r3, #0
 80168c4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80168c6:	f107 0308 	add.w	r3, r7, #8
 80168ca:	461a      	mov	r2, r3
 80168cc:	6839      	ldr	r1, [r7, #0]
 80168ce:	6938      	ldr	r0, [r7, #16]
 80168d0:	f000 fc54 	bl	801717c <xEventGroupSetBitsFromISR>
 80168d4:	4603      	mov	r3, r0
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d103      	bne.n	80168e2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80168da:	f06f 0302 	mvn.w	r3, #2
 80168de:	617b      	str	r3, [r7, #20]
 80168e0:	e012      	b.n	8016908 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80168e2:	683b      	ldr	r3, [r7, #0]
 80168e4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80168e6:	68bb      	ldr	r3, [r7, #8]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d00d      	beq.n	8016908 <osEventFlagsSet+0x78>
 80168ec:	4b09      	ldr	r3, [pc, #36]	; (8016914 <osEventFlagsSet+0x84>)
 80168ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80168f2:	601a      	str	r2, [r3, #0]
 80168f4:	f3bf 8f4f 	dsb	sy
 80168f8:	f3bf 8f6f 	isb	sy
 80168fc:	e004      	b.n	8016908 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80168fe:	6839      	ldr	r1, [r7, #0]
 8016900:	6938      	ldr	r0, [r7, #16]
 8016902:	f000 fb73 	bl	8016fec <xEventGroupSetBits>
 8016906:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016908:	697b      	ldr	r3, [r7, #20]
}
 801690a:	4618      	mov	r0, r3
 801690c:	3718      	adds	r7, #24
 801690e:	46bd      	mov	sp, r7
 8016910:	bd80      	pop	{r7, pc}
 8016912:	bf00      	nop
 8016914:	e000ed04 	.word	0xe000ed04

08016918 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8016918:	b580      	push	{r7, lr}
 801691a:	b086      	sub	sp, #24
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
 8016920:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016926:	693b      	ldr	r3, [r7, #16]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d004      	beq.n	8016936 <osEventFlagsClear+0x1e>
 801692c:	683b      	ldr	r3, [r7, #0]
 801692e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016932:	2b00      	cmp	r3, #0
 8016934:	d003      	beq.n	801693e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016936:	f06f 0303 	mvn.w	r3, #3
 801693a:	617b      	str	r3, [r7, #20]
 801693c:	e019      	b.n	8016972 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801693e:	f3ef 8305 	mrs	r3, IPSR
 8016942:	60fb      	str	r3, [r7, #12]
  return(result);
 8016944:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016946:	2b00      	cmp	r3, #0
 8016948:	d00e      	beq.n	8016968 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 801694a:	6938      	ldr	r0, [r7, #16]
 801694c:	f000 fb2a 	bl	8016fa4 <xEventGroupGetBitsFromISR>
 8016950:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8016952:	6839      	ldr	r1, [r7, #0]
 8016954:	6938      	ldr	r0, [r7, #16]
 8016956:	f000 fb11 	bl	8016f7c <xEventGroupClearBitsFromISR>
 801695a:	4603      	mov	r3, r0
 801695c:	2b00      	cmp	r3, #0
 801695e:	d108      	bne.n	8016972 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8016960:	f06f 0302 	mvn.w	r3, #2
 8016964:	617b      	str	r3, [r7, #20]
 8016966:	e004      	b.n	8016972 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8016968:	6839      	ldr	r1, [r7, #0]
 801696a:	6938      	ldr	r0, [r7, #16]
 801696c:	f000 face 	bl	8016f0c <xEventGroupClearBits>
 8016970:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016972:	697b      	ldr	r3, [r7, #20]
}
 8016974:	4618      	mov	r0, r3
 8016976:	3718      	adds	r7, #24
 8016978:	46bd      	mov	sp, r7
 801697a:	bd80      	pop	{r7, pc}

0801697c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 801697c:	b580      	push	{r7, lr}
 801697e:	b08c      	sub	sp, #48	; 0x30
 8016980:	af02      	add	r7, sp, #8
 8016982:	60f8      	str	r0, [r7, #12]
 8016984:	60b9      	str	r1, [r7, #8]
 8016986:	607a      	str	r2, [r7, #4]
 8016988:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801698e:	69bb      	ldr	r3, [r7, #24]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d004      	beq.n	801699e <osEventFlagsWait+0x22>
 8016994:	68bb      	ldr	r3, [r7, #8]
 8016996:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801699a:	2b00      	cmp	r3, #0
 801699c:	d003      	beq.n	80169a6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 801699e:	f06f 0303 	mvn.w	r3, #3
 80169a2:	61fb      	str	r3, [r7, #28]
 80169a4:	e04b      	b.n	8016a3e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80169a6:	f3ef 8305 	mrs	r3, IPSR
 80169aa:	617b      	str	r3, [r7, #20]
  return(result);
 80169ac:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d003      	beq.n	80169ba <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80169b2:	f06f 0305 	mvn.w	r3, #5
 80169b6:	61fb      	str	r3, [r7, #28]
 80169b8:	e041      	b.n	8016a3e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	f003 0301 	and.w	r3, r3, #1
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d002      	beq.n	80169ca <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80169c4:	2301      	movs	r3, #1
 80169c6:	627b      	str	r3, [r7, #36]	; 0x24
 80169c8:	e001      	b.n	80169ce <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80169ca:	2300      	movs	r3, #0
 80169cc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	f003 0302 	and.w	r3, r3, #2
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d002      	beq.n	80169de <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80169d8:	2300      	movs	r3, #0
 80169da:	623b      	str	r3, [r7, #32]
 80169dc:	e001      	b.n	80169e2 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80169de:	2301      	movs	r3, #1
 80169e0:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80169e2:	683b      	ldr	r3, [r7, #0]
 80169e4:	9300      	str	r3, [sp, #0]
 80169e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169e8:	6a3a      	ldr	r2, [r7, #32]
 80169ea:	68b9      	ldr	r1, [r7, #8]
 80169ec:	69b8      	ldr	r0, [r7, #24]
 80169ee:	f000 f9bf 	bl	8016d70 <xEventGroupWaitBits>
 80169f2:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	f003 0301 	and.w	r3, r3, #1
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d010      	beq.n	8016a20 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80169fe:	68ba      	ldr	r2, [r7, #8]
 8016a00:	69fb      	ldr	r3, [r7, #28]
 8016a02:	4013      	ands	r3, r2
 8016a04:	68ba      	ldr	r2, [r7, #8]
 8016a06:	429a      	cmp	r2, r3
 8016a08:	d019      	beq.n	8016a3e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8016a0a:	683b      	ldr	r3, [r7, #0]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d003      	beq.n	8016a18 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8016a10:	f06f 0301 	mvn.w	r3, #1
 8016a14:	61fb      	str	r3, [r7, #28]
 8016a16:	e012      	b.n	8016a3e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8016a18:	f06f 0302 	mvn.w	r3, #2
 8016a1c:	61fb      	str	r3, [r7, #28]
 8016a1e:	e00e      	b.n	8016a3e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8016a20:	68ba      	ldr	r2, [r7, #8]
 8016a22:	69fb      	ldr	r3, [r7, #28]
 8016a24:	4013      	ands	r3, r2
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d109      	bne.n	8016a3e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8016a2a:	683b      	ldr	r3, [r7, #0]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d003      	beq.n	8016a38 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8016a30:	f06f 0301 	mvn.w	r3, #1
 8016a34:	61fb      	str	r3, [r7, #28]
 8016a36:	e002      	b.n	8016a3e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8016a38:	f06f 0302 	mvn.w	r3, #2
 8016a3c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8016a3e:	69fb      	ldr	r3, [r7, #28]
}
 8016a40:	4618      	mov	r0, r3
 8016a42:	3728      	adds	r7, #40	; 0x28
 8016a44:	46bd      	mov	sp, r7
 8016a46:	bd80      	pop	{r7, pc}

08016a48 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b088      	sub	sp, #32
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8016a50:	2300      	movs	r3, #0
 8016a52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016a54:	f3ef 8305 	mrs	r3, IPSR
 8016a58:	60bb      	str	r3, [r7, #8]
  return(result);
 8016a5a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d174      	bne.n	8016b4a <osMutexNew+0x102>
    if (attr != NULL) {
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d003      	beq.n	8016a6e <osMutexNew+0x26>
      type = attr->attr_bits;
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	685b      	ldr	r3, [r3, #4]
 8016a6a:	61bb      	str	r3, [r7, #24]
 8016a6c:	e001      	b.n	8016a72 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8016a6e:	2300      	movs	r3, #0
 8016a70:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8016a72:	69bb      	ldr	r3, [r7, #24]
 8016a74:	f003 0301 	and.w	r3, r3, #1
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d002      	beq.n	8016a82 <osMutexNew+0x3a>
      rmtx = 1U;
 8016a7c:	2301      	movs	r3, #1
 8016a7e:	617b      	str	r3, [r7, #20]
 8016a80:	e001      	b.n	8016a86 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8016a82:	2300      	movs	r3, #0
 8016a84:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8016a86:	69bb      	ldr	r3, [r7, #24]
 8016a88:	f003 0308 	and.w	r3, r3, #8
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d15c      	bne.n	8016b4a <osMutexNew+0x102>
      mem = -1;
 8016a90:	f04f 33ff 	mov.w	r3, #4294967295
 8016a94:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d015      	beq.n	8016ac8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	689b      	ldr	r3, [r3, #8]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d006      	beq.n	8016ab2 <osMutexNew+0x6a>
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	68db      	ldr	r3, [r3, #12]
 8016aa8:	2b4f      	cmp	r3, #79	; 0x4f
 8016aaa:	d902      	bls.n	8016ab2 <osMutexNew+0x6a>
          mem = 1;
 8016aac:	2301      	movs	r3, #1
 8016aae:	613b      	str	r3, [r7, #16]
 8016ab0:	e00c      	b.n	8016acc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	689b      	ldr	r3, [r3, #8]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d108      	bne.n	8016acc <osMutexNew+0x84>
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	68db      	ldr	r3, [r3, #12]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d104      	bne.n	8016acc <osMutexNew+0x84>
            mem = 0;
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	613b      	str	r3, [r7, #16]
 8016ac6:	e001      	b.n	8016acc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8016ac8:	2300      	movs	r3, #0
 8016aca:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8016acc:	693b      	ldr	r3, [r7, #16]
 8016ace:	2b01      	cmp	r3, #1
 8016ad0:	d112      	bne.n	8016af8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8016ad2:	697b      	ldr	r3, [r7, #20]
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d007      	beq.n	8016ae8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	689b      	ldr	r3, [r3, #8]
 8016adc:	4619      	mov	r1, r3
 8016ade:	2004      	movs	r0, #4
 8016ae0:	f000 fd83 	bl	80175ea <xQueueCreateMutexStatic>
 8016ae4:	61f8      	str	r0, [r7, #28]
 8016ae6:	e016      	b.n	8016b16 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	689b      	ldr	r3, [r3, #8]
 8016aec:	4619      	mov	r1, r3
 8016aee:	2001      	movs	r0, #1
 8016af0:	f000 fd7b 	bl	80175ea <xQueueCreateMutexStatic>
 8016af4:	61f8      	str	r0, [r7, #28]
 8016af6:	e00e      	b.n	8016b16 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8016af8:	693b      	ldr	r3, [r7, #16]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d10b      	bne.n	8016b16 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8016afe:	697b      	ldr	r3, [r7, #20]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d004      	beq.n	8016b0e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8016b04:	2004      	movs	r0, #4
 8016b06:	f000 fd58 	bl	80175ba <xQueueCreateMutex>
 8016b0a:	61f8      	str	r0, [r7, #28]
 8016b0c:	e003      	b.n	8016b16 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8016b0e:	2001      	movs	r0, #1
 8016b10:	f000 fd53 	bl	80175ba <xQueueCreateMutex>
 8016b14:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8016b16:	69fb      	ldr	r3, [r7, #28]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d00c      	beq.n	8016b36 <osMutexNew+0xee>
        if (attr != NULL) {
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d003      	beq.n	8016b2a <osMutexNew+0xe2>
          name = attr->name;
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	60fb      	str	r3, [r7, #12]
 8016b28:	e001      	b.n	8016b2e <osMutexNew+0xe6>
        } else {
          name = NULL;
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8016b2e:	68f9      	ldr	r1, [r7, #12]
 8016b30:	69f8      	ldr	r0, [r7, #28]
 8016b32:	f001 fa8d 	bl	8018050 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8016b36:	69fb      	ldr	r3, [r7, #28]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d006      	beq.n	8016b4a <osMutexNew+0x102>
 8016b3c:	697b      	ldr	r3, [r7, #20]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d003      	beq.n	8016b4a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8016b42:	69fb      	ldr	r3, [r7, #28]
 8016b44:	f043 0301 	orr.w	r3, r3, #1
 8016b48:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8016b4a:	69fb      	ldr	r3, [r7, #28]
}
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	3720      	adds	r7, #32
 8016b50:	46bd      	mov	sp, r7
 8016b52:	bd80      	pop	{r7, pc}

08016b54 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b086      	sub	sp, #24
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
 8016b5c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	f023 0301 	bic.w	r3, r3, #1
 8016b64:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	f003 0301 	and.w	r3, r3, #1
 8016b6c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8016b6e:	2300      	movs	r3, #0
 8016b70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016b72:	f3ef 8305 	mrs	r3, IPSR
 8016b76:	60bb      	str	r3, [r7, #8]
  return(result);
 8016b78:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d003      	beq.n	8016b86 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8016b7e:	f06f 0305 	mvn.w	r3, #5
 8016b82:	617b      	str	r3, [r7, #20]
 8016b84:	e02c      	b.n	8016be0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8016b86:	693b      	ldr	r3, [r7, #16]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d103      	bne.n	8016b94 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8016b8c:	f06f 0303 	mvn.w	r3, #3
 8016b90:	617b      	str	r3, [r7, #20]
 8016b92:	e025      	b.n	8016be0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d011      	beq.n	8016bbe <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8016b9a:	6839      	ldr	r1, [r7, #0]
 8016b9c:	6938      	ldr	r0, [r7, #16]
 8016b9e:	f000 fd73 	bl	8017688 <xQueueTakeMutexRecursive>
 8016ba2:	4603      	mov	r3, r0
 8016ba4:	2b01      	cmp	r3, #1
 8016ba6:	d01b      	beq.n	8016be0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8016ba8:	683b      	ldr	r3, [r7, #0]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d003      	beq.n	8016bb6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8016bae:	f06f 0301 	mvn.w	r3, #1
 8016bb2:	617b      	str	r3, [r7, #20]
 8016bb4:	e014      	b.n	8016be0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8016bb6:	f06f 0302 	mvn.w	r3, #2
 8016bba:	617b      	str	r3, [r7, #20]
 8016bbc:	e010      	b.n	8016be0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8016bbe:	6839      	ldr	r1, [r7, #0]
 8016bc0:	6938      	ldr	r0, [r7, #16]
 8016bc2:	f001 f811 	bl	8017be8 <xQueueSemaphoreTake>
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	2b01      	cmp	r3, #1
 8016bca:	d009      	beq.n	8016be0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8016bcc:	683b      	ldr	r3, [r7, #0]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d003      	beq.n	8016bda <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8016bd2:	f06f 0301 	mvn.w	r3, #1
 8016bd6:	617b      	str	r3, [r7, #20]
 8016bd8:	e002      	b.n	8016be0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8016bda:	f06f 0302 	mvn.w	r3, #2
 8016bde:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8016be0:	697b      	ldr	r3, [r7, #20]
}
 8016be2:	4618      	mov	r0, r3
 8016be4:	3718      	adds	r7, #24
 8016be6:	46bd      	mov	sp, r7
 8016be8:	bd80      	pop	{r7, pc}

08016bea <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8016bea:	b580      	push	{r7, lr}
 8016bec:	b086      	sub	sp, #24
 8016bee:	af00      	add	r7, sp, #0
 8016bf0:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	f023 0301 	bic.w	r3, r3, #1
 8016bf8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	f003 0301 	and.w	r3, r3, #1
 8016c00:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8016c02:	2300      	movs	r3, #0
 8016c04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016c06:	f3ef 8305 	mrs	r3, IPSR
 8016c0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8016c0c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d003      	beq.n	8016c1a <osMutexRelease+0x30>
    stat = osErrorISR;
 8016c12:	f06f 0305 	mvn.w	r3, #5
 8016c16:	617b      	str	r3, [r7, #20]
 8016c18:	e01f      	b.n	8016c5a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8016c1a:	693b      	ldr	r3, [r7, #16]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d103      	bne.n	8016c28 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8016c20:	f06f 0303 	mvn.w	r3, #3
 8016c24:	617b      	str	r3, [r7, #20]
 8016c26:	e018      	b.n	8016c5a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d009      	beq.n	8016c42 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8016c2e:	6938      	ldr	r0, [r7, #16]
 8016c30:	f000 fcf6 	bl	8017620 <xQueueGiveMutexRecursive>
 8016c34:	4603      	mov	r3, r0
 8016c36:	2b01      	cmp	r3, #1
 8016c38:	d00f      	beq.n	8016c5a <osMutexRelease+0x70>
        stat = osErrorResource;
 8016c3a:	f06f 0302 	mvn.w	r3, #2
 8016c3e:	617b      	str	r3, [r7, #20]
 8016c40:	e00b      	b.n	8016c5a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8016c42:	2300      	movs	r3, #0
 8016c44:	2200      	movs	r2, #0
 8016c46:	2100      	movs	r1, #0
 8016c48:	6938      	ldr	r0, [r7, #16]
 8016c4a:	f000 fd53 	bl	80176f4 <xQueueGenericSend>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	2b01      	cmp	r3, #1
 8016c52:	d002      	beq.n	8016c5a <osMutexRelease+0x70>
        stat = osErrorResource;
 8016c54:	f06f 0302 	mvn.w	r3, #2
 8016c58:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8016c5a:	697b      	ldr	r3, [r7, #20]
}
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	3718      	adds	r7, #24
 8016c60:	46bd      	mov	sp, r7
 8016c62:	bd80      	pop	{r7, pc}

08016c64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016c64:	b480      	push	{r7}
 8016c66:	b085      	sub	sp, #20
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	60f8      	str	r0, [r7, #12]
 8016c6c:	60b9      	str	r1, [r7, #8]
 8016c6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	4a07      	ldr	r2, [pc, #28]	; (8016c90 <vApplicationGetIdleTaskMemory+0x2c>)
 8016c74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016c76:	68bb      	ldr	r3, [r7, #8]
 8016c78:	4a06      	ldr	r2, [pc, #24]	; (8016c94 <vApplicationGetIdleTaskMemory+0x30>)
 8016c7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	2280      	movs	r2, #128	; 0x80
 8016c80:	601a      	str	r2, [r3, #0]
}
 8016c82:	bf00      	nop
 8016c84:	3714      	adds	r7, #20
 8016c86:	46bd      	mov	sp, r7
 8016c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8c:	4770      	bx	lr
 8016c8e:	bf00      	nop
 8016c90:	20000448 	.word	0x20000448
 8016c94:	200004a4 	.word	0x200004a4

08016c98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016c98:	b480      	push	{r7}
 8016c9a:	b085      	sub	sp, #20
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	60f8      	str	r0, [r7, #12]
 8016ca0:	60b9      	str	r1, [r7, #8]
 8016ca2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	4a07      	ldr	r2, [pc, #28]	; (8016cc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8016ca8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016caa:	68bb      	ldr	r3, [r7, #8]
 8016cac:	4a06      	ldr	r2, [pc, #24]	; (8016cc8 <vApplicationGetTimerTaskMemory+0x30>)
 8016cae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016cb6:	601a      	str	r2, [r3, #0]
}
 8016cb8:	bf00      	nop
 8016cba:	3714      	adds	r7, #20
 8016cbc:	46bd      	mov	sp, r7
 8016cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc2:	4770      	bx	lr
 8016cc4:	200006a4 	.word	0x200006a4
 8016cc8:	20000700 	.word	0x20000700

08016ccc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b086      	sub	sp, #24
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d10a      	bne.n	8016cf0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cde:	f383 8811 	msr	BASEPRI, r3
 8016ce2:	f3bf 8f6f 	isb	sy
 8016ce6:	f3bf 8f4f 	dsb	sy
 8016cea:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016cec:	bf00      	nop
 8016cee:	e7fe      	b.n	8016cee <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8016cf0:	2320      	movs	r3, #32
 8016cf2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8016cf4:	68bb      	ldr	r3, [r7, #8]
 8016cf6:	2b20      	cmp	r3, #32
 8016cf8:	d00a      	beq.n	8016d10 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8016cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cfe:	f383 8811 	msr	BASEPRI, r3
 8016d02:	f3bf 8f6f 	isb	sy
 8016d06:	f3bf 8f4f 	dsb	sy
 8016d0a:	60fb      	str	r3, [r7, #12]
}
 8016d0c:	bf00      	nop
 8016d0e:	e7fe      	b.n	8016d0e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8016d14:	697b      	ldr	r3, [r7, #20]
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d00a      	beq.n	8016d30 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8016d1a:	697b      	ldr	r3, [r7, #20]
 8016d1c:	2200      	movs	r2, #0
 8016d1e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8016d20:	697b      	ldr	r3, [r7, #20]
 8016d22:	3304      	adds	r3, #4
 8016d24:	4618      	mov	r0, r3
 8016d26:	f000 fa3d 	bl	80171a4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8016d2a:	697b      	ldr	r3, [r7, #20]
 8016d2c:	2201      	movs	r2, #1
 8016d2e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8016d30:	697b      	ldr	r3, [r7, #20]
	}
 8016d32:	4618      	mov	r0, r3
 8016d34:	3718      	adds	r7, #24
 8016d36:	46bd      	mov	sp, r7
 8016d38:	bd80      	pop	{r7, pc}

08016d3a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8016d3a:	b580      	push	{r7, lr}
 8016d3c:	b082      	sub	sp, #8
 8016d3e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8016d40:	2020      	movs	r0, #32
 8016d42:	f003 f8f1 	bl	8019f28 <pvPortMalloc>
 8016d46:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d00a      	beq.n	8016d64 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	2200      	movs	r2, #0
 8016d52:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	3304      	adds	r3, #4
 8016d58:	4618      	mov	r0, r3
 8016d5a:	f000 fa23 	bl	80171a4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	2200      	movs	r2, #0
 8016d62:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8016d64:	687b      	ldr	r3, [r7, #4]
	}
 8016d66:	4618      	mov	r0, r3
 8016d68:	3708      	adds	r7, #8
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bd80      	pop	{r7, pc}
	...

08016d70 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b090      	sub	sp, #64	; 0x40
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	60f8      	str	r0, [r7, #12]
 8016d78:	60b9      	str	r1, [r7, #8]
 8016d7a:	607a      	str	r2, [r7, #4]
 8016d7c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8016d82:	2300      	movs	r3, #0
 8016d84:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8016d86:	2300      	movs	r3, #0
 8016d88:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d10a      	bne.n	8016da6 <xEventGroupWaitBits+0x36>
	__asm volatile
 8016d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d94:	f383 8811 	msr	BASEPRI, r3
 8016d98:	f3bf 8f6f 	isb	sy
 8016d9c:	f3bf 8f4f 	dsb	sy
 8016da0:	623b      	str	r3, [r7, #32]
}
 8016da2:	bf00      	nop
 8016da4:	e7fe      	b.n	8016da4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8016da6:	68bb      	ldr	r3, [r7, #8]
 8016da8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d00a      	beq.n	8016dc6 <xEventGroupWaitBits+0x56>
	__asm volatile
 8016db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016db4:	f383 8811 	msr	BASEPRI, r3
 8016db8:	f3bf 8f6f 	isb	sy
 8016dbc:	f3bf 8f4f 	dsb	sy
 8016dc0:	61fb      	str	r3, [r7, #28]
}
 8016dc2:	bf00      	nop
 8016dc4:	e7fe      	b.n	8016dc4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8016dc6:	68bb      	ldr	r3, [r7, #8]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d10a      	bne.n	8016de2 <xEventGroupWaitBits+0x72>
	__asm volatile
 8016dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dd0:	f383 8811 	msr	BASEPRI, r3
 8016dd4:	f3bf 8f6f 	isb	sy
 8016dd8:	f3bf 8f4f 	dsb	sy
 8016ddc:	61bb      	str	r3, [r7, #24]
}
 8016dde:	bf00      	nop
 8016de0:	e7fe      	b.n	8016de0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016de2:	f002 f8ef 	bl	8018fc4 <xTaskGetSchedulerState>
 8016de6:	4603      	mov	r3, r0
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d102      	bne.n	8016df2 <xEventGroupWaitBits+0x82>
 8016dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d101      	bne.n	8016df6 <xEventGroupWaitBits+0x86>
 8016df2:	2301      	movs	r3, #1
 8016df4:	e000      	b.n	8016df8 <xEventGroupWaitBits+0x88>
 8016df6:	2300      	movs	r3, #0
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d10a      	bne.n	8016e12 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8016dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e00:	f383 8811 	msr	BASEPRI, r3
 8016e04:	f3bf 8f6f 	isb	sy
 8016e08:	f3bf 8f4f 	dsb	sy
 8016e0c:	617b      	str	r3, [r7, #20]
}
 8016e0e:	bf00      	nop
 8016e10:	e7fe      	b.n	8016e10 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8016e12:	f001 fc35 	bl	8018680 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8016e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8016e1c:	683a      	ldr	r2, [r7, #0]
 8016e1e:	68b9      	ldr	r1, [r7, #8]
 8016e20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016e22:	f000 f988 	bl	8017136 <prvTestWaitCondition>
 8016e26:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8016e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d00e      	beq.n	8016e4c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8016e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e30:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8016e32:	2300      	movs	r3, #0
 8016e34:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d028      	beq.n	8016e8e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8016e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e3e:	681a      	ldr	r2, [r3, #0]
 8016e40:	68bb      	ldr	r3, [r7, #8]
 8016e42:	43db      	mvns	r3, r3
 8016e44:	401a      	ands	r2, r3
 8016e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e48:	601a      	str	r2, [r3, #0]
 8016e4a:	e020      	b.n	8016e8e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8016e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d104      	bne.n	8016e5c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8016e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e54:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8016e56:	2301      	movs	r3, #1
 8016e58:	633b      	str	r3, [r7, #48]	; 0x30
 8016e5a:	e018      	b.n	8016e8e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d003      	beq.n	8016e6a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8016e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016e68:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8016e6a:	683b      	ldr	r3, [r7, #0]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d003      	beq.n	8016e78 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8016e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8016e76:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8016e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e7a:	1d18      	adds	r0, r3, #4
 8016e7c:	68ba      	ldr	r2, [r7, #8]
 8016e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e80:	4313      	orrs	r3, r2
 8016e82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016e84:	4619      	mov	r1, r3
 8016e86:	f001 fe05 	bl	8018a94 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8016e8e:	f001 fc05 	bl	801869c <xTaskResumeAll>
 8016e92:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8016e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d031      	beq.n	8016efe <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8016e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d107      	bne.n	8016eb0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8016ea0:	4b19      	ldr	r3, [pc, #100]	; (8016f08 <xEventGroupWaitBits+0x198>)
 8016ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ea6:	601a      	str	r2, [r3, #0]
 8016ea8:	f3bf 8f4f 	dsb	sy
 8016eac:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8016eb0:	f002 f9fe 	bl	80192b0 <uxTaskResetEventItemValue>
 8016eb4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8016eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d11a      	bne.n	8016ef6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8016ec0:	f002 ff10 	bl	8019ce4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8016ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8016eca:	683a      	ldr	r2, [r7, #0]
 8016ecc:	68b9      	ldr	r1, [r7, #8]
 8016ece:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016ed0:	f000 f931 	bl	8017136 <prvTestWaitCondition>
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d009      	beq.n	8016eee <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d006      	beq.n	8016eee <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8016ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ee2:	681a      	ldr	r2, [r3, #0]
 8016ee4:	68bb      	ldr	r3, [r7, #8]
 8016ee6:	43db      	mvns	r3, r3
 8016ee8:	401a      	ands	r2, r3
 8016eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016eec:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8016eee:	2301      	movs	r3, #1
 8016ef0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8016ef2:	f002 ff27 	bl	8019d44 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8016ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ef8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016efc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8016efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016f00:	4618      	mov	r0, r3
 8016f02:	3740      	adds	r7, #64	; 0x40
 8016f04:	46bd      	mov	sp, r7
 8016f06:	bd80      	pop	{r7, pc}
 8016f08:	e000ed04 	.word	0xe000ed04

08016f0c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b086      	sub	sp, #24
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
 8016f14:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d10a      	bne.n	8016f36 <xEventGroupClearBits+0x2a>
	__asm volatile
 8016f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f24:	f383 8811 	msr	BASEPRI, r3
 8016f28:	f3bf 8f6f 	isb	sy
 8016f2c:	f3bf 8f4f 	dsb	sy
 8016f30:	60fb      	str	r3, [r7, #12]
}
 8016f32:	bf00      	nop
 8016f34:	e7fe      	b.n	8016f34 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8016f36:	683b      	ldr	r3, [r7, #0]
 8016f38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d00a      	beq.n	8016f56 <xEventGroupClearBits+0x4a>
	__asm volatile
 8016f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f44:	f383 8811 	msr	BASEPRI, r3
 8016f48:	f3bf 8f6f 	isb	sy
 8016f4c:	f3bf 8f4f 	dsb	sy
 8016f50:	60bb      	str	r3, [r7, #8]
}
 8016f52:	bf00      	nop
 8016f54:	e7fe      	b.n	8016f54 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8016f56:	f002 fec5 	bl	8019ce4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8016f5a:	697b      	ldr	r3, [r7, #20]
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8016f60:	697b      	ldr	r3, [r7, #20]
 8016f62:	681a      	ldr	r2, [r3, #0]
 8016f64:	683b      	ldr	r3, [r7, #0]
 8016f66:	43db      	mvns	r3, r3
 8016f68:	401a      	ands	r2, r3
 8016f6a:	697b      	ldr	r3, [r7, #20]
 8016f6c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8016f6e:	f002 fee9 	bl	8019d44 <vPortExitCritical>

	return uxReturn;
 8016f72:	693b      	ldr	r3, [r7, #16]
}
 8016f74:	4618      	mov	r0, r3
 8016f76:	3718      	adds	r7, #24
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	bd80      	pop	{r7, pc}

08016f7c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8016f7c:	b580      	push	{r7, lr}
 8016f7e:	b084      	sub	sp, #16
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	6078      	str	r0, [r7, #4]
 8016f84:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8016f86:	2300      	movs	r3, #0
 8016f88:	683a      	ldr	r2, [r7, #0]
 8016f8a:	6879      	ldr	r1, [r7, #4]
 8016f8c:	4804      	ldr	r0, [pc, #16]	; (8016fa0 <xEventGroupClearBitsFromISR+0x24>)
 8016f8e:	f002 fd5d 	bl	8019a4c <xTimerPendFunctionCallFromISR>
 8016f92:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8016f94:	68fb      	ldr	r3, [r7, #12]
	}
 8016f96:	4618      	mov	r0, r3
 8016f98:	3710      	adds	r7, #16
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	bd80      	pop	{r7, pc}
 8016f9e:	bf00      	nop
 8016fa0:	0801711d 	.word	0x0801711d

08016fa4 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8016fa4:	b480      	push	{r7}
 8016fa6:	b089      	sub	sp, #36	; 0x24
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016fb0:	f3ef 8211 	mrs	r2, BASEPRI
 8016fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fb8:	f383 8811 	msr	BASEPRI, r3
 8016fbc:	f3bf 8f6f 	isb	sy
 8016fc0:	f3bf 8f4f 	dsb	sy
 8016fc4:	60fa      	str	r2, [r7, #12]
 8016fc6:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016fc8:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016fca:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8016fcc:	69fb      	ldr	r3, [r7, #28]
 8016fce:	681b      	ldr	r3, [r3, #0]
 8016fd0:	617b      	str	r3, [r7, #20]
 8016fd2:	69bb      	ldr	r3, [r7, #24]
 8016fd4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016fd6:	693b      	ldr	r3, [r7, #16]
 8016fd8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8016fdc:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8016fde:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8016fe0:	4618      	mov	r0, r3
 8016fe2:	3724      	adds	r7, #36	; 0x24
 8016fe4:	46bd      	mov	sp, r7
 8016fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fea:	4770      	bx	lr

08016fec <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b08e      	sub	sp, #56	; 0x38
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	6078      	str	r0, [r7, #4]
 8016ff4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8016ffe:	2300      	movs	r3, #0
 8017000:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	2b00      	cmp	r3, #0
 8017006:	d10a      	bne.n	801701e <xEventGroupSetBits+0x32>
	__asm volatile
 8017008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801700c:	f383 8811 	msr	BASEPRI, r3
 8017010:	f3bf 8f6f 	isb	sy
 8017014:	f3bf 8f4f 	dsb	sy
 8017018:	613b      	str	r3, [r7, #16]
}
 801701a:	bf00      	nop
 801701c:	e7fe      	b.n	801701c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801701e:	683b      	ldr	r3, [r7, #0]
 8017020:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017024:	2b00      	cmp	r3, #0
 8017026:	d00a      	beq.n	801703e <xEventGroupSetBits+0x52>
	__asm volatile
 8017028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801702c:	f383 8811 	msr	BASEPRI, r3
 8017030:	f3bf 8f6f 	isb	sy
 8017034:	f3bf 8f4f 	dsb	sy
 8017038:	60fb      	str	r3, [r7, #12]
}
 801703a:	bf00      	nop
 801703c:	e7fe      	b.n	801703c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017040:	3304      	adds	r3, #4
 8017042:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017046:	3308      	adds	r3, #8
 8017048:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801704a:	f001 fb19 	bl	8018680 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017050:	68db      	ldr	r3, [r3, #12]
 8017052:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8017054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017056:	681a      	ldr	r2, [r3, #0]
 8017058:	683b      	ldr	r3, [r7, #0]
 801705a:	431a      	orrs	r2, r3
 801705c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801705e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8017060:	e03c      	b.n	80170dc <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8017062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017064:	685b      	ldr	r3, [r3, #4]
 8017066:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8017068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801706e:	2300      	movs	r3, #0
 8017070:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8017072:	69bb      	ldr	r3, [r7, #24]
 8017074:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017078:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801707a:	69bb      	ldr	r3, [r7, #24]
 801707c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017080:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8017082:	697b      	ldr	r3, [r7, #20]
 8017084:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017088:	2b00      	cmp	r3, #0
 801708a:	d108      	bne.n	801709e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 801708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801708e:	681a      	ldr	r2, [r3, #0]
 8017090:	69bb      	ldr	r3, [r7, #24]
 8017092:	4013      	ands	r3, r2
 8017094:	2b00      	cmp	r3, #0
 8017096:	d00b      	beq.n	80170b0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8017098:	2301      	movs	r3, #1
 801709a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801709c:	e008      	b.n	80170b0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170a0:	681a      	ldr	r2, [r3, #0]
 80170a2:	69bb      	ldr	r3, [r7, #24]
 80170a4:	4013      	ands	r3, r2
 80170a6:	69ba      	ldr	r2, [r7, #24]
 80170a8:	429a      	cmp	r2, r3
 80170aa:	d101      	bne.n	80170b0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80170ac:	2301      	movs	r3, #1
 80170ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80170b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d010      	beq.n	80170d8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80170b6:	697b      	ldr	r3, [r7, #20]
 80170b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d003      	beq.n	80170c8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80170c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80170c2:	69bb      	ldr	r3, [r7, #24]
 80170c4:	4313      	orrs	r3, r2
 80170c6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80170c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80170d0:	4619      	mov	r1, r3
 80170d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80170d4:	f001 fdaa 	bl	8018c2c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80170d8:	69fb      	ldr	r3, [r7, #28]
 80170da:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80170dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80170de:	6a3b      	ldr	r3, [r7, #32]
 80170e0:	429a      	cmp	r2, r3
 80170e2:	d1be      	bne.n	8017062 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80170e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170e6:	681a      	ldr	r2, [r3, #0]
 80170e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ea:	43db      	mvns	r3, r3
 80170ec:	401a      	ands	r2, r3
 80170ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170f0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80170f2:	f001 fad3 	bl	801869c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80170f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170f8:	681b      	ldr	r3, [r3, #0]
}
 80170fa:	4618      	mov	r0, r3
 80170fc:	3738      	adds	r7, #56	; 0x38
 80170fe:	46bd      	mov	sp, r7
 8017100:	bd80      	pop	{r7, pc}

08017102 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8017102:	b580      	push	{r7, lr}
 8017104:	b082      	sub	sp, #8
 8017106:	af00      	add	r7, sp, #0
 8017108:	6078      	str	r0, [r7, #4]
 801710a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801710c:	6839      	ldr	r1, [r7, #0]
 801710e:	6878      	ldr	r0, [r7, #4]
 8017110:	f7ff ff6c 	bl	8016fec <xEventGroupSetBits>
}
 8017114:	bf00      	nop
 8017116:	3708      	adds	r7, #8
 8017118:	46bd      	mov	sp, r7
 801711a:	bd80      	pop	{r7, pc}

0801711c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 801711c:	b580      	push	{r7, lr}
 801711e:	b082      	sub	sp, #8
 8017120:	af00      	add	r7, sp, #0
 8017122:	6078      	str	r0, [r7, #4]
 8017124:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017126:	6839      	ldr	r1, [r7, #0]
 8017128:	6878      	ldr	r0, [r7, #4]
 801712a:	f7ff feef 	bl	8016f0c <xEventGroupClearBits>
}
 801712e:	bf00      	nop
 8017130:	3708      	adds	r7, #8
 8017132:	46bd      	mov	sp, r7
 8017134:	bd80      	pop	{r7, pc}

08017136 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8017136:	b480      	push	{r7}
 8017138:	b087      	sub	sp, #28
 801713a:	af00      	add	r7, sp, #0
 801713c:	60f8      	str	r0, [r7, #12]
 801713e:	60b9      	str	r1, [r7, #8]
 8017140:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8017142:	2300      	movs	r3, #0
 8017144:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d107      	bne.n	801715c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801714c:	68fa      	ldr	r2, [r7, #12]
 801714e:	68bb      	ldr	r3, [r7, #8]
 8017150:	4013      	ands	r3, r2
 8017152:	2b00      	cmp	r3, #0
 8017154:	d00a      	beq.n	801716c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8017156:	2301      	movs	r3, #1
 8017158:	617b      	str	r3, [r7, #20]
 801715a:	e007      	b.n	801716c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801715c:	68fa      	ldr	r2, [r7, #12]
 801715e:	68bb      	ldr	r3, [r7, #8]
 8017160:	4013      	ands	r3, r2
 8017162:	68ba      	ldr	r2, [r7, #8]
 8017164:	429a      	cmp	r2, r3
 8017166:	d101      	bne.n	801716c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8017168:	2301      	movs	r3, #1
 801716a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 801716c:	697b      	ldr	r3, [r7, #20]
}
 801716e:	4618      	mov	r0, r3
 8017170:	371c      	adds	r7, #28
 8017172:	46bd      	mov	sp, r7
 8017174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017178:	4770      	bx	lr
	...

0801717c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801717c:	b580      	push	{r7, lr}
 801717e:	b086      	sub	sp, #24
 8017180:	af00      	add	r7, sp, #0
 8017182:	60f8      	str	r0, [r7, #12]
 8017184:	60b9      	str	r1, [r7, #8]
 8017186:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	68ba      	ldr	r2, [r7, #8]
 801718c:	68f9      	ldr	r1, [r7, #12]
 801718e:	4804      	ldr	r0, [pc, #16]	; (80171a0 <xEventGroupSetBitsFromISR+0x24>)
 8017190:	f002 fc5c 	bl	8019a4c <xTimerPendFunctionCallFromISR>
 8017194:	6178      	str	r0, [r7, #20]

		return xReturn;
 8017196:	697b      	ldr	r3, [r7, #20]
	}
 8017198:	4618      	mov	r0, r3
 801719a:	3718      	adds	r7, #24
 801719c:	46bd      	mov	sp, r7
 801719e:	bd80      	pop	{r7, pc}
 80171a0:	08017103 	.word	0x08017103

080171a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80171a4:	b480      	push	{r7}
 80171a6:	b083      	sub	sp, #12
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	f103 0208 	add.w	r2, r3, #8
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	f04f 32ff 	mov.w	r2, #4294967295
 80171bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	f103 0208 	add.w	r2, r3, #8
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	f103 0208 	add.w	r2, r3, #8
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	2200      	movs	r2, #0
 80171d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80171d8:	bf00      	nop
 80171da:	370c      	adds	r7, #12
 80171dc:	46bd      	mov	sp, r7
 80171de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171e2:	4770      	bx	lr

080171e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80171e4:	b480      	push	{r7}
 80171e6:	b083      	sub	sp, #12
 80171e8:	af00      	add	r7, sp, #0
 80171ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	2200      	movs	r2, #0
 80171f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80171f2:	bf00      	nop
 80171f4:	370c      	adds	r7, #12
 80171f6:	46bd      	mov	sp, r7
 80171f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171fc:	4770      	bx	lr

080171fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80171fe:	b480      	push	{r7}
 8017200:	b085      	sub	sp, #20
 8017202:	af00      	add	r7, sp, #0
 8017204:	6078      	str	r0, [r7, #4]
 8017206:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	685b      	ldr	r3, [r3, #4]
 801720c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801720e:	683b      	ldr	r3, [r7, #0]
 8017210:	68fa      	ldr	r2, [r7, #12]
 8017212:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	689a      	ldr	r2, [r3, #8]
 8017218:	683b      	ldr	r3, [r7, #0]
 801721a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	689b      	ldr	r3, [r3, #8]
 8017220:	683a      	ldr	r2, [r7, #0]
 8017222:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	683a      	ldr	r2, [r7, #0]
 8017228:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801722a:	683b      	ldr	r3, [r7, #0]
 801722c:	687a      	ldr	r2, [r7, #4]
 801722e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	1c5a      	adds	r2, r3, #1
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	601a      	str	r2, [r3, #0]
}
 801723a:	bf00      	nop
 801723c:	3714      	adds	r7, #20
 801723e:	46bd      	mov	sp, r7
 8017240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017244:	4770      	bx	lr

08017246 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017246:	b480      	push	{r7}
 8017248:	b085      	sub	sp, #20
 801724a:	af00      	add	r7, sp, #0
 801724c:	6078      	str	r0, [r7, #4]
 801724e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017250:	683b      	ldr	r3, [r7, #0]
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017256:	68bb      	ldr	r3, [r7, #8]
 8017258:	f1b3 3fff 	cmp.w	r3, #4294967295
 801725c:	d103      	bne.n	8017266 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	691b      	ldr	r3, [r3, #16]
 8017262:	60fb      	str	r3, [r7, #12]
 8017264:	e00c      	b.n	8017280 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	3308      	adds	r3, #8
 801726a:	60fb      	str	r3, [r7, #12]
 801726c:	e002      	b.n	8017274 <vListInsert+0x2e>
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	685b      	ldr	r3, [r3, #4]
 8017272:	60fb      	str	r3, [r7, #12]
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	685b      	ldr	r3, [r3, #4]
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	68ba      	ldr	r2, [r7, #8]
 801727c:	429a      	cmp	r2, r3
 801727e:	d2f6      	bcs.n	801726e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	685a      	ldr	r2, [r3, #4]
 8017284:	683b      	ldr	r3, [r7, #0]
 8017286:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017288:	683b      	ldr	r3, [r7, #0]
 801728a:	685b      	ldr	r3, [r3, #4]
 801728c:	683a      	ldr	r2, [r7, #0]
 801728e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017290:	683b      	ldr	r3, [r7, #0]
 8017292:	68fa      	ldr	r2, [r7, #12]
 8017294:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	683a      	ldr	r2, [r7, #0]
 801729a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801729c:	683b      	ldr	r3, [r7, #0]
 801729e:	687a      	ldr	r2, [r7, #4]
 80172a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	681b      	ldr	r3, [r3, #0]
 80172a6:	1c5a      	adds	r2, r3, #1
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	601a      	str	r2, [r3, #0]
}
 80172ac:	bf00      	nop
 80172ae:	3714      	adds	r7, #20
 80172b0:	46bd      	mov	sp, r7
 80172b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b6:	4770      	bx	lr

080172b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80172b8:	b480      	push	{r7}
 80172ba:	b085      	sub	sp, #20
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	691b      	ldr	r3, [r3, #16]
 80172c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	685b      	ldr	r3, [r3, #4]
 80172ca:	687a      	ldr	r2, [r7, #4]
 80172cc:	6892      	ldr	r2, [r2, #8]
 80172ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	689b      	ldr	r3, [r3, #8]
 80172d4:	687a      	ldr	r2, [r7, #4]
 80172d6:	6852      	ldr	r2, [r2, #4]
 80172d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	685b      	ldr	r3, [r3, #4]
 80172de:	687a      	ldr	r2, [r7, #4]
 80172e0:	429a      	cmp	r2, r3
 80172e2:	d103      	bne.n	80172ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	689a      	ldr	r2, [r3, #8]
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	2200      	movs	r2, #0
 80172f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	1e5a      	subs	r2, r3, #1
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	681b      	ldr	r3, [r3, #0]
}
 8017300:	4618      	mov	r0, r3
 8017302:	3714      	adds	r7, #20
 8017304:	46bd      	mov	sp, r7
 8017306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801730a:	4770      	bx	lr

0801730c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801730c:	b580      	push	{r7, lr}
 801730e:	b084      	sub	sp, #16
 8017310:	af00      	add	r7, sp, #0
 8017312:	6078      	str	r0, [r7, #4]
 8017314:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d10a      	bne.n	8017336 <xQueueGenericReset+0x2a>
	__asm volatile
 8017320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017324:	f383 8811 	msr	BASEPRI, r3
 8017328:	f3bf 8f6f 	isb	sy
 801732c:	f3bf 8f4f 	dsb	sy
 8017330:	60bb      	str	r3, [r7, #8]
}
 8017332:	bf00      	nop
 8017334:	e7fe      	b.n	8017334 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017336:	f002 fcd5 	bl	8019ce4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	681a      	ldr	r2, [r3, #0]
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017342:	68f9      	ldr	r1, [r7, #12]
 8017344:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017346:	fb01 f303 	mul.w	r3, r1, r3
 801734a:	441a      	add	r2, r3
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	2200      	movs	r2, #0
 8017354:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	681a      	ldr	r2, [r3, #0]
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	681a      	ldr	r2, [r3, #0]
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017366:	3b01      	subs	r3, #1
 8017368:	68f9      	ldr	r1, [r7, #12]
 801736a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801736c:	fb01 f303 	mul.w	r3, r1, r3
 8017370:	441a      	add	r2, r3
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	22ff      	movs	r2, #255	; 0xff
 801737a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	22ff      	movs	r2, #255	; 0xff
 8017382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017386:	683b      	ldr	r3, [r7, #0]
 8017388:	2b00      	cmp	r3, #0
 801738a:	d114      	bne.n	80173b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	691b      	ldr	r3, [r3, #16]
 8017390:	2b00      	cmp	r3, #0
 8017392:	d01a      	beq.n	80173ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	3310      	adds	r3, #16
 8017398:	4618      	mov	r0, r3
 801739a:	f001 fbe3 	bl	8018b64 <xTaskRemoveFromEventList>
 801739e:	4603      	mov	r3, r0
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d012      	beq.n	80173ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80173a4:	4b0c      	ldr	r3, [pc, #48]	; (80173d8 <xQueueGenericReset+0xcc>)
 80173a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80173aa:	601a      	str	r2, [r3, #0]
 80173ac:	f3bf 8f4f 	dsb	sy
 80173b0:	f3bf 8f6f 	isb	sy
 80173b4:	e009      	b.n	80173ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	3310      	adds	r3, #16
 80173ba:	4618      	mov	r0, r3
 80173bc:	f7ff fef2 	bl	80171a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	3324      	adds	r3, #36	; 0x24
 80173c4:	4618      	mov	r0, r3
 80173c6:	f7ff feed 	bl	80171a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80173ca:	f002 fcbb 	bl	8019d44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80173ce:	2301      	movs	r3, #1
}
 80173d0:	4618      	mov	r0, r3
 80173d2:	3710      	adds	r7, #16
 80173d4:	46bd      	mov	sp, r7
 80173d6:	bd80      	pop	{r7, pc}
 80173d8:	e000ed04 	.word	0xe000ed04

080173dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80173dc:	b580      	push	{r7, lr}
 80173de:	b08e      	sub	sp, #56	; 0x38
 80173e0:	af02      	add	r7, sp, #8
 80173e2:	60f8      	str	r0, [r7, #12]
 80173e4:	60b9      	str	r1, [r7, #8]
 80173e6:	607a      	str	r2, [r7, #4]
 80173e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d10a      	bne.n	8017406 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80173f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173f4:	f383 8811 	msr	BASEPRI, r3
 80173f8:	f3bf 8f6f 	isb	sy
 80173fc:	f3bf 8f4f 	dsb	sy
 8017400:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017402:	bf00      	nop
 8017404:	e7fe      	b.n	8017404 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017406:	683b      	ldr	r3, [r7, #0]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d10a      	bne.n	8017422 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017410:	f383 8811 	msr	BASEPRI, r3
 8017414:	f3bf 8f6f 	isb	sy
 8017418:	f3bf 8f4f 	dsb	sy
 801741c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801741e:	bf00      	nop
 8017420:	e7fe      	b.n	8017420 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	2b00      	cmp	r3, #0
 8017426:	d002      	beq.n	801742e <xQueueGenericCreateStatic+0x52>
 8017428:	68bb      	ldr	r3, [r7, #8]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d001      	beq.n	8017432 <xQueueGenericCreateStatic+0x56>
 801742e:	2301      	movs	r3, #1
 8017430:	e000      	b.n	8017434 <xQueueGenericCreateStatic+0x58>
 8017432:	2300      	movs	r3, #0
 8017434:	2b00      	cmp	r3, #0
 8017436:	d10a      	bne.n	801744e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801743c:	f383 8811 	msr	BASEPRI, r3
 8017440:	f3bf 8f6f 	isb	sy
 8017444:	f3bf 8f4f 	dsb	sy
 8017448:	623b      	str	r3, [r7, #32]
}
 801744a:	bf00      	nop
 801744c:	e7fe      	b.n	801744c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d102      	bne.n	801745a <xQueueGenericCreateStatic+0x7e>
 8017454:	68bb      	ldr	r3, [r7, #8]
 8017456:	2b00      	cmp	r3, #0
 8017458:	d101      	bne.n	801745e <xQueueGenericCreateStatic+0x82>
 801745a:	2301      	movs	r3, #1
 801745c:	e000      	b.n	8017460 <xQueueGenericCreateStatic+0x84>
 801745e:	2300      	movs	r3, #0
 8017460:	2b00      	cmp	r3, #0
 8017462:	d10a      	bne.n	801747a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8017464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017468:	f383 8811 	msr	BASEPRI, r3
 801746c:	f3bf 8f6f 	isb	sy
 8017470:	f3bf 8f4f 	dsb	sy
 8017474:	61fb      	str	r3, [r7, #28]
}
 8017476:	bf00      	nop
 8017478:	e7fe      	b.n	8017478 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801747a:	2350      	movs	r3, #80	; 0x50
 801747c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801747e:	697b      	ldr	r3, [r7, #20]
 8017480:	2b50      	cmp	r3, #80	; 0x50
 8017482:	d00a      	beq.n	801749a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8017484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017488:	f383 8811 	msr	BASEPRI, r3
 801748c:	f3bf 8f6f 	isb	sy
 8017490:	f3bf 8f4f 	dsb	sy
 8017494:	61bb      	str	r3, [r7, #24]
}
 8017496:	bf00      	nop
 8017498:	e7fe      	b.n	8017498 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801749a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801749c:	683b      	ldr	r3, [r7, #0]
 801749e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80174a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d00d      	beq.n	80174c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80174a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174a8:	2201      	movs	r2, #1
 80174aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80174ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80174b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174b4:	9300      	str	r3, [sp, #0]
 80174b6:	4613      	mov	r3, r2
 80174b8:	687a      	ldr	r2, [r7, #4]
 80174ba:	68b9      	ldr	r1, [r7, #8]
 80174bc:	68f8      	ldr	r0, [r7, #12]
 80174be:	f000 f83f 	bl	8017540 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80174c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80174c4:	4618      	mov	r0, r3
 80174c6:	3730      	adds	r7, #48	; 0x30
 80174c8:	46bd      	mov	sp, r7
 80174ca:	bd80      	pop	{r7, pc}

080174cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b08a      	sub	sp, #40	; 0x28
 80174d0:	af02      	add	r7, sp, #8
 80174d2:	60f8      	str	r0, [r7, #12]
 80174d4:	60b9      	str	r1, [r7, #8]
 80174d6:	4613      	mov	r3, r2
 80174d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d10a      	bne.n	80174f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80174e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174e4:	f383 8811 	msr	BASEPRI, r3
 80174e8:	f3bf 8f6f 	isb	sy
 80174ec:	f3bf 8f4f 	dsb	sy
 80174f0:	613b      	str	r3, [r7, #16]
}
 80174f2:	bf00      	nop
 80174f4:	e7fe      	b.n	80174f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	68ba      	ldr	r2, [r7, #8]
 80174fa:	fb02 f303 	mul.w	r3, r2, r3
 80174fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8017500:	69fb      	ldr	r3, [r7, #28]
 8017502:	3350      	adds	r3, #80	; 0x50
 8017504:	4618      	mov	r0, r3
 8017506:	f002 fd0f 	bl	8019f28 <pvPortMalloc>
 801750a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801750c:	69bb      	ldr	r3, [r7, #24]
 801750e:	2b00      	cmp	r3, #0
 8017510:	d011      	beq.n	8017536 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8017512:	69bb      	ldr	r3, [r7, #24]
 8017514:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017516:	697b      	ldr	r3, [r7, #20]
 8017518:	3350      	adds	r3, #80	; 0x50
 801751a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801751c:	69bb      	ldr	r3, [r7, #24]
 801751e:	2200      	movs	r2, #0
 8017520:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017524:	79fa      	ldrb	r2, [r7, #7]
 8017526:	69bb      	ldr	r3, [r7, #24]
 8017528:	9300      	str	r3, [sp, #0]
 801752a:	4613      	mov	r3, r2
 801752c:	697a      	ldr	r2, [r7, #20]
 801752e:	68b9      	ldr	r1, [r7, #8]
 8017530:	68f8      	ldr	r0, [r7, #12]
 8017532:	f000 f805 	bl	8017540 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017536:	69bb      	ldr	r3, [r7, #24]
	}
 8017538:	4618      	mov	r0, r3
 801753a:	3720      	adds	r7, #32
 801753c:	46bd      	mov	sp, r7
 801753e:	bd80      	pop	{r7, pc}

08017540 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017540:	b580      	push	{r7, lr}
 8017542:	b084      	sub	sp, #16
 8017544:	af00      	add	r7, sp, #0
 8017546:	60f8      	str	r0, [r7, #12]
 8017548:	60b9      	str	r1, [r7, #8]
 801754a:	607a      	str	r2, [r7, #4]
 801754c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801754e:	68bb      	ldr	r3, [r7, #8]
 8017550:	2b00      	cmp	r3, #0
 8017552:	d103      	bne.n	801755c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017554:	69bb      	ldr	r3, [r7, #24]
 8017556:	69ba      	ldr	r2, [r7, #24]
 8017558:	601a      	str	r2, [r3, #0]
 801755a:	e002      	b.n	8017562 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801755c:	69bb      	ldr	r3, [r7, #24]
 801755e:	687a      	ldr	r2, [r7, #4]
 8017560:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017562:	69bb      	ldr	r3, [r7, #24]
 8017564:	68fa      	ldr	r2, [r7, #12]
 8017566:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017568:	69bb      	ldr	r3, [r7, #24]
 801756a:	68ba      	ldr	r2, [r7, #8]
 801756c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801756e:	2101      	movs	r1, #1
 8017570:	69b8      	ldr	r0, [r7, #24]
 8017572:	f7ff fecb 	bl	801730c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017576:	69bb      	ldr	r3, [r7, #24]
 8017578:	78fa      	ldrb	r2, [r7, #3]
 801757a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801757e:	bf00      	nop
 8017580:	3710      	adds	r7, #16
 8017582:	46bd      	mov	sp, r7
 8017584:	bd80      	pop	{r7, pc}

08017586 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8017586:	b580      	push	{r7, lr}
 8017588:	b082      	sub	sp, #8
 801758a:	af00      	add	r7, sp, #0
 801758c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d00e      	beq.n	80175b2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	2200      	movs	r2, #0
 8017598:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	2200      	movs	r2, #0
 801759e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	2200      	movs	r2, #0
 80175a4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80175a6:	2300      	movs	r3, #0
 80175a8:	2200      	movs	r2, #0
 80175aa:	2100      	movs	r1, #0
 80175ac:	6878      	ldr	r0, [r7, #4]
 80175ae:	f000 f8a1 	bl	80176f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80175b2:	bf00      	nop
 80175b4:	3708      	adds	r7, #8
 80175b6:	46bd      	mov	sp, r7
 80175b8:	bd80      	pop	{r7, pc}

080175ba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80175ba:	b580      	push	{r7, lr}
 80175bc:	b086      	sub	sp, #24
 80175be:	af00      	add	r7, sp, #0
 80175c0:	4603      	mov	r3, r0
 80175c2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80175c4:	2301      	movs	r3, #1
 80175c6:	617b      	str	r3, [r7, #20]
 80175c8:	2300      	movs	r3, #0
 80175ca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80175cc:	79fb      	ldrb	r3, [r7, #7]
 80175ce:	461a      	mov	r2, r3
 80175d0:	6939      	ldr	r1, [r7, #16]
 80175d2:	6978      	ldr	r0, [r7, #20]
 80175d4:	f7ff ff7a 	bl	80174cc <xQueueGenericCreate>
 80175d8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80175da:	68f8      	ldr	r0, [r7, #12]
 80175dc:	f7ff ffd3 	bl	8017586 <prvInitialiseMutex>

		return xNewQueue;
 80175e0:	68fb      	ldr	r3, [r7, #12]
	}
 80175e2:	4618      	mov	r0, r3
 80175e4:	3718      	adds	r7, #24
 80175e6:	46bd      	mov	sp, r7
 80175e8:	bd80      	pop	{r7, pc}

080175ea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80175ea:	b580      	push	{r7, lr}
 80175ec:	b088      	sub	sp, #32
 80175ee:	af02      	add	r7, sp, #8
 80175f0:	4603      	mov	r3, r0
 80175f2:	6039      	str	r1, [r7, #0]
 80175f4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80175f6:	2301      	movs	r3, #1
 80175f8:	617b      	str	r3, [r7, #20]
 80175fa:	2300      	movs	r3, #0
 80175fc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80175fe:	79fb      	ldrb	r3, [r7, #7]
 8017600:	9300      	str	r3, [sp, #0]
 8017602:	683b      	ldr	r3, [r7, #0]
 8017604:	2200      	movs	r2, #0
 8017606:	6939      	ldr	r1, [r7, #16]
 8017608:	6978      	ldr	r0, [r7, #20]
 801760a:	f7ff fee7 	bl	80173dc <xQueueGenericCreateStatic>
 801760e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8017610:	68f8      	ldr	r0, [r7, #12]
 8017612:	f7ff ffb8 	bl	8017586 <prvInitialiseMutex>

		return xNewQueue;
 8017616:	68fb      	ldr	r3, [r7, #12]
	}
 8017618:	4618      	mov	r0, r3
 801761a:	3718      	adds	r7, #24
 801761c:	46bd      	mov	sp, r7
 801761e:	bd80      	pop	{r7, pc}

08017620 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8017620:	b590      	push	{r4, r7, lr}
 8017622:	b087      	sub	sp, #28
 8017624:	af00      	add	r7, sp, #0
 8017626:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801762c:	693b      	ldr	r3, [r7, #16]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d10a      	bne.n	8017648 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8017632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017636:	f383 8811 	msr	BASEPRI, r3
 801763a:	f3bf 8f6f 	isb	sy
 801763e:	f3bf 8f4f 	dsb	sy
 8017642:	60fb      	str	r3, [r7, #12]
}
 8017644:	bf00      	nop
 8017646:	e7fe      	b.n	8017646 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8017648:	693b      	ldr	r3, [r7, #16]
 801764a:	689c      	ldr	r4, [r3, #8]
 801764c:	f001 fcaa 	bl	8018fa4 <xTaskGetCurrentTaskHandle>
 8017650:	4603      	mov	r3, r0
 8017652:	429c      	cmp	r4, r3
 8017654:	d111      	bne.n	801767a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8017656:	693b      	ldr	r3, [r7, #16]
 8017658:	68db      	ldr	r3, [r3, #12]
 801765a:	1e5a      	subs	r2, r3, #1
 801765c:	693b      	ldr	r3, [r7, #16]
 801765e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8017660:	693b      	ldr	r3, [r7, #16]
 8017662:	68db      	ldr	r3, [r3, #12]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d105      	bne.n	8017674 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8017668:	2300      	movs	r3, #0
 801766a:	2200      	movs	r2, #0
 801766c:	2100      	movs	r1, #0
 801766e:	6938      	ldr	r0, [r7, #16]
 8017670:	f000 f840 	bl	80176f4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8017674:	2301      	movs	r3, #1
 8017676:	617b      	str	r3, [r7, #20]
 8017678:	e001      	b.n	801767e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 801767a:	2300      	movs	r3, #0
 801767c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 801767e:	697b      	ldr	r3, [r7, #20]
	}
 8017680:	4618      	mov	r0, r3
 8017682:	371c      	adds	r7, #28
 8017684:	46bd      	mov	sp, r7
 8017686:	bd90      	pop	{r4, r7, pc}

08017688 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8017688:	b590      	push	{r4, r7, lr}
 801768a:	b087      	sub	sp, #28
 801768c:	af00      	add	r7, sp, #0
 801768e:	6078      	str	r0, [r7, #4]
 8017690:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8017696:	693b      	ldr	r3, [r7, #16]
 8017698:	2b00      	cmp	r3, #0
 801769a:	d10a      	bne.n	80176b2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 801769c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176a0:	f383 8811 	msr	BASEPRI, r3
 80176a4:	f3bf 8f6f 	isb	sy
 80176a8:	f3bf 8f4f 	dsb	sy
 80176ac:	60fb      	str	r3, [r7, #12]
}
 80176ae:	bf00      	nop
 80176b0:	e7fe      	b.n	80176b0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80176b2:	693b      	ldr	r3, [r7, #16]
 80176b4:	689c      	ldr	r4, [r3, #8]
 80176b6:	f001 fc75 	bl	8018fa4 <xTaskGetCurrentTaskHandle>
 80176ba:	4603      	mov	r3, r0
 80176bc:	429c      	cmp	r4, r3
 80176be:	d107      	bne.n	80176d0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80176c0:	693b      	ldr	r3, [r7, #16]
 80176c2:	68db      	ldr	r3, [r3, #12]
 80176c4:	1c5a      	adds	r2, r3, #1
 80176c6:	693b      	ldr	r3, [r7, #16]
 80176c8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80176ca:	2301      	movs	r3, #1
 80176cc:	617b      	str	r3, [r7, #20]
 80176ce:	e00c      	b.n	80176ea <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80176d0:	6839      	ldr	r1, [r7, #0]
 80176d2:	6938      	ldr	r0, [r7, #16]
 80176d4:	f000 fa88 	bl	8017be8 <xQueueSemaphoreTake>
 80176d8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80176da:	697b      	ldr	r3, [r7, #20]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d004      	beq.n	80176ea <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80176e0:	693b      	ldr	r3, [r7, #16]
 80176e2:	68db      	ldr	r3, [r3, #12]
 80176e4:	1c5a      	adds	r2, r3, #1
 80176e6:	693b      	ldr	r3, [r7, #16]
 80176e8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80176ea:	697b      	ldr	r3, [r7, #20]
	}
 80176ec:	4618      	mov	r0, r3
 80176ee:	371c      	adds	r7, #28
 80176f0:	46bd      	mov	sp, r7
 80176f2:	bd90      	pop	{r4, r7, pc}

080176f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80176f4:	b580      	push	{r7, lr}
 80176f6:	b08e      	sub	sp, #56	; 0x38
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	60f8      	str	r0, [r7, #12]
 80176fc:	60b9      	str	r1, [r7, #8]
 80176fe:	607a      	str	r2, [r7, #4]
 8017700:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017702:	2300      	movs	r3, #0
 8017704:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801770c:	2b00      	cmp	r3, #0
 801770e:	d10a      	bne.n	8017726 <xQueueGenericSend+0x32>
	__asm volatile
 8017710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017714:	f383 8811 	msr	BASEPRI, r3
 8017718:	f3bf 8f6f 	isb	sy
 801771c:	f3bf 8f4f 	dsb	sy
 8017720:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017722:	bf00      	nop
 8017724:	e7fe      	b.n	8017724 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017726:	68bb      	ldr	r3, [r7, #8]
 8017728:	2b00      	cmp	r3, #0
 801772a:	d103      	bne.n	8017734 <xQueueGenericSend+0x40>
 801772c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801772e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017730:	2b00      	cmp	r3, #0
 8017732:	d101      	bne.n	8017738 <xQueueGenericSend+0x44>
 8017734:	2301      	movs	r3, #1
 8017736:	e000      	b.n	801773a <xQueueGenericSend+0x46>
 8017738:	2300      	movs	r3, #0
 801773a:	2b00      	cmp	r3, #0
 801773c:	d10a      	bne.n	8017754 <xQueueGenericSend+0x60>
	__asm volatile
 801773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017742:	f383 8811 	msr	BASEPRI, r3
 8017746:	f3bf 8f6f 	isb	sy
 801774a:	f3bf 8f4f 	dsb	sy
 801774e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017750:	bf00      	nop
 8017752:	e7fe      	b.n	8017752 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017754:	683b      	ldr	r3, [r7, #0]
 8017756:	2b02      	cmp	r3, #2
 8017758:	d103      	bne.n	8017762 <xQueueGenericSend+0x6e>
 801775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801775c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801775e:	2b01      	cmp	r3, #1
 8017760:	d101      	bne.n	8017766 <xQueueGenericSend+0x72>
 8017762:	2301      	movs	r3, #1
 8017764:	e000      	b.n	8017768 <xQueueGenericSend+0x74>
 8017766:	2300      	movs	r3, #0
 8017768:	2b00      	cmp	r3, #0
 801776a:	d10a      	bne.n	8017782 <xQueueGenericSend+0x8e>
	__asm volatile
 801776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017770:	f383 8811 	msr	BASEPRI, r3
 8017774:	f3bf 8f6f 	isb	sy
 8017778:	f3bf 8f4f 	dsb	sy
 801777c:	623b      	str	r3, [r7, #32]
}
 801777e:	bf00      	nop
 8017780:	e7fe      	b.n	8017780 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017782:	f001 fc1f 	bl	8018fc4 <xTaskGetSchedulerState>
 8017786:	4603      	mov	r3, r0
 8017788:	2b00      	cmp	r3, #0
 801778a:	d102      	bne.n	8017792 <xQueueGenericSend+0x9e>
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d101      	bne.n	8017796 <xQueueGenericSend+0xa2>
 8017792:	2301      	movs	r3, #1
 8017794:	e000      	b.n	8017798 <xQueueGenericSend+0xa4>
 8017796:	2300      	movs	r3, #0
 8017798:	2b00      	cmp	r3, #0
 801779a:	d10a      	bne.n	80177b2 <xQueueGenericSend+0xbe>
	__asm volatile
 801779c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177a0:	f383 8811 	msr	BASEPRI, r3
 80177a4:	f3bf 8f6f 	isb	sy
 80177a8:	f3bf 8f4f 	dsb	sy
 80177ac:	61fb      	str	r3, [r7, #28]
}
 80177ae:	bf00      	nop
 80177b0:	e7fe      	b.n	80177b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80177b2:	f002 fa97 	bl	8019ce4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80177b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80177ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80177be:	429a      	cmp	r2, r3
 80177c0:	d302      	bcc.n	80177c8 <xQueueGenericSend+0xd4>
 80177c2:	683b      	ldr	r3, [r7, #0]
 80177c4:	2b02      	cmp	r3, #2
 80177c6:	d129      	bne.n	801781c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80177c8:	683a      	ldr	r2, [r7, #0]
 80177ca:	68b9      	ldr	r1, [r7, #8]
 80177cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80177ce:	f000 fb2f 	bl	8017e30 <prvCopyDataToQueue>
 80177d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80177d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d010      	beq.n	80177fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80177dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177de:	3324      	adds	r3, #36	; 0x24
 80177e0:	4618      	mov	r0, r3
 80177e2:	f001 f9bf 	bl	8018b64 <xTaskRemoveFromEventList>
 80177e6:	4603      	mov	r3, r0
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d013      	beq.n	8017814 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80177ec:	4b3f      	ldr	r3, [pc, #252]	; (80178ec <xQueueGenericSend+0x1f8>)
 80177ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80177f2:	601a      	str	r2, [r3, #0]
 80177f4:	f3bf 8f4f 	dsb	sy
 80177f8:	f3bf 8f6f 	isb	sy
 80177fc:	e00a      	b.n	8017814 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80177fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017800:	2b00      	cmp	r3, #0
 8017802:	d007      	beq.n	8017814 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017804:	4b39      	ldr	r3, [pc, #228]	; (80178ec <xQueueGenericSend+0x1f8>)
 8017806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801780a:	601a      	str	r2, [r3, #0]
 801780c:	f3bf 8f4f 	dsb	sy
 8017810:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017814:	f002 fa96 	bl	8019d44 <vPortExitCritical>
				return pdPASS;
 8017818:	2301      	movs	r3, #1
 801781a:	e063      	b.n	80178e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d103      	bne.n	801782a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017822:	f002 fa8f 	bl	8019d44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017826:	2300      	movs	r3, #0
 8017828:	e05c      	b.n	80178e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801782a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801782c:	2b00      	cmp	r3, #0
 801782e:	d106      	bne.n	801783e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017830:	f107 0314 	add.w	r3, r7, #20
 8017834:	4618      	mov	r0, r3
 8017836:	f001 fa5b 	bl	8018cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801783a:	2301      	movs	r3, #1
 801783c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801783e:	f002 fa81 	bl	8019d44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017842:	f000 ff1d 	bl	8018680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017846:	f002 fa4d 	bl	8019ce4 <vPortEnterCritical>
 801784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801784c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017850:	b25b      	sxtb	r3, r3
 8017852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017856:	d103      	bne.n	8017860 <xQueueGenericSend+0x16c>
 8017858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801785a:	2200      	movs	r2, #0
 801785c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017862:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017866:	b25b      	sxtb	r3, r3
 8017868:	f1b3 3fff 	cmp.w	r3, #4294967295
 801786c:	d103      	bne.n	8017876 <xQueueGenericSend+0x182>
 801786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017870:	2200      	movs	r2, #0
 8017872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017876:	f002 fa65 	bl	8019d44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801787a:	1d3a      	adds	r2, r7, #4
 801787c:	f107 0314 	add.w	r3, r7, #20
 8017880:	4611      	mov	r1, r2
 8017882:	4618      	mov	r0, r3
 8017884:	f001 fa4a 	bl	8018d1c <xTaskCheckForTimeOut>
 8017888:	4603      	mov	r3, r0
 801788a:	2b00      	cmp	r3, #0
 801788c:	d124      	bne.n	80178d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801788e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017890:	f000 fbc6 	bl	8018020 <prvIsQueueFull>
 8017894:	4603      	mov	r3, r0
 8017896:	2b00      	cmp	r3, #0
 8017898:	d018      	beq.n	80178cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801789c:	3310      	adds	r3, #16
 801789e:	687a      	ldr	r2, [r7, #4]
 80178a0:	4611      	mov	r1, r2
 80178a2:	4618      	mov	r0, r3
 80178a4:	f001 f8d2 	bl	8018a4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80178a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80178aa:	f000 fb51 	bl	8017f50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80178ae:	f000 fef5 	bl	801869c <xTaskResumeAll>
 80178b2:	4603      	mov	r3, r0
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	f47f af7c 	bne.w	80177b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80178ba:	4b0c      	ldr	r3, [pc, #48]	; (80178ec <xQueueGenericSend+0x1f8>)
 80178bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80178c0:	601a      	str	r2, [r3, #0]
 80178c2:	f3bf 8f4f 	dsb	sy
 80178c6:	f3bf 8f6f 	isb	sy
 80178ca:	e772      	b.n	80177b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80178cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80178ce:	f000 fb3f 	bl	8017f50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80178d2:	f000 fee3 	bl	801869c <xTaskResumeAll>
 80178d6:	e76c      	b.n	80177b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80178d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80178da:	f000 fb39 	bl	8017f50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80178de:	f000 fedd 	bl	801869c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80178e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80178e4:	4618      	mov	r0, r3
 80178e6:	3738      	adds	r7, #56	; 0x38
 80178e8:	46bd      	mov	sp, r7
 80178ea:	bd80      	pop	{r7, pc}
 80178ec:	e000ed04 	.word	0xe000ed04

080178f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80178f0:	b580      	push	{r7, lr}
 80178f2:	b090      	sub	sp, #64	; 0x40
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	60f8      	str	r0, [r7, #12]
 80178f8:	60b9      	str	r1, [r7, #8]
 80178fa:	607a      	str	r2, [r7, #4]
 80178fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8017902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017904:	2b00      	cmp	r3, #0
 8017906:	d10a      	bne.n	801791e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801790c:	f383 8811 	msr	BASEPRI, r3
 8017910:	f3bf 8f6f 	isb	sy
 8017914:	f3bf 8f4f 	dsb	sy
 8017918:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801791a:	bf00      	nop
 801791c:	e7fe      	b.n	801791c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801791e:	68bb      	ldr	r3, [r7, #8]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d103      	bne.n	801792c <xQueueGenericSendFromISR+0x3c>
 8017924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017928:	2b00      	cmp	r3, #0
 801792a:	d101      	bne.n	8017930 <xQueueGenericSendFromISR+0x40>
 801792c:	2301      	movs	r3, #1
 801792e:	e000      	b.n	8017932 <xQueueGenericSendFromISR+0x42>
 8017930:	2300      	movs	r3, #0
 8017932:	2b00      	cmp	r3, #0
 8017934:	d10a      	bne.n	801794c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8017936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801793a:	f383 8811 	msr	BASEPRI, r3
 801793e:	f3bf 8f6f 	isb	sy
 8017942:	f3bf 8f4f 	dsb	sy
 8017946:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017948:	bf00      	nop
 801794a:	e7fe      	b.n	801794a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801794c:	683b      	ldr	r3, [r7, #0]
 801794e:	2b02      	cmp	r3, #2
 8017950:	d103      	bne.n	801795a <xQueueGenericSendFromISR+0x6a>
 8017952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017956:	2b01      	cmp	r3, #1
 8017958:	d101      	bne.n	801795e <xQueueGenericSendFromISR+0x6e>
 801795a:	2301      	movs	r3, #1
 801795c:	e000      	b.n	8017960 <xQueueGenericSendFromISR+0x70>
 801795e:	2300      	movs	r3, #0
 8017960:	2b00      	cmp	r3, #0
 8017962:	d10a      	bne.n	801797a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017968:	f383 8811 	msr	BASEPRI, r3
 801796c:	f3bf 8f6f 	isb	sy
 8017970:	f3bf 8f4f 	dsb	sy
 8017974:	623b      	str	r3, [r7, #32]
}
 8017976:	bf00      	nop
 8017978:	e7fe      	b.n	8017978 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801797a:	f002 fa95 	bl	8019ea8 <vPortValidateInterruptPriority>
	__asm volatile
 801797e:	f3ef 8211 	mrs	r2, BASEPRI
 8017982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017986:	f383 8811 	msr	BASEPRI, r3
 801798a:	f3bf 8f6f 	isb	sy
 801798e:	f3bf 8f4f 	dsb	sy
 8017992:	61fa      	str	r2, [r7, #28]
 8017994:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8017996:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017998:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801799a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801799c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801799e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80179a2:	429a      	cmp	r2, r3
 80179a4:	d302      	bcc.n	80179ac <xQueueGenericSendFromISR+0xbc>
 80179a6:	683b      	ldr	r3, [r7, #0]
 80179a8:	2b02      	cmp	r3, #2
 80179aa:	d12f      	bne.n	8017a0c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80179ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80179b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80179b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80179bc:	683a      	ldr	r2, [r7, #0]
 80179be:	68b9      	ldr	r1, [r7, #8]
 80179c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80179c2:	f000 fa35 	bl	8017e30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80179c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80179ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179ce:	d112      	bne.n	80179f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80179d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d016      	beq.n	8017a06 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80179d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179da:	3324      	adds	r3, #36	; 0x24
 80179dc:	4618      	mov	r0, r3
 80179de:	f001 f8c1 	bl	8018b64 <xTaskRemoveFromEventList>
 80179e2:	4603      	mov	r3, r0
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d00e      	beq.n	8017a06 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d00b      	beq.n	8017a06 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	2201      	movs	r2, #1
 80179f2:	601a      	str	r2, [r3, #0]
 80179f4:	e007      	b.n	8017a06 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80179f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80179fa:	3301      	adds	r3, #1
 80179fc:	b2db      	uxtb	r3, r3
 80179fe:	b25a      	sxtb	r2, r3
 8017a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017a06:	2301      	movs	r3, #1
 8017a08:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8017a0a:	e001      	b.n	8017a10 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a12:	617b      	str	r3, [r7, #20]
	__asm volatile
 8017a14:	697b      	ldr	r3, [r7, #20]
 8017a16:	f383 8811 	msr	BASEPRI, r3
}
 8017a1a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017a1e:	4618      	mov	r0, r3
 8017a20:	3740      	adds	r7, #64	; 0x40
 8017a22:	46bd      	mov	sp, r7
 8017a24:	bd80      	pop	{r7, pc}
	...

08017a28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b08c      	sub	sp, #48	; 0x30
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	60f8      	str	r0, [r7, #12]
 8017a30:	60b9      	str	r1, [r7, #8]
 8017a32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017a34:	2300      	movs	r3, #0
 8017a36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d10a      	bne.n	8017a58 <xQueueReceive+0x30>
	__asm volatile
 8017a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a46:	f383 8811 	msr	BASEPRI, r3
 8017a4a:	f3bf 8f6f 	isb	sy
 8017a4e:	f3bf 8f4f 	dsb	sy
 8017a52:	623b      	str	r3, [r7, #32]
}
 8017a54:	bf00      	nop
 8017a56:	e7fe      	b.n	8017a56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017a58:	68bb      	ldr	r3, [r7, #8]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d103      	bne.n	8017a66 <xQueueReceive+0x3e>
 8017a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d101      	bne.n	8017a6a <xQueueReceive+0x42>
 8017a66:	2301      	movs	r3, #1
 8017a68:	e000      	b.n	8017a6c <xQueueReceive+0x44>
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d10a      	bne.n	8017a86 <xQueueReceive+0x5e>
	__asm volatile
 8017a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a74:	f383 8811 	msr	BASEPRI, r3
 8017a78:	f3bf 8f6f 	isb	sy
 8017a7c:	f3bf 8f4f 	dsb	sy
 8017a80:	61fb      	str	r3, [r7, #28]
}
 8017a82:	bf00      	nop
 8017a84:	e7fe      	b.n	8017a84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017a86:	f001 fa9d 	bl	8018fc4 <xTaskGetSchedulerState>
 8017a8a:	4603      	mov	r3, r0
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d102      	bne.n	8017a96 <xQueueReceive+0x6e>
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d101      	bne.n	8017a9a <xQueueReceive+0x72>
 8017a96:	2301      	movs	r3, #1
 8017a98:	e000      	b.n	8017a9c <xQueueReceive+0x74>
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d10a      	bne.n	8017ab6 <xQueueReceive+0x8e>
	__asm volatile
 8017aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017aa4:	f383 8811 	msr	BASEPRI, r3
 8017aa8:	f3bf 8f6f 	isb	sy
 8017aac:	f3bf 8f4f 	dsb	sy
 8017ab0:	61bb      	str	r3, [r7, #24]
}
 8017ab2:	bf00      	nop
 8017ab4:	e7fe      	b.n	8017ab4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017ab6:	f002 f915 	bl	8019ce4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017abe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d01f      	beq.n	8017b06 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017ac6:	68b9      	ldr	r1, [r7, #8]
 8017ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017aca:	f000 fa1b 	bl	8017f04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ad0:	1e5a      	subs	r2, r3, #1
 8017ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ad4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ad8:	691b      	ldr	r3, [r3, #16]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d00f      	beq.n	8017afe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ae0:	3310      	adds	r3, #16
 8017ae2:	4618      	mov	r0, r3
 8017ae4:	f001 f83e 	bl	8018b64 <xTaskRemoveFromEventList>
 8017ae8:	4603      	mov	r3, r0
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d007      	beq.n	8017afe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017aee:	4b3d      	ldr	r3, [pc, #244]	; (8017be4 <xQueueReceive+0x1bc>)
 8017af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017af4:	601a      	str	r2, [r3, #0]
 8017af6:	f3bf 8f4f 	dsb	sy
 8017afa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017afe:	f002 f921 	bl	8019d44 <vPortExitCritical>
				return pdPASS;
 8017b02:	2301      	movs	r3, #1
 8017b04:	e069      	b.n	8017bda <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d103      	bne.n	8017b14 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017b0c:	f002 f91a 	bl	8019d44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017b10:	2300      	movs	r3, #0
 8017b12:	e062      	b.n	8017bda <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d106      	bne.n	8017b28 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017b1a:	f107 0310 	add.w	r3, r7, #16
 8017b1e:	4618      	mov	r0, r3
 8017b20:	f001 f8e6 	bl	8018cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017b24:	2301      	movs	r3, #1
 8017b26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017b28:	f002 f90c 	bl	8019d44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017b2c:	f000 fda8 	bl	8018680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017b30:	f002 f8d8 	bl	8019ce4 <vPortEnterCritical>
 8017b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017b3a:	b25b      	sxtb	r3, r3
 8017b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b40:	d103      	bne.n	8017b4a <xQueueReceive+0x122>
 8017b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b44:	2200      	movs	r2, #0
 8017b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017b50:	b25b      	sxtb	r3, r3
 8017b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b56:	d103      	bne.n	8017b60 <xQueueReceive+0x138>
 8017b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b5a:	2200      	movs	r2, #0
 8017b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017b60:	f002 f8f0 	bl	8019d44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017b64:	1d3a      	adds	r2, r7, #4
 8017b66:	f107 0310 	add.w	r3, r7, #16
 8017b6a:	4611      	mov	r1, r2
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	f001 f8d5 	bl	8018d1c <xTaskCheckForTimeOut>
 8017b72:	4603      	mov	r3, r0
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d123      	bne.n	8017bc0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b7a:	f000 fa3b 	bl	8017ff4 <prvIsQueueEmpty>
 8017b7e:	4603      	mov	r3, r0
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d017      	beq.n	8017bb4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b86:	3324      	adds	r3, #36	; 0x24
 8017b88:	687a      	ldr	r2, [r7, #4]
 8017b8a:	4611      	mov	r1, r2
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	f000 ff5d 	bl	8018a4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b94:	f000 f9dc 	bl	8017f50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017b98:	f000 fd80 	bl	801869c <xTaskResumeAll>
 8017b9c:	4603      	mov	r3, r0
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d189      	bne.n	8017ab6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017ba2:	4b10      	ldr	r3, [pc, #64]	; (8017be4 <xQueueReceive+0x1bc>)
 8017ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ba8:	601a      	str	r2, [r3, #0]
 8017baa:	f3bf 8f4f 	dsb	sy
 8017bae:	f3bf 8f6f 	isb	sy
 8017bb2:	e780      	b.n	8017ab6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017bb6:	f000 f9cb 	bl	8017f50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017bba:	f000 fd6f 	bl	801869c <xTaskResumeAll>
 8017bbe:	e77a      	b.n	8017ab6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017bc2:	f000 f9c5 	bl	8017f50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017bc6:	f000 fd69 	bl	801869c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017bca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017bcc:	f000 fa12 	bl	8017ff4 <prvIsQueueEmpty>
 8017bd0:	4603      	mov	r3, r0
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	f43f af6f 	beq.w	8017ab6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017bd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017bda:	4618      	mov	r0, r3
 8017bdc:	3730      	adds	r7, #48	; 0x30
 8017bde:	46bd      	mov	sp, r7
 8017be0:	bd80      	pop	{r7, pc}
 8017be2:	bf00      	nop
 8017be4:	e000ed04 	.word	0xe000ed04

08017be8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b08e      	sub	sp, #56	; 0x38
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	6078      	str	r0, [r7, #4]
 8017bf0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d10a      	bne.n	8017c1a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8017c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c08:	f383 8811 	msr	BASEPRI, r3
 8017c0c:	f3bf 8f6f 	isb	sy
 8017c10:	f3bf 8f4f 	dsb	sy
 8017c14:	623b      	str	r3, [r7, #32]
}
 8017c16:	bf00      	nop
 8017c18:	e7fe      	b.n	8017c18 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d00a      	beq.n	8017c38 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8017c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c26:	f383 8811 	msr	BASEPRI, r3
 8017c2a:	f3bf 8f6f 	isb	sy
 8017c2e:	f3bf 8f4f 	dsb	sy
 8017c32:	61fb      	str	r3, [r7, #28]
}
 8017c34:	bf00      	nop
 8017c36:	e7fe      	b.n	8017c36 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017c38:	f001 f9c4 	bl	8018fc4 <xTaskGetSchedulerState>
 8017c3c:	4603      	mov	r3, r0
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d102      	bne.n	8017c48 <xQueueSemaphoreTake+0x60>
 8017c42:	683b      	ldr	r3, [r7, #0]
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d101      	bne.n	8017c4c <xQueueSemaphoreTake+0x64>
 8017c48:	2301      	movs	r3, #1
 8017c4a:	e000      	b.n	8017c4e <xQueueSemaphoreTake+0x66>
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d10a      	bne.n	8017c68 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8017c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c56:	f383 8811 	msr	BASEPRI, r3
 8017c5a:	f3bf 8f6f 	isb	sy
 8017c5e:	f3bf 8f4f 	dsb	sy
 8017c62:	61bb      	str	r3, [r7, #24]
}
 8017c64:	bf00      	nop
 8017c66:	e7fe      	b.n	8017c66 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017c68:	f002 f83c 	bl	8019ce4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8017c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c70:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8017c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d024      	beq.n	8017cc2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c7a:	1e5a      	subs	r2, r3, #1
 8017c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c7e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d104      	bne.n	8017c92 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8017c88:	f001 fb2a 	bl	80192e0 <pvTaskIncrementMutexHeldCount>
 8017c8c:	4602      	mov	r2, r0
 8017c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c90:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c94:	691b      	ldr	r3, [r3, #16]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d00f      	beq.n	8017cba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c9c:	3310      	adds	r3, #16
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	f000 ff60 	bl	8018b64 <xTaskRemoveFromEventList>
 8017ca4:	4603      	mov	r3, r0
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d007      	beq.n	8017cba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017caa:	4b54      	ldr	r3, [pc, #336]	; (8017dfc <xQueueSemaphoreTake+0x214>)
 8017cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017cb0:	601a      	str	r2, [r3, #0]
 8017cb2:	f3bf 8f4f 	dsb	sy
 8017cb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017cba:	f002 f843 	bl	8019d44 <vPortExitCritical>
				return pdPASS;
 8017cbe:	2301      	movs	r3, #1
 8017cc0:	e097      	b.n	8017df2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017cc2:	683b      	ldr	r3, [r7, #0]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d111      	bne.n	8017cec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8017cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d00a      	beq.n	8017ce4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8017cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cd2:	f383 8811 	msr	BASEPRI, r3
 8017cd6:	f3bf 8f6f 	isb	sy
 8017cda:	f3bf 8f4f 	dsb	sy
 8017cde:	617b      	str	r3, [r7, #20]
}
 8017ce0:	bf00      	nop
 8017ce2:	e7fe      	b.n	8017ce2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8017ce4:	f002 f82e 	bl	8019d44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017ce8:	2300      	movs	r3, #0
 8017cea:	e082      	b.n	8017df2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d106      	bne.n	8017d00 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017cf2:	f107 030c 	add.w	r3, r7, #12
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	f000 fffa 	bl	8018cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017cfc:	2301      	movs	r3, #1
 8017cfe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017d00:	f002 f820 	bl	8019d44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017d04:	f000 fcbc 	bl	8018680 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017d08:	f001 ffec 	bl	8019ce4 <vPortEnterCritical>
 8017d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017d12:	b25b      	sxtb	r3, r3
 8017d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d18:	d103      	bne.n	8017d22 <xQueueSemaphoreTake+0x13a>
 8017d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d1c:	2200      	movs	r2, #0
 8017d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017d28:	b25b      	sxtb	r3, r3
 8017d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d2e:	d103      	bne.n	8017d38 <xQueueSemaphoreTake+0x150>
 8017d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d32:	2200      	movs	r2, #0
 8017d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017d38:	f002 f804 	bl	8019d44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017d3c:	463a      	mov	r2, r7
 8017d3e:	f107 030c 	add.w	r3, r7, #12
 8017d42:	4611      	mov	r1, r2
 8017d44:	4618      	mov	r0, r3
 8017d46:	f000 ffe9 	bl	8018d1c <xTaskCheckForTimeOut>
 8017d4a:	4603      	mov	r3, r0
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d132      	bne.n	8017db6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017d50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017d52:	f000 f94f 	bl	8017ff4 <prvIsQueueEmpty>
 8017d56:	4603      	mov	r3, r0
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d026      	beq.n	8017daa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d109      	bne.n	8017d78 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8017d64:	f001 ffbe 	bl	8019ce4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d6a:	689b      	ldr	r3, [r3, #8]
 8017d6c:	4618      	mov	r0, r3
 8017d6e:	f001 f947 	bl	8019000 <xTaskPriorityInherit>
 8017d72:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8017d74:	f001 ffe6 	bl	8019d44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d7a:	3324      	adds	r3, #36	; 0x24
 8017d7c:	683a      	ldr	r2, [r7, #0]
 8017d7e:	4611      	mov	r1, r2
 8017d80:	4618      	mov	r0, r3
 8017d82:	f000 fe63 	bl	8018a4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017d86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017d88:	f000 f8e2 	bl	8017f50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017d8c:	f000 fc86 	bl	801869c <xTaskResumeAll>
 8017d90:	4603      	mov	r3, r0
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	f47f af68 	bne.w	8017c68 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8017d98:	4b18      	ldr	r3, [pc, #96]	; (8017dfc <xQueueSemaphoreTake+0x214>)
 8017d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d9e:	601a      	str	r2, [r3, #0]
 8017da0:	f3bf 8f4f 	dsb	sy
 8017da4:	f3bf 8f6f 	isb	sy
 8017da8:	e75e      	b.n	8017c68 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8017daa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017dac:	f000 f8d0 	bl	8017f50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017db0:	f000 fc74 	bl	801869c <xTaskResumeAll>
 8017db4:	e758      	b.n	8017c68 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8017db6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017db8:	f000 f8ca 	bl	8017f50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017dbc:	f000 fc6e 	bl	801869c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017dc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017dc2:	f000 f917 	bl	8017ff4 <prvIsQueueEmpty>
 8017dc6:	4603      	mov	r3, r0
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	f43f af4d 	beq.w	8017c68 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8017dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d00d      	beq.n	8017df0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8017dd4:	f001 ff86 	bl	8019ce4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8017dd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017dda:	f000 f811 	bl	8017e00 <prvGetDisinheritPriorityAfterTimeout>
 8017dde:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017de2:	689b      	ldr	r3, [r3, #8]
 8017de4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017de6:	4618      	mov	r0, r3
 8017de8:	f001 f9e0 	bl	80191ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8017dec:	f001 ffaa 	bl	8019d44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017df0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017df2:	4618      	mov	r0, r3
 8017df4:	3738      	adds	r7, #56	; 0x38
 8017df6:	46bd      	mov	sp, r7
 8017df8:	bd80      	pop	{r7, pc}
 8017dfa:	bf00      	nop
 8017dfc:	e000ed04 	.word	0xe000ed04

08017e00 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8017e00:	b480      	push	{r7}
 8017e02:	b085      	sub	sp, #20
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d006      	beq.n	8017e1e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8017e1a:	60fb      	str	r3, [r7, #12]
 8017e1c:	e001      	b.n	8017e22 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8017e1e:	2300      	movs	r3, #0
 8017e20:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8017e22:	68fb      	ldr	r3, [r7, #12]
	}
 8017e24:	4618      	mov	r0, r3
 8017e26:	3714      	adds	r7, #20
 8017e28:	46bd      	mov	sp, r7
 8017e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e2e:	4770      	bx	lr

08017e30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017e30:	b580      	push	{r7, lr}
 8017e32:	b086      	sub	sp, #24
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	60f8      	str	r0, [r7, #12]
 8017e38:	60b9      	str	r1, [r7, #8]
 8017e3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d10d      	bne.n	8017e6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d14d      	bne.n	8017ef2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	689b      	ldr	r3, [r3, #8]
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	f001 f938 	bl	80190d0 <xTaskPriorityDisinherit>
 8017e60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	2200      	movs	r2, #0
 8017e66:	609a      	str	r2, [r3, #8]
 8017e68:	e043      	b.n	8017ef2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d119      	bne.n	8017ea4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	6858      	ldr	r0, [r3, #4]
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e78:	461a      	mov	r2, r3
 8017e7a:	68b9      	ldr	r1, [r7, #8]
 8017e7c:	f003 f816 	bl	801aeac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	685a      	ldr	r2, [r3, #4]
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e88:	441a      	add	r2, r3
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	685a      	ldr	r2, [r3, #4]
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	689b      	ldr	r3, [r3, #8]
 8017e96:	429a      	cmp	r2, r3
 8017e98:	d32b      	bcc.n	8017ef2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	681a      	ldr	r2, [r3, #0]
 8017e9e:	68fb      	ldr	r3, [r7, #12]
 8017ea0:	605a      	str	r2, [r3, #4]
 8017ea2:	e026      	b.n	8017ef2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	68d8      	ldr	r0, [r3, #12]
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017eac:	461a      	mov	r2, r3
 8017eae:	68b9      	ldr	r1, [r7, #8]
 8017eb0:	f002 fffc 	bl	801aeac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017eb4:	68fb      	ldr	r3, [r7, #12]
 8017eb6:	68da      	ldr	r2, [r3, #12]
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ebc:	425b      	negs	r3, r3
 8017ebe:	441a      	add	r2, r3
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017ec4:	68fb      	ldr	r3, [r7, #12]
 8017ec6:	68da      	ldr	r2, [r3, #12]
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	429a      	cmp	r2, r3
 8017ece:	d207      	bcs.n	8017ee0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	689a      	ldr	r2, [r3, #8]
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ed8:	425b      	negs	r3, r3
 8017eda:	441a      	add	r2, r3
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	2b02      	cmp	r3, #2
 8017ee4:	d105      	bne.n	8017ef2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017ee6:	693b      	ldr	r3, [r7, #16]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d002      	beq.n	8017ef2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017eec:	693b      	ldr	r3, [r7, #16]
 8017eee:	3b01      	subs	r3, #1
 8017ef0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017ef2:	693b      	ldr	r3, [r7, #16]
 8017ef4:	1c5a      	adds	r2, r3, #1
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017efa:	697b      	ldr	r3, [r7, #20]
}
 8017efc:	4618      	mov	r0, r3
 8017efe:	3718      	adds	r7, #24
 8017f00:	46bd      	mov	sp, r7
 8017f02:	bd80      	pop	{r7, pc}

08017f04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017f04:	b580      	push	{r7, lr}
 8017f06:	b082      	sub	sp, #8
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	6078      	str	r0, [r7, #4]
 8017f0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d018      	beq.n	8017f48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	68da      	ldr	r2, [r3, #12]
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f1e:	441a      	add	r2, r3
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	68da      	ldr	r2, [r3, #12]
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	689b      	ldr	r3, [r3, #8]
 8017f2c:	429a      	cmp	r2, r3
 8017f2e:	d303      	bcc.n	8017f38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	681a      	ldr	r2, [r3, #0]
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	68d9      	ldr	r1, [r3, #12]
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f40:	461a      	mov	r2, r3
 8017f42:	6838      	ldr	r0, [r7, #0]
 8017f44:	f002 ffb2 	bl	801aeac <memcpy>
	}
}
 8017f48:	bf00      	nop
 8017f4a:	3708      	adds	r7, #8
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	bd80      	pop	{r7, pc}

08017f50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017f50:	b580      	push	{r7, lr}
 8017f52:	b084      	sub	sp, #16
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017f58:	f001 fec4 	bl	8019ce4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017f62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017f64:	e011      	b.n	8017f8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d012      	beq.n	8017f94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	3324      	adds	r3, #36	; 0x24
 8017f72:	4618      	mov	r0, r3
 8017f74:	f000 fdf6 	bl	8018b64 <xTaskRemoveFromEventList>
 8017f78:	4603      	mov	r3, r0
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d001      	beq.n	8017f82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017f7e:	f000 ff2f 	bl	8018de0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017f82:	7bfb      	ldrb	r3, [r7, #15]
 8017f84:	3b01      	subs	r3, #1
 8017f86:	b2db      	uxtb	r3, r3
 8017f88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	dce9      	bgt.n	8017f66 <prvUnlockQueue+0x16>
 8017f92:	e000      	b.n	8017f96 <prvUnlockQueue+0x46>
					break;
 8017f94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	22ff      	movs	r2, #255	; 0xff
 8017f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017f9e:	f001 fed1 	bl	8019d44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017fa2:	f001 fe9f 	bl	8019ce4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017fac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017fae:	e011      	b.n	8017fd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	691b      	ldr	r3, [r3, #16]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d012      	beq.n	8017fde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	3310      	adds	r3, #16
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	f000 fdd1 	bl	8018b64 <xTaskRemoveFromEventList>
 8017fc2:	4603      	mov	r3, r0
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d001      	beq.n	8017fcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017fc8:	f000 ff0a 	bl	8018de0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017fcc:	7bbb      	ldrb	r3, [r7, #14]
 8017fce:	3b01      	subs	r3, #1
 8017fd0:	b2db      	uxtb	r3, r3
 8017fd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017fd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	dce9      	bgt.n	8017fb0 <prvUnlockQueue+0x60>
 8017fdc:	e000      	b.n	8017fe0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017fde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	22ff      	movs	r2, #255	; 0xff
 8017fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017fe8:	f001 feac 	bl	8019d44 <vPortExitCritical>
}
 8017fec:	bf00      	nop
 8017fee:	3710      	adds	r7, #16
 8017ff0:	46bd      	mov	sp, r7
 8017ff2:	bd80      	pop	{r7, pc}

08017ff4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b084      	sub	sp, #16
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017ffc:	f001 fe72 	bl	8019ce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018004:	2b00      	cmp	r3, #0
 8018006:	d102      	bne.n	801800e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8018008:	2301      	movs	r3, #1
 801800a:	60fb      	str	r3, [r7, #12]
 801800c:	e001      	b.n	8018012 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801800e:	2300      	movs	r3, #0
 8018010:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018012:	f001 fe97 	bl	8019d44 <vPortExitCritical>

	return xReturn;
 8018016:	68fb      	ldr	r3, [r7, #12]
}
 8018018:	4618      	mov	r0, r3
 801801a:	3710      	adds	r7, #16
 801801c:	46bd      	mov	sp, r7
 801801e:	bd80      	pop	{r7, pc}

08018020 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018020:	b580      	push	{r7, lr}
 8018022:	b084      	sub	sp, #16
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018028:	f001 fe5c 	bl	8019ce4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018034:	429a      	cmp	r2, r3
 8018036:	d102      	bne.n	801803e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018038:	2301      	movs	r3, #1
 801803a:	60fb      	str	r3, [r7, #12]
 801803c:	e001      	b.n	8018042 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801803e:	2300      	movs	r3, #0
 8018040:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018042:	f001 fe7f 	bl	8019d44 <vPortExitCritical>

	return xReturn;
 8018046:	68fb      	ldr	r3, [r7, #12]
}
 8018048:	4618      	mov	r0, r3
 801804a:	3710      	adds	r7, #16
 801804c:	46bd      	mov	sp, r7
 801804e:	bd80      	pop	{r7, pc}

08018050 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018050:	b480      	push	{r7}
 8018052:	b085      	sub	sp, #20
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
 8018058:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801805a:	2300      	movs	r3, #0
 801805c:	60fb      	str	r3, [r7, #12]
 801805e:	e014      	b.n	801808a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018060:	4a0f      	ldr	r2, [pc, #60]	; (80180a0 <vQueueAddToRegistry+0x50>)
 8018062:	68fb      	ldr	r3, [r7, #12]
 8018064:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d10b      	bne.n	8018084 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801806c:	490c      	ldr	r1, [pc, #48]	; (80180a0 <vQueueAddToRegistry+0x50>)
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	683a      	ldr	r2, [r7, #0]
 8018072:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8018076:	4a0a      	ldr	r2, [pc, #40]	; (80180a0 <vQueueAddToRegistry+0x50>)
 8018078:	68fb      	ldr	r3, [r7, #12]
 801807a:	00db      	lsls	r3, r3, #3
 801807c:	4413      	add	r3, r2
 801807e:	687a      	ldr	r2, [r7, #4]
 8018080:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8018082:	e006      	b.n	8018092 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	3301      	adds	r3, #1
 8018088:	60fb      	str	r3, [r7, #12]
 801808a:	68fb      	ldr	r3, [r7, #12]
 801808c:	2b07      	cmp	r3, #7
 801808e:	d9e7      	bls.n	8018060 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018090:	bf00      	nop
 8018092:	bf00      	nop
 8018094:	3714      	adds	r7, #20
 8018096:	46bd      	mov	sp, r7
 8018098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801809c:	4770      	bx	lr
 801809e:	bf00      	nop
 80180a0:	20007be8 	.word	0x20007be8

080180a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80180a4:	b580      	push	{r7, lr}
 80180a6:	b086      	sub	sp, #24
 80180a8:	af00      	add	r7, sp, #0
 80180aa:	60f8      	str	r0, [r7, #12]
 80180ac:	60b9      	str	r1, [r7, #8]
 80180ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80180b4:	f001 fe16 	bl	8019ce4 <vPortEnterCritical>
 80180b8:	697b      	ldr	r3, [r7, #20]
 80180ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80180be:	b25b      	sxtb	r3, r3
 80180c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180c4:	d103      	bne.n	80180ce <vQueueWaitForMessageRestricted+0x2a>
 80180c6:	697b      	ldr	r3, [r7, #20]
 80180c8:	2200      	movs	r2, #0
 80180ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80180ce:	697b      	ldr	r3, [r7, #20]
 80180d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80180d4:	b25b      	sxtb	r3, r3
 80180d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180da:	d103      	bne.n	80180e4 <vQueueWaitForMessageRestricted+0x40>
 80180dc:	697b      	ldr	r3, [r7, #20]
 80180de:	2200      	movs	r2, #0
 80180e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80180e4:	f001 fe2e 	bl	8019d44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80180e8:	697b      	ldr	r3, [r7, #20]
 80180ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d106      	bne.n	80180fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80180f0:	697b      	ldr	r3, [r7, #20]
 80180f2:	3324      	adds	r3, #36	; 0x24
 80180f4:	687a      	ldr	r2, [r7, #4]
 80180f6:	68b9      	ldr	r1, [r7, #8]
 80180f8:	4618      	mov	r0, r3
 80180fa:	f000 fd07 	bl	8018b0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80180fe:	6978      	ldr	r0, [r7, #20]
 8018100:	f7ff ff26 	bl	8017f50 <prvUnlockQueue>
	}
 8018104:	bf00      	nop
 8018106:	3718      	adds	r7, #24
 8018108:	46bd      	mov	sp, r7
 801810a:	bd80      	pop	{r7, pc}

0801810c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801810c:	b580      	push	{r7, lr}
 801810e:	b08e      	sub	sp, #56	; 0x38
 8018110:	af04      	add	r7, sp, #16
 8018112:	60f8      	str	r0, [r7, #12]
 8018114:	60b9      	str	r1, [r7, #8]
 8018116:	607a      	str	r2, [r7, #4]
 8018118:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801811a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801811c:	2b00      	cmp	r3, #0
 801811e:	d10a      	bne.n	8018136 <xTaskCreateStatic+0x2a>
	__asm volatile
 8018120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018124:	f383 8811 	msr	BASEPRI, r3
 8018128:	f3bf 8f6f 	isb	sy
 801812c:	f3bf 8f4f 	dsb	sy
 8018130:	623b      	str	r3, [r7, #32]
}
 8018132:	bf00      	nop
 8018134:	e7fe      	b.n	8018134 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8018136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018138:	2b00      	cmp	r3, #0
 801813a:	d10a      	bne.n	8018152 <xTaskCreateStatic+0x46>
	__asm volatile
 801813c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018140:	f383 8811 	msr	BASEPRI, r3
 8018144:	f3bf 8f6f 	isb	sy
 8018148:	f3bf 8f4f 	dsb	sy
 801814c:	61fb      	str	r3, [r7, #28]
}
 801814e:	bf00      	nop
 8018150:	e7fe      	b.n	8018150 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8018152:	235c      	movs	r3, #92	; 0x5c
 8018154:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8018156:	693b      	ldr	r3, [r7, #16]
 8018158:	2b5c      	cmp	r3, #92	; 0x5c
 801815a:	d00a      	beq.n	8018172 <xTaskCreateStatic+0x66>
	__asm volatile
 801815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018160:	f383 8811 	msr	BASEPRI, r3
 8018164:	f3bf 8f6f 	isb	sy
 8018168:	f3bf 8f4f 	dsb	sy
 801816c:	61bb      	str	r3, [r7, #24]
}
 801816e:	bf00      	nop
 8018170:	e7fe      	b.n	8018170 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8018172:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8018174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018176:	2b00      	cmp	r3, #0
 8018178:	d01e      	beq.n	80181b8 <xTaskCreateStatic+0xac>
 801817a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801817c:	2b00      	cmp	r3, #0
 801817e:	d01b      	beq.n	80181b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018182:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018188:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801818c:	2202      	movs	r2, #2
 801818e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8018192:	2300      	movs	r3, #0
 8018194:	9303      	str	r3, [sp, #12]
 8018196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018198:	9302      	str	r3, [sp, #8]
 801819a:	f107 0314 	add.w	r3, r7, #20
 801819e:	9301      	str	r3, [sp, #4]
 80181a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181a2:	9300      	str	r3, [sp, #0]
 80181a4:	683b      	ldr	r3, [r7, #0]
 80181a6:	687a      	ldr	r2, [r7, #4]
 80181a8:	68b9      	ldr	r1, [r7, #8]
 80181aa:	68f8      	ldr	r0, [r7, #12]
 80181ac:	f000 f850 	bl	8018250 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80181b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80181b2:	f000 f8dd 	bl	8018370 <prvAddNewTaskToReadyList>
 80181b6:	e001      	b.n	80181bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80181b8:	2300      	movs	r3, #0
 80181ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80181bc:	697b      	ldr	r3, [r7, #20]
	}
 80181be:	4618      	mov	r0, r3
 80181c0:	3728      	adds	r7, #40	; 0x28
 80181c2:	46bd      	mov	sp, r7
 80181c4:	bd80      	pop	{r7, pc}

080181c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80181c6:	b580      	push	{r7, lr}
 80181c8:	b08c      	sub	sp, #48	; 0x30
 80181ca:	af04      	add	r7, sp, #16
 80181cc:	60f8      	str	r0, [r7, #12]
 80181ce:	60b9      	str	r1, [r7, #8]
 80181d0:	603b      	str	r3, [r7, #0]
 80181d2:	4613      	mov	r3, r2
 80181d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80181d6:	88fb      	ldrh	r3, [r7, #6]
 80181d8:	009b      	lsls	r3, r3, #2
 80181da:	4618      	mov	r0, r3
 80181dc:	f001 fea4 	bl	8019f28 <pvPortMalloc>
 80181e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80181e2:	697b      	ldr	r3, [r7, #20]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d00e      	beq.n	8018206 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80181e8:	205c      	movs	r0, #92	; 0x5c
 80181ea:	f001 fe9d 	bl	8019f28 <pvPortMalloc>
 80181ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80181f0:	69fb      	ldr	r3, [r7, #28]
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d003      	beq.n	80181fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80181f6:	69fb      	ldr	r3, [r7, #28]
 80181f8:	697a      	ldr	r2, [r7, #20]
 80181fa:	631a      	str	r2, [r3, #48]	; 0x30
 80181fc:	e005      	b.n	801820a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80181fe:	6978      	ldr	r0, [r7, #20]
 8018200:	f001 ff5e 	bl	801a0c0 <vPortFree>
 8018204:	e001      	b.n	801820a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8018206:	2300      	movs	r3, #0
 8018208:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801820a:	69fb      	ldr	r3, [r7, #28]
 801820c:	2b00      	cmp	r3, #0
 801820e:	d017      	beq.n	8018240 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8018210:	69fb      	ldr	r3, [r7, #28]
 8018212:	2200      	movs	r2, #0
 8018214:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018218:	88fa      	ldrh	r2, [r7, #6]
 801821a:	2300      	movs	r3, #0
 801821c:	9303      	str	r3, [sp, #12]
 801821e:	69fb      	ldr	r3, [r7, #28]
 8018220:	9302      	str	r3, [sp, #8]
 8018222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018224:	9301      	str	r3, [sp, #4]
 8018226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018228:	9300      	str	r3, [sp, #0]
 801822a:	683b      	ldr	r3, [r7, #0]
 801822c:	68b9      	ldr	r1, [r7, #8]
 801822e:	68f8      	ldr	r0, [r7, #12]
 8018230:	f000 f80e 	bl	8018250 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018234:	69f8      	ldr	r0, [r7, #28]
 8018236:	f000 f89b 	bl	8018370 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801823a:	2301      	movs	r3, #1
 801823c:	61bb      	str	r3, [r7, #24]
 801823e:	e002      	b.n	8018246 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018240:	f04f 33ff 	mov.w	r3, #4294967295
 8018244:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018246:	69bb      	ldr	r3, [r7, #24]
	}
 8018248:	4618      	mov	r0, r3
 801824a:	3720      	adds	r7, #32
 801824c:	46bd      	mov	sp, r7
 801824e:	bd80      	pop	{r7, pc}

08018250 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018250:	b580      	push	{r7, lr}
 8018252:	b088      	sub	sp, #32
 8018254:	af00      	add	r7, sp, #0
 8018256:	60f8      	str	r0, [r7, #12]
 8018258:	60b9      	str	r1, [r7, #8]
 801825a:	607a      	str	r2, [r7, #4]
 801825c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018260:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	009b      	lsls	r3, r3, #2
 8018266:	461a      	mov	r2, r3
 8018268:	21a5      	movs	r1, #165	; 0xa5
 801826a:	f002 fe2d 	bl	801aec8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018278:	3b01      	subs	r3, #1
 801827a:	009b      	lsls	r3, r3, #2
 801827c:	4413      	add	r3, r2
 801827e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018280:	69bb      	ldr	r3, [r7, #24]
 8018282:	f023 0307 	bic.w	r3, r3, #7
 8018286:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018288:	69bb      	ldr	r3, [r7, #24]
 801828a:	f003 0307 	and.w	r3, r3, #7
 801828e:	2b00      	cmp	r3, #0
 8018290:	d00a      	beq.n	80182a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8018292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018296:	f383 8811 	msr	BASEPRI, r3
 801829a:	f3bf 8f6f 	isb	sy
 801829e:	f3bf 8f4f 	dsb	sy
 80182a2:	617b      	str	r3, [r7, #20]
}
 80182a4:	bf00      	nop
 80182a6:	e7fe      	b.n	80182a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80182a8:	68bb      	ldr	r3, [r7, #8]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d01f      	beq.n	80182ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80182ae:	2300      	movs	r3, #0
 80182b0:	61fb      	str	r3, [r7, #28]
 80182b2:	e012      	b.n	80182da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80182b4:	68ba      	ldr	r2, [r7, #8]
 80182b6:	69fb      	ldr	r3, [r7, #28]
 80182b8:	4413      	add	r3, r2
 80182ba:	7819      	ldrb	r1, [r3, #0]
 80182bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80182be:	69fb      	ldr	r3, [r7, #28]
 80182c0:	4413      	add	r3, r2
 80182c2:	3334      	adds	r3, #52	; 0x34
 80182c4:	460a      	mov	r2, r1
 80182c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80182c8:	68ba      	ldr	r2, [r7, #8]
 80182ca:	69fb      	ldr	r3, [r7, #28]
 80182cc:	4413      	add	r3, r2
 80182ce:	781b      	ldrb	r3, [r3, #0]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d006      	beq.n	80182e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80182d4:	69fb      	ldr	r3, [r7, #28]
 80182d6:	3301      	adds	r3, #1
 80182d8:	61fb      	str	r3, [r7, #28]
 80182da:	69fb      	ldr	r3, [r7, #28]
 80182dc:	2b0f      	cmp	r3, #15
 80182de:	d9e9      	bls.n	80182b4 <prvInitialiseNewTask+0x64>
 80182e0:	e000      	b.n	80182e4 <prvInitialiseNewTask+0x94>
			{
				break;
 80182e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80182e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182e6:	2200      	movs	r2, #0
 80182e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80182ec:	e003      	b.n	80182f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80182ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182f0:	2200      	movs	r2, #0
 80182f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80182f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182f8:	2b37      	cmp	r3, #55	; 0x37
 80182fa:	d901      	bls.n	8018300 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80182fc:	2337      	movs	r3, #55	; 0x37
 80182fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018304:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8018306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801830a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801830e:	2200      	movs	r2, #0
 8018310:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8018312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018314:	3304      	adds	r3, #4
 8018316:	4618      	mov	r0, r3
 8018318:	f7fe ff64 	bl	80171e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801831c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801831e:	3318      	adds	r3, #24
 8018320:	4618      	mov	r0, r3
 8018322:	f7fe ff5f 	bl	80171e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801832a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801832e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018334:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801833a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801833c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801833e:	2200      	movs	r2, #0
 8018340:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018344:	2200      	movs	r2, #0
 8018346:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801834a:	683a      	ldr	r2, [r7, #0]
 801834c:	68f9      	ldr	r1, [r7, #12]
 801834e:	69b8      	ldr	r0, [r7, #24]
 8018350:	f001 fb9c 	bl	8019a8c <pxPortInitialiseStack>
 8018354:	4602      	mov	r2, r0
 8018356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018358:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801835a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801835c:	2b00      	cmp	r3, #0
 801835e:	d002      	beq.n	8018366 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018366:	bf00      	nop
 8018368:	3720      	adds	r7, #32
 801836a:	46bd      	mov	sp, r7
 801836c:	bd80      	pop	{r7, pc}
	...

08018370 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018370:	b580      	push	{r7, lr}
 8018372:	b082      	sub	sp, #8
 8018374:	af00      	add	r7, sp, #0
 8018376:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018378:	f001 fcb4 	bl	8019ce4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801837c:	4b2d      	ldr	r3, [pc, #180]	; (8018434 <prvAddNewTaskToReadyList+0xc4>)
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	3301      	adds	r3, #1
 8018382:	4a2c      	ldr	r2, [pc, #176]	; (8018434 <prvAddNewTaskToReadyList+0xc4>)
 8018384:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018386:	4b2c      	ldr	r3, [pc, #176]	; (8018438 <prvAddNewTaskToReadyList+0xc8>)
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	2b00      	cmp	r3, #0
 801838c:	d109      	bne.n	80183a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801838e:	4a2a      	ldr	r2, [pc, #168]	; (8018438 <prvAddNewTaskToReadyList+0xc8>)
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018394:	4b27      	ldr	r3, [pc, #156]	; (8018434 <prvAddNewTaskToReadyList+0xc4>)
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	2b01      	cmp	r3, #1
 801839a:	d110      	bne.n	80183be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801839c:	f000 fd44 	bl	8018e28 <prvInitialiseTaskLists>
 80183a0:	e00d      	b.n	80183be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80183a2:	4b26      	ldr	r3, [pc, #152]	; (801843c <prvAddNewTaskToReadyList+0xcc>)
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d109      	bne.n	80183be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80183aa:	4b23      	ldr	r3, [pc, #140]	; (8018438 <prvAddNewTaskToReadyList+0xc8>)
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183b4:	429a      	cmp	r2, r3
 80183b6:	d802      	bhi.n	80183be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80183b8:	4a1f      	ldr	r2, [pc, #124]	; (8018438 <prvAddNewTaskToReadyList+0xc8>)
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80183be:	4b20      	ldr	r3, [pc, #128]	; (8018440 <prvAddNewTaskToReadyList+0xd0>)
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	3301      	adds	r3, #1
 80183c4:	4a1e      	ldr	r2, [pc, #120]	; (8018440 <prvAddNewTaskToReadyList+0xd0>)
 80183c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80183c8:	4b1d      	ldr	r3, [pc, #116]	; (8018440 <prvAddNewTaskToReadyList+0xd0>)
 80183ca:	681a      	ldr	r2, [r3, #0]
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183d4:	4b1b      	ldr	r3, [pc, #108]	; (8018444 <prvAddNewTaskToReadyList+0xd4>)
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	429a      	cmp	r2, r3
 80183da:	d903      	bls.n	80183e4 <prvAddNewTaskToReadyList+0x74>
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183e0:	4a18      	ldr	r2, [pc, #96]	; (8018444 <prvAddNewTaskToReadyList+0xd4>)
 80183e2:	6013      	str	r3, [r2, #0]
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183e8:	4613      	mov	r3, r2
 80183ea:	009b      	lsls	r3, r3, #2
 80183ec:	4413      	add	r3, r2
 80183ee:	009b      	lsls	r3, r3, #2
 80183f0:	4a15      	ldr	r2, [pc, #84]	; (8018448 <prvAddNewTaskToReadyList+0xd8>)
 80183f2:	441a      	add	r2, r3
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	3304      	adds	r3, #4
 80183f8:	4619      	mov	r1, r3
 80183fa:	4610      	mov	r0, r2
 80183fc:	f7fe feff 	bl	80171fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018400:	f001 fca0 	bl	8019d44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8018404:	4b0d      	ldr	r3, [pc, #52]	; (801843c <prvAddNewTaskToReadyList+0xcc>)
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d00e      	beq.n	801842a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801840c:	4b0a      	ldr	r3, [pc, #40]	; (8018438 <prvAddNewTaskToReadyList+0xc8>)
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018416:	429a      	cmp	r2, r3
 8018418:	d207      	bcs.n	801842a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801841a:	4b0c      	ldr	r3, [pc, #48]	; (801844c <prvAddNewTaskToReadyList+0xdc>)
 801841c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018420:	601a      	str	r2, [r3, #0]
 8018422:	f3bf 8f4f 	dsb	sy
 8018426:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801842a:	bf00      	nop
 801842c:	3708      	adds	r7, #8
 801842e:	46bd      	mov	sp, r7
 8018430:	bd80      	pop	{r7, pc}
 8018432:	bf00      	nop
 8018434:	20000fd4 	.word	0x20000fd4
 8018438:	20000b00 	.word	0x20000b00
 801843c:	20000fe0 	.word	0x20000fe0
 8018440:	20000ff0 	.word	0x20000ff0
 8018444:	20000fdc 	.word	0x20000fdc
 8018448:	20000b04 	.word	0x20000b04
 801844c:	e000ed04 	.word	0xe000ed04

08018450 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8018450:	b580      	push	{r7, lr}
 8018452:	b08a      	sub	sp, #40	; 0x28
 8018454:	af00      	add	r7, sp, #0
 8018456:	6078      	str	r0, [r7, #4]
 8018458:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801845a:	2300      	movs	r3, #0
 801845c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	2b00      	cmp	r3, #0
 8018462:	d10a      	bne.n	801847a <vTaskDelayUntil+0x2a>
	__asm volatile
 8018464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018468:	f383 8811 	msr	BASEPRI, r3
 801846c:	f3bf 8f6f 	isb	sy
 8018470:	f3bf 8f4f 	dsb	sy
 8018474:	617b      	str	r3, [r7, #20]
}
 8018476:	bf00      	nop
 8018478:	e7fe      	b.n	8018478 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 801847a:	683b      	ldr	r3, [r7, #0]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d10a      	bne.n	8018496 <vTaskDelayUntil+0x46>
	__asm volatile
 8018480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018484:	f383 8811 	msr	BASEPRI, r3
 8018488:	f3bf 8f6f 	isb	sy
 801848c:	f3bf 8f4f 	dsb	sy
 8018490:	613b      	str	r3, [r7, #16]
}
 8018492:	bf00      	nop
 8018494:	e7fe      	b.n	8018494 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8018496:	4b2a      	ldr	r3, [pc, #168]	; (8018540 <vTaskDelayUntil+0xf0>)
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	2b00      	cmp	r3, #0
 801849c:	d00a      	beq.n	80184b4 <vTaskDelayUntil+0x64>
	__asm volatile
 801849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184a2:	f383 8811 	msr	BASEPRI, r3
 80184a6:	f3bf 8f6f 	isb	sy
 80184aa:	f3bf 8f4f 	dsb	sy
 80184ae:	60fb      	str	r3, [r7, #12]
}
 80184b0:	bf00      	nop
 80184b2:	e7fe      	b.n	80184b2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80184b4:	f000 f8e4 	bl	8018680 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80184b8:	4b22      	ldr	r3, [pc, #136]	; (8018544 <vTaskDelayUntil+0xf4>)
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	683a      	ldr	r2, [r7, #0]
 80184c4:	4413      	add	r3, r2
 80184c6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	6a3a      	ldr	r2, [r7, #32]
 80184ce:	429a      	cmp	r2, r3
 80184d0:	d20b      	bcs.n	80184ea <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	69fa      	ldr	r2, [r7, #28]
 80184d8:	429a      	cmp	r2, r3
 80184da:	d211      	bcs.n	8018500 <vTaskDelayUntil+0xb0>
 80184dc:	69fa      	ldr	r2, [r7, #28]
 80184de:	6a3b      	ldr	r3, [r7, #32]
 80184e0:	429a      	cmp	r2, r3
 80184e2:	d90d      	bls.n	8018500 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80184e4:	2301      	movs	r3, #1
 80184e6:	627b      	str	r3, [r7, #36]	; 0x24
 80184e8:	e00a      	b.n	8018500 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	69fa      	ldr	r2, [r7, #28]
 80184f0:	429a      	cmp	r2, r3
 80184f2:	d303      	bcc.n	80184fc <vTaskDelayUntil+0xac>
 80184f4:	69fa      	ldr	r2, [r7, #28]
 80184f6:	6a3b      	ldr	r3, [r7, #32]
 80184f8:	429a      	cmp	r2, r3
 80184fa:	d901      	bls.n	8018500 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80184fc:	2301      	movs	r3, #1
 80184fe:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	69fa      	ldr	r2, [r7, #28]
 8018504:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8018506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018508:	2b00      	cmp	r3, #0
 801850a:	d006      	beq.n	801851a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801850c:	69fa      	ldr	r2, [r7, #28]
 801850e:	6a3b      	ldr	r3, [r7, #32]
 8018510:	1ad3      	subs	r3, r2, r3
 8018512:	2100      	movs	r1, #0
 8018514:	4618      	mov	r0, r3
 8018516:	f000 fef7 	bl	8019308 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801851a:	f000 f8bf 	bl	801869c <xTaskResumeAll>
 801851e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018520:	69bb      	ldr	r3, [r7, #24]
 8018522:	2b00      	cmp	r3, #0
 8018524:	d107      	bne.n	8018536 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8018526:	4b08      	ldr	r3, [pc, #32]	; (8018548 <vTaskDelayUntil+0xf8>)
 8018528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801852c:	601a      	str	r2, [r3, #0]
 801852e:	f3bf 8f4f 	dsb	sy
 8018532:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018536:	bf00      	nop
 8018538:	3728      	adds	r7, #40	; 0x28
 801853a:	46bd      	mov	sp, r7
 801853c:	bd80      	pop	{r7, pc}
 801853e:	bf00      	nop
 8018540:	20000ffc 	.word	0x20000ffc
 8018544:	20000fd8 	.word	0x20000fd8
 8018548:	e000ed04 	.word	0xe000ed04

0801854c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801854c:	b580      	push	{r7, lr}
 801854e:	b084      	sub	sp, #16
 8018550:	af00      	add	r7, sp, #0
 8018552:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018554:	2300      	movs	r3, #0
 8018556:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d017      	beq.n	801858e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801855e:	4b13      	ldr	r3, [pc, #76]	; (80185ac <vTaskDelay+0x60>)
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d00a      	beq.n	801857c <vTaskDelay+0x30>
	__asm volatile
 8018566:	f04f 0350 	mov.w	r3, #80	; 0x50
 801856a:	f383 8811 	msr	BASEPRI, r3
 801856e:	f3bf 8f6f 	isb	sy
 8018572:	f3bf 8f4f 	dsb	sy
 8018576:	60bb      	str	r3, [r7, #8]
}
 8018578:	bf00      	nop
 801857a:	e7fe      	b.n	801857a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801857c:	f000 f880 	bl	8018680 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018580:	2100      	movs	r1, #0
 8018582:	6878      	ldr	r0, [r7, #4]
 8018584:	f000 fec0 	bl	8019308 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018588:	f000 f888 	bl	801869c <xTaskResumeAll>
 801858c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801858e:	68fb      	ldr	r3, [r7, #12]
 8018590:	2b00      	cmp	r3, #0
 8018592:	d107      	bne.n	80185a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018594:	4b06      	ldr	r3, [pc, #24]	; (80185b0 <vTaskDelay+0x64>)
 8018596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801859a:	601a      	str	r2, [r3, #0]
 801859c:	f3bf 8f4f 	dsb	sy
 80185a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80185a4:	bf00      	nop
 80185a6:	3710      	adds	r7, #16
 80185a8:	46bd      	mov	sp, r7
 80185aa:	bd80      	pop	{r7, pc}
 80185ac:	20000ffc 	.word	0x20000ffc
 80185b0:	e000ed04 	.word	0xe000ed04

080185b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80185b4:	b580      	push	{r7, lr}
 80185b6:	b08a      	sub	sp, #40	; 0x28
 80185b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80185ba:	2300      	movs	r3, #0
 80185bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80185be:	2300      	movs	r3, #0
 80185c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80185c2:	463a      	mov	r2, r7
 80185c4:	1d39      	adds	r1, r7, #4
 80185c6:	f107 0308 	add.w	r3, r7, #8
 80185ca:	4618      	mov	r0, r3
 80185cc:	f7fe fb4a 	bl	8016c64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80185d0:	6839      	ldr	r1, [r7, #0]
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	68ba      	ldr	r2, [r7, #8]
 80185d6:	9202      	str	r2, [sp, #8]
 80185d8:	9301      	str	r3, [sp, #4]
 80185da:	2300      	movs	r3, #0
 80185dc:	9300      	str	r3, [sp, #0]
 80185de:	2300      	movs	r3, #0
 80185e0:	460a      	mov	r2, r1
 80185e2:	4921      	ldr	r1, [pc, #132]	; (8018668 <vTaskStartScheduler+0xb4>)
 80185e4:	4821      	ldr	r0, [pc, #132]	; (801866c <vTaskStartScheduler+0xb8>)
 80185e6:	f7ff fd91 	bl	801810c <xTaskCreateStatic>
 80185ea:	4603      	mov	r3, r0
 80185ec:	4a20      	ldr	r2, [pc, #128]	; (8018670 <vTaskStartScheduler+0xbc>)
 80185ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80185f0:	4b1f      	ldr	r3, [pc, #124]	; (8018670 <vTaskStartScheduler+0xbc>)
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d002      	beq.n	80185fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80185f8:	2301      	movs	r3, #1
 80185fa:	617b      	str	r3, [r7, #20]
 80185fc:	e001      	b.n	8018602 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80185fe:	2300      	movs	r3, #0
 8018600:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8018602:	697b      	ldr	r3, [r7, #20]
 8018604:	2b01      	cmp	r3, #1
 8018606:	d102      	bne.n	801860e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018608:	f000 fed2 	bl	80193b0 <xTimerCreateTimerTask>
 801860c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801860e:	697b      	ldr	r3, [r7, #20]
 8018610:	2b01      	cmp	r3, #1
 8018612:	d116      	bne.n	8018642 <vTaskStartScheduler+0x8e>
	__asm volatile
 8018614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018618:	f383 8811 	msr	BASEPRI, r3
 801861c:	f3bf 8f6f 	isb	sy
 8018620:	f3bf 8f4f 	dsb	sy
 8018624:	613b      	str	r3, [r7, #16]
}
 8018626:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018628:	4b12      	ldr	r3, [pc, #72]	; (8018674 <vTaskStartScheduler+0xc0>)
 801862a:	f04f 32ff 	mov.w	r2, #4294967295
 801862e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018630:	4b11      	ldr	r3, [pc, #68]	; (8018678 <vTaskStartScheduler+0xc4>)
 8018632:	2201      	movs	r2, #1
 8018634:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018636:	4b11      	ldr	r3, [pc, #68]	; (801867c <vTaskStartScheduler+0xc8>)
 8018638:	2200      	movs	r2, #0
 801863a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801863c:	f001 fab0 	bl	8019ba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018640:	e00e      	b.n	8018660 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018642:	697b      	ldr	r3, [r7, #20]
 8018644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018648:	d10a      	bne.n	8018660 <vTaskStartScheduler+0xac>
	__asm volatile
 801864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801864e:	f383 8811 	msr	BASEPRI, r3
 8018652:	f3bf 8f6f 	isb	sy
 8018656:	f3bf 8f4f 	dsb	sy
 801865a:	60fb      	str	r3, [r7, #12]
}
 801865c:	bf00      	nop
 801865e:	e7fe      	b.n	801865e <vTaskStartScheduler+0xaa>
}
 8018660:	bf00      	nop
 8018662:	3718      	adds	r7, #24
 8018664:	46bd      	mov	sp, r7
 8018666:	bd80      	pop	{r7, pc}
 8018668:	0801ba50 	.word	0x0801ba50
 801866c:	08018df9 	.word	0x08018df9
 8018670:	20000ff8 	.word	0x20000ff8
 8018674:	20000ff4 	.word	0x20000ff4
 8018678:	20000fe0 	.word	0x20000fe0
 801867c:	20000fd8 	.word	0x20000fd8

08018680 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018680:	b480      	push	{r7}
 8018682:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018684:	4b04      	ldr	r3, [pc, #16]	; (8018698 <vTaskSuspendAll+0x18>)
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	3301      	adds	r3, #1
 801868a:	4a03      	ldr	r2, [pc, #12]	; (8018698 <vTaskSuspendAll+0x18>)
 801868c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801868e:	bf00      	nop
 8018690:	46bd      	mov	sp, r7
 8018692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018696:	4770      	bx	lr
 8018698:	20000ffc 	.word	0x20000ffc

0801869c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801869c:	b580      	push	{r7, lr}
 801869e:	b084      	sub	sp, #16
 80186a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80186a2:	2300      	movs	r3, #0
 80186a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80186a6:	2300      	movs	r3, #0
 80186a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80186aa:	4b42      	ldr	r3, [pc, #264]	; (80187b4 <xTaskResumeAll+0x118>)
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d10a      	bne.n	80186c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80186b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186b6:	f383 8811 	msr	BASEPRI, r3
 80186ba:	f3bf 8f6f 	isb	sy
 80186be:	f3bf 8f4f 	dsb	sy
 80186c2:	603b      	str	r3, [r7, #0]
}
 80186c4:	bf00      	nop
 80186c6:	e7fe      	b.n	80186c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80186c8:	f001 fb0c 	bl	8019ce4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80186cc:	4b39      	ldr	r3, [pc, #228]	; (80187b4 <xTaskResumeAll+0x118>)
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	3b01      	subs	r3, #1
 80186d2:	4a38      	ldr	r2, [pc, #224]	; (80187b4 <xTaskResumeAll+0x118>)
 80186d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80186d6:	4b37      	ldr	r3, [pc, #220]	; (80187b4 <xTaskResumeAll+0x118>)
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d162      	bne.n	80187a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80186de:	4b36      	ldr	r3, [pc, #216]	; (80187b8 <xTaskResumeAll+0x11c>)
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d05e      	beq.n	80187a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80186e6:	e02f      	b.n	8018748 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80186e8:	4b34      	ldr	r3, [pc, #208]	; (80187bc <xTaskResumeAll+0x120>)
 80186ea:	68db      	ldr	r3, [r3, #12]
 80186ec:	68db      	ldr	r3, [r3, #12]
 80186ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	3318      	adds	r3, #24
 80186f4:	4618      	mov	r0, r3
 80186f6:	f7fe fddf 	bl	80172b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	3304      	adds	r3, #4
 80186fe:	4618      	mov	r0, r3
 8018700:	f7fe fdda 	bl	80172b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018708:	4b2d      	ldr	r3, [pc, #180]	; (80187c0 <xTaskResumeAll+0x124>)
 801870a:	681b      	ldr	r3, [r3, #0]
 801870c:	429a      	cmp	r2, r3
 801870e:	d903      	bls.n	8018718 <xTaskResumeAll+0x7c>
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018714:	4a2a      	ldr	r2, [pc, #168]	; (80187c0 <xTaskResumeAll+0x124>)
 8018716:	6013      	str	r3, [r2, #0]
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801871c:	4613      	mov	r3, r2
 801871e:	009b      	lsls	r3, r3, #2
 8018720:	4413      	add	r3, r2
 8018722:	009b      	lsls	r3, r3, #2
 8018724:	4a27      	ldr	r2, [pc, #156]	; (80187c4 <xTaskResumeAll+0x128>)
 8018726:	441a      	add	r2, r3
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	3304      	adds	r3, #4
 801872c:	4619      	mov	r1, r3
 801872e:	4610      	mov	r0, r2
 8018730:	f7fe fd65 	bl	80171fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018738:	4b23      	ldr	r3, [pc, #140]	; (80187c8 <xTaskResumeAll+0x12c>)
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801873e:	429a      	cmp	r2, r3
 8018740:	d302      	bcc.n	8018748 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018742:	4b22      	ldr	r3, [pc, #136]	; (80187cc <xTaskResumeAll+0x130>)
 8018744:	2201      	movs	r2, #1
 8018746:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018748:	4b1c      	ldr	r3, [pc, #112]	; (80187bc <xTaskResumeAll+0x120>)
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d1cb      	bne.n	80186e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d001      	beq.n	801875a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018756:	f000 fc05 	bl	8018f64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801875a:	4b1d      	ldr	r3, [pc, #116]	; (80187d0 <xTaskResumeAll+0x134>)
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	2b00      	cmp	r3, #0
 8018764:	d010      	beq.n	8018788 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018766:	f000 f859 	bl	801881c <xTaskIncrementTick>
 801876a:	4603      	mov	r3, r0
 801876c:	2b00      	cmp	r3, #0
 801876e:	d002      	beq.n	8018776 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018770:	4b16      	ldr	r3, [pc, #88]	; (80187cc <xTaskResumeAll+0x130>)
 8018772:	2201      	movs	r2, #1
 8018774:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	3b01      	subs	r3, #1
 801877a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	2b00      	cmp	r3, #0
 8018780:	d1f1      	bne.n	8018766 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8018782:	4b13      	ldr	r3, [pc, #76]	; (80187d0 <xTaskResumeAll+0x134>)
 8018784:	2200      	movs	r2, #0
 8018786:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018788:	4b10      	ldr	r3, [pc, #64]	; (80187cc <xTaskResumeAll+0x130>)
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	2b00      	cmp	r3, #0
 801878e:	d009      	beq.n	80187a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018790:	2301      	movs	r3, #1
 8018792:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018794:	4b0f      	ldr	r3, [pc, #60]	; (80187d4 <xTaskResumeAll+0x138>)
 8018796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801879a:	601a      	str	r2, [r3, #0]
 801879c:	f3bf 8f4f 	dsb	sy
 80187a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80187a4:	f001 face 	bl	8019d44 <vPortExitCritical>

	return xAlreadyYielded;
 80187a8:	68bb      	ldr	r3, [r7, #8]
}
 80187aa:	4618      	mov	r0, r3
 80187ac:	3710      	adds	r7, #16
 80187ae:	46bd      	mov	sp, r7
 80187b0:	bd80      	pop	{r7, pc}
 80187b2:	bf00      	nop
 80187b4:	20000ffc 	.word	0x20000ffc
 80187b8:	20000fd4 	.word	0x20000fd4
 80187bc:	20000f94 	.word	0x20000f94
 80187c0:	20000fdc 	.word	0x20000fdc
 80187c4:	20000b04 	.word	0x20000b04
 80187c8:	20000b00 	.word	0x20000b00
 80187cc:	20000fe8 	.word	0x20000fe8
 80187d0:	20000fe4 	.word	0x20000fe4
 80187d4:	e000ed04 	.word	0xe000ed04

080187d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80187d8:	b480      	push	{r7}
 80187da:	b083      	sub	sp, #12
 80187dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80187de:	4b05      	ldr	r3, [pc, #20]	; (80187f4 <xTaskGetTickCount+0x1c>)
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80187e4:	687b      	ldr	r3, [r7, #4]
}
 80187e6:	4618      	mov	r0, r3
 80187e8:	370c      	adds	r7, #12
 80187ea:	46bd      	mov	sp, r7
 80187ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f0:	4770      	bx	lr
 80187f2:	bf00      	nop
 80187f4:	20000fd8 	.word	0x20000fd8

080187f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b082      	sub	sp, #8
 80187fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80187fe:	f001 fb53 	bl	8019ea8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8018802:	2300      	movs	r3, #0
 8018804:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8018806:	4b04      	ldr	r3, [pc, #16]	; (8018818 <xTaskGetTickCountFromISR+0x20>)
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801880c:	683b      	ldr	r3, [r7, #0]
}
 801880e:	4618      	mov	r0, r3
 8018810:	3708      	adds	r7, #8
 8018812:	46bd      	mov	sp, r7
 8018814:	bd80      	pop	{r7, pc}
 8018816:	bf00      	nop
 8018818:	20000fd8 	.word	0x20000fd8

0801881c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801881c:	b580      	push	{r7, lr}
 801881e:	b086      	sub	sp, #24
 8018820:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018822:	2300      	movs	r3, #0
 8018824:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018826:	4b4f      	ldr	r3, [pc, #316]	; (8018964 <xTaskIncrementTick+0x148>)
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	2b00      	cmp	r3, #0
 801882c:	f040 808f 	bne.w	801894e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018830:	4b4d      	ldr	r3, [pc, #308]	; (8018968 <xTaskIncrementTick+0x14c>)
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	3301      	adds	r3, #1
 8018836:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018838:	4a4b      	ldr	r2, [pc, #300]	; (8018968 <xTaskIncrementTick+0x14c>)
 801883a:	693b      	ldr	r3, [r7, #16]
 801883c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801883e:	693b      	ldr	r3, [r7, #16]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d120      	bne.n	8018886 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018844:	4b49      	ldr	r3, [pc, #292]	; (801896c <xTaskIncrementTick+0x150>)
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	2b00      	cmp	r3, #0
 801884c:	d00a      	beq.n	8018864 <xTaskIncrementTick+0x48>
	__asm volatile
 801884e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018852:	f383 8811 	msr	BASEPRI, r3
 8018856:	f3bf 8f6f 	isb	sy
 801885a:	f3bf 8f4f 	dsb	sy
 801885e:	603b      	str	r3, [r7, #0]
}
 8018860:	bf00      	nop
 8018862:	e7fe      	b.n	8018862 <xTaskIncrementTick+0x46>
 8018864:	4b41      	ldr	r3, [pc, #260]	; (801896c <xTaskIncrementTick+0x150>)
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	60fb      	str	r3, [r7, #12]
 801886a:	4b41      	ldr	r3, [pc, #260]	; (8018970 <xTaskIncrementTick+0x154>)
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	4a3f      	ldr	r2, [pc, #252]	; (801896c <xTaskIncrementTick+0x150>)
 8018870:	6013      	str	r3, [r2, #0]
 8018872:	4a3f      	ldr	r2, [pc, #252]	; (8018970 <xTaskIncrementTick+0x154>)
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	6013      	str	r3, [r2, #0]
 8018878:	4b3e      	ldr	r3, [pc, #248]	; (8018974 <xTaskIncrementTick+0x158>)
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	3301      	adds	r3, #1
 801887e:	4a3d      	ldr	r2, [pc, #244]	; (8018974 <xTaskIncrementTick+0x158>)
 8018880:	6013      	str	r3, [r2, #0]
 8018882:	f000 fb6f 	bl	8018f64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018886:	4b3c      	ldr	r3, [pc, #240]	; (8018978 <xTaskIncrementTick+0x15c>)
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	693a      	ldr	r2, [r7, #16]
 801888c:	429a      	cmp	r2, r3
 801888e:	d349      	bcc.n	8018924 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018890:	4b36      	ldr	r3, [pc, #216]	; (801896c <xTaskIncrementTick+0x150>)
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d104      	bne.n	80188a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801889a:	4b37      	ldr	r3, [pc, #220]	; (8018978 <xTaskIncrementTick+0x15c>)
 801889c:	f04f 32ff 	mov.w	r2, #4294967295
 80188a0:	601a      	str	r2, [r3, #0]
					break;
 80188a2:	e03f      	b.n	8018924 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80188a4:	4b31      	ldr	r3, [pc, #196]	; (801896c <xTaskIncrementTick+0x150>)
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	68db      	ldr	r3, [r3, #12]
 80188aa:	68db      	ldr	r3, [r3, #12]
 80188ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80188ae:	68bb      	ldr	r3, [r7, #8]
 80188b0:	685b      	ldr	r3, [r3, #4]
 80188b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80188b4:	693a      	ldr	r2, [r7, #16]
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	429a      	cmp	r2, r3
 80188ba:	d203      	bcs.n	80188c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80188bc:	4a2e      	ldr	r2, [pc, #184]	; (8018978 <xTaskIncrementTick+0x15c>)
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80188c2:	e02f      	b.n	8018924 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80188c4:	68bb      	ldr	r3, [r7, #8]
 80188c6:	3304      	adds	r3, #4
 80188c8:	4618      	mov	r0, r3
 80188ca:	f7fe fcf5 	bl	80172b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80188ce:	68bb      	ldr	r3, [r7, #8]
 80188d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d004      	beq.n	80188e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80188d6:	68bb      	ldr	r3, [r7, #8]
 80188d8:	3318      	adds	r3, #24
 80188da:	4618      	mov	r0, r3
 80188dc:	f7fe fcec 	bl	80172b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80188e0:	68bb      	ldr	r3, [r7, #8]
 80188e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188e4:	4b25      	ldr	r3, [pc, #148]	; (801897c <xTaskIncrementTick+0x160>)
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	429a      	cmp	r2, r3
 80188ea:	d903      	bls.n	80188f4 <xTaskIncrementTick+0xd8>
 80188ec:	68bb      	ldr	r3, [r7, #8]
 80188ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188f0:	4a22      	ldr	r2, [pc, #136]	; (801897c <xTaskIncrementTick+0x160>)
 80188f2:	6013      	str	r3, [r2, #0]
 80188f4:	68bb      	ldr	r3, [r7, #8]
 80188f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188f8:	4613      	mov	r3, r2
 80188fa:	009b      	lsls	r3, r3, #2
 80188fc:	4413      	add	r3, r2
 80188fe:	009b      	lsls	r3, r3, #2
 8018900:	4a1f      	ldr	r2, [pc, #124]	; (8018980 <xTaskIncrementTick+0x164>)
 8018902:	441a      	add	r2, r3
 8018904:	68bb      	ldr	r3, [r7, #8]
 8018906:	3304      	adds	r3, #4
 8018908:	4619      	mov	r1, r3
 801890a:	4610      	mov	r0, r2
 801890c:	f7fe fc77 	bl	80171fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018910:	68bb      	ldr	r3, [r7, #8]
 8018912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018914:	4b1b      	ldr	r3, [pc, #108]	; (8018984 <xTaskIncrementTick+0x168>)
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801891a:	429a      	cmp	r2, r3
 801891c:	d3b8      	bcc.n	8018890 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801891e:	2301      	movs	r3, #1
 8018920:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018922:	e7b5      	b.n	8018890 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018924:	4b17      	ldr	r3, [pc, #92]	; (8018984 <xTaskIncrementTick+0x168>)
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801892a:	4915      	ldr	r1, [pc, #84]	; (8018980 <xTaskIncrementTick+0x164>)
 801892c:	4613      	mov	r3, r2
 801892e:	009b      	lsls	r3, r3, #2
 8018930:	4413      	add	r3, r2
 8018932:	009b      	lsls	r3, r3, #2
 8018934:	440b      	add	r3, r1
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	2b01      	cmp	r3, #1
 801893a:	d901      	bls.n	8018940 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801893c:	2301      	movs	r3, #1
 801893e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018940:	4b11      	ldr	r3, [pc, #68]	; (8018988 <xTaskIncrementTick+0x16c>)
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	2b00      	cmp	r3, #0
 8018946:	d007      	beq.n	8018958 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8018948:	2301      	movs	r3, #1
 801894a:	617b      	str	r3, [r7, #20]
 801894c:	e004      	b.n	8018958 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801894e:	4b0f      	ldr	r3, [pc, #60]	; (801898c <xTaskIncrementTick+0x170>)
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	3301      	adds	r3, #1
 8018954:	4a0d      	ldr	r2, [pc, #52]	; (801898c <xTaskIncrementTick+0x170>)
 8018956:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8018958:	697b      	ldr	r3, [r7, #20]
}
 801895a:	4618      	mov	r0, r3
 801895c:	3718      	adds	r7, #24
 801895e:	46bd      	mov	sp, r7
 8018960:	bd80      	pop	{r7, pc}
 8018962:	bf00      	nop
 8018964:	20000ffc 	.word	0x20000ffc
 8018968:	20000fd8 	.word	0x20000fd8
 801896c:	20000f8c 	.word	0x20000f8c
 8018970:	20000f90 	.word	0x20000f90
 8018974:	20000fec 	.word	0x20000fec
 8018978:	20000ff4 	.word	0x20000ff4
 801897c:	20000fdc 	.word	0x20000fdc
 8018980:	20000b04 	.word	0x20000b04
 8018984:	20000b00 	.word	0x20000b00
 8018988:	20000fe8 	.word	0x20000fe8
 801898c:	20000fe4 	.word	0x20000fe4

08018990 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018990:	b480      	push	{r7}
 8018992:	b085      	sub	sp, #20
 8018994:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018996:	4b28      	ldr	r3, [pc, #160]	; (8018a38 <vTaskSwitchContext+0xa8>)
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	2b00      	cmp	r3, #0
 801899c:	d003      	beq.n	80189a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801899e:	4b27      	ldr	r3, [pc, #156]	; (8018a3c <vTaskSwitchContext+0xac>)
 80189a0:	2201      	movs	r2, #1
 80189a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80189a4:	e041      	b.n	8018a2a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80189a6:	4b25      	ldr	r3, [pc, #148]	; (8018a3c <vTaskSwitchContext+0xac>)
 80189a8:	2200      	movs	r2, #0
 80189aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80189ac:	4b24      	ldr	r3, [pc, #144]	; (8018a40 <vTaskSwitchContext+0xb0>)
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	60fb      	str	r3, [r7, #12]
 80189b2:	e010      	b.n	80189d6 <vTaskSwitchContext+0x46>
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d10a      	bne.n	80189d0 <vTaskSwitchContext+0x40>
	__asm volatile
 80189ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189be:	f383 8811 	msr	BASEPRI, r3
 80189c2:	f3bf 8f6f 	isb	sy
 80189c6:	f3bf 8f4f 	dsb	sy
 80189ca:	607b      	str	r3, [r7, #4]
}
 80189cc:	bf00      	nop
 80189ce:	e7fe      	b.n	80189ce <vTaskSwitchContext+0x3e>
 80189d0:	68fb      	ldr	r3, [r7, #12]
 80189d2:	3b01      	subs	r3, #1
 80189d4:	60fb      	str	r3, [r7, #12]
 80189d6:	491b      	ldr	r1, [pc, #108]	; (8018a44 <vTaskSwitchContext+0xb4>)
 80189d8:	68fa      	ldr	r2, [r7, #12]
 80189da:	4613      	mov	r3, r2
 80189dc:	009b      	lsls	r3, r3, #2
 80189de:	4413      	add	r3, r2
 80189e0:	009b      	lsls	r3, r3, #2
 80189e2:	440b      	add	r3, r1
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d0e4      	beq.n	80189b4 <vTaskSwitchContext+0x24>
 80189ea:	68fa      	ldr	r2, [r7, #12]
 80189ec:	4613      	mov	r3, r2
 80189ee:	009b      	lsls	r3, r3, #2
 80189f0:	4413      	add	r3, r2
 80189f2:	009b      	lsls	r3, r3, #2
 80189f4:	4a13      	ldr	r2, [pc, #76]	; (8018a44 <vTaskSwitchContext+0xb4>)
 80189f6:	4413      	add	r3, r2
 80189f8:	60bb      	str	r3, [r7, #8]
 80189fa:	68bb      	ldr	r3, [r7, #8]
 80189fc:	685b      	ldr	r3, [r3, #4]
 80189fe:	685a      	ldr	r2, [r3, #4]
 8018a00:	68bb      	ldr	r3, [r7, #8]
 8018a02:	605a      	str	r2, [r3, #4]
 8018a04:	68bb      	ldr	r3, [r7, #8]
 8018a06:	685a      	ldr	r2, [r3, #4]
 8018a08:	68bb      	ldr	r3, [r7, #8]
 8018a0a:	3308      	adds	r3, #8
 8018a0c:	429a      	cmp	r2, r3
 8018a0e:	d104      	bne.n	8018a1a <vTaskSwitchContext+0x8a>
 8018a10:	68bb      	ldr	r3, [r7, #8]
 8018a12:	685b      	ldr	r3, [r3, #4]
 8018a14:	685a      	ldr	r2, [r3, #4]
 8018a16:	68bb      	ldr	r3, [r7, #8]
 8018a18:	605a      	str	r2, [r3, #4]
 8018a1a:	68bb      	ldr	r3, [r7, #8]
 8018a1c:	685b      	ldr	r3, [r3, #4]
 8018a1e:	68db      	ldr	r3, [r3, #12]
 8018a20:	4a09      	ldr	r2, [pc, #36]	; (8018a48 <vTaskSwitchContext+0xb8>)
 8018a22:	6013      	str	r3, [r2, #0]
 8018a24:	4a06      	ldr	r2, [pc, #24]	; (8018a40 <vTaskSwitchContext+0xb0>)
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	6013      	str	r3, [r2, #0]
}
 8018a2a:	bf00      	nop
 8018a2c:	3714      	adds	r7, #20
 8018a2e:	46bd      	mov	sp, r7
 8018a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a34:	4770      	bx	lr
 8018a36:	bf00      	nop
 8018a38:	20000ffc 	.word	0x20000ffc
 8018a3c:	20000fe8 	.word	0x20000fe8
 8018a40:	20000fdc 	.word	0x20000fdc
 8018a44:	20000b04 	.word	0x20000b04
 8018a48:	20000b00 	.word	0x20000b00

08018a4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018a4c:	b580      	push	{r7, lr}
 8018a4e:	b084      	sub	sp, #16
 8018a50:	af00      	add	r7, sp, #0
 8018a52:	6078      	str	r0, [r7, #4]
 8018a54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d10a      	bne.n	8018a72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a60:	f383 8811 	msr	BASEPRI, r3
 8018a64:	f3bf 8f6f 	isb	sy
 8018a68:	f3bf 8f4f 	dsb	sy
 8018a6c:	60fb      	str	r3, [r7, #12]
}
 8018a6e:	bf00      	nop
 8018a70:	e7fe      	b.n	8018a70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018a72:	4b07      	ldr	r3, [pc, #28]	; (8018a90 <vTaskPlaceOnEventList+0x44>)
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	3318      	adds	r3, #24
 8018a78:	4619      	mov	r1, r3
 8018a7a:	6878      	ldr	r0, [r7, #4]
 8018a7c:	f7fe fbe3 	bl	8017246 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018a80:	2101      	movs	r1, #1
 8018a82:	6838      	ldr	r0, [r7, #0]
 8018a84:	f000 fc40 	bl	8019308 <prvAddCurrentTaskToDelayedList>
}
 8018a88:	bf00      	nop
 8018a8a:	3710      	adds	r7, #16
 8018a8c:	46bd      	mov	sp, r7
 8018a8e:	bd80      	pop	{r7, pc}
 8018a90:	20000b00 	.word	0x20000b00

08018a94 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b086      	sub	sp, #24
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	60f8      	str	r0, [r7, #12]
 8018a9c:	60b9      	str	r1, [r7, #8]
 8018a9e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d10a      	bne.n	8018abc <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8018aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018aaa:	f383 8811 	msr	BASEPRI, r3
 8018aae:	f3bf 8f6f 	isb	sy
 8018ab2:	f3bf 8f4f 	dsb	sy
 8018ab6:	617b      	str	r3, [r7, #20]
}
 8018ab8:	bf00      	nop
 8018aba:	e7fe      	b.n	8018aba <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8018abc:	4b11      	ldr	r3, [pc, #68]	; (8018b04 <vTaskPlaceOnUnorderedEventList+0x70>)
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d10a      	bne.n	8018ada <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8018ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ac8:	f383 8811 	msr	BASEPRI, r3
 8018acc:	f3bf 8f6f 	isb	sy
 8018ad0:	f3bf 8f4f 	dsb	sy
 8018ad4:	613b      	str	r3, [r7, #16]
}
 8018ad6:	bf00      	nop
 8018ad8:	e7fe      	b.n	8018ad8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018ada:	4b0b      	ldr	r3, [pc, #44]	; (8018b08 <vTaskPlaceOnUnorderedEventList+0x74>)
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	68ba      	ldr	r2, [r7, #8]
 8018ae0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8018ae4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018ae6:	4b08      	ldr	r3, [pc, #32]	; (8018b08 <vTaskPlaceOnUnorderedEventList+0x74>)
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	3318      	adds	r3, #24
 8018aec:	4619      	mov	r1, r3
 8018aee:	68f8      	ldr	r0, [r7, #12]
 8018af0:	f7fe fb85 	bl	80171fe <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018af4:	2101      	movs	r1, #1
 8018af6:	6878      	ldr	r0, [r7, #4]
 8018af8:	f000 fc06 	bl	8019308 <prvAddCurrentTaskToDelayedList>
}
 8018afc:	bf00      	nop
 8018afe:	3718      	adds	r7, #24
 8018b00:	46bd      	mov	sp, r7
 8018b02:	bd80      	pop	{r7, pc}
 8018b04:	20000ffc 	.word	0x20000ffc
 8018b08:	20000b00 	.word	0x20000b00

08018b0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018b0c:	b580      	push	{r7, lr}
 8018b0e:	b086      	sub	sp, #24
 8018b10:	af00      	add	r7, sp, #0
 8018b12:	60f8      	str	r0, [r7, #12]
 8018b14:	60b9      	str	r1, [r7, #8]
 8018b16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d10a      	bne.n	8018b34 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8018b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b22:	f383 8811 	msr	BASEPRI, r3
 8018b26:	f3bf 8f6f 	isb	sy
 8018b2a:	f3bf 8f4f 	dsb	sy
 8018b2e:	617b      	str	r3, [r7, #20]
}
 8018b30:	bf00      	nop
 8018b32:	e7fe      	b.n	8018b32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018b34:	4b0a      	ldr	r3, [pc, #40]	; (8018b60 <vTaskPlaceOnEventListRestricted+0x54>)
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	3318      	adds	r3, #24
 8018b3a:	4619      	mov	r1, r3
 8018b3c:	68f8      	ldr	r0, [r7, #12]
 8018b3e:	f7fe fb5e 	bl	80171fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d002      	beq.n	8018b4e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018b48:	f04f 33ff 	mov.w	r3, #4294967295
 8018b4c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018b4e:	6879      	ldr	r1, [r7, #4]
 8018b50:	68b8      	ldr	r0, [r7, #8]
 8018b52:	f000 fbd9 	bl	8019308 <prvAddCurrentTaskToDelayedList>
	}
 8018b56:	bf00      	nop
 8018b58:	3718      	adds	r7, #24
 8018b5a:	46bd      	mov	sp, r7
 8018b5c:	bd80      	pop	{r7, pc}
 8018b5e:	bf00      	nop
 8018b60:	20000b00 	.word	0x20000b00

08018b64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018b64:	b580      	push	{r7, lr}
 8018b66:	b086      	sub	sp, #24
 8018b68:	af00      	add	r7, sp, #0
 8018b6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	68db      	ldr	r3, [r3, #12]
 8018b70:	68db      	ldr	r3, [r3, #12]
 8018b72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018b74:	693b      	ldr	r3, [r7, #16]
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d10a      	bne.n	8018b90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8018b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b7e:	f383 8811 	msr	BASEPRI, r3
 8018b82:	f3bf 8f6f 	isb	sy
 8018b86:	f3bf 8f4f 	dsb	sy
 8018b8a:	60fb      	str	r3, [r7, #12]
}
 8018b8c:	bf00      	nop
 8018b8e:	e7fe      	b.n	8018b8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018b90:	693b      	ldr	r3, [r7, #16]
 8018b92:	3318      	adds	r3, #24
 8018b94:	4618      	mov	r0, r3
 8018b96:	f7fe fb8f 	bl	80172b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018b9a:	4b1e      	ldr	r3, [pc, #120]	; (8018c14 <xTaskRemoveFromEventList+0xb0>)
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d11d      	bne.n	8018bde <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018ba2:	693b      	ldr	r3, [r7, #16]
 8018ba4:	3304      	adds	r3, #4
 8018ba6:	4618      	mov	r0, r3
 8018ba8:	f7fe fb86 	bl	80172b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018bac:	693b      	ldr	r3, [r7, #16]
 8018bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bb0:	4b19      	ldr	r3, [pc, #100]	; (8018c18 <xTaskRemoveFromEventList+0xb4>)
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	429a      	cmp	r2, r3
 8018bb6:	d903      	bls.n	8018bc0 <xTaskRemoveFromEventList+0x5c>
 8018bb8:	693b      	ldr	r3, [r7, #16]
 8018bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bbc:	4a16      	ldr	r2, [pc, #88]	; (8018c18 <xTaskRemoveFromEventList+0xb4>)
 8018bbe:	6013      	str	r3, [r2, #0]
 8018bc0:	693b      	ldr	r3, [r7, #16]
 8018bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bc4:	4613      	mov	r3, r2
 8018bc6:	009b      	lsls	r3, r3, #2
 8018bc8:	4413      	add	r3, r2
 8018bca:	009b      	lsls	r3, r3, #2
 8018bcc:	4a13      	ldr	r2, [pc, #76]	; (8018c1c <xTaskRemoveFromEventList+0xb8>)
 8018bce:	441a      	add	r2, r3
 8018bd0:	693b      	ldr	r3, [r7, #16]
 8018bd2:	3304      	adds	r3, #4
 8018bd4:	4619      	mov	r1, r3
 8018bd6:	4610      	mov	r0, r2
 8018bd8:	f7fe fb11 	bl	80171fe <vListInsertEnd>
 8018bdc:	e005      	b.n	8018bea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018bde:	693b      	ldr	r3, [r7, #16]
 8018be0:	3318      	adds	r3, #24
 8018be2:	4619      	mov	r1, r3
 8018be4:	480e      	ldr	r0, [pc, #56]	; (8018c20 <xTaskRemoveFromEventList+0xbc>)
 8018be6:	f7fe fb0a 	bl	80171fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018bea:	693b      	ldr	r3, [r7, #16]
 8018bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bee:	4b0d      	ldr	r3, [pc, #52]	; (8018c24 <xTaskRemoveFromEventList+0xc0>)
 8018bf0:	681b      	ldr	r3, [r3, #0]
 8018bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bf4:	429a      	cmp	r2, r3
 8018bf6:	d905      	bls.n	8018c04 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018bf8:	2301      	movs	r3, #1
 8018bfa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018bfc:	4b0a      	ldr	r3, [pc, #40]	; (8018c28 <xTaskRemoveFromEventList+0xc4>)
 8018bfe:	2201      	movs	r2, #1
 8018c00:	601a      	str	r2, [r3, #0]
 8018c02:	e001      	b.n	8018c08 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018c04:	2300      	movs	r3, #0
 8018c06:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018c08:	697b      	ldr	r3, [r7, #20]
}
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	3718      	adds	r7, #24
 8018c0e:	46bd      	mov	sp, r7
 8018c10:	bd80      	pop	{r7, pc}
 8018c12:	bf00      	nop
 8018c14:	20000ffc 	.word	0x20000ffc
 8018c18:	20000fdc 	.word	0x20000fdc
 8018c1c:	20000b04 	.word	0x20000b04
 8018c20:	20000f94 	.word	0x20000f94
 8018c24:	20000b00 	.word	0x20000b00
 8018c28:	20000fe8 	.word	0x20000fe8

08018c2c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b086      	sub	sp, #24
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]
 8018c34:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8018c36:	4b29      	ldr	r3, [pc, #164]	; (8018cdc <vTaskRemoveFromUnorderedEventList+0xb0>)
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d10a      	bne.n	8018c54 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8018c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c42:	f383 8811 	msr	BASEPRI, r3
 8018c46:	f3bf 8f6f 	isb	sy
 8018c4a:	f3bf 8f4f 	dsb	sy
 8018c4e:	613b      	str	r3, [r7, #16]
}
 8018c50:	bf00      	nop
 8018c52:	e7fe      	b.n	8018c52 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018c54:	683b      	ldr	r3, [r7, #0]
 8018c56:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	68db      	ldr	r3, [r3, #12]
 8018c62:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8018c64:	697b      	ldr	r3, [r7, #20]
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d10a      	bne.n	8018c80 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8018c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c6e:	f383 8811 	msr	BASEPRI, r3
 8018c72:	f3bf 8f6f 	isb	sy
 8018c76:	f3bf 8f4f 	dsb	sy
 8018c7a:	60fb      	str	r3, [r7, #12]
}
 8018c7c:	bf00      	nop
 8018c7e:	e7fe      	b.n	8018c7e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8018c80:	6878      	ldr	r0, [r7, #4]
 8018c82:	f7fe fb19 	bl	80172b8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018c86:	697b      	ldr	r3, [r7, #20]
 8018c88:	3304      	adds	r3, #4
 8018c8a:	4618      	mov	r0, r3
 8018c8c:	f7fe fb14 	bl	80172b8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8018c90:	697b      	ldr	r3, [r7, #20]
 8018c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c94:	4b12      	ldr	r3, [pc, #72]	; (8018ce0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	429a      	cmp	r2, r3
 8018c9a:	d903      	bls.n	8018ca4 <vTaskRemoveFromUnorderedEventList+0x78>
 8018c9c:	697b      	ldr	r3, [r7, #20]
 8018c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ca0:	4a0f      	ldr	r2, [pc, #60]	; (8018ce0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018ca2:	6013      	str	r3, [r2, #0]
 8018ca4:	697b      	ldr	r3, [r7, #20]
 8018ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ca8:	4613      	mov	r3, r2
 8018caa:	009b      	lsls	r3, r3, #2
 8018cac:	4413      	add	r3, r2
 8018cae:	009b      	lsls	r3, r3, #2
 8018cb0:	4a0c      	ldr	r2, [pc, #48]	; (8018ce4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8018cb2:	441a      	add	r2, r3
 8018cb4:	697b      	ldr	r3, [r7, #20]
 8018cb6:	3304      	adds	r3, #4
 8018cb8:	4619      	mov	r1, r3
 8018cba:	4610      	mov	r0, r2
 8018cbc:	f7fe fa9f 	bl	80171fe <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018cc0:	697b      	ldr	r3, [r7, #20]
 8018cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cc4:	4b08      	ldr	r3, [pc, #32]	; (8018ce8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018cca:	429a      	cmp	r2, r3
 8018ccc:	d902      	bls.n	8018cd4 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8018cce:	4b07      	ldr	r3, [pc, #28]	; (8018cec <vTaskRemoveFromUnorderedEventList+0xc0>)
 8018cd0:	2201      	movs	r2, #1
 8018cd2:	601a      	str	r2, [r3, #0]
	}
}
 8018cd4:	bf00      	nop
 8018cd6:	3718      	adds	r7, #24
 8018cd8:	46bd      	mov	sp, r7
 8018cda:	bd80      	pop	{r7, pc}
 8018cdc:	20000ffc 	.word	0x20000ffc
 8018ce0:	20000fdc 	.word	0x20000fdc
 8018ce4:	20000b04 	.word	0x20000b04
 8018ce8:	20000b00 	.word	0x20000b00
 8018cec:	20000fe8 	.word	0x20000fe8

08018cf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018cf0:	b480      	push	{r7}
 8018cf2:	b083      	sub	sp, #12
 8018cf4:	af00      	add	r7, sp, #0
 8018cf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018cf8:	4b06      	ldr	r3, [pc, #24]	; (8018d14 <vTaskInternalSetTimeOutState+0x24>)
 8018cfa:	681a      	ldr	r2, [r3, #0]
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018d00:	4b05      	ldr	r3, [pc, #20]	; (8018d18 <vTaskInternalSetTimeOutState+0x28>)
 8018d02:	681a      	ldr	r2, [r3, #0]
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	605a      	str	r2, [r3, #4]
}
 8018d08:	bf00      	nop
 8018d0a:	370c      	adds	r7, #12
 8018d0c:	46bd      	mov	sp, r7
 8018d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d12:	4770      	bx	lr
 8018d14:	20000fec 	.word	0x20000fec
 8018d18:	20000fd8 	.word	0x20000fd8

08018d1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018d1c:	b580      	push	{r7, lr}
 8018d1e:	b088      	sub	sp, #32
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	6078      	str	r0, [r7, #4]
 8018d24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d10a      	bne.n	8018d42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d30:	f383 8811 	msr	BASEPRI, r3
 8018d34:	f3bf 8f6f 	isb	sy
 8018d38:	f3bf 8f4f 	dsb	sy
 8018d3c:	613b      	str	r3, [r7, #16]
}
 8018d3e:	bf00      	nop
 8018d40:	e7fe      	b.n	8018d40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018d42:	683b      	ldr	r3, [r7, #0]
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d10a      	bne.n	8018d5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d4c:	f383 8811 	msr	BASEPRI, r3
 8018d50:	f3bf 8f6f 	isb	sy
 8018d54:	f3bf 8f4f 	dsb	sy
 8018d58:	60fb      	str	r3, [r7, #12]
}
 8018d5a:	bf00      	nop
 8018d5c:	e7fe      	b.n	8018d5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8018d5e:	f000 ffc1 	bl	8019ce4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018d62:	4b1d      	ldr	r3, [pc, #116]	; (8018dd8 <xTaskCheckForTimeOut+0xbc>)
 8018d64:	681b      	ldr	r3, [r3, #0]
 8018d66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	685b      	ldr	r3, [r3, #4]
 8018d6c:	69ba      	ldr	r2, [r7, #24]
 8018d6e:	1ad3      	subs	r3, r2, r3
 8018d70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018d72:	683b      	ldr	r3, [r7, #0]
 8018d74:	681b      	ldr	r3, [r3, #0]
 8018d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d7a:	d102      	bne.n	8018d82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018d7c:	2300      	movs	r3, #0
 8018d7e:	61fb      	str	r3, [r7, #28]
 8018d80:	e023      	b.n	8018dca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	681a      	ldr	r2, [r3, #0]
 8018d86:	4b15      	ldr	r3, [pc, #84]	; (8018ddc <xTaskCheckForTimeOut+0xc0>)
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	429a      	cmp	r2, r3
 8018d8c:	d007      	beq.n	8018d9e <xTaskCheckForTimeOut+0x82>
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	685b      	ldr	r3, [r3, #4]
 8018d92:	69ba      	ldr	r2, [r7, #24]
 8018d94:	429a      	cmp	r2, r3
 8018d96:	d302      	bcc.n	8018d9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018d98:	2301      	movs	r3, #1
 8018d9a:	61fb      	str	r3, [r7, #28]
 8018d9c:	e015      	b.n	8018dca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018d9e:	683b      	ldr	r3, [r7, #0]
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	697a      	ldr	r2, [r7, #20]
 8018da4:	429a      	cmp	r2, r3
 8018da6:	d20b      	bcs.n	8018dc0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018da8:	683b      	ldr	r3, [r7, #0]
 8018daa:	681a      	ldr	r2, [r3, #0]
 8018dac:	697b      	ldr	r3, [r7, #20]
 8018dae:	1ad2      	subs	r2, r2, r3
 8018db0:	683b      	ldr	r3, [r7, #0]
 8018db2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018db4:	6878      	ldr	r0, [r7, #4]
 8018db6:	f7ff ff9b 	bl	8018cf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018dba:	2300      	movs	r3, #0
 8018dbc:	61fb      	str	r3, [r7, #28]
 8018dbe:	e004      	b.n	8018dca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018dc0:	683b      	ldr	r3, [r7, #0]
 8018dc2:	2200      	movs	r2, #0
 8018dc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018dc6:	2301      	movs	r3, #1
 8018dc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018dca:	f000 ffbb 	bl	8019d44 <vPortExitCritical>

	return xReturn;
 8018dce:	69fb      	ldr	r3, [r7, #28]
}
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	3720      	adds	r7, #32
 8018dd4:	46bd      	mov	sp, r7
 8018dd6:	bd80      	pop	{r7, pc}
 8018dd8:	20000fd8 	.word	0x20000fd8
 8018ddc:	20000fec 	.word	0x20000fec

08018de0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018de0:	b480      	push	{r7}
 8018de2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018de4:	4b03      	ldr	r3, [pc, #12]	; (8018df4 <vTaskMissedYield+0x14>)
 8018de6:	2201      	movs	r2, #1
 8018de8:	601a      	str	r2, [r3, #0]
}
 8018dea:	bf00      	nop
 8018dec:	46bd      	mov	sp, r7
 8018dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df2:	4770      	bx	lr
 8018df4:	20000fe8 	.word	0x20000fe8

08018df8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018df8:	b580      	push	{r7, lr}
 8018dfa:	b082      	sub	sp, #8
 8018dfc:	af00      	add	r7, sp, #0
 8018dfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018e00:	f000 f852 	bl	8018ea8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018e04:	4b06      	ldr	r3, [pc, #24]	; (8018e20 <prvIdleTask+0x28>)
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	2b01      	cmp	r3, #1
 8018e0a:	d9f9      	bls.n	8018e00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8018e0c:	4b05      	ldr	r3, [pc, #20]	; (8018e24 <prvIdleTask+0x2c>)
 8018e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018e12:	601a      	str	r2, [r3, #0]
 8018e14:	f3bf 8f4f 	dsb	sy
 8018e18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018e1c:	e7f0      	b.n	8018e00 <prvIdleTask+0x8>
 8018e1e:	bf00      	nop
 8018e20:	20000b04 	.word	0x20000b04
 8018e24:	e000ed04 	.word	0xe000ed04

08018e28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018e28:	b580      	push	{r7, lr}
 8018e2a:	b082      	sub	sp, #8
 8018e2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018e2e:	2300      	movs	r3, #0
 8018e30:	607b      	str	r3, [r7, #4]
 8018e32:	e00c      	b.n	8018e4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018e34:	687a      	ldr	r2, [r7, #4]
 8018e36:	4613      	mov	r3, r2
 8018e38:	009b      	lsls	r3, r3, #2
 8018e3a:	4413      	add	r3, r2
 8018e3c:	009b      	lsls	r3, r3, #2
 8018e3e:	4a12      	ldr	r2, [pc, #72]	; (8018e88 <prvInitialiseTaskLists+0x60>)
 8018e40:	4413      	add	r3, r2
 8018e42:	4618      	mov	r0, r3
 8018e44:	f7fe f9ae 	bl	80171a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	3301      	adds	r3, #1
 8018e4c:	607b      	str	r3, [r7, #4]
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	2b37      	cmp	r3, #55	; 0x37
 8018e52:	d9ef      	bls.n	8018e34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018e54:	480d      	ldr	r0, [pc, #52]	; (8018e8c <prvInitialiseTaskLists+0x64>)
 8018e56:	f7fe f9a5 	bl	80171a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018e5a:	480d      	ldr	r0, [pc, #52]	; (8018e90 <prvInitialiseTaskLists+0x68>)
 8018e5c:	f7fe f9a2 	bl	80171a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018e60:	480c      	ldr	r0, [pc, #48]	; (8018e94 <prvInitialiseTaskLists+0x6c>)
 8018e62:	f7fe f99f 	bl	80171a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018e66:	480c      	ldr	r0, [pc, #48]	; (8018e98 <prvInitialiseTaskLists+0x70>)
 8018e68:	f7fe f99c 	bl	80171a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018e6c:	480b      	ldr	r0, [pc, #44]	; (8018e9c <prvInitialiseTaskLists+0x74>)
 8018e6e:	f7fe f999 	bl	80171a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018e72:	4b0b      	ldr	r3, [pc, #44]	; (8018ea0 <prvInitialiseTaskLists+0x78>)
 8018e74:	4a05      	ldr	r2, [pc, #20]	; (8018e8c <prvInitialiseTaskLists+0x64>)
 8018e76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018e78:	4b0a      	ldr	r3, [pc, #40]	; (8018ea4 <prvInitialiseTaskLists+0x7c>)
 8018e7a:	4a05      	ldr	r2, [pc, #20]	; (8018e90 <prvInitialiseTaskLists+0x68>)
 8018e7c:	601a      	str	r2, [r3, #0]
}
 8018e7e:	bf00      	nop
 8018e80:	3708      	adds	r7, #8
 8018e82:	46bd      	mov	sp, r7
 8018e84:	bd80      	pop	{r7, pc}
 8018e86:	bf00      	nop
 8018e88:	20000b04 	.word	0x20000b04
 8018e8c:	20000f64 	.word	0x20000f64
 8018e90:	20000f78 	.word	0x20000f78
 8018e94:	20000f94 	.word	0x20000f94
 8018e98:	20000fa8 	.word	0x20000fa8
 8018e9c:	20000fc0 	.word	0x20000fc0
 8018ea0:	20000f8c 	.word	0x20000f8c
 8018ea4:	20000f90 	.word	0x20000f90

08018ea8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018ea8:	b580      	push	{r7, lr}
 8018eaa:	b082      	sub	sp, #8
 8018eac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018eae:	e019      	b.n	8018ee4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018eb0:	f000 ff18 	bl	8019ce4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018eb4:	4b10      	ldr	r3, [pc, #64]	; (8018ef8 <prvCheckTasksWaitingTermination+0x50>)
 8018eb6:	68db      	ldr	r3, [r3, #12]
 8018eb8:	68db      	ldr	r3, [r3, #12]
 8018eba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	3304      	adds	r3, #4
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	f7fe f9f9 	bl	80172b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018ec6:	4b0d      	ldr	r3, [pc, #52]	; (8018efc <prvCheckTasksWaitingTermination+0x54>)
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	3b01      	subs	r3, #1
 8018ecc:	4a0b      	ldr	r2, [pc, #44]	; (8018efc <prvCheckTasksWaitingTermination+0x54>)
 8018ece:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018ed0:	4b0b      	ldr	r3, [pc, #44]	; (8018f00 <prvCheckTasksWaitingTermination+0x58>)
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	3b01      	subs	r3, #1
 8018ed6:	4a0a      	ldr	r2, [pc, #40]	; (8018f00 <prvCheckTasksWaitingTermination+0x58>)
 8018ed8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018eda:	f000 ff33 	bl	8019d44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018ede:	6878      	ldr	r0, [r7, #4]
 8018ee0:	f000 f810 	bl	8018f04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018ee4:	4b06      	ldr	r3, [pc, #24]	; (8018f00 <prvCheckTasksWaitingTermination+0x58>)
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d1e1      	bne.n	8018eb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018eec:	bf00      	nop
 8018eee:	bf00      	nop
 8018ef0:	3708      	adds	r7, #8
 8018ef2:	46bd      	mov	sp, r7
 8018ef4:	bd80      	pop	{r7, pc}
 8018ef6:	bf00      	nop
 8018ef8:	20000fa8 	.word	0x20000fa8
 8018efc:	20000fd4 	.word	0x20000fd4
 8018f00:	20000fbc 	.word	0x20000fbc

08018f04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018f04:	b580      	push	{r7, lr}
 8018f06:	b084      	sub	sp, #16
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d108      	bne.n	8018f28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	f001 f8d0 	bl	801a0c0 <vPortFree>
				vPortFree( pxTCB );
 8018f20:	6878      	ldr	r0, [r7, #4]
 8018f22:	f001 f8cd 	bl	801a0c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018f26:	e018      	b.n	8018f5a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018f2e:	2b01      	cmp	r3, #1
 8018f30:	d103      	bne.n	8018f3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018f32:	6878      	ldr	r0, [r7, #4]
 8018f34:	f001 f8c4 	bl	801a0c0 <vPortFree>
	}
 8018f38:	e00f      	b.n	8018f5a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018f40:	2b02      	cmp	r3, #2
 8018f42:	d00a      	beq.n	8018f5a <prvDeleteTCB+0x56>
	__asm volatile
 8018f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f48:	f383 8811 	msr	BASEPRI, r3
 8018f4c:	f3bf 8f6f 	isb	sy
 8018f50:	f3bf 8f4f 	dsb	sy
 8018f54:	60fb      	str	r3, [r7, #12]
}
 8018f56:	bf00      	nop
 8018f58:	e7fe      	b.n	8018f58 <prvDeleteTCB+0x54>
	}
 8018f5a:	bf00      	nop
 8018f5c:	3710      	adds	r7, #16
 8018f5e:	46bd      	mov	sp, r7
 8018f60:	bd80      	pop	{r7, pc}
	...

08018f64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018f64:	b480      	push	{r7}
 8018f66:	b083      	sub	sp, #12
 8018f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018f6a:	4b0c      	ldr	r3, [pc, #48]	; (8018f9c <prvResetNextTaskUnblockTime+0x38>)
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d104      	bne.n	8018f7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018f74:	4b0a      	ldr	r3, [pc, #40]	; (8018fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8018f76:	f04f 32ff 	mov.w	r2, #4294967295
 8018f7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018f7c:	e008      	b.n	8018f90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018f7e:	4b07      	ldr	r3, [pc, #28]	; (8018f9c <prvResetNextTaskUnblockTime+0x38>)
 8018f80:	681b      	ldr	r3, [r3, #0]
 8018f82:	68db      	ldr	r3, [r3, #12]
 8018f84:	68db      	ldr	r3, [r3, #12]
 8018f86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	685b      	ldr	r3, [r3, #4]
 8018f8c:	4a04      	ldr	r2, [pc, #16]	; (8018fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8018f8e:	6013      	str	r3, [r2, #0]
}
 8018f90:	bf00      	nop
 8018f92:	370c      	adds	r7, #12
 8018f94:	46bd      	mov	sp, r7
 8018f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f9a:	4770      	bx	lr
 8018f9c:	20000f8c 	.word	0x20000f8c
 8018fa0:	20000ff4 	.word	0x20000ff4

08018fa4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8018fa4:	b480      	push	{r7}
 8018fa6:	b083      	sub	sp, #12
 8018fa8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8018faa:	4b05      	ldr	r3, [pc, #20]	; (8018fc0 <xTaskGetCurrentTaskHandle+0x1c>)
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	607b      	str	r3, [r7, #4]

		return xReturn;
 8018fb0:	687b      	ldr	r3, [r7, #4]
	}
 8018fb2:	4618      	mov	r0, r3
 8018fb4:	370c      	adds	r7, #12
 8018fb6:	46bd      	mov	sp, r7
 8018fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fbc:	4770      	bx	lr
 8018fbe:	bf00      	nop
 8018fc0:	20000b00 	.word	0x20000b00

08018fc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018fc4:	b480      	push	{r7}
 8018fc6:	b083      	sub	sp, #12
 8018fc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018fca:	4b0b      	ldr	r3, [pc, #44]	; (8018ff8 <xTaskGetSchedulerState+0x34>)
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d102      	bne.n	8018fd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018fd2:	2301      	movs	r3, #1
 8018fd4:	607b      	str	r3, [r7, #4]
 8018fd6:	e008      	b.n	8018fea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018fd8:	4b08      	ldr	r3, [pc, #32]	; (8018ffc <xTaskGetSchedulerState+0x38>)
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d102      	bne.n	8018fe6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018fe0:	2302      	movs	r3, #2
 8018fe2:	607b      	str	r3, [r7, #4]
 8018fe4:	e001      	b.n	8018fea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018fe6:	2300      	movs	r3, #0
 8018fe8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018fea:	687b      	ldr	r3, [r7, #4]
	}
 8018fec:	4618      	mov	r0, r3
 8018fee:	370c      	adds	r7, #12
 8018ff0:	46bd      	mov	sp, r7
 8018ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ff6:	4770      	bx	lr
 8018ff8:	20000fe0 	.word	0x20000fe0
 8018ffc:	20000ffc 	.word	0x20000ffc

08019000 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8019000:	b580      	push	{r7, lr}
 8019002:	b084      	sub	sp, #16
 8019004:	af00      	add	r7, sp, #0
 8019006:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801900c:	2300      	movs	r3, #0
 801900e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	2b00      	cmp	r3, #0
 8019014:	d051      	beq.n	80190ba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8019016:	68bb      	ldr	r3, [r7, #8]
 8019018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801901a:	4b2a      	ldr	r3, [pc, #168]	; (80190c4 <xTaskPriorityInherit+0xc4>)
 801901c:	681b      	ldr	r3, [r3, #0]
 801901e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019020:	429a      	cmp	r2, r3
 8019022:	d241      	bcs.n	80190a8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019024:	68bb      	ldr	r3, [r7, #8]
 8019026:	699b      	ldr	r3, [r3, #24]
 8019028:	2b00      	cmp	r3, #0
 801902a:	db06      	blt.n	801903a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801902c:	4b25      	ldr	r3, [pc, #148]	; (80190c4 <xTaskPriorityInherit+0xc4>)
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019032:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019036:	68bb      	ldr	r3, [r7, #8]
 8019038:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801903a:	68bb      	ldr	r3, [r7, #8]
 801903c:	6959      	ldr	r1, [r3, #20]
 801903e:	68bb      	ldr	r3, [r7, #8]
 8019040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019042:	4613      	mov	r3, r2
 8019044:	009b      	lsls	r3, r3, #2
 8019046:	4413      	add	r3, r2
 8019048:	009b      	lsls	r3, r3, #2
 801904a:	4a1f      	ldr	r2, [pc, #124]	; (80190c8 <xTaskPriorityInherit+0xc8>)
 801904c:	4413      	add	r3, r2
 801904e:	4299      	cmp	r1, r3
 8019050:	d122      	bne.n	8019098 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019052:	68bb      	ldr	r3, [r7, #8]
 8019054:	3304      	adds	r3, #4
 8019056:	4618      	mov	r0, r3
 8019058:	f7fe f92e 	bl	80172b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801905c:	4b19      	ldr	r3, [pc, #100]	; (80190c4 <xTaskPriorityInherit+0xc4>)
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019062:	68bb      	ldr	r3, [r7, #8]
 8019064:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8019066:	68bb      	ldr	r3, [r7, #8]
 8019068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801906a:	4b18      	ldr	r3, [pc, #96]	; (80190cc <xTaskPriorityInherit+0xcc>)
 801906c:	681b      	ldr	r3, [r3, #0]
 801906e:	429a      	cmp	r2, r3
 8019070:	d903      	bls.n	801907a <xTaskPriorityInherit+0x7a>
 8019072:	68bb      	ldr	r3, [r7, #8]
 8019074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019076:	4a15      	ldr	r2, [pc, #84]	; (80190cc <xTaskPriorityInherit+0xcc>)
 8019078:	6013      	str	r3, [r2, #0]
 801907a:	68bb      	ldr	r3, [r7, #8]
 801907c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801907e:	4613      	mov	r3, r2
 8019080:	009b      	lsls	r3, r3, #2
 8019082:	4413      	add	r3, r2
 8019084:	009b      	lsls	r3, r3, #2
 8019086:	4a10      	ldr	r2, [pc, #64]	; (80190c8 <xTaskPriorityInherit+0xc8>)
 8019088:	441a      	add	r2, r3
 801908a:	68bb      	ldr	r3, [r7, #8]
 801908c:	3304      	adds	r3, #4
 801908e:	4619      	mov	r1, r3
 8019090:	4610      	mov	r0, r2
 8019092:	f7fe f8b4 	bl	80171fe <vListInsertEnd>
 8019096:	e004      	b.n	80190a2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019098:	4b0a      	ldr	r3, [pc, #40]	; (80190c4 <xTaskPriorityInherit+0xc4>)
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801909e:	68bb      	ldr	r3, [r7, #8]
 80190a0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80190a2:	2301      	movs	r3, #1
 80190a4:	60fb      	str	r3, [r7, #12]
 80190a6:	e008      	b.n	80190ba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80190a8:	68bb      	ldr	r3, [r7, #8]
 80190aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80190ac:	4b05      	ldr	r3, [pc, #20]	; (80190c4 <xTaskPriorityInherit+0xc4>)
 80190ae:	681b      	ldr	r3, [r3, #0]
 80190b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190b2:	429a      	cmp	r2, r3
 80190b4:	d201      	bcs.n	80190ba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80190b6:	2301      	movs	r3, #1
 80190b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80190ba:	68fb      	ldr	r3, [r7, #12]
	}
 80190bc:	4618      	mov	r0, r3
 80190be:	3710      	adds	r7, #16
 80190c0:	46bd      	mov	sp, r7
 80190c2:	bd80      	pop	{r7, pc}
 80190c4:	20000b00 	.word	0x20000b00
 80190c8:	20000b04 	.word	0x20000b04
 80190cc:	20000fdc 	.word	0x20000fdc

080190d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80190d0:	b580      	push	{r7, lr}
 80190d2:	b086      	sub	sp, #24
 80190d4:	af00      	add	r7, sp, #0
 80190d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80190dc:	2300      	movs	r3, #0
 80190de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d056      	beq.n	8019194 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80190e6:	4b2e      	ldr	r3, [pc, #184]	; (80191a0 <xTaskPriorityDisinherit+0xd0>)
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	693a      	ldr	r2, [r7, #16]
 80190ec:	429a      	cmp	r2, r3
 80190ee:	d00a      	beq.n	8019106 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80190f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190f4:	f383 8811 	msr	BASEPRI, r3
 80190f8:	f3bf 8f6f 	isb	sy
 80190fc:	f3bf 8f4f 	dsb	sy
 8019100:	60fb      	str	r3, [r7, #12]
}
 8019102:	bf00      	nop
 8019104:	e7fe      	b.n	8019104 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8019106:	693b      	ldr	r3, [r7, #16]
 8019108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801910a:	2b00      	cmp	r3, #0
 801910c:	d10a      	bne.n	8019124 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801910e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019112:	f383 8811 	msr	BASEPRI, r3
 8019116:	f3bf 8f6f 	isb	sy
 801911a:	f3bf 8f4f 	dsb	sy
 801911e:	60bb      	str	r3, [r7, #8]
}
 8019120:	bf00      	nop
 8019122:	e7fe      	b.n	8019122 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8019124:	693b      	ldr	r3, [r7, #16]
 8019126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019128:	1e5a      	subs	r2, r3, #1
 801912a:	693b      	ldr	r3, [r7, #16]
 801912c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801912e:	693b      	ldr	r3, [r7, #16]
 8019130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019132:	693b      	ldr	r3, [r7, #16]
 8019134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019136:	429a      	cmp	r2, r3
 8019138:	d02c      	beq.n	8019194 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801913a:	693b      	ldr	r3, [r7, #16]
 801913c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801913e:	2b00      	cmp	r3, #0
 8019140:	d128      	bne.n	8019194 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019142:	693b      	ldr	r3, [r7, #16]
 8019144:	3304      	adds	r3, #4
 8019146:	4618      	mov	r0, r3
 8019148:	f7fe f8b6 	bl	80172b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801914c:	693b      	ldr	r3, [r7, #16]
 801914e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019150:	693b      	ldr	r3, [r7, #16]
 8019152:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019154:	693b      	ldr	r3, [r7, #16]
 8019156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019158:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801915c:	693b      	ldr	r3, [r7, #16]
 801915e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8019160:	693b      	ldr	r3, [r7, #16]
 8019162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019164:	4b0f      	ldr	r3, [pc, #60]	; (80191a4 <xTaskPriorityDisinherit+0xd4>)
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	429a      	cmp	r2, r3
 801916a:	d903      	bls.n	8019174 <xTaskPriorityDisinherit+0xa4>
 801916c:	693b      	ldr	r3, [r7, #16]
 801916e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019170:	4a0c      	ldr	r2, [pc, #48]	; (80191a4 <xTaskPriorityDisinherit+0xd4>)
 8019172:	6013      	str	r3, [r2, #0]
 8019174:	693b      	ldr	r3, [r7, #16]
 8019176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019178:	4613      	mov	r3, r2
 801917a:	009b      	lsls	r3, r3, #2
 801917c:	4413      	add	r3, r2
 801917e:	009b      	lsls	r3, r3, #2
 8019180:	4a09      	ldr	r2, [pc, #36]	; (80191a8 <xTaskPriorityDisinherit+0xd8>)
 8019182:	441a      	add	r2, r3
 8019184:	693b      	ldr	r3, [r7, #16]
 8019186:	3304      	adds	r3, #4
 8019188:	4619      	mov	r1, r3
 801918a:	4610      	mov	r0, r2
 801918c:	f7fe f837 	bl	80171fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8019190:	2301      	movs	r3, #1
 8019192:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019194:	697b      	ldr	r3, [r7, #20]
	}
 8019196:	4618      	mov	r0, r3
 8019198:	3718      	adds	r7, #24
 801919a:	46bd      	mov	sp, r7
 801919c:	bd80      	pop	{r7, pc}
 801919e:	bf00      	nop
 80191a0:	20000b00 	.word	0x20000b00
 80191a4:	20000fdc 	.word	0x20000fdc
 80191a8:	20000b04 	.word	0x20000b04

080191ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80191ac:	b580      	push	{r7, lr}
 80191ae:	b088      	sub	sp, #32
 80191b0:	af00      	add	r7, sp, #0
 80191b2:	6078      	str	r0, [r7, #4]
 80191b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80191ba:	2301      	movs	r3, #1
 80191bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	d06a      	beq.n	801929a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80191c4:	69bb      	ldr	r3, [r7, #24]
 80191c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d10a      	bne.n	80191e2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80191cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191d0:	f383 8811 	msr	BASEPRI, r3
 80191d4:	f3bf 8f6f 	isb	sy
 80191d8:	f3bf 8f4f 	dsb	sy
 80191dc:	60fb      	str	r3, [r7, #12]
}
 80191de:	bf00      	nop
 80191e0:	e7fe      	b.n	80191e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80191e2:	69bb      	ldr	r3, [r7, #24]
 80191e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80191e6:	683a      	ldr	r2, [r7, #0]
 80191e8:	429a      	cmp	r2, r3
 80191ea:	d902      	bls.n	80191f2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80191ec:	683b      	ldr	r3, [r7, #0]
 80191ee:	61fb      	str	r3, [r7, #28]
 80191f0:	e002      	b.n	80191f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80191f2:	69bb      	ldr	r3, [r7, #24]
 80191f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80191f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80191f8:	69bb      	ldr	r3, [r7, #24]
 80191fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191fc:	69fa      	ldr	r2, [r7, #28]
 80191fe:	429a      	cmp	r2, r3
 8019200:	d04b      	beq.n	801929a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8019202:	69bb      	ldr	r3, [r7, #24]
 8019204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019206:	697a      	ldr	r2, [r7, #20]
 8019208:	429a      	cmp	r2, r3
 801920a:	d146      	bne.n	801929a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801920c:	4b25      	ldr	r3, [pc, #148]	; (80192a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	69ba      	ldr	r2, [r7, #24]
 8019212:	429a      	cmp	r2, r3
 8019214:	d10a      	bne.n	801922c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8019216:	f04f 0350 	mov.w	r3, #80	; 0x50
 801921a:	f383 8811 	msr	BASEPRI, r3
 801921e:	f3bf 8f6f 	isb	sy
 8019222:	f3bf 8f4f 	dsb	sy
 8019226:	60bb      	str	r3, [r7, #8]
}
 8019228:	bf00      	nop
 801922a:	e7fe      	b.n	801922a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801922c:	69bb      	ldr	r3, [r7, #24]
 801922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019230:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8019232:	69bb      	ldr	r3, [r7, #24]
 8019234:	69fa      	ldr	r2, [r7, #28]
 8019236:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019238:	69bb      	ldr	r3, [r7, #24]
 801923a:	699b      	ldr	r3, [r3, #24]
 801923c:	2b00      	cmp	r3, #0
 801923e:	db04      	blt.n	801924a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019240:	69fb      	ldr	r3, [r7, #28]
 8019242:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019246:	69bb      	ldr	r3, [r7, #24]
 8019248:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801924a:	69bb      	ldr	r3, [r7, #24]
 801924c:	6959      	ldr	r1, [r3, #20]
 801924e:	693a      	ldr	r2, [r7, #16]
 8019250:	4613      	mov	r3, r2
 8019252:	009b      	lsls	r3, r3, #2
 8019254:	4413      	add	r3, r2
 8019256:	009b      	lsls	r3, r3, #2
 8019258:	4a13      	ldr	r2, [pc, #76]	; (80192a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801925a:	4413      	add	r3, r2
 801925c:	4299      	cmp	r1, r3
 801925e:	d11c      	bne.n	801929a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019260:	69bb      	ldr	r3, [r7, #24]
 8019262:	3304      	adds	r3, #4
 8019264:	4618      	mov	r0, r3
 8019266:	f7fe f827 	bl	80172b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801926a:	69bb      	ldr	r3, [r7, #24]
 801926c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801926e:	4b0f      	ldr	r3, [pc, #60]	; (80192ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	429a      	cmp	r2, r3
 8019274:	d903      	bls.n	801927e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8019276:	69bb      	ldr	r3, [r7, #24]
 8019278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801927a:	4a0c      	ldr	r2, [pc, #48]	; (80192ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801927c:	6013      	str	r3, [r2, #0]
 801927e:	69bb      	ldr	r3, [r7, #24]
 8019280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019282:	4613      	mov	r3, r2
 8019284:	009b      	lsls	r3, r3, #2
 8019286:	4413      	add	r3, r2
 8019288:	009b      	lsls	r3, r3, #2
 801928a:	4a07      	ldr	r2, [pc, #28]	; (80192a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801928c:	441a      	add	r2, r3
 801928e:	69bb      	ldr	r3, [r7, #24]
 8019290:	3304      	adds	r3, #4
 8019292:	4619      	mov	r1, r3
 8019294:	4610      	mov	r0, r2
 8019296:	f7fd ffb2 	bl	80171fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801929a:	bf00      	nop
 801929c:	3720      	adds	r7, #32
 801929e:	46bd      	mov	sp, r7
 80192a0:	bd80      	pop	{r7, pc}
 80192a2:	bf00      	nop
 80192a4:	20000b00 	.word	0x20000b00
 80192a8:	20000b04 	.word	0x20000b04
 80192ac:	20000fdc 	.word	0x20000fdc

080192b0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80192b0:	b480      	push	{r7}
 80192b2:	b083      	sub	sp, #12
 80192b4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80192b6:	4b09      	ldr	r3, [pc, #36]	; (80192dc <uxTaskResetEventItemValue+0x2c>)
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	699b      	ldr	r3, [r3, #24]
 80192bc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80192be:	4b07      	ldr	r3, [pc, #28]	; (80192dc <uxTaskResetEventItemValue+0x2c>)
 80192c0:	681b      	ldr	r3, [r3, #0]
 80192c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80192c4:	4b05      	ldr	r3, [pc, #20]	; (80192dc <uxTaskResetEventItemValue+0x2c>)
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80192cc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80192ce:	687b      	ldr	r3, [r7, #4]
}
 80192d0:	4618      	mov	r0, r3
 80192d2:	370c      	adds	r7, #12
 80192d4:	46bd      	mov	sp, r7
 80192d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192da:	4770      	bx	lr
 80192dc:	20000b00 	.word	0x20000b00

080192e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80192e0:	b480      	push	{r7}
 80192e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80192e4:	4b07      	ldr	r3, [pc, #28]	; (8019304 <pvTaskIncrementMutexHeldCount+0x24>)
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d004      	beq.n	80192f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80192ec:	4b05      	ldr	r3, [pc, #20]	; (8019304 <pvTaskIncrementMutexHeldCount+0x24>)
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80192f2:	3201      	adds	r2, #1
 80192f4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80192f6:	4b03      	ldr	r3, [pc, #12]	; (8019304 <pvTaskIncrementMutexHeldCount+0x24>)
 80192f8:	681b      	ldr	r3, [r3, #0]
	}
 80192fa:	4618      	mov	r0, r3
 80192fc:	46bd      	mov	sp, r7
 80192fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019302:	4770      	bx	lr
 8019304:	20000b00 	.word	0x20000b00

08019308 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8019308:	b580      	push	{r7, lr}
 801930a:	b084      	sub	sp, #16
 801930c:	af00      	add	r7, sp, #0
 801930e:	6078      	str	r0, [r7, #4]
 8019310:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019312:	4b21      	ldr	r3, [pc, #132]	; (8019398 <prvAddCurrentTaskToDelayedList+0x90>)
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019318:	4b20      	ldr	r3, [pc, #128]	; (801939c <prvAddCurrentTaskToDelayedList+0x94>)
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	3304      	adds	r3, #4
 801931e:	4618      	mov	r0, r3
 8019320:	f7fd ffca 	bl	80172b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	f1b3 3fff 	cmp.w	r3, #4294967295
 801932a:	d10a      	bne.n	8019342 <prvAddCurrentTaskToDelayedList+0x3a>
 801932c:	683b      	ldr	r3, [r7, #0]
 801932e:	2b00      	cmp	r3, #0
 8019330:	d007      	beq.n	8019342 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019332:	4b1a      	ldr	r3, [pc, #104]	; (801939c <prvAddCurrentTaskToDelayedList+0x94>)
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	3304      	adds	r3, #4
 8019338:	4619      	mov	r1, r3
 801933a:	4819      	ldr	r0, [pc, #100]	; (80193a0 <prvAddCurrentTaskToDelayedList+0x98>)
 801933c:	f7fd ff5f 	bl	80171fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019340:	e026      	b.n	8019390 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019342:	68fa      	ldr	r2, [r7, #12]
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	4413      	add	r3, r2
 8019348:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801934a:	4b14      	ldr	r3, [pc, #80]	; (801939c <prvAddCurrentTaskToDelayedList+0x94>)
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	68ba      	ldr	r2, [r7, #8]
 8019350:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019352:	68ba      	ldr	r2, [r7, #8]
 8019354:	68fb      	ldr	r3, [r7, #12]
 8019356:	429a      	cmp	r2, r3
 8019358:	d209      	bcs.n	801936e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801935a:	4b12      	ldr	r3, [pc, #72]	; (80193a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801935c:	681a      	ldr	r2, [r3, #0]
 801935e:	4b0f      	ldr	r3, [pc, #60]	; (801939c <prvAddCurrentTaskToDelayedList+0x94>)
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	3304      	adds	r3, #4
 8019364:	4619      	mov	r1, r3
 8019366:	4610      	mov	r0, r2
 8019368:	f7fd ff6d 	bl	8017246 <vListInsert>
}
 801936c:	e010      	b.n	8019390 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801936e:	4b0e      	ldr	r3, [pc, #56]	; (80193a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8019370:	681a      	ldr	r2, [r3, #0]
 8019372:	4b0a      	ldr	r3, [pc, #40]	; (801939c <prvAddCurrentTaskToDelayedList+0x94>)
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	3304      	adds	r3, #4
 8019378:	4619      	mov	r1, r3
 801937a:	4610      	mov	r0, r2
 801937c:	f7fd ff63 	bl	8017246 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019380:	4b0a      	ldr	r3, [pc, #40]	; (80193ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	68ba      	ldr	r2, [r7, #8]
 8019386:	429a      	cmp	r2, r3
 8019388:	d202      	bcs.n	8019390 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801938a:	4a08      	ldr	r2, [pc, #32]	; (80193ac <prvAddCurrentTaskToDelayedList+0xa4>)
 801938c:	68bb      	ldr	r3, [r7, #8]
 801938e:	6013      	str	r3, [r2, #0]
}
 8019390:	bf00      	nop
 8019392:	3710      	adds	r7, #16
 8019394:	46bd      	mov	sp, r7
 8019396:	bd80      	pop	{r7, pc}
 8019398:	20000fd8 	.word	0x20000fd8
 801939c:	20000b00 	.word	0x20000b00
 80193a0:	20000fc0 	.word	0x20000fc0
 80193a4:	20000f90 	.word	0x20000f90
 80193a8:	20000f8c 	.word	0x20000f8c
 80193ac:	20000ff4 	.word	0x20000ff4

080193b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80193b0:	b580      	push	{r7, lr}
 80193b2:	b08a      	sub	sp, #40	; 0x28
 80193b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80193b6:	2300      	movs	r3, #0
 80193b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80193ba:	f000 fb07 	bl	80199cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80193be:	4b1c      	ldr	r3, [pc, #112]	; (8019430 <xTimerCreateTimerTask+0x80>)
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d021      	beq.n	801940a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80193c6:	2300      	movs	r3, #0
 80193c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80193ca:	2300      	movs	r3, #0
 80193cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80193ce:	1d3a      	adds	r2, r7, #4
 80193d0:	f107 0108 	add.w	r1, r7, #8
 80193d4:	f107 030c 	add.w	r3, r7, #12
 80193d8:	4618      	mov	r0, r3
 80193da:	f7fd fc5d 	bl	8016c98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80193de:	6879      	ldr	r1, [r7, #4]
 80193e0:	68bb      	ldr	r3, [r7, #8]
 80193e2:	68fa      	ldr	r2, [r7, #12]
 80193e4:	9202      	str	r2, [sp, #8]
 80193e6:	9301      	str	r3, [sp, #4]
 80193e8:	2302      	movs	r3, #2
 80193ea:	9300      	str	r3, [sp, #0]
 80193ec:	2300      	movs	r3, #0
 80193ee:	460a      	mov	r2, r1
 80193f0:	4910      	ldr	r1, [pc, #64]	; (8019434 <xTimerCreateTimerTask+0x84>)
 80193f2:	4811      	ldr	r0, [pc, #68]	; (8019438 <xTimerCreateTimerTask+0x88>)
 80193f4:	f7fe fe8a 	bl	801810c <xTaskCreateStatic>
 80193f8:	4603      	mov	r3, r0
 80193fa:	4a10      	ldr	r2, [pc, #64]	; (801943c <xTimerCreateTimerTask+0x8c>)
 80193fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80193fe:	4b0f      	ldr	r3, [pc, #60]	; (801943c <xTimerCreateTimerTask+0x8c>)
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	2b00      	cmp	r3, #0
 8019404:	d001      	beq.n	801940a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8019406:	2301      	movs	r3, #1
 8019408:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801940a:	697b      	ldr	r3, [r7, #20]
 801940c:	2b00      	cmp	r3, #0
 801940e:	d10a      	bne.n	8019426 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8019410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019414:	f383 8811 	msr	BASEPRI, r3
 8019418:	f3bf 8f6f 	isb	sy
 801941c:	f3bf 8f4f 	dsb	sy
 8019420:	613b      	str	r3, [r7, #16]
}
 8019422:	bf00      	nop
 8019424:	e7fe      	b.n	8019424 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8019426:	697b      	ldr	r3, [r7, #20]
}
 8019428:	4618      	mov	r0, r3
 801942a:	3718      	adds	r7, #24
 801942c:	46bd      	mov	sp, r7
 801942e:	bd80      	pop	{r7, pc}
 8019430:	20001030 	.word	0x20001030
 8019434:	0801ba58 	.word	0x0801ba58
 8019438:	08019575 	.word	0x08019575
 801943c:	20001034 	.word	0x20001034

08019440 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019440:	b580      	push	{r7, lr}
 8019442:	b08a      	sub	sp, #40	; 0x28
 8019444:	af00      	add	r7, sp, #0
 8019446:	60f8      	str	r0, [r7, #12]
 8019448:	60b9      	str	r1, [r7, #8]
 801944a:	607a      	str	r2, [r7, #4]
 801944c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801944e:	2300      	movs	r3, #0
 8019450:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019452:	68fb      	ldr	r3, [r7, #12]
 8019454:	2b00      	cmp	r3, #0
 8019456:	d10a      	bne.n	801946e <xTimerGenericCommand+0x2e>
	__asm volatile
 8019458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801945c:	f383 8811 	msr	BASEPRI, r3
 8019460:	f3bf 8f6f 	isb	sy
 8019464:	f3bf 8f4f 	dsb	sy
 8019468:	623b      	str	r3, [r7, #32]
}
 801946a:	bf00      	nop
 801946c:	e7fe      	b.n	801946c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801946e:	4b1a      	ldr	r3, [pc, #104]	; (80194d8 <xTimerGenericCommand+0x98>)
 8019470:	681b      	ldr	r3, [r3, #0]
 8019472:	2b00      	cmp	r3, #0
 8019474:	d02a      	beq.n	80194cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019476:	68bb      	ldr	r3, [r7, #8]
 8019478:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801947e:	68fb      	ldr	r3, [r7, #12]
 8019480:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019482:	68bb      	ldr	r3, [r7, #8]
 8019484:	2b05      	cmp	r3, #5
 8019486:	dc18      	bgt.n	80194ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019488:	f7ff fd9c 	bl	8018fc4 <xTaskGetSchedulerState>
 801948c:	4603      	mov	r3, r0
 801948e:	2b02      	cmp	r3, #2
 8019490:	d109      	bne.n	80194a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019492:	4b11      	ldr	r3, [pc, #68]	; (80194d8 <xTimerGenericCommand+0x98>)
 8019494:	6818      	ldr	r0, [r3, #0]
 8019496:	f107 0110 	add.w	r1, r7, #16
 801949a:	2300      	movs	r3, #0
 801949c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801949e:	f7fe f929 	bl	80176f4 <xQueueGenericSend>
 80194a2:	6278      	str	r0, [r7, #36]	; 0x24
 80194a4:	e012      	b.n	80194cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80194a6:	4b0c      	ldr	r3, [pc, #48]	; (80194d8 <xTimerGenericCommand+0x98>)
 80194a8:	6818      	ldr	r0, [r3, #0]
 80194aa:	f107 0110 	add.w	r1, r7, #16
 80194ae:	2300      	movs	r3, #0
 80194b0:	2200      	movs	r2, #0
 80194b2:	f7fe f91f 	bl	80176f4 <xQueueGenericSend>
 80194b6:	6278      	str	r0, [r7, #36]	; 0x24
 80194b8:	e008      	b.n	80194cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80194ba:	4b07      	ldr	r3, [pc, #28]	; (80194d8 <xTimerGenericCommand+0x98>)
 80194bc:	6818      	ldr	r0, [r3, #0]
 80194be:	f107 0110 	add.w	r1, r7, #16
 80194c2:	2300      	movs	r3, #0
 80194c4:	683a      	ldr	r2, [r7, #0]
 80194c6:	f7fe fa13 	bl	80178f0 <xQueueGenericSendFromISR>
 80194ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80194cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80194ce:	4618      	mov	r0, r3
 80194d0:	3728      	adds	r7, #40	; 0x28
 80194d2:	46bd      	mov	sp, r7
 80194d4:	bd80      	pop	{r7, pc}
 80194d6:	bf00      	nop
 80194d8:	20001030 	.word	0x20001030

080194dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80194dc:	b580      	push	{r7, lr}
 80194de:	b088      	sub	sp, #32
 80194e0:	af02      	add	r7, sp, #8
 80194e2:	6078      	str	r0, [r7, #4]
 80194e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80194e6:	4b22      	ldr	r3, [pc, #136]	; (8019570 <prvProcessExpiredTimer+0x94>)
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	68db      	ldr	r3, [r3, #12]
 80194ec:	68db      	ldr	r3, [r3, #12]
 80194ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80194f0:	697b      	ldr	r3, [r7, #20]
 80194f2:	3304      	adds	r3, #4
 80194f4:	4618      	mov	r0, r3
 80194f6:	f7fd fedf 	bl	80172b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80194fa:	697b      	ldr	r3, [r7, #20]
 80194fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019500:	f003 0304 	and.w	r3, r3, #4
 8019504:	2b00      	cmp	r3, #0
 8019506:	d022      	beq.n	801954e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019508:	697b      	ldr	r3, [r7, #20]
 801950a:	699a      	ldr	r2, [r3, #24]
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	18d1      	adds	r1, r2, r3
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	683a      	ldr	r2, [r7, #0]
 8019514:	6978      	ldr	r0, [r7, #20]
 8019516:	f000 f8d1 	bl	80196bc <prvInsertTimerInActiveList>
 801951a:	4603      	mov	r3, r0
 801951c:	2b00      	cmp	r3, #0
 801951e:	d01f      	beq.n	8019560 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019520:	2300      	movs	r3, #0
 8019522:	9300      	str	r3, [sp, #0]
 8019524:	2300      	movs	r3, #0
 8019526:	687a      	ldr	r2, [r7, #4]
 8019528:	2100      	movs	r1, #0
 801952a:	6978      	ldr	r0, [r7, #20]
 801952c:	f7ff ff88 	bl	8019440 <xTimerGenericCommand>
 8019530:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8019532:	693b      	ldr	r3, [r7, #16]
 8019534:	2b00      	cmp	r3, #0
 8019536:	d113      	bne.n	8019560 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801953c:	f383 8811 	msr	BASEPRI, r3
 8019540:	f3bf 8f6f 	isb	sy
 8019544:	f3bf 8f4f 	dsb	sy
 8019548:	60fb      	str	r3, [r7, #12]
}
 801954a:	bf00      	nop
 801954c:	e7fe      	b.n	801954c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801954e:	697b      	ldr	r3, [r7, #20]
 8019550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019554:	f023 0301 	bic.w	r3, r3, #1
 8019558:	b2da      	uxtb	r2, r3
 801955a:	697b      	ldr	r3, [r7, #20]
 801955c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019560:	697b      	ldr	r3, [r7, #20]
 8019562:	6a1b      	ldr	r3, [r3, #32]
 8019564:	6978      	ldr	r0, [r7, #20]
 8019566:	4798      	blx	r3
}
 8019568:	bf00      	nop
 801956a:	3718      	adds	r7, #24
 801956c:	46bd      	mov	sp, r7
 801956e:	bd80      	pop	{r7, pc}
 8019570:	20001028 	.word	0x20001028

08019574 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019574:	b580      	push	{r7, lr}
 8019576:	b084      	sub	sp, #16
 8019578:	af00      	add	r7, sp, #0
 801957a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801957c:	f107 0308 	add.w	r3, r7, #8
 8019580:	4618      	mov	r0, r3
 8019582:	f000 f857 	bl	8019634 <prvGetNextExpireTime>
 8019586:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019588:	68bb      	ldr	r3, [r7, #8]
 801958a:	4619      	mov	r1, r3
 801958c:	68f8      	ldr	r0, [r7, #12]
 801958e:	f000 f803 	bl	8019598 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8019592:	f000 f8d5 	bl	8019740 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019596:	e7f1      	b.n	801957c <prvTimerTask+0x8>

08019598 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019598:	b580      	push	{r7, lr}
 801959a:	b084      	sub	sp, #16
 801959c:	af00      	add	r7, sp, #0
 801959e:	6078      	str	r0, [r7, #4]
 80195a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80195a2:	f7ff f86d 	bl	8018680 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80195a6:	f107 0308 	add.w	r3, r7, #8
 80195aa:	4618      	mov	r0, r3
 80195ac:	f000 f866 	bl	801967c <prvSampleTimeNow>
 80195b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80195b2:	68bb      	ldr	r3, [r7, #8]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d130      	bne.n	801961a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80195b8:	683b      	ldr	r3, [r7, #0]
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	d10a      	bne.n	80195d4 <prvProcessTimerOrBlockTask+0x3c>
 80195be:	687a      	ldr	r2, [r7, #4]
 80195c0:	68fb      	ldr	r3, [r7, #12]
 80195c2:	429a      	cmp	r2, r3
 80195c4:	d806      	bhi.n	80195d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80195c6:	f7ff f869 	bl	801869c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80195ca:	68f9      	ldr	r1, [r7, #12]
 80195cc:	6878      	ldr	r0, [r7, #4]
 80195ce:	f7ff ff85 	bl	80194dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80195d2:	e024      	b.n	801961e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80195d4:	683b      	ldr	r3, [r7, #0]
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d008      	beq.n	80195ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80195da:	4b13      	ldr	r3, [pc, #76]	; (8019628 <prvProcessTimerOrBlockTask+0x90>)
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d101      	bne.n	80195e8 <prvProcessTimerOrBlockTask+0x50>
 80195e4:	2301      	movs	r3, #1
 80195e6:	e000      	b.n	80195ea <prvProcessTimerOrBlockTask+0x52>
 80195e8:	2300      	movs	r3, #0
 80195ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80195ec:	4b0f      	ldr	r3, [pc, #60]	; (801962c <prvProcessTimerOrBlockTask+0x94>)
 80195ee:	6818      	ldr	r0, [r3, #0]
 80195f0:	687a      	ldr	r2, [r7, #4]
 80195f2:	68fb      	ldr	r3, [r7, #12]
 80195f4:	1ad3      	subs	r3, r2, r3
 80195f6:	683a      	ldr	r2, [r7, #0]
 80195f8:	4619      	mov	r1, r3
 80195fa:	f7fe fd53 	bl	80180a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80195fe:	f7ff f84d 	bl	801869c <xTaskResumeAll>
 8019602:	4603      	mov	r3, r0
 8019604:	2b00      	cmp	r3, #0
 8019606:	d10a      	bne.n	801961e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019608:	4b09      	ldr	r3, [pc, #36]	; (8019630 <prvProcessTimerOrBlockTask+0x98>)
 801960a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801960e:	601a      	str	r2, [r3, #0]
 8019610:	f3bf 8f4f 	dsb	sy
 8019614:	f3bf 8f6f 	isb	sy
}
 8019618:	e001      	b.n	801961e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801961a:	f7ff f83f 	bl	801869c <xTaskResumeAll>
}
 801961e:	bf00      	nop
 8019620:	3710      	adds	r7, #16
 8019622:	46bd      	mov	sp, r7
 8019624:	bd80      	pop	{r7, pc}
 8019626:	bf00      	nop
 8019628:	2000102c 	.word	0x2000102c
 801962c:	20001030 	.word	0x20001030
 8019630:	e000ed04 	.word	0xe000ed04

08019634 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019634:	b480      	push	{r7}
 8019636:	b085      	sub	sp, #20
 8019638:	af00      	add	r7, sp, #0
 801963a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801963c:	4b0e      	ldr	r3, [pc, #56]	; (8019678 <prvGetNextExpireTime+0x44>)
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	2b00      	cmp	r3, #0
 8019644:	d101      	bne.n	801964a <prvGetNextExpireTime+0x16>
 8019646:	2201      	movs	r2, #1
 8019648:	e000      	b.n	801964c <prvGetNextExpireTime+0x18>
 801964a:	2200      	movs	r2, #0
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	681b      	ldr	r3, [r3, #0]
 8019654:	2b00      	cmp	r3, #0
 8019656:	d105      	bne.n	8019664 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019658:	4b07      	ldr	r3, [pc, #28]	; (8019678 <prvGetNextExpireTime+0x44>)
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	68db      	ldr	r3, [r3, #12]
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	60fb      	str	r3, [r7, #12]
 8019662:	e001      	b.n	8019668 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019664:	2300      	movs	r3, #0
 8019666:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019668:	68fb      	ldr	r3, [r7, #12]
}
 801966a:	4618      	mov	r0, r3
 801966c:	3714      	adds	r7, #20
 801966e:	46bd      	mov	sp, r7
 8019670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019674:	4770      	bx	lr
 8019676:	bf00      	nop
 8019678:	20001028 	.word	0x20001028

0801967c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801967c:	b580      	push	{r7, lr}
 801967e:	b084      	sub	sp, #16
 8019680:	af00      	add	r7, sp, #0
 8019682:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019684:	f7ff f8a8 	bl	80187d8 <xTaskGetTickCount>
 8019688:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801968a:	4b0b      	ldr	r3, [pc, #44]	; (80196b8 <prvSampleTimeNow+0x3c>)
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	68fa      	ldr	r2, [r7, #12]
 8019690:	429a      	cmp	r2, r3
 8019692:	d205      	bcs.n	80196a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019694:	f000 f936 	bl	8019904 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	2201      	movs	r2, #1
 801969c:	601a      	str	r2, [r3, #0]
 801969e:	e002      	b.n	80196a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	2200      	movs	r2, #0
 80196a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80196a6:	4a04      	ldr	r2, [pc, #16]	; (80196b8 <prvSampleTimeNow+0x3c>)
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80196ac:	68fb      	ldr	r3, [r7, #12]
}
 80196ae:	4618      	mov	r0, r3
 80196b0:	3710      	adds	r7, #16
 80196b2:	46bd      	mov	sp, r7
 80196b4:	bd80      	pop	{r7, pc}
 80196b6:	bf00      	nop
 80196b8:	20001038 	.word	0x20001038

080196bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80196bc:	b580      	push	{r7, lr}
 80196be:	b086      	sub	sp, #24
 80196c0:	af00      	add	r7, sp, #0
 80196c2:	60f8      	str	r0, [r7, #12]
 80196c4:	60b9      	str	r1, [r7, #8]
 80196c6:	607a      	str	r2, [r7, #4]
 80196c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80196ca:	2300      	movs	r3, #0
 80196cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80196ce:	68fb      	ldr	r3, [r7, #12]
 80196d0:	68ba      	ldr	r2, [r7, #8]
 80196d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	68fa      	ldr	r2, [r7, #12]
 80196d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80196da:	68ba      	ldr	r2, [r7, #8]
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	429a      	cmp	r2, r3
 80196e0:	d812      	bhi.n	8019708 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80196e2:	687a      	ldr	r2, [r7, #4]
 80196e4:	683b      	ldr	r3, [r7, #0]
 80196e6:	1ad2      	subs	r2, r2, r3
 80196e8:	68fb      	ldr	r3, [r7, #12]
 80196ea:	699b      	ldr	r3, [r3, #24]
 80196ec:	429a      	cmp	r2, r3
 80196ee:	d302      	bcc.n	80196f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80196f0:	2301      	movs	r3, #1
 80196f2:	617b      	str	r3, [r7, #20]
 80196f4:	e01b      	b.n	801972e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80196f6:	4b10      	ldr	r3, [pc, #64]	; (8019738 <prvInsertTimerInActiveList+0x7c>)
 80196f8:	681a      	ldr	r2, [r3, #0]
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	3304      	adds	r3, #4
 80196fe:	4619      	mov	r1, r3
 8019700:	4610      	mov	r0, r2
 8019702:	f7fd fda0 	bl	8017246 <vListInsert>
 8019706:	e012      	b.n	801972e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019708:	687a      	ldr	r2, [r7, #4]
 801970a:	683b      	ldr	r3, [r7, #0]
 801970c:	429a      	cmp	r2, r3
 801970e:	d206      	bcs.n	801971e <prvInsertTimerInActiveList+0x62>
 8019710:	68ba      	ldr	r2, [r7, #8]
 8019712:	683b      	ldr	r3, [r7, #0]
 8019714:	429a      	cmp	r2, r3
 8019716:	d302      	bcc.n	801971e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019718:	2301      	movs	r3, #1
 801971a:	617b      	str	r3, [r7, #20]
 801971c:	e007      	b.n	801972e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801971e:	4b07      	ldr	r3, [pc, #28]	; (801973c <prvInsertTimerInActiveList+0x80>)
 8019720:	681a      	ldr	r2, [r3, #0]
 8019722:	68fb      	ldr	r3, [r7, #12]
 8019724:	3304      	adds	r3, #4
 8019726:	4619      	mov	r1, r3
 8019728:	4610      	mov	r0, r2
 801972a:	f7fd fd8c 	bl	8017246 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801972e:	697b      	ldr	r3, [r7, #20]
}
 8019730:	4618      	mov	r0, r3
 8019732:	3718      	adds	r7, #24
 8019734:	46bd      	mov	sp, r7
 8019736:	bd80      	pop	{r7, pc}
 8019738:	2000102c 	.word	0x2000102c
 801973c:	20001028 	.word	0x20001028

08019740 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019740:	b580      	push	{r7, lr}
 8019742:	b08e      	sub	sp, #56	; 0x38
 8019744:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019746:	e0ca      	b.n	80198de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	2b00      	cmp	r3, #0
 801974c:	da18      	bge.n	8019780 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801974e:	1d3b      	adds	r3, r7, #4
 8019750:	3304      	adds	r3, #4
 8019752:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019756:	2b00      	cmp	r3, #0
 8019758:	d10a      	bne.n	8019770 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801975a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801975e:	f383 8811 	msr	BASEPRI, r3
 8019762:	f3bf 8f6f 	isb	sy
 8019766:	f3bf 8f4f 	dsb	sy
 801976a:	61fb      	str	r3, [r7, #28]
}
 801976c:	bf00      	nop
 801976e:	e7fe      	b.n	801976e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019776:	6850      	ldr	r0, [r2, #4]
 8019778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801977a:	6892      	ldr	r2, [r2, #8]
 801977c:	4611      	mov	r1, r2
 801977e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	2b00      	cmp	r3, #0
 8019784:	f2c0 80aa 	blt.w	80198dc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801978c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801978e:	695b      	ldr	r3, [r3, #20]
 8019790:	2b00      	cmp	r3, #0
 8019792:	d004      	beq.n	801979e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019796:	3304      	adds	r3, #4
 8019798:	4618      	mov	r0, r3
 801979a:	f7fd fd8d 	bl	80172b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801979e:	463b      	mov	r3, r7
 80197a0:	4618      	mov	r0, r3
 80197a2:	f7ff ff6b 	bl	801967c <prvSampleTimeNow>
 80197a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	2b09      	cmp	r3, #9
 80197ac:	f200 8097 	bhi.w	80198de <prvProcessReceivedCommands+0x19e>
 80197b0:	a201      	add	r2, pc, #4	; (adr r2, 80197b8 <prvProcessReceivedCommands+0x78>)
 80197b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80197b6:	bf00      	nop
 80197b8:	080197e1 	.word	0x080197e1
 80197bc:	080197e1 	.word	0x080197e1
 80197c0:	080197e1 	.word	0x080197e1
 80197c4:	08019855 	.word	0x08019855
 80197c8:	08019869 	.word	0x08019869
 80197cc:	080198b3 	.word	0x080198b3
 80197d0:	080197e1 	.word	0x080197e1
 80197d4:	080197e1 	.word	0x080197e1
 80197d8:	08019855 	.word	0x08019855
 80197dc:	08019869 	.word	0x08019869
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80197e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80197e6:	f043 0301 	orr.w	r3, r3, #1
 80197ea:	b2da      	uxtb	r2, r3
 80197ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80197f2:	68ba      	ldr	r2, [r7, #8]
 80197f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197f6:	699b      	ldr	r3, [r3, #24]
 80197f8:	18d1      	adds	r1, r2, r3
 80197fa:	68bb      	ldr	r3, [r7, #8]
 80197fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80197fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019800:	f7ff ff5c 	bl	80196bc <prvInsertTimerInActiveList>
 8019804:	4603      	mov	r3, r0
 8019806:	2b00      	cmp	r3, #0
 8019808:	d069      	beq.n	80198de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801980a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801980c:	6a1b      	ldr	r3, [r3, #32]
 801980e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019810:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019818:	f003 0304 	and.w	r3, r3, #4
 801981c:	2b00      	cmp	r3, #0
 801981e:	d05e      	beq.n	80198de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8019820:	68ba      	ldr	r2, [r7, #8]
 8019822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019824:	699b      	ldr	r3, [r3, #24]
 8019826:	441a      	add	r2, r3
 8019828:	2300      	movs	r3, #0
 801982a:	9300      	str	r3, [sp, #0]
 801982c:	2300      	movs	r3, #0
 801982e:	2100      	movs	r1, #0
 8019830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019832:	f7ff fe05 	bl	8019440 <xTimerGenericCommand>
 8019836:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019838:	6a3b      	ldr	r3, [r7, #32]
 801983a:	2b00      	cmp	r3, #0
 801983c:	d14f      	bne.n	80198de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801983e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019842:	f383 8811 	msr	BASEPRI, r3
 8019846:	f3bf 8f6f 	isb	sy
 801984a:	f3bf 8f4f 	dsb	sy
 801984e:	61bb      	str	r3, [r7, #24]
}
 8019850:	bf00      	nop
 8019852:	e7fe      	b.n	8019852 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019856:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801985a:	f023 0301 	bic.w	r3, r3, #1
 801985e:	b2da      	uxtb	r2, r3
 8019860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019866:	e03a      	b.n	80198de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801986a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801986e:	f043 0301 	orr.w	r3, r3, #1
 8019872:	b2da      	uxtb	r2, r3
 8019874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019876:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801987a:	68ba      	ldr	r2, [r7, #8]
 801987c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801987e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019882:	699b      	ldr	r3, [r3, #24]
 8019884:	2b00      	cmp	r3, #0
 8019886:	d10a      	bne.n	801989e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801988c:	f383 8811 	msr	BASEPRI, r3
 8019890:	f3bf 8f6f 	isb	sy
 8019894:	f3bf 8f4f 	dsb	sy
 8019898:	617b      	str	r3, [r7, #20]
}
 801989a:	bf00      	nop
 801989c:	e7fe      	b.n	801989c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198a0:	699a      	ldr	r2, [r3, #24]
 80198a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198a4:	18d1      	adds	r1, r2, r3
 80198a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80198aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80198ac:	f7ff ff06 	bl	80196bc <prvInsertTimerInActiveList>
					break;
 80198b0:	e015      	b.n	80198de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80198b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80198b8:	f003 0302 	and.w	r3, r3, #2
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d103      	bne.n	80198c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80198c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80198c2:	f000 fbfd 	bl	801a0c0 <vPortFree>
 80198c6:	e00a      	b.n	80198de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80198c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80198ce:	f023 0301 	bic.w	r3, r3, #1
 80198d2:	b2da      	uxtb	r2, r3
 80198d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80198da:	e000      	b.n	80198de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80198dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80198de:	4b08      	ldr	r3, [pc, #32]	; (8019900 <prvProcessReceivedCommands+0x1c0>)
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	1d39      	adds	r1, r7, #4
 80198e4:	2200      	movs	r2, #0
 80198e6:	4618      	mov	r0, r3
 80198e8:	f7fe f89e 	bl	8017a28 <xQueueReceive>
 80198ec:	4603      	mov	r3, r0
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	f47f af2a 	bne.w	8019748 <prvProcessReceivedCommands+0x8>
	}
}
 80198f4:	bf00      	nop
 80198f6:	bf00      	nop
 80198f8:	3730      	adds	r7, #48	; 0x30
 80198fa:	46bd      	mov	sp, r7
 80198fc:	bd80      	pop	{r7, pc}
 80198fe:	bf00      	nop
 8019900:	20001030 	.word	0x20001030

08019904 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019904:	b580      	push	{r7, lr}
 8019906:	b088      	sub	sp, #32
 8019908:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801990a:	e048      	b.n	801999e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801990c:	4b2d      	ldr	r3, [pc, #180]	; (80199c4 <prvSwitchTimerLists+0xc0>)
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	68db      	ldr	r3, [r3, #12]
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019916:	4b2b      	ldr	r3, [pc, #172]	; (80199c4 <prvSwitchTimerLists+0xc0>)
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	68db      	ldr	r3, [r3, #12]
 801991c:	68db      	ldr	r3, [r3, #12]
 801991e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019920:	68fb      	ldr	r3, [r7, #12]
 8019922:	3304      	adds	r3, #4
 8019924:	4618      	mov	r0, r3
 8019926:	f7fd fcc7 	bl	80172b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	6a1b      	ldr	r3, [r3, #32]
 801992e:	68f8      	ldr	r0, [r7, #12]
 8019930:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019932:	68fb      	ldr	r3, [r7, #12]
 8019934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019938:	f003 0304 	and.w	r3, r3, #4
 801993c:	2b00      	cmp	r3, #0
 801993e:	d02e      	beq.n	801999e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019940:	68fb      	ldr	r3, [r7, #12]
 8019942:	699b      	ldr	r3, [r3, #24]
 8019944:	693a      	ldr	r2, [r7, #16]
 8019946:	4413      	add	r3, r2
 8019948:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801994a:	68ba      	ldr	r2, [r7, #8]
 801994c:	693b      	ldr	r3, [r7, #16]
 801994e:	429a      	cmp	r2, r3
 8019950:	d90e      	bls.n	8019970 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019952:	68fb      	ldr	r3, [r7, #12]
 8019954:	68ba      	ldr	r2, [r7, #8]
 8019956:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	68fa      	ldr	r2, [r7, #12]
 801995c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801995e:	4b19      	ldr	r3, [pc, #100]	; (80199c4 <prvSwitchTimerLists+0xc0>)
 8019960:	681a      	ldr	r2, [r3, #0]
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	3304      	adds	r3, #4
 8019966:	4619      	mov	r1, r3
 8019968:	4610      	mov	r0, r2
 801996a:	f7fd fc6c 	bl	8017246 <vListInsert>
 801996e:	e016      	b.n	801999e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019970:	2300      	movs	r3, #0
 8019972:	9300      	str	r3, [sp, #0]
 8019974:	2300      	movs	r3, #0
 8019976:	693a      	ldr	r2, [r7, #16]
 8019978:	2100      	movs	r1, #0
 801997a:	68f8      	ldr	r0, [r7, #12]
 801997c:	f7ff fd60 	bl	8019440 <xTimerGenericCommand>
 8019980:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	2b00      	cmp	r3, #0
 8019986:	d10a      	bne.n	801999e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801998c:	f383 8811 	msr	BASEPRI, r3
 8019990:	f3bf 8f6f 	isb	sy
 8019994:	f3bf 8f4f 	dsb	sy
 8019998:	603b      	str	r3, [r7, #0]
}
 801999a:	bf00      	nop
 801999c:	e7fe      	b.n	801999c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801999e:	4b09      	ldr	r3, [pc, #36]	; (80199c4 <prvSwitchTimerLists+0xc0>)
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d1b1      	bne.n	801990c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80199a8:	4b06      	ldr	r3, [pc, #24]	; (80199c4 <prvSwitchTimerLists+0xc0>)
 80199aa:	681b      	ldr	r3, [r3, #0]
 80199ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80199ae:	4b06      	ldr	r3, [pc, #24]	; (80199c8 <prvSwitchTimerLists+0xc4>)
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	4a04      	ldr	r2, [pc, #16]	; (80199c4 <prvSwitchTimerLists+0xc0>)
 80199b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80199b6:	4a04      	ldr	r2, [pc, #16]	; (80199c8 <prvSwitchTimerLists+0xc4>)
 80199b8:	697b      	ldr	r3, [r7, #20]
 80199ba:	6013      	str	r3, [r2, #0]
}
 80199bc:	bf00      	nop
 80199be:	3718      	adds	r7, #24
 80199c0:	46bd      	mov	sp, r7
 80199c2:	bd80      	pop	{r7, pc}
 80199c4:	20001028 	.word	0x20001028
 80199c8:	2000102c 	.word	0x2000102c

080199cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80199cc:	b580      	push	{r7, lr}
 80199ce:	b082      	sub	sp, #8
 80199d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80199d2:	f000 f987 	bl	8019ce4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80199d6:	4b15      	ldr	r3, [pc, #84]	; (8019a2c <prvCheckForValidListAndQueue+0x60>)
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	2b00      	cmp	r3, #0
 80199dc:	d120      	bne.n	8019a20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80199de:	4814      	ldr	r0, [pc, #80]	; (8019a30 <prvCheckForValidListAndQueue+0x64>)
 80199e0:	f7fd fbe0 	bl	80171a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80199e4:	4813      	ldr	r0, [pc, #76]	; (8019a34 <prvCheckForValidListAndQueue+0x68>)
 80199e6:	f7fd fbdd 	bl	80171a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80199ea:	4b13      	ldr	r3, [pc, #76]	; (8019a38 <prvCheckForValidListAndQueue+0x6c>)
 80199ec:	4a10      	ldr	r2, [pc, #64]	; (8019a30 <prvCheckForValidListAndQueue+0x64>)
 80199ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80199f0:	4b12      	ldr	r3, [pc, #72]	; (8019a3c <prvCheckForValidListAndQueue+0x70>)
 80199f2:	4a10      	ldr	r2, [pc, #64]	; (8019a34 <prvCheckForValidListAndQueue+0x68>)
 80199f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80199f6:	2300      	movs	r3, #0
 80199f8:	9300      	str	r3, [sp, #0]
 80199fa:	4b11      	ldr	r3, [pc, #68]	; (8019a40 <prvCheckForValidListAndQueue+0x74>)
 80199fc:	4a11      	ldr	r2, [pc, #68]	; (8019a44 <prvCheckForValidListAndQueue+0x78>)
 80199fe:	2110      	movs	r1, #16
 8019a00:	200a      	movs	r0, #10
 8019a02:	f7fd fceb 	bl	80173dc <xQueueGenericCreateStatic>
 8019a06:	4603      	mov	r3, r0
 8019a08:	4a08      	ldr	r2, [pc, #32]	; (8019a2c <prvCheckForValidListAndQueue+0x60>)
 8019a0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019a0c:	4b07      	ldr	r3, [pc, #28]	; (8019a2c <prvCheckForValidListAndQueue+0x60>)
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d005      	beq.n	8019a20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8019a14:	4b05      	ldr	r3, [pc, #20]	; (8019a2c <prvCheckForValidListAndQueue+0x60>)
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	490b      	ldr	r1, [pc, #44]	; (8019a48 <prvCheckForValidListAndQueue+0x7c>)
 8019a1a:	4618      	mov	r0, r3
 8019a1c:	f7fe fb18 	bl	8018050 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019a20:	f000 f990 	bl	8019d44 <vPortExitCritical>
}
 8019a24:	bf00      	nop
 8019a26:	46bd      	mov	sp, r7
 8019a28:	bd80      	pop	{r7, pc}
 8019a2a:	bf00      	nop
 8019a2c:	20001030 	.word	0x20001030
 8019a30:	20001000 	.word	0x20001000
 8019a34:	20001014 	.word	0x20001014
 8019a38:	20001028 	.word	0x20001028
 8019a3c:	2000102c 	.word	0x2000102c
 8019a40:	200010dc 	.word	0x200010dc
 8019a44:	2000103c 	.word	0x2000103c
 8019a48:	0801ba60 	.word	0x0801ba60

08019a4c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019a4c:	b580      	push	{r7, lr}
 8019a4e:	b08a      	sub	sp, #40	; 0x28
 8019a50:	af00      	add	r7, sp, #0
 8019a52:	60f8      	str	r0, [r7, #12]
 8019a54:	60b9      	str	r1, [r7, #8]
 8019a56:	607a      	str	r2, [r7, #4]
 8019a58:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8019a5a:	f06f 0301 	mvn.w	r3, #1
 8019a5e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8019a64:	68bb      	ldr	r3, [r7, #8]
 8019a66:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019a6c:	4b06      	ldr	r3, [pc, #24]	; (8019a88 <xTimerPendFunctionCallFromISR+0x3c>)
 8019a6e:	6818      	ldr	r0, [r3, #0]
 8019a70:	f107 0114 	add.w	r1, r7, #20
 8019a74:	2300      	movs	r3, #0
 8019a76:	683a      	ldr	r2, [r7, #0]
 8019a78:	f7fd ff3a 	bl	80178f0 <xQueueGenericSendFromISR>
 8019a7c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8019a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8019a80:	4618      	mov	r0, r3
 8019a82:	3728      	adds	r7, #40	; 0x28
 8019a84:	46bd      	mov	sp, r7
 8019a86:	bd80      	pop	{r7, pc}
 8019a88:	20001030 	.word	0x20001030

08019a8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019a8c:	b480      	push	{r7}
 8019a8e:	b085      	sub	sp, #20
 8019a90:	af00      	add	r7, sp, #0
 8019a92:	60f8      	str	r0, [r7, #12]
 8019a94:	60b9      	str	r1, [r7, #8]
 8019a96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019a98:	68fb      	ldr	r3, [r7, #12]
 8019a9a:	3b04      	subs	r3, #4
 8019a9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019aa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019aa6:	68fb      	ldr	r3, [r7, #12]
 8019aa8:	3b04      	subs	r3, #4
 8019aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019aac:	68bb      	ldr	r3, [r7, #8]
 8019aae:	f023 0201 	bic.w	r2, r3, #1
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019ab6:	68fb      	ldr	r3, [r7, #12]
 8019ab8:	3b04      	subs	r3, #4
 8019aba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019abc:	4a0c      	ldr	r2, [pc, #48]	; (8019af0 <pxPortInitialiseStack+0x64>)
 8019abe:	68fb      	ldr	r3, [r7, #12]
 8019ac0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	3b14      	subs	r3, #20
 8019ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019ac8:	687a      	ldr	r2, [r7, #4]
 8019aca:	68fb      	ldr	r3, [r7, #12]
 8019acc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	3b04      	subs	r3, #4
 8019ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	f06f 0202 	mvn.w	r2, #2
 8019ada:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	3b20      	subs	r3, #32
 8019ae0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8019ae2:	68fb      	ldr	r3, [r7, #12]
}
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	3714      	adds	r7, #20
 8019ae8:	46bd      	mov	sp, r7
 8019aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aee:	4770      	bx	lr
 8019af0:	08019af5 	.word	0x08019af5

08019af4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019af4:	b480      	push	{r7}
 8019af6:	b085      	sub	sp, #20
 8019af8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019afa:	2300      	movs	r3, #0
 8019afc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019afe:	4b12      	ldr	r3, [pc, #72]	; (8019b48 <prvTaskExitError+0x54>)
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b06:	d00a      	beq.n	8019b1e <prvTaskExitError+0x2a>
	__asm volatile
 8019b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b0c:	f383 8811 	msr	BASEPRI, r3
 8019b10:	f3bf 8f6f 	isb	sy
 8019b14:	f3bf 8f4f 	dsb	sy
 8019b18:	60fb      	str	r3, [r7, #12]
}
 8019b1a:	bf00      	nop
 8019b1c:	e7fe      	b.n	8019b1c <prvTaskExitError+0x28>
	__asm volatile
 8019b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b22:	f383 8811 	msr	BASEPRI, r3
 8019b26:	f3bf 8f6f 	isb	sy
 8019b2a:	f3bf 8f4f 	dsb	sy
 8019b2e:	60bb      	str	r3, [r7, #8]
}
 8019b30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019b32:	bf00      	nop
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d0fc      	beq.n	8019b34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019b3a:	bf00      	nop
 8019b3c:	bf00      	nop
 8019b3e:	3714      	adds	r7, #20
 8019b40:	46bd      	mov	sp, r7
 8019b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b46:	4770      	bx	lr
 8019b48:	20000160 	.word	0x20000160
 8019b4c:	00000000 	.word	0x00000000

08019b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019b50:	4b07      	ldr	r3, [pc, #28]	; (8019b70 <pxCurrentTCBConst2>)
 8019b52:	6819      	ldr	r1, [r3, #0]
 8019b54:	6808      	ldr	r0, [r1, #0]
 8019b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b5a:	f380 8809 	msr	PSP, r0
 8019b5e:	f3bf 8f6f 	isb	sy
 8019b62:	f04f 0000 	mov.w	r0, #0
 8019b66:	f380 8811 	msr	BASEPRI, r0
 8019b6a:	4770      	bx	lr
 8019b6c:	f3af 8000 	nop.w

08019b70 <pxCurrentTCBConst2>:
 8019b70:	20000b00 	.word	0x20000b00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019b74:	bf00      	nop
 8019b76:	bf00      	nop

08019b78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019b78:	4808      	ldr	r0, [pc, #32]	; (8019b9c <prvPortStartFirstTask+0x24>)
 8019b7a:	6800      	ldr	r0, [r0, #0]
 8019b7c:	6800      	ldr	r0, [r0, #0]
 8019b7e:	f380 8808 	msr	MSP, r0
 8019b82:	f04f 0000 	mov.w	r0, #0
 8019b86:	f380 8814 	msr	CONTROL, r0
 8019b8a:	b662      	cpsie	i
 8019b8c:	b661      	cpsie	f
 8019b8e:	f3bf 8f4f 	dsb	sy
 8019b92:	f3bf 8f6f 	isb	sy
 8019b96:	df00      	svc	0
 8019b98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8019b9a:	bf00      	nop
 8019b9c:	e000ed08 	.word	0xe000ed08

08019ba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019ba0:	b580      	push	{r7, lr}
 8019ba2:	b086      	sub	sp, #24
 8019ba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019ba6:	4b46      	ldr	r3, [pc, #280]	; (8019cc0 <xPortStartScheduler+0x120>)
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	4a46      	ldr	r2, [pc, #280]	; (8019cc4 <xPortStartScheduler+0x124>)
 8019bac:	4293      	cmp	r3, r2
 8019bae:	d10a      	bne.n	8019bc6 <xPortStartScheduler+0x26>
	__asm volatile
 8019bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bb4:	f383 8811 	msr	BASEPRI, r3
 8019bb8:	f3bf 8f6f 	isb	sy
 8019bbc:	f3bf 8f4f 	dsb	sy
 8019bc0:	613b      	str	r3, [r7, #16]
}
 8019bc2:	bf00      	nop
 8019bc4:	e7fe      	b.n	8019bc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019bc6:	4b3e      	ldr	r3, [pc, #248]	; (8019cc0 <xPortStartScheduler+0x120>)
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	4a3f      	ldr	r2, [pc, #252]	; (8019cc8 <xPortStartScheduler+0x128>)
 8019bcc:	4293      	cmp	r3, r2
 8019bce:	d10a      	bne.n	8019be6 <xPortStartScheduler+0x46>
	__asm volatile
 8019bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bd4:	f383 8811 	msr	BASEPRI, r3
 8019bd8:	f3bf 8f6f 	isb	sy
 8019bdc:	f3bf 8f4f 	dsb	sy
 8019be0:	60fb      	str	r3, [r7, #12]
}
 8019be2:	bf00      	nop
 8019be4:	e7fe      	b.n	8019be4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019be6:	4b39      	ldr	r3, [pc, #228]	; (8019ccc <xPortStartScheduler+0x12c>)
 8019be8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8019bea:	697b      	ldr	r3, [r7, #20]
 8019bec:	781b      	ldrb	r3, [r3, #0]
 8019bee:	b2db      	uxtb	r3, r3
 8019bf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019bf2:	697b      	ldr	r3, [r7, #20]
 8019bf4:	22ff      	movs	r2, #255	; 0xff
 8019bf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019bf8:	697b      	ldr	r3, [r7, #20]
 8019bfa:	781b      	ldrb	r3, [r3, #0]
 8019bfc:	b2db      	uxtb	r3, r3
 8019bfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019c00:	78fb      	ldrb	r3, [r7, #3]
 8019c02:	b2db      	uxtb	r3, r3
 8019c04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019c08:	b2da      	uxtb	r2, r3
 8019c0a:	4b31      	ldr	r3, [pc, #196]	; (8019cd0 <xPortStartScheduler+0x130>)
 8019c0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8019c0e:	4b31      	ldr	r3, [pc, #196]	; (8019cd4 <xPortStartScheduler+0x134>)
 8019c10:	2207      	movs	r2, #7
 8019c12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019c14:	e009      	b.n	8019c2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8019c16:	4b2f      	ldr	r3, [pc, #188]	; (8019cd4 <xPortStartScheduler+0x134>)
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	3b01      	subs	r3, #1
 8019c1c:	4a2d      	ldr	r2, [pc, #180]	; (8019cd4 <xPortStartScheduler+0x134>)
 8019c1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019c20:	78fb      	ldrb	r3, [r7, #3]
 8019c22:	b2db      	uxtb	r3, r3
 8019c24:	005b      	lsls	r3, r3, #1
 8019c26:	b2db      	uxtb	r3, r3
 8019c28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019c2a:	78fb      	ldrb	r3, [r7, #3]
 8019c2c:	b2db      	uxtb	r3, r3
 8019c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019c32:	2b80      	cmp	r3, #128	; 0x80
 8019c34:	d0ef      	beq.n	8019c16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019c36:	4b27      	ldr	r3, [pc, #156]	; (8019cd4 <xPortStartScheduler+0x134>)
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	f1c3 0307 	rsb	r3, r3, #7
 8019c3e:	2b04      	cmp	r3, #4
 8019c40:	d00a      	beq.n	8019c58 <xPortStartScheduler+0xb8>
	__asm volatile
 8019c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c46:	f383 8811 	msr	BASEPRI, r3
 8019c4a:	f3bf 8f6f 	isb	sy
 8019c4e:	f3bf 8f4f 	dsb	sy
 8019c52:	60bb      	str	r3, [r7, #8]
}
 8019c54:	bf00      	nop
 8019c56:	e7fe      	b.n	8019c56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019c58:	4b1e      	ldr	r3, [pc, #120]	; (8019cd4 <xPortStartScheduler+0x134>)
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	021b      	lsls	r3, r3, #8
 8019c5e:	4a1d      	ldr	r2, [pc, #116]	; (8019cd4 <xPortStartScheduler+0x134>)
 8019c60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019c62:	4b1c      	ldr	r3, [pc, #112]	; (8019cd4 <xPortStartScheduler+0x134>)
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8019c6a:	4a1a      	ldr	r2, [pc, #104]	; (8019cd4 <xPortStartScheduler+0x134>)
 8019c6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	b2da      	uxtb	r2, r3
 8019c72:	697b      	ldr	r3, [r7, #20]
 8019c74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019c76:	4b18      	ldr	r3, [pc, #96]	; (8019cd8 <xPortStartScheduler+0x138>)
 8019c78:	681b      	ldr	r3, [r3, #0]
 8019c7a:	4a17      	ldr	r2, [pc, #92]	; (8019cd8 <xPortStartScheduler+0x138>)
 8019c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019c80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019c82:	4b15      	ldr	r3, [pc, #84]	; (8019cd8 <xPortStartScheduler+0x138>)
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	4a14      	ldr	r2, [pc, #80]	; (8019cd8 <xPortStartScheduler+0x138>)
 8019c88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8019c8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8019c8e:	f000 f8dd 	bl	8019e4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019c92:	4b12      	ldr	r3, [pc, #72]	; (8019cdc <xPortStartScheduler+0x13c>)
 8019c94:	2200      	movs	r2, #0
 8019c96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8019c98:	f000 f8fc 	bl	8019e94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8019c9c:	4b10      	ldr	r3, [pc, #64]	; (8019ce0 <xPortStartScheduler+0x140>)
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	4a0f      	ldr	r2, [pc, #60]	; (8019ce0 <xPortStartScheduler+0x140>)
 8019ca2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019ca6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019ca8:	f7ff ff66 	bl	8019b78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8019cac:	f7fe fe70 	bl	8018990 <vTaskSwitchContext>
	prvTaskExitError();
 8019cb0:	f7ff ff20 	bl	8019af4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019cb4:	2300      	movs	r3, #0
}
 8019cb6:	4618      	mov	r0, r3
 8019cb8:	3718      	adds	r7, #24
 8019cba:	46bd      	mov	sp, r7
 8019cbc:	bd80      	pop	{r7, pc}
 8019cbe:	bf00      	nop
 8019cc0:	e000ed00 	.word	0xe000ed00
 8019cc4:	410fc271 	.word	0x410fc271
 8019cc8:	410fc270 	.word	0x410fc270
 8019ccc:	e000e400 	.word	0xe000e400
 8019cd0:	2000112c 	.word	0x2000112c
 8019cd4:	20001130 	.word	0x20001130
 8019cd8:	e000ed20 	.word	0xe000ed20
 8019cdc:	20000160 	.word	0x20000160
 8019ce0:	e000ef34 	.word	0xe000ef34

08019ce4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019ce4:	b480      	push	{r7}
 8019ce6:	b083      	sub	sp, #12
 8019ce8:	af00      	add	r7, sp, #0
	__asm volatile
 8019cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cee:	f383 8811 	msr	BASEPRI, r3
 8019cf2:	f3bf 8f6f 	isb	sy
 8019cf6:	f3bf 8f4f 	dsb	sy
 8019cfa:	607b      	str	r3, [r7, #4]
}
 8019cfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8019cfe:	4b0f      	ldr	r3, [pc, #60]	; (8019d3c <vPortEnterCritical+0x58>)
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	3301      	adds	r3, #1
 8019d04:	4a0d      	ldr	r2, [pc, #52]	; (8019d3c <vPortEnterCritical+0x58>)
 8019d06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8019d08:	4b0c      	ldr	r3, [pc, #48]	; (8019d3c <vPortEnterCritical+0x58>)
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	2b01      	cmp	r3, #1
 8019d0e:	d10f      	bne.n	8019d30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019d10:	4b0b      	ldr	r3, [pc, #44]	; (8019d40 <vPortEnterCritical+0x5c>)
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	b2db      	uxtb	r3, r3
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d00a      	beq.n	8019d30 <vPortEnterCritical+0x4c>
	__asm volatile
 8019d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d1e:	f383 8811 	msr	BASEPRI, r3
 8019d22:	f3bf 8f6f 	isb	sy
 8019d26:	f3bf 8f4f 	dsb	sy
 8019d2a:	603b      	str	r3, [r7, #0]
}
 8019d2c:	bf00      	nop
 8019d2e:	e7fe      	b.n	8019d2e <vPortEnterCritical+0x4a>
	}
}
 8019d30:	bf00      	nop
 8019d32:	370c      	adds	r7, #12
 8019d34:	46bd      	mov	sp, r7
 8019d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d3a:	4770      	bx	lr
 8019d3c:	20000160 	.word	0x20000160
 8019d40:	e000ed04 	.word	0xe000ed04

08019d44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019d44:	b480      	push	{r7}
 8019d46:	b083      	sub	sp, #12
 8019d48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8019d4a:	4b12      	ldr	r3, [pc, #72]	; (8019d94 <vPortExitCritical+0x50>)
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d10a      	bne.n	8019d68 <vPortExitCritical+0x24>
	__asm volatile
 8019d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d56:	f383 8811 	msr	BASEPRI, r3
 8019d5a:	f3bf 8f6f 	isb	sy
 8019d5e:	f3bf 8f4f 	dsb	sy
 8019d62:	607b      	str	r3, [r7, #4]
}
 8019d64:	bf00      	nop
 8019d66:	e7fe      	b.n	8019d66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019d68:	4b0a      	ldr	r3, [pc, #40]	; (8019d94 <vPortExitCritical+0x50>)
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	3b01      	subs	r3, #1
 8019d6e:	4a09      	ldr	r2, [pc, #36]	; (8019d94 <vPortExitCritical+0x50>)
 8019d70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019d72:	4b08      	ldr	r3, [pc, #32]	; (8019d94 <vPortExitCritical+0x50>)
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d105      	bne.n	8019d86 <vPortExitCritical+0x42>
 8019d7a:	2300      	movs	r3, #0
 8019d7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019d7e:	683b      	ldr	r3, [r7, #0]
 8019d80:	f383 8811 	msr	BASEPRI, r3
}
 8019d84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019d86:	bf00      	nop
 8019d88:	370c      	adds	r7, #12
 8019d8a:	46bd      	mov	sp, r7
 8019d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d90:	4770      	bx	lr
 8019d92:	bf00      	nop
 8019d94:	20000160 	.word	0x20000160
	...

08019da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019da0:	f3ef 8009 	mrs	r0, PSP
 8019da4:	f3bf 8f6f 	isb	sy
 8019da8:	4b15      	ldr	r3, [pc, #84]	; (8019e00 <pxCurrentTCBConst>)
 8019daa:	681a      	ldr	r2, [r3, #0]
 8019dac:	f01e 0f10 	tst.w	lr, #16
 8019db0:	bf08      	it	eq
 8019db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dba:	6010      	str	r0, [r2, #0]
 8019dbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019dc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019dc4:	f380 8811 	msr	BASEPRI, r0
 8019dc8:	f3bf 8f4f 	dsb	sy
 8019dcc:	f3bf 8f6f 	isb	sy
 8019dd0:	f7fe fdde 	bl	8018990 <vTaskSwitchContext>
 8019dd4:	f04f 0000 	mov.w	r0, #0
 8019dd8:	f380 8811 	msr	BASEPRI, r0
 8019ddc:	bc09      	pop	{r0, r3}
 8019dde:	6819      	ldr	r1, [r3, #0]
 8019de0:	6808      	ldr	r0, [r1, #0]
 8019de2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019de6:	f01e 0f10 	tst.w	lr, #16
 8019dea:	bf08      	it	eq
 8019dec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019df0:	f380 8809 	msr	PSP, r0
 8019df4:	f3bf 8f6f 	isb	sy
 8019df8:	4770      	bx	lr
 8019dfa:	bf00      	nop
 8019dfc:	f3af 8000 	nop.w

08019e00 <pxCurrentTCBConst>:
 8019e00:	20000b00 	.word	0x20000b00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019e04:	bf00      	nop
 8019e06:	bf00      	nop

08019e08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019e08:	b580      	push	{r7, lr}
 8019e0a:	b082      	sub	sp, #8
 8019e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8019e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e12:	f383 8811 	msr	BASEPRI, r3
 8019e16:	f3bf 8f6f 	isb	sy
 8019e1a:	f3bf 8f4f 	dsb	sy
 8019e1e:	607b      	str	r3, [r7, #4]
}
 8019e20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019e22:	f7fe fcfb 	bl	801881c <xTaskIncrementTick>
 8019e26:	4603      	mov	r3, r0
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d003      	beq.n	8019e34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019e2c:	4b06      	ldr	r3, [pc, #24]	; (8019e48 <xPortSysTickHandler+0x40>)
 8019e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019e32:	601a      	str	r2, [r3, #0]
 8019e34:	2300      	movs	r3, #0
 8019e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019e38:	683b      	ldr	r3, [r7, #0]
 8019e3a:	f383 8811 	msr	BASEPRI, r3
}
 8019e3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019e40:	bf00      	nop
 8019e42:	3708      	adds	r7, #8
 8019e44:	46bd      	mov	sp, r7
 8019e46:	bd80      	pop	{r7, pc}
 8019e48:	e000ed04 	.word	0xe000ed04

08019e4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8019e4c:	b480      	push	{r7}
 8019e4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019e50:	4b0b      	ldr	r3, [pc, #44]	; (8019e80 <vPortSetupTimerInterrupt+0x34>)
 8019e52:	2200      	movs	r2, #0
 8019e54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019e56:	4b0b      	ldr	r3, [pc, #44]	; (8019e84 <vPortSetupTimerInterrupt+0x38>)
 8019e58:	2200      	movs	r2, #0
 8019e5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019e5c:	4b0a      	ldr	r3, [pc, #40]	; (8019e88 <vPortSetupTimerInterrupt+0x3c>)
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	4a0a      	ldr	r2, [pc, #40]	; (8019e8c <vPortSetupTimerInterrupt+0x40>)
 8019e62:	fba2 2303 	umull	r2, r3, r2, r3
 8019e66:	099b      	lsrs	r3, r3, #6
 8019e68:	4a09      	ldr	r2, [pc, #36]	; (8019e90 <vPortSetupTimerInterrupt+0x44>)
 8019e6a:	3b01      	subs	r3, #1
 8019e6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019e6e:	4b04      	ldr	r3, [pc, #16]	; (8019e80 <vPortSetupTimerInterrupt+0x34>)
 8019e70:	2207      	movs	r2, #7
 8019e72:	601a      	str	r2, [r3, #0]
}
 8019e74:	bf00      	nop
 8019e76:	46bd      	mov	sp, r7
 8019e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e7c:	4770      	bx	lr
 8019e7e:	bf00      	nop
 8019e80:	e000e010 	.word	0xe000e010
 8019e84:	e000e018 	.word	0xe000e018
 8019e88:	20000014 	.word	0x20000014
 8019e8c:	10624dd3 	.word	0x10624dd3
 8019e90:	e000e014 	.word	0xe000e014

08019e94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019e94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019ea4 <vPortEnableVFP+0x10>
 8019e98:	6801      	ldr	r1, [r0, #0]
 8019e9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8019e9e:	6001      	str	r1, [r0, #0]
 8019ea0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019ea2:	bf00      	nop
 8019ea4:	e000ed88 	.word	0xe000ed88

08019ea8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019ea8:	b480      	push	{r7}
 8019eaa:	b085      	sub	sp, #20
 8019eac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019eae:	f3ef 8305 	mrs	r3, IPSR
 8019eb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019eb4:	68fb      	ldr	r3, [r7, #12]
 8019eb6:	2b0f      	cmp	r3, #15
 8019eb8:	d914      	bls.n	8019ee4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8019eba:	4a17      	ldr	r2, [pc, #92]	; (8019f18 <vPortValidateInterruptPriority+0x70>)
 8019ebc:	68fb      	ldr	r3, [r7, #12]
 8019ebe:	4413      	add	r3, r2
 8019ec0:	781b      	ldrb	r3, [r3, #0]
 8019ec2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019ec4:	4b15      	ldr	r3, [pc, #84]	; (8019f1c <vPortValidateInterruptPriority+0x74>)
 8019ec6:	781b      	ldrb	r3, [r3, #0]
 8019ec8:	7afa      	ldrb	r2, [r7, #11]
 8019eca:	429a      	cmp	r2, r3
 8019ecc:	d20a      	bcs.n	8019ee4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8019ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ed2:	f383 8811 	msr	BASEPRI, r3
 8019ed6:	f3bf 8f6f 	isb	sy
 8019eda:	f3bf 8f4f 	dsb	sy
 8019ede:	607b      	str	r3, [r7, #4]
}
 8019ee0:	bf00      	nop
 8019ee2:	e7fe      	b.n	8019ee2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019ee4:	4b0e      	ldr	r3, [pc, #56]	; (8019f20 <vPortValidateInterruptPriority+0x78>)
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8019eec:	4b0d      	ldr	r3, [pc, #52]	; (8019f24 <vPortValidateInterruptPriority+0x7c>)
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	429a      	cmp	r2, r3
 8019ef2:	d90a      	bls.n	8019f0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ef8:	f383 8811 	msr	BASEPRI, r3
 8019efc:	f3bf 8f6f 	isb	sy
 8019f00:	f3bf 8f4f 	dsb	sy
 8019f04:	603b      	str	r3, [r7, #0]
}
 8019f06:	bf00      	nop
 8019f08:	e7fe      	b.n	8019f08 <vPortValidateInterruptPriority+0x60>
	}
 8019f0a:	bf00      	nop
 8019f0c:	3714      	adds	r7, #20
 8019f0e:	46bd      	mov	sp, r7
 8019f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f14:	4770      	bx	lr
 8019f16:	bf00      	nop
 8019f18:	e000e3f0 	.word	0xe000e3f0
 8019f1c:	2000112c 	.word	0x2000112c
 8019f20:	e000ed0c 	.word	0xe000ed0c
 8019f24:	20001130 	.word	0x20001130

08019f28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019f28:	b580      	push	{r7, lr}
 8019f2a:	b08a      	sub	sp, #40	; 0x28
 8019f2c:	af00      	add	r7, sp, #0
 8019f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019f30:	2300      	movs	r3, #0
 8019f32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019f34:	f7fe fba4 	bl	8018680 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019f38:	4b5b      	ldr	r3, [pc, #364]	; (801a0a8 <pvPortMalloc+0x180>)
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d101      	bne.n	8019f44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019f40:	f000 f920 	bl	801a184 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019f44:	4b59      	ldr	r3, [pc, #356]	; (801a0ac <pvPortMalloc+0x184>)
 8019f46:	681a      	ldr	r2, [r3, #0]
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	4013      	ands	r3, r2
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	f040 8093 	bne.w	801a078 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d01d      	beq.n	8019f94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019f58:	2208      	movs	r2, #8
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	4413      	add	r3, r2
 8019f5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	f003 0307 	and.w	r3, r3, #7
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d014      	beq.n	8019f94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	f023 0307 	bic.w	r3, r3, #7
 8019f70:	3308      	adds	r3, #8
 8019f72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	f003 0307 	and.w	r3, r3, #7
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d00a      	beq.n	8019f94 <pvPortMalloc+0x6c>
	__asm volatile
 8019f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f82:	f383 8811 	msr	BASEPRI, r3
 8019f86:	f3bf 8f6f 	isb	sy
 8019f8a:	f3bf 8f4f 	dsb	sy
 8019f8e:	617b      	str	r3, [r7, #20]
}
 8019f90:	bf00      	nop
 8019f92:	e7fe      	b.n	8019f92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d06e      	beq.n	801a078 <pvPortMalloc+0x150>
 8019f9a:	4b45      	ldr	r3, [pc, #276]	; (801a0b0 <pvPortMalloc+0x188>)
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	687a      	ldr	r2, [r7, #4]
 8019fa0:	429a      	cmp	r2, r3
 8019fa2:	d869      	bhi.n	801a078 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019fa4:	4b43      	ldr	r3, [pc, #268]	; (801a0b4 <pvPortMalloc+0x18c>)
 8019fa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019fa8:	4b42      	ldr	r3, [pc, #264]	; (801a0b4 <pvPortMalloc+0x18c>)
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019fae:	e004      	b.n	8019fba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fbc:	685b      	ldr	r3, [r3, #4]
 8019fbe:	687a      	ldr	r2, [r7, #4]
 8019fc0:	429a      	cmp	r2, r3
 8019fc2:	d903      	bls.n	8019fcc <pvPortMalloc+0xa4>
 8019fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fc6:	681b      	ldr	r3, [r3, #0]
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d1f1      	bne.n	8019fb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019fcc:	4b36      	ldr	r3, [pc, #216]	; (801a0a8 <pvPortMalloc+0x180>)
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019fd2:	429a      	cmp	r2, r3
 8019fd4:	d050      	beq.n	801a078 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019fd6:	6a3b      	ldr	r3, [r7, #32]
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	2208      	movs	r2, #8
 8019fdc:	4413      	add	r3, r2
 8019fde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fe2:	681a      	ldr	r2, [r3, #0]
 8019fe4:	6a3b      	ldr	r3, [r7, #32]
 8019fe6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fea:	685a      	ldr	r2, [r3, #4]
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	1ad2      	subs	r2, r2, r3
 8019ff0:	2308      	movs	r3, #8
 8019ff2:	005b      	lsls	r3, r3, #1
 8019ff4:	429a      	cmp	r2, r3
 8019ff6:	d91f      	bls.n	801a038 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	4413      	add	r3, r2
 8019ffe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a000:	69bb      	ldr	r3, [r7, #24]
 801a002:	f003 0307 	and.w	r3, r3, #7
 801a006:	2b00      	cmp	r3, #0
 801a008:	d00a      	beq.n	801a020 <pvPortMalloc+0xf8>
	__asm volatile
 801a00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a00e:	f383 8811 	msr	BASEPRI, r3
 801a012:	f3bf 8f6f 	isb	sy
 801a016:	f3bf 8f4f 	dsb	sy
 801a01a:	613b      	str	r3, [r7, #16]
}
 801a01c:	bf00      	nop
 801a01e:	e7fe      	b.n	801a01e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a022:	685a      	ldr	r2, [r3, #4]
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	1ad2      	subs	r2, r2, r3
 801a028:	69bb      	ldr	r3, [r7, #24]
 801a02a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a02e:	687a      	ldr	r2, [r7, #4]
 801a030:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a032:	69b8      	ldr	r0, [r7, #24]
 801a034:	f000 f908 	bl	801a248 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a038:	4b1d      	ldr	r3, [pc, #116]	; (801a0b0 <pvPortMalloc+0x188>)
 801a03a:	681a      	ldr	r2, [r3, #0]
 801a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a03e:	685b      	ldr	r3, [r3, #4]
 801a040:	1ad3      	subs	r3, r2, r3
 801a042:	4a1b      	ldr	r2, [pc, #108]	; (801a0b0 <pvPortMalloc+0x188>)
 801a044:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a046:	4b1a      	ldr	r3, [pc, #104]	; (801a0b0 <pvPortMalloc+0x188>)
 801a048:	681a      	ldr	r2, [r3, #0]
 801a04a:	4b1b      	ldr	r3, [pc, #108]	; (801a0b8 <pvPortMalloc+0x190>)
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	429a      	cmp	r2, r3
 801a050:	d203      	bcs.n	801a05a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a052:	4b17      	ldr	r3, [pc, #92]	; (801a0b0 <pvPortMalloc+0x188>)
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	4a18      	ldr	r2, [pc, #96]	; (801a0b8 <pvPortMalloc+0x190>)
 801a058:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a05c:	685a      	ldr	r2, [r3, #4]
 801a05e:	4b13      	ldr	r3, [pc, #76]	; (801a0ac <pvPortMalloc+0x184>)
 801a060:	681b      	ldr	r3, [r3, #0]
 801a062:	431a      	orrs	r2, r3
 801a064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a066:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a06a:	2200      	movs	r2, #0
 801a06c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801a06e:	4b13      	ldr	r3, [pc, #76]	; (801a0bc <pvPortMalloc+0x194>)
 801a070:	681b      	ldr	r3, [r3, #0]
 801a072:	3301      	adds	r3, #1
 801a074:	4a11      	ldr	r2, [pc, #68]	; (801a0bc <pvPortMalloc+0x194>)
 801a076:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a078:	f7fe fb10 	bl	801869c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a07c:	69fb      	ldr	r3, [r7, #28]
 801a07e:	f003 0307 	and.w	r3, r3, #7
 801a082:	2b00      	cmp	r3, #0
 801a084:	d00a      	beq.n	801a09c <pvPortMalloc+0x174>
	__asm volatile
 801a086:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a08a:	f383 8811 	msr	BASEPRI, r3
 801a08e:	f3bf 8f6f 	isb	sy
 801a092:	f3bf 8f4f 	dsb	sy
 801a096:	60fb      	str	r3, [r7, #12]
}
 801a098:	bf00      	nop
 801a09a:	e7fe      	b.n	801a09a <pvPortMalloc+0x172>
	return pvReturn;
 801a09c:	69fb      	ldr	r3, [r7, #28]
}
 801a09e:	4618      	mov	r0, r3
 801a0a0:	3728      	adds	r7, #40	; 0x28
 801a0a2:	46bd      	mov	sp, r7
 801a0a4:	bd80      	pop	{r7, pc}
 801a0a6:	bf00      	nop
 801a0a8:	20004d3c 	.word	0x20004d3c
 801a0ac:	20004d50 	.word	0x20004d50
 801a0b0:	20004d40 	.word	0x20004d40
 801a0b4:	20004d34 	.word	0x20004d34
 801a0b8:	20004d44 	.word	0x20004d44
 801a0bc:	20004d48 	.word	0x20004d48

0801a0c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a0c0:	b580      	push	{r7, lr}
 801a0c2:	b086      	sub	sp, #24
 801a0c4:	af00      	add	r7, sp, #0
 801a0c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d04d      	beq.n	801a16e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a0d2:	2308      	movs	r3, #8
 801a0d4:	425b      	negs	r3, r3
 801a0d6:	697a      	ldr	r2, [r7, #20]
 801a0d8:	4413      	add	r3, r2
 801a0da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a0dc:	697b      	ldr	r3, [r7, #20]
 801a0de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a0e0:	693b      	ldr	r3, [r7, #16]
 801a0e2:	685a      	ldr	r2, [r3, #4]
 801a0e4:	4b24      	ldr	r3, [pc, #144]	; (801a178 <vPortFree+0xb8>)
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	4013      	ands	r3, r2
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d10a      	bne.n	801a104 <vPortFree+0x44>
	__asm volatile
 801a0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0f2:	f383 8811 	msr	BASEPRI, r3
 801a0f6:	f3bf 8f6f 	isb	sy
 801a0fa:	f3bf 8f4f 	dsb	sy
 801a0fe:	60fb      	str	r3, [r7, #12]
}
 801a100:	bf00      	nop
 801a102:	e7fe      	b.n	801a102 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a104:	693b      	ldr	r3, [r7, #16]
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d00a      	beq.n	801a122 <vPortFree+0x62>
	__asm volatile
 801a10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a110:	f383 8811 	msr	BASEPRI, r3
 801a114:	f3bf 8f6f 	isb	sy
 801a118:	f3bf 8f4f 	dsb	sy
 801a11c:	60bb      	str	r3, [r7, #8]
}
 801a11e:	bf00      	nop
 801a120:	e7fe      	b.n	801a120 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a122:	693b      	ldr	r3, [r7, #16]
 801a124:	685a      	ldr	r2, [r3, #4]
 801a126:	4b14      	ldr	r3, [pc, #80]	; (801a178 <vPortFree+0xb8>)
 801a128:	681b      	ldr	r3, [r3, #0]
 801a12a:	4013      	ands	r3, r2
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d01e      	beq.n	801a16e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a130:	693b      	ldr	r3, [r7, #16]
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d11a      	bne.n	801a16e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a138:	693b      	ldr	r3, [r7, #16]
 801a13a:	685a      	ldr	r2, [r3, #4]
 801a13c:	4b0e      	ldr	r3, [pc, #56]	; (801a178 <vPortFree+0xb8>)
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	43db      	mvns	r3, r3
 801a142:	401a      	ands	r2, r3
 801a144:	693b      	ldr	r3, [r7, #16]
 801a146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a148:	f7fe fa9a 	bl	8018680 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a14c:	693b      	ldr	r3, [r7, #16]
 801a14e:	685a      	ldr	r2, [r3, #4]
 801a150:	4b0a      	ldr	r3, [pc, #40]	; (801a17c <vPortFree+0xbc>)
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	4413      	add	r3, r2
 801a156:	4a09      	ldr	r2, [pc, #36]	; (801a17c <vPortFree+0xbc>)
 801a158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a15a:	6938      	ldr	r0, [r7, #16]
 801a15c:	f000 f874 	bl	801a248 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a160:	4b07      	ldr	r3, [pc, #28]	; (801a180 <vPortFree+0xc0>)
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	3301      	adds	r3, #1
 801a166:	4a06      	ldr	r2, [pc, #24]	; (801a180 <vPortFree+0xc0>)
 801a168:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801a16a:	f7fe fa97 	bl	801869c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a16e:	bf00      	nop
 801a170:	3718      	adds	r7, #24
 801a172:	46bd      	mov	sp, r7
 801a174:	bd80      	pop	{r7, pc}
 801a176:	bf00      	nop
 801a178:	20004d50 	.word	0x20004d50
 801a17c:	20004d40 	.word	0x20004d40
 801a180:	20004d4c 	.word	0x20004d4c

0801a184 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a184:	b480      	push	{r7}
 801a186:	b085      	sub	sp, #20
 801a188:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a18a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801a18e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a190:	4b27      	ldr	r3, [pc, #156]	; (801a230 <prvHeapInit+0xac>)
 801a192:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	f003 0307 	and.w	r3, r3, #7
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d00c      	beq.n	801a1b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a19e:	68fb      	ldr	r3, [r7, #12]
 801a1a0:	3307      	adds	r3, #7
 801a1a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a1a4:	68fb      	ldr	r3, [r7, #12]
 801a1a6:	f023 0307 	bic.w	r3, r3, #7
 801a1aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a1ac:	68ba      	ldr	r2, [r7, #8]
 801a1ae:	68fb      	ldr	r3, [r7, #12]
 801a1b0:	1ad3      	subs	r3, r2, r3
 801a1b2:	4a1f      	ldr	r2, [pc, #124]	; (801a230 <prvHeapInit+0xac>)
 801a1b4:	4413      	add	r3, r2
 801a1b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a1bc:	4a1d      	ldr	r2, [pc, #116]	; (801a234 <prvHeapInit+0xb0>)
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a1c2:	4b1c      	ldr	r3, [pc, #112]	; (801a234 <prvHeapInit+0xb0>)
 801a1c4:	2200      	movs	r2, #0
 801a1c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	68ba      	ldr	r2, [r7, #8]
 801a1cc:	4413      	add	r3, r2
 801a1ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a1d0:	2208      	movs	r2, #8
 801a1d2:	68fb      	ldr	r3, [r7, #12]
 801a1d4:	1a9b      	subs	r3, r3, r2
 801a1d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a1d8:	68fb      	ldr	r3, [r7, #12]
 801a1da:	f023 0307 	bic.w	r3, r3, #7
 801a1de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a1e0:	68fb      	ldr	r3, [r7, #12]
 801a1e2:	4a15      	ldr	r2, [pc, #84]	; (801a238 <prvHeapInit+0xb4>)
 801a1e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801a1e6:	4b14      	ldr	r3, [pc, #80]	; (801a238 <prvHeapInit+0xb4>)
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	2200      	movs	r2, #0
 801a1ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a1ee:	4b12      	ldr	r3, [pc, #72]	; (801a238 <prvHeapInit+0xb4>)
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	2200      	movs	r2, #0
 801a1f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a1fa:	683b      	ldr	r3, [r7, #0]
 801a1fc:	68fa      	ldr	r2, [r7, #12]
 801a1fe:	1ad2      	subs	r2, r2, r3
 801a200:	683b      	ldr	r3, [r7, #0]
 801a202:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a204:	4b0c      	ldr	r3, [pc, #48]	; (801a238 <prvHeapInit+0xb4>)
 801a206:	681a      	ldr	r2, [r3, #0]
 801a208:	683b      	ldr	r3, [r7, #0]
 801a20a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a20c:	683b      	ldr	r3, [r7, #0]
 801a20e:	685b      	ldr	r3, [r3, #4]
 801a210:	4a0a      	ldr	r2, [pc, #40]	; (801a23c <prvHeapInit+0xb8>)
 801a212:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a214:	683b      	ldr	r3, [r7, #0]
 801a216:	685b      	ldr	r3, [r3, #4]
 801a218:	4a09      	ldr	r2, [pc, #36]	; (801a240 <prvHeapInit+0xbc>)
 801a21a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a21c:	4b09      	ldr	r3, [pc, #36]	; (801a244 <prvHeapInit+0xc0>)
 801a21e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a222:	601a      	str	r2, [r3, #0]
}
 801a224:	bf00      	nop
 801a226:	3714      	adds	r7, #20
 801a228:	46bd      	mov	sp, r7
 801a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a22e:	4770      	bx	lr
 801a230:	20001134 	.word	0x20001134
 801a234:	20004d34 	.word	0x20004d34
 801a238:	20004d3c 	.word	0x20004d3c
 801a23c:	20004d44 	.word	0x20004d44
 801a240:	20004d40 	.word	0x20004d40
 801a244:	20004d50 	.word	0x20004d50

0801a248 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a248:	b480      	push	{r7}
 801a24a:	b085      	sub	sp, #20
 801a24c:	af00      	add	r7, sp, #0
 801a24e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a250:	4b28      	ldr	r3, [pc, #160]	; (801a2f4 <prvInsertBlockIntoFreeList+0xac>)
 801a252:	60fb      	str	r3, [r7, #12]
 801a254:	e002      	b.n	801a25c <prvInsertBlockIntoFreeList+0x14>
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	60fb      	str	r3, [r7, #12]
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	687a      	ldr	r2, [r7, #4]
 801a262:	429a      	cmp	r2, r3
 801a264:	d8f7      	bhi.n	801a256 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a266:	68fb      	ldr	r3, [r7, #12]
 801a268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a26a:	68fb      	ldr	r3, [r7, #12]
 801a26c:	685b      	ldr	r3, [r3, #4]
 801a26e:	68ba      	ldr	r2, [r7, #8]
 801a270:	4413      	add	r3, r2
 801a272:	687a      	ldr	r2, [r7, #4]
 801a274:	429a      	cmp	r2, r3
 801a276:	d108      	bne.n	801a28a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a278:	68fb      	ldr	r3, [r7, #12]
 801a27a:	685a      	ldr	r2, [r3, #4]
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	685b      	ldr	r3, [r3, #4]
 801a280:	441a      	add	r2, r3
 801a282:	68fb      	ldr	r3, [r7, #12]
 801a284:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a286:	68fb      	ldr	r3, [r7, #12]
 801a288:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	685b      	ldr	r3, [r3, #4]
 801a292:	68ba      	ldr	r2, [r7, #8]
 801a294:	441a      	add	r2, r3
 801a296:	68fb      	ldr	r3, [r7, #12]
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	429a      	cmp	r2, r3
 801a29c:	d118      	bne.n	801a2d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a29e:	68fb      	ldr	r3, [r7, #12]
 801a2a0:	681a      	ldr	r2, [r3, #0]
 801a2a2:	4b15      	ldr	r3, [pc, #84]	; (801a2f8 <prvInsertBlockIntoFreeList+0xb0>)
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	429a      	cmp	r2, r3
 801a2a8:	d00d      	beq.n	801a2c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	685a      	ldr	r2, [r3, #4]
 801a2ae:	68fb      	ldr	r3, [r7, #12]
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	685b      	ldr	r3, [r3, #4]
 801a2b4:	441a      	add	r2, r3
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a2ba:	68fb      	ldr	r3, [r7, #12]
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	681a      	ldr	r2, [r3, #0]
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	601a      	str	r2, [r3, #0]
 801a2c4:	e008      	b.n	801a2d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a2c6:	4b0c      	ldr	r3, [pc, #48]	; (801a2f8 <prvInsertBlockIntoFreeList+0xb0>)
 801a2c8:	681a      	ldr	r2, [r3, #0]
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	601a      	str	r2, [r3, #0]
 801a2ce:	e003      	b.n	801a2d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a2d0:	68fb      	ldr	r3, [r7, #12]
 801a2d2:	681a      	ldr	r2, [r3, #0]
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a2d8:	68fa      	ldr	r2, [r7, #12]
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	429a      	cmp	r2, r3
 801a2de:	d002      	beq.n	801a2e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	687a      	ldr	r2, [r7, #4]
 801a2e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a2e6:	bf00      	nop
 801a2e8:	3714      	adds	r7, #20
 801a2ea:	46bd      	mov	sp, r7
 801a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2f0:	4770      	bx	lr
 801a2f2:	bf00      	nop
 801a2f4:	20004d34 	.word	0x20004d34
 801a2f8:	20004d3c 	.word	0x20004d3c

0801a2fc <MX_USB_DEVICE_Init>:

/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(void) {
 801a2fc:	b580      	push	{r7, lr}
 801a2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 801a300:	2200      	movs	r2, #0
 801a302:	4912      	ldr	r1, [pc, #72]	; (801a34c <MX_USB_DEVICE_Init+0x50>)
 801a304:	4812      	ldr	r0, [pc, #72]	; (801a350 <MX_USB_DEVICE_Init+0x54>)
 801a306:	f7fa ff93 	bl	8015230 <USBD_Init>
 801a30a:	4603      	mov	r3, r0
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d001      	beq.n	801a314 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 801a310:	f7f3 ffbc 	bl	800e28c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801a314:	490f      	ldr	r1, [pc, #60]	; (801a354 <MX_USB_DEVICE_Init+0x58>)
 801a316:	480e      	ldr	r0, [pc, #56]	; (801a350 <MX_USB_DEVICE_Init+0x54>)
 801a318:	f7fa ffba 	bl	8015290 <USBD_RegisterClass>
 801a31c:	4603      	mov	r3, r0
 801a31e:	2b00      	cmp	r3, #0
 801a320:	d001      	beq.n	801a326 <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 801a322:	f7f3 ffb3 	bl	800e28c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801a326:	490c      	ldr	r1, [pc, #48]	; (801a358 <MX_USB_DEVICE_Init+0x5c>)
 801a328:	4809      	ldr	r0, [pc, #36]	; (801a350 <MX_USB_DEVICE_Init+0x54>)
 801a32a:	f7fa fedb 	bl	80150e4 <USBD_CDC_RegisterInterface>
 801a32e:	4603      	mov	r3, r0
 801a330:	2b00      	cmp	r3, #0
 801a332:	d001      	beq.n	801a338 <MX_USB_DEVICE_Init+0x3c>
    Error_Handler();
 801a334:	f7f3 ffaa 	bl	800e28c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801a338:	4805      	ldr	r0, [pc, #20]	; (801a350 <MX_USB_DEVICE_Init+0x54>)
 801a33a:	f7fa ffd0 	bl	80152de <USBD_Start>
 801a33e:	4603      	mov	r3, r0
 801a340:	2b00      	cmp	r3, #0
 801a342:	d001      	beq.n	801a348 <MX_USB_DEVICE_Init+0x4c>
    Error_Handler();
 801a344:	f7f3 ffa2 	bl	800e28c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a348:	bf00      	nop
 801a34a:	bd80      	pop	{r7, pc}
 801a34c:	20000178 	.word	0x20000178
 801a350:	20007c28 	.word	0x20007c28
 801a354:	2000005c 	.word	0x2000005c
 801a358:	20000164 	.word	0x20000164

0801a35c <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 801a35c:	b580      	push	{r7, lr}
 801a35e:	af00      	add	r7, sp, #0
  TIM_Config();
 801a360:	f000 f91a 	bl	801a598 <TIM_Config>

  if (HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK) {
 801a364:	480b      	ldr	r0, [pc, #44]	; (801a394 <CDC_Init_FS+0x38>)
 801a366:	f7f8 f841 	bl	80123ec <HAL_TIM_Base_Start_IT>
 801a36a:	4603      	mov	r3, r0
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d001      	beq.n	801a374 <CDC_Init_FS+0x18>
    /* Starting Error */
    Error_Handler();
 801a370:	f7f3 ff8c 	bl	800e28c <Error_Handler>
  }
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 512);
 801a374:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a378:	4907      	ldr	r1, [pc, #28]	; (801a398 <CDC_Init_FS+0x3c>)
 801a37a:	4808      	ldr	r0, [pc, #32]	; (801a39c <CDC_Init_FS+0x40>)
 801a37c:	f7fa fec7 	bl	801510e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801a380:	4907      	ldr	r1, [pc, #28]	; (801a3a0 <CDC_Init_FS+0x44>)
 801a382:	4806      	ldr	r0, [pc, #24]	; (801a39c <CDC_Init_FS+0x40>)
 801a384:	f7fa fee1 	bl	801514a <USBD_CDC_SetRxBuffer>

  usb_initialized = true;
 801a388:	4b06      	ldr	r3, [pc, #24]	; (801a3a4 <CDC_Init_FS+0x48>)
 801a38a:	2201      	movs	r2, #1
 801a38c:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 801a38e:	2300      	movs	r3, #0
}
 801a390:	4618      	mov	r0, r3
 801a392:	bd80      	pop	{r7, pc}
 801a394:	2000817c 	.word	0x2000817c
 801a398:	20007f38 	.word	0x20007f38
 801a39c:	20007c28 	.word	0x20007c28
 801a3a0:	20007ef8 	.word	0x20007ef8
 801a3a4:	20004d54 	.word	0x20004d54

0801a3a8 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 801a3a8:	b480      	push	{r7}
 801a3aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801a3ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801a3ae:	4618      	mov	r0, r3
 801a3b0:	46bd      	mov	sp, r7
 801a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3b6:	4770      	bx	lr

0801a3b8 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 801a3b8:	b480      	push	{r7}
 801a3ba:	b085      	sub	sp, #20
 801a3bc:	af00      	add	r7, sp, #0
 801a3be:	4603      	mov	r3, r0
 801a3c0:	6039      	str	r1, [r7, #0]
 801a3c2:	71fb      	strb	r3, [r7, #7]
 801a3c4:	4613      	mov	r3, r2
 801a3c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  UNUSED(length);
  uint32_t speed = 115200;
 801a3c8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 801a3cc:	60fb      	str	r3, [r7, #12]
  switch (cmd) {
 801a3ce:	79fb      	ldrb	r3, [r7, #7]
 801a3d0:	2b23      	cmp	r3, #35	; 0x23
 801a3d2:	d86e      	bhi.n	801a4b2 <CDC_Control_FS+0xfa>
 801a3d4:	a201      	add	r2, pc, #4	; (adr r2, 801a3dc <CDC_Control_FS+0x24>)
 801a3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a3da:	bf00      	nop
 801a3dc:	0801a4b3 	.word	0x0801a4b3
 801a3e0:	0801a4b3 	.word	0x0801a4b3
 801a3e4:	0801a4b3 	.word	0x0801a4b3
 801a3e8:	0801a4b3 	.word	0x0801a4b3
 801a3ec:	0801a4b3 	.word	0x0801a4b3
 801a3f0:	0801a4b3 	.word	0x0801a4b3
 801a3f4:	0801a4b3 	.word	0x0801a4b3
 801a3f8:	0801a4b3 	.word	0x0801a4b3
 801a3fc:	0801a4b3 	.word	0x0801a4b3
 801a400:	0801a4b3 	.word	0x0801a4b3
 801a404:	0801a4b3 	.word	0x0801a4b3
 801a408:	0801a4b3 	.word	0x0801a4b3
 801a40c:	0801a4b3 	.word	0x0801a4b3
 801a410:	0801a4b3 	.word	0x0801a4b3
 801a414:	0801a4b3 	.word	0x0801a4b3
 801a418:	0801a4b3 	.word	0x0801a4b3
 801a41c:	0801a4b3 	.word	0x0801a4b3
 801a420:	0801a4b3 	.word	0x0801a4b3
 801a424:	0801a4b3 	.word	0x0801a4b3
 801a428:	0801a4b3 	.word	0x0801a4b3
 801a42c:	0801a4b3 	.word	0x0801a4b3
 801a430:	0801a4b3 	.word	0x0801a4b3
 801a434:	0801a4b3 	.word	0x0801a4b3
 801a438:	0801a4b3 	.word	0x0801a4b3
 801a43c:	0801a4b3 	.word	0x0801a4b3
 801a440:	0801a4b3 	.word	0x0801a4b3
 801a444:	0801a4b3 	.word	0x0801a4b3
 801a448:	0801a4b3 	.word	0x0801a4b3
 801a44c:	0801a4b3 	.word	0x0801a4b3
 801a450:	0801a4b3 	.word	0x0801a4b3
 801a454:	0801a4b3 	.word	0x0801a4b3
 801a458:	0801a4b3 	.word	0x0801a4b3
 801a45c:	0801a4b3 	.word	0x0801a4b3
 801a460:	0801a46d 	.word	0x0801a46d
 801a464:	0801a4b3 	.word	0x0801a4b3
 801a468:	0801a4b3 	.word	0x0801a4b3
    case CDC_SET_LINE_CODING:

      break;

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(speed);
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	b2da      	uxtb	r2, r3
 801a470:	683b      	ldr	r3, [r7, #0]
 801a472:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(speed >> 8);
 801a474:	68fb      	ldr	r3, [r7, #12]
 801a476:	0a1a      	lsrs	r2, r3, #8
 801a478:	683b      	ldr	r3, [r7, #0]
 801a47a:	3301      	adds	r3, #1
 801a47c:	b2d2      	uxtb	r2, r2
 801a47e:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(speed >> 16);
 801a480:	68fb      	ldr	r3, [r7, #12]
 801a482:	0c1a      	lsrs	r2, r3, #16
 801a484:	683b      	ldr	r3, [r7, #0]
 801a486:	3302      	adds	r3, #2
 801a488:	b2d2      	uxtb	r2, r2
 801a48a:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(speed >> 24);
 801a48c:	68fb      	ldr	r3, [r7, #12]
 801a48e:	0e1a      	lsrs	r2, r3, #24
 801a490:	683b      	ldr	r3, [r7, #0]
 801a492:	3303      	adds	r3, #3
 801a494:	b2d2      	uxtb	r2, r2
 801a496:	701a      	strb	r2, [r3, #0]
      pbuf[4] = 0;
 801a498:	683b      	ldr	r3, [r7, #0]
 801a49a:	3304      	adds	r3, #4
 801a49c:	2200      	movs	r2, #0
 801a49e:	701a      	strb	r2, [r3, #0]
      pbuf[5] = 0;
 801a4a0:	683b      	ldr	r3, [r7, #0]
 801a4a2:	3305      	adds	r3, #5
 801a4a4:	2200      	movs	r2, #0
 801a4a6:	701a      	strb	r2, [r3, #0]
      pbuf[6] = 8;
 801a4a8:	683b      	ldr	r3, [r7, #0]
 801a4aa:	3306      	adds	r3, #6
 801a4ac:	2208      	movs	r2, #8
 801a4ae:	701a      	strb	r2, [r3, #0]
      break;
 801a4b0:	e000      	b.n	801a4b4 <CDC_Control_FS+0xfc>
    case CDC_SEND_BREAK:

      break;

    default:
      break;
 801a4b2:	bf00      	nop
  }

  return (USBD_OK);
 801a4b4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801a4b6:	4618      	mov	r0, r3
 801a4b8:	3714      	adds	r7, #20
 801a4ba:	46bd      	mov	sp, r7
 801a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4c0:	4770      	bx	lr
 801a4c2:	bf00      	nop

0801a4c4 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 801a4c4:	b580      	push	{r7, lr}
 801a4c6:	b084      	sub	sp, #16
 801a4c8:	af00      	add	r7, sp, #0
 801a4ca:	6078      	str	r0, [r7, #4]
 801a4cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t buf_length = *Len;
 801a4ce:	683b      	ldr	r3, [r7, #0]
 801a4d0:	681b      	ldr	r3, [r3, #0]
 801a4d2:	60fb      	str	r3, [r7, #12]
  if (buf_length != 0) {
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	d004      	beq.n	801a4e4 <CDC_Receive_FS+0x20>
    fifo_write_bytes(&usb_input_fifo, Buf, buf_length);
 801a4da:	68fa      	ldr	r2, [r7, #12]
 801a4dc:	6879      	ldr	r1, [r7, #4]
 801a4de:	4807      	ldr	r0, [pc, #28]	; (801a4fc <CDC_Receive_FS+0x38>)
 801a4e0:	f7f4 f971 	bl	800e7c6 <fifo_write_bytes>
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801a4e4:	6879      	ldr	r1, [r7, #4]
 801a4e6:	4806      	ldr	r0, [pc, #24]	; (801a500 <CDC_Receive_FS+0x3c>)
 801a4e8:	f7fa fe2f 	bl	801514a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801a4ec:	4804      	ldr	r0, [pc, #16]	; (801a500 <CDC_Receive_FS+0x3c>)
 801a4ee:	f7fa fe75 	bl	80151dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801a4f2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801a4f4:	4618      	mov	r0, r3
 801a4f6:	3710      	adds	r7, #16
 801a4f8:	46bd      	mov	sp, r7
 801a4fa:	bd80      	pop	{r7, pc}
 801a4fc:	20005180 	.word	0x20005180
 801a500:	20007c28 	.word	0x20007c28

0801a504 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 801a504:	b480      	push	{r7}
 801a506:	b087      	sub	sp, #28
 801a508:	af00      	add	r7, sp, #0
 801a50a:	60f8      	str	r0, [r7, #12]
 801a50c:	60b9      	str	r1, [r7, #8]
 801a50e:	4613      	mov	r3, r2
 801a510:	71fb      	strb	r3, [r7, #7]
  int8_t result = USBD_OK;
 801a512:	2300      	movs	r3, #0
 801a514:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801a516:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a51a:	4618      	mov	r0, r3
 801a51c:	371c      	adds	r7, #28
 801a51e:	46bd      	mov	sp, r7
 801a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a524:	4770      	bx	lr
	...

0801a528 <TIM5_IRQHandler>:

void TIMUsb_IRQHandler(void) {
 801a528:	b580      	push	{r7, lr}
 801a52a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TimHandle);
 801a52c:	4802      	ldr	r0, [pc, #8]	; (801a538 <TIM5_IRQHandler+0x10>)
 801a52e:	f7f8 f923 	bl	8012778 <HAL_TIM_IRQHandler>
}
 801a532:	bf00      	nop
 801a534:	bd80      	pop	{r7, pc}
 801a536:	bf00      	nop
 801a538:	2000817c 	.word	0x2000817c

0801a53c <CDC_Transmit_Elapsed>:

void CDC_Transmit_Elapsed() {
 801a53c:	b580      	push	{r7, lr}
 801a53e:	b082      	sub	sp, #8
 801a540:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 801a542:	4b12      	ldr	r3, [pc, #72]	; (801a58c <CDC_Transmit_Elapsed+0x50>)
 801a544:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a548:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState == 0) {
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801a550:	2b00      	cmp	r3, #0
 801a552:	d116      	bne.n	801a582 <CDC_Transmit_Elapsed+0x46>
    // Check usb fifo and print out to usb
    uint32_t len = fifo_get_length(&usb_output_fifo);
 801a554:	480e      	ldr	r0, [pc, #56]	; (801a590 <CDC_Transmit_Elapsed+0x54>)
 801a556:	f7f4 f8bc 	bl	800e6d2 <fifo_get_length>
 801a55a:	6038      	str	r0, [r7, #0]
    if (len) {
 801a55c:	683b      	ldr	r3, [r7, #0]
 801a55e:	2b00      	cmp	r3, #0
 801a560:	d00f      	beq.n	801a582 <CDC_Transmit_Elapsed+0x46>
      if (fifo_read_bytes(&usb_output_fifo, UserTxBufferFS, len)) {
 801a562:	683a      	ldr	r2, [r7, #0]
 801a564:	490b      	ldr	r1, [pc, #44]	; (801a594 <CDC_Transmit_Elapsed+0x58>)
 801a566:	480a      	ldr	r0, [pc, #40]	; (801a590 <CDC_Transmit_Elapsed+0x54>)
 801a568:	f7f4 f8bf 	bl	800e6ea <fifo_read_bytes>
 801a56c:	4603      	mov	r3, r0
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d007      	beq.n	801a582 <CDC_Transmit_Elapsed+0x46>
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, len);
 801a572:	683a      	ldr	r2, [r7, #0]
 801a574:	4907      	ldr	r1, [pc, #28]	; (801a594 <CDC_Transmit_Elapsed+0x58>)
 801a576:	4805      	ldr	r0, [pc, #20]	; (801a58c <CDC_Transmit_Elapsed+0x50>)
 801a578:	f7fa fdc9 	bl	801510e <USBD_CDC_SetTxBuffer>
        USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801a57c:	4803      	ldr	r0, [pc, #12]	; (801a58c <CDC_Transmit_Elapsed+0x50>)
 801a57e:	f7fa fdfd 	bl	801517c <USBD_CDC_TransmitPacket>
      }
    }
  }
}
 801a582:	bf00      	nop
 801a584:	3708      	adds	r7, #8
 801a586:	46bd      	mov	sp, r7
 801a588:	bd80      	pop	{r7, pc}
 801a58a:	bf00      	nop
 801a58c:	20007c28 	.word	0x20007c28
 801a590:	2000539c 	.word	0x2000539c
 801a594:	20007f38 	.word	0x20007f38

0801a598 <TIM_Config>:

static void TIM_Config(void) {
 801a598:	b580      	push	{r7, lr}
 801a59a:	b082      	sub	sp, #8
 801a59c:	af00      	add	r7, sp, #0
   /* Enable TIM peripherals Clock */
  TIMUsb_CLK_ENABLE();
 801a59e:	2300      	movs	r3, #0
 801a5a0:	607b      	str	r3, [r7, #4]
 801a5a2:	4b1b      	ldr	r3, [pc, #108]	; (801a610 <TIM_Config+0x78>)
 801a5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a5a6:	4a1a      	ldr	r2, [pc, #104]	; (801a610 <TIM_Config+0x78>)
 801a5a8:	f043 0308 	orr.w	r3, r3, #8
 801a5ac:	6413      	str	r3, [r2, #64]	; 0x40
 801a5ae:	4b18      	ldr	r3, [pc, #96]	; (801a610 <TIM_Config+0x78>)
 801a5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a5b2:	f003 0308 	and.w	r3, r3, #8
 801a5b6:	607b      	str	r3, [r7, #4]
 801a5b8:	687b      	ldr	r3, [r7, #4]

  /* Set TIMUsb instance */
  TimHandle.Instance = TIMUsb;
 801a5ba:	4b16      	ldr	r3, [pc, #88]	; (801a614 <TIM_Config+0x7c>)
 801a5bc:	4a16      	ldr	r2, [pc, #88]	; (801a618 <TIM_Config+0x80>)
 801a5be:	601a      	str	r2, [r3, #0]

  TimHandle.Init.Period = (CDC_POLLING_INTERVAL * 1000) - 1;
 801a5c0:	4b14      	ldr	r3, [pc, #80]	; (801a614 <TIM_Config+0x7c>)
 801a5c2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 801a5c6:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = (SystemCoreClock / 2 / (1000000)) - 1;
 801a5c8:	4b14      	ldr	r3, [pc, #80]	; (801a61c <TIM_Config+0x84>)
 801a5ca:	681b      	ldr	r3, [r3, #0]
 801a5cc:	4a14      	ldr	r2, [pc, #80]	; (801a620 <TIM_Config+0x88>)
 801a5ce:	fba2 2303 	umull	r2, r3, r2, r3
 801a5d2:	0cdb      	lsrs	r3, r3, #19
 801a5d4:	3b01      	subs	r3, #1
 801a5d6:	4a0f      	ldr	r2, [pc, #60]	; (801a614 <TIM_Config+0x7c>)
 801a5d8:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 801a5da:	4b0e      	ldr	r3, [pc, #56]	; (801a614 <TIM_Config+0x7c>)
 801a5dc:	2200      	movs	r2, #0
 801a5de:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 801a5e0:	4b0c      	ldr	r3, [pc, #48]	; (801a614 <TIM_Config+0x7c>)
 801a5e2:	2200      	movs	r2, #0
 801a5e4:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK) {
 801a5e6:	480b      	ldr	r0, [pc, #44]	; (801a614 <TIM_Config+0x7c>)
 801a5e8:	f7f7 fea6 	bl	8012338 <HAL_TIM_Base_Init>
 801a5ec:	4603      	mov	r3, r0
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d001      	beq.n	801a5f6 <TIM_Config+0x5e>
    /* Initialization Error */
    Error_Handler();
 801a5f2:	f7f3 fe4b 	bl	800e28c <Error_Handler>
  }


  /* Configure the NVIC for TIMx */
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(TIMUsb_IRQn, 0, 0);
 801a5f6:	2200      	movs	r2, #0
 801a5f8:	2100      	movs	r1, #0
 801a5fa:	2032      	movs	r0, #50	; 0x32
 801a5fc:	f7f4 fddc 	bl	800f1b8 <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMUsb_IRQn);
 801a600:	2032      	movs	r0, #50	; 0x32
 801a602:	f7f4 fdf5 	bl	800f1f0 <HAL_NVIC_EnableIRQ>
}
 801a606:	bf00      	nop
 801a608:	3708      	adds	r7, #8
 801a60a:	46bd      	mov	sp, r7
 801a60c:	bd80      	pop	{r7, pc}
 801a60e:	bf00      	nop
 801a610:	40023800 	.word	0x40023800
 801a614:	2000817c 	.word	0x2000817c
 801a618:	40000c00 	.word	0x40000c00
 801a61c:	20000014 	.word	0x20000014
 801a620:	431bde83 	.word	0x431bde83

0801a624 <USBD_FS_DeviceDescriptor>:
 * @brief  Return the device descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801a624:	b480      	push	{r7}
 801a626:	b083      	sub	sp, #12
 801a628:	af00      	add	r7, sp, #0
 801a62a:	4603      	mov	r3, r0
 801a62c:	6039      	str	r1, [r7, #0]
 801a62e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801a630:	683b      	ldr	r3, [r7, #0]
 801a632:	2212      	movs	r2, #18
 801a634:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801a636:	4b03      	ldr	r3, [pc, #12]	; (801a644 <USBD_FS_DeviceDescriptor+0x20>)
}
 801a638:	4618      	mov	r0, r3
 801a63a:	370c      	adds	r7, #12
 801a63c:	46bd      	mov	sp, r7
 801a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a642:	4770      	bx	lr
 801a644:	20000194 	.word	0x20000194

0801a648 <USBD_FS_LangIDStrDescriptor>:
 * @brief  Return the LangID string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801a648:	b480      	push	{r7}
 801a64a:	b083      	sub	sp, #12
 801a64c:	af00      	add	r7, sp, #0
 801a64e:	4603      	mov	r3, r0
 801a650:	6039      	str	r1, [r7, #0]
 801a652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a654:	683b      	ldr	r3, [r7, #0]
 801a656:	2204      	movs	r2, #4
 801a658:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a65a:	4b03      	ldr	r3, [pc, #12]	; (801a668 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801a65c:	4618      	mov	r0, r3
 801a65e:	370c      	adds	r7, #12
 801a660:	46bd      	mov	sp, r7
 801a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a666:	4770      	bx	lr
 801a668:	200001a8 	.word	0x200001a8

0801a66c <USBD_FS_ProductStrDescriptor>:
 * @brief  Return the product string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801a66c:	b580      	push	{r7, lr}
 801a66e:	b082      	sub	sp, #8
 801a670:	af00      	add	r7, sp, #0
 801a672:	4603      	mov	r3, r0
 801a674:	6039      	str	r1, [r7, #0]
 801a676:	71fb      	strb	r3, [r7, #7]
  if (speed == 0) {
 801a678:	79fb      	ldrb	r3, [r7, #7]
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d105      	bne.n	801a68a <USBD_FS_ProductStrDescriptor+0x1e>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a67e:	683a      	ldr	r2, [r7, #0]
 801a680:	4907      	ldr	r1, [pc, #28]	; (801a6a0 <USBD_FS_ProductStrDescriptor+0x34>)
 801a682:	4808      	ldr	r0, [pc, #32]	; (801a6a4 <USBD_FS_ProductStrDescriptor+0x38>)
 801a684:	f7fb fe5d 	bl	8016342 <USBD_GetString>
 801a688:	e004      	b.n	801a694 <USBD_FS_ProductStrDescriptor+0x28>
  } else {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a68a:	683a      	ldr	r2, [r7, #0]
 801a68c:	4904      	ldr	r1, [pc, #16]	; (801a6a0 <USBD_FS_ProductStrDescriptor+0x34>)
 801a68e:	4805      	ldr	r0, [pc, #20]	; (801a6a4 <USBD_FS_ProductStrDescriptor+0x38>)
 801a690:	f7fb fe57 	bl	8016342 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a694:	4b02      	ldr	r3, [pc, #8]	; (801a6a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801a696:	4618      	mov	r0, r3
 801a698:	3708      	adds	r7, #8
 801a69a:	46bd      	mov	sp, r7
 801a69c:	bd80      	pop	{r7, pc}
 801a69e:	bf00      	nop
 801a6a0:	200081c4 	.word	0x200081c4
 801a6a4:	0801ba68 	.word	0x0801ba68

0801a6a8 <USBD_FS_ManufacturerStrDescriptor>:
 * @brief  Return the manufacturer string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801a6a8:	b580      	push	{r7, lr}
 801a6aa:	b082      	sub	sp, #8
 801a6ac:	af00      	add	r7, sp, #0
 801a6ae:	4603      	mov	r3, r0
 801a6b0:	6039      	str	r1, [r7, #0]
 801a6b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a6b4:	683a      	ldr	r2, [r7, #0]
 801a6b6:	4904      	ldr	r1, [pc, #16]	; (801a6c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801a6b8:	4804      	ldr	r0, [pc, #16]	; (801a6cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801a6ba:	f7fb fe42 	bl	8016342 <USBD_GetString>
  return USBD_StrDesc;
 801a6be:	4b02      	ldr	r3, [pc, #8]	; (801a6c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801a6c0:	4618      	mov	r0, r3
 801a6c2:	3708      	adds	r7, #8
 801a6c4:	46bd      	mov	sp, r7
 801a6c6:	bd80      	pop	{r7, pc}
 801a6c8:	200081c4 	.word	0x200081c4
 801a6cc:	0801ba78 	.word	0x0801ba78

0801a6d0 <USBD_FS_SerialStrDescriptor>:
 * @brief  Return the serial number string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801a6d0:	b580      	push	{r7, lr}
 801a6d2:	b082      	sub	sp, #8
 801a6d4:	af00      	add	r7, sp, #0
 801a6d6:	4603      	mov	r3, r0
 801a6d8:	6039      	str	r1, [r7, #0]
 801a6da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a6dc:	683b      	ldr	r3, [r7, #0]
 801a6de:	221a      	movs	r2, #26
 801a6e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a6e2:	f000 f843 	bl	801a76c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *)USBD_StringSerial;
 801a6e6:	4b02      	ldr	r3, [pc, #8]	; (801a6f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801a6e8:	4618      	mov	r0, r3
 801a6ea:	3708      	adds	r7, #8
 801a6ec:	46bd      	mov	sp, r7
 801a6ee:	bd80      	pop	{r7, pc}
 801a6f0:	200001ac 	.word	0x200001ac

0801a6f4 <USBD_FS_ConfigStrDescriptor>:
 * @brief  Return the configuration string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801a6f4:	b580      	push	{r7, lr}
 801a6f6:	b082      	sub	sp, #8
 801a6f8:	af00      	add	r7, sp, #0
 801a6fa:	4603      	mov	r3, r0
 801a6fc:	6039      	str	r1, [r7, #0]
 801a6fe:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH) {
 801a700:	79fb      	ldrb	r3, [r7, #7]
 801a702:	2b00      	cmp	r3, #0
 801a704:	d105      	bne.n	801a712 <USBD_FS_ConfigStrDescriptor+0x1e>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a706:	683a      	ldr	r2, [r7, #0]
 801a708:	4907      	ldr	r1, [pc, #28]	; (801a728 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a70a:	4808      	ldr	r0, [pc, #32]	; (801a72c <USBD_FS_ConfigStrDescriptor+0x38>)
 801a70c:	f7fb fe19 	bl	8016342 <USBD_GetString>
 801a710:	e004      	b.n	801a71c <USBD_FS_ConfigStrDescriptor+0x28>
  } else {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a712:	683a      	ldr	r2, [r7, #0]
 801a714:	4904      	ldr	r1, [pc, #16]	; (801a728 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a716:	4805      	ldr	r0, [pc, #20]	; (801a72c <USBD_FS_ConfigStrDescriptor+0x38>)
 801a718:	f7fb fe13 	bl	8016342 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a71c:	4b02      	ldr	r3, [pc, #8]	; (801a728 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801a71e:	4618      	mov	r0, r3
 801a720:	3708      	adds	r7, #8
 801a722:	46bd      	mov	sp, r7
 801a724:	bd80      	pop	{r7, pc}
 801a726:	bf00      	nop
 801a728:	200081c4 	.word	0x200081c4
 801a72c:	0801ba80 	.word	0x0801ba80

0801a730 <USBD_FS_InterfaceStrDescriptor>:
 * @brief  Return the interface string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801a730:	b580      	push	{r7, lr}
 801a732:	b082      	sub	sp, #8
 801a734:	af00      	add	r7, sp, #0
 801a736:	4603      	mov	r3, r0
 801a738:	6039      	str	r1, [r7, #0]
 801a73a:	71fb      	strb	r3, [r7, #7]
  if (speed == 0) {
 801a73c:	79fb      	ldrb	r3, [r7, #7]
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d105      	bne.n	801a74e <USBD_FS_InterfaceStrDescriptor+0x1e>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a742:	683a      	ldr	r2, [r7, #0]
 801a744:	4907      	ldr	r1, [pc, #28]	; (801a764 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a746:	4808      	ldr	r0, [pc, #32]	; (801a768 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a748:	f7fb fdfb 	bl	8016342 <USBD_GetString>
 801a74c:	e004      	b.n	801a758 <USBD_FS_InterfaceStrDescriptor+0x28>
  } else {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a74e:	683a      	ldr	r2, [r7, #0]
 801a750:	4904      	ldr	r1, [pc, #16]	; (801a764 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a752:	4805      	ldr	r0, [pc, #20]	; (801a768 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a754:	f7fb fdf5 	bl	8016342 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a758:	4b02      	ldr	r3, [pc, #8]	; (801a764 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801a75a:	4618      	mov	r0, r3
 801a75c:	3708      	adds	r7, #8
 801a75e:	46bd      	mov	sp, r7
 801a760:	bd80      	pop	{r7, pc}
 801a762:	bf00      	nop
 801a764:	200081c4 	.word	0x200081c4
 801a768:	0801ba8c 	.word	0x0801ba8c

0801a76c <Get_SerialNum>:
/**
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void) {
 801a76c:	b580      	push	{r7, lr}
 801a76e:	b084      	sub	sp, #16
 801a770:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 801a772:	4b0f      	ldr	r3, [pc, #60]	; (801a7b0 <Get_SerialNum+0x44>)
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 801a778:	4b0e      	ldr	r3, [pc, #56]	; (801a7b4 <Get_SerialNum+0x48>)
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 801a77e:	4b0e      	ldr	r3, [pc, #56]	; (801a7b8 <Get_SerialNum+0x4c>)
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a784:	68fa      	ldr	r2, [r7, #12]
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	4413      	add	r3, r2
 801a78a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0) {
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d009      	beq.n	801a7a6 <Get_SerialNum+0x3a>
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a792:	2208      	movs	r2, #8
 801a794:	4909      	ldr	r1, [pc, #36]	; (801a7bc <Get_SerialNum+0x50>)
 801a796:	68f8      	ldr	r0, [r7, #12]
 801a798:	f000 f814 	bl	801a7c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a79c:	2204      	movs	r2, #4
 801a79e:	4908      	ldr	r1, [pc, #32]	; (801a7c0 <Get_SerialNum+0x54>)
 801a7a0:	68b8      	ldr	r0, [r7, #8]
 801a7a2:	f000 f80f 	bl	801a7c4 <IntToUnicode>
  }
}
 801a7a6:	bf00      	nop
 801a7a8:	3710      	adds	r7, #16
 801a7aa:	46bd      	mov	sp, r7
 801a7ac:	bd80      	pop	{r7, pc}
 801a7ae:	bf00      	nop
 801a7b0:	1fff7a10 	.word	0x1fff7a10
 801a7b4:	1fff7a14 	.word	0x1fff7a14
 801a7b8:	1fff7a18 	.word	0x1fff7a18
 801a7bc:	200001ae 	.word	0x200001ae
 801a7c0:	200001be 	.word	0x200001be

0801a7c4 <IntToUnicode>:
 * @param  value: value to convert
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len) {
 801a7c4:	b480      	push	{r7}
 801a7c6:	b087      	sub	sp, #28
 801a7c8:	af00      	add	r7, sp, #0
 801a7ca:	60f8      	str	r0, [r7, #12]
 801a7cc:	60b9      	str	r1, [r7, #8]
 801a7ce:	4613      	mov	r3, r2
 801a7d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a7d2:	2300      	movs	r3, #0
 801a7d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++) {
 801a7d6:	2300      	movs	r3, #0
 801a7d8:	75fb      	strb	r3, [r7, #23]
 801a7da:	e027      	b.n	801a82c <IntToUnicode+0x68>
    if (((value >> 28)) < 0xA) {
 801a7dc:	68fb      	ldr	r3, [r7, #12]
 801a7de:	0f1b      	lsrs	r3, r3, #28
 801a7e0:	2b09      	cmp	r3, #9
 801a7e2:	d80b      	bhi.n	801a7fc <IntToUnicode+0x38>
      pbuf[2 * idx] = (value >> 28) + '0';
 801a7e4:	68fb      	ldr	r3, [r7, #12]
 801a7e6:	0f1b      	lsrs	r3, r3, #28
 801a7e8:	b2da      	uxtb	r2, r3
 801a7ea:	7dfb      	ldrb	r3, [r7, #23]
 801a7ec:	005b      	lsls	r3, r3, #1
 801a7ee:	4619      	mov	r1, r3
 801a7f0:	68bb      	ldr	r3, [r7, #8]
 801a7f2:	440b      	add	r3, r1
 801a7f4:	3230      	adds	r2, #48	; 0x30
 801a7f6:	b2d2      	uxtb	r2, r2
 801a7f8:	701a      	strb	r2, [r3, #0]
 801a7fa:	e00a      	b.n	801a812 <IntToUnicode+0x4e>
    } else {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a7fc:	68fb      	ldr	r3, [r7, #12]
 801a7fe:	0f1b      	lsrs	r3, r3, #28
 801a800:	b2da      	uxtb	r2, r3
 801a802:	7dfb      	ldrb	r3, [r7, #23]
 801a804:	005b      	lsls	r3, r3, #1
 801a806:	4619      	mov	r1, r3
 801a808:	68bb      	ldr	r3, [r7, #8]
 801a80a:	440b      	add	r3, r1
 801a80c:	3237      	adds	r2, #55	; 0x37
 801a80e:	b2d2      	uxtb	r2, r2
 801a810:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a812:	68fb      	ldr	r3, [r7, #12]
 801a814:	011b      	lsls	r3, r3, #4
 801a816:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a818:	7dfb      	ldrb	r3, [r7, #23]
 801a81a:	005b      	lsls	r3, r3, #1
 801a81c:	3301      	adds	r3, #1
 801a81e:	68ba      	ldr	r2, [r7, #8]
 801a820:	4413      	add	r3, r2
 801a822:	2200      	movs	r2, #0
 801a824:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++) {
 801a826:	7dfb      	ldrb	r3, [r7, #23]
 801a828:	3301      	adds	r3, #1
 801a82a:	75fb      	strb	r3, [r7, #23]
 801a82c:	7dfa      	ldrb	r2, [r7, #23]
 801a82e:	79fb      	ldrb	r3, [r7, #7]
 801a830:	429a      	cmp	r2, r3
 801a832:	d3d3      	bcc.n	801a7dc <IntToUnicode+0x18>
  }
}
 801a834:	bf00      	nop
 801a836:	bf00      	nop
 801a838:	371c      	adds	r7, #28
 801a83a:	46bd      	mov	sp, r7
 801a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a840:	4770      	bx	lr
	...

0801a844 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a844:	b580      	push	{r7, lr}
 801a846:	b08a      	sub	sp, #40	; 0x28
 801a848:	af00      	add	r7, sp, #0
 801a84a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a84c:	f107 0314 	add.w	r3, r7, #20
 801a850:	2200      	movs	r2, #0
 801a852:	601a      	str	r2, [r3, #0]
 801a854:	605a      	str	r2, [r3, #4]
 801a856:	609a      	str	r2, [r3, #8]
 801a858:	60da      	str	r2, [r3, #12]
 801a85a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a864:	d13a      	bne.n	801a8dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a866:	2300      	movs	r3, #0
 801a868:	613b      	str	r3, [r7, #16]
 801a86a:	4b1e      	ldr	r3, [pc, #120]	; (801a8e4 <HAL_PCD_MspInit+0xa0>)
 801a86c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a86e:	4a1d      	ldr	r2, [pc, #116]	; (801a8e4 <HAL_PCD_MspInit+0xa0>)
 801a870:	f043 0301 	orr.w	r3, r3, #1
 801a874:	6313      	str	r3, [r2, #48]	; 0x30
 801a876:	4b1b      	ldr	r3, [pc, #108]	; (801a8e4 <HAL_PCD_MspInit+0xa0>)
 801a878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a87a:	f003 0301 	and.w	r3, r3, #1
 801a87e:	613b      	str	r3, [r7, #16]
 801a880:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801a882:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801a886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a888:	2302      	movs	r3, #2
 801a88a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a88c:	2300      	movs	r3, #0
 801a88e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a890:	2303      	movs	r3, #3
 801a892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801a894:	230a      	movs	r3, #10
 801a896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a898:	f107 0314 	add.w	r3, r7, #20
 801a89c:	4619      	mov	r1, r3
 801a89e:	4812      	ldr	r0, [pc, #72]	; (801a8e8 <HAL_PCD_MspInit+0xa4>)
 801a8a0:	f7f4 ffaa 	bl	800f7f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a8a4:	4b0f      	ldr	r3, [pc, #60]	; (801a8e4 <HAL_PCD_MspInit+0xa0>)
 801a8a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a8a8:	4a0e      	ldr	r2, [pc, #56]	; (801a8e4 <HAL_PCD_MspInit+0xa0>)
 801a8aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a8ae:	6353      	str	r3, [r2, #52]	; 0x34
 801a8b0:	2300      	movs	r3, #0
 801a8b2:	60fb      	str	r3, [r7, #12]
 801a8b4:	4b0b      	ldr	r3, [pc, #44]	; (801a8e4 <HAL_PCD_MspInit+0xa0>)
 801a8b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a8b8:	4a0a      	ldr	r2, [pc, #40]	; (801a8e4 <HAL_PCD_MspInit+0xa0>)
 801a8ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a8be:	6453      	str	r3, [r2, #68]	; 0x44
 801a8c0:	4b08      	ldr	r3, [pc, #32]	; (801a8e4 <HAL_PCD_MspInit+0xa0>)
 801a8c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a8c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a8c8:	60fb      	str	r3, [r7, #12]
 801a8ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801a8cc:	2200      	movs	r2, #0
 801a8ce:	2100      	movs	r1, #0
 801a8d0:	2043      	movs	r0, #67	; 0x43
 801a8d2:	f7f4 fc71 	bl	800f1b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a8d6:	2043      	movs	r0, #67	; 0x43
 801a8d8:	f7f4 fc8a 	bl	800f1f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801a8dc:	bf00      	nop
 801a8de:	3728      	adds	r7, #40	; 0x28
 801a8e0:	46bd      	mov	sp, r7
 801a8e2:	bd80      	pop	{r7, pc}
 801a8e4:	40023800 	.word	0x40023800
 801a8e8:	40020000 	.word	0x40020000

0801a8ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8ec:	b580      	push	{r7, lr}
 801a8ee:	b082      	sub	sp, #8
 801a8f0:	af00      	add	r7, sp, #0
 801a8f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a900:	4619      	mov	r1, r3
 801a902:	4610      	mov	r0, r2
 801a904:	f7fa fd36 	bl	8015374 <USBD_LL_SetupStage>
}
 801a908:	bf00      	nop
 801a90a:	3708      	adds	r7, #8
 801a90c:	46bd      	mov	sp, r7
 801a90e:	bd80      	pop	{r7, pc}

0801a910 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a910:	b580      	push	{r7, lr}
 801a912:	b082      	sub	sp, #8
 801a914:	af00      	add	r7, sp, #0
 801a916:	6078      	str	r0, [r7, #4]
 801a918:	460b      	mov	r3, r1
 801a91a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801a922:	78fa      	ldrb	r2, [r7, #3]
 801a924:	6879      	ldr	r1, [r7, #4]
 801a926:	4613      	mov	r3, r2
 801a928:	00db      	lsls	r3, r3, #3
 801a92a:	1a9b      	subs	r3, r3, r2
 801a92c:	009b      	lsls	r3, r3, #2
 801a92e:	440b      	add	r3, r1
 801a930:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a934:	681a      	ldr	r2, [r3, #0]
 801a936:	78fb      	ldrb	r3, [r7, #3]
 801a938:	4619      	mov	r1, r3
 801a93a:	f7fa fd70 	bl	801541e <USBD_LL_DataOutStage>
}
 801a93e:	bf00      	nop
 801a940:	3708      	adds	r7, #8
 801a942:	46bd      	mov	sp, r7
 801a944:	bd80      	pop	{r7, pc}

0801a946 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a946:	b580      	push	{r7, lr}
 801a948:	b082      	sub	sp, #8
 801a94a:	af00      	add	r7, sp, #0
 801a94c:	6078      	str	r0, [r7, #4]
 801a94e:	460b      	mov	r3, r1
 801a950:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801a958:	78fa      	ldrb	r2, [r7, #3]
 801a95a:	6879      	ldr	r1, [r7, #4]
 801a95c:	4613      	mov	r3, r2
 801a95e:	00db      	lsls	r3, r3, #3
 801a960:	1a9b      	subs	r3, r3, r2
 801a962:	009b      	lsls	r3, r3, #2
 801a964:	440b      	add	r3, r1
 801a966:	3348      	adds	r3, #72	; 0x48
 801a968:	681a      	ldr	r2, [r3, #0]
 801a96a:	78fb      	ldrb	r3, [r7, #3]
 801a96c:	4619      	mov	r1, r3
 801a96e:	f7fa fdb9 	bl	80154e4 <USBD_LL_DataInStage>
}
 801a972:	bf00      	nop
 801a974:	3708      	adds	r7, #8
 801a976:	46bd      	mov	sp, r7
 801a978:	bd80      	pop	{r7, pc}

0801a97a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a97a:	b580      	push	{r7, lr}
 801a97c:	b082      	sub	sp, #8
 801a97e:	af00      	add	r7, sp, #0
 801a980:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a988:	4618      	mov	r0, r3
 801a98a:	f7fa fecd 	bl	8015728 <USBD_LL_SOF>
}
 801a98e:	bf00      	nop
 801a990:	3708      	adds	r7, #8
 801a992:	46bd      	mov	sp, r7
 801a994:	bd80      	pop	{r7, pc}

0801a996 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a996:	b580      	push	{r7, lr}
 801a998:	b084      	sub	sp, #16
 801a99a:	af00      	add	r7, sp, #0
 801a99c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a99e:	2301      	movs	r3, #1
 801a9a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	68db      	ldr	r3, [r3, #12]
 801a9a6:	2b02      	cmp	r3, #2
 801a9a8:	d001      	beq.n	801a9ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801a9aa:	f7f3 fc6f 	bl	800e28c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a9b4:	7bfa      	ldrb	r2, [r7, #15]
 801a9b6:	4611      	mov	r1, r2
 801a9b8:	4618      	mov	r0, r3
 801a9ba:	f7fa fe77 	bl	80156ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a9c4:	4618      	mov	r0, r3
 801a9c6:	f7fa fe23 	bl	8015610 <USBD_LL_Reset>
}
 801a9ca:	bf00      	nop
 801a9cc:	3710      	adds	r7, #16
 801a9ce:	46bd      	mov	sp, r7
 801a9d0:	bd80      	pop	{r7, pc}
	...

0801a9d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9d4:	b580      	push	{r7, lr}
 801a9d6:	b082      	sub	sp, #8
 801a9d8:	af00      	add	r7, sp, #0
 801a9da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a9e2:	4618      	mov	r0, r3
 801a9e4:	f7fa fe72 	bl	80156cc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	687a      	ldr	r2, [r7, #4]
 801a9f4:	6812      	ldr	r2, [r2, #0]
 801a9f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a9fa:	f043 0301 	orr.w	r3, r3, #1
 801a9fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	6a1b      	ldr	r3, [r3, #32]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d005      	beq.n	801aa14 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801aa08:	4b04      	ldr	r3, [pc, #16]	; (801aa1c <HAL_PCD_SuspendCallback+0x48>)
 801aa0a:	691b      	ldr	r3, [r3, #16]
 801aa0c:	4a03      	ldr	r2, [pc, #12]	; (801aa1c <HAL_PCD_SuspendCallback+0x48>)
 801aa0e:	f043 0306 	orr.w	r3, r3, #6
 801aa12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801aa14:	bf00      	nop
 801aa16:	3708      	adds	r7, #8
 801aa18:	46bd      	mov	sp, r7
 801aa1a:	bd80      	pop	{r7, pc}
 801aa1c:	e000ed00 	.word	0xe000ed00

0801aa20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa20:	b580      	push	{r7, lr}
 801aa22:	b082      	sub	sp, #8
 801aa24:	af00      	add	r7, sp, #0
 801aa26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801aa2e:	4618      	mov	r0, r3
 801aa30:	f7fa fe62 	bl	80156f8 <USBD_LL_Resume>
}
 801aa34:	bf00      	nop
 801aa36:	3708      	adds	r7, #8
 801aa38:	46bd      	mov	sp, r7
 801aa3a:	bd80      	pop	{r7, pc}

0801aa3c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa3c:	b580      	push	{r7, lr}
 801aa3e:	b082      	sub	sp, #8
 801aa40:	af00      	add	r7, sp, #0
 801aa42:	6078      	str	r0, [r7, #4]
 801aa44:	460b      	mov	r3, r1
 801aa46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801aa4e:	78fa      	ldrb	r2, [r7, #3]
 801aa50:	4611      	mov	r1, r2
 801aa52:	4618      	mov	r0, r3
 801aa54:	f7fa feb0 	bl	80157b8 <USBD_LL_IsoOUTIncomplete>
}
 801aa58:	bf00      	nop
 801aa5a:	3708      	adds	r7, #8
 801aa5c:	46bd      	mov	sp, r7
 801aa5e:	bd80      	pop	{r7, pc}

0801aa60 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa60:	b580      	push	{r7, lr}
 801aa62:	b082      	sub	sp, #8
 801aa64:	af00      	add	r7, sp, #0
 801aa66:	6078      	str	r0, [r7, #4]
 801aa68:	460b      	mov	r3, r1
 801aa6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801aa72:	78fa      	ldrb	r2, [r7, #3]
 801aa74:	4611      	mov	r1, r2
 801aa76:	4618      	mov	r0, r3
 801aa78:	f7fa fe78 	bl	801576c <USBD_LL_IsoINIncomplete>
}
 801aa7c:	bf00      	nop
 801aa7e:	3708      	adds	r7, #8
 801aa80:	46bd      	mov	sp, r7
 801aa82:	bd80      	pop	{r7, pc}

0801aa84 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aa84:	b580      	push	{r7, lr}
 801aa86:	b082      	sub	sp, #8
 801aa88:	af00      	add	r7, sp, #0
 801aa8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801aa92:	4618      	mov	r0, r3
 801aa94:	f7fa feb6 	bl	8015804 <USBD_LL_DevConnected>
}
 801aa98:	bf00      	nop
 801aa9a:	3708      	adds	r7, #8
 801aa9c:	46bd      	mov	sp, r7
 801aa9e:	bd80      	pop	{r7, pc}

0801aaa0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801aaa0:	b580      	push	{r7, lr}
 801aaa2:	b082      	sub	sp, #8
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801aaae:	4618      	mov	r0, r3
 801aab0:	f7fa feb3 	bl	801581a <USBD_LL_DevDisconnected>
}
 801aab4:	bf00      	nop
 801aab6:	3708      	adds	r7, #8
 801aab8:	46bd      	mov	sp, r7
 801aaba:	bd80      	pop	{r7, pc}

0801aabc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801aabc:	b580      	push	{r7, lr}
 801aabe:	b082      	sub	sp, #8
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	781b      	ldrb	r3, [r3, #0]
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	d13c      	bne.n	801ab46 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801aacc:	4a20      	ldr	r2, [pc, #128]	; (801ab50 <USBD_LL_Init+0x94>)
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	4a1e      	ldr	r2, [pc, #120]	; (801ab50 <USBD_LL_Init+0x94>)
 801aad8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801aadc:	4b1c      	ldr	r3, [pc, #112]	; (801ab50 <USBD_LL_Init+0x94>)
 801aade:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801aae2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801aae4:	4b1a      	ldr	r3, [pc, #104]	; (801ab50 <USBD_LL_Init+0x94>)
 801aae6:	2204      	movs	r2, #4
 801aae8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801aaea:	4b19      	ldr	r3, [pc, #100]	; (801ab50 <USBD_LL_Init+0x94>)
 801aaec:	2202      	movs	r2, #2
 801aaee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801aaf0:	4b17      	ldr	r3, [pc, #92]	; (801ab50 <USBD_LL_Init+0x94>)
 801aaf2:	2200      	movs	r2, #0
 801aaf4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801aaf6:	4b16      	ldr	r3, [pc, #88]	; (801ab50 <USBD_LL_Init+0x94>)
 801aaf8:	2202      	movs	r2, #2
 801aafa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801aafc:	4b14      	ldr	r3, [pc, #80]	; (801ab50 <USBD_LL_Init+0x94>)
 801aafe:	2200      	movs	r2, #0
 801ab00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801ab02:	4b13      	ldr	r3, [pc, #76]	; (801ab50 <USBD_LL_Init+0x94>)
 801ab04:	2200      	movs	r2, #0
 801ab06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801ab08:	4b11      	ldr	r3, [pc, #68]	; (801ab50 <USBD_LL_Init+0x94>)
 801ab0a:	2200      	movs	r2, #0
 801ab0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801ab0e:	4b10      	ldr	r3, [pc, #64]	; (801ab50 <USBD_LL_Init+0x94>)
 801ab10:	2200      	movs	r2, #0
 801ab12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801ab14:	4b0e      	ldr	r3, [pc, #56]	; (801ab50 <USBD_LL_Init+0x94>)
 801ab16:	2200      	movs	r2, #0
 801ab18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801ab1a:	480d      	ldr	r0, [pc, #52]	; (801ab50 <USBD_LL_Init+0x94>)
 801ab1c:	f7f5 f83a 	bl	800fb94 <HAL_PCD_Init>
 801ab20:	4603      	mov	r3, r0
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	d001      	beq.n	801ab2a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801ab26:	f7f3 fbb1 	bl	800e28c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801ab2a:	2180      	movs	r1, #128	; 0x80
 801ab2c:	4808      	ldr	r0, [pc, #32]	; (801ab50 <USBD_LL_Init+0x94>)
 801ab2e:	f7f6 f998 	bl	8010e62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801ab32:	2240      	movs	r2, #64	; 0x40
 801ab34:	2100      	movs	r1, #0
 801ab36:	4806      	ldr	r0, [pc, #24]	; (801ab50 <USBD_LL_Init+0x94>)
 801ab38:	f7f6 f94c 	bl	8010dd4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801ab3c:	2280      	movs	r2, #128	; 0x80
 801ab3e:	2101      	movs	r1, #1
 801ab40:	4803      	ldr	r0, [pc, #12]	; (801ab50 <USBD_LL_Init+0x94>)
 801ab42:	f7f6 f947 	bl	8010dd4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801ab46:	2300      	movs	r3, #0
}
 801ab48:	4618      	mov	r0, r3
 801ab4a:	3708      	adds	r7, #8
 801ab4c:	46bd      	mov	sp, r7
 801ab4e:	bd80      	pop	{r7, pc}
 801ab50:	200083c4 	.word	0x200083c4

0801ab54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801ab54:	b580      	push	{r7, lr}
 801ab56:	b084      	sub	sp, #16
 801ab58:	af00      	add	r7, sp, #0
 801ab5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab5c:	2300      	movs	r3, #0
 801ab5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab60:	2300      	movs	r3, #0
 801ab62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801ab6a:	4618      	mov	r0, r3
 801ab6c:	f7f5 f92f 	bl	800fdce <HAL_PCD_Start>
 801ab70:	4603      	mov	r3, r0
 801ab72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab74:	7bfb      	ldrb	r3, [r7, #15]
 801ab76:	4618      	mov	r0, r3
 801ab78:	f000 f942 	bl	801ae00 <USBD_Get_USB_Status>
 801ab7c:	4603      	mov	r3, r0
 801ab7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab80:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab82:	4618      	mov	r0, r3
 801ab84:	3710      	adds	r7, #16
 801ab86:	46bd      	mov	sp, r7
 801ab88:	bd80      	pop	{r7, pc}

0801ab8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801ab8a:	b580      	push	{r7, lr}
 801ab8c:	b084      	sub	sp, #16
 801ab8e:	af00      	add	r7, sp, #0
 801ab90:	6078      	str	r0, [r7, #4]
 801ab92:	4608      	mov	r0, r1
 801ab94:	4611      	mov	r1, r2
 801ab96:	461a      	mov	r2, r3
 801ab98:	4603      	mov	r3, r0
 801ab9a:	70fb      	strb	r3, [r7, #3]
 801ab9c:	460b      	mov	r3, r1
 801ab9e:	70bb      	strb	r3, [r7, #2]
 801aba0:	4613      	mov	r3, r2
 801aba2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aba4:	2300      	movs	r3, #0
 801aba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aba8:	2300      	movs	r3, #0
 801abaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801abb2:	78bb      	ldrb	r3, [r7, #2]
 801abb4:	883a      	ldrh	r2, [r7, #0]
 801abb6:	78f9      	ldrb	r1, [r7, #3]
 801abb8:	f7f5 fd13 	bl	80105e2 <HAL_PCD_EP_Open>
 801abbc:	4603      	mov	r3, r0
 801abbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801abc0:	7bfb      	ldrb	r3, [r7, #15]
 801abc2:	4618      	mov	r0, r3
 801abc4:	f000 f91c 	bl	801ae00 <USBD_Get_USB_Status>
 801abc8:	4603      	mov	r3, r0
 801abca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801abcc:	7bbb      	ldrb	r3, [r7, #14]
}
 801abce:	4618      	mov	r0, r3
 801abd0:	3710      	adds	r7, #16
 801abd2:	46bd      	mov	sp, r7
 801abd4:	bd80      	pop	{r7, pc}

0801abd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801abd6:	b580      	push	{r7, lr}
 801abd8:	b084      	sub	sp, #16
 801abda:	af00      	add	r7, sp, #0
 801abdc:	6078      	str	r0, [r7, #4]
 801abde:	460b      	mov	r3, r1
 801abe0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801abe2:	2300      	movs	r3, #0
 801abe4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801abe6:	2300      	movs	r3, #0
 801abe8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801abf0:	78fa      	ldrb	r2, [r7, #3]
 801abf2:	4611      	mov	r1, r2
 801abf4:	4618      	mov	r0, r3
 801abf6:	f7f5 fd5c 	bl	80106b2 <HAL_PCD_EP_Close>
 801abfa:	4603      	mov	r3, r0
 801abfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801abfe:	7bfb      	ldrb	r3, [r7, #15]
 801ac00:	4618      	mov	r0, r3
 801ac02:	f000 f8fd 	bl	801ae00 <USBD_Get_USB_Status>
 801ac06:	4603      	mov	r3, r0
 801ac08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac0a:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac0c:	4618      	mov	r0, r3
 801ac0e:	3710      	adds	r7, #16
 801ac10:	46bd      	mov	sp, r7
 801ac12:	bd80      	pop	{r7, pc}

0801ac14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac14:	b580      	push	{r7, lr}
 801ac16:	b084      	sub	sp, #16
 801ac18:	af00      	add	r7, sp, #0
 801ac1a:	6078      	str	r0, [r7, #4]
 801ac1c:	460b      	mov	r3, r1
 801ac1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac20:	2300      	movs	r3, #0
 801ac22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac24:	2300      	movs	r3, #0
 801ac26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801ac2e:	78fa      	ldrb	r2, [r7, #3]
 801ac30:	4611      	mov	r1, r2
 801ac32:	4618      	mov	r0, r3
 801ac34:	f7f5 fe34 	bl	80108a0 <HAL_PCD_EP_SetStall>
 801ac38:	4603      	mov	r3, r0
 801ac3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac3c:	7bfb      	ldrb	r3, [r7, #15]
 801ac3e:	4618      	mov	r0, r3
 801ac40:	f000 f8de 	bl	801ae00 <USBD_Get_USB_Status>
 801ac44:	4603      	mov	r3, r0
 801ac46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac48:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac4a:	4618      	mov	r0, r3
 801ac4c:	3710      	adds	r7, #16
 801ac4e:	46bd      	mov	sp, r7
 801ac50:	bd80      	pop	{r7, pc}

0801ac52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac52:	b580      	push	{r7, lr}
 801ac54:	b084      	sub	sp, #16
 801ac56:	af00      	add	r7, sp, #0
 801ac58:	6078      	str	r0, [r7, #4]
 801ac5a:	460b      	mov	r3, r1
 801ac5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac5e:	2300      	movs	r3, #0
 801ac60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac62:	2300      	movs	r3, #0
 801ac64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801ac6c:	78fa      	ldrb	r2, [r7, #3]
 801ac6e:	4611      	mov	r1, r2
 801ac70:	4618      	mov	r0, r3
 801ac72:	f7f5 fe79 	bl	8010968 <HAL_PCD_EP_ClrStall>
 801ac76:	4603      	mov	r3, r0
 801ac78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac7a:	7bfb      	ldrb	r3, [r7, #15]
 801ac7c:	4618      	mov	r0, r3
 801ac7e:	f000 f8bf 	bl	801ae00 <USBD_Get_USB_Status>
 801ac82:	4603      	mov	r3, r0
 801ac84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac86:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac88:	4618      	mov	r0, r3
 801ac8a:	3710      	adds	r7, #16
 801ac8c:	46bd      	mov	sp, r7
 801ac8e:	bd80      	pop	{r7, pc}

0801ac90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ac90:	b480      	push	{r7}
 801ac92:	b085      	sub	sp, #20
 801ac94:	af00      	add	r7, sp, #0
 801ac96:	6078      	str	r0, [r7, #4]
 801ac98:	460b      	mov	r3, r1
 801ac9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801aca2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801aca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	da0b      	bge.n	801acc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801acac:	78fb      	ldrb	r3, [r7, #3]
 801acae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801acb2:	68f9      	ldr	r1, [r7, #12]
 801acb4:	4613      	mov	r3, r2
 801acb6:	00db      	lsls	r3, r3, #3
 801acb8:	1a9b      	subs	r3, r3, r2
 801acba:	009b      	lsls	r3, r3, #2
 801acbc:	440b      	add	r3, r1
 801acbe:	333e      	adds	r3, #62	; 0x3e
 801acc0:	781b      	ldrb	r3, [r3, #0]
 801acc2:	e00b      	b.n	801acdc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801acc4:	78fb      	ldrb	r3, [r7, #3]
 801acc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801acca:	68f9      	ldr	r1, [r7, #12]
 801accc:	4613      	mov	r3, r2
 801acce:	00db      	lsls	r3, r3, #3
 801acd0:	1a9b      	subs	r3, r3, r2
 801acd2:	009b      	lsls	r3, r3, #2
 801acd4:	440b      	add	r3, r1
 801acd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801acda:	781b      	ldrb	r3, [r3, #0]
  }
}
 801acdc:	4618      	mov	r0, r3
 801acde:	3714      	adds	r7, #20
 801ace0:	46bd      	mov	sp, r7
 801ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ace6:	4770      	bx	lr

0801ace8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ace8:	b580      	push	{r7, lr}
 801acea:	b084      	sub	sp, #16
 801acec:	af00      	add	r7, sp, #0
 801acee:	6078      	str	r0, [r7, #4]
 801acf0:	460b      	mov	r3, r1
 801acf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801acf4:	2300      	movs	r3, #0
 801acf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801acf8:	2300      	movs	r3, #0
 801acfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801ad02:	78fa      	ldrb	r2, [r7, #3]
 801ad04:	4611      	mov	r1, r2
 801ad06:	4618      	mov	r0, r3
 801ad08:	f7f5 fc46 	bl	8010598 <HAL_PCD_SetAddress>
 801ad0c:	4603      	mov	r3, r0
 801ad0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad10:	7bfb      	ldrb	r3, [r7, #15]
 801ad12:	4618      	mov	r0, r3
 801ad14:	f000 f874 	bl	801ae00 <USBD_Get_USB_Status>
 801ad18:	4603      	mov	r3, r0
 801ad1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ad1c:	7bbb      	ldrb	r3, [r7, #14]
}
 801ad1e:	4618      	mov	r0, r3
 801ad20:	3710      	adds	r7, #16
 801ad22:	46bd      	mov	sp, r7
 801ad24:	bd80      	pop	{r7, pc}

0801ad26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ad26:	b580      	push	{r7, lr}
 801ad28:	b086      	sub	sp, #24
 801ad2a:	af00      	add	r7, sp, #0
 801ad2c:	60f8      	str	r0, [r7, #12]
 801ad2e:	607a      	str	r2, [r7, #4]
 801ad30:	603b      	str	r3, [r7, #0]
 801ad32:	460b      	mov	r3, r1
 801ad34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad36:	2300      	movs	r3, #0
 801ad38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad3a:	2300      	movs	r3, #0
 801ad3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ad3e:	68fb      	ldr	r3, [r7, #12]
 801ad40:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801ad44:	7af9      	ldrb	r1, [r7, #11]
 801ad46:	683b      	ldr	r3, [r7, #0]
 801ad48:	687a      	ldr	r2, [r7, #4]
 801ad4a:	f7f5 fd5f 	bl	801080c <HAL_PCD_EP_Transmit>
 801ad4e:	4603      	mov	r3, r0
 801ad50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad52:	7dfb      	ldrb	r3, [r7, #23]
 801ad54:	4618      	mov	r0, r3
 801ad56:	f000 f853 	bl	801ae00 <USBD_Get_USB_Status>
 801ad5a:	4603      	mov	r3, r0
 801ad5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ad5e:	7dbb      	ldrb	r3, [r7, #22]
}
 801ad60:	4618      	mov	r0, r3
 801ad62:	3718      	adds	r7, #24
 801ad64:	46bd      	mov	sp, r7
 801ad66:	bd80      	pop	{r7, pc}

0801ad68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ad68:	b580      	push	{r7, lr}
 801ad6a:	b086      	sub	sp, #24
 801ad6c:	af00      	add	r7, sp, #0
 801ad6e:	60f8      	str	r0, [r7, #12]
 801ad70:	607a      	str	r2, [r7, #4]
 801ad72:	603b      	str	r3, [r7, #0]
 801ad74:	460b      	mov	r3, r1
 801ad76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ad78:	2300      	movs	r3, #0
 801ad7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad7c:	2300      	movs	r3, #0
 801ad7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801ad80:	68fb      	ldr	r3, [r7, #12]
 801ad82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801ad86:	7af9      	ldrb	r1, [r7, #11]
 801ad88:	683b      	ldr	r3, [r7, #0]
 801ad8a:	687a      	ldr	r2, [r7, #4]
 801ad8c:	f7f5 fcdb 	bl	8010746 <HAL_PCD_EP_Receive>
 801ad90:	4603      	mov	r3, r0
 801ad92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ad94:	7dfb      	ldrb	r3, [r7, #23]
 801ad96:	4618      	mov	r0, r3
 801ad98:	f000 f832 	bl	801ae00 <USBD_Get_USB_Status>
 801ad9c:	4603      	mov	r3, r0
 801ad9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ada0:	7dbb      	ldrb	r3, [r7, #22]
}
 801ada2:	4618      	mov	r0, r3
 801ada4:	3718      	adds	r7, #24
 801ada6:	46bd      	mov	sp, r7
 801ada8:	bd80      	pop	{r7, pc}

0801adaa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801adaa:	b580      	push	{r7, lr}
 801adac:	b082      	sub	sp, #8
 801adae:	af00      	add	r7, sp, #0
 801adb0:	6078      	str	r0, [r7, #4]
 801adb2:	460b      	mov	r3, r1
 801adb4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801adbc:	78fa      	ldrb	r2, [r7, #3]
 801adbe:	4611      	mov	r1, r2
 801adc0:	4618      	mov	r0, r3
 801adc2:	f7f5 fd0b 	bl	80107dc <HAL_PCD_EP_GetRxCount>
 801adc6:	4603      	mov	r3, r0
}
 801adc8:	4618      	mov	r0, r3
 801adca:	3708      	adds	r7, #8
 801adcc:	46bd      	mov	sp, r7
 801adce:	bd80      	pop	{r7, pc}

0801add0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801add0:	b480      	push	{r7}
 801add2:	b083      	sub	sp, #12
 801add4:	af00      	add	r7, sp, #0
 801add6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801add8:	4b03      	ldr	r3, [pc, #12]	; (801ade8 <USBD_static_malloc+0x18>)
}
 801adda:	4618      	mov	r0, r3
 801addc:	370c      	adds	r7, #12
 801adde:	46bd      	mov	sp, r7
 801ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ade4:	4770      	bx	lr
 801ade6:	bf00      	nop
 801ade8:	20004d58 	.word	0x20004d58

0801adec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801adec:	b480      	push	{r7}
 801adee:	b083      	sub	sp, #12
 801adf0:	af00      	add	r7, sp, #0
 801adf2:	6078      	str	r0, [r7, #4]

}
 801adf4:	bf00      	nop
 801adf6:	370c      	adds	r7, #12
 801adf8:	46bd      	mov	sp, r7
 801adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adfe:	4770      	bx	lr

0801ae00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ae00:	b480      	push	{r7}
 801ae02:	b085      	sub	sp, #20
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	4603      	mov	r3, r0
 801ae08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ae0a:	2300      	movs	r3, #0
 801ae0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801ae0e:	79fb      	ldrb	r3, [r7, #7]
 801ae10:	2b03      	cmp	r3, #3
 801ae12:	d817      	bhi.n	801ae44 <USBD_Get_USB_Status+0x44>
 801ae14:	a201      	add	r2, pc, #4	; (adr r2, 801ae1c <USBD_Get_USB_Status+0x1c>)
 801ae16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae1a:	bf00      	nop
 801ae1c:	0801ae2d 	.word	0x0801ae2d
 801ae20:	0801ae33 	.word	0x0801ae33
 801ae24:	0801ae39 	.word	0x0801ae39
 801ae28:	0801ae3f 	.word	0x0801ae3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ae2c:	2300      	movs	r3, #0
 801ae2e:	73fb      	strb	r3, [r7, #15]
    break;
 801ae30:	e00b      	b.n	801ae4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ae32:	2303      	movs	r3, #3
 801ae34:	73fb      	strb	r3, [r7, #15]
    break;
 801ae36:	e008      	b.n	801ae4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ae38:	2301      	movs	r3, #1
 801ae3a:	73fb      	strb	r3, [r7, #15]
    break;
 801ae3c:	e005      	b.n	801ae4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ae3e:	2303      	movs	r3, #3
 801ae40:	73fb      	strb	r3, [r7, #15]
    break;
 801ae42:	e002      	b.n	801ae4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801ae44:	2303      	movs	r3, #3
 801ae46:	73fb      	strb	r3, [r7, #15]
    break;
 801ae48:	bf00      	nop
  }
  return usb_status;
 801ae4a:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae4c:	4618      	mov	r0, r3
 801ae4e:	3714      	adds	r7, #20
 801ae50:	46bd      	mov	sp, r7
 801ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae56:	4770      	bx	lr

0801ae58 <__errno>:
 801ae58:	4b01      	ldr	r3, [pc, #4]	; (801ae60 <__errno+0x8>)
 801ae5a:	6818      	ldr	r0, [r3, #0]
 801ae5c:	4770      	bx	lr
 801ae5e:	bf00      	nop
 801ae60:	200001c8 	.word	0x200001c8

0801ae64 <__libc_init_array>:
 801ae64:	b570      	push	{r4, r5, r6, lr}
 801ae66:	4d0d      	ldr	r5, [pc, #52]	; (801ae9c <__libc_init_array+0x38>)
 801ae68:	4c0d      	ldr	r4, [pc, #52]	; (801aea0 <__libc_init_array+0x3c>)
 801ae6a:	1b64      	subs	r4, r4, r5
 801ae6c:	10a4      	asrs	r4, r4, #2
 801ae6e:	2600      	movs	r6, #0
 801ae70:	42a6      	cmp	r6, r4
 801ae72:	d109      	bne.n	801ae88 <__libc_init_array+0x24>
 801ae74:	4d0b      	ldr	r5, [pc, #44]	; (801aea4 <__libc_init_array+0x40>)
 801ae76:	4c0c      	ldr	r4, [pc, #48]	; (801aea8 <__libc_init_array+0x44>)
 801ae78:	f000 fc9c 	bl	801b7b4 <_init>
 801ae7c:	1b64      	subs	r4, r4, r5
 801ae7e:	10a4      	asrs	r4, r4, #2
 801ae80:	2600      	movs	r6, #0
 801ae82:	42a6      	cmp	r6, r4
 801ae84:	d105      	bne.n	801ae92 <__libc_init_array+0x2e>
 801ae86:	bd70      	pop	{r4, r5, r6, pc}
 801ae88:	f855 3b04 	ldr.w	r3, [r5], #4
 801ae8c:	4798      	blx	r3
 801ae8e:	3601      	adds	r6, #1
 801ae90:	e7ee      	b.n	801ae70 <__libc_init_array+0xc>
 801ae92:	f855 3b04 	ldr.w	r3, [r5], #4
 801ae96:	4798      	blx	r3
 801ae98:	3601      	adds	r6, #1
 801ae9a:	e7f2      	b.n	801ae82 <__libc_init_array+0x1e>
 801ae9c:	0801bc38 	.word	0x0801bc38
 801aea0:	0801bc38 	.word	0x0801bc38
 801aea4:	0801bc38 	.word	0x0801bc38
 801aea8:	0801bc3c 	.word	0x0801bc3c

0801aeac <memcpy>:
 801aeac:	440a      	add	r2, r1
 801aeae:	4291      	cmp	r1, r2
 801aeb0:	f100 33ff 	add.w	r3, r0, #4294967295
 801aeb4:	d100      	bne.n	801aeb8 <memcpy+0xc>
 801aeb6:	4770      	bx	lr
 801aeb8:	b510      	push	{r4, lr}
 801aeba:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 801aec2:	4291      	cmp	r1, r2
 801aec4:	d1f9      	bne.n	801aeba <memcpy+0xe>
 801aec6:	bd10      	pop	{r4, pc}

0801aec8 <memset>:
 801aec8:	4402      	add	r2, r0
 801aeca:	4603      	mov	r3, r0
 801aecc:	4293      	cmp	r3, r2
 801aece:	d100      	bne.n	801aed2 <memset+0xa>
 801aed0:	4770      	bx	lr
 801aed2:	f803 1b01 	strb.w	r1, [r3], #1
 801aed6:	e7f9      	b.n	801aecc <memset+0x4>

0801aed8 <sniprintf>:
 801aed8:	b40c      	push	{r2, r3}
 801aeda:	b530      	push	{r4, r5, lr}
 801aedc:	4b17      	ldr	r3, [pc, #92]	; (801af3c <sniprintf+0x64>)
 801aede:	1e0c      	subs	r4, r1, #0
 801aee0:	681d      	ldr	r5, [r3, #0]
 801aee2:	b09d      	sub	sp, #116	; 0x74
 801aee4:	da08      	bge.n	801aef8 <sniprintf+0x20>
 801aee6:	238b      	movs	r3, #139	; 0x8b
 801aee8:	602b      	str	r3, [r5, #0]
 801aeea:	f04f 30ff 	mov.w	r0, #4294967295
 801aeee:	b01d      	add	sp, #116	; 0x74
 801aef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aef4:	b002      	add	sp, #8
 801aef6:	4770      	bx	lr
 801aef8:	f44f 7302 	mov.w	r3, #520	; 0x208
 801aefc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801af00:	bf14      	ite	ne
 801af02:	f104 33ff 	addne.w	r3, r4, #4294967295
 801af06:	4623      	moveq	r3, r4
 801af08:	9304      	str	r3, [sp, #16]
 801af0a:	9307      	str	r3, [sp, #28]
 801af0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801af10:	9002      	str	r0, [sp, #8]
 801af12:	9006      	str	r0, [sp, #24]
 801af14:	f8ad 3016 	strh.w	r3, [sp, #22]
 801af18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801af1a:	ab21      	add	r3, sp, #132	; 0x84
 801af1c:	a902      	add	r1, sp, #8
 801af1e:	4628      	mov	r0, r5
 801af20:	9301      	str	r3, [sp, #4]
 801af22:	f000 f8a3 	bl	801b06c <_svfiprintf_r>
 801af26:	1c43      	adds	r3, r0, #1
 801af28:	bfbc      	itt	lt
 801af2a:	238b      	movlt	r3, #139	; 0x8b
 801af2c:	602b      	strlt	r3, [r5, #0]
 801af2e:	2c00      	cmp	r4, #0
 801af30:	d0dd      	beq.n	801aeee <sniprintf+0x16>
 801af32:	9b02      	ldr	r3, [sp, #8]
 801af34:	2200      	movs	r2, #0
 801af36:	701a      	strb	r2, [r3, #0]
 801af38:	e7d9      	b.n	801aeee <sniprintf+0x16>
 801af3a:	bf00      	nop
 801af3c:	200001c8 	.word	0x200001c8

0801af40 <_vsniprintf_r>:
 801af40:	b530      	push	{r4, r5, lr}
 801af42:	1e14      	subs	r4, r2, #0
 801af44:	4605      	mov	r5, r0
 801af46:	b09b      	sub	sp, #108	; 0x6c
 801af48:	4618      	mov	r0, r3
 801af4a:	da05      	bge.n	801af58 <_vsniprintf_r+0x18>
 801af4c:	238b      	movs	r3, #139	; 0x8b
 801af4e:	602b      	str	r3, [r5, #0]
 801af50:	f04f 30ff 	mov.w	r0, #4294967295
 801af54:	b01b      	add	sp, #108	; 0x6c
 801af56:	bd30      	pop	{r4, r5, pc}
 801af58:	f44f 7302 	mov.w	r3, #520	; 0x208
 801af5c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801af60:	bf14      	ite	ne
 801af62:	f104 33ff 	addne.w	r3, r4, #4294967295
 801af66:	4623      	moveq	r3, r4
 801af68:	9302      	str	r3, [sp, #8]
 801af6a:	9305      	str	r3, [sp, #20]
 801af6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801af70:	9100      	str	r1, [sp, #0]
 801af72:	9104      	str	r1, [sp, #16]
 801af74:	f8ad 300e 	strh.w	r3, [sp, #14]
 801af78:	4602      	mov	r2, r0
 801af7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801af7c:	4669      	mov	r1, sp
 801af7e:	4628      	mov	r0, r5
 801af80:	f000 f874 	bl	801b06c <_svfiprintf_r>
 801af84:	1c43      	adds	r3, r0, #1
 801af86:	bfbc      	itt	lt
 801af88:	238b      	movlt	r3, #139	; 0x8b
 801af8a:	602b      	strlt	r3, [r5, #0]
 801af8c:	2c00      	cmp	r4, #0
 801af8e:	d0e1      	beq.n	801af54 <_vsniprintf_r+0x14>
 801af90:	9b00      	ldr	r3, [sp, #0]
 801af92:	2200      	movs	r2, #0
 801af94:	701a      	strb	r2, [r3, #0]
 801af96:	e7dd      	b.n	801af54 <_vsniprintf_r+0x14>

0801af98 <vsniprintf>:
 801af98:	b507      	push	{r0, r1, r2, lr}
 801af9a:	9300      	str	r3, [sp, #0]
 801af9c:	4613      	mov	r3, r2
 801af9e:	460a      	mov	r2, r1
 801afa0:	4601      	mov	r1, r0
 801afa2:	4803      	ldr	r0, [pc, #12]	; (801afb0 <vsniprintf+0x18>)
 801afa4:	6800      	ldr	r0, [r0, #0]
 801afa6:	f7ff ffcb 	bl	801af40 <_vsniprintf_r>
 801afaa:	b003      	add	sp, #12
 801afac:	f85d fb04 	ldr.w	pc, [sp], #4
 801afb0:	200001c8 	.word	0x200001c8

0801afb4 <__ssputs_r>:
 801afb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801afb8:	688e      	ldr	r6, [r1, #8]
 801afba:	429e      	cmp	r6, r3
 801afbc:	4682      	mov	sl, r0
 801afbe:	460c      	mov	r4, r1
 801afc0:	4690      	mov	r8, r2
 801afc2:	461f      	mov	r7, r3
 801afc4:	d838      	bhi.n	801b038 <__ssputs_r+0x84>
 801afc6:	898a      	ldrh	r2, [r1, #12]
 801afc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801afcc:	d032      	beq.n	801b034 <__ssputs_r+0x80>
 801afce:	6825      	ldr	r5, [r4, #0]
 801afd0:	6909      	ldr	r1, [r1, #16]
 801afd2:	eba5 0901 	sub.w	r9, r5, r1
 801afd6:	6965      	ldr	r5, [r4, #20]
 801afd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801afdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801afe0:	3301      	adds	r3, #1
 801afe2:	444b      	add	r3, r9
 801afe4:	106d      	asrs	r5, r5, #1
 801afe6:	429d      	cmp	r5, r3
 801afe8:	bf38      	it	cc
 801afea:	461d      	movcc	r5, r3
 801afec:	0553      	lsls	r3, r2, #21
 801afee:	d531      	bpl.n	801b054 <__ssputs_r+0xa0>
 801aff0:	4629      	mov	r1, r5
 801aff2:	f000 fb39 	bl	801b668 <_malloc_r>
 801aff6:	4606      	mov	r6, r0
 801aff8:	b950      	cbnz	r0, 801b010 <__ssputs_r+0x5c>
 801affa:	230c      	movs	r3, #12
 801affc:	f8ca 3000 	str.w	r3, [sl]
 801b000:	89a3      	ldrh	r3, [r4, #12]
 801b002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b006:	81a3      	strh	r3, [r4, #12]
 801b008:	f04f 30ff 	mov.w	r0, #4294967295
 801b00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b010:	6921      	ldr	r1, [r4, #16]
 801b012:	464a      	mov	r2, r9
 801b014:	f7ff ff4a 	bl	801aeac <memcpy>
 801b018:	89a3      	ldrh	r3, [r4, #12]
 801b01a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b01e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b022:	81a3      	strh	r3, [r4, #12]
 801b024:	6126      	str	r6, [r4, #16]
 801b026:	6165      	str	r5, [r4, #20]
 801b028:	444e      	add	r6, r9
 801b02a:	eba5 0509 	sub.w	r5, r5, r9
 801b02e:	6026      	str	r6, [r4, #0]
 801b030:	60a5      	str	r5, [r4, #8]
 801b032:	463e      	mov	r6, r7
 801b034:	42be      	cmp	r6, r7
 801b036:	d900      	bls.n	801b03a <__ssputs_r+0x86>
 801b038:	463e      	mov	r6, r7
 801b03a:	4632      	mov	r2, r6
 801b03c:	6820      	ldr	r0, [r4, #0]
 801b03e:	4641      	mov	r1, r8
 801b040:	f000 faa8 	bl	801b594 <memmove>
 801b044:	68a3      	ldr	r3, [r4, #8]
 801b046:	6822      	ldr	r2, [r4, #0]
 801b048:	1b9b      	subs	r3, r3, r6
 801b04a:	4432      	add	r2, r6
 801b04c:	60a3      	str	r3, [r4, #8]
 801b04e:	6022      	str	r2, [r4, #0]
 801b050:	2000      	movs	r0, #0
 801b052:	e7db      	b.n	801b00c <__ssputs_r+0x58>
 801b054:	462a      	mov	r2, r5
 801b056:	f000 fb61 	bl	801b71c <_realloc_r>
 801b05a:	4606      	mov	r6, r0
 801b05c:	2800      	cmp	r0, #0
 801b05e:	d1e1      	bne.n	801b024 <__ssputs_r+0x70>
 801b060:	6921      	ldr	r1, [r4, #16]
 801b062:	4650      	mov	r0, sl
 801b064:	f000 fab0 	bl	801b5c8 <_free_r>
 801b068:	e7c7      	b.n	801affa <__ssputs_r+0x46>
	...

0801b06c <_svfiprintf_r>:
 801b06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b070:	4698      	mov	r8, r3
 801b072:	898b      	ldrh	r3, [r1, #12]
 801b074:	061b      	lsls	r3, r3, #24
 801b076:	b09d      	sub	sp, #116	; 0x74
 801b078:	4607      	mov	r7, r0
 801b07a:	460d      	mov	r5, r1
 801b07c:	4614      	mov	r4, r2
 801b07e:	d50e      	bpl.n	801b09e <_svfiprintf_r+0x32>
 801b080:	690b      	ldr	r3, [r1, #16]
 801b082:	b963      	cbnz	r3, 801b09e <_svfiprintf_r+0x32>
 801b084:	2140      	movs	r1, #64	; 0x40
 801b086:	f000 faef 	bl	801b668 <_malloc_r>
 801b08a:	6028      	str	r0, [r5, #0]
 801b08c:	6128      	str	r0, [r5, #16]
 801b08e:	b920      	cbnz	r0, 801b09a <_svfiprintf_r+0x2e>
 801b090:	230c      	movs	r3, #12
 801b092:	603b      	str	r3, [r7, #0]
 801b094:	f04f 30ff 	mov.w	r0, #4294967295
 801b098:	e0d1      	b.n	801b23e <_svfiprintf_r+0x1d2>
 801b09a:	2340      	movs	r3, #64	; 0x40
 801b09c:	616b      	str	r3, [r5, #20]
 801b09e:	2300      	movs	r3, #0
 801b0a0:	9309      	str	r3, [sp, #36]	; 0x24
 801b0a2:	2320      	movs	r3, #32
 801b0a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b0a8:	f8cd 800c 	str.w	r8, [sp, #12]
 801b0ac:	2330      	movs	r3, #48	; 0x30
 801b0ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b258 <_svfiprintf_r+0x1ec>
 801b0b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b0b6:	f04f 0901 	mov.w	r9, #1
 801b0ba:	4623      	mov	r3, r4
 801b0bc:	469a      	mov	sl, r3
 801b0be:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b0c2:	b10a      	cbz	r2, 801b0c8 <_svfiprintf_r+0x5c>
 801b0c4:	2a25      	cmp	r2, #37	; 0x25
 801b0c6:	d1f9      	bne.n	801b0bc <_svfiprintf_r+0x50>
 801b0c8:	ebba 0b04 	subs.w	fp, sl, r4
 801b0cc:	d00b      	beq.n	801b0e6 <_svfiprintf_r+0x7a>
 801b0ce:	465b      	mov	r3, fp
 801b0d0:	4622      	mov	r2, r4
 801b0d2:	4629      	mov	r1, r5
 801b0d4:	4638      	mov	r0, r7
 801b0d6:	f7ff ff6d 	bl	801afb4 <__ssputs_r>
 801b0da:	3001      	adds	r0, #1
 801b0dc:	f000 80aa 	beq.w	801b234 <_svfiprintf_r+0x1c8>
 801b0e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b0e2:	445a      	add	r2, fp
 801b0e4:	9209      	str	r2, [sp, #36]	; 0x24
 801b0e6:	f89a 3000 	ldrb.w	r3, [sl]
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	f000 80a2 	beq.w	801b234 <_svfiprintf_r+0x1c8>
 801b0f0:	2300      	movs	r3, #0
 801b0f2:	f04f 32ff 	mov.w	r2, #4294967295
 801b0f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b0fa:	f10a 0a01 	add.w	sl, sl, #1
 801b0fe:	9304      	str	r3, [sp, #16]
 801b100:	9307      	str	r3, [sp, #28]
 801b102:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b106:	931a      	str	r3, [sp, #104]	; 0x68
 801b108:	4654      	mov	r4, sl
 801b10a:	2205      	movs	r2, #5
 801b10c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b110:	4851      	ldr	r0, [pc, #324]	; (801b258 <_svfiprintf_r+0x1ec>)
 801b112:	f7f0 ff9d 	bl	800c050 <memchr>
 801b116:	9a04      	ldr	r2, [sp, #16]
 801b118:	b9d8      	cbnz	r0, 801b152 <_svfiprintf_r+0xe6>
 801b11a:	06d0      	lsls	r0, r2, #27
 801b11c:	bf44      	itt	mi
 801b11e:	2320      	movmi	r3, #32
 801b120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b124:	0711      	lsls	r1, r2, #28
 801b126:	bf44      	itt	mi
 801b128:	232b      	movmi	r3, #43	; 0x2b
 801b12a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b12e:	f89a 3000 	ldrb.w	r3, [sl]
 801b132:	2b2a      	cmp	r3, #42	; 0x2a
 801b134:	d015      	beq.n	801b162 <_svfiprintf_r+0xf6>
 801b136:	9a07      	ldr	r2, [sp, #28]
 801b138:	4654      	mov	r4, sl
 801b13a:	2000      	movs	r0, #0
 801b13c:	f04f 0c0a 	mov.w	ip, #10
 801b140:	4621      	mov	r1, r4
 801b142:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b146:	3b30      	subs	r3, #48	; 0x30
 801b148:	2b09      	cmp	r3, #9
 801b14a:	d94e      	bls.n	801b1ea <_svfiprintf_r+0x17e>
 801b14c:	b1b0      	cbz	r0, 801b17c <_svfiprintf_r+0x110>
 801b14e:	9207      	str	r2, [sp, #28]
 801b150:	e014      	b.n	801b17c <_svfiprintf_r+0x110>
 801b152:	eba0 0308 	sub.w	r3, r0, r8
 801b156:	fa09 f303 	lsl.w	r3, r9, r3
 801b15a:	4313      	orrs	r3, r2
 801b15c:	9304      	str	r3, [sp, #16]
 801b15e:	46a2      	mov	sl, r4
 801b160:	e7d2      	b.n	801b108 <_svfiprintf_r+0x9c>
 801b162:	9b03      	ldr	r3, [sp, #12]
 801b164:	1d19      	adds	r1, r3, #4
 801b166:	681b      	ldr	r3, [r3, #0]
 801b168:	9103      	str	r1, [sp, #12]
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	bfbb      	ittet	lt
 801b16e:	425b      	neglt	r3, r3
 801b170:	f042 0202 	orrlt.w	r2, r2, #2
 801b174:	9307      	strge	r3, [sp, #28]
 801b176:	9307      	strlt	r3, [sp, #28]
 801b178:	bfb8      	it	lt
 801b17a:	9204      	strlt	r2, [sp, #16]
 801b17c:	7823      	ldrb	r3, [r4, #0]
 801b17e:	2b2e      	cmp	r3, #46	; 0x2e
 801b180:	d10c      	bne.n	801b19c <_svfiprintf_r+0x130>
 801b182:	7863      	ldrb	r3, [r4, #1]
 801b184:	2b2a      	cmp	r3, #42	; 0x2a
 801b186:	d135      	bne.n	801b1f4 <_svfiprintf_r+0x188>
 801b188:	9b03      	ldr	r3, [sp, #12]
 801b18a:	1d1a      	adds	r2, r3, #4
 801b18c:	681b      	ldr	r3, [r3, #0]
 801b18e:	9203      	str	r2, [sp, #12]
 801b190:	2b00      	cmp	r3, #0
 801b192:	bfb8      	it	lt
 801b194:	f04f 33ff 	movlt.w	r3, #4294967295
 801b198:	3402      	adds	r4, #2
 801b19a:	9305      	str	r3, [sp, #20]
 801b19c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b268 <_svfiprintf_r+0x1fc>
 801b1a0:	7821      	ldrb	r1, [r4, #0]
 801b1a2:	2203      	movs	r2, #3
 801b1a4:	4650      	mov	r0, sl
 801b1a6:	f7f0 ff53 	bl	800c050 <memchr>
 801b1aa:	b140      	cbz	r0, 801b1be <_svfiprintf_r+0x152>
 801b1ac:	2340      	movs	r3, #64	; 0x40
 801b1ae:	eba0 000a 	sub.w	r0, r0, sl
 801b1b2:	fa03 f000 	lsl.w	r0, r3, r0
 801b1b6:	9b04      	ldr	r3, [sp, #16]
 801b1b8:	4303      	orrs	r3, r0
 801b1ba:	3401      	adds	r4, #1
 801b1bc:	9304      	str	r3, [sp, #16]
 801b1be:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b1c2:	4826      	ldr	r0, [pc, #152]	; (801b25c <_svfiprintf_r+0x1f0>)
 801b1c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b1c8:	2206      	movs	r2, #6
 801b1ca:	f7f0 ff41 	bl	800c050 <memchr>
 801b1ce:	2800      	cmp	r0, #0
 801b1d0:	d038      	beq.n	801b244 <_svfiprintf_r+0x1d8>
 801b1d2:	4b23      	ldr	r3, [pc, #140]	; (801b260 <_svfiprintf_r+0x1f4>)
 801b1d4:	bb1b      	cbnz	r3, 801b21e <_svfiprintf_r+0x1b2>
 801b1d6:	9b03      	ldr	r3, [sp, #12]
 801b1d8:	3307      	adds	r3, #7
 801b1da:	f023 0307 	bic.w	r3, r3, #7
 801b1de:	3308      	adds	r3, #8
 801b1e0:	9303      	str	r3, [sp, #12]
 801b1e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1e4:	4433      	add	r3, r6
 801b1e6:	9309      	str	r3, [sp, #36]	; 0x24
 801b1e8:	e767      	b.n	801b0ba <_svfiprintf_r+0x4e>
 801b1ea:	fb0c 3202 	mla	r2, ip, r2, r3
 801b1ee:	460c      	mov	r4, r1
 801b1f0:	2001      	movs	r0, #1
 801b1f2:	e7a5      	b.n	801b140 <_svfiprintf_r+0xd4>
 801b1f4:	2300      	movs	r3, #0
 801b1f6:	3401      	adds	r4, #1
 801b1f8:	9305      	str	r3, [sp, #20]
 801b1fa:	4619      	mov	r1, r3
 801b1fc:	f04f 0c0a 	mov.w	ip, #10
 801b200:	4620      	mov	r0, r4
 801b202:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b206:	3a30      	subs	r2, #48	; 0x30
 801b208:	2a09      	cmp	r2, #9
 801b20a:	d903      	bls.n	801b214 <_svfiprintf_r+0x1a8>
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d0c5      	beq.n	801b19c <_svfiprintf_r+0x130>
 801b210:	9105      	str	r1, [sp, #20]
 801b212:	e7c3      	b.n	801b19c <_svfiprintf_r+0x130>
 801b214:	fb0c 2101 	mla	r1, ip, r1, r2
 801b218:	4604      	mov	r4, r0
 801b21a:	2301      	movs	r3, #1
 801b21c:	e7f0      	b.n	801b200 <_svfiprintf_r+0x194>
 801b21e:	ab03      	add	r3, sp, #12
 801b220:	9300      	str	r3, [sp, #0]
 801b222:	462a      	mov	r2, r5
 801b224:	4b0f      	ldr	r3, [pc, #60]	; (801b264 <_svfiprintf_r+0x1f8>)
 801b226:	a904      	add	r1, sp, #16
 801b228:	4638      	mov	r0, r7
 801b22a:	f3af 8000 	nop.w
 801b22e:	1c42      	adds	r2, r0, #1
 801b230:	4606      	mov	r6, r0
 801b232:	d1d6      	bne.n	801b1e2 <_svfiprintf_r+0x176>
 801b234:	89ab      	ldrh	r3, [r5, #12]
 801b236:	065b      	lsls	r3, r3, #25
 801b238:	f53f af2c 	bmi.w	801b094 <_svfiprintf_r+0x28>
 801b23c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b23e:	b01d      	add	sp, #116	; 0x74
 801b240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b244:	ab03      	add	r3, sp, #12
 801b246:	9300      	str	r3, [sp, #0]
 801b248:	462a      	mov	r2, r5
 801b24a:	4b06      	ldr	r3, [pc, #24]	; (801b264 <_svfiprintf_r+0x1f8>)
 801b24c:	a904      	add	r1, sp, #16
 801b24e:	4638      	mov	r0, r7
 801b250:	f000 f87a 	bl	801b348 <_printf_i>
 801b254:	e7eb      	b.n	801b22e <_svfiprintf_r+0x1c2>
 801b256:	bf00      	nop
 801b258:	0801bbfa 	.word	0x0801bbfa
 801b25c:	0801bc04 	.word	0x0801bc04
 801b260:	00000000 	.word	0x00000000
 801b264:	0801afb5 	.word	0x0801afb5
 801b268:	0801bc00 	.word	0x0801bc00

0801b26c <_printf_common>:
 801b26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b270:	4616      	mov	r6, r2
 801b272:	4699      	mov	r9, r3
 801b274:	688a      	ldr	r2, [r1, #8]
 801b276:	690b      	ldr	r3, [r1, #16]
 801b278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b27c:	4293      	cmp	r3, r2
 801b27e:	bfb8      	it	lt
 801b280:	4613      	movlt	r3, r2
 801b282:	6033      	str	r3, [r6, #0]
 801b284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b288:	4607      	mov	r7, r0
 801b28a:	460c      	mov	r4, r1
 801b28c:	b10a      	cbz	r2, 801b292 <_printf_common+0x26>
 801b28e:	3301      	adds	r3, #1
 801b290:	6033      	str	r3, [r6, #0]
 801b292:	6823      	ldr	r3, [r4, #0]
 801b294:	0699      	lsls	r1, r3, #26
 801b296:	bf42      	ittt	mi
 801b298:	6833      	ldrmi	r3, [r6, #0]
 801b29a:	3302      	addmi	r3, #2
 801b29c:	6033      	strmi	r3, [r6, #0]
 801b29e:	6825      	ldr	r5, [r4, #0]
 801b2a0:	f015 0506 	ands.w	r5, r5, #6
 801b2a4:	d106      	bne.n	801b2b4 <_printf_common+0x48>
 801b2a6:	f104 0a19 	add.w	sl, r4, #25
 801b2aa:	68e3      	ldr	r3, [r4, #12]
 801b2ac:	6832      	ldr	r2, [r6, #0]
 801b2ae:	1a9b      	subs	r3, r3, r2
 801b2b0:	42ab      	cmp	r3, r5
 801b2b2:	dc26      	bgt.n	801b302 <_printf_common+0x96>
 801b2b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b2b8:	1e13      	subs	r3, r2, #0
 801b2ba:	6822      	ldr	r2, [r4, #0]
 801b2bc:	bf18      	it	ne
 801b2be:	2301      	movne	r3, #1
 801b2c0:	0692      	lsls	r2, r2, #26
 801b2c2:	d42b      	bmi.n	801b31c <_printf_common+0xb0>
 801b2c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b2c8:	4649      	mov	r1, r9
 801b2ca:	4638      	mov	r0, r7
 801b2cc:	47c0      	blx	r8
 801b2ce:	3001      	adds	r0, #1
 801b2d0:	d01e      	beq.n	801b310 <_printf_common+0xa4>
 801b2d2:	6823      	ldr	r3, [r4, #0]
 801b2d4:	68e5      	ldr	r5, [r4, #12]
 801b2d6:	6832      	ldr	r2, [r6, #0]
 801b2d8:	f003 0306 	and.w	r3, r3, #6
 801b2dc:	2b04      	cmp	r3, #4
 801b2de:	bf08      	it	eq
 801b2e0:	1aad      	subeq	r5, r5, r2
 801b2e2:	68a3      	ldr	r3, [r4, #8]
 801b2e4:	6922      	ldr	r2, [r4, #16]
 801b2e6:	bf0c      	ite	eq
 801b2e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b2ec:	2500      	movne	r5, #0
 801b2ee:	4293      	cmp	r3, r2
 801b2f0:	bfc4      	itt	gt
 801b2f2:	1a9b      	subgt	r3, r3, r2
 801b2f4:	18ed      	addgt	r5, r5, r3
 801b2f6:	2600      	movs	r6, #0
 801b2f8:	341a      	adds	r4, #26
 801b2fa:	42b5      	cmp	r5, r6
 801b2fc:	d11a      	bne.n	801b334 <_printf_common+0xc8>
 801b2fe:	2000      	movs	r0, #0
 801b300:	e008      	b.n	801b314 <_printf_common+0xa8>
 801b302:	2301      	movs	r3, #1
 801b304:	4652      	mov	r2, sl
 801b306:	4649      	mov	r1, r9
 801b308:	4638      	mov	r0, r7
 801b30a:	47c0      	blx	r8
 801b30c:	3001      	adds	r0, #1
 801b30e:	d103      	bne.n	801b318 <_printf_common+0xac>
 801b310:	f04f 30ff 	mov.w	r0, #4294967295
 801b314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b318:	3501      	adds	r5, #1
 801b31a:	e7c6      	b.n	801b2aa <_printf_common+0x3e>
 801b31c:	18e1      	adds	r1, r4, r3
 801b31e:	1c5a      	adds	r2, r3, #1
 801b320:	2030      	movs	r0, #48	; 0x30
 801b322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b326:	4422      	add	r2, r4
 801b328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b32c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b330:	3302      	adds	r3, #2
 801b332:	e7c7      	b.n	801b2c4 <_printf_common+0x58>
 801b334:	2301      	movs	r3, #1
 801b336:	4622      	mov	r2, r4
 801b338:	4649      	mov	r1, r9
 801b33a:	4638      	mov	r0, r7
 801b33c:	47c0      	blx	r8
 801b33e:	3001      	adds	r0, #1
 801b340:	d0e6      	beq.n	801b310 <_printf_common+0xa4>
 801b342:	3601      	adds	r6, #1
 801b344:	e7d9      	b.n	801b2fa <_printf_common+0x8e>
	...

0801b348 <_printf_i>:
 801b348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b34c:	460c      	mov	r4, r1
 801b34e:	4691      	mov	r9, r2
 801b350:	7e27      	ldrb	r7, [r4, #24]
 801b352:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b354:	2f78      	cmp	r7, #120	; 0x78
 801b356:	4680      	mov	r8, r0
 801b358:	469a      	mov	sl, r3
 801b35a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b35e:	d807      	bhi.n	801b370 <_printf_i+0x28>
 801b360:	2f62      	cmp	r7, #98	; 0x62
 801b362:	d80a      	bhi.n	801b37a <_printf_i+0x32>
 801b364:	2f00      	cmp	r7, #0
 801b366:	f000 80d8 	beq.w	801b51a <_printf_i+0x1d2>
 801b36a:	2f58      	cmp	r7, #88	; 0x58
 801b36c:	f000 80a3 	beq.w	801b4b6 <_printf_i+0x16e>
 801b370:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b378:	e03a      	b.n	801b3f0 <_printf_i+0xa8>
 801b37a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b37e:	2b15      	cmp	r3, #21
 801b380:	d8f6      	bhi.n	801b370 <_printf_i+0x28>
 801b382:	a001      	add	r0, pc, #4	; (adr r0, 801b388 <_printf_i+0x40>)
 801b384:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b388:	0801b3e1 	.word	0x0801b3e1
 801b38c:	0801b3f5 	.word	0x0801b3f5
 801b390:	0801b371 	.word	0x0801b371
 801b394:	0801b371 	.word	0x0801b371
 801b398:	0801b371 	.word	0x0801b371
 801b39c:	0801b371 	.word	0x0801b371
 801b3a0:	0801b3f5 	.word	0x0801b3f5
 801b3a4:	0801b371 	.word	0x0801b371
 801b3a8:	0801b371 	.word	0x0801b371
 801b3ac:	0801b371 	.word	0x0801b371
 801b3b0:	0801b371 	.word	0x0801b371
 801b3b4:	0801b501 	.word	0x0801b501
 801b3b8:	0801b425 	.word	0x0801b425
 801b3bc:	0801b4e3 	.word	0x0801b4e3
 801b3c0:	0801b371 	.word	0x0801b371
 801b3c4:	0801b371 	.word	0x0801b371
 801b3c8:	0801b523 	.word	0x0801b523
 801b3cc:	0801b371 	.word	0x0801b371
 801b3d0:	0801b425 	.word	0x0801b425
 801b3d4:	0801b371 	.word	0x0801b371
 801b3d8:	0801b371 	.word	0x0801b371
 801b3dc:	0801b4eb 	.word	0x0801b4eb
 801b3e0:	680b      	ldr	r3, [r1, #0]
 801b3e2:	1d1a      	adds	r2, r3, #4
 801b3e4:	681b      	ldr	r3, [r3, #0]
 801b3e6:	600a      	str	r2, [r1, #0]
 801b3e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b3ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b3f0:	2301      	movs	r3, #1
 801b3f2:	e0a3      	b.n	801b53c <_printf_i+0x1f4>
 801b3f4:	6825      	ldr	r5, [r4, #0]
 801b3f6:	6808      	ldr	r0, [r1, #0]
 801b3f8:	062e      	lsls	r6, r5, #24
 801b3fa:	f100 0304 	add.w	r3, r0, #4
 801b3fe:	d50a      	bpl.n	801b416 <_printf_i+0xce>
 801b400:	6805      	ldr	r5, [r0, #0]
 801b402:	600b      	str	r3, [r1, #0]
 801b404:	2d00      	cmp	r5, #0
 801b406:	da03      	bge.n	801b410 <_printf_i+0xc8>
 801b408:	232d      	movs	r3, #45	; 0x2d
 801b40a:	426d      	negs	r5, r5
 801b40c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b410:	485e      	ldr	r0, [pc, #376]	; (801b58c <_printf_i+0x244>)
 801b412:	230a      	movs	r3, #10
 801b414:	e019      	b.n	801b44a <_printf_i+0x102>
 801b416:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b41a:	6805      	ldr	r5, [r0, #0]
 801b41c:	600b      	str	r3, [r1, #0]
 801b41e:	bf18      	it	ne
 801b420:	b22d      	sxthne	r5, r5
 801b422:	e7ef      	b.n	801b404 <_printf_i+0xbc>
 801b424:	680b      	ldr	r3, [r1, #0]
 801b426:	6825      	ldr	r5, [r4, #0]
 801b428:	1d18      	adds	r0, r3, #4
 801b42a:	6008      	str	r0, [r1, #0]
 801b42c:	0628      	lsls	r0, r5, #24
 801b42e:	d501      	bpl.n	801b434 <_printf_i+0xec>
 801b430:	681d      	ldr	r5, [r3, #0]
 801b432:	e002      	b.n	801b43a <_printf_i+0xf2>
 801b434:	0669      	lsls	r1, r5, #25
 801b436:	d5fb      	bpl.n	801b430 <_printf_i+0xe8>
 801b438:	881d      	ldrh	r5, [r3, #0]
 801b43a:	4854      	ldr	r0, [pc, #336]	; (801b58c <_printf_i+0x244>)
 801b43c:	2f6f      	cmp	r7, #111	; 0x6f
 801b43e:	bf0c      	ite	eq
 801b440:	2308      	moveq	r3, #8
 801b442:	230a      	movne	r3, #10
 801b444:	2100      	movs	r1, #0
 801b446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b44a:	6866      	ldr	r6, [r4, #4]
 801b44c:	60a6      	str	r6, [r4, #8]
 801b44e:	2e00      	cmp	r6, #0
 801b450:	bfa2      	ittt	ge
 801b452:	6821      	ldrge	r1, [r4, #0]
 801b454:	f021 0104 	bicge.w	r1, r1, #4
 801b458:	6021      	strge	r1, [r4, #0]
 801b45a:	b90d      	cbnz	r5, 801b460 <_printf_i+0x118>
 801b45c:	2e00      	cmp	r6, #0
 801b45e:	d04d      	beq.n	801b4fc <_printf_i+0x1b4>
 801b460:	4616      	mov	r6, r2
 801b462:	fbb5 f1f3 	udiv	r1, r5, r3
 801b466:	fb03 5711 	mls	r7, r3, r1, r5
 801b46a:	5dc7      	ldrb	r7, [r0, r7]
 801b46c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b470:	462f      	mov	r7, r5
 801b472:	42bb      	cmp	r3, r7
 801b474:	460d      	mov	r5, r1
 801b476:	d9f4      	bls.n	801b462 <_printf_i+0x11a>
 801b478:	2b08      	cmp	r3, #8
 801b47a:	d10b      	bne.n	801b494 <_printf_i+0x14c>
 801b47c:	6823      	ldr	r3, [r4, #0]
 801b47e:	07df      	lsls	r7, r3, #31
 801b480:	d508      	bpl.n	801b494 <_printf_i+0x14c>
 801b482:	6923      	ldr	r3, [r4, #16]
 801b484:	6861      	ldr	r1, [r4, #4]
 801b486:	4299      	cmp	r1, r3
 801b488:	bfde      	ittt	le
 801b48a:	2330      	movle	r3, #48	; 0x30
 801b48c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b490:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b494:	1b92      	subs	r2, r2, r6
 801b496:	6122      	str	r2, [r4, #16]
 801b498:	f8cd a000 	str.w	sl, [sp]
 801b49c:	464b      	mov	r3, r9
 801b49e:	aa03      	add	r2, sp, #12
 801b4a0:	4621      	mov	r1, r4
 801b4a2:	4640      	mov	r0, r8
 801b4a4:	f7ff fee2 	bl	801b26c <_printf_common>
 801b4a8:	3001      	adds	r0, #1
 801b4aa:	d14c      	bne.n	801b546 <_printf_i+0x1fe>
 801b4ac:	f04f 30ff 	mov.w	r0, #4294967295
 801b4b0:	b004      	add	sp, #16
 801b4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4b6:	4835      	ldr	r0, [pc, #212]	; (801b58c <_printf_i+0x244>)
 801b4b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b4bc:	6823      	ldr	r3, [r4, #0]
 801b4be:	680e      	ldr	r6, [r1, #0]
 801b4c0:	061f      	lsls	r7, r3, #24
 801b4c2:	f856 5b04 	ldr.w	r5, [r6], #4
 801b4c6:	600e      	str	r6, [r1, #0]
 801b4c8:	d514      	bpl.n	801b4f4 <_printf_i+0x1ac>
 801b4ca:	07d9      	lsls	r1, r3, #31
 801b4cc:	bf44      	itt	mi
 801b4ce:	f043 0320 	orrmi.w	r3, r3, #32
 801b4d2:	6023      	strmi	r3, [r4, #0]
 801b4d4:	b91d      	cbnz	r5, 801b4de <_printf_i+0x196>
 801b4d6:	6823      	ldr	r3, [r4, #0]
 801b4d8:	f023 0320 	bic.w	r3, r3, #32
 801b4dc:	6023      	str	r3, [r4, #0]
 801b4de:	2310      	movs	r3, #16
 801b4e0:	e7b0      	b.n	801b444 <_printf_i+0xfc>
 801b4e2:	6823      	ldr	r3, [r4, #0]
 801b4e4:	f043 0320 	orr.w	r3, r3, #32
 801b4e8:	6023      	str	r3, [r4, #0]
 801b4ea:	2378      	movs	r3, #120	; 0x78
 801b4ec:	4828      	ldr	r0, [pc, #160]	; (801b590 <_printf_i+0x248>)
 801b4ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b4f2:	e7e3      	b.n	801b4bc <_printf_i+0x174>
 801b4f4:	065e      	lsls	r6, r3, #25
 801b4f6:	bf48      	it	mi
 801b4f8:	b2ad      	uxthmi	r5, r5
 801b4fa:	e7e6      	b.n	801b4ca <_printf_i+0x182>
 801b4fc:	4616      	mov	r6, r2
 801b4fe:	e7bb      	b.n	801b478 <_printf_i+0x130>
 801b500:	680b      	ldr	r3, [r1, #0]
 801b502:	6826      	ldr	r6, [r4, #0]
 801b504:	6960      	ldr	r0, [r4, #20]
 801b506:	1d1d      	adds	r5, r3, #4
 801b508:	600d      	str	r5, [r1, #0]
 801b50a:	0635      	lsls	r5, r6, #24
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	d501      	bpl.n	801b514 <_printf_i+0x1cc>
 801b510:	6018      	str	r0, [r3, #0]
 801b512:	e002      	b.n	801b51a <_printf_i+0x1d2>
 801b514:	0671      	lsls	r1, r6, #25
 801b516:	d5fb      	bpl.n	801b510 <_printf_i+0x1c8>
 801b518:	8018      	strh	r0, [r3, #0]
 801b51a:	2300      	movs	r3, #0
 801b51c:	6123      	str	r3, [r4, #16]
 801b51e:	4616      	mov	r6, r2
 801b520:	e7ba      	b.n	801b498 <_printf_i+0x150>
 801b522:	680b      	ldr	r3, [r1, #0]
 801b524:	1d1a      	adds	r2, r3, #4
 801b526:	600a      	str	r2, [r1, #0]
 801b528:	681e      	ldr	r6, [r3, #0]
 801b52a:	6862      	ldr	r2, [r4, #4]
 801b52c:	2100      	movs	r1, #0
 801b52e:	4630      	mov	r0, r6
 801b530:	f7f0 fd8e 	bl	800c050 <memchr>
 801b534:	b108      	cbz	r0, 801b53a <_printf_i+0x1f2>
 801b536:	1b80      	subs	r0, r0, r6
 801b538:	6060      	str	r0, [r4, #4]
 801b53a:	6863      	ldr	r3, [r4, #4]
 801b53c:	6123      	str	r3, [r4, #16]
 801b53e:	2300      	movs	r3, #0
 801b540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b544:	e7a8      	b.n	801b498 <_printf_i+0x150>
 801b546:	6923      	ldr	r3, [r4, #16]
 801b548:	4632      	mov	r2, r6
 801b54a:	4649      	mov	r1, r9
 801b54c:	4640      	mov	r0, r8
 801b54e:	47d0      	blx	sl
 801b550:	3001      	adds	r0, #1
 801b552:	d0ab      	beq.n	801b4ac <_printf_i+0x164>
 801b554:	6823      	ldr	r3, [r4, #0]
 801b556:	079b      	lsls	r3, r3, #30
 801b558:	d413      	bmi.n	801b582 <_printf_i+0x23a>
 801b55a:	68e0      	ldr	r0, [r4, #12]
 801b55c:	9b03      	ldr	r3, [sp, #12]
 801b55e:	4298      	cmp	r0, r3
 801b560:	bfb8      	it	lt
 801b562:	4618      	movlt	r0, r3
 801b564:	e7a4      	b.n	801b4b0 <_printf_i+0x168>
 801b566:	2301      	movs	r3, #1
 801b568:	4632      	mov	r2, r6
 801b56a:	4649      	mov	r1, r9
 801b56c:	4640      	mov	r0, r8
 801b56e:	47d0      	blx	sl
 801b570:	3001      	adds	r0, #1
 801b572:	d09b      	beq.n	801b4ac <_printf_i+0x164>
 801b574:	3501      	adds	r5, #1
 801b576:	68e3      	ldr	r3, [r4, #12]
 801b578:	9903      	ldr	r1, [sp, #12]
 801b57a:	1a5b      	subs	r3, r3, r1
 801b57c:	42ab      	cmp	r3, r5
 801b57e:	dcf2      	bgt.n	801b566 <_printf_i+0x21e>
 801b580:	e7eb      	b.n	801b55a <_printf_i+0x212>
 801b582:	2500      	movs	r5, #0
 801b584:	f104 0619 	add.w	r6, r4, #25
 801b588:	e7f5      	b.n	801b576 <_printf_i+0x22e>
 801b58a:	bf00      	nop
 801b58c:	0801bc0b 	.word	0x0801bc0b
 801b590:	0801bc1c 	.word	0x0801bc1c

0801b594 <memmove>:
 801b594:	4288      	cmp	r0, r1
 801b596:	b510      	push	{r4, lr}
 801b598:	eb01 0402 	add.w	r4, r1, r2
 801b59c:	d902      	bls.n	801b5a4 <memmove+0x10>
 801b59e:	4284      	cmp	r4, r0
 801b5a0:	4623      	mov	r3, r4
 801b5a2:	d807      	bhi.n	801b5b4 <memmove+0x20>
 801b5a4:	1e43      	subs	r3, r0, #1
 801b5a6:	42a1      	cmp	r1, r4
 801b5a8:	d008      	beq.n	801b5bc <memmove+0x28>
 801b5aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b5ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b5b2:	e7f8      	b.n	801b5a6 <memmove+0x12>
 801b5b4:	4402      	add	r2, r0
 801b5b6:	4601      	mov	r1, r0
 801b5b8:	428a      	cmp	r2, r1
 801b5ba:	d100      	bne.n	801b5be <memmove+0x2a>
 801b5bc:	bd10      	pop	{r4, pc}
 801b5be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b5c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b5c6:	e7f7      	b.n	801b5b8 <memmove+0x24>

0801b5c8 <_free_r>:
 801b5c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b5ca:	2900      	cmp	r1, #0
 801b5cc:	d048      	beq.n	801b660 <_free_r+0x98>
 801b5ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b5d2:	9001      	str	r0, [sp, #4]
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	f1a1 0404 	sub.w	r4, r1, #4
 801b5da:	bfb8      	it	lt
 801b5dc:	18e4      	addlt	r4, r4, r3
 801b5de:	f000 f8d3 	bl	801b788 <__malloc_lock>
 801b5e2:	4a20      	ldr	r2, [pc, #128]	; (801b664 <_free_r+0x9c>)
 801b5e4:	9801      	ldr	r0, [sp, #4]
 801b5e6:	6813      	ldr	r3, [r2, #0]
 801b5e8:	4615      	mov	r5, r2
 801b5ea:	b933      	cbnz	r3, 801b5fa <_free_r+0x32>
 801b5ec:	6063      	str	r3, [r4, #4]
 801b5ee:	6014      	str	r4, [r2, #0]
 801b5f0:	b003      	add	sp, #12
 801b5f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b5f6:	f000 b8cd 	b.w	801b794 <__malloc_unlock>
 801b5fa:	42a3      	cmp	r3, r4
 801b5fc:	d90b      	bls.n	801b616 <_free_r+0x4e>
 801b5fe:	6821      	ldr	r1, [r4, #0]
 801b600:	1862      	adds	r2, r4, r1
 801b602:	4293      	cmp	r3, r2
 801b604:	bf04      	itt	eq
 801b606:	681a      	ldreq	r2, [r3, #0]
 801b608:	685b      	ldreq	r3, [r3, #4]
 801b60a:	6063      	str	r3, [r4, #4]
 801b60c:	bf04      	itt	eq
 801b60e:	1852      	addeq	r2, r2, r1
 801b610:	6022      	streq	r2, [r4, #0]
 801b612:	602c      	str	r4, [r5, #0]
 801b614:	e7ec      	b.n	801b5f0 <_free_r+0x28>
 801b616:	461a      	mov	r2, r3
 801b618:	685b      	ldr	r3, [r3, #4]
 801b61a:	b10b      	cbz	r3, 801b620 <_free_r+0x58>
 801b61c:	42a3      	cmp	r3, r4
 801b61e:	d9fa      	bls.n	801b616 <_free_r+0x4e>
 801b620:	6811      	ldr	r1, [r2, #0]
 801b622:	1855      	adds	r5, r2, r1
 801b624:	42a5      	cmp	r5, r4
 801b626:	d10b      	bne.n	801b640 <_free_r+0x78>
 801b628:	6824      	ldr	r4, [r4, #0]
 801b62a:	4421      	add	r1, r4
 801b62c:	1854      	adds	r4, r2, r1
 801b62e:	42a3      	cmp	r3, r4
 801b630:	6011      	str	r1, [r2, #0]
 801b632:	d1dd      	bne.n	801b5f0 <_free_r+0x28>
 801b634:	681c      	ldr	r4, [r3, #0]
 801b636:	685b      	ldr	r3, [r3, #4]
 801b638:	6053      	str	r3, [r2, #4]
 801b63a:	4421      	add	r1, r4
 801b63c:	6011      	str	r1, [r2, #0]
 801b63e:	e7d7      	b.n	801b5f0 <_free_r+0x28>
 801b640:	d902      	bls.n	801b648 <_free_r+0x80>
 801b642:	230c      	movs	r3, #12
 801b644:	6003      	str	r3, [r0, #0]
 801b646:	e7d3      	b.n	801b5f0 <_free_r+0x28>
 801b648:	6825      	ldr	r5, [r4, #0]
 801b64a:	1961      	adds	r1, r4, r5
 801b64c:	428b      	cmp	r3, r1
 801b64e:	bf04      	itt	eq
 801b650:	6819      	ldreq	r1, [r3, #0]
 801b652:	685b      	ldreq	r3, [r3, #4]
 801b654:	6063      	str	r3, [r4, #4]
 801b656:	bf04      	itt	eq
 801b658:	1949      	addeq	r1, r1, r5
 801b65a:	6021      	streq	r1, [r4, #0]
 801b65c:	6054      	str	r4, [r2, #4]
 801b65e:	e7c7      	b.n	801b5f0 <_free_r+0x28>
 801b660:	b003      	add	sp, #12
 801b662:	bd30      	pop	{r4, r5, pc}
 801b664:	20004f78 	.word	0x20004f78

0801b668 <_malloc_r>:
 801b668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b66a:	1ccd      	adds	r5, r1, #3
 801b66c:	f025 0503 	bic.w	r5, r5, #3
 801b670:	3508      	adds	r5, #8
 801b672:	2d0c      	cmp	r5, #12
 801b674:	bf38      	it	cc
 801b676:	250c      	movcc	r5, #12
 801b678:	2d00      	cmp	r5, #0
 801b67a:	4606      	mov	r6, r0
 801b67c:	db01      	blt.n	801b682 <_malloc_r+0x1a>
 801b67e:	42a9      	cmp	r1, r5
 801b680:	d903      	bls.n	801b68a <_malloc_r+0x22>
 801b682:	230c      	movs	r3, #12
 801b684:	6033      	str	r3, [r6, #0]
 801b686:	2000      	movs	r0, #0
 801b688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b68a:	f000 f87d 	bl	801b788 <__malloc_lock>
 801b68e:	4921      	ldr	r1, [pc, #132]	; (801b714 <_malloc_r+0xac>)
 801b690:	680a      	ldr	r2, [r1, #0]
 801b692:	4614      	mov	r4, r2
 801b694:	b99c      	cbnz	r4, 801b6be <_malloc_r+0x56>
 801b696:	4f20      	ldr	r7, [pc, #128]	; (801b718 <_malloc_r+0xb0>)
 801b698:	683b      	ldr	r3, [r7, #0]
 801b69a:	b923      	cbnz	r3, 801b6a6 <_malloc_r+0x3e>
 801b69c:	4621      	mov	r1, r4
 801b69e:	4630      	mov	r0, r6
 801b6a0:	f000 f862 	bl	801b768 <_sbrk_r>
 801b6a4:	6038      	str	r0, [r7, #0]
 801b6a6:	4629      	mov	r1, r5
 801b6a8:	4630      	mov	r0, r6
 801b6aa:	f000 f85d 	bl	801b768 <_sbrk_r>
 801b6ae:	1c43      	adds	r3, r0, #1
 801b6b0:	d123      	bne.n	801b6fa <_malloc_r+0x92>
 801b6b2:	230c      	movs	r3, #12
 801b6b4:	6033      	str	r3, [r6, #0]
 801b6b6:	4630      	mov	r0, r6
 801b6b8:	f000 f86c 	bl	801b794 <__malloc_unlock>
 801b6bc:	e7e3      	b.n	801b686 <_malloc_r+0x1e>
 801b6be:	6823      	ldr	r3, [r4, #0]
 801b6c0:	1b5b      	subs	r3, r3, r5
 801b6c2:	d417      	bmi.n	801b6f4 <_malloc_r+0x8c>
 801b6c4:	2b0b      	cmp	r3, #11
 801b6c6:	d903      	bls.n	801b6d0 <_malloc_r+0x68>
 801b6c8:	6023      	str	r3, [r4, #0]
 801b6ca:	441c      	add	r4, r3
 801b6cc:	6025      	str	r5, [r4, #0]
 801b6ce:	e004      	b.n	801b6da <_malloc_r+0x72>
 801b6d0:	6863      	ldr	r3, [r4, #4]
 801b6d2:	42a2      	cmp	r2, r4
 801b6d4:	bf0c      	ite	eq
 801b6d6:	600b      	streq	r3, [r1, #0]
 801b6d8:	6053      	strne	r3, [r2, #4]
 801b6da:	4630      	mov	r0, r6
 801b6dc:	f000 f85a 	bl	801b794 <__malloc_unlock>
 801b6e0:	f104 000b 	add.w	r0, r4, #11
 801b6e4:	1d23      	adds	r3, r4, #4
 801b6e6:	f020 0007 	bic.w	r0, r0, #7
 801b6ea:	1ac2      	subs	r2, r0, r3
 801b6ec:	d0cc      	beq.n	801b688 <_malloc_r+0x20>
 801b6ee:	1a1b      	subs	r3, r3, r0
 801b6f0:	50a3      	str	r3, [r4, r2]
 801b6f2:	e7c9      	b.n	801b688 <_malloc_r+0x20>
 801b6f4:	4622      	mov	r2, r4
 801b6f6:	6864      	ldr	r4, [r4, #4]
 801b6f8:	e7cc      	b.n	801b694 <_malloc_r+0x2c>
 801b6fa:	1cc4      	adds	r4, r0, #3
 801b6fc:	f024 0403 	bic.w	r4, r4, #3
 801b700:	42a0      	cmp	r0, r4
 801b702:	d0e3      	beq.n	801b6cc <_malloc_r+0x64>
 801b704:	1a21      	subs	r1, r4, r0
 801b706:	4630      	mov	r0, r6
 801b708:	f000 f82e 	bl	801b768 <_sbrk_r>
 801b70c:	3001      	adds	r0, #1
 801b70e:	d1dd      	bne.n	801b6cc <_malloc_r+0x64>
 801b710:	e7cf      	b.n	801b6b2 <_malloc_r+0x4a>
 801b712:	bf00      	nop
 801b714:	20004f78 	.word	0x20004f78
 801b718:	20004f7c 	.word	0x20004f7c

0801b71c <_realloc_r>:
 801b71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b71e:	4607      	mov	r7, r0
 801b720:	4614      	mov	r4, r2
 801b722:	460e      	mov	r6, r1
 801b724:	b921      	cbnz	r1, 801b730 <_realloc_r+0x14>
 801b726:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b72a:	4611      	mov	r1, r2
 801b72c:	f7ff bf9c 	b.w	801b668 <_malloc_r>
 801b730:	b922      	cbnz	r2, 801b73c <_realloc_r+0x20>
 801b732:	f7ff ff49 	bl	801b5c8 <_free_r>
 801b736:	4625      	mov	r5, r4
 801b738:	4628      	mov	r0, r5
 801b73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b73c:	f000 f830 	bl	801b7a0 <_malloc_usable_size_r>
 801b740:	42a0      	cmp	r0, r4
 801b742:	d20f      	bcs.n	801b764 <_realloc_r+0x48>
 801b744:	4621      	mov	r1, r4
 801b746:	4638      	mov	r0, r7
 801b748:	f7ff ff8e 	bl	801b668 <_malloc_r>
 801b74c:	4605      	mov	r5, r0
 801b74e:	2800      	cmp	r0, #0
 801b750:	d0f2      	beq.n	801b738 <_realloc_r+0x1c>
 801b752:	4631      	mov	r1, r6
 801b754:	4622      	mov	r2, r4
 801b756:	f7ff fba9 	bl	801aeac <memcpy>
 801b75a:	4631      	mov	r1, r6
 801b75c:	4638      	mov	r0, r7
 801b75e:	f7ff ff33 	bl	801b5c8 <_free_r>
 801b762:	e7e9      	b.n	801b738 <_realloc_r+0x1c>
 801b764:	4635      	mov	r5, r6
 801b766:	e7e7      	b.n	801b738 <_realloc_r+0x1c>

0801b768 <_sbrk_r>:
 801b768:	b538      	push	{r3, r4, r5, lr}
 801b76a:	4d06      	ldr	r5, [pc, #24]	; (801b784 <_sbrk_r+0x1c>)
 801b76c:	2300      	movs	r3, #0
 801b76e:	4604      	mov	r4, r0
 801b770:	4608      	mov	r0, r1
 801b772:	602b      	str	r3, [r5, #0]
 801b774:	f7f1 fbb6 	bl	800cee4 <_sbrk>
 801b778:	1c43      	adds	r3, r0, #1
 801b77a:	d102      	bne.n	801b782 <_sbrk_r+0x1a>
 801b77c:	682b      	ldr	r3, [r5, #0]
 801b77e:	b103      	cbz	r3, 801b782 <_sbrk_r+0x1a>
 801b780:	6023      	str	r3, [r4, #0]
 801b782:	bd38      	pop	{r3, r4, r5, pc}
 801b784:	200087cc 	.word	0x200087cc

0801b788 <__malloc_lock>:
 801b788:	4801      	ldr	r0, [pc, #4]	; (801b790 <__malloc_lock+0x8>)
 801b78a:	f000 b811 	b.w	801b7b0 <__retarget_lock_acquire_recursive>
 801b78e:	bf00      	nop
 801b790:	200087d4 	.word	0x200087d4

0801b794 <__malloc_unlock>:
 801b794:	4801      	ldr	r0, [pc, #4]	; (801b79c <__malloc_unlock+0x8>)
 801b796:	f000 b80c 	b.w	801b7b2 <__retarget_lock_release_recursive>
 801b79a:	bf00      	nop
 801b79c:	200087d4 	.word	0x200087d4

0801b7a0 <_malloc_usable_size_r>:
 801b7a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b7a4:	1f18      	subs	r0, r3, #4
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	bfbc      	itt	lt
 801b7aa:	580b      	ldrlt	r3, [r1, r0]
 801b7ac:	18c0      	addlt	r0, r0, r3
 801b7ae:	4770      	bx	lr

0801b7b0 <__retarget_lock_acquire_recursive>:
 801b7b0:	4770      	bx	lr

0801b7b2 <__retarget_lock_release_recursive>:
 801b7b2:	4770      	bx	lr

0801b7b4 <_init>:
 801b7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7b6:	bf00      	nop
 801b7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b7ba:	bc08      	pop	{r3}
 801b7bc:	469e      	mov	lr, r3
 801b7be:	4770      	bx	lr

0801b7c0 <_fini>:
 801b7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7c2:	bf00      	nop
 801b7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b7c6:	bc08      	pop	{r3}
 801b7c8:	469e      	mov	lr, r3
 801b7ca:	4770      	bx	lr

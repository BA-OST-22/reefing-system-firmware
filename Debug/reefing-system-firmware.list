
reefing-system-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800dbc8  0800dbc8  0001dbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd5c  0800dd5c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd5c  0800dd5c  0001dd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd64  0800dd64  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd64  0800dd64  0001dd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd68  0800dd68  0001dd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800dd6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007abc  200001ec  0800df58  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007ca8  0800df58  00027ca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004142e  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000662c  00000000  00000000  0006164a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002aa0  00000000  00000000  00067c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001f39b  00000000  00000000  0006a718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002cec1  00000000  00000000  00089ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b26f2  00000000  00000000  000b6974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00169066  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00002810  00000000  00000000  001690c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b5a4  00000000  00000000  0016b8d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dbb0 	.word	0x0800dbb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800dbb0 	.word	0x0800dbb0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <ADC_Select>:
#include "adc.h"

extern ADC_HandleTypeDef hadc1;

void ADC_Select(adc_source_t channel)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef sConfig = {0};
 80004e2:	f107 0308 	add.w	r3, r7, #8
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = (uint32_t)channel;
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = 1;
 80004f4:	2301      	movs	r3, #1
 80004f6:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80004f8:	2303      	movs	r3, #3
 80004fa:	613b      	str	r3, [r7, #16]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 80004fc:	f107 0308 	add.w	r3, r7, #8
 8000500:	4619      	mov	r1, r3
 8000502:	4804      	ldr	r0, [pc, #16]	; (8000514 <ADC_Select+0x3c>)
 8000504:	f002 f9fc 	bl	8002900 <HAL_ADC_ConfigChannel>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
	    return;
	  }
}
 800050c:	3718      	adds	r7, #24
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20005a24 	.word	0x20005a24

08000518 <ADC_Get>:

uint32_t ADC_Get(adc_source_t channel){
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
	uint32_t value;
	ADC_Select(channel);
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff ffd7 	bl	80004d8 <ADC_Select>
	HAL_ADC_Start(&hadc1);
 800052a:	480a      	ldr	r0, [pc, #40]	; (8000554 <ADC_Get+0x3c>)
 800052c:	f002 f868 	bl	8002600 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000530:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000534:	4807      	ldr	r0, [pc, #28]	; (8000554 <ADC_Get+0x3c>)
 8000536:	f002 f94a 	bl	80027ce <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(&hadc1);
 800053a:	4806      	ldr	r0, [pc, #24]	; (8000554 <ADC_Get+0x3c>)
 800053c:	f002 f9d2 	bl	80028e4 <HAL_ADC_GetValue>
 8000540:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(&hadc1);
 8000542:	4804      	ldr	r0, [pc, #16]	; (8000554 <ADC_Get+0x3c>)
 8000544:	f002 f910 	bl	8002768 <HAL_ADC_Stop>
	return value;
 8000548:	68fb      	ldr	r3, [r7, #12]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20005a24 	.word	0x20005a24

08000558 <dcdc_set_voltage>:

#define DCDC_SPI_HANDLE hspi2

static float voltage = 0;

void dcdc_set_voltage(float volt){
 8000558:	b580      	push	{r7, lr}
 800055a:	ed2d 8b02 	vpush	{d8}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t r_value;
	if(volt > 12.2f) volt = 12.2f;
 8000566:	edd7 7a01 	vldr	s15, [r7, #4]
 800056a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000630 <dcdc_set_voltage+0xd8>
 800056e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000576:	dd02      	ble.n	800057e <dcdc_set_voltage+0x26>
 8000578:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <dcdc_set_voltage+0xdc>)
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	e00a      	b.n	8000594 <dcdc_set_voltage+0x3c>
	else if(volt < 5.2f) volt = 5.2f;
 800057e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000582:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000638 <dcdc_set_voltage+0xe0>
 8000586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800058a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800058e:	d501      	bpl.n	8000594 <dcdc_set_voltage+0x3c>
 8000590:	4b2a      	ldr	r3, [pc, #168]	; (800063c <dcdc_set_voltage+0xe4>)
 8000592:	607b      	str	r3, [r7, #4]

	voltage = volt;
 8000594:	4a2a      	ldr	r2, [pc, #168]	; (8000640 <dcdc_set_voltage+0xe8>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]

	// Cubic least square fit
	// https://www.wolframalpha.com/input?i=cubic+fit+%7B12.2%2C0%7D%2C%7B11.48%2C10%7D%2C%7B8.83%2C64%7D%2C%7B7.04%2C128%7D%2C%7B6.43%2C160%7D%2C%7B5.21%2C255%7D
	r_value = -0.791728f * powf(voltage, 3) + 25.66f * powf(voltage, 2) - 293.662f * voltage + 1199.67f;
 800059a:	4b29      	ldr	r3, [pc, #164]	; (8000640 <dcdc_set_voltage+0xe8>)
 800059c:	edd3 7a00 	vldr	s15, [r3]
 80005a0:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80005a4:	eeb0 0a67 	vmov.f32	s0, s15
 80005a8:	f00c febe 	bl	800d328 <powf>
 80005ac:	eef0 7a40 	vmov.f32	s15, s0
 80005b0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000644 <dcdc_set_voltage+0xec>
 80005b4:	ee27 8a87 	vmul.f32	s16, s15, s14
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <dcdc_set_voltage+0xe8>)
 80005ba:	edd3 7a00 	vldr	s15, [r3]
 80005be:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80005c2:	eeb0 0a67 	vmov.f32	s0, s15
 80005c6:	f00c feaf 	bl	800d328 <powf>
 80005ca:	eef0 7a40 	vmov.f32	s15, s0
 80005ce:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000648 <dcdc_set_voltage+0xf0>
 80005d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005d6:	ee38 7a27 	vadd.f32	s14, s16, s15
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <dcdc_set_voltage+0xe8>)
 80005dc:	edd3 7a00 	vldr	s15, [r3]
 80005e0:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800064c <dcdc_set_voltage+0xf4>
 80005e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80005e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005ec:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000650 <dcdc_set_voltage+0xf8>
 80005f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005f8:	edc7 7a00 	vstr	s15, [r7]
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(R_CS_GPIO_Port, R_CS_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2110      	movs	r1, #16
 8000606:	4813      	ldr	r0, [pc, #76]	; (8000654 <dcdc_set_voltage+0xfc>)
 8000608:	f002 fe58 	bl	80032bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&DCDC_SPI_HANDLE, &r_value, 1, 2);
 800060c:	f107 010f 	add.w	r1, r7, #15
 8000610:	2302      	movs	r3, #2
 8000612:	2201      	movs	r2, #1
 8000614:	4810      	ldr	r0, [pc, #64]	; (8000658 <dcdc_set_voltage+0x100>)
 8000616:	f004 fd62 	bl	80050de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(R_CS_GPIO_Port, R_CS_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	2110      	movs	r1, #16
 800061e:	480d      	ldr	r0, [pc, #52]	; (8000654 <dcdc_set_voltage+0xfc>)
 8000620:	f002 fe4c 	bl	80032bc <HAL_GPIO_WritePin>
}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	ecbd 8b02 	vpop	{d8}
 800062e:	bd80      	pop	{r7, pc}
 8000630:	41433333 	.word	0x41433333
 8000634:	41433333 	.word	0x41433333
 8000638:	40a66666 	.word	0x40a66666
 800063c:	40a66666 	.word	0x40a66666
 8000640:	20000208 	.word	0x20000208
 8000644:	bf4aaeb0 	.word	0xbf4aaeb0
 8000648:	41cd47ae 	.word	0x41cd47ae
 800064c:	4392d4bc 	.word	0x4392d4bc
 8000650:	4495f571 	.word	0x4495f571
 8000654:	40020000 	.word	0x40020000
 8000658:	20005184 	.word	0x20005184

0800065c <go_to_sleep>:
#include "main.h"
#include "sleep.h"

void go_to_sleep(){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000666:	480e      	ldr	r0, [pc, #56]	; (80006a0 <go_to_sleep+0x44>)
 8000668:	f002 fe28 	bl	80032bc <HAL_GPIO_WritePin>

	while((HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0));
 800066c:	bf00      	nop
 800066e:	2104      	movs	r1, #4
 8000670:	480c      	ldr	r0, [pc, #48]	; (80006a4 <go_to_sleep+0x48>)
 8000672:	f002 fe0b 	bl	800328c <HAL_GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d0f8      	beq.n	800066e <go_to_sleep+0x12>
	HAL_Delay(10);
 800067c:	200a      	movs	r0, #10
 800067e:	f001 ff57 	bl	8002530 <HAL_Delay>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000682:	2008      	movs	r0, #8
 8000684:	f002 fc62 	bl	8002f4c <HAL_NVIC_EnableIRQ>
	/* Disable Systick interrupt */
	HAL_SuspendTick();
 8000688:	f000 fe50 	bl	800132c <HAL_SuspendTick>

    /* Go to sleep */
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800068c:	2101      	movs	r1, #1
 800068e:	2001      	movs	r0, #1
 8000690:	f003 ffca 	bl	8004628 <HAL_PWR_EnterSTOPMode>

    /* Return from sleep */
    SystemClock_Config();
 8000694:	f000 f92e 	bl	80008f4 <SystemClock_Config>
    HAL_ResumeTick();
 8000698:	f000 fe5a 	bl	8001350 <HAL_ResumeTick>

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40020800 	.word	0x40020800
 80006a4:	40020000 	.word	0x40020000

080006a8 <wake_up>:

void wake_up(){
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
	/* Clear Wake Up Flag */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <wake_up+0x1c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <wake_up+0x1c>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6013      	str	r3, [r2, #0]
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40007000 	.word	0x40007000

080006c8 <platform_write>:
                             uint16_t len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	607a      	str	r2, [r7, #4]
 80006d2:	461a      	mov	r2, r3
 80006d4:	460b      	mov	r3, r1
 80006d6:	72fb      	strb	r3, [r7, #11]
 80006d8:	4613      	mov	r3, r2
 80006da:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2104      	movs	r1, #4
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <platform_write+0x4c>)
 80006e2:	f002 fdeb 	bl	80032bc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 2);
 80006e6:	f107 010b 	add.w	r1, r7, #11
 80006ea:	2302      	movs	r3, #2
 80006ec:	2201      	movs	r2, #1
 80006ee:	68f8      	ldr	r0, [r7, #12]
 80006f0:	f004 fcf5 	bl	80050de <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 2);
 80006f4:	893a      	ldrh	r2, [r7, #8]
 80006f6:	2302      	movs	r3, #2
 80006f8:	6879      	ldr	r1, [r7, #4]
 80006fa:	68f8      	ldr	r0, [r7, #12]
 80006fc:	f004 fcef 	bl	80050de <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2104      	movs	r1, #4
 8000704:	4803      	ldr	r0, [pc, #12]	; (8000714 <platform_write+0x4c>)
 8000706:	f002 fdd9 	bl	80032bc <HAL_GPIO_WritePin>
  return 0;
 800070a:	2300      	movs	r3, #0
}
 800070c:	4618      	mov	r0, r3
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40020400 	.word	0x40020400

08000718 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	461a      	mov	r2, r3
 8000724:	460b      	mov	r3, r1
 8000726:	72fb      	strb	r3, [r7, #11]
 8000728:	4613      	mov	r3, r2
 800072a:	813b      	strh	r3, [r7, #8]
  reg |= 0x80;
 800072c:	7afb      	ldrb	r3, [r7, #11]
 800072e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000732:	b2db      	uxtb	r3, r3
 8000734:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2104      	movs	r1, #4
 800073a:	480e      	ldr	r0, [pc, #56]	; (8000774 <platform_read+0x5c>)
 800073c:	f002 fdbe 	bl	80032bc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000740:	f107 010b 	add.w	r1, r7, #11
 8000744:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000748:	2201      	movs	r2, #1
 800074a:	68f8      	ldr	r0, [r7, #12]
 800074c:	f004 fcc7 	bl	80050de <HAL_SPI_Transmit>
  HAL_SPI_Receive(handle, bufp, len, 1000);
 8000750:	893a      	ldrh	r2, [r7, #8]
 8000752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	68f8      	ldr	r0, [r7, #12]
 800075a:	f004 fdfc 	bl	8005356 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	2104      	movs	r1, #4
 8000762:	4804      	ldr	r0, [pc, #16]	; (8000774 <platform_read+0x5c>)
 8000764:	f002 fdaa 	bl	80032bc <HAL_GPIO_WritePin>
  return 0;
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40020400 	.word	0x40020400

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077e:	f001 fe95 	bl	80024ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000782:	f000 f8b7 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000786:	f000 fa6d 	bl	8000c64 <MX_GPIO_Init>
  MX_ADC1_Init();
 800078a:	f000 f91b 	bl	80009c4 <MX_ADC1_Init>
  MX_TIM4_Init();
 800078e:	f000 f9e5 	bl	8000b5c <MX_TIM4_Init>
  MX_SPI1_Init();
 8000792:	f000 f977 	bl	8000a84 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000796:	f000 f9ab 	bl	8000af0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800079a:	f000 fa39 	bl	8000c10 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800079e:	2008      	movs	r0, #8
 80007a0:	f002 fbe2 	bl	8002f68 <HAL_NVIC_DisableIRQ>



  HAL_GPIO_WritePin(P_EN_CUT_GPIO_Port, P_EN_CUT_Pin, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007aa:	483e      	ldr	r0, [pc, #248]	; (80008a4 <main+0x12c>)
 80007ac:	f002 fd86 	bl	80032bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CUT_EN_GPIO_Port, CUT_EN_Pin, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2120      	movs	r1, #32
 80007b4:	483b      	ldr	r0, [pc, #236]	; (80008a4 <main+0x12c>)
 80007b6:	f002 fd81 	bl	80032bc <HAL_GPIO_WritePin>

  dev_ctx.write_reg = platform_write;
 80007ba:	4b3b      	ldr	r3, [pc, #236]	; (80008a8 <main+0x130>)
 80007bc:	4a3b      	ldr	r2, [pc, #236]	; (80008ac <main+0x134>)
 80007be:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 80007c0:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <main+0x130>)
 80007c2:	4a3b      	ldr	r2, [pc, #236]	; (80008b0 <main+0x138>)
 80007c4:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &hspi1;
 80007c6:	4b38      	ldr	r3, [pc, #224]	; (80008a8 <main+0x130>)
 80007c8:	4a3a      	ldr	r2, [pc, #232]	; (80008b4 <main+0x13c>)
 80007ca:	609a      	str	r2, [r3, #8]

  uint8_t whoamI;
  lsm6dsr_pin_int1_route_t int1_route;

  lsm6dsr_device_id_get(&dev_ctx, &whoamI);
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	4619      	mov	r1, r3
 80007d0:	4835      	ldr	r0, [pc, #212]	; (80008a8 <main+0x130>)
 80007d2:	f001 f9b0 	bl	8001b36 <lsm6dsr_device_id_get>

  if (whoamI != LSM6DSR_ID)
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b6b      	cmp	r3, #107	; 0x6b
 80007da:	d000      	beq.n	80007de <main+0x66>
      while (1);
 80007dc:	e7fe      	b.n	80007dc <main+0x64>

  lsm6dsr_reset_set(&dev_ctx, PROPERTY_ENABLE);
 80007de:	2101      	movs	r1, #1
 80007e0:	4831      	ldr	r0, [pc, #196]	; (80008a8 <main+0x130>)
 80007e2:	f001 f9b9 	bl	8001b58 <lsm6dsr_reset_set>
  HAL_Delay(10);
 80007e6:	200a      	movs	r0, #10
 80007e8:	f001 fea2 	bl	8002530 <HAL_Delay>

  /* Disable I3C interface */
  lsm6dsr_i3c_disable_set(&dev_ctx, LSM6DSR_I3C_DISABLE);
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	482e      	ldr	r0, [pc, #184]	; (80008a8 <main+0x130>)
 80007f0:	f001 f9fe 	bl	8001bf0 <lsm6dsr_i3c_disable_set>

  /* Enable Block Data Update */
  lsm6dsr_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80007f4:	2101      	movs	r1, #1
 80007f6:	482c      	ldr	r0, [pc, #176]	; (80008a8 <main+0x130>)
 80007f8:	f001 f898 	bl	800192c <lsm6dsr_block_data_update_set>
  /* Set Output Data Rate */
  lsm6dsr_xl_data_rate_set(&dev_ctx, LSM6DSR_XL_ODR_12Hz5);
 80007fc:	2101      	movs	r1, #1
 80007fe:	482a      	ldr	r0, [pc, #168]	; (80008a8 <main+0x130>)
 8000800:	f000 fe76 	bl	80014f0 <lsm6dsr_xl_data_rate_set>
  lsm6dsr_gy_data_rate_set(&dev_ctx, LSM6DSR_GY_ODR_12Hz5);
 8000804:	2101      	movs	r1, #1
 8000806:	4828      	ldr	r0, [pc, #160]	; (80008a8 <main+0x130>)
 8000808:	f000 ff94 	bl	8001734 <lsm6dsr_gy_data_rate_set>
  /* Set full scale */
  lsm6dsr_xl_full_scale_set(&dev_ctx, LSM6DSR_16g);
 800080c:	2101      	movs	r1, #1
 800080e:	4826      	ldr	r0, [pc, #152]	; (80008a8 <main+0x130>)
 8000810:	f000 fe48 	bl	80014a4 <lsm6dsr_xl_full_scale_set>
  lsm6dsr_gy_full_scale_set(&dev_ctx, LSM6DSR_2000dps);
 8000814:	210c      	movs	r1, #12
 8000816:	4824      	ldr	r0, [pc, #144]	; (80008a8 <main+0x130>)
 8000818:	f000 ff66 	bl	80016e8 <lsm6dsr_gy_full_scale_set>
  */
  //lsm6dsr_xl_hp_path_on_out_set(&dev_ctx, LSM6DSR_LP_ODR_DIV_100);
  //lsm6dsr_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);

  /* Apply high-pass digital filter on Wake-Up function */
  lsm6dsr_xl_hp_path_internal_set(&dev_ctx, LSM6DSR_USE_SLOPE);
 800081c:	2100      	movs	r1, #0
 800081e:	4822      	ldr	r0, [pc, #136]	; (80008a8 <main+0x130>)
 8000820:	f001 f9c0 	bl	8001ba4 <lsm6dsr_xl_hp_path_internal_set>
  /* Set Wake-Up threshold: 1 LSb corresponds to FS_XL/2^6 */
  lsm6dsr_wkup_threshold_set(&dev_ctx, 2);
 8000824:	2102      	movs	r1, #2
 8000826:	4820      	ldr	r0, [pc, #128]	; (80008a8 <main+0x130>)
 8000828:	f001 fbdb 	bl	8001fe2 <lsm6dsr_wkup_threshold_set>

  /* interrupt generation on Wake-Up INT1 pin */
  lsm6dsr_pin_int1_route_get(&dev_ctx, &int1_route);
 800082c:	463b      	mov	r3, r7
 800082e:	4619      	mov	r1, r3
 8000830:	481d      	ldr	r0, [pc, #116]	; (80008a8 <main+0x130>)
 8000832:	f001 fb89 	bl	8001f48 <lsm6dsr_pin_int1_route_get>
  int1_route.md1_cfg.int1_wu = PROPERTY_ENABLE;
 8000836:	787b      	ldrb	r3, [r7, #1]
 8000838:	f043 0320 	orr.w	r3, r3, #32
 800083c:	707b      	strb	r3, [r7, #1]
  lsm6dsr_pin_int1_route_set(&dev_ctx, &int1_route);
 800083e:	463b      	mov	r3, r7
 8000840:	4619      	mov	r1, r3
 8000842:	4819      	ldr	r0, [pc, #100]	; (80008a8 <main+0x130>)
 8000844:	f001 fa1a 	bl	8001c7c <lsm6dsr_pin_int1_route_set>



  fifo_init(&usb_output_fifo, usb_fifo_out_buffer, USB_OUTPUT_BUFFER_SIZE);
 8000848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800084c:	491a      	ldr	r1, [pc, #104]	; (80008b8 <main+0x140>)
 800084e:	481b      	ldr	r0, [pc, #108]	; (80008bc <main+0x144>)
 8000850:	f001 fce4 	bl	800221c <fifo_init>
  fifo_init(&usb_input_fifo, usb_fifo_in_buffer, USB_INPUT_BUFFER_SIZE);
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	4919      	ldr	r1, [pc, #100]	; (80008c0 <main+0x148>)
 800085a:	481a      	ldr	r0, [pc, #104]	; (80008c4 <main+0x14c>)
 800085c:	f001 fcde 	bl	800221c <fifo_init>
  //dcdc_enable();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000860:	f009 f94c 	bl	8009afc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000864:	4a18      	ldr	r2, [pc, #96]	; (80008c8 <main+0x150>)
 8000866:	2100      	movs	r1, #0
 8000868:	4818      	ldr	r0, [pc, #96]	; (80008cc <main+0x154>)
 800086a:	f009 f9af 	bl	8009bcc <osThreadNew>
 800086e:	4603      	mov	r3, r0
 8000870:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <main+0x158>)
 8000872:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadNew(task_sensor_read, NULL, &task_sensor_read_attributes);
 8000874:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <main+0x15c>)
 8000876:	2100      	movs	r1, #0
 8000878:	4817      	ldr	r0, [pc, #92]	; (80008d8 <main+0x160>)
 800087a:	f009 f9a7 	bl	8009bcc <osThreadNew>
  osThreadNew(task_fsm, NULL, &task_fsm_attributes);
 800087e:	4a17      	ldr	r2, [pc, #92]	; (80008dc <main+0x164>)
 8000880:	2100      	movs	r1, #0
 8000882:	4817      	ldr	r0, [pc, #92]	; (80008e0 <main+0x168>)
 8000884:	f009 f9a2 	bl	8009bcc <osThreadNew>
  osThreadNew(task_heater, NULL, &task_heater_attributes);
 8000888:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <main+0x16c>)
 800088a:	2100      	movs	r1, #0
 800088c:	4816      	ldr	r0, [pc, #88]	; (80008e8 <main+0x170>)
 800088e:	f009 f99d 	bl	8009bcc <osThreadNew>
  osThreadNew(task_state_est, NULL, &task_state_est_attributes);
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <main+0x174>)
 8000894:	2100      	movs	r1, #0
 8000896:	4816      	ldr	r0, [pc, #88]	; (80008f0 <main+0x178>)
 8000898:	f009 f998 	bl	8009bcc <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800089c:	f009 f952 	bl	8009b44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <main+0x128>
 80008a2:	bf00      	nop
 80008a4:	40020400 	.word	0x40020400
 80008a8:	2000020c 	.word	0x2000020c
 80008ac:	080006c9 	.word	0x080006c9
 80008b0:	08000719 	.word	0x08000719
 80008b4:	20006fc4 	.word	0x20006fc4
 80008b8:	20004f68 	.word	0x20004f68
 80008bc:	20005168 	.word	0x20005168
 80008c0:	20004d50 	.word	0x20004d50
 80008c4:	20004f50 	.word	0x20004f50
 80008c8:	0800dc6c 	.word	0x0800dc6c
 80008cc:	08000e35 	.word	0x08000e35
 80008d0:	20005180 	.word	0x20005180
 80008d4:	0800dc90 	.word	0x0800dc90
 80008d8:	080021ad 	.word	0x080021ad
 80008dc:	0800dcb4 	.word	0x0800dcb4
 80008e0:	08002119 	.word	0x08002119
 80008e4:	0800dcfc 	.word	0x0800dcfc
 80008e8:	08002169 	.word	0x08002169
 80008ec:	0800dcd8 	.word	0x0800dcd8
 80008f0:	080021e5 	.word	0x080021e5

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	; 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0320 	add.w	r3, r7, #32
 80008fe:	2230      	movs	r2, #48	; 0x30
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f00c fd08 	bl	800d318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <SystemClock_Config+0xc8>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a26      	ldr	r2, [pc, #152]	; (80009bc <SystemClock_Config+0xc8>)
 8000922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b24      	ldr	r3, [pc, #144]	; (80009bc <SystemClock_Config+0xc8>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <SystemClock_Config+0xcc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a20      	ldr	r2, [pc, #128]	; (80009c0 <SystemClock_Config+0xcc>)
 800093e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <SystemClock_Config+0xcc>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	2302      	movs	r3, #2
 800095c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000962:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000964:	2304      	movs	r3, #4
 8000966:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000968:	2360      	movs	r3, #96	; 0x60
 800096a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800096c:	2306      	movs	r3, #6
 800096e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000970:	2304      	movs	r3, #4
 8000972:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0320 	add.w	r3, r7, #32
 8000978:	4618      	mov	r0, r3
 800097a:	f003 fe81 	bl	8004680 <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000984:	f000 fae2 	bl	8000f4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	230f      	movs	r3, #15
 800098a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098c:	2302      	movs	r3, #2
 800098e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000998:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f004 f8e3 	bl	8004b70 <HAL_RCC_ClockConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009b0:	f000 facc 	bl	8000f4c <Error_Handler>
  }
}
 80009b4:	bf00      	nop
 80009b6:	3750      	adds	r7, #80	; 0x50
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40007000 	.word	0x40007000

080009c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ca:	463b      	mov	r3, r7
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009d6:	4b28      	ldr	r3, [pc, #160]	; (8000a78 <MX_ADC1_Init+0xb4>)
 80009d8:	4a28      	ldr	r2, [pc, #160]	; (8000a7c <MX_ADC1_Init+0xb8>)
 80009da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009dc:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <MX_ADC1_Init+0xb4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009e2:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <MX_ADC1_Init+0xb4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009e8:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <MX_ADC1_Init+0xb4>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009ee:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <MX_ADC1_Init+0xb4>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009f4:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <MX_ADC1_Init+0xb4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <MX_ADC1_Init+0xb4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a02:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_ADC1_Init+0xb4>)
 8000a04:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <MX_ADC1_Init+0xbc>)
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_ADC1_Init+0xb4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_ADC1_Init+0xb4>)
 8000a10:	2202      	movs	r2, #2
 8000a12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_ADC1_Init+0xb4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_ADC1_Init+0xb4>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a22:	4815      	ldr	r0, [pc, #84]	; (8000a78 <MX_ADC1_Init+0xb4>)
 8000a24:	f001 fda8 	bl	8002578 <HAL_ADC_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a2e:	f000 fa8d 	bl	8000f4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a3e:	463b      	mov	r3, r7
 8000a40:	4619      	mov	r1, r3
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_ADC1_Init+0xb4>)
 8000a44:	f001 ff5c 	bl	8002900 <HAL_ADC_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a4e:	f000 fa7d 	bl	8000f4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a52:	2301      	movs	r3, #1
 8000a54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a56:	2302      	movs	r3, #2
 8000a58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4806      	ldr	r0, [pc, #24]	; (8000a78 <MX_ADC1_Init+0xb4>)
 8000a60:	f001 ff4e 	bl	8002900 <HAL_ADC_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000a6a:	f000 fa6f 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20005a24 	.word	0x20005a24
 8000a7c:	40012000 	.word	0x40012000
 8000a80:	0f000001 	.word	0x0f000001

08000a84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a8a:	4a18      	ldr	r2, [pc, #96]	; (8000aec <MX_SPI1_Init+0x68>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ad0:	220a      	movs	r2, #10
 8000ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ad6:	f004 fa79 	bl	8004fcc <HAL_SPI_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ae0:	f000 fa34 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20006fc4 	.word	0x20006fc4
 8000aec:	40013000 	.word	0x40013000

08000af0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000af6:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <MX_SPI2_Init+0x68>)
 8000af8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000afc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b00:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b20:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b3c:	220a      	movs	r2, #10
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_SPI2_Init+0x64>)
 8000b42:	f004 fa43 	bl	8004fcc <HAL_SPI_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b4c:	f000 f9fe 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20005184 	.word	0x20005184
 8000b58:	40003800 	.word	0x40003800

08000b5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b62:	f107 0320 	add.w	r3, r7, #32
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
 8000b7a:	615a      	str	r2, [r3, #20]
 8000b7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b7e:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <MX_TIM4_Init+0xac>)
 8000b80:	4a22      	ldr	r2, [pc, #136]	; (8000c0c <MX_TIM4_Init+0xb0>)
 8000b82:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16;
 8000b84:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <MX_TIM4_Init+0xac>)
 8000b86:	2210      	movs	r2, #16
 8000b88:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <MX_TIM4_Init+0xac>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 8000b90:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MX_TIM4_Init+0xac>)
 8000b92:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b96:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_TIM4_Init+0xac>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_TIM4_Init+0xac>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ba4:	4818      	ldr	r0, [pc, #96]	; (8000c08 <MX_TIM4_Init+0xac>)
 8000ba6:	f005 f875 	bl	8005c94 <HAL_TIM_PWM_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000bb0:	f000 f9cc 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bbc:	f107 0320 	add.w	r3, r7, #32
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4811      	ldr	r0, [pc, #68]	; (8000c08 <MX_TIM4_Init+0xac>)
 8000bc4:	f005 fcb4 	bl	8006530 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000bce:	f000 f9bd 	bl	8000f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd2:	2360      	movs	r3, #96	; 0x60
 8000bd4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 8000bd6:	23fa      	movs	r3, #250	; 0xfa
 8000bd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	4619      	mov	r1, r3
 8000be8:	4807      	ldr	r0, [pc, #28]	; (8000c08 <MX_TIM4_Init+0xac>)
 8000bea:	f005 f9ab 	bl	8005f44 <HAL_TIM_PWM_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000bf4:	f000 f9aa 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000bf8:	4803      	ldr	r0, [pc, #12]	; (8000c08 <MX_TIM4_Init+0xac>)
 8000bfa:	f000 fabd 	bl	8001178 <HAL_TIM_MspPostInit>

}
 8000bfe:	bf00      	nop
 8000c00:	3728      	adds	r7, #40	; 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200051dc 	.word	0x200051dc
 8000c0c:	40000800 	.word	0x40000800

08000c10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_USART1_UART_Init+0x4c>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <MX_USART1_UART_Init+0x50>)
 8000c18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <MX_USART1_UART_Init+0x4c>)
 8000c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_USART1_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_USART1_UART_Init+0x4c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_USART1_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_USART1_UART_Init+0x4c>)
 8000c36:	220c      	movs	r2, #12
 8000c38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_USART1_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_USART1_UART_Init+0x4c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_USART1_UART_Init+0x4c>)
 8000c48:	f005 fcf4 	bl	8006634 <HAL_UART_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c52:	f000 f97b 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000626c 	.word	0x2000626c
 8000c60:	40011000 	.word	0x40011000

08000c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b5d      	ldr	r3, [pc, #372]	; (8000df4 <MX_GPIO_Init+0x190>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a5c      	ldr	r2, [pc, #368]	; (8000df4 <MX_GPIO_Init+0x190>)
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b5a      	ldr	r3, [pc, #360]	; (8000df4 <MX_GPIO_Init+0x190>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b56      	ldr	r3, [pc, #344]	; (8000df4 <MX_GPIO_Init+0x190>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a55      	ldr	r2, [pc, #340]	; (8000df4 <MX_GPIO_Init+0x190>)
 8000ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b53      	ldr	r3, [pc, #332]	; (8000df4 <MX_GPIO_Init+0x190>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	4b4f      	ldr	r3, [pc, #316]	; (8000df4 <MX_GPIO_Init+0x190>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a4e      	ldr	r2, [pc, #312]	; (8000df4 <MX_GPIO_Init+0x190>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b4c      	ldr	r3, [pc, #304]	; (8000df4 <MX_GPIO_Init+0x190>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4b48      	ldr	r3, [pc, #288]	; (8000df4 <MX_GPIO_Init+0x190>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a47      	ldr	r2, [pc, #284]	; (8000df4 <MX_GPIO_Init+0x190>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b45      	ldr	r3, [pc, #276]	; (8000df4 <MX_GPIO_Init+0x190>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf0:	4841      	ldr	r0, [pc, #260]	; (8000df8 <MX_GPIO_Init+0x194>)
 8000cf2:	f002 fae3 	bl	80032bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TC_CS_Pin|R_CS_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2118      	movs	r1, #24
 8000cfa:	4840      	ldr	r0, [pc, #256]	; (8000dfc <MX_GPIO_Init+0x198>)
 8000cfc:	f002 fade 	bl	80032bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BARO_CS_Pin|IMU_CS_Pin|DCDC_EN_Pin|CUT_EN_Pin
 8000d00:	2200      	movs	r2, #0
 8000d02:	f240 31b6 	movw	r1, #950	; 0x3b6
 8000d06:	483e      	ldr	r0, [pc, #248]	; (8000e00 <MX_GPIO_Init+0x19c>)
 8000d08:	f002 fad8 	bl	80032bc <HAL_GPIO_WritePin>
                          |P_EN_LIGHT_Pin|P_EN_CUT_Pin|P_EN_RADIO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4834      	ldr	r0, [pc, #208]	; (8000df8 <MX_GPIO_Init+0x194>)
 8000d26:	f002 f92d 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	482f      	ldr	r0, [pc, #188]	; (8000dfc <MX_GPIO_Init+0x198>)
 8000d40:	f002 f920 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_CS_Pin R_CS_Pin */
  GPIO_InitStruct.Pin = TC_CS_Pin|R_CS_Pin;
 8000d44:	2318      	movs	r3, #24
 8000d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4828      	ldr	r0, [pc, #160]	; (8000dfc <MX_GPIO_Init+0x198>)
 8000d5c:	f002 f912 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_INT_Pin */
  GPIO_InitStruct.Pin = RF_INT_Pin;
 8000d60:	2301      	movs	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_INT_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	4823      	ldr	r0, [pc, #140]	; (8000e00 <MX_GPIO_Init+0x19c>)
 8000d74:	f002 f906 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : BARO_CS_Pin IMU_CS_Pin DCDC_EN_Pin CUT_EN_Pin
                           P_EN_LIGHT_Pin P_EN_CUT_Pin P_EN_RADIO_Pin */
  GPIO_InitStruct.Pin = BARO_CS_Pin|IMU_CS_Pin|DCDC_EN_Pin|CUT_EN_Pin
 8000d78:	f240 33b6 	movw	r3, #950	; 0x3b6
 8000d7c:	617b      	str	r3, [r7, #20]
                          |P_EN_LIGHT_Pin|P_EN_CUT_Pin|P_EN_RADIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	481b      	ldr	r0, [pc, #108]	; (8000e00 <MX_GPIO_Init+0x19c>)
 8000d92:	f002 f8f7 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|IMU_INT1_Pin;
 8000d96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	4814      	ldr	r0, [pc, #80]	; (8000e00 <MX_GPIO_Init+0x19c>)
 8000dae:	f002 f8e9 	bl	8002f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DET_Pin CHRG_Pin */
  GPIO_InitStruct.Pin = USB_DET_Pin|CHRG_Pin;
 8000db2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480d      	ldr	r0, [pc, #52]	; (8000dfc <MX_GPIO_Init+0x198>)
 8000dc8:	f002 f8dc 	bl	8002f84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2105      	movs	r1, #5
 8000dd0:	2008      	movs	r0, #8
 8000dd2:	f002 f89f 	bl	8002f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000dd6:	2008      	movs	r0, #8
 8000dd8:	f002 f8b8 	bl	8002f4c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2105      	movs	r1, #5
 8000de0:	2028      	movs	r0, #40	; 0x28
 8000de2:	f002 f897 	bl	8002f14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000de6:	2028      	movs	r0, #40	; 0x28
 8000de8:	f002 f8b0 	bl	8002f4c <HAL_NVIC_EnableIRQ>

}
 8000dec:	bf00      	nop
 8000dee:	3728      	adds	r7, #40	; 0x28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020800 	.word	0x40020800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020400 	.word	0x40020400

08000e04 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80fb      	strh	r3, [r7, #6]
  wake_up();
 8000e0e:	f7ff fc4b 	bl	80006a8 <wake_up>
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e12:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_GPIO_EXTI_Callback+0x28>)
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	6153      	str	r3, [r2, #20]

 lsm6dsr_all_sources_t all_source;
 /* Check if Wake-Up events */
 lsm6dsr_all_sources_get(&dev_ctx, &all_source);
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4804      	ldr	r0, [pc, #16]	; (8000e30 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000e20:	f000 fdaa 	bl	8001978 <lsm6dsr_all_sources_get>

 if (all_source.wake_up_src.wu_ia){

 }

}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40013c00 	.word	0x40013c00
 8000e30:	2000020c 	.word	0x2000020c

08000e34 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b091      	sub	sp, #68	; 0x44
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000e3c:	f00b fc86 	bl	800c74c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  int counter = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Infinite loop */
  for(;;)
  {
	  uint32_t value[2];
	  value[0] = ADC_Get(BATTERY);
 8000e44:	2000      	movs	r0, #0
 8000e46:	f7ff fb67 	bl	8000518 <ADC_Get>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	637b      	str	r3, [r7, #52]	; 0x34
	  value[1] = ADC_Get(LIGHT);
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f7ff fb62 	bl	8000518 <ADC_Get>
 8000e54:	4603      	mov	r3, r0
 8000e56:	63bb      	str	r3, [r7, #56]	; 0x38



	  if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0){
 8000e58:	2104      	movs	r1, #4
 8000e5a:	4829      	ldr	r0, [pc, #164]	; (8000f00 <StartDefaultTask+0xcc>)
 8000e5c:	f002 fa16 	bl	800328c <HAL_GPIO_ReadPin>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d103      	bne.n	8000e6e <StartDefaultTask+0x3a>
		  counter++;
 8000e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e68:	3301      	adds	r3, #1
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e6c:	e001      	b.n	8000e72 <StartDefaultTask+0x3e>
	  } else {
		  counter = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	63fb      	str	r3, [r7, #60]	; 0x3c
	  }

	  if(value[1] > 100){
 8000e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e74:	2b64      	cmp	r3, #100	; 0x64
 8000e76:	d906      	bls.n	8000e86 <StartDefaultTask+0x52>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e7e:	4821      	ldr	r0, [pc, #132]	; (8000f04 <StartDefaultTask+0xd0>)
 8000e80:	f002 fa1c 	bl	80032bc <HAL_GPIO_WritePin>
 8000e84:	e005      	b.n	8000e92 <StartDefaultTask+0x5e>
	  } else {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8c:	481d      	ldr	r0, [pc, #116]	; (8000f04 <StartDefaultTask+0xd0>)
 8000e8e:	f002 fa15 	bl	80032bc <HAL_GPIO_WritePin>
	  }
	  if(counter == 30){
 8000e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e94:	2b1e      	cmp	r3, #30
 8000e96:	d101      	bne.n	8000e9c <StartDefaultTask+0x68>
		  go_to_sleep();
 8000e98:	f7ff fbe0 	bl	800065c <go_to_sleep>
	  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
	  int16_t data_raw_acceleration[3];
	  float acceleration_mg[3];
	  int16_t data_raw_angular_rate[3];

	  lsm6dsr_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8000e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4819      	ldr	r0, [pc, #100]	; (8000f08 <StartDefaultTask+0xd4>)
 8000ea4:	f000 fdd6 	bl	8001a54 <lsm6dsr_acceleration_raw_get>
	  acceleration_mg[0] = lsm6dsr_from_fs16g_to_mg(data_raw_acceleration[0]);
 8000ea8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 fae1 	bl	8001474 <lsm6dsr_from_fs16g_to_mg>
 8000eb2:	eef0 7a40 	vmov.f32	s15, s0
 8000eb6:	edc7 7a08 	vstr	s15, [r7, #32]
	  acceleration_mg[1] = lsm6dsr_from_fs16g_to_mg(data_raw_acceleration[1]);
 8000eba:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 fad8 	bl	8001474 <lsm6dsr_from_fs16g_to_mg>
 8000ec4:	eef0 7a40 	vmov.f32	s15, s0
 8000ec8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  acceleration_mg[2] =  lsm6dsr_from_fs16g_to_mg(data_raw_acceleration[2]);
 8000ecc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 facf 	bl	8001474 <lsm6dsr_from_fs16g_to_mg>
 8000ed6:	eef0 7a40 	vmov.f32	s15, s0
 8000eda:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28



	  uint8_t hello[] = "hello from usb\n";
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <StartDefaultTask+0xd8>)
 8000ee0:	f107 0408 	add.w	r4, r7, #8
 8000ee4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ee6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  fifo_write_bytes(&usb_output_fifo, hello, sizeof(hello));
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	2210      	movs	r2, #16
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4807      	ldr	r0, [pc, #28]	; (8000f10 <StartDefaultTask+0xdc>)
 8000ef4:	f001 fa43 	bl	800237e <fifo_write_bytes>
    osDelay(100);
 8000ef8:	2064      	movs	r0, #100	; 0x64
 8000efa:	f008 fef9 	bl	8009cf0 <osDelay>
  {
 8000efe:	e7a1      	b.n	8000e44 <StartDefaultTask+0x10>
 8000f00:	40020000 	.word	0x40020000
 8000f04:	40020800 	.word	0x40020800
 8000f08:	2000020c 	.word	0x2000020c
 8000f0c:	0800dc10 	.word	0x0800dc10
 8000f10:	20005168 	.word	0x20005168

08000f14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d102      	bne.n	8000f2c <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000f26:	f001 fae3 	bl	80024f0 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if (htim->Instance == TIM5) {
	  CDC_Transmit_Elapsed();
  }
  /* USER CODE END Callback 1 */
}
 8000f2a:	e006      	b.n	8000f3a <HAL_TIM_PeriodElapsedCallback+0x26>
  else if (htim->Instance == TIM5) {
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_TIM_PeriodElapsedCallback+0x26>
	  CDC_Transmit_Elapsed();
 8000f36:	f00b fd29 	bl	800c98c <CDC_Transmit_Elapsed>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40010000 	.word	0x40010000
 8000f48:	40000c00 	.word	0x40000c00

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <Error_Handler+0x8>
	...

08000f58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_MspInit+0x54>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a11      	ldr	r2, [pc, #68]	; (8000fac <HAL_MspInit+0x54>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <HAL_MspInit+0x54>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <HAL_MspInit+0x54>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <HAL_MspInit+0x54>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_MspInit+0x54>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	210f      	movs	r1, #15
 8000f9a:	f06f 0001 	mvn.w	r0, #1
 8000f9e:	f001 ffb9 	bl	8002f14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a17      	ldr	r2, [pc, #92]	; (800102c <HAL_ADC_MspInit+0x7c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d127      	bne.n	8001022 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_ADC_MspInit+0x80>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = V_BAT_Pin|LIGHT_Pin;
 800100a:	2303      	movs	r3, #3
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100e:	2303      	movs	r3, #3
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_ADC_MspInit+0x84>)
 800101e:	f001 ffb1 	bl	8002f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40012000 	.word	0x40012000
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000

08001038 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	; 0x30
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a32      	ldr	r2, [pc, #200]	; (8001120 <HAL_SPI_MspInit+0xe8>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d12c      	bne.n	80010b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	4b31      	ldr	r3, [pc, #196]	; (8001124 <HAL_SPI_MspInit+0xec>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a30      	ldr	r2, [pc, #192]	; (8001124 <HAL_SPI_MspInit+0xec>)
 8001064:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <HAL_SPI_MspInit+0xec>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001072:	61bb      	str	r3, [r7, #24]
 8001074:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <HAL_SPI_MspInit+0xec>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a29      	ldr	r2, [pc, #164]	; (8001124 <HAL_SPI_MspInit+0xec>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b27      	ldr	r3, [pc, #156]	; (8001124 <HAL_SPI_MspInit+0xec>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001092:	23e0      	movs	r3, #224	; 0xe0
 8001094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010a2:	2305      	movs	r3, #5
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	4619      	mov	r1, r3
 80010ac:	481e      	ldr	r0, [pc, #120]	; (8001128 <HAL_SPI_MspInit+0xf0>)
 80010ae:	f001 ff69 	bl	8002f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010b2:	e031      	b.n	8001118 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a1c      	ldr	r2, [pc, #112]	; (800112c <HAL_SPI_MspInit+0xf4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d12c      	bne.n	8001118 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <HAL_SPI_MspInit+0xec>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	4a17      	ldr	r2, [pc, #92]	; (8001124 <HAL_SPI_MspInit+0xec>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_SPI_MspInit+0xec>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_SPI_MspInit+0xec>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <HAL_SPI_MspInit+0xec>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_SPI_MspInit+0xec>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010f6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001108:	2305      	movs	r3, #5
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	4807      	ldr	r0, [pc, #28]	; (8001130 <HAL_SPI_MspInit+0xf8>)
 8001114:	f001 ff36 	bl	8002f84 <HAL_GPIO_Init>
}
 8001118:	bf00      	nop
 800111a:	3730      	adds	r7, #48	; 0x30
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40013000 	.word	0x40013000
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000
 800112c:	40003800 	.word	0x40003800
 8001130:	40020400 	.word	0x40020400

08001134 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <HAL_TIM_PWM_MspInit+0x3c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d10d      	bne.n	8001162 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_TIM_PWM_MspInit+0x40>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a09      	ldr	r2, [pc, #36]	; (8001174 <HAL_TIM_PWM_MspInit+0x40>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <HAL_TIM_PWM_MspInit+0x40>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40000800 	.word	0x40000800
 8001174:	40023800 	.word	0x40023800

08001178 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <HAL_TIM_MspPostInit+0x68>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d11d      	bne.n	80011d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <HAL_TIM_MspPostInit+0x6c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <HAL_TIM_MspPostInit+0x6c>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_TIM_MspPostInit+0x6c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80011b6:	2340      	movs	r3, #64	; 0x40
 80011b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <HAL_TIM_MspPostInit+0x70>)
 80011d2:	f001 fed7 	bl	8002f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80011d6:	bf00      	nop
 80011d8:	3720      	adds	r7, #32
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40000800 	.word	0x40000800
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020400 	.word	0x40020400

080011ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a19      	ldr	r2, [pc, #100]	; (8001270 <HAL_UART_MspInit+0x84>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d12c      	bne.n	8001268 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	4b18      	ldr	r3, [pc, #96]	; (8001274 <HAL_UART_MspInit+0x88>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	4a17      	ldr	r2, [pc, #92]	; (8001274 <HAL_UART_MspInit+0x88>)
 8001218:	f043 0310 	orr.w	r3, r3, #16
 800121c:	6453      	str	r3, [r2, #68]	; 0x44
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_UART_MspInit+0x88>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_UART_MspInit+0x88>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a10      	ldr	r2, [pc, #64]	; (8001274 <HAL_UART_MspInit+0x88>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <HAL_UART_MspInit+0x88>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001246:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800124a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001258:	2307      	movs	r3, #7
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <HAL_UART_MspInit+0x8c>)
 8001264:	f001 fe8e 	bl	8002f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	; 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40011000 	.word	0x40011000
 8001274:	40023800 	.word	0x40023800
 8001278:	40020000 	.word	0x40020000

0800127c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	; 0x30
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800128c:	2200      	movs	r2, #0
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	2019      	movs	r0, #25
 8001292:	f001 fe3f 	bl	8002f14 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001296:	2019      	movs	r0, #25
 8001298:	f001 fe58 	bl	8002f4c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	4b1e      	ldr	r3, [pc, #120]	; (800131c <HAL_InitTick+0xa0>)
 80012a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a4:	4a1d      	ldr	r2, [pc, #116]	; (800131c <HAL_InitTick+0xa0>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6453      	str	r3, [r2, #68]	; 0x44
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <HAL_InitTick+0xa0>)
 80012ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012b8:	f107 0210 	add.w	r2, r7, #16
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 fe50 	bl	8004f68 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012c8:	f003 fe3a 	bl	8004f40 <HAL_RCC_GetPCLK2Freq>
 80012cc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d0:	4a13      	ldr	r2, [pc, #76]	; (8001320 <HAL_InitTick+0xa4>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	0c9b      	lsrs	r3, r3, #18
 80012d8:	3b01      	subs	r3, #1
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_InitTick+0xa8>)
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <HAL_InitTick+0xac>)
 80012e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_InitTick+0xa8>)
 80012e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012e8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012ea:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <HAL_InitTick+0xa8>)
 80012ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_InitTick+0xa8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_InitTick+0xa8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80012fc:	4809      	ldr	r0, [pc, #36]	; (8001324 <HAL_InitTick+0xa8>)
 80012fe:	f004 fc0d 	bl	8005b1c <HAL_TIM_Base_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d104      	bne.n	8001312 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001308:	4806      	ldr	r0, [pc, #24]	; (8001324 <HAL_InitTick+0xa8>)
 800130a:	f004 fc61 	bl	8005bd0 <HAL_TIM_Base_Start_IT>
 800130e:	4603      	mov	r3, r0
 8001310:	e000      	b.n	8001314 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	3730      	adds	r7, #48	; 0x30
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40023800 	.word	0x40023800
 8001320:	431bde83 	.word	0x431bde83
 8001324:	20007078 	.word	0x20007078
 8001328:	40010000 	.word	0x40010000

0800132c <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* Disable TIM1 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_SuspendTick+0x20>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_SuspendTick+0x20>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0201 	bic.w	r2, r2, #1
 800133e:	60da      	str	r2, [r3, #12]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20007078 	.word	0x20007078

08001350 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* Enable TIM1 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_ResumeTick+0x20>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_ResumeTick+0x20>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	60da      	str	r2, [r3, #12]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20007078 	.word	0x20007078

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <NMI_Handler+0x4>

0800137a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <MemManage_Handler+0x4>

08001386 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <BusFault_Handler+0x4>

0800138c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <UsageFault_Handler+0x4>

08001392 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80013a4:	2004      	movs	r0, #4
 80013a6:	f001 ffa3 	bl	80032f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80013b6:	f004 fcbc 	bl	8005d32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20007078 	.word	0x20007078

080013c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT2_Pin);
 80013c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013cc:	f001 ff90 	bl	80032f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 80013d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80013d4:	f001 ff8c 	bl	80032f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}

080013dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <OTG_FS_IRQHandler+0x10>)
 80013e2:	f002 f8ed 	bl	80035c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200078a0 	.word	0x200078a0

080013f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <SystemInit+0x20>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <SystemInit+0x20>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	461a      	mov	r2, r3
 8001420:	460b      	mov	r3, r1
 8001422:	72fb      	strb	r3, [r7, #11]
 8001424:	4613      	mov	r3, r2
 8001426:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	685c      	ldr	r4, [r3, #4]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6898      	ldr	r0, [r3, #8]
 8001430:	893b      	ldrh	r3, [r7, #8]
 8001432:	7af9      	ldrb	r1, [r7, #11]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	47a0      	blx	r4
 8001438:	6178      	str	r0, [r7, #20]

  return ret;
 800143a:	697b      	ldr	r3, [r7, #20]
}
 800143c:	4618      	mov	r0, r3
 800143e:	371c      	adds	r7, #28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd90      	pop	{r4, r7, pc}

08001444 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	461a      	mov	r2, r3
 8001450:	460b      	mov	r3, r1
 8001452:	72fb      	strb	r3, [r7, #11]
 8001454:	4613      	mov	r3, r2
 8001456:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681c      	ldr	r4, [r3, #0]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6898      	ldr	r0, [r3, #8]
 8001460:	893b      	ldrh	r3, [r7, #8]
 8001462:	7af9      	ldrb	r1, [r7, #11]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	47a0      	blx	r4
 8001468:	6178      	str	r0, [r7, #20]

  return ret;
 800146a:	697b      	ldr	r3, [r7, #20]
}
 800146c:	4618      	mov	r0, r3
 800146e:	371c      	adds	r7, #28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}

08001474 <lsm6dsr_from_fs16g_to_mg>:
{
  return ((float_t)lsb * 0.244f);
}

float_t lsm6dsr_from_fs16g_to_mg(int16_t lsb)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.488f);
 800147e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014a0 <lsm6dsr_from_fs16g_to_mg+0x2c>
 800148e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001492:	eeb0 0a67 	vmov.f32	s0, s15
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	3ef9db23 	.word	0x3ef9db23

080014a4 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80014b0:	f107 0208 	add.w	r2, r7, #8
 80014b4:	2301      	movs	r3, #1
 80014b6:	2110      	movs	r1, #16
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ffab 	bl	8001414 <lsm6dsr_read_reg>
 80014be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10f      	bne.n	80014e6 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	7a3b      	ldrb	r3, [r7, #8]
 80014d0:	f362 0383 	bfi	r3, r2, #2, #2
 80014d4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80014d6:	f107 0208 	add.w	r2, r7, #8
 80014da:	2301      	movs	r3, #1
 80014dc:	2110      	movs	r1, #16
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffb0 	bl	8001444 <lsm6dsr_write_reg>
 80014e4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	4619      	mov	r1, r3
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fd91 	bl	800202e <lsm6dsr_fsm_enable_get>
 800150c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f040 80c4 	bne.w	800169e <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001516:	7b3b      	ldrb	r3, [r7, #12]
 8001518:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800151c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800151e:	7b3b      	ldrb	r3, [r7, #12]
 8001520:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001524:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001526:	4313      	orrs	r3, r2
 8001528:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800152a:	7b3b      	ldrb	r3, [r7, #12]
 800152c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001530:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001532:	4313      	orrs	r3, r2
 8001534:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001536:	7b3b      	ldrb	r3, [r7, #12]
 8001538:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800153c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800153e:	4313      	orrs	r3, r2
 8001540:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001542:	7b3b      	ldrb	r3, [r7, #12]
 8001544:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001548:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800154a:	4313      	orrs	r3, r2
 800154c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800154e:	7b3b      	ldrb	r3, [r7, #12]
 8001550:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001554:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001556:	4313      	orrs	r3, r2
 8001558:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800155a:	7b3b      	ldrb	r3, [r7, #12]
 800155c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001560:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001562:	4313      	orrs	r3, r2
 8001564:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001566:	7b3b      	ldrb	r3, [r7, #12]
 8001568:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800156c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800156e:	4313      	orrs	r3, r2
 8001570:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001572:	7b7b      	ldrb	r3, [r7, #13]
 8001574:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001578:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800157a:	4313      	orrs	r3, r2
 800157c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800157e:	7b7b      	ldrb	r3, [r7, #13]
 8001580:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001584:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001586:	4313      	orrs	r3, r2
 8001588:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800158a:	7b7b      	ldrb	r3, [r7, #13]
 800158c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001590:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001592:	4313      	orrs	r3, r2
 8001594:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001596:	7b7b      	ldrb	r3, [r7, #13]
 8001598:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800159c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800159e:	4313      	orrs	r3, r2
 80015a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80015a2:	7b7b      	ldrb	r3, [r7, #13]
 80015a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80015a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80015aa:	4313      	orrs	r3, r2
 80015ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80015ae:	7b7b      	ldrb	r3, [r7, #13]
 80015b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80015b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80015ba:	7b7b      	ldrb	r3, [r7, #13]
 80015bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80015c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80015c2:	4313      	orrs	r3, r2
 80015c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80015c6:	7b7b      	ldrb	r3, [r7, #13]
 80015c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80015cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d163      	bne.n	800169e <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80015d6:	f107 030b 	add.w	r3, r7, #11
 80015da:	4619      	mov	r1, r3
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 fd53 	bl	8002088 <lsm6dsr_fsm_data_rate_get>
 80015e2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d159      	bne.n	800169e <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80015ea:	7afb      	ldrb	r3, [r7, #11]
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	d853      	bhi.n	8001698 <lsm6dsr_xl_data_rate_set+0x1a8>
 80015f0:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <lsm6dsr_xl_data_rate_set+0x108>)
 80015f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f6:	bf00      	nop
 80015f8:	08001609 	.word	0x08001609
 80015fc:	0800161b 	.word	0x0800161b
 8001600:	08001639 	.word	0x08001639
 8001604:	08001663 	.word	0x08001663
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800160e:	2301      	movs	r3, #1
 8001610:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001612:	e045      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	75fb      	strb	r3, [r7, #23]
            break;
 8001618:	e042      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8001620:	2302      	movs	r3, #2
 8001622:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001624:	e03c      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d102      	bne.n	8001632 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800162c:	2302      	movs	r3, #2
 800162e:	75fb      	strb	r3, [r7, #23]
            break;
 8001630:	e036      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	75fb      	strb	r3, [r7, #23]
            break;
 8001636:	e033      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800163e:	2303      	movs	r3, #3
 8001640:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001642:	e02d      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d102      	bne.n	8001650 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800164a:	2303      	movs	r3, #3
 800164c:	75fb      	strb	r3, [r7, #23]
            break;
 800164e:	e027      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d102      	bne.n	800165c <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8001656:	2303      	movs	r3, #3
 8001658:	75fb      	strb	r3, [r7, #23]
            break;
 800165a:	e021      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	75fb      	strb	r3, [r7, #23]
            break;
 8001660:	e01e      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8001668:	2304      	movs	r3, #4
 800166a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800166c:	e018      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d102      	bne.n	800167a <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8001674:	2304      	movs	r3, #4
 8001676:	75fb      	strb	r3, [r7, #23]
            break;
 8001678:	e012      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d102      	bne.n	8001686 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8001680:	2304      	movs	r3, #4
 8001682:	75fb      	strb	r3, [r7, #23]
            break;
 8001684:	e00c      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d102      	bne.n	8001692 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800168c:	2304      	movs	r3, #4
 800168e:	75fb      	strb	r3, [r7, #23]
            break;
 8001690:	e006      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	75fb      	strb	r3, [r7, #23]
            break;
 8001696:	e003      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	75fb      	strb	r3, [r7, #23]
            break;
 800169c:	e000      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 800169e:	bf00      	nop
    }
  }

  if (ret == 0)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d107      	bne.n	80016b6 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80016a6:	f107 0208 	add.w	r2, r7, #8
 80016aa:	2301      	movs	r3, #1
 80016ac:	2110      	movs	r1, #16
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff feb0 	bl	8001414 <lsm6dsr_read_reg>
 80016b4:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10f      	bne.n	80016dc <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	7a3b      	ldrb	r3, [r7, #8]
 80016c6:	f362 1307 	bfi	r3, r2, #4, #4
 80016ca:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80016cc:	f107 0208 	add.w	r2, r7, #8
 80016d0:	2301      	movs	r3, #1
 80016d2:	2110      	movs	r1, #16
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff feb5 	bl	8001444 <lsm6dsr_write_reg>
 80016da:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80016dc:	693b      	ldr	r3, [r7, #16]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop

080016e8 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80016f4:	f107 0208 	add.w	r2, r7, #8
 80016f8:	2301      	movs	r3, #1
 80016fa:	2111      	movs	r1, #17
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff fe89 	bl	8001414 <lsm6dsr_read_reg>
 8001702:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10f      	bne.n	800172a <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	f003 030f 	and.w	r3, r3, #15
 8001710:	b2da      	uxtb	r2, r3
 8001712:	7a3b      	ldrb	r3, [r7, #8]
 8001714:	f362 0303 	bfi	r3, r2, #0, #4
 8001718:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800171a:	f107 0208 	add.w	r2, r7, #8
 800171e:	2301      	movs	r3, #1
 8001720:	2111      	movs	r1, #17
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fe8e 	bl	8001444 <lsm6dsr_write_reg>
 8001728:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	4619      	mov	r1, r3
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 fc6f 	bl	800202e <lsm6dsr_fsm_enable_get>
 8001750:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	2b00      	cmp	r3, #0
 8001756:	f040 80c4 	bne.w	80018e2 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800175a:	7b3b      	ldrb	r3, [r7, #12]
 800175c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001760:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001762:	7b3b      	ldrb	r3, [r7, #12]
 8001764:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001768:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800176a:	4313      	orrs	r3, r2
 800176c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800176e:	7b3b      	ldrb	r3, [r7, #12]
 8001770:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001774:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001776:	4313      	orrs	r3, r2
 8001778:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800177a:	7b3b      	ldrb	r3, [r7, #12]
 800177c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001780:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001782:	4313      	orrs	r3, r2
 8001784:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001786:	7b3b      	ldrb	r3, [r7, #12]
 8001788:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800178c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800178e:	4313      	orrs	r3, r2
 8001790:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001792:	7b3b      	ldrb	r3, [r7, #12]
 8001794:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001798:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800179a:	4313      	orrs	r3, r2
 800179c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800179e:	7b3b      	ldrb	r3, [r7, #12]
 80017a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80017a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80017a6:	4313      	orrs	r3, r2
 80017a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80017aa:	7b3b      	ldrb	r3, [r7, #12]
 80017ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80017b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80017b2:	4313      	orrs	r3, r2
 80017b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80017b6:	7b7b      	ldrb	r3, [r7, #13]
 80017b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80017be:	4313      	orrs	r3, r2
 80017c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80017c2:	7b7b      	ldrb	r3, [r7, #13]
 80017c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80017c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80017ce:	7b7b      	ldrb	r3, [r7, #13]
 80017d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80017d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80017da:	7b7b      	ldrb	r3, [r7, #13]
 80017dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80017e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80017e2:	4313      	orrs	r3, r2
 80017e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80017e6:	7b7b      	ldrb	r3, [r7, #13]
 80017e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80017ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80017f2:	7b7b      	ldrb	r3, [r7, #13]
 80017f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80017f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80017fa:	4313      	orrs	r3, r2
 80017fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80017fe:	7b7b      	ldrb	r3, [r7, #13]
 8001800:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001804:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001806:	4313      	orrs	r3, r2
 8001808:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800180a:	7b7b      	ldrb	r3, [r7, #13]
 800180c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001810:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001812:	4313      	orrs	r3, r2
 8001814:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001816:	2b01      	cmp	r3, #1
 8001818:	d163      	bne.n	80018e2 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800181a:	f107 030b 	add.w	r3, r7, #11
 800181e:	4619      	mov	r1, r3
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 fc31 	bl	8002088 <lsm6dsr_fsm_data_rate_get>
 8001826:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d159      	bne.n	80018e2 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800182e:	7afb      	ldrb	r3, [r7, #11]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d853      	bhi.n	80018dc <lsm6dsr_gy_data_rate_set+0x1a8>
 8001834:	a201      	add	r2, pc, #4	; (adr r2, 800183c <lsm6dsr_gy_data_rate_set+0x108>)
 8001836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183a:	bf00      	nop
 800183c:	0800184d 	.word	0x0800184d
 8001840:	0800185f 	.word	0x0800185f
 8001844:	0800187d 	.word	0x0800187d
 8001848:	080018a7 	.word	0x080018a7
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8001852:	2301      	movs	r3, #1
 8001854:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8001856:	e045      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	75fb      	strb	r3, [r7, #23]
            break;
 800185c:	e042      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8001864:	2302      	movs	r3, #2
 8001866:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8001868:	e03c      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d102      	bne.n	8001876 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8001870:	2302      	movs	r3, #2
 8001872:	75fb      	strb	r3, [r7, #23]
            break;
 8001874:	e036      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	75fb      	strb	r3, [r7, #23]
            break;
 800187a:	e033      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d102      	bne.n	8001888 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8001882:	2303      	movs	r3, #3
 8001884:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8001886:	e02d      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d102      	bne.n	8001894 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800188e:	2303      	movs	r3, #3
 8001890:	75fb      	strb	r3, [r7, #23]
            break;
 8001892:	e027      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d102      	bne.n	80018a0 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800189a:	2303      	movs	r3, #3
 800189c:	75fb      	strb	r3, [r7, #23]
            break;
 800189e:	e021      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	75fb      	strb	r3, [r7, #23]
            break;
 80018a4:	e01e      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d102      	bne.n	80018b2 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80018ac:	2304      	movs	r3, #4
 80018ae:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80018b0:	e018      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d102      	bne.n	80018be <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80018b8:	2304      	movs	r3, #4
 80018ba:	75fb      	strb	r3, [r7, #23]
            break;
 80018bc:	e012      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d102      	bne.n	80018ca <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80018c4:	2304      	movs	r3, #4
 80018c6:	75fb      	strb	r3, [r7, #23]
            break;
 80018c8:	e00c      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d102      	bne.n	80018d6 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80018d0:	2304      	movs	r3, #4
 80018d2:	75fb      	strb	r3, [r7, #23]
            break;
 80018d4:	e006      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	75fb      	strb	r3, [r7, #23]
            break;
 80018da:	e003      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	75fb      	strb	r3, [r7, #23]
            break;
 80018e0:	e000      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 80018e2:	bf00      	nop
    }
  }

  if (ret == 0)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d107      	bne.n	80018fa <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80018ea:	f107 0208 	add.w	r2, r7, #8
 80018ee:	2301      	movs	r3, #1
 80018f0:	2111      	movs	r1, #17
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff fd8e 	bl	8001414 <lsm6dsr_read_reg>
 80018f8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10f      	bne.n	8001920 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8001900:	7dfb      	ldrb	r3, [r7, #23]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	b2da      	uxtb	r2, r3
 8001908:	7a3b      	ldrb	r3, [r7, #8]
 800190a:	f362 1307 	bfi	r3, r2, #4, #4
 800190e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001910:	f107 0208 	add.w	r2, r7, #8
 8001914:	2301      	movs	r3, #1
 8001916:	2111      	movs	r1, #17
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff fd93 	bl	8001444 <lsm6dsr_write_reg>
 800191e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8001920:	693b      	ldr	r3, [r7, #16]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop

0800192c <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001938:	f107 0208 	add.w	r2, r7, #8
 800193c:	2301      	movs	r3, #1
 800193e:	2112      	movs	r1, #18
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff fd67 	bl	8001414 <lsm6dsr_read_reg>
 8001946:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10f      	bne.n	800196e <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	b2da      	uxtb	r2, r3
 8001956:	7a3b      	ldrb	r3, [r7, #8]
 8001958:	f362 1386 	bfi	r3, r2, #6, #1
 800195c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800195e:	f107 0208 	add.w	r2, r7, #8
 8001962:	2301      	movs	r3, #1
 8001964:	2112      	movs	r1, #18
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fd6c 	bl	8001444 <lsm6dsr_write_reg>
 800196c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <lsm6dsr_all_sources_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_all_sources_get(stmdev_ctx_t *ctx,
                                lsm6dsr_all_sources_t *val)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_ALL_INT_SRC,
                         (uint8_t *)&val->all_int_src, 1);
 8001982:	683a      	ldr	r2, [r7, #0]
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_ALL_INT_SRC,
 8001984:	2301      	movs	r3, #1
 8001986:	211a      	movs	r1, #26
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fd43 	bl	8001414 <lsm6dsr_read_reg>
 800198e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d107      	bne.n	80019a6 <lsm6dsr_all_sources_get+0x2e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_WAKE_UP_SRC,
                           (uint8_t *)&val->wake_up_src, 1);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_WAKE_UP_SRC,
 800199a:	2301      	movs	r3, #1
 800199c:	211b      	movs	r1, #27
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff fd38 	bl	8001414 <lsm6dsr_read_reg>
 80019a4:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d107      	bne.n	80019bc <lsm6dsr_all_sources_get+0x44>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_SRC,
                           (uint8_t *)&val->tap_src, 1);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	1c9a      	adds	r2, r3, #2
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_SRC,
 80019b0:	2301      	movs	r3, #1
 80019b2:	211c      	movs	r1, #28
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff fd2d 	bl	8001414 <lsm6dsr_read_reg>
 80019ba:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d107      	bne.n	80019d2 <lsm6dsr_all_sources_get+0x5a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_D6D_SRC,
                           (uint8_t *)&val->d6d_src, 1);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	1cda      	adds	r2, r3, #3
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_D6D_SRC,
 80019c6:	2301      	movs	r3, #1
 80019c8:	211d      	movs	r1, #29
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fd22 	bl	8001414 <lsm6dsr_read_reg>
 80019d0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d107      	bne.n	80019e8 <lsm6dsr_all_sources_get+0x70>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
                           (uint8_t *)&val->status_reg, 1);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	1d1a      	adds	r2, r3, #4
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80019dc:	2301      	movs	r3, #1
 80019de:	211e      	movs	r1, #30
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff fd17 	bl	8001414 <lsm6dsr_read_reg>
 80019e6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d104      	bne.n	80019f8 <lsm6dsr_all_sources_get+0x80>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80019ee:	2102      	movs	r1, #2
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f87a 	bl	8001aea <lsm6dsr_mem_bank_set>
 80019f6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d107      	bne.n	8001a0e <lsm6dsr_all_sources_get+0x96>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_STATUS,
                           (uint8_t *)&val->emb_func_status, 1);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	1d5a      	adds	r2, r3, #5
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_STATUS,
 8001a02:	2301      	movs	r3, #1
 8001a04:	2112      	movs	r1, #18
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff fd04 	bl	8001414 <lsm6dsr_read_reg>
 8001a0c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d107      	bne.n	8001a24 <lsm6dsr_all_sources_get+0xac>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_STATUS_A,
                           (uint8_t *)&val->fsm_status_a, 1);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	1d9a      	adds	r2, r3, #6
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_STATUS_A,
 8001a18:	2301      	movs	r3, #1
 8001a1a:	2113      	movs	r1, #19
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff fcf9 	bl	8001414 <lsm6dsr_read_reg>
 8001a22:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d107      	bne.n	8001a3a <lsm6dsr_all_sources_get+0xc2>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_STATUS_B,
                           (uint8_t *)&val->fsm_status_b, 1);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	1dda      	adds	r2, r3, #7
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_STATUS_B,
 8001a2e:	2301      	movs	r3, #1
 8001a30:	2114      	movs	r1, #20
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fcee 	bl	8001414 <lsm6dsr_read_reg>
 8001a38:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d104      	bne.n	8001a4a <lsm6dsr_all_sources_get+0xd2>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8001a40:	2100      	movs	r1, #0
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f851 	bl	8001aea <lsm6dsr_mem_bank_set>
 8001a48:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8001a5e:	f107 020c 	add.w	r2, r7, #12
 8001a62:	2306      	movs	r3, #6
 8001a64:	2128      	movs	r1, #40	; 0x28
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fcd4 	bl	8001414 <lsm6dsr_read_reg>
 8001a6c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001a6e:	7b7b      	ldrb	r3, [r7, #13]
 8001a70:	b21a      	sxth	r2, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	7b3b      	ldrb	r3, [r7, #12]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	b21a      	sxth	r2, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	3302      	adds	r3, #2
 8001a96:	b212      	sxth	r2, r2
 8001a98:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	7bbb      	ldrb	r3, [r7, #14]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	b212      	sxth	r2, r2
 8001ab6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001ab8:	7c7a      	ldrb	r2, [r7, #17]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	3304      	adds	r3, #4
 8001abe:	b212      	sxth	r2, r2
 8001ac0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	7c3b      	ldrb	r3, [r7, #16]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	3304      	adds	r3, #4
 8001adc:	b212      	sxth	r2, r2
 8001ade:	801a      	strh	r2, [r3, #0]

  return ret;
 8001ae0:	697b      	ldr	r3, [r7, #20]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8001af6:	f107 0208 	add.w	r2, r7, #8
 8001afa:	2301      	movs	r3, #1
 8001afc:	2101      	movs	r1, #1
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fc88 	bl	8001414 <lsm6dsr_read_reg>
 8001b04:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10f      	bne.n	8001b2c <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	7a3b      	ldrb	r3, [r7, #8]
 8001b16:	f362 1387 	bfi	r3, r2, #6, #2
 8001b1a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8001b1c:	f107 0208 	add.w	r2, r7, #8
 8001b20:	2301      	movs	r3, #1
 8001b22:	2101      	movs	r1, #1
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fc8d 	bl	8001444 <lsm6dsr_write_reg>
 8001b2a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8001b40:	2301      	movs	r3, #1
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	210f      	movs	r1, #15
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fc64 	bl	8001414 <lsm6dsr_read_reg>
 8001b4c:	60f8      	str	r0, [r7, #12]

  return ret;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001b64:	f107 0208 	add.w	r2, r7, #8
 8001b68:	2301      	movs	r3, #1
 8001b6a:	2112      	movs	r1, #18
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fc51 	bl	8001414 <lsm6dsr_read_reg>
 8001b72:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10f      	bne.n	8001b9a <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	7a3b      	ldrb	r3, [r7, #8]
 8001b84:	f362 0300 	bfi	r3, r2, #0, #1
 8001b88:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001b8a:	f107 0208 	add.w	r2, r7, #8
 8001b8e:	2301      	movs	r3, #1
 8001b90:	2112      	movs	r1, #18
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fc56 	bl	8001444 <lsm6dsr_write_reg>
 8001b98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <lsm6dsr_xl_hp_path_internal_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_internal_set(stmdev_ctx_t *ctx,
                                        lsm6dsr_slope_fds_t val)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_tap_cfg0_t tap_cfg0;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_CFG0, (uint8_t *)&tap_cfg0, 1);
 8001bb0:	f107 0208 	add.w	r2, r7, #8
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	2156      	movs	r1, #86	; 0x56
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff fc2b 	bl	8001414 <lsm6dsr_read_reg>
 8001bbe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10f      	bne.n	8001be6 <lsm6dsr_xl_hp_path_internal_set+0x42>
  {
    tap_cfg0.slope_fds = (uint8_t)val;
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	7a3b      	ldrb	r3, [r7, #8]
 8001bd0:	f362 1304 	bfi	r3, r2, #4, #1
 8001bd4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_TAP_CFG0,
 8001bd6:	f107 0208 	add.w	r2, r7, #8
 8001bda:	2301      	movs	r3, #1
 8001bdc:	2156      	movs	r1, #86	; 0x56
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fc30 	bl	8001444 <lsm6dsr_write_reg>
 8001be4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&tap_cfg0, 1);
  }

  return ret;
 8001be6:	68fb      	ldr	r3, [r7, #12]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8001bfc:	f107 0210 	add.w	r2, r7, #16
 8001c00:	2301      	movs	r3, #1
 8001c02:	2118      	movs	r1, #24
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff fc05 	bl	8001414 <lsm6dsr_read_reg>
 8001c0a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d111      	bne.n	8001c36 <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	09db      	lsrs	r3, r3, #7
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	7c3b      	ldrb	r3, [r7, #16]
 8001c20:	f362 0341 	bfi	r3, r2, #1, #1
 8001c24:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 8001c26:	f107 0210 	add.w	r2, r7, #16
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	2118      	movs	r1, #24
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fc08 	bl	8001444 <lsm6dsr_write_reg>
 8001c34:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d107      	bne.n	8001c4c <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8001c3c:	f107 020c 	add.w	r2, r7, #12
 8001c40:	2301      	movs	r3, #1
 8001c42:	2162      	movs	r1, #98	; 0x62
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fbe5 	bl	8001414 <lsm6dsr_read_reg>
 8001c4a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10f      	bne.n	8001c72 <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	7b3b      	ldrb	r3, [r7, #12]
 8001c5c:	f362 03c4 	bfi	r3, r2, #3, #2
 8001c60:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8001c62:	f107 020c 	add.w	r2, r7, #12
 8001c66:	2301      	movs	r3, #1
 8001c68:	2162      	movs	r1, #98	; 0x62
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fbea 	bl	8001444 <lsm6dsr_write_reg>
 8001c70:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8001c72:	697b      	ldr	r3, [r7, #20]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <lsm6dsr_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsr_pin_int1_route_t *val)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  lsm6dsr_tap_cfg2_t tap_cfg2;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8001c86:	2102      	movs	r1, #2
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff2e 	bl	8001aea <lsm6dsr_mem_bank_set>
 8001c8e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d107      	bne.n	8001ca6 <lsm6dsr_pin_int1_route_set+0x2a>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
                            (uint8_t *)&val->emb_func_int1, 1);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	1c9a      	adds	r2, r3, #2
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	210a      	movs	r1, #10
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff fbd0 	bl	8001444 <lsm6dsr_write_reg>
 8001ca4:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <lsm6dsr_pin_int1_route_set+0x40>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_A,
                            (uint8_t *)&val->fsm_int1_a, 1);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	1cda      	adds	r2, r3, #3
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_A,
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	210b      	movs	r1, #11
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff fbc5 	bl	8001444 <lsm6dsr_write_reg>
 8001cba:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d107      	bne.n	8001cd2 <lsm6dsr_pin_int1_route_set+0x56>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_B,
                            (uint8_t *)&val->fsm_int1_b, 1);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	1d1a      	adds	r2, r3, #4
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_B,
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	210c      	movs	r1, #12
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fbba 	bl	8001444 <lsm6dsr_write_reg>
 8001cd0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d104      	bne.n	8001ce2 <lsm6dsr_pin_int1_route_set+0x66>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8001cd8:	2100      	movs	r1, #0
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ff05 	bl	8001aea <lsm6dsr_mem_bank_set>
 8001ce0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f040 809e 	bne.w	8001e26 <lsm6dsr_pin_int1_route_set+0x1aa>
  {
    if ((val->emb_func_int1.int1_fsm_lc |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	789b      	ldrb	r3, [r3, #2]
 8001cee:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001cf2:	b2da      	uxtb	r2, r3
         val->emb_func_int1.int1_sig_mot |
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	789b      	ldrb	r3, [r3, #2]
 8001cf8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001cfc:	b2db      	uxtb	r3, r3
    if ((val->emb_func_int1.int1_fsm_lc |
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	b2da      	uxtb	r2, r3
         val->emb_func_int1.int1_step_detector |
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	789b      	ldrb	r3, [r3, #2]
 8001d06:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001d0a:	b2db      	uxtb	r3, r3
         val->emb_func_int1.int1_sig_mot |
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	b2da      	uxtb	r2, r3
         val->emb_func_int1.int1_tilt |
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	789b      	ldrb	r3, [r3, #2]
 8001d14:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d18:	b2db      	uxtb	r3, r3
         val->emb_func_int1.int1_step_detector |
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm1 |
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	78db      	ldrb	r3, [r3, #3]
 8001d22:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001d26:	b2db      	uxtb	r3, r3
         val->emb_func_int1.int1_tilt |
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm2 |
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	78db      	ldrb	r3, [r3, #3]
 8001d30:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001d34:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm1 |
 8001d36:	4313      	orrs	r3, r2
 8001d38:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm3 |
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	78db      	ldrb	r3, [r3, #3]
 8001d3e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001d42:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm2 |
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm4 |
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	78db      	ldrb	r3, [r3, #3]
 8001d4c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001d50:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm3 |
 8001d52:	4313      	orrs	r3, r2
 8001d54:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm5 |
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	78db      	ldrb	r3, [r3, #3]
 8001d5a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d5e:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm4 |
 8001d60:	4313      	orrs	r3, r2
 8001d62:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm6 |
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	78db      	ldrb	r3, [r3, #3]
 8001d68:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001d6c:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm5 |
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm7 |
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	78db      	ldrb	r3, [r3, #3]
 8001d76:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d7a:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm6 |
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm8 |
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	78db      	ldrb	r3, [r3, #3]
 8001d84:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001d88:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm7 |
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm9 |
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	791b      	ldrb	r3, [r3, #4]
 8001d92:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001d96:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm8 |
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm10 |
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	791b      	ldrb	r3, [r3, #4]
 8001da0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001da4:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm9 |
 8001da6:	4313      	orrs	r3, r2
 8001da8:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm11 |
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	791b      	ldrb	r3, [r3, #4]
 8001dae:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001db2:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm10 |
 8001db4:	4313      	orrs	r3, r2
 8001db6:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm12 |
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	791b      	ldrb	r3, [r3, #4]
 8001dbc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001dc0:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm11 |
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm13 |
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	791b      	ldrb	r3, [r3, #4]
 8001dca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001dce:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm12 |
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm14 |
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	791b      	ldrb	r3, [r3, #4]
 8001dd8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ddc:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm13 |
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm15 |
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	791b      	ldrb	r3, [r3, #4]
 8001de6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001dea:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm14 |
 8001dec:	4313      	orrs	r3, r2
 8001dee:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm16) != PROPERTY_DISABLE)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	791b      	ldrb	r3, [r3, #4]
 8001df4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001df8:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm15 |
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	b2db      	uxtb	r3, r3
    if ((val->emb_func_int1.int1_fsm_lc |
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <lsm6dsr_pin_int1_route_set+0x192>
    {
      val->md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	7853      	ldrb	r3, [r2, #1]
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	7053      	strb	r3, [r2, #1]
 8001e0c:	e004      	b.n	8001e18 <lsm6dsr_pin_int1_route_set+0x19c>
    }

    else
    {
      val->md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	7853      	ldrb	r3, [r2, #1]
 8001e12:	f36f 0341 	bfc	r3, #1, #1
 8001e16:	7053      	strb	r3, [r2, #1]
    }

    ret = lsm6dsr_write_reg(ctx, LSM6DSR_INT1_CTRL,
                            (uint8_t *)&val->int1_ctrl, 1);
 8001e18:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_INT1_CTRL,
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	210d      	movs	r1, #13
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff fb10 	bl	8001444 <lsm6dsr_write_reg>
 8001e24:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d107      	bne.n	8001e3c <lsm6dsr_pin_int1_route_set+0x1c0>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_MD1_CFG,
                            (uint8_t *)&val->md1_cfg, 1);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_MD1_CFG,
 8001e30:	2301      	movs	r3, #1
 8001e32:	215e      	movs	r1, #94	; 0x5e
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff fb05 	bl	8001444 <lsm6dsr_write_reg>
 8001e3a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d172      	bne.n	8001f28 <lsm6dsr_pin_int1_route_set+0x2ac>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_CFG2, (uint8_t *)&tap_cfg2, 1);
 8001e42:	f107 0208 	add.w	r2, r7, #8
 8001e46:	2301      	movs	r3, #1
 8001e48:	2158      	movs	r1, #88	; 0x58
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fae2 	bl	8001414 <lsm6dsr_read_reg>
 8001e50:	60f8      	str	r0, [r7, #12]

    if ((val->int1_ctrl.den_drdy_flag |
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001e5a:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_boot |
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001e64:	b2db      	uxtb	r3, r3
    if ((val->int1_ctrl.den_drdy_flag |
 8001e66:	4313      	orrs	r3, r2
 8001e68:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_cnt_bdr |
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001e72:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_boot |
 8001e74:	4313      	orrs	r3, r2
 8001e76:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_drdy_g |
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001e80:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_cnt_bdr |
 8001e82:	4313      	orrs	r3, r2
 8001e84:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_drdy_xl |
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e8e:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_drdy_g |
 8001e90:	4313      	orrs	r3, r2
 8001e92:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_full |
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001e9c:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_drdy_xl |
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_ovr |
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001eaa:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_full |
 8001eac:	4313      	orrs	r3, r2
 8001eae:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_th |
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001eb8:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_ovr |
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_6d |
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	785b      	ldrb	r3, [r3, #1]
 8001ec2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001ec6:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_th |
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_double_tap |
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	785b      	ldrb	r3, [r3, #1]
 8001ed0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001ed4:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_6d |
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_ff |
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	785b      	ldrb	r3, [r3, #1]
 8001ede:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001ee2:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_double_tap |
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_wu |
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	785b      	ldrb	r3, [r3, #1]
 8001eec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ef0:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_ff |
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_single_tap |
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	785b      	ldrb	r3, [r3, #1]
 8001efa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001efe:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_wu |
 8001f00:	4313      	orrs	r3, r2
 8001f02:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	785b      	ldrb	r3, [r3, #1]
 8001f08:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001f0c:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_single_tap |
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	b2db      	uxtb	r3, r3
    if ((val->int1_ctrl.den_drdy_flag |
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d004      	beq.n	8001f20 <lsm6dsr_pin_int1_route_set+0x2a4>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 8001f16:	7a3b      	ldrb	r3, [r7, #8]
 8001f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f1c:	723b      	strb	r3, [r7, #8]
 8001f1e:	e003      	b.n	8001f28 <lsm6dsr_pin_int1_route_set+0x2ac>
    }

    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 8001f20:	7a3b      	ldrb	r3, [r7, #8]
 8001f22:	f36f 13c7 	bfc	r3, #7, #1
 8001f26:	723b      	strb	r3, [r7, #8]
    }
  }

  if (ret == 0)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d107      	bne.n	8001f3e <lsm6dsr_pin_int1_route_set+0x2c2>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_TAP_CFG2,
 8001f2e:	f107 0208 	add.w	r2, r7, #8
 8001f32:	2301      	movs	r3, #1
 8001f34:	2158      	movs	r1, #88	; 0x58
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff fa84 	bl	8001444 <lsm6dsr_write_reg>
 8001f3c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&tap_cfg2, 1);
  }

  return ret;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <lsm6dsr_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsr_pin_int1_route_t *val)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8001f52:	2102      	movs	r1, #2
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff fdc8 	bl	8001aea <lsm6dsr_mem_bank_set>
 8001f5a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d107      	bne.n	8001f72 <lsm6dsr_pin_int1_route_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
                           (uint8_t *)&val->emb_func_int1, 1);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	1c9a      	adds	r2, r3, #2
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
 8001f66:	2301      	movs	r3, #1
 8001f68:	210a      	movs	r1, #10
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff fa52 	bl	8001414 <lsm6dsr_read_reg>
 8001f70:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d107      	bne.n	8001f88 <lsm6dsr_pin_int1_route_get+0x40>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_A,
                           (uint8_t *)&val->fsm_int1_a, 1);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	1cda      	adds	r2, r3, #3
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_A,
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	210b      	movs	r1, #11
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff fa47 	bl	8001414 <lsm6dsr_read_reg>
 8001f86:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d107      	bne.n	8001f9e <lsm6dsr_pin_int1_route_get+0x56>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_B,
                           (uint8_t *)&val->fsm_int1_b, 1);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	1d1a      	adds	r2, r3, #4
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_B,
 8001f92:	2301      	movs	r3, #1
 8001f94:	210c      	movs	r1, #12
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fa3c 	bl	8001414 <lsm6dsr_read_reg>
 8001f9c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d104      	bne.n	8001fae <lsm6dsr_pin_int1_route_get+0x66>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fd9f 	bl	8001aea <lsm6dsr_mem_bank_set>
 8001fac:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d106      	bne.n	8001fc2 <lsm6dsr_pin_int1_route_get+0x7a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_INT1_CTRL,
                           (uint8_t *)&val->int1_ctrl, 1);
 8001fb4:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_INT1_CTRL,
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	210d      	movs	r1, #13
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff fa2a 	bl	8001414 <lsm6dsr_read_reg>
 8001fc0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d107      	bne.n	8001fd8 <lsm6dsr_pin_int1_route_get+0x90>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_MD1_CFG,
                           (uint8_t *)&val->md1_cfg, 1);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_MD1_CFG,
 8001fcc:	2301      	movs	r3, #1
 8001fce:	215e      	movs	r1, #94	; 0x5e
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff fa1f 	bl	8001414 <lsm6dsr_read_reg>
 8001fd6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <lsm6dsr_wkup_threshold_set>:
  * @param  val    Change the values of wk_ths in reg WAKE_UP_THS
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	460b      	mov	r3, r1
 8001fec:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_wake_up_ths_t wake_up_ths;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WAKE_UP_THS,
 8001fee:	f107 0208 	add.w	r2, r7, #8
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	215b      	movs	r1, #91	; 0x5b
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fa0c 	bl	8001414 <lsm6dsr_read_reg>
 8001ffc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&wake_up_ths, 1);

  if (ret == 0)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10f      	bne.n	8002024 <lsm6dsr_wkup_threshold_set+0x42>
  {
    wake_up_ths.wk_ths = (uint8_t)val;
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800200a:	b2da      	uxtb	r2, r3
 800200c:	7a3b      	ldrb	r3, [r7, #8]
 800200e:	f362 0305 	bfi	r3, r2, #0, #6
 8002012:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_WAKE_UP_THS,
 8002014:	f107 0208 	add.w	r2, r7, #8
 8002018:	2301      	movs	r3, #1
 800201a:	215b      	movs	r1, #91	; 0x5b
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff fa11 	bl	8001444 <lsm6dsr_write_reg>
 8002022:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&wake_up_ths, 1);
  }

  return ret;
 8002024:	68fb      	ldr	r3, [r7, #12]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8002038:	2102      	movs	r1, #2
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff fd55 	bl	8001aea <lsm6dsr_mem_bank_set>
 8002040:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d106      	bne.n	8002056 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8002048:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 800204a:	2301      	movs	r3, #1
 800204c:	2146      	movs	r1, #70	; 0x46
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff f9e0 	bl	8001414 <lsm6dsr_read_reg>
 8002054:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d107      	bne.n	800206c <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8002060:	2301      	movs	r3, #1
 8002062:	2147      	movs	r1, #71	; 0x47
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff f9d5 	bl	8001414 <lsm6dsr_read_reg>
 800206a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d104      	bne.n	800207c <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8002072:	2100      	movs	r1, #0
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff fd38 	bl	8001aea <lsm6dsr_mem_bank_set>
 800207a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800207c:	68fb      	ldr	r3, [r7, #12]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8002092:	2102      	movs	r1, #2
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff fd28 	bl	8001aea <lsm6dsr_mem_bank_set>
 800209a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d107      	bne.n	80020b2 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 80020a2:	f107 0208 	add.w	r2, r7, #8
 80020a6:	2301      	movs	r3, #1
 80020a8:	215f      	movs	r1, #95	; 0x5f
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff f9b2 	bl	8001414 <lsm6dsr_read_reg>
 80020b0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d104      	bne.n	80020c2 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80020b8:	2100      	movs	r1, #0
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fd15 	bl	8001aea <lsm6dsr_mem_bank_set>
 80020c0:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 80020c2:	7a3b      	ldrb	r3, [r7, #8]
 80020c4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d81a      	bhi.n	8002104 <lsm6dsr_fsm_data_rate_get+0x7c>
 80020ce:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <lsm6dsr_fsm_data_rate_get+0x4c>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	080020e5 	.word	0x080020e5
 80020d8:	080020ed 	.word	0x080020ed
 80020dc:	080020f5 	.word	0x080020f5
 80020e0:	080020fd 	.word	0x080020fd
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
      break;
 80020ea:	e00f      	b.n	800210c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2201      	movs	r2, #1
 80020f0:	701a      	strb	r2, [r3, #0]
      break;
 80020f2:	e00b      	b.n	800210c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2202      	movs	r2, #2
 80020f8:	701a      	strb	r2, [r3, #0]
      break;
 80020fa:	e007      	b.n	800210c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2203      	movs	r2, #3
 8002100:	701a      	strb	r2, [r3, #0]
      break;
 8002102:	e003      	b.n	800210c <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
      break;
 800210a:	bf00      	nop
  }

  return ret;
 800210c:	68fb      	ldr	r3, [r7, #12]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop

08002118 <task_fsm>:

#include "cmsis_os.h"
#include "task_fsm.h"
#include "config/globals.h"

void task_fsm(void *argument) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

	int32_t tick_count = osKernelGetTickCount();
 8002120:	f007 fd36 	bl	8009b90 <osKernelGetTickCount>
 8002124:	4603      	mov	r3, r0
 8002126:	60fb      	str	r3, [r7, #12]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 8002128:	f007 fd47 	bl	8009bba <osKernelGetTickFreq>
 800212c:	4603      	mov	r3, r0
 800212e:	4a07      	ldr	r2, [pc, #28]	; (800214c <task_fsm+0x34>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	60bb      	str	r3, [r7, #8]

	while (1) {

		tick_count += tick_update;
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	4413      	add	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick_count);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4618      	mov	r0, r3
 8002144:	f007 fdef 	bl	8009d26 <osDelayUntil>
		tick_count += tick_update;
 8002148:	e7f6      	b.n	8002138 <task_fsm+0x20>
 800214a:	bf00      	nop
 800214c:	51eb851f 	.word	0x51eb851f

08002150 <dcdc_enable>:
 */
#pragma once

#include "main.h"

static inline void dcdc_enable(){
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DCDC_EN_GPIO_Port, DCDC_EN_Pin, GPIO_PIN_SET);
 8002154:	2201      	movs	r2, #1
 8002156:	2110      	movs	r1, #16
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <dcdc_enable+0x14>)
 800215a:	f001 f8af 	bl	80032bc <HAL_GPIO_WritePin>
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40020400 	.word	0x40020400

08002168 <task_heater>:
#include "cmsis_os.h"
#include "task_heater.h"
#include "config/globals.h"
#include "drivers/dcdc.h"

void task_heater(void *argument) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

	int32_t tick_count = osKernelGetTickCount();
 8002170:	f007 fd0e 	bl	8009b90 <osKernelGetTickCount>
 8002174:	4603      	mov	r3, r0
 8002176:	60fb      	str	r3, [r7, #12]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 8002178:	f007 fd1f 	bl	8009bba <osKernelGetTickFreq>
 800217c:	4603      	mov	r3, r0
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <task_heater+0x40>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	095b      	lsrs	r3, r3, #5
 8002186:	60bb      	str	r3, [r7, #8]

	while (1) {


		dcdc_set_voltage(8);
 8002188:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800218c:	f7fe f9e4 	bl	8000558 <dcdc_set_voltage>
		dcdc_enable();
 8002190:	f7ff ffde 	bl	8002150 <dcdc_enable>

		tick_count += tick_update;
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	4413      	add	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick_count);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4618      	mov	r0, r3
 80021a0:	f007 fdc1 	bl	8009d26 <osDelayUntil>
		dcdc_set_voltage(8);
 80021a4:	e7f0      	b.n	8002188 <task_heater+0x20>
 80021a6:	bf00      	nop
 80021a8:	51eb851f 	.word	0x51eb851f

080021ac <task_sensor_read>:

#include "cmsis_os.h"
#include "task_sensor_read.h"
#include "config/globals.h"

void task_sensor_read(void *argument) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

	int32_t tick_count = osKernelGetTickCount();
 80021b4:	f007 fcec 	bl	8009b90 <osKernelGetTickCount>
 80021b8:	4603      	mov	r3, r0
 80021ba:	60fb      	str	r3, [r7, #12]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 80021bc:	f007 fcfd 	bl	8009bba <osKernelGetTickFreq>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <task_sensor_read+0x34>)
 80021c4:	fba2 2303 	umull	r2, r3, r2, r3
 80021c8:	095b      	lsrs	r3, r3, #5
 80021ca:	60bb      	str	r3, [r7, #8]

	while (1) {

		tick_count += tick_update;
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	4413      	add	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick_count);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f007 fda5 	bl	8009d26 <osDelayUntil>
		tick_count += tick_update;
 80021dc:	e7f6      	b.n	80021cc <task_sensor_read+0x20>
 80021de:	bf00      	nop
 80021e0:	51eb851f 	.word	0x51eb851f

080021e4 <task_state_est>:

#include "cmsis_os.h"
#include "task_state_est.h"
#include "config/globals.h"

void task_state_est(void *argument) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]

	int32_t tick_count = osKernelGetTickCount();
 80021ec:	f007 fcd0 	bl	8009b90 <osKernelGetTickCount>
 80021f0:	4603      	mov	r3, r0
 80021f2:	60fb      	str	r3, [r7, #12]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 80021f4:	f007 fce1 	bl	8009bba <osKernelGetTickFreq>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4a07      	ldr	r2, [pc, #28]	; (8002218 <task_state_est+0x34>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	095b      	lsrs	r3, r3, #5
 8002202:	60bb      	str	r3, [r7, #8]

	while (1) {

		tick_count += tick_update;
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	4413      	add	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick_count);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4618      	mov	r0, r3
 8002210:	f007 fd89 	bl	8009d26 <osDelayUntil>
		tick_count += tick_update;
 8002214:	e7f6      	b.n	8002204 <task_state_est+0x20>
 8002216:	bf00      	nop
 8002218:	51eb851f 	.word	0x51eb851f

0800221c <fifo_init>:
 */

#include <string.h>
#include "fifo.h"

void fifo_init(fifo_t *fifo, uint8_t *pdata, uint32_t size) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  fifo->data = pdata;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	611a      	str	r2, [r3, #16]
  fifo->size = size;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	60da      	str	r2, [r3, #12]
  fifo->mutex = false;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	751a      	strb	r2, [r3, #20]
  fifo_flush(fifo);
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f804 	bl	8002248 <fifo_flush>
}
 8002240:	bf00      	nop
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <fifo_flush>:

void fifo_flush(fifo_t *fifo) {
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if (fifo->mutex == false) {
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7d1b      	ldrb	r3, [r3, #20]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	f083 0301 	eor.w	r3, r3, #1
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00e      	beq.n	800227e <fifo_flush+0x36>
    fifo->mutex = true;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	751a      	strb	r2, [r3, #20]
    fifo->tail = 0;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	605a      	str	r2, [r3, #4]
    fifo->head = 0;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
    fifo->used = 0;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	751a      	strb	r2, [r3, #20]
  }
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <fifo_get_length>:

uint32_t fifo_get_length(fifo_t *fifo) { return fifo->used; }
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <fifo_read_bytes>:
    return true;
  }
  return false;
}

bool fifo_read_bytes(fifo_t *fifo, uint8_t *data, uint32_t count) {
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
  if (fifo->mutex == false) {
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	7d1b      	ldrb	r3, [r3, #20]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f083 0301 	eor.w	r3, r3, #1
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d05a      	beq.n	8002374 <fifo_read_bytes+0xd2>
    fifo->mutex = true;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	751a      	strb	r2, [r3, #20]
    if (fifo->used < count) {
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d904      	bls.n	80022d8 <fifo_read_bytes+0x36>
      fifo->mutex = false;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	751a      	strb	r2, [r3, #20]
      return false;
 80022d4:	2300      	movs	r3, #0
 80022d6:	e04e      	b.n	8002376 <fifo_read_bytes+0xd4>
    }
    if (fifo->tail + count > fifo->size) {
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	441a      	add	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d923      	bls.n	8002330 <fifo_read_bytes+0x8e>
      uint32_t front = (fifo->tail + count) % fifo->size;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	68d2      	ldr	r2, [r2, #12]
 80022f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80022f8:	fb02 f201 	mul.w	r2, r2, r1
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
      uint32_t back = count - front;
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	613b      	str	r3, [r7, #16]
      memcpy(&data[0], &fifo->data[fifo->tail], back);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4413      	add	r3, r2
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4619      	mov	r1, r3
 8002316:	68b8      	ldr	r0, [r7, #8]
 8002318:	f00a fff0 	bl	800d2fc <memcpy>
      memcpy(&data[back], &fifo->data[0], front);
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	18d0      	adds	r0, r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4619      	mov	r1, r3
 800232a:	f00a ffe7 	bl	800d2fc <memcpy>
 800232e:	e009      	b.n	8002344 <fifo_read_bytes+0xa2>
    } else {
      memcpy(&data[0], &fifo->data[fifo->tail], count);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4413      	add	r3, r2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	4619      	mov	r1, r3
 800233e:	68b8      	ldr	r0, [r7, #8]
 8002340:	f00a ffdc 	bl	800d2fc <memcpy>
    }
    fifo->tail = (fifo->tail + count) % fifo->size;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4413      	add	r3, r2
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	68d2      	ldr	r2, [r2, #12]
 8002350:	fbb3 f1f2 	udiv	r1, r3, r2
 8002354:	fb02 f201 	mul.w	r2, r2, r1
 8002358:	1a9a      	subs	r2, r3, r2
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	605a      	str	r2, [r3, #4]
    fifo->used -= count;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	1ad2      	subs	r2, r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	751a      	strb	r2, [r3, #20]
    return true;
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <fifo_read_bytes+0xd4>
  }
  return false;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <fifo_write_bytes>:
    return i;
  }
  return 0;
}

bool fifo_write_bytes(fifo_t *fifo, uint8_t *data, uint32_t count) {
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
  // If there is not enough space return false
  if (fifo->mutex == false) {
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	7d1b      	ldrb	r3, [r3, #20]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f083 0301 	eor.w	r3, r3, #1
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d059      	beq.n	800244e <fifo_write_bytes+0xd0>
    fifo->mutex = true;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	751a      	strb	r2, [r3, #20]
    if ((fifo->size - fifo->used) < count) {
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d904      	bls.n	80023ba <fifo_write_bytes+0x3c>
      fifo->mutex = false;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	751a      	strb	r2, [r3, #20]
      return false;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e04a      	b.n	8002450 <fifo_write_bytes+0xd2>
    }
    if (count + fifo->head > fifo->size) {
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	441a      	add	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d91f      	bls.n	800240a <fifo_write_bytes+0x8c>
      uint32_t front = fifo->head + count - fifo->size;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	441a      	add	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	617b      	str	r3, [r7, #20]
      uint32_t back = count - front;
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	613b      	str	r3, [r7, #16]
      memcpy(&fifo->data[fifo->head], data, back);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	68b9      	ldr	r1, [r7, #8]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f00a ff83 	bl	800d2fc <memcpy>
      memcpy(&fifo->data[0], &data[back], front);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6918      	ldr	r0, [r3, #16]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4413      	add	r3, r2
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	4619      	mov	r1, r3
 8002404:	f00a ff7a 	bl	800d2fc <memcpy>
 8002408:	e009      	b.n	800241e <fifo_write_bytes+0xa0>
    } else {
      memcpy(&fifo->data[fifo->head], data, count);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4413      	add	r3, r2
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	4618      	mov	r0, r3
 800241a:	f00a ff6f 	bl	800d2fc <memcpy>
    }
    fifo->head = (fifo->head + count) % fifo->size;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	68d2      	ldr	r2, [r2, #12]
 800242a:	fbb3 f1f2 	udiv	r1, r3, r2
 800242e:	fb02 f201 	mul.w	r2, r2, r1
 8002432:	1a9a      	subs	r2, r3, r2
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	601a      	str	r2, [r3, #0]
    fifo->used += count;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	441a      	add	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	751a      	strb	r2, [r3, #20]
    return true;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <fifo_write_bytes+0xd2>
  }
  return false;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002490 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800245c:	480d      	ldr	r0, [pc, #52]	; (8002494 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800245e:	490e      	ldr	r1, [pc, #56]	; (8002498 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002460:	4a0e      	ldr	r2, [pc, #56]	; (800249c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002464:	e002      	b.n	800246c <LoopCopyDataInit>

08002466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246a:	3304      	adds	r3, #4

0800246c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800246c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002470:	d3f9      	bcc.n	8002466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002472:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002474:	4c0b      	ldr	r4, [pc, #44]	; (80024a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002478:	e001      	b.n	800247e <LoopFillZerobss>

0800247a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800247c:	3204      	adds	r2, #4

0800247e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002480:	d3fb      	bcc.n	800247a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002482:	f7fe ffb5 	bl	80013f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002486:	f00a ff15 	bl	800d2b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800248a:	f7fe f975 	bl	8000778 <main>
  bx  lr    
 800248e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002490:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002498:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800249c:	0800dd6c 	.word	0x0800dd6c
  ldr r2, =_sbss
 80024a0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80024a4:	20007ca8 	.word	0x20007ca8

080024a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a8:	e7fe      	b.n	80024a8 <ADC_IRQHandler>
	...

080024ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024b0:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <HAL_Init+0x40>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <HAL_Init+0x40>)
 80024b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_Init+0x40>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <HAL_Init+0x40>)
 80024c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_Init+0x40>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a07      	ldr	r2, [pc, #28]	; (80024ec <HAL_Init+0x40>)
 80024ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d4:	2003      	movs	r0, #3
 80024d6:	f000 fd12 	bl	8002efe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024da:	200f      	movs	r0, #15
 80024dc:	f7fe fece 	bl	800127c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e0:	f7fe fd3a 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40023c00 	.word	0x40023c00

080024f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_IncTick+0x20>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_IncTick+0x24>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <HAL_IncTick+0x24>)
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000008 	.word	0x20000008
 8002514:	200070c0 	.word	0x200070c0

08002518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return uwTick;
 800251c:	4b03      	ldr	r3, [pc, #12]	; (800252c <HAL_GetTick+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	200070c0 	.word	0x200070c0

08002530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff ffee 	bl	8002518 <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d005      	beq.n	8002556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_Delay+0x44>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002556:	bf00      	nop
 8002558:	f7ff ffde 	bl	8002518 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	429a      	cmp	r2, r3
 8002566:	d8f7      	bhi.n	8002558 <HAL_Delay+0x28>
  {
  }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000008 	.word	0x20000008

08002578 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e033      	b.n	80025f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fe fd0a 	bl	8000fb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d118      	bne.n	80025e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025be:	f023 0302 	bic.w	r3, r3, #2
 80025c2:	f043 0202 	orr.w	r2, r3, #2
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 faca 	bl	8002b64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f023 0303 	bic.w	r3, r3, #3
 80025de:	f043 0201 	orr.w	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
 80025e6:	e001      	b.n	80025ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_ADC_Start+0x1a>
 8002616:	2302      	movs	r3, #2
 8002618:	e097      	b.n	800274a <HAL_ADC_Start+0x14a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b01      	cmp	r3, #1
 800262e:	d018      	beq.n	8002662 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002640:	4b45      	ldr	r3, [pc, #276]	; (8002758 <HAL_ADC_Start+0x158>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a45      	ldr	r2, [pc, #276]	; (800275c <HAL_ADC_Start+0x15c>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	0c9a      	lsrs	r2, r3, #18
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002654:	e002      	b.n	800265c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	3b01      	subs	r3, #1
 800265a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f9      	bne.n	8002656 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b01      	cmp	r3, #1
 800266e:	d15f      	bne.n	8002730 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800269a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ae:	d106      	bne.n	80026be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b4:	f023 0206 	bic.w	r2, r3, #6
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	645a      	str	r2, [r3, #68]	; 0x44
 80026bc:	e002      	b.n	80026c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026cc:	4b24      	ldr	r3, [pc, #144]	; (8002760 <HAL_ADC_Start+0x160>)
 80026ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 031f 	and.w	r3, r3, #31
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10f      	bne.n	8002706 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d129      	bne.n	8002748 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	e020      	b.n	8002748 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a16      	ldr	r2, [pc, #88]	; (8002764 <HAL_ADC_Start+0x164>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d11b      	bne.n	8002748 <HAL_ADC_Start+0x148>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d114      	bne.n	8002748 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	e00b      	b.n	8002748 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f043 0210 	orr.w	r2, r3, #16
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000000 	.word	0x20000000
 800275c:	431bde83 	.word	0x431bde83
 8002760:	40012300 	.word	0x40012300
 8002764:	40012000 	.word	0x40012000

08002768 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_ADC_Stop+0x16>
 800277a:	2302      	movs	r3, #2
 800277c:	e021      	b.n	80027c2 <HAL_ADC_Stop+0x5a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d109      	bne.n	80027b8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	f043 0201 	orr.w	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ea:	d113      	bne.n	8002814 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027fa:	d10b      	bne.n	8002814 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	f043 0220 	orr.w	r2, r3, #32
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e063      	b.n	80028dc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002814:	f7ff fe80 	bl	8002518 <HAL_GetTick>
 8002818:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800281a:	e021      	b.n	8002860 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002822:	d01d      	beq.n	8002860 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d007      	beq.n	800283a <HAL_ADC_PollForConversion+0x6c>
 800282a:	f7ff fe75 	bl	8002518 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d212      	bcs.n	8002860 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b02      	cmp	r3, #2
 8002846:	d00b      	beq.n	8002860 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	f043 0204 	orr.w	r2, r3, #4
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e03d      	b.n	80028dc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b02      	cmp	r3, #2
 800286c:	d1d6      	bne.n	800281c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f06f 0212 	mvn.w	r2, #18
 8002876:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d123      	bne.n	80028da <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002896:	2b00      	cmp	r3, #0
 8002898:	d11f      	bne.n	80028da <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d111      	bne.n	80028da <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f043 0201 	orr.w	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_ADC_ConfigChannel+0x1c>
 8002918:	2302      	movs	r3, #2
 800291a:	e113      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x244>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b09      	cmp	r3, #9
 800292a:	d925      	bls.n	8002978 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68d9      	ldr	r1, [r3, #12]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	4613      	mov	r3, r2
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	4413      	add	r3, r2
 8002940:	3b1e      	subs	r3, #30
 8002942:	2207      	movs	r2, #7
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43da      	mvns	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	400a      	ands	r2, r1
 8002950:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68d9      	ldr	r1, [r3, #12]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	b29b      	uxth	r3, r3
 8002962:	4618      	mov	r0, r3
 8002964:	4603      	mov	r3, r0
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4403      	add	r3, r0
 800296a:	3b1e      	subs	r3, #30
 800296c:	409a      	lsls	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	e022      	b.n	80029be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6919      	ldr	r1, [r3, #16]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	2207      	movs	r2, #7
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43da      	mvns	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	400a      	ands	r2, r1
 800299a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6919      	ldr	r1, [r3, #16]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	4618      	mov	r0, r3
 80029ae:	4603      	mov	r3, r0
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	4403      	add	r3, r0
 80029b4:	409a      	lsls	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d824      	bhi.n	8002a10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	3b05      	subs	r3, #5
 80029d8:	221f      	movs	r2, #31
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43da      	mvns	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	400a      	ands	r2, r1
 80029e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	4618      	mov	r0, r3
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	3b05      	subs	r3, #5
 8002a02:	fa00 f203 	lsl.w	r2, r0, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a0e:	e04c      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b0c      	cmp	r3, #12
 8002a16:	d824      	bhi.n	8002a62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	3b23      	subs	r3, #35	; 0x23
 8002a2a:	221f      	movs	r2, #31
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43da      	mvns	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	400a      	ands	r2, r1
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	4618      	mov	r0, r3
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	3b23      	subs	r3, #35	; 0x23
 8002a54:	fa00 f203 	lsl.w	r2, r0, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a60:	e023      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	3b41      	subs	r3, #65	; 0x41
 8002a74:	221f      	movs	r2, #31
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	400a      	ands	r2, r1
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	4618      	mov	r0, r3
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3b41      	subs	r3, #65	; 0x41
 8002a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aaa:	4b29      	ldr	r3, [pc, #164]	; (8002b50 <HAL_ADC_ConfigChannel+0x250>)
 8002aac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a28      	ldr	r2, [pc, #160]	; (8002b54 <HAL_ADC_ConfigChannel+0x254>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d10f      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x1d8>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b12      	cmp	r3, #18
 8002abe:	d10b      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <HAL_ADC_ConfigChannel+0x254>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d12b      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x23a>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1c      	ldr	r2, [pc, #112]	; (8002b58 <HAL_ADC_ConfigChannel+0x258>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d003      	beq.n	8002af4 <HAL_ADC_ConfigChannel+0x1f4>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b11      	cmp	r3, #17
 8002af2:	d122      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a11      	ldr	r2, [pc, #68]	; (8002b58 <HAL_ADC_ConfigChannel+0x258>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d111      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_ADC_ConfigChannel+0x25c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a11      	ldr	r2, [pc, #68]	; (8002b60 <HAL_ADC_ConfigChannel+0x260>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	0c9a      	lsrs	r2, r3, #18
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b2c:	e002      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f9      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	40012300 	.word	0x40012300
 8002b54:	40012000 	.word	0x40012000
 8002b58:	10000012 	.word	0x10000012
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	431bde83 	.word	0x431bde83

08002b64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b6c:	4b79      	ldr	r3, [pc, #484]	; (8002d54 <ADC_Init+0x1f0>)
 8002b6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	431a      	orrs	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6859      	ldr	r1, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	021a      	lsls	r2, r3, #8
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6859      	ldr	r1, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6899      	ldr	r1, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	4a58      	ldr	r2, [pc, #352]	; (8002d58 <ADC_Init+0x1f4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d022      	beq.n	8002c42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6899      	ldr	r1, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6899      	ldr	r1, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	e00f      	b.n	8002c62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0202 	bic.w	r2, r2, #2
 8002c70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6899      	ldr	r1, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	7e1b      	ldrb	r3, [r3, #24]
 8002c7c:	005a      	lsls	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d01b      	beq.n	8002cc8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6859      	ldr	r1, [r3, #4]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	035a      	lsls	r2, r3, #13
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	e007      	b.n	8002cd8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	051a      	lsls	r2, r3, #20
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6899      	ldr	r1, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d1a:	025a      	lsls	r2, r3, #9
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6899      	ldr	r1, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	029a      	lsls	r2, r3, #10
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	609a      	str	r2, [r3, #8]
}
 8002d48:	bf00      	nop
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	40012300 	.word	0x40012300
 8002d58:	0f000001 	.word	0x0f000001

08002d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d8e:	4a04      	ldr	r2, [pc, #16]	; (8002da0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	60d3      	str	r3, [r2, #12]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <__NVIC_GetPriorityGrouping+0x18>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	f003 0307 	and.w	r3, r3, #7
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	db0b      	blt.n	8002dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	f003 021f 	and.w	r2, r3, #31
 8002dd8:	4907      	ldr	r1, [pc, #28]	; (8002df8 <__NVIC_EnableIRQ+0x38>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	2001      	movs	r0, #1
 8002de2:	fa00 f202 	lsl.w	r2, r0, r2
 8002de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	e000e100 	.word	0xe000e100

08002dfc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	db12      	blt.n	8002e34 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	f003 021f 	and.w	r2, r3, #31
 8002e14:	490a      	ldr	r1, [pc, #40]	; (8002e40 <__NVIC_DisableIRQ+0x44>)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e22:	3320      	adds	r3, #32
 8002e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e28:	f3bf 8f4f 	dsb	sy
}
 8002e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e2e:	f3bf 8f6f 	isb	sy
}
 8002e32:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	e000e100 	.word	0xe000e100

08002e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	6039      	str	r1, [r7, #0]
 8002e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	db0a      	blt.n	8002e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	490c      	ldr	r1, [pc, #48]	; (8002e90 <__NVIC_SetPriority+0x4c>)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	0112      	lsls	r2, r2, #4
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	440b      	add	r3, r1
 8002e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e6c:	e00a      	b.n	8002e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4908      	ldr	r1, [pc, #32]	; (8002e94 <__NVIC_SetPriority+0x50>)
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	3b04      	subs	r3, #4
 8002e7c:	0112      	lsls	r2, r2, #4
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	440b      	add	r3, r1
 8002e82:	761a      	strb	r2, [r3, #24]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000e100 	.word	0xe000e100
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b089      	sub	sp, #36	; 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f1c3 0307 	rsb	r3, r3, #7
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	bf28      	it	cs
 8002eb6:	2304      	movcs	r3, #4
 8002eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2b06      	cmp	r3, #6
 8002ec0:	d902      	bls.n	8002ec8 <NVIC_EncodePriority+0x30>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3b03      	subs	r3, #3
 8002ec6:	e000      	b.n	8002eca <NVIC_EncodePriority+0x32>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	401a      	ands	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43d9      	mvns	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	4313      	orrs	r3, r2
         );
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3724      	adds	r7, #36	; 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff ff28 	bl	8002d5c <__NVIC_SetPriorityGrouping>
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f26:	f7ff ff3d 	bl	8002da4 <__NVIC_GetPriorityGrouping>
 8002f2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	6978      	ldr	r0, [r7, #20]
 8002f32:	f7ff ffb1 	bl	8002e98 <NVIC_EncodePriority>
 8002f36:	4602      	mov	r2, r0
 8002f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff ff80 	bl	8002e44 <__NVIC_SetPriority>
}
 8002f44:	bf00      	nop
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff ff30 	bl	8002dc0 <__NVIC_EnableIRQ>
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff ff40 	bl	8002dfc <__NVIC_DisableIRQ>
}
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b089      	sub	sp, #36	; 0x24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	e159      	b.n	8003254 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	f040 8148 	bne.w	800324e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d005      	beq.n	8002fd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d130      	bne.n	8003038 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800300c:	2201      	movs	r2, #1
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f003 0201 	and.w	r2, r3, #1
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	2b03      	cmp	r3, #3
 8003042:	d017      	beq.n	8003074 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	2203      	movs	r2, #3
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d123      	bne.n	80030c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	08da      	lsrs	r2, r3, #3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3208      	adds	r2, #8
 8003088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	220f      	movs	r2, #15
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	08da      	lsrs	r2, r3, #3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3208      	adds	r2, #8
 80030c2:	69b9      	ldr	r1, [r7, #24]
 80030c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0203 	and.w	r2, r3, #3
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80a2 	beq.w	800324e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	4b57      	ldr	r3, [pc, #348]	; (800326c <HAL_GPIO_Init+0x2e8>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	4a56      	ldr	r2, [pc, #344]	; (800326c <HAL_GPIO_Init+0x2e8>)
 8003114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003118:	6453      	str	r3, [r2, #68]	; 0x44
 800311a:	4b54      	ldr	r3, [pc, #336]	; (800326c <HAL_GPIO_Init+0x2e8>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003126:	4a52      	ldr	r2, [pc, #328]	; (8003270 <HAL_GPIO_Init+0x2ec>)
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	3302      	adds	r3, #2
 800312e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	220f      	movs	r2, #15
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a49      	ldr	r2, [pc, #292]	; (8003274 <HAL_GPIO_Init+0x2f0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d019      	beq.n	8003186 <HAL_GPIO_Init+0x202>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a48      	ldr	r2, [pc, #288]	; (8003278 <HAL_GPIO_Init+0x2f4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <HAL_GPIO_Init+0x1fe>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a47      	ldr	r2, [pc, #284]	; (800327c <HAL_GPIO_Init+0x2f8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00d      	beq.n	800317e <HAL_GPIO_Init+0x1fa>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a46      	ldr	r2, [pc, #280]	; (8003280 <HAL_GPIO_Init+0x2fc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <HAL_GPIO_Init+0x1f6>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a45      	ldr	r2, [pc, #276]	; (8003284 <HAL_GPIO_Init+0x300>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_GPIO_Init+0x1f2>
 8003172:	2304      	movs	r3, #4
 8003174:	e008      	b.n	8003188 <HAL_GPIO_Init+0x204>
 8003176:	2307      	movs	r3, #7
 8003178:	e006      	b.n	8003188 <HAL_GPIO_Init+0x204>
 800317a:	2303      	movs	r3, #3
 800317c:	e004      	b.n	8003188 <HAL_GPIO_Init+0x204>
 800317e:	2302      	movs	r3, #2
 8003180:	e002      	b.n	8003188 <HAL_GPIO_Init+0x204>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_GPIO_Init+0x204>
 8003186:	2300      	movs	r3, #0
 8003188:	69fa      	ldr	r2, [r7, #28]
 800318a:	f002 0203 	and.w	r2, r2, #3
 800318e:	0092      	lsls	r2, r2, #2
 8003190:	4093      	lsls	r3, r2
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4313      	orrs	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003198:	4935      	ldr	r1, [pc, #212]	; (8003270 <HAL_GPIO_Init+0x2ec>)
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	089b      	lsrs	r3, r3, #2
 800319e:	3302      	adds	r3, #2
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031a6:	4b38      	ldr	r3, [pc, #224]	; (8003288 <HAL_GPIO_Init+0x304>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031ca:	4a2f      	ldr	r2, [pc, #188]	; (8003288 <HAL_GPIO_Init+0x304>)
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031d0:	4b2d      	ldr	r3, [pc, #180]	; (8003288 <HAL_GPIO_Init+0x304>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	43db      	mvns	r3, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4013      	ands	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031f4:	4a24      	ldr	r2, [pc, #144]	; (8003288 <HAL_GPIO_Init+0x304>)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031fa:	4b23      	ldr	r3, [pc, #140]	; (8003288 <HAL_GPIO_Init+0x304>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800321e:	4a1a      	ldr	r2, [pc, #104]	; (8003288 <HAL_GPIO_Init+0x304>)
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003224:	4b18      	ldr	r3, [pc, #96]	; (8003288 <HAL_GPIO_Init+0x304>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003248:	4a0f      	ldr	r2, [pc, #60]	; (8003288 <HAL_GPIO_Init+0x304>)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	3301      	adds	r3, #1
 8003252:	61fb      	str	r3, [r7, #28]
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	2b0f      	cmp	r3, #15
 8003258:	f67f aea2 	bls.w	8002fa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800325c:	bf00      	nop
 800325e:	bf00      	nop
 8003260:	3724      	adds	r7, #36	; 0x24
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40023800 	.word	0x40023800
 8003270:	40013800 	.word	0x40013800
 8003274:	40020000 	.word	0x40020000
 8003278:	40020400 	.word	0x40020400
 800327c:	40020800 	.word	0x40020800
 8003280:	40020c00 	.word	0x40020c00
 8003284:	40021000 	.word	0x40021000
 8003288:	40013c00 	.word	0x40013c00

0800328c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	887b      	ldrh	r3, [r7, #2]
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
 80032a8:	e001      	b.n	80032ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032aa:	2300      	movs	r3, #0
 80032ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	807b      	strh	r3, [r7, #2]
 80032c8:	4613      	mov	r3, r2
 80032ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032cc:	787b      	ldrb	r3, [r7, #1]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032d2:	887a      	ldrh	r2, [r7, #2]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032d8:	e003      	b.n	80032e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032da:	887b      	ldrh	r3, [r7, #2]
 80032dc:	041a      	lsls	r2, r3, #16
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	619a      	str	r2, [r3, #24]
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
	...

080032f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032fa:	4b08      	ldr	r3, [pc, #32]	; (800331c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	4013      	ands	r3, r2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d006      	beq.n	8003314 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003306:	4a05      	ldr	r2, [pc, #20]	; (800331c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003308:	88fb      	ldrh	r3, [r7, #6]
 800330a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd fd78 	bl	8000e04 <HAL_GPIO_EXTI_Callback>
  }
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40013c00 	.word	0x40013c00

08003320 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003322:	b08f      	sub	sp, #60	; 0x3c
 8003324:	af0a      	add	r7, sp, #40	; 0x28
 8003326:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e10f      	b.n	8003552 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d106      	bne.n	8003352 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f009 fca1 	bl	800cc94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2203      	movs	r2, #3
 8003356:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d102      	bne.n	800336c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f003 fc8a 	bl	8006c8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	687e      	ldr	r6, [r7, #4]
 800337e:	466d      	mov	r5, sp
 8003380:	f106 0410 	add.w	r4, r6, #16
 8003384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800338a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800338c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003390:	e885 0003 	stmia.w	r5, {r0, r1}
 8003394:	1d33      	adds	r3, r6, #4
 8003396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003398:	6838      	ldr	r0, [r7, #0]
 800339a:	f003 fb61 	bl	8006a60 <USB_CoreInit>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0d0      	b.n	8003552 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f003 fc78 	bl	8006cac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033bc:	2300      	movs	r3, #0
 80033be:	73fb      	strb	r3, [r7, #15]
 80033c0:	e04a      	b.n	8003458 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033c2:	7bfa      	ldrb	r2, [r7, #15]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	333d      	adds	r3, #61	; 0x3d
 80033d2:	2201      	movs	r2, #1
 80033d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033d6:	7bfa      	ldrb	r2, [r7, #15]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	333c      	adds	r3, #60	; 0x3c
 80033e6:	7bfa      	ldrb	r2, [r7, #15]
 80033e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	b298      	uxth	r0, r3
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	3342      	adds	r3, #66	; 0x42
 80033fe:	4602      	mov	r2, r0
 8003400:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003402:	7bfa      	ldrb	r2, [r7, #15]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	333f      	adds	r3, #63	; 0x3f
 8003412:	2200      	movs	r2, #0
 8003414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	3344      	adds	r3, #68	; 0x44
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800342a:	7bfa      	ldrb	r2, [r7, #15]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	3348      	adds	r3, #72	; 0x48
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800343e:	7bfa      	ldrb	r2, [r7, #15]
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	3350      	adds	r3, #80	; 0x50
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	3301      	adds	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	429a      	cmp	r2, r3
 8003460:	d3af      	bcc.n	80033c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003462:	2300      	movs	r3, #0
 8003464:	73fb      	strb	r3, [r7, #15]
 8003466:	e044      	b.n	80034f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003468:	7bfa      	ldrb	r2, [r7, #15]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800347a:	2200      	movs	r2, #0
 800347c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800347e:	7bfa      	ldrb	r2, [r7, #15]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034aa:	7bfa      	ldrb	r2, [r7, #15]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034c0:	7bfa      	ldrb	r2, [r7, #15]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034d6:	7bfa      	ldrb	r2, [r7, #15]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	3301      	adds	r3, #1
 80034f0:	73fb      	strb	r3, [r7, #15]
 80034f2:	7bfa      	ldrb	r2, [r7, #15]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d3b5      	bcc.n	8003468 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	687e      	ldr	r6, [r7, #4]
 8003504:	466d      	mov	r5, sp
 8003506:	f106 0410 	add.w	r4, r6, #16
 800350a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800350c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800350e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003512:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003516:	e885 0003 	stmia.w	r5, {r0, r1}
 800351a:	1d33      	adds	r3, r6, #4
 800351c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800351e:	6838      	ldr	r0, [r7, #0]
 8003520:	f003 fc10 	bl	8006d44 <USB_DevInit>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2202      	movs	r2, #2
 800352e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e00d      	b.n	8003552 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f004 fc8c 	bl	8007e68 <USB_DevDisconnect>

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800355a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_PCD_Start+0x1c>
 8003572:	2302      	movs	r3, #2
 8003574:	e020      	b.n	80035b8 <HAL_PCD_Start+0x5e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	2b01      	cmp	r3, #1
 8003584:	d109      	bne.n	800359a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800358a:	2b01      	cmp	r3, #1
 800358c:	d005      	beq.n	800359a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f003 fb62 	bl	8006c68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f004 fc3c 	bl	8007e26 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b08d      	sub	sp, #52	; 0x34
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f004 fcfa 	bl	8007fd0 <USB_GetMode>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f040 839d 	bne.w	8003d1e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f004 fc5e 	bl	8007eaa <USB_ReadInterrupts>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8393 	beq.w	8003d1c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f004 fc55 	bl	8007eaa <USB_ReadInterrupts>
 8003600:	4603      	mov	r3, r0
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b02      	cmp	r3, #2
 8003608:	d107      	bne.n	800361a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f002 0202 	and.w	r2, r2, #2
 8003618:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f004 fc43 	bl	8007eaa <USB_ReadInterrupts>
 8003624:	4603      	mov	r3, r0
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	2b10      	cmp	r3, #16
 800362c:	d161      	bne.n	80036f2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699a      	ldr	r2, [r3, #24]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0210 	bic.w	r2, r2, #16
 800363c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	f003 020f 	and.w	r2, r3, #15
 800364a:	4613      	mov	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	3304      	adds	r3, #4
 800365c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	0c5b      	lsrs	r3, r3, #17
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	2b02      	cmp	r3, #2
 8003668:	d124      	bne.n	80036b4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d035      	beq.n	80036e2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003684:	b29b      	uxth	r3, r3
 8003686:	461a      	mov	r2, r3
 8003688:	6a38      	ldr	r0, [r7, #32]
 800368a:	f004 fa7a 	bl	8007b82 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800369a:	441a      	add	r2, r3
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	699a      	ldr	r2, [r3, #24]
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	091b      	lsrs	r3, r3, #4
 80036a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036ac:	441a      	add	r2, r3
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	619a      	str	r2, [r3, #24]
 80036b2:	e016      	b.n	80036e2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	0c5b      	lsrs	r3, r3, #17
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	2b06      	cmp	r3, #6
 80036be:	d110      	bne.n	80036e2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036c6:	2208      	movs	r2, #8
 80036c8:	4619      	mov	r1, r3
 80036ca:	6a38      	ldr	r0, [r7, #32]
 80036cc:	f004 fa59 	bl	8007b82 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036dc:	441a      	add	r2, r3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699a      	ldr	r2, [r3, #24]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0210 	orr.w	r2, r2, #16
 80036f0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f004 fbd7 	bl	8007eaa <USB_ReadInterrupts>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003702:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003706:	d16e      	bne.n	80037e6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f004 fbdd 	bl	8007ed0 <USB_ReadDevAllOutEpInterrupt>
 8003716:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003718:	e062      	b.n	80037e0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800371a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d057      	beq.n	80037d4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f004 fc02 	bl	8007f38 <USB_ReadDevOutEPInterrupt>
 8003734:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00c      	beq.n	800375a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374c:	461a      	mov	r2, r3
 800374e:	2301      	movs	r3, #1
 8003750:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fdb1 	bl	80042bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00c      	beq.n	800377e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003770:	461a      	mov	r2, r3
 8003772:	2308      	movs	r3, #8
 8003774:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 feab 	bl	80044d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f003 0310 	and.w	r3, r3, #16
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003794:	461a      	mov	r2, r3
 8003796:	2310      	movs	r3, #16
 8003798:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b0:	461a      	mov	r2, r3
 80037b2:	2320      	movs	r3, #32
 80037b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d009      	beq.n	80037d4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037cc:	461a      	mov	r2, r3
 80037ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037d2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	3301      	adds	r3, #1
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d199      	bne.n	800371a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f004 fb5d 	bl	8007eaa <USB_ReadInterrupts>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037fa:	f040 80c0 	bne.w	800397e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f004 fb7e 	bl	8007f04 <USB_ReadDevAllInEpInterrupt>
 8003808:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800380e:	e0b2      	b.n	8003976 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80a7 	beq.w	800396a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	4611      	mov	r1, r2
 8003826:	4618      	mov	r0, r3
 8003828:	f004 fba4 	bl	8007f74 <USB_ReadDevInEPInterrupt>
 800382c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d057      	beq.n	80038e8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	2201      	movs	r2, #1
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	43db      	mvns	r3, r3
 8003852:	69f9      	ldr	r1, [r7, #28]
 8003854:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003858:	4013      	ands	r3, r2
 800385a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	4413      	add	r3, r2
 8003864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003868:	461a      	mov	r2, r3
 800386a:	2301      	movs	r3, #1
 800386c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d132      	bne.n	80038dc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387a:	4613      	mov	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	3348      	adds	r3, #72	; 0x48
 8003886:	6819      	ldr	r1, [r3, #0]
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388c:	4613      	mov	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4403      	add	r3, r0
 8003896:	3344      	adds	r3, #68	; 0x44
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4419      	add	r1, r3
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4403      	add	r3, r0
 80038aa:	3348      	adds	r3, #72	; 0x48
 80038ac:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d113      	bne.n	80038dc <HAL_PCD_IRQHandler+0x31c>
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	3350      	adds	r3, #80	; 0x50
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d108      	bne.n	80038dc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038d4:	461a      	mov	r2, r3
 80038d6:	2101      	movs	r1, #1
 80038d8:	f004 fbac 	bl	8008034 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	4619      	mov	r1, r3
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f009 fa57 	bl	800cd96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d008      	beq.n	8003904 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fe:	461a      	mov	r2, r3
 8003900:	2308      	movs	r3, #8
 8003902:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391a:	461a      	mov	r2, r3
 800391c:	2310      	movs	r3, #16
 800391e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003936:	461a      	mov	r2, r3
 8003938:	2340      	movs	r3, #64	; 0x40
 800393a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003952:	461a      	mov	r2, r3
 8003954:	2302      	movs	r3, #2
 8003956:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003962:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fc1b 	bl	80041a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	3301      	adds	r3, #1
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	085b      	lsrs	r3, r3, #1
 8003974:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003978:	2b00      	cmp	r3, #0
 800397a:	f47f af49 	bne.w	8003810 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f004 fa91 	bl	8007eaa <USB_ReadInterrupts>
 8003988:	4603      	mov	r3, r0
 800398a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800398e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003992:	d122      	bne.n	80039da <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d108      	bne.n	80039c4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039ba:	2100      	movs	r1, #0
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fe27 	bl	8004610 <HAL_PCDEx_LPM_Callback>
 80039c2:	e002      	b.n	80039ca <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f009 fa53 	bl	800ce70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695a      	ldr	r2, [r3, #20]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80039d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f004 fa63 	bl	8007eaa <USB_ReadInterrupts>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ee:	d112      	bne.n	8003a16 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d102      	bne.n	8003a06 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f009 fa0f 	bl	800ce24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003a14:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f004 fa45 	bl	8007eaa <USB_ReadInterrupts>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2a:	f040 80c7 	bne.w	8003bbc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a3c:	f023 0301 	bic.w	r3, r3, #1
 8003a40:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2110      	movs	r1, #16
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f003 fadf 	bl	800700c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a52:	e056      	b.n	8003b02 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a60:	461a      	mov	r2, r3
 8003a62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a66:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a78:	0151      	lsls	r1, r2, #5
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	440a      	add	r2, r1
 8003a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a86:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a98:	0151      	lsls	r1, r2, #5
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	440a      	add	r2, r1
 8003a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003aa6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003aba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003acc:	0151      	lsls	r1, r2, #5
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	440a      	add	r2, r1
 8003ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ad6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ada:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aec:	0151      	lsls	r1, r2, #5
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	440a      	add	r2, r1
 8003af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003af6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003afa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afe:	3301      	adds	r3, #1
 8003b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d3a3      	bcc.n	8003a54 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b1a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003b1e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d016      	beq.n	8003b56 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b38:	f043 030b 	orr.w	r3, r3, #11
 8003b3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b48:	69fa      	ldr	r2, [r7, #28]
 8003b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b4e:	f043 030b 	orr.w	r3, r3, #11
 8003b52:	6453      	str	r3, [r2, #68]	; 0x44
 8003b54:	e015      	b.n	8003b82 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b68:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003b6c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b7c:	f043 030b 	orr.w	r3, r3, #11
 8003b80:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b90:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003b94:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f004 fa44 	bl	8008034 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003bba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f004 f972 	bl	8007eaa <USB_ReadInterrupts>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd0:	d124      	bne.n	8003c1c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f004 fa08 	bl	8007fec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f003 fa70 	bl	80070c6 <USB_GetDevSpeed>
 8003be6:	4603      	mov	r3, r0
 8003be8:	461a      	mov	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681c      	ldr	r4, [r3, #0]
 8003bf2:	f001 f985 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8003bf6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	4620      	mov	r0, r4
 8003c02:	f002 ff8f 	bl	8006b24 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f009 f8ed 	bl	800cde6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695a      	ldr	r2, [r3, #20]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003c1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f004 f942 	bl	8007eaa <USB_ReadInterrupts>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d10a      	bne.n	8003c46 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f009 f8ca 	bl	800cdca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695a      	ldr	r2, [r3, #20]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f002 0208 	and.w	r2, r2, #8
 8003c44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f004 f92d 	bl	8007eaa <USB_ReadInterrupts>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c5a:	d10f      	bne.n	8003c7c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	4619      	mov	r1, r3
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f009 f922 	bl	800ceb0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695a      	ldr	r2, [r3, #20]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003c7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f004 f912 	bl	8007eaa <USB_ReadInterrupts>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c90:	d10f      	bne.n	8003cb2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f009 f8f5 	bl	800ce8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f004 f8f7 	bl	8007eaa <USB_ReadInterrupts>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc6:	d10a      	bne.n	8003cde <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f009 f903 	bl	800ced4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003cdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f004 f8e1 	bl	8007eaa <USB_ReadInterrupts>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d115      	bne.n	8003d1e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f009 f8f3 	bl	800cef0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6859      	ldr	r1, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	e000      	b.n	8003d1e <HAL_PCD_IRQHandler+0x75e>
      return;
 8003d1c:	bf00      	nop
    }
  }
}
 8003d1e:	3734      	adds	r7, #52	; 0x34
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd90      	pop	{r4, r7, pc}

08003d24 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_PCD_SetAddress+0x1a>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e013      	b.n	8003d66 <HAL_PCD_SetAddress+0x42>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	78fa      	ldrb	r2, [r7, #3]
 8003d4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f004 f83f 	bl	8007dda <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	4608      	mov	r0, r1
 8003d78:	4611      	mov	r1, r2
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	70fb      	strb	r3, [r7, #3]
 8003d80:	460b      	mov	r3, r1
 8003d82:	803b      	strh	r3, [r7, #0]
 8003d84:	4613      	mov	r3, r2
 8003d86:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	da0f      	bge.n	8003db4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d94:	78fb      	ldrb	r3, [r7, #3]
 8003d96:	f003 020f 	and.w	r2, r3, #15
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	3338      	adds	r3, #56	; 0x38
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	4413      	add	r3, r2
 8003da8:	3304      	adds	r3, #4
 8003daa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2201      	movs	r2, #1
 8003db0:	705a      	strb	r2, [r3, #1]
 8003db2:	e00f      	b.n	8003dd4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	f003 020f 	and.w	r2, r3, #15
 8003dba:	4613      	mov	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	4413      	add	r3, r2
 8003dca:	3304      	adds	r3, #4
 8003dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003de0:	883a      	ldrh	r2, [r7, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	78ba      	ldrb	r2, [r7, #2]
 8003dea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	785b      	ldrb	r3, [r3, #1]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d004      	beq.n	8003dfe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003dfe:	78bb      	ldrb	r3, [r7, #2]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d102      	bne.n	8003e0a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_PCD_EP_Open+0xaa>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e00e      	b.n	8003e36 <HAL_PCD_EP_Open+0xc8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68f9      	ldr	r1, [r7, #12]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f003 f972 	bl	8007110 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003e34:	7afb      	ldrb	r3, [r7, #11]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	460b      	mov	r3, r1
 8003e48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	da0f      	bge.n	8003e72 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	f003 020f 	and.w	r2, r3, #15
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	3338      	adds	r3, #56	; 0x38
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	3304      	adds	r3, #4
 8003e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	705a      	strb	r2, [r3, #1]
 8003e70:	e00f      	b.n	8003e92 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	f003 020f 	and.w	r2, r3, #15
 8003e78:	4613      	mov	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	4413      	add	r3, r2
 8003e88:	3304      	adds	r3, #4
 8003e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	f003 030f 	and.w	r3, r3, #15
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_PCD_EP_Close+0x6e>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e00e      	b.n	8003eca <HAL_PCD_EP_Close+0x8c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68f9      	ldr	r1, [r7, #12]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f003 f9b0 	bl	8007220 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b086      	sub	sp, #24
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ee2:	7afb      	ldrb	r3, [r7, #11]
 8003ee4:	f003 020f 	and.w	r2, r3, #15
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3304      	adds	r3, #4
 8003efa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2200      	movs	r2, #0
 8003f12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f14:	7afb      	ldrb	r3, [r7, #11]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d102      	bne.n	8003f2e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f2e:	7afb      	ldrb	r3, [r7, #11]
 8003f30:	f003 030f 	and.w	r3, r3, #15
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d109      	bne.n	8003f4c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	6979      	ldr	r1, [r7, #20]
 8003f46:	f003 fc8b 	bl	8007860 <USB_EP0StartXfer>
 8003f4a:	e008      	b.n	8003f5e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	6979      	ldr	r1, [r7, #20]
 8003f5a:	f003 fa3d 	bl	80073d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	f003 020f 	and.w	r2, r3, #15
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	1a9b      	subs	r3, r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003f8a:	681b      	ldr	r3, [r3, #0]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	607a      	str	r2, [r7, #4]
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa8:	7afb      	ldrb	r3, [r7, #11]
 8003faa:	f003 020f 	and.w	r2, r3, #15
 8003fae:	4613      	mov	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	1a9b      	subs	r3, r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	3338      	adds	r3, #56	; 0x38
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fd8:	7afb      	ldrb	r3, [r7, #11]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d102      	bne.n	8003ff2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ff2:	7afb      	ldrb	r3, [r7, #11]
 8003ff4:	f003 030f 	and.w	r3, r3, #15
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d109      	bne.n	8004010 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	6979      	ldr	r1, [r7, #20]
 800400a:	f003 fc29 	bl	8007860 <USB_EP0StartXfer>
 800400e:	e008      	b.n	8004022 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	6979      	ldr	r1, [r7, #20]
 800401e:	f003 f9db 	bl	80073d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	f003 020f 	and.w	r2, r3, #15
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	429a      	cmp	r2, r3
 8004044:	d901      	bls.n	800404a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e050      	b.n	80040ec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800404a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800404e:	2b00      	cmp	r3, #0
 8004050:	da0f      	bge.n	8004072 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004052:	78fb      	ldrb	r3, [r7, #3]
 8004054:	f003 020f 	and.w	r2, r3, #15
 8004058:	4613      	mov	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	3338      	adds	r3, #56	; 0x38
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	4413      	add	r3, r2
 8004066:	3304      	adds	r3, #4
 8004068:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2201      	movs	r2, #1
 800406e:	705a      	strb	r2, [r3, #1]
 8004070:	e00d      	b.n	800408e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004072:	78fa      	ldrb	r2, [r7, #3]
 8004074:	4613      	mov	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	4413      	add	r3, r2
 8004084:	3304      	adds	r3, #4
 8004086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	b2da      	uxtb	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_PCD_EP_SetStall+0x82>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e01e      	b.n	80040ec <HAL_PCD_EP_SetStall+0xc0>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68f9      	ldr	r1, [r7, #12]
 80040bc:	4618      	mov	r0, r3
 80040be:	f003 fdb8 	bl	8007c32 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	b2d9      	uxtb	r1, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040dc:	461a      	mov	r2, r3
 80040de:	f003 ffa9 	bl	8008034 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	f003 020f 	and.w	r2, r3, #15
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	429a      	cmp	r2, r3
 800410c:	d901      	bls.n	8004112 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e042      	b.n	8004198 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004116:	2b00      	cmp	r3, #0
 8004118:	da0f      	bge.n	800413a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	f003 020f 	and.w	r2, r3, #15
 8004120:	4613      	mov	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	3338      	adds	r3, #56	; 0x38
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	3304      	adds	r3, #4
 8004130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	705a      	strb	r2, [r3, #1]
 8004138:	e00f      	b.n	800415a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800413a:	78fb      	ldrb	r3, [r7, #3]
 800413c:	f003 020f 	and.w	r2, r3, #15
 8004140:	4613      	mov	r3, r2
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	4413      	add	r3, r2
 8004150:	3304      	adds	r3, #4
 8004152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	b2da      	uxtb	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_PCD_EP_ClrStall+0x86>
 8004176:	2302      	movs	r3, #2
 8004178:	e00e      	b.n	8004198 <HAL_PCD_EP_ClrStall+0xa4>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68f9      	ldr	r1, [r7, #12]
 8004188:	4618      	mov	r0, r3
 800418a:	f003 fdc0 	bl	8007d0e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	4613      	mov	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	3338      	adds	r3, #56	; 0x38
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	4413      	add	r3, r2
 80041c4:	3304      	adds	r3, #4
 80041c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	699a      	ldr	r2, [r3, #24]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d901      	bls.n	80041d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e06c      	b.n	80042b2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d902      	bls.n	80041f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	3303      	adds	r3, #3
 80041f8:	089b      	lsrs	r3, r3, #2
 80041fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041fc:	e02b      	b.n	8004256 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	429a      	cmp	r2, r3
 8004212:	d902      	bls.n	800421a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3303      	adds	r3, #3
 800421e:	089b      	lsrs	r3, r3, #2
 8004220:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	68d9      	ldr	r1, [r3, #12]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004232:	b2db      	uxtb	r3, r3
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	4603      	mov	r3, r0
 8004238:	6978      	ldr	r0, [r7, #20]
 800423a:	f003 fc64 	bl	8007b06 <USB_WritePacket>

    ep->xfer_buff  += len;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	441a      	add	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	441a      	add	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	b29b      	uxth	r3, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	429a      	cmp	r2, r3
 800426a:	d809      	bhi.n	8004280 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	699a      	ldr	r2, [r3, #24]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004274:	429a      	cmp	r2, r3
 8004276:	d203      	bcs.n	8004280 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1be      	bne.n	80041fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	695a      	ldr	r2, [r3, #20]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	429a      	cmp	r2, r3
 800428a:	d811      	bhi.n	80042b0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	2201      	movs	r2, #1
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	6939      	ldr	r1, [r7, #16]
 80042a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042ac:	4013      	ands	r3, r2
 80042ae:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3720      	adds	r7, #32
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
	...

080042bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	333c      	adds	r3, #60	; 0x3c
 80042d4:	3304      	adds	r3, #4
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	f040 80a0 	bne.w	8004434 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d015      	beq.n	800432a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4a72      	ldr	r2, [pc, #456]	; (80044cc <PCD_EP_OutXfrComplete_int+0x210>)
 8004302:	4293      	cmp	r3, r2
 8004304:	f240 80dd 	bls.w	80044c2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 80d7 	beq.w	80044c2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004320:	461a      	mov	r2, r3
 8004322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004326:	6093      	str	r3, [r2, #8]
 8004328:	e0cb      	b.n	80044c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d009      	beq.n	8004348 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004340:	461a      	mov	r2, r3
 8004342:	2320      	movs	r3, #32
 8004344:	6093      	str	r3, [r2, #8]
 8004346:	e0bc      	b.n	80044c2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800434e:	2b00      	cmp	r3, #0
 8004350:	f040 80b7 	bne.w	80044c2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4a5d      	ldr	r2, [pc, #372]	; (80044cc <PCD_EP_OutXfrComplete_int+0x210>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d90f      	bls.n	800437c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004372:	461a      	mov	r2, r3
 8004374:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004378:	6093      	str	r3, [r2, #8]
 800437a:	e0a2      	b.n	80044c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	1a9b      	subs	r3, r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800438e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	0159      	lsls	r1, r3, #5
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	440b      	add	r3, r1
 8004398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80043a2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4403      	add	r3, r0
 80043b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80043b6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	4613      	mov	r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80043ca:	6819      	ldr	r1, [r3, #0]
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	4613      	mov	r3, r2
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4403      	add	r3, r0
 80043da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4419      	add	r1, r3
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	4613      	mov	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	1a9b      	subs	r3, r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4403      	add	r3, r0
 80043f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80043f4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d114      	bne.n	8004426 <PCD_EP_OutXfrComplete_int+0x16a>
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d108      	bne.n	8004426 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800441e:	461a      	mov	r2, r3
 8004420:	2101      	movs	r1, #1
 8004422:	f003 fe07 	bl	8008034 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	b2db      	uxtb	r3, r3
 800442a:	4619      	mov	r1, r3
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f008 fc97 	bl	800cd60 <HAL_PCD_DataOutStageCallback>
 8004432:	e046      	b.n	80044c2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4a26      	ldr	r2, [pc, #152]	; (80044d0 <PCD_EP_OutXfrComplete_int+0x214>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d124      	bne.n	8004486 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004452:	461a      	mov	r2, r3
 8004454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004458:	6093      	str	r3, [r2, #8]
 800445a:	e032      	b.n	80044c2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b00      	cmp	r3, #0
 8004464:	d008      	beq.n	8004478 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004472:	461a      	mov	r2, r3
 8004474:	2320      	movs	r3, #32
 8004476:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	4619      	mov	r1, r3
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f008 fc6e 	bl	800cd60 <HAL_PCD_DataOutStageCallback>
 8004484:	e01d      	b.n	80044c2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d114      	bne.n	80044b6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	4613      	mov	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	1a9b      	subs	r3, r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d108      	bne.n	80044b6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044ae:	461a      	mov	r2, r3
 80044b0:	2100      	movs	r1, #0
 80044b2:	f003 fdbf 	bl	8008034 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	4619      	mov	r1, r3
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f008 fc4f 	bl	800cd60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	4f54300a 	.word	0x4f54300a
 80044d0:	4f54310a 	.word	0x4f54310a

080044d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	333c      	adds	r3, #60	; 0x3c
 80044ec:	3304      	adds	r3, #4
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4a15      	ldr	r2, [pc, #84]	; (800455c <PCD_EP_OutSetupPacket_int+0x88>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d90e      	bls.n	8004528 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004510:	2b00      	cmp	r3, #0
 8004512:	d009      	beq.n	8004528 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004520:	461a      	mov	r2, r3
 8004522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004526:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f008 fc07 	bl	800cd3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4a0a      	ldr	r2, [pc, #40]	; (800455c <PCD_EP_OutSetupPacket_int+0x88>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d90c      	bls.n	8004550 <PCD_EP_OutSetupPacket_int+0x7c>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d108      	bne.n	8004550 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6818      	ldr	r0, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004548:	461a      	mov	r2, r3
 800454a:	2101      	movs	r1, #1
 800454c:	f003 fd72 	bl	8008034 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	4f54300a 	.word	0x4f54300a

08004560 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
 800456c:	4613      	mov	r3, r2
 800456e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d107      	bne.n	800458e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800457e:	883b      	ldrh	r3, [r7, #0]
 8004580:	0419      	lsls	r1, r3, #16
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	430a      	orrs	r2, r1
 800458a:	629a      	str	r2, [r3, #40]	; 0x28
 800458c:	e028      	b.n	80045e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	0c1b      	lsrs	r3, r3, #16
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	4413      	add	r3, r2
 800459a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800459c:	2300      	movs	r3, #0
 800459e:	73fb      	strb	r3, [r7, #15]
 80045a0:	e00d      	b.n	80045be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	3340      	adds	r3, #64	; 0x40
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	0c1b      	lsrs	r3, r3, #16
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	4413      	add	r3, r2
 80045b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	3301      	adds	r3, #1
 80045bc:	73fb      	strb	r3, [r7, #15]
 80045be:	7bfa      	ldrb	r2, [r7, #15]
 80045c0:	78fb      	ldrb	r3, [r7, #3]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d3ec      	bcc.n	80045a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80045c8:	883b      	ldrh	r3, [r7, #0]
 80045ca:	0418      	lsls	r0, r3, #16
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6819      	ldr	r1, [r3, #0]
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	4302      	orrs	r2, r0
 80045d8:	3340      	adds	r3, #64	; 0x40
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	460b      	mov	r3, r1
 80045f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	887a      	ldrh	r2, [r7, #2]
 8004600:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8004634:	4b10      	ldr	r3, [pc, #64]	; (8004678 <HAL_PWR_EnterSTOPMode+0x50>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f023 0203 	bic.w	r2, r3, #3
 800463c:	490e      	ldr	r1, [pc, #56]	; (8004678 <HAL_PWR_EnterSTOPMode+0x50>)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4313      	orrs	r3, r2
 8004642:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004644:	4b0d      	ldr	r3, [pc, #52]	; (800467c <HAL_PWR_EnterSTOPMode+0x54>)
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	4a0c      	ldr	r2, [pc, #48]	; (800467c <HAL_PWR_EnterSTOPMode+0x54>)
 800464a:	f043 0304 	orr.w	r3, r3, #4
 800464e:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8004656:	bf30      	wfi
 8004658:	e002      	b.n	8004660 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800465a:	bf40      	sev
    __WFE();
 800465c:	bf20      	wfe
    __WFE();
 800465e:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8004660:	4b06      	ldr	r3, [pc, #24]	; (800467c <HAL_PWR_EnterSTOPMode+0x54>)
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	4a05      	ldr	r2, [pc, #20]	; (800467c <HAL_PWR_EnterSTOPMode+0x54>)
 8004666:	f023 0304 	bic.w	r3, r3, #4
 800466a:	6113      	str	r3, [r2, #16]
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	40007000 	.word	0x40007000
 800467c:	e000ed00 	.word	0xe000ed00

08004680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e264      	b.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d075      	beq.n	800478a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800469e:	4ba3      	ldr	r3, [pc, #652]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 030c 	and.w	r3, r3, #12
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d00c      	beq.n	80046c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046aa:	4ba0      	ldr	r3, [pc, #640]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d112      	bne.n	80046dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046b6:	4b9d      	ldr	r3, [pc, #628]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046c2:	d10b      	bne.n	80046dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c4:	4b99      	ldr	r3, [pc, #612]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d05b      	beq.n	8004788 <HAL_RCC_OscConfig+0x108>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d157      	bne.n	8004788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e23f      	b.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e4:	d106      	bne.n	80046f4 <HAL_RCC_OscConfig+0x74>
 80046e6:	4b91      	ldr	r3, [pc, #580]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a90      	ldr	r2, [pc, #576]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80046ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	e01d      	b.n	8004730 <HAL_RCC_OscConfig+0xb0>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046fc:	d10c      	bne.n	8004718 <HAL_RCC_OscConfig+0x98>
 80046fe:	4b8b      	ldr	r3, [pc, #556]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a8a      	ldr	r2, [pc, #552]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 8004704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	4b88      	ldr	r3, [pc, #544]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a87      	ldr	r2, [pc, #540]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 8004710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	e00b      	b.n	8004730 <HAL_RCC_OscConfig+0xb0>
 8004718:	4b84      	ldr	r3, [pc, #528]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a83      	ldr	r2, [pc, #524]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 800471e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	4b81      	ldr	r3, [pc, #516]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a80      	ldr	r2, [pc, #512]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 800472a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800472e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d013      	beq.n	8004760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004738:	f7fd feee 	bl	8002518 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004740:	f7fd feea 	bl	8002518 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b64      	cmp	r3, #100	; 0x64
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e204      	b.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004752:	4b76      	ldr	r3, [pc, #472]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0f0      	beq.n	8004740 <HAL_RCC_OscConfig+0xc0>
 800475e:	e014      	b.n	800478a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004760:	f7fd feda 	bl	8002518 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004768:	f7fd fed6 	bl	8002518 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b64      	cmp	r3, #100	; 0x64
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e1f0      	b.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800477a:	4b6c      	ldr	r3, [pc, #432]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f0      	bne.n	8004768 <HAL_RCC_OscConfig+0xe8>
 8004786:	e000      	b.n	800478a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d063      	beq.n	800485e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004796:	4b65      	ldr	r3, [pc, #404]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00b      	beq.n	80047ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047a2:	4b62      	ldr	r3, [pc, #392]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d11c      	bne.n	80047e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ae:	4b5f      	ldr	r3, [pc, #380]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d116      	bne.n	80047e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ba:	4b5c      	ldr	r3, [pc, #368]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <HAL_RCC_OscConfig+0x152>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d001      	beq.n	80047d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e1c4      	b.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d2:	4b56      	ldr	r3, [pc, #344]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4952      	ldr	r1, [pc, #328]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047e6:	e03a      	b.n	800485e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d020      	beq.n	8004832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047f0:	4b4f      	ldr	r3, [pc, #316]	; (8004930 <HAL_RCC_OscConfig+0x2b0>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f6:	f7fd fe8f 	bl	8002518 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047fe:	f7fd fe8b 	bl	8002518 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e1a5      	b.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004810:	4b46      	ldr	r3, [pc, #280]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0f0      	beq.n	80047fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481c:	4b43      	ldr	r3, [pc, #268]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4940      	ldr	r1, [pc, #256]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 800482c:	4313      	orrs	r3, r2
 800482e:	600b      	str	r3, [r1, #0]
 8004830:	e015      	b.n	800485e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004832:	4b3f      	ldr	r3, [pc, #252]	; (8004930 <HAL_RCC_OscConfig+0x2b0>)
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7fd fe6e 	bl	8002518 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004840:	f7fd fe6a 	bl	8002518 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e184      	b.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004852:	4b36      	ldr	r3, [pc, #216]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b00      	cmp	r3, #0
 8004868:	d030      	beq.n	80048cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d016      	beq.n	80048a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004872:	4b30      	ldr	r3, [pc, #192]	; (8004934 <HAL_RCC_OscConfig+0x2b4>)
 8004874:	2201      	movs	r2, #1
 8004876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004878:	f7fd fe4e 	bl	8002518 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004880:	f7fd fe4a 	bl	8002518 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e164      	b.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004892:	4b26      	ldr	r3, [pc, #152]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 8004894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0x200>
 800489e:	e015      	b.n	80048cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048a0:	4b24      	ldr	r3, [pc, #144]	; (8004934 <HAL_RCC_OscConfig+0x2b4>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a6:	f7fd fe37 	bl	8002518 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ae:	f7fd fe33 	bl	8002518 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e14d      	b.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c0:	4b1a      	ldr	r3, [pc, #104]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80048c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f0      	bne.n	80048ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 80a0 	beq.w	8004a1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048da:	2300      	movs	r3, #0
 80048dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048de:	4b13      	ldr	r3, [pc, #76]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10f      	bne.n	800490a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ea:	2300      	movs	r3, #0
 80048ec:	60bb      	str	r3, [r7, #8]
 80048ee:	4b0f      	ldr	r3, [pc, #60]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	4a0e      	ldr	r2, [pc, #56]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80048f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f8:	6413      	str	r3, [r2, #64]	; 0x40
 80048fa:	4b0c      	ldr	r3, [pc, #48]	; (800492c <HAL_RCC_OscConfig+0x2ac>)
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004906:	2301      	movs	r3, #1
 8004908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490a:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <HAL_RCC_OscConfig+0x2b8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004912:	2b00      	cmp	r3, #0
 8004914:	d121      	bne.n	800495a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004916:	4b08      	ldr	r3, [pc, #32]	; (8004938 <HAL_RCC_OscConfig+0x2b8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a07      	ldr	r2, [pc, #28]	; (8004938 <HAL_RCC_OscConfig+0x2b8>)
 800491c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004922:	f7fd fdf9 	bl	8002518 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004928:	e011      	b.n	800494e <HAL_RCC_OscConfig+0x2ce>
 800492a:	bf00      	nop
 800492c:	40023800 	.word	0x40023800
 8004930:	42470000 	.word	0x42470000
 8004934:	42470e80 	.word	0x42470e80
 8004938:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800493c:	f7fd fdec 	bl	8002518 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e106      	b.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494e:	4b85      	ldr	r3, [pc, #532]	; (8004b64 <HAL_RCC_OscConfig+0x4e4>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d106      	bne.n	8004970 <HAL_RCC_OscConfig+0x2f0>
 8004962:	4b81      	ldr	r3, [pc, #516]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 8004964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004966:	4a80      	ldr	r2, [pc, #512]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 8004968:	f043 0301 	orr.w	r3, r3, #1
 800496c:	6713      	str	r3, [r2, #112]	; 0x70
 800496e:	e01c      	b.n	80049aa <HAL_RCC_OscConfig+0x32a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b05      	cmp	r3, #5
 8004976:	d10c      	bne.n	8004992 <HAL_RCC_OscConfig+0x312>
 8004978:	4b7b      	ldr	r3, [pc, #492]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	4a7a      	ldr	r2, [pc, #488]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 800497e:	f043 0304 	orr.w	r3, r3, #4
 8004982:	6713      	str	r3, [r2, #112]	; 0x70
 8004984:	4b78      	ldr	r3, [pc, #480]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	4a77      	ldr	r2, [pc, #476]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	6713      	str	r3, [r2, #112]	; 0x70
 8004990:	e00b      	b.n	80049aa <HAL_RCC_OscConfig+0x32a>
 8004992:	4b75      	ldr	r3, [pc, #468]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 8004994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004996:	4a74      	ldr	r2, [pc, #464]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	6713      	str	r3, [r2, #112]	; 0x70
 800499e:	4b72      	ldr	r3, [pc, #456]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 80049a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a2:	4a71      	ldr	r2, [pc, #452]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 80049a4:	f023 0304 	bic.w	r3, r3, #4
 80049a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d015      	beq.n	80049de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b2:	f7fd fdb1 	bl	8002518 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b8:	e00a      	b.n	80049d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ba:	f7fd fdad 	bl	8002518 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e0c5      	b.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d0:	4b65      	ldr	r3, [pc, #404]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0ee      	beq.n	80049ba <HAL_RCC_OscConfig+0x33a>
 80049dc:	e014      	b.n	8004a08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049de:	f7fd fd9b 	bl	8002518 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e4:	e00a      	b.n	80049fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049e6:	f7fd fd97 	bl	8002518 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e0af      	b.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fc:	4b5a      	ldr	r3, [pc, #360]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 80049fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1ee      	bne.n	80049e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d105      	bne.n	8004a1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a0e:	4b56      	ldr	r3, [pc, #344]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	4a55      	ldr	r2, [pc, #340]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 8004a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 809b 	beq.w	8004b5a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a24:	4b50      	ldr	r3, [pc, #320]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 030c 	and.w	r3, r3, #12
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d05c      	beq.n	8004aea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d141      	bne.n	8004abc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a38:	4b4c      	ldr	r3, [pc, #304]	; (8004b6c <HAL_RCC_OscConfig+0x4ec>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3e:	f7fd fd6b 	bl	8002518 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a46:	f7fd fd67 	bl	8002518 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e081      	b.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a58:	4b43      	ldr	r3, [pc, #268]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1f0      	bne.n	8004a46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69da      	ldr	r2, [r3, #28]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	019b      	lsls	r3, r3, #6
 8004a74:	431a      	orrs	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7a:	085b      	lsrs	r3, r3, #1
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	041b      	lsls	r3, r3, #16
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a86:	061b      	lsls	r3, r3, #24
 8004a88:	4937      	ldr	r1, [pc, #220]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a8e:	4b37      	ldr	r3, [pc, #220]	; (8004b6c <HAL_RCC_OscConfig+0x4ec>)
 8004a90:	2201      	movs	r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a94:	f7fd fd40 	bl	8002518 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a9c:	f7fd fd3c 	bl	8002518 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e056      	b.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aae:	4b2e      	ldr	r3, [pc, #184]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x41c>
 8004aba:	e04e      	b.n	8004b5a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004abc:	4b2b      	ldr	r3, [pc, #172]	; (8004b6c <HAL_RCC_OscConfig+0x4ec>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac2:	f7fd fd29 	bl	8002518 <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aca:	f7fd fd25 	bl	8002518 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e03f      	b.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004adc:	4b22      	ldr	r3, [pc, #136]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1f0      	bne.n	8004aca <HAL_RCC_OscConfig+0x44a>
 8004ae8:	e037      	b.n	8004b5a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e032      	b.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004af6:	4b1c      	ldr	r3, [pc, #112]	; (8004b68 <HAL_RCC_OscConfig+0x4e8>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d028      	beq.n	8004b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d121      	bne.n	8004b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d11a      	bne.n	8004b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b26:	4013      	ands	r3, r2
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b2c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d111      	bne.n	8004b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	085b      	lsrs	r3, r3, #1
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d107      	bne.n	8004b56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d001      	beq.n	8004b5a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40007000 	.word	0x40007000
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	42470060 	.word	0x42470060

08004b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0cc      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b84:	4b68      	ldr	r3, [pc, #416]	; (8004d28 <HAL_RCC_ClockConfig+0x1b8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d90c      	bls.n	8004bac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b92:	4b65      	ldr	r3, [pc, #404]	; (8004d28 <HAL_RCC_ClockConfig+0x1b8>)
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9a:	4b63      	ldr	r3, [pc, #396]	; (8004d28 <HAL_RCC_ClockConfig+0x1b8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d001      	beq.n	8004bac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e0b8      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d020      	beq.n	8004bfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bc4:	4b59      	ldr	r3, [pc, #356]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	4a58      	ldr	r2, [pc, #352]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bdc:	4b53      	ldr	r3, [pc, #332]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	4a52      	ldr	r2, [pc, #328]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004be6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004be8:	4b50      	ldr	r3, [pc, #320]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	494d      	ldr	r1, [pc, #308]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d044      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d107      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c0e:	4b47      	ldr	r3, [pc, #284]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d119      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e07f      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d003      	beq.n	8004c2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c2e:	4b3f      	ldr	r3, [pc, #252]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e06f      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c3e:	4b3b      	ldr	r3, [pc, #236]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e067      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c4e:	4b37      	ldr	r3, [pc, #220]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f023 0203 	bic.w	r2, r3, #3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	4934      	ldr	r1, [pc, #208]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c60:	f7fd fc5a 	bl	8002518 <HAL_GetTick>
 8004c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c66:	e00a      	b.n	8004c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c68:	f7fd fc56 	bl	8002518 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e04f      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7e:	4b2b      	ldr	r3, [pc, #172]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 020c 	and.w	r2, r3, #12
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d1eb      	bne.n	8004c68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c90:	4b25      	ldr	r3, [pc, #148]	; (8004d28 <HAL_RCC_ClockConfig+0x1b8>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d20c      	bcs.n	8004cb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c9e:	4b22      	ldr	r3, [pc, #136]	; (8004d28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca6:	4b20      	ldr	r3, [pc, #128]	; (8004d28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e032      	b.n	8004d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d008      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cc4:	4b19      	ldr	r3, [pc, #100]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	4916      	ldr	r1, [pc, #88]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d009      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ce2:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	490e      	ldr	r1, [pc, #56]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cf6:	f000 f821 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	490a      	ldr	r1, [pc, #40]	; (8004d30 <HAL_RCC_ClockConfig+0x1c0>)
 8004d08:	5ccb      	ldrb	r3, [r1, r3]
 8004d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d0e:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d12:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fc fab0 	bl	800127c <HAL_InitTick>

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40023c00 	.word	0x40023c00
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	0800dd20 	.word	0x0800dd20
 8004d34:	20000000 	.word	0x20000000
 8004d38:	20000004 	.word	0x20000004

08004d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	607b      	str	r3, [r7, #4]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d54:	4b67      	ldr	r3, [pc, #412]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 030c 	and.w	r3, r3, #12
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d00d      	beq.n	8004d7c <HAL_RCC_GetSysClockFreq+0x40>
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	f200 80bd 	bhi.w	8004ee0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <HAL_RCC_GetSysClockFreq+0x34>
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d003      	beq.n	8004d76 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d6e:	e0b7      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d70:	4b61      	ldr	r3, [pc, #388]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d72:	60bb      	str	r3, [r7, #8]
       break;
 8004d74:	e0b7      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d76:	4b61      	ldr	r3, [pc, #388]	; (8004efc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004d78:	60bb      	str	r3, [r7, #8]
      break;
 8004d7a:	e0b4      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d7c:	4b5d      	ldr	r3, [pc, #372]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d86:	4b5b      	ldr	r3, [pc, #364]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d04d      	beq.n	8004e2e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d92:	4b58      	ldr	r3, [pc, #352]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	099b      	lsrs	r3, r3, #6
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004da2:	f04f 0100 	mov.w	r1, #0
 8004da6:	ea02 0800 	and.w	r8, r2, r0
 8004daa:	ea03 0901 	and.w	r9, r3, r1
 8004dae:	4640      	mov	r0, r8
 8004db0:	4649      	mov	r1, r9
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	014b      	lsls	r3, r1, #5
 8004dbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004dc0:	0142      	lsls	r2, r0, #5
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	ebb0 0008 	subs.w	r0, r0, r8
 8004dca:	eb61 0109 	sbc.w	r1, r1, r9
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	018b      	lsls	r3, r1, #6
 8004dd8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ddc:	0182      	lsls	r2, r0, #6
 8004dde:	1a12      	subs	r2, r2, r0
 8004de0:	eb63 0301 	sbc.w	r3, r3, r1
 8004de4:	f04f 0000 	mov.w	r0, #0
 8004de8:	f04f 0100 	mov.w	r1, #0
 8004dec:	00d9      	lsls	r1, r3, #3
 8004dee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004df2:	00d0      	lsls	r0, r2, #3
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	eb12 0208 	adds.w	r2, r2, r8
 8004dfc:	eb43 0309 	adc.w	r3, r3, r9
 8004e00:	f04f 0000 	mov.w	r0, #0
 8004e04:	f04f 0100 	mov.w	r1, #0
 8004e08:	0259      	lsls	r1, r3, #9
 8004e0a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004e0e:	0250      	lsls	r0, r2, #9
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4610      	mov	r0, r2
 8004e16:	4619      	mov	r1, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	f7fb f9de 	bl	80001e0 <__aeabi_uldivmod>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4613      	mov	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	e04a      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2e:	4b31      	ldr	r3, [pc, #196]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	099b      	lsrs	r3, r3, #6
 8004e34:	461a      	mov	r2, r3
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e3e:	f04f 0100 	mov.w	r1, #0
 8004e42:	ea02 0400 	and.w	r4, r2, r0
 8004e46:	ea03 0501 	and.w	r5, r3, r1
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	014b      	lsls	r3, r1, #5
 8004e58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e5c:	0142      	lsls	r2, r0, #5
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	1b00      	subs	r0, r0, r4
 8004e64:	eb61 0105 	sbc.w	r1, r1, r5
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	018b      	lsls	r3, r1, #6
 8004e72:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e76:	0182      	lsls	r2, r0, #6
 8004e78:	1a12      	subs	r2, r2, r0
 8004e7a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e7e:	f04f 0000 	mov.w	r0, #0
 8004e82:	f04f 0100 	mov.w	r1, #0
 8004e86:	00d9      	lsls	r1, r3, #3
 8004e88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e8c:	00d0      	lsls	r0, r2, #3
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	1912      	adds	r2, r2, r4
 8004e94:	eb45 0303 	adc.w	r3, r5, r3
 8004e98:	f04f 0000 	mov.w	r0, #0
 8004e9c:	f04f 0100 	mov.w	r1, #0
 8004ea0:	0299      	lsls	r1, r3, #10
 8004ea2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ea6:	0290      	lsls	r0, r2, #10
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4610      	mov	r0, r2
 8004eae:	4619      	mov	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	f7fb f992 	bl	80001e0 <__aeabi_uldivmod>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	0c1b      	lsrs	r3, r3, #16
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	3301      	adds	r3, #1
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004edc:	60bb      	str	r3, [r7, #8]
      break;
 8004ede:	e002      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ee0:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ee2:	60bb      	str	r3, [r7, #8]
      break;
 8004ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	00f42400 	.word	0x00f42400
 8004efc:	007a1200 	.word	0x007a1200

08004f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f04:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f06:	681b      	ldr	r3, [r3, #0]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20000000 	.word	0x20000000

08004f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f1c:	f7ff fff0 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004f20:	4602      	mov	r2, r0
 8004f22:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	0a9b      	lsrs	r3, r3, #10
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	4903      	ldr	r1, [pc, #12]	; (8004f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f2e:	5ccb      	ldrb	r3, [r1, r3]
 8004f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	0800dd30 	.word	0x0800dd30

08004f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f44:	f7ff ffdc 	bl	8004f00 <HAL_RCC_GetHCLKFreq>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	0b5b      	lsrs	r3, r3, #13
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	4903      	ldr	r1, [pc, #12]	; (8004f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f56:	5ccb      	ldrb	r3, [r1, r3]
 8004f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40023800 	.word	0x40023800
 8004f64:	0800dd30 	.word	0x0800dd30

08004f68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	220f      	movs	r2, #15
 8004f76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f78:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 0203 	and.w	r2, r3, #3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f84:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f90:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f9c:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <HAL_RCC_GetClockConfig+0x5c>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	08db      	lsrs	r3, r3, #3
 8004fa2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004faa:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <HAL_RCC_GetClockConfig+0x60>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0207 	and.w	r2, r3, #7
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	601a      	str	r2, [r3, #0]
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	40023c00 	.word	0x40023c00

08004fcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e07b      	b.n	80050d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d108      	bne.n	8004ff8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fee:	d009      	beq.n	8005004 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	61da      	str	r2, [r3, #28]
 8004ff6:	e005      	b.n	8005004 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fc f80a 	bl	8001038 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800503a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800504c:	431a      	orrs	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005088:	ea42 0103 	orr.w	r1, r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	0c1b      	lsrs	r3, r3, #16
 80050a2:	f003 0104 	and.w	r1, r3, #4
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	f003 0210 	and.w	r2, r3, #16
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69da      	ldr	r2, [r3, #28]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b088      	sub	sp, #32
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	603b      	str	r3, [r7, #0]
 80050ea:	4613      	mov	r3, r2
 80050ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_SPI_Transmit+0x22>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e126      	b.n	800534e <HAL_SPI_Transmit+0x270>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005108:	f7fd fa06 	bl	8002518 <HAL_GetTick>
 800510c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800510e:	88fb      	ldrh	r3, [r7, #6]
 8005110:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b01      	cmp	r3, #1
 800511c:	d002      	beq.n	8005124 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800511e:	2302      	movs	r3, #2
 8005120:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005122:	e10b      	b.n	800533c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <HAL_SPI_Transmit+0x52>
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d102      	bne.n	8005136 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005134:	e102      	b.n	800533c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2203      	movs	r2, #3
 800513a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	88fa      	ldrh	r2, [r7, #6]
 800514e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	88fa      	ldrh	r2, [r7, #6]
 8005154:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800517c:	d10f      	bne.n	800519e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800518c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800519c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a8:	2b40      	cmp	r3, #64	; 0x40
 80051aa:	d007      	beq.n	80051bc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c4:	d14b      	bne.n	800525e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_SPI_Transmit+0xf6>
 80051ce:	8afb      	ldrh	r3, [r7, #22]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d13e      	bne.n	8005252 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	881a      	ldrh	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e4:	1c9a      	adds	r2, r3, #2
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051f8:	e02b      	b.n	8005252 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b02      	cmp	r3, #2
 8005206:	d112      	bne.n	800522e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520c:	881a      	ldrh	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005218:	1c9a      	adds	r2, r3, #2
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	86da      	strh	r2, [r3, #54]	; 0x36
 800522c:	e011      	b.n	8005252 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800522e:	f7fd f973 	bl	8002518 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	429a      	cmp	r2, r3
 800523c:	d803      	bhi.n	8005246 <HAL_SPI_Transmit+0x168>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005244:	d102      	bne.n	800524c <HAL_SPI_Transmit+0x16e>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d102      	bne.n	8005252 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005250:	e074      	b.n	800533c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1ce      	bne.n	80051fa <HAL_SPI_Transmit+0x11c>
 800525c:	e04c      	b.n	80052f8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <HAL_SPI_Transmit+0x18e>
 8005266:	8afb      	ldrh	r3, [r7, #22]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d140      	bne.n	80052ee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	330c      	adds	r3, #12
 8005276:	7812      	ldrb	r2, [r2, #0]
 8005278:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	1c5a      	adds	r2, r3, #1
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005288:	b29b      	uxth	r3, r3
 800528a:	3b01      	subs	r3, #1
 800528c:	b29a      	uxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005292:	e02c      	b.n	80052ee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d113      	bne.n	80052ca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	330c      	adds	r3, #12
 80052ac:	7812      	ldrb	r2, [r2, #0]
 80052ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052be:	b29b      	uxth	r3, r3
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80052c8:	e011      	b.n	80052ee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052ca:	f7fd f925 	bl	8002518 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d803      	bhi.n	80052e2 <HAL_SPI_Transmit+0x204>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e0:	d102      	bne.n	80052e8 <HAL_SPI_Transmit+0x20a>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d102      	bne.n	80052ee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052ec:	e026      	b.n	800533c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1cd      	bne.n	8005294 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	6839      	ldr	r1, [r7, #0]
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 fbcb 	bl	8005a98 <SPI_EndRxTxTransaction>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10a      	bne.n	800532c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005316:	2300      	movs	r3, #0
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	613b      	str	r3, [r7, #16]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	77fb      	strb	r3, [r7, #31]
 8005338:	e000      	b.n	800533c <HAL_SPI_Transmit+0x25e>
  }

error:
 800533a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800534c:	7ffb      	ldrb	r3, [r7, #31]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3720      	adds	r7, #32
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b088      	sub	sp, #32
 800535a:	af02      	add	r7, sp, #8
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	603b      	str	r3, [r7, #0]
 8005362:	4613      	mov	r3, r2
 8005364:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005372:	d112      	bne.n	800539a <HAL_SPI_Receive+0x44>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10e      	bne.n	800539a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2204      	movs	r2, #4
 8005380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005384:	88fa      	ldrh	r2, [r7, #6]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	4613      	mov	r3, r2
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	68b9      	ldr	r1, [r7, #8]
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 f8f1 	bl	8005578 <HAL_SPI_TransmitReceive>
 8005396:	4603      	mov	r3, r0
 8005398:	e0ea      	b.n	8005570 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_SPI_Receive+0x52>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e0e3      	b.n	8005570 <HAL_SPI_Receive+0x21a>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053b0:	f7fd f8b2 	bl	8002518 <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d002      	beq.n	80053c8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
 80053c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80053c6:	e0ca      	b.n	800555e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <HAL_SPI_Receive+0x7e>
 80053ce:	88fb      	ldrh	r3, [r7, #6]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d102      	bne.n	80053da <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80053d8:	e0c1      	b.n	800555e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2204      	movs	r2, #4
 80053de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	88fa      	ldrh	r2, [r7, #6]
 80053f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	88fa      	ldrh	r2, [r7, #6]
 80053f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005420:	d10f      	bne.n	8005442 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005430:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005440:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544c:	2b40      	cmp	r3, #64	; 0x40
 800544e:	d007      	beq.n	8005460 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800545e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d162      	bne.n	800552e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005468:	e02e      	b.n	80054c8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b01      	cmp	r3, #1
 8005476:	d115      	bne.n	80054a4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f103 020c 	add.w	r2, r3, #12
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	7812      	ldrb	r2, [r2, #0]
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005498:	b29b      	uxth	r3, r3
 800549a:	3b01      	subs	r3, #1
 800549c:	b29a      	uxth	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054a2:	e011      	b.n	80054c8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054a4:	f7fd f838 	bl	8002518 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d803      	bhi.n	80054bc <HAL_SPI_Receive+0x166>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ba:	d102      	bne.n	80054c2 <HAL_SPI_Receive+0x16c>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d102      	bne.n	80054c8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80054c6:	e04a      	b.n	800555e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1cb      	bne.n	800546a <HAL_SPI_Receive+0x114>
 80054d2:	e031      	b.n	8005538 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d113      	bne.n	800550a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ec:	b292      	uxth	r2, r2
 80054ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f4:	1c9a      	adds	r2, r3, #2
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005508:	e011      	b.n	800552e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800550a:	f7fd f805 	bl	8002518 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d803      	bhi.n	8005522 <HAL_SPI_Receive+0x1cc>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005520:	d102      	bne.n	8005528 <HAL_SPI_Receive+0x1d2>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d102      	bne.n	800552e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800552c:	e017      	b.n	800555e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005532:	b29b      	uxth	r3, r3
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1cd      	bne.n	80054d4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 fa45 	bl	80059cc <SPI_EndRxTransaction>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d002      	beq.n	800554e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2220      	movs	r2, #32
 800554c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	75fb      	strb	r3, [r7, #23]
 800555a:	e000      	b.n	800555e <HAL_SPI_Receive+0x208>
  }

error :
 800555c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800556e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08c      	sub	sp, #48	; 0x30
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005586:	2301      	movs	r3, #1
 8005588:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_SPI_TransmitReceive+0x26>
 800559a:	2302      	movs	r3, #2
 800559c:	e18a      	b.n	80058b4 <HAL_SPI_TransmitReceive+0x33c>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055a6:	f7fc ffb7 	bl	8002518 <HAL_GetTick>
 80055aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80055bc:	887b      	ldrh	r3, [r7, #2]
 80055be:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d00f      	beq.n	80055e8 <HAL_SPI_TransmitReceive+0x70>
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055ce:	d107      	bne.n	80055e0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d103      	bne.n	80055e0 <HAL_SPI_TransmitReceive+0x68>
 80055d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d003      	beq.n	80055e8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80055e0:	2302      	movs	r3, #2
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80055e6:	e15b      	b.n	80058a0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d005      	beq.n	80055fa <HAL_SPI_TransmitReceive+0x82>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <HAL_SPI_TransmitReceive+0x82>
 80055f4:	887b      	ldrh	r3, [r7, #2]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d103      	bne.n	8005602 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005600:	e14e      	b.n	80058a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b04      	cmp	r3, #4
 800560c:	d003      	beq.n	8005616 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2205      	movs	r2, #5
 8005612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	887a      	ldrh	r2, [r7, #2]
 8005626:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	887a      	ldrh	r2, [r7, #2]
 800562c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	887a      	ldrh	r2, [r7, #2]
 8005638:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	887a      	ldrh	r2, [r7, #2]
 800563e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b40      	cmp	r3, #64	; 0x40
 8005658:	d007      	beq.n	800566a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005668:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005672:	d178      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <HAL_SPI_TransmitReceive+0x10a>
 800567c:	8b7b      	ldrh	r3, [r7, #26]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d166      	bne.n	8005750 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005686:	881a      	ldrh	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	1c9a      	adds	r2, r3, #2
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056a6:	e053      	b.n	8005750 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d11b      	bne.n	80056ee <HAL_SPI_TransmitReceive+0x176>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d016      	beq.n	80056ee <HAL_SPI_TransmitReceive+0x176>
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d113      	bne.n	80056ee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ca:	881a      	ldrh	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	1c9a      	adds	r2, r3, #2
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d119      	bne.n	8005730 <HAL_SPI_TransmitReceive+0x1b8>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d014      	beq.n	8005730 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	b292      	uxth	r2, r2
 8005712:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005718:	1c9a      	adds	r2, r3, #2
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800572c:	2301      	movs	r3, #1
 800572e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005730:	f7fc fef2 	bl	8002518 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800573c:	429a      	cmp	r2, r3
 800573e:	d807      	bhi.n	8005750 <HAL_SPI_TransmitReceive+0x1d8>
 8005740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005746:	d003      	beq.n	8005750 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800574e:	e0a7      	b.n	80058a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1a6      	bne.n	80056a8 <HAL_SPI_TransmitReceive+0x130>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1a1      	bne.n	80056a8 <HAL_SPI_TransmitReceive+0x130>
 8005764:	e07c      	b.n	8005860 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <HAL_SPI_TransmitReceive+0x1fc>
 800576e:	8b7b      	ldrh	r3, [r7, #26]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d16b      	bne.n	800584c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	330c      	adds	r3, #12
 800577e:	7812      	ldrb	r2, [r2, #0]
 8005780:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800579a:	e057      	b.n	800584c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d11c      	bne.n	80057e4 <HAL_SPI_TransmitReceive+0x26c>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d017      	beq.n	80057e4 <HAL_SPI_TransmitReceive+0x26c>
 80057b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d114      	bne.n	80057e4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	330c      	adds	r3, #12
 80057c4:	7812      	ldrb	r2, [r2, #0]
 80057c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d119      	bne.n	8005826 <HAL_SPI_TransmitReceive+0x2ae>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d014      	beq.n	8005826 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005822:	2301      	movs	r3, #1
 8005824:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005826:	f7fc fe77 	bl	8002518 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005832:	429a      	cmp	r2, r3
 8005834:	d803      	bhi.n	800583e <HAL_SPI_TransmitReceive+0x2c6>
 8005836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d102      	bne.n	8005844 <HAL_SPI_TransmitReceive+0x2cc>
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	2b00      	cmp	r3, #0
 8005842:	d103      	bne.n	800584c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800584a:	e029      	b.n	80058a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005850:	b29b      	uxth	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1a2      	bne.n	800579c <HAL_SPI_TransmitReceive+0x224>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800585a:	b29b      	uxth	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d19d      	bne.n	800579c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005862:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 f917 	bl	8005a98 <SPI_EndRxTxTransaction>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d006      	beq.n	800587e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2220      	movs	r2, #32
 800587a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800587c:	e010      	b.n	80058a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10b      	bne.n	800589e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	e000      	b.n	80058a0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800589e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3730      	adds	r7, #48	; 0x30
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	4613      	mov	r3, r2
 80058ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058cc:	f7fc fe24 	bl	8002518 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	1a9b      	subs	r3, r3, r2
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	4413      	add	r3, r2
 80058da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058dc:	f7fc fe1c 	bl	8002518 <HAL_GetTick>
 80058e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058e2:	4b39      	ldr	r3, [pc, #228]	; (80059c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	015b      	lsls	r3, r3, #5
 80058e8:	0d1b      	lsrs	r3, r3, #20
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	fb02 f303 	mul.w	r3, r2, r3
 80058f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058f2:	e054      	b.n	800599e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fa:	d050      	beq.n	800599e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058fc:	f7fc fe0c 	bl	8002518 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	69fa      	ldr	r2, [r7, #28]
 8005908:	429a      	cmp	r2, r3
 800590a:	d902      	bls.n	8005912 <SPI_WaitFlagStateUntilTimeout+0x56>
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d13d      	bne.n	800598e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005920:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800592a:	d111      	bne.n	8005950 <SPI_WaitFlagStateUntilTimeout+0x94>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005934:	d004      	beq.n	8005940 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800593e:	d107      	bne.n	8005950 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800594e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005958:	d10f      	bne.n	800597a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005978:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e017      	b.n	80059be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	3b01      	subs	r3, #1
 800599c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	4013      	ands	r3, r2
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	bf0c      	ite	eq
 80059ae:	2301      	moveq	r3, #1
 80059b0:	2300      	movne	r3, #0
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d19b      	bne.n	80058f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3720      	adds	r7, #32
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20000000 	.word	0x20000000

080059cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059e0:	d111      	bne.n	8005a06 <SPI_EndRxTransaction+0x3a>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ea:	d004      	beq.n	80059f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f4:	d107      	bne.n	8005a06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a04:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a0e:	d12a      	bne.n	8005a66 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a18:	d012      	beq.n	8005a40 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2200      	movs	r2, #0
 8005a22:	2180      	movs	r1, #128	; 0x80
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f7ff ff49 	bl	80058bc <SPI_WaitFlagStateUntilTimeout>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d02d      	beq.n	8005a8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a34:	f043 0220 	orr.w	r2, r3, #32
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e026      	b.n	8005a8e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2200      	movs	r2, #0
 8005a48:	2101      	movs	r1, #1
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f7ff ff36 	bl	80058bc <SPI_WaitFlagStateUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d01a      	beq.n	8005a8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5a:	f043 0220 	orr.w	r2, r3, #32
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e013      	b.n	8005a8e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2101      	movs	r1, #1
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f7ff ff23 	bl	80058bc <SPI_WaitFlagStateUntilTimeout>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d007      	beq.n	8005a8c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a80:	f043 0220 	orr.w	r2, r3, #32
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e000      	b.n	8005a8e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b088      	sub	sp, #32
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005aa4:	4b1b      	ldr	r3, [pc, #108]	; (8005b14 <SPI_EndRxTxTransaction+0x7c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a1b      	ldr	r2, [pc, #108]	; (8005b18 <SPI_EndRxTxTransaction+0x80>)
 8005aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005aae:	0d5b      	lsrs	r3, r3, #21
 8005ab0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ab4:	fb02 f303 	mul.w	r3, r2, r3
 8005ab8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ac2:	d112      	bne.n	8005aea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2200      	movs	r2, #0
 8005acc:	2180      	movs	r1, #128	; 0x80
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f7ff fef4 	bl	80058bc <SPI_WaitFlagStateUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d016      	beq.n	8005b08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ade:	f043 0220 	orr.w	r2, r3, #32
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e00f      	b.n	8005b0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00a      	beq.n	8005b06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b00:	2b80      	cmp	r3, #128	; 0x80
 8005b02:	d0f2      	beq.n	8005aea <SPI_EndRxTxTransaction+0x52>
 8005b04:	e000      	b.n	8005b08 <SPI_EndRxTxTransaction+0x70>
        break;
 8005b06:	bf00      	nop
  }

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20000000 	.word	0x20000000
 8005b18:	165e9f81 	.word	0x165e9f81

08005b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e041      	b.n	8005bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f839 	bl	8005bba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f000 fadc 	bl	8006118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d001      	beq.n	8005be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e044      	b.n	8005c72 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0201 	orr.w	r2, r2, #1
 8005bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a1e      	ldr	r2, [pc, #120]	; (8005c80 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d018      	beq.n	8005c3c <HAL_TIM_Base_Start_IT+0x6c>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c12:	d013      	beq.n	8005c3c <HAL_TIM_Base_Start_IT+0x6c>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a1a      	ldr	r2, [pc, #104]	; (8005c84 <HAL_TIM_Base_Start_IT+0xb4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d00e      	beq.n	8005c3c <HAL_TIM_Base_Start_IT+0x6c>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a19      	ldr	r2, [pc, #100]	; (8005c88 <HAL_TIM_Base_Start_IT+0xb8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d009      	beq.n	8005c3c <HAL_TIM_Base_Start_IT+0x6c>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a17      	ldr	r2, [pc, #92]	; (8005c8c <HAL_TIM_Base_Start_IT+0xbc>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d004      	beq.n	8005c3c <HAL_TIM_Base_Start_IT+0x6c>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a16      	ldr	r2, [pc, #88]	; (8005c90 <HAL_TIM_Base_Start_IT+0xc0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d111      	bne.n	8005c60 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 0307 	and.w	r3, r3, #7
 8005c46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b06      	cmp	r3, #6
 8005c4c:	d010      	beq.n	8005c70 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f042 0201 	orr.w	r2, r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5e:	e007      	b.n	8005c70 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0201 	orr.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40010000 	.word	0x40010000
 8005c84:	40000400 	.word	0x40000400
 8005c88:	40000800 	.word	0x40000800
 8005c8c:	40000c00 	.word	0x40000c00
 8005c90:	40014000 	.word	0x40014000

08005c94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e041      	b.n	8005d2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7fb fa3a 	bl	8001134 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3304      	adds	r3, #4
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	f000 fa20 	bl	8006118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d122      	bne.n	8005d8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d11b      	bne.n	8005d8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f06f 0202 	mvn.w	r2, #2
 8005d5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	f003 0303 	and.w	r3, r3, #3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f9b1 	bl	80060dc <HAL_TIM_IC_CaptureCallback>
 8005d7a:	e005      	b.n	8005d88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f9a3 	bl	80060c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f9b4 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d122      	bne.n	8005de2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d11b      	bne.n	8005de2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f06f 0204 	mvn.w	r2, #4
 8005db2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f987 	bl	80060dc <HAL_TIM_IC_CaptureCallback>
 8005dce:	e005      	b.n	8005ddc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f979 	bl	80060c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f98a 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f003 0308 	and.w	r3, r3, #8
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d122      	bne.n	8005e36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f003 0308 	and.w	r3, r3, #8
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d11b      	bne.n	8005e36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f06f 0208 	mvn.w	r2, #8
 8005e06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2204      	movs	r2, #4
 8005e0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	f003 0303 	and.w	r3, r3, #3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f95d 	bl	80060dc <HAL_TIM_IC_CaptureCallback>
 8005e22:	e005      	b.n	8005e30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f94f 	bl	80060c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f960 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f003 0310 	and.w	r3, r3, #16
 8005e40:	2b10      	cmp	r3, #16
 8005e42:	d122      	bne.n	8005e8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f003 0310 	and.w	r3, r3, #16
 8005e4e:	2b10      	cmp	r3, #16
 8005e50:	d11b      	bne.n	8005e8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f06f 0210 	mvn.w	r2, #16
 8005e5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2208      	movs	r2, #8
 8005e60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d003      	beq.n	8005e78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f933 	bl	80060dc <HAL_TIM_IC_CaptureCallback>
 8005e76:	e005      	b.n	8005e84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f925 	bl	80060c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f936 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d10e      	bne.n	8005eb6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d107      	bne.n	8005eb6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f06f 0201 	mvn.w	r2, #1
 8005eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7fb f82f 	bl	8000f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec0:	2b80      	cmp	r3, #128	; 0x80
 8005ec2:	d10e      	bne.n	8005ee2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ece:	2b80      	cmp	r3, #128	; 0x80
 8005ed0:	d107      	bne.n	8005ee2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fb9f 	bl	8006620 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eec:	2b40      	cmp	r3, #64	; 0x40
 8005eee:	d10e      	bne.n	8005f0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efa:	2b40      	cmp	r3, #64	; 0x40
 8005efc:	d107      	bne.n	8005f0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f8fb 	bl	8006104 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	f003 0320 	and.w	r3, r3, #32
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d10e      	bne.n	8005f3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b20      	cmp	r3, #32
 8005f28:	d107      	bne.n	8005f3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f06f 0220 	mvn.w	r2, #32
 8005f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fb69 	bl	800660c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f3a:	bf00      	nop
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d101      	bne.n	8005f62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e0ae      	b.n	80060c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b0c      	cmp	r3, #12
 8005f6e:	f200 809f 	bhi.w	80060b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f72:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005fad 	.word	0x08005fad
 8005f7c:	080060b1 	.word	0x080060b1
 8005f80:	080060b1 	.word	0x080060b1
 8005f84:	080060b1 	.word	0x080060b1
 8005f88:	08005fed 	.word	0x08005fed
 8005f8c:	080060b1 	.word	0x080060b1
 8005f90:	080060b1 	.word	0x080060b1
 8005f94:	080060b1 	.word	0x080060b1
 8005f98:	0800602f 	.word	0x0800602f
 8005f9c:	080060b1 	.word	0x080060b1
 8005fa0:	080060b1 	.word	0x080060b1
 8005fa4:	080060b1 	.word	0x080060b1
 8005fa8:	0800606f 	.word	0x0800606f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68b9      	ldr	r1, [r7, #8]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 f930 	bl	8006218 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0208 	orr.w	r2, r2, #8
 8005fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699a      	ldr	r2, [r3, #24]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0204 	bic.w	r2, r2, #4
 8005fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6999      	ldr	r1, [r3, #24]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	691a      	ldr	r2, [r3, #16]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	619a      	str	r2, [r3, #24]
      break;
 8005fea:	e064      	b.n	80060b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68b9      	ldr	r1, [r7, #8]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 f976 	bl	80062e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	699a      	ldr	r2, [r3, #24]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699a      	ldr	r2, [r3, #24]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6999      	ldr	r1, [r3, #24]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	021a      	lsls	r2, r3, #8
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	619a      	str	r2, [r3, #24]
      break;
 800602c:	e043      	b.n	80060b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68b9      	ldr	r1, [r7, #8]
 8006034:	4618      	mov	r0, r3
 8006036:	f000 f9c1 	bl	80063bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f042 0208 	orr.w	r2, r2, #8
 8006048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69da      	ldr	r2, [r3, #28]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0204 	bic.w	r2, r2, #4
 8006058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69d9      	ldr	r1, [r3, #28]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	691a      	ldr	r2, [r3, #16]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	61da      	str	r2, [r3, #28]
      break;
 800606c:	e023      	b.n	80060b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68b9      	ldr	r1, [r7, #8]
 8006074:	4618      	mov	r0, r3
 8006076:	f000 fa0b 	bl	8006490 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69da      	ldr	r2, [r3, #28]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	69da      	ldr	r2, [r3, #28]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69d9      	ldr	r1, [r3, #28]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	021a      	lsls	r2, r3, #8
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	61da      	str	r2, [r3, #28]
      break;
 80060ae:	e002      	b.n	80060b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	75fb      	strb	r3, [r7, #23]
      break;
 80060b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060be:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a34      	ldr	r2, [pc, #208]	; (80061fc <TIM_Base_SetConfig+0xe4>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d00f      	beq.n	8006150 <TIM_Base_SetConfig+0x38>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006136:	d00b      	beq.n	8006150 <TIM_Base_SetConfig+0x38>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a31      	ldr	r2, [pc, #196]	; (8006200 <TIM_Base_SetConfig+0xe8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d007      	beq.n	8006150 <TIM_Base_SetConfig+0x38>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a30      	ldr	r2, [pc, #192]	; (8006204 <TIM_Base_SetConfig+0xec>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d003      	beq.n	8006150 <TIM_Base_SetConfig+0x38>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a2f      	ldr	r2, [pc, #188]	; (8006208 <TIM_Base_SetConfig+0xf0>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d108      	bne.n	8006162 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a25      	ldr	r2, [pc, #148]	; (80061fc <TIM_Base_SetConfig+0xe4>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d01b      	beq.n	80061a2 <TIM_Base_SetConfig+0x8a>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006170:	d017      	beq.n	80061a2 <TIM_Base_SetConfig+0x8a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a22      	ldr	r2, [pc, #136]	; (8006200 <TIM_Base_SetConfig+0xe8>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d013      	beq.n	80061a2 <TIM_Base_SetConfig+0x8a>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a21      	ldr	r2, [pc, #132]	; (8006204 <TIM_Base_SetConfig+0xec>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00f      	beq.n	80061a2 <TIM_Base_SetConfig+0x8a>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a20      	ldr	r2, [pc, #128]	; (8006208 <TIM_Base_SetConfig+0xf0>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00b      	beq.n	80061a2 <TIM_Base_SetConfig+0x8a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a1f      	ldr	r2, [pc, #124]	; (800620c <TIM_Base_SetConfig+0xf4>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d007      	beq.n	80061a2 <TIM_Base_SetConfig+0x8a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a1e      	ldr	r2, [pc, #120]	; (8006210 <TIM_Base_SetConfig+0xf8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d003      	beq.n	80061a2 <TIM_Base_SetConfig+0x8a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a1d      	ldr	r2, [pc, #116]	; (8006214 <TIM_Base_SetConfig+0xfc>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d108      	bne.n	80061b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a08      	ldr	r2, [pc, #32]	; (80061fc <TIM_Base_SetConfig+0xe4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d103      	bne.n	80061e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	691a      	ldr	r2, [r3, #16]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	615a      	str	r2, [r3, #20]
}
 80061ee:	bf00      	nop
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40010000 	.word	0x40010000
 8006200:	40000400 	.word	0x40000400
 8006204:	40000800 	.word	0x40000800
 8006208:	40000c00 	.word	0x40000c00
 800620c:	40014000 	.word	0x40014000
 8006210:	40014400 	.word	0x40014400
 8006214:	40014800 	.word	0x40014800

08006218 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	f023 0201 	bic.w	r2, r3, #1
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 0303 	bic.w	r3, r3, #3
 800624e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f023 0302 	bic.w	r3, r3, #2
 8006260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a1c      	ldr	r2, [pc, #112]	; (80062e0 <TIM_OC1_SetConfig+0xc8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d10c      	bne.n	800628e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f023 0308 	bic.w	r3, r3, #8
 800627a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f023 0304 	bic.w	r3, r3, #4
 800628c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a13      	ldr	r2, [pc, #76]	; (80062e0 <TIM_OC1_SetConfig+0xc8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d111      	bne.n	80062ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800629c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	621a      	str	r2, [r3, #32]
}
 80062d4:	bf00      	nop
 80062d6:	371c      	adds	r7, #28
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	40010000 	.word	0x40010000

080062e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	f023 0210 	bic.w	r2, r3, #16
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800631a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	021b      	lsls	r3, r3, #8
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	4313      	orrs	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f023 0320 	bic.w	r3, r3, #32
 800632e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	4313      	orrs	r3, r2
 800633a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a1e      	ldr	r2, [pc, #120]	; (80063b8 <TIM_OC2_SetConfig+0xd4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d10d      	bne.n	8006360 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800634a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800635e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a15      	ldr	r2, [pc, #84]	; (80063b8 <TIM_OC2_SetConfig+0xd4>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d113      	bne.n	8006390 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800636e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006376:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	4313      	orrs	r3, r2
 8006382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	4313      	orrs	r3, r2
 800638e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	40010000 	.word	0x40010000

080063bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0303 	bic.w	r3, r3, #3
 80063f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	021b      	lsls	r3, r3, #8
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	4313      	orrs	r3, r2
 8006410:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a1d      	ldr	r2, [pc, #116]	; (800648c <TIM_OC3_SetConfig+0xd0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d10d      	bne.n	8006436 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a14      	ldr	r2, [pc, #80]	; (800648c <TIM_OC3_SetConfig+0xd0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d113      	bne.n	8006466 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800644c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	011b      	lsls	r3, r3, #4
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	4313      	orrs	r3, r2
 8006458:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	4313      	orrs	r3, r2
 8006464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	621a      	str	r2, [r3, #32]
}
 8006480:	bf00      	nop
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	40010000 	.word	0x40010000

08006490 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	021b      	lsls	r3, r3, #8
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	031b      	lsls	r3, r3, #12
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a10      	ldr	r2, [pc, #64]	; (800652c <TIM_OC4_SetConfig+0x9c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d109      	bne.n	8006504 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	019b      	lsls	r3, r3, #6
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	621a      	str	r2, [r3, #32]
}
 800651e:	bf00      	nop
 8006520:	371c      	adds	r7, #28
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	40010000 	.word	0x40010000

08006530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006540:	2b01      	cmp	r3, #1
 8006542:	d101      	bne.n	8006548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006544:	2302      	movs	r3, #2
 8006546:	e050      	b.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a1c      	ldr	r2, [pc, #112]	; (80065f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d018      	beq.n	80065be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006594:	d013      	beq.n	80065be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a18      	ldr	r2, [pc, #96]	; (80065fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d00e      	beq.n	80065be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a16      	ldr	r2, [pc, #88]	; (8006600 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d009      	beq.n	80065be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a15      	ldr	r2, [pc, #84]	; (8006604 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d004      	beq.n	80065be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a13      	ldr	r2, [pc, #76]	; (8006608 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d10c      	bne.n	80065d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	40010000 	.word	0x40010000
 80065fc:	40000400 	.word	0x40000400
 8006600:	40000800 	.word	0x40000800
 8006604:	40000c00 	.word	0x40000c00
 8006608:	40014000 	.word	0x40014000

0800660c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e03f      	b.n	80066c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d106      	bne.n	8006660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7fa fdc6 	bl	80011ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2224      	movs	r2, #36	; 0x24
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006676:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f829 	bl	80066d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	691a      	ldr	r2, [r3, #16]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800668c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	695a      	ldr	r2, [r3, #20]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800669c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2220      	movs	r2, #32
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2220      	movs	r2, #32
 80066c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d4:	b09f      	sub	sp, #124	; 0x7c
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e6:	68d9      	ldr	r1, [r3, #12]
 80066e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	ea40 0301 	orr.w	r3, r0, r1
 80066f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	431a      	orrs	r2, r3
 80066fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	431a      	orrs	r2, r3
 8006702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	4313      	orrs	r3, r2
 8006708:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800670a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006714:	f021 010c 	bic.w	r1, r1, #12
 8006718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800671e:	430b      	orrs	r3, r1
 8006720:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800672c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800672e:	6999      	ldr	r1, [r3, #24]
 8006730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	ea40 0301 	orr.w	r3, r0, r1
 8006738:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800673a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	4bc5      	ldr	r3, [pc, #788]	; (8006a54 <UART_SetConfig+0x384>)
 8006740:	429a      	cmp	r2, r3
 8006742:	d004      	beq.n	800674e <UART_SetConfig+0x7e>
 8006744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	4bc3      	ldr	r3, [pc, #780]	; (8006a58 <UART_SetConfig+0x388>)
 800674a:	429a      	cmp	r2, r3
 800674c:	d103      	bne.n	8006756 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800674e:	f7fe fbf7 	bl	8004f40 <HAL_RCC_GetPCLK2Freq>
 8006752:	6778      	str	r0, [r7, #116]	; 0x74
 8006754:	e002      	b.n	800675c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006756:	f7fe fbdf 	bl	8004f18 <HAL_RCC_GetPCLK1Freq>
 800675a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800675c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006764:	f040 80b6 	bne.w	80068d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800676a:	461c      	mov	r4, r3
 800676c:	f04f 0500 	mov.w	r5, #0
 8006770:	4622      	mov	r2, r4
 8006772:	462b      	mov	r3, r5
 8006774:	1891      	adds	r1, r2, r2
 8006776:	6439      	str	r1, [r7, #64]	; 0x40
 8006778:	415b      	adcs	r3, r3
 800677a:	647b      	str	r3, [r7, #68]	; 0x44
 800677c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006780:	1912      	adds	r2, r2, r4
 8006782:	eb45 0303 	adc.w	r3, r5, r3
 8006786:	f04f 0000 	mov.w	r0, #0
 800678a:	f04f 0100 	mov.w	r1, #0
 800678e:	00d9      	lsls	r1, r3, #3
 8006790:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006794:	00d0      	lsls	r0, r2, #3
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	1911      	adds	r1, r2, r4
 800679c:	6639      	str	r1, [r7, #96]	; 0x60
 800679e:	416b      	adcs	r3, r5
 80067a0:	667b      	str	r3, [r7, #100]	; 0x64
 80067a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	461a      	mov	r2, r3
 80067a8:	f04f 0300 	mov.w	r3, #0
 80067ac:	1891      	adds	r1, r2, r2
 80067ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80067b0:	415b      	adcs	r3, r3
 80067b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80067bc:	f7f9 fd10 	bl	80001e0 <__aeabi_uldivmod>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4ba5      	ldr	r3, [pc, #660]	; (8006a5c <UART_SetConfig+0x38c>)
 80067c6:	fba3 2302 	umull	r2, r3, r3, r2
 80067ca:	095b      	lsrs	r3, r3, #5
 80067cc:	011e      	lsls	r6, r3, #4
 80067ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067d0:	461c      	mov	r4, r3
 80067d2:	f04f 0500 	mov.w	r5, #0
 80067d6:	4622      	mov	r2, r4
 80067d8:	462b      	mov	r3, r5
 80067da:	1891      	adds	r1, r2, r2
 80067dc:	6339      	str	r1, [r7, #48]	; 0x30
 80067de:	415b      	adcs	r3, r3
 80067e0:	637b      	str	r3, [r7, #52]	; 0x34
 80067e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80067e6:	1912      	adds	r2, r2, r4
 80067e8:	eb45 0303 	adc.w	r3, r5, r3
 80067ec:	f04f 0000 	mov.w	r0, #0
 80067f0:	f04f 0100 	mov.w	r1, #0
 80067f4:	00d9      	lsls	r1, r3, #3
 80067f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067fa:	00d0      	lsls	r0, r2, #3
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	1911      	adds	r1, r2, r4
 8006802:	65b9      	str	r1, [r7, #88]	; 0x58
 8006804:	416b      	adcs	r3, r5
 8006806:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	461a      	mov	r2, r3
 800680e:	f04f 0300 	mov.w	r3, #0
 8006812:	1891      	adds	r1, r2, r2
 8006814:	62b9      	str	r1, [r7, #40]	; 0x28
 8006816:	415b      	adcs	r3, r3
 8006818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800681a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800681e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006822:	f7f9 fcdd 	bl	80001e0 <__aeabi_uldivmod>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	4b8c      	ldr	r3, [pc, #560]	; (8006a5c <UART_SetConfig+0x38c>)
 800682c:	fba3 1302 	umull	r1, r3, r3, r2
 8006830:	095b      	lsrs	r3, r3, #5
 8006832:	2164      	movs	r1, #100	; 0x64
 8006834:	fb01 f303 	mul.w	r3, r1, r3
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	3332      	adds	r3, #50	; 0x32
 800683e:	4a87      	ldr	r2, [pc, #540]	; (8006a5c <UART_SetConfig+0x38c>)
 8006840:	fba2 2303 	umull	r2, r3, r2, r3
 8006844:	095b      	lsrs	r3, r3, #5
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800684c:	441e      	add	r6, r3
 800684e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006850:	4618      	mov	r0, r3
 8006852:	f04f 0100 	mov.w	r1, #0
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	1894      	adds	r4, r2, r2
 800685c:	623c      	str	r4, [r7, #32]
 800685e:	415b      	adcs	r3, r3
 8006860:	627b      	str	r3, [r7, #36]	; 0x24
 8006862:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006866:	1812      	adds	r2, r2, r0
 8006868:	eb41 0303 	adc.w	r3, r1, r3
 800686c:	f04f 0400 	mov.w	r4, #0
 8006870:	f04f 0500 	mov.w	r5, #0
 8006874:	00dd      	lsls	r5, r3, #3
 8006876:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800687a:	00d4      	lsls	r4, r2, #3
 800687c:	4622      	mov	r2, r4
 800687e:	462b      	mov	r3, r5
 8006880:	1814      	adds	r4, r2, r0
 8006882:	653c      	str	r4, [r7, #80]	; 0x50
 8006884:	414b      	adcs	r3, r1
 8006886:	657b      	str	r3, [r7, #84]	; 0x54
 8006888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	461a      	mov	r2, r3
 800688e:	f04f 0300 	mov.w	r3, #0
 8006892:	1891      	adds	r1, r2, r2
 8006894:	61b9      	str	r1, [r7, #24]
 8006896:	415b      	adcs	r3, r3
 8006898:	61fb      	str	r3, [r7, #28]
 800689a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800689e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80068a2:	f7f9 fc9d 	bl	80001e0 <__aeabi_uldivmod>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4b6c      	ldr	r3, [pc, #432]	; (8006a5c <UART_SetConfig+0x38c>)
 80068ac:	fba3 1302 	umull	r1, r3, r3, r2
 80068b0:	095b      	lsrs	r3, r3, #5
 80068b2:	2164      	movs	r1, #100	; 0x64
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	3332      	adds	r3, #50	; 0x32
 80068be:	4a67      	ldr	r2, [pc, #412]	; (8006a5c <UART_SetConfig+0x38c>)
 80068c0:	fba2 2303 	umull	r2, r3, r2, r3
 80068c4:	095b      	lsrs	r3, r3, #5
 80068c6:	f003 0207 	and.w	r2, r3, #7
 80068ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4432      	add	r2, r6
 80068d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068d2:	e0b9      	b.n	8006a48 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068d6:	461c      	mov	r4, r3
 80068d8:	f04f 0500 	mov.w	r5, #0
 80068dc:	4622      	mov	r2, r4
 80068de:	462b      	mov	r3, r5
 80068e0:	1891      	adds	r1, r2, r2
 80068e2:	6139      	str	r1, [r7, #16]
 80068e4:	415b      	adcs	r3, r3
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80068ec:	1912      	adds	r2, r2, r4
 80068ee:	eb45 0303 	adc.w	r3, r5, r3
 80068f2:	f04f 0000 	mov.w	r0, #0
 80068f6:	f04f 0100 	mov.w	r1, #0
 80068fa:	00d9      	lsls	r1, r3, #3
 80068fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006900:	00d0      	lsls	r0, r2, #3
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	eb12 0804 	adds.w	r8, r2, r4
 800690a:	eb43 0905 	adc.w	r9, r3, r5
 800690e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	4618      	mov	r0, r3
 8006914:	f04f 0100 	mov.w	r1, #0
 8006918:	f04f 0200 	mov.w	r2, #0
 800691c:	f04f 0300 	mov.w	r3, #0
 8006920:	008b      	lsls	r3, r1, #2
 8006922:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006926:	0082      	lsls	r2, r0, #2
 8006928:	4640      	mov	r0, r8
 800692a:	4649      	mov	r1, r9
 800692c:	f7f9 fc58 	bl	80001e0 <__aeabi_uldivmod>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4b49      	ldr	r3, [pc, #292]	; (8006a5c <UART_SetConfig+0x38c>)
 8006936:	fba3 2302 	umull	r2, r3, r3, r2
 800693a:	095b      	lsrs	r3, r3, #5
 800693c:	011e      	lsls	r6, r3, #4
 800693e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006940:	4618      	mov	r0, r3
 8006942:	f04f 0100 	mov.w	r1, #0
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	1894      	adds	r4, r2, r2
 800694c:	60bc      	str	r4, [r7, #8]
 800694e:	415b      	adcs	r3, r3
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006956:	1812      	adds	r2, r2, r0
 8006958:	eb41 0303 	adc.w	r3, r1, r3
 800695c:	f04f 0400 	mov.w	r4, #0
 8006960:	f04f 0500 	mov.w	r5, #0
 8006964:	00dd      	lsls	r5, r3, #3
 8006966:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800696a:	00d4      	lsls	r4, r2, #3
 800696c:	4622      	mov	r2, r4
 800696e:	462b      	mov	r3, r5
 8006970:	1814      	adds	r4, r2, r0
 8006972:	64bc      	str	r4, [r7, #72]	; 0x48
 8006974:	414b      	adcs	r3, r1
 8006976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	4618      	mov	r0, r3
 800697e:	f04f 0100 	mov.w	r1, #0
 8006982:	f04f 0200 	mov.w	r2, #0
 8006986:	f04f 0300 	mov.w	r3, #0
 800698a:	008b      	lsls	r3, r1, #2
 800698c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006990:	0082      	lsls	r2, r0, #2
 8006992:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006996:	f7f9 fc23 	bl	80001e0 <__aeabi_uldivmod>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	4b2f      	ldr	r3, [pc, #188]	; (8006a5c <UART_SetConfig+0x38c>)
 80069a0:	fba3 1302 	umull	r1, r3, r3, r2
 80069a4:	095b      	lsrs	r3, r3, #5
 80069a6:	2164      	movs	r1, #100	; 0x64
 80069a8:	fb01 f303 	mul.w	r3, r1, r3
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	3332      	adds	r3, #50	; 0x32
 80069b2:	4a2a      	ldr	r2, [pc, #168]	; (8006a5c <UART_SetConfig+0x38c>)
 80069b4:	fba2 2303 	umull	r2, r3, r2, r3
 80069b8:	095b      	lsrs	r3, r3, #5
 80069ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069be:	441e      	add	r6, r3
 80069c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069c2:	4618      	mov	r0, r3
 80069c4:	f04f 0100 	mov.w	r1, #0
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	1894      	adds	r4, r2, r2
 80069ce:	603c      	str	r4, [r7, #0]
 80069d0:	415b      	adcs	r3, r3
 80069d2:	607b      	str	r3, [r7, #4]
 80069d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069d8:	1812      	adds	r2, r2, r0
 80069da:	eb41 0303 	adc.w	r3, r1, r3
 80069de:	f04f 0400 	mov.w	r4, #0
 80069e2:	f04f 0500 	mov.w	r5, #0
 80069e6:	00dd      	lsls	r5, r3, #3
 80069e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80069ec:	00d4      	lsls	r4, r2, #3
 80069ee:	4622      	mov	r2, r4
 80069f0:	462b      	mov	r3, r5
 80069f2:	eb12 0a00 	adds.w	sl, r2, r0
 80069f6:	eb43 0b01 	adc.w	fp, r3, r1
 80069fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f04f 0100 	mov.w	r1, #0
 8006a04:	f04f 0200 	mov.w	r2, #0
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	008b      	lsls	r3, r1, #2
 8006a0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a12:	0082      	lsls	r2, r0, #2
 8006a14:	4650      	mov	r0, sl
 8006a16:	4659      	mov	r1, fp
 8006a18:	f7f9 fbe2 	bl	80001e0 <__aeabi_uldivmod>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4b0e      	ldr	r3, [pc, #56]	; (8006a5c <UART_SetConfig+0x38c>)
 8006a22:	fba3 1302 	umull	r1, r3, r3, r2
 8006a26:	095b      	lsrs	r3, r3, #5
 8006a28:	2164      	movs	r1, #100	; 0x64
 8006a2a:	fb01 f303 	mul.w	r3, r1, r3
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	011b      	lsls	r3, r3, #4
 8006a32:	3332      	adds	r3, #50	; 0x32
 8006a34:	4a09      	ldr	r2, [pc, #36]	; (8006a5c <UART_SetConfig+0x38c>)
 8006a36:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	f003 020f 	and.w	r2, r3, #15
 8006a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4432      	add	r2, r6
 8006a46:	609a      	str	r2, [r3, #8]
}
 8006a48:	bf00      	nop
 8006a4a:	377c      	adds	r7, #124	; 0x7c
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a52:	bf00      	nop
 8006a54:	40011000 	.word	0x40011000
 8006a58:	40011400 	.word	0x40011400
 8006a5c:	51eb851f 	.word	0x51eb851f

08006a60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a60:	b084      	sub	sp, #16
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	f107 001c 	add.w	r0, r7, #28
 8006a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d122      	bne.n	8006abe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d105      	bne.n	8006ab2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 fb1c 	bl	80080f0 <USB_CoreReset>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	73fb      	strb	r3, [r7, #15]
 8006abc:	e01a      	b.n	8006af4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 fb10 	bl	80080f0 <USB_CoreReset>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d106      	bne.n	8006ae8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	639a      	str	r2, [r3, #56]	; 0x38
 8006ae6:	e005      	b.n	8006af4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d10b      	bne.n	8006b12 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f043 0206 	orr.w	r2, r3, #6
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f043 0220 	orr.w	r2, r3, #32
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b1e:	b004      	add	sp, #16
 8006b20:	4770      	bx	lr
	...

08006b24 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006b32:	79fb      	ldrb	r3, [r7, #7]
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d165      	bne.n	8006c04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	4a41      	ldr	r2, [pc, #260]	; (8006c40 <USB_SetTurnaroundTime+0x11c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d906      	bls.n	8006b4e <USB_SetTurnaroundTime+0x2a>
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	4a40      	ldr	r2, [pc, #256]	; (8006c44 <USB_SetTurnaroundTime+0x120>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d202      	bcs.n	8006b4e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006b48:	230f      	movs	r3, #15
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	e062      	b.n	8006c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	4a3c      	ldr	r2, [pc, #240]	; (8006c44 <USB_SetTurnaroundTime+0x120>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d306      	bcc.n	8006b64 <USB_SetTurnaroundTime+0x40>
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	4a3b      	ldr	r2, [pc, #236]	; (8006c48 <USB_SetTurnaroundTime+0x124>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d202      	bcs.n	8006b64 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006b5e:	230e      	movs	r3, #14
 8006b60:	617b      	str	r3, [r7, #20]
 8006b62:	e057      	b.n	8006c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4a38      	ldr	r2, [pc, #224]	; (8006c48 <USB_SetTurnaroundTime+0x124>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d306      	bcc.n	8006b7a <USB_SetTurnaroundTime+0x56>
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	4a37      	ldr	r2, [pc, #220]	; (8006c4c <USB_SetTurnaroundTime+0x128>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d202      	bcs.n	8006b7a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006b74:	230d      	movs	r3, #13
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	e04c      	b.n	8006c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	4a33      	ldr	r2, [pc, #204]	; (8006c4c <USB_SetTurnaroundTime+0x128>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d306      	bcc.n	8006b90 <USB_SetTurnaroundTime+0x6c>
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	4a32      	ldr	r2, [pc, #200]	; (8006c50 <USB_SetTurnaroundTime+0x12c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d802      	bhi.n	8006b90 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006b8a:	230c      	movs	r3, #12
 8006b8c:	617b      	str	r3, [r7, #20]
 8006b8e:	e041      	b.n	8006c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4a2f      	ldr	r2, [pc, #188]	; (8006c50 <USB_SetTurnaroundTime+0x12c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d906      	bls.n	8006ba6 <USB_SetTurnaroundTime+0x82>
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	4a2e      	ldr	r2, [pc, #184]	; (8006c54 <USB_SetTurnaroundTime+0x130>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d802      	bhi.n	8006ba6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006ba0:	230b      	movs	r3, #11
 8006ba2:	617b      	str	r3, [r7, #20]
 8006ba4:	e036      	b.n	8006c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	4a2a      	ldr	r2, [pc, #168]	; (8006c54 <USB_SetTurnaroundTime+0x130>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d906      	bls.n	8006bbc <USB_SetTurnaroundTime+0x98>
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	4a29      	ldr	r2, [pc, #164]	; (8006c58 <USB_SetTurnaroundTime+0x134>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d802      	bhi.n	8006bbc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006bb6:	230a      	movs	r3, #10
 8006bb8:	617b      	str	r3, [r7, #20]
 8006bba:	e02b      	b.n	8006c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	4a26      	ldr	r2, [pc, #152]	; (8006c58 <USB_SetTurnaroundTime+0x134>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d906      	bls.n	8006bd2 <USB_SetTurnaroundTime+0xae>
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	4a25      	ldr	r2, [pc, #148]	; (8006c5c <USB_SetTurnaroundTime+0x138>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d202      	bcs.n	8006bd2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006bcc:	2309      	movs	r3, #9
 8006bce:	617b      	str	r3, [r7, #20]
 8006bd0:	e020      	b.n	8006c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	4a21      	ldr	r2, [pc, #132]	; (8006c5c <USB_SetTurnaroundTime+0x138>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d306      	bcc.n	8006be8 <USB_SetTurnaroundTime+0xc4>
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	4a20      	ldr	r2, [pc, #128]	; (8006c60 <USB_SetTurnaroundTime+0x13c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d802      	bhi.n	8006be8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006be2:	2308      	movs	r3, #8
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	e015      	b.n	8006c14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4a1d      	ldr	r2, [pc, #116]	; (8006c60 <USB_SetTurnaroundTime+0x13c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d906      	bls.n	8006bfe <USB_SetTurnaroundTime+0xda>
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	4a1c      	ldr	r2, [pc, #112]	; (8006c64 <USB_SetTurnaroundTime+0x140>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d202      	bcs.n	8006bfe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006bf8:	2307      	movs	r3, #7
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	e00a      	b.n	8006c14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006bfe:	2306      	movs	r3, #6
 8006c00:	617b      	str	r3, [r7, #20]
 8006c02:	e007      	b.n	8006c14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006c04:	79fb      	ldrb	r3, [r7, #7]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d102      	bne.n	8006c10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006c0a:	2309      	movs	r3, #9
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	e001      	b.n	8006c14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006c10:	2309      	movs	r3, #9
 8006c12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	029b      	lsls	r3, r3, #10
 8006c28:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	371c      	adds	r7, #28
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	00d8acbf 	.word	0x00d8acbf
 8006c44:	00e4e1c0 	.word	0x00e4e1c0
 8006c48:	00f42400 	.word	0x00f42400
 8006c4c:	01067380 	.word	0x01067380
 8006c50:	011a499f 	.word	0x011a499f
 8006c54:	01312cff 	.word	0x01312cff
 8006c58:	014ca43f 	.word	0x014ca43f
 8006c5c:	016e3600 	.word	0x016e3600
 8006c60:	01a6ab1f 	.word	0x01a6ab1f
 8006c64:	01e84800 	.word	0x01e84800

08006c68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f043 0201 	orr.w	r2, r3, #1
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f023 0201 	bic.w	r2, r3, #1
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cc8:	78fb      	ldrb	r3, [r7, #3]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d115      	bne.n	8006cfa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cda:	2001      	movs	r0, #1
 8006cdc:	f7fb fc28 	bl	8002530 <HAL_Delay>
      ms++;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 f972 	bl	8007fd0 <USB_GetMode>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d01e      	beq.n	8006d30 <USB_SetCurrentMode+0x84>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b31      	cmp	r3, #49	; 0x31
 8006cf6:	d9f0      	bls.n	8006cda <USB_SetCurrentMode+0x2e>
 8006cf8:	e01a      	b.n	8006d30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cfa:	78fb      	ldrb	r3, [r7, #3]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d115      	bne.n	8006d2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d0c:	2001      	movs	r0, #1
 8006d0e:	f7fb fc0f 	bl	8002530 <HAL_Delay>
      ms++;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	3301      	adds	r3, #1
 8006d16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f001 f959 	bl	8007fd0 <USB_GetMode>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <USB_SetCurrentMode+0x84>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b31      	cmp	r3, #49	; 0x31
 8006d28:	d9f0      	bls.n	8006d0c <USB_SetCurrentMode+0x60>
 8006d2a:	e001      	b.n	8006d30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e005      	b.n	8006d3c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2b32      	cmp	r3, #50	; 0x32
 8006d34:	d101      	bne.n	8006d3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e000      	b.n	8006d3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d44:	b084      	sub	sp, #16
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b086      	sub	sp, #24
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d5e:	2300      	movs	r3, #0
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	e009      	b.n	8006d78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	3340      	adds	r3, #64	; 0x40
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	2200      	movs	r2, #0
 8006d70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	3301      	adds	r3, #1
 8006d76:	613b      	str	r3, [r7, #16]
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	2b0e      	cmp	r3, #14
 8006d7c:	d9f2      	bls.n	8006d64 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d11c      	bne.n	8006dbe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d92:	f043 0302 	orr.w	r3, r3, #2
 8006d96:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	639a      	str	r2, [r3, #56]	; 0x38
 8006dbc:	e00b      	b.n	8006dd6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ddc:	461a      	mov	r2, r3
 8006dde:	2300      	movs	r3, #0
 8006de0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de8:	4619      	mov	r1, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df0:	461a      	mov	r2, r3
 8006df2:	680b      	ldr	r3, [r1, #0]
 8006df4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d10c      	bne.n	8006e16 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d104      	bne.n	8006e0c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e02:	2100      	movs	r1, #0
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f945 	bl	8007094 <USB_SetDevSpeed>
 8006e0a:	e008      	b.n	8006e1e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f940 	bl	8007094 <USB_SetDevSpeed>
 8006e14:	e003      	b.n	8006e1e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e16:	2103      	movs	r1, #3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f93b 	bl	8007094 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e1e:	2110      	movs	r1, #16
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f8f3 	bl	800700c <USB_FlushTxFifo>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f90f 	bl	8007054 <USB_FlushRxFifo>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e46:	461a      	mov	r2, r3
 8006e48:	2300      	movs	r3, #0
 8006e4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e52:	461a      	mov	r2, r3
 8006e54:	2300      	movs	r3, #0
 8006e56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5e:	461a      	mov	r2, r3
 8006e60:	2300      	movs	r3, #0
 8006e62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e64:	2300      	movs	r3, #0
 8006e66:	613b      	str	r3, [r7, #16]
 8006e68:	e043      	b.n	8006ef2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e80:	d118      	bne.n	8006eb4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10a      	bne.n	8006e9e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e94:	461a      	mov	r2, r3
 8006e96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	e013      	b.n	8006ec6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eaa:	461a      	mov	r2, r3
 8006eac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	e008      	b.n	8006ec6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006eea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	613b      	str	r3, [r7, #16]
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d3b7      	bcc.n	8006e6a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006efa:	2300      	movs	r3, #0
 8006efc:	613b      	str	r3, [r7, #16]
 8006efe:	e043      	b.n	8006f88 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f16:	d118      	bne.n	8006f4a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	e013      	b.n	8006f5c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f40:	461a      	mov	r2, r3
 8006f42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	e008      	b.n	8006f5c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f56:	461a      	mov	r2, r3
 8006f58:	2300      	movs	r3, #0
 8006f5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f68:	461a      	mov	r2, r3
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	3301      	adds	r3, #1
 8006f86:	613b      	str	r3, [r7, #16]
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d3b7      	bcc.n	8006f00 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fa2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006fb0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d105      	bne.n	8006fc4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	f043 0210 	orr.w	r2, r3, #16
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	699a      	ldr	r2, [r3, #24]
 8006fc8:	4b0f      	ldr	r3, [pc, #60]	; (8007008 <USB_DevInit+0x2c4>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d005      	beq.n	8006fe2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	f043 0208 	orr.w	r2, r3, #8
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d107      	bne.n	8006ff8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ff0:	f043 0304 	orr.w	r3, r3, #4
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007004:	b004      	add	sp, #16
 8007006:	4770      	bx	lr
 8007008:	803c3800 	.word	0x803c3800

0800700c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	019b      	lsls	r3, r3, #6
 800701e:	f043 0220 	orr.w	r2, r3, #32
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3301      	adds	r3, #1
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	4a08      	ldr	r2, [pc, #32]	; (8007050 <USB_FlushTxFifo+0x44>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d901      	bls.n	8007036 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e006      	b.n	8007044 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b20      	cmp	r3, #32
 8007040:	d0f1      	beq.n	8007026 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	00030d40 	.word	0x00030d40

08007054 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2210      	movs	r2, #16
 8007064:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3301      	adds	r3, #1
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	4a08      	ldr	r2, [pc, #32]	; (8007090 <USB_FlushRxFifo+0x3c>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d901      	bls.n	8007076 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e006      	b.n	8007084 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f003 0310 	and.w	r3, r3, #16
 800707e:	2b10      	cmp	r3, #16
 8007080:	d0f1      	beq.n	8007066 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	00030d40 	.word	0x00030d40

08007094 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	78fb      	ldrb	r3, [r7, #3]
 80070ae:	68f9      	ldr	r1, [r7, #12]
 80070b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070b4:	4313      	orrs	r3, r2
 80070b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b087      	sub	sp, #28
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f003 0306 	and.w	r3, r3, #6
 80070de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d102      	bne.n	80070ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80070e6:	2300      	movs	r3, #0
 80070e8:	75fb      	strb	r3, [r7, #23]
 80070ea:	e00a      	b.n	8007102 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d002      	beq.n	80070f8 <USB_GetDevSpeed+0x32>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2b06      	cmp	r3, #6
 80070f6:	d102      	bne.n	80070fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80070f8:	2302      	movs	r3, #2
 80070fa:	75fb      	strb	r3, [r7, #23]
 80070fc:	e001      	b.n	8007102 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80070fe:	230f      	movs	r3, #15
 8007100:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007102:	7dfb      	ldrb	r3, [r7, #23]
}
 8007104:	4618      	mov	r0, r3
 8007106:	371c      	adds	r7, #28
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	785b      	ldrb	r3, [r3, #1]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d13a      	bne.n	80071a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007132:	69da      	ldr	r2, [r3, #28]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	2101      	movs	r1, #1
 800713e:	fa01 f303 	lsl.w	r3, r1, r3
 8007142:	b29b      	uxth	r3, r3
 8007144:	68f9      	ldr	r1, [r7, #12]
 8007146:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800714a:	4313      	orrs	r3, r2
 800714c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	4413      	add	r3, r2
 8007156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d155      	bne.n	8007210 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	78db      	ldrb	r3, [r3, #3]
 800717e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007180:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	059b      	lsls	r3, r3, #22
 8007186:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007188:	4313      	orrs	r3, r2
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	0151      	lsls	r1, r2, #5
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	440a      	add	r2, r1
 8007192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800719a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800719e:	6013      	str	r3, [r2, #0]
 80071a0:	e036      	b.n	8007210 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a8:	69da      	ldr	r2, [r3, #28]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	f003 030f 	and.w	r3, r3, #15
 80071b2:	2101      	movs	r1, #1
 80071b4:	fa01 f303 	lsl.w	r3, r1, r3
 80071b8:	041b      	lsls	r3, r3, #16
 80071ba:	68f9      	ldr	r1, [r7, #12]
 80071bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071c0:	4313      	orrs	r3, r2
 80071c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d11a      	bne.n	8007210 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	015a      	lsls	r2, r3, #5
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	4413      	add	r3, r2
 80071e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	78db      	ldrb	r3, [r3, #3]
 80071f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80071f6:	430b      	orrs	r3, r1
 80071f8:	4313      	orrs	r3, r2
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	0151      	lsls	r1, r2, #5
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	440a      	add	r2, r1
 8007202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800720a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800720e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
	...

08007220 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	785b      	ldrb	r3, [r3, #1]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d161      	bne.n	8007300 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800724e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007252:	d11f      	bne.n	8007294 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	015a      	lsls	r2, r3, #5
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	4413      	add	r3, r2
 800725c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	0151      	lsls	r1, r2, #5
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	440a      	add	r2, r1
 800726a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800726e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007272:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	0151      	lsls	r1, r2, #5
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	440a      	add	r2, r1
 800728a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800728e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007292:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	f003 030f 	and.w	r3, r3, #15
 80072a4:	2101      	movs	r1, #1
 80072a6:	fa01 f303 	lsl.w	r3, r1, r3
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	43db      	mvns	r3, r3
 80072ae:	68f9      	ldr	r1, [r7, #12]
 80072b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072b4:	4013      	ands	r3, r2
 80072b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072be:	69da      	ldr	r2, [r3, #28]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	f003 030f 	and.w	r3, r3, #15
 80072c8:	2101      	movs	r1, #1
 80072ca:	fa01 f303 	lsl.w	r3, r1, r3
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	43db      	mvns	r3, r3
 80072d2:	68f9      	ldr	r1, [r7, #12]
 80072d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072d8:	4013      	ands	r3, r2
 80072da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	0159      	lsls	r1, r3, #5
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	440b      	add	r3, r1
 80072f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f6:	4619      	mov	r1, r3
 80072f8:	4b35      	ldr	r3, [pc, #212]	; (80073d0 <USB_DeactivateEndpoint+0x1b0>)
 80072fa:	4013      	ands	r3, r2
 80072fc:	600b      	str	r3, [r1, #0]
 80072fe:	e060      	b.n	80073c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4413      	add	r3, r2
 8007308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007316:	d11f      	bne.n	8007358 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	0151      	lsls	r1, r2, #5
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	440a      	add	r2, r1
 800732e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007332:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007336:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	0151      	lsls	r1, r2, #5
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	440a      	add	r2, r1
 800734e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007352:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007356:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	f003 030f 	and.w	r3, r3, #15
 8007368:	2101      	movs	r1, #1
 800736a:	fa01 f303 	lsl.w	r3, r1, r3
 800736e:	041b      	lsls	r3, r3, #16
 8007370:	43db      	mvns	r3, r3
 8007372:	68f9      	ldr	r1, [r7, #12]
 8007374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007378:	4013      	ands	r3, r2
 800737a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007382:	69da      	ldr	r2, [r3, #28]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	f003 030f 	and.w	r3, r3, #15
 800738c:	2101      	movs	r1, #1
 800738e:	fa01 f303 	lsl.w	r3, r1, r3
 8007392:	041b      	lsls	r3, r3, #16
 8007394:	43db      	mvns	r3, r3
 8007396:	68f9      	ldr	r1, [r7, #12]
 8007398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800739c:	4013      	ands	r3, r2
 800739e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	0159      	lsls	r1, r3, #5
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	440b      	add	r3, r1
 80073b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ba:	4619      	mov	r1, r3
 80073bc:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <USB_DeactivateEndpoint+0x1b4>)
 80073be:	4013      	ands	r3, r2
 80073c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	ec337800 	.word	0xec337800
 80073d4:	eff37800 	.word	0xeff37800

080073d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08a      	sub	sp, #40	; 0x28
 80073dc:	af02      	add	r7, sp, #8
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	4613      	mov	r3, r2
 80073e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	785b      	ldrb	r3, [r3, #1]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	f040 815c 	bne.w	80076b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d132      	bne.n	8007468 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	0151      	lsls	r1, r2, #5
 8007414:	69fa      	ldr	r2, [r7, #28]
 8007416:	440a      	add	r2, r1
 8007418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800741c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007420:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007424:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	015a      	lsls	r2, r3, #5
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	4413      	add	r3, r2
 800742e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	0151      	lsls	r1, r2, #5
 8007438:	69fa      	ldr	r2, [r7, #28]
 800743a:	440a      	add	r2, r1
 800743c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007440:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007444:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	0151      	lsls	r1, r2, #5
 8007458:	69fa      	ldr	r2, [r7, #28]
 800745a:	440a      	add	r2, r1
 800745c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007460:	0cdb      	lsrs	r3, r3, #19
 8007462:	04db      	lsls	r3, r3, #19
 8007464:	6113      	str	r3, [r2, #16]
 8007466:	e074      	b.n	8007552 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	69ba      	ldr	r2, [r7, #24]
 8007478:	0151      	lsls	r1, r2, #5
 800747a:	69fa      	ldr	r2, [r7, #28]
 800747c:	440a      	add	r2, r1
 800747e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007482:	0cdb      	lsrs	r3, r3, #19
 8007484:	04db      	lsls	r3, r3, #19
 8007486:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	0151      	lsls	r1, r2, #5
 800749a:	69fa      	ldr	r2, [r7, #28]
 800749c:	440a      	add	r2, r1
 800749e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	6959      	ldr	r1, [r3, #20]
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	440b      	add	r3, r1
 80074c4:	1e59      	subs	r1, r3, #1
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80074ce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80074d0:	4b9d      	ldr	r3, [pc, #628]	; (8007748 <USB_EPStartXfer+0x370>)
 80074d2:	400b      	ands	r3, r1
 80074d4:	69b9      	ldr	r1, [r7, #24]
 80074d6:	0148      	lsls	r0, r1, #5
 80074d8:	69f9      	ldr	r1, [r7, #28]
 80074da:	4401      	add	r1, r0
 80074dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80074e0:	4313      	orrs	r3, r2
 80074e2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f0:	691a      	ldr	r2, [r3, #16]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074fa:	69b9      	ldr	r1, [r7, #24]
 80074fc:	0148      	lsls	r0, r1, #5
 80074fe:	69f9      	ldr	r1, [r7, #28]
 8007500:	4401      	add	r1, r0
 8007502:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007506:	4313      	orrs	r3, r2
 8007508:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	78db      	ldrb	r3, [r3, #3]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d11f      	bne.n	8007552 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	4413      	add	r3, r2
 800751a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	69ba      	ldr	r2, [r7, #24]
 8007522:	0151      	lsls	r1, r2, #5
 8007524:	69fa      	ldr	r2, [r7, #28]
 8007526:	440a      	add	r2, r1
 8007528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800752c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007530:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	015a      	lsls	r2, r3, #5
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	4413      	add	r3, r2
 800753a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	0151      	lsls	r1, r2, #5
 8007544:	69fa      	ldr	r2, [r7, #28]
 8007546:	440a      	add	r2, r1
 8007548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800754c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007550:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007552:	79fb      	ldrb	r3, [r7, #7]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d14b      	bne.n	80075f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d009      	beq.n	8007574 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	015a      	lsls	r2, r3, #5
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	4413      	add	r3, r2
 8007568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800756c:	461a      	mov	r2, r3
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	78db      	ldrb	r3, [r3, #3]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d128      	bne.n	80075ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007588:	2b00      	cmp	r3, #0
 800758a:	d110      	bne.n	80075ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	4413      	add	r3, r2
 8007594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	0151      	lsls	r1, r2, #5
 800759e:	69fa      	ldr	r2, [r7, #28]
 80075a0:	440a      	add	r2, r1
 80075a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	e00f      	b.n	80075ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	0151      	lsls	r1, r2, #5
 80075c0:	69fa      	ldr	r2, [r7, #28]
 80075c2:	440a      	add	r2, r1
 80075c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	0151      	lsls	r1, r2, #5
 80075e0:	69fa      	ldr	r2, [r7, #28]
 80075e2:	440a      	add	r2, r1
 80075e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	e12f      	b.n	8007850 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	0151      	lsls	r1, r2, #5
 8007602:	69fa      	ldr	r2, [r7, #28]
 8007604:	440a      	add	r2, r1
 8007606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800760a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800760e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	78db      	ldrb	r3, [r3, #3]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d015      	beq.n	8007644 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	695b      	ldr	r3, [r3, #20]
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 8117 	beq.w	8007850 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	f003 030f 	and.w	r3, r3, #15
 8007632:	2101      	movs	r1, #1
 8007634:	fa01 f303 	lsl.w	r3, r1, r3
 8007638:	69f9      	ldr	r1, [r7, #28]
 800763a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800763e:	4313      	orrs	r3, r2
 8007640:	634b      	str	r3, [r1, #52]	; 0x34
 8007642:	e105      	b.n	8007850 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007650:	2b00      	cmp	r3, #0
 8007652:	d110      	bne.n	8007676 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	0151      	lsls	r1, r2, #5
 8007666:	69fa      	ldr	r2, [r7, #28]
 8007668:	440a      	add	r2, r1
 800766a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800766e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	e00f      	b.n	8007696 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	0151      	lsls	r1, r2, #5
 8007688:	69fa      	ldr	r2, [r7, #28]
 800768a:	440a      	add	r2, r1
 800768c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007694:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	68d9      	ldr	r1, [r3, #12]
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	781a      	ldrb	r2, [r3, #0]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	b298      	uxth	r0, r3
 80076a4:	79fb      	ldrb	r3, [r7, #7]
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	4603      	mov	r3, r0
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f000 fa2b 	bl	8007b06 <USB_WritePacket>
 80076b0:	e0ce      	b.n	8007850 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	0151      	lsls	r1, r2, #5
 80076c4:	69fa      	ldr	r2, [r7, #28]
 80076c6:	440a      	add	r2, r1
 80076c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076cc:	0cdb      	lsrs	r3, r3, #19
 80076ce:	04db      	lsls	r3, r3, #19
 80076d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	015a      	lsls	r2, r3, #5
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	4413      	add	r3, r2
 80076da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	0151      	lsls	r1, r2, #5
 80076e4:	69fa      	ldr	r2, [r7, #28]
 80076e6:	440a      	add	r2, r1
 80076e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d126      	bne.n	800774c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	4413      	add	r3, r2
 8007706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770a:	691a      	ldr	r2, [r3, #16]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007714:	69b9      	ldr	r1, [r7, #24]
 8007716:	0148      	lsls	r0, r1, #5
 8007718:	69f9      	ldr	r1, [r7, #28]
 800771a:	4401      	add	r1, r0
 800771c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007720:	4313      	orrs	r3, r2
 8007722:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	0151      	lsls	r1, r2, #5
 8007736:	69fa      	ldr	r2, [r7, #28]
 8007738:	440a      	add	r2, r1
 800773a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800773e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007742:	6113      	str	r3, [r2, #16]
 8007744:	e036      	b.n	80077b4 <USB_EPStartXfer+0x3dc>
 8007746:	bf00      	nop
 8007748:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	695a      	ldr	r2, [r3, #20]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	4413      	add	r3, r2
 8007756:	1e5a      	subs	r2, r3, #1
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007760:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	4413      	add	r3, r2
 800776a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776e:	691a      	ldr	r2, [r3, #16]
 8007770:	8afb      	ldrh	r3, [r7, #22]
 8007772:	04d9      	lsls	r1, r3, #19
 8007774:	4b39      	ldr	r3, [pc, #228]	; (800785c <USB_EPStartXfer+0x484>)
 8007776:	400b      	ands	r3, r1
 8007778:	69b9      	ldr	r1, [r7, #24]
 800777a:	0148      	lsls	r0, r1, #5
 800777c:	69f9      	ldr	r1, [r7, #28]
 800777e:	4401      	add	r1, r0
 8007780:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007784:	4313      	orrs	r3, r2
 8007786:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	015a      	lsls	r2, r3, #5
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	4413      	add	r3, r2
 8007790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007794:	691a      	ldr	r2, [r3, #16]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	8af9      	ldrh	r1, [r7, #22]
 800779c:	fb01 f303 	mul.w	r3, r1, r3
 80077a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077a4:	69b9      	ldr	r1, [r7, #24]
 80077a6:	0148      	lsls	r0, r1, #5
 80077a8:	69f9      	ldr	r1, [r7, #28]
 80077aa:	4401      	add	r1, r0
 80077ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80077b0:	4313      	orrs	r3, r2
 80077b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d10d      	bne.n	80077d6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d009      	beq.n	80077d6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	68d9      	ldr	r1, [r3, #12]
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	015a      	lsls	r2, r3, #5
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	4413      	add	r3, r2
 80077ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d2:	460a      	mov	r2, r1
 80077d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	78db      	ldrb	r3, [r3, #3]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d128      	bne.n	8007830 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d110      	bne.n	8007810 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	0151      	lsls	r1, r2, #5
 8007800:	69fa      	ldr	r2, [r7, #28]
 8007802:	440a      	add	r2, r1
 8007804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800780c:	6013      	str	r3, [r2, #0]
 800780e:	e00f      	b.n	8007830 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	0151      	lsls	r1, r2, #5
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	440a      	add	r2, r1
 8007826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800782a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800782e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	0151      	lsls	r1, r2, #5
 8007842:	69fa      	ldr	r2, [r7, #28]
 8007844:	440a      	add	r2, r1
 8007846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800784a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800784e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3720      	adds	r7, #32
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	1ff80000 	.word	0x1ff80000

08007860 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	785b      	ldrb	r3, [r3, #1]
 800787c:	2b01      	cmp	r3, #1
 800787e:	f040 80cd 	bne.w	8007a1c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d132      	bne.n	80078f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	0151      	lsls	r1, r2, #5
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	440a      	add	r2, r1
 80078a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	0151      	lsls	r1, r2, #5
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	440a      	add	r2, r1
 80078c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	0151      	lsls	r1, r2, #5
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	440a      	add	r2, r1
 80078e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078e8:	0cdb      	lsrs	r3, r3, #19
 80078ea:	04db      	lsls	r3, r3, #19
 80078ec:	6113      	str	r3, [r2, #16]
 80078ee:	e04e      	b.n	800798e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	0151      	lsls	r1, r2, #5
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	440a      	add	r2, r1
 8007906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800790a:	0cdb      	lsrs	r3, r3, #19
 800790c:	04db      	lsls	r3, r3, #19
 800790e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	4413      	add	r3, r2
 8007918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	0151      	lsls	r1, r2, #5
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	440a      	add	r2, r1
 8007926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800792a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800792e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007932:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	695a      	ldr	r2, [r3, #20]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	429a      	cmp	r2, r3
 800793e:	d903      	bls.n	8007948 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	689a      	ldr	r2, [r3, #8]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	015a      	lsls	r2, r3, #5
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	4413      	add	r3, r2
 8007950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	0151      	lsls	r1, r2, #5
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	440a      	add	r2, r1
 800795e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007962:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007966:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007974:	691a      	ldr	r2, [r3, #16]
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800797e:	6939      	ldr	r1, [r7, #16]
 8007980:	0148      	lsls	r0, r1, #5
 8007982:	6979      	ldr	r1, [r7, #20]
 8007984:	4401      	add	r1, r0
 8007986:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800798a:	4313      	orrs	r3, r2
 800798c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800798e:	79fb      	ldrb	r3, [r7, #7]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d11e      	bne.n	80079d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d009      	beq.n	80079b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a8:	461a      	mov	r2, r3
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	0151      	lsls	r1, r2, #5
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	440a      	add	r2, r1
 80079c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	e092      	b.n	8007af8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	0151      	lsls	r1, r2, #5
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	440a      	add	r2, r1
 80079e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d07e      	beq.n	8007af8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	f003 030f 	and.w	r3, r3, #15
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a10:	6979      	ldr	r1, [r7, #20]
 8007a12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a16:	4313      	orrs	r3, r2
 8007a18:	634b      	str	r3, [r1, #52]	; 0x34
 8007a1a:	e06d      	b.n	8007af8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	0151      	lsls	r1, r2, #5
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	440a      	add	r2, r1
 8007a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a36:	0cdb      	lsrs	r3, r3, #19
 8007a38:	04db      	lsls	r3, r3, #19
 8007a3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	0151      	lsls	r1, r2, #5
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	440a      	add	r2, r1
 8007a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a5e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	015a      	lsls	r2, r3, #5
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	0151      	lsls	r1, r2, #5
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	440a      	add	r2, r1
 8007a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a9c:	691a      	ldr	r2, [r3, #16]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007aa6:	6939      	ldr	r1, [r7, #16]
 8007aa8:	0148      	lsls	r0, r1, #5
 8007aaa:	6979      	ldr	r1, [r7, #20]
 8007aac:	4401      	add	r1, r0
 8007aae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d10d      	bne.n	8007ad8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d009      	beq.n	8007ad8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	68d9      	ldr	r1, [r3, #12]
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad4:	460a      	mov	r2, r1
 8007ad6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	015a      	lsls	r2, r3, #5
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	0151      	lsls	r1, r2, #5
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	440a      	add	r2, r1
 8007aee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007af2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007af6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	371c      	adds	r7, #28
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b089      	sub	sp, #36	; 0x24
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	60f8      	str	r0, [r7, #12]
 8007b0e:	60b9      	str	r1, [r7, #8]
 8007b10:	4611      	mov	r1, r2
 8007b12:	461a      	mov	r2, r3
 8007b14:	460b      	mov	r3, r1
 8007b16:	71fb      	strb	r3, [r7, #7]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007b24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d123      	bne.n	8007b74 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b2c:	88bb      	ldrh	r3, [r7, #4]
 8007b2e:	3303      	adds	r3, #3
 8007b30:	089b      	lsrs	r3, r3, #2
 8007b32:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b34:	2300      	movs	r3, #0
 8007b36:	61bb      	str	r3, [r7, #24]
 8007b38:	e018      	b.n	8007b6c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	031a      	lsls	r2, r3, #12
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b46:	461a      	mov	r2, r3
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	3301      	adds	r3, #1
 8007b52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	3301      	adds	r3, #1
 8007b58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	3301      	adds	r3, #1
 8007b64:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	61bb      	str	r3, [r7, #24]
 8007b6c:	69ba      	ldr	r2, [r7, #24]
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d3e2      	bcc.n	8007b3a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3724      	adds	r7, #36	; 0x24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b08b      	sub	sp, #44	; 0x2c
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b98:	88fb      	ldrh	r3, [r7, #6]
 8007b9a:	089b      	lsrs	r3, r3, #2
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ba0:	88fb      	ldrh	r3, [r7, #6]
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007ba8:	2300      	movs	r3, #0
 8007baa:	623b      	str	r3, [r7, #32]
 8007bac:	e014      	b.n	8007bd8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	601a      	str	r2, [r3, #0]
    pDest++;
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	3301      	adds	r3, #1
 8007bca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	3301      	adds	r3, #1
 8007bd0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	623b      	str	r3, [r7, #32]
 8007bd8:	6a3a      	ldr	r2, [r7, #32]
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d3e6      	bcc.n	8007bae <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007be0:	8bfb      	ldrh	r3, [r7, #30]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d01e      	beq.n	8007c24 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	f107 0310 	add.w	r3, r7, #16
 8007bf6:	6812      	ldr	r2, [r2, #0]
 8007bf8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	6a3b      	ldr	r3, [r7, #32]
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	00db      	lsls	r3, r3, #3
 8007c02:	fa22 f303 	lsr.w	r3, r2, r3
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0a:	701a      	strb	r2, [r3, #0]
      i++;
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	623b      	str	r3, [r7, #32]
      pDest++;
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	3301      	adds	r3, #1
 8007c16:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007c18:	8bfb      	ldrh	r3, [r7, #30]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c1e:	8bfb      	ldrh	r3, [r7, #30]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1ea      	bne.n	8007bfa <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	372c      	adds	r7, #44	; 0x2c
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b085      	sub	sp, #20
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	785b      	ldrb	r3, [r3, #1]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d12c      	bne.n	8007ca8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	db12      	blt.n	8007c86 <USB_EPSetStall+0x54>
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00f      	beq.n	8007c86 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	0151      	lsls	r1, r2, #5
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	440a      	add	r2, r1
 8007c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c84:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	0151      	lsls	r1, r2, #5
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	440a      	add	r2, r1
 8007c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ca0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ca4:	6013      	str	r3, [r2, #0]
 8007ca6:	e02b      	b.n	8007d00 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	015a      	lsls	r2, r3, #5
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	db12      	blt.n	8007ce0 <USB_EPSetStall+0xae>
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00f      	beq.n	8007ce0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	0151      	lsls	r1, r2, #5
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	440a      	add	r2, r1
 8007cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007cde:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	015a      	lsls	r2, r3, #5
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	0151      	lsls	r1, r2, #5
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	440a      	add	r2, r1
 8007cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007cfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b085      	sub	sp, #20
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	785b      	ldrb	r3, [r3, #1]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d128      	bne.n	8007d7c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	0151      	lsls	r1, r2, #5
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	440a      	add	r2, r1
 8007d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d48:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	78db      	ldrb	r3, [r3, #3]
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d003      	beq.n	8007d5a <USB_EPClearStall+0x4c>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	78db      	ldrb	r3, [r3, #3]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d138      	bne.n	8007dcc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	015a      	lsls	r2, r3, #5
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	4413      	add	r3, r2
 8007d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	0151      	lsls	r1, r2, #5
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	440a      	add	r2, r1
 8007d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d78:	6013      	str	r3, [r2, #0]
 8007d7a:	e027      	b.n	8007dcc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	0151      	lsls	r1, r2, #5
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	440a      	add	r2, r1
 8007d92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d9a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	78db      	ldrb	r3, [r3, #3]
 8007da0:	2b03      	cmp	r3, #3
 8007da2:	d003      	beq.n	8007dac <USB_EPClearStall+0x9e>
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	78db      	ldrb	r3, [r3, #3]
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d10f      	bne.n	8007dcc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	0151      	lsls	r1, r2, #5
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	440a      	add	r2, r1
 8007dc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dca:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b085      	sub	sp, #20
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	460b      	mov	r3, r1
 8007de4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007df8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007dfc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	78fb      	ldrb	r3, [r7, #3]
 8007e08:	011b      	lsls	r3, r3, #4
 8007e0a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007e0e:	68f9      	ldr	r1, [r7, #12]
 8007e10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e14:	4313      	orrs	r3, r2
 8007e16:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b085      	sub	sp, #20
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e40:	f023 0303 	bic.w	r3, r3, #3
 8007e44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e54:	f023 0302 	bic.w	r3, r3, #2
 8007e58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e82:	f023 0303 	bic.w	r3, r3, #3
 8007e86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e96:	f043 0302 	orr.w	r3, r3, #2
 8007e9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b085      	sub	sp, #20
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	0c1b      	lsrs	r3, r3, #16
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3714      	adds	r7, #20
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	4013      	ands	r3, r2
 8007f26:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	b29b      	uxth	r3, r3
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007f48:	78fb      	ldrb	r3, [r7, #3]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f5e:	695b      	ldr	r3, [r3, #20]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	4013      	ands	r3, r2
 8007f64:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f66:	68bb      	ldr	r3, [r7, #8]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f96:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007f98:	78fb      	ldrb	r3, [r7, #3]
 8007f9a:	f003 030f 	and.w	r3, r3, #15
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa4:	01db      	lsls	r3, r3, #7
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007fae:	78fb      	ldrb	r3, [r7, #3]
 8007fb0:	015a      	lsls	r2, r3, #5
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	371c      	adds	r7, #28
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008006:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800800a:	f023 0307 	bic.w	r3, r3, #7
 800800e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800801e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008022:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
	...

08008034 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	460b      	mov	r3, r1
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	333c      	adds	r3, #60	; 0x3c
 800804a:	3304      	adds	r3, #4
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	4a26      	ldr	r2, [pc, #152]	; (80080ec <USB_EP0_OutStart+0xb8>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d90a      	bls.n	800806e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008064:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008068:	d101      	bne.n	800806e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	e037      	b.n	80080de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008074:	461a      	mov	r2, r3
 8008076:	2300      	movs	r3, #0
 8008078:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008088:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800808c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800809c:	f043 0318 	orr.w	r3, r3, #24
 80080a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80080b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80080b6:	7afb      	ldrb	r3, [r7, #11]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d10f      	bne.n	80080dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c2:	461a      	mov	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80080da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	371c      	adds	r7, #28
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	4f54300a 	.word	0x4f54300a

080080f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080f8:	2300      	movs	r3, #0
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3301      	adds	r3, #1
 8008100:	60fb      	str	r3, [r7, #12]
 8008102:	4a13      	ldr	r2, [pc, #76]	; (8008150 <USB_CoreReset+0x60>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d901      	bls.n	800810c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	e01a      	b.n	8008142 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	daf3      	bge.n	80080fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	f043 0201 	orr.w	r2, r3, #1
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3301      	adds	r3, #1
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	4a09      	ldr	r2, [pc, #36]	; (8008150 <USB_CoreReset+0x60>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d901      	bls.n	8008134 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e006      	b.n	8008142 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	2b01      	cmp	r3, #1
 800813e:	d0f1      	beq.n	8008124 <USB_CoreReset+0x34>

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	00030d40 	.word	0x00030d40

08008154 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	460b      	mov	r3, r1
 800815e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008160:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008164:	f005 f85c 	bl	800d220 <USBD_static_malloc>
 8008168:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d105      	bne.n	800817c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008178:	2302      	movs	r3, #2
 800817a:	e066      	b.n	800824a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	7c1b      	ldrb	r3, [r3, #16]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d119      	bne.n	80081c0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800818c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008190:	2202      	movs	r2, #2
 8008192:	2181      	movs	r1, #129	; 0x81
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f004 ff20 	bl	800cfda <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80081a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081a4:	2202      	movs	r2, #2
 80081a6:	2101      	movs	r1, #1
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f004 ff16 	bl	800cfda <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2201      	movs	r2, #1
 80081b2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2210      	movs	r2, #16
 80081ba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80081be:	e016      	b.n	80081ee <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80081c0:	2340      	movs	r3, #64	; 0x40
 80081c2:	2202      	movs	r2, #2
 80081c4:	2181      	movs	r1, #129	; 0x81
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f004 ff07 	bl	800cfda <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80081d2:	2340      	movs	r3, #64	; 0x40
 80081d4:	2202      	movs	r2, #2
 80081d6:	2101      	movs	r1, #1
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f004 fefe 	bl	800cfda <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2210      	movs	r2, #16
 80081ea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80081ee:	2308      	movs	r3, #8
 80081f0:	2203      	movs	r2, #3
 80081f2:	2182      	movs	r1, #130	; 0x82
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f004 fef0 	bl	800cfda <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	7c1b      	ldrb	r3, [r3, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d109      	bne.n	8008238 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800822a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800822e:	2101      	movs	r1, #1
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f004 ffc1 	bl	800d1b8 <USBD_LL_PrepareReceive>
 8008236:	e007      	b.n	8008248 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800823e:	2340      	movs	r3, #64	; 0x40
 8008240:	2101      	movs	r1, #1
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f004 ffb8 	bl	800d1b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b082      	sub	sp, #8
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	460b      	mov	r3, r1
 800825c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800825e:	2181      	movs	r1, #129	; 0x81
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f004 fee0 	bl	800d026 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800826c:	2101      	movs	r1, #1
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f004 fed9 	bl	800d026 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800827c:	2182      	movs	r1, #130	; 0x82
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f004 fed1 	bl	800d026 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00e      	beq.n	80082bc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082ae:	4618      	mov	r0, r3
 80082b0:	f004 ffc4 	bl	800d23c <USBD_static_free>
    pdev->pClassData = NULL;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80082da:	2300      	movs	r3, #0
 80082dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e0af      	b.n	8008450 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d03f      	beq.n	800837c <USBD_CDC_Setup+0xb4>
 80082fc:	2b20      	cmp	r3, #32
 80082fe:	f040 809f 	bne.w	8008440 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	88db      	ldrh	r3, [r3, #6]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d02e      	beq.n	8008368 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	b25b      	sxtb	r3, r3
 8008310:	2b00      	cmp	r3, #0
 8008312:	da16      	bge.n	8008342 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008320:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008322:	683a      	ldr	r2, [r7, #0]
 8008324:	88d2      	ldrh	r2, [r2, #6]
 8008326:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	88db      	ldrh	r3, [r3, #6]
 800832c:	2b07      	cmp	r3, #7
 800832e:	bf28      	it	cs
 8008330:	2307      	movcs	r3, #7
 8008332:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	89fa      	ldrh	r2, [r7, #14]
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f001 fb19 	bl	8009972 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008340:	e085      	b.n	800844e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	785a      	ldrb	r2, [r3, #1]
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	88db      	ldrh	r3, [r3, #6]
 8008350:	b2da      	uxtb	r2, r3
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008358:	6939      	ldr	r1, [r7, #16]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	88db      	ldrh	r3, [r3, #6]
 800835e:	461a      	mov	r2, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 fb32 	bl	80099ca <USBD_CtlPrepareRx>
      break;
 8008366:	e072      	b.n	800844e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	7850      	ldrb	r0, [r2, #1]
 8008374:	2200      	movs	r2, #0
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	4798      	blx	r3
      break;
 800837a:	e068      	b.n	800844e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	785b      	ldrb	r3, [r3, #1]
 8008380:	2b0b      	cmp	r3, #11
 8008382:	d852      	bhi.n	800842a <USBD_CDC_Setup+0x162>
 8008384:	a201      	add	r2, pc, #4	; (adr r2, 800838c <USBD_CDC_Setup+0xc4>)
 8008386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838a:	bf00      	nop
 800838c:	080083bd 	.word	0x080083bd
 8008390:	08008439 	.word	0x08008439
 8008394:	0800842b 	.word	0x0800842b
 8008398:	0800842b 	.word	0x0800842b
 800839c:	0800842b 	.word	0x0800842b
 80083a0:	0800842b 	.word	0x0800842b
 80083a4:	0800842b 	.word	0x0800842b
 80083a8:	0800842b 	.word	0x0800842b
 80083ac:	0800842b 	.word	0x0800842b
 80083b0:	0800842b 	.word	0x0800842b
 80083b4:	080083e7 	.word	0x080083e7
 80083b8:	08008411 	.word	0x08008411
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d107      	bne.n	80083d8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80083c8:	f107 030a 	add.w	r3, r7, #10
 80083cc:	2202      	movs	r2, #2
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f001 face 	bl	8009972 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083d6:	e032      	b.n	800843e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f001 fa58 	bl	8009890 <USBD_CtlError>
            ret = USBD_FAIL;
 80083e0:	2303      	movs	r3, #3
 80083e2:	75fb      	strb	r3, [r7, #23]
          break;
 80083e4:	e02b      	b.n	800843e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d107      	bne.n	8008402 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80083f2:	f107 030d 	add.w	r3, r7, #13
 80083f6:	2201      	movs	r2, #1
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 fab9 	bl	8009972 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008400:	e01d      	b.n	800843e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f001 fa43 	bl	8009890 <USBD_CtlError>
            ret = USBD_FAIL;
 800840a:	2303      	movs	r3, #3
 800840c:	75fb      	strb	r3, [r7, #23]
          break;
 800840e:	e016      	b.n	800843e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b03      	cmp	r3, #3
 800841a:	d00f      	beq.n	800843c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f001 fa36 	bl	8009890 <USBD_CtlError>
            ret = USBD_FAIL;
 8008424:	2303      	movs	r3, #3
 8008426:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008428:	e008      	b.n	800843c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f001 fa2f 	bl	8009890 <USBD_CtlError>
          ret = USBD_FAIL;
 8008432:	2303      	movs	r3, #3
 8008434:	75fb      	strb	r3, [r7, #23]
          break;
 8008436:	e002      	b.n	800843e <USBD_CDC_Setup+0x176>
          break;
 8008438:	bf00      	nop
 800843a:	e008      	b.n	800844e <USBD_CDC_Setup+0x186>
          break;
 800843c:	bf00      	nop
      }
      break;
 800843e:	e006      	b.n	800844e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f001 fa24 	bl	8009890 <USBD_CtlError>
      ret = USBD_FAIL;
 8008448:	2303      	movs	r3, #3
 800844a:	75fb      	strb	r3, [r7, #23]
      break;
 800844c:	bf00      	nop
  }

  return (uint8_t)ret;
 800844e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	460b      	mov	r3, r1
 8008462:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800846a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008476:	2303      	movs	r3, #3
 8008478:	e04f      	b.n	800851a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008480:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008482:	78fa      	ldrb	r2, [r7, #3]
 8008484:	6879      	ldr	r1, [r7, #4]
 8008486:	4613      	mov	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	440b      	add	r3, r1
 8008490:	3318      	adds	r3, #24
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d029      	beq.n	80084ec <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008498:	78fa      	ldrb	r2, [r7, #3]
 800849a:	6879      	ldr	r1, [r7, #4]
 800849c:	4613      	mov	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	440b      	add	r3, r1
 80084a6:	3318      	adds	r3, #24
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	78f9      	ldrb	r1, [r7, #3]
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	460b      	mov	r3, r1
 80084b0:	00db      	lsls	r3, r3, #3
 80084b2:	1a5b      	subs	r3, r3, r1
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4403      	add	r3, r0
 80084b8:	3344      	adds	r3, #68	; 0x44
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80084c0:	fb03 f301 	mul.w	r3, r3, r1
 80084c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d110      	bne.n	80084ec <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80084ca:	78fa      	ldrb	r2, [r7, #3]
 80084cc:	6879      	ldr	r1, [r7, #4]
 80084ce:	4613      	mov	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	440b      	add	r3, r1
 80084d8:	3318      	adds	r3, #24
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80084de:	78f9      	ldrb	r1, [r7, #3]
 80084e0:	2300      	movs	r3, #0
 80084e2:	2200      	movs	r2, #0
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f004 fe46 	bl	800d176 <USBD_LL_Transmit>
 80084ea:	e015      	b.n	8008518 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00b      	beq.n	8008518 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008514:	78fa      	ldrb	r2, [r7, #3]
 8008516:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b084      	sub	sp, #16
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	460b      	mov	r3, r1
 800852c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008534:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008540:	2303      	movs	r3, #3
 8008542:	e015      	b.n	8008570 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008544:	78fb      	ldrb	r3, [r7, #3]
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f004 fe56 	bl	800d1fa <USBD_LL_GetRxDataSize>
 800854e:	4602      	mov	r2, r0
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800856a:	4611      	mov	r1, r2
 800856c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008586:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d101      	bne.n	8008592 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800858e:	2303      	movs	r3, #3
 8008590:	e01b      	b.n	80085ca <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d015      	beq.n	80085c8 <USBD_CDC_EP0_RxReady+0x50>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80085a2:	2bff      	cmp	r3, #255	; 0xff
 80085a4:	d010      	beq.n	80085c8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80085b4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80085bc:	b292      	uxth	r2, r2
 80085be:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	22ff      	movs	r2, #255	; 0xff
 80085c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
	...

080085d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2243      	movs	r2, #67	; 0x43
 80085e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80085e2:	4b03      	ldr	r3, [pc, #12]	; (80085f0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	20000094 	.word	0x20000094

080085f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2243      	movs	r2, #67	; 0x43
 8008600:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008602:	4b03      	ldr	r3, [pc, #12]	; (8008610 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008604:	4618      	mov	r0, r3
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	20000050 	.word	0x20000050

08008614 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2243      	movs	r2, #67	; 0x43
 8008620:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008622:	4b03      	ldr	r3, [pc, #12]	; (8008630 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008624:	4618      	mov	r0, r3
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr
 8008630:	200000d8 	.word	0x200000d8

08008634 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	220a      	movs	r2, #10
 8008640:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008642:	4b03      	ldr	r3, [pc, #12]	; (8008650 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	2000000c 	.word	0x2000000c

08008654 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d101      	bne.n	8008668 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008664:	2303      	movs	r3, #3
 8008666:	e004      	b.n	8008672 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	370c      	adds	r7, #12
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr

0800867e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800867e:	b480      	push	{r7}
 8008680:	b087      	sub	sp, #28
 8008682:	af00      	add	r7, sp, #0
 8008684:	60f8      	str	r0, [r7, #12]
 8008686:	60b9      	str	r1, [r7, #8]
 8008688:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008690:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008698:	2303      	movs	r3, #3
 800869a:	e008      	b.n	80086ae <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	371c      	adds	r7, #28
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b085      	sub	sp, #20
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086ca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e004      	b.n	80086e0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086fa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80086fc:	2301      	movs	r3, #1
 80086fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800870a:	2303      	movs	r3, #3
 800870c:	e01a      	b.n	8008744 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008714:	2b00      	cmp	r3, #0
 8008716:	d114      	bne.n	8008742 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	2201      	movs	r2, #1
 800871c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008736:	2181      	movs	r1, #129	; 0x81
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f004 fd1c 	bl	800d176 <USBD_LL_Transmit>

    ret = USBD_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008742:	7bfb      	ldrb	r3, [r7, #15]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800875a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008762:	2b00      	cmp	r3, #0
 8008764:	d101      	bne.n	800876a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008766:	2303      	movs	r3, #3
 8008768:	e016      	b.n	8008798 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	7c1b      	ldrb	r3, [r3, #16]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d109      	bne.n	8008786 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800877c:	2101      	movs	r1, #1
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f004 fd1a 	bl	800d1b8 <USBD_LL_PrepareReceive>
 8008784:	e007      	b.n	8008796 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800878c:	2340      	movs	r3, #64	; 0x40
 800878e:	2101      	movs	r1, #1
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f004 fd11 	bl	800d1b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	4613      	mov	r3, r2
 80087ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e01f      	b.n	80087f8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	79fa      	ldrb	r2, [r7, #7]
 80087ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f004 fb8d 	bl	800cf0c <USBD_LL_Init>
 80087f2:	4603      	mov	r3, r0
 80087f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800880a:	2300      	movs	r3, #0
 800880c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008814:	2303      	movs	r3, #3
 8008816:	e016      	b.n	8008846 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	683a      	ldr	r2, [r7, #0]
 800881c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00b      	beq.n	8008844 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008834:	f107 020e 	add.w	r2, r7, #14
 8008838:	4610      	mov	r0, r2
 800883a:	4798      	blx	r3
 800883c:	4602      	mov	r2, r0
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f004 fba4 	bl	800cfa4 <USBD_LL_Start>
 800885c:	4603      	mov	r3, r0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008866:	b480      	push	{r7}
 8008868:	b083      	sub	sp, #12
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	460b      	mov	r3, r1
 8008886:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008888:	2303      	movs	r3, #3
 800888a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008892:	2b00      	cmp	r3, #0
 8008894:	d009      	beq.n	80088aa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	78fa      	ldrb	r2, [r7, #3]
 80088a0:	4611      	mov	r1, r2
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	4798      	blx	r3
 80088a6:	4603      	mov	r3, r0
 80088a8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d007      	beq.n	80088da <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	78fa      	ldrb	r2, [r7, #3]
 80088d4:	4611      	mov	r1, r2
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	4798      	blx	r3
  }

  return USBD_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 ff90 	bl	800981c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800890a:	461a      	mov	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008918:	f003 031f 	and.w	r3, r3, #31
 800891c:	2b02      	cmp	r3, #2
 800891e:	d01a      	beq.n	8008956 <USBD_LL_SetupStage+0x72>
 8008920:	2b02      	cmp	r3, #2
 8008922:	d822      	bhi.n	800896a <USBD_LL_SetupStage+0x86>
 8008924:	2b00      	cmp	r3, #0
 8008926:	d002      	beq.n	800892e <USBD_LL_SetupStage+0x4a>
 8008928:	2b01      	cmp	r3, #1
 800892a:	d00a      	beq.n	8008942 <USBD_LL_SetupStage+0x5e>
 800892c:	e01d      	b.n	800896a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 fa62 	bl	8008e00 <USBD_StdDevReq>
 800893c:	4603      	mov	r3, r0
 800893e:	73fb      	strb	r3, [r7, #15]
      break;
 8008940:	e020      	b.n	8008984 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fac6 	bl	8008edc <USBD_StdItfReq>
 8008950:	4603      	mov	r3, r0
 8008952:	73fb      	strb	r3, [r7, #15]
      break;
 8008954:	e016      	b.n	8008984 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fb05 	bl	8008f6e <USBD_StdEPReq>
 8008964:	4603      	mov	r3, r0
 8008966:	73fb      	strb	r3, [r7, #15]
      break;
 8008968:	e00c      	b.n	8008984 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008970:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008974:	b2db      	uxtb	r3, r3
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f004 fb73 	bl	800d064 <USBD_LL_StallEP>
 800897e:	4603      	mov	r3, r0
 8008980:	73fb      	strb	r3, [r7, #15]
      break;
 8008982:	bf00      	nop
  }

  return ret;
 8008984:	7bfb      	ldrb	r3, [r7, #15]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b086      	sub	sp, #24
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	460b      	mov	r3, r1
 8008998:	607a      	str	r2, [r7, #4]
 800899a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800899c:	7afb      	ldrb	r3, [r7, #11]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d138      	bne.n	8008a14 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80089a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089b0:	2b03      	cmp	r3, #3
 80089b2:	d14a      	bne.n	8008a4a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	689a      	ldr	r2, [r3, #8]
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d913      	bls.n	80089e8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	689a      	ldr	r2, [r3, #8]
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	1ad2      	subs	r2, r2, r3
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	68da      	ldr	r2, [r3, #12]
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	4293      	cmp	r3, r2
 80089d8:	bf28      	it	cs
 80089da:	4613      	movcs	r3, r2
 80089dc:	461a      	mov	r2, r3
 80089de:	6879      	ldr	r1, [r7, #4]
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f001 f80f 	bl	8009a04 <USBD_CtlContinueRx>
 80089e6:	e030      	b.n	8008a4a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	d10b      	bne.n	8008a0c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d005      	beq.n	8008a0c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f001 f80a 	bl	8009a26 <USBD_CtlSendStatus>
 8008a12:	e01a      	b.n	8008a4a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b03      	cmp	r3, #3
 8008a1e:	d114      	bne.n	8008a4a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00e      	beq.n	8008a4a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	7afa      	ldrb	r2, [r7, #11]
 8008a36:	4611      	mov	r1, r2
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	4798      	blx	r3
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008a40:	7dfb      	ldrb	r3, [r7, #23]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	e000      	b.n	8008a4c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3718      	adds	r7, #24
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	607a      	str	r2, [r7, #4]
 8008a60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008a62:	7afb      	ldrb	r3, [r7, #11]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d16b      	bne.n	8008b40 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	3314      	adds	r3, #20
 8008a6c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d156      	bne.n	8008b26 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	689a      	ldr	r2, [r3, #8]
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d914      	bls.n	8008aae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	689a      	ldr	r2, [r3, #8]
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	1ad2      	subs	r2, r2, r3
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	461a      	mov	r2, r3
 8008a98:	6879      	ldr	r1, [r7, #4]
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f000 ff84 	bl	80099a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f004 fb86 	bl	800d1b8 <USBD_LL_PrepareReceive>
 8008aac:	e03b      	b.n	8008b26 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	68da      	ldr	r2, [r3, #12]
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d11c      	bne.n	8008af4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	685a      	ldr	r2, [r3, #4]
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d316      	bcc.n	8008af4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	685a      	ldr	r2, [r3, #4]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d20f      	bcs.n	8008af4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 ff65 	bl	80099a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	2200      	movs	r2, #0
 8008aea:	2100      	movs	r1, #0
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f004 fb63 	bl	800d1b8 <USBD_LL_PrepareReceive>
 8008af2:	e018      	b.n	8008b26 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b03      	cmp	r3, #3
 8008afe:	d10b      	bne.n	8008b18 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d005      	beq.n	8008b18 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b18:	2180      	movs	r1, #128	; 0x80
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f004 faa2 	bl	800d064 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 ff93 	bl	8009a4c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d122      	bne.n	8008b76 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f7ff fe98 	bl	8008866 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008b3e:	e01a      	b.n	8008b76 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d114      	bne.n	8008b76 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b52:	695b      	ldr	r3, [r3, #20]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00e      	beq.n	8008b76 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b5e:	695b      	ldr	r3, [r3, #20]
 8008b60:	7afa      	ldrb	r2, [r7, #11]
 8008b62:	4611      	mov	r1, r2
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	4798      	blx	r3
 8008b68:	4603      	mov	r3, r0
 8008b6a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008b72:	7dfb      	ldrb	r3, [r7, #23]
 8008b74:	e000      	b.n	8008b78 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3718      	adds	r7, #24
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d101      	bne.n	8008bb4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e02f      	b.n	8008c14 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00f      	beq.n	8008bde <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d009      	beq.n	8008bde <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	6852      	ldr	r2, [r2, #4]
 8008bd6:	b2d2      	uxtb	r2, r2
 8008bd8:	4611      	mov	r1, r2
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bde:	2340      	movs	r3, #64	; 0x40
 8008be0:	2200      	movs	r2, #0
 8008be2:	2100      	movs	r1, #0
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f004 f9f8 	bl	800cfda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2240      	movs	r2, #64	; 0x40
 8008bf6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bfa:	2340      	movs	r3, #64	; 0x40
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	2180      	movs	r1, #128	; 0x80
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f004 f9ea 	bl	800cfda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2240      	movs	r2, #64	; 0x40
 8008c10:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	78fa      	ldrb	r2, [r7, #3]
 8008c2c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c4a:	b2da      	uxtb	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2204      	movs	r2, #4
 8008c56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b04      	cmp	r3, #4
 8008c7a:	d106      	bne.n	8008c8a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e012      	b.n	8008cd4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	d10b      	bne.n	8008cd2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d005      	beq.n	8008cd2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e014      	b.n	8008d20 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	d10d      	bne.n	8008d1e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d007      	beq.n	8008d1e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	78fa      	ldrb	r2, [r7, #3]
 8008d18:	4611      	mov	r1, r2
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	460b      	mov	r3, r1
 8008d32:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e014      	b.n	8008d6c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d10d      	bne.n	8008d6a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d007      	beq.n	8008d6a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d62:	78fa      	ldrb	r2, [r7, #3]
 8008d64:	4611      	mov	r1, r2
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b082      	sub	sp, #8
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d009      	beq.n	8008db8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	6852      	ldr	r2, [r2, #4]
 8008db0:	b2d2      	uxtb	r2, r2
 8008db2:	4611      	mov	r1, r2
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	4798      	blx	r3
  }

  return USBD_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b087      	sub	sp, #28
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008de0:	8a3b      	ldrh	r3, [r7, #16]
 8008de2:	021b      	lsls	r3, r3, #8
 8008de4:	b21a      	sxth	r2, r3
 8008de6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	b21b      	sxth	r3, r3
 8008dee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008df0:	89fb      	ldrh	r3, [r7, #14]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	371c      	adds	r7, #28
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
	...

08008e00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e16:	2b40      	cmp	r3, #64	; 0x40
 8008e18:	d005      	beq.n	8008e26 <USBD_StdDevReq+0x26>
 8008e1a:	2b40      	cmp	r3, #64	; 0x40
 8008e1c:	d853      	bhi.n	8008ec6 <USBD_StdDevReq+0xc6>
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00b      	beq.n	8008e3a <USBD_StdDevReq+0x3a>
 8008e22:	2b20      	cmp	r3, #32
 8008e24:	d14f      	bne.n	8008ec6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	4798      	blx	r3
 8008e34:	4603      	mov	r3, r0
 8008e36:	73fb      	strb	r3, [r7, #15]
      break;
 8008e38:	e04a      	b.n	8008ed0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	785b      	ldrb	r3, [r3, #1]
 8008e3e:	2b09      	cmp	r3, #9
 8008e40:	d83b      	bhi.n	8008eba <USBD_StdDevReq+0xba>
 8008e42:	a201      	add	r2, pc, #4	; (adr r2, 8008e48 <USBD_StdDevReq+0x48>)
 8008e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e48:	08008e9d 	.word	0x08008e9d
 8008e4c:	08008eb1 	.word	0x08008eb1
 8008e50:	08008ebb 	.word	0x08008ebb
 8008e54:	08008ea7 	.word	0x08008ea7
 8008e58:	08008ebb 	.word	0x08008ebb
 8008e5c:	08008e7b 	.word	0x08008e7b
 8008e60:	08008e71 	.word	0x08008e71
 8008e64:	08008ebb 	.word	0x08008ebb
 8008e68:	08008e93 	.word	0x08008e93
 8008e6c:	08008e85 	.word	0x08008e85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f9de 	bl	8009234 <USBD_GetDescriptor>
          break;
 8008e78:	e024      	b.n	8008ec4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fb43 	bl	8009508 <USBD_SetAddress>
          break;
 8008e82:	e01f      	b.n	8008ec4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fb82 	bl	8009590 <USBD_SetConfig>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	73fb      	strb	r3, [r7, #15]
          break;
 8008e90:	e018      	b.n	8008ec4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fc21 	bl	80096dc <USBD_GetConfig>
          break;
 8008e9a:	e013      	b.n	8008ec4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fc52 	bl	8009748 <USBD_GetStatus>
          break;
 8008ea4:	e00e      	b.n	8008ec4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fc81 	bl	80097b0 <USBD_SetFeature>
          break;
 8008eae:	e009      	b.n	8008ec4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fc90 	bl	80097d8 <USBD_ClrFeature>
          break;
 8008eb8:	e004      	b.n	8008ec4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008eba:	6839      	ldr	r1, [r7, #0]
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 fce7 	bl	8009890 <USBD_CtlError>
          break;
 8008ec2:	bf00      	nop
      }
      break;
 8008ec4:	e004      	b.n	8008ed0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fce1 	bl	8009890 <USBD_CtlError>
      break;
 8008ece:	bf00      	nop
  }

  return ret;
 8008ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop

08008edc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ef2:	2b40      	cmp	r3, #64	; 0x40
 8008ef4:	d005      	beq.n	8008f02 <USBD_StdItfReq+0x26>
 8008ef6:	2b40      	cmp	r3, #64	; 0x40
 8008ef8:	d82f      	bhi.n	8008f5a <USBD_StdItfReq+0x7e>
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d001      	beq.n	8008f02 <USBD_StdItfReq+0x26>
 8008efe:	2b20      	cmp	r3, #32
 8008f00:	d12b      	bne.n	8008f5a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d81d      	bhi.n	8008f4c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	889b      	ldrh	r3, [r3, #4]
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d813      	bhi.n	8008f42 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	4798      	blx	r3
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	88db      	ldrh	r3, [r3, #6]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d110      	bne.n	8008f56 <USBD_StdItfReq+0x7a>
 8008f34:	7bfb      	ldrb	r3, [r7, #15]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10d      	bne.n	8008f56 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fd73 	bl	8009a26 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f40:	e009      	b.n	8008f56 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fca3 	bl	8009890 <USBD_CtlError>
          break;
 8008f4a:	e004      	b.n	8008f56 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fc9e 	bl	8009890 <USBD_CtlError>
          break;
 8008f54:	e000      	b.n	8008f58 <USBD_StdItfReq+0x7c>
          break;
 8008f56:	bf00      	nop
      }
      break;
 8008f58:	e004      	b.n	8008f64 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fc97 	bl	8009890 <USBD_CtlError>
      break;
 8008f62:	bf00      	nop
  }

  return ret;
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	889b      	ldrh	r3, [r3, #4]
 8008f80:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f8a:	2b40      	cmp	r3, #64	; 0x40
 8008f8c:	d007      	beq.n	8008f9e <USBD_StdEPReq+0x30>
 8008f8e:	2b40      	cmp	r3, #64	; 0x40
 8008f90:	f200 8145 	bhi.w	800921e <USBD_StdEPReq+0x2b0>
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00c      	beq.n	8008fb2 <USBD_StdEPReq+0x44>
 8008f98:	2b20      	cmp	r3, #32
 8008f9a:	f040 8140 	bne.w	800921e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	4798      	blx	r3
 8008fac:	4603      	mov	r3, r0
 8008fae:	73fb      	strb	r3, [r7, #15]
      break;
 8008fb0:	e13a      	b.n	8009228 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	785b      	ldrb	r3, [r3, #1]
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d007      	beq.n	8008fca <USBD_StdEPReq+0x5c>
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	f300 8129 	bgt.w	8009212 <USBD_StdEPReq+0x2a4>
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d07f      	beq.n	80090c4 <USBD_StdEPReq+0x156>
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d03c      	beq.n	8009042 <USBD_StdEPReq+0xd4>
 8008fc8:	e123      	b.n	8009212 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d002      	beq.n	8008fdc <USBD_StdEPReq+0x6e>
 8008fd6:	2b03      	cmp	r3, #3
 8008fd8:	d016      	beq.n	8009008 <USBD_StdEPReq+0x9a>
 8008fda:	e02c      	b.n	8009036 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00d      	beq.n	8008ffe <USBD_StdEPReq+0x90>
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	2b80      	cmp	r3, #128	; 0x80
 8008fe6:	d00a      	beq.n	8008ffe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
 8008fea:	4619      	mov	r1, r3
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f004 f839 	bl	800d064 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ff2:	2180      	movs	r1, #128	; 0x80
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f004 f835 	bl	800d064 <USBD_LL_StallEP>
 8008ffa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ffc:	e020      	b.n	8009040 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 fc45 	bl	8009890 <USBD_CtlError>
              break;
 8009006:	e01b      	b.n	8009040 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	885b      	ldrh	r3, [r3, #2]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10e      	bne.n	800902e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009010:	7bbb      	ldrb	r3, [r7, #14]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00b      	beq.n	800902e <USBD_StdEPReq+0xc0>
 8009016:	7bbb      	ldrb	r3, [r7, #14]
 8009018:	2b80      	cmp	r3, #128	; 0x80
 800901a:	d008      	beq.n	800902e <USBD_StdEPReq+0xc0>
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	88db      	ldrh	r3, [r3, #6]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d104      	bne.n	800902e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009024:	7bbb      	ldrb	r3, [r7, #14]
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f004 f81b 	bl	800d064 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fcf9 	bl	8009a26 <USBD_CtlSendStatus>

              break;
 8009034:	e004      	b.n	8009040 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fc29 	bl	8009890 <USBD_CtlError>
              break;
 800903e:	bf00      	nop
          }
          break;
 8009040:	e0ec      	b.n	800921c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009048:	b2db      	uxtb	r3, r3
 800904a:	2b02      	cmp	r3, #2
 800904c:	d002      	beq.n	8009054 <USBD_StdEPReq+0xe6>
 800904e:	2b03      	cmp	r3, #3
 8009050:	d016      	beq.n	8009080 <USBD_StdEPReq+0x112>
 8009052:	e030      	b.n	80090b6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009054:	7bbb      	ldrb	r3, [r7, #14]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00d      	beq.n	8009076 <USBD_StdEPReq+0x108>
 800905a:	7bbb      	ldrb	r3, [r7, #14]
 800905c:	2b80      	cmp	r3, #128	; 0x80
 800905e:	d00a      	beq.n	8009076 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009060:	7bbb      	ldrb	r3, [r7, #14]
 8009062:	4619      	mov	r1, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f003 fffd 	bl	800d064 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800906a:	2180      	movs	r1, #128	; 0x80
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f003 fff9 	bl	800d064 <USBD_LL_StallEP>
 8009072:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009074:	e025      	b.n	80090c2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009076:	6839      	ldr	r1, [r7, #0]
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fc09 	bl	8009890 <USBD_CtlError>
              break;
 800907e:	e020      	b.n	80090c2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	885b      	ldrh	r3, [r3, #2]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d11b      	bne.n	80090c0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009088:	7bbb      	ldrb	r3, [r7, #14]
 800908a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800908e:	2b00      	cmp	r3, #0
 8009090:	d004      	beq.n	800909c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f004 f803 	bl	800d0a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 fcc2 	bl	8009a26 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	4798      	blx	r3
 80090b0:	4603      	mov	r3, r0
 80090b2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80090b4:	e004      	b.n	80090c0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80090b6:	6839      	ldr	r1, [r7, #0]
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fbe9 	bl	8009890 <USBD_CtlError>
              break;
 80090be:	e000      	b.n	80090c2 <USBD_StdEPReq+0x154>
              break;
 80090c0:	bf00      	nop
          }
          break;
 80090c2:	e0ab      	b.n	800921c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d002      	beq.n	80090d6 <USBD_StdEPReq+0x168>
 80090d0:	2b03      	cmp	r3, #3
 80090d2:	d032      	beq.n	800913a <USBD_StdEPReq+0x1cc>
 80090d4:	e097      	b.n	8009206 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090d6:	7bbb      	ldrb	r3, [r7, #14]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d007      	beq.n	80090ec <USBD_StdEPReq+0x17e>
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
 80090de:	2b80      	cmp	r3, #128	; 0x80
 80090e0:	d004      	beq.n	80090ec <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fbd3 	bl	8009890 <USBD_CtlError>
                break;
 80090ea:	e091      	b.n	8009210 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	da0b      	bge.n	800910c <USBD_StdEPReq+0x19e>
 80090f4:	7bbb      	ldrb	r3, [r7, #14]
 80090f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090fa:	4613      	mov	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4413      	add	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	3310      	adds	r3, #16
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	4413      	add	r3, r2
 8009108:	3304      	adds	r3, #4
 800910a:	e00b      	b.n	8009124 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800910c:	7bbb      	ldrb	r3, [r7, #14]
 800910e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009112:	4613      	mov	r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	4413      	add	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	4413      	add	r3, r2
 8009122:	3304      	adds	r3, #4
 8009124:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	2200      	movs	r2, #0
 800912a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	2202      	movs	r2, #2
 8009130:	4619      	mov	r1, r3
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fc1d 	bl	8009972 <USBD_CtlSendData>
              break;
 8009138:	e06a      	b.n	8009210 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800913a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800913e:	2b00      	cmp	r3, #0
 8009140:	da11      	bge.n	8009166 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009142:	7bbb      	ldrb	r3, [r7, #14]
 8009144:	f003 020f 	and.w	r2, r3, #15
 8009148:	6879      	ldr	r1, [r7, #4]
 800914a:	4613      	mov	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4413      	add	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	440b      	add	r3, r1
 8009154:	3324      	adds	r3, #36	; 0x24
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d117      	bne.n	800918c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fb96 	bl	8009890 <USBD_CtlError>
                  break;
 8009164:	e054      	b.n	8009210 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009166:	7bbb      	ldrb	r3, [r7, #14]
 8009168:	f003 020f 	and.w	r2, r3, #15
 800916c:	6879      	ldr	r1, [r7, #4]
 800916e:	4613      	mov	r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4413      	add	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	440b      	add	r3, r1
 8009178:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800917c:	881b      	ldrh	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d104      	bne.n	800918c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fb83 	bl	8009890 <USBD_CtlError>
                  break;
 800918a:	e041      	b.n	8009210 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800918c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009190:	2b00      	cmp	r3, #0
 8009192:	da0b      	bge.n	80091ac <USBD_StdEPReq+0x23e>
 8009194:	7bbb      	ldrb	r3, [r7, #14]
 8009196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800919a:	4613      	mov	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4413      	add	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	3310      	adds	r3, #16
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	4413      	add	r3, r2
 80091a8:	3304      	adds	r3, #4
 80091aa:	e00b      	b.n	80091c4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091ac:	7bbb      	ldrb	r3, [r7, #14]
 80091ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091b2:	4613      	mov	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4413      	add	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	4413      	add	r3, r2
 80091c2:	3304      	adds	r3, #4
 80091c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80091c6:	7bbb      	ldrb	r3, [r7, #14]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d002      	beq.n	80091d2 <USBD_StdEPReq+0x264>
 80091cc:	7bbb      	ldrb	r3, [r7, #14]
 80091ce:	2b80      	cmp	r3, #128	; 0x80
 80091d0:	d103      	bne.n	80091da <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	2200      	movs	r2, #0
 80091d6:	601a      	str	r2, [r3, #0]
 80091d8:	e00e      	b.n	80091f8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80091da:	7bbb      	ldrb	r3, [r7, #14]
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f003 ff7e 	bl	800d0e0 <USBD_LL_IsStallEP>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d003      	beq.n	80091f2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	2201      	movs	r2, #1
 80091ee:	601a      	str	r2, [r3, #0]
 80091f0:	e002      	b.n	80091f8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2200      	movs	r2, #0
 80091f6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	2202      	movs	r2, #2
 80091fc:	4619      	mov	r1, r3
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fbb7 	bl	8009972 <USBD_CtlSendData>
              break;
 8009204:	e004      	b.n	8009210 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009206:	6839      	ldr	r1, [r7, #0]
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 fb41 	bl	8009890 <USBD_CtlError>
              break;
 800920e:	bf00      	nop
          }
          break;
 8009210:	e004      	b.n	800921c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fb3b 	bl	8009890 <USBD_CtlError>
          break;
 800921a:	bf00      	nop
      }
      break;
 800921c:	e004      	b.n	8009228 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800921e:	6839      	ldr	r1, [r7, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fb35 	bl	8009890 <USBD_CtlError>
      break;
 8009226:	bf00      	nop
  }

  return ret;
 8009228:	7bfb      	ldrb	r3, [r7, #15]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
	...

08009234 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800923e:	2300      	movs	r3, #0
 8009240:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009242:	2300      	movs	r3, #0
 8009244:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009246:	2300      	movs	r3, #0
 8009248:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	885b      	ldrh	r3, [r3, #2]
 800924e:	0a1b      	lsrs	r3, r3, #8
 8009250:	b29b      	uxth	r3, r3
 8009252:	3b01      	subs	r3, #1
 8009254:	2b06      	cmp	r3, #6
 8009256:	f200 8128 	bhi.w	80094aa <USBD_GetDescriptor+0x276>
 800925a:	a201      	add	r2, pc, #4	; (adr r2, 8009260 <USBD_GetDescriptor+0x2c>)
 800925c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009260:	0800927d 	.word	0x0800927d
 8009264:	08009295 	.word	0x08009295
 8009268:	080092d5 	.word	0x080092d5
 800926c:	080094ab 	.word	0x080094ab
 8009270:	080094ab 	.word	0x080094ab
 8009274:	0800944b 	.word	0x0800944b
 8009278:	08009477 	.word	0x08009477
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	7c12      	ldrb	r2, [r2, #16]
 8009288:	f107 0108 	add.w	r1, r7, #8
 800928c:	4610      	mov	r0, r2
 800928e:	4798      	blx	r3
 8009290:	60f8      	str	r0, [r7, #12]
      break;
 8009292:	e112      	b.n	80094ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	7c1b      	ldrb	r3, [r3, #16]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10d      	bne.n	80092b8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a4:	f107 0208 	add.w	r2, r7, #8
 80092a8:	4610      	mov	r0, r2
 80092aa:	4798      	blx	r3
 80092ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3301      	adds	r3, #1
 80092b2:	2202      	movs	r2, #2
 80092b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80092b6:	e100      	b.n	80094ba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c0:	f107 0208 	add.w	r2, r7, #8
 80092c4:	4610      	mov	r0, r2
 80092c6:	4798      	blx	r3
 80092c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	3301      	adds	r3, #1
 80092ce:	2202      	movs	r2, #2
 80092d0:	701a      	strb	r2, [r3, #0]
      break;
 80092d2:	e0f2      	b.n	80094ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	885b      	ldrh	r3, [r3, #2]
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b05      	cmp	r3, #5
 80092dc:	f200 80ac 	bhi.w	8009438 <USBD_GetDescriptor+0x204>
 80092e0:	a201      	add	r2, pc, #4	; (adr r2, 80092e8 <USBD_GetDescriptor+0xb4>)
 80092e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e6:	bf00      	nop
 80092e8:	08009301 	.word	0x08009301
 80092ec:	08009335 	.word	0x08009335
 80092f0:	08009369 	.word	0x08009369
 80092f4:	0800939d 	.word	0x0800939d
 80092f8:	080093d1 	.word	0x080093d1
 80092fc:	08009405 	.word	0x08009405
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00b      	beq.n	8009324 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	7c12      	ldrb	r2, [r2, #16]
 8009318:	f107 0108 	add.w	r1, r7, #8
 800931c:	4610      	mov	r0, r2
 800931e:	4798      	blx	r3
 8009320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009322:	e091      	b.n	8009448 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fab2 	bl	8009890 <USBD_CtlError>
            err++;
 800932c:	7afb      	ldrb	r3, [r7, #11]
 800932e:	3301      	adds	r3, #1
 8009330:	72fb      	strb	r3, [r7, #11]
          break;
 8009332:	e089      	b.n	8009448 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00b      	beq.n	8009358 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	7c12      	ldrb	r2, [r2, #16]
 800934c:	f107 0108 	add.w	r1, r7, #8
 8009350:	4610      	mov	r0, r2
 8009352:	4798      	blx	r3
 8009354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009356:	e077      	b.n	8009448 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009358:	6839      	ldr	r1, [r7, #0]
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 fa98 	bl	8009890 <USBD_CtlError>
            err++;
 8009360:	7afb      	ldrb	r3, [r7, #11]
 8009362:	3301      	adds	r3, #1
 8009364:	72fb      	strb	r3, [r7, #11]
          break;
 8009366:	e06f      	b.n	8009448 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00b      	beq.n	800938c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	7c12      	ldrb	r2, [r2, #16]
 8009380:	f107 0108 	add.w	r1, r7, #8
 8009384:	4610      	mov	r0, r2
 8009386:	4798      	blx	r3
 8009388:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800938a:	e05d      	b.n	8009448 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fa7e 	bl	8009890 <USBD_CtlError>
            err++;
 8009394:	7afb      	ldrb	r3, [r7, #11]
 8009396:	3301      	adds	r3, #1
 8009398:	72fb      	strb	r3, [r7, #11]
          break;
 800939a:	e055      	b.n	8009448 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00b      	beq.n	80093c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	7c12      	ldrb	r2, [r2, #16]
 80093b4:	f107 0108 	add.w	r1, r7, #8
 80093b8:	4610      	mov	r0, r2
 80093ba:	4798      	blx	r3
 80093bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093be:	e043      	b.n	8009448 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 fa64 	bl	8009890 <USBD_CtlError>
            err++;
 80093c8:	7afb      	ldrb	r3, [r7, #11]
 80093ca:	3301      	adds	r3, #1
 80093cc:	72fb      	strb	r3, [r7, #11]
          break;
 80093ce:	e03b      	b.n	8009448 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00b      	beq.n	80093f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	7c12      	ldrb	r2, [r2, #16]
 80093e8:	f107 0108 	add.w	r1, r7, #8
 80093ec:	4610      	mov	r0, r2
 80093ee:	4798      	blx	r3
 80093f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093f2:	e029      	b.n	8009448 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fa4a 	bl	8009890 <USBD_CtlError>
            err++;
 80093fc:	7afb      	ldrb	r3, [r7, #11]
 80093fe:	3301      	adds	r3, #1
 8009400:	72fb      	strb	r3, [r7, #11]
          break;
 8009402:	e021      	b.n	8009448 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800940a:	699b      	ldr	r3, [r3, #24]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d00b      	beq.n	8009428 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	7c12      	ldrb	r2, [r2, #16]
 800941c:	f107 0108 	add.w	r1, r7, #8
 8009420:	4610      	mov	r0, r2
 8009422:	4798      	blx	r3
 8009424:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009426:	e00f      	b.n	8009448 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009428:	6839      	ldr	r1, [r7, #0]
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fa30 	bl	8009890 <USBD_CtlError>
            err++;
 8009430:	7afb      	ldrb	r3, [r7, #11]
 8009432:	3301      	adds	r3, #1
 8009434:	72fb      	strb	r3, [r7, #11]
          break;
 8009436:	e007      	b.n	8009448 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009438:	6839      	ldr	r1, [r7, #0]
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fa28 	bl	8009890 <USBD_CtlError>
          err++;
 8009440:	7afb      	ldrb	r3, [r7, #11]
 8009442:	3301      	adds	r3, #1
 8009444:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009446:	bf00      	nop
      }
      break;
 8009448:	e037      	b.n	80094ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	7c1b      	ldrb	r3, [r3, #16]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d109      	bne.n	8009466 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800945a:	f107 0208 	add.w	r2, r7, #8
 800945e:	4610      	mov	r0, r2
 8009460:	4798      	blx	r3
 8009462:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009464:	e029      	b.n	80094ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fa11 	bl	8009890 <USBD_CtlError>
        err++;
 800946e:	7afb      	ldrb	r3, [r7, #11]
 8009470:	3301      	adds	r3, #1
 8009472:	72fb      	strb	r3, [r7, #11]
      break;
 8009474:	e021      	b.n	80094ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	7c1b      	ldrb	r3, [r3, #16]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10d      	bne.n	800949a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009486:	f107 0208 	add.w	r2, r7, #8
 800948a:	4610      	mov	r0, r2
 800948c:	4798      	blx	r3
 800948e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	3301      	adds	r3, #1
 8009494:	2207      	movs	r2, #7
 8009496:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009498:	e00f      	b.n	80094ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800949a:	6839      	ldr	r1, [r7, #0]
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 f9f7 	bl	8009890 <USBD_CtlError>
        err++;
 80094a2:	7afb      	ldrb	r3, [r7, #11]
 80094a4:	3301      	adds	r3, #1
 80094a6:	72fb      	strb	r3, [r7, #11]
      break;
 80094a8:	e007      	b.n	80094ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80094aa:	6839      	ldr	r1, [r7, #0]
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f9ef 	bl	8009890 <USBD_CtlError>
      err++;
 80094b2:	7afb      	ldrb	r3, [r7, #11]
 80094b4:	3301      	adds	r3, #1
 80094b6:	72fb      	strb	r3, [r7, #11]
      break;
 80094b8:	bf00      	nop
  }

  if (err != 0U)
 80094ba:	7afb      	ldrb	r3, [r7, #11]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d11e      	bne.n	80094fe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	88db      	ldrh	r3, [r3, #6]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d016      	beq.n	80094f6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80094c8:	893b      	ldrh	r3, [r7, #8]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00e      	beq.n	80094ec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	88da      	ldrh	r2, [r3, #6]
 80094d2:	893b      	ldrh	r3, [r7, #8]
 80094d4:	4293      	cmp	r3, r2
 80094d6:	bf28      	it	cs
 80094d8:	4613      	movcs	r3, r2
 80094da:	b29b      	uxth	r3, r3
 80094dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80094de:	893b      	ldrh	r3, [r7, #8]
 80094e0:	461a      	mov	r2, r3
 80094e2:	68f9      	ldr	r1, [r7, #12]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fa44 	bl	8009972 <USBD_CtlSendData>
 80094ea:	e009      	b.n	8009500 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f9ce 	bl	8009890 <USBD_CtlError>
 80094f4:	e004      	b.n	8009500 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fa95 	bl	8009a26 <USBD_CtlSendStatus>
 80094fc:	e000      	b.n	8009500 <USBD_GetDescriptor+0x2cc>
    return;
 80094fe:	bf00      	nop
  }
}
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop

08009508 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	889b      	ldrh	r3, [r3, #4]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d131      	bne.n	800957e <USBD_SetAddress+0x76>
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	88db      	ldrh	r3, [r3, #6]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d12d      	bne.n	800957e <USBD_SetAddress+0x76>
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	885b      	ldrh	r3, [r3, #2]
 8009526:	2b7f      	cmp	r3, #127	; 0x7f
 8009528:	d829      	bhi.n	800957e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	885b      	ldrh	r3, [r3, #2]
 800952e:	b2db      	uxtb	r3, r3
 8009530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009534:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b03      	cmp	r3, #3
 8009540:	d104      	bne.n	800954c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 f9a3 	bl	8009890 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800954a:	e01d      	b.n	8009588 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	7bfa      	ldrb	r2, [r7, #15]
 8009550:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009554:	7bfb      	ldrb	r3, [r7, #15]
 8009556:	4619      	mov	r1, r3
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f003 fded 	bl	800d138 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fa61 	bl	8009a26 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d004      	beq.n	8009574 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2202      	movs	r2, #2
 800956e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009572:	e009      	b.n	8009588 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800957c:	e004      	b.n	8009588 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800957e:	6839      	ldr	r1, [r7, #0]
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f985 	bl	8009890 <USBD_CtlError>
  }
}
 8009586:	bf00      	nop
 8009588:	bf00      	nop
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	885b      	ldrh	r3, [r3, #2]
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	4b4c      	ldr	r3, [pc, #304]	; (80096d8 <USBD_SetConfig+0x148>)
 80095a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80095a8:	4b4b      	ldr	r3, [pc, #300]	; (80096d8 <USBD_SetConfig+0x148>)
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d905      	bls.n	80095bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80095b0:	6839      	ldr	r1, [r7, #0]
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f96c 	bl	8009890 <USBD_CtlError>
    return USBD_FAIL;
 80095b8:	2303      	movs	r3, #3
 80095ba:	e088      	b.n	80096ce <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d002      	beq.n	80095ce <USBD_SetConfig+0x3e>
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	d025      	beq.n	8009618 <USBD_SetConfig+0x88>
 80095cc:	e071      	b.n	80096b2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80095ce:	4b42      	ldr	r3, [pc, #264]	; (80096d8 <USBD_SetConfig+0x148>)
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d01c      	beq.n	8009610 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80095d6:	4b40      	ldr	r3, [pc, #256]	; (80096d8 <USBD_SetConfig+0x148>)
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	461a      	mov	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095e0:	4b3d      	ldr	r3, [pc, #244]	; (80096d8 <USBD_SetConfig+0x148>)
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7ff f948 	bl	800887c <USBD_SetClassConfig>
 80095ec:	4603      	mov	r3, r0
 80095ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d004      	beq.n	8009600 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f949 	bl	8009890 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095fe:	e065      	b.n	80096cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 fa10 	bl	8009a26 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2203      	movs	r2, #3
 800960a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800960e:	e05d      	b.n	80096cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 fa08 	bl	8009a26 <USBD_CtlSendStatus>
      break;
 8009616:	e059      	b.n	80096cc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009618:	4b2f      	ldr	r3, [pc, #188]	; (80096d8 <USBD_SetConfig+0x148>)
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d112      	bne.n	8009646 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2202      	movs	r2, #2
 8009624:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009628:	4b2b      	ldr	r3, [pc, #172]	; (80096d8 <USBD_SetConfig+0x148>)
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	461a      	mov	r2, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009632:	4b29      	ldr	r3, [pc, #164]	; (80096d8 <USBD_SetConfig+0x148>)
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	4619      	mov	r1, r3
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7ff f93b 	bl	80088b4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 f9f1 	bl	8009a26 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009644:	e042      	b.n	80096cc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009646:	4b24      	ldr	r3, [pc, #144]	; (80096d8 <USBD_SetConfig+0x148>)
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	461a      	mov	r2, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	429a      	cmp	r2, r3
 8009652:	d02a      	beq.n	80096aa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	b2db      	uxtb	r3, r3
 800965a:	4619      	mov	r1, r3
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f7ff f929 	bl	80088b4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009662:	4b1d      	ldr	r3, [pc, #116]	; (80096d8 <USBD_SetConfig+0x148>)
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800966c:	4b1a      	ldr	r3, [pc, #104]	; (80096d8 <USBD_SetConfig+0x148>)
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	4619      	mov	r1, r3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f7ff f902 	bl	800887c <USBD_SetClassConfig>
 8009678:	4603      	mov	r3, r0
 800967a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800967c:	7bfb      	ldrb	r3, [r7, #15]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00f      	beq.n	80096a2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009682:	6839      	ldr	r1, [r7, #0]
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f903 	bl	8009890 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	b2db      	uxtb	r3, r3
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7ff f90e 	bl	80088b4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2202      	movs	r2, #2
 800969c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80096a0:	e014      	b.n	80096cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f9bf 	bl	8009a26 <USBD_CtlSendStatus>
      break;
 80096a8:	e010      	b.n	80096cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f9bb 	bl	8009a26 <USBD_CtlSendStatus>
      break;
 80096b0:	e00c      	b.n	80096cc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80096b2:	6839      	ldr	r1, [r7, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f8eb 	bl	8009890 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80096ba:	4b07      	ldr	r3, [pc, #28]	; (80096d8 <USBD_SetConfig+0x148>)
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	4619      	mov	r1, r3
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7ff f8f7 	bl	80088b4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80096c6:	2303      	movs	r3, #3
 80096c8:	73fb      	strb	r3, [r7, #15]
      break;
 80096ca:	bf00      	nop
  }

  return ret;
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	20000218 	.word	0x20000218

080096dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	88db      	ldrh	r3, [r3, #6]
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d004      	beq.n	80096f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80096ee:	6839      	ldr	r1, [r7, #0]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 f8cd 	bl	8009890 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80096f6:	e023      	b.n	8009740 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	2b02      	cmp	r3, #2
 8009702:	dc02      	bgt.n	800970a <USBD_GetConfig+0x2e>
 8009704:	2b00      	cmp	r3, #0
 8009706:	dc03      	bgt.n	8009710 <USBD_GetConfig+0x34>
 8009708:	e015      	b.n	8009736 <USBD_GetConfig+0x5a>
 800970a:	2b03      	cmp	r3, #3
 800970c:	d00b      	beq.n	8009726 <USBD_GetConfig+0x4a>
 800970e:	e012      	b.n	8009736 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	3308      	adds	r3, #8
 800971a:	2201      	movs	r2, #1
 800971c:	4619      	mov	r1, r3
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f927 	bl	8009972 <USBD_CtlSendData>
        break;
 8009724:	e00c      	b.n	8009740 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	3304      	adds	r3, #4
 800972a:	2201      	movs	r2, #1
 800972c:	4619      	mov	r1, r3
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f91f 	bl	8009972 <USBD_CtlSendData>
        break;
 8009734:	e004      	b.n	8009740 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f8a9 	bl	8009890 <USBD_CtlError>
        break;
 800973e:	bf00      	nop
}
 8009740:	bf00      	nop
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009758:	b2db      	uxtb	r3, r3
 800975a:	3b01      	subs	r3, #1
 800975c:	2b02      	cmp	r3, #2
 800975e:	d81e      	bhi.n	800979e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	88db      	ldrh	r3, [r3, #6]
 8009764:	2b02      	cmp	r3, #2
 8009766:	d004      	beq.n	8009772 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009768:	6839      	ldr	r1, [r7, #0]
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 f890 	bl	8009890 <USBD_CtlError>
        break;
 8009770:	e01a      	b.n	80097a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2201      	movs	r2, #1
 8009776:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800977e:	2b00      	cmp	r3, #0
 8009780:	d005      	beq.n	800978e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	f043 0202 	orr.w	r2, r3, #2
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	330c      	adds	r3, #12
 8009792:	2202      	movs	r2, #2
 8009794:	4619      	mov	r1, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f8eb 	bl	8009972 <USBD_CtlSendData>
      break;
 800979c:	e004      	b.n	80097a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 f875 	bl	8009890 <USBD_CtlError>
      break;
 80097a6:	bf00      	nop
  }
}
 80097a8:	bf00      	nop
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	885b      	ldrh	r3, [r3, #2]
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d106      	bne.n	80097d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f92b 	bl	8009a26 <USBD_CtlSendStatus>
  }
}
 80097d0:	bf00      	nop
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	3b01      	subs	r3, #1
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d80b      	bhi.n	8009808 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	885b      	ldrh	r3, [r3, #2]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d10c      	bne.n	8009812 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f910 	bl	8009a26 <USBD_CtlSendStatus>
      }
      break;
 8009806:	e004      	b.n	8009812 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009808:	6839      	ldr	r1, [r7, #0]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 f840 	bl	8009890 <USBD_CtlError>
      break;
 8009810:	e000      	b.n	8009814 <USBD_ClrFeature+0x3c>
      break;
 8009812:	bf00      	nop
  }
}
 8009814:	bf00      	nop
 8009816:	3708      	adds	r7, #8
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	781a      	ldrb	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	3301      	adds	r3, #1
 8009836:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	781a      	ldrb	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	3301      	adds	r3, #1
 8009844:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f7ff fabb 	bl	8008dc2 <SWAPBYTE>
 800984c:	4603      	mov	r3, r0
 800984e:	461a      	mov	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	3301      	adds	r3, #1
 8009858:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	3301      	adds	r3, #1
 800985e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f7ff faae 	bl	8008dc2 <SWAPBYTE>
 8009866:	4603      	mov	r3, r0
 8009868:	461a      	mov	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	3301      	adds	r3, #1
 8009872:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	3301      	adds	r3, #1
 8009878:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f7ff faa1 	bl	8008dc2 <SWAPBYTE>
 8009880:	4603      	mov	r3, r0
 8009882:	461a      	mov	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	80da      	strh	r2, [r3, #6]
}
 8009888:	bf00      	nop
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800989a:	2180      	movs	r1, #128	; 0x80
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f003 fbe1 	bl	800d064 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80098a2:	2100      	movs	r1, #0
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f003 fbdd 	bl	800d064 <USBD_LL_StallEP>
}
 80098aa:	bf00      	nop
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b086      	sub	sp, #24
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	60f8      	str	r0, [r7, #12]
 80098ba:	60b9      	str	r1, [r7, #8]
 80098bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80098be:	2300      	movs	r3, #0
 80098c0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d036      	beq.n	8009936 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80098cc:	6938      	ldr	r0, [r7, #16]
 80098ce:	f000 f836 	bl	800993e <USBD_GetLen>
 80098d2:	4603      	mov	r3, r0
 80098d4:	3301      	adds	r3, #1
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	005b      	lsls	r3, r3, #1
 80098da:	b29a      	uxth	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80098e0:	7dfb      	ldrb	r3, [r7, #23]
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	4413      	add	r3, r2
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	7812      	ldrb	r2, [r2, #0]
 80098ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80098ec:	7dfb      	ldrb	r3, [r7, #23]
 80098ee:	3301      	adds	r3, #1
 80098f0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	4413      	add	r3, r2
 80098f8:	2203      	movs	r2, #3
 80098fa:	701a      	strb	r2, [r3, #0]
  idx++;
 80098fc:	7dfb      	ldrb	r3, [r7, #23]
 80098fe:	3301      	adds	r3, #1
 8009900:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009902:	e013      	b.n	800992c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009904:	7dfb      	ldrb	r3, [r7, #23]
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	4413      	add	r3, r2
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	7812      	ldrb	r2, [r2, #0]
 800990e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	3301      	adds	r3, #1
 8009914:	613b      	str	r3, [r7, #16]
    idx++;
 8009916:	7dfb      	ldrb	r3, [r7, #23]
 8009918:	3301      	adds	r3, #1
 800991a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800991c:	7dfb      	ldrb	r3, [r7, #23]
 800991e:	68ba      	ldr	r2, [r7, #8]
 8009920:	4413      	add	r3, r2
 8009922:	2200      	movs	r2, #0
 8009924:	701a      	strb	r2, [r3, #0]
    idx++;
 8009926:	7dfb      	ldrb	r3, [r7, #23]
 8009928:	3301      	adds	r3, #1
 800992a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e7      	bne.n	8009904 <USBD_GetString+0x52>
 8009934:	e000      	b.n	8009938 <USBD_GetString+0x86>
    return;
 8009936:	bf00      	nop
  }
}
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800993e:	b480      	push	{r7}
 8009940:	b085      	sub	sp, #20
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800994e:	e005      	b.n	800995c <USBD_GetLen+0x1e>
  {
    len++;
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	3301      	adds	r3, #1
 8009954:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	3301      	adds	r3, #1
 800995a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1f5      	bne.n	8009950 <USBD_GetLen+0x12>
  }

  return len;
 8009964:	7bfb      	ldrb	r3, [r7, #15]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b084      	sub	sp, #16
 8009976:	af00      	add	r7, sp, #0
 8009978:	60f8      	str	r0, [r7, #12]
 800997a:	60b9      	str	r1, [r7, #8]
 800997c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2202      	movs	r2, #2
 8009982:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	2100      	movs	r1, #0
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f003 fbec 	bl	800d176 <USBD_LL_Transmit>

  return USBD_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	68ba      	ldr	r2, [r7, #8]
 80099b8:	2100      	movs	r1, #0
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f003 fbdb 	bl	800d176 <USBD_LL_Transmit>

  return USBD_OK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b084      	sub	sp, #16
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	60f8      	str	r0, [r7, #12]
 80099d2:	60b9      	str	r1, [r7, #8]
 80099d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2203      	movs	r2, #3
 80099da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	68ba      	ldr	r2, [r7, #8]
 80099f2:	2100      	movs	r1, #0
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f003 fbdf 	bl	800d1b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	2100      	movs	r1, #0
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f003 fbce 	bl	800d1b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b082      	sub	sp, #8
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2204      	movs	r2, #4
 8009a32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a36:	2300      	movs	r3, #0
 8009a38:	2200      	movs	r2, #0
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f003 fb9a 	bl	800d176 <USBD_LL_Transmit>

  return USBD_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2205      	movs	r2, #5
 8009a58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	2200      	movs	r2, #0
 8009a60:	2100      	movs	r1, #0
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f003 fba8 	bl	800d1b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
	...

08009a74 <__NVIC_SetPriority>:
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	6039      	str	r1, [r7, #0]
 8009a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	db0a      	blt.n	8009a9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	490c      	ldr	r1, [pc, #48]	; (8009ac0 <__NVIC_SetPriority+0x4c>)
 8009a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a92:	0112      	lsls	r2, r2, #4
 8009a94:	b2d2      	uxtb	r2, r2
 8009a96:	440b      	add	r3, r1
 8009a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009a9c:	e00a      	b.n	8009ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	b2da      	uxtb	r2, r3
 8009aa2:	4908      	ldr	r1, [pc, #32]	; (8009ac4 <__NVIC_SetPriority+0x50>)
 8009aa4:	79fb      	ldrb	r3, [r7, #7]
 8009aa6:	f003 030f 	and.w	r3, r3, #15
 8009aaa:	3b04      	subs	r3, #4
 8009aac:	0112      	lsls	r2, r2, #4
 8009aae:	b2d2      	uxtb	r2, r2
 8009ab0:	440b      	add	r3, r1
 8009ab2:	761a      	strb	r2, [r3, #24]
}
 8009ab4:	bf00      	nop
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr
 8009ac0:	e000e100 	.word	0xe000e100
 8009ac4:	e000ed00 	.word	0xe000ed00

08009ac8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009acc:	4b05      	ldr	r3, [pc, #20]	; (8009ae4 <SysTick_Handler+0x1c>)
 8009ace:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009ad0:	f001 fdd8 	bl	800b684 <xTaskGetSchedulerState>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d001      	beq.n	8009ade <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009ada:	f002 fbbd 	bl	800c258 <xPortSysTickHandler>
  }
}
 8009ade:	bf00      	nop
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	e000e010 	.word	0xe000e010

08009ae8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009aec:	2100      	movs	r1, #0
 8009aee:	f06f 0004 	mvn.w	r0, #4
 8009af2:	f7ff ffbf 	bl	8009a74 <__NVIC_SetPriority>
#endif
}
 8009af6:	bf00      	nop
 8009af8:	bd80      	pop	{r7, pc}
	...

08009afc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b02:	f3ef 8305 	mrs	r3, IPSR
 8009b06:	603b      	str	r3, [r7, #0]
  return(result);
 8009b08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009b0e:	f06f 0305 	mvn.w	r3, #5
 8009b12:	607b      	str	r3, [r7, #4]
 8009b14:	e00c      	b.n	8009b30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009b16:	4b0a      	ldr	r3, [pc, #40]	; (8009b40 <osKernelInitialize+0x44>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d105      	bne.n	8009b2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009b1e:	4b08      	ldr	r3, [pc, #32]	; (8009b40 <osKernelInitialize+0x44>)
 8009b20:	2201      	movs	r2, #1
 8009b22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	607b      	str	r3, [r7, #4]
 8009b28:	e002      	b.n	8009b30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b30:	687b      	ldr	r3, [r7, #4]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	2000021c 	.word	0x2000021c

08009b44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b4a:	f3ef 8305 	mrs	r3, IPSR
 8009b4e:	603b      	str	r3, [r7, #0]
  return(result);
 8009b50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d003      	beq.n	8009b5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009b56:	f06f 0305 	mvn.w	r3, #5
 8009b5a:	607b      	str	r3, [r7, #4]
 8009b5c:	e010      	b.n	8009b80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009b5e:	4b0b      	ldr	r3, [pc, #44]	; (8009b8c <osKernelStart+0x48>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d109      	bne.n	8009b7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b66:	f7ff ffbf 	bl	8009ae8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b6a:	4b08      	ldr	r3, [pc, #32]	; (8009b8c <osKernelStart+0x48>)
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b70:	f001 f92e 	bl	800add0 <vTaskStartScheduler>
      stat = osOK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	607b      	str	r3, [r7, #4]
 8009b78:	e002      	b.n	8009b80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b80:	687b      	ldr	r3, [r7, #4]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3708      	adds	r7, #8
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	2000021c 	.word	0x2000021c

08009b90 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b96:	f3ef 8305 	mrs	r3, IPSR
 8009b9a:	603b      	str	r3, [r7, #0]
  return(result);
 8009b9c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d003      	beq.n	8009baa <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009ba2:	f001 fa37 	bl	800b014 <xTaskGetTickCountFromISR>
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	e002      	b.n	8009bb0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009baa:	f001 fa23 	bl	800aff4 <xTaskGetTickCount>
 8009bae:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009bb0:	687b      	ldr	r3, [r7, #4]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8009bba:	b480      	push	{r7}
 8009bbc:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8009bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b08e      	sub	sp, #56	; 0x38
 8009bd0:	af04      	add	r7, sp, #16
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bdc:	f3ef 8305 	mrs	r3, IPSR
 8009be0:	617b      	str	r3, [r7, #20]
  return(result);
 8009be2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d17e      	bne.n	8009ce6 <osThreadNew+0x11a>
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d07b      	beq.n	8009ce6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009bee:	2380      	movs	r3, #128	; 0x80
 8009bf0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009bf2:	2318      	movs	r3, #24
 8009bf4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8009bfe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d045      	beq.n	8009c92 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d002      	beq.n	8009c14 <osThreadNew+0x48>
        name = attr->name;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d002      	beq.n	8009c22 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d008      	beq.n	8009c3a <osThreadNew+0x6e>
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	2b38      	cmp	r3, #56	; 0x38
 8009c2c:	d805      	bhi.n	8009c3a <osThreadNew+0x6e>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	f003 0301 	and.w	r3, r3, #1
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <osThreadNew+0x72>
        return (NULL);
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	e054      	b.n	8009ce8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	695b      	ldr	r3, [r3, #20]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d003      	beq.n	8009c4e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	695b      	ldr	r3, [r3, #20]
 8009c4a:	089b      	lsrs	r3, r3, #2
 8009c4c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00e      	beq.n	8009c74 <osThreadNew+0xa8>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	2b5b      	cmp	r3, #91	; 0x5b
 8009c5c:	d90a      	bls.n	8009c74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d006      	beq.n	8009c74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	695b      	ldr	r3, [r3, #20]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d002      	beq.n	8009c74 <osThreadNew+0xa8>
        mem = 1;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	61bb      	str	r3, [r7, #24]
 8009c72:	e010      	b.n	8009c96 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10c      	bne.n	8009c96 <osThreadNew+0xca>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d108      	bne.n	8009c96 <osThreadNew+0xca>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d104      	bne.n	8009c96 <osThreadNew+0xca>
          mem = 0;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	61bb      	str	r3, [r7, #24]
 8009c90:	e001      	b.n	8009c96 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d110      	bne.n	8009cbe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ca4:	9202      	str	r2, [sp, #8]
 8009ca6:	9301      	str	r3, [sp, #4]
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	6a3a      	ldr	r2, [r7, #32]
 8009cb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f000 fe38 	bl	800a928 <xTaskCreateStatic>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	613b      	str	r3, [r7, #16]
 8009cbc:	e013      	b.n	8009ce6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d110      	bne.n	8009ce6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009cc4:	6a3b      	ldr	r3, [r7, #32]
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	f107 0310 	add.w	r3, r7, #16
 8009ccc:	9301      	str	r3, [sp, #4]
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f000 fe83 	bl	800a9e2 <xTaskCreate>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d001      	beq.n	8009ce6 <osThreadNew+0x11a>
            hTask = NULL;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009ce6:	693b      	ldr	r3, [r7, #16]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3728      	adds	r7, #40	; 0x28
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cf8:	f3ef 8305 	mrs	r3, IPSR
 8009cfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cfe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d003      	beq.n	8009d0c <osDelay+0x1c>
    stat = osErrorISR;
 8009d04:	f06f 0305 	mvn.w	r3, #5
 8009d08:	60fb      	str	r3, [r7, #12]
 8009d0a:	e007      	b.n	8009d1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d002      	beq.n	8009d1c <osDelay+0x2c>
      vTaskDelay(ticks);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f001 f826 	bl	800ad68 <vTaskDelay>
    }
  }

  return (stat);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b086      	sub	sp, #24
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d2e:	f3ef 8305 	mrs	r3, IPSR
 8009d32:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d34:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d003      	beq.n	8009d42 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8009d3a:	f06f 0305 	mvn.w	r3, #5
 8009d3e:	617b      	str	r3, [r7, #20]
 8009d40:	e019      	b.n	8009d76 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8009d42:	2300      	movs	r3, #0
 8009d44:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8009d46:	f001 f955 	bl	800aff4 <xTaskGetTickCount>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d009      	beq.n	8009d70 <osDelayUntil+0x4a>
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	db06      	blt.n	8009d70 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8009d62:	f107 0308 	add.w	r3, r7, #8
 8009d66:	6939      	ldr	r1, [r7, #16]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f000 ff7f 	bl	800ac6c <vTaskDelayUntil>
 8009d6e:	e002      	b.n	8009d76 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009d70:	f06f 0303 	mvn.w	r3, #3
 8009d74:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009d76:	697b      	ldr	r3, [r7, #20]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3718      	adds	r7, #24
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4a07      	ldr	r2, [pc, #28]	; (8009dac <vApplicationGetIdleTaskMemory+0x2c>)
 8009d90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	4a06      	ldr	r2, [pc, #24]	; (8009db0 <vApplicationGetIdleTaskMemory+0x30>)
 8009d96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2280      	movs	r2, #128	; 0x80
 8009d9c:	601a      	str	r2, [r3, #0]
}
 8009d9e:	bf00      	nop
 8009da0:	3714      	adds	r7, #20
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop
 8009dac:	20000220 	.word	0x20000220
 8009db0:	2000027c 	.word	0x2000027c

08009db4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4a07      	ldr	r2, [pc, #28]	; (8009de0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009dc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	4a06      	ldr	r2, [pc, #24]	; (8009de4 <vApplicationGetTimerTaskMemory+0x30>)
 8009dca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009dd2:	601a      	str	r2, [r3, #0]
}
 8009dd4:	bf00      	nop
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	2000047c 	.word	0x2000047c
 8009de4:	200004d8 	.word	0x200004d8

08009de8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f103 0208 	add.w	r2, r3, #8
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8009e00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f103 0208 	add.w	r2, r3, #8
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f103 0208 	add.w	r2, r3, #8
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e36:	bf00      	nop
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr

08009e42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e42:	b480      	push	{r7}
 8009e44:	b085      	sub	sp, #20
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
 8009e4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	689a      	ldr	r2, [r3, #8]
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	683a      	ldr	r2, [r7, #0]
 8009e66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	683a      	ldr	r2, [r7, #0]
 8009e6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	1c5a      	adds	r2, r3, #1
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	601a      	str	r2, [r3, #0]
}
 8009e7e:	bf00      	nop
 8009e80:	3714      	adds	r7, #20
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	b085      	sub	sp, #20
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
 8009e92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea0:	d103      	bne.n	8009eaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	60fb      	str	r3, [r7, #12]
 8009ea8:	e00c      	b.n	8009ec4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	3308      	adds	r3, #8
 8009eae:	60fb      	str	r3, [r7, #12]
 8009eb0:	e002      	b.n	8009eb8 <vListInsert+0x2e>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	60fb      	str	r3, [r7, #12]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d2f6      	bcs.n	8009eb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	685a      	ldr	r2, [r3, #4]
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	683a      	ldr	r2, [r7, #0]
 8009ed2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	68fa      	ldr	r2, [r7, #12]
 8009ed8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	1c5a      	adds	r2, r3, #1
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	601a      	str	r2, [r3, #0]
}
 8009ef0:	bf00      	nop
 8009ef2:	3714      	adds	r7, #20
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	6892      	ldr	r2, [r2, #8]
 8009f12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	6852      	ldr	r2, [r2, #4]
 8009f1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d103      	bne.n	8009f30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	689a      	ldr	r2, [r3, #8]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	1e5a      	subs	r2, r3, #1
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10a      	bne.n	8009f7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f68:	f383 8811 	msr	BASEPRI, r3
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	f3bf 8f4f 	dsb	sy
 8009f74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f76:	bf00      	nop
 8009f78:	e7fe      	b.n	8009f78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f7a:	f002 f8db 	bl	800c134 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f86:	68f9      	ldr	r1, [r7, #12]
 8009f88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f8a:	fb01 f303 	mul.w	r3, r1, r3
 8009f8e:	441a      	add	r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009faa:	3b01      	subs	r3, #1
 8009fac:	68f9      	ldr	r1, [r7, #12]
 8009fae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fb0:	fb01 f303 	mul.w	r3, r1, r3
 8009fb4:	441a      	add	r2, r3
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	22ff      	movs	r2, #255	; 0xff
 8009fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	22ff      	movs	r2, #255	; 0xff
 8009fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d114      	bne.n	8009ffa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d01a      	beq.n	800a00e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	3310      	adds	r3, #16
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f001 f993 	bl	800b308 <xTaskRemoveFromEventList>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d012      	beq.n	800a00e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009fe8:	4b0c      	ldr	r3, [pc, #48]	; (800a01c <xQueueGenericReset+0xcc>)
 8009fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fee:	601a      	str	r2, [r3, #0]
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	e009      	b.n	800a00e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	3310      	adds	r3, #16
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7ff fef2 	bl	8009de8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	3324      	adds	r3, #36	; 0x24
 800a008:	4618      	mov	r0, r3
 800a00a:	f7ff feed 	bl	8009de8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a00e:	f002 f8c1 	bl	800c194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a012:	2301      	movs	r3, #1
}
 800a014:	4618      	mov	r0, r3
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	e000ed04 	.word	0xe000ed04

0800a020 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a020:	b580      	push	{r7, lr}
 800a022:	b08e      	sub	sp, #56	; 0x38
 800a024:	af02      	add	r7, sp, #8
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
 800a02c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10a      	bne.n	800a04a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a038:	f383 8811 	msr	BASEPRI, r3
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a046:	bf00      	nop
 800a048:	e7fe      	b.n	800a048 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10a      	bne.n	800a066 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a062:	bf00      	nop
 800a064:	e7fe      	b.n	800a064 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d002      	beq.n	800a072 <xQueueGenericCreateStatic+0x52>
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d001      	beq.n	800a076 <xQueueGenericCreateStatic+0x56>
 800a072:	2301      	movs	r3, #1
 800a074:	e000      	b.n	800a078 <xQueueGenericCreateStatic+0x58>
 800a076:	2300      	movs	r3, #0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10a      	bne.n	800a092 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	623b      	str	r3, [r7, #32]
}
 800a08e:	bf00      	nop
 800a090:	e7fe      	b.n	800a090 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d102      	bne.n	800a09e <xQueueGenericCreateStatic+0x7e>
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d101      	bne.n	800a0a2 <xQueueGenericCreateStatic+0x82>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e000      	b.n	800a0a4 <xQueueGenericCreateStatic+0x84>
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d10a      	bne.n	800a0be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ac:	f383 8811 	msr	BASEPRI, r3
 800a0b0:	f3bf 8f6f 	isb	sy
 800a0b4:	f3bf 8f4f 	dsb	sy
 800a0b8:	61fb      	str	r3, [r7, #28]
}
 800a0ba:	bf00      	nop
 800a0bc:	e7fe      	b.n	800a0bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0be:	2350      	movs	r3, #80	; 0x50
 800a0c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	2b50      	cmp	r3, #80	; 0x50
 800a0c6:	d00a      	beq.n	800a0de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0cc:	f383 8811 	msr	BASEPRI, r3
 800a0d0:	f3bf 8f6f 	isb	sy
 800a0d4:	f3bf 8f4f 	dsb	sy
 800a0d8:	61bb      	str	r3, [r7, #24]
}
 800a0da:	bf00      	nop
 800a0dc:	e7fe      	b.n	800a0dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a0de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d00d      	beq.n	800a106 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	68b9      	ldr	r1, [r7, #8]
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 f805 	bl	800a110 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a108:	4618      	mov	r0, r3
 800a10a:	3730      	adds	r7, #48	; 0x30
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
 800a11c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d103      	bne.n	800a12c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	69ba      	ldr	r2, [r7, #24]
 800a128:	601a      	str	r2, [r3, #0]
 800a12a:	e002      	b.n	800a132 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	68fa      	ldr	r2, [r7, #12]
 800a136:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a13e:	2101      	movs	r1, #1
 800a140:	69b8      	ldr	r0, [r7, #24]
 800a142:	f7ff ff05 	bl	8009f50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	78fa      	ldrb	r2, [r7, #3]
 800a14a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a14e:	bf00      	nop
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
	...

0800a158 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b08e      	sub	sp, #56	; 0x38
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
 800a164:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a166:	2300      	movs	r3, #0
 800a168:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a170:	2b00      	cmp	r3, #0
 800a172:	d10a      	bne.n	800a18a <xQueueGenericSend+0x32>
	__asm volatile
 800a174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a186:	bf00      	nop
 800a188:	e7fe      	b.n	800a188 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d103      	bne.n	800a198 <xQueueGenericSend+0x40>
 800a190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a194:	2b00      	cmp	r3, #0
 800a196:	d101      	bne.n	800a19c <xQueueGenericSend+0x44>
 800a198:	2301      	movs	r3, #1
 800a19a:	e000      	b.n	800a19e <xQueueGenericSend+0x46>
 800a19c:	2300      	movs	r3, #0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10a      	bne.n	800a1b8 <xQueueGenericSend+0x60>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1b4:	bf00      	nop
 800a1b6:	e7fe      	b.n	800a1b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d103      	bne.n	800a1c6 <xQueueGenericSend+0x6e>
 800a1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d101      	bne.n	800a1ca <xQueueGenericSend+0x72>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e000      	b.n	800a1cc <xQueueGenericSend+0x74>
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10a      	bne.n	800a1e6 <xQueueGenericSend+0x8e>
	__asm volatile
 800a1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d4:	f383 8811 	msr	BASEPRI, r3
 800a1d8:	f3bf 8f6f 	isb	sy
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	623b      	str	r3, [r7, #32]
}
 800a1e2:	bf00      	nop
 800a1e4:	e7fe      	b.n	800a1e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1e6:	f001 fa4d 	bl	800b684 <xTaskGetSchedulerState>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d102      	bne.n	800a1f6 <xQueueGenericSend+0x9e>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d101      	bne.n	800a1fa <xQueueGenericSend+0xa2>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e000      	b.n	800a1fc <xQueueGenericSend+0xa4>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10a      	bne.n	800a216 <xQueueGenericSend+0xbe>
	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a204:	f383 8811 	msr	BASEPRI, r3
 800a208:	f3bf 8f6f 	isb	sy
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	61fb      	str	r3, [r7, #28]
}
 800a212:	bf00      	nop
 800a214:	e7fe      	b.n	800a214 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a216:	f001 ff8d 	bl	800c134 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a222:	429a      	cmp	r2, r3
 800a224:	d302      	bcc.n	800a22c <xQueueGenericSend+0xd4>
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d129      	bne.n	800a280 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	68b9      	ldr	r1, [r7, #8]
 800a230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a232:	f000 fa0b 	bl	800a64c <prvCopyDataToQueue>
 800a236:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d010      	beq.n	800a262 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a242:	3324      	adds	r3, #36	; 0x24
 800a244:	4618      	mov	r0, r3
 800a246:	f001 f85f 	bl	800b308 <xTaskRemoveFromEventList>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d013      	beq.n	800a278 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a250:	4b3f      	ldr	r3, [pc, #252]	; (800a350 <xQueueGenericSend+0x1f8>)
 800a252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a256:	601a      	str	r2, [r3, #0]
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	f3bf 8f6f 	isb	sy
 800a260:	e00a      	b.n	800a278 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a264:	2b00      	cmp	r3, #0
 800a266:	d007      	beq.n	800a278 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a268:	4b39      	ldr	r3, [pc, #228]	; (800a350 <xQueueGenericSend+0x1f8>)
 800a26a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26e:	601a      	str	r2, [r3, #0]
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a278:	f001 ff8c 	bl	800c194 <vPortExitCritical>
				return pdPASS;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e063      	b.n	800a348 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d103      	bne.n	800a28e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a286:	f001 ff85 	bl	800c194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	e05c      	b.n	800a348 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a290:	2b00      	cmp	r3, #0
 800a292:	d106      	bne.n	800a2a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a294:	f107 0314 	add.w	r3, r7, #20
 800a298:	4618      	mov	r0, r3
 800a29a:	f001 f899 	bl	800b3d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2a2:	f001 ff77 	bl	800c194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2a6:	f000 fdf9 	bl	800ae9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2aa:	f001 ff43 	bl	800c134 <vPortEnterCritical>
 800a2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2b4:	b25b      	sxtb	r3, r3
 800a2b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ba:	d103      	bne.n	800a2c4 <xQueueGenericSend+0x16c>
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2ca:	b25b      	sxtb	r3, r3
 800a2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d0:	d103      	bne.n	800a2da <xQueueGenericSend+0x182>
 800a2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2da:	f001 ff5b 	bl	800c194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2de:	1d3a      	adds	r2, r7, #4
 800a2e0:	f107 0314 	add.w	r3, r7, #20
 800a2e4:	4611      	mov	r1, r2
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f001 f888 	bl	800b3fc <xTaskCheckForTimeOut>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d124      	bne.n	800a33c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a2f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2f4:	f000 faa2 	bl	800a83c <prvIsQueueFull>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d018      	beq.n	800a330 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a300:	3310      	adds	r3, #16
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	4611      	mov	r1, r2
 800a306:	4618      	mov	r0, r3
 800a308:	f000 ffae 	bl	800b268 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a30c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a30e:	f000 fa2d 	bl	800a76c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a312:	f000 fdd1 	bl	800aeb8 <xTaskResumeAll>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f47f af7c 	bne.w	800a216 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a31e:	4b0c      	ldr	r3, [pc, #48]	; (800a350 <xQueueGenericSend+0x1f8>)
 800a320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a324:	601a      	str	r2, [r3, #0]
 800a326:	f3bf 8f4f 	dsb	sy
 800a32a:	f3bf 8f6f 	isb	sy
 800a32e:	e772      	b.n	800a216 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a332:	f000 fa1b 	bl	800a76c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a336:	f000 fdbf 	bl	800aeb8 <xTaskResumeAll>
 800a33a:	e76c      	b.n	800a216 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a33c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a33e:	f000 fa15 	bl	800a76c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a342:	f000 fdb9 	bl	800aeb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a346:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3738      	adds	r7, #56	; 0x38
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	e000ed04 	.word	0xe000ed04

0800a354 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b090      	sub	sp, #64	; 0x40
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
 800a360:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10a      	bne.n	800a382 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a370:	f383 8811 	msr	BASEPRI, r3
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a37e:	bf00      	nop
 800a380:	e7fe      	b.n	800a380 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d103      	bne.n	800a390 <xQueueGenericSendFromISR+0x3c>
 800a388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d101      	bne.n	800a394 <xQueueGenericSendFromISR+0x40>
 800a390:	2301      	movs	r3, #1
 800a392:	e000      	b.n	800a396 <xQueueGenericSendFromISR+0x42>
 800a394:	2300      	movs	r3, #0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10a      	bne.n	800a3b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39e:	f383 8811 	msr	BASEPRI, r3
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a3ac:	bf00      	nop
 800a3ae:	e7fe      	b.n	800a3ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d103      	bne.n	800a3be <xQueueGenericSendFromISR+0x6a>
 800a3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d101      	bne.n	800a3c2 <xQueueGenericSendFromISR+0x6e>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e000      	b.n	800a3c4 <xQueueGenericSendFromISR+0x70>
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10a      	bne.n	800a3de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	623b      	str	r3, [r7, #32]
}
 800a3da:	bf00      	nop
 800a3dc:	e7fe      	b.n	800a3dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3de:	f001 ff8b 	bl	800c2f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a3e2:	f3ef 8211 	mrs	r2, BASEPRI
 800a3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ea:	f383 8811 	msr	BASEPRI, r3
 800a3ee:	f3bf 8f6f 	isb	sy
 800a3f2:	f3bf 8f4f 	dsb	sy
 800a3f6:	61fa      	str	r2, [r7, #28]
 800a3f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a3fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a406:	429a      	cmp	r2, r3
 800a408:	d302      	bcc.n	800a410 <xQueueGenericSendFromISR+0xbc>
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	d12f      	bne.n	800a470 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a412:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a41e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a420:	683a      	ldr	r2, [r7, #0]
 800a422:	68b9      	ldr	r1, [r7, #8]
 800a424:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a426:	f000 f911 	bl	800a64c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a42a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a432:	d112      	bne.n	800a45a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d016      	beq.n	800a46a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43e:	3324      	adds	r3, #36	; 0x24
 800a440:	4618      	mov	r0, r3
 800a442:	f000 ff61 	bl	800b308 <xTaskRemoveFromEventList>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00e      	beq.n	800a46a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00b      	beq.n	800a46a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2201      	movs	r2, #1
 800a456:	601a      	str	r2, [r3, #0]
 800a458:	e007      	b.n	800a46a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a45a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a45e:	3301      	adds	r3, #1
 800a460:	b2db      	uxtb	r3, r3
 800a462:	b25a      	sxtb	r2, r3
 800a464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a46a:	2301      	movs	r3, #1
 800a46c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a46e:	e001      	b.n	800a474 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a470:	2300      	movs	r3, #0
 800a472:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a476:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a47e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a482:	4618      	mov	r0, r3
 800a484:	3740      	adds	r7, #64	; 0x40
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
	...

0800a48c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b08c      	sub	sp, #48	; 0x30
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a498:	2300      	movs	r3, #0
 800a49a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d10a      	bne.n	800a4bc <xQueueReceive+0x30>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	623b      	str	r3, [r7, #32]
}
 800a4b8:	bf00      	nop
 800a4ba:	e7fe      	b.n	800a4ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d103      	bne.n	800a4ca <xQueueReceive+0x3e>
 800a4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d101      	bne.n	800a4ce <xQueueReceive+0x42>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e000      	b.n	800a4d0 <xQueueReceive+0x44>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10a      	bne.n	800a4ea <xQueueReceive+0x5e>
	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	61fb      	str	r3, [r7, #28]
}
 800a4e6:	bf00      	nop
 800a4e8:	e7fe      	b.n	800a4e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4ea:	f001 f8cb 	bl	800b684 <xTaskGetSchedulerState>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d102      	bne.n	800a4fa <xQueueReceive+0x6e>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d101      	bne.n	800a4fe <xQueueReceive+0x72>
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e000      	b.n	800a500 <xQueueReceive+0x74>
 800a4fe:	2300      	movs	r3, #0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10a      	bne.n	800a51a <xQueueReceive+0x8e>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	61bb      	str	r3, [r7, #24]
}
 800a516:	bf00      	nop
 800a518:	e7fe      	b.n	800a518 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a51a:	f001 fe0b 	bl	800c134 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a522:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	2b00      	cmp	r3, #0
 800a528:	d01f      	beq.n	800a56a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a52a:	68b9      	ldr	r1, [r7, #8]
 800a52c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a52e:	f000 f8f7 	bl	800a720 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a534:	1e5a      	subs	r2, r3, #1
 800a536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a538:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00f      	beq.n	800a562 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a544:	3310      	adds	r3, #16
 800a546:	4618      	mov	r0, r3
 800a548:	f000 fede 	bl	800b308 <xTaskRemoveFromEventList>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d007      	beq.n	800a562 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a552:	4b3d      	ldr	r3, [pc, #244]	; (800a648 <xQueueReceive+0x1bc>)
 800a554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a558:	601a      	str	r2, [r3, #0]
 800a55a:	f3bf 8f4f 	dsb	sy
 800a55e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a562:	f001 fe17 	bl	800c194 <vPortExitCritical>
				return pdPASS;
 800a566:	2301      	movs	r3, #1
 800a568:	e069      	b.n	800a63e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d103      	bne.n	800a578 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a570:	f001 fe10 	bl	800c194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a574:	2300      	movs	r3, #0
 800a576:	e062      	b.n	800a63e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d106      	bne.n	800a58c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a57e:	f107 0310 	add.w	r3, r7, #16
 800a582:	4618      	mov	r0, r3
 800a584:	f000 ff24 	bl	800b3d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a588:	2301      	movs	r3, #1
 800a58a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a58c:	f001 fe02 	bl	800c194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a590:	f000 fc84 	bl	800ae9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a594:	f001 fdce 	bl	800c134 <vPortEnterCritical>
 800a598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a59e:	b25b      	sxtb	r3, r3
 800a5a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a4:	d103      	bne.n	800a5ae <xQueueReceive+0x122>
 800a5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5b4:	b25b      	sxtb	r3, r3
 800a5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ba:	d103      	bne.n	800a5c4 <xQueueReceive+0x138>
 800a5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5c4:	f001 fde6 	bl	800c194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5c8:	1d3a      	adds	r2, r7, #4
 800a5ca:	f107 0310 	add.w	r3, r7, #16
 800a5ce:	4611      	mov	r1, r2
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f000 ff13 	bl	800b3fc <xTaskCheckForTimeOut>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d123      	bne.n	800a624 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5de:	f000 f917 	bl	800a810 <prvIsQueueEmpty>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d017      	beq.n	800a618 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ea:	3324      	adds	r3, #36	; 0x24
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	4611      	mov	r1, r2
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f000 fe39 	bl	800b268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5f8:	f000 f8b8 	bl	800a76c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5fc:	f000 fc5c 	bl	800aeb8 <xTaskResumeAll>
 800a600:	4603      	mov	r3, r0
 800a602:	2b00      	cmp	r3, #0
 800a604:	d189      	bne.n	800a51a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a606:	4b10      	ldr	r3, [pc, #64]	; (800a648 <xQueueReceive+0x1bc>)
 800a608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	f3bf 8f6f 	isb	sy
 800a616:	e780      	b.n	800a51a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a61a:	f000 f8a7 	bl	800a76c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a61e:	f000 fc4b 	bl	800aeb8 <xTaskResumeAll>
 800a622:	e77a      	b.n	800a51a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a626:	f000 f8a1 	bl	800a76c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a62a:	f000 fc45 	bl	800aeb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a62e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a630:	f000 f8ee 	bl	800a810 <prvIsQueueEmpty>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	f43f af6f 	beq.w	800a51a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a63c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3730      	adds	r7, #48	; 0x30
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	e000ed04 	.word	0xe000ed04

0800a64c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b086      	sub	sp, #24
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a658:	2300      	movs	r3, #0
 800a65a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a660:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10d      	bne.n	800a686 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d14d      	bne.n	800a70e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	4618      	mov	r0, r3
 800a678:	f001 f822 	bl	800b6c0 <xTaskPriorityDisinherit>
 800a67c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	609a      	str	r2, [r3, #8]
 800a684:	e043      	b.n	800a70e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d119      	bne.n	800a6c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6858      	ldr	r0, [r3, #4]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a694:	461a      	mov	r2, r3
 800a696:	68b9      	ldr	r1, [r7, #8]
 800a698:	f002 fe30 	bl	800d2fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	685a      	ldr	r2, [r3, #4]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a4:	441a      	add	r2, r3
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d32b      	bcc.n	800a70e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	605a      	str	r2, [r3, #4]
 800a6be:	e026      	b.n	800a70e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	68d8      	ldr	r0, [r3, #12]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	68b9      	ldr	r1, [r7, #8]
 800a6cc:	f002 fe16 	bl	800d2fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	68da      	ldr	r2, [r3, #12]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d8:	425b      	negs	r3, r3
 800a6da:	441a      	add	r2, r3
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	68da      	ldr	r2, [r3, #12]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d207      	bcs.n	800a6fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	689a      	ldr	r2, [r3, #8]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f4:	425b      	negs	r3, r3
 800a6f6:	441a      	add	r2, r3
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	d105      	bne.n	800a70e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d002      	beq.n	800a70e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	3b01      	subs	r3, #1
 800a70c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	1c5a      	adds	r2, r3, #1
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a716:	697b      	ldr	r3, [r7, #20]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3718      	adds	r7, #24
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d018      	beq.n	800a764 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	68da      	ldr	r2, [r3, #12]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73a:	441a      	add	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68da      	ldr	r2, [r3, #12]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d303      	bcc.n	800a754 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	68d9      	ldr	r1, [r3, #12]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a75c:	461a      	mov	r2, r3
 800a75e:	6838      	ldr	r0, [r7, #0]
 800a760:	f002 fdcc 	bl	800d2fc <memcpy>
	}
}
 800a764:	bf00      	nop
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a774:	f001 fcde 	bl	800c134 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a77e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a780:	e011      	b.n	800a7a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a786:	2b00      	cmp	r3, #0
 800a788:	d012      	beq.n	800a7b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	3324      	adds	r3, #36	; 0x24
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 fdba 	bl	800b308 <xTaskRemoveFromEventList>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a79a:	f000 fe91 	bl	800b4c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a79e:	7bfb      	ldrb	r3, [r7, #15]
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	dce9      	bgt.n	800a782 <prvUnlockQueue+0x16>
 800a7ae:	e000      	b.n	800a7b2 <prvUnlockQueue+0x46>
					break;
 800a7b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	22ff      	movs	r2, #255	; 0xff
 800a7b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a7ba:	f001 fceb 	bl	800c194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a7be:	f001 fcb9 	bl	800c134 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7ca:	e011      	b.n	800a7f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d012      	beq.n	800a7fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	3310      	adds	r3, #16
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f000 fd95 	bl	800b308 <xTaskRemoveFromEventList>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d001      	beq.n	800a7e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a7e4:	f000 fe6c 	bl	800b4c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a7e8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	dce9      	bgt.n	800a7cc <prvUnlockQueue+0x60>
 800a7f8:	e000      	b.n	800a7fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a7fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	22ff      	movs	r2, #255	; 0xff
 800a800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a804:	f001 fcc6 	bl	800c194 <vPortExitCritical>
}
 800a808:	bf00      	nop
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a818:	f001 fc8c 	bl	800c134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a820:	2b00      	cmp	r3, #0
 800a822:	d102      	bne.n	800a82a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a824:	2301      	movs	r3, #1
 800a826:	60fb      	str	r3, [r7, #12]
 800a828:	e001      	b.n	800a82e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a82a:	2300      	movs	r3, #0
 800a82c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a82e:	f001 fcb1 	bl	800c194 <vPortExitCritical>

	return xReturn;
 800a832:	68fb      	ldr	r3, [r7, #12]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a844:	f001 fc76 	bl	800c134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a850:	429a      	cmp	r2, r3
 800a852:	d102      	bne.n	800a85a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a854:	2301      	movs	r3, #1
 800a856:	60fb      	str	r3, [r7, #12]
 800a858:	e001      	b.n	800a85e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a85a:	2300      	movs	r3, #0
 800a85c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a85e:	f001 fc99 	bl	800c194 <vPortExitCritical>

	return xReturn;
 800a862:	68fb      	ldr	r3, [r7, #12]
}
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a876:	2300      	movs	r3, #0
 800a878:	60fb      	str	r3, [r7, #12]
 800a87a:	e014      	b.n	800a8a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a87c:	4a0f      	ldr	r2, [pc, #60]	; (800a8bc <vQueueAddToRegistry+0x50>)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10b      	bne.n	800a8a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a888:	490c      	ldr	r1, [pc, #48]	; (800a8bc <vQueueAddToRegistry+0x50>)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	683a      	ldr	r2, [r7, #0]
 800a88e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a892:	4a0a      	ldr	r2, [pc, #40]	; (800a8bc <vQueueAddToRegistry+0x50>)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	00db      	lsls	r3, r3, #3
 800a898:	4413      	add	r3, r2
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a89e:	e006      	b.n	800a8ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	60fb      	str	r3, [r7, #12]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2b07      	cmp	r3, #7
 800a8aa:	d9e7      	bls.n	800a87c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a8ac:	bf00      	nop
 800a8ae:	bf00      	nop
 800a8b0:	3714      	adds	r7, #20
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	200070c4 	.word	0x200070c4

0800a8c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a8d0:	f001 fc30 	bl	800c134 <vPortEnterCritical>
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8da:	b25b      	sxtb	r3, r3
 800a8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e0:	d103      	bne.n	800a8ea <vQueueWaitForMessageRestricted+0x2a>
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8f0:	b25b      	sxtb	r3, r3
 800a8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f6:	d103      	bne.n	800a900 <vQueueWaitForMessageRestricted+0x40>
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a900:	f001 fc48 	bl	800c194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d106      	bne.n	800a91a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	3324      	adds	r3, #36	; 0x24
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	68b9      	ldr	r1, [r7, #8]
 800a914:	4618      	mov	r0, r3
 800a916:	f000 fccb 	bl	800b2b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a91a:	6978      	ldr	r0, [r7, #20]
 800a91c:	f7ff ff26 	bl	800a76c <prvUnlockQueue>
	}
 800a920:	bf00      	nop
 800a922:	3718      	adds	r7, #24
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b08e      	sub	sp, #56	; 0x38
 800a92c:	af04      	add	r7, sp, #16
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
 800a934:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d10a      	bne.n	800a952 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	623b      	str	r3, [r7, #32]
}
 800a94e:	bf00      	nop
 800a950:	e7fe      	b.n	800a950 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10a      	bne.n	800a96e <xTaskCreateStatic+0x46>
	__asm volatile
 800a958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95c:	f383 8811 	msr	BASEPRI, r3
 800a960:	f3bf 8f6f 	isb	sy
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	61fb      	str	r3, [r7, #28]
}
 800a96a:	bf00      	nop
 800a96c:	e7fe      	b.n	800a96c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a96e:	235c      	movs	r3, #92	; 0x5c
 800a970:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	2b5c      	cmp	r3, #92	; 0x5c
 800a976:	d00a      	beq.n	800a98e <xTaskCreateStatic+0x66>
	__asm volatile
 800a978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97c:	f383 8811 	msr	BASEPRI, r3
 800a980:	f3bf 8f6f 	isb	sy
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	61bb      	str	r3, [r7, #24]
}
 800a98a:	bf00      	nop
 800a98c:	e7fe      	b.n	800a98c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a98e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a992:	2b00      	cmp	r3, #0
 800a994:	d01e      	beq.n	800a9d4 <xTaskCreateStatic+0xac>
 800a996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d01b      	beq.n	800a9d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a8:	2202      	movs	r2, #2
 800a9aa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	9303      	str	r3, [sp, #12]
 800a9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b4:	9302      	str	r3, [sp, #8]
 800a9b6:	f107 0314 	add.w	r3, r7, #20
 800a9ba:	9301      	str	r3, [sp, #4]
 800a9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9be:	9300      	str	r3, [sp, #0]
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	68b9      	ldr	r1, [r7, #8]
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f000 f850 	bl	800aa6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9ce:	f000 f8dd 	bl	800ab8c <prvAddNewTaskToReadyList>
 800a9d2:	e001      	b.n	800a9d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a9d8:	697b      	ldr	r3, [r7, #20]
	}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3728      	adds	r7, #40	; 0x28
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b08c      	sub	sp, #48	; 0x30
 800a9e6:	af04      	add	r7, sp, #16
 800a9e8:	60f8      	str	r0, [r7, #12]
 800a9ea:	60b9      	str	r1, [r7, #8]
 800a9ec:	603b      	str	r3, [r7, #0]
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a9f2:	88fb      	ldrh	r3, [r7, #6]
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f001 fcbe 	bl	800c378 <pvPortMalloc>
 800a9fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d00e      	beq.n	800aa22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa04:	205c      	movs	r0, #92	; 0x5c
 800aa06:	f001 fcb7 	bl	800c378 <pvPortMalloc>
 800aa0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d003      	beq.n	800aa1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	697a      	ldr	r2, [r7, #20]
 800aa16:	631a      	str	r2, [r3, #48]	; 0x30
 800aa18:	e005      	b.n	800aa26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa1a:	6978      	ldr	r0, [r7, #20]
 800aa1c:	f001 fd78 	bl	800c510 <vPortFree>
 800aa20:	e001      	b.n	800aa26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa22:	2300      	movs	r3, #0
 800aa24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d017      	beq.n	800aa5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa34:	88fa      	ldrh	r2, [r7, #6]
 800aa36:	2300      	movs	r3, #0
 800aa38:	9303      	str	r3, [sp, #12]
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	9302      	str	r3, [sp, #8]
 800aa3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa40:	9301      	str	r3, [sp, #4]
 800aa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa44:	9300      	str	r3, [sp, #0]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	68b9      	ldr	r1, [r7, #8]
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f000 f80e 	bl	800aa6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa50:	69f8      	ldr	r0, [r7, #28]
 800aa52:	f000 f89b 	bl	800ab8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa56:	2301      	movs	r3, #1
 800aa58:	61bb      	str	r3, [r7, #24]
 800aa5a:	e002      	b.n	800aa62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa5c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa62:	69bb      	ldr	r3, [r7, #24]
	}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3720      	adds	r7, #32
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b088      	sub	sp, #32
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	607a      	str	r2, [r7, #4]
 800aa78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	461a      	mov	r2, r3
 800aa84:	21a5      	movs	r1, #165	; 0xa5
 800aa86:	f002 fc47 	bl	800d318 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aa94:	3b01      	subs	r3, #1
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	4413      	add	r3, r2
 800aa9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	f023 0307 	bic.w	r3, r3, #7
 800aaa2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	f003 0307 	and.w	r3, r3, #7
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00a      	beq.n	800aac4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab2:	f383 8811 	msr	BASEPRI, r3
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	617b      	str	r3, [r7, #20]
}
 800aac0:	bf00      	nop
 800aac2:	e7fe      	b.n	800aac2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d01f      	beq.n	800ab0a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aaca:	2300      	movs	r3, #0
 800aacc:	61fb      	str	r3, [r7, #28]
 800aace:	e012      	b.n	800aaf6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	4413      	add	r3, r2
 800aad6:	7819      	ldrb	r1, [r3, #0]
 800aad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	4413      	add	r3, r2
 800aade:	3334      	adds	r3, #52	; 0x34
 800aae0:	460a      	mov	r2, r1
 800aae2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aae4:	68ba      	ldr	r2, [r7, #8]
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	4413      	add	r3, r2
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d006      	beq.n	800aafe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	61fb      	str	r3, [r7, #28]
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	2b0f      	cmp	r3, #15
 800aafa:	d9e9      	bls.n	800aad0 <prvInitialiseNewTask+0x64>
 800aafc:	e000      	b.n	800ab00 <prvInitialiseNewTask+0x94>
			{
				break;
 800aafe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab08:	e003      	b.n	800ab12 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab14:	2b37      	cmp	r3, #55	; 0x37
 800ab16:	d901      	bls.n	800ab1c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab18:	2337      	movs	r3, #55	; 0x37
 800ab1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ab28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab30:	3304      	adds	r3, #4
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7ff f978 	bl	8009e28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3a:	3318      	adds	r3, #24
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7ff f973 	bl	8009e28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab60:	2200      	movs	r2, #0
 800ab62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	68f9      	ldr	r1, [r7, #12]
 800ab6a:	69b8      	ldr	r0, [r7, #24]
 800ab6c:	f001 f9b8 	bl	800bee0 <pxPortInitialiseStack>
 800ab70:	4602      	mov	r2, r0
 800ab72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ab76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab82:	bf00      	nop
 800ab84:	3720      	adds	r7, #32
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
	...

0800ab8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab94:	f001 face 	bl	800c134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab98:	4b2d      	ldr	r3, [pc, #180]	; (800ac50 <prvAddNewTaskToReadyList+0xc4>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	4a2c      	ldr	r2, [pc, #176]	; (800ac50 <prvAddNewTaskToReadyList+0xc4>)
 800aba0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aba2:	4b2c      	ldr	r3, [pc, #176]	; (800ac54 <prvAddNewTaskToReadyList+0xc8>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d109      	bne.n	800abbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800abaa:	4a2a      	ldr	r2, [pc, #168]	; (800ac54 <prvAddNewTaskToReadyList+0xc8>)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800abb0:	4b27      	ldr	r3, [pc, #156]	; (800ac50 <prvAddNewTaskToReadyList+0xc4>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d110      	bne.n	800abda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800abb8:	f000 fca6 	bl	800b508 <prvInitialiseTaskLists>
 800abbc:	e00d      	b.n	800abda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800abbe:	4b26      	ldr	r3, [pc, #152]	; (800ac58 <prvAddNewTaskToReadyList+0xcc>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d109      	bne.n	800abda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800abc6:	4b23      	ldr	r3, [pc, #140]	; (800ac54 <prvAddNewTaskToReadyList+0xc8>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d802      	bhi.n	800abda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800abd4:	4a1f      	ldr	r2, [pc, #124]	; (800ac54 <prvAddNewTaskToReadyList+0xc8>)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800abda:	4b20      	ldr	r3, [pc, #128]	; (800ac5c <prvAddNewTaskToReadyList+0xd0>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	3301      	adds	r3, #1
 800abe0:	4a1e      	ldr	r2, [pc, #120]	; (800ac5c <prvAddNewTaskToReadyList+0xd0>)
 800abe2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800abe4:	4b1d      	ldr	r3, [pc, #116]	; (800ac5c <prvAddNewTaskToReadyList+0xd0>)
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abf0:	4b1b      	ldr	r3, [pc, #108]	; (800ac60 <prvAddNewTaskToReadyList+0xd4>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d903      	bls.n	800ac00 <prvAddNewTaskToReadyList+0x74>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abfc:	4a18      	ldr	r2, [pc, #96]	; (800ac60 <prvAddNewTaskToReadyList+0xd4>)
 800abfe:	6013      	str	r3, [r2, #0]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac04:	4613      	mov	r3, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	4413      	add	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4a15      	ldr	r2, [pc, #84]	; (800ac64 <prvAddNewTaskToReadyList+0xd8>)
 800ac0e:	441a      	add	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	3304      	adds	r3, #4
 800ac14:	4619      	mov	r1, r3
 800ac16:	4610      	mov	r0, r2
 800ac18:	f7ff f913 	bl	8009e42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac1c:	f001 faba 	bl	800c194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac20:	4b0d      	ldr	r3, [pc, #52]	; (800ac58 <prvAddNewTaskToReadyList+0xcc>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00e      	beq.n	800ac46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac28:	4b0a      	ldr	r3, [pc, #40]	; (800ac54 <prvAddNewTaskToReadyList+0xc8>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d207      	bcs.n	800ac46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac36:	4b0c      	ldr	r3, [pc, #48]	; (800ac68 <prvAddNewTaskToReadyList+0xdc>)
 800ac38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac3c:	601a      	str	r2, [r3, #0]
 800ac3e:	f3bf 8f4f 	dsb	sy
 800ac42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac46:	bf00      	nop
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	20000dac 	.word	0x20000dac
 800ac54:	200008d8 	.word	0x200008d8
 800ac58:	20000db8 	.word	0x20000db8
 800ac5c:	20000dc8 	.word	0x20000dc8
 800ac60:	20000db4 	.word	0x20000db4
 800ac64:	200008dc 	.word	0x200008dc
 800ac68:	e000ed04 	.word	0xe000ed04

0800ac6c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b08a      	sub	sp, #40	; 0x28
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ac76:	2300      	movs	r3, #0
 800ac78:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d10a      	bne.n	800ac96 <vTaskDelayUntil+0x2a>
	__asm volatile
 800ac80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac84:	f383 8811 	msr	BASEPRI, r3
 800ac88:	f3bf 8f6f 	isb	sy
 800ac8c:	f3bf 8f4f 	dsb	sy
 800ac90:	617b      	str	r3, [r7, #20]
}
 800ac92:	bf00      	nop
 800ac94:	e7fe      	b.n	800ac94 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10a      	bne.n	800acb2 <vTaskDelayUntil+0x46>
	__asm volatile
 800ac9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca0:	f383 8811 	msr	BASEPRI, r3
 800aca4:	f3bf 8f6f 	isb	sy
 800aca8:	f3bf 8f4f 	dsb	sy
 800acac:	613b      	str	r3, [r7, #16]
}
 800acae:	bf00      	nop
 800acb0:	e7fe      	b.n	800acb0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800acb2:	4b2a      	ldr	r3, [pc, #168]	; (800ad5c <vTaskDelayUntil+0xf0>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00a      	beq.n	800acd0 <vTaskDelayUntil+0x64>
	__asm volatile
 800acba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acbe:	f383 8811 	msr	BASEPRI, r3
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	60fb      	str	r3, [r7, #12]
}
 800accc:	bf00      	nop
 800acce:	e7fe      	b.n	800acce <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800acd0:	f000 f8e4 	bl	800ae9c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800acd4:	4b22      	ldr	r3, [pc, #136]	; (800ad60 <vTaskDelayUntil+0xf4>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	4413      	add	r3, r2
 800ace2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	6a3a      	ldr	r2, [r7, #32]
 800acea:	429a      	cmp	r2, r3
 800acec:	d20b      	bcs.n	800ad06 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	69fa      	ldr	r2, [r7, #28]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d211      	bcs.n	800ad1c <vTaskDelayUntil+0xb0>
 800acf8:	69fa      	ldr	r2, [r7, #28]
 800acfa:	6a3b      	ldr	r3, [r7, #32]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d90d      	bls.n	800ad1c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800ad00:	2301      	movs	r3, #1
 800ad02:	627b      	str	r3, [r7, #36]	; 0x24
 800ad04:	e00a      	b.n	800ad1c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	69fa      	ldr	r2, [r7, #28]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d303      	bcc.n	800ad18 <vTaskDelayUntil+0xac>
 800ad10:	69fa      	ldr	r2, [r7, #28]
 800ad12:	6a3b      	ldr	r3, [r7, #32]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d901      	bls.n	800ad1c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	69fa      	ldr	r2, [r7, #28]
 800ad20:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ad22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d006      	beq.n	800ad36 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ad28:	69fa      	ldr	r2, [r7, #28]
 800ad2a:	6a3b      	ldr	r3, [r7, #32]
 800ad2c:	1ad3      	subs	r3, r2, r3
 800ad2e:	2100      	movs	r1, #0
 800ad30:	4618      	mov	r0, r3
 800ad32:	f000 fd33 	bl	800b79c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ad36:	f000 f8bf 	bl	800aeb8 <xTaskResumeAll>
 800ad3a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d107      	bne.n	800ad52 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800ad42:	4b08      	ldr	r3, [pc, #32]	; (800ad64 <vTaskDelayUntil+0xf8>)
 800ad44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad48:	601a      	str	r2, [r3, #0]
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad52:	bf00      	nop
 800ad54:	3728      	adds	r7, #40	; 0x28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	20000dd4 	.word	0x20000dd4
 800ad60:	20000db0 	.word	0x20000db0
 800ad64:	e000ed04 	.word	0xe000ed04

0800ad68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad70:	2300      	movs	r3, #0
 800ad72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d017      	beq.n	800adaa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad7a:	4b13      	ldr	r3, [pc, #76]	; (800adc8 <vTaskDelay+0x60>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00a      	beq.n	800ad98 <vTaskDelay+0x30>
	__asm volatile
 800ad82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad86:	f383 8811 	msr	BASEPRI, r3
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	60bb      	str	r3, [r7, #8]
}
 800ad94:	bf00      	nop
 800ad96:	e7fe      	b.n	800ad96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ad98:	f000 f880 	bl	800ae9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fcfc 	bl	800b79c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ada4:	f000 f888 	bl	800aeb8 <xTaskResumeAll>
 800ada8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d107      	bne.n	800adc0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800adb0:	4b06      	ldr	r3, [pc, #24]	; (800adcc <vTaskDelay+0x64>)
 800adb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adb6:	601a      	str	r2, [r3, #0]
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800adc0:	bf00      	nop
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	20000dd4 	.word	0x20000dd4
 800adcc:	e000ed04 	.word	0xe000ed04

0800add0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b08a      	sub	sp, #40	; 0x28
 800add4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800add6:	2300      	movs	r3, #0
 800add8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800adda:	2300      	movs	r3, #0
 800addc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800adde:	463a      	mov	r2, r7
 800ade0:	1d39      	adds	r1, r7, #4
 800ade2:	f107 0308 	add.w	r3, r7, #8
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7fe ffca 	bl	8009d80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	68ba      	ldr	r2, [r7, #8]
 800adf2:	9202      	str	r2, [sp, #8]
 800adf4:	9301      	str	r3, [sp, #4]
 800adf6:	2300      	movs	r3, #0
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	2300      	movs	r3, #0
 800adfc:	460a      	mov	r2, r1
 800adfe:	4921      	ldr	r1, [pc, #132]	; (800ae84 <vTaskStartScheduler+0xb4>)
 800ae00:	4821      	ldr	r0, [pc, #132]	; (800ae88 <vTaskStartScheduler+0xb8>)
 800ae02:	f7ff fd91 	bl	800a928 <xTaskCreateStatic>
 800ae06:	4603      	mov	r3, r0
 800ae08:	4a20      	ldr	r2, [pc, #128]	; (800ae8c <vTaskStartScheduler+0xbc>)
 800ae0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ae0c:	4b1f      	ldr	r3, [pc, #124]	; (800ae8c <vTaskStartScheduler+0xbc>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d002      	beq.n	800ae1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae14:	2301      	movs	r3, #1
 800ae16:	617b      	str	r3, [r7, #20]
 800ae18:	e001      	b.n	800ae1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d102      	bne.n	800ae2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ae24:	f000 fd0e 	bl	800b844 <xTimerCreateTimerTask>
 800ae28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d116      	bne.n	800ae5e <vTaskStartScheduler+0x8e>
	__asm volatile
 800ae30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae34:	f383 8811 	msr	BASEPRI, r3
 800ae38:	f3bf 8f6f 	isb	sy
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	613b      	str	r3, [r7, #16]
}
 800ae42:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae44:	4b12      	ldr	r3, [pc, #72]	; (800ae90 <vTaskStartScheduler+0xc0>)
 800ae46:	f04f 32ff 	mov.w	r2, #4294967295
 800ae4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae4c:	4b11      	ldr	r3, [pc, #68]	; (800ae94 <vTaskStartScheduler+0xc4>)
 800ae4e:	2201      	movs	r2, #1
 800ae50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae52:	4b11      	ldr	r3, [pc, #68]	; (800ae98 <vTaskStartScheduler+0xc8>)
 800ae54:	2200      	movs	r2, #0
 800ae56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae58:	f001 f8ca 	bl	800bff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae5c:	e00e      	b.n	800ae7c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae64:	d10a      	bne.n	800ae7c <vTaskStartScheduler+0xac>
	__asm volatile
 800ae66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6a:	f383 8811 	msr	BASEPRI, r3
 800ae6e:	f3bf 8f6f 	isb	sy
 800ae72:	f3bf 8f4f 	dsb	sy
 800ae76:	60fb      	str	r3, [r7, #12]
}
 800ae78:	bf00      	nop
 800ae7a:	e7fe      	b.n	800ae7a <vTaskStartScheduler+0xaa>
}
 800ae7c:	bf00      	nop
 800ae7e:	3718      	adds	r7, #24
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	0800dc20 	.word	0x0800dc20
 800ae88:	0800b4d9 	.word	0x0800b4d9
 800ae8c:	20000dd0 	.word	0x20000dd0
 800ae90:	20000dcc 	.word	0x20000dcc
 800ae94:	20000db8 	.word	0x20000db8
 800ae98:	20000db0 	.word	0x20000db0

0800ae9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aea0:	4b04      	ldr	r3, [pc, #16]	; (800aeb4 <vTaskSuspendAll+0x18>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	3301      	adds	r3, #1
 800aea6:	4a03      	ldr	r2, [pc, #12]	; (800aeb4 <vTaskSuspendAll+0x18>)
 800aea8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aeaa:	bf00      	nop
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr
 800aeb4:	20000dd4 	.word	0x20000dd4

0800aeb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aebe:	2300      	movs	r3, #0
 800aec0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aec2:	2300      	movs	r3, #0
 800aec4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aec6:	4b42      	ldr	r3, [pc, #264]	; (800afd0 <xTaskResumeAll+0x118>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d10a      	bne.n	800aee4 <xTaskResumeAll+0x2c>
	__asm volatile
 800aece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed2:	f383 8811 	msr	BASEPRI, r3
 800aed6:	f3bf 8f6f 	isb	sy
 800aeda:	f3bf 8f4f 	dsb	sy
 800aede:	603b      	str	r3, [r7, #0]
}
 800aee0:	bf00      	nop
 800aee2:	e7fe      	b.n	800aee2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aee4:	f001 f926 	bl	800c134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aee8:	4b39      	ldr	r3, [pc, #228]	; (800afd0 <xTaskResumeAll+0x118>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	3b01      	subs	r3, #1
 800aeee:	4a38      	ldr	r2, [pc, #224]	; (800afd0 <xTaskResumeAll+0x118>)
 800aef0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aef2:	4b37      	ldr	r3, [pc, #220]	; (800afd0 <xTaskResumeAll+0x118>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d162      	bne.n	800afc0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aefa:	4b36      	ldr	r3, [pc, #216]	; (800afd4 <xTaskResumeAll+0x11c>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d05e      	beq.n	800afc0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af02:	e02f      	b.n	800af64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af04:	4b34      	ldr	r3, [pc, #208]	; (800afd8 <xTaskResumeAll+0x120>)
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	3318      	adds	r3, #24
 800af10:	4618      	mov	r0, r3
 800af12:	f7fe fff3 	bl	8009efc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	3304      	adds	r3, #4
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fe ffee 	bl	8009efc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af24:	4b2d      	ldr	r3, [pc, #180]	; (800afdc <xTaskResumeAll+0x124>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d903      	bls.n	800af34 <xTaskResumeAll+0x7c>
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af30:	4a2a      	ldr	r2, [pc, #168]	; (800afdc <xTaskResumeAll+0x124>)
 800af32:	6013      	str	r3, [r2, #0]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af38:	4613      	mov	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4413      	add	r3, r2
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	4a27      	ldr	r2, [pc, #156]	; (800afe0 <xTaskResumeAll+0x128>)
 800af42:	441a      	add	r2, r3
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	3304      	adds	r3, #4
 800af48:	4619      	mov	r1, r3
 800af4a:	4610      	mov	r0, r2
 800af4c:	f7fe ff79 	bl	8009e42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af54:	4b23      	ldr	r3, [pc, #140]	; (800afe4 <xTaskResumeAll+0x12c>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d302      	bcc.n	800af64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800af5e:	4b22      	ldr	r3, [pc, #136]	; (800afe8 <xTaskResumeAll+0x130>)
 800af60:	2201      	movs	r2, #1
 800af62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af64:	4b1c      	ldr	r3, [pc, #112]	; (800afd8 <xTaskResumeAll+0x120>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1cb      	bne.n	800af04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af72:	f000 fb67 	bl	800b644 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af76:	4b1d      	ldr	r3, [pc, #116]	; (800afec <xTaskResumeAll+0x134>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d010      	beq.n	800afa4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af82:	f000 f859 	bl	800b038 <xTaskIncrementTick>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d002      	beq.n	800af92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800af8c:	4b16      	ldr	r3, [pc, #88]	; (800afe8 <xTaskResumeAll+0x130>)
 800af8e:	2201      	movs	r2, #1
 800af90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	3b01      	subs	r3, #1
 800af96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d1f1      	bne.n	800af82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800af9e:	4b13      	ldr	r3, [pc, #76]	; (800afec <xTaskResumeAll+0x134>)
 800afa0:	2200      	movs	r2, #0
 800afa2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800afa4:	4b10      	ldr	r3, [pc, #64]	; (800afe8 <xTaskResumeAll+0x130>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d009      	beq.n	800afc0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800afac:	2301      	movs	r3, #1
 800afae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800afb0:	4b0f      	ldr	r3, [pc, #60]	; (800aff0 <xTaskResumeAll+0x138>)
 800afb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afb6:	601a      	str	r2, [r3, #0]
 800afb8:	f3bf 8f4f 	dsb	sy
 800afbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800afc0:	f001 f8e8 	bl	800c194 <vPortExitCritical>

	return xAlreadyYielded;
 800afc4:	68bb      	ldr	r3, [r7, #8]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	20000dd4 	.word	0x20000dd4
 800afd4:	20000dac 	.word	0x20000dac
 800afd8:	20000d6c 	.word	0x20000d6c
 800afdc:	20000db4 	.word	0x20000db4
 800afe0:	200008dc 	.word	0x200008dc
 800afe4:	200008d8 	.word	0x200008d8
 800afe8:	20000dc0 	.word	0x20000dc0
 800afec:	20000dbc 	.word	0x20000dbc
 800aff0:	e000ed04 	.word	0xe000ed04

0800aff4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800affa:	4b05      	ldr	r3, [pc, #20]	; (800b010 <xTaskGetTickCount+0x1c>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b000:	687b      	ldr	r3, [r7, #4]
}
 800b002:	4618      	mov	r0, r3
 800b004:	370c      	adds	r7, #12
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	20000db0 	.word	0x20000db0

0800b014 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b01a:	f001 f96d 	bl	800c2f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b01e:	2300      	movs	r3, #0
 800b020:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b022:	4b04      	ldr	r3, [pc, #16]	; (800b034 <xTaskGetTickCountFromISR+0x20>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b028:	683b      	ldr	r3, [r7, #0]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	20000db0 	.word	0x20000db0

0800b038 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b03e:	2300      	movs	r3, #0
 800b040:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b042:	4b4f      	ldr	r3, [pc, #316]	; (800b180 <xTaskIncrementTick+0x148>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	f040 808f 	bne.w	800b16a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b04c:	4b4d      	ldr	r3, [pc, #308]	; (800b184 <xTaskIncrementTick+0x14c>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	3301      	adds	r3, #1
 800b052:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b054:	4a4b      	ldr	r2, [pc, #300]	; (800b184 <xTaskIncrementTick+0x14c>)
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d120      	bne.n	800b0a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b060:	4b49      	ldr	r3, [pc, #292]	; (800b188 <xTaskIncrementTick+0x150>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00a      	beq.n	800b080 <xTaskIncrementTick+0x48>
	__asm volatile
 800b06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06e:	f383 8811 	msr	BASEPRI, r3
 800b072:	f3bf 8f6f 	isb	sy
 800b076:	f3bf 8f4f 	dsb	sy
 800b07a:	603b      	str	r3, [r7, #0]
}
 800b07c:	bf00      	nop
 800b07e:	e7fe      	b.n	800b07e <xTaskIncrementTick+0x46>
 800b080:	4b41      	ldr	r3, [pc, #260]	; (800b188 <xTaskIncrementTick+0x150>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	60fb      	str	r3, [r7, #12]
 800b086:	4b41      	ldr	r3, [pc, #260]	; (800b18c <xTaskIncrementTick+0x154>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a3f      	ldr	r2, [pc, #252]	; (800b188 <xTaskIncrementTick+0x150>)
 800b08c:	6013      	str	r3, [r2, #0]
 800b08e:	4a3f      	ldr	r2, [pc, #252]	; (800b18c <xTaskIncrementTick+0x154>)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6013      	str	r3, [r2, #0]
 800b094:	4b3e      	ldr	r3, [pc, #248]	; (800b190 <xTaskIncrementTick+0x158>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	3301      	adds	r3, #1
 800b09a:	4a3d      	ldr	r2, [pc, #244]	; (800b190 <xTaskIncrementTick+0x158>)
 800b09c:	6013      	str	r3, [r2, #0]
 800b09e:	f000 fad1 	bl	800b644 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b0a2:	4b3c      	ldr	r3, [pc, #240]	; (800b194 <xTaskIncrementTick+0x15c>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	693a      	ldr	r2, [r7, #16]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d349      	bcc.n	800b140 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0ac:	4b36      	ldr	r3, [pc, #216]	; (800b188 <xTaskIncrementTick+0x150>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d104      	bne.n	800b0c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0b6:	4b37      	ldr	r3, [pc, #220]	; (800b194 <xTaskIncrementTick+0x15c>)
 800b0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0bc:	601a      	str	r2, [r3, #0]
					break;
 800b0be:	e03f      	b.n	800b140 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0c0:	4b31      	ldr	r3, [pc, #196]	; (800b188 <xTaskIncrementTick+0x150>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b0d0:	693a      	ldr	r2, [r7, #16]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d203      	bcs.n	800b0e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b0d8:	4a2e      	ldr	r2, [pc, #184]	; (800b194 <xTaskIncrementTick+0x15c>)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b0de:	e02f      	b.n	800b140 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	3304      	adds	r3, #4
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7fe ff09 	bl	8009efc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d004      	beq.n	800b0fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	3318      	adds	r3, #24
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7fe ff00 	bl	8009efc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b100:	4b25      	ldr	r3, [pc, #148]	; (800b198 <xTaskIncrementTick+0x160>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	429a      	cmp	r2, r3
 800b106:	d903      	bls.n	800b110 <xTaskIncrementTick+0xd8>
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10c:	4a22      	ldr	r2, [pc, #136]	; (800b198 <xTaskIncrementTick+0x160>)
 800b10e:	6013      	str	r3, [r2, #0]
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b114:	4613      	mov	r3, r2
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	4413      	add	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	4a1f      	ldr	r2, [pc, #124]	; (800b19c <xTaskIncrementTick+0x164>)
 800b11e:	441a      	add	r2, r3
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	3304      	adds	r3, #4
 800b124:	4619      	mov	r1, r3
 800b126:	4610      	mov	r0, r2
 800b128:	f7fe fe8b 	bl	8009e42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b130:	4b1b      	ldr	r3, [pc, #108]	; (800b1a0 <xTaskIncrementTick+0x168>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b136:	429a      	cmp	r2, r3
 800b138:	d3b8      	bcc.n	800b0ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b13a:	2301      	movs	r3, #1
 800b13c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b13e:	e7b5      	b.n	800b0ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b140:	4b17      	ldr	r3, [pc, #92]	; (800b1a0 <xTaskIncrementTick+0x168>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b146:	4915      	ldr	r1, [pc, #84]	; (800b19c <xTaskIncrementTick+0x164>)
 800b148:	4613      	mov	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	4413      	add	r3, r2
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	440b      	add	r3, r1
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2b01      	cmp	r3, #1
 800b156:	d901      	bls.n	800b15c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b158:	2301      	movs	r3, #1
 800b15a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b15c:	4b11      	ldr	r3, [pc, #68]	; (800b1a4 <xTaskIncrementTick+0x16c>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d007      	beq.n	800b174 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b164:	2301      	movs	r3, #1
 800b166:	617b      	str	r3, [r7, #20]
 800b168:	e004      	b.n	800b174 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b16a:	4b0f      	ldr	r3, [pc, #60]	; (800b1a8 <xTaskIncrementTick+0x170>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	3301      	adds	r3, #1
 800b170:	4a0d      	ldr	r2, [pc, #52]	; (800b1a8 <xTaskIncrementTick+0x170>)
 800b172:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b174:	697b      	ldr	r3, [r7, #20]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3718      	adds	r7, #24
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	20000dd4 	.word	0x20000dd4
 800b184:	20000db0 	.word	0x20000db0
 800b188:	20000d64 	.word	0x20000d64
 800b18c:	20000d68 	.word	0x20000d68
 800b190:	20000dc4 	.word	0x20000dc4
 800b194:	20000dcc 	.word	0x20000dcc
 800b198:	20000db4 	.word	0x20000db4
 800b19c:	200008dc 	.word	0x200008dc
 800b1a0:	200008d8 	.word	0x200008d8
 800b1a4:	20000dc0 	.word	0x20000dc0
 800b1a8:	20000dbc 	.word	0x20000dbc

0800b1ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b1b2:	4b28      	ldr	r3, [pc, #160]	; (800b254 <vTaskSwitchContext+0xa8>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d003      	beq.n	800b1c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b1ba:	4b27      	ldr	r3, [pc, #156]	; (800b258 <vTaskSwitchContext+0xac>)
 800b1bc:	2201      	movs	r2, #1
 800b1be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b1c0:	e041      	b.n	800b246 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b1c2:	4b25      	ldr	r3, [pc, #148]	; (800b258 <vTaskSwitchContext+0xac>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1c8:	4b24      	ldr	r3, [pc, #144]	; (800b25c <vTaskSwitchContext+0xb0>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	60fb      	str	r3, [r7, #12]
 800b1ce:	e010      	b.n	800b1f2 <vTaskSwitchContext+0x46>
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d10a      	bne.n	800b1ec <vTaskSwitchContext+0x40>
	__asm volatile
 800b1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1da:	f383 8811 	msr	BASEPRI, r3
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	607b      	str	r3, [r7, #4]
}
 800b1e8:	bf00      	nop
 800b1ea:	e7fe      	b.n	800b1ea <vTaskSwitchContext+0x3e>
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	60fb      	str	r3, [r7, #12]
 800b1f2:	491b      	ldr	r1, [pc, #108]	; (800b260 <vTaskSwitchContext+0xb4>)
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	4413      	add	r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	440b      	add	r3, r1
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d0e4      	beq.n	800b1d0 <vTaskSwitchContext+0x24>
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	4613      	mov	r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	4413      	add	r3, r2
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	4a13      	ldr	r2, [pc, #76]	; (800b260 <vTaskSwitchContext+0xb4>)
 800b212:	4413      	add	r3, r2
 800b214:	60bb      	str	r3, [r7, #8]
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	685a      	ldr	r2, [r3, #4]
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	605a      	str	r2, [r3, #4]
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	685a      	ldr	r2, [r3, #4]
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	3308      	adds	r3, #8
 800b228:	429a      	cmp	r2, r3
 800b22a:	d104      	bne.n	800b236 <vTaskSwitchContext+0x8a>
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	685a      	ldr	r2, [r3, #4]
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	605a      	str	r2, [r3, #4]
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	4a09      	ldr	r2, [pc, #36]	; (800b264 <vTaskSwitchContext+0xb8>)
 800b23e:	6013      	str	r3, [r2, #0]
 800b240:	4a06      	ldr	r2, [pc, #24]	; (800b25c <vTaskSwitchContext+0xb0>)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6013      	str	r3, [r2, #0]
}
 800b246:	bf00      	nop
 800b248:	3714      	adds	r7, #20
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	20000dd4 	.word	0x20000dd4
 800b258:	20000dc0 	.word	0x20000dc0
 800b25c:	20000db4 	.word	0x20000db4
 800b260:	200008dc 	.word	0x200008dc
 800b264:	200008d8 	.word	0x200008d8

0800b268 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d10a      	bne.n	800b28e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27c:	f383 8811 	msr	BASEPRI, r3
 800b280:	f3bf 8f6f 	isb	sy
 800b284:	f3bf 8f4f 	dsb	sy
 800b288:	60fb      	str	r3, [r7, #12]
}
 800b28a:	bf00      	nop
 800b28c:	e7fe      	b.n	800b28c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b28e:	4b07      	ldr	r3, [pc, #28]	; (800b2ac <vTaskPlaceOnEventList+0x44>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	3318      	adds	r3, #24
 800b294:	4619      	mov	r1, r3
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f7fe fdf7 	bl	8009e8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b29c:	2101      	movs	r1, #1
 800b29e:	6838      	ldr	r0, [r7, #0]
 800b2a0:	f000 fa7c 	bl	800b79c <prvAddCurrentTaskToDelayedList>
}
 800b2a4:	bf00      	nop
 800b2a6:	3710      	adds	r7, #16
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	200008d8 	.word	0x200008d8

0800b2b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d10a      	bne.n	800b2d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	617b      	str	r3, [r7, #20]
}
 800b2d4:	bf00      	nop
 800b2d6:	e7fe      	b.n	800b2d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2d8:	4b0a      	ldr	r3, [pc, #40]	; (800b304 <vTaskPlaceOnEventListRestricted+0x54>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	3318      	adds	r3, #24
 800b2de:	4619      	mov	r1, r3
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f7fe fdae 	bl	8009e42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d002      	beq.n	800b2f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b2ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b2f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b2f2:	6879      	ldr	r1, [r7, #4]
 800b2f4:	68b8      	ldr	r0, [r7, #8]
 800b2f6:	f000 fa51 	bl	800b79c <prvAddCurrentTaskToDelayedList>
	}
 800b2fa:	bf00      	nop
 800b2fc:	3718      	adds	r7, #24
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	200008d8 	.word	0x200008d8

0800b308 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b086      	sub	sp, #24
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d10a      	bne.n	800b334 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	60fb      	str	r3, [r7, #12]
}
 800b330:	bf00      	nop
 800b332:	e7fe      	b.n	800b332 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	3318      	adds	r3, #24
 800b338:	4618      	mov	r0, r3
 800b33a:	f7fe fddf 	bl	8009efc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b33e:	4b1e      	ldr	r3, [pc, #120]	; (800b3b8 <xTaskRemoveFromEventList+0xb0>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d11d      	bne.n	800b382 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	3304      	adds	r3, #4
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fe fdd6 	bl	8009efc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b354:	4b19      	ldr	r3, [pc, #100]	; (800b3bc <xTaskRemoveFromEventList+0xb4>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d903      	bls.n	800b364 <xTaskRemoveFromEventList+0x5c>
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b360:	4a16      	ldr	r2, [pc, #88]	; (800b3bc <xTaskRemoveFromEventList+0xb4>)
 800b362:	6013      	str	r3, [r2, #0]
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b368:	4613      	mov	r3, r2
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	4413      	add	r3, r2
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4a13      	ldr	r2, [pc, #76]	; (800b3c0 <xTaskRemoveFromEventList+0xb8>)
 800b372:	441a      	add	r2, r3
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	3304      	adds	r3, #4
 800b378:	4619      	mov	r1, r3
 800b37a:	4610      	mov	r0, r2
 800b37c:	f7fe fd61 	bl	8009e42 <vListInsertEnd>
 800b380:	e005      	b.n	800b38e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	3318      	adds	r3, #24
 800b386:	4619      	mov	r1, r3
 800b388:	480e      	ldr	r0, [pc, #56]	; (800b3c4 <xTaskRemoveFromEventList+0xbc>)
 800b38a:	f7fe fd5a 	bl	8009e42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b392:	4b0d      	ldr	r3, [pc, #52]	; (800b3c8 <xTaskRemoveFromEventList+0xc0>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b398:	429a      	cmp	r2, r3
 800b39a:	d905      	bls.n	800b3a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b39c:	2301      	movs	r3, #1
 800b39e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b3a0:	4b0a      	ldr	r3, [pc, #40]	; (800b3cc <xTaskRemoveFromEventList+0xc4>)
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	601a      	str	r2, [r3, #0]
 800b3a6:	e001      	b.n	800b3ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b3ac:	697b      	ldr	r3, [r7, #20]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3718      	adds	r7, #24
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	20000dd4 	.word	0x20000dd4
 800b3bc:	20000db4 	.word	0x20000db4
 800b3c0:	200008dc 	.word	0x200008dc
 800b3c4:	20000d6c 	.word	0x20000d6c
 800b3c8:	200008d8 	.word	0x200008d8
 800b3cc:	20000dc0 	.word	0x20000dc0

0800b3d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b3d8:	4b06      	ldr	r3, [pc, #24]	; (800b3f4 <vTaskInternalSetTimeOutState+0x24>)
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b3e0:	4b05      	ldr	r3, [pc, #20]	; (800b3f8 <vTaskInternalSetTimeOutState+0x28>)
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	605a      	str	r2, [r3, #4]
}
 800b3e8:	bf00      	nop
 800b3ea:	370c      	adds	r7, #12
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr
 800b3f4:	20000dc4 	.word	0x20000dc4
 800b3f8:	20000db0 	.word	0x20000db0

0800b3fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b088      	sub	sp, #32
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d10a      	bne.n	800b422 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b410:	f383 8811 	msr	BASEPRI, r3
 800b414:	f3bf 8f6f 	isb	sy
 800b418:	f3bf 8f4f 	dsb	sy
 800b41c:	613b      	str	r3, [r7, #16]
}
 800b41e:	bf00      	nop
 800b420:	e7fe      	b.n	800b420 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d10a      	bne.n	800b43e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42c:	f383 8811 	msr	BASEPRI, r3
 800b430:	f3bf 8f6f 	isb	sy
 800b434:	f3bf 8f4f 	dsb	sy
 800b438:	60fb      	str	r3, [r7, #12]
}
 800b43a:	bf00      	nop
 800b43c:	e7fe      	b.n	800b43c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b43e:	f000 fe79 	bl	800c134 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b442:	4b1d      	ldr	r3, [pc, #116]	; (800b4b8 <xTaskCheckForTimeOut+0xbc>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	69ba      	ldr	r2, [r7, #24]
 800b44e:	1ad3      	subs	r3, r2, r3
 800b450:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b45a:	d102      	bne.n	800b462 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b45c:	2300      	movs	r3, #0
 800b45e:	61fb      	str	r3, [r7, #28]
 800b460:	e023      	b.n	800b4aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	4b15      	ldr	r3, [pc, #84]	; (800b4bc <xTaskCheckForTimeOut+0xc0>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d007      	beq.n	800b47e <xTaskCheckForTimeOut+0x82>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	69ba      	ldr	r2, [r7, #24]
 800b474:	429a      	cmp	r2, r3
 800b476:	d302      	bcc.n	800b47e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b478:	2301      	movs	r3, #1
 800b47a:	61fb      	str	r3, [r7, #28]
 800b47c:	e015      	b.n	800b4aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	697a      	ldr	r2, [r7, #20]
 800b484:	429a      	cmp	r2, r3
 800b486:	d20b      	bcs.n	800b4a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	1ad2      	subs	r2, r2, r3
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f7ff ff9b 	bl	800b3d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b49a:	2300      	movs	r3, #0
 800b49c:	61fb      	str	r3, [r7, #28]
 800b49e:	e004      	b.n	800b4aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b4aa:	f000 fe73 	bl	800c194 <vPortExitCritical>

	return xReturn;
 800b4ae:	69fb      	ldr	r3, [r7, #28]
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3720      	adds	r7, #32
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	20000db0 	.word	0x20000db0
 800b4bc:	20000dc4 	.word	0x20000dc4

0800b4c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b4c4:	4b03      	ldr	r3, [pc, #12]	; (800b4d4 <vTaskMissedYield+0x14>)
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	601a      	str	r2, [r3, #0]
}
 800b4ca:	bf00      	nop
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr
 800b4d4:	20000dc0 	.word	0x20000dc0

0800b4d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b4e0:	f000 f852 	bl	800b588 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b4e4:	4b06      	ldr	r3, [pc, #24]	; (800b500 <prvIdleTask+0x28>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d9f9      	bls.n	800b4e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b4ec:	4b05      	ldr	r3, [pc, #20]	; (800b504 <prvIdleTask+0x2c>)
 800b4ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4f2:	601a      	str	r2, [r3, #0]
 800b4f4:	f3bf 8f4f 	dsb	sy
 800b4f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b4fc:	e7f0      	b.n	800b4e0 <prvIdleTask+0x8>
 800b4fe:	bf00      	nop
 800b500:	200008dc 	.word	0x200008dc
 800b504:	e000ed04 	.word	0xe000ed04

0800b508 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b50e:	2300      	movs	r3, #0
 800b510:	607b      	str	r3, [r7, #4]
 800b512:	e00c      	b.n	800b52e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	4613      	mov	r3, r2
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	4413      	add	r3, r2
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	4a12      	ldr	r2, [pc, #72]	; (800b568 <prvInitialiseTaskLists+0x60>)
 800b520:	4413      	add	r3, r2
 800b522:	4618      	mov	r0, r3
 800b524:	f7fe fc60 	bl	8009de8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	3301      	adds	r3, #1
 800b52c:	607b      	str	r3, [r7, #4]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2b37      	cmp	r3, #55	; 0x37
 800b532:	d9ef      	bls.n	800b514 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b534:	480d      	ldr	r0, [pc, #52]	; (800b56c <prvInitialiseTaskLists+0x64>)
 800b536:	f7fe fc57 	bl	8009de8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b53a:	480d      	ldr	r0, [pc, #52]	; (800b570 <prvInitialiseTaskLists+0x68>)
 800b53c:	f7fe fc54 	bl	8009de8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b540:	480c      	ldr	r0, [pc, #48]	; (800b574 <prvInitialiseTaskLists+0x6c>)
 800b542:	f7fe fc51 	bl	8009de8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b546:	480c      	ldr	r0, [pc, #48]	; (800b578 <prvInitialiseTaskLists+0x70>)
 800b548:	f7fe fc4e 	bl	8009de8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b54c:	480b      	ldr	r0, [pc, #44]	; (800b57c <prvInitialiseTaskLists+0x74>)
 800b54e:	f7fe fc4b 	bl	8009de8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b552:	4b0b      	ldr	r3, [pc, #44]	; (800b580 <prvInitialiseTaskLists+0x78>)
 800b554:	4a05      	ldr	r2, [pc, #20]	; (800b56c <prvInitialiseTaskLists+0x64>)
 800b556:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b558:	4b0a      	ldr	r3, [pc, #40]	; (800b584 <prvInitialiseTaskLists+0x7c>)
 800b55a:	4a05      	ldr	r2, [pc, #20]	; (800b570 <prvInitialiseTaskLists+0x68>)
 800b55c:	601a      	str	r2, [r3, #0]
}
 800b55e:	bf00      	nop
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	200008dc 	.word	0x200008dc
 800b56c:	20000d3c 	.word	0x20000d3c
 800b570:	20000d50 	.word	0x20000d50
 800b574:	20000d6c 	.word	0x20000d6c
 800b578:	20000d80 	.word	0x20000d80
 800b57c:	20000d98 	.word	0x20000d98
 800b580:	20000d64 	.word	0x20000d64
 800b584:	20000d68 	.word	0x20000d68

0800b588 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b58e:	e019      	b.n	800b5c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b590:	f000 fdd0 	bl	800c134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b594:	4b10      	ldr	r3, [pc, #64]	; (800b5d8 <prvCheckTasksWaitingTermination+0x50>)
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	3304      	adds	r3, #4
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7fe fcab 	bl	8009efc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5a6:	4b0d      	ldr	r3, [pc, #52]	; (800b5dc <prvCheckTasksWaitingTermination+0x54>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	3b01      	subs	r3, #1
 800b5ac:	4a0b      	ldr	r2, [pc, #44]	; (800b5dc <prvCheckTasksWaitingTermination+0x54>)
 800b5ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b5b0:	4b0b      	ldr	r3, [pc, #44]	; (800b5e0 <prvCheckTasksWaitingTermination+0x58>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	4a0a      	ldr	r2, [pc, #40]	; (800b5e0 <prvCheckTasksWaitingTermination+0x58>)
 800b5b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b5ba:	f000 fdeb 	bl	800c194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 f810 	bl	800b5e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5c4:	4b06      	ldr	r3, [pc, #24]	; (800b5e0 <prvCheckTasksWaitingTermination+0x58>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d1e1      	bne.n	800b590 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5cc:	bf00      	nop
 800b5ce:	bf00      	nop
 800b5d0:	3708      	adds	r7, #8
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	20000d80 	.word	0x20000d80
 800b5dc:	20000dac 	.word	0x20000dac
 800b5e0:	20000d94 	.word	0x20000d94

0800b5e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d108      	bne.n	800b608 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f000 ff88 	bl	800c510 <vPortFree>
				vPortFree( pxTCB );
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 ff85 	bl	800c510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b606:	e018      	b.n	800b63a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d103      	bne.n	800b61a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 ff7c 	bl	800c510 <vPortFree>
	}
 800b618:	e00f      	b.n	800b63a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b620:	2b02      	cmp	r3, #2
 800b622:	d00a      	beq.n	800b63a <prvDeleteTCB+0x56>
	__asm volatile
 800b624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b628:	f383 8811 	msr	BASEPRI, r3
 800b62c:	f3bf 8f6f 	isb	sy
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	60fb      	str	r3, [r7, #12]
}
 800b636:	bf00      	nop
 800b638:	e7fe      	b.n	800b638 <prvDeleteTCB+0x54>
	}
 800b63a:	bf00      	nop
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
	...

0800b644 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b64a:	4b0c      	ldr	r3, [pc, #48]	; (800b67c <prvResetNextTaskUnblockTime+0x38>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d104      	bne.n	800b65e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b654:	4b0a      	ldr	r3, [pc, #40]	; (800b680 <prvResetNextTaskUnblockTime+0x3c>)
 800b656:	f04f 32ff 	mov.w	r2, #4294967295
 800b65a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b65c:	e008      	b.n	800b670 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b65e:	4b07      	ldr	r3, [pc, #28]	; (800b67c <prvResetNextTaskUnblockTime+0x38>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	4a04      	ldr	r2, [pc, #16]	; (800b680 <prvResetNextTaskUnblockTime+0x3c>)
 800b66e:	6013      	str	r3, [r2, #0]
}
 800b670:	bf00      	nop
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr
 800b67c:	20000d64 	.word	0x20000d64
 800b680:	20000dcc 	.word	0x20000dcc

0800b684 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b68a:	4b0b      	ldr	r3, [pc, #44]	; (800b6b8 <xTaskGetSchedulerState+0x34>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d102      	bne.n	800b698 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b692:	2301      	movs	r3, #1
 800b694:	607b      	str	r3, [r7, #4]
 800b696:	e008      	b.n	800b6aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b698:	4b08      	ldr	r3, [pc, #32]	; (800b6bc <xTaskGetSchedulerState+0x38>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d102      	bne.n	800b6a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	607b      	str	r3, [r7, #4]
 800b6a4:	e001      	b.n	800b6aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b6aa:	687b      	ldr	r3, [r7, #4]
	}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	370c      	adds	r7, #12
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr
 800b6b8:	20000db8 	.word	0x20000db8
 800b6bc:	20000dd4 	.word	0x20000dd4

0800b6c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d056      	beq.n	800b784 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b6d6:	4b2e      	ldr	r3, [pc, #184]	; (800b790 <xTaskPriorityDisinherit+0xd0>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	693a      	ldr	r2, [r7, #16]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d00a      	beq.n	800b6f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e4:	f383 8811 	msr	BASEPRI, r3
 800b6e8:	f3bf 8f6f 	isb	sy
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	60fb      	str	r3, [r7, #12]
}
 800b6f2:	bf00      	nop
 800b6f4:	e7fe      	b.n	800b6f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d10a      	bne.n	800b714 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b702:	f383 8811 	msr	BASEPRI, r3
 800b706:	f3bf 8f6f 	isb	sy
 800b70a:	f3bf 8f4f 	dsb	sy
 800b70e:	60bb      	str	r3, [r7, #8]
}
 800b710:	bf00      	nop
 800b712:	e7fe      	b.n	800b712 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b718:	1e5a      	subs	r2, r3, #1
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b726:	429a      	cmp	r2, r3
 800b728:	d02c      	beq.n	800b784 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d128      	bne.n	800b784 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	3304      	adds	r3, #4
 800b736:	4618      	mov	r0, r3
 800b738:	f7fe fbe0 	bl	8009efc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b748:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b754:	4b0f      	ldr	r3, [pc, #60]	; (800b794 <xTaskPriorityDisinherit+0xd4>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d903      	bls.n	800b764 <xTaskPriorityDisinherit+0xa4>
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b760:	4a0c      	ldr	r2, [pc, #48]	; (800b794 <xTaskPriorityDisinherit+0xd4>)
 800b762:	6013      	str	r3, [r2, #0]
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b768:	4613      	mov	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	4413      	add	r3, r2
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4a09      	ldr	r2, [pc, #36]	; (800b798 <xTaskPriorityDisinherit+0xd8>)
 800b772:	441a      	add	r2, r3
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	3304      	adds	r3, #4
 800b778:	4619      	mov	r1, r3
 800b77a:	4610      	mov	r0, r2
 800b77c:	f7fe fb61 	bl	8009e42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b780:	2301      	movs	r3, #1
 800b782:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b784:	697b      	ldr	r3, [r7, #20]
	}
 800b786:	4618      	mov	r0, r3
 800b788:	3718      	adds	r7, #24
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	200008d8 	.word	0x200008d8
 800b794:	20000db4 	.word	0x20000db4
 800b798:	200008dc 	.word	0x200008dc

0800b79c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b7a6:	4b21      	ldr	r3, [pc, #132]	; (800b82c <prvAddCurrentTaskToDelayedList+0x90>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7ac:	4b20      	ldr	r3, [pc, #128]	; (800b830 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	3304      	adds	r3, #4
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fe fba2 	bl	8009efc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7be:	d10a      	bne.n	800b7d6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d007      	beq.n	800b7d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7c6:	4b1a      	ldr	r3, [pc, #104]	; (800b830 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	3304      	adds	r3, #4
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	4819      	ldr	r0, [pc, #100]	; (800b834 <prvAddCurrentTaskToDelayedList+0x98>)
 800b7d0:	f7fe fb37 	bl	8009e42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b7d4:	e026      	b.n	800b824 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b7d6:	68fa      	ldr	r2, [r7, #12]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4413      	add	r3, r2
 800b7dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b7de:	4b14      	ldr	r3, [pc, #80]	; (800b830 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b7e6:	68ba      	ldr	r2, [r7, #8]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d209      	bcs.n	800b802 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7ee:	4b12      	ldr	r3, [pc, #72]	; (800b838 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	4b0f      	ldr	r3, [pc, #60]	; (800b830 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	3304      	adds	r3, #4
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	4610      	mov	r0, r2
 800b7fc:	f7fe fb45 	bl	8009e8a <vListInsert>
}
 800b800:	e010      	b.n	800b824 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b802:	4b0e      	ldr	r3, [pc, #56]	; (800b83c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	4b0a      	ldr	r3, [pc, #40]	; (800b830 <prvAddCurrentTaskToDelayedList+0x94>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	3304      	adds	r3, #4
 800b80c:	4619      	mov	r1, r3
 800b80e:	4610      	mov	r0, r2
 800b810:	f7fe fb3b 	bl	8009e8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b814:	4b0a      	ldr	r3, [pc, #40]	; (800b840 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d202      	bcs.n	800b824 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b81e:	4a08      	ldr	r2, [pc, #32]	; (800b840 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	6013      	str	r3, [r2, #0]
}
 800b824:	bf00      	nop
 800b826:	3710      	adds	r7, #16
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	20000db0 	.word	0x20000db0
 800b830:	200008d8 	.word	0x200008d8
 800b834:	20000d98 	.word	0x20000d98
 800b838:	20000d68 	.word	0x20000d68
 800b83c:	20000d64 	.word	0x20000d64
 800b840:	20000dcc 	.word	0x20000dcc

0800b844 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b08a      	sub	sp, #40	; 0x28
 800b848:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b84a:	2300      	movs	r3, #0
 800b84c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b84e:	f000 fb07 	bl	800be60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b852:	4b1c      	ldr	r3, [pc, #112]	; (800b8c4 <xTimerCreateTimerTask+0x80>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d021      	beq.n	800b89e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b85a:	2300      	movs	r3, #0
 800b85c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b85e:	2300      	movs	r3, #0
 800b860:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b862:	1d3a      	adds	r2, r7, #4
 800b864:	f107 0108 	add.w	r1, r7, #8
 800b868:	f107 030c 	add.w	r3, r7, #12
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fe faa1 	bl	8009db4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b872:	6879      	ldr	r1, [r7, #4]
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	68fa      	ldr	r2, [r7, #12]
 800b878:	9202      	str	r2, [sp, #8]
 800b87a:	9301      	str	r3, [sp, #4]
 800b87c:	2302      	movs	r3, #2
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	2300      	movs	r3, #0
 800b882:	460a      	mov	r2, r1
 800b884:	4910      	ldr	r1, [pc, #64]	; (800b8c8 <xTimerCreateTimerTask+0x84>)
 800b886:	4811      	ldr	r0, [pc, #68]	; (800b8cc <xTimerCreateTimerTask+0x88>)
 800b888:	f7ff f84e 	bl	800a928 <xTaskCreateStatic>
 800b88c:	4603      	mov	r3, r0
 800b88e:	4a10      	ldr	r2, [pc, #64]	; (800b8d0 <xTimerCreateTimerTask+0x8c>)
 800b890:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b892:	4b0f      	ldr	r3, [pc, #60]	; (800b8d0 <xTimerCreateTimerTask+0x8c>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d001      	beq.n	800b89e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b89a:	2301      	movs	r3, #1
 800b89c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10a      	bne.n	800b8ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a8:	f383 8811 	msr	BASEPRI, r3
 800b8ac:	f3bf 8f6f 	isb	sy
 800b8b0:	f3bf 8f4f 	dsb	sy
 800b8b4:	613b      	str	r3, [r7, #16]
}
 800b8b6:	bf00      	nop
 800b8b8:	e7fe      	b.n	800b8b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b8ba:	697b      	ldr	r3, [r7, #20]
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3718      	adds	r7, #24
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	20000e08 	.word	0x20000e08
 800b8c8:	0800dc28 	.word	0x0800dc28
 800b8cc:	0800ba09 	.word	0x0800ba09
 800b8d0:	20000e0c 	.word	0x20000e0c

0800b8d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b08a      	sub	sp, #40	; 0x28
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	607a      	str	r2, [r7, #4]
 800b8e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d10a      	bne.n	800b902 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f0:	f383 8811 	msr	BASEPRI, r3
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	623b      	str	r3, [r7, #32]
}
 800b8fe:	bf00      	nop
 800b900:	e7fe      	b.n	800b900 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b902:	4b1a      	ldr	r3, [pc, #104]	; (800b96c <xTimerGenericCommand+0x98>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d02a      	beq.n	800b960 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	2b05      	cmp	r3, #5
 800b91a:	dc18      	bgt.n	800b94e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b91c:	f7ff feb2 	bl	800b684 <xTaskGetSchedulerState>
 800b920:	4603      	mov	r3, r0
 800b922:	2b02      	cmp	r3, #2
 800b924:	d109      	bne.n	800b93a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b926:	4b11      	ldr	r3, [pc, #68]	; (800b96c <xTimerGenericCommand+0x98>)
 800b928:	6818      	ldr	r0, [r3, #0]
 800b92a:	f107 0110 	add.w	r1, r7, #16
 800b92e:	2300      	movs	r3, #0
 800b930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b932:	f7fe fc11 	bl	800a158 <xQueueGenericSend>
 800b936:	6278      	str	r0, [r7, #36]	; 0x24
 800b938:	e012      	b.n	800b960 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b93a:	4b0c      	ldr	r3, [pc, #48]	; (800b96c <xTimerGenericCommand+0x98>)
 800b93c:	6818      	ldr	r0, [r3, #0]
 800b93e:	f107 0110 	add.w	r1, r7, #16
 800b942:	2300      	movs	r3, #0
 800b944:	2200      	movs	r2, #0
 800b946:	f7fe fc07 	bl	800a158 <xQueueGenericSend>
 800b94a:	6278      	str	r0, [r7, #36]	; 0x24
 800b94c:	e008      	b.n	800b960 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b94e:	4b07      	ldr	r3, [pc, #28]	; (800b96c <xTimerGenericCommand+0x98>)
 800b950:	6818      	ldr	r0, [r3, #0]
 800b952:	f107 0110 	add.w	r1, r7, #16
 800b956:	2300      	movs	r3, #0
 800b958:	683a      	ldr	r2, [r7, #0]
 800b95a:	f7fe fcfb 	bl	800a354 <xQueueGenericSendFromISR>
 800b95e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b962:	4618      	mov	r0, r3
 800b964:	3728      	adds	r7, #40	; 0x28
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	20000e08 	.word	0x20000e08

0800b970 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b088      	sub	sp, #32
 800b974:	af02      	add	r7, sp, #8
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b97a:	4b22      	ldr	r3, [pc, #136]	; (800ba04 <prvProcessExpiredTimer+0x94>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	68db      	ldr	r3, [r3, #12]
 800b982:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	3304      	adds	r3, #4
 800b988:	4618      	mov	r0, r3
 800b98a:	f7fe fab7 	bl	8009efc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b994:	f003 0304 	and.w	r3, r3, #4
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d022      	beq.n	800b9e2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	699a      	ldr	r2, [r3, #24]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	18d1      	adds	r1, r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	683a      	ldr	r2, [r7, #0]
 800b9a8:	6978      	ldr	r0, [r7, #20]
 800b9aa:	f000 f8d1 	bl	800bb50 <prvInsertTimerInActiveList>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d01f      	beq.n	800b9f4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	2100      	movs	r1, #0
 800b9be:	6978      	ldr	r0, [r7, #20]
 800b9c0:	f7ff ff88 	bl	800b8d4 <xTimerGenericCommand>
 800b9c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d113      	bne.n	800b9f4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d0:	f383 8811 	msr	BASEPRI, r3
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	60fb      	str	r3, [r7, #12]
}
 800b9de:	bf00      	nop
 800b9e0:	e7fe      	b.n	800b9e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9e8:	f023 0301 	bic.w	r3, r3, #1
 800b9ec:	b2da      	uxtb	r2, r3
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	6a1b      	ldr	r3, [r3, #32]
 800b9f8:	6978      	ldr	r0, [r7, #20]
 800b9fa:	4798      	blx	r3
}
 800b9fc:	bf00      	nop
 800b9fe:	3718      	adds	r7, #24
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	20000e00 	.word	0x20000e00

0800ba08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba10:	f107 0308 	add.w	r3, r7, #8
 800ba14:	4618      	mov	r0, r3
 800ba16:	f000 f857 	bl	800bac8 <prvGetNextExpireTime>
 800ba1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	4619      	mov	r1, r3
 800ba20:	68f8      	ldr	r0, [r7, #12]
 800ba22:	f000 f803 	bl	800ba2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ba26:	f000 f8d5 	bl	800bbd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ba2a:	e7f1      	b.n	800ba10 <prvTimerTask+0x8>

0800ba2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ba36:	f7ff fa31 	bl	800ae9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba3a:	f107 0308 	add.w	r3, r7, #8
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f000 f866 	bl	800bb10 <prvSampleTimeNow>
 800ba44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d130      	bne.n	800baae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d10a      	bne.n	800ba68 <prvProcessTimerOrBlockTask+0x3c>
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d806      	bhi.n	800ba68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ba5a:	f7ff fa2d 	bl	800aeb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ba5e:	68f9      	ldr	r1, [r7, #12]
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f7ff ff85 	bl	800b970 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ba66:	e024      	b.n	800bab2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d008      	beq.n	800ba80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ba6e:	4b13      	ldr	r3, [pc, #76]	; (800babc <prvProcessTimerOrBlockTask+0x90>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d101      	bne.n	800ba7c <prvProcessTimerOrBlockTask+0x50>
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e000      	b.n	800ba7e <prvProcessTimerOrBlockTask+0x52>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ba80:	4b0f      	ldr	r3, [pc, #60]	; (800bac0 <prvProcessTimerOrBlockTask+0x94>)
 800ba82:	6818      	ldr	r0, [r3, #0]
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	1ad3      	subs	r3, r2, r3
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	f7fe ff17 	bl	800a8c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ba92:	f7ff fa11 	bl	800aeb8 <xTaskResumeAll>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d10a      	bne.n	800bab2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ba9c:	4b09      	ldr	r3, [pc, #36]	; (800bac4 <prvProcessTimerOrBlockTask+0x98>)
 800ba9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baa2:	601a      	str	r2, [r3, #0]
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	f3bf 8f6f 	isb	sy
}
 800baac:	e001      	b.n	800bab2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800baae:	f7ff fa03 	bl	800aeb8 <xTaskResumeAll>
}
 800bab2:	bf00      	nop
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	20000e04 	.word	0x20000e04
 800bac0:	20000e08 	.word	0x20000e08
 800bac4:	e000ed04 	.word	0xe000ed04

0800bac8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bad0:	4b0e      	ldr	r3, [pc, #56]	; (800bb0c <prvGetNextExpireTime+0x44>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d101      	bne.n	800bade <prvGetNextExpireTime+0x16>
 800bada:	2201      	movs	r2, #1
 800badc:	e000      	b.n	800bae0 <prvGetNextExpireTime+0x18>
 800bade:	2200      	movs	r2, #0
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d105      	bne.n	800baf8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800baec:	4b07      	ldr	r3, [pc, #28]	; (800bb0c <prvGetNextExpireTime+0x44>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	60fb      	str	r3, [r7, #12]
 800baf6:	e001      	b.n	800bafc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800baf8:	2300      	movs	r3, #0
 800bafa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bafc:	68fb      	ldr	r3, [r7, #12]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3714      	adds	r7, #20
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	20000e00 	.word	0x20000e00

0800bb10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bb18:	f7ff fa6c 	bl	800aff4 <xTaskGetTickCount>
 800bb1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bb1e:	4b0b      	ldr	r3, [pc, #44]	; (800bb4c <prvSampleTimeNow+0x3c>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d205      	bcs.n	800bb34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bb28:	f000 f936 	bl	800bd98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	601a      	str	r2, [r3, #0]
 800bb32:	e002      	b.n	800bb3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bb3a:	4a04      	ldr	r2, [pc, #16]	; (800bb4c <prvSampleTimeNow+0x3c>)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bb40:	68fb      	ldr	r3, [r7, #12]
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3710      	adds	r7, #16
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	20000e10 	.word	0x20000e10

0800bb50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b086      	sub	sp, #24
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	607a      	str	r2, [r7, #4]
 800bb5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	68ba      	ldr	r2, [r7, #8]
 800bb66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bb6e:	68ba      	ldr	r2, [r7, #8]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d812      	bhi.n	800bb9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	1ad2      	subs	r2, r2, r3
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	699b      	ldr	r3, [r3, #24]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d302      	bcc.n	800bb8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bb84:	2301      	movs	r3, #1
 800bb86:	617b      	str	r3, [r7, #20]
 800bb88:	e01b      	b.n	800bbc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bb8a:	4b10      	ldr	r3, [pc, #64]	; (800bbcc <prvInsertTimerInActiveList+0x7c>)
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	3304      	adds	r3, #4
 800bb92:	4619      	mov	r1, r3
 800bb94:	4610      	mov	r0, r2
 800bb96:	f7fe f978 	bl	8009e8a <vListInsert>
 800bb9a:	e012      	b.n	800bbc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d206      	bcs.n	800bbb2 <prvInsertTimerInActiveList+0x62>
 800bba4:	68ba      	ldr	r2, [r7, #8]
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d302      	bcc.n	800bbb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bbac:	2301      	movs	r3, #1
 800bbae:	617b      	str	r3, [r7, #20]
 800bbb0:	e007      	b.n	800bbc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bbb2:	4b07      	ldr	r3, [pc, #28]	; (800bbd0 <prvInsertTimerInActiveList+0x80>)
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	3304      	adds	r3, #4
 800bbba:	4619      	mov	r1, r3
 800bbbc:	4610      	mov	r0, r2
 800bbbe:	f7fe f964 	bl	8009e8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bbc2:	697b      	ldr	r3, [r7, #20]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3718      	adds	r7, #24
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	20000e04 	.word	0x20000e04
 800bbd0:	20000e00 	.word	0x20000e00

0800bbd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b08e      	sub	sp, #56	; 0x38
 800bbd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bbda:	e0ca      	b.n	800bd72 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	da18      	bge.n	800bc14 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bbe2:	1d3b      	adds	r3, r7, #4
 800bbe4:	3304      	adds	r3, #4
 800bbe6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d10a      	bne.n	800bc04 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf2:	f383 8811 	msr	BASEPRI, r3
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	f3bf 8f4f 	dsb	sy
 800bbfe:	61fb      	str	r3, [r7, #28]
}
 800bc00:	bf00      	nop
 800bc02:	e7fe      	b.n	800bc02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc0a:	6850      	ldr	r0, [r2, #4]
 800bc0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc0e:	6892      	ldr	r2, [r2, #8]
 800bc10:	4611      	mov	r1, r2
 800bc12:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	f2c0 80aa 	blt.w	800bd70 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc22:	695b      	ldr	r3, [r3, #20]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d004      	beq.n	800bc32 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7fe f965 	bl	8009efc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc32:	463b      	mov	r3, r7
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7ff ff6b 	bl	800bb10 <prvSampleTimeNow>
 800bc3a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2b09      	cmp	r3, #9
 800bc40:	f200 8097 	bhi.w	800bd72 <prvProcessReceivedCommands+0x19e>
 800bc44:	a201      	add	r2, pc, #4	; (adr r2, 800bc4c <prvProcessReceivedCommands+0x78>)
 800bc46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc4a:	bf00      	nop
 800bc4c:	0800bc75 	.word	0x0800bc75
 800bc50:	0800bc75 	.word	0x0800bc75
 800bc54:	0800bc75 	.word	0x0800bc75
 800bc58:	0800bce9 	.word	0x0800bce9
 800bc5c:	0800bcfd 	.word	0x0800bcfd
 800bc60:	0800bd47 	.word	0x0800bd47
 800bc64:	0800bc75 	.word	0x0800bc75
 800bc68:	0800bc75 	.word	0x0800bc75
 800bc6c:	0800bce9 	.word	0x0800bce9
 800bc70:	0800bcfd 	.word	0x0800bcfd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc7a:	f043 0301 	orr.w	r3, r3, #1
 800bc7e:	b2da      	uxtb	r2, r3
 800bc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc86:	68ba      	ldr	r2, [r7, #8]
 800bc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8a:	699b      	ldr	r3, [r3, #24]
 800bc8c:	18d1      	adds	r1, r2, r3
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc94:	f7ff ff5c 	bl	800bb50 <prvInsertTimerInActiveList>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d069      	beq.n	800bd72 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca0:	6a1b      	ldr	r3, [r3, #32]
 800bca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bca4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcac:	f003 0304 	and.w	r3, r3, #4
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d05e      	beq.n	800bd72 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bcb4:	68ba      	ldr	r2, [r7, #8]
 800bcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb8:	699b      	ldr	r3, [r3, #24]
 800bcba:	441a      	add	r2, r3
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	9300      	str	r3, [sp, #0]
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcc6:	f7ff fe05 	bl	800b8d4 <xTimerGenericCommand>
 800bcca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bccc:	6a3b      	ldr	r3, [r7, #32]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d14f      	bne.n	800bd72 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd6:	f383 8811 	msr	BASEPRI, r3
 800bcda:	f3bf 8f6f 	isb	sy
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	61bb      	str	r3, [r7, #24]
}
 800bce4:	bf00      	nop
 800bce6:	e7fe      	b.n	800bce6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcee:	f023 0301 	bic.w	r3, r3, #1
 800bcf2:	b2da      	uxtb	r2, r3
 800bcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bcfa:	e03a      	b.n	800bd72 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd02:	f043 0301 	orr.w	r3, r3, #1
 800bd06:	b2da      	uxtb	r2, r3
 800bd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bd0e:	68ba      	ldr	r2, [r7, #8]
 800bd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd12:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd16:	699b      	ldr	r3, [r3, #24]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d10a      	bne.n	800bd32 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd20:	f383 8811 	msr	BASEPRI, r3
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	617b      	str	r3, [r7, #20]
}
 800bd2e:	bf00      	nop
 800bd30:	e7fe      	b.n	800bd30 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd34:	699a      	ldr	r2, [r3, #24]
 800bd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd38:	18d1      	adds	r1, r2, r3
 800bd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd40:	f7ff ff06 	bl	800bb50 <prvInsertTimerInActiveList>
					break;
 800bd44:	e015      	b.n	800bd72 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd4c:	f003 0302 	and.w	r3, r3, #2
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d103      	bne.n	800bd5c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bd54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd56:	f000 fbdb 	bl	800c510 <vPortFree>
 800bd5a:	e00a      	b.n	800bd72 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd62:	f023 0301 	bic.w	r3, r3, #1
 800bd66:	b2da      	uxtb	r2, r3
 800bd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bd6e:	e000      	b.n	800bd72 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bd70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd72:	4b08      	ldr	r3, [pc, #32]	; (800bd94 <prvProcessReceivedCommands+0x1c0>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	1d39      	adds	r1, r7, #4
 800bd78:	2200      	movs	r2, #0
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7fe fb86 	bl	800a48c <xQueueReceive>
 800bd80:	4603      	mov	r3, r0
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	f47f af2a 	bne.w	800bbdc <prvProcessReceivedCommands+0x8>
	}
}
 800bd88:	bf00      	nop
 800bd8a:	bf00      	nop
 800bd8c:	3730      	adds	r7, #48	; 0x30
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	20000e08 	.word	0x20000e08

0800bd98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b088      	sub	sp, #32
 800bd9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd9e:	e048      	b.n	800be32 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bda0:	4b2d      	ldr	r3, [pc, #180]	; (800be58 <prvSwitchTimerLists+0xc0>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdaa:	4b2b      	ldr	r3, [pc, #172]	; (800be58 <prvSwitchTimerLists+0xc0>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	68db      	ldr	r3, [r3, #12]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	3304      	adds	r3, #4
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7fe f89f 	bl	8009efc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6a1b      	ldr	r3, [r3, #32]
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdcc:	f003 0304 	and.w	r3, r3, #4
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d02e      	beq.n	800be32 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	699b      	ldr	r3, [r3, #24]
 800bdd8:	693a      	ldr	r2, [r7, #16]
 800bdda:	4413      	add	r3, r2
 800bddc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bdde:	68ba      	ldr	r2, [r7, #8]
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d90e      	bls.n	800be04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	68ba      	ldr	r2, [r7, #8]
 800bdea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	68fa      	ldr	r2, [r7, #12]
 800bdf0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bdf2:	4b19      	ldr	r3, [pc, #100]	; (800be58 <prvSwitchTimerLists+0xc0>)
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	3304      	adds	r3, #4
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	4610      	mov	r0, r2
 800bdfe:	f7fe f844 	bl	8009e8a <vListInsert>
 800be02:	e016      	b.n	800be32 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be04:	2300      	movs	r3, #0
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	2300      	movs	r3, #0
 800be0a:	693a      	ldr	r2, [r7, #16]
 800be0c:	2100      	movs	r1, #0
 800be0e:	68f8      	ldr	r0, [r7, #12]
 800be10:	f7ff fd60 	bl	800b8d4 <xTimerGenericCommand>
 800be14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d10a      	bne.n	800be32 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800be1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be20:	f383 8811 	msr	BASEPRI, r3
 800be24:	f3bf 8f6f 	isb	sy
 800be28:	f3bf 8f4f 	dsb	sy
 800be2c:	603b      	str	r3, [r7, #0]
}
 800be2e:	bf00      	nop
 800be30:	e7fe      	b.n	800be30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be32:	4b09      	ldr	r3, [pc, #36]	; (800be58 <prvSwitchTimerLists+0xc0>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d1b1      	bne.n	800bda0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800be3c:	4b06      	ldr	r3, [pc, #24]	; (800be58 <prvSwitchTimerLists+0xc0>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800be42:	4b06      	ldr	r3, [pc, #24]	; (800be5c <prvSwitchTimerLists+0xc4>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4a04      	ldr	r2, [pc, #16]	; (800be58 <prvSwitchTimerLists+0xc0>)
 800be48:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800be4a:	4a04      	ldr	r2, [pc, #16]	; (800be5c <prvSwitchTimerLists+0xc4>)
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	6013      	str	r3, [r2, #0]
}
 800be50:	bf00      	nop
 800be52:	3718      	adds	r7, #24
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	20000e00 	.word	0x20000e00
 800be5c:	20000e04 	.word	0x20000e04

0800be60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800be66:	f000 f965 	bl	800c134 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800be6a:	4b15      	ldr	r3, [pc, #84]	; (800bec0 <prvCheckForValidListAndQueue+0x60>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d120      	bne.n	800beb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800be72:	4814      	ldr	r0, [pc, #80]	; (800bec4 <prvCheckForValidListAndQueue+0x64>)
 800be74:	f7fd ffb8 	bl	8009de8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800be78:	4813      	ldr	r0, [pc, #76]	; (800bec8 <prvCheckForValidListAndQueue+0x68>)
 800be7a:	f7fd ffb5 	bl	8009de8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800be7e:	4b13      	ldr	r3, [pc, #76]	; (800becc <prvCheckForValidListAndQueue+0x6c>)
 800be80:	4a10      	ldr	r2, [pc, #64]	; (800bec4 <prvCheckForValidListAndQueue+0x64>)
 800be82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800be84:	4b12      	ldr	r3, [pc, #72]	; (800bed0 <prvCheckForValidListAndQueue+0x70>)
 800be86:	4a10      	ldr	r2, [pc, #64]	; (800bec8 <prvCheckForValidListAndQueue+0x68>)
 800be88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be8a:	2300      	movs	r3, #0
 800be8c:	9300      	str	r3, [sp, #0]
 800be8e:	4b11      	ldr	r3, [pc, #68]	; (800bed4 <prvCheckForValidListAndQueue+0x74>)
 800be90:	4a11      	ldr	r2, [pc, #68]	; (800bed8 <prvCheckForValidListAndQueue+0x78>)
 800be92:	2110      	movs	r1, #16
 800be94:	200a      	movs	r0, #10
 800be96:	f7fe f8c3 	bl	800a020 <xQueueGenericCreateStatic>
 800be9a:	4603      	mov	r3, r0
 800be9c:	4a08      	ldr	r2, [pc, #32]	; (800bec0 <prvCheckForValidListAndQueue+0x60>)
 800be9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bea0:	4b07      	ldr	r3, [pc, #28]	; (800bec0 <prvCheckForValidListAndQueue+0x60>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d005      	beq.n	800beb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bea8:	4b05      	ldr	r3, [pc, #20]	; (800bec0 <prvCheckForValidListAndQueue+0x60>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	490b      	ldr	r1, [pc, #44]	; (800bedc <prvCheckForValidListAndQueue+0x7c>)
 800beae:	4618      	mov	r0, r3
 800beb0:	f7fe fcdc 	bl	800a86c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800beb4:	f000 f96e 	bl	800c194 <vPortExitCritical>
}
 800beb8:	bf00      	nop
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	20000e08 	.word	0x20000e08
 800bec4:	20000dd8 	.word	0x20000dd8
 800bec8:	20000dec 	.word	0x20000dec
 800becc:	20000e00 	.word	0x20000e00
 800bed0:	20000e04 	.word	0x20000e04
 800bed4:	20000eb4 	.word	0x20000eb4
 800bed8:	20000e14 	.word	0x20000e14
 800bedc:	0800dc30 	.word	0x0800dc30

0800bee0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	3b04      	subs	r3, #4
 800bef0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	3b04      	subs	r3, #4
 800befe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	f023 0201 	bic.w	r2, r3, #1
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	3b04      	subs	r3, #4
 800bf0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf10:	4a0c      	ldr	r2, [pc, #48]	; (800bf44 <pxPortInitialiseStack+0x64>)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	3b14      	subs	r3, #20
 800bf1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	3b04      	subs	r3, #4
 800bf26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f06f 0202 	mvn.w	r2, #2
 800bf2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	3b20      	subs	r3, #32
 800bf34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf36:	68fb      	ldr	r3, [r7, #12]
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3714      	adds	r7, #20
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr
 800bf44:	0800bf49 	.word	0x0800bf49

0800bf48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b085      	sub	sp, #20
 800bf4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf52:	4b12      	ldr	r3, [pc, #72]	; (800bf9c <prvTaskExitError+0x54>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf5a:	d00a      	beq.n	800bf72 <prvTaskExitError+0x2a>
	__asm volatile
 800bf5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf60:	f383 8811 	msr	BASEPRI, r3
 800bf64:	f3bf 8f6f 	isb	sy
 800bf68:	f3bf 8f4f 	dsb	sy
 800bf6c:	60fb      	str	r3, [r7, #12]
}
 800bf6e:	bf00      	nop
 800bf70:	e7fe      	b.n	800bf70 <prvTaskExitError+0x28>
	__asm volatile
 800bf72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf76:	f383 8811 	msr	BASEPRI, r3
 800bf7a:	f3bf 8f6f 	isb	sy
 800bf7e:	f3bf 8f4f 	dsb	sy
 800bf82:	60bb      	str	r3, [r7, #8]
}
 800bf84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf86:	bf00      	nop
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d0fc      	beq.n	800bf88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf8e:	bf00      	nop
 800bf90:	bf00      	nop
 800bf92:	3714      	adds	r7, #20
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr
 800bf9c:	2000011c 	.word	0x2000011c

0800bfa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bfa0:	4b07      	ldr	r3, [pc, #28]	; (800bfc0 <pxCurrentTCBConst2>)
 800bfa2:	6819      	ldr	r1, [r3, #0]
 800bfa4:	6808      	ldr	r0, [r1, #0]
 800bfa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfaa:	f380 8809 	msr	PSP, r0
 800bfae:	f3bf 8f6f 	isb	sy
 800bfb2:	f04f 0000 	mov.w	r0, #0
 800bfb6:	f380 8811 	msr	BASEPRI, r0
 800bfba:	4770      	bx	lr
 800bfbc:	f3af 8000 	nop.w

0800bfc0 <pxCurrentTCBConst2>:
 800bfc0:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bfc4:	bf00      	nop
 800bfc6:	bf00      	nop

0800bfc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bfc8:	4808      	ldr	r0, [pc, #32]	; (800bfec <prvPortStartFirstTask+0x24>)
 800bfca:	6800      	ldr	r0, [r0, #0]
 800bfcc:	6800      	ldr	r0, [r0, #0]
 800bfce:	f380 8808 	msr	MSP, r0
 800bfd2:	f04f 0000 	mov.w	r0, #0
 800bfd6:	f380 8814 	msr	CONTROL, r0
 800bfda:	b662      	cpsie	i
 800bfdc:	b661      	cpsie	f
 800bfde:	f3bf 8f4f 	dsb	sy
 800bfe2:	f3bf 8f6f 	isb	sy
 800bfe6:	df00      	svc	0
 800bfe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bfea:	bf00      	nop
 800bfec:	e000ed08 	.word	0xe000ed08

0800bff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b086      	sub	sp, #24
 800bff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bff6:	4b46      	ldr	r3, [pc, #280]	; (800c110 <xPortStartScheduler+0x120>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4a46      	ldr	r2, [pc, #280]	; (800c114 <xPortStartScheduler+0x124>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d10a      	bne.n	800c016 <xPortStartScheduler+0x26>
	__asm volatile
 800c000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c004:	f383 8811 	msr	BASEPRI, r3
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	613b      	str	r3, [r7, #16]
}
 800c012:	bf00      	nop
 800c014:	e7fe      	b.n	800c014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c016:	4b3e      	ldr	r3, [pc, #248]	; (800c110 <xPortStartScheduler+0x120>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4a3f      	ldr	r2, [pc, #252]	; (800c118 <xPortStartScheduler+0x128>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d10a      	bne.n	800c036 <xPortStartScheduler+0x46>
	__asm volatile
 800c020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	60fb      	str	r3, [r7, #12]
}
 800c032:	bf00      	nop
 800c034:	e7fe      	b.n	800c034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c036:	4b39      	ldr	r3, [pc, #228]	; (800c11c <xPortStartScheduler+0x12c>)
 800c038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	22ff      	movs	r2, #255	; 0xff
 800c046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c050:	78fb      	ldrb	r3, [r7, #3]
 800c052:	b2db      	uxtb	r3, r3
 800c054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c058:	b2da      	uxtb	r2, r3
 800c05a:	4b31      	ldr	r3, [pc, #196]	; (800c120 <xPortStartScheduler+0x130>)
 800c05c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c05e:	4b31      	ldr	r3, [pc, #196]	; (800c124 <xPortStartScheduler+0x134>)
 800c060:	2207      	movs	r2, #7
 800c062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c064:	e009      	b.n	800c07a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c066:	4b2f      	ldr	r3, [pc, #188]	; (800c124 <xPortStartScheduler+0x134>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	3b01      	subs	r3, #1
 800c06c:	4a2d      	ldr	r2, [pc, #180]	; (800c124 <xPortStartScheduler+0x134>)
 800c06e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c070:	78fb      	ldrb	r3, [r7, #3]
 800c072:	b2db      	uxtb	r3, r3
 800c074:	005b      	lsls	r3, r3, #1
 800c076:	b2db      	uxtb	r3, r3
 800c078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c07a:	78fb      	ldrb	r3, [r7, #3]
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c082:	2b80      	cmp	r3, #128	; 0x80
 800c084:	d0ef      	beq.n	800c066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c086:	4b27      	ldr	r3, [pc, #156]	; (800c124 <xPortStartScheduler+0x134>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f1c3 0307 	rsb	r3, r3, #7
 800c08e:	2b04      	cmp	r3, #4
 800c090:	d00a      	beq.n	800c0a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c096:	f383 8811 	msr	BASEPRI, r3
 800c09a:	f3bf 8f6f 	isb	sy
 800c09e:	f3bf 8f4f 	dsb	sy
 800c0a2:	60bb      	str	r3, [r7, #8]
}
 800c0a4:	bf00      	nop
 800c0a6:	e7fe      	b.n	800c0a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c0a8:	4b1e      	ldr	r3, [pc, #120]	; (800c124 <xPortStartScheduler+0x134>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	021b      	lsls	r3, r3, #8
 800c0ae:	4a1d      	ldr	r2, [pc, #116]	; (800c124 <xPortStartScheduler+0x134>)
 800c0b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c0b2:	4b1c      	ldr	r3, [pc, #112]	; (800c124 <xPortStartScheduler+0x134>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c0ba:	4a1a      	ldr	r2, [pc, #104]	; (800c124 <xPortStartScheduler+0x134>)
 800c0bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	b2da      	uxtb	r2, r3
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0c6:	4b18      	ldr	r3, [pc, #96]	; (800c128 <xPortStartScheduler+0x138>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a17      	ldr	r2, [pc, #92]	; (800c128 <xPortStartScheduler+0x138>)
 800c0cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c0d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c0d2:	4b15      	ldr	r3, [pc, #84]	; (800c128 <xPortStartScheduler+0x138>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a14      	ldr	r2, [pc, #80]	; (800c128 <xPortStartScheduler+0x138>)
 800c0d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c0dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c0de:	f000 f8dd 	bl	800c29c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c0e2:	4b12      	ldr	r3, [pc, #72]	; (800c12c <xPortStartScheduler+0x13c>)
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c0e8:	f000 f8fc 	bl	800c2e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c0ec:	4b10      	ldr	r3, [pc, #64]	; (800c130 <xPortStartScheduler+0x140>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a0f      	ldr	r2, [pc, #60]	; (800c130 <xPortStartScheduler+0x140>)
 800c0f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c0f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c0f8:	f7ff ff66 	bl	800bfc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c0fc:	f7ff f856 	bl	800b1ac <vTaskSwitchContext>
	prvTaskExitError();
 800c100:	f7ff ff22 	bl	800bf48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3718      	adds	r7, #24
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	e000ed00 	.word	0xe000ed00
 800c114:	410fc271 	.word	0x410fc271
 800c118:	410fc270 	.word	0x410fc270
 800c11c:	e000e400 	.word	0xe000e400
 800c120:	20000f04 	.word	0x20000f04
 800c124:	20000f08 	.word	0x20000f08
 800c128:	e000ed20 	.word	0xe000ed20
 800c12c:	2000011c 	.word	0x2000011c
 800c130:	e000ef34 	.word	0xe000ef34

0800c134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c134:	b480      	push	{r7}
 800c136:	b083      	sub	sp, #12
 800c138:	af00      	add	r7, sp, #0
	__asm volatile
 800c13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13e:	f383 8811 	msr	BASEPRI, r3
 800c142:	f3bf 8f6f 	isb	sy
 800c146:	f3bf 8f4f 	dsb	sy
 800c14a:	607b      	str	r3, [r7, #4]
}
 800c14c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c14e:	4b0f      	ldr	r3, [pc, #60]	; (800c18c <vPortEnterCritical+0x58>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	3301      	adds	r3, #1
 800c154:	4a0d      	ldr	r2, [pc, #52]	; (800c18c <vPortEnterCritical+0x58>)
 800c156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c158:	4b0c      	ldr	r3, [pc, #48]	; (800c18c <vPortEnterCritical+0x58>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d10f      	bne.n	800c180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c160:	4b0b      	ldr	r3, [pc, #44]	; (800c190 <vPortEnterCritical+0x5c>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	b2db      	uxtb	r3, r3
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00a      	beq.n	800c180 <vPortEnterCritical+0x4c>
	__asm volatile
 800c16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16e:	f383 8811 	msr	BASEPRI, r3
 800c172:	f3bf 8f6f 	isb	sy
 800c176:	f3bf 8f4f 	dsb	sy
 800c17a:	603b      	str	r3, [r7, #0]
}
 800c17c:	bf00      	nop
 800c17e:	e7fe      	b.n	800c17e <vPortEnterCritical+0x4a>
	}
}
 800c180:	bf00      	nop
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr
 800c18c:	2000011c 	.word	0x2000011c
 800c190:	e000ed04 	.word	0xe000ed04

0800c194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c19a:	4b12      	ldr	r3, [pc, #72]	; (800c1e4 <vPortExitCritical+0x50>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d10a      	bne.n	800c1b8 <vPortExitCritical+0x24>
	__asm volatile
 800c1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a6:	f383 8811 	msr	BASEPRI, r3
 800c1aa:	f3bf 8f6f 	isb	sy
 800c1ae:	f3bf 8f4f 	dsb	sy
 800c1b2:	607b      	str	r3, [r7, #4]
}
 800c1b4:	bf00      	nop
 800c1b6:	e7fe      	b.n	800c1b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c1b8:	4b0a      	ldr	r3, [pc, #40]	; (800c1e4 <vPortExitCritical+0x50>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	4a09      	ldr	r2, [pc, #36]	; (800c1e4 <vPortExitCritical+0x50>)
 800c1c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c1c2:	4b08      	ldr	r3, [pc, #32]	; (800c1e4 <vPortExitCritical+0x50>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d105      	bne.n	800c1d6 <vPortExitCritical+0x42>
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	f383 8811 	msr	BASEPRI, r3
}
 800c1d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c1d6:	bf00      	nop
 800c1d8:	370c      	adds	r7, #12
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	2000011c 	.word	0x2000011c
	...

0800c1f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c1f0:	f3ef 8009 	mrs	r0, PSP
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	4b15      	ldr	r3, [pc, #84]	; (800c250 <pxCurrentTCBConst>)
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	f01e 0f10 	tst.w	lr, #16
 800c200:	bf08      	it	eq
 800c202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c20a:	6010      	str	r0, [r2, #0]
 800c20c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c210:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c214:	f380 8811 	msr	BASEPRI, r0
 800c218:	f3bf 8f4f 	dsb	sy
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f7fe ffc4 	bl	800b1ac <vTaskSwitchContext>
 800c224:	f04f 0000 	mov.w	r0, #0
 800c228:	f380 8811 	msr	BASEPRI, r0
 800c22c:	bc09      	pop	{r0, r3}
 800c22e:	6819      	ldr	r1, [r3, #0]
 800c230:	6808      	ldr	r0, [r1, #0]
 800c232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c236:	f01e 0f10 	tst.w	lr, #16
 800c23a:	bf08      	it	eq
 800c23c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c240:	f380 8809 	msr	PSP, r0
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop
 800c24c:	f3af 8000 	nop.w

0800c250 <pxCurrentTCBConst>:
 800c250:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c254:	bf00      	nop
 800c256:	bf00      	nop

0800c258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
	__asm volatile
 800c25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c262:	f383 8811 	msr	BASEPRI, r3
 800c266:	f3bf 8f6f 	isb	sy
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	607b      	str	r3, [r7, #4]
}
 800c270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c272:	f7fe fee1 	bl	800b038 <xTaskIncrementTick>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d003      	beq.n	800c284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c27c:	4b06      	ldr	r3, [pc, #24]	; (800c298 <xPortSysTickHandler+0x40>)
 800c27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c282:	601a      	str	r2, [r3, #0]
 800c284:	2300      	movs	r3, #0
 800c286:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	f383 8811 	msr	BASEPRI, r3
}
 800c28e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c290:	bf00      	nop
 800c292:	3708      	adds	r7, #8
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	e000ed04 	.word	0xe000ed04

0800c29c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c29c:	b480      	push	{r7}
 800c29e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c2a0:	4b0b      	ldr	r3, [pc, #44]	; (800c2d0 <vPortSetupTimerInterrupt+0x34>)
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c2a6:	4b0b      	ldr	r3, [pc, #44]	; (800c2d4 <vPortSetupTimerInterrupt+0x38>)
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c2ac:	4b0a      	ldr	r3, [pc, #40]	; (800c2d8 <vPortSetupTimerInterrupt+0x3c>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a0a      	ldr	r2, [pc, #40]	; (800c2dc <vPortSetupTimerInterrupt+0x40>)
 800c2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2b6:	099b      	lsrs	r3, r3, #6
 800c2b8:	4a09      	ldr	r2, [pc, #36]	; (800c2e0 <vPortSetupTimerInterrupt+0x44>)
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c2be:	4b04      	ldr	r3, [pc, #16]	; (800c2d0 <vPortSetupTimerInterrupt+0x34>)
 800c2c0:	2207      	movs	r2, #7
 800c2c2:	601a      	str	r2, [r3, #0]
}
 800c2c4:	bf00      	nop
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	e000e010 	.word	0xe000e010
 800c2d4:	e000e018 	.word	0xe000e018
 800c2d8:	20000000 	.word	0x20000000
 800c2dc:	10624dd3 	.word	0x10624dd3
 800c2e0:	e000e014 	.word	0xe000e014

0800c2e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c2e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c2f4 <vPortEnableVFP+0x10>
 800c2e8:	6801      	ldr	r1, [r0, #0]
 800c2ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c2ee:	6001      	str	r1, [r0, #0]
 800c2f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c2f2:	bf00      	nop
 800c2f4:	e000ed88 	.word	0xe000ed88

0800c2f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c2fe:	f3ef 8305 	mrs	r3, IPSR
 800c302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2b0f      	cmp	r3, #15
 800c308:	d914      	bls.n	800c334 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c30a:	4a17      	ldr	r2, [pc, #92]	; (800c368 <vPortValidateInterruptPriority+0x70>)
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	4413      	add	r3, r2
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c314:	4b15      	ldr	r3, [pc, #84]	; (800c36c <vPortValidateInterruptPriority+0x74>)
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	7afa      	ldrb	r2, [r7, #11]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d20a      	bcs.n	800c334 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	607b      	str	r3, [r7, #4]
}
 800c330:	bf00      	nop
 800c332:	e7fe      	b.n	800c332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c334:	4b0e      	ldr	r3, [pc, #56]	; (800c370 <vPortValidateInterruptPriority+0x78>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c33c:	4b0d      	ldr	r3, [pc, #52]	; (800c374 <vPortValidateInterruptPriority+0x7c>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	429a      	cmp	r2, r3
 800c342:	d90a      	bls.n	800c35a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c348:	f383 8811 	msr	BASEPRI, r3
 800c34c:	f3bf 8f6f 	isb	sy
 800c350:	f3bf 8f4f 	dsb	sy
 800c354:	603b      	str	r3, [r7, #0]
}
 800c356:	bf00      	nop
 800c358:	e7fe      	b.n	800c358 <vPortValidateInterruptPriority+0x60>
	}
 800c35a:	bf00      	nop
 800c35c:	3714      	adds	r7, #20
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop
 800c368:	e000e3f0 	.word	0xe000e3f0
 800c36c:	20000f04 	.word	0x20000f04
 800c370:	e000ed0c 	.word	0xe000ed0c
 800c374:	20000f08 	.word	0x20000f08

0800c378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b08a      	sub	sp, #40	; 0x28
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c380:	2300      	movs	r3, #0
 800c382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c384:	f7fe fd8a 	bl	800ae9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c388:	4b5b      	ldr	r3, [pc, #364]	; (800c4f8 <pvPortMalloc+0x180>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d101      	bne.n	800c394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c390:	f000 f920 	bl	800c5d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c394:	4b59      	ldr	r3, [pc, #356]	; (800c4fc <pvPortMalloc+0x184>)
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4013      	ands	r3, r2
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	f040 8093 	bne.w	800c4c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d01d      	beq.n	800c3e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c3a8:	2208      	movs	r2, #8
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f003 0307 	and.w	r3, r3, #7
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d014      	beq.n	800c3e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f023 0307 	bic.w	r3, r3, #7
 800c3c0:	3308      	adds	r3, #8
 800c3c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f003 0307 	and.w	r3, r3, #7
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d00a      	beq.n	800c3e4 <pvPortMalloc+0x6c>
	__asm volatile
 800c3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d2:	f383 8811 	msr	BASEPRI, r3
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	f3bf 8f4f 	dsb	sy
 800c3de:	617b      	str	r3, [r7, #20]
}
 800c3e0:	bf00      	nop
 800c3e2:	e7fe      	b.n	800c3e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d06e      	beq.n	800c4c8 <pvPortMalloc+0x150>
 800c3ea:	4b45      	ldr	r3, [pc, #276]	; (800c500 <pvPortMalloc+0x188>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d869      	bhi.n	800c4c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c3f4:	4b43      	ldr	r3, [pc, #268]	; (800c504 <pvPortMalloc+0x18c>)
 800c3f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c3f8:	4b42      	ldr	r3, [pc, #264]	; (800c504 <pvPortMalloc+0x18c>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3fe:	e004      	b.n	800c40a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	429a      	cmp	r2, r3
 800c412:	d903      	bls.n	800c41c <pvPortMalloc+0xa4>
 800c414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d1f1      	bne.n	800c400 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c41c:	4b36      	ldr	r3, [pc, #216]	; (800c4f8 <pvPortMalloc+0x180>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c422:	429a      	cmp	r2, r3
 800c424:	d050      	beq.n	800c4c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c426:	6a3b      	ldr	r3, [r7, #32]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2208      	movs	r2, #8
 800c42c:	4413      	add	r3, r2
 800c42e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	6a3b      	ldr	r3, [r7, #32]
 800c436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43a:	685a      	ldr	r2, [r3, #4]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	1ad2      	subs	r2, r2, r3
 800c440:	2308      	movs	r3, #8
 800c442:	005b      	lsls	r3, r3, #1
 800c444:	429a      	cmp	r2, r3
 800c446:	d91f      	bls.n	800c488 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4413      	add	r3, r2
 800c44e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	f003 0307 	and.w	r3, r3, #7
 800c456:	2b00      	cmp	r3, #0
 800c458:	d00a      	beq.n	800c470 <pvPortMalloc+0xf8>
	__asm volatile
 800c45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45e:	f383 8811 	msr	BASEPRI, r3
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	f3bf 8f4f 	dsb	sy
 800c46a:	613b      	str	r3, [r7, #16]
}
 800c46c:	bf00      	nop
 800c46e:	e7fe      	b.n	800c46e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c472:	685a      	ldr	r2, [r3, #4]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	1ad2      	subs	r2, r2, r3
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c482:	69b8      	ldr	r0, [r7, #24]
 800c484:	f000 f908 	bl	800c698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c488:	4b1d      	ldr	r3, [pc, #116]	; (800c500 <pvPortMalloc+0x188>)
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	4a1b      	ldr	r2, [pc, #108]	; (800c500 <pvPortMalloc+0x188>)
 800c494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c496:	4b1a      	ldr	r3, [pc, #104]	; (800c500 <pvPortMalloc+0x188>)
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	4b1b      	ldr	r3, [pc, #108]	; (800c508 <pvPortMalloc+0x190>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d203      	bcs.n	800c4aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c4a2:	4b17      	ldr	r3, [pc, #92]	; (800c500 <pvPortMalloc+0x188>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a18      	ldr	r2, [pc, #96]	; (800c508 <pvPortMalloc+0x190>)
 800c4a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ac:	685a      	ldr	r2, [r3, #4]
 800c4ae:	4b13      	ldr	r3, [pc, #76]	; (800c4fc <pvPortMalloc+0x184>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	431a      	orrs	r2, r3
 800c4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c4be:	4b13      	ldr	r3, [pc, #76]	; (800c50c <pvPortMalloc+0x194>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	4a11      	ldr	r2, [pc, #68]	; (800c50c <pvPortMalloc+0x194>)
 800c4c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c4c8:	f7fe fcf6 	bl	800aeb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	f003 0307 	and.w	r3, r3, #7
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00a      	beq.n	800c4ec <pvPortMalloc+0x174>
	__asm volatile
 800c4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4da:	f383 8811 	msr	BASEPRI, r3
 800c4de:	f3bf 8f6f 	isb	sy
 800c4e2:	f3bf 8f4f 	dsb	sy
 800c4e6:	60fb      	str	r3, [r7, #12]
}
 800c4e8:	bf00      	nop
 800c4ea:	e7fe      	b.n	800c4ea <pvPortMalloc+0x172>
	return pvReturn;
 800c4ec:	69fb      	ldr	r3, [r7, #28]
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3728      	adds	r7, #40	; 0x28
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	20004b14 	.word	0x20004b14
 800c4fc:	20004b28 	.word	0x20004b28
 800c500:	20004b18 	.word	0x20004b18
 800c504:	20004b0c 	.word	0x20004b0c
 800c508:	20004b1c 	.word	0x20004b1c
 800c50c:	20004b20 	.word	0x20004b20

0800c510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b086      	sub	sp, #24
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d04d      	beq.n	800c5be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c522:	2308      	movs	r3, #8
 800c524:	425b      	negs	r3, r3
 800c526:	697a      	ldr	r2, [r7, #20]
 800c528:	4413      	add	r3, r2
 800c52a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	685a      	ldr	r2, [r3, #4]
 800c534:	4b24      	ldr	r3, [pc, #144]	; (800c5c8 <vPortFree+0xb8>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4013      	ands	r3, r2
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d10a      	bne.n	800c554 <vPortFree+0x44>
	__asm volatile
 800c53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c542:	f383 8811 	msr	BASEPRI, r3
 800c546:	f3bf 8f6f 	isb	sy
 800c54a:	f3bf 8f4f 	dsb	sy
 800c54e:	60fb      	str	r3, [r7, #12]
}
 800c550:	bf00      	nop
 800c552:	e7fe      	b.n	800c552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00a      	beq.n	800c572 <vPortFree+0x62>
	__asm volatile
 800c55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c560:	f383 8811 	msr	BASEPRI, r3
 800c564:	f3bf 8f6f 	isb	sy
 800c568:	f3bf 8f4f 	dsb	sy
 800c56c:	60bb      	str	r3, [r7, #8]
}
 800c56e:	bf00      	nop
 800c570:	e7fe      	b.n	800c570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	685a      	ldr	r2, [r3, #4]
 800c576:	4b14      	ldr	r3, [pc, #80]	; (800c5c8 <vPortFree+0xb8>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4013      	ands	r3, r2
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d01e      	beq.n	800c5be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d11a      	bne.n	800c5be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	685a      	ldr	r2, [r3, #4]
 800c58c:	4b0e      	ldr	r3, [pc, #56]	; (800c5c8 <vPortFree+0xb8>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	43db      	mvns	r3, r3
 800c592:	401a      	ands	r2, r3
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c598:	f7fe fc80 	bl	800ae9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	685a      	ldr	r2, [r3, #4]
 800c5a0:	4b0a      	ldr	r3, [pc, #40]	; (800c5cc <vPortFree+0xbc>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	4a09      	ldr	r2, [pc, #36]	; (800c5cc <vPortFree+0xbc>)
 800c5a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c5aa:	6938      	ldr	r0, [r7, #16]
 800c5ac:	f000 f874 	bl	800c698 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c5b0:	4b07      	ldr	r3, [pc, #28]	; (800c5d0 <vPortFree+0xc0>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	4a06      	ldr	r2, [pc, #24]	; (800c5d0 <vPortFree+0xc0>)
 800c5b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c5ba:	f7fe fc7d 	bl	800aeb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c5be:	bf00      	nop
 800c5c0:	3718      	adds	r7, #24
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	20004b28 	.word	0x20004b28
 800c5cc:	20004b18 	.word	0x20004b18
 800c5d0:	20004b24 	.word	0x20004b24

0800c5d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b085      	sub	sp, #20
 800c5d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c5da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c5de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c5e0:	4b27      	ldr	r3, [pc, #156]	; (800c680 <prvHeapInit+0xac>)
 800c5e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f003 0307 	and.w	r3, r3, #7
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d00c      	beq.n	800c608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	3307      	adds	r3, #7
 800c5f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f023 0307 	bic.w	r3, r3, #7
 800c5fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c5fc:	68ba      	ldr	r2, [r7, #8]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	4a1f      	ldr	r2, [pc, #124]	; (800c680 <prvHeapInit+0xac>)
 800c604:	4413      	add	r3, r2
 800c606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c60c:	4a1d      	ldr	r2, [pc, #116]	; (800c684 <prvHeapInit+0xb0>)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c612:	4b1c      	ldr	r3, [pc, #112]	; (800c684 <prvHeapInit+0xb0>)
 800c614:	2200      	movs	r2, #0
 800c616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	68ba      	ldr	r2, [r7, #8]
 800c61c:	4413      	add	r3, r2
 800c61e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c620:	2208      	movs	r2, #8
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	1a9b      	subs	r3, r3, r2
 800c626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f023 0307 	bic.w	r3, r3, #7
 800c62e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	4a15      	ldr	r2, [pc, #84]	; (800c688 <prvHeapInit+0xb4>)
 800c634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c636:	4b14      	ldr	r3, [pc, #80]	; (800c688 <prvHeapInit+0xb4>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	2200      	movs	r2, #0
 800c63c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c63e:	4b12      	ldr	r3, [pc, #72]	; (800c688 <prvHeapInit+0xb4>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2200      	movs	r2, #0
 800c644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	1ad2      	subs	r2, r2, r3
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c654:	4b0c      	ldr	r3, [pc, #48]	; (800c688 <prvHeapInit+0xb4>)
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	4a0a      	ldr	r2, [pc, #40]	; (800c68c <prvHeapInit+0xb8>)
 800c662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	4a09      	ldr	r2, [pc, #36]	; (800c690 <prvHeapInit+0xbc>)
 800c66a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c66c:	4b09      	ldr	r3, [pc, #36]	; (800c694 <prvHeapInit+0xc0>)
 800c66e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c672:	601a      	str	r2, [r3, #0]
}
 800c674:	bf00      	nop
 800c676:	3714      	adds	r7, #20
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr
 800c680:	20000f0c 	.word	0x20000f0c
 800c684:	20004b0c 	.word	0x20004b0c
 800c688:	20004b14 	.word	0x20004b14
 800c68c:	20004b1c 	.word	0x20004b1c
 800c690:	20004b18 	.word	0x20004b18
 800c694:	20004b28 	.word	0x20004b28

0800c698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c698:	b480      	push	{r7}
 800c69a:	b085      	sub	sp, #20
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c6a0:	4b28      	ldr	r3, [pc, #160]	; (800c744 <prvInsertBlockIntoFreeList+0xac>)
 800c6a2:	60fb      	str	r3, [r7, #12]
 800c6a4:	e002      	b.n	800c6ac <prvInsertBlockIntoFreeList+0x14>
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	60fb      	str	r3, [r7, #12]
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d8f7      	bhi.n	800c6a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	68ba      	ldr	r2, [r7, #8]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d108      	bne.n	800c6da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	685a      	ldr	r2, [r3, #4]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	441a      	add	r2, r3
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	68ba      	ldr	r2, [r7, #8]
 800c6e4:	441a      	add	r2, r3
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d118      	bne.n	800c720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	4b15      	ldr	r3, [pc, #84]	; (800c748 <prvInsertBlockIntoFreeList+0xb0>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d00d      	beq.n	800c716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	685a      	ldr	r2, [r3, #4]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	441a      	add	r2, r3
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	681a      	ldr	r2, [r3, #0]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	601a      	str	r2, [r3, #0]
 800c714:	e008      	b.n	800c728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c716:	4b0c      	ldr	r3, [pc, #48]	; (800c748 <prvInsertBlockIntoFreeList+0xb0>)
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	601a      	str	r2, [r3, #0]
 800c71e:	e003      	b.n	800c728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d002      	beq.n	800c736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	687a      	ldr	r2, [r7, #4]
 800c734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c736:	bf00      	nop
 800c738:	3714      	adds	r7, #20
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr
 800c742:	bf00      	nop
 800c744:	20004b0c 	.word	0x20004b0c
 800c748:	20004b14 	.word	0x20004b14

0800c74c <MX_USB_DEVICE_Init>:

/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(void) {
 800c74c:	b580      	push	{r7, lr}
 800c74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800c750:	2200      	movs	r2, #0
 800c752:	4912      	ldr	r1, [pc, #72]	; (800c79c <MX_USB_DEVICE_Init+0x50>)
 800c754:	4812      	ldr	r0, [pc, #72]	; (800c7a0 <MX_USB_DEVICE_Init+0x54>)
 800c756:	f7fc f823 	bl	80087a0 <USBD_Init>
 800c75a:	4603      	mov	r3, r0
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d001      	beq.n	800c764 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800c760:	f7f4 fbf4 	bl	8000f4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c764:	490f      	ldr	r1, [pc, #60]	; (800c7a4 <MX_USB_DEVICE_Init+0x58>)
 800c766:	480e      	ldr	r0, [pc, #56]	; (800c7a0 <MX_USB_DEVICE_Init+0x54>)
 800c768:	f7fc f84a 	bl	8008800 <USBD_RegisterClass>
 800c76c:	4603      	mov	r3, r0
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d001      	beq.n	800c776 <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 800c772:	f7f4 fbeb 	bl	8000f4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c776:	490c      	ldr	r1, [pc, #48]	; (800c7a8 <MX_USB_DEVICE_Init+0x5c>)
 800c778:	4809      	ldr	r0, [pc, #36]	; (800c7a0 <MX_USB_DEVICE_Init+0x54>)
 800c77a:	f7fb ff6b 	bl	8008654 <USBD_CDC_RegisterInterface>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b00      	cmp	r3, #0
 800c782:	d001      	beq.n	800c788 <MX_USB_DEVICE_Init+0x3c>
    Error_Handler();
 800c784:	f7f4 fbe2 	bl	8000f4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c788:	4805      	ldr	r0, [pc, #20]	; (800c7a0 <MX_USB_DEVICE_Init+0x54>)
 800c78a:	f7fc f860 	bl	800884e <USBD_Start>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d001      	beq.n	800c798 <MX_USB_DEVICE_Init+0x4c>
    Error_Handler();
 800c794:	f7f4 fbda 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c798:	bf00      	nop
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	20000134 	.word	0x20000134
 800c7a0:	20007104 	.word	0x20007104
 800c7a4:	20000018 	.word	0x20000018
 800c7a8:	20000120 	.word	0x20000120

0800c7ac <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	af00      	add	r7, sp, #0
  TIM_Config();
 800c7b0:	f000 f91a 	bl	800c9e8 <TIM_Config>

  if (HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK) {
 800c7b4:	480b      	ldr	r0, [pc, #44]	; (800c7e4 <CDC_Init_FS+0x38>)
 800c7b6:	f7f9 fa0b 	bl	8005bd0 <HAL_TIM_Base_Start_IT>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d001      	beq.n	800c7c4 <CDC_Init_FS+0x18>
    /* Starting Error */
    Error_Handler();
 800c7c0:	f7f4 fbc4 	bl	8000f4c <Error_Handler>
  }
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 512);
 800c7c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7c8:	4907      	ldr	r1, [pc, #28]	; (800c7e8 <CDC_Init_FS+0x3c>)
 800c7ca:	4808      	ldr	r0, [pc, #32]	; (800c7ec <CDC_Init_FS+0x40>)
 800c7cc:	f7fb ff57 	bl	800867e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c7d0:	4907      	ldr	r1, [pc, #28]	; (800c7f0 <CDC_Init_FS+0x44>)
 800c7d2:	4806      	ldr	r0, [pc, #24]	; (800c7ec <CDC_Init_FS+0x40>)
 800c7d4:	f7fb ff71 	bl	80086ba <USBD_CDC_SetRxBuffer>

  usb_initialized = true;
 800c7d8:	4b06      	ldr	r3, [pc, #24]	; (800c7f4 <CDC_Init_FS+0x48>)
 800c7da:	2201      	movs	r2, #1
 800c7dc:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	20007658 	.word	0x20007658
 800c7e8:	20007414 	.word	0x20007414
 800c7ec:	20007104 	.word	0x20007104
 800c7f0:	200073d4 	.word	0x200073d4
 800c7f4:	20004b2c 	.word	0x20004b2c

0800c7f8 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 800c7f8:	b480      	push	{r7}
 800c7fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c7fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	4603      	mov	r3, r0
 800c810:	6039      	str	r1, [r7, #0]
 800c812:	71fb      	strb	r3, [r7, #7]
 800c814:	4613      	mov	r3, r2
 800c816:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  UNUSED(length);
  uint32_t speed = 115200;
 800c818:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800c81c:	60fb      	str	r3, [r7, #12]
  switch (cmd) {
 800c81e:	79fb      	ldrb	r3, [r7, #7]
 800c820:	2b23      	cmp	r3, #35	; 0x23
 800c822:	d86e      	bhi.n	800c902 <CDC_Control_FS+0xfa>
 800c824:	a201      	add	r2, pc, #4	; (adr r2, 800c82c <CDC_Control_FS+0x24>)
 800c826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c82a:	bf00      	nop
 800c82c:	0800c903 	.word	0x0800c903
 800c830:	0800c903 	.word	0x0800c903
 800c834:	0800c903 	.word	0x0800c903
 800c838:	0800c903 	.word	0x0800c903
 800c83c:	0800c903 	.word	0x0800c903
 800c840:	0800c903 	.word	0x0800c903
 800c844:	0800c903 	.word	0x0800c903
 800c848:	0800c903 	.word	0x0800c903
 800c84c:	0800c903 	.word	0x0800c903
 800c850:	0800c903 	.word	0x0800c903
 800c854:	0800c903 	.word	0x0800c903
 800c858:	0800c903 	.word	0x0800c903
 800c85c:	0800c903 	.word	0x0800c903
 800c860:	0800c903 	.word	0x0800c903
 800c864:	0800c903 	.word	0x0800c903
 800c868:	0800c903 	.word	0x0800c903
 800c86c:	0800c903 	.word	0x0800c903
 800c870:	0800c903 	.word	0x0800c903
 800c874:	0800c903 	.word	0x0800c903
 800c878:	0800c903 	.word	0x0800c903
 800c87c:	0800c903 	.word	0x0800c903
 800c880:	0800c903 	.word	0x0800c903
 800c884:	0800c903 	.word	0x0800c903
 800c888:	0800c903 	.word	0x0800c903
 800c88c:	0800c903 	.word	0x0800c903
 800c890:	0800c903 	.word	0x0800c903
 800c894:	0800c903 	.word	0x0800c903
 800c898:	0800c903 	.word	0x0800c903
 800c89c:	0800c903 	.word	0x0800c903
 800c8a0:	0800c903 	.word	0x0800c903
 800c8a4:	0800c903 	.word	0x0800c903
 800c8a8:	0800c903 	.word	0x0800c903
 800c8ac:	0800c903 	.word	0x0800c903
 800c8b0:	0800c8bd 	.word	0x0800c8bd
 800c8b4:	0800c903 	.word	0x0800c903
 800c8b8:	0800c903 	.word	0x0800c903
    case CDC_SET_LINE_CODING:

      break;

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(speed);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	b2da      	uxtb	r2, r3
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(speed >> 8);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	0a1a      	lsrs	r2, r3, #8
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	b2d2      	uxtb	r2, r2
 800c8ce:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(speed >> 16);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	0c1a      	lsrs	r2, r3, #16
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	3302      	adds	r3, #2
 800c8d8:	b2d2      	uxtb	r2, r2
 800c8da:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(speed >> 24);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	0e1a      	lsrs	r2, r3, #24
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	3303      	adds	r3, #3
 800c8e4:	b2d2      	uxtb	r2, r2
 800c8e6:	701a      	strb	r2, [r3, #0]
      pbuf[4] = 0;
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	3304      	adds	r3, #4
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	701a      	strb	r2, [r3, #0]
      pbuf[5] = 0;
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	3305      	adds	r3, #5
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	701a      	strb	r2, [r3, #0]
      pbuf[6] = 8;
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	3306      	adds	r3, #6
 800c8fc:	2208      	movs	r2, #8
 800c8fe:	701a      	strb	r2, [r3, #0]
      break;
 800c900:	e000      	b.n	800c904 <CDC_Control_FS+0xfc>
    case CDC_SEND_BREAK:

      break;

    default:
      break;
 800c902:	bf00      	nop
  }

  return (USBD_OK);
 800c904:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c906:	4618      	mov	r0, r3
 800c908:	3714      	adds	r7, #20
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop

0800c914 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t buf_length = *Len;
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	60fb      	str	r3, [r7, #12]
  if (buf_length != 0) {
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d004      	beq.n	800c934 <CDC_Receive_FS+0x20>
    fifo_write_bytes(&usb_input_fifo, Buf, buf_length);
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	6879      	ldr	r1, [r7, #4]
 800c92e:	4807      	ldr	r0, [pc, #28]	; (800c94c <CDC_Receive_FS+0x38>)
 800c930:	f7f5 fd25 	bl	800237e <fifo_write_bytes>
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c934:	6879      	ldr	r1, [r7, #4]
 800c936:	4806      	ldr	r0, [pc, #24]	; (800c950 <CDC_Receive_FS+0x3c>)
 800c938:	f7fb febf 	bl	80086ba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c93c:	4804      	ldr	r0, [pc, #16]	; (800c950 <CDC_Receive_FS+0x3c>)
 800c93e:	f7fb ff05 	bl	800874c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c942:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c944:	4618      	mov	r0, r3
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	20004f50 	.word	0x20004f50
 800c950:	20007104 	.word	0x20007104

0800c954 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 800c954:	b480      	push	{r7}
 800c956:	b087      	sub	sp, #28
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	4613      	mov	r3, r2
 800c960:	71fb      	strb	r3, [r7, #7]
  int8_t result = USBD_OK;
 800c962:	2300      	movs	r3, #0
 800c964:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c966:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	371c      	adds	r7, #28
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr
	...

0800c978 <TIM5_IRQHandler>:

void TIMUsb_IRQHandler(void) {
 800c978:	b580      	push	{r7, lr}
 800c97a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TimHandle);
 800c97c:	4802      	ldr	r0, [pc, #8]	; (800c988 <TIM5_IRQHandler+0x10>)
 800c97e:	f7f9 f9d8 	bl	8005d32 <HAL_TIM_IRQHandler>
}
 800c982:	bf00      	nop
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	20007658 	.word	0x20007658

0800c98c <CDC_Transmit_Elapsed>:

void CDC_Transmit_Elapsed() {
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800c992:	4b12      	ldr	r3, [pc, #72]	; (800c9dc <CDC_Transmit_Elapsed+0x50>)
 800c994:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c998:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState == 0) {
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d116      	bne.n	800c9d2 <CDC_Transmit_Elapsed+0x46>
    // Check usb fifo and print out to usb
    uint32_t len = fifo_get_length(&usb_output_fifo);
 800c9a4:	480e      	ldr	r0, [pc, #56]	; (800c9e0 <CDC_Transmit_Elapsed+0x54>)
 800c9a6:	f7f5 fc70 	bl	800228a <fifo_get_length>
 800c9aa:	6038      	str	r0, [r7, #0]
    if (len) {
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d00f      	beq.n	800c9d2 <CDC_Transmit_Elapsed+0x46>
      if (fifo_read_bytes(&usb_output_fifo, UserTxBufferFS, len)) {
 800c9b2:	683a      	ldr	r2, [r7, #0]
 800c9b4:	490b      	ldr	r1, [pc, #44]	; (800c9e4 <CDC_Transmit_Elapsed+0x58>)
 800c9b6:	480a      	ldr	r0, [pc, #40]	; (800c9e0 <CDC_Transmit_Elapsed+0x54>)
 800c9b8:	f7f5 fc73 	bl	80022a2 <fifo_read_bytes>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d007      	beq.n	800c9d2 <CDC_Transmit_Elapsed+0x46>
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, len);
 800c9c2:	683a      	ldr	r2, [r7, #0]
 800c9c4:	4907      	ldr	r1, [pc, #28]	; (800c9e4 <CDC_Transmit_Elapsed+0x58>)
 800c9c6:	4805      	ldr	r0, [pc, #20]	; (800c9dc <CDC_Transmit_Elapsed+0x50>)
 800c9c8:	f7fb fe59 	bl	800867e <USBD_CDC_SetTxBuffer>
        USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c9cc:	4803      	ldr	r0, [pc, #12]	; (800c9dc <CDC_Transmit_Elapsed+0x50>)
 800c9ce:	f7fb fe8d 	bl	80086ec <USBD_CDC_TransmitPacket>
      }
    }
  }
}
 800c9d2:	bf00      	nop
 800c9d4:	3708      	adds	r7, #8
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	20007104 	.word	0x20007104
 800c9e0:	20005168 	.word	0x20005168
 800c9e4:	20007414 	.word	0x20007414

0800c9e8 <TIM_Config>:

static void TIM_Config(void) {
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
   /* Enable TIM peripherals Clock */
  TIMUsb_CLK_ENABLE();
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	607b      	str	r3, [r7, #4]
 800c9f2:	4b1b      	ldr	r3, [pc, #108]	; (800ca60 <TIM_Config+0x78>)
 800c9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f6:	4a1a      	ldr	r2, [pc, #104]	; (800ca60 <TIM_Config+0x78>)
 800c9f8:	f043 0308 	orr.w	r3, r3, #8
 800c9fc:	6413      	str	r3, [r2, #64]	; 0x40
 800c9fe:	4b18      	ldr	r3, [pc, #96]	; (800ca60 <TIM_Config+0x78>)
 800ca00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca02:	f003 0308 	and.w	r3, r3, #8
 800ca06:	607b      	str	r3, [r7, #4]
 800ca08:	687b      	ldr	r3, [r7, #4]

  /* Set TIMUsb instance */
  TimHandle.Instance = TIMUsb;
 800ca0a:	4b16      	ldr	r3, [pc, #88]	; (800ca64 <TIM_Config+0x7c>)
 800ca0c:	4a16      	ldr	r2, [pc, #88]	; (800ca68 <TIM_Config+0x80>)
 800ca0e:	601a      	str	r2, [r3, #0]

  TimHandle.Init.Period = (CDC_POLLING_INTERVAL * 1000) - 1;
 800ca10:	4b14      	ldr	r3, [pc, #80]	; (800ca64 <TIM_Config+0x7c>)
 800ca12:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800ca16:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = (SystemCoreClock / 2 / (1000000)) - 1;
 800ca18:	4b14      	ldr	r3, [pc, #80]	; (800ca6c <TIM_Config+0x84>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a14      	ldr	r2, [pc, #80]	; (800ca70 <TIM_Config+0x88>)
 800ca1e:	fba2 2303 	umull	r2, r3, r2, r3
 800ca22:	0cdb      	lsrs	r3, r3, #19
 800ca24:	3b01      	subs	r3, #1
 800ca26:	4a0f      	ldr	r2, [pc, #60]	; (800ca64 <TIM_Config+0x7c>)
 800ca28:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 800ca2a:	4b0e      	ldr	r3, [pc, #56]	; (800ca64 <TIM_Config+0x7c>)
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ca30:	4b0c      	ldr	r3, [pc, #48]	; (800ca64 <TIM_Config+0x7c>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK) {
 800ca36:	480b      	ldr	r0, [pc, #44]	; (800ca64 <TIM_Config+0x7c>)
 800ca38:	f7f9 f870 	bl	8005b1c <HAL_TIM_Base_Init>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d001      	beq.n	800ca46 <TIM_Config+0x5e>
    /* Initialization Error */
    Error_Handler();
 800ca42:	f7f4 fa83 	bl	8000f4c <Error_Handler>
  }


  /* Configure the NVIC for TIMx */
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(TIMUsb_IRQn, 0, 0);
 800ca46:	2200      	movs	r2, #0
 800ca48:	2100      	movs	r1, #0
 800ca4a:	2032      	movs	r0, #50	; 0x32
 800ca4c:	f7f6 fa62 	bl	8002f14 <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMUsb_IRQn);
 800ca50:	2032      	movs	r0, #50	; 0x32
 800ca52:	f7f6 fa7b 	bl	8002f4c <HAL_NVIC_EnableIRQ>
}
 800ca56:	bf00      	nop
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	40023800 	.word	0x40023800
 800ca64:	20007658 	.word	0x20007658
 800ca68:	40000c00 	.word	0x40000c00
 800ca6c:	20000000 	.word	0x20000000
 800ca70:	431bde83 	.word	0x431bde83

0800ca74 <USBD_FS_DeviceDescriptor>:
 * @brief  Return the device descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	6039      	str	r1, [r7, #0]
 800ca7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	2212      	movs	r2, #18
 800ca84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ca86:	4b03      	ldr	r3, [pc, #12]	; (800ca94 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	370c      	adds	r7, #12
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr
 800ca94:	20000150 	.word	0x20000150

0800ca98 <USBD_FS_LangIDStrDescriptor>:
 * @brief  Return the LangID string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800ca98:	b480      	push	{r7}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	4603      	mov	r3, r0
 800caa0:	6039      	str	r1, [r7, #0]
 800caa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	2204      	movs	r2, #4
 800caa8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800caaa:	4b03      	ldr	r3, [pc, #12]	; (800cab8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800caac:	4618      	mov	r0, r3
 800caae:	370c      	adds	r7, #12
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr
 800cab8:	20000164 	.word	0x20000164

0800cabc <USBD_FS_ProductStrDescriptor>:
 * @brief  Return the product string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	4603      	mov	r3, r0
 800cac4:	6039      	str	r1, [r7, #0]
 800cac6:	71fb      	strb	r3, [r7, #7]
  if (speed == 0) {
 800cac8:	79fb      	ldrb	r3, [r7, #7]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d105      	bne.n	800cada <USBD_FS_ProductStrDescriptor+0x1e>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cace:	683a      	ldr	r2, [r7, #0]
 800cad0:	4907      	ldr	r1, [pc, #28]	; (800caf0 <USBD_FS_ProductStrDescriptor+0x34>)
 800cad2:	4808      	ldr	r0, [pc, #32]	; (800caf4 <USBD_FS_ProductStrDescriptor+0x38>)
 800cad4:	f7fc feed 	bl	80098b2 <USBD_GetString>
 800cad8:	e004      	b.n	800cae4 <USBD_FS_ProductStrDescriptor+0x28>
  } else {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cada:	683a      	ldr	r2, [r7, #0]
 800cadc:	4904      	ldr	r1, [pc, #16]	; (800caf0 <USBD_FS_ProductStrDescriptor+0x34>)
 800cade:	4805      	ldr	r0, [pc, #20]	; (800caf4 <USBD_FS_ProductStrDescriptor+0x38>)
 800cae0:	f7fc fee7 	bl	80098b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cae4:	4b02      	ldr	r3, [pc, #8]	; (800caf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3708      	adds	r7, #8
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	200076a0 	.word	0x200076a0
 800caf4:	0800dc38 	.word	0x0800dc38

0800caf8 <USBD_FS_ManufacturerStrDescriptor>:
 * @brief  Return the manufacturer string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	4603      	mov	r3, r0
 800cb00:	6039      	str	r1, [r7, #0]
 800cb02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cb04:	683a      	ldr	r2, [r7, #0]
 800cb06:	4904      	ldr	r1, [pc, #16]	; (800cb18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cb08:	4804      	ldr	r0, [pc, #16]	; (800cb1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cb0a:	f7fc fed2 	bl	80098b2 <USBD_GetString>
  return USBD_StrDesc;
 800cb0e:	4b02      	ldr	r3, [pc, #8]	; (800cb18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3708      	adds	r7, #8
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	200076a0 	.word	0x200076a0
 800cb1c:	0800dc48 	.word	0x0800dc48

0800cb20 <USBD_FS_SerialStrDescriptor>:
 * @brief  Return the serial number string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	4603      	mov	r3, r0
 800cb28:	6039      	str	r1, [r7, #0]
 800cb2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	221a      	movs	r2, #26
 800cb30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cb32:	f000 f843 	bl	800cbbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *)USBD_StringSerial;
 800cb36:	4b02      	ldr	r3, [pc, #8]	; (800cb40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3708      	adds	r7, #8
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}
 800cb40:	20000168 	.word	0x20000168

0800cb44 <USBD_FS_ConfigStrDescriptor>:
 * @brief  Return the configuration string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	6039      	str	r1, [r7, #0]
 800cb4e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH) {
 800cb50:	79fb      	ldrb	r3, [r7, #7]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d105      	bne.n	800cb62 <USBD_FS_ConfigStrDescriptor+0x1e>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb56:	683a      	ldr	r2, [r7, #0]
 800cb58:	4907      	ldr	r1, [pc, #28]	; (800cb78 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb5a:	4808      	ldr	r0, [pc, #32]	; (800cb7c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb5c:	f7fc fea9 	bl	80098b2 <USBD_GetString>
 800cb60:	e004      	b.n	800cb6c <USBD_FS_ConfigStrDescriptor+0x28>
  } else {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb62:	683a      	ldr	r2, [r7, #0]
 800cb64:	4904      	ldr	r1, [pc, #16]	; (800cb78 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb66:	4805      	ldr	r0, [pc, #20]	; (800cb7c <USBD_FS_ConfigStrDescriptor+0x38>)
 800cb68:	f7fc fea3 	bl	80098b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb6c:	4b02      	ldr	r3, [pc, #8]	; (800cb78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	200076a0 	.word	0x200076a0
 800cb7c:	0800dc50 	.word	0x0800dc50

0800cb80 <USBD_FS_InterfaceStrDescriptor>:
 * @brief  Return the interface string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	4603      	mov	r3, r0
 800cb88:	6039      	str	r1, [r7, #0]
 800cb8a:	71fb      	strb	r3, [r7, #7]
  if (speed == 0) {
 800cb8c:	79fb      	ldrb	r3, [r7, #7]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d105      	bne.n	800cb9e <USBD_FS_InterfaceStrDescriptor+0x1e>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb92:	683a      	ldr	r2, [r7, #0]
 800cb94:	4907      	ldr	r1, [pc, #28]	; (800cbb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cb96:	4808      	ldr	r0, [pc, #32]	; (800cbb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cb98:	f7fc fe8b 	bl	80098b2 <USBD_GetString>
 800cb9c:	e004      	b.n	800cba8 <USBD_FS_InterfaceStrDescriptor+0x28>
  } else {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cb9e:	683a      	ldr	r2, [r7, #0]
 800cba0:	4904      	ldr	r1, [pc, #16]	; (800cbb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cba2:	4805      	ldr	r0, [pc, #20]	; (800cbb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cba4:	f7fc fe85 	bl	80098b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cba8:	4b02      	ldr	r3, [pc, #8]	; (800cbb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3708      	adds	r7, #8
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	200076a0 	.word	0x200076a0
 800cbb8:	0800dc5c 	.word	0x0800dc5c

0800cbbc <Get_SerialNum>:
/**
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void) {
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800cbc2:	4b0f      	ldr	r3, [pc, #60]	; (800cc00 <Get_SerialNum+0x44>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800cbc8:	4b0e      	ldr	r3, [pc, #56]	; (800cc04 <Get_SerialNum+0x48>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800cbce:	4b0e      	ldr	r3, [pc, #56]	; (800cc08 <Get_SerialNum+0x4c>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	4413      	add	r3, r2
 800cbda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0) {
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d009      	beq.n	800cbf6 <Get_SerialNum+0x3a>
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cbe2:	2208      	movs	r2, #8
 800cbe4:	4909      	ldr	r1, [pc, #36]	; (800cc0c <Get_SerialNum+0x50>)
 800cbe6:	68f8      	ldr	r0, [r7, #12]
 800cbe8:	f000 f814 	bl	800cc14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cbec:	2204      	movs	r2, #4
 800cbee:	4908      	ldr	r1, [pc, #32]	; (800cc10 <Get_SerialNum+0x54>)
 800cbf0:	68b8      	ldr	r0, [r7, #8]
 800cbf2:	f000 f80f 	bl	800cc14 <IntToUnicode>
  }
}
 800cbf6:	bf00      	nop
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	1fff7a10 	.word	0x1fff7a10
 800cc04:	1fff7a14 	.word	0x1fff7a14
 800cc08:	1fff7a18 	.word	0x1fff7a18
 800cc0c:	2000016a 	.word	0x2000016a
 800cc10:	2000017a 	.word	0x2000017a

0800cc14 <IntToUnicode>:
 * @param  value: value to convert
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len) {
 800cc14:	b480      	push	{r7}
 800cc16:	b087      	sub	sp, #28
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	4613      	mov	r3, r2
 800cc20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cc22:	2300      	movs	r3, #0
 800cc24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++) {
 800cc26:	2300      	movs	r3, #0
 800cc28:	75fb      	strb	r3, [r7, #23]
 800cc2a:	e027      	b.n	800cc7c <IntToUnicode+0x68>
    if (((value >> 28)) < 0xA) {
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	0f1b      	lsrs	r3, r3, #28
 800cc30:	2b09      	cmp	r3, #9
 800cc32:	d80b      	bhi.n	800cc4c <IntToUnicode+0x38>
      pbuf[2 * idx] = (value >> 28) + '0';
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	0f1b      	lsrs	r3, r3, #28
 800cc38:	b2da      	uxtb	r2, r3
 800cc3a:	7dfb      	ldrb	r3, [r7, #23]
 800cc3c:	005b      	lsls	r3, r3, #1
 800cc3e:	4619      	mov	r1, r3
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	440b      	add	r3, r1
 800cc44:	3230      	adds	r2, #48	; 0x30
 800cc46:	b2d2      	uxtb	r2, r2
 800cc48:	701a      	strb	r2, [r3, #0]
 800cc4a:	e00a      	b.n	800cc62 <IntToUnicode+0x4e>
    } else {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	0f1b      	lsrs	r3, r3, #28
 800cc50:	b2da      	uxtb	r2, r3
 800cc52:	7dfb      	ldrb	r3, [r7, #23]
 800cc54:	005b      	lsls	r3, r3, #1
 800cc56:	4619      	mov	r1, r3
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	440b      	add	r3, r1
 800cc5c:	3237      	adds	r2, #55	; 0x37
 800cc5e:	b2d2      	uxtb	r2, r2
 800cc60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	011b      	lsls	r3, r3, #4
 800cc66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cc68:	7dfb      	ldrb	r3, [r7, #23]
 800cc6a:	005b      	lsls	r3, r3, #1
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	68ba      	ldr	r2, [r7, #8]
 800cc70:	4413      	add	r3, r2
 800cc72:	2200      	movs	r2, #0
 800cc74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++) {
 800cc76:	7dfb      	ldrb	r3, [r7, #23]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	75fb      	strb	r3, [r7, #23]
 800cc7c:	7dfa      	ldrb	r2, [r7, #23]
 800cc7e:	79fb      	ldrb	r3, [r7, #7]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d3d3      	bcc.n	800cc2c <IntToUnicode+0x18>
  }
}
 800cc84:	bf00      	nop
 800cc86:	bf00      	nop
 800cc88:	371c      	adds	r7, #28
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr
	...

0800cc94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b08a      	sub	sp, #40	; 0x28
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc9c:	f107 0314 	add.w	r3, r7, #20
 800cca0:	2200      	movs	r2, #0
 800cca2:	601a      	str	r2, [r3, #0]
 800cca4:	605a      	str	r2, [r3, #4]
 800cca6:	609a      	str	r2, [r3, #8]
 800cca8:	60da      	str	r2, [r3, #12]
 800ccaa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ccb4:	d13a      	bne.n	800cd2c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	613b      	str	r3, [r7, #16]
 800ccba:	4b1e      	ldr	r3, [pc, #120]	; (800cd34 <HAL_PCD_MspInit+0xa0>)
 800ccbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccbe:	4a1d      	ldr	r2, [pc, #116]	; (800cd34 <HAL_PCD_MspInit+0xa0>)
 800ccc0:	f043 0301 	orr.w	r3, r3, #1
 800ccc4:	6313      	str	r3, [r2, #48]	; 0x30
 800ccc6:	4b1b      	ldr	r3, [pc, #108]	; (800cd34 <HAL_PCD_MspInit+0xa0>)
 800ccc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccca:	f003 0301 	and.w	r3, r3, #1
 800ccce:	613b      	str	r3, [r7, #16]
 800ccd0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ccd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ccd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccd8:	2302      	movs	r3, #2
 800ccda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cce0:	2303      	movs	r3, #3
 800cce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cce4:	230a      	movs	r3, #10
 800cce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cce8:	f107 0314 	add.w	r3, r7, #20
 800ccec:	4619      	mov	r1, r3
 800ccee:	4812      	ldr	r0, [pc, #72]	; (800cd38 <HAL_PCD_MspInit+0xa4>)
 800ccf0:	f7f6 f948 	bl	8002f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ccf4:	4b0f      	ldr	r3, [pc, #60]	; (800cd34 <HAL_PCD_MspInit+0xa0>)
 800ccf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccf8:	4a0e      	ldr	r2, [pc, #56]	; (800cd34 <HAL_PCD_MspInit+0xa0>)
 800ccfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccfe:	6353      	str	r3, [r2, #52]	; 0x34
 800cd00:	2300      	movs	r3, #0
 800cd02:	60fb      	str	r3, [r7, #12]
 800cd04:	4b0b      	ldr	r3, [pc, #44]	; (800cd34 <HAL_PCD_MspInit+0xa0>)
 800cd06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd08:	4a0a      	ldr	r2, [pc, #40]	; (800cd34 <HAL_PCD_MspInit+0xa0>)
 800cd0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cd0e:	6453      	str	r3, [r2, #68]	; 0x44
 800cd10:	4b08      	ldr	r3, [pc, #32]	; (800cd34 <HAL_PCD_MspInit+0xa0>)
 800cd12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd18:	60fb      	str	r3, [r7, #12]
 800cd1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	2100      	movs	r1, #0
 800cd20:	2043      	movs	r0, #67	; 0x43
 800cd22:	f7f6 f8f7 	bl	8002f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cd26:	2043      	movs	r0, #67	; 0x43
 800cd28:	f7f6 f910 	bl	8002f4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cd2c:	bf00      	nop
 800cd2e:	3728      	adds	r7, #40	; 0x28
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}
 800cd34:	40023800 	.word	0x40023800
 800cd38:	40020000 	.word	0x40020000

0800cd3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cd50:	4619      	mov	r1, r3
 800cd52:	4610      	mov	r0, r2
 800cd54:	f7fb fdc6 	bl	80088e4 <USBD_LL_SetupStage>
}
 800cd58:	bf00      	nop
 800cd5a:	3708      	adds	r7, #8
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	460b      	mov	r3, r1
 800cd6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800cd72:	78fa      	ldrb	r2, [r7, #3]
 800cd74:	6879      	ldr	r1, [r7, #4]
 800cd76:	4613      	mov	r3, r2
 800cd78:	00db      	lsls	r3, r3, #3
 800cd7a:	1a9b      	subs	r3, r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	440b      	add	r3, r1
 800cd80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	78fb      	ldrb	r3, [r7, #3]
 800cd88:	4619      	mov	r1, r3
 800cd8a:	f7fb fe00 	bl	800898e <USBD_LL_DataOutStage>
}
 800cd8e:	bf00      	nop
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b082      	sub	sp, #8
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
 800cd9e:	460b      	mov	r3, r1
 800cda0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800cda8:	78fa      	ldrb	r2, [r7, #3]
 800cdaa:	6879      	ldr	r1, [r7, #4]
 800cdac:	4613      	mov	r3, r2
 800cdae:	00db      	lsls	r3, r3, #3
 800cdb0:	1a9b      	subs	r3, r3, r2
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	440b      	add	r3, r1
 800cdb6:	3348      	adds	r3, #72	; 0x48
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	78fb      	ldrb	r3, [r7, #3]
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	f7fb fe49 	bl	8008a54 <USBD_LL_DataInStage>
}
 800cdc2:	bf00      	nop
 800cdc4:	3708      	adds	r7, #8
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}

0800cdca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdca:	b580      	push	{r7, lr}
 800cdcc:	b082      	sub	sp, #8
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7fb ff5d 	bl	8008c98 <USBD_LL_SOF>
}
 800cdde:	bf00      	nop
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b084      	sub	sp, #16
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	d001      	beq.n	800cdfe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cdfa:	f7f4 f8a7 	bl	8000f4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ce04:	7bfa      	ldrb	r2, [r7, #15]
 800ce06:	4611      	mov	r1, r2
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7fb ff07 	bl	8008c1c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7fb feb3 	bl	8008b80 <USBD_LL_Reset>
}
 800ce1a:	bf00      	nop
 800ce1c:	3710      	adds	r7, #16
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}
	...

0800ce24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7fb ff02 	bl	8008c3c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	6812      	ldr	r2, [r2, #0]
 800ce46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ce4a:	f043 0301 	orr.w	r3, r3, #1
 800ce4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6a1b      	ldr	r3, [r3, #32]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d005      	beq.n	800ce64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce58:	4b04      	ldr	r3, [pc, #16]	; (800ce6c <HAL_PCD_SuspendCallback+0x48>)
 800ce5a:	691b      	ldr	r3, [r3, #16]
 800ce5c:	4a03      	ldr	r2, [pc, #12]	; (800ce6c <HAL_PCD_SuspendCallback+0x48>)
 800ce5e:	f043 0306 	orr.w	r3, r3, #6
 800ce62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ce64:	bf00      	nop
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	e000ed00 	.word	0xe000ed00

0800ce70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7fb fef2 	bl	8008c68 <USBD_LL_Resume>
}
 800ce84:	bf00      	nop
 800ce86:	3708      	adds	r7, #8
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	460b      	mov	r3, r1
 800ce96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ce9e:	78fa      	ldrb	r2, [r7, #3]
 800cea0:	4611      	mov	r1, r2
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7fb ff40 	bl	8008d28 <USBD_LL_IsoOUTIncomplete>
}
 800cea8:	bf00      	nop
 800ceaa:	3708      	adds	r7, #8
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	460b      	mov	r3, r1
 800ceba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cec2:	78fa      	ldrb	r2, [r7, #3]
 800cec4:	4611      	mov	r1, r2
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fb ff08 	bl	8008cdc <USBD_LL_IsoINIncomplete>
}
 800cecc:	bf00      	nop
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7fb ff46 	bl	8008d74 <USBD_LL_DevConnected>
}
 800cee8:	bf00      	nop
 800ceea:	3708      	adds	r7, #8
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7fb ff43 	bl	8008d8a <USBD_LL_DevDisconnected>
}
 800cf04:	bf00      	nop
 800cf06:	3708      	adds	r7, #8
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d13c      	bne.n	800cf96 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cf1c:	4a20      	ldr	r2, [pc, #128]	; (800cfa0 <USBD_LL_Init+0x94>)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	4a1e      	ldr	r2, [pc, #120]	; (800cfa0 <USBD_LL_Init+0x94>)
 800cf28:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cf2c:	4b1c      	ldr	r3, [pc, #112]	; (800cfa0 <USBD_LL_Init+0x94>)
 800cf2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cf32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cf34:	4b1a      	ldr	r3, [pc, #104]	; (800cfa0 <USBD_LL_Init+0x94>)
 800cf36:	2204      	movs	r2, #4
 800cf38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cf3a:	4b19      	ldr	r3, [pc, #100]	; (800cfa0 <USBD_LL_Init+0x94>)
 800cf3c:	2202      	movs	r2, #2
 800cf3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cf40:	4b17      	ldr	r3, [pc, #92]	; (800cfa0 <USBD_LL_Init+0x94>)
 800cf42:	2200      	movs	r2, #0
 800cf44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cf46:	4b16      	ldr	r3, [pc, #88]	; (800cfa0 <USBD_LL_Init+0x94>)
 800cf48:	2202      	movs	r2, #2
 800cf4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cf4c:	4b14      	ldr	r3, [pc, #80]	; (800cfa0 <USBD_LL_Init+0x94>)
 800cf4e:	2200      	movs	r2, #0
 800cf50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cf52:	4b13      	ldr	r3, [pc, #76]	; (800cfa0 <USBD_LL_Init+0x94>)
 800cf54:	2200      	movs	r2, #0
 800cf56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cf58:	4b11      	ldr	r3, [pc, #68]	; (800cfa0 <USBD_LL_Init+0x94>)
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cf5e:	4b10      	ldr	r3, [pc, #64]	; (800cfa0 <USBD_LL_Init+0x94>)
 800cf60:	2200      	movs	r2, #0
 800cf62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cf64:	4b0e      	ldr	r3, [pc, #56]	; (800cfa0 <USBD_LL_Init+0x94>)
 800cf66:	2200      	movs	r2, #0
 800cf68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cf6a:	480d      	ldr	r0, [pc, #52]	; (800cfa0 <USBD_LL_Init+0x94>)
 800cf6c:	f7f6 f9d8 	bl	8003320 <HAL_PCD_Init>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d001      	beq.n	800cf7a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cf76:	f7f3 ffe9 	bl	8000f4c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cf7a:	2180      	movs	r1, #128	; 0x80
 800cf7c:	4808      	ldr	r0, [pc, #32]	; (800cfa0 <USBD_LL_Init+0x94>)
 800cf7e:	f7f7 fb36 	bl	80045ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cf82:	2240      	movs	r2, #64	; 0x40
 800cf84:	2100      	movs	r1, #0
 800cf86:	4806      	ldr	r0, [pc, #24]	; (800cfa0 <USBD_LL_Init+0x94>)
 800cf88:	f7f7 faea 	bl	8004560 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cf8c:	2280      	movs	r2, #128	; 0x80
 800cf8e:	2101      	movs	r1, #1
 800cf90:	4803      	ldr	r0, [pc, #12]	; (800cfa0 <USBD_LL_Init+0x94>)
 800cf92:	f7f7 fae5 	bl	8004560 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cf96:	2300      	movs	r3, #0
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3708      	adds	r7, #8
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}
 800cfa0:	200078a0 	.word	0x200078a0

0800cfa4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfac:	2300      	movs	r3, #0
 800cfae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7f6 facd 	bl	800355a <HAL_PCD_Start>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfc4:	7bfb      	ldrb	r3, [r7, #15]
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f000 f942 	bl	800d250 <USBD_Get_USB_Status>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3710      	adds	r7, #16
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}

0800cfda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cfda:	b580      	push	{r7, lr}
 800cfdc:	b084      	sub	sp, #16
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
 800cfe2:	4608      	mov	r0, r1
 800cfe4:	4611      	mov	r1, r2
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	4603      	mov	r3, r0
 800cfea:	70fb      	strb	r3, [r7, #3]
 800cfec:	460b      	mov	r3, r1
 800cfee:	70bb      	strb	r3, [r7, #2]
 800cff0:	4613      	mov	r3, r2
 800cff2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cff4:	2300      	movs	r3, #0
 800cff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cff8:	2300      	movs	r3, #0
 800cffa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d002:	78bb      	ldrb	r3, [r7, #2]
 800d004:	883a      	ldrh	r2, [r7, #0]
 800d006:	78f9      	ldrb	r1, [r7, #3]
 800d008:	f7f6 feb1 	bl	8003d6e <HAL_PCD_EP_Open>
 800d00c:	4603      	mov	r3, r0
 800d00e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d010:	7bfb      	ldrb	r3, [r7, #15]
 800d012:	4618      	mov	r0, r3
 800d014:	f000 f91c 	bl	800d250 <USBD_Get_USB_Status>
 800d018:	4603      	mov	r3, r0
 800d01a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d01c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3710      	adds	r7, #16
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}

0800d026 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d026:	b580      	push	{r7, lr}
 800d028:	b084      	sub	sp, #16
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
 800d02e:	460b      	mov	r3, r1
 800d030:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d032:	2300      	movs	r3, #0
 800d034:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d036:	2300      	movs	r3, #0
 800d038:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d040:	78fa      	ldrb	r2, [r7, #3]
 800d042:	4611      	mov	r1, r2
 800d044:	4618      	mov	r0, r3
 800d046:	f7f6 fefa 	bl	8003e3e <HAL_PCD_EP_Close>
 800d04a:	4603      	mov	r3, r0
 800d04c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d04e:	7bfb      	ldrb	r3, [r7, #15]
 800d050:	4618      	mov	r0, r3
 800d052:	f000 f8fd 	bl	800d250 <USBD_Get_USB_Status>
 800d056:	4603      	mov	r3, r0
 800d058:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d05a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3710      	adds	r7, #16
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	460b      	mov	r3, r1
 800d06e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d070:	2300      	movs	r3, #0
 800d072:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d074:	2300      	movs	r3, #0
 800d076:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d07e:	78fa      	ldrb	r2, [r7, #3]
 800d080:	4611      	mov	r1, r2
 800d082:	4618      	mov	r0, r3
 800d084:	f7f6 ffd2 	bl	800402c <HAL_PCD_EP_SetStall>
 800d088:	4603      	mov	r3, r0
 800d08a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d08c:	7bfb      	ldrb	r3, [r7, #15]
 800d08e:	4618      	mov	r0, r3
 800d090:	f000 f8de 	bl	800d250 <USBD_Get_USB_Status>
 800d094:	4603      	mov	r3, r0
 800d096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d098:	7bbb      	ldrb	r3, [r7, #14]
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0a2:	b580      	push	{r7, lr}
 800d0a4:	b084      	sub	sp, #16
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
 800d0aa:	460b      	mov	r3, r1
 800d0ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d0bc:	78fa      	ldrb	r2, [r7, #3]
 800d0be:	4611      	mov	r1, r2
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7f7 f817 	bl	80040f4 <HAL_PCD_EP_ClrStall>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0ca:	7bfb      	ldrb	r3, [r7, #15]
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f000 f8bf 	bl	800d250 <USBD_Get_USB_Status>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3710      	adds	r7, #16
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b085      	sub	sp, #20
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d0f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d0f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	da0b      	bge.n	800d114 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d0fc:	78fb      	ldrb	r3, [r7, #3]
 800d0fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d102:	68f9      	ldr	r1, [r7, #12]
 800d104:	4613      	mov	r3, r2
 800d106:	00db      	lsls	r3, r3, #3
 800d108:	1a9b      	subs	r3, r3, r2
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	440b      	add	r3, r1
 800d10e:	333e      	adds	r3, #62	; 0x3e
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	e00b      	b.n	800d12c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d114:	78fb      	ldrb	r3, [r7, #3]
 800d116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d11a:	68f9      	ldr	r1, [r7, #12]
 800d11c:	4613      	mov	r3, r2
 800d11e:	00db      	lsls	r3, r3, #3
 800d120:	1a9b      	subs	r3, r3, r2
 800d122:	009b      	lsls	r3, r3, #2
 800d124:	440b      	add	r3, r1
 800d126:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d12a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3714      	adds	r7, #20
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	460b      	mov	r3, r1
 800d142:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d144:	2300      	movs	r3, #0
 800d146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d148:	2300      	movs	r3, #0
 800d14a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d152:	78fa      	ldrb	r2, [r7, #3]
 800d154:	4611      	mov	r1, r2
 800d156:	4618      	mov	r0, r3
 800d158:	f7f6 fde4 	bl	8003d24 <HAL_PCD_SetAddress>
 800d15c:	4603      	mov	r3, r0
 800d15e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d160:	7bfb      	ldrb	r3, [r7, #15]
 800d162:	4618      	mov	r0, r3
 800d164:	f000 f874 	bl	800d250 <USBD_Get_USB_Status>
 800d168:	4603      	mov	r3, r0
 800d16a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d16c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3710      	adds	r7, #16
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b086      	sub	sp, #24
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	60f8      	str	r0, [r7, #12]
 800d17e:	607a      	str	r2, [r7, #4]
 800d180:	603b      	str	r3, [r7, #0]
 800d182:	460b      	mov	r3, r1
 800d184:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d186:	2300      	movs	r3, #0
 800d188:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d18a:	2300      	movs	r3, #0
 800d18c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d194:	7af9      	ldrb	r1, [r7, #11]
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	687a      	ldr	r2, [r7, #4]
 800d19a:	f7f6 fefd 	bl	8003f98 <HAL_PCD_EP_Transmit>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1a2:	7dfb      	ldrb	r3, [r7, #23]
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f000 f853 	bl	800d250 <USBD_Get_USB_Status>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d1ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3718      	adds	r7, #24
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b086      	sub	sp, #24
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	607a      	str	r2, [r7, #4]
 800d1c2:	603b      	str	r3, [r7, #0]
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d1d6:	7af9      	ldrb	r1, [r7, #11]
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	f7f6 fe79 	bl	8003ed2 <HAL_PCD_EP_Receive>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1e4:	7dfb      	ldrb	r3, [r7, #23]
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f000 f832 	bl	800d250 <USBD_Get_USB_Status>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d1f0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3718      	adds	r7, #24
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}

0800d1fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b082      	sub	sp, #8
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	6078      	str	r0, [r7, #4]
 800d202:	460b      	mov	r3, r1
 800d204:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d20c:	78fa      	ldrb	r2, [r7, #3]
 800d20e:	4611      	mov	r1, r2
 800d210:	4618      	mov	r0, r3
 800d212:	f7f6 fea9 	bl	8003f68 <HAL_PCD_EP_GetRxCount>
 800d216:	4603      	mov	r3, r0
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3708      	adds	r7, #8
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d228:	4b03      	ldr	r3, [pc, #12]	; (800d238 <USBD_static_malloc+0x18>)
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	370c      	adds	r7, #12
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr
 800d236:	bf00      	nop
 800d238:	20004b30 	.word	0x20004b30

0800d23c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]

}
 800d244:	bf00      	nop
 800d246:	370c      	adds	r7, #12
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr

0800d250 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d250:	b480      	push	{r7}
 800d252:	b085      	sub	sp, #20
 800d254:	af00      	add	r7, sp, #0
 800d256:	4603      	mov	r3, r0
 800d258:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d25a:	2300      	movs	r3, #0
 800d25c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d25e:	79fb      	ldrb	r3, [r7, #7]
 800d260:	2b03      	cmp	r3, #3
 800d262:	d817      	bhi.n	800d294 <USBD_Get_USB_Status+0x44>
 800d264:	a201      	add	r2, pc, #4	; (adr r2, 800d26c <USBD_Get_USB_Status+0x1c>)
 800d266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d26a:	bf00      	nop
 800d26c:	0800d27d 	.word	0x0800d27d
 800d270:	0800d283 	.word	0x0800d283
 800d274:	0800d289 	.word	0x0800d289
 800d278:	0800d28f 	.word	0x0800d28f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d27c:	2300      	movs	r3, #0
 800d27e:	73fb      	strb	r3, [r7, #15]
    break;
 800d280:	e00b      	b.n	800d29a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d282:	2303      	movs	r3, #3
 800d284:	73fb      	strb	r3, [r7, #15]
    break;
 800d286:	e008      	b.n	800d29a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d288:	2301      	movs	r3, #1
 800d28a:	73fb      	strb	r3, [r7, #15]
    break;
 800d28c:	e005      	b.n	800d29a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d28e:	2303      	movs	r3, #3
 800d290:	73fb      	strb	r3, [r7, #15]
    break;
 800d292:	e002      	b.n	800d29a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d294:	2303      	movs	r3, #3
 800d296:	73fb      	strb	r3, [r7, #15]
    break;
 800d298:	bf00      	nop
  }
  return usb_status;
 800d29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3714      	adds	r7, #20
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr

0800d2a8 <__errno>:
 800d2a8:	4b01      	ldr	r3, [pc, #4]	; (800d2b0 <__errno+0x8>)
 800d2aa:	6818      	ldr	r0, [r3, #0]
 800d2ac:	4770      	bx	lr
 800d2ae:	bf00      	nop
 800d2b0:	20000184 	.word	0x20000184

0800d2b4 <__libc_init_array>:
 800d2b4:	b570      	push	{r4, r5, r6, lr}
 800d2b6:	4d0d      	ldr	r5, [pc, #52]	; (800d2ec <__libc_init_array+0x38>)
 800d2b8:	4c0d      	ldr	r4, [pc, #52]	; (800d2f0 <__libc_init_array+0x3c>)
 800d2ba:	1b64      	subs	r4, r4, r5
 800d2bc:	10a4      	asrs	r4, r4, #2
 800d2be:	2600      	movs	r6, #0
 800d2c0:	42a6      	cmp	r6, r4
 800d2c2:	d109      	bne.n	800d2d8 <__libc_init_array+0x24>
 800d2c4:	4d0b      	ldr	r5, [pc, #44]	; (800d2f4 <__libc_init_array+0x40>)
 800d2c6:	4c0c      	ldr	r4, [pc, #48]	; (800d2f8 <__libc_init_array+0x44>)
 800d2c8:	f000 fc72 	bl	800dbb0 <_init>
 800d2cc:	1b64      	subs	r4, r4, r5
 800d2ce:	10a4      	asrs	r4, r4, #2
 800d2d0:	2600      	movs	r6, #0
 800d2d2:	42a6      	cmp	r6, r4
 800d2d4:	d105      	bne.n	800d2e2 <__libc_init_array+0x2e>
 800d2d6:	bd70      	pop	{r4, r5, r6, pc}
 800d2d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2dc:	4798      	blx	r3
 800d2de:	3601      	adds	r6, #1
 800d2e0:	e7ee      	b.n	800d2c0 <__libc_init_array+0xc>
 800d2e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2e6:	4798      	blx	r3
 800d2e8:	3601      	adds	r6, #1
 800d2ea:	e7f2      	b.n	800d2d2 <__libc_init_array+0x1e>
 800d2ec:	0800dd64 	.word	0x0800dd64
 800d2f0:	0800dd64 	.word	0x0800dd64
 800d2f4:	0800dd64 	.word	0x0800dd64
 800d2f8:	0800dd68 	.word	0x0800dd68

0800d2fc <memcpy>:
 800d2fc:	440a      	add	r2, r1
 800d2fe:	4291      	cmp	r1, r2
 800d300:	f100 33ff 	add.w	r3, r0, #4294967295
 800d304:	d100      	bne.n	800d308 <memcpy+0xc>
 800d306:	4770      	bx	lr
 800d308:	b510      	push	{r4, lr}
 800d30a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d30e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d312:	4291      	cmp	r1, r2
 800d314:	d1f9      	bne.n	800d30a <memcpy+0xe>
 800d316:	bd10      	pop	{r4, pc}

0800d318 <memset>:
 800d318:	4402      	add	r2, r0
 800d31a:	4603      	mov	r3, r0
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d100      	bne.n	800d322 <memset+0xa>
 800d320:	4770      	bx	lr
 800d322:	f803 1b01 	strb.w	r1, [r3], #1
 800d326:	e7f9      	b.n	800d31c <memset+0x4>

0800d328 <powf>:
 800d328:	b508      	push	{r3, lr}
 800d32a:	ed2d 8b04 	vpush	{d8-d9}
 800d32e:	eeb0 9a40 	vmov.f32	s18, s0
 800d332:	eef0 8a60 	vmov.f32	s17, s1
 800d336:	f000 f88f 	bl	800d458 <__ieee754_powf>
 800d33a:	4b43      	ldr	r3, [pc, #268]	; (800d448 <powf+0x120>)
 800d33c:	f993 3000 	ldrsb.w	r3, [r3]
 800d340:	3301      	adds	r3, #1
 800d342:	eeb0 8a40 	vmov.f32	s16, s0
 800d346:	d012      	beq.n	800d36e <powf+0x46>
 800d348:	eef4 8a68 	vcmp.f32	s17, s17
 800d34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d350:	d60d      	bvs.n	800d36e <powf+0x46>
 800d352:	eeb4 9a49 	vcmp.f32	s18, s18
 800d356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d35a:	d70d      	bvc.n	800d378 <powf+0x50>
 800d35c:	eef5 8a40 	vcmp.f32	s17, #0.0
 800d360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d364:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d368:	bf08      	it	eq
 800d36a:	eeb0 8a67 	vmoveq.f32	s16, s15
 800d36e:	eeb0 0a48 	vmov.f32	s0, s16
 800d372:	ecbd 8b04 	vpop	{d8-d9}
 800d376:	bd08      	pop	{r3, pc}
 800d378:	eddf 9a34 	vldr	s19, [pc, #208]	; 800d44c <powf+0x124>
 800d37c:	eeb4 9a69 	vcmp.f32	s18, s19
 800d380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d384:	d116      	bne.n	800d3b4 <powf+0x8c>
 800d386:	eef4 8a69 	vcmp.f32	s17, s19
 800d38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d38e:	d057      	beq.n	800d440 <powf+0x118>
 800d390:	eeb0 0a68 	vmov.f32	s0, s17
 800d394:	f000 fb2a 	bl	800d9ec <finitef>
 800d398:	2800      	cmp	r0, #0
 800d39a:	d0e8      	beq.n	800d36e <powf+0x46>
 800d39c:	eef4 8ae9 	vcmpe.f32	s17, s19
 800d3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3a4:	d5e3      	bpl.n	800d36e <powf+0x46>
 800d3a6:	f7ff ff7f 	bl	800d2a8 <__errno>
 800d3aa:	2321      	movs	r3, #33	; 0x21
 800d3ac:	6003      	str	r3, [r0, #0]
 800d3ae:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800d450 <powf+0x128>
 800d3b2:	e7dc      	b.n	800d36e <powf+0x46>
 800d3b4:	f000 fb1a 	bl	800d9ec <finitef>
 800d3b8:	bb50      	cbnz	r0, 800d410 <powf+0xe8>
 800d3ba:	eeb0 0a49 	vmov.f32	s0, s18
 800d3be:	f000 fb15 	bl	800d9ec <finitef>
 800d3c2:	b328      	cbz	r0, 800d410 <powf+0xe8>
 800d3c4:	eeb0 0a68 	vmov.f32	s0, s17
 800d3c8:	f000 fb10 	bl	800d9ec <finitef>
 800d3cc:	b300      	cbz	r0, 800d410 <powf+0xe8>
 800d3ce:	eeb4 8a48 	vcmp.f32	s16, s16
 800d3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3d6:	d706      	bvc.n	800d3e6 <powf+0xbe>
 800d3d8:	f7ff ff66 	bl	800d2a8 <__errno>
 800d3dc:	2321      	movs	r3, #33	; 0x21
 800d3de:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800d3e2:	6003      	str	r3, [r0, #0]
 800d3e4:	e7c3      	b.n	800d36e <powf+0x46>
 800d3e6:	f7ff ff5f 	bl	800d2a8 <__errno>
 800d3ea:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800d3ee:	2322      	movs	r3, #34	; 0x22
 800d3f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3f4:	6003      	str	r3, [r0, #0]
 800d3f6:	d508      	bpl.n	800d40a <powf+0xe2>
 800d3f8:	eeb0 0a68 	vmov.f32	s0, s17
 800d3fc:	f000 fb0a 	bl	800da14 <rintf>
 800d400:	eeb4 0a68 	vcmp.f32	s0, s17
 800d404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d408:	d1d1      	bne.n	800d3ae <powf+0x86>
 800d40a:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800d454 <powf+0x12c>
 800d40e:	e7ae      	b.n	800d36e <powf+0x46>
 800d410:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d418:	d1a9      	bne.n	800d36e <powf+0x46>
 800d41a:	eeb0 0a49 	vmov.f32	s0, s18
 800d41e:	f000 fae5 	bl	800d9ec <finitef>
 800d422:	2800      	cmp	r0, #0
 800d424:	d0a3      	beq.n	800d36e <powf+0x46>
 800d426:	eeb0 0a68 	vmov.f32	s0, s17
 800d42a:	f000 fadf 	bl	800d9ec <finitef>
 800d42e:	2800      	cmp	r0, #0
 800d430:	d09d      	beq.n	800d36e <powf+0x46>
 800d432:	f7ff ff39 	bl	800d2a8 <__errno>
 800d436:	2322      	movs	r3, #34	; 0x22
 800d438:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800d44c <powf+0x124>
 800d43c:	6003      	str	r3, [r0, #0]
 800d43e:	e796      	b.n	800d36e <powf+0x46>
 800d440:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800d444:	e793      	b.n	800d36e <powf+0x46>
 800d446:	bf00      	nop
 800d448:	200001e8 	.word	0x200001e8
 800d44c:	00000000 	.word	0x00000000
 800d450:	ff800000 	.word	0xff800000
 800d454:	7f800000 	.word	0x7f800000

0800d458 <__ieee754_powf>:
 800d458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d45c:	ee10 5a90 	vmov	r5, s1
 800d460:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800d464:	ed2d 8b02 	vpush	{d8}
 800d468:	eeb0 8a40 	vmov.f32	s16, s0
 800d46c:	eef0 8a60 	vmov.f32	s17, s1
 800d470:	f000 8291 	beq.w	800d996 <__ieee754_powf+0x53e>
 800d474:	ee10 8a10 	vmov	r8, s0
 800d478:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800d47c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d480:	dc06      	bgt.n	800d490 <__ieee754_powf+0x38>
 800d482:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800d486:	dd0a      	ble.n	800d49e <__ieee754_powf+0x46>
 800d488:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d48c:	f000 8283 	beq.w	800d996 <__ieee754_powf+0x53e>
 800d490:	ecbd 8b02 	vpop	{d8}
 800d494:	48d8      	ldr	r0, [pc, #864]	; (800d7f8 <__ieee754_powf+0x3a0>)
 800d496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d49a:	f000 bab5 	b.w	800da08 <nanf>
 800d49e:	f1b8 0f00 	cmp.w	r8, #0
 800d4a2:	da1f      	bge.n	800d4e4 <__ieee754_powf+0x8c>
 800d4a4:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800d4a8:	da2e      	bge.n	800d508 <__ieee754_powf+0xb0>
 800d4aa:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800d4ae:	f2c0 827b 	blt.w	800d9a8 <__ieee754_powf+0x550>
 800d4b2:	15fb      	asrs	r3, r7, #23
 800d4b4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800d4b8:	fa47 f603 	asr.w	r6, r7, r3
 800d4bc:	fa06 f303 	lsl.w	r3, r6, r3
 800d4c0:	42bb      	cmp	r3, r7
 800d4c2:	f040 8271 	bne.w	800d9a8 <__ieee754_powf+0x550>
 800d4c6:	f006 0601 	and.w	r6, r6, #1
 800d4ca:	f1c6 0602 	rsb	r6, r6, #2
 800d4ce:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800d4d2:	d120      	bne.n	800d516 <__ieee754_powf+0xbe>
 800d4d4:	2d00      	cmp	r5, #0
 800d4d6:	f280 8264 	bge.w	800d9a2 <__ieee754_powf+0x54a>
 800d4da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d4de:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800d4e2:	e00d      	b.n	800d500 <__ieee754_powf+0xa8>
 800d4e4:	2600      	movs	r6, #0
 800d4e6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800d4ea:	d1f0      	bne.n	800d4ce <__ieee754_powf+0x76>
 800d4ec:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d4f0:	f000 8251 	beq.w	800d996 <__ieee754_powf+0x53e>
 800d4f4:	dd0a      	ble.n	800d50c <__ieee754_powf+0xb4>
 800d4f6:	2d00      	cmp	r5, #0
 800d4f8:	f280 8250 	bge.w	800d99c <__ieee754_powf+0x544>
 800d4fc:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800d7fc <__ieee754_powf+0x3a4>
 800d500:	ecbd 8b02 	vpop	{d8}
 800d504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d508:	2602      	movs	r6, #2
 800d50a:	e7ec      	b.n	800d4e6 <__ieee754_powf+0x8e>
 800d50c:	2d00      	cmp	r5, #0
 800d50e:	daf5      	bge.n	800d4fc <__ieee754_powf+0xa4>
 800d510:	eeb1 0a68 	vneg.f32	s0, s17
 800d514:	e7f4      	b.n	800d500 <__ieee754_powf+0xa8>
 800d516:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800d51a:	d102      	bne.n	800d522 <__ieee754_powf+0xca>
 800d51c:	ee28 0a08 	vmul.f32	s0, s16, s16
 800d520:	e7ee      	b.n	800d500 <__ieee754_powf+0xa8>
 800d522:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800d526:	eeb0 0a48 	vmov.f32	s0, s16
 800d52a:	d108      	bne.n	800d53e <__ieee754_powf+0xe6>
 800d52c:	f1b8 0f00 	cmp.w	r8, #0
 800d530:	db05      	blt.n	800d53e <__ieee754_powf+0xe6>
 800d532:	ecbd 8b02 	vpop	{d8}
 800d536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d53a:	f000 ba4d 	b.w	800d9d8 <__ieee754_sqrtf>
 800d53e:	f000 fa4e 	bl	800d9de <fabsf>
 800d542:	b124      	cbz	r4, 800d54e <__ieee754_powf+0xf6>
 800d544:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800d548:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800d54c:	d117      	bne.n	800d57e <__ieee754_powf+0x126>
 800d54e:	2d00      	cmp	r5, #0
 800d550:	bfbc      	itt	lt
 800d552:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800d556:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800d55a:	f1b8 0f00 	cmp.w	r8, #0
 800d55e:	dacf      	bge.n	800d500 <__ieee754_powf+0xa8>
 800d560:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800d564:	ea54 0306 	orrs.w	r3, r4, r6
 800d568:	d104      	bne.n	800d574 <__ieee754_powf+0x11c>
 800d56a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d56e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d572:	e7c5      	b.n	800d500 <__ieee754_powf+0xa8>
 800d574:	2e01      	cmp	r6, #1
 800d576:	d1c3      	bne.n	800d500 <__ieee754_powf+0xa8>
 800d578:	eeb1 0a40 	vneg.f32	s0, s0
 800d57c:	e7c0      	b.n	800d500 <__ieee754_powf+0xa8>
 800d57e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800d582:	3801      	subs	r0, #1
 800d584:	ea56 0300 	orrs.w	r3, r6, r0
 800d588:	d104      	bne.n	800d594 <__ieee754_powf+0x13c>
 800d58a:	ee38 8a48 	vsub.f32	s16, s16, s16
 800d58e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800d592:	e7b5      	b.n	800d500 <__ieee754_powf+0xa8>
 800d594:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800d598:	dd6b      	ble.n	800d672 <__ieee754_powf+0x21a>
 800d59a:	4b99      	ldr	r3, [pc, #612]	; (800d800 <__ieee754_powf+0x3a8>)
 800d59c:	429c      	cmp	r4, r3
 800d59e:	dc06      	bgt.n	800d5ae <__ieee754_powf+0x156>
 800d5a0:	2d00      	cmp	r5, #0
 800d5a2:	daab      	bge.n	800d4fc <__ieee754_powf+0xa4>
 800d5a4:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800d804 <__ieee754_powf+0x3ac>
 800d5a8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d5ac:	e7a8      	b.n	800d500 <__ieee754_powf+0xa8>
 800d5ae:	4b96      	ldr	r3, [pc, #600]	; (800d808 <__ieee754_powf+0x3b0>)
 800d5b0:	429c      	cmp	r4, r3
 800d5b2:	dd02      	ble.n	800d5ba <__ieee754_powf+0x162>
 800d5b4:	2d00      	cmp	r5, #0
 800d5b6:	dcf5      	bgt.n	800d5a4 <__ieee754_powf+0x14c>
 800d5b8:	e7a0      	b.n	800d4fc <__ieee754_powf+0xa4>
 800d5ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d5be:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d5c2:	eddf 6a92 	vldr	s13, [pc, #584]	; 800d80c <__ieee754_powf+0x3b4>
 800d5c6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800d5ca:	eee0 6a67 	vfms.f32	s13, s0, s15
 800d5ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d5d2:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800d5d6:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d5da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5de:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800d810 <__ieee754_powf+0x3b8>
 800d5e2:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800d5e6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800d814 <__ieee754_powf+0x3bc>
 800d5ea:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d5ee:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800d818 <__ieee754_powf+0x3c0>
 800d5f2:	eef0 6a67 	vmov.f32	s13, s15
 800d5f6:	eee0 6a07 	vfma.f32	s13, s0, s14
 800d5fa:	ee16 3a90 	vmov	r3, s13
 800d5fe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d602:	f023 030f 	bic.w	r3, r3, #15
 800d606:	ee00 3a90 	vmov	s1, r3
 800d60a:	eee0 0a47 	vfms.f32	s1, s0, s14
 800d60e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d612:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800d616:	f025 050f 	bic.w	r5, r5, #15
 800d61a:	ee07 5a10 	vmov	s14, r5
 800d61e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800d622:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800d626:	ee07 3a90 	vmov	s15, r3
 800d62a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800d62e:	3e01      	subs	r6, #1
 800d630:	ea56 0200 	orrs.w	r2, r6, r0
 800d634:	ee07 5a10 	vmov	s14, r5
 800d638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d63c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800d640:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800d644:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d648:	ee17 4a10 	vmov	r4, s14
 800d64c:	bf08      	it	eq
 800d64e:	eeb0 8a40 	vmoveq.f32	s16, s0
 800d652:	2c00      	cmp	r4, #0
 800d654:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d658:	f340 8184 	ble.w	800d964 <__ieee754_powf+0x50c>
 800d65c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800d660:	f340 80fc 	ble.w	800d85c <__ieee754_powf+0x404>
 800d664:	eddf 7a67 	vldr	s15, [pc, #412]	; 800d804 <__ieee754_powf+0x3ac>
 800d668:	ee28 0a27 	vmul.f32	s0, s16, s15
 800d66c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d670:	e746      	b.n	800d500 <__ieee754_powf+0xa8>
 800d672:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800d676:	bf01      	itttt	eq
 800d678:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800d81c <__ieee754_powf+0x3c4>
 800d67c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800d680:	f06f 0217 	mvneq.w	r2, #23
 800d684:	ee17 4a90 	vmoveq	r4, s15
 800d688:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800d68c:	bf18      	it	ne
 800d68e:	2200      	movne	r2, #0
 800d690:	3b7f      	subs	r3, #127	; 0x7f
 800d692:	4413      	add	r3, r2
 800d694:	4a62      	ldr	r2, [pc, #392]	; (800d820 <__ieee754_powf+0x3c8>)
 800d696:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800d69a:	4294      	cmp	r4, r2
 800d69c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800d6a0:	dd06      	ble.n	800d6b0 <__ieee754_powf+0x258>
 800d6a2:	4a60      	ldr	r2, [pc, #384]	; (800d824 <__ieee754_powf+0x3cc>)
 800d6a4:	4294      	cmp	r4, r2
 800d6a6:	f340 80a4 	ble.w	800d7f2 <__ieee754_powf+0x39a>
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800d6b0:	2400      	movs	r4, #0
 800d6b2:	4a5d      	ldr	r2, [pc, #372]	; (800d828 <__ieee754_powf+0x3d0>)
 800d6b4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d6b8:	ee07 1a90 	vmov	s15, r1
 800d6bc:	ed92 7a00 	vldr	s14, [r2]
 800d6c0:	4a5a      	ldr	r2, [pc, #360]	; (800d82c <__ieee754_powf+0x3d4>)
 800d6c2:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d6c6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800d6ca:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800d6ce:	1049      	asrs	r1, r1, #1
 800d6d0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800d6d4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800d6d8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800d6dc:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800d6e0:	ee06 1a10 	vmov	s12, r1
 800d6e4:	ee65 4a26 	vmul.f32	s9, s10, s13
 800d6e8:	ee36 7a47 	vsub.f32	s14, s12, s14
 800d6ec:	ee14 7a90 	vmov	r7, s9
 800d6f0:	4017      	ands	r7, r2
 800d6f2:	ee05 7a90 	vmov	s11, r7
 800d6f6:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800d6fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d6fe:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800d830 <__ieee754_powf+0x3d8>
 800d702:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800d706:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800d70a:	ee25 6a26 	vmul.f32	s12, s10, s13
 800d70e:	eddf 6a49 	vldr	s13, [pc, #292]	; 800d834 <__ieee754_powf+0x3dc>
 800d712:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d716:	eddf 6a48 	vldr	s13, [pc, #288]	; 800d838 <__ieee754_powf+0x3e0>
 800d71a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d71e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800d80c <__ieee754_powf+0x3b4>
 800d722:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d726:	eddf 6a45 	vldr	s13, [pc, #276]	; 800d83c <__ieee754_powf+0x3e4>
 800d72a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d72e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800d840 <__ieee754_powf+0x3e8>
 800d732:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d736:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800d73a:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800d73e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d742:	eee5 6a07 	vfma.f32	s13, s10, s14
 800d746:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800d74a:	eef0 7a45 	vmov.f32	s15, s10
 800d74e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800d752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d756:	ee17 1a90 	vmov	r1, s15
 800d75a:	4011      	ands	r1, r2
 800d75c:	ee07 1a90 	vmov	s15, r1
 800d760:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800d764:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800d768:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d76c:	ee27 7a24 	vmul.f32	s14, s14, s9
 800d770:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d774:	eeb0 6a47 	vmov.f32	s12, s14
 800d778:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800d77c:	ee16 1a10 	vmov	r1, s12
 800d780:	4011      	ands	r1, r2
 800d782:	ee06 1a90 	vmov	s13, r1
 800d786:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800d78a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800d844 <__ieee754_powf+0x3ec>
 800d78e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800d848 <__ieee754_powf+0x3f0>
 800d792:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d796:	ee06 1a10 	vmov	s12, r1
 800d79a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d79e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800d84c <__ieee754_powf+0x3f4>
 800d7a2:	492b      	ldr	r1, [pc, #172]	; (800d850 <__ieee754_powf+0x3f8>)
 800d7a4:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d7a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d7ac:	edd1 7a00 	vldr	s15, [r1]
 800d7b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d7b4:	ee07 3a90 	vmov	s15, r3
 800d7b8:	4b26      	ldr	r3, [pc, #152]	; (800d854 <__ieee754_powf+0x3fc>)
 800d7ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d7be:	eef0 7a47 	vmov.f32	s15, s14
 800d7c2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d7c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d7ca:	edd4 0a00 	vldr	s1, [r4]
 800d7ce:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d7d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7d6:	ee17 3a90 	vmov	r3, s15
 800d7da:	4013      	ands	r3, r2
 800d7dc:	ee07 3a90 	vmov	s15, r3
 800d7e0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800d7e4:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800d7e8:	eee6 6a65 	vfms.f32	s13, s12, s11
 800d7ec:	ee77 7a66 	vsub.f32	s15, s14, s13
 800d7f0:	e70f      	b.n	800d612 <__ieee754_powf+0x1ba>
 800d7f2:	2401      	movs	r4, #1
 800d7f4:	e75d      	b.n	800d6b2 <__ieee754_powf+0x25a>
 800d7f6:	bf00      	nop
 800d7f8:	0800dd38 	.word	0x0800dd38
 800d7fc:	00000000 	.word	0x00000000
 800d800:	3f7ffff7 	.word	0x3f7ffff7
 800d804:	7149f2ca 	.word	0x7149f2ca
 800d808:	3f800007 	.word	0x3f800007
 800d80c:	3eaaaaab 	.word	0x3eaaaaab
 800d810:	3fb8aa3b 	.word	0x3fb8aa3b
 800d814:	36eca570 	.word	0x36eca570
 800d818:	3fb8aa00 	.word	0x3fb8aa00
 800d81c:	4b800000 	.word	0x4b800000
 800d820:	001cc471 	.word	0x001cc471
 800d824:	005db3d6 	.word	0x005db3d6
 800d828:	0800dd3c 	.word	0x0800dd3c
 800d82c:	fffff000 	.word	0xfffff000
 800d830:	3e6c3255 	.word	0x3e6c3255
 800d834:	3e53f142 	.word	0x3e53f142
 800d838:	3e8ba305 	.word	0x3e8ba305
 800d83c:	3edb6db7 	.word	0x3edb6db7
 800d840:	3f19999a 	.word	0x3f19999a
 800d844:	3f76384f 	.word	0x3f76384f
 800d848:	3f763800 	.word	0x3f763800
 800d84c:	369dc3a0 	.word	0x369dc3a0
 800d850:	0800dd4c 	.word	0x0800dd4c
 800d854:	0800dd44 	.word	0x0800dd44
 800d858:	3338aa3c 	.word	0x3338aa3c
 800d85c:	f040 8092 	bne.w	800d984 <__ieee754_powf+0x52c>
 800d860:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800d858 <__ieee754_powf+0x400>
 800d864:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d868:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800d86c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d874:	f73f aef6 	bgt.w	800d664 <__ieee754_powf+0x20c>
 800d878:	15db      	asrs	r3, r3, #23
 800d87a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800d87e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d882:	4103      	asrs	r3, r0
 800d884:	4423      	add	r3, r4
 800d886:	4949      	ldr	r1, [pc, #292]	; (800d9ac <__ieee754_powf+0x554>)
 800d888:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d88c:	3a7f      	subs	r2, #127	; 0x7f
 800d88e:	4111      	asrs	r1, r2
 800d890:	ea23 0101 	bic.w	r1, r3, r1
 800d894:	ee07 1a10 	vmov	s14, r1
 800d898:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800d89c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d8a0:	f1c2 0217 	rsb	r2, r2, #23
 800d8a4:	4110      	asrs	r0, r2
 800d8a6:	2c00      	cmp	r4, #0
 800d8a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d8ac:	bfb8      	it	lt
 800d8ae:	4240      	neglt	r0, r0
 800d8b0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800d8b4:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800d9b0 <__ieee754_powf+0x558>
 800d8b8:	ee17 3a10 	vmov	r3, s14
 800d8bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d8c0:	f023 030f 	bic.w	r3, r3, #15
 800d8c4:	ee07 3a10 	vmov	s14, r3
 800d8c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8cc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d8d0:	eddf 7a38 	vldr	s15, [pc, #224]	; 800d9b4 <__ieee754_powf+0x55c>
 800d8d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8d8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800d8dc:	eddf 6a36 	vldr	s13, [pc, #216]	; 800d9b8 <__ieee754_powf+0x560>
 800d8e0:	eeb0 0a67 	vmov.f32	s0, s15
 800d8e4:	eea7 0a26 	vfma.f32	s0, s14, s13
 800d8e8:	eeb0 6a40 	vmov.f32	s12, s0
 800d8ec:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d8f0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d8f4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d8f8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800d9bc <__ieee754_powf+0x564>
 800d8fc:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800d9c0 <__ieee754_powf+0x568>
 800d900:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d904:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800d9c4 <__ieee754_powf+0x56c>
 800d908:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d90c:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800d9c8 <__ieee754_powf+0x570>
 800d910:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d914:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800d9cc <__ieee754_powf+0x574>
 800d918:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d91c:	eeb0 6a40 	vmov.f32	s12, s0
 800d920:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800d924:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d928:	eeb0 7a46 	vmov.f32	s14, s12
 800d92c:	ee77 6a66 	vsub.f32	s13, s14, s13
 800d930:	ee20 6a06 	vmul.f32	s12, s0, s12
 800d934:	eee0 7a27 	vfma.f32	s15, s0, s15
 800d938:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d93c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d940:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d944:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d948:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d94c:	ee10 3a10 	vmov	r3, s0
 800d950:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d954:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d958:	da1a      	bge.n	800d990 <__ieee754_powf+0x538>
 800d95a:	f000 f8b7 	bl	800dacc <scalbnf>
 800d95e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d962:	e5cd      	b.n	800d500 <__ieee754_powf+0xa8>
 800d964:	4a1a      	ldr	r2, [pc, #104]	; (800d9d0 <__ieee754_powf+0x578>)
 800d966:	4293      	cmp	r3, r2
 800d968:	dd02      	ble.n	800d970 <__ieee754_powf+0x518>
 800d96a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800d9d4 <__ieee754_powf+0x57c>
 800d96e:	e67b      	b.n	800d668 <__ieee754_powf+0x210>
 800d970:	d108      	bne.n	800d984 <__ieee754_powf+0x52c>
 800d972:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d976:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d97e:	f6ff af7b 	blt.w	800d878 <__ieee754_powf+0x420>
 800d982:	e7f2      	b.n	800d96a <__ieee754_powf+0x512>
 800d984:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800d988:	f73f af76 	bgt.w	800d878 <__ieee754_powf+0x420>
 800d98c:	2000      	movs	r0, #0
 800d98e:	e78f      	b.n	800d8b0 <__ieee754_powf+0x458>
 800d990:	ee00 3a10 	vmov	s0, r3
 800d994:	e7e3      	b.n	800d95e <__ieee754_powf+0x506>
 800d996:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d99a:	e5b1      	b.n	800d500 <__ieee754_powf+0xa8>
 800d99c:	eeb0 0a68 	vmov.f32	s0, s17
 800d9a0:	e5ae      	b.n	800d500 <__ieee754_powf+0xa8>
 800d9a2:	eeb0 0a48 	vmov.f32	s0, s16
 800d9a6:	e5ab      	b.n	800d500 <__ieee754_powf+0xa8>
 800d9a8:	2600      	movs	r6, #0
 800d9aa:	e590      	b.n	800d4ce <__ieee754_powf+0x76>
 800d9ac:	007fffff 	.word	0x007fffff
 800d9b0:	3f317218 	.word	0x3f317218
 800d9b4:	35bfbe8c 	.word	0x35bfbe8c
 800d9b8:	3f317200 	.word	0x3f317200
 800d9bc:	3331bb4c 	.word	0x3331bb4c
 800d9c0:	b5ddea0e 	.word	0xb5ddea0e
 800d9c4:	388ab355 	.word	0x388ab355
 800d9c8:	bb360b61 	.word	0xbb360b61
 800d9cc:	3e2aaaab 	.word	0x3e2aaaab
 800d9d0:	43160000 	.word	0x43160000
 800d9d4:	0da24260 	.word	0x0da24260

0800d9d8 <__ieee754_sqrtf>:
 800d9d8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d9dc:	4770      	bx	lr

0800d9de <fabsf>:
 800d9de:	ee10 3a10 	vmov	r3, s0
 800d9e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d9e6:	ee00 3a10 	vmov	s0, r3
 800d9ea:	4770      	bx	lr

0800d9ec <finitef>:
 800d9ec:	b082      	sub	sp, #8
 800d9ee:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d9f2:	9801      	ldr	r0, [sp, #4]
 800d9f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d9f8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800d9fc:	bfac      	ite	ge
 800d9fe:	2000      	movge	r0, #0
 800da00:	2001      	movlt	r0, #1
 800da02:	b002      	add	sp, #8
 800da04:	4770      	bx	lr
	...

0800da08 <nanf>:
 800da08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800da10 <nanf+0x8>
 800da0c:	4770      	bx	lr
 800da0e:	bf00      	nop
 800da10:	7fc00000 	.word	0x7fc00000

0800da14 <rintf>:
 800da14:	ee10 2a10 	vmov	r2, s0
 800da18:	b513      	push	{r0, r1, r4, lr}
 800da1a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800da1e:	397f      	subs	r1, #127	; 0x7f
 800da20:	2916      	cmp	r1, #22
 800da22:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800da26:	dc47      	bgt.n	800dab8 <rintf+0xa4>
 800da28:	b32b      	cbz	r3, 800da76 <rintf+0x62>
 800da2a:	2900      	cmp	r1, #0
 800da2c:	ee10 3a10 	vmov	r3, s0
 800da30:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800da34:	da21      	bge.n	800da7a <rintf+0x66>
 800da36:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800da3a:	425b      	negs	r3, r3
 800da3c:	4921      	ldr	r1, [pc, #132]	; (800dac4 <rintf+0xb0>)
 800da3e:	0a5b      	lsrs	r3, r3, #9
 800da40:	0d12      	lsrs	r2, r2, #20
 800da42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da46:	0512      	lsls	r2, r2, #20
 800da48:	4313      	orrs	r3, r2
 800da4a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800da4e:	ee07 3a90 	vmov	s15, r3
 800da52:	edd1 6a00 	vldr	s13, [r1]
 800da56:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800da5a:	ed8d 7a01 	vstr	s14, [sp, #4]
 800da5e:	eddd 7a01 	vldr	s15, [sp, #4]
 800da62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800da66:	ee17 3a90 	vmov	r3, s15
 800da6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da6e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800da72:	ee00 3a10 	vmov	s0, r3
 800da76:	b002      	add	sp, #8
 800da78:	bd10      	pop	{r4, pc}
 800da7a:	4a13      	ldr	r2, [pc, #76]	; (800dac8 <rintf+0xb4>)
 800da7c:	410a      	asrs	r2, r1
 800da7e:	4213      	tst	r3, r2
 800da80:	d0f9      	beq.n	800da76 <rintf+0x62>
 800da82:	0854      	lsrs	r4, r2, #1
 800da84:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 800da88:	d006      	beq.n	800da98 <rintf+0x84>
 800da8a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800da8e:	ea23 0304 	bic.w	r3, r3, r4
 800da92:	fa42 f101 	asr.w	r1, r2, r1
 800da96:	430b      	orrs	r3, r1
 800da98:	4a0a      	ldr	r2, [pc, #40]	; (800dac4 <rintf+0xb0>)
 800da9a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800da9e:	ed90 7a00 	vldr	s14, [r0]
 800daa2:	ee07 3a90 	vmov	s15, r3
 800daa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800daaa:	edcd 7a01 	vstr	s15, [sp, #4]
 800daae:	ed9d 0a01 	vldr	s0, [sp, #4]
 800dab2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800dab6:	e7de      	b.n	800da76 <rintf+0x62>
 800dab8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dabc:	d3db      	bcc.n	800da76 <rintf+0x62>
 800dabe:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dac2:	e7d8      	b.n	800da76 <rintf+0x62>
 800dac4:	0800dd54 	.word	0x0800dd54
 800dac8:	007fffff 	.word	0x007fffff

0800dacc <scalbnf>:
 800dacc:	ee10 3a10 	vmov	r3, s0
 800dad0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800dad4:	d025      	beq.n	800db22 <scalbnf+0x56>
 800dad6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800dada:	d302      	bcc.n	800dae2 <scalbnf+0x16>
 800dadc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dae0:	4770      	bx	lr
 800dae2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800dae6:	d122      	bne.n	800db2e <scalbnf+0x62>
 800dae8:	4b2a      	ldr	r3, [pc, #168]	; (800db94 <scalbnf+0xc8>)
 800daea:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800db98 <scalbnf+0xcc>
 800daee:	4298      	cmp	r0, r3
 800daf0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800daf4:	db16      	blt.n	800db24 <scalbnf+0x58>
 800daf6:	ee10 3a10 	vmov	r3, s0
 800dafa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800dafe:	3a19      	subs	r2, #25
 800db00:	4402      	add	r2, r0
 800db02:	2afe      	cmp	r2, #254	; 0xfe
 800db04:	dd15      	ble.n	800db32 <scalbnf+0x66>
 800db06:	ee10 3a10 	vmov	r3, s0
 800db0a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800db9c <scalbnf+0xd0>
 800db0e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800dba0 <scalbnf+0xd4>
 800db12:	2b00      	cmp	r3, #0
 800db14:	eeb0 7a67 	vmov.f32	s14, s15
 800db18:	bfb8      	it	lt
 800db1a:	eef0 7a66 	vmovlt.f32	s15, s13
 800db1e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800db22:	4770      	bx	lr
 800db24:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800dba4 <scalbnf+0xd8>
 800db28:	ee20 0a27 	vmul.f32	s0, s0, s15
 800db2c:	4770      	bx	lr
 800db2e:	0dd2      	lsrs	r2, r2, #23
 800db30:	e7e6      	b.n	800db00 <scalbnf+0x34>
 800db32:	2a00      	cmp	r2, #0
 800db34:	dd06      	ble.n	800db44 <scalbnf+0x78>
 800db36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800db3a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800db3e:	ee00 3a10 	vmov	s0, r3
 800db42:	4770      	bx	lr
 800db44:	f112 0f16 	cmn.w	r2, #22
 800db48:	da1a      	bge.n	800db80 <scalbnf+0xb4>
 800db4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800db4e:	4298      	cmp	r0, r3
 800db50:	ee10 3a10 	vmov	r3, s0
 800db54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800db58:	dd0a      	ble.n	800db70 <scalbnf+0xa4>
 800db5a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800db9c <scalbnf+0xd0>
 800db5e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800dba0 <scalbnf+0xd4>
 800db62:	eef0 7a40 	vmov.f32	s15, s0
 800db66:	2b00      	cmp	r3, #0
 800db68:	bf18      	it	ne
 800db6a:	eeb0 0a47 	vmovne.f32	s0, s14
 800db6e:	e7db      	b.n	800db28 <scalbnf+0x5c>
 800db70:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800dba4 <scalbnf+0xd8>
 800db74:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800dba8 <scalbnf+0xdc>
 800db78:	eef0 7a40 	vmov.f32	s15, s0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	e7f3      	b.n	800db68 <scalbnf+0x9c>
 800db80:	3219      	adds	r2, #25
 800db82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800db86:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800db8a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800dbac <scalbnf+0xe0>
 800db8e:	ee07 3a10 	vmov	s14, r3
 800db92:	e7c4      	b.n	800db1e <scalbnf+0x52>
 800db94:	ffff3cb0 	.word	0xffff3cb0
 800db98:	4c000000 	.word	0x4c000000
 800db9c:	7149f2ca 	.word	0x7149f2ca
 800dba0:	f149f2ca 	.word	0xf149f2ca
 800dba4:	0da24260 	.word	0x0da24260
 800dba8:	8da24260 	.word	0x8da24260
 800dbac:	33000000 	.word	0x33000000

0800dbb0 <_init>:
 800dbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbb2:	bf00      	nop
 800dbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbb6:	bc08      	pop	{r3}
 800dbb8:	469e      	mov	lr, r3
 800dbba:	4770      	bx	lr

0800dbbc <_fini>:
 800dbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbbe:	bf00      	nop
 800dbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbc2:	bc08      	pop	{r3}
 800dbc4:	469e      	mov	lr, r3
 800dbc6:	4770      	bx	lr


reefing-system-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d29c  0800c000  0800c000  0001c000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001060  0801929c  0801929c  0002929c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a2fc  0801a2fc  00030248  2**0
                  CONTENTS
  4 .ARM          00000008  0801a2fc  0801a2fc  0002a2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a304  0801a304  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a304  0801a304  0002a304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a308  0801a308  0002a308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0801a30c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008aac  20000248  0801a554  00030248  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008cf4  0801a554  00038cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008176e  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c456  00000000  00000000  000b19e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00032760  00000000  00000000  000bde3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003028  00000000  00000000  000f05a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003668  00000000  00000000  000f35c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025bf7  00000000  00000000  000f6c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004e9f6  00000000  00000000  0011c827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b5e25  00000000  00000000  0016b21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00221042  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009a2c  00000000  00000000  00221098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	20000248 	.word	0x20000248
 800c01c:	00000000 	.word	0x00000000
 800c020:	08019284 	.word	0x08019284

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	2000024c 	.word	0x2000024c
 800c03c:	08019284 	.word	0x08019284

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <memchr>:
 800c050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c054:	2a10      	cmp	r2, #16
 800c056:	db2b      	blt.n	800c0b0 <memchr+0x60>
 800c058:	f010 0f07 	tst.w	r0, #7
 800c05c:	d008      	beq.n	800c070 <memchr+0x20>
 800c05e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c062:	3a01      	subs	r2, #1
 800c064:	428b      	cmp	r3, r1
 800c066:	d02d      	beq.n	800c0c4 <memchr+0x74>
 800c068:	f010 0f07 	tst.w	r0, #7
 800c06c:	b342      	cbz	r2, 800c0c0 <memchr+0x70>
 800c06e:	d1f6      	bne.n	800c05e <memchr+0xe>
 800c070:	b4f0      	push	{r4, r5, r6, r7}
 800c072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800c076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800c07a:	f022 0407 	bic.w	r4, r2, #7
 800c07e:	f07f 0700 	mvns.w	r7, #0
 800c082:	2300      	movs	r3, #0
 800c084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800c088:	3c08      	subs	r4, #8
 800c08a:	ea85 0501 	eor.w	r5, r5, r1
 800c08e:	ea86 0601 	eor.w	r6, r6, r1
 800c092:	fa85 f547 	uadd8	r5, r5, r7
 800c096:	faa3 f587 	sel	r5, r3, r7
 800c09a:	fa86 f647 	uadd8	r6, r6, r7
 800c09e:	faa5 f687 	sel	r6, r5, r7
 800c0a2:	b98e      	cbnz	r6, 800c0c8 <memchr+0x78>
 800c0a4:	d1ee      	bne.n	800c084 <memchr+0x34>
 800c0a6:	bcf0      	pop	{r4, r5, r6, r7}
 800c0a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c0ac:	f002 0207 	and.w	r2, r2, #7
 800c0b0:	b132      	cbz	r2, 800c0c0 <memchr+0x70>
 800c0b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c0b6:	3a01      	subs	r2, #1
 800c0b8:	ea83 0301 	eor.w	r3, r3, r1
 800c0bc:	b113      	cbz	r3, 800c0c4 <memchr+0x74>
 800c0be:	d1f8      	bne.n	800c0b2 <memchr+0x62>
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	4770      	bx	lr
 800c0c4:	3801      	subs	r0, #1
 800c0c6:	4770      	bx	lr
 800c0c8:	2d00      	cmp	r5, #0
 800c0ca:	bf06      	itte	eq
 800c0cc:	4635      	moveq	r5, r6
 800c0ce:	3803      	subeq	r0, #3
 800c0d0:	3807      	subne	r0, #7
 800c0d2:	f015 0f01 	tst.w	r5, #1
 800c0d6:	d107      	bne.n	800c0e8 <memchr+0x98>
 800c0d8:	3001      	adds	r0, #1
 800c0da:	f415 7f80 	tst.w	r5, #256	; 0x100
 800c0de:	bf02      	ittt	eq
 800c0e0:	3001      	addeq	r0, #1
 800c0e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 800c0e6:	3001      	addeq	r0, #1
 800c0e8:	bcf0      	pop	{r4, r5, r6, r7}
 800c0ea:	3801      	subs	r0, #1
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop

0800c0f0 <__aeabi_uldivmod>:
 800c0f0:	b953      	cbnz	r3, 800c108 <__aeabi_uldivmod+0x18>
 800c0f2:	b94a      	cbnz	r2, 800c108 <__aeabi_uldivmod+0x18>
 800c0f4:	2900      	cmp	r1, #0
 800c0f6:	bf08      	it	eq
 800c0f8:	2800      	cmpeq	r0, #0
 800c0fa:	bf1c      	itt	ne
 800c0fc:	f04f 31ff 	movne.w	r1, #4294967295
 800c100:	f04f 30ff 	movne.w	r0, #4294967295
 800c104:	f000 b96e 	b.w	800c3e4 <__aeabi_idiv0>
 800c108:	f1ad 0c08 	sub.w	ip, sp, #8
 800c10c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c110:	f000 f806 	bl	800c120 <__udivmoddi4>
 800c114:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c11c:	b004      	add	sp, #16
 800c11e:	4770      	bx	lr

0800c120 <__udivmoddi4>:
 800c120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c124:	9d08      	ldr	r5, [sp, #32]
 800c126:	4604      	mov	r4, r0
 800c128:	468c      	mov	ip, r1
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f040 8083 	bne.w	800c236 <__udivmoddi4+0x116>
 800c130:	428a      	cmp	r2, r1
 800c132:	4617      	mov	r7, r2
 800c134:	d947      	bls.n	800c1c6 <__udivmoddi4+0xa6>
 800c136:	fab2 f282 	clz	r2, r2
 800c13a:	b142      	cbz	r2, 800c14e <__udivmoddi4+0x2e>
 800c13c:	f1c2 0020 	rsb	r0, r2, #32
 800c140:	fa24 f000 	lsr.w	r0, r4, r0
 800c144:	4091      	lsls	r1, r2
 800c146:	4097      	lsls	r7, r2
 800c148:	ea40 0c01 	orr.w	ip, r0, r1
 800c14c:	4094      	lsls	r4, r2
 800c14e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800c152:	0c23      	lsrs	r3, r4, #16
 800c154:	fbbc f6f8 	udiv	r6, ip, r8
 800c158:	fa1f fe87 	uxth.w	lr, r7
 800c15c:	fb08 c116 	mls	r1, r8, r6, ip
 800c160:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c164:	fb06 f10e 	mul.w	r1, r6, lr
 800c168:	4299      	cmp	r1, r3
 800c16a:	d909      	bls.n	800c180 <__udivmoddi4+0x60>
 800c16c:	18fb      	adds	r3, r7, r3
 800c16e:	f106 30ff 	add.w	r0, r6, #4294967295
 800c172:	f080 8119 	bcs.w	800c3a8 <__udivmoddi4+0x288>
 800c176:	4299      	cmp	r1, r3
 800c178:	f240 8116 	bls.w	800c3a8 <__udivmoddi4+0x288>
 800c17c:	3e02      	subs	r6, #2
 800c17e:	443b      	add	r3, r7
 800c180:	1a5b      	subs	r3, r3, r1
 800c182:	b2a4      	uxth	r4, r4
 800c184:	fbb3 f0f8 	udiv	r0, r3, r8
 800c188:	fb08 3310 	mls	r3, r8, r0, r3
 800c18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c190:	fb00 fe0e 	mul.w	lr, r0, lr
 800c194:	45a6      	cmp	lr, r4
 800c196:	d909      	bls.n	800c1ac <__udivmoddi4+0x8c>
 800c198:	193c      	adds	r4, r7, r4
 800c19a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c19e:	f080 8105 	bcs.w	800c3ac <__udivmoddi4+0x28c>
 800c1a2:	45a6      	cmp	lr, r4
 800c1a4:	f240 8102 	bls.w	800c3ac <__udivmoddi4+0x28c>
 800c1a8:	3802      	subs	r0, #2
 800c1aa:	443c      	add	r4, r7
 800c1ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c1b0:	eba4 040e 	sub.w	r4, r4, lr
 800c1b4:	2600      	movs	r6, #0
 800c1b6:	b11d      	cbz	r5, 800c1c0 <__udivmoddi4+0xa0>
 800c1b8:	40d4      	lsrs	r4, r2
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	e9c5 4300 	strd	r4, r3, [r5]
 800c1c0:	4631      	mov	r1, r6
 800c1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c6:	b902      	cbnz	r2, 800c1ca <__udivmoddi4+0xaa>
 800c1c8:	deff      	udf	#255	; 0xff
 800c1ca:	fab2 f282 	clz	r2, r2
 800c1ce:	2a00      	cmp	r2, #0
 800c1d0:	d150      	bne.n	800c274 <__udivmoddi4+0x154>
 800c1d2:	1bcb      	subs	r3, r1, r7
 800c1d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c1d8:	fa1f f887 	uxth.w	r8, r7
 800c1dc:	2601      	movs	r6, #1
 800c1de:	fbb3 fcfe 	udiv	ip, r3, lr
 800c1e2:	0c21      	lsrs	r1, r4, #16
 800c1e4:	fb0e 331c 	mls	r3, lr, ip, r3
 800c1e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c1ec:	fb08 f30c 	mul.w	r3, r8, ip
 800c1f0:	428b      	cmp	r3, r1
 800c1f2:	d907      	bls.n	800c204 <__udivmoddi4+0xe4>
 800c1f4:	1879      	adds	r1, r7, r1
 800c1f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c1fa:	d202      	bcs.n	800c202 <__udivmoddi4+0xe2>
 800c1fc:	428b      	cmp	r3, r1
 800c1fe:	f200 80e9 	bhi.w	800c3d4 <__udivmoddi4+0x2b4>
 800c202:	4684      	mov	ip, r0
 800c204:	1ac9      	subs	r1, r1, r3
 800c206:	b2a3      	uxth	r3, r4
 800c208:	fbb1 f0fe 	udiv	r0, r1, lr
 800c20c:	fb0e 1110 	mls	r1, lr, r0, r1
 800c210:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800c214:	fb08 f800 	mul.w	r8, r8, r0
 800c218:	45a0      	cmp	r8, r4
 800c21a:	d907      	bls.n	800c22c <__udivmoddi4+0x10c>
 800c21c:	193c      	adds	r4, r7, r4
 800c21e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c222:	d202      	bcs.n	800c22a <__udivmoddi4+0x10a>
 800c224:	45a0      	cmp	r8, r4
 800c226:	f200 80d9 	bhi.w	800c3dc <__udivmoddi4+0x2bc>
 800c22a:	4618      	mov	r0, r3
 800c22c:	eba4 0408 	sub.w	r4, r4, r8
 800c230:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800c234:	e7bf      	b.n	800c1b6 <__udivmoddi4+0x96>
 800c236:	428b      	cmp	r3, r1
 800c238:	d909      	bls.n	800c24e <__udivmoddi4+0x12e>
 800c23a:	2d00      	cmp	r5, #0
 800c23c:	f000 80b1 	beq.w	800c3a2 <__udivmoddi4+0x282>
 800c240:	2600      	movs	r6, #0
 800c242:	e9c5 0100 	strd	r0, r1, [r5]
 800c246:	4630      	mov	r0, r6
 800c248:	4631      	mov	r1, r6
 800c24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c24e:	fab3 f683 	clz	r6, r3
 800c252:	2e00      	cmp	r6, #0
 800c254:	d14a      	bne.n	800c2ec <__udivmoddi4+0x1cc>
 800c256:	428b      	cmp	r3, r1
 800c258:	d302      	bcc.n	800c260 <__udivmoddi4+0x140>
 800c25a:	4282      	cmp	r2, r0
 800c25c:	f200 80b8 	bhi.w	800c3d0 <__udivmoddi4+0x2b0>
 800c260:	1a84      	subs	r4, r0, r2
 800c262:	eb61 0103 	sbc.w	r1, r1, r3
 800c266:	2001      	movs	r0, #1
 800c268:	468c      	mov	ip, r1
 800c26a:	2d00      	cmp	r5, #0
 800c26c:	d0a8      	beq.n	800c1c0 <__udivmoddi4+0xa0>
 800c26e:	e9c5 4c00 	strd	r4, ip, [r5]
 800c272:	e7a5      	b.n	800c1c0 <__udivmoddi4+0xa0>
 800c274:	f1c2 0320 	rsb	r3, r2, #32
 800c278:	fa20 f603 	lsr.w	r6, r0, r3
 800c27c:	4097      	lsls	r7, r2
 800c27e:	fa01 f002 	lsl.w	r0, r1, r2
 800c282:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c286:	40d9      	lsrs	r1, r3
 800c288:	4330      	orrs	r0, r6
 800c28a:	0c03      	lsrs	r3, r0, #16
 800c28c:	fbb1 f6fe 	udiv	r6, r1, lr
 800c290:	fa1f f887 	uxth.w	r8, r7
 800c294:	fb0e 1116 	mls	r1, lr, r6, r1
 800c298:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c29c:	fb06 f108 	mul.w	r1, r6, r8
 800c2a0:	4299      	cmp	r1, r3
 800c2a2:	fa04 f402 	lsl.w	r4, r4, r2
 800c2a6:	d909      	bls.n	800c2bc <__udivmoddi4+0x19c>
 800c2a8:	18fb      	adds	r3, r7, r3
 800c2aa:	f106 3cff 	add.w	ip, r6, #4294967295
 800c2ae:	f080 808d 	bcs.w	800c3cc <__udivmoddi4+0x2ac>
 800c2b2:	4299      	cmp	r1, r3
 800c2b4:	f240 808a 	bls.w	800c3cc <__udivmoddi4+0x2ac>
 800c2b8:	3e02      	subs	r6, #2
 800c2ba:	443b      	add	r3, r7
 800c2bc:	1a5b      	subs	r3, r3, r1
 800c2be:	b281      	uxth	r1, r0
 800c2c0:	fbb3 f0fe 	udiv	r0, r3, lr
 800c2c4:	fb0e 3310 	mls	r3, lr, r0, r3
 800c2c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c2cc:	fb00 f308 	mul.w	r3, r0, r8
 800c2d0:	428b      	cmp	r3, r1
 800c2d2:	d907      	bls.n	800c2e4 <__udivmoddi4+0x1c4>
 800c2d4:	1879      	adds	r1, r7, r1
 800c2d6:	f100 3cff 	add.w	ip, r0, #4294967295
 800c2da:	d273      	bcs.n	800c3c4 <__udivmoddi4+0x2a4>
 800c2dc:	428b      	cmp	r3, r1
 800c2de:	d971      	bls.n	800c3c4 <__udivmoddi4+0x2a4>
 800c2e0:	3802      	subs	r0, #2
 800c2e2:	4439      	add	r1, r7
 800c2e4:	1acb      	subs	r3, r1, r3
 800c2e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800c2ea:	e778      	b.n	800c1de <__udivmoddi4+0xbe>
 800c2ec:	f1c6 0c20 	rsb	ip, r6, #32
 800c2f0:	fa03 f406 	lsl.w	r4, r3, r6
 800c2f4:	fa22 f30c 	lsr.w	r3, r2, ip
 800c2f8:	431c      	orrs	r4, r3
 800c2fa:	fa20 f70c 	lsr.w	r7, r0, ip
 800c2fe:	fa01 f306 	lsl.w	r3, r1, r6
 800c302:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800c306:	fa21 f10c 	lsr.w	r1, r1, ip
 800c30a:	431f      	orrs	r7, r3
 800c30c:	0c3b      	lsrs	r3, r7, #16
 800c30e:	fbb1 f9fe 	udiv	r9, r1, lr
 800c312:	fa1f f884 	uxth.w	r8, r4
 800c316:	fb0e 1119 	mls	r1, lr, r9, r1
 800c31a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800c31e:	fb09 fa08 	mul.w	sl, r9, r8
 800c322:	458a      	cmp	sl, r1
 800c324:	fa02 f206 	lsl.w	r2, r2, r6
 800c328:	fa00 f306 	lsl.w	r3, r0, r6
 800c32c:	d908      	bls.n	800c340 <__udivmoddi4+0x220>
 800c32e:	1861      	adds	r1, r4, r1
 800c330:	f109 30ff 	add.w	r0, r9, #4294967295
 800c334:	d248      	bcs.n	800c3c8 <__udivmoddi4+0x2a8>
 800c336:	458a      	cmp	sl, r1
 800c338:	d946      	bls.n	800c3c8 <__udivmoddi4+0x2a8>
 800c33a:	f1a9 0902 	sub.w	r9, r9, #2
 800c33e:	4421      	add	r1, r4
 800c340:	eba1 010a 	sub.w	r1, r1, sl
 800c344:	b2bf      	uxth	r7, r7
 800c346:	fbb1 f0fe 	udiv	r0, r1, lr
 800c34a:	fb0e 1110 	mls	r1, lr, r0, r1
 800c34e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c352:	fb00 f808 	mul.w	r8, r0, r8
 800c356:	45b8      	cmp	r8, r7
 800c358:	d907      	bls.n	800c36a <__udivmoddi4+0x24a>
 800c35a:	19e7      	adds	r7, r4, r7
 800c35c:	f100 31ff 	add.w	r1, r0, #4294967295
 800c360:	d22e      	bcs.n	800c3c0 <__udivmoddi4+0x2a0>
 800c362:	45b8      	cmp	r8, r7
 800c364:	d92c      	bls.n	800c3c0 <__udivmoddi4+0x2a0>
 800c366:	3802      	subs	r0, #2
 800c368:	4427      	add	r7, r4
 800c36a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c36e:	eba7 0708 	sub.w	r7, r7, r8
 800c372:	fba0 8902 	umull	r8, r9, r0, r2
 800c376:	454f      	cmp	r7, r9
 800c378:	46c6      	mov	lr, r8
 800c37a:	4649      	mov	r1, r9
 800c37c:	d31a      	bcc.n	800c3b4 <__udivmoddi4+0x294>
 800c37e:	d017      	beq.n	800c3b0 <__udivmoddi4+0x290>
 800c380:	b15d      	cbz	r5, 800c39a <__udivmoddi4+0x27a>
 800c382:	ebb3 020e 	subs.w	r2, r3, lr
 800c386:	eb67 0701 	sbc.w	r7, r7, r1
 800c38a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800c38e:	40f2      	lsrs	r2, r6
 800c390:	ea4c 0202 	orr.w	r2, ip, r2
 800c394:	40f7      	lsrs	r7, r6
 800c396:	e9c5 2700 	strd	r2, r7, [r5]
 800c39a:	2600      	movs	r6, #0
 800c39c:	4631      	mov	r1, r6
 800c39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3a2:	462e      	mov	r6, r5
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	e70b      	b.n	800c1c0 <__udivmoddi4+0xa0>
 800c3a8:	4606      	mov	r6, r0
 800c3aa:	e6e9      	b.n	800c180 <__udivmoddi4+0x60>
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	e6fd      	b.n	800c1ac <__udivmoddi4+0x8c>
 800c3b0:	4543      	cmp	r3, r8
 800c3b2:	d2e5      	bcs.n	800c380 <__udivmoddi4+0x260>
 800c3b4:	ebb8 0e02 	subs.w	lr, r8, r2
 800c3b8:	eb69 0104 	sbc.w	r1, r9, r4
 800c3bc:	3801      	subs	r0, #1
 800c3be:	e7df      	b.n	800c380 <__udivmoddi4+0x260>
 800c3c0:	4608      	mov	r0, r1
 800c3c2:	e7d2      	b.n	800c36a <__udivmoddi4+0x24a>
 800c3c4:	4660      	mov	r0, ip
 800c3c6:	e78d      	b.n	800c2e4 <__udivmoddi4+0x1c4>
 800c3c8:	4681      	mov	r9, r0
 800c3ca:	e7b9      	b.n	800c340 <__udivmoddi4+0x220>
 800c3cc:	4666      	mov	r6, ip
 800c3ce:	e775      	b.n	800c2bc <__udivmoddi4+0x19c>
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	e74a      	b.n	800c26a <__udivmoddi4+0x14a>
 800c3d4:	f1ac 0c02 	sub.w	ip, ip, #2
 800c3d8:	4439      	add	r1, r7
 800c3da:	e713      	b.n	800c204 <__udivmoddi4+0xe4>
 800c3dc:	3802      	subs	r0, #2
 800c3de:	443c      	add	r4, r7
 800c3e0:	e724      	b.n	800c22c <__udivmoddi4+0x10c>
 800c3e2:	bf00      	nop

0800c3e4 <__aeabi_idiv0>:
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop

0800c3e8 <cli_write>:
 800c3e8:	b570      	push	{r4, r5, r6, lr}
 800c3ea:	4604      	mov	r4, r0
 800c3ec:	4d05      	ldr	r5, [pc, #20]	; (800c404 <cli_write+0x1c>)
 800c3ee:	2603      	movs	r6, #3
 800c3f0:	4621      	mov	r1, r4
 800c3f2:	6828      	ldr	r0, [r5, #0]
 800c3f4:	f003 fd84 	bl	800ff00 <fifo_write>
 800c3f8:	b918      	cbnz	r0, 800c402 <cli_write+0x1a>
 800c3fa:	4630      	mov	r0, r6
 800c3fc:	f008 fe19 	bl	8015032 <osDelay>
 800c400:	e7f6      	b.n	800c3f0 <cli_write+0x8>
 800c402:	bd70      	pop	{r4, r5, r6, pc}
 800c404:	200003ec 	.word	0x200003ec

0800c408 <is_empty>:
 800c408:	b120      	cbz	r0, 800c414 <is_empty+0xc>
 800c40a:	7800      	ldrb	r0, [r0, #0]
 800c40c:	fab0 f080 	clz	r0, r0
 800c410:	0940      	lsrs	r0, r0, #5
 800c412:	4770      	bx	lr
 800c414:	2001      	movs	r0, #1
 800c416:	4770      	bx	lr

0800c418 <get_min_max>:
 800c418:	7903      	ldrb	r3, [r0, #4]
 800c41a:	f013 0f05 	tst.w	r3, #5
 800c41e:	d006      	beq.n	800c42e <get_min_max+0x16>
 800c420:	f9b0 3005 	ldrsh.w	r3, [r0, #5]
 800c424:	600b      	str	r3, [r1, #0]
 800c426:	f9b0 3007 	ldrsh.w	r3, [r0, #7]
 800c42a:	6013      	str	r3, [r2, #0]
 800c42c:	4770      	bx	lr
 800c42e:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 800c432:	600b      	str	r3, [r1, #0]
 800c434:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 800c438:	6013      	str	r3, [r2, #0]
 800c43a:	4770      	bx	lr

0800c43c <cli_print>:
 800c43c:	b508      	push	{r3, lr}
 800c43e:	4601      	mov	r1, r0
 800c440:	4b02      	ldr	r3, [pc, #8]	; (800c44c <cli_print+0x10>)
 800c442:	6818      	ldr	r0, [r3, #0]
 800c444:	f003 fe0d 	bl	8010062 <fifo_write_str>
 800c448:	bd08      	pop	{r3, pc}
 800c44a:	bf00      	nop
 800c44c:	200003ec 	.word	0x200003ec

0800c450 <cli_print_error_va>:
 800c450:	b570      	push	{r4, r5, r6, lr}
 800c452:	b0c0      	sub	sp, #256	; 0x100
 800c454:	4606      	mov	r6, r0
 800c456:	460c      	mov	r4, r1
 800c458:	4615      	mov	r5, r2
 800c45a:	480c      	ldr	r0, [pc, #48]	; (800c48c <cli_print_error_va+0x3c>)
 800c45c:	f7ff ffee 	bl	800c43c <cli_print>
 800c460:	4630      	mov	r0, r6
 800c462:	f7ff ffeb 	bl	800c43c <cli_print>
 800c466:	4e0a      	ldr	r6, [pc, #40]	; (800c490 <cli_print_error_va+0x40>)
 800c468:	4630      	mov	r0, r6
 800c46a:	f7ff ffe7 	bl	800c43c <cli_print>
 800c46e:	462b      	mov	r3, r5
 800c470:	4622      	mov	r2, r4
 800c472:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c476:	4668      	mov	r0, sp
 800c478:	f00b ff6c 	bl	8018354 <vsniprintf>
 800c47c:	4668      	mov	r0, sp
 800c47e:	f7ff ffdd 	bl	800c43c <cli_print>
 800c482:	4630      	mov	r0, r6
 800c484:	f7ff ffda 	bl	800c43c <cli_print>
 800c488:	b040      	add	sp, #256	; 0x100
 800c48a:	bd70      	pop	{r4, r5, r6, pc}
 800c48c:	080192bc 	.word	0x080192bc
 800c490:	08019504 	.word	0x08019504

0800c494 <cli_print_error>:
 800c494:	b40e      	push	{r1, r2, r3}
 800c496:	b500      	push	{lr}
 800c498:	b082      	sub	sp, #8
 800c49a:	aa03      	add	r2, sp, #12
 800c49c:	f852 1b04 	ldr.w	r1, [r2], #4
 800c4a0:	9201      	str	r2, [sp, #4]
 800c4a2:	f7ff ffd5 	bl	800c450 <cli_print_error_va>
 800c4a6:	b002      	add	sp, #8
 800c4a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4ac:	b003      	add	sp, #12
 800c4ae:	4770      	bx	lr

0800c4b0 <cli_print_linefeed>:
 800c4b0:	b508      	push	{r3, lr}
 800c4b2:	4802      	ldr	r0, [pc, #8]	; (800c4bc <cli_print_linefeed+0xc>)
 800c4b4:	f7ff ffc2 	bl	800c43c <cli_print>
 800c4b8:	bd08      	pop	{r3, pc}
 800c4ba:	bf00      	nop
 800c4bc:	080192c8 	.word	0x080192c8

0800c4c0 <cli_print_line>:
 800c4c0:	b508      	push	{r3, lr}
 800c4c2:	f7ff ffbb 	bl	800c43c <cli_print>
 800c4c6:	f7ff fff3 	bl	800c4b0 <cli_print_linefeed>
 800c4ca:	bd08      	pop	{r3, pc}

0800c4cc <cli_printf>:
 800c4cc:	b40f      	push	{r0, r1, r2, r3}
 800c4ce:	b510      	push	{r4, lr}
 800c4d0:	b082      	sub	sp, #8
 800c4d2:	ab04      	add	r3, sp, #16
 800c4d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4d8:	9301      	str	r3, [sp, #4]
 800c4da:	4c07      	ldr	r4, [pc, #28]	; (800c4f8 <cli_printf+0x2c>)
 800c4dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f00b ff37 	bl	8018354 <vsniprintf>
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	f7ff ffa8 	bl	800c43c <cli_print>
 800c4ec:	b002      	add	sp, #8
 800c4ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4f2:	b004      	add	sp, #16
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	20000264 	.word	0x20000264

0800c4fc <cli_print_linef>:
 800c4fc:	b40f      	push	{r0, r1, r2, r3}
 800c4fe:	b510      	push	{r4, lr}
 800c500:	b082      	sub	sp, #8
 800c502:	ab04      	add	r3, sp, #16
 800c504:	f853 2b04 	ldr.w	r2, [r3], #4
 800c508:	9301      	str	r3, [sp, #4]
 800c50a:	4c08      	ldr	r4, [pc, #32]	; (800c52c <cli_print_linef+0x30>)
 800c50c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c510:	4620      	mov	r0, r4
 800c512:	f00b ff1f 	bl	8018354 <vsniprintf>
 800c516:	4620      	mov	r0, r4
 800c518:	f7ff ff90 	bl	800c43c <cli_print>
 800c51c:	f7ff ffc8 	bl	800c4b0 <cli_print_linefeed>
 800c520:	b002      	add	sp, #8
 800c522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c526:	b004      	add	sp, #16
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	20000264 	.word	0x20000264

0800c530 <cli_print_error_linef>:
 800c530:	b40e      	push	{r1, r2, r3}
 800c532:	b500      	push	{lr}
 800c534:	b082      	sub	sp, #8
 800c536:	aa03      	add	r2, sp, #12
 800c538:	f852 1b04 	ldr.w	r1, [r2], #4
 800c53c:	9201      	str	r2, [sp, #4]
 800c53e:	f7ff ff87 	bl	800c450 <cli_print_error_va>
 800c542:	4804      	ldr	r0, [pc, #16]	; (800c554 <cli_print_error_linef+0x24>)
 800c544:	f7ff ff7a 	bl	800c43c <cli_print>
 800c548:	b002      	add	sp, #8
 800c54a:	f85d eb04 	ldr.w	lr, [sp], #4
 800c54e:	b003      	add	sp, #12
 800c550:	4770      	bx	lr
 800c552:	bf00      	nop
 800c554:	080192c8 	.word	0x080192c8

0800c558 <skip_space>:
 800c558:	7803      	ldrb	r3, [r0, #0]
 800c55a:	2b20      	cmp	r3, #32
 800c55c:	d103      	bne.n	800c566 <skip_space+0xe>
 800c55e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800c562:	2b20      	cmp	r3, #32
 800c564:	d0fb      	beq.n	800c55e <skip_space+0x6>
 800c566:	4770      	bx	lr

0800c568 <process_character>:
 800c568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c56c:	4b46      	ldr	r3, [pc, #280]	; (800c688 <process_character+0x120>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d074      	beq.n	800c65e <process_character+0xf6>
 800c574:	280a      	cmp	r0, #10
 800c576:	d005      	beq.n	800c584 <process_character+0x1c>
 800c578:	280d      	cmp	r0, #13
 800c57a:	d003      	beq.n	800c584 <process_character+0x1c>
 800c57c:	2b7f      	cmp	r3, #127	; 0x7f
 800c57e:	d97d      	bls.n	800c67c <process_character+0x114>
 800c580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c584:	f7ff ff94 	bl	800c4b0 <cli_print_linefeed>
 800c588:	2123      	movs	r1, #35	; 0x23
 800c58a:	4840      	ldr	r0, [pc, #256]	; (800c68c <process_character+0x124>)
 800c58c:	f00b fd36 	bl	8017ffc <strchr>
 800c590:	b118      	cbz	r0, 800c59a <process_character+0x32>
 800c592:	4a3e      	ldr	r2, [pc, #248]	; (800c68c <process_character+0x124>)
 800c594:	1a83      	subs	r3, r0, r2
 800c596:	4a3c      	ldr	r2, [pc, #240]	; (800c688 <process_character+0x120>)
 800c598:	6013      	str	r3, [r2, #0]
 800c59a:	4b3b      	ldr	r3, [pc, #236]	; (800c688 <process_character+0x120>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d04a      	beq.n	800c638 <process_character+0xd0>
 800c5a2:	4a3b      	ldr	r2, [pc, #236]	; (800c690 <process_character+0x128>)
 800c5a4:	441a      	add	r2, r3
 800c5a6:	2400      	movs	r4, #0
 800c5a8:	2501      	movs	r5, #1
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3b01      	subs	r3, #1
 800c5ae:	f812 1901 	ldrb.w	r1, [r2], #-1
 800c5b2:	2920      	cmp	r1, #32
 800c5b4:	d106      	bne.n	800c5c4 <process_character+0x5c>
 800c5b6:	462c      	mov	r4, r5
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d1f6      	bne.n	800c5aa <process_character+0x42>
 800c5bc:	4b32      	ldr	r3, [pc, #200]	; (800c688 <process_character+0x120>)
 800c5be:	2200      	movs	r2, #0
 800c5c0:	601a      	str	r2, [r3, #0]
 800c5c2:	e039      	b.n	800c638 <process_character+0xd0>
 800c5c4:	b10c      	cbz	r4, 800c5ca <process_character+0x62>
 800c5c6:	4b30      	ldr	r3, [pc, #192]	; (800c688 <process_character+0x120>)
 800c5c8:	6018      	str	r0, [r3, #0]
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	d034      	beq.n	800c638 <process_character+0xd0>
 800c5ce:	4b2f      	ldr	r3, [pc, #188]	; (800c68c <process_character+0x124>)
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	541a      	strb	r2, [r3, r0]
 800c5d4:	4b2f      	ldr	r3, [pc, #188]	; (800c694 <process_character+0x12c>)
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	4b2f      	ldr	r3, [pc, #188]	; (800c698 <process_character+0x130>)
 800c5da:	eb03 1802 	add.w	r8, r3, r2, lsl #4
 800c5de:	4598      	cmp	r8, r3
 800c5e0:	d939      	bls.n	800c656 <process_character+0xee>
 800c5e2:	461d      	mov	r5, r3
 800c5e4:	4f29      	ldr	r7, [pc, #164]	; (800c68c <process_character+0x124>)
 800c5e6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 800c6a8 <process_character+0x140>
 800c5ea:	e008      	b.n	800c5fe <process_character+0x96>
 800c5ec:	1c60      	adds	r0, r4, #1
 800c5ee:	4438      	add	r0, r7
 800c5f0:	f7ff ffb2 	bl	800c558 <skip_space>
 800c5f4:	4601      	mov	r1, r0
 800c5f6:	b9b8      	cbnz	r0, 800c628 <process_character+0xc0>
 800c5f8:	3510      	adds	r5, #16
 800c5fa:	4545      	cmp	r5, r8
 800c5fc:	d22b      	bcs.n	800c656 <process_character+0xee>
 800c5fe:	682e      	ldr	r6, [r5, #0]
 800c600:	4630      	mov	r0, r6
 800c602:	f7ff fd1d 	bl	800c040 <strlen>
 800c606:	4604      	mov	r4, r0
 800c608:	4602      	mov	r2, r0
 800c60a:	4631      	mov	r1, r6
 800c60c:	4638      	mov	r0, r7
 800c60e:	f00b fd03 	bl	8018018 <strncasecmp>
 800c612:	2800      	cmp	r0, #0
 800c614:	d1f0      	bne.n	800c5f8 <process_character+0x90>
 800c616:	5d3b      	ldrb	r3, [r7, r4]
 800c618:	f813 2009 	ldrb.w	r2, [r3, r9]
 800c61c:	f012 0f08 	tst.w	r2, #8
 800c620:	d1e4      	bne.n	800c5ec <process_character+0x84>
 800c622:	2b00      	cmp	r3, #0
 800c624:	d0e2      	beq.n	800c5ec <process_character+0x84>
 800c626:	e7e7      	b.n	800c5f8 <process_character+0x90>
 800c628:	45a8      	cmp	r8, r5
 800c62a:	d914      	bls.n	800c656 <process_character+0xee>
 800c62c:	68eb      	ldr	r3, [r5, #12]
 800c62e:	6828      	ldr	r0, [r5, #0]
 800c630:	4798      	blx	r3
 800c632:	4b15      	ldr	r3, [pc, #84]	; (800c688 <process_character+0x120>)
 800c634:	2200      	movs	r2, #0
 800c636:	601a      	str	r2, [r3, #0]
 800c638:	4c14      	ldr	r4, [pc, #80]	; (800c68c <process_character+0x124>)
 800c63a:	2280      	movs	r2, #128	; 0x80
 800c63c:	4621      	mov	r1, r4
 800c63e:	4817      	ldr	r0, [pc, #92]	; (800c69c <process_character+0x134>)
 800c640:	f00b fd1e 	bl	8018080 <strncpy>
 800c644:	2280      	movs	r2, #128	; 0x80
 800c646:	2100      	movs	r1, #0
 800c648:	4620      	mov	r0, r4
 800c64a:	f00b fbc5 	bl	8017dd8 <memset>
 800c64e:	4814      	ldr	r0, [pc, #80]	; (800c6a0 <process_character+0x138>)
 800c650:	f7ff ff3c 	bl	800c4cc <cli_printf>
 800c654:	e794      	b.n	800c580 <process_character+0x18>
 800c656:	4813      	ldr	r0, [pc, #76]	; (800c6a4 <process_character+0x13c>)
 800c658:	f7ff ff32 	bl	800c4c0 <cli_print_line>
 800c65c:	e7e9      	b.n	800c632 <process_character+0xca>
 800c65e:	f1a0 0220 	sub.w	r2, r0, #32
 800c662:	b2d2      	uxtb	r2, r2
 800c664:	2a5e      	cmp	r2, #94	; 0x5e
 800c666:	d88b      	bhi.n	800c580 <process_character+0x18>
 800c668:	2820      	cmp	r0, #32
 800c66a:	d089      	beq.n	800c580 <process_character+0x18>
 800c66c:	1c59      	adds	r1, r3, #1
 800c66e:	4a06      	ldr	r2, [pc, #24]	; (800c688 <process_character+0x120>)
 800c670:	6011      	str	r1, [r2, #0]
 800c672:	4a06      	ldr	r2, [pc, #24]	; (800c68c <process_character+0x124>)
 800c674:	54d0      	strb	r0, [r2, r3]
 800c676:	f7ff feb7 	bl	800c3e8 <cli_write>
 800c67a:	e781      	b.n	800c580 <process_character+0x18>
 800c67c:	f1a0 0220 	sub.w	r2, r0, #32
 800c680:	b2d2      	uxtb	r2, r2
 800c682:	2a5e      	cmp	r2, #94	; 0x5e
 800c684:	d9f2      	bls.n	800c66c <process_character+0x104>
 800c686:	e77b      	b.n	800c580 <process_character+0x18>
 800c688:	20000364 	.word	0x20000364
 800c68c:	20000368 	.word	0x20000368
 800c690:	20000367 	.word	0x20000367
 800c694:	08019700 	.word	0x08019700
 800c698:	08019704 	.word	0x08019704
 800c69c:	200003f4 	.word	0x200003f4
 800c6a0:	080192e8 	.word	0x080192e8
 800c6a4:	080192cc 	.word	0x080192cc
 800c6a8:	0801a1a7 	.word	0x0801a1a7

0800c6ac <cli_process>:
 800c6ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b0:	4f75      	ldr	r7, [pc, #468]	; (800c888 <cli_process+0x1dc>)
 800c6b2:	4e76      	ldr	r6, [pc, #472]	; (800c88c <cli_process+0x1e0>)
 800c6b4:	46b0      	mov	r8, r6
 800c6b6:	e002      	b.n	800c6be <cli_process+0x12>
 800c6b8:	3b01      	subs	r3, #1
 800c6ba:	4a75      	ldr	r2, [pc, #468]	; (800c890 <cli_process+0x1e4>)
 800c6bc:	8013      	strh	r3, [r2, #0]
 800c6be:	6838      	ldr	r0, [r7, #0]
 800c6c0:	f003 fbfc 	bl	800febc <fifo_get_length>
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	f000 80dc 	beq.w	800c882 <cli_process+0x1d6>
 800c6ca:	6838      	ldr	r0, [r7, #0]
 800c6cc:	f003 fbf8 	bl	800fec0 <fifo_read>
 800c6d0:	4b6f      	ldr	r3, [pc, #444]	; (800c890 <cli_process+0x1e4>)
 800c6d2:	881b      	ldrh	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d1ef      	bne.n	800c6b8 <cli_process+0xc>
 800c6d8:	2809      	cmp	r0, #9
 800c6da:	d02a      	beq.n	800c732 <cli_process+0x86>
 800c6dc:	283f      	cmp	r0, #63	; 0x3f
 800c6de:	d028      	beq.n	800c732 <cli_process+0x86>
 800c6e0:	2804      	cmp	r0, #4
 800c6e2:	f000 809e 	beq.w	800c822 <cli_process+0x176>
 800c6e6:	280c      	cmp	r0, #12
 800c6e8:	f000 80a2 	beq.w	800c830 <cli_process+0x184>
 800c6ec:	2808      	cmp	r0, #8
 800c6ee:	f000 80ab 	beq.w	800c848 <cli_process+0x19c>
 800c6f2:	281b      	cmp	r0, #27
 800c6f4:	f040 80b6 	bne.w	800c864 <cli_process+0x1b8>
 800c6f8:	4b66      	ldr	r3, [pc, #408]	; (800c894 <cli_process+0x1e8>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	b15b      	cbz	r3, 800c716 <cli_process+0x6a>
 800c6fe:	4c65      	ldr	r4, [pc, #404]	; (800c894 <cli_process+0x1e8>)
 800c700:	4d65      	ldr	r5, [pc, #404]	; (800c898 <cli_process+0x1ec>)
 800c702:	3b01      	subs	r3, #1
 800c704:	6023      	str	r3, [r4, #0]
 800c706:	2200      	movs	r2, #0
 800c708:	54f2      	strb	r2, [r6, r3]
 800c70a:	4628      	mov	r0, r5
 800c70c:	f7ff fe96 	bl	800c43c <cli_print>
 800c710:	6823      	ldr	r3, [r4, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1f5      	bne.n	800c702 <cli_process+0x56>
 800c716:	4c61      	ldr	r4, [pc, #388]	; (800c89c <cli_process+0x1f0>)
 800c718:	f104 0580 	add.w	r5, r4, #128	; 0x80
 800c71c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c720:	b118      	cbz	r0, 800c72a <cli_process+0x7e>
 800c722:	f7ff ff21 	bl	800c568 <process_character>
 800c726:	42ac      	cmp	r4, r5
 800c728:	d1f8      	bne.n	800c71c <cli_process+0x70>
 800c72a:	4b59      	ldr	r3, [pc, #356]	; (800c890 <cli_process+0x1e4>)
 800c72c:	2202      	movs	r2, #2
 800c72e:	801a      	strh	r2, [r3, #0]
 800c730:	e7c5      	b.n	800c6be <cli_process+0x12>
 800c732:	4b58      	ldr	r3, [pc, #352]	; (800c894 <cli_process+0x1e8>)
 800c734:	681c      	ldr	r4, [r3, #0]
 800c736:	4b5a      	ldr	r3, [pc, #360]	; (800c8a0 <cli_process+0x1f4>)
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	4b5a      	ldr	r3, [pc, #360]	; (800c8a4 <cli_process+0x1f8>)
 800c73c:	eb03 1b02 	add.w	fp, r3, r2, lsl #4
 800c740:	459b      	cmp	fp, r3
 800c742:	f240 8096 	bls.w	800c872 <cli_process+0x1c6>
 800c746:	f04f 0a00 	mov.w	sl, #0
 800c74a:	46d1      	mov	r9, sl
 800c74c:	461d      	mov	r5, r3
 800c74e:	e006      	b.n	800c75e <cli_process+0xb2>
 800c750:	f1b9 0f00 	cmp.w	r9, #0
 800c754:	d00d      	beq.n	800c772 <cli_process+0xc6>
 800c756:	46aa      	mov	sl, r5
 800c758:	3510      	adds	r5, #16
 800c75a:	455d      	cmp	r5, fp
 800c75c:	d20c      	bcs.n	800c778 <cli_process+0xcc>
 800c75e:	2c00      	cmp	r4, #0
 800c760:	d0f6      	beq.n	800c750 <cli_process+0xa4>
 800c762:	4622      	mov	r2, r4
 800c764:	6829      	ldr	r1, [r5, #0]
 800c766:	4640      	mov	r0, r8
 800c768:	f00b fc56 	bl	8018018 <strncasecmp>
 800c76c:	2800      	cmp	r0, #0
 800c76e:	d0ef      	beq.n	800c750 <cli_process+0xa4>
 800c770:	e7f2      	b.n	800c758 <cli_process+0xac>
 800c772:	46aa      	mov	sl, r5
 800c774:	46a9      	mov	r9, r5
 800c776:	e7ef      	b.n	800c758 <cli_process+0xac>
 800c778:	f1b9 0f00 	cmp.w	r9, #0
 800c77c:	d07c      	beq.n	800c878 <cli_process+0x1cc>
 800c77e:	f8d9 3000 	ldr.w	r3, [r9]
 800c782:	1918      	adds	r0, r3, r4
 800c784:	5d1b      	ldrb	r3, [r3, r4]
 800c786:	f8da 2000 	ldr.w	r2, [sl]
 800c78a:	1911      	adds	r1, r2, r4
 800c78c:	5d12      	ldrb	r2, [r2, r4]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d11a      	bne.n	800c7c8 <cli_process+0x11c>
 800c792:	1e65      	subs	r5, r4, #1
 800c794:	4435      	add	r5, r6
 800c796:	4622      	mov	r2, r4
 800c798:	e008      	b.n	800c7ac <cli_process+0x100>
 800c79a:	f805 3f01 	strb.w	r3, [r5, #1]!
 800c79e:	3201      	adds	r2, #1
 800c7a0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800c7a4:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 800c7a8:	459c      	cmp	ip, r3
 800c7aa:	d10b      	bne.n	800c7c4 <cli_process+0x118>
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d1f4      	bne.n	800c79a <cli_process+0xee>
 800c7b0:	2a7d      	cmp	r2, #125	; 0x7d
 800c7b2:	d8f2      	bhi.n	800c79a <cli_process+0xee>
 800c7b4:	1c53      	adds	r3, r2, #1
 800c7b6:	4937      	ldr	r1, [pc, #220]	; (800c894 <cli_process+0x1e8>)
 800c7b8:	600b      	str	r3, [r1, #0]
 800c7ba:	2120      	movs	r1, #32
 800c7bc:	54b1      	strb	r1, [r6, r2]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	54f2      	strb	r2, [r6, r3]
 800c7c2:	e004      	b.n	800c7ce <cli_process+0x122>
 800c7c4:	4b33      	ldr	r3, [pc, #204]	; (800c894 <cli_process+0x1e8>)
 800c7c6:	601a      	str	r2, [r3, #0]
 800c7c8:	4b32      	ldr	r3, [pc, #200]	; (800c894 <cli_process+0x1e8>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	b10b      	cbz	r3, 800c7d2 <cli_process+0x126>
 800c7ce:	45d1      	cmp	r9, sl
 800c7d0:	d012      	beq.n	800c7f8 <cli_process+0x14c>
 800c7d2:	4835      	ldr	r0, [pc, #212]	; (800c8a8 <cli_process+0x1fc>)
 800c7d4:	f7ff fe32 	bl	800c43c <cli_print>
 800c7d8:	45ca      	cmp	sl, r9
 800c7da:	d309      	bcc.n	800c7f0 <cli_process+0x144>
 800c7dc:	2409      	movs	r4, #9
 800c7de:	f859 0b10 	ldr.w	r0, [r9], #16
 800c7e2:	f7ff fe2b 	bl	800c43c <cli_print>
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f7ff fdfe 	bl	800c3e8 <cli_write>
 800c7ec:	45d1      	cmp	r9, sl
 800c7ee:	d9f6      	bls.n	800c7de <cli_process+0x132>
 800c7f0:	482e      	ldr	r0, [pc, #184]	; (800c8ac <cli_process+0x200>)
 800c7f2:	f7ff fe6b 	bl	800c4cc <cli_printf>
 800c7f6:	2400      	movs	r4, #0
 800c7f8:	4b26      	ldr	r3, [pc, #152]	; (800c894 <cli_process+0x1e8>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	429c      	cmp	r4, r3
 800c7fe:	f4bf af5e 	bcs.w	800c6be <cli_process+0x12>
 800c802:	3c01      	subs	r4, #1
 800c804:	4434      	add	r4, r6
 800c806:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c894 <cli_process+0x1e8>
 800c80a:	4625      	mov	r5, r4
 800c80c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800c810:	f7ff fdea 	bl	800c3e8 <cli_write>
 800c814:	3502      	adds	r5, #2
 800c816:	1bad      	subs	r5, r5, r6
 800c818:	f8d9 3000 	ldr.w	r3, [r9]
 800c81c:	429d      	cmp	r5, r3
 800c81e:	d3f4      	bcc.n	800c80a <cli_process+0x15e>
 800c820:	e74d      	b.n	800c6be <cli_process+0x12>
 800c822:	4823      	ldr	r0, [pc, #140]	; (800c8b0 <cli_process+0x204>)
 800c824:	f7ff fe0a 	bl	800c43c <cli_print>
 800c828:	4820      	ldr	r0, [pc, #128]	; (800c8ac <cli_process+0x200>)
 800c82a:	f7ff fe4f 	bl	800c4cc <cli_printf>
 800c82e:	e746      	b.n	800c6be <cli_process+0x12>
 800c830:	f003 fd0a 	bl	8010248 <log_is_enabled>
 800c834:	b128      	cbz	r0, 800c842 <cli_process+0x196>
 800c836:	f003 fd01 	bl	801023c <log_disable>
 800c83a:	481c      	ldr	r0, [pc, #112]	; (800c8ac <cli_process+0x200>)
 800c83c:	f7ff fe46 	bl	800c4cc <cli_printf>
 800c840:	e73d      	b.n	800c6be <cli_process+0x12>
 800c842:	f003 fcf5 	bl	8010230 <log_enable>
 800c846:	e73a      	b.n	800c6be <cli_process+0x12>
 800c848:	4b12      	ldr	r3, [pc, #72]	; (800c894 <cli_process+0x1e8>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f43f af36 	beq.w	800c6be <cli_process+0x12>
 800c852:	3b01      	subs	r3, #1
 800c854:	4a0f      	ldr	r2, [pc, #60]	; (800c894 <cli_process+0x1e8>)
 800c856:	6013      	str	r3, [r2, #0]
 800c858:	2200      	movs	r2, #0
 800c85a:	54f2      	strb	r2, [r6, r3]
 800c85c:	480e      	ldr	r0, [pc, #56]	; (800c898 <cli_process+0x1ec>)
 800c85e:	f7ff fded 	bl	800c43c <cli_print>
 800c862:	e72c      	b.n	800c6be <cli_process+0x12>
 800c864:	f7ff fe80 	bl	800c568 <process_character>
 800c868:	e729      	b.n	800c6be <cli_process+0x12>
 800c86a:	480f      	ldr	r0, [pc, #60]	; (800c8a8 <cli_process+0x1fc>)
 800c86c:	f7ff fde6 	bl	800c43c <cli_print>
 800c870:	e7b4      	b.n	800c7dc <cli_process+0x130>
 800c872:	f04f 0a00 	mov.w	sl, #0
 800c876:	46d1      	mov	r9, sl
 800c878:	2c00      	cmp	r4, #0
 800c87a:	d0f6      	beq.n	800c86a <cli_process+0x1be>
 800c87c:	45d1      	cmp	r9, sl
 800c87e:	d1a8      	bne.n	800c7d2 <cli_process+0x126>
 800c880:	e71d      	b.n	800c6be <cli_process+0x12>
 800c882:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c886:	bf00      	nop
 800c888:	200003e8 	.word	0x200003e8
 800c88c:	20000368 	.word	0x20000368
 800c890:	200003f0 	.word	0x200003f0
 800c894:	20000364 	.word	0x20000364
 800c898:	08019300 	.word	0x08019300
 800c89c:	200003f4 	.word	0x200003f4
 800c8a0:	08019700 	.word	0x08019700
 800c8a4:	08019704 	.word	0x08019704
 800c8a8:	080192ec 	.word	0x080192ec
 800c8ac:	080192e8 	.word	0x080192e8
 800c8b0:	080192f4 	.word	0x080192f4

0800c8b4 <cli_enter>:
 800c8b4:	b508      	push	{r3, lr}
 800c8b6:	4b04      	ldr	r3, [pc, #16]	; (800c8c8 <cli_enter+0x14>)
 800c8b8:	6018      	str	r0, [r3, #0]
 800c8ba:	4b04      	ldr	r3, [pc, #16]	; (800c8cc <cli_enter+0x18>)
 800c8bc:	6019      	str	r1, [r3, #0]
 800c8be:	4804      	ldr	r0, [pc, #16]	; (800c8d0 <cli_enter+0x1c>)
 800c8c0:	f7ff fe04 	bl	800c4cc <cli_printf>
 800c8c4:	bd08      	pop	{r3, pc}
 800c8c6:	bf00      	nop
 800c8c8:	200003e8 	.word	0x200003e8
 800c8cc:	200003ec 	.word	0x200003ec
 800c8d0:	080192e8 	.word	0x080192e8

0800c8d4 <cli_print_var>:
 800c8d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8d8:	b083      	sub	sp, #12
 800c8da:	460c      	mov	r4, r1
 800c8dc:	f8d1 6009 	ldr.w	r6, [r1, #9]
 800c8e0:	7909      	ldrb	r1, [r1, #4]
 800c8e2:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
 800c8e6:	2b40      	cmp	r3, #64	; 0x40
 800c8e8:	d00b      	beq.n	800c902 <cli_print_var+0x2e>
 800c8ea:	4605      	mov	r5, r0
 800c8ec:	4617      	mov	r7, r2
 800c8ee:	f001 0107 	and.w	r1, r1, #7
 800c8f2:	2904      	cmp	r1, #4
 800c8f4:	f200 8087 	bhi.w	800ca06 <cli_print_var+0x132>
 800c8f8:	e8df f001 	tbb	[pc, r1]
 800c8fc:	67646146 	.word	0x67646146
 800c900:	6a          	.byte	0x6a
 800c901:	00          	.byte	0x00
 800c902:	7963      	ldrb	r3, [r4, #5]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d057      	beq.n	800c9b8 <cli_print_var+0xe4>
 800c908:	2500      	movs	r5, #0
 800c90a:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 800cab4 <cli_print_var+0x1e0>
 800c90e:	4f66      	ldr	r7, [pc, #408]	; (800caa8 <cli_print_var+0x1d4>)
 800c910:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800cad0 <cli_print_var+0x1fc>
 800c914:	e010      	b.n	800c938 <cli_print_var+0x64>
 800c916:	5d71      	ldrb	r1, [r6, r5]
 800c918:	4638      	mov	r0, r7
 800c91a:	f7ff fdd7 	bl	800c4cc <cli_printf>
 800c91e:	e003      	b.n	800c928 <cli_print_var+0x54>
 800c920:	5771      	ldrsb	r1, [r6, r5]
 800c922:	4638      	mov	r0, r7
 800c924:	f7ff fdd2 	bl	800c4cc <cli_printf>
 800c928:	7963      	ldrb	r3, [r4, #5]
 800c92a:	3b01      	subs	r3, #1
 800c92c:	42ab      	cmp	r3, r5
 800c92e:	dc27      	bgt.n	800c980 <cli_print_var+0xac>
 800c930:	3501      	adds	r5, #1
 800c932:	7963      	ldrb	r3, [r4, #5]
 800c934:	429d      	cmp	r5, r3
 800c936:	da3f      	bge.n	800c9b8 <cli_print_var+0xe4>
 800c938:	7923      	ldrb	r3, [r4, #4]
 800c93a:	f003 0307 	and.w	r3, r3, #7
 800c93e:	3b01      	subs	r3, #1
 800c940:	2b03      	cmp	r3, #3
 800c942:	d8e8      	bhi.n	800c916 <cli_print_var+0x42>
 800c944:	a201      	add	r2, pc, #4	; (adr r2, 800c94c <cli_print_var+0x78>)
 800c946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c94a:	bf00      	nop
 800c94c:	0800c921 	.word	0x0800c921
 800c950:	0800c95d 	.word	0x0800c95d
 800c954:	0800c969 	.word	0x0800c969
 800c958:	0800c975 	.word	0x0800c975
 800c95c:	f836 1015 	ldrh.w	r1, [r6, r5, lsl #1]
 800c960:	4638      	mov	r0, r7
 800c962:	f7ff fdb3 	bl	800c4cc <cli_printf>
 800c966:	e7df      	b.n	800c928 <cli_print_var+0x54>
 800c968:	f936 1015 	ldrsh.w	r1, [r6, r5, lsl #1]
 800c96c:	4638      	mov	r0, r7
 800c96e:	f7ff fdad 	bl	800c4cc <cli_printf>
 800c972:	e7d9      	b.n	800c928 <cli_print_var+0x54>
 800c974:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 800c978:	4648      	mov	r0, r9
 800c97a:	f7ff fda7 	bl	800c4cc <cli_printf>
 800c97e:	e7d3      	b.n	800c928 <cli_print_var+0x54>
 800c980:	4640      	mov	r0, r8
 800c982:	f7ff fd5b 	bl	800c43c <cli_print>
 800c986:	e7d3      	b.n	800c930 <cli_print_var+0x5c>
 800c988:	f896 8000 	ldrb.w	r8, [r6]
 800c98c:	2b60      	cmp	r3, #96	; 0x60
 800c98e:	d070      	beq.n	800ca72 <cli_print_var+0x19e>
 800c990:	d87d      	bhi.n	800ca8e <cli_print_var+0x1ba>
 800c992:	2b00      	cmp	r3, #0
 800c994:	d04d      	beq.n	800ca32 <cli_print_var+0x15e>
 800c996:	2b20      	cmp	r3, #32
 800c998:	d10e      	bne.n	800c9b8 <cli_print_var+0xe4>
 800c99a:	7962      	ldrb	r2, [r4, #5]
 800c99c:	4b43      	ldr	r3, [pc, #268]	; (800caac <cli_print_var+0x1d8>)
 800c99e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9a2:	791b      	ldrb	r3, [r3, #4]
 800c9a4:	4543      	cmp	r3, r8
 800c9a6:	dc5c      	bgt.n	800ca62 <cli_print_var+0x18e>
 800c9a8:	f7ff fd82 	bl	800c4b0 <cli_print_linefeed>
 800c9ac:	4643      	mov	r3, r8
 800c9ae:	6822      	ldr	r2, [r4, #0]
 800c9b0:	493f      	ldr	r1, [pc, #252]	; (800cab0 <cli_print_var+0x1dc>)
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	f7ff fd6e 	bl	800c494 <cli_print_error>
 800c9b8:	b003      	add	sp, #12
 800c9ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9be:	f996 8000 	ldrsb.w	r8, [r6]
 800c9c2:	e7e3      	b.n	800c98c <cli_print_var+0xb8>
 800c9c4:	f8b6 8000 	ldrh.w	r8, [r6]
 800c9c8:	e7e0      	b.n	800c98c <cli_print_var+0xb8>
 800c9ca:	f9b6 8000 	ldrsh.w	r8, [r6]
 800c9ce:	e7dd      	b.n	800c98c <cli_print_var+0xb8>
 800c9d0:	f8d6 9000 	ldr.w	r9, [r6]
 800c9d4:	46c8      	mov	r8, r9
 800c9d6:	2b20      	cmp	r3, #32
 800c9d8:	d0df      	beq.n	800c99a <cli_print_var+0xc6>
 800c9da:	d904      	bls.n	800c9e6 <cli_print_var+0x112>
 800c9dc:	2b60      	cmp	r3, #96	; 0x60
 800c9de:	d048      	beq.n	800ca72 <cli_print_var+0x19e>
 800c9e0:	2b80      	cmp	r3, #128	; 0x80
 800c9e2:	d056      	beq.n	800ca92 <cli_print_var+0x1be>
 800c9e4:	e7e8      	b.n	800c9b8 <cli_print_var+0xe4>
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d1e6      	bne.n	800c9b8 <cli_print_var+0xe4>
 800c9ea:	4649      	mov	r1, r9
 800c9ec:	4831      	ldr	r0, [pc, #196]	; (800cab4 <cli_print_var+0x1e0>)
 800c9ee:	f7ff fd6d 	bl	800c4cc <cli_printf>
 800c9f2:	f8d4 1005 	ldr.w	r1, [r4, #5]
 800c9f6:	4589      	cmp	r9, r1
 800c9f8:	d8d6      	bhi.n	800c9a8 <cli_print_var+0xd4>
 800c9fa:	2f00      	cmp	r7, #0
 800c9fc:	d0dc      	beq.n	800c9b8 <cli_print_var+0xe4>
 800c9fe:	482e      	ldr	r0, [pc, #184]	; (800cab8 <cli_print_var+0x1e4>)
 800ca00:	f7ff fd64 	bl	800c4cc <cli_printf>
 800ca04:	e7d8      	b.n	800c9b8 <cli_print_var+0xe4>
 800ca06:	2b20      	cmp	r3, #32
 800ca08:	d028      	beq.n	800ca5c <cli_print_var+0x188>
 800ca0a:	d80d      	bhi.n	800ca28 <cli_print_var+0x154>
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1d3      	bne.n	800c9b8 <cli_print_var+0xe4>
 800ca10:	2904      	cmp	r1, #4
 800ca12:	bf18      	it	ne
 800ca14:	f04f 0800 	movne.w	r8, #0
 800ca18:	d10b      	bne.n	800ca32 <cli_print_var+0x15e>
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	4825      	ldr	r0, [pc, #148]	; (800cab4 <cli_print_var+0x1e0>)
 800ca1e:	f7ff fd55 	bl	800c4cc <cli_printf>
 800ca22:	f8d4 1005 	ldr.w	r1, [r4, #5]
 800ca26:	e7e8      	b.n	800c9fa <cli_print_var+0x126>
 800ca28:	2b60      	cmp	r3, #96	; 0x60
 800ca2a:	d02c      	beq.n	800ca86 <cli_print_var+0x1b2>
 800ca2c:	2b80      	cmp	r3, #128	; 0x80
 800ca2e:	d030      	beq.n	800ca92 <cli_print_var+0x1be>
 800ca30:	e7c2      	b.n	800c9b8 <cli_print_var+0xe4>
 800ca32:	aa01      	add	r2, sp, #4
 800ca34:	4669      	mov	r1, sp
 800ca36:	4620      	mov	r0, r4
 800ca38:	f7ff fcee 	bl	800c418 <get_min_max>
 800ca3c:	4641      	mov	r1, r8
 800ca3e:	481a      	ldr	r0, [pc, #104]	; (800caa8 <cli_print_var+0x1d4>)
 800ca40:	f7ff fd44 	bl	800c4cc <cli_printf>
 800ca44:	9900      	ldr	r1, [sp, #0]
 800ca46:	4541      	cmp	r1, r8
 800ca48:	dcae      	bgt.n	800c9a8 <cli_print_var+0xd4>
 800ca4a:	9a01      	ldr	r2, [sp, #4]
 800ca4c:	4542      	cmp	r2, r8
 800ca4e:	dbab      	blt.n	800c9a8 <cli_print_var+0xd4>
 800ca50:	2f00      	cmp	r7, #0
 800ca52:	d0b1      	beq.n	800c9b8 <cli_print_var+0xe4>
 800ca54:	4819      	ldr	r0, [pc, #100]	; (800cabc <cli_print_var+0x1e8>)
 800ca56:	f7ff fd39 	bl	800c4cc <cli_printf>
 800ca5a:	e7ad      	b.n	800c9b8 <cli_print_var+0xe4>
 800ca5c:	f04f 0800 	mov.w	r8, #0
 800ca60:	e79b      	b.n	800c99a <cli_print_var+0xc6>
 800ca62:	4b12      	ldr	r3, [pc, #72]	; (800caac <cli_print_var+0x1d8>)
 800ca64:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800ca68:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ca6c:	f7ff fce6 	bl	800c43c <cli_print>
 800ca70:	e7a2      	b.n	800c9b8 <cli_print_var+0xe4>
 800ca72:	7963      	ldrb	r3, [r4, #5]
 800ca74:	fa48 f803 	asr.w	r8, r8, r3
 800ca78:	f018 0f01 	tst.w	r8, #1
 800ca7c:	d003      	beq.n	800ca86 <cli_print_var+0x1b2>
 800ca7e:	4810      	ldr	r0, [pc, #64]	; (800cac0 <cli_print_var+0x1ec>)
 800ca80:	f7ff fd24 	bl	800c4cc <cli_printf>
 800ca84:	e798      	b.n	800c9b8 <cli_print_var+0xe4>
 800ca86:	480f      	ldr	r0, [pc, #60]	; (800cac4 <cli_print_var+0x1f0>)
 800ca88:	f7ff fd20 	bl	800c4cc <cli_printf>
 800ca8c:	e794      	b.n	800c9b8 <cli_print_var+0xe4>
 800ca8e:	2b80      	cmp	r3, #128	; 0x80
 800ca90:	d192      	bne.n	800c9b8 <cli_print_var+0xe4>
 800ca92:	7831      	ldrb	r1, [r6, #0]
 800ca94:	4b0c      	ldr	r3, [pc, #48]	; (800cac8 <cli_print_var+0x1f4>)
 800ca96:	2900      	cmp	r1, #0
 800ca98:	bf14      	ite	ne
 800ca9a:	4631      	movne	r1, r6
 800ca9c:	4619      	moveq	r1, r3
 800ca9e:	480b      	ldr	r0, [pc, #44]	; (800cacc <cli_print_var+0x1f8>)
 800caa0:	f7ff fd14 	bl	800c4cc <cli_printf>
 800caa4:	e788      	b.n	800c9b8 <cli_print_var+0xe4>
 800caa6:	bf00      	nop
 800caa8:	08019370 	.word	0x08019370
 800caac:	080199e8 	.word	0x080199e8
 800cab0:	08019328 	.word	0x08019328
 800cab4:	08019308 	.word	0x08019308
 800cab8:	08019310 	.word	0x08019310
 800cabc:	08019318 	.word	0x08019318
 800cac0:	08019320 	.word	0x08019320
 800cac4:	080198d8 	.word	0x080198d8
 800cac8:	08019304 	.word	0x08019304
 800cacc:	08019324 	.word	0x08019324
 800cad0:	0801930c 	.word	0x0801930c

0800cad4 <get_word_length>:
 800cad4:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 800cad8:	2b20      	cmp	r3, #32
 800cada:	d105      	bne.n	800cae8 <get_word_length+0x14>
 800cadc:	1e4b      	subs	r3, r1, #1
 800cade:	4619      	mov	r1, r3
 800cae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cae4:	2a20      	cmp	r2, #32
 800cae6:	d0fa      	beq.n	800cade <get_word_length+0xa>
 800cae8:	1a08      	subs	r0, r1, r0
 800caea:	b2c0      	uxtb	r0, r0
 800caec:	4770      	bx	lr
	...

0800caf0 <cli_get_setting_index>:
 800caf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf4:	4b14      	ldr	r3, [pc, #80]	; (800cb48 <cli_get_setting_index+0x58>)
 800caf6:	f8b3 b000 	ldrh.w	fp, [r3]
 800cafa:	f1bb 0f00 	cmp.w	fp, #0
 800cafe:	d01f      	beq.n	800cb40 <cli_get_setting_index+0x50>
 800cb00:	4607      	mov	r7, r0
 800cb02:	468a      	mov	sl, r1
 800cb04:	46d9      	mov	r9, fp
 800cb06:	2400      	movs	r4, #0
 800cb08:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800cb4c <cli_get_setting_index+0x5c>
 800cb0c:	e002      	b.n	800cb14 <cli_get_setting_index+0x24>
 800cb0e:	3401      	adds	r4, #1
 800cb10:	454c      	cmp	r4, r9
 800cb12:	d012      	beq.n	800cb3a <cli_get_setting_index+0x4a>
 800cb14:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 800cb18:	f858 6003 	ldr.w	r6, [r8, r3]
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	f7ff fa8f 	bl	800c040 <strlen>
 800cb22:	4605      	mov	r5, r0
 800cb24:	4602      	mov	r2, r0
 800cb26:	4631      	mov	r1, r6
 800cb28:	4638      	mov	r0, r7
 800cb2a:	f00b fa75 	bl	8018018 <strncasecmp>
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	d1ed      	bne.n	800cb0e <cli_get_setting_index+0x1e>
 800cb32:	4555      	cmp	r5, sl
 800cb34:	d1eb      	bne.n	800cb0e <cli_get_setting_index+0x1e>
 800cb36:	fa1f fb84 	uxth.w	fp, r4
 800cb3a:	4658      	mov	r0, fp
 800cb3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb40:	f04f 0b00 	mov.w	fp, #0
 800cb44:	e7f9      	b.n	800cb3a <cli_get_setting_index+0x4a>
 800cb46:	bf00      	nop
 800cb48:	08019a66 	.word	0x08019a66
 800cb4c:	08019a00 	.word	0x08019a00

0800cb50 <cli_print_var_range>:
 800cb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb54:	7902      	ldrb	r2, [r0, #4]
 800cb56:	f002 03e0 	and.w	r3, r2, #224	; 0xe0
 800cb5a:	2b40      	cmp	r3, #64	; 0x40
 800cb5c:	d055      	beq.n	800cc0a <cli_print_var_range+0xba>
 800cb5e:	d909      	bls.n	800cb74 <cli_print_var_range+0x24>
 800cb60:	2b60      	cmp	r3, #96	; 0x60
 800cb62:	d057      	beq.n	800cc14 <cli_print_var_range+0xc4>
 800cb64:	2b80      	cmp	r3, #128	; 0x80
 800cb66:	d14e      	bne.n	800cc06 <cli_print_var_range+0xb6>
 800cb68:	7982      	ldrb	r2, [r0, #6]
 800cb6a:	7941      	ldrb	r1, [r0, #5]
 800cb6c:	482b      	ldr	r0, [pc, #172]	; (800cc1c <cli_print_var_range+0xcc>)
 800cb6e:	f7ff fcc5 	bl	800c4fc <cli_print_linef>
 800cb72:	e048      	b.n	800cc06 <cli_print_var_range+0xb6>
 800cb74:	b1ab      	cbz	r3, 800cba2 <cli_print_var_range+0x52>
 800cb76:	2b20      	cmp	r3, #32
 800cb78:	d145      	bne.n	800cc06 <cli_print_var_range+0xb6>
 800cb7a:	7945      	ldrb	r5, [r0, #5]
 800cb7c:	4828      	ldr	r0, [pc, #160]	; (800cc20 <cli_print_var_range+0xd0>)
 800cb7e:	f7ff fc5d 	bl	800c43c <cli_print>
 800cb82:	4b28      	ldr	r3, [pc, #160]	; (800cc24 <cli_print_var_range+0xd4>)
 800cb84:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cb88:	791f      	ldrb	r7, [r3, #4]
 800cb8a:	2f00      	cmp	r7, #0
 800cb8c:	d039      	beq.n	800cc02 <cli_print_var_range+0xb2>
 800cb8e:	2400      	movs	r4, #0
 800cb90:	2201      	movs	r2, #1
 800cb92:	4b24      	ldr	r3, [pc, #144]	; (800cc24 <cli_print_var_range+0xd4>)
 800cb94:	f853 5035 	ldr.w	r5, [r3, r5, lsl #3]
 800cb98:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800cc38 <cli_print_var_range+0xe8>
 800cb9c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 800cc3c <cli_print_var_range+0xec>
 800cba0:	e027      	b.n	800cbf2 <cli_print_var_range+0xa2>
 800cba2:	f002 0207 	and.w	r2, r2, #7
 800cba6:	2a02      	cmp	r2, #2
 800cba8:	d010      	beq.n	800cbcc <cli_print_var_range+0x7c>
 800cbaa:	2a04      	cmp	r2, #4
 800cbac:	d008      	beq.n	800cbc0 <cli_print_var_range+0x70>
 800cbae:	b16a      	cbz	r2, 800cbcc <cli_print_var_range+0x7c>
 800cbb0:	f9b0 2007 	ldrsh.w	r2, [r0, #7]
 800cbb4:	f9b0 1005 	ldrsh.w	r1, [r0, #5]
 800cbb8:	481b      	ldr	r0, [pc, #108]	; (800cc28 <cli_print_var_range+0xd8>)
 800cbba:	f7ff fc9f 	bl	800c4fc <cli_print_linef>
 800cbbe:	e022      	b.n	800cc06 <cli_print_var_range+0xb6>
 800cbc0:	f8d0 1005 	ldr.w	r1, [r0, #5]
 800cbc4:	4819      	ldr	r0, [pc, #100]	; (800cc2c <cli_print_var_range+0xdc>)
 800cbc6:	f7ff fc99 	bl	800c4fc <cli_print_linef>
 800cbca:	e01c      	b.n	800cc06 <cli_print_var_range+0xb6>
 800cbcc:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 800cbd0:	f8b0 1005 	ldrh.w	r1, [r0, #5]
 800cbd4:	4814      	ldr	r0, [pc, #80]	; (800cc28 <cli_print_var_range+0xd8>)
 800cbd6:	f7ff fc91 	bl	800c4fc <cli_print_linef>
 800cbda:	e014      	b.n	800cc06 <cli_print_var_range+0xb6>
 800cbdc:	4648      	mov	r0, r9
 800cbde:	f7ff fc2d 	bl	800c43c <cli_print>
 800cbe2:	59a9      	ldr	r1, [r5, r6]
 800cbe4:	4640      	mov	r0, r8
 800cbe6:	f7ff fc71 	bl	800c4cc <cli_printf>
 800cbea:	2200      	movs	r2, #0
 800cbec:	3401      	adds	r4, #1
 800cbee:	42bc      	cmp	r4, r7
 800cbf0:	d007      	beq.n	800cc02 <cli_print_var_range+0xb2>
 800cbf2:	00a6      	lsls	r6, r4, #2
 800cbf4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d0f7      	beq.n	800cbec <cli_print_var_range+0x9c>
 800cbfc:	2a00      	cmp	r2, #0
 800cbfe:	d1f0      	bne.n	800cbe2 <cli_print_var_range+0x92>
 800cc00:	e7ec      	b.n	800cbdc <cli_print_var_range+0x8c>
 800cc02:	f7ff fc55 	bl	800c4b0 <cli_print_linefeed>
 800cc06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc0a:	7941      	ldrb	r1, [r0, #5]
 800cc0c:	4808      	ldr	r0, [pc, #32]	; (800cc30 <cli_print_var_range+0xe0>)
 800cc0e:	f7ff fc75 	bl	800c4fc <cli_print_linef>
 800cc12:	e7f8      	b.n	800cc06 <cli_print_var_range+0xb6>
 800cc14:	4807      	ldr	r0, [pc, #28]	; (800cc34 <cli_print_var_range+0xe4>)
 800cc16:	f7ff fc71 	bl	800c4fc <cli_print_linef>
 800cc1a:	e7f4      	b.n	800cc06 <cli_print_var_range+0xb6>
 800cc1c:	080193a0 	.word	0x080193a0
 800cc20:	08019374 	.word	0x08019374
 800cc24:	080199e8 	.word	0x080199e8
 800cc28:	0801935c 	.word	0x0801935c
 800cc2c:	08019344 	.word	0x08019344
 800cc30:	0801938c 	.word	0x0801938c
 800cc34:	080193b8 	.word	0x080193b8
 800cc38:	08019324 	.word	0x08019324
 800cc3c:	08019388 	.word	0x08019388

0800cc40 <cli_cmd_reboot>:
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	4905      	ldr	r1, [pc, #20]	; (800cc5c <cli_cmd_reboot+0x1c>)
 800cc46:	68ca      	ldr	r2, [r1, #12]
 800cc48:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800cc4c:	4b04      	ldr	r3, [pc, #16]	; (800cc60 <cli_cmd_reboot+0x20>)
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	60cb      	str	r3, [r1, #12]
 800cc52:	f3bf 8f4f 	dsb	sy
 800cc56:	bf00      	nop
 800cc58:	e7fd      	b.n	800cc56 <cli_cmd_reboot+0x16>
 800cc5a:	bf00      	nop
 800cc5c:	e000ed00 	.word	0xe000ed00
 800cc60:	05fa0004 	.word	0x05fa0004

0800cc64 <cli_set_var>:
 800cc64:	b410      	push	{r4}
 800cc66:	f8d0 4009 	ldr.w	r4, [r0, #9]
 800cc6a:	7903      	ldrb	r3, [r0, #4]
 800cc6c:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 800cc70:	2a60      	cmp	r2, #96	; 0x60
 800cc72:	d008      	beq.n	800cc86 <cli_set_var+0x22>
 800cc74:	f003 0307 	and.w	r3, r3, #7
 800cc78:	2b04      	cmp	r3, #4
 800cc7a:	d80b      	bhi.n	800cc94 <cli_set_var+0x30>
 800cc7c:	e8df f003 	tbb	[pc, r3]
 800cc80:	39373533 	.word	0x39373533
 800cc84:	3b          	.byte	0x3b
 800cc85:	00          	.byte	0x00
 800cc86:	f003 0307 	and.w	r3, r3, #7
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d012      	beq.n	800ccb4 <cli_set_var+0x50>
 800cc8e:	2b04      	cmp	r3, #4
 800cc90:	d01d      	beq.n	800ccce <cli_set_var+0x6a>
 800cc92:	b113      	cbz	r3, 800cc9a <cli_set_var+0x36>
 800cc94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc98:	4770      	bx	lr
 800cc9a:	7942      	ldrb	r2, [r0, #5]
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	4093      	lsls	r3, r2
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	b119      	cbz	r1, 800ccac <cli_set_var+0x48>
 800cca4:	7822      	ldrb	r2, [r4, #0]
 800cca6:	4313      	orrs	r3, r2
 800cca8:	7023      	strb	r3, [r4, #0]
 800ccaa:	e7f3      	b.n	800cc94 <cli_set_var+0x30>
 800ccac:	7822      	ldrb	r2, [r4, #0]
 800ccae:	ea22 0303 	bic.w	r3, r2, r3
 800ccb2:	e7f9      	b.n	800cca8 <cli_set_var+0x44>
 800ccb4:	7942      	ldrb	r2, [r0, #5]
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	4093      	lsls	r3, r2
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	b119      	cbz	r1, 800ccc6 <cli_set_var+0x62>
 800ccbe:	8822      	ldrh	r2, [r4, #0]
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	8023      	strh	r3, [r4, #0]
 800ccc4:	e7e6      	b.n	800cc94 <cli_set_var+0x30>
 800ccc6:	8822      	ldrh	r2, [r4, #0]
 800ccc8:	ea22 0303 	bic.w	r3, r2, r3
 800cccc:	e7f9      	b.n	800ccc2 <cli_set_var+0x5e>
 800ccce:	7942      	ldrb	r2, [r0, #5]
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	4093      	lsls	r3, r2
 800ccd4:	b119      	cbz	r1, 800ccde <cli_set_var+0x7a>
 800ccd6:	6822      	ldr	r2, [r4, #0]
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	6023      	str	r3, [r4, #0]
 800ccdc:	e7da      	b.n	800cc94 <cli_set_var+0x30>
 800ccde:	6822      	ldr	r2, [r4, #0]
 800cce0:	ea22 0303 	bic.w	r3, r2, r3
 800cce4:	e7f9      	b.n	800ccda <cli_set_var+0x76>
 800cce6:	7021      	strb	r1, [r4, #0]
 800cce8:	e7d4      	b.n	800cc94 <cli_set_var+0x30>
 800ccea:	7021      	strb	r1, [r4, #0]
 800ccec:	e7d2      	b.n	800cc94 <cli_set_var+0x30>
 800ccee:	8021      	strh	r1, [r4, #0]
 800ccf0:	e7d0      	b.n	800cc94 <cli_set_var+0x30>
 800ccf2:	8021      	strh	r1, [r4, #0]
 800ccf4:	e7ce      	b.n	800cc94 <cli_set_var+0x30>
 800ccf6:	6021      	str	r1, [r4, #0]
 800ccf8:	e7cc      	b.n	800cc94 <cli_set_var+0x30>
	...

0800ccfc <cli_cmd_version>:
 800ccfc:	b510      	push	{r4, lr}
 800ccfe:	4907      	ldr	r1, [pc, #28]	; (800cd1c <cli_cmd_version+0x20>)
 800cd00:	4807      	ldr	r0, [pc, #28]	; (800cd20 <cli_cmd_version+0x24>)
 800cd02:	f7ff fbe3 	bl	800c4cc <cli_printf>
 800cd06:	f003 fb8d 	bl	8010424 <HAL_GetDEVID>
 800cd0a:	4604      	mov	r4, r0
 800cd0c:	f003 fb84 	bl	8010418 <HAL_GetREVID>
 800cd10:	4602      	mov	r2, r0
 800cd12:	4621      	mov	r1, r4
 800cd14:	4803      	ldr	r0, [pc, #12]	; (800cd24 <cli_cmd_version+0x28>)
 800cd16:	f7ff fbd9 	bl	800c4cc <cli_printf>
 800cd1a:	bd10      	pop	{r4, pc}
 800cd1c:	080193d0 	.word	0x080193d0
 800cd20:	080193e0 	.word	0x080193e0
 800cd24:	080193ec 	.word	0x080193ec

0800cd28 <cli_cmd_status>:
 800cd28:	b508      	push	{r3, lr}
 800cd2a:	f008 f90f 	bl	8014f4c <osKernelGetTickCount>
 800cd2e:	4601      	mov	r1, r0
 800cd30:	4801      	ldr	r0, [pc, #4]	; (800cd38 <cli_cmd_status+0x10>)
 800cd32:	f7ff fbcb 	bl	800c4cc <cli_printf>
 800cd36:	bd08      	pop	{r3, pc}
 800cd38:	0801940c 	.word	0x0801940c

0800cd3c <cli_cmd_dump>:
 800cd3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd40:	4680      	mov	r8, r0
 800cd42:	4608      	mov	r0, r1
 800cd44:	f7ff f97c 	bl	800c040 <strlen>
 800cd48:	4607      	mov	r7, r0
 800cd4a:	4813      	ldr	r0, [pc, #76]	; (800cd98 <cli_cmd_dump+0x5c>)
 800cd4c:	f7ff fbbe 	bl	800c4cc <cli_printf>
 800cd50:	f7ff fbae 	bl	800c4b0 <cli_print_linefeed>
 800cd54:	4b11      	ldr	r3, [pc, #68]	; (800cd9c <cli_cmd_dump+0x60>)
 800cd56:	f8b3 9000 	ldrh.w	r9, [r3]
 800cd5a:	f1b9 0f00 	cmp.w	r9, #0
 800cd5e:	d016      	beq.n	800cd8e <cli_cmd_dump+0x52>
 800cd60:	2400      	movs	r4, #0
 800cd62:	4d0f      	ldr	r5, [pc, #60]	; (800cda0 <cli_cmd_dump+0x64>)
 800cd64:	f8df a040 	ldr.w	sl, [pc, #64]	; 800cda8 <cli_cmd_dump+0x6c>
 800cd68:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 800cd6c:	18ee      	adds	r6, r5, r3
 800cd6e:	58e9      	ldr	r1, [r5, r3]
 800cd70:	4650      	mov	r0, sl
 800cd72:	f7ff fbab 	bl	800c4cc <cli_printf>
 800cd76:	1e3a      	subs	r2, r7, #0
 800cd78:	bf18      	it	ne
 800cd7a:	2201      	movne	r2, #1
 800cd7c:	4631      	mov	r1, r6
 800cd7e:	4640      	mov	r0, r8
 800cd80:	f7ff fda8 	bl	800c8d4 <cli_print_var>
 800cd84:	f7ff fb94 	bl	800c4b0 <cli_print_linefeed>
 800cd88:	3401      	adds	r4, #1
 800cd8a:	454c      	cmp	r4, r9
 800cd8c:	d1ec      	bne.n	800cd68 <cli_cmd_dump+0x2c>
 800cd8e:	4805      	ldr	r0, [pc, #20]	; (800cda4 <cli_cmd_dump+0x68>)
 800cd90:	f7ff fb9c 	bl	800c4cc <cli_printf>
 800cd94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd98:	08019424 	.word	0x08019424
 800cd9c:	08019a66 	.word	0x08019a66
 800cda0:	08019a00 	.word	0x08019a00
 800cda4:	08019444 	.word	0x08019444
 800cda8:	08019438 	.word	0x08019438

0800cdac <cli_cmd_save>:
 800cdac:	b508      	push	{r3, lr}
 800cdae:	f000 faa7 	bl	800d300 <config_save>
 800cdb2:	b928      	cbnz	r0, 800cdc0 <cli_cmd_save+0x14>
 800cdb4:	4809      	ldr	r0, [pc, #36]	; (800cddc <cli_cmd_save+0x30>)
 800cdb6:	f7ff fb83 	bl	800c4c0 <cli_print_line>
 800cdba:	f000 faa1 	bl	800d300 <config_save>
 800cdbe:	b140      	cbz	r0, 800cdd2 <cli_cmd_save+0x26>
 800cdc0:	4807      	ldr	r0, [pc, #28]	; (800cde0 <cli_cmd_save+0x34>)
 800cdc2:	f7ff fb7d 	bl	800c4c0 <cli_print_line>
 800cdc6:	2101      	movs	r1, #1
 800cdc8:	4b06      	ldr	r3, [pc, #24]	; (800cde4 <cli_cmd_save+0x38>)
 800cdca:	6818      	ldr	r0, [r3, #0]
 800cdcc:	f008 f96e 	bl	80150ac <osEventFlagsSet>
 800cdd0:	bd08      	pop	{r3, pc}
 800cdd2:	4805      	ldr	r0, [pc, #20]	; (800cde8 <cli_cmd_save+0x3c>)
 800cdd4:	f7ff fb74 	bl	800c4c0 <cli_print_line>
 800cdd8:	e7fa      	b.n	800cdd0 <cli_cmd_save+0x24>
 800cdda:	bf00      	nop
 800cddc:	08019460 	.word	0x08019460
 800cde0:	080194a0 	.word	0x080194a0
 800cde4:	200053e8 	.word	0x200053e8
 800cde8:	0801948c 	.word	0x0801948c

0800cdec <cli_cmd_read>:
 800cdec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdee:	b083      	sub	sp, #12
 800cdf0:	4815      	ldr	r0, [pc, #84]	; (800ce48 <cli_cmd_read+0x5c>)
 800cdf2:	f001 fe12 	bl	800ea1a <recorder_get_count>
 800cdf6:	b138      	cbz	r0, 800ce08 <cli_cmd_read+0x1c>
 800cdf8:	4605      	mov	r5, r0
 800cdfa:	3501      	adds	r5, #1
 800cdfc:	2d01      	cmp	r5, #1
 800cdfe:	d906      	bls.n	800ce0e <cli_cmd_read+0x22>
 800ce00:	2401      	movs	r4, #1
 800ce02:	2600      	movs	r6, #0
 800ce04:	4637      	mov	r7, r6
 800ce06:	e013      	b.n	800ce30 <cli_cmd_read+0x44>
 800ce08:	4810      	ldr	r0, [pc, #64]	; (800ce4c <cli_cmd_read+0x60>)
 800ce0a:	f7ff fb5f 	bl	800c4cc <cli_printf>
 800ce0e:	b003      	add	sp, #12
 800ce10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce12:	f89d 1000 	ldrb.w	r1, [sp]
 800ce16:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800ce1a:	4a0d      	ldr	r2, [pc, #52]	; (800ce50 <cli_cmd_read+0x64>)
 800ce1c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ce20:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800ce24:	480b      	ldr	r0, [pc, #44]	; (800ce54 <cli_cmd_read+0x68>)
 800ce26:	f7ff fb51 	bl	800c4cc <cli_printf>
 800ce2a:	3401      	adds	r4, #1
 800ce2c:	42a5      	cmp	r5, r4
 800ce2e:	d0ee      	beq.n	800ce0e <cli_cmd_read+0x22>
 800ce30:	9700      	str	r7, [sp, #0]
 800ce32:	f8ad 6004 	strh.w	r6, [sp, #4]
 800ce36:	466a      	mov	r2, sp
 800ce38:	4621      	mov	r1, r4
 800ce3a:	4803      	ldr	r0, [pc, #12]	; (800ce48 <cli_cmd_read+0x5c>)
 800ce3c:	f001 fdef 	bl	800ea1e <recorder_get_element>
 800ce40:	2800      	cmp	r0, #0
 800ce42:	d0f2      	beq.n	800ce2a <cli_cmd_read+0x3e>
 800ce44:	e7e5      	b.n	800ce12 <cli_cmd_read+0x26>
 800ce46:	bf00      	nop
 800ce48:	200053d4 	.word	0x200053d4
 800ce4c:	080194c0 	.word	0x080194c0
 800ce50:	080197b4 	.word	0x080197b4
 800ce54:	080194d4 	.word	0x080194d4

0800ce58 <cli_cmd_log_enable>:
 800ce58:	b508      	push	{r3, lr}
 800ce5a:	f003 f9e9 	bl	8010230 <log_enable>
 800ce5e:	bd08      	pop	{r3, pc}

0800ce60 <cli_cmd_get>:
 800ce60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce64:	b083      	sub	sp, #12
 800ce66:	9001      	str	r0, [sp, #4]
 800ce68:	4b1b      	ldr	r3, [pc, #108]	; (800ced8 <cli_cmd_get+0x78>)
 800ce6a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ce6e:	f1ba 0f00 	cmp.w	sl, #0
 800ce72:	d02c      	beq.n	800cece <cli_cmd_get+0x6e>
 800ce74:	4689      	mov	r9, r1
 800ce76:	4d19      	ldr	r5, [pc, #100]	; (800cedc <cli_cmd_get+0x7c>)
 800ce78:	2400      	movs	r4, #0
 800ce7a:	4627      	mov	r7, r4
 800ce7c:	46ab      	mov	fp, r5
 800ce7e:	e012      	b.n	800cea6 <cli_cmd_get+0x46>
 800ce80:	4631      	mov	r1, r6
 800ce82:	4817      	ldr	r0, [pc, #92]	; (800cee0 <cli_cmd_get+0x80>)
 800ce84:	f7ff fb22 	bl	800c4cc <cli_printf>
 800ce88:	2200      	movs	r2, #0
 800ce8a:	4641      	mov	r1, r8
 800ce8c:	9801      	ldr	r0, [sp, #4]
 800ce8e:	f7ff fd21 	bl	800c8d4 <cli_print_var>
 800ce92:	f7ff fb0d 	bl	800c4b0 <cli_print_linefeed>
 800ce96:	4640      	mov	r0, r8
 800ce98:	f7ff fe5a 	bl	800cb50 <cli_print_var_range>
 800ce9c:	3701      	adds	r7, #1
 800ce9e:	3401      	adds	r4, #1
 800cea0:	3511      	adds	r5, #17
 800cea2:	4554      	cmp	r4, sl
 800cea4:	d00f      	beq.n	800cec6 <cli_cmd_get+0x66>
 800cea6:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 800ceaa:	f85b 6003 	ldr.w	r6, [fp, r3]
 800ceae:	4649      	mov	r1, r9
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	f00b f8f8 	bl	80180a6 <strstr>
 800ceb6:	2800      	cmp	r0, #0
 800ceb8:	d0f1      	beq.n	800ce9e <cli_cmd_get+0x3e>
 800ceba:	46a8      	mov	r8, r5
 800cebc:	2f00      	cmp	r7, #0
 800cebe:	dddf      	ble.n	800ce80 <cli_cmd_get+0x20>
 800cec0:	f7ff faf6 	bl	800c4b0 <cli_print_linefeed>
 800cec4:	e7dc      	b.n	800ce80 <cli_cmd_get+0x20>
 800cec6:	b117      	cbz	r7, 800cece <cli_cmd_get+0x6e>
 800cec8:	b003      	add	sp, #12
 800ceca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cece:	4905      	ldr	r1, [pc, #20]	; (800cee4 <cli_cmd_get+0x84>)
 800ced0:	9801      	ldr	r0, [sp, #4]
 800ced2:	f7ff fb2d 	bl	800c530 <cli_print_error_linef>
 800ced6:	e7f7      	b.n	800cec8 <cli_cmd_get+0x68>
 800ced8:	08019a66 	.word	0x08019a66
 800cedc:	08019a00 	.word	0x08019a00
 800cee0:	0801943c 	.word	0x0801943c
 800cee4:	080194e4 	.word	0x080194e4

0800cee8 <cli_cmd_set>:
 800cee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceec:	b085      	sub	sp, #20
 800ceee:	4604      	mov	r4, r0
 800cef0:	460d      	mov	r5, r1
 800cef2:	4608      	mov	r0, r1
 800cef4:	f7ff f8a4 	bl	800c040 <strlen>
 800cef8:	4680      	mov	r8, r0
 800cefa:	b3a0      	cbz	r0, 800cf66 <cli_cmd_set+0x7e>
 800cefc:	2801      	cmp	r0, #1
 800cefe:	d02f      	beq.n	800cf60 <cli_cmd_set+0x78>
 800cf00:	213d      	movs	r1, #61	; 0x3d
 800cf02:	4628      	mov	r0, r5
 800cf04:	f00b f87a 	bl	8017ffc <strchr>
 800cf08:	4606      	mov	r6, r0
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	f000 813d 	beq.w	800d18a <cli_cmd_set+0x2a2>
 800cf10:	4601      	mov	r1, r0
 800cf12:	4628      	mov	r0, r5
 800cf14:	f7ff fdde 	bl	800cad4 <get_word_length>
 800cf18:	4607      	mov	r7, r0
 800cf1a:	1c70      	adds	r0, r6, #1
 800cf1c:	f7ff fb1c 	bl	800c558 <skip_space>
 800cf20:	4606      	mov	r6, r0
 800cf22:	4639      	mov	r1, r7
 800cf24:	4628      	mov	r0, r5
 800cf26:	f7ff fde3 	bl	800caf0 <cli_get_setting_index>
 800cf2a:	4605      	mov	r5, r0
 800cf2c:	4bad      	ldr	r3, [pc, #692]	; (800d1e4 <cli_cmd_set+0x2fc>)
 800cf2e:	881b      	ldrh	r3, [r3, #0]
 800cf30:	4283      	cmp	r3, r0
 800cf32:	d93c      	bls.n	800cfae <cli_cmd_set+0xc6>
 800cf34:	eb00 1900 	add.w	r9, r0, r0, lsl #4
 800cf38:	4bab      	ldr	r3, [pc, #684]	; (800d1e8 <cli_cmd_set+0x300>)
 800cf3a:	4499      	add	r9, r3
 800cf3c:	f899 2004 	ldrb.w	r2, [r9, #4]
 800cf40:	f002 03e0 	and.w	r3, r2, #224	; 0xe0
 800cf44:	2b40      	cmp	r3, #64	; 0x40
 800cf46:	f000 80a4 	beq.w	800d092 <cli_cmd_set+0x1aa>
 800cf4a:	d835      	bhi.n	800cfb8 <cli_cmd_set+0xd0>
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d066      	beq.n	800d01e <cli_cmd_set+0x136>
 800cf50:	2b20      	cmp	r3, #32
 800cf52:	d15c      	bne.n	800d00e <cli_cmd_set+0x126>
 800cf54:	eb00 1200 	add.w	r2, r0, r0, lsl #4
 800cf58:	4ba3      	ldr	r3, [pc, #652]	; (800d1e8 <cli_cmd_set+0x300>)
 800cf5a:	4413      	add	r3, r2
 800cf5c:	795a      	ldrb	r2, [r3, #5]
 800cf5e:	e089      	b.n	800d074 <cli_cmd_set+0x18c>
 800cf60:	782b      	ldrb	r3, [r5, #0]
 800cf62:	2b2a      	cmp	r3, #42	; 0x2a
 800cf64:	d1cc      	bne.n	800cf00 <cli_cmd_set+0x18>
 800cf66:	48a1      	ldr	r0, [pc, #644]	; (800d1ec <cli_cmd_set+0x304>)
 800cf68:	f7ff faaa 	bl	800c4c0 <cli_print_line>
 800cf6c:	4b9d      	ldr	r3, [pc, #628]	; (800d1e4 <cli_cmd_set+0x2fc>)
 800cf6e:	f8b3 9000 	ldrh.w	r9, [r3]
 800cf72:	f1b9 0f00 	cmp.w	r9, #0
 800cf76:	d017      	beq.n	800cfa8 <cli_cmd_set+0xc0>
 800cf78:	2500      	movs	r5, #0
 800cf7a:	4e9b      	ldr	r6, [pc, #620]	; (800d1e8 <cli_cmd_set+0x300>)
 800cf7c:	f8df a28c 	ldr.w	sl, [pc, #652]	; 800d20c <cli_cmd_set+0x324>
 800cf80:	eb05 1305 	add.w	r3, r5, r5, lsl #4
 800cf84:	18f7      	adds	r7, r6, r3
 800cf86:	58f1      	ldr	r1, [r6, r3]
 800cf88:	4650      	mov	r0, sl
 800cf8a:	f7ff fa9f 	bl	800c4cc <cli_printf>
 800cf8e:	f1b8 0200 	subs.w	r2, r8, #0
 800cf92:	bf18      	it	ne
 800cf94:	2201      	movne	r2, #1
 800cf96:	4639      	mov	r1, r7
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f7ff fc9b 	bl	800c8d4 <cli_print_var>
 800cf9e:	f7ff fa87 	bl	800c4b0 <cli_print_linefeed>
 800cfa2:	3501      	adds	r5, #1
 800cfa4:	454d      	cmp	r5, r9
 800cfa6:	d1eb      	bne.n	800cf80 <cli_cmd_set+0x98>
 800cfa8:	b005      	add	sp, #20
 800cfaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfae:	4990      	ldr	r1, [pc, #576]	; (800d1f0 <cli_cmd_set+0x308>)
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f7ff fabd 	bl	800c530 <cli_print_error_linef>
 800cfb6:	e7f7      	b.n	800cfa8 <cli_cmd_set+0xc0>
 800cfb8:	2b60      	cmp	r3, #96	; 0x60
 800cfba:	d05a      	beq.n	800d072 <cli_cmd_set+0x18a>
 800cfbc:	2b80      	cmp	r3, #128	; 0x80
 800cfbe:	d126      	bne.n	800d00e <cli_cmd_set+0x126>
 800cfc0:	4630      	mov	r0, r6
 800cfc2:	f7ff fac9 	bl	800c558 <skip_space>
 800cfc6:	4607      	mov	r7, r0
 800cfc8:	f7ff f83a 	bl	800c040 <strlen>
 800cfcc:	4606      	mov	r6, r0
 800cfce:	eb05 1205 	add.w	r2, r5, r5, lsl #4
 800cfd2:	4b85      	ldr	r3, [pc, #532]	; (800d1e8 <cli_cmd_set+0x300>)
 800cfd4:	4413      	add	r3, r2
 800cfd6:	f893 8006 	ldrb.w	r8, [r3, #6]
 800cfda:	79db      	ldrb	r3, [r3, #7]
 800cfdc:	f013 0f01 	tst.w	r3, #1
 800cfe0:	f000 80b2 	beq.w	800d148 <cli_cmd_set+0x260>
 800cfe4:	4613      	mov	r3, r2
 800cfe6:	4a83      	ldr	r2, [pc, #524]	; (800d1f4 <cli_cmd_set+0x30c>)
 800cfe8:	4413      	add	r3, r2
 800cfea:	f8d3 1001 	ldr.w	r1, [r3, #1]
 800cfee:	780b      	ldrb	r3, [r1, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	f000 80a9 	beq.w	800d148 <cli_cmd_set+0x260>
 800cff6:	4602      	mov	r2, r0
 800cff8:	4638      	mov	r0, r7
 800cffa:	f00b f82f 	bl	801805c <strncmp>
 800cffe:	2800      	cmp	r0, #0
 800d000:	f000 80a2 	beq.w	800d148 <cli_cmd_set+0x260>
 800d004:	4642      	mov	r2, r8
 800d006:	497c      	ldr	r1, [pc, #496]	; (800d1f8 <cli_cmd_set+0x310>)
 800d008:	4620      	mov	r0, r4
 800d00a:	f7ff fa91 	bl	800c530 <cli_print_error_linef>
 800d00e:	497b      	ldr	r1, [pc, #492]	; (800d1fc <cli_cmd_set+0x314>)
 800d010:	4620      	mov	r0, r4
 800d012:	f7ff fa8d 	bl	800c530 <cli_print_error_linef>
 800d016:	4648      	mov	r0, r9
 800d018:	f7ff fd9a 	bl	800cb50 <cli_print_var_range>
 800d01c:	e7c4      	b.n	800cfa8 <cli_cmd_set+0xc0>
 800d01e:	f002 0207 	and.w	r2, r2, #7
 800d022:	2a04      	cmp	r2, #4
 800d024:	d013      	beq.n	800d04e <cli_cmd_set+0x166>
 800d026:	4630      	mov	r0, r6
 800d028:	f00a fe91 	bl	8017d4e <atoi>
 800d02c:	4606      	mov	r6, r0
 800d02e:	aa03      	add	r2, sp, #12
 800d030:	a902      	add	r1, sp, #8
 800d032:	4648      	mov	r0, r9
 800d034:	f7ff f9f0 	bl	800c418 <get_min_max>
 800d038:	9b02      	ldr	r3, [sp, #8]
 800d03a:	42b3      	cmp	r3, r6
 800d03c:	dce7      	bgt.n	800d00e <cli_cmd_set+0x126>
 800d03e:	9b03      	ldr	r3, [sp, #12]
 800d040:	42b3      	cmp	r3, r6
 800d042:	dbe4      	blt.n	800d00e <cli_cmd_set+0x126>
 800d044:	4631      	mov	r1, r6
 800d046:	4648      	mov	r0, r9
 800d048:	f7ff fe0c 	bl	800cc64 <cli_set_var>
 800d04c:	e0b3      	b.n	800d1b6 <cli_cmd_set+0x2ce>
 800d04e:	220a      	movs	r2, #10
 800d050:	2100      	movs	r1, #0
 800d052:	4630      	mov	r0, r6
 800d054:	f00b f948 	bl	80182e8 <strtoul>
 800d058:	eb05 1205 	add.w	r2, r5, r5, lsl #4
 800d05c:	4b62      	ldr	r3, [pc, #392]	; (800d1e8 <cli_cmd_set+0x300>)
 800d05e:	4413      	add	r3, r2
 800d060:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800d064:	4283      	cmp	r3, r0
 800d066:	d3d2      	bcc.n	800d00e <cli_cmd_set+0x126>
 800d068:	4601      	mov	r1, r0
 800d06a:	4648      	mov	r0, r9
 800d06c:	f7ff fdfa 	bl	800cc64 <cli_set_var>
 800d070:	e0a1      	b.n	800d1b6 <cli_cmd_set+0x2ce>
 800d072:	2200      	movs	r2, #0
 800d074:	4b62      	ldr	r3, [pc, #392]	; (800d200 <cli_cmd_set+0x318>)
 800d076:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d07a:	f893 a004 	ldrb.w	sl, [r3, #4]
 800d07e:	f1ba 0f00 	cmp.w	sl, #0
 800d082:	d0c4      	beq.n	800d00e <cli_cmd_set+0x126>
 800d084:	4b5e      	ldr	r3, [pc, #376]	; (800d200 <cli_cmd_set+0x318>)
 800d086:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800d08a:	f1a3 0804 	sub.w	r8, r3, #4
 800d08e:	2700      	movs	r7, #0
 800d090:	e084      	b.n	800d19c <cli_cmd_set+0x2b4>
 800d092:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 800d096:	4b54      	ldr	r3, [pc, #336]	; (800d1e8 <cli_cmd_set+0x300>)
 800d098:	4403      	add	r3, r0
 800d09a:	f893 a005 	ldrb.w	sl, [r3, #5]
 800d09e:	f1ba 0f00 	cmp.w	sl, #0
 800d0a2:	f000 8088 	beq.w	800d1b6 <cli_cmd_set+0x2ce>
 800d0a6:	2e00      	cmp	r6, #0
 800d0a8:	f000 8085 	beq.w	800d1b6 <cli_cmd_set+0x2ce>
 800d0ac:	f04f 0800 	mov.w	r8, #0
 800d0b0:	f002 0207 	and.w	r2, r2, #7
 800d0b4:	1e57      	subs	r7, r2, #1
 800d0b6:	eb05 1105 	add.w	r1, r5, r5, lsl #4
 800d0ba:	4b4e      	ldr	r3, [pc, #312]	; (800d1f4 <cli_cmd_set+0x30c>)
 800d0bc:	18cb      	adds	r3, r1, r3
 800d0be:	9301      	str	r3, [sp, #4]
 800d0c0:	e017      	b.n	800d0f2 <cli_cmd_set+0x20a>
 800d0c2:	9b01      	ldr	r3, [sp, #4]
 800d0c4:	f8d3 b001 	ldr.w	fp, [r3, #1]
 800d0c8:	f00a fe41 	bl	8017d4e <atoi>
 800d0cc:	f80b 0008 	strb.w	r0, [fp, r8]
 800d0d0:	e006      	b.n	800d0e0 <cli_cmd_set+0x1f8>
 800d0d2:	9b01      	ldr	r3, [sp, #4]
 800d0d4:	f8d3 b001 	ldr.w	fp, [r3, #1]
 800d0d8:	f00a fe39 	bl	8017d4e <atoi>
 800d0dc:	f80b 0008 	strb.w	r0, [fp, r8]
 800d0e0:	212c      	movs	r1, #44	; 0x2c
 800d0e2:	4630      	mov	r0, r6
 800d0e4:	f00a ff8a 	bl	8017ffc <strchr>
 800d0e8:	1c46      	adds	r6, r0, #1
 800d0ea:	f108 0801 	add.w	r8, r8, #1
 800d0ee:	45d0      	cmp	r8, sl
 800d0f0:	d061      	beq.n	800d1b6 <cli_cmd_set+0x2ce>
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	f7ff fa30 	bl	800c558 <skip_space>
 800d0f8:	4606      	mov	r6, r0
 800d0fa:	2f03      	cmp	r7, #3
 800d0fc:	d8e1      	bhi.n	800d0c2 <cli_cmd_set+0x1da>
 800d0fe:	a301      	add	r3, pc, #4	; (adr r3, 800d104 <cli_cmd_set+0x21c>)
 800d100:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 800d104:	0800d0d3 	.word	0x0800d0d3
 800d108:	0800d115 	.word	0x0800d115
 800d10c:	0800d125 	.word	0x0800d125
 800d110:	0800d135 	.word	0x0800d135
 800d114:	9b01      	ldr	r3, [sp, #4]
 800d116:	f8d3 b001 	ldr.w	fp, [r3, #1]
 800d11a:	f00a fe18 	bl	8017d4e <atoi>
 800d11e:	f82b 0018 	strh.w	r0, [fp, r8, lsl #1]
 800d122:	e7dd      	b.n	800d0e0 <cli_cmd_set+0x1f8>
 800d124:	9b01      	ldr	r3, [sp, #4]
 800d126:	f8d3 b001 	ldr.w	fp, [r3, #1]
 800d12a:	f00a fe10 	bl	8017d4e <atoi>
 800d12e:	f82b 0018 	strh.w	r0, [fp, r8, lsl #1]
 800d132:	e7d5      	b.n	800d0e0 <cli_cmd_set+0x1f8>
 800d134:	9b01      	ldr	r3, [sp, #4]
 800d136:	f8d3 b001 	ldr.w	fp, [r3, #1]
 800d13a:	220a      	movs	r2, #10
 800d13c:	2100      	movs	r1, #0
 800d13e:	f00b f8d3 	bl	80182e8 <strtoul>
 800d142:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 800d146:	e7cb      	b.n	800d0e0 <cli_cmd_set+0x1f8>
 800d148:	2e00      	cmp	r6, #0
 800d14a:	f43f af5b 	beq.w	800d004 <cli_cmd_set+0x11c>
 800d14e:	45b0      	cmp	r8, r6
 800d150:	f4ff af58 	bcc.w	800d004 <cli_cmd_set+0x11c>
 800d154:	eb05 1205 	add.w	r2, r5, r5, lsl #4
 800d158:	4b23      	ldr	r3, [pc, #140]	; (800d1e8 <cli_cmd_set+0x300>)
 800d15a:	4413      	add	r3, r2
 800d15c:	f893 a005 	ldrb.w	sl, [r3, #5]
 800d160:	f8d3 b009 	ldr.w	fp, [r3, #9]
 800d164:	4642      	mov	r2, r8
 800d166:	2100      	movs	r1, #0
 800d168:	4658      	mov	r0, fp
 800d16a:	f00a fe35 	bl	8017dd8 <memset>
 800d16e:	45b2      	cmp	sl, r6
 800d170:	d821      	bhi.n	800d1b6 <cli_cmd_set+0x2ce>
 800d172:	4632      	mov	r2, r6
 800d174:	4923      	ldr	r1, [pc, #140]	; (800d204 <cli_cmd_set+0x31c>)
 800d176:	4638      	mov	r0, r7
 800d178:	f00a ff70 	bl	801805c <strncmp>
 800d17c:	b1d8      	cbz	r0, 800d1b6 <cli_cmd_set+0x2ce>
 800d17e:	4632      	mov	r2, r6
 800d180:	4639      	mov	r1, r7
 800d182:	4658      	mov	r0, fp
 800d184:	f00a ff7c 	bl	8018080 <strncpy>
 800d188:	e015      	b.n	800d1b6 <cli_cmd_set+0x2ce>
 800d18a:	4629      	mov	r1, r5
 800d18c:	4620      	mov	r0, r4
 800d18e:	f7ff fe67 	bl	800ce60 <cli_cmd_get>
 800d192:	e709      	b.n	800cfa8 <cli_cmd_set+0xc0>
 800d194:	3701      	adds	r7, #1
 800d196:	4557      	cmp	r7, sl
 800d198:	f43f af39 	beq.w	800d00e <cli_cmd_set+0x126>
 800d19c:	f858 0f04 	ldr.w	r0, [r8, #4]!
 800d1a0:	2800      	cmp	r0, #0
 800d1a2:	d0f7      	beq.n	800d194 <cli_cmd_set+0x2ac>
 800d1a4:	4631      	mov	r1, r6
 800d1a6:	f00a ff0d 	bl	8017fc4 <strcasecmp>
 800d1aa:	2800      	cmp	r0, #0
 800d1ac:	d1f2      	bne.n	800d194 <cli_cmd_set+0x2ac>
 800d1ae:	4639      	mov	r1, r7
 800d1b0:	4648      	mov	r0, r9
 800d1b2:	f7ff fd57 	bl	800cc64 <cli_set_var>
 800d1b6:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 800d1ba:	4b0b      	ldr	r3, [pc, #44]	; (800d1e8 <cli_cmd_set+0x300>)
 800d1bc:	441d      	add	r5, r3
 800d1be:	f855 1b08 	ldr.w	r1, [r5], #8
 800d1c2:	4811      	ldr	r0, [pc, #68]	; (800d208 <cli_cmd_set+0x320>)
 800d1c4:	f7ff f982 	bl	800c4cc <cli_printf>
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	4649      	mov	r1, r9
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	f7ff fb81 	bl	800c8d4 <cli_print_var>
 800d1d2:	f8d5 3005 	ldr.w	r3, [r5, #5]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	f43f aee6 	beq.w	800cfa8 <cli_cmd_set+0xc0>
 800d1dc:	4648      	mov	r0, r9
 800d1de:	4798      	blx	r3
 800d1e0:	e6e2      	b.n	800cfa8 <cli_cmd_set+0xc0>
 800d1e2:	bf00      	nop
 800d1e4:	08019a66 	.word	0x08019a66
 800d1e8:	08019a00 	.word	0x08019a00
 800d1ec:	080194f4 	.word	0x080194f4
 800d1f0:	080194e4 	.word	0x080194e4
 800d1f4:	08019a08 	.word	0x08019a08
 800d1f8:	08019508 	.word	0x08019508
 800d1fc:	08019544 	.word	0x08019544
 800d200:	080199e8 	.word	0x080199e8
 800d204:	08019304 	.word	0x08019304
 800d208:	08019538 	.word	0x08019538
 800d20c:	0801943c 	.word	0x0801943c

0800d210 <cli_cmd_help>:
 800d210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d214:	b083      	sub	sp, #12
 800d216:	9001      	str	r0, [sp, #4]
 800d218:	460d      	mov	r5, r1
 800d21a:	4c22      	ldr	r4, [pc, #136]	; (800d2a4 <cli_cmd_help+0x94>)
 800d21c:	f104 07b0 	add.w	r7, r4, #176	; 0xb0
 800d220:	f04f 0800 	mov.w	r8, #0
 800d224:	f8df b084 	ldr.w	fp, [pc, #132]	; 800d2ac <cli_cmd_help+0x9c>
 800d228:	f8df a084 	ldr.w	sl, [pc, #132]	; 800d2b0 <cli_cmd_help+0xa0>
 800d22c:	e017      	b.n	800d25e <cli_cmd_help+0x4e>
 800d22e:	4629      	mov	r1, r5
 800d230:	6860      	ldr	r0, [r4, #4]
 800d232:	f00a ff38 	bl	80180a6 <strstr>
 800d236:	b178      	cbz	r0, 800d258 <cli_cmd_help+0x48>
 800d238:	4630      	mov	r0, r6
 800d23a:	f7ff f8ff 	bl	800c43c <cli_print>
 800d23e:	6861      	ldr	r1, [r4, #4]
 800d240:	4650      	mov	r0, sl
 800d242:	f7ff f943 	bl	800c4cc <cli_printf>
 800d246:	68a1      	ldr	r1, [r4, #8]
 800d248:	b111      	cbz	r1, 800d250 <cli_cmd_help+0x40>
 800d24a:	4658      	mov	r0, fp
 800d24c:	f7ff f93e 	bl	800c4cc <cli_printf>
 800d250:	f7ff f92e 	bl	800c4b0 <cli_print_linefeed>
 800d254:	f04f 0801 	mov.w	r8, #1
 800d258:	3410      	adds	r4, #16
 800d25a:	42bc      	cmp	r4, r7
 800d25c:	d011      	beq.n	800d282 <cli_cmd_help+0x72>
 800d25e:	4628      	mov	r0, r5
 800d260:	f7ff f8d2 	bl	800c408 <is_empty>
 800d264:	b930      	cbnz	r0, 800d274 <cli_cmd_help+0x64>
 800d266:	6826      	ldr	r6, [r4, #0]
 800d268:	4629      	mov	r1, r5
 800d26a:	4630      	mov	r0, r6
 800d26c:	f00a ff1b 	bl	80180a6 <strstr>
 800d270:	2800      	cmp	r0, #0
 800d272:	d0dc      	beq.n	800d22e <cli_cmd_help+0x1e>
 800d274:	6820      	ldr	r0, [r4, #0]
 800d276:	f7ff f8e1 	bl	800c43c <cli_print>
 800d27a:	6861      	ldr	r1, [r4, #4]
 800d27c:	2900      	cmp	r1, #0
 800d27e:	d0e2      	beq.n	800d246 <cli_cmd_help+0x36>
 800d280:	e7de      	b.n	800d240 <cli_cmd_help+0x30>
 800d282:	4628      	mov	r0, r5
 800d284:	f7ff f8c0 	bl	800c408 <is_empty>
 800d288:	b910      	cbnz	r0, 800d290 <cli_cmd_help+0x80>
 800d28a:	f1b8 0f00 	cmp.w	r8, #0
 800d28e:	d002      	beq.n	800d296 <cli_cmd_help+0x86>
 800d290:	b003      	add	sp, #12
 800d292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d296:	462a      	mov	r2, r5
 800d298:	4903      	ldr	r1, [pc, #12]	; (800d2a8 <cli_cmd_help+0x98>)
 800d29a:	9801      	ldr	r0, [sp, #4]
 800d29c:	f7ff f948 	bl	800c530 <cli_print_error_linef>
 800d2a0:	e7f6      	b.n	800d290 <cli_cmd_help+0x80>
 800d2a2:	bf00      	nop
 800d2a4:	08019704 	.word	0x08019704
 800d2a8:	08019564 	.word	0x08019564
 800d2ac:	0801955c 	.word	0x0801955c
 800d2b0:	08019554 	.word	0x08019554

0800d2b4 <cli_cmd_defaults>:
 800d2b4:	b508      	push	{r3, lr}
 800d2b6:	f000 f809 	bl	800d2cc <config_defaults>
 800d2ba:	4802      	ldr	r0, [pc, #8]	; (800d2c4 <cli_cmd_defaults+0x10>)
 800d2bc:	f7ff f900 	bl	800c4c0 <cli_print_line>
 800d2c0:	bd08      	pop	{r3, pc}
 800d2c2:	bf00      	nop
 800d2c4:	08019578 	.word	0x08019578

0800d2c8 <config_init>:
 800d2c8:	4770      	bx	lr
	...

0800d2cc <config_defaults>:
 800d2cc:	b430      	push	{r4, r5}
 800d2ce:	4c05      	ldr	r4, [pc, #20]	; (800d2e4 <config_defaults+0x18>)
 800d2d0:	4d05      	ldr	r5, [pc, #20]	; (800d2e8 <config_defaults+0x1c>)
 800d2d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d2da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d2de:	bc30      	pop	{r4, r5}
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	20000474 	.word	0x20000474
 800d2e8:	08019a68 	.word	0x08019a68

0800d2ec <config_load>:
 800d2ec:	b508      	push	{r3, lr}
 800d2ee:	4a03      	ldr	r2, [pc, #12]	; (800d2fc <config_load+0x10>)
 800d2f0:	2120      	movs	r1, #32
 800d2f2:	2000      	movs	r0, #0
 800d2f4:	f000 f832 	bl	800d35c <ee_read>
 800d2f8:	bd08      	pop	{r3, pc}
 800d2fa:	bf00      	nop
 800d2fc:	20000474 	.word	0x20000474

0800d300 <config_save>:
 800d300:	b508      	push	{r3, lr}
 800d302:	f000 f80b 	bl	800d31c <ee_format>
 800d306:	b900      	cbnz	r0, 800d30a <config_save+0xa>
 800d308:	bd08      	pop	{r3, pc}
 800d30a:	4a03      	ldr	r2, [pc, #12]	; (800d318 <config_save+0x18>)
 800d30c:	2120      	movs	r1, #32
 800d30e:	2000      	movs	r0, #0
 800d310:	f000 f842 	bl	800d398 <ee_write>
 800d314:	e7f8      	b.n	800d308 <config_save+0x8>
 800d316:	bf00      	nop
 800d318:	20000474 	.word	0x20000474

0800d31c <ee_format>:
 800d31c:	b500      	push	{lr}
 800d31e:	b087      	sub	sp, #28
 800d320:	f003 fc36 	bl	8010b90 <HAL_FLASH_Unlock>
 800d324:	2301      	movs	r3, #1
 800d326:	9303      	str	r3, [sp, #12]
 800d328:	9302      	str	r3, [sp, #8]
 800d32a:	2200      	movs	r2, #0
 800d32c:	9200      	str	r2, [sp, #0]
 800d32e:	9301      	str	r3, [sp, #4]
 800d330:	2302      	movs	r3, #2
 800d332:	9304      	str	r3, [sp, #16]
 800d334:	a905      	add	r1, sp, #20
 800d336:	4668      	mov	r0, sp
 800d338:	f003 fd2c 	bl	8010d94 <HAL_FLASHEx_Erase>
 800d33c:	b950      	cbnz	r0, 800d354 <ee_format+0x38>
 800d33e:	f003 fc3b 	bl	8010bb8 <HAL_FLASH_Lock>
 800d342:	9805      	ldr	r0, [sp, #20]
 800d344:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d348:	bf14      	ite	ne
 800d34a:	2000      	movne	r0, #0
 800d34c:	2001      	moveq	r0, #1
 800d34e:	b007      	add	sp, #28
 800d350:	f85d fb04 	ldr.w	pc, [sp], #4
 800d354:	f003 fc30 	bl	8010bb8 <HAL_FLASH_Lock>
 800d358:	2000      	movs	r0, #0
 800d35a:	e7f8      	b.n	800d34e <ee_format+0x32>

0800d35c <ee_read>:
 800d35c:	4401      	add	r1, r0
 800d35e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800d362:	d815      	bhi.n	800d390 <ee_read+0x34>
 800d364:	4281      	cmp	r1, r0
 800d366:	d915      	bls.n	800d394 <ee_read+0x38>
 800d368:	f100 6000 	add.w	r0, r0, #134217728	; 0x8000000
 800d36c:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800d370:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800d374:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800d378:	e002      	b.n	800d380 <ee_read+0x24>
 800d37a:	3001      	adds	r0, #1
 800d37c:	4281      	cmp	r1, r0
 800d37e:	d005      	beq.n	800d38c <ee_read+0x30>
 800d380:	2a00      	cmp	r2, #0
 800d382:	d0fa      	beq.n	800d37a <ee_read+0x1e>
 800d384:	7803      	ldrb	r3, [r0, #0]
 800d386:	f802 3b01 	strb.w	r3, [r2], #1
 800d38a:	e7f6      	b.n	800d37a <ee_read+0x1e>
 800d38c:	2001      	movs	r0, #1
 800d38e:	4770      	bx	lr
 800d390:	2000      	movs	r0, #0
 800d392:	4770      	bx	lr
 800d394:	2001      	movs	r0, #1
 800d396:	4770      	bx	lr

0800d398 <ee_write>:
 800d398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d39a:	1843      	adds	r3, r0, r1
 800d39c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d3a0:	d81f      	bhi.n	800d3e2 <ee_write+0x4a>
 800d3a2:	4606      	mov	r6, r0
 800d3a4:	460d      	mov	r5, r1
 800d3a6:	4617      	mov	r7, r2
 800d3a8:	b1ea      	cbz	r2, 800d3e6 <ee_write+0x4e>
 800d3aa:	f003 fbf1 	bl	8010b90 <HAL_FLASH_Unlock>
 800d3ae:	b185      	cbz	r5, 800d3d2 <ee_write+0x3a>
 800d3b0:	1e7c      	subs	r4, r7, #1
 800d3b2:	443d      	add	r5, r7
 800d3b4:	3d01      	subs	r5, #1
 800d3b6:	1bf7      	subs	r7, r6, r7
 800d3b8:	4e0c      	ldr	r6, [pc, #48]	; (800d3ec <ee_write+0x54>)
 800d3ba:	443e      	add	r6, r7
 800d3bc:	2700      	movs	r7, #0
 800d3be:	1931      	adds	r1, r6, r4
 800d3c0:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	4638      	mov	r0, r7
 800d3c8:	f003 fc32 	bl	8010c30 <HAL_FLASH_Program>
 800d3cc:	b928      	cbnz	r0, 800d3da <ee_write+0x42>
 800d3ce:	42ac      	cmp	r4, r5
 800d3d0:	d1f5      	bne.n	800d3be <ee_write+0x26>
 800d3d2:	f003 fbf1 	bl	8010bb8 <HAL_FLASH_Lock>
 800d3d6:	2001      	movs	r0, #1
 800d3d8:	e004      	b.n	800d3e4 <ee_write+0x4c>
 800d3da:	f003 fbed 	bl	8010bb8 <HAL_FLASH_Lock>
 800d3de:	2000      	movs	r0, #0
 800d3e0:	e000      	b.n	800d3e4 <ee_write+0x4c>
 800d3e2:	2000      	movs	r0, #0
 800d3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3e6:	2000      	movs	r0, #0
 800d3e8:	e7fc      	b.n	800d3e4 <ee_write+0x4c>
 800d3ea:	bf00      	nop
 800d3ec:	08004001 	.word	0x08004001

0800d3f0 <adc_select>:
 800d3f0:	b500      	push	{lr}
 800d3f2:	b085      	sub	sp, #20
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	9303      	str	r3, [sp, #12]
 800d3f8:	9000      	str	r0, [sp, #0]
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	9301      	str	r3, [sp, #4]
 800d3fe:	2303      	movs	r3, #3
 800d400:	9302      	str	r3, [sp, #8]
 800d402:	4669      	mov	r1, sp
 800d404:	4802      	ldr	r0, [pc, #8]	; (800d410 <adc_select+0x20>)
 800d406:	f003 f9f9 	bl	80107fc <HAL_ADC_ConfigChannel>
 800d40a:	b005      	add	sp, #20
 800d40c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d410:	20005714 	.word	0x20005714

0800d414 <adc_get>:
 800d414:	b538      	push	{r3, r4, r5, lr}
 800d416:	f7ff ffeb 	bl	800d3f0 <adc_select>
 800d41a:	4c09      	ldr	r4, [pc, #36]	; (800d440 <adc_get+0x2c>)
 800d41c:	4620      	mov	r0, r4
 800d41e:	f003 f8e9 	bl	80105f4 <HAL_ADC_Start>
 800d422:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d426:	4620      	mov	r0, r4
 800d428:	f003 f988 	bl	801073c <HAL_ADC_PollForConversion>
 800d42c:	4620      	mov	r0, r4
 800d42e:	f003 f9e1 	bl	80107f4 <HAL_ADC_GetValue>
 800d432:	4605      	mov	r5, r0
 800d434:	4620      	mov	r0, r4
 800d436:	f003 f961 	bl	80106fc <HAL_ADC_Stop>
 800d43a:	4628      	mov	r0, r5
 800d43c:	bd38      	pop	{r3, r4, r5, pc}
 800d43e:	bf00      	nop
 800d440:	20005714 	.word	0x20005714

0800d444 <buzzer_set_volume>:
 800d444:	b530      	push	{r4, r5, lr}
 800d446:	b089      	sub	sp, #36	; 0x24
 800d448:	4604      	mov	r4, r0
 800d44a:	2964      	cmp	r1, #100	; 0x64
 800d44c:	bf28      	it	cs
 800d44e:	2164      	movcs	r1, #100	; 0x64
 800d450:	460d      	mov	r5, r1
 800d452:	2360      	movs	r3, #96	; 0x60
 800d454:	9301      	str	r3, [sp, #4]
 800d456:	8903      	ldrh	r3, [r0, #8]
 800d458:	4a0e      	ldr	r2, [pc, #56]	; (800d494 <buzzer_set_volume+0x50>)
 800d45a:	fba2 2303 	umull	r2, r3, r2, r3
 800d45e:	099b      	lsrs	r3, r3, #6
 800d460:	fb01 f303 	mul.w	r3, r1, r3
 800d464:	9302      	str	r3, [sp, #8]
 800d466:	2300      	movs	r3, #0
 800d468:	9303      	str	r3, [sp, #12]
 800d46a:	9305      	str	r3, [sp, #20]
 800d46c:	6842      	ldr	r2, [r0, #4]
 800d46e:	a901      	add	r1, sp, #4
 800d470:	6800      	ldr	r0, [r0, #0]
 800d472:	f005 fe4b 	bl	801310c <HAL_TIM_PWM_ConfigChannel>
 800d476:	7aa3      	ldrb	r3, [r4, #10]
 800d478:	b133      	cbz	r3, 800d488 <buzzer_set_volume+0x44>
 800d47a:	6861      	ldr	r1, [r4, #4]
 800d47c:	6820      	ldr	r0, [r4, #0]
 800d47e:	f005 fec3 	bl	8013208 <HAL_TIM_PWM_Start>
 800d482:	81a5      	strh	r5, [r4, #12]
 800d484:	b009      	add	sp, #36	; 0x24
 800d486:	bd30      	pop	{r4, r5, pc}
 800d488:	6861      	ldr	r1, [r4, #4]
 800d48a:	6820      	ldr	r0, [r4, #0]
 800d48c:	f005 ff28 	bl	80132e0 <HAL_TIM_PWM_Stop>
 800d490:	e7f7      	b.n	800d482 <buzzer_set_volume+0x3e>
 800d492:	bf00      	nop
 800d494:	51eb851f 	.word	0x51eb851f

0800d498 <buzzer_set_freq>:
 800d498:	b538      	push	{r3, r4, r5, lr}
 800d49a:	4605      	mov	r5, r0
 800d49c:	460c      	mov	r4, r1
 800d49e:	f004 ff3b 	bl	8012318 <HAL_RCC_GetHCLKFreq>
 800d4a2:	2cc8      	cmp	r4, #200	; 0xc8
 800d4a4:	bf38      	it	cc
 800d4a6:	24c8      	movcc	r4, #200	; 0xc8
 800d4a8:	f242 7110 	movw	r1, #10000	; 0x2710
 800d4ac:	428c      	cmp	r4, r1
 800d4ae:	bf28      	it	cs
 800d4b0:	460c      	movcs	r4, r1
 800d4b2:	0064      	lsls	r4, r4, #1
 800d4b4:	fbb0 f4f4 	udiv	r4, r0, r4
 800d4b8:	3c01      	subs	r4, #1
 800d4ba:	b2a4      	uxth	r4, r4
 800d4bc:	812c      	strh	r4, [r5, #8]
 800d4be:	682b      	ldr	r3, [r5, #0]
 800d4c0:	60dc      	str	r4, [r3, #12]
 800d4c2:	682b      	ldr	r3, [r5, #0]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	605a      	str	r2, [r3, #4]
 800d4c8:	6828      	ldr	r0, [r5, #0]
 800d4ca:	f005 fdc5 	bl	8013058 <HAL_TIM_PWM_Init>
 800d4ce:	89a9      	ldrh	r1, [r5, #12]
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	f7ff ffb7 	bl	800d444 <buzzer_set_volume>
 800d4d6:	bd38      	pop	{r3, r4, r5, pc}

0800d4d8 <buzzer_start>:
 800d4d8:	b508      	push	{r3, lr}
 800d4da:	2301      	movs	r3, #1
 800d4dc:	7283      	strb	r3, [r0, #10]
 800d4de:	6841      	ldr	r1, [r0, #4]
 800d4e0:	6800      	ldr	r0, [r0, #0]
 800d4e2:	f005 fe91 	bl	8013208 <HAL_TIM_PWM_Start>
 800d4e6:	bd08      	pop	{r3, pc}

0800d4e8 <buzzer_stop>:
 800d4e8:	b510      	push	{r4, lr}
 800d4ea:	2400      	movs	r4, #0
 800d4ec:	7284      	strb	r4, [r0, #10]
 800d4ee:	6841      	ldr	r1, [r0, #4]
 800d4f0:	6800      	ldr	r0, [r0, #0]
 800d4f2:	f005 fef5 	bl	80132e0 <HAL_TIM_PWM_Stop>
 800d4f6:	4622      	mov	r2, r4
 800d4f8:	2140      	movs	r1, #64	; 0x40
 800d4fa:	4802      	ldr	r0, [pc, #8]	; (800d504 <buzzer_stop+0x1c>)
 800d4fc:	f003 fe1e 	bl	801113c <HAL_GPIO_WritePin>
 800d500:	bd10      	pop	{r4, pc}
 800d502:	bf00      	nop
 800d504:	40020400 	.word	0x40020400

0800d508 <dcdc_set_voltage>:
 800d508:	b510      	push	{r4, lr}
 800d50a:	ed2d 8b02 	vpush	{d8}
 800d50e:	b082      	sub	sp, #8
 800d510:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800d5bc <dcdc_set_voltage+0xb4>
 800d514:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d51c:	dc4b      	bgt.n	800d5b6 <dcdc_set_voltage+0xae>
 800d51e:	eeb0 8a40 	vmov.f32	s16, s0
 800d522:	eddf 7a27 	vldr	s15, [pc, #156]	; 800d5c0 <dcdc_set_voltage+0xb8>
 800d526:	eeb4 0a67 	vcmp.f32	s0, s15
 800d52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d52e:	bf48      	it	mi
 800d530:	eeb0 8a67 	vmovmi.f32	s16, s15
 800d534:	4b23      	ldr	r3, [pc, #140]	; (800d5c4 <dcdc_set_voltage+0xbc>)
 800d536:	ed83 8a00 	vstr	s16, [r3]
 800d53a:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 800d53e:	eeb0 0a48 	vmov.f32	s0, s16
 800d542:	f00b fa5b 	bl	80189fc <powf>
 800d546:	ee68 7a08 	vmul.f32	s15, s16, s16
 800d54a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800d5c8 <dcdc_set_voltage+0xc0>
 800d54e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d552:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800d5cc <dcdc_set_voltage+0xc4>
 800d556:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d55a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d55e:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800d5d0 <dcdc_set_voltage+0xc8>
 800d562:	ee28 8a00 	vmul.f32	s16, s16, s0
 800d566:	ee37 8ac8 	vsub.f32	s16, s15, s16
 800d56a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800d5d4 <dcdc_set_voltage+0xcc>
 800d56e:	ee38 8a27 	vadd.f32	s16, s16, s15
 800d572:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 800d576:	ee17 3a90 	vmov	r3, s15
 800d57a:	f88d 3007 	strb.w	r3, [sp, #7]
 800d57e:	4c16      	ldr	r4, [pc, #88]	; (800d5d8 <dcdc_set_voltage+0xd0>)
 800d580:	2200      	movs	r2, #0
 800d582:	2110      	movs	r1, #16
 800d584:	4620      	mov	r0, r4
 800d586:	f003 fdd9 	bl	801113c <HAL_GPIO_WritePin>
 800d58a:	2001      	movs	r0, #1
 800d58c:	f007 fd51 	bl	8015032 <osDelay>
 800d590:	2302      	movs	r3, #2
 800d592:	2201      	movs	r2, #1
 800d594:	f10d 0107 	add.w	r1, sp, #7
 800d598:	4810      	ldr	r0, [pc, #64]	; (800d5dc <dcdc_set_voltage+0xd4>)
 800d59a:	f005 f85e 	bl	801265a <HAL_SPI_Transmit>
 800d59e:	2001      	movs	r0, #1
 800d5a0:	f007 fd47 	bl	8015032 <osDelay>
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	2110      	movs	r1, #16
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	f003 fdc7 	bl	801113c <HAL_GPIO_WritePin>
 800d5ae:	b002      	add	sp, #8
 800d5b0:	ecbd 8b02 	vpop	{d8}
 800d5b4:	bd10      	pop	{r4, pc}
 800d5b6:	ed9f 8a01 	vldr	s16, [pc, #4]	; 800d5bc <dcdc_set_voltage+0xb4>
 800d5ba:	e7bb      	b.n	800d534 <dcdc_set_voltage+0x2c>
 800d5bc:	41433333 	.word	0x41433333
 800d5c0:	40a66666 	.word	0x40a66666
 800d5c4:	20000498 	.word	0x20000498
 800d5c8:	41cd47ae 	.word	0x41cd47ae
 800d5cc:	bf4aaeb0 	.word	0xbf4aaeb0
 800d5d0:	4392d4bc 	.word	0x4392d4bc
 800d5d4:	4495f571 	.word	0x4495f571
 800d5d8:	40020000 	.word	0x40020000
 800d5dc:	20005674 	.word	0x20005674

0800d5e0 <go_to_sleep>:
#include "init/init.h"
#include "sleep.h"
#include "drivers/led.h"
#include "config/globals.h"

void go_to_sleep(wakeup_e source){
 800d5e0:	b570      	push	{r4, r5, r6, lr}
 800d5e2:	4606      	mov	r6, r0
static inline void led_on(){
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
}

static inline void led_off(){
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d5ea:	4838      	ldr	r0, [pc, #224]	; (800d6cc <go_to_sleep+0xec>)
 800d5ec:	f003 fda6 	bl	801113c <HAL_GPIO_WritePin>

	led_off();
	while((HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0));
 800d5f0:	4d37      	ldr	r5, [pc, #220]	; (800d6d0 <go_to_sleep+0xf0>)
 800d5f2:	2404      	movs	r4, #4
 800d5f4:	4621      	mov	r1, r4
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	f003 fd9a 	bl	8011130 <HAL_GPIO_ReadPin>
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	d0f9      	beq.n	800d5f4 <go_to_sleep+0x14>

	HAL_Delay(10);
 800d600:	200a      	movs	r0, #10
 800d602:	f002 fef5 	bl	80103f0 <HAL_Delay>


	__HAL_GPIO_EXTI_CLEAR_IT(BUTTON_Pin);
 800d606:	4b33      	ldr	r3, [pc, #204]	; (800d6d4 <go_to_sleep+0xf4>)
 800d608:	2204      	movs	r2, #4
 800d60a:	615a      	str	r2, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_IT(IMU_INT1_Pin);
 800d60c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d610:	615a      	str	r2, [r3, #20]

	if(source == WAKEUP_BUTTON){
 800d612:	2e01      	cmp	r6, #1
 800d614:	d024      	beq.n	800d660 <go_to_sleep+0x80>
		HAL_NVIC_EnableIRQ(EXTI2_IRQn);
	} else if(source == WAKEUP_ACCEL){
 800d616:	2e02      	cmp	r6, #2
 800d618:	d036      	beq.n	800d688 <go_to_sleep+0xa8>
		osEventFlagsSet(sensor_mode_id, SENSOR_MODE_WAKEUP);
		HAL_Delay(10);
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
	} else {
		osEventFlagsSet(sensor_mode_id, SENSOR_MODE_WAKEUP);
 800d61a:	2102      	movs	r1, #2
 800d61c:	4b2e      	ldr	r3, [pc, #184]	; (800d6d8 <go_to_sleep+0xf8>)
 800d61e:	6818      	ldr	r0, [r3, #0]
 800d620:	f007 fd44 	bl	80150ac <osEventFlagsSet>
		HAL_Delay(10);
 800d624:	200a      	movs	r0, #10
 800d626:	f002 fee3 	bl	80103f0 <HAL_Delay>
		HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800d62a:	2008      	movs	r0, #8
 800d62c:	f003 f9fe 	bl	8010a2c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800d630:	2028      	movs	r0, #40	; 0x28
 800d632:	f003 f9fb 	bl	8010a2c <HAL_NVIC_EnableIRQ>
	}


	/* Disable Systick interrupt */
	HAL_SuspendTick();
 800d636:	f000 fe55 	bl	800e2e4 <HAL_SuspendTick>

    /* Go to sleep */
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800d63a:	2101      	movs	r1, #1
 800d63c:	4608      	mov	r0, r1
 800d63e:	f004 fb39 	bl	8011cb4 <HAL_PWR_EnterSTOPMode>

    /* Return from sleep */
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800d642:	2008      	movs	r0, #8
 800d644:	f003 fa00 	bl	8010a48 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800d648:	2028      	movs	r0, #40	; 0x28
 800d64a:	f003 f9fd 	bl	8010a48 <HAL_NVIC_DisableIRQ>

    SystemClock_Config();
 800d64e:	f001 f883 	bl	800e758 <SystemClock_Config>
    HAL_ResumeTick();
 800d652:	f000 fe51 	bl	800e2f8 <HAL_ResumeTick>

    if(source == WAKEUP_ACCEL || source == WAKEUP_BOTH){
 800d656:	3e02      	subs	r6, #2
 800d658:	b2f6      	uxtb	r6, r6
 800d65a:	2e01      	cmp	r6, #1
 800d65c:	d92f      	bls.n	800d6be <go_to_sleep+0xde>
    	/* Configure IMU to go back to continous mode */
    	osEventFlagsSet(sensor_mode_id, SENSOR_MODE_CONTINUOUS);
    }
}
 800d65e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800d660:	2008      	movs	r0, #8
 800d662:	f003 f9e3 	bl	8010a2c <HAL_NVIC_EnableIRQ>
	HAL_SuspendTick();
 800d666:	f000 fe3d 	bl	800e2e4 <HAL_SuspendTick>
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800d66a:	2101      	movs	r1, #1
 800d66c:	4608      	mov	r0, r1
 800d66e:	f004 fb21 	bl	8011cb4 <HAL_PWR_EnterSTOPMode>
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800d672:	2008      	movs	r0, #8
 800d674:	f003 f9e8 	bl	8010a48 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800d678:	2028      	movs	r0, #40	; 0x28
 800d67a:	f003 f9e5 	bl	8010a48 <HAL_NVIC_DisableIRQ>
    SystemClock_Config();
 800d67e:	f001 f86b 	bl	800e758 <SystemClock_Config>
    HAL_ResumeTick();
 800d682:	f000 fe39 	bl	800e2f8 <HAL_ResumeTick>
    if(source == WAKEUP_ACCEL || source == WAKEUP_BOTH){
 800d686:	e7ea      	b.n	800d65e <go_to_sleep+0x7e>
		osEventFlagsSet(sensor_mode_id, SENSOR_MODE_WAKEUP);
 800d688:	2102      	movs	r1, #2
 800d68a:	4b13      	ldr	r3, [pc, #76]	; (800d6d8 <go_to_sleep+0xf8>)
 800d68c:	6818      	ldr	r0, [r3, #0]
 800d68e:	f007 fd0d 	bl	80150ac <osEventFlagsSet>
		HAL_Delay(10);
 800d692:	200a      	movs	r0, #10
 800d694:	f002 feac 	bl	80103f0 <HAL_Delay>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800d698:	2028      	movs	r0, #40	; 0x28
 800d69a:	f003 f9c7 	bl	8010a2c <HAL_NVIC_EnableIRQ>
	HAL_SuspendTick();
 800d69e:	f000 fe21 	bl	800e2e4 <HAL_SuspendTick>
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800d6a2:	2101      	movs	r1, #1
 800d6a4:	4608      	mov	r0, r1
 800d6a6:	f004 fb05 	bl	8011cb4 <HAL_PWR_EnterSTOPMode>
    HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800d6aa:	2008      	movs	r0, #8
 800d6ac:	f003 f9cc 	bl	8010a48 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800d6b0:	2028      	movs	r0, #40	; 0x28
 800d6b2:	f003 f9c9 	bl	8010a48 <HAL_NVIC_DisableIRQ>
    SystemClock_Config();
 800d6b6:	f001 f84f 	bl	800e758 <SystemClock_Config>
    HAL_ResumeTick();
 800d6ba:	f000 fe1d 	bl	800e2f8 <HAL_ResumeTick>
    	osEventFlagsSet(sensor_mode_id, SENSOR_MODE_CONTINUOUS);
 800d6be:	2101      	movs	r1, #1
 800d6c0:	4b05      	ldr	r3, [pc, #20]	; (800d6d8 <go_to_sleep+0xf8>)
 800d6c2:	6818      	ldr	r0, [r3, #0]
 800d6c4:	f007 fcf2 	bl	80150ac <osEventFlagsSet>
}
 800d6c8:	e7c9      	b.n	800d65e <go_to_sleep+0x7e>
 800d6ca:	bf00      	nop
 800d6cc:	40020800 	.word	0x40020800
 800d6d0:	40020000 	.word	0x40020000
 800d6d4:	40013c00 	.word	0x40013c00
 800d6d8:	20005610 	.word	0x20005610

0800d6dc <wake_up>:

void wake_up(){
	/* Clear Wake Up Flag */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800d6dc:	4a02      	ldr	r2, [pc, #8]	; (800d6e8 <wake_up+0xc>)
 800d6de:	6813      	ldr	r3, [r2, #0]
 800d6e0:	f043 0304 	orr.w	r3, r3, #4
 800d6e4:	6013      	str	r3, [r2, #0]
}
 800d6e6:	4770      	bx	lr
 800d6e8:	40007000 	.word	0x40007000

0800d6ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
  if((GPIO_Pin == BUTTON_Pin) || (GPIO_Pin == IMU_INT1_Pin)){
 800d6ec:	2804      	cmp	r0, #4
 800d6ee:	d003      	beq.n	800d6f8 <HAL_GPIO_EXTI_Callback+0xc>
 800d6f0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800d6f4:	d000      	beq.n	800d6f8 <HAL_GPIO_EXTI_Callback+0xc>
 800d6f6:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800d6f8:	b508      	push	{r3, lr}
	  wake_up();
 800d6fa:	f7ff ffef 	bl	800d6dc <wake_up>
  }
}
 800d6fe:	bd08      	pop	{r3, pc}

0800d700 <update_fsm>:
 800d700:	b570      	push	{r4, r5, r6, lr}
 800d702:	ed2d 8b02 	vpush	{d8}
 800d706:	b082      	sub	sp, #8
 800d708:	4604      	mov	r4, r0
 800d70a:	7805      	ldrb	r5, [r0, #0]
 800d70c:	1e6b      	subs	r3, r5, #1
 800d70e:	2b06      	cmp	r3, #6
 800d710:	f200 8189 	bhi.w	800da26 <update_fsm+0x326>
 800d714:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d718:	00760007 	.word	0x00760007
 800d71c:	011d00ac 	.word	0x011d00ac
 800d720:	01740145 	.word	0x01740145
 800d724:	0193      	.short	0x0193
 800d726:	2104      	movs	r1, #4
 800d728:	48ae      	ldr	r0, [pc, #696]	; (800d9e4 <update_fsm+0x2e4>)
 800d72a:	f003 fd01 	bl	8011130 <HAL_GPIO_ReadPin>
 800d72e:	b320      	cbz	r0, 800d77a <update_fsm+0x7a>
 800d730:	6923      	ldr	r3, [r4, #16]
 800d732:	3301      	adds	r3, #1
 800d734:	6123      	str	r3, [r4, #16]
 800d736:	6863      	ldr	r3, [r4, #4]
 800d738:	2b0a      	cmp	r3, #10
 800d73a:	d833      	bhi.n	800d7a4 <update_fsm+0xa4>
 800d73c:	2300      	movs	r3, #0
 800d73e:	6063      	str	r3, [r4, #4]
 800d740:	60e3      	str	r3, [r4, #12]
 800d742:	68a3      	ldr	r3, [r4, #8]
 800d744:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d748:	d850      	bhi.n	800d7ec <update_fsm+0xec>
 800d74a:	6922      	ldr	r2, [r4, #16]
 800d74c:	f241 7370 	movw	r3, #6000	; 0x1770
 800d750:	429a      	cmp	r2, r3
 800d752:	f240 8168 	bls.w	800da26 <update_fsm+0x326>
 800d756:	2300      	movs	r3, #0
 800d758:	6063      	str	r3, [r4, #4]
 800d75a:	60a3      	str	r3, [r4, #8]
 800d75c:	60e3      	str	r3, [r4, #12]
 800d75e:	6123      	str	r3, [r4, #16]
 800d760:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d764:	489f      	ldr	r0, [pc, #636]	; (800d9e4 <update_fsm+0x2e4>)
 800d766:	f003 fce3 	bl	8011130 <HAL_GPIO_ReadPin>
 800d76a:	2800      	cmp	r0, #0
 800d76c:	f040 815b 	bne.w	800da26 <update_fsm+0x326>
 800d770:	2302      	movs	r3, #2
 800d772:	7023      	strb	r3, [r4, #0]
 800d774:	f000 fad8 	bl	800dd28 <state_transition_idle_deepsleep>
 800d778:	e155      	b.n	800da26 <update_fsm+0x326>
 800d77a:	2201      	movs	r2, #1
 800d77c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d780:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800d784:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 800d788:	f003 fcd8 	bl	801113c <HAL_GPIO_WritePin>
 800d78c:	2300      	movs	r3, #0
 800d78e:	6123      	str	r3, [r4, #16]
 800d790:	68a3      	ldr	r3, [r4, #8]
 800d792:	b91b      	cbnz	r3, 800d79c <update_fsm+0x9c>
 800d794:	6863      	ldr	r3, [r4, #4]
 800d796:	3301      	adds	r3, #1
 800d798:	6063      	str	r3, [r4, #4]
 800d79a:	e00c      	b.n	800d7b6 <update_fsm+0xb6>
 800d79c:	68e3      	ldr	r3, [r4, #12]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	60e3      	str	r3, [r4, #12]
 800d7a2:	e008      	b.n	800d7b6 <update_fsm+0xb6>
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d7aa:	488f      	ldr	r0, [pc, #572]	; (800d9e8 <update_fsm+0x2e8>)
 800d7ac:	f003 fcc6 	bl	801113c <HAL_GPIO_WritePin>
 800d7b0:	68a3      	ldr	r3, [r4, #8]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	60a3      	str	r3, [r4, #8]
 800d7b6:	6863      	ldr	r3, [r4, #4]
 800d7b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d7bc:	d908      	bls.n	800d7d0 <update_fsm+0xd0>
 800d7be:	2300      	movs	r3, #0
 800d7c0:	6063      	str	r3, [r4, #4]
 800d7c2:	60a3      	str	r3, [r4, #8]
 800d7c4:	60e3      	str	r3, [r4, #12]
 800d7c6:	6123      	str	r3, [r4, #16]
 800d7c8:	2303      	movs	r3, #3
 800d7ca:	7023      	strb	r3, [r4, #0]
 800d7cc:	f000 fac4 	bl	800dd58 <state_transition_idle_ready>
 800d7d0:	68e3      	ldr	r3, [r4, #12]
 800d7d2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d7d6:	d9b4      	bls.n	800d742 <update_fsm+0x42>
 800d7d8:	2300      	movs	r3, #0
 800d7da:	6063      	str	r3, [r4, #4]
 800d7dc:	60a3      	str	r3, [r4, #8]
 800d7de:	60e3      	str	r3, [r4, #12]
 800d7e0:	6123      	str	r3, [r4, #16]
 800d7e2:	2302      	movs	r3, #2
 800d7e4:	7023      	strb	r3, [r4, #0]
 800d7e6:	f000 fa9f 	bl	800dd28 <state_transition_idle_deepsleep>
 800d7ea:	e7aa      	b.n	800d742 <update_fsm+0x42>
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d7f2:	487d      	ldr	r0, [pc, #500]	; (800d9e8 <update_fsm+0x2e8>)
 800d7f4:	f003 fca2 	bl	801113c <HAL_GPIO_WritePin>
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	6063      	str	r3, [r4, #4]
 800d7fc:	60a3      	str	r3, [r4, #8]
 800d7fe:	60e3      	str	r3, [r4, #12]
 800d800:	6123      	str	r3, [r4, #16]
 800d802:	e110      	b.n	800da26 <update_fsm+0x326>
 800d804:	2200      	movs	r2, #0
 800d806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d80a:	4877      	ldr	r0, [pc, #476]	; (800d9e8 <update_fsm+0x2e8>)
 800d80c:	f003 fc96 	bl	801113c <HAL_GPIO_WritePin>
 800d810:	2104      	movs	r1, #4
 800d812:	4874      	ldr	r0, [pc, #464]	; (800d9e4 <update_fsm+0x2e4>)
 800d814:	f003 fc8c 	bl	8011130 <HAL_GPIO_ReadPin>
 800d818:	b9b0      	cbnz	r0, 800d848 <update_fsm+0x148>
 800d81a:	68a3      	ldr	r3, [r4, #8]
 800d81c:	b983      	cbnz	r3, 800d840 <update_fsm+0x140>
 800d81e:	6863      	ldr	r3, [r4, #4]
 800d820:	3301      	adds	r3, #1
 800d822:	6063      	str	r3, [r4, #4]
 800d824:	68e3      	ldr	r3, [r4, #12]
 800d826:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d82a:	f240 80fc 	bls.w	800da26 <update_fsm+0x326>
 800d82e:	2300      	movs	r3, #0
 800d830:	6063      	str	r3, [r4, #4]
 800d832:	60a3      	str	r3, [r4, #8]
 800d834:	60e3      	str	r3, [r4, #12]
 800d836:	2301      	movs	r3, #1
 800d838:	7023      	strb	r3, [r4, #0]
 800d83a:	f000 fa59 	bl	800dcf0 <state_transition_deepsleep_idle>
 800d83e:	e00a      	b.n	800d856 <update_fsm+0x156>
 800d840:	68e3      	ldr	r3, [r4, #12]
 800d842:	3301      	adds	r3, #1
 800d844:	60e3      	str	r3, [r4, #12]
 800d846:	e002      	b.n	800d84e <update_fsm+0x14e>
 800d848:	68a3      	ldr	r3, [r4, #8]
 800d84a:	3301      	adds	r3, #1
 800d84c:	60a3      	str	r3, [r4, #8]
 800d84e:	68e3      	ldr	r3, [r4, #12]
 800d850:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d854:	d8eb      	bhi.n	800d82e <update_fsm+0x12e>
 800d856:	68a3      	ldr	r3, [r4, #8]
 800d858:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d85c:	f240 80e3 	bls.w	800da26 <update_fsm+0x326>
 800d860:	2300      	movs	r3, #0
 800d862:	6063      	str	r3, [r4, #4]
 800d864:	60a3      	str	r3, [r4, #8]
 800d866:	60e3      	str	r3, [r4, #12]
 800d868:	2001      	movs	r0, #1
 800d86a:	f7ff feb9 	bl	800d5e0 <go_to_sleep>
 800d86e:	e0da      	b.n	800da26 <update_fsm+0x326>
 800d870:	2200      	movs	r2, #0
 800d872:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d876:	485c      	ldr	r0, [pc, #368]	; (800d9e8 <update_fsm+0x2e8>)
 800d878:	f003 fc60 	bl	801113c <HAL_GPIO_WritePin>
 800d87c:	2104      	movs	r1, #4
 800d87e:	4859      	ldr	r0, [pc, #356]	; (800d9e4 <update_fsm+0x2e4>)
 800d880:	f003 fc56 	bl	8011130 <HAL_GPIO_ReadPin>
 800d884:	b980      	cbnz	r0, 800d8a8 <update_fsm+0x1a8>
 800d886:	2300      	movs	r3, #0
 800d888:	60a3      	str	r3, [r4, #8]
 800d88a:	6863      	ldr	r3, [r4, #4]
 800d88c:	3301      	adds	r3, #1
 800d88e:	6063      	str	r3, [r4, #4]
 800d890:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d894:	d911      	bls.n	800d8ba <update_fsm+0x1ba>
 800d896:	2300      	movs	r3, #0
 800d898:	6063      	str	r3, [r4, #4]
 800d89a:	60a3      	str	r3, [r4, #8]
 800d89c:	60e3      	str	r3, [r4, #12]
 800d89e:	2301      	movs	r3, #1
 800d8a0:	7023      	strb	r3, [r4, #0]
 800d8a2:	f000 fa83 	bl	800ddac <state_transition_ready_idle>
 800d8a6:	e004      	b.n	800d8b2 <update_fsm+0x1b2>
 800d8a8:	68a3      	ldr	r3, [r4, #8]
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	60a3      	str	r3, [r4, #8]
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	6063      	str	r3, [r4, #4]
 800d8b2:	68a3      	ldr	r3, [r4, #8]
 800d8b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d8b8:	d833      	bhi.n	800d922 <update_fsm+0x222>
 800d8ba:	4b4c      	ldr	r3, [pc, #304]	; (800d9ec <update_fsm+0x2ec>)
 800d8bc:	edd3 7a00 	vldr	s15, [r3]
 800d8c0:	edd3 6a01 	vldr	s13, [r3, #4]
 800d8c4:	ed93 7a02 	vldr	s14, [r3, #8]
 800d8c8:	4b49      	ldr	r3, [pc, #292]	; (800d9f0 <update_fsm+0x2f0>)
 800d8ca:	689b      	ldr	r3, [r3, #8]
 800d8cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d8d0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800d8d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8d8:	ee27 7a07 	vmul.f32	s14, s14, s14
 800d8dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8e0:	fb03 f303 	mul.w	r3, r3, r3
 800d8e4:	ee07 3a10 	vmov	s14, r3
 800d8e8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d8ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8f4:	f340 80d3 	ble.w	800da9e <update_fsm+0x39e>
 800d8f8:	68e3      	ldr	r3, [r4, #12]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	60e3      	str	r3, [r4, #12]
 800d8fe:	2b14      	cmp	r3, #20
 800d900:	f240 8091 	bls.w	800da26 <update_fsm+0x326>
 800d904:	2300      	movs	r3, #0
 800d906:	6063      	str	r3, [r4, #4]
 800d908:	60a3      	str	r3, [r4, #8]
 800d90a:	60e3      	str	r3, [r4, #12]
 800d90c:	2201      	movs	r2, #1
 800d90e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d912:	4835      	ldr	r0, [pc, #212]	; (800d9e8 <update_fsm+0x2e8>)
 800d914:	f003 fc12 	bl	801113c <HAL_GPIO_WritePin>
 800d918:	2304      	movs	r3, #4
 800d91a:	7023      	strb	r3, [r4, #0]
 800d91c:	f000 fa72 	bl	800de04 <state_transition_ready_ascent>
 800d920:	e081      	b.n	800da26 <update_fsm+0x326>
 800d922:	2300      	movs	r3, #0
 800d924:	6063      	str	r3, [r4, #4]
 800d926:	60a3      	str	r3, [r4, #8]
 800d928:	60e3      	str	r3, [r4, #12]
 800d92a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d92e:	482d      	ldr	r0, [pc, #180]	; (800d9e4 <update_fsm+0x2e4>)
 800d930:	f003 fbfe 	bl	8011130 <HAL_GPIO_ReadPin>
 800d934:	2800      	cmp	r0, #0
 800d936:	d1c0      	bne.n	800d8ba <update_fsm+0x1ba>
 800d938:	2201      	movs	r2, #1
 800d93a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d93e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800d942:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 800d946:	f003 fbf9 	bl	801113c <HAL_GPIO_WritePin>
 800d94a:	2003      	movs	r0, #3
 800d94c:	f7ff fe48 	bl	800d5e0 <go_to_sleep>
 800d950:	e7b3      	b.n	800d8ba <update_fsm+0x1ba>
 800d952:	6986      	ldr	r6, [r0, #24]
 800d954:	f606 36b8 	addw	r6, r6, #3000	; 0xbb8
 800d958:	f007 faf8 	bl	8014f4c <osKernelGetTickCount>
 800d95c:	4286      	cmp	r6, r0
 800d95e:	d862      	bhi.n	800da26 <update_fsm+0x326>
 800d960:	4b24      	ldr	r3, [pc, #144]	; (800d9f4 <update_fsm+0x2f4>)
 800d962:	edd3 7a01 	vldr	s15, [r3, #4]
 800d966:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d96e:	d414      	bmi.n	800d99a <update_fsm+0x29a>
 800d970:	4b21      	ldr	r3, [pc, #132]	; (800d9f8 <update_fsm+0x2f8>)
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	b113      	cbz	r3, 800d97c <update_fsm+0x27c>
 800d976:	68a3      	ldr	r3, [r4, #8]
 800d978:	3301      	adds	r3, #1
 800d97a:	60a3      	str	r3, [r4, #8]
 800d97c:	6863      	ldr	r3, [r4, #4]
 800d97e:	2b32      	cmp	r3, #50	; 0x32
 800d980:	d802      	bhi.n	800d988 <update_fsm+0x288>
 800d982:	68a3      	ldr	r3, [r4, #8]
 800d984:	2b32      	cmp	r3, #50	; 0x32
 800d986:	d94e      	bls.n	800da26 <update_fsm+0x326>
 800d988:	2300      	movs	r3, #0
 800d98a:	6063      	str	r3, [r4, #4]
 800d98c:	60a3      	str	r3, [r4, #8]
 800d98e:	60e3      	str	r3, [r4, #12]
 800d990:	2305      	movs	r3, #5
 800d992:	7023      	strb	r3, [r4, #0]
 800d994:	f000 fa60 	bl	800de58 <state_transition_ascent_descent>
 800d998:	e045      	b.n	800da26 <update_fsm+0x326>
 800d99a:	6863      	ldr	r3, [r4, #4]
 800d99c:	3301      	adds	r3, #1
 800d99e:	6063      	str	r3, [r4, #4]
 800d9a0:	e7e6      	b.n	800d970 <update_fsm+0x270>
 800d9a2:	6986      	ldr	r6, [r0, #24]
 800d9a4:	f606 36b8 	addw	r6, r6, #3000	; 0xbb8
 800d9a8:	f007 fad0 	bl	8014f4c <osKernelGetTickCount>
 800d9ac:	4286      	cmp	r6, r0
 800d9ae:	d83a      	bhi.n	800da26 <update_fsm+0x326>
 800d9b0:	4b10      	ldr	r3, [pc, #64]	; (800d9f4 <update_fsm+0x2f4>)
 800d9b2:	edd3 7a01 	vldr	s15, [r3, #4]
 800d9b6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800d9ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d9be:	ed93 7a00 	vldr	s14, [r3]
 800d9c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9c6:	4b0a      	ldr	r3, [pc, #40]	; (800d9f0 <update_fsm+0x2f0>)
 800d9c8:	ed93 7a01 	vldr	s14, [r3, #4]
 800d9cc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d9d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9d8:	d825      	bhi.n	800da26 <update_fsm+0x326>
 800d9da:	2306      	movs	r3, #6
 800d9dc:	7023      	strb	r3, [r4, #0]
 800d9de:	f000 fa45 	bl	800de6c <state_transition_descent_deployment>
 800d9e2:	e020      	b.n	800da26 <update_fsm+0x326>
 800d9e4:	40020000 	.word	0x40020000
 800d9e8:	40020800 	.word	0x40020800
 800d9ec:	200053c8 	.word	0x200053c8
 800d9f0:	20000474 	.word	0x20000474
 800d9f4:	200053f0 	.word	0x200053f0
 800d9f8:	200053ec 	.word	0x200053ec
 800d9fc:	469c4000 	.word	0x469c4000
 800da00:	edd0 7a06 	vldr	s15, [r0, #24]
 800da04:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800da08:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 800d9fc <update_fsm+0x2fc>
 800da0c:	ee38 8a27 	vadd.f32	s16, s16, s15
 800da10:	f007 fa9c 	bl	8014f4c <osKernelGetTickCount>
 800da14:	ee07 0a90 	vmov	s15, r0
 800da18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da1c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800da20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da24:	dd06      	ble.n	800da34 <update_fsm+0x334>
 800da26:	7823      	ldrb	r3, [r4, #0]
 800da28:	42ab      	cmp	r3, r5
 800da2a:	d11e      	bne.n	800da6a <update_fsm+0x36a>
 800da2c:	b002      	add	sp, #8
 800da2e:	ecbd 8b02 	vpop	{d8}
 800da32:	bd70      	pop	{r4, r5, r6, pc}
 800da34:	2307      	movs	r3, #7
 800da36:	7023      	strb	r3, [r4, #0]
 800da38:	f000 fa28 	bl	800de8c <state_transition_deployment_recovery>
 800da3c:	e7f3      	b.n	800da26 <update_fsm+0x326>
 800da3e:	2104      	movs	r1, #4
 800da40:	4818      	ldr	r0, [pc, #96]	; (800daa4 <update_fsm+0x3a4>)
 800da42:	f003 fb75 	bl	8011130 <HAL_GPIO_ReadPin>
 800da46:	b918      	cbnz	r0, 800da50 <update_fsm+0x350>
 800da48:	6863      	ldr	r3, [r4, #4]
 800da4a:	3301      	adds	r3, #1
 800da4c:	6063      	str	r3, [r4, #4]
 800da4e:	e7ea      	b.n	800da26 <update_fsm+0x326>
 800da50:	6863      	ldr	r3, [r4, #4]
 800da52:	2b0a      	cmp	r3, #10
 800da54:	d802      	bhi.n	800da5c <update_fsm+0x35c>
 800da56:	2300      	movs	r3, #0
 800da58:	6063      	str	r3, [r4, #4]
 800da5a:	e7e4      	b.n	800da26 <update_fsm+0x326>
 800da5c:	2301      	movs	r3, #1
 800da5e:	7023      	strb	r3, [r4, #0]
 800da60:	2300      	movs	r3, #0
 800da62:	6063      	str	r3, [r4, #4]
 800da64:	f000 fa22 	bl	800deac <state_transition_recovery_idle>
 800da68:	e7f5      	b.n	800da56 <update_fsm+0x356>
 800da6a:	2301      	movs	r3, #1
 800da6c:	7523      	strb	r3, [r4, #20]
 800da6e:	f007 fa6d 	bl	8014f4c <osKernelGetTickCount>
 800da72:	4601      	mov	r1, r0
 800da74:	61a0      	str	r0, [r4, #24]
 800da76:	7823      	ldrb	r3, [r4, #0]
 800da78:	2205      	movs	r2, #5
 800da7a:	480b      	ldr	r0, [pc, #44]	; (800daa8 <update_fsm+0x3a8>)
 800da7c:	f000 ffa5 	bl	800e9ca <recorder_record>
 800da80:	4b0a      	ldr	r3, [pc, #40]	; (800daac <update_fsm+0x3ac>)
 800da82:	7822      	ldrb	r2, [r4, #0]
 800da84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800da88:	9201      	str	r2, [sp, #4]
 800da8a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800da8e:	9300      	str	r3, [sp, #0]
 800da90:	4b07      	ldr	r3, [pc, #28]	; (800dab0 <update_fsm+0x3b0>)
 800da92:	223e      	movs	r2, #62	; 0x3e
 800da94:	4907      	ldr	r1, [pc, #28]	; (800dab4 <update_fsm+0x3b4>)
 800da96:	2003      	movs	r0, #3
 800da98:	f002 fbdc 	bl	8010254 <log_log>
 800da9c:	e7c6      	b.n	800da2c <update_fsm+0x32c>
 800da9e:	2300      	movs	r3, #0
 800daa0:	60e3      	str	r3, [r4, #12]
 800daa2:	e7c0      	b.n	800da26 <update_fsm+0x326>
 800daa4:	40020000 	.word	0x40020000
 800daa8:	200053d4 	.word	0x200053d4
 800daac:	08019b04 	.word	0x08019b04
 800dab0:	08019a88 	.word	0x08019a88
 800dab4:	08019ab7 	.word	0x08019ab7

0800dab8 <kalman_init>:
 800dab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daba:	ed2d 8b02 	vpush	{d8}
 800dabe:	b09b      	sub	sp, #108	; 0x6c
 800dac0:	4604      	mov	r4, r0
 800dac2:	4b38      	ldr	r3, [pc, #224]	; (800dba4 <kalman_init+0xec>)
 800dac4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 800dac8:	eeb1 8a04 	vmov.f32	s16, #20	; 0x40a00000  5.0
 800dacc:	ed80 8a1f 	vstr	s16, [r0, #124]	; 0x7c
 800dad0:	f04f 577e 	mov.w	r7, #1065353216	; 0x3f800000
 800dad4:	9716      	str	r7, [sp, #88]	; 0x58
 800dad6:	9317      	str	r3, [sp, #92]	; 0x5c
 800dad8:	2600      	movs	r6, #0
 800dada:	9618      	str	r6, [sp, #96]	; 0x60
 800dadc:	9719      	str	r7, [sp, #100]	; 0x64
 800dade:	ad16      	add	r5, sp, #88	; 0x58
 800dae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dae2:	6060      	str	r0, [r4, #4]
 800dae4:	60a1      	str	r1, [r4, #8]
 800dae6:	60e2      	str	r2, [r4, #12]
 800dae8:	6123      	str	r3, [r4, #16]
 800daea:	2202      	movs	r2, #2
 800daec:	4611      	mov	r1, r2
 800daee:	a816      	add	r0, sp, #88	; 0x58
 800daf0:	f002 fb22 	bl	8010138 <tran>
 800daf4:	ad16      	add	r5, sp, #88	; 0x58
 800daf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800daf8:	6160      	str	r0, [r4, #20]
 800dafa:	61a1      	str	r1, [r4, #24]
 800dafc:	61e2      	str	r2, [r4, #28]
 800dafe:	6223      	str	r3, [r4, #32]
 800db00:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
 800db04:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800db08:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800db0c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800db10:	ed8d 7a14 	vstr	s14, [sp, #80]	; 0x50
 800db14:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 800db18:	ee27 7a08 	vmul.f32	s14, s14, s16
 800db1c:	ed8d 7a12 	vstr	s14, [sp, #72]	; 0x48
 800db20:	ee67 7a88 	vmul.f32	s15, s15, s16
 800db24:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
 800db28:	2302      	movs	r3, #2
 800db2a:	9301      	str	r3, [sp, #4]
 800db2c:	2201      	movs	r2, #1
 800db2e:	9200      	str	r2, [sp, #0]
 800db30:	f104 0224 	add.w	r2, r4, #36	; 0x24
 800db34:	a912      	add	r1, sp, #72	; 0x48
 800db36:	a814      	add	r0, sp, #80	; 0x50
 800db38:	f002 faa4 	bl	8010084 <mul>
 800db3c:	9610      	str	r6, [sp, #64]	; 0x40
 800db3e:	9611      	str	r6, [sp, #68]	; 0x44
 800db40:	ab10      	add	r3, sp, #64	; 0x40
 800db42:	cb03      	ldmia	r3!, {r0, r1}
 800db44:	6560      	str	r0, [r4, #84]	; 0x54
 800db46:	65a1      	str	r1, [r4, #88]	; 0x58
 800db48:	960e      	str	r6, [sp, #56]	; 0x38
 800db4a:	960f      	str	r6, [sp, #60]	; 0x3c
 800db4c:	ab0e      	add	r3, sp, #56	; 0x38
 800db4e:	cb03      	ldmia	r3!, {r0, r1}
 800db50:	64e0      	str	r0, [r4, #76]	; 0x4c
 800db52:	6521      	str	r1, [r4, #80]	; 0x50
 800db54:	970c      	str	r7, [sp, #48]	; 0x30
 800db56:	960d      	str	r6, [sp, #52]	; 0x34
 800db58:	ab0c      	add	r3, sp, #48	; 0x30
 800db5a:	cb03      	ldmia	r3!, {r0, r1}
 800db5c:	6360      	str	r0, [r4, #52]	; 0x34
 800db5e:	63a1      	str	r1, [r4, #56]	; 0x38
 800db60:	ab0c      	add	r3, sp, #48	; 0x30
 800db62:	cb03      	ldmia	r3!, {r0, r1}
 800db64:	63e0      	str	r0, [r4, #60]	; 0x3c
 800db66:	6421      	str	r1, [r4, #64]	; 0x40
 800db68:	960a      	str	r6, [sp, #40]	; 0x28
 800db6a:	960b      	str	r6, [sp, #44]	; 0x2c
 800db6c:	ab0a      	add	r3, sp, #40	; 0x28
 800db6e:	cb03      	ldmia	r3!, {r0, r1}
 800db70:	6460      	str	r0, [r4, #68]	; 0x44
 800db72:	64a1      	str	r1, [r4, #72]	; 0x48
 800db74:	4e0c      	ldr	r6, [pc, #48]	; (800dba8 <kalman_init+0xf0>)
 800db76:	ad06      	add	r5, sp, #24
 800db78:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800db7c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800db80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db82:	66e0      	str	r0, [r4, #108]	; 0x6c
 800db84:	6721      	str	r1, [r4, #112]	; 0x70
 800db86:	6762      	str	r2, [r4, #116]	; 0x74
 800db88:	67a3      	str	r3, [r4, #120]	; 0x78
 800db8a:	ad02      	add	r5, sp, #8
 800db8c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800db90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db92:	65e0      	str	r0, [r4, #92]	; 0x5c
 800db94:	6621      	str	r1, [r4, #96]	; 0x60
 800db96:	6662      	str	r2, [r4, #100]	; 0x64
 800db98:	66a3      	str	r3, [r4, #104]	; 0x68
 800db9a:	b01b      	add	sp, #108	; 0x6c
 800db9c:	ecbd 8b02 	vpop	{d8}
 800dba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dba2:	bf00      	nop
 800dba4:	3c23d70a 	.word	0x3c23d70a
 800dba8:	0801929c 	.word	0x0801929c

0800dbac <kalman_predict>:
 800dbac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbae:	b087      	sub	sp, #28
 800dbb0:	4604      	mov	r4, r0
 800dbb2:	1d07      	adds	r7, r0, #4
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	9301      	str	r3, [sp, #4]
 800dbb8:	2502      	movs	r5, #2
 800dbba:	9500      	str	r5, [sp, #0]
 800dbbc:	462b      	mov	r3, r5
 800dbbe:	f100 0254 	add.w	r2, r0, #84	; 0x54
 800dbc2:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 800dbc6:	4638      	mov	r0, r7
 800dbc8:	f002 fa5c 	bl	8010084 <mul>
 800dbcc:	9501      	str	r5, [sp, #4]
 800dbce:	9500      	str	r5, [sp, #0]
 800dbd0:	462b      	mov	r3, r5
 800dbd2:	aa02      	add	r2, sp, #8
 800dbd4:	f104 0114 	add.w	r1, r4, #20
 800dbd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dbdc:	f002 fa52 	bl	8010084 <mul>
 800dbe0:	f104 066c 	add.w	r6, r4, #108	; 0x6c
 800dbe4:	9501      	str	r5, [sp, #4]
 800dbe6:	9500      	str	r5, [sp, #0]
 800dbe8:	462b      	mov	r3, r5
 800dbea:	4632      	mov	r2, r6
 800dbec:	a902      	add	r1, sp, #8
 800dbee:	4638      	mov	r0, r7
 800dbf0:	f002 fa48 	bl	8010084 <mul>
 800dbf4:	2304      	movs	r3, #4
 800dbf6:	4632      	mov	r2, r6
 800dbf8:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800dbfc:	4630      	mov	r0, r6
 800dbfe:	f002 fad7 	bl	80101b0 <add>
 800dc02:	b007      	add	sp, #28
 800dc04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800dc08 <kalman_update>:
 800dc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc0c:	b091      	sub	sp, #68	; 0x44
 800dc0e:	4605      	mov	r5, r0
 800dc10:	f100 096c 	add.w	r9, r0, #108	; 0x6c
 800dc14:	2601      	movs	r6, #1
 800dc16:	9601      	str	r6, [sp, #4]
 800dc18:	2402      	movs	r4, #2
 800dc1a:	9400      	str	r4, [sp, #0]
 800dc1c:	4623      	mov	r3, r4
 800dc1e:	aa0e      	add	r2, sp, #56	; 0x38
 800dc20:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 800dc24:	4648      	mov	r0, r9
 800dc26:	f002 fa2d 	bl	8010084 <mul>
 800dc2a:	f105 0834 	add.w	r8, r5, #52	; 0x34
 800dc2e:	9601      	str	r6, [sp, #4]
 800dc30:	9400      	str	r4, [sp, #0]
 800dc32:	4633      	mov	r3, r6
 800dc34:	aa0d      	add	r2, sp, #52	; 0x34
 800dc36:	a90e      	add	r1, sp, #56	; 0x38
 800dc38:	4640      	mov	r0, r8
 800dc3a:	f002 fa23 	bl	8010084 <mul>
 800dc3e:	edd5 7a1f 	vldr	s15, [r5, #124]	; 0x7c
 800dc42:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800dc46:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc52:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800dc56:	f105 0744 	add.w	r7, r5, #68	; 0x44
 800dc5a:	9601      	str	r6, [sp, #4]
 800dc5c:	9600      	str	r6, [sp, #0]
 800dc5e:	4623      	mov	r3, r4
 800dc60:	463a      	mov	r2, r7
 800dc62:	a90d      	add	r1, sp, #52	; 0x34
 800dc64:	a80e      	add	r0, sp, #56	; 0x38
 800dc66:	f002 fa0d 	bl	8010084 <mul>
 800dc6a:	f105 0b54 	add.w	fp, r5, #84	; 0x54
 800dc6e:	9601      	str	r6, [sp, #4]
 800dc70:	9400      	str	r4, [sp, #0]
 800dc72:	4633      	mov	r3, r6
 800dc74:	aa0c      	add	r2, sp, #48	; 0x30
 800dc76:	4659      	mov	r1, fp
 800dc78:	4640      	mov	r0, r8
 800dc7a:	f002 fa03 	bl	8010084 <mul>
 800dc7e:	f105 0a4c 	add.w	sl, r5, #76	; 0x4c
 800dc82:	edd5 7a00 	vldr	s15, [r5]
 800dc86:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
 800dc8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc8e:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
 800dc92:	9601      	str	r6, [sp, #4]
 800dc94:	9600      	str	r6, [sp, #0]
 800dc96:	4623      	mov	r3, r4
 800dc98:	aa0a      	add	r2, sp, #40	; 0x28
 800dc9a:	a90c      	add	r1, sp, #48	; 0x30
 800dc9c:	4638      	mov	r0, r7
 800dc9e:	f002 f9f1 	bl	8010084 <mul>
 800dca2:	4623      	mov	r3, r4
 800dca4:	4652      	mov	r2, sl
 800dca6:	a90a      	add	r1, sp, #40	; 0x28
 800dca8:	4658      	mov	r0, fp
 800dcaa:	f002 fa81 	bl	80101b0 <add>
 800dcae:	9401      	str	r4, [sp, #4]
 800dcb0:	9600      	str	r6, [sp, #0]
 800dcb2:	4623      	mov	r3, r4
 800dcb4:	aa06      	add	r2, sp, #24
 800dcb6:	4641      	mov	r1, r8
 800dcb8:	4638      	mov	r0, r7
 800dcba:	f002 f9e3 	bl	8010084 <mul>
 800dcbe:	4b0b      	ldr	r3, [pc, #44]	; (800dcec <kalman_update+0xe4>)
 800dcc0:	ae02      	add	r6, sp, #8
 800dcc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcc4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800dcc8:	2304      	movs	r3, #4
 800dcca:	aa06      	add	r2, sp, #24
 800dccc:	4611      	mov	r1, r2
 800dcce:	4630      	mov	r0, r6
 800dcd0:	f002 fa85 	bl	80101de <sub>
 800dcd4:	9401      	str	r4, [sp, #4]
 800dcd6:	9400      	str	r4, [sp, #0]
 800dcd8:	4623      	mov	r3, r4
 800dcda:	f105 025c 	add.w	r2, r5, #92	; 0x5c
 800dcde:	4649      	mov	r1, r9
 800dce0:	a806      	add	r0, sp, #24
 800dce2:	f002 f9cf 	bl	8010084 <mul>
 800dce6:	b011      	add	sp, #68	; 0x44
 800dce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcec:	0801929c 	.word	0x0801929c

0800dcf0 <state_transition_deepsleep_idle>:
 800dcf0:	b508      	push	{r3, lr}
 800dcf2:	2101      	movs	r1, #1
 800dcf4:	4b08      	ldr	r3, [pc, #32]	; (800dd18 <state_transition_deepsleep_idle+0x28>)
 800dcf6:	6818      	ldr	r0, [r3, #0]
 800dcf8:	f007 f9d8 	bl	80150ac <osEventFlagsSet>
 800dcfc:	4a07      	ldr	r2, [pc, #28]	; (800dd1c <state_transition_deepsleep_idle+0x2c>)
 800dcfe:	2100      	movs	r1, #0
 800dd00:	4807      	ldr	r0, [pc, #28]	; (800dd20 <state_transition_deepsleep_idle+0x30>)
 800dd02:	f007 f930 	bl	8014f66 <osThreadNew>
 800dd06:	f000 fcdb 	bl	800e6c0 <init_idle>
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800dd10:	4804      	ldr	r0, [pc, #16]	; (800dd24 <state_transition_deepsleep_idle+0x34>)
 800dd12:	f003 fa13 	bl	801113c <HAL_GPIO_WritePin>
 800dd16:	bd08      	pop	{r3, pc}
 800dd18:	200053e8 	.word	0x200053e8
 800dd1c:	08019d1c 	.word	0x08019d1c
 800dd20:	0800fc45 	.word	0x0800fc45
 800dd24:	40020800 	.word	0x40020800

0800dd28 <state_transition_idle_deepsleep>:
 800dd28:	b508      	push	{r3, lr}
 800dd2a:	2102      	movs	r1, #2
 800dd2c:	4b08      	ldr	r3, [pc, #32]	; (800dd50 <state_transition_idle_deepsleep+0x28>)
 800dd2e:	6818      	ldr	r0, [r3, #0]
 800dd30:	f007 f9bc 	bl	80150ac <osEventFlagsSet>
 800dd34:	2101      	movs	r1, #1
 800dd36:	4b07      	ldr	r3, [pc, #28]	; (800dd54 <state_transition_idle_deepsleep+0x2c>)
 800dd38:	6818      	ldr	r0, [r3, #0]
 800dd3a:	f007 f9b7 	bl	80150ac <osEventFlagsSet>
 800dd3e:	2064      	movs	r0, #100	; 0x64
 800dd40:	f007 f977 	bl	8015032 <osDelay>
 800dd44:	f000 fcd0 	bl	800e6e8 <init_deepsleep>
 800dd48:	2001      	movs	r0, #1
 800dd4a:	f7ff fc49 	bl	800d5e0 <go_to_sleep>
 800dd4e:	bd08      	pop	{r3, pc}
 800dd50:	200053e8 	.word	0x200053e8
 800dd54:	200055fc 	.word	0x200055fc

0800dd58 <state_transition_idle_ready>:
 800dd58:	b508      	push	{r3, lr}
 800dd5a:	4a0c      	ldr	r2, [pc, #48]	; (800dd8c <state_transition_idle_ready+0x34>)
 800dd5c:	2100      	movs	r1, #0
 800dd5e:	480c      	ldr	r0, [pc, #48]	; (800dd90 <state_transition_idle_ready+0x38>)
 800dd60:	f007 f901 	bl	8014f66 <osThreadNew>
 800dd64:	4a0b      	ldr	r2, [pc, #44]	; (800dd94 <state_transition_idle_ready+0x3c>)
 800dd66:	2100      	movs	r1, #0
 800dd68:	480b      	ldr	r0, [pc, #44]	; (800dd98 <state_transition_idle_ready+0x40>)
 800dd6a:	f007 f8fc 	bl	8014f66 <osThreadNew>
 800dd6e:	4b0b      	ldr	r3, [pc, #44]	; (800dd9c <state_transition_idle_ready+0x44>)
 800dd70:	7c1b      	ldrb	r3, [r3, #16]
 800dd72:	b92b      	cbnz	r3, 800dd80 <state_transition_idle_ready+0x28>
 800dd74:	2104      	movs	r1, #4
 800dd76:	4b0a      	ldr	r3, [pc, #40]	; (800dda0 <state_transition_idle_ready+0x48>)
 800dd78:	6818      	ldr	r0, [r3, #0]
 800dd7a:	f007 f997 	bl	80150ac <osEventFlagsSet>
 800dd7e:	bd08      	pop	{r3, pc}
 800dd80:	4a08      	ldr	r2, [pc, #32]	; (800dda4 <state_transition_idle_ready+0x4c>)
 800dd82:	2100      	movs	r1, #0
 800dd84:	4808      	ldr	r0, [pc, #32]	; (800dda8 <state_transition_idle_ready+0x50>)
 800dd86:	f007 f8ee 	bl	8014f66 <osThreadNew>
 800dd8a:	e7f3      	b.n	800dd74 <state_transition_idle_ready+0x1c>
 800dd8c:	08019cd4 	.word	0x08019cd4
 800dd90:	0800f8a5 	.word	0x0800f8a5
 800dd94:	08019cf8 	.word	0x08019cf8
 800dd98:	0800f9c5 	.word	0x0800f9c5
 800dd9c:	20000474 	.word	0x20000474
 800dda0:	200053e8 	.word	0x200053e8
 800dda4:	08019d40 	.word	0x08019d40
 800dda8:	0800fe0d 	.word	0x0800fe0d

0800ddac <state_transition_ready_idle>:
 800ddac:	b508      	push	{r3, lr}
 800ddae:	2201      	movs	r2, #1
 800ddb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ddb4:	480d      	ldr	r0, [pc, #52]	; (800ddec <state_transition_ready_idle+0x40>)
 800ddb6:	f003 f9c1 	bl	801113c <HAL_GPIO_WritePin>
 800ddba:	2103      	movs	r1, #3
 800ddbc:	4b0c      	ldr	r3, [pc, #48]	; (800ddf0 <state_transition_ready_idle+0x44>)
 800ddbe:	6818      	ldr	r0, [r3, #0]
 800ddc0:	f007 f974 	bl	80150ac <osEventFlagsSet>
 800ddc4:	4b0b      	ldr	r3, [pc, #44]	; (800ddf4 <state_transition_ready_idle+0x48>)
 800ddc6:	7c1b      	ldrb	r3, [r3, #16]
 800ddc8:	b953      	cbnz	r3, 800dde0 <state_transition_ready_idle+0x34>
 800ddca:	2103      	movs	r1, #3
 800ddcc:	4b0a      	ldr	r3, [pc, #40]	; (800ddf8 <state_transition_ready_idle+0x4c>)
 800ddce:	6818      	ldr	r0, [r3, #0]
 800ddd0:	f007 f96c 	bl	80150ac <osEventFlagsSet>
 800ddd4:	2105      	movs	r1, #5
 800ddd6:	4b09      	ldr	r3, [pc, #36]	; (800ddfc <state_transition_ready_idle+0x50>)
 800ddd8:	6818      	ldr	r0, [r3, #0]
 800ddda:	f007 f967 	bl	80150ac <osEventFlagsSet>
 800ddde:	bd08      	pop	{r3, pc}
 800dde0:	2101      	movs	r1, #1
 800dde2:	4b07      	ldr	r3, [pc, #28]	; (800de00 <state_transition_ready_idle+0x54>)
 800dde4:	6818      	ldr	r0, [r3, #0]
 800dde6:	f007 f961 	bl	80150ac <osEventFlagsSet>
 800ddea:	e7ee      	b.n	800ddca <state_transition_ready_idle+0x1e>
 800ddec:	40020800 	.word	0x40020800
 800ddf0:	20005610 	.word	0x20005610
 800ddf4:	20000474 	.word	0x20000474
 800ddf8:	200055f8 	.word	0x200055f8
 800ddfc:	200053e8 	.word	0x200053e8
 800de00:	20005600 	.word	0x20005600

0800de04 <state_transition_ready_ascent>:
 800de04:	b508      	push	{r3, lr}
 800de06:	480e      	ldr	r0, [pc, #56]	; (800de40 <state_transition_ready_ascent+0x3c>)
 800de08:	f000 fdda 	bl	800e9c0 <recorder_flush>
 800de0c:	2101      	movs	r1, #1
 800de0e:	4b0d      	ldr	r3, [pc, #52]	; (800de44 <state_transition_ready_ascent+0x40>)
 800de10:	6818      	ldr	r0, [r3, #0]
 800de12:	f007 f94b 	bl	80150ac <osEventFlagsSet>
 800de16:	4a0c      	ldr	r2, [pc, #48]	; (800de48 <state_transition_ready_ascent+0x44>)
 800de18:	2100      	movs	r1, #0
 800de1a:	480c      	ldr	r0, [pc, #48]	; (800de4c <state_transition_ready_ascent+0x48>)
 800de1c:	f007 f8a3 	bl	8014f66 <osThreadNew>
 800de20:	4b0b      	ldr	r3, [pc, #44]	; (800de50 <state_transition_ready_ascent+0x4c>)
 800de22:	7c5b      	ldrb	r3, [r3, #17]
 800de24:	b12b      	cbz	r3, 800de32 <state_transition_ready_ascent+0x2e>
 800de26:	2102      	movs	r1, #2
 800de28:	4b0a      	ldr	r3, [pc, #40]	; (800de54 <state_transition_ready_ascent+0x50>)
 800de2a:	6818      	ldr	r0, [r3, #0]
 800de2c:	f007 f93e 	bl	80150ac <osEventFlagsSet>
 800de30:	bd08      	pop	{r3, pc}
 800de32:	2101      	movs	r1, #1
 800de34:	4b07      	ldr	r3, [pc, #28]	; (800de54 <state_transition_ready_ascent+0x50>)
 800de36:	6818      	ldr	r0, [r3, #0]
 800de38:	f007 f938 	bl	80150ac <osEventFlagsSet>
 800de3c:	e7f8      	b.n	800de30 <state_transition_ready_ascent+0x2c>
 800de3e:	bf00      	nop
 800de40:	200053d4 	.word	0x200053d4
 800de44:	200053e8 	.word	0x200053e8
 800de48:	08019cb0 	.word	0x08019cb0
 800de4c:	0800f765 	.word	0x0800f765
 800de50:	20000474 	.word	0x20000474
 800de54:	2000560c 	.word	0x2000560c

0800de58 <state_transition_ascent_descent>:
 800de58:	b508      	push	{r3, lr}
 800de5a:	2101      	movs	r1, #1
 800de5c:	4b02      	ldr	r3, [pc, #8]	; (800de68 <state_transition_ascent_descent+0x10>)
 800de5e:	6818      	ldr	r0, [r3, #0]
 800de60:	f007 f924 	bl	80150ac <osEventFlagsSet>
 800de64:	bd08      	pop	{r3, pc}
 800de66:	bf00      	nop
 800de68:	200053e8 	.word	0x200053e8

0800de6c <state_transition_descent_deployment>:
 800de6c:	b508      	push	{r3, lr}
 800de6e:	2101      	movs	r1, #1
 800de70:	4b04      	ldr	r3, [pc, #16]	; (800de84 <state_transition_descent_deployment+0x18>)
 800de72:	6818      	ldr	r0, [r3, #0]
 800de74:	f007 f91a 	bl	80150ac <osEventFlagsSet>
 800de78:	2103      	movs	r1, #3
 800de7a:	4b03      	ldr	r3, [pc, #12]	; (800de88 <state_transition_descent_deployment+0x1c>)
 800de7c:	6818      	ldr	r0, [r3, #0]
 800de7e:	f007 f915 	bl	80150ac <osEventFlagsSet>
 800de82:	bd08      	pop	{r3, pc}
 800de84:	200053e8 	.word	0x200053e8
 800de88:	2000560c 	.word	0x2000560c

0800de8c <state_transition_deployment_recovery>:
 800de8c:	b508      	push	{r3, lr}
 800de8e:	2101      	movs	r1, #1
 800de90:	4b04      	ldr	r3, [pc, #16]	; (800dea4 <state_transition_deployment_recovery+0x18>)
 800de92:	6818      	ldr	r0, [r3, #0]
 800de94:	f007 f90a 	bl	80150ac <osEventFlagsSet>
 800de98:	2104      	movs	r1, #4
 800de9a:	4b03      	ldr	r3, [pc, #12]	; (800dea8 <state_transition_deployment_recovery+0x1c>)
 800de9c:	6818      	ldr	r0, [r3, #0]
 800de9e:	f007 f905 	bl	80150ac <osEventFlagsSet>
 800dea2:	bd08      	pop	{r3, pc}
 800dea4:	200053e8 	.word	0x200053e8
 800dea8:	2000560c 	.word	0x2000560c

0800deac <state_transition_recovery_idle>:
 800deac:	b508      	push	{r3, lr}
 800deae:	2103      	movs	r1, #3
 800deb0:	4b0b      	ldr	r3, [pc, #44]	; (800dee0 <state_transition_recovery_idle+0x34>)
 800deb2:	6818      	ldr	r0, [r3, #0]
 800deb4:	f007 f8fa 	bl	80150ac <osEventFlagsSet>
 800deb8:	4b0a      	ldr	r3, [pc, #40]	; (800dee4 <state_transition_recovery_idle+0x38>)
 800deba:	7c1b      	ldrb	r3, [r3, #16]
 800debc:	b953      	cbnz	r3, 800ded4 <state_transition_recovery_idle+0x28>
 800debe:	2103      	movs	r1, #3
 800dec0:	4b09      	ldr	r3, [pc, #36]	; (800dee8 <state_transition_recovery_idle+0x3c>)
 800dec2:	6818      	ldr	r0, [r3, #0]
 800dec4:	f007 f8f2 	bl	80150ac <osEventFlagsSet>
 800dec8:	2105      	movs	r1, #5
 800deca:	4b08      	ldr	r3, [pc, #32]	; (800deec <state_transition_recovery_idle+0x40>)
 800decc:	6818      	ldr	r0, [r3, #0]
 800dece:	f007 f8ed 	bl	80150ac <osEventFlagsSet>
 800ded2:	bd08      	pop	{r3, pc}
 800ded4:	2101      	movs	r1, #1
 800ded6:	4b06      	ldr	r3, [pc, #24]	; (800def0 <state_transition_recovery_idle+0x44>)
 800ded8:	6818      	ldr	r0, [r3, #0]
 800deda:	f007 f8e7 	bl	80150ac <osEventFlagsSet>
 800dede:	e7ee      	b.n	800debe <state_transition_recovery_idle+0x12>
 800dee0:	20005610 	.word	0x20005610
 800dee4:	20000474 	.word	0x20000474
 800dee8:	200055f8 	.word	0x200055f8
 800deec:	200053e8 	.word	0x200053e8
 800def0:	20005600 	.word	0x20005600

0800def4 <main>:
 800def4:	b508      	push	{r3, lr}
 800def6:	f000 fc83 	bl	800e800 <init>
 800defa:	e7fe      	b.n	800defa <main+0x6>

0800defc <HAL_TIM_PeriodElapsedCallback>:
 800defc:	b508      	push	{r3, lr}
 800defe:	6803      	ldr	r3, [r0, #0]
 800df00:	4a06      	ldr	r2, [pc, #24]	; (800df1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d003      	beq.n	800df0e <HAL_TIM_PeriodElapsedCallback+0x12>
 800df06:	4a06      	ldr	r2, [pc, #24]	; (800df20 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800df08:	4293      	cmp	r3, r2
 800df0a:	d003      	beq.n	800df14 <HAL_TIM_PeriodElapsedCallback+0x18>
 800df0c:	bd08      	pop	{r3, pc}
 800df0e:	f002 fa5d 	bl	80103cc <HAL_IncTick>
 800df12:	e7fb      	b.n	800df0c <HAL_TIM_PeriodElapsedCallback+0x10>
 800df14:	f009 fd0c 	bl	8017930 <CDC_Transmit_Elapsed>
 800df18:	e7f8      	b.n	800df0c <HAL_TIM_PeriodElapsedCallback+0x10>
 800df1a:	bf00      	nop
 800df1c:	40010000 	.word	0x40010000
 800df20:	40000c00 	.word	0x40000c00

0800df24 <HAL_MspInit>:
 800df24:	b500      	push	{lr}
 800df26:	b083      	sub	sp, #12
 800df28:	2200      	movs	r2, #0
 800df2a:	9200      	str	r2, [sp, #0]
 800df2c:	4b0d      	ldr	r3, [pc, #52]	; (800df64 <HAL_MspInit+0x40>)
 800df2e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800df30:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800df34:	6459      	str	r1, [r3, #68]	; 0x44
 800df36:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800df38:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800df3c:	9100      	str	r1, [sp, #0]
 800df3e:	9900      	ldr	r1, [sp, #0]
 800df40:	9201      	str	r2, [sp, #4]
 800df42:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800df44:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800df48:	6419      	str	r1, [r3, #64]	; 0x40
 800df4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df50:	9301      	str	r3, [sp, #4]
 800df52:	9b01      	ldr	r3, [sp, #4]
 800df54:	210f      	movs	r1, #15
 800df56:	f06f 0001 	mvn.w	r0, #1
 800df5a:	f002 fd35 	bl	80109c8 <HAL_NVIC_SetPriority>
 800df5e:	b003      	add	sp, #12
 800df60:	f85d fb04 	ldr.w	pc, [sp], #4
 800df64:	40023800 	.word	0x40023800

0800df68 <HAL_ADC_MspInit>:
 800df68:	b500      	push	{lr}
 800df6a:	b089      	sub	sp, #36	; 0x24
 800df6c:	2300      	movs	r3, #0
 800df6e:	9303      	str	r3, [sp, #12]
 800df70:	9304      	str	r3, [sp, #16]
 800df72:	9305      	str	r3, [sp, #20]
 800df74:	9306      	str	r3, [sp, #24]
 800df76:	9307      	str	r3, [sp, #28]
 800df78:	6802      	ldr	r2, [r0, #0]
 800df7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800df7e:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800df82:	429a      	cmp	r2, r3
 800df84:	d002      	beq.n	800df8c <HAL_ADC_MspInit+0x24>
 800df86:	b009      	add	sp, #36	; 0x24
 800df88:	f85d fb04 	ldr.w	pc, [sp], #4
 800df8c:	2200      	movs	r2, #0
 800df8e:	9201      	str	r2, [sp, #4]
 800df90:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800df94:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800df96:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800df9a:	6459      	str	r1, [r3, #68]	; 0x44
 800df9c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800df9e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800dfa2:	9101      	str	r1, [sp, #4]
 800dfa4:	9901      	ldr	r1, [sp, #4]
 800dfa6:	9202      	str	r2, [sp, #8]
 800dfa8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800dfaa:	f041 0101 	orr.w	r1, r1, #1
 800dfae:	6319      	str	r1, [r3, #48]	; 0x30
 800dfb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfb2:	f003 0301 	and.w	r3, r3, #1
 800dfb6:	9302      	str	r3, [sp, #8]
 800dfb8:	9b02      	ldr	r3, [sp, #8]
 800dfba:	2303      	movs	r3, #3
 800dfbc:	9303      	str	r3, [sp, #12]
 800dfbe:	9304      	str	r3, [sp, #16]
 800dfc0:	9205      	str	r2, [sp, #20]
 800dfc2:	a903      	add	r1, sp, #12
 800dfc4:	4801      	ldr	r0, [pc, #4]	; (800dfcc <HAL_ADC_MspInit+0x64>)
 800dfc6:	f002 ff39 	bl	8010e3c <HAL_GPIO_Init>
 800dfca:	e7dc      	b.n	800df86 <HAL_ADC_MspInit+0x1e>
 800dfcc:	40020000 	.word	0x40020000

0800dfd0 <HAL_ADC_MspDeInit>:
 800dfd0:	b508      	push	{r3, lr}
 800dfd2:	6802      	ldr	r2, [r0, #0]
 800dfd4:	4b06      	ldr	r3, [pc, #24]	; (800dff0 <HAL_ADC_MspDeInit+0x20>)
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d000      	beq.n	800dfdc <HAL_ADC_MspDeInit+0xc>
 800dfda:	bd08      	pop	{r3, pc}
 800dfdc:	4a05      	ldr	r2, [pc, #20]	; (800dff4 <HAL_ADC_MspDeInit+0x24>)
 800dfde:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800dfe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dfe4:	6453      	str	r3, [r2, #68]	; 0x44
 800dfe6:	2103      	movs	r1, #3
 800dfe8:	4803      	ldr	r0, [pc, #12]	; (800dff8 <HAL_ADC_MspDeInit+0x28>)
 800dfea:	f003 f811 	bl	8011010 <HAL_GPIO_DeInit>
 800dfee:	e7f4      	b.n	800dfda <HAL_ADC_MspDeInit+0xa>
 800dff0:	40012000 	.word	0x40012000
 800dff4:	40023800 	.word	0x40023800
 800dff8:	40020000 	.word	0x40020000

0800dffc <HAL_SPI_MspInit>:
 800dffc:	b500      	push	{lr}
 800dffe:	b08b      	sub	sp, #44	; 0x2c
 800e000:	2300      	movs	r3, #0
 800e002:	9305      	str	r3, [sp, #20]
 800e004:	9306      	str	r3, [sp, #24]
 800e006:	9307      	str	r3, [sp, #28]
 800e008:	9308      	str	r3, [sp, #32]
 800e00a:	9309      	str	r3, [sp, #36]	; 0x24
 800e00c:	6803      	ldr	r3, [r0, #0]
 800e00e:	4a29      	ldr	r2, [pc, #164]	; (800e0b4 <HAL_SPI_MspInit+0xb8>)
 800e010:	4293      	cmp	r3, r2
 800e012:	d005      	beq.n	800e020 <HAL_SPI_MspInit+0x24>
 800e014:	4a28      	ldr	r2, [pc, #160]	; (800e0b8 <HAL_SPI_MspInit+0xbc>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d026      	beq.n	800e068 <HAL_SPI_MspInit+0x6c>
 800e01a:	b00b      	add	sp, #44	; 0x2c
 800e01c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e020:	2200      	movs	r2, #0
 800e022:	9201      	str	r2, [sp, #4]
 800e024:	4b25      	ldr	r3, [pc, #148]	; (800e0bc <HAL_SPI_MspInit+0xc0>)
 800e026:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800e028:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800e02c:	6459      	str	r1, [r3, #68]	; 0x44
 800e02e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800e030:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 800e034:	9101      	str	r1, [sp, #4]
 800e036:	9901      	ldr	r1, [sp, #4]
 800e038:	9202      	str	r2, [sp, #8]
 800e03a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e03c:	f041 0101 	orr.w	r1, r1, #1
 800e040:	6319      	str	r1, [r3, #48]	; 0x30
 800e042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e044:	f003 0301 	and.w	r3, r3, #1
 800e048:	9302      	str	r3, [sp, #8]
 800e04a:	9b02      	ldr	r3, [sp, #8]
 800e04c:	23e0      	movs	r3, #224	; 0xe0
 800e04e:	9305      	str	r3, [sp, #20]
 800e050:	2302      	movs	r3, #2
 800e052:	9306      	str	r3, [sp, #24]
 800e054:	9207      	str	r2, [sp, #28]
 800e056:	2303      	movs	r3, #3
 800e058:	9308      	str	r3, [sp, #32]
 800e05a:	2305      	movs	r3, #5
 800e05c:	9309      	str	r3, [sp, #36]	; 0x24
 800e05e:	a905      	add	r1, sp, #20
 800e060:	4817      	ldr	r0, [pc, #92]	; (800e0c0 <HAL_SPI_MspInit+0xc4>)
 800e062:	f002 feeb 	bl	8010e3c <HAL_GPIO_Init>
 800e066:	e7d8      	b.n	800e01a <HAL_SPI_MspInit+0x1e>
 800e068:	2200      	movs	r2, #0
 800e06a:	9203      	str	r2, [sp, #12]
 800e06c:	4b13      	ldr	r3, [pc, #76]	; (800e0bc <HAL_SPI_MspInit+0xc0>)
 800e06e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800e070:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800e074:	6419      	str	r1, [r3, #64]	; 0x40
 800e076:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800e078:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800e07c:	9103      	str	r1, [sp, #12]
 800e07e:	9903      	ldr	r1, [sp, #12]
 800e080:	9204      	str	r2, [sp, #16]
 800e082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e084:	f041 0102 	orr.w	r1, r1, #2
 800e088:	6319      	str	r1, [r3, #48]	; 0x30
 800e08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e08c:	f003 0302 	and.w	r3, r3, #2
 800e090:	9304      	str	r3, [sp, #16]
 800e092:	9b04      	ldr	r3, [sp, #16]
 800e094:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800e098:	9305      	str	r3, [sp, #20]
 800e09a:	2302      	movs	r3, #2
 800e09c:	9306      	str	r3, [sp, #24]
 800e09e:	9207      	str	r2, [sp, #28]
 800e0a0:	2303      	movs	r3, #3
 800e0a2:	9308      	str	r3, [sp, #32]
 800e0a4:	2305      	movs	r3, #5
 800e0a6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0a8:	a905      	add	r1, sp, #20
 800e0aa:	4806      	ldr	r0, [pc, #24]	; (800e0c4 <HAL_SPI_MspInit+0xc8>)
 800e0ac:	f002 fec6 	bl	8010e3c <HAL_GPIO_Init>
 800e0b0:	e7b3      	b.n	800e01a <HAL_SPI_MspInit+0x1e>
 800e0b2:	bf00      	nop
 800e0b4:	40013000 	.word	0x40013000
 800e0b8:	40003800 	.word	0x40003800
 800e0bc:	40023800 	.word	0x40023800
 800e0c0:	40020000 	.word	0x40020000
 800e0c4:	40020400 	.word	0x40020400

0800e0c8 <HAL_SPI_MspDeInit>:
 800e0c8:	b508      	push	{r3, lr}
 800e0ca:	6803      	ldr	r3, [r0, #0]
 800e0cc:	4a0e      	ldr	r2, [pc, #56]	; (800e108 <HAL_SPI_MspDeInit+0x40>)
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d003      	beq.n	800e0da <HAL_SPI_MspDeInit+0x12>
 800e0d2:	4a0e      	ldr	r2, [pc, #56]	; (800e10c <HAL_SPI_MspDeInit+0x44>)
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	d00b      	beq.n	800e0f0 <HAL_SPI_MspDeInit+0x28>
 800e0d8:	bd08      	pop	{r3, pc}
 800e0da:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 800e0de:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e0e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0e4:	6453      	str	r3, [r2, #68]	; 0x44
 800e0e6:	21e0      	movs	r1, #224	; 0xe0
 800e0e8:	4809      	ldr	r0, [pc, #36]	; (800e110 <HAL_SPI_MspDeInit+0x48>)
 800e0ea:	f002 ff91 	bl	8011010 <HAL_GPIO_DeInit>
 800e0ee:	e7f3      	b.n	800e0d8 <HAL_SPI_MspDeInit+0x10>
 800e0f0:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 800e0f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e0f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e0fa:	6413      	str	r3, [r2, #64]	; 0x40
 800e0fc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800e100:	4804      	ldr	r0, [pc, #16]	; (800e114 <HAL_SPI_MspDeInit+0x4c>)
 800e102:	f002 ff85 	bl	8011010 <HAL_GPIO_DeInit>
 800e106:	e7e7      	b.n	800e0d8 <HAL_SPI_MspDeInit+0x10>
 800e108:	40013000 	.word	0x40013000
 800e10c:	40003800 	.word	0x40003800
 800e110:	40020000 	.word	0x40020000
 800e114:	40020400 	.word	0x40020400

0800e118 <HAL_TIM_PWM_MspInit>:
 800e118:	6802      	ldr	r2, [r0, #0]
 800e11a:	4b09      	ldr	r3, [pc, #36]	; (800e140 <HAL_TIM_PWM_MspInit+0x28>)
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d000      	beq.n	800e122 <HAL_TIM_PWM_MspInit+0xa>
 800e120:	4770      	bx	lr
 800e122:	b082      	sub	sp, #8
 800e124:	2300      	movs	r3, #0
 800e126:	9301      	str	r3, [sp, #4]
 800e128:	4b06      	ldr	r3, [pc, #24]	; (800e144 <HAL_TIM_PWM_MspInit+0x2c>)
 800e12a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e12c:	f042 0204 	orr.w	r2, r2, #4
 800e130:	641a      	str	r2, [r3, #64]	; 0x40
 800e132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e134:	f003 0304 	and.w	r3, r3, #4
 800e138:	9301      	str	r3, [sp, #4]
 800e13a:	9b01      	ldr	r3, [sp, #4]
 800e13c:	b002      	add	sp, #8
 800e13e:	4770      	bx	lr
 800e140:	40000800 	.word	0x40000800
 800e144:	40023800 	.word	0x40023800

0800e148 <HAL_TIM_MspPostInit>:
 800e148:	b500      	push	{lr}
 800e14a:	b087      	sub	sp, #28
 800e14c:	2300      	movs	r3, #0
 800e14e:	9301      	str	r3, [sp, #4]
 800e150:	9302      	str	r3, [sp, #8]
 800e152:	9303      	str	r3, [sp, #12]
 800e154:	9304      	str	r3, [sp, #16]
 800e156:	9305      	str	r3, [sp, #20]
 800e158:	6802      	ldr	r2, [r0, #0]
 800e15a:	4b0f      	ldr	r3, [pc, #60]	; (800e198 <HAL_TIM_MspPostInit+0x50>)
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d002      	beq.n	800e166 <HAL_TIM_MspPostInit+0x1e>
 800e160:	b007      	add	sp, #28
 800e162:	f85d fb04 	ldr.w	pc, [sp], #4
 800e166:	2300      	movs	r3, #0
 800e168:	9300      	str	r3, [sp, #0]
 800e16a:	4a0c      	ldr	r2, [pc, #48]	; (800e19c <HAL_TIM_MspPostInit+0x54>)
 800e16c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800e16e:	f041 0102 	orr.w	r1, r1, #2
 800e172:	6311      	str	r1, [r2, #48]	; 0x30
 800e174:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e176:	f002 0202 	and.w	r2, r2, #2
 800e17a:	9200      	str	r2, [sp, #0]
 800e17c:	9a00      	ldr	r2, [sp, #0]
 800e17e:	2240      	movs	r2, #64	; 0x40
 800e180:	9201      	str	r2, [sp, #4]
 800e182:	2202      	movs	r2, #2
 800e184:	9202      	str	r2, [sp, #8]
 800e186:	9303      	str	r3, [sp, #12]
 800e188:	9304      	str	r3, [sp, #16]
 800e18a:	9205      	str	r2, [sp, #20]
 800e18c:	a901      	add	r1, sp, #4
 800e18e:	4804      	ldr	r0, [pc, #16]	; (800e1a0 <HAL_TIM_MspPostInit+0x58>)
 800e190:	f002 fe54 	bl	8010e3c <HAL_GPIO_Init>
 800e194:	e7e4      	b.n	800e160 <HAL_TIM_MspPostInit+0x18>
 800e196:	bf00      	nop
 800e198:	40000800 	.word	0x40000800
 800e19c:	40023800 	.word	0x40023800
 800e1a0:	40020400 	.word	0x40020400

0800e1a4 <HAL_TIM_PWM_MspDeInit>:
 800e1a4:	6802      	ldr	r2, [r0, #0]
 800e1a6:	4b05      	ldr	r3, [pc, #20]	; (800e1bc <HAL_TIM_PWM_MspDeInit+0x18>)
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d000      	beq.n	800e1ae <HAL_TIM_PWM_MspDeInit+0xa>
 800e1ac:	4770      	bx	lr
 800e1ae:	4a04      	ldr	r2, [pc, #16]	; (800e1c0 <HAL_TIM_PWM_MspDeInit+0x1c>)
 800e1b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e1b2:	f023 0304 	bic.w	r3, r3, #4
 800e1b6:	6413      	str	r3, [r2, #64]	; 0x40
 800e1b8:	e7f8      	b.n	800e1ac <HAL_TIM_PWM_MspDeInit+0x8>
 800e1ba:	bf00      	nop
 800e1bc:	40000800 	.word	0x40000800
 800e1c0:	40023800 	.word	0x40023800

0800e1c4 <HAL_UART_MspInit>:
 800e1c4:	b500      	push	{lr}
 800e1c6:	b089      	sub	sp, #36	; 0x24
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	9303      	str	r3, [sp, #12]
 800e1cc:	9304      	str	r3, [sp, #16]
 800e1ce:	9305      	str	r3, [sp, #20]
 800e1d0:	9306      	str	r3, [sp, #24]
 800e1d2:	9307      	str	r3, [sp, #28]
 800e1d4:	6802      	ldr	r2, [r0, #0]
 800e1d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e1da:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d002      	beq.n	800e1e8 <HAL_UART_MspInit+0x24>
 800e1e2:	b009      	add	sp, #36	; 0x24
 800e1e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	9201      	str	r2, [sp, #4]
 800e1ec:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800e1f0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800e1f2:	f041 0110 	orr.w	r1, r1, #16
 800e1f6:	6459      	str	r1, [r3, #68]	; 0x44
 800e1f8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800e1fa:	f001 0110 	and.w	r1, r1, #16
 800e1fe:	9101      	str	r1, [sp, #4]
 800e200:	9901      	ldr	r1, [sp, #4]
 800e202:	9202      	str	r2, [sp, #8]
 800e204:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e206:	f041 0101 	orr.w	r1, r1, #1
 800e20a:	6319      	str	r1, [r3, #48]	; 0x30
 800e20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e20e:	f003 0301 	and.w	r3, r3, #1
 800e212:	9302      	str	r3, [sp, #8]
 800e214:	9b02      	ldr	r3, [sp, #8]
 800e216:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e21a:	9303      	str	r3, [sp, #12]
 800e21c:	2302      	movs	r3, #2
 800e21e:	9304      	str	r3, [sp, #16]
 800e220:	9205      	str	r2, [sp, #20]
 800e222:	2303      	movs	r3, #3
 800e224:	9306      	str	r3, [sp, #24]
 800e226:	2307      	movs	r3, #7
 800e228:	9307      	str	r3, [sp, #28]
 800e22a:	a903      	add	r1, sp, #12
 800e22c:	4801      	ldr	r0, [pc, #4]	; (800e234 <HAL_UART_MspInit+0x70>)
 800e22e:	f002 fe05 	bl	8010e3c <HAL_GPIO_Init>
 800e232:	e7d6      	b.n	800e1e2 <HAL_UART_MspInit+0x1e>
 800e234:	40020000 	.word	0x40020000

0800e238 <HAL_UART_MspDeInit>:
 800e238:	b508      	push	{r3, lr}
 800e23a:	6802      	ldr	r2, [r0, #0]
 800e23c:	4b07      	ldr	r3, [pc, #28]	; (800e25c <HAL_UART_MspDeInit+0x24>)
 800e23e:	429a      	cmp	r2, r3
 800e240:	d000      	beq.n	800e244 <HAL_UART_MspDeInit+0xc>
 800e242:	bd08      	pop	{r3, pc}
 800e244:	4a06      	ldr	r2, [pc, #24]	; (800e260 <HAL_UART_MspDeInit+0x28>)
 800e246:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e248:	f023 0310 	bic.w	r3, r3, #16
 800e24c:	6453      	str	r3, [r2, #68]	; 0x44
 800e24e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e252:	4804      	ldr	r0, [pc, #16]	; (800e264 <HAL_UART_MspDeInit+0x2c>)
 800e254:	f002 fedc 	bl	8011010 <HAL_GPIO_DeInit>
 800e258:	e7f3      	b.n	800e242 <HAL_UART_MspDeInit+0xa>
 800e25a:	bf00      	nop
 800e25c:	40011000 	.word	0x40011000
 800e260:	40023800 	.word	0x40023800
 800e264:	40020000 	.word	0x40020000

0800e268 <HAL_InitTick>:
 800e268:	b510      	push	{r4, lr}
 800e26a:	b088      	sub	sp, #32
 800e26c:	4601      	mov	r1, r0
 800e26e:	2200      	movs	r2, #0
 800e270:	2019      	movs	r0, #25
 800e272:	f002 fba9 	bl	80109c8 <HAL_NVIC_SetPriority>
 800e276:	2019      	movs	r0, #25
 800e278:	f002 fbd8 	bl	8010a2c <HAL_NVIC_EnableIRQ>
 800e27c:	2400      	movs	r4, #0
 800e27e:	9401      	str	r4, [sp, #4]
 800e280:	4b14      	ldr	r3, [pc, #80]	; (800e2d4 <HAL_InitTick+0x6c>)
 800e282:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e284:	f042 0201 	orr.w	r2, r2, #1
 800e288:	645a      	str	r2, [r3, #68]	; 0x44
 800e28a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e28c:	f003 0301 	and.w	r3, r3, #1
 800e290:	9301      	str	r3, [sp, #4]
 800e292:	9b01      	ldr	r3, [sp, #4]
 800e294:	a902      	add	r1, sp, #8
 800e296:	a803      	add	r0, sp, #12
 800e298:	f004 f864 	bl	8012364 <HAL_RCC_GetClockConfig>
 800e29c:	f004 f852 	bl	8012344 <HAL_RCC_GetPCLK2Freq>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	480d      	ldr	r0, [pc, #52]	; (800e2d8 <HAL_InitTick+0x70>)
 800e2a4:	4a0d      	ldr	r2, [pc, #52]	; (800e2dc <HAL_InitTick+0x74>)
 800e2a6:	6002      	str	r2, [r0, #0]
 800e2a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e2ac:	60c2      	str	r2, [r0, #12]
 800e2ae:	4a0c      	ldr	r2, [pc, #48]	; (800e2e0 <HAL_InitTick+0x78>)
 800e2b0:	fba2 2303 	umull	r2, r3, r2, r3
 800e2b4:	0c9b      	lsrs	r3, r3, #18
 800e2b6:	3b01      	subs	r3, #1
 800e2b8:	6043      	str	r3, [r0, #4]
 800e2ba:	6104      	str	r4, [r0, #16]
 800e2bc:	6084      	str	r4, [r0, #8]
 800e2be:	f004 fe9f 	bl	8013000 <HAL_TIM_Base_Init>
 800e2c2:	b110      	cbz	r0, 800e2ca <HAL_InitTick+0x62>
 800e2c4:	2001      	movs	r0, #1
 800e2c6:	b008      	add	sp, #32
 800e2c8:	bd10      	pop	{r4, pc}
 800e2ca:	4803      	ldr	r0, [pc, #12]	; (800e2d8 <HAL_InitTick+0x70>)
 800e2cc:	f004 fd08 	bl	8012ce0 <HAL_TIM_Base_Start_IT>
 800e2d0:	e7f9      	b.n	800e2c6 <HAL_InitTick+0x5e>
 800e2d2:	bf00      	nop
 800e2d4:	40023800 	.word	0x40023800
 800e2d8:	2000562c 	.word	0x2000562c
 800e2dc:	40010000 	.word	0x40010000
 800e2e0:	431bde83 	.word	0x431bde83

0800e2e4 <HAL_SuspendTick>:
 800e2e4:	4b03      	ldr	r3, [pc, #12]	; (800e2f4 <HAL_SuspendTick+0x10>)
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	68d3      	ldr	r3, [r2, #12]
 800e2ea:	f023 0301 	bic.w	r3, r3, #1
 800e2ee:	60d3      	str	r3, [r2, #12]
 800e2f0:	4770      	bx	lr
 800e2f2:	bf00      	nop
 800e2f4:	2000562c 	.word	0x2000562c

0800e2f8 <HAL_ResumeTick>:
 800e2f8:	4b03      	ldr	r3, [pc, #12]	; (800e308 <HAL_ResumeTick+0x10>)
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	68d3      	ldr	r3, [r2, #12]
 800e2fe:	f043 0301 	orr.w	r3, r3, #1
 800e302:	60d3      	str	r3, [r2, #12]
 800e304:	4770      	bx	lr
 800e306:	bf00      	nop
 800e308:	2000562c 	.word	0x2000562c

0800e30c <NMI_Handler>:
 800e30c:	e7fe      	b.n	800e30c <NMI_Handler>

0800e30e <HardFault_Handler>:
 800e30e:	e7fe      	b.n	800e30e <HardFault_Handler>

0800e310 <MemManage_Handler>:
 800e310:	e7fe      	b.n	800e310 <MemManage_Handler>

0800e312 <BusFault_Handler>:
 800e312:	e7fe      	b.n	800e312 <BusFault_Handler>

0800e314 <UsageFault_Handler>:
 800e314:	e7fe      	b.n	800e314 <UsageFault_Handler>

0800e316 <DebugMon_Handler>:
 800e316:	4770      	bx	lr

0800e318 <EXTI2_IRQHandler>:
 800e318:	b508      	push	{r3, lr}
 800e31a:	2004      	movs	r0, #4
 800e31c:	f002 ff14 	bl	8011148 <HAL_GPIO_EXTI_IRQHandler>
 800e320:	bd08      	pop	{r3, pc}
	...

0800e324 <TIM1_UP_TIM10_IRQHandler>:
 800e324:	b508      	push	{r3, lr}
 800e326:	4802      	ldr	r0, [pc, #8]	; (800e330 <TIM1_UP_TIM10_IRQHandler+0xc>)
 800e328:	f004 fd49 	bl	8012dbe <HAL_TIM_IRQHandler>
 800e32c:	bd08      	pop	{r3, pc}
 800e32e:	bf00      	nop
 800e330:	2000562c 	.word	0x2000562c

0800e334 <EXTI15_10_IRQHandler>:
 800e334:	b508      	push	{r3, lr}
 800e336:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800e33a:	f002 ff05 	bl	8011148 <HAL_GPIO_EXTI_IRQHandler>
 800e33e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e342:	f002 ff01 	bl	8011148 <HAL_GPIO_EXTI_IRQHandler>
 800e346:	bd08      	pop	{r3, pc}

0800e348 <OTG_FS_IRQHandler>:
 800e348:	b508      	push	{r3, lr}
 800e34a:	4802      	ldr	r0, [pc, #8]	; (800e354 <OTG_FS_IRQHandler+0xc>)
 800e34c:	f002 fffa 	bl	8011344 <HAL_PCD_IRQHandler>
 800e350:	bd08      	pop	{r3, pc}
 800e352:	bf00      	nop
 800e354:	200088dc 	.word	0x200088dc

0800e358 <_sbrk>:
 800e358:	b508      	push	{r3, lr}
 800e35a:	4603      	mov	r3, r0
 800e35c:	4a0c      	ldr	r2, [pc, #48]	; (800e390 <_sbrk+0x38>)
 800e35e:	6812      	ldr	r2, [r2, #0]
 800e360:	b152      	cbz	r2, 800e378 <_sbrk+0x20>
 800e362:	4a0b      	ldr	r2, [pc, #44]	; (800e390 <_sbrk+0x38>)
 800e364:	6810      	ldr	r0, [r2, #0]
 800e366:	4403      	add	r3, r0
 800e368:	4a0a      	ldr	r2, [pc, #40]	; (800e394 <_sbrk+0x3c>)
 800e36a:	490b      	ldr	r1, [pc, #44]	; (800e398 <_sbrk+0x40>)
 800e36c:	1a52      	subs	r2, r2, r1
 800e36e:	4293      	cmp	r3, r2
 800e370:	d806      	bhi.n	800e380 <_sbrk+0x28>
 800e372:	4a07      	ldr	r2, [pc, #28]	; (800e390 <_sbrk+0x38>)
 800e374:	6013      	str	r3, [r2, #0]
 800e376:	bd08      	pop	{r3, pc}
 800e378:	4a05      	ldr	r2, [pc, #20]	; (800e390 <_sbrk+0x38>)
 800e37a:	4908      	ldr	r1, [pc, #32]	; (800e39c <_sbrk+0x44>)
 800e37c:	6011      	str	r1, [r2, #0]
 800e37e:	e7f0      	b.n	800e362 <_sbrk+0xa>
 800e380:	f009 fcea 	bl	8017d58 <__errno>
 800e384:	230c      	movs	r3, #12
 800e386:	6003      	str	r3, [r0, #0]
 800e388:	f04f 30ff 	mov.w	r0, #4294967295
 800e38c:	e7f3      	b.n	800e376 <_sbrk+0x1e>
 800e38e:	bf00      	nop
 800e390:	2000049c 	.word	0x2000049c
 800e394:	20020000 	.word	0x20020000
 800e398:	00000400 	.word	0x00000400
 800e39c:	20008cf8 	.word	0x20008cf8

0800e3a0 <SystemInit>:
 800e3a0:	4a03      	ldr	r2, [pc, #12]	; (800e3b0 <SystemInit+0x10>)
 800e3a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800e3a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e3aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800e3ae:	4770      	bx	lr
 800e3b0:	e000ed00 	.word	0xe000ed00

0800e3b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3b8:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e3ba:	2400      	movs	r4, #0
 800e3bc:	9405      	str	r4, [sp, #20]
 800e3be:	9406      	str	r4, [sp, #24]
 800e3c0:	9407      	str	r4, [sp, #28]
 800e3c2:	9408      	str	r4, [sp, #32]
 800e3c4:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e3c6:	9401      	str	r4, [sp, #4]
 800e3c8:	4b49      	ldr	r3, [pc, #292]	; (800e4f0 <MX_GPIO_Init+0x13c>)
 800e3ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3cc:	f042 0204 	orr.w	r2, r2, #4
 800e3d0:	631a      	str	r2, [r3, #48]	; 0x30
 800e3d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3d4:	f002 0204 	and.w	r2, r2, #4
 800e3d8:	9201      	str	r2, [sp, #4]
 800e3da:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e3dc:	9402      	str	r4, [sp, #8]
 800e3de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e3e4:	631a      	str	r2, [r3, #48]	; 0x30
 800e3e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3e8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800e3ec:	9202      	str	r2, [sp, #8]
 800e3ee:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e3f0:	9403      	str	r4, [sp, #12]
 800e3f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3f4:	f042 0201 	orr.w	r2, r2, #1
 800e3f8:	631a      	str	r2, [r3, #48]	; 0x30
 800e3fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3fc:	f002 0201 	and.w	r2, r2, #1
 800e400:	9203      	str	r2, [sp, #12]
 800e402:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e404:	9404      	str	r4, [sp, #16]
 800e406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e408:	f042 0202 	orr.w	r2, r2, #2
 800e40c:	631a      	str	r2, [r3, #48]	; 0x30
 800e40e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e410:	f003 0302 	and.w	r3, r3, #2
 800e414:	9304      	str	r3, [sp, #16]
 800e416:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800e418:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800e4fc <MX_GPIO_Init+0x148>
 800e41c:	4622      	mov	r2, r4
 800e41e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e422:	4640      	mov	r0, r8
 800e424:	f002 fe8a 	bl	801113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TC_CS_Pin|R_CS_Pin, GPIO_PIN_RESET);
 800e428:	4d32      	ldr	r5, [pc, #200]	; (800e4f4 <MX_GPIO_Init+0x140>)
 800e42a:	4622      	mov	r2, r4
 800e42c:	2118      	movs	r1, #24
 800e42e:	4628      	mov	r0, r5
 800e430:	f002 fe84 	bl	801113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BARO_CS_Pin|IMU_CS_Pin|DCDC_EN_Pin|CUT_EN_Pin
 800e434:	4e30      	ldr	r6, [pc, #192]	; (800e4f8 <MX_GPIO_Init+0x144>)
 800e436:	4622      	mov	r2, r4
 800e438:	f240 31b6 	movw	r1, #950	; 0x3b6
 800e43c:	4630      	mov	r0, r6
 800e43e:	f002 fe7d 	bl	801113c <HAL_GPIO_WritePin>
                          |P_EN_LIGHT_Pin|P_EN_CUT_Pin|P_EN_RADIO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800e442:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e446:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e448:	2701      	movs	r7, #1
 800e44a:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e44c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e44e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800e450:	a905      	add	r1, sp, #20
 800e452:	4640      	mov	r0, r8
 800e454:	f002 fcf2 	bl	8010e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800e458:	2304      	movs	r3, #4
 800e45a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e45c:	f44f 1888 	mov.w	r8, #1114112	; 0x110000
 800e460:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e464:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800e466:	a905      	add	r1, sp, #20
 800e468:	4628      	mov	r0, r5
 800e46a:	f002 fce7 	bl	8010e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_CS_Pin R_CS_Pin */
  GPIO_InitStruct.Pin = TC_CS_Pin|R_CS_Pin;
 800e46e:	2318      	movs	r3, #24
 800e470:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e472:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e474:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e476:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e478:	a905      	add	r1, sp, #20
 800e47a:	4628      	mov	r0, r5
 800e47c:	f002 fcde 	bl	8010e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_INT_Pin */
  GPIO_InitStruct.Pin = RF_INT_Pin;
 800e480:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e482:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e484:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(RF_INT_GPIO_Port, &GPIO_InitStruct);
 800e486:	a905      	add	r1, sp, #20
 800e488:	4630      	mov	r0, r6
 800e48a:	f002 fcd7 	bl	8010e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : BARO_CS_Pin IMU_CS_Pin DCDC_EN_Pin CUT_EN_Pin
                           P_EN_LIGHT_Pin P_EN_CUT_Pin P_EN_RADIO_Pin */
  GPIO_InitStruct.Pin = BARO_CS_Pin|IMU_CS_Pin|DCDC_EN_Pin|CUT_EN_Pin
 800e48e:	f240 33b6 	movw	r3, #950	; 0x3b6
 800e492:	9305      	str	r3, [sp, #20]
                          |P_EN_LIGHT_Pin|P_EN_CUT_Pin|P_EN_RADIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e494:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e496:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e498:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e49a:	a905      	add	r1, sp, #20
 800e49c:	4630      	mov	r0, r6
 800e49e:	f002 fccd 	bl	8010e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|IMU_INT1_Pin;
 800e4a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e4a6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e4a8:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4ac:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e4ae:	a905      	add	r1, sp, #20
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	f002 fcc3 	bl	8010e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DET_Pin CHRG_Pin */
  GPIO_InitStruct.Pin = USB_DET_Pin|CHRG_Pin;
 800e4b6:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800e4ba:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e4bc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4be:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e4c0:	a905      	add	r1, sp, #20
 800e4c2:	4628      	mov	r0, r5
 800e4c4:	f002 fcba 	bl	8010e3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800e4c8:	4622      	mov	r2, r4
 800e4ca:	2105      	movs	r1, #5
 800e4cc:	2008      	movs	r0, #8
 800e4ce:	f002 fa7b 	bl	80109c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800e4d2:	2008      	movs	r0, #8
 800e4d4:	f002 faaa 	bl	8010a2c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800e4d8:	4622      	mov	r2, r4
 800e4da:	2105      	movs	r1, #5
 800e4dc:	2028      	movs	r0, #40	; 0x28
 800e4de:	f002 fa73 	bl	80109c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800e4e2:	2028      	movs	r0, #40	; 0x28
 800e4e4:	f002 faa2 	bl	8010a2c <HAL_NVIC_EnableIRQ>
}
 800e4e8:	b00a      	add	sp, #40	; 0x28
 800e4ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4ee:	bf00      	nop
 800e4f0:	40023800 	.word	0x40023800
 800e4f4:	40020000 	.word	0x40020000
 800e4f8:	40020400 	.word	0x40020400
 800e4fc:	40020800 	.word	0x40020800

0800e500 <MX_ADC1_Init>:
{
 800e500:	b500      	push	{lr}
 800e502:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800e504:	2300      	movs	r3, #0
 800e506:	9300      	str	r3, [sp, #0]
 800e508:	9301      	str	r3, [sp, #4]
 800e50a:	9302      	str	r3, [sp, #8]
 800e50c:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 800e50e:	481b      	ldr	r0, [pc, #108]	; (800e57c <MX_ADC1_Init+0x7c>)
 800e510:	4a1b      	ldr	r2, [pc, #108]	; (800e580 <MX_ADC1_Init+0x80>)
 800e512:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800e514:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800e516:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800e518:	2201      	movs	r2, #1
 800e51a:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800e51c:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e51e:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e522:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e524:	4917      	ldr	r1, [pc, #92]	; (800e584 <MX_ADC1_Init+0x84>)
 800e526:	6281      	str	r1, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e528:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 2;
 800e52a:	2102      	movs	r1, #2
 800e52c:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800e52e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e532:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e534:	f001 ff7e 	bl	8010434 <HAL_ADC_Init>
 800e538:	b9b0      	cbnz	r0, 800e568 <MX_ADC1_Init+0x68>
  sConfig.Channel = ADC_CHANNEL_0;
 800e53a:	2300      	movs	r3, #0
 800e53c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 800e53e:	2301      	movs	r3, #1
 800e540:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800e542:	2303      	movs	r3, #3
 800e544:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e546:	4669      	mov	r1, sp
 800e548:	480c      	ldr	r0, [pc, #48]	; (800e57c <MX_ADC1_Init+0x7c>)
 800e54a:	f002 f957 	bl	80107fc <HAL_ADC_ConfigChannel>
 800e54e:	b970      	cbnz	r0, 800e56e <MX_ADC1_Init+0x6e>
  sConfig.Channel = ADC_CHANNEL_1;
 800e550:	2301      	movs	r3, #1
 800e552:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 800e554:	2302      	movs	r3, #2
 800e556:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e558:	4669      	mov	r1, sp
 800e55a:	4808      	ldr	r0, [pc, #32]	; (800e57c <MX_ADC1_Init+0x7c>)
 800e55c:	f002 f94e 	bl	80107fc <HAL_ADC_ConfigChannel>
 800e560:	b940      	cbnz	r0, 800e574 <MX_ADC1_Init+0x74>
}
 800e562:	b005      	add	sp, #20
 800e564:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800e568:	f001 f817 	bl	800f59a <Error_Handler>
 800e56c:	e7e5      	b.n	800e53a <MX_ADC1_Init+0x3a>
    Error_Handler();
 800e56e:	f001 f814 	bl	800f59a <Error_Handler>
 800e572:	e7ed      	b.n	800e550 <MX_ADC1_Init+0x50>
    Error_Handler();
 800e574:	f001 f811 	bl	800f59a <Error_Handler>
}
 800e578:	e7f3      	b.n	800e562 <MX_ADC1_Init+0x62>
 800e57a:	bf00      	nop
 800e57c:	20005714 	.word	0x20005714
 800e580:	40012000 	.word	0x40012000
 800e584:	0f000001 	.word	0x0f000001

0800e588 <MX_TIM4_Init>:
{
 800e588:	b500      	push	{lr}
 800e58a:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e58c:	2300      	movs	r3, #0
 800e58e:	9308      	str	r3, [sp, #32]
 800e590:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e592:	9301      	str	r3, [sp, #4]
 800e594:	9302      	str	r3, [sp, #8]
 800e596:	9303      	str	r3, [sp, #12]
 800e598:	9304      	str	r3, [sp, #16]
 800e59a:	9305      	str	r3, [sp, #20]
 800e59c:	9306      	str	r3, [sp, #24]
 800e59e:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 800e5a0:	4818      	ldr	r0, [pc, #96]	; (800e604 <MX_TIM4_Init+0x7c>)
 800e5a2:	4a19      	ldr	r2, [pc, #100]	; (800e608 <MX_TIM4_Init+0x80>)
 800e5a4:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 16;
 800e5a6:	2210      	movs	r2, #16
 800e5a8:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e5aa:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 500;
 800e5ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e5b0:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e5b2:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e5b4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800e5b6:	f004 fd4f 	bl	8013058 <HAL_TIM_PWM_Init>
 800e5ba:	b9c8      	cbnz	r0, 800e5f0 <MX_TIM4_Init+0x68>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e5c0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800e5c2:	a908      	add	r1, sp, #32
 800e5c4:	480f      	ldr	r0, [pc, #60]	; (800e604 <MX_TIM4_Init+0x7c>)
 800e5c6:	f004 fecd 	bl	8013364 <HAL_TIMEx_MasterConfigSynchronization>
 800e5ca:	b9a0      	cbnz	r0, 800e5f6 <MX_TIM4_Init+0x6e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e5cc:	2360      	movs	r3, #96	; 0x60
 800e5ce:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 250;
 800e5d0:	23fa      	movs	r3, #250	; 0xfa
 800e5d2:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e5d8:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e5da:	a901      	add	r1, sp, #4
 800e5dc:	4809      	ldr	r0, [pc, #36]	; (800e604 <MX_TIM4_Init+0x7c>)
 800e5de:	f004 fd95 	bl	801310c <HAL_TIM_PWM_ConfigChannel>
 800e5e2:	b958      	cbnz	r0, 800e5fc <MX_TIM4_Init+0x74>
  HAL_TIM_MspPostInit(&htim4);
 800e5e4:	4807      	ldr	r0, [pc, #28]	; (800e604 <MX_TIM4_Init+0x7c>)
 800e5e6:	f7ff fdaf 	bl	800e148 <HAL_TIM_MspPostInit>
}
 800e5ea:	b00b      	add	sp, #44	; 0x2c
 800e5ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800e5f0:	f000 ffd3 	bl	800f59a <Error_Handler>
 800e5f4:	e7e2      	b.n	800e5bc <MX_TIM4_Init+0x34>
    Error_Handler();
 800e5f6:	f000 ffd0 	bl	800f59a <Error_Handler>
 800e5fa:	e7e7      	b.n	800e5cc <MX_TIM4_Init+0x44>
    Error_Handler();
 800e5fc:	f000 ffcd 	bl	800f59a <Error_Handler>
 800e600:	e7f0      	b.n	800e5e4 <MX_TIM4_Init+0x5c>
 800e602:	bf00      	nop
 800e604:	200056cc 	.word	0x200056cc
 800e608:	40000800 	.word	0x40000800

0800e60c <MX_SPI1_Init>:
{
 800e60c:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 800e60e:	480d      	ldr	r0, [pc, #52]	; (800e644 <MX_SPI1_Init+0x38>)
 800e610:	4b0d      	ldr	r3, [pc, #52]	; (800e648 <MX_SPI1_Init+0x3c>)
 800e612:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800e614:	f44f 7382 	mov.w	r3, #260	; 0x104
 800e618:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800e61a:	2300      	movs	r3, #0
 800e61c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800e61e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800e620:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800e622:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800e624:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e628:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e62a:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e62c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800e62e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e630:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800e632:	230a      	movs	r3, #10
 800e634:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800e636:	f003 ff9b 	bl	8012570 <HAL_SPI_Init>
 800e63a:	b900      	cbnz	r0, 800e63e <MX_SPI1_Init+0x32>
}
 800e63c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800e63e:	f000 ffac 	bl	800f59a <Error_Handler>
}
 800e642:	e7fb      	b.n	800e63c <MX_SPI1_Init+0x30>
 800e644:	200057a0 	.word	0x200057a0
 800e648:	40013000 	.word	0x40013000

0800e64c <MX_SPI2_Init>:
{
 800e64c:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 800e64e:	480d      	ldr	r0, [pc, #52]	; (800e684 <MX_SPI2_Init+0x38>)
 800e650:	4b0d      	ldr	r3, [pc, #52]	; (800e688 <MX_SPI2_Init+0x3c>)
 800e652:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800e654:	f44f 7382 	mov.w	r3, #260	; 0x104
 800e658:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800e65a:	2300      	movs	r3, #0
 800e65c:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800e65e:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800e660:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800e662:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800e664:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e668:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e66a:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e66c:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800e66e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e670:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800e672:	230a      	movs	r3, #10
 800e674:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800e676:	f003 ff7b 	bl	8012570 <HAL_SPI_Init>
 800e67a:	b900      	cbnz	r0, 800e67e <MX_SPI2_Init+0x32>
}
 800e67c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800e67e:	f000 ff8c 	bl	800f59a <Error_Handler>
}
 800e682:	e7fb      	b.n	800e67c <MX_SPI2_Init+0x30>
 800e684:	20005674 	.word	0x20005674
 800e688:	40003800 	.word	0x40003800

0800e68c <MX_USART1_UART_Init>:
{
 800e68c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800e68e:	480a      	ldr	r0, [pc, #40]	; (800e6b8 <MX_USART1_UART_Init+0x2c>)
 800e690:	4b0a      	ldr	r3, [pc, #40]	; (800e6bc <MX_USART1_UART_Init+0x30>)
 800e692:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800e694:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800e698:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e69a:	2300      	movs	r3, #0
 800e69c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e69e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e6a0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e6a2:	220c      	movs	r2, #12
 800e6a4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e6a6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e6a8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e6aa:	f004 ff21 	bl	80134f0 <HAL_UART_Init>
 800e6ae:	b900      	cbnz	r0, 800e6b2 <MX_USART1_UART_Init+0x26>
}
 800e6b0:	bd08      	pop	{r3, pc}
    Error_Handler();
 800e6b2:	f000 ff72 	bl	800f59a <Error_Handler>
}
 800e6b6:	e7fb      	b.n	800e6b0 <MX_USART1_UART_Init+0x24>
 800e6b8:	2000575c 	.word	0x2000575c
 800e6bc:	40011000 	.word	0x40011000

0800e6c0 <init_idle>:
void init_idle(){
 800e6c0:	b508      	push	{r3, lr}
	MX_GPIO_Init();
 800e6c2:	f7ff fe77 	bl	800e3b4 <MX_GPIO_Init>
	MX_ADC1_Init();
 800e6c6:	f7ff ff1b 	bl	800e500 <MX_ADC1_Init>
	MX_TIM4_Init();
 800e6ca:	f7ff ff5d 	bl	800e588 <MX_TIM4_Init>
	MX_SPI1_Init();
 800e6ce:	f7ff ff9d 	bl	800e60c <MX_SPI1_Init>
	MX_SPI2_Init();
 800e6d2:	f7ff ffbb 	bl	800e64c <MX_SPI2_Init>
	MX_USART1_UART_Init();
 800e6d6:	f7ff ffd9 	bl	800e68c <MX_USART1_UART_Init>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800e6da:	2008      	movs	r0, #8
 800e6dc:	f002 f9b4 	bl	8010a48 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800e6e0:	2028      	movs	r0, #40	; 0x28
 800e6e2:	f002 f9b1 	bl	8010a48 <HAL_NVIC_DisableIRQ>
}
 800e6e6:	bd08      	pop	{r3, pc}

0800e6e8 <init_deepsleep>:
void init_deepsleep(){
 800e6e8:	b508      	push	{r3, lr}
	HAL_ADC_DeInit(&hadc1);
 800e6ea:	4809      	ldr	r0, [pc, #36]	; (800e710 <init_deepsleep+0x28>)
 800e6ec:	f001 ff64 	bl	80105b8 <HAL_ADC_DeInit>
	HAL_SPI_DeInit(&hspi1);
 800e6f0:	4808      	ldr	r0, [pc, #32]	; (800e714 <init_deepsleep+0x2c>)
 800e6f2:	f003 ff9c 	bl	801262e <HAL_SPI_DeInit>
	HAL_SPI_DeInit(&hspi2);
 800e6f6:	4808      	ldr	r0, [pc, #32]	; (800e718 <init_deepsleep+0x30>)
 800e6f8:	f003 ff99 	bl	801262e <HAL_SPI_DeInit>
	HAL_TIM_PWM_DeInit(&htim4);
 800e6fc:	4807      	ldr	r0, [pc, #28]	; (800e71c <init_deepsleep+0x34>)
 800e6fe:	f004 fb2b 	bl	8012d58 <HAL_TIM_PWM_DeInit>
	HAL_UART_DeInit(&huart1);
 800e702:	4807      	ldr	r0, [pc, #28]	; (800e720 <init_deepsleep+0x38>)
 800e704:	f004 ff23 	bl	801354e <HAL_UART_DeInit>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800e708:	2028      	movs	r0, #40	; 0x28
 800e70a:	f002 f99d 	bl	8010a48 <HAL_NVIC_DisableIRQ>
}
 800e70e:	bd08      	pop	{r3, pc}
 800e710:	20005714 	.word	0x20005714
 800e714:	200057a0 	.word	0x200057a0
 800e718:	20005674 	.word	0x20005674
 800e71c:	200056cc 	.word	0x200056cc
 800e720:	2000575c 	.word	0x2000575c

0800e724 <init_cli>:
void init_cli(){
 800e724:	b508      	push	{r3, lr}
	log_disable();
 800e726:	f001 fd89 	bl	801023c <log_disable>
	cli_handle = osThreadNew(task_cli, NULL, &task_cli_attributes);
 800e72a:	4a04      	ldr	r2, [pc, #16]	; (800e73c <init_cli+0x18>)
 800e72c:	2100      	movs	r1, #0
 800e72e:	4804      	ldr	r0, [pc, #16]	; (800e740 <init_cli+0x1c>)
 800e730:	f006 fc19 	bl	8014f66 <osThreadNew>
 800e734:	4b03      	ldr	r3, [pc, #12]	; (800e744 <init_cli+0x20>)
 800e736:	6018      	str	r0, [r3, #0]
}
 800e738:	bd08      	pop	{r3, pc}
 800e73a:	bf00      	nop
 800e73c:	08019c68 	.word	0x08019c68
 800e740:	0800f685 	.word	0x0800f685
 800e744:	200004a0 	.word	0x200004a0

0800e748 <deinit_cli>:
void deinit_cli(){
 800e748:	b508      	push	{r3, lr}
	osThreadTerminate(cli_handle);
 800e74a:	4b02      	ldr	r3, [pc, #8]	; (800e754 <deinit_cli+0xc>)
 800e74c:	6818      	ldr	r0, [r3, #0]
 800e74e:	f006 fc58 	bl	8015002 <osThreadTerminate>
}
 800e752:	bd08      	pop	{r3, pc}
 800e754:	200004a0 	.word	0x200004a0

0800e758 <SystemClock_Config>:
{
 800e758:	b500      	push	{lr}
 800e75a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e75c:	2230      	movs	r2, #48	; 0x30
 800e75e:	2100      	movs	r1, #0
 800e760:	a808      	add	r0, sp, #32
 800e762:	f009 fb39 	bl	8017dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e766:	2300      	movs	r3, #0
 800e768:	9303      	str	r3, [sp, #12]
 800e76a:	9304      	str	r3, [sp, #16]
 800e76c:	9305      	str	r3, [sp, #20]
 800e76e:	9306      	str	r3, [sp, #24]
 800e770:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e772:	9301      	str	r3, [sp, #4]
 800e774:	4a20      	ldr	r2, [pc, #128]	; (800e7f8 <SystemClock_Config+0xa0>)
 800e776:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e778:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800e77c:	6411      	str	r1, [r2, #64]	; 0x40
 800e77e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e780:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800e784:	9201      	str	r2, [sp, #4]
 800e786:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e788:	9302      	str	r3, [sp, #8]
 800e78a:	4b1c      	ldr	r3, [pc, #112]	; (800e7fc <SystemClock_Config+0xa4>)
 800e78c:	681a      	ldr	r2, [r3, #0]
 800e78e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800e792:	601a      	str	r2, [r3, #0]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e79a:	9302      	str	r3, [sp, #8]
 800e79c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800e7a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e7a6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e7a8:	2302      	movs	r3, #2
 800e7aa:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e7ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e7b0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800e7b2:	2304      	movs	r3, #4
 800e7b4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800e7b6:	2260      	movs	r2, #96	; 0x60
 800e7b8:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800e7ba:	2206      	movs	r2, #6
 800e7bc:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800e7be:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e7c0:	a808      	add	r0, sp, #32
 800e7c2:	f003 fa93 	bl	8011cec <HAL_RCC_OscConfig>
 800e7c6:	b988      	cbnz	r0, 800e7ec <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e7c8:	230f      	movs	r3, #15
 800e7ca:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e7cc:	2302      	movs	r3, #2
 800e7ce:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800e7d0:	2380      	movs	r3, #128	; 0x80
 800e7d2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800e7d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e7d8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800e7da:	2100      	movs	r1, #0
 800e7dc:	9107      	str	r1, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800e7de:	a803      	add	r0, sp, #12
 800e7e0:	f003 fce8 	bl	80121b4 <HAL_RCC_ClockConfig>
 800e7e4:	b928      	cbnz	r0, 800e7f2 <SystemClock_Config+0x9a>
}
 800e7e6:	b015      	add	sp, #84	; 0x54
 800e7e8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800e7ec:	f000 fed5 	bl	800f59a <Error_Handler>
 800e7f0:	e7ea      	b.n	800e7c8 <SystemClock_Config+0x70>
    Error_Handler();
 800e7f2:	f000 fed2 	bl	800f59a <Error_Handler>
}
 800e7f6:	e7f6      	b.n	800e7e6 <SystemClock_Config+0x8e>
 800e7f8:	40023800 	.word	0x40023800
 800e7fc:	40007000 	.word	0x40007000

0800e800 <init>:
void init(){
 800e800:	b510      	push	{r4, lr}
	HAL_Init();
 800e802:	f001 fdc9 	bl	8010398 <HAL_Init>
	SystemClock_Config();
 800e806:	f7ff ffa7 	bl	800e758 <SystemClock_Config>
	MX_GPIO_Init();
 800e80a:	f7ff fdd3 	bl	800e3b4 <MX_GPIO_Init>
	MX_ADC1_Init();
 800e80e:	f7ff fe77 	bl	800e500 <MX_ADC1_Init>
	MX_TIM4_Init();
 800e812:	f7ff feb9 	bl	800e588 <MX_TIM4_Init>
	MX_SPI1_Init();
 800e816:	f7ff fef9 	bl	800e60c <MX_SPI1_Init>
	MX_SPI2_Init();
 800e81a:	f7ff ff17 	bl	800e64c <MX_SPI2_Init>
	MX_USART1_UART_Init();
 800e81e:	f7ff ff35 	bl	800e68c <MX_USART1_UART_Init>
	HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800e822:	2008      	movs	r0, #8
 800e824:	f002 f910 	bl	8010a48 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800e828:	2028      	movs	r0, #40	; 0x28
 800e82a:	f002 f90d 	bl	8010a48 <HAL_NVIC_DisableIRQ>
	osKernelInitialize();
 800e82e:	f006 fb5f 	bl	8014ef0 <osKernelInitialize>
	buzzer_event_id = osEventFlagsNew(NULL);
 800e832:	2000      	movs	r0, #0
 800e834:	f006 fc23 	bl	801507e <osEventFlagsNew>
 800e838:	4b3f      	ldr	r3, [pc, #252]	; (800e938 <init+0x138>)
 800e83a:	6018      	str	r0, [r3, #0]
	sensor_mode_id = osEventFlagsNew(NULL);
 800e83c:	2000      	movs	r0, #0
 800e83e:	f006 fc1e 	bl	801507e <osEventFlagsNew>
 800e842:	4b3e      	ldr	r3, [pc, #248]	; (800e93c <init+0x13c>)
 800e844:	6018      	str	r0, [r3, #0]
	state_est_mode_id = osEventFlagsNew(NULL);
 800e846:	2000      	movs	r0, #0
 800e848:	f006 fc19 	bl	801507e <osEventFlagsNew>
 800e84c:	4b3c      	ldr	r3, [pc, #240]	; (800e940 <init+0x140>)
 800e84e:	6018      	str	r0, [r3, #0]
	telemetry_mode_id = osEventFlagsNew(NULL);
 800e850:	2000      	movs	r0, #0
 800e852:	f006 fc14 	bl	801507e <osEventFlagsNew>
 800e856:	4b3b      	ldr	r3, [pc, #236]	; (800e944 <init+0x144>)
 800e858:	6018      	str	r0, [r3, #0]
	heater_mode_id = osEventFlagsNew(NULL);
 800e85a:	2000      	movs	r0, #0
 800e85c:	f006 fc0f 	bl	801507e <osEventFlagsNew>
 800e860:	4b39      	ldr	r3, [pc, #228]	; (800e948 <init+0x148>)
 800e862:	6018      	str	r0, [r3, #0]
	supervisor_mode_id = osEventFlagsNew(NULL);
 800e864:	2000      	movs	r0, #0
 800e866:	f006 fc0a 	bl	801507e <osEventFlagsNew>
 800e86a:	4b38      	ldr	r3, [pc, #224]	; (800e94c <init+0x14c>)
 800e86c:	6018      	str	r0, [r3, #0]
	fifo_init(&usb_output_fifo, usb_fifo_out_buffer, USB_OUTPUT_BUFFER_SIZE);
 800e86e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e872:	4937      	ldr	r1, [pc, #220]	; (800e950 <init+0x150>)
 800e874:	4837      	ldr	r0, [pc, #220]	; (800e954 <init+0x154>)
 800e876:	f001 fb19 	bl	800feac <fifo_init>
	fifo_init(&usb_input_fifo, usb_fifo_in_buffer, USB_INPUT_BUFFER_SIZE);
 800e87a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e87e:	4936      	ldr	r1, [pc, #216]	; (800e958 <init+0x158>)
 800e880:	4836      	ldr	r0, [pc, #216]	; (800e95c <init+0x15c>)
 800e882:	f001 fb13 	bl	800feac <fifo_init>
	log_init();
 800e886:	f001 fcc1 	bl	801020c <log_init>
	if(HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin)){
 800e88a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e88e:	4834      	ldr	r0, [pc, #208]	; (800e960 <init+0x160>)
 800e890:	f002 fc4e 	bl	8011130 <HAL_GPIO_ReadPin>
 800e894:	bb00      	cbnz	r0, 800e8d8 <init+0xd8>
	config_init();
 800e896:	f7fe fd17 	bl	800d2c8 <config_init>
	config_load();
 800e89a:	f7fe fd27 	bl	800d2ec <config_load>
	if(global_config.config.config_version != CONFIG_VERSION){
 800e89e:	4b31      	ldr	r3, [pc, #196]	; (800e964 <init+0x164>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	2b64      	cmp	r3, #100	; 0x64
 800e8a4:	d02b      	beq.n	800e8fe <init+0xfe>
		log_warn("Config version mismatch");
 800e8a6:	4c30      	ldr	r4, [pc, #192]	; (800e968 <init+0x168>)
 800e8a8:	4b30      	ldr	r3, [pc, #192]	; (800e96c <init+0x16c>)
 800e8aa:	224d      	movs	r2, #77	; 0x4d
 800e8ac:	4621      	mov	r1, r4
 800e8ae:	2003      	movs	r0, #3
 800e8b0:	f001 fcd0 	bl	8010254 <log_log>
		log_info("Resetting to defaults..");
 800e8b4:	4b2e      	ldr	r3, [pc, #184]	; (800e970 <init+0x170>)
 800e8b6:	224e      	movs	r2, #78	; 0x4e
 800e8b8:	4621      	mov	r1, r4
 800e8ba:	2002      	movs	r0, #2
 800e8bc:	f001 fcca 	bl	8010254 <log_log>
		config_defaults();
 800e8c0:	f7fe fd04 	bl	800d2cc <config_defaults>
		bool status = config_save();
 800e8c4:	f7fe fd1c 	bl	800d300 <config_save>
		if(status){
 800e8c8:	b190      	cbz	r0, 800e8f0 <init+0xf0>
			log_info("Reset successful!");
 800e8ca:	4b2a      	ldr	r3, [pc, #168]	; (800e974 <init+0x174>)
 800e8cc:	2252      	movs	r2, #82	; 0x52
 800e8ce:	4621      	mov	r1, r4
 800e8d0:	2002      	movs	r0, #2
 800e8d2:	f001 fcbf 	bl	8010254 <log_log>
 800e8d6:	e018      	b.n	800e90a <init+0x10a>
		global_usb_initialized_flag = true;
 800e8d8:	4b27      	ldr	r3, [pc, #156]	; (800e978 <init+0x178>)
 800e8da:	2201      	movs	r2, #1
 800e8dc:	701a      	strb	r2, [r3, #0]
		MX_USB_DEVICE_Init();
 800e8de:	f008 ff61 	bl	80177a4 <MX_USB_DEVICE_Init>
		HAL_Delay(1500);
 800e8e2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800e8e6:	f001 fd83 	bl	80103f0 <HAL_Delay>
		log_enable();
 800e8ea:	f001 fca1 	bl	8010230 <log_enable>
 800e8ee:	e7d2      	b.n	800e896 <init+0x96>
			log_error("Error resetting config!");
 800e8f0:	4b22      	ldr	r3, [pc, #136]	; (800e97c <init+0x17c>)
 800e8f2:	2254      	movs	r2, #84	; 0x54
 800e8f4:	491c      	ldr	r1, [pc, #112]	; (800e968 <init+0x168>)
 800e8f6:	2004      	movs	r0, #4
 800e8f8:	f001 fcac 	bl	8010254 <log_log>
 800e8fc:	e005      	b.n	800e90a <init+0x10a>
		log_info("Config loading successful!");
 800e8fe:	4b20      	ldr	r3, [pc, #128]	; (800e980 <init+0x180>)
 800e900:	2257      	movs	r2, #87	; 0x57
 800e902:	4919      	ldr	r1, [pc, #100]	; (800e968 <init+0x168>)
 800e904:	2002      	movs	r0, #2
 800e906:	f001 fca5 	bl	8010254 <log_log>
	recorder_init(&recorder, RECORDER_SIZE);
 800e90a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800e90e:	481d      	ldr	r0, [pc, #116]	; (800e984 <init+0x184>)
 800e910:	f000 f846 	bl	800e9a0 <recorder_init>
	osThreadNew(task_fsm, NULL, &task_fsm_attributes);
 800e914:	4a1c      	ldr	r2, [pc, #112]	; (800e988 <init+0x188>)
 800e916:	2100      	movs	r1, #0
 800e918:	481c      	ldr	r0, [pc, #112]	; (800e98c <init+0x18c>)
 800e91a:	f006 fb24 	bl	8014f66 <osThreadNew>
	osThreadNew(task_buzzer, NULL, &task_buzzer_attributes);
 800e91e:	4a1c      	ldr	r2, [pc, #112]	; (800e990 <init+0x190>)
 800e920:	2100      	movs	r1, #0
 800e922:	481c      	ldr	r0, [pc, #112]	; (800e994 <init+0x194>)
 800e924:	f006 fb1f 	bl	8014f66 <osThreadNew>
	osThreadNew(task_supervision, NULL, &task_supervision_attributes);
 800e928:	4a1b      	ldr	r2, [pc, #108]	; (800e998 <init+0x198>)
 800e92a:	2100      	movs	r1, #0
 800e92c:	481b      	ldr	r0, [pc, #108]	; (800e99c <init+0x19c>)
 800e92e:	f006 fb1a 	bl	8014f66 <osThreadNew>
	osKernelStart();
 800e932:	f006 faef 	bl	8014f14 <osKernelStart>
}
 800e936:	bd10      	pop	{r4, pc}
 800e938:	200053e8 	.word	0x200053e8
 800e93c:	20005610 	.word	0x20005610
 800e940:	200055f8 	.word	0x200055f8
 800e944:	20005600 	.word	0x20005600
 800e948:	2000560c 	.word	0x2000560c
 800e94c:	200055fc 	.word	0x200055fc
 800e950:	200053f8 	.word	0x200053f8
 800e954:	20005614 	.word	0x20005614
 800e958:	200051b0 	.word	0x200051b0
 800e95c:	200053b0 	.word	0x200053b0
 800e960:	40020000 	.word	0x40020000
 800e964:	20000474 	.word	0x20000474
 800e968:	08019b65 	.word	0x08019b65
 800e96c:	08019b3c 	.word	0x08019b3c
 800e970:	08019b6c 	.word	0x08019b6c
 800e974:	08019b84 	.word	0x08019b84
 800e978:	20000494 	.word	0x20000494
 800e97c:	08019b98 	.word	0x08019b98
 800e980:	08019bb0 	.word	0x08019bb0
 800e984:	200053d4 	.word	0x200053d4
 800e988:	08019c8c 	.word	0x08019c8c
 800e98c:	0800f6d1 	.word	0x0800f6d1
 800e990:	08019c44 	.word	0x08019c44
 800e994:	0800f5a1 	.word	0x0800f5a1
 800e998:	08019d1c 	.word	0x08019d1c
 800e99c:	0800fc45 	.word	0x0800fc45

0800e9a0 <recorder_init>:
 800e9a0:	b538      	push	{r3, r4, r5, lr}
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	460d      	mov	r5, r1
 800e9a6:	4608      	mov	r0, r1
 800e9a8:	f009 fa00 	bl	8017dac <malloc>
 800e9ac:	60a0      	str	r0, [r4, #8]
 800e9ae:	b128      	cbz	r0, 800e9bc <recorder_init+0x1c>
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	6063      	str	r3, [r4, #4]
 800e9b4:	6025      	str	r5, [r4, #0]
 800e9b6:	6123      	str	r3, [r4, #16]
 800e9b8:	2001      	movs	r0, #1
 800e9ba:	bd38      	pop	{r3, r4, r5, pc}
 800e9bc:	2000      	movs	r0, #0
 800e9be:	e7fc      	b.n	800e9ba <recorder_init+0x1a>

0800e9c0 <recorder_flush>:
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	60c3      	str	r3, [r0, #12]
 800e9c4:	6043      	str	r3, [r0, #4]
 800e9c6:	6103      	str	r3, [r0, #16]
 800e9c8:	4770      	bx	lr

0800e9ca <recorder_record>:
 800e9ca:	b4f0      	push	{r4, r5, r6, r7}
 800e9cc:	b082      	sub	sp, #8
 800e9ce:	6886      	ldr	r6, [r0, #8]
 800e9d0:	b1fe      	cbz	r6, 800ea12 <recorder_record+0x48>
 800e9d2:	4604      	mov	r4, r0
 800e9d4:	6845      	ldr	r5, [r0, #4]
 800e9d6:	1daf      	adds	r7, r5, #6
 800e9d8:	6800      	ldr	r0, [r0, #0]
 800e9da:	4287      	cmp	r7, r0
 800e9dc:	d81b      	bhi.n	800ea16 <recorder_record+0x4c>
 800e9de:	b905      	cbnz	r5, 800e9e2 <recorder_record+0x18>
 800e9e0:	60e1      	str	r1, [r4, #12]
 800e9e2:	f88d 2000 	strb.w	r2, [sp]
 800e9e6:	68e2      	ldr	r2, [r4, #12]
 800e9e8:	1a89      	subs	r1, r1, r2
 800e9ea:	f8ad 1002 	strh.w	r1, [sp, #2]
 800e9ee:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e9f2:	1973      	adds	r3, r6, r5
 800e9f4:	9800      	ldr	r0, [sp, #0]
 800e9f6:	5170      	str	r0, [r6, r5]
 800e9f8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800e9fc:	809a      	strh	r2, [r3, #4]
 800e9fe:	6863      	ldr	r3, [r4, #4]
 800ea00:	3306      	adds	r3, #6
 800ea02:	6063      	str	r3, [r4, #4]
 800ea04:	6923      	ldr	r3, [r4, #16]
 800ea06:	3301      	adds	r3, #1
 800ea08:	6123      	str	r3, [r4, #16]
 800ea0a:	2001      	movs	r0, #1
 800ea0c:	b002      	add	sp, #8
 800ea0e:	bcf0      	pop	{r4, r5, r6, r7}
 800ea10:	4770      	bx	lr
 800ea12:	2000      	movs	r0, #0
 800ea14:	e7fa      	b.n	800ea0c <recorder_record+0x42>
 800ea16:	2000      	movs	r0, #0
 800ea18:	e7f8      	b.n	800ea0c <recorder_record+0x42>

0800ea1a <recorder_get_count>:
 800ea1a:	6900      	ldr	r0, [r0, #16]
 800ea1c:	4770      	bx	lr

0800ea1e <recorder_get_element>:
 800ea1e:	460b      	mov	r3, r1
 800ea20:	b181      	cbz	r1, 800ea44 <recorder_get_element+0x26>
 800ea22:	6901      	ldr	r1, [r0, #16]
 800ea24:	4299      	cmp	r1, r3
 800ea26:	d201      	bcs.n	800ea2c <recorder_get_element+0xe>
 800ea28:	2000      	movs	r0, #0
 800ea2a:	4770      	bx	lr
 800ea2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ea30:	005b      	lsls	r3, r3, #1
 800ea32:	3b06      	subs	r3, #6
 800ea34:	6881      	ldr	r1, [r0, #8]
 800ea36:	18c8      	adds	r0, r1, r3
 800ea38:	58cb      	ldr	r3, [r1, r3]
 800ea3a:	6013      	str	r3, [r2, #0]
 800ea3c:	8883      	ldrh	r3, [r0, #4]
 800ea3e:	8093      	strh	r3, [r2, #4]
 800ea40:	2001      	movs	r0, #1
 800ea42:	4770      	bx	lr
 800ea44:	2000      	movs	r0, #0
 800ea46:	4770      	bx	lr

0800ea48 <battery_voltage>:
 800ea48:	b538      	push	{r3, r4, r5, lr}
 800ea4a:	4604      	mov	r4, r0
 800ea4c:	460d      	mov	r5, r1
 800ea4e:	7800      	ldrb	r0, [r0, #0]
 800ea50:	f7fe fce0 	bl	800d414 <adc_get>
 800ea54:	ee07 0a90 	vmov	s15, r0
 800ea58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea5c:	ed94 7a01 	vldr	s14, [r4, #4]
 800ea60:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea64:	ed94 7a02 	vldr	s14, [r4, #8]
 800ea68:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ea6c:	edc5 7a00 	vstr	s15, [r5]
 800ea70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ea74:	4803      	ldr	r0, [pc, #12]	; (800ea84 <battery_voltage+0x3c>)
 800ea76:	f002 fb5b 	bl	8011130 <HAL_GPIO_ReadPin>
 800ea7a:	2800      	cmp	r0, #0
 800ea7c:	bf14      	ite	ne
 800ea7e:	2001      	movne	r0, #1
 800ea80:	2002      	moveq	r0, #2
 800ea82:	bd38      	pop	{r3, r4, r5, pc}
 800ea84:	40020000 	.word	0x40020000

0800ea88 <light_init>:
 800ea88:	f04f 33ff 	mov.w	r3, #4294967295
 800ea8c:	6003      	str	r3, [r0, #0]
 800ea8e:	4770      	bx	lr

0800ea90 <platform_write>:
 800ea90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea92:	b083      	sub	sp, #12
 800ea94:	4604      	mov	r4, r0
 800ea96:	4615      	mov	r5, r2
 800ea98:	461e      	mov	r6, r3
 800ea9a:	f88d 1007 	strb.w	r1, [sp, #7]
 800ea9e:	4f0d      	ldr	r7, [pc, #52]	; (800ead4 <platform_write+0x44>)
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	2104      	movs	r1, #4
 800eaa4:	4638      	mov	r0, r7
 800eaa6:	f002 fb49 	bl	801113c <HAL_GPIO_WritePin>
 800eaaa:	2302      	movs	r3, #2
 800eaac:	2201      	movs	r2, #1
 800eaae:	f10d 0107 	add.w	r1, sp, #7
 800eab2:	4620      	mov	r0, r4
 800eab4:	f003 fdd1 	bl	801265a <HAL_SPI_Transmit>
 800eab8:	2302      	movs	r3, #2
 800eaba:	4632      	mov	r2, r6
 800eabc:	4629      	mov	r1, r5
 800eabe:	4620      	mov	r0, r4
 800eac0:	f003 fdcb 	bl	801265a <HAL_SPI_Transmit>
 800eac4:	2201      	movs	r2, #1
 800eac6:	2104      	movs	r1, #4
 800eac8:	4638      	mov	r0, r7
 800eaca:	f002 fb37 	bl	801113c <HAL_GPIO_WritePin>
 800eace:	2000      	movs	r0, #0
 800ead0:	b003      	add	sp, #12
 800ead2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ead4:	40020400 	.word	0x40020400

0800ead8 <platform_read>:
 800ead8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eada:	b083      	sub	sp, #12
 800eadc:	4604      	mov	r4, r0
 800eade:	4615      	mov	r5, r2
 800eae0:	461e      	mov	r6, r3
 800eae2:	f061 017f 	orn	r1, r1, #127	; 0x7f
 800eae6:	f88d 1007 	strb.w	r1, [sp, #7]
 800eaea:	4f0e      	ldr	r7, [pc, #56]	; (800eb24 <platform_read+0x4c>)
 800eaec:	2200      	movs	r2, #0
 800eaee:	2104      	movs	r1, #4
 800eaf0:	4638      	mov	r0, r7
 800eaf2:	f002 fb23 	bl	801113c <HAL_GPIO_WritePin>
 800eaf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eafa:	2201      	movs	r2, #1
 800eafc:	f10d 0107 	add.w	r1, sp, #7
 800eb00:	4620      	mov	r0, r4
 800eb02:	f003 fdaa 	bl	801265a <HAL_SPI_Transmit>
 800eb06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800eb0a:	4632      	mov	r2, r6
 800eb0c:	4629      	mov	r1, r5
 800eb0e:	4620      	mov	r0, r4
 800eb10:	f003 ff85 	bl	8012a1e <HAL_SPI_Receive>
 800eb14:	2201      	movs	r2, #1
 800eb16:	2104      	movs	r1, #4
 800eb18:	4638      	mov	r0, r7
 800eb1a:	f002 fb0f 	bl	801113c <HAL_GPIO_WritePin>
 800eb1e:	2000      	movs	r0, #0
 800eb20:	b003      	add	sp, #12
 800eb22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb24:	40020400 	.word	0x40020400

0800eb28 <lsm6dsr_init>:
 800eb28:	b510      	push	{r4, lr}
 800eb2a:	b082      	sub	sp, #8
 800eb2c:	4604      	mov	r4, r0
 800eb2e:	4b15      	ldr	r3, [pc, #84]	; (800eb84 <lsm6dsr_init+0x5c>)
 800eb30:	6043      	str	r3, [r0, #4]
 800eb32:	4a15      	ldr	r2, [pc, #84]	; (800eb88 <lsm6dsr_init+0x60>)
 800eb34:	601a      	str	r2, [r3, #0]
 800eb36:	4a15      	ldr	r2, [pc, #84]	; (800eb8c <lsm6dsr_init+0x64>)
 800eb38:	605a      	str	r2, [r3, #4]
 800eb3a:	6843      	ldr	r3, [r0, #4]
 800eb3c:	6802      	ldr	r2, [r0, #0]
 800eb3e:	609a      	str	r2, [r3, #8]
 800eb40:	f10d 0107 	add.w	r1, sp, #7
 800eb44:	6840      	ldr	r0, [r0, #4]
 800eb46:	f000 f935 	bl	800edb4 <lsm6dsr_device_id_get>
 800eb4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eb4e:	2b6b      	cmp	r3, #107	; 0x6b
 800eb50:	d002      	beq.n	800eb58 <lsm6dsr_init+0x30>
 800eb52:	2000      	movs	r0, #0
 800eb54:	b002      	add	sp, #8
 800eb56:	bd10      	pop	{r4, pc}
 800eb58:	2101      	movs	r1, #1
 800eb5a:	6860      	ldr	r0, [r4, #4]
 800eb5c:	f000 f931 	bl	800edc2 <lsm6dsr_reset_set>
 800eb60:	200a      	movs	r0, #10
 800eb62:	f006 fa66 	bl	8015032 <osDelay>
 800eb66:	2180      	movs	r1, #128	; 0x80
 800eb68:	6860      	ldr	r0, [r4, #4]
 800eb6a:	f000 f95c 	bl	800ee26 <lsm6dsr_i3c_disable_set>
 800eb6e:	7a21      	ldrb	r1, [r4, #8]
 800eb70:	6860      	ldr	r0, [r4, #4]
 800eb72:	f000 f8b5 	bl	800ece0 <lsm6dsr_xl_full_scale_set>
 800eb76:	7aa1      	ldrb	r1, [r4, #10]
 800eb78:	6860      	ldr	r0, [r4, #4]
 800eb7a:	f000 f8ca 	bl	800ed12 <lsm6dsr_gy_full_scale_set>
 800eb7e:	2001      	movs	r0, #1
 800eb80:	e7e8      	b.n	800eb54 <lsm6dsr_init+0x2c>
 800eb82:	bf00      	nop
 800eb84:	200004a4 	.word	0x200004a4
 800eb88:	0800ea91 	.word	0x0800ea91
 800eb8c:	0800ead9 	.word	0x0800ead9

0800eb90 <lsm6dsr_shutdown>:
 800eb90:	b510      	push	{r4, lr}
 800eb92:	4604      	mov	r4, r0
 800eb94:	2100      	movs	r1, #0
 800eb96:	6840      	ldr	r0, [r0, #4]
 800eb98:	f000 faeb 	bl	800f172 <lsm6dsr_xl_data_rate_set>
 800eb9c:	2100      	movs	r1, #0
 800eb9e:	6860      	ldr	r0, [r4, #4]
 800eba0:	f000 fb5c 	bl	800f25c <lsm6dsr_gy_data_rate_set>
 800eba4:	bd10      	pop	{r4, pc}

0800eba6 <lsm6dsr_enable>:
 800eba6:	b510      	push	{r4, lr}
 800eba8:	4604      	mov	r4, r0
 800ebaa:	7a41      	ldrb	r1, [r0, #9]
 800ebac:	6840      	ldr	r0, [r0, #4]
 800ebae:	f000 fae0 	bl	800f172 <lsm6dsr_xl_data_rate_set>
 800ebb2:	7ae1      	ldrb	r1, [r4, #11]
 800ebb4:	6860      	ldr	r0, [r4, #4]
 800ebb6:	f000 fb51 	bl	800f25c <lsm6dsr_gy_data_rate_set>
 800ebba:	bd10      	pop	{r4, pc}

0800ebbc <lsm6dsr_wakeup_enable>:
 800ebbc:	b510      	push	{r4, lr}
 800ebbe:	ed2d 8b02 	vpush	{d8}
 800ebc2:	b084      	sub	sp, #16
 800ebc4:	4604      	mov	r4, r0
 800ebc6:	ee08 1a10 	vmov	s16, r1
 800ebca:	7a41      	ldrb	r1, [r0, #9]
 800ebcc:	6840      	ldr	r0, [r0, #4]
 800ebce:	f000 fad0 	bl	800f172 <lsm6dsr_xl_data_rate_set>
 800ebd2:	7a21      	ldrb	r1, [r4, #8]
 800ebd4:	6860      	ldr	r0, [r4, #4]
 800ebd6:	f000 f883 	bl	800ece0 <lsm6dsr_xl_full_scale_set>
 800ebda:	2100      	movs	r1, #0
 800ebdc:	6860      	ldr	r0, [r4, #4]
 800ebde:	f000 f909 	bl	800edf4 <lsm6dsr_xl_hp_path_internal_set>
 800ebe2:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 800ebe6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800ec24 <lsm6dsr_wakeup_enable+0x68>
 800ebea:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800ebee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ebf2:	edcd 7a01 	vstr	s15, [sp, #4]
 800ebf6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ebfa:	6860      	ldr	r0, [r4, #4]
 800ebfc:	f000 fa4b 	bl	800f096 <lsm6dsr_wkup_threshold_set>
 800ec00:	a902      	add	r1, sp, #8
 800ec02:	6860      	ldr	r0, [r4, #4]
 800ec04:	f000 fa0a 	bl	800f01c <lsm6dsr_pin_int1_route_get>
 800ec08:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800ec0c:	f043 0320 	orr.w	r3, r3, #32
 800ec10:	f88d 3009 	strb.w	r3, [sp, #9]
 800ec14:	a902      	add	r1, sp, #8
 800ec16:	6860      	ldr	r0, [r4, #4]
 800ec18:	f000 f93a 	bl	800ee90 <lsm6dsr_pin_int1_route_set>
 800ec1c:	b004      	add	sp, #16
 800ec1e:	ecbd 8b02 	vpop	{d8}
 800ec22:	bd10      	pop	{r4, pc}
 800ec24:	401cf5c3 	.word	0x401cf5c3

0800ec28 <lsm6dsr_wakeup_disable>:
 800ec28:	b510      	push	{r4, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	4604      	mov	r4, r0
 800ec2e:	4669      	mov	r1, sp
 800ec30:	6840      	ldr	r0, [r0, #4]
 800ec32:	f000 f9f3 	bl	800f01c <lsm6dsr_pin_int1_route_get>
 800ec36:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800ec3a:	f36f 1345 	bfc	r3, #5, #1
 800ec3e:	f88d 3001 	strb.w	r3, [sp, #1]
 800ec42:	4669      	mov	r1, sp
 800ec44:	6860      	ldr	r0, [r4, #4]
 800ec46:	f000 f923 	bl	800ee90 <lsm6dsr_pin_int1_route_set>
 800ec4a:	b002      	add	sp, #8
 800ec4c:	bd10      	pop	{r4, pc}
	...

0800ec50 <get_accel_conversion>:
 800ec50:	7a03      	ldrb	r3, [r0, #8]
 800ec52:	2b03      	cmp	r3, #3
 800ec54:	d80c      	bhi.n	800ec70 <get_accel_conversion+0x20>
 800ec56:	e8df f003 	tbb	[pc, r3]
 800ec5a:	080e      	.short	0x080e
 800ec5c:	0502      	.short	0x0502
 800ec5e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800ec7c <get_accel_conversion+0x2c>
 800ec62:	4770      	bx	lr
 800ec64:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800ec80 <get_accel_conversion+0x30>
 800ec68:	4770      	bx	lr
 800ec6a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800ec84 <get_accel_conversion+0x34>
 800ec6e:	4770      	bx	lr
 800ec70:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800ec88 <get_accel_conversion+0x38>
 800ec74:	4770      	bx	lr
 800ec76:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800ec8c <get_accel_conversion+0x3c>
 800ec7a:	4770      	bx	lr
 800ec7c:	3a9cde9e 	.word	0x3a9cde9e
 800ec80:	3b1cde9e 	.word	0x3b1cde9e
 800ec84:	3b9cde9e 	.word	0x3b9cde9e
 800ec88:	00000000 	.word	0x00000000
 800ec8c:	3a1cde9e 	.word	0x3a1cde9e

0800ec90 <lsm6dsr_get_accel>:
 800ec90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec94:	b082      	sub	sp, #8
 800ec96:	4680      	mov	r8, r0
 800ec98:	460f      	mov	r7, r1
 800ec9a:	4669      	mov	r1, sp
 800ec9c:	6840      	ldr	r0, [r0, #4]
 800ec9e:	f000 f851 	bl	800ed44 <lsm6dsr_acceleration_raw_get>
 800eca2:	466e      	mov	r6, sp
 800eca4:	463d      	mov	r5, r7
 800eca6:	370c      	adds	r7, #12
 800eca8:	f936 4b02 	ldrsh.w	r4, [r6], #2
 800ecac:	4640      	mov	r0, r8
 800ecae:	f7ff ffcf 	bl	800ec50 <get_accel_conversion>
 800ecb2:	ee07 4a90 	vmov	s15, r4
 800ecb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ecba:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ecbe:	ece5 7a01 	vstmia	r5!, {s15}
 800ecc2:	42bd      	cmp	r5, r7
 800ecc4:	d1f0      	bne.n	800eca8 <lsm6dsr_get_accel+0x18>
 800ecc6:	b002      	add	sp, #8
 800ecc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eccc <lsm6dsr_read_reg>:
 800eccc:	b510      	push	{r4, lr}
 800ecce:	6844      	ldr	r4, [r0, #4]
 800ecd0:	6880      	ldr	r0, [r0, #8]
 800ecd2:	47a0      	blx	r4
 800ecd4:	bd10      	pop	{r4, pc}

0800ecd6 <lsm6dsr_write_reg>:
 800ecd6:	b510      	push	{r4, lr}
 800ecd8:	6804      	ldr	r4, [r0, #0]
 800ecda:	6880      	ldr	r0, [r0, #8]
 800ecdc:	47a0      	blx	r4
 800ecde:	bd10      	pop	{r4, pc}

0800ece0 <lsm6dsr_xl_full_scale_set>:
 800ece0:	b530      	push	{r4, r5, lr}
 800ece2:	b083      	sub	sp, #12
 800ece4:	4604      	mov	r4, r0
 800ece6:	460d      	mov	r5, r1
 800ece8:	2301      	movs	r3, #1
 800ecea:	aa01      	add	r2, sp, #4
 800ecec:	2110      	movs	r1, #16
 800ecee:	f7ff ffed 	bl	800eccc <lsm6dsr_read_reg>
 800ecf2:	b108      	cbz	r0, 800ecf8 <lsm6dsr_xl_full_scale_set+0x18>
 800ecf4:	b003      	add	sp, #12
 800ecf6:	bd30      	pop	{r4, r5, pc}
 800ecf8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ecfc:	f365 0383 	bfi	r3, r5, #2, #2
 800ed00:	f88d 3004 	strb.w	r3, [sp, #4]
 800ed04:	2301      	movs	r3, #1
 800ed06:	aa01      	add	r2, sp, #4
 800ed08:	2110      	movs	r1, #16
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f7ff ffe3 	bl	800ecd6 <lsm6dsr_write_reg>
 800ed10:	e7f0      	b.n	800ecf4 <lsm6dsr_xl_full_scale_set+0x14>

0800ed12 <lsm6dsr_gy_full_scale_set>:
 800ed12:	b530      	push	{r4, r5, lr}
 800ed14:	b083      	sub	sp, #12
 800ed16:	4604      	mov	r4, r0
 800ed18:	460d      	mov	r5, r1
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	aa01      	add	r2, sp, #4
 800ed1e:	2111      	movs	r1, #17
 800ed20:	f7ff ffd4 	bl	800eccc <lsm6dsr_read_reg>
 800ed24:	b108      	cbz	r0, 800ed2a <lsm6dsr_gy_full_scale_set+0x18>
 800ed26:	b003      	add	sp, #12
 800ed28:	bd30      	pop	{r4, r5, pc}
 800ed2a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ed2e:	f365 0303 	bfi	r3, r5, #0, #4
 800ed32:	f88d 3004 	strb.w	r3, [sp, #4]
 800ed36:	2301      	movs	r3, #1
 800ed38:	aa01      	add	r2, sp, #4
 800ed3a:	2111      	movs	r1, #17
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	f7ff ffca 	bl	800ecd6 <lsm6dsr_write_reg>
 800ed42:	e7f0      	b.n	800ed26 <lsm6dsr_gy_full_scale_set+0x14>

0800ed44 <lsm6dsr_acceleration_raw_get>:
 800ed44:	b510      	push	{r4, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	460c      	mov	r4, r1
 800ed4a:	2306      	movs	r3, #6
 800ed4c:	466a      	mov	r2, sp
 800ed4e:	2128      	movs	r1, #40	; 0x28
 800ed50:	f7ff ffbc 	bl	800eccc <lsm6dsr_read_reg>
 800ed54:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ed58:	f89d 3000 	ldrb.w	r3, [sp]
 800ed5c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ed60:	8023      	strh	r3, [r4, #0]
 800ed62:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ed66:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800ed6a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ed6e:	8063      	strh	r3, [r4, #2]
 800ed70:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ed74:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ed78:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ed7c:	80a3      	strh	r3, [r4, #4]
 800ed7e:	b002      	add	sp, #8
 800ed80:	bd10      	pop	{r4, pc}

0800ed82 <lsm6dsr_mem_bank_set>:
 800ed82:	b530      	push	{r4, r5, lr}
 800ed84:	b083      	sub	sp, #12
 800ed86:	4604      	mov	r4, r0
 800ed88:	460d      	mov	r5, r1
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	aa01      	add	r2, sp, #4
 800ed8e:	4619      	mov	r1, r3
 800ed90:	f7ff ff9c 	bl	800eccc <lsm6dsr_read_reg>
 800ed94:	b108      	cbz	r0, 800ed9a <lsm6dsr_mem_bank_set+0x18>
 800ed96:	b003      	add	sp, #12
 800ed98:	bd30      	pop	{r4, r5, pc}
 800ed9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ed9e:	f365 1387 	bfi	r3, r5, #6, #2
 800eda2:	f88d 3004 	strb.w	r3, [sp, #4]
 800eda6:	2301      	movs	r3, #1
 800eda8:	aa01      	add	r2, sp, #4
 800edaa:	4619      	mov	r1, r3
 800edac:	4620      	mov	r0, r4
 800edae:	f7ff ff92 	bl	800ecd6 <lsm6dsr_write_reg>
 800edb2:	e7f0      	b.n	800ed96 <lsm6dsr_mem_bank_set+0x14>

0800edb4 <lsm6dsr_device_id_get>:
 800edb4:	b508      	push	{r3, lr}
 800edb6:	460a      	mov	r2, r1
 800edb8:	2301      	movs	r3, #1
 800edba:	210f      	movs	r1, #15
 800edbc:	f7ff ff86 	bl	800eccc <lsm6dsr_read_reg>
 800edc0:	bd08      	pop	{r3, pc}

0800edc2 <lsm6dsr_reset_set>:
 800edc2:	b530      	push	{r4, r5, lr}
 800edc4:	b083      	sub	sp, #12
 800edc6:	4604      	mov	r4, r0
 800edc8:	460d      	mov	r5, r1
 800edca:	2301      	movs	r3, #1
 800edcc:	aa01      	add	r2, sp, #4
 800edce:	2112      	movs	r1, #18
 800edd0:	f7ff ff7c 	bl	800eccc <lsm6dsr_read_reg>
 800edd4:	b108      	cbz	r0, 800edda <lsm6dsr_reset_set+0x18>
 800edd6:	b003      	add	sp, #12
 800edd8:	bd30      	pop	{r4, r5, pc}
 800edda:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800edde:	f365 0300 	bfi	r3, r5, #0, #1
 800ede2:	f88d 3004 	strb.w	r3, [sp, #4]
 800ede6:	2301      	movs	r3, #1
 800ede8:	aa01      	add	r2, sp, #4
 800edea:	2112      	movs	r1, #18
 800edec:	4620      	mov	r0, r4
 800edee:	f7ff ff72 	bl	800ecd6 <lsm6dsr_write_reg>
 800edf2:	e7f0      	b.n	800edd6 <lsm6dsr_reset_set+0x14>

0800edf4 <lsm6dsr_xl_hp_path_internal_set>:
 800edf4:	b530      	push	{r4, r5, lr}
 800edf6:	b083      	sub	sp, #12
 800edf8:	4604      	mov	r4, r0
 800edfa:	460d      	mov	r5, r1
 800edfc:	2301      	movs	r3, #1
 800edfe:	aa01      	add	r2, sp, #4
 800ee00:	2156      	movs	r1, #86	; 0x56
 800ee02:	f7ff ff63 	bl	800eccc <lsm6dsr_read_reg>
 800ee06:	b108      	cbz	r0, 800ee0c <lsm6dsr_xl_hp_path_internal_set+0x18>
 800ee08:	b003      	add	sp, #12
 800ee0a:	bd30      	pop	{r4, r5, pc}
 800ee0c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ee10:	f365 1304 	bfi	r3, r5, #4, #1
 800ee14:	f88d 3004 	strb.w	r3, [sp, #4]
 800ee18:	2301      	movs	r3, #1
 800ee1a:	aa01      	add	r2, sp, #4
 800ee1c:	2156      	movs	r1, #86	; 0x56
 800ee1e:	4620      	mov	r0, r4
 800ee20:	f7ff ff59 	bl	800ecd6 <lsm6dsr_write_reg>
 800ee24:	e7f0      	b.n	800ee08 <lsm6dsr_xl_hp_path_internal_set+0x14>

0800ee26 <lsm6dsr_i3c_disable_set>:
 800ee26:	b530      	push	{r4, r5, lr}
 800ee28:	b083      	sub	sp, #12
 800ee2a:	4605      	mov	r5, r0
 800ee2c:	460c      	mov	r4, r1
 800ee2e:	2301      	movs	r3, #1
 800ee30:	aa01      	add	r2, sp, #4
 800ee32:	2118      	movs	r1, #24
 800ee34:	f7ff ff4a 	bl	800eccc <lsm6dsr_read_reg>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	b110      	cbz	r0, 800ee42 <lsm6dsr_i3c_disable_set+0x1c>
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	b003      	add	sp, #12
 800ee40:	bd30      	pop	{r4, r5, pc}
 800ee42:	09e3      	lsrs	r3, r4, #7
 800ee44:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ee48:	f363 0241 	bfi	r2, r3, #1, #1
 800ee4c:	f88d 2004 	strb.w	r2, [sp, #4]
 800ee50:	2301      	movs	r3, #1
 800ee52:	aa01      	add	r2, sp, #4
 800ee54:	2118      	movs	r1, #24
 800ee56:	4628      	mov	r0, r5
 800ee58:	f7ff ff3d 	bl	800ecd6 <lsm6dsr_write_reg>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	2800      	cmp	r0, #0
 800ee60:	d1ec      	bne.n	800ee3c <lsm6dsr_i3c_disable_set+0x16>
 800ee62:	2301      	movs	r3, #1
 800ee64:	466a      	mov	r2, sp
 800ee66:	2162      	movs	r1, #98	; 0x62
 800ee68:	4628      	mov	r0, r5
 800ee6a:	f7ff ff2f 	bl	800eccc <lsm6dsr_read_reg>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	2800      	cmp	r0, #0
 800ee72:	d1e3      	bne.n	800ee3c <lsm6dsr_i3c_disable_set+0x16>
 800ee74:	f89d 3000 	ldrb.w	r3, [sp]
 800ee78:	f364 03c4 	bfi	r3, r4, #3, #2
 800ee7c:	f88d 3000 	strb.w	r3, [sp]
 800ee80:	2301      	movs	r3, #1
 800ee82:	466a      	mov	r2, sp
 800ee84:	2162      	movs	r1, #98	; 0x62
 800ee86:	4628      	mov	r0, r5
 800ee88:	f7ff ff25 	bl	800ecd6 <lsm6dsr_write_reg>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	e7d5      	b.n	800ee3c <lsm6dsr_i3c_disable_set+0x16>

0800ee90 <lsm6dsr_pin_int1_route_set>:
 800ee90:	b530      	push	{r4, r5, lr}
 800ee92:	b083      	sub	sp, #12
 800ee94:	4605      	mov	r5, r0
 800ee96:	460c      	mov	r4, r1
 800ee98:	2102      	movs	r1, #2
 800ee9a:	f7ff ff72 	bl	800ed82 <lsm6dsr_mem_bank_set>
 800ee9e:	4602      	mov	r2, r0
 800eea0:	b110      	cbz	r0, 800eea8 <lsm6dsr_pin_int1_route_set+0x18>
 800eea2:	4610      	mov	r0, r2
 800eea4:	b003      	add	sp, #12
 800eea6:	bd30      	pop	{r4, r5, pc}
 800eea8:	2301      	movs	r3, #1
 800eeaa:	1ca2      	adds	r2, r4, #2
 800eeac:	210a      	movs	r1, #10
 800eeae:	4628      	mov	r0, r5
 800eeb0:	f7ff ff11 	bl	800ecd6 <lsm6dsr_write_reg>
 800eeb4:	4602      	mov	r2, r0
 800eeb6:	2800      	cmp	r0, #0
 800eeb8:	d1f3      	bne.n	800eea2 <lsm6dsr_pin_int1_route_set+0x12>
 800eeba:	2301      	movs	r3, #1
 800eebc:	1ce2      	adds	r2, r4, #3
 800eebe:	210b      	movs	r1, #11
 800eec0:	4628      	mov	r0, r5
 800eec2:	f7ff ff08 	bl	800ecd6 <lsm6dsr_write_reg>
 800eec6:	4602      	mov	r2, r0
 800eec8:	2800      	cmp	r0, #0
 800eeca:	d1ea      	bne.n	800eea2 <lsm6dsr_pin_int1_route_set+0x12>
 800eecc:	2301      	movs	r3, #1
 800eece:	1d22      	adds	r2, r4, #4
 800eed0:	210c      	movs	r1, #12
 800eed2:	4628      	mov	r0, r5
 800eed4:	f7ff feff 	bl	800ecd6 <lsm6dsr_write_reg>
 800eed8:	4602      	mov	r2, r0
 800eeda:	2800      	cmp	r0, #0
 800eedc:	d1e1      	bne.n	800eea2 <lsm6dsr_pin_int1_route_set+0x12>
 800eede:	2100      	movs	r1, #0
 800eee0:	4628      	mov	r0, r5
 800eee2:	f7ff ff4e 	bl	800ed82 <lsm6dsr_mem_bank_set>
 800eee6:	4602      	mov	r2, r0
 800eee8:	2800      	cmp	r0, #0
 800eeea:	d1da      	bne.n	800eea2 <lsm6dsr_pin_int1_route_set+0x12>
 800eeec:	78a2      	ldrb	r2, [r4, #2]
 800eeee:	f3c2 13c0 	ubfx	r3, r2, #7, #1
 800eef2:	f3c2 1140 	ubfx	r1, r2, #5, #1
 800eef6:	430b      	orrs	r3, r1
 800eef8:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 800eefc:	430b      	orrs	r3, r1
 800eefe:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800ef02:	4313      	orrs	r3, r2
 800ef04:	78e2      	ldrb	r2, [r4, #3]
 800ef06:	f3c2 0100 	ubfx	r1, r2, #0, #1
 800ef0a:	430b      	orrs	r3, r1
 800ef0c:	f3c2 0140 	ubfx	r1, r2, #1, #1
 800ef10:	430b      	orrs	r3, r1
 800ef12:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800ef16:	430b      	orrs	r3, r1
 800ef18:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 800ef1c:	430b      	orrs	r3, r1
 800ef1e:	f3c2 1100 	ubfx	r1, r2, #4, #1
 800ef22:	430b      	orrs	r3, r1
 800ef24:	f3c2 1140 	ubfx	r1, r2, #5, #1
 800ef28:	430b      	orrs	r3, r1
 800ef2a:	f3c2 1180 	ubfx	r1, r2, #6, #1
 800ef2e:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 800ef32:	430b      	orrs	r3, r1
 800ef34:	7922      	ldrb	r2, [r4, #4]
 800ef36:	f3c2 0100 	ubfx	r1, r2, #0, #1
 800ef3a:	430b      	orrs	r3, r1
 800ef3c:	f3c2 0140 	ubfx	r1, r2, #1, #1
 800ef40:	430b      	orrs	r3, r1
 800ef42:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800ef46:	430b      	orrs	r3, r1
 800ef48:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 800ef4c:	430b      	orrs	r3, r1
 800ef4e:	f3c2 1100 	ubfx	r1, r2, #4, #1
 800ef52:	430b      	orrs	r3, r1
 800ef54:	f3c2 1140 	ubfx	r1, r2, #5, #1
 800ef58:	430b      	orrs	r3, r1
 800ef5a:	f3c2 1180 	ubfx	r1, r2, #6, #1
 800ef5e:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 800ef62:	430b      	orrs	r3, r1
 800ef64:	7862      	ldrb	r2, [r4, #1]
 800ef66:	f363 0241 	bfi	r2, r3, #1, #1
 800ef6a:	7062      	strb	r2, [r4, #1]
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	4622      	mov	r2, r4
 800ef70:	210d      	movs	r1, #13
 800ef72:	4628      	mov	r0, r5
 800ef74:	f7ff feaf 	bl	800ecd6 <lsm6dsr_write_reg>
 800ef78:	4602      	mov	r2, r0
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	d191      	bne.n	800eea2 <lsm6dsr_pin_int1_route_set+0x12>
 800ef7e:	2301      	movs	r3, #1
 800ef80:	18e2      	adds	r2, r4, r3
 800ef82:	215e      	movs	r1, #94	; 0x5e
 800ef84:	4628      	mov	r0, r5
 800ef86:	f7ff fea6 	bl	800ecd6 <lsm6dsr_write_reg>
 800ef8a:	4602      	mov	r2, r0
 800ef8c:	2800      	cmp	r0, #0
 800ef8e:	d188      	bne.n	800eea2 <lsm6dsr_pin_int1_route_set+0x12>
 800ef90:	2301      	movs	r3, #1
 800ef92:	aa01      	add	r2, sp, #4
 800ef94:	2158      	movs	r1, #88	; 0x58
 800ef96:	4628      	mov	r0, r5
 800ef98:	f7ff fe98 	bl	800eccc <lsm6dsr_read_reg>
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	7821      	ldrb	r1, [r4, #0]
 800efa0:	f3c1 13c0 	ubfx	r3, r1, #7, #1
 800efa4:	f3c1 0080 	ubfx	r0, r1, #2, #1
 800efa8:	4303      	orrs	r3, r0
 800efaa:	f3c1 1080 	ubfx	r0, r1, #6, #1
 800efae:	4303      	orrs	r3, r0
 800efb0:	f3c1 0040 	ubfx	r0, r1, #1, #1
 800efb4:	4303      	orrs	r3, r0
 800efb6:	f3c1 0000 	ubfx	r0, r1, #0, #1
 800efba:	4303      	orrs	r3, r0
 800efbc:	f3c1 1040 	ubfx	r0, r1, #5, #1
 800efc0:	4303      	orrs	r3, r0
 800efc2:	f3c1 1000 	ubfx	r0, r1, #4, #1
 800efc6:	4303      	orrs	r3, r0
 800efc8:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800efcc:	430b      	orrs	r3, r1
 800efce:	7861      	ldrb	r1, [r4, #1]
 800efd0:	f3c1 0080 	ubfx	r0, r1, #2, #1
 800efd4:	4303      	orrs	r3, r0
 800efd6:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 800efda:	4303      	orrs	r3, r0
 800efdc:	f3c1 1000 	ubfx	r0, r1, #4, #1
 800efe0:	4303      	orrs	r3, r0
 800efe2:	f3c1 1040 	ubfx	r0, r1, #5, #1
 800efe6:	4303      	orrs	r3, r0
 800efe8:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
 800efec:	ea43 1391 	orr.w	r3, r3, r1, lsr #6
 800eff0:	f013 0f01 	tst.w	r3, #1
 800eff4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800eff8:	bf14      	ite	ne
 800effa:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
 800effe:	f36f 13c7 	bfceq	r3, #7, #1
 800f002:	f88d 3004 	strb.w	r3, [sp, #4]
 800f006:	2a00      	cmp	r2, #0
 800f008:	f47f af4b 	bne.w	800eea2 <lsm6dsr_pin_int1_route_set+0x12>
 800f00c:	2301      	movs	r3, #1
 800f00e:	aa01      	add	r2, sp, #4
 800f010:	2158      	movs	r1, #88	; 0x58
 800f012:	4628      	mov	r0, r5
 800f014:	f7ff fe5f 	bl	800ecd6 <lsm6dsr_write_reg>
 800f018:	4602      	mov	r2, r0
 800f01a:	e742      	b.n	800eea2 <lsm6dsr_pin_int1_route_set+0x12>

0800f01c <lsm6dsr_pin_int1_route_get>:
 800f01c:	b538      	push	{r3, r4, r5, lr}
 800f01e:	4604      	mov	r4, r0
 800f020:	460d      	mov	r5, r1
 800f022:	2102      	movs	r1, #2
 800f024:	f7ff fead 	bl	800ed82 <lsm6dsr_mem_bank_set>
 800f028:	4603      	mov	r3, r0
 800f02a:	b108      	cbz	r0, 800f030 <lsm6dsr_pin_int1_route_get+0x14>
 800f02c:	4618      	mov	r0, r3
 800f02e:	bd38      	pop	{r3, r4, r5, pc}
 800f030:	2301      	movs	r3, #1
 800f032:	1caa      	adds	r2, r5, #2
 800f034:	210a      	movs	r1, #10
 800f036:	4620      	mov	r0, r4
 800f038:	f7ff fe48 	bl	800eccc <lsm6dsr_read_reg>
 800f03c:	4603      	mov	r3, r0
 800f03e:	2800      	cmp	r0, #0
 800f040:	d1f4      	bne.n	800f02c <lsm6dsr_pin_int1_route_get+0x10>
 800f042:	2301      	movs	r3, #1
 800f044:	1cea      	adds	r2, r5, #3
 800f046:	210b      	movs	r1, #11
 800f048:	4620      	mov	r0, r4
 800f04a:	f7ff fe3f 	bl	800eccc <lsm6dsr_read_reg>
 800f04e:	4603      	mov	r3, r0
 800f050:	2800      	cmp	r0, #0
 800f052:	d1eb      	bne.n	800f02c <lsm6dsr_pin_int1_route_get+0x10>
 800f054:	2301      	movs	r3, #1
 800f056:	1d2a      	adds	r2, r5, #4
 800f058:	210c      	movs	r1, #12
 800f05a:	4620      	mov	r0, r4
 800f05c:	f7ff fe36 	bl	800eccc <lsm6dsr_read_reg>
 800f060:	4603      	mov	r3, r0
 800f062:	2800      	cmp	r0, #0
 800f064:	d1e2      	bne.n	800f02c <lsm6dsr_pin_int1_route_get+0x10>
 800f066:	2100      	movs	r1, #0
 800f068:	4620      	mov	r0, r4
 800f06a:	f7ff fe8a 	bl	800ed82 <lsm6dsr_mem_bank_set>
 800f06e:	4603      	mov	r3, r0
 800f070:	2800      	cmp	r0, #0
 800f072:	d1db      	bne.n	800f02c <lsm6dsr_pin_int1_route_get+0x10>
 800f074:	2301      	movs	r3, #1
 800f076:	462a      	mov	r2, r5
 800f078:	210d      	movs	r1, #13
 800f07a:	4620      	mov	r0, r4
 800f07c:	f7ff fe26 	bl	800eccc <lsm6dsr_read_reg>
 800f080:	4603      	mov	r3, r0
 800f082:	2800      	cmp	r0, #0
 800f084:	d1d2      	bne.n	800f02c <lsm6dsr_pin_int1_route_get+0x10>
 800f086:	2301      	movs	r3, #1
 800f088:	18ea      	adds	r2, r5, r3
 800f08a:	215e      	movs	r1, #94	; 0x5e
 800f08c:	4620      	mov	r0, r4
 800f08e:	f7ff fe1d 	bl	800eccc <lsm6dsr_read_reg>
 800f092:	4603      	mov	r3, r0
 800f094:	e7ca      	b.n	800f02c <lsm6dsr_pin_int1_route_get+0x10>

0800f096 <lsm6dsr_wkup_threshold_set>:
 800f096:	b530      	push	{r4, r5, lr}
 800f098:	b083      	sub	sp, #12
 800f09a:	4604      	mov	r4, r0
 800f09c:	460d      	mov	r5, r1
 800f09e:	2301      	movs	r3, #1
 800f0a0:	aa01      	add	r2, sp, #4
 800f0a2:	215b      	movs	r1, #91	; 0x5b
 800f0a4:	f7ff fe12 	bl	800eccc <lsm6dsr_read_reg>
 800f0a8:	b108      	cbz	r0, 800f0ae <lsm6dsr_wkup_threshold_set+0x18>
 800f0aa:	b003      	add	sp, #12
 800f0ac:	bd30      	pop	{r4, r5, pc}
 800f0ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f0b2:	f365 0305 	bfi	r3, r5, #0, #6
 800f0b6:	f88d 3004 	strb.w	r3, [sp, #4]
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	aa01      	add	r2, sp, #4
 800f0be:	215b      	movs	r1, #91	; 0x5b
 800f0c0:	4620      	mov	r0, r4
 800f0c2:	f7ff fe08 	bl	800ecd6 <lsm6dsr_write_reg>
 800f0c6:	e7f0      	b.n	800f0aa <lsm6dsr_wkup_threshold_set+0x14>

0800f0c8 <lsm6dsr_fsm_enable_get>:
 800f0c8:	b538      	push	{r3, r4, r5, lr}
 800f0ca:	4604      	mov	r4, r0
 800f0cc:	460d      	mov	r5, r1
 800f0ce:	2102      	movs	r1, #2
 800f0d0:	f7ff fe57 	bl	800ed82 <lsm6dsr_mem_bank_set>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	b108      	cbz	r0, 800f0dc <lsm6dsr_fsm_enable_get+0x14>
 800f0d8:	4618      	mov	r0, r3
 800f0da:	bd38      	pop	{r3, r4, r5, pc}
 800f0dc:	2301      	movs	r3, #1
 800f0de:	462a      	mov	r2, r5
 800f0e0:	2146      	movs	r1, #70	; 0x46
 800f0e2:	4620      	mov	r0, r4
 800f0e4:	f7ff fdf2 	bl	800eccc <lsm6dsr_read_reg>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	2800      	cmp	r0, #0
 800f0ec:	d1f4      	bne.n	800f0d8 <lsm6dsr_fsm_enable_get+0x10>
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	18ea      	adds	r2, r5, r3
 800f0f2:	2147      	movs	r1, #71	; 0x47
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	f7ff fde9 	bl	800eccc <lsm6dsr_read_reg>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2800      	cmp	r0, #0
 800f0fe:	d1eb      	bne.n	800f0d8 <lsm6dsr_fsm_enable_get+0x10>
 800f100:	2100      	movs	r1, #0
 800f102:	4620      	mov	r0, r4
 800f104:	f7ff fe3d 	bl	800ed82 <lsm6dsr_mem_bank_set>
 800f108:	4603      	mov	r3, r0
 800f10a:	e7e5      	b.n	800f0d8 <lsm6dsr_fsm_enable_get+0x10>

0800f10c <lsm6dsr_fsm_data_rate_get>:
 800f10c:	b530      	push	{r4, r5, lr}
 800f10e:	b083      	sub	sp, #12
 800f110:	4604      	mov	r4, r0
 800f112:	460d      	mov	r5, r1
 800f114:	2102      	movs	r1, #2
 800f116:	f7ff fe34 	bl	800ed82 <lsm6dsr_mem_bank_set>
 800f11a:	4602      	mov	r2, r0
 800f11c:	b148      	cbz	r0, 800f132 <lsm6dsr_fsm_data_rate_get+0x26>
 800f11e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f122:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800f126:	2b03      	cmp	r3, #3
 800f128:	d820      	bhi.n	800f16c <lsm6dsr_fsm_data_rate_get+0x60>
 800f12a:	e8df f003 	tbb	[pc, r3]
 800f12e:	1611      	.short	0x1611
 800f130:	1c19      	.short	0x1c19
 800f132:	2301      	movs	r3, #1
 800f134:	aa01      	add	r2, sp, #4
 800f136:	215f      	movs	r1, #95	; 0x5f
 800f138:	4620      	mov	r0, r4
 800f13a:	f7ff fdc7 	bl	800eccc <lsm6dsr_read_reg>
 800f13e:	4602      	mov	r2, r0
 800f140:	2800      	cmp	r0, #0
 800f142:	d1ec      	bne.n	800f11e <lsm6dsr_fsm_data_rate_get+0x12>
 800f144:	2100      	movs	r1, #0
 800f146:	4620      	mov	r0, r4
 800f148:	f7ff fe1b 	bl	800ed82 <lsm6dsr_mem_bank_set>
 800f14c:	4602      	mov	r2, r0
 800f14e:	e7e6      	b.n	800f11e <lsm6dsr_fsm_data_rate_get+0x12>
 800f150:	2300      	movs	r3, #0
 800f152:	702b      	strb	r3, [r5, #0]
 800f154:	4610      	mov	r0, r2
 800f156:	b003      	add	sp, #12
 800f158:	bd30      	pop	{r4, r5, pc}
 800f15a:	2301      	movs	r3, #1
 800f15c:	702b      	strb	r3, [r5, #0]
 800f15e:	e7f9      	b.n	800f154 <lsm6dsr_fsm_data_rate_get+0x48>
 800f160:	2302      	movs	r3, #2
 800f162:	702b      	strb	r3, [r5, #0]
 800f164:	e7f6      	b.n	800f154 <lsm6dsr_fsm_data_rate_get+0x48>
 800f166:	2303      	movs	r3, #3
 800f168:	702b      	strb	r3, [r5, #0]
 800f16a:	e7f3      	b.n	800f154 <lsm6dsr_fsm_data_rate_get+0x48>
 800f16c:	2300      	movs	r3, #0
 800f16e:	702b      	strb	r3, [r5, #0]
 800f170:	e7f0      	b.n	800f154 <lsm6dsr_fsm_data_rate_get+0x48>

0800f172 <lsm6dsr_xl_data_rate_set>:
 800f172:	b530      	push	{r4, r5, lr}
 800f174:	b083      	sub	sp, #12
 800f176:	4604      	mov	r4, r0
 800f178:	460d      	mov	r5, r1
 800f17a:	a901      	add	r1, sp, #4
 800f17c:	f7ff ffa4 	bl	800f0c8 <lsm6dsr_fsm_enable_get>
 800f180:	4603      	mov	r3, r0
 800f182:	2800      	cmp	r0, #0
 800f184:	d147      	bne.n	800f216 <lsm6dsr_xl_data_rate_set+0xa4>
 800f186:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f18a:	f3c2 0300 	ubfx	r3, r2, #0, #1
 800f18e:	f3c2 0140 	ubfx	r1, r2, #1, #1
 800f192:	430b      	orrs	r3, r1
 800f194:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800f198:	430b      	orrs	r3, r1
 800f19a:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 800f19e:	430b      	orrs	r3, r1
 800f1a0:	f3c2 1100 	ubfx	r1, r2, #4, #1
 800f1a4:	430b      	orrs	r3, r1
 800f1a6:	f3c2 1140 	ubfx	r1, r2, #5, #1
 800f1aa:	430b      	orrs	r3, r1
 800f1ac:	f3c2 1180 	ubfx	r1, r2, #6, #1
 800f1b0:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 800f1b4:	430b      	orrs	r3, r1
 800f1b6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f1ba:	f3c2 0100 	ubfx	r1, r2, #0, #1
 800f1be:	430b      	orrs	r3, r1
 800f1c0:	f3c2 0140 	ubfx	r1, r2, #1, #1
 800f1c4:	430b      	orrs	r3, r1
 800f1c6:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800f1ca:	430b      	orrs	r3, r1
 800f1cc:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 800f1d0:	430b      	orrs	r3, r1
 800f1d2:	f3c2 1100 	ubfx	r1, r2, #4, #1
 800f1d6:	430b      	orrs	r3, r1
 800f1d8:	f3c2 1140 	ubfx	r1, r2, #5, #1
 800f1dc:	430b      	orrs	r3, r1
 800f1de:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 800f1e2:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
 800f1e6:	f013 0f01 	tst.w	r3, #1
 800f1ea:	d117      	bne.n	800f21c <lsm6dsr_xl_data_rate_set+0xaa>
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	466a      	mov	r2, sp
 800f1f0:	2110      	movs	r1, #16
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	f7ff fd6a 	bl	800eccc <lsm6dsr_read_reg>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	b960      	cbnz	r0, 800f216 <lsm6dsr_xl_data_rate_set+0xa4>
 800f1fc:	f89d 3000 	ldrb.w	r3, [sp]
 800f200:	f365 1307 	bfi	r3, r5, #4, #4
 800f204:	f88d 3000 	strb.w	r3, [sp]
 800f208:	2301      	movs	r3, #1
 800f20a:	466a      	mov	r2, sp
 800f20c:	2110      	movs	r1, #16
 800f20e:	4620      	mov	r0, r4
 800f210:	f7ff fd61 	bl	800ecd6 <lsm6dsr_write_reg>
 800f214:	4603      	mov	r3, r0
 800f216:	4618      	mov	r0, r3
 800f218:	b003      	add	sp, #12
 800f21a:	bd30      	pop	{r4, r5, pc}
 800f21c:	f10d 0103 	add.w	r1, sp, #3
 800f220:	4620      	mov	r0, r4
 800f222:	f7ff ff73 	bl	800f10c <lsm6dsr_fsm_data_rate_get>
 800f226:	4603      	mov	r3, r0
 800f228:	2800      	cmp	r0, #0
 800f22a:	d1f4      	bne.n	800f216 <lsm6dsr_xl_data_rate_set+0xa4>
 800f22c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f230:	2b03      	cmp	r3, #3
 800f232:	d8db      	bhi.n	800f1ec <lsm6dsr_xl_data_rate_set+0x7a>
 800f234:	e8df f003 	tbb	[pc, r3]
 800f238:	0e0a0602 	.word	0x0e0a0602
 800f23c:	2d01      	cmp	r5, #1
 800f23e:	bf38      	it	cc
 800f240:	2501      	movcc	r5, #1
 800f242:	e7d3      	b.n	800f1ec <lsm6dsr_xl_data_rate_set+0x7a>
 800f244:	2d02      	cmp	r5, #2
 800f246:	bf38      	it	cc
 800f248:	2502      	movcc	r5, #2
 800f24a:	e7cf      	b.n	800f1ec <lsm6dsr_xl_data_rate_set+0x7a>
 800f24c:	2d03      	cmp	r5, #3
 800f24e:	bf38      	it	cc
 800f250:	2503      	movcc	r5, #3
 800f252:	e7cb      	b.n	800f1ec <lsm6dsr_xl_data_rate_set+0x7a>
 800f254:	2d04      	cmp	r5, #4
 800f256:	bf38      	it	cc
 800f258:	2504      	movcc	r5, #4
 800f25a:	e7c7      	b.n	800f1ec <lsm6dsr_xl_data_rate_set+0x7a>

0800f25c <lsm6dsr_gy_data_rate_set>:
 800f25c:	b530      	push	{r4, r5, lr}
 800f25e:	b083      	sub	sp, #12
 800f260:	4604      	mov	r4, r0
 800f262:	460d      	mov	r5, r1
 800f264:	a901      	add	r1, sp, #4
 800f266:	f7ff ff2f 	bl	800f0c8 <lsm6dsr_fsm_enable_get>
 800f26a:	4603      	mov	r3, r0
 800f26c:	2800      	cmp	r0, #0
 800f26e:	d147      	bne.n	800f300 <lsm6dsr_gy_data_rate_set+0xa4>
 800f270:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f274:	f3c2 0300 	ubfx	r3, r2, #0, #1
 800f278:	f3c2 0140 	ubfx	r1, r2, #1, #1
 800f27c:	430b      	orrs	r3, r1
 800f27e:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800f282:	430b      	orrs	r3, r1
 800f284:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 800f288:	430b      	orrs	r3, r1
 800f28a:	f3c2 1100 	ubfx	r1, r2, #4, #1
 800f28e:	430b      	orrs	r3, r1
 800f290:	f3c2 1140 	ubfx	r1, r2, #5, #1
 800f294:	430b      	orrs	r3, r1
 800f296:	f3c2 1180 	ubfx	r1, r2, #6, #1
 800f29a:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 800f29e:	430b      	orrs	r3, r1
 800f2a0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f2a4:	f3c2 0100 	ubfx	r1, r2, #0, #1
 800f2a8:	430b      	orrs	r3, r1
 800f2aa:	f3c2 0140 	ubfx	r1, r2, #1, #1
 800f2ae:	430b      	orrs	r3, r1
 800f2b0:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800f2b4:	430b      	orrs	r3, r1
 800f2b6:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 800f2ba:	430b      	orrs	r3, r1
 800f2bc:	f3c2 1100 	ubfx	r1, r2, #4, #1
 800f2c0:	430b      	orrs	r3, r1
 800f2c2:	f3c2 1140 	ubfx	r1, r2, #5, #1
 800f2c6:	430b      	orrs	r3, r1
 800f2c8:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 800f2cc:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
 800f2d0:	f013 0f01 	tst.w	r3, #1
 800f2d4:	d117      	bne.n	800f306 <lsm6dsr_gy_data_rate_set+0xaa>
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	466a      	mov	r2, sp
 800f2da:	2111      	movs	r1, #17
 800f2dc:	4620      	mov	r0, r4
 800f2de:	f7ff fcf5 	bl	800eccc <lsm6dsr_read_reg>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	b960      	cbnz	r0, 800f300 <lsm6dsr_gy_data_rate_set+0xa4>
 800f2e6:	f89d 3000 	ldrb.w	r3, [sp]
 800f2ea:	f365 1307 	bfi	r3, r5, #4, #4
 800f2ee:	f88d 3000 	strb.w	r3, [sp]
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	466a      	mov	r2, sp
 800f2f6:	2111      	movs	r1, #17
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	f7ff fcec 	bl	800ecd6 <lsm6dsr_write_reg>
 800f2fe:	4603      	mov	r3, r0
 800f300:	4618      	mov	r0, r3
 800f302:	b003      	add	sp, #12
 800f304:	bd30      	pop	{r4, r5, pc}
 800f306:	f10d 0103 	add.w	r1, sp, #3
 800f30a:	4620      	mov	r0, r4
 800f30c:	f7ff fefe 	bl	800f10c <lsm6dsr_fsm_data_rate_get>
 800f310:	4603      	mov	r3, r0
 800f312:	2800      	cmp	r0, #0
 800f314:	d1f4      	bne.n	800f300 <lsm6dsr_gy_data_rate_set+0xa4>
 800f316:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f31a:	2b03      	cmp	r3, #3
 800f31c:	d8db      	bhi.n	800f2d6 <lsm6dsr_gy_data_rate_set+0x7a>
 800f31e:	e8df f003 	tbb	[pc, r3]
 800f322:	0602      	.short	0x0602
 800f324:	0e0a      	.short	0x0e0a
 800f326:	2d01      	cmp	r5, #1
 800f328:	bf38      	it	cc
 800f32a:	2501      	movcc	r5, #1
 800f32c:	e7d3      	b.n	800f2d6 <lsm6dsr_gy_data_rate_set+0x7a>
 800f32e:	2d02      	cmp	r5, #2
 800f330:	bf38      	it	cc
 800f332:	2502      	movcc	r5, #2
 800f334:	e7cf      	b.n	800f2d6 <lsm6dsr_gy_data_rate_set+0x7a>
 800f336:	2d03      	cmp	r5, #3
 800f338:	bf38      	it	cc
 800f33a:	2503      	movcc	r5, #3
 800f33c:	e7cb      	b.n	800f2d6 <lsm6dsr_gy_data_rate_set+0x7a>
 800f33e:	2d04      	cmp	r5, #4
 800f340:	bf38      	it	cc
 800f342:	2504      	movcc	r5, #4
 800f344:	e7c7      	b.n	800f2d6 <lsm6dsr_gy_data_rate_set+0x7a>
	...

0800f348 <get_temperature>:
 800f348:	b530      	push	{r4, r5, lr}
 800f34a:	b083      	sub	sp, #12
 800f34c:	4604      	mov	r4, r0
 800f34e:	4d12      	ldr	r5, [pc, #72]	; (800f398 <get_temperature+0x50>)
 800f350:	2200      	movs	r2, #0
 800f352:	2108      	movs	r1, #8
 800f354:	4628      	mov	r0, r5
 800f356:	f001 fef1 	bl	801113c <HAL_GPIO_WritePin>
 800f35a:	2302      	movs	r3, #2
 800f35c:	461a      	mov	r2, r3
 800f35e:	a901      	add	r1, sp, #4
 800f360:	480e      	ldr	r0, [pc, #56]	; (800f39c <get_temperature+0x54>)
 800f362:	f003 fb5c 	bl	8012a1e <HAL_SPI_Receive>
 800f366:	2201      	movs	r2, #1
 800f368:	2108      	movs	r1, #8
 800f36a:	4628      	mov	r0, r5
 800f36c:	f001 fee6 	bl	801113c <HAL_GPIO_WritePin>
 800f370:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f374:	f013 0004 	ands.w	r0, r3, #4
 800f378:	d10c      	bne.n	800f394 <get_temperature+0x4c>
 800f37a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f37e:	08db      	lsrs	r3, r3, #3
 800f380:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800f384:	ee07 3a90 	vmov	s15, r3
 800f388:	eefa 7acf 	vcvt.f32.s32	s15, s15, #2
 800f38c:	edc4 7a00 	vstr	s15, [r4]
 800f390:	b003      	add	sp, #12
 800f392:	bd30      	pop	{r4, r5, pc}
 800f394:	2001      	movs	r0, #1
 800f396:	e7fb      	b.n	800f390 <get_temperature+0x48>
 800f398:	40020000 	.word	0x40020000
 800f39c:	20005674 	.word	0x20005674

0800f3a0 <ms_write_command>:
 800f3a0:	b510      	push	{r4, lr}
 800f3a2:	b082      	sub	sp, #8
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	f88d 1007 	strb.w	r1, [sp, #7]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	8881      	ldrh	r1, [r0, #4]
 800f3ae:	6800      	ldr	r0, [r0, #0]
 800f3b0:	f001 fec4 	bl	801113c <HAL_GPIO_WritePin>
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	f10d 0107 	add.w	r1, sp, #7
 800f3bc:	68a0      	ldr	r0, [r4, #8]
 800f3be:	f003 f94c 	bl	801265a <HAL_SPI_Transmit>
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	88a1      	ldrh	r1, [r4, #4]
 800f3c6:	6820      	ldr	r0, [r4, #0]
 800f3c8:	f001 feb8 	bl	801113c <HAL_GPIO_WritePin>
 800f3cc:	b002      	add	sp, #8
 800f3ce:	bd10      	pop	{r4, pc}

0800f3d0 <ms_read_bytes>:
 800f3d0:	b570      	push	{r4, r5, r6, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	4604      	mov	r4, r0
 800f3d6:	4615      	mov	r5, r2
 800f3d8:	461e      	mov	r6, r3
 800f3da:	f88d 1007 	strb.w	r1, [sp, #7]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	8881      	ldrh	r1, [r0, #4]
 800f3e2:	6800      	ldr	r0, [r0, #0]
 800f3e4:	f001 feaa 	bl	801113c <HAL_GPIO_WritePin>
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	f10d 0107 	add.w	r1, sp, #7
 800f3f0:	68a0      	ldr	r0, [r4, #8]
 800f3f2:	f003 f932 	bl	801265a <HAL_SPI_Transmit>
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	4632      	mov	r2, r6
 800f3fa:	4629      	mov	r1, r5
 800f3fc:	68a0      	ldr	r0, [r4, #8]
 800f3fe:	f003 fb0e 	bl	8012a1e <HAL_SPI_Receive>
 800f402:	2201      	movs	r2, #1
 800f404:	88a1      	ldrh	r1, [r4, #4]
 800f406:	6820      	ldr	r0, [r4, #0]
 800f408:	f001 fe98 	bl	801113c <HAL_GPIO_WritePin>
 800f40c:	b002      	add	sp, #8
 800f40e:	bd70      	pop	{r4, r5, r6, pc}

0800f410 <ms5607_init>:
 800f410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f414:	b082      	sub	sp, #8
 800f416:	4605      	mov	r5, r0
 800f418:	f005 fda2 	bl	8014f60 <osKernelGetTickFreq>
 800f41c:	4604      	mov	r4, r0
 800f41e:	211e      	movs	r1, #30
 800f420:	4628      	mov	r0, r5
 800f422:	f7ff ffbd 	bl	800f3a0 <ms_write_command>
 800f426:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800f42a:	4813      	ldr	r0, [pc, #76]	; (800f478 <ms5607_init+0x68>)
 800f42c:	fba0 3004 	umull	r3, r0, r0, r4
 800f430:	0980      	lsrs	r0, r0, #6
 800f432:	f005 fdfe 	bl	8015032 <osDelay>
 800f436:	f105 030e 	add.w	r3, r5, #14
 800f43a:	f105 081a 	add.w	r8, r5, #26
 800f43e:	461e      	mov	r6, r3
 800f440:	2700      	movs	r7, #0
 800f442:	f1c3 04a2 	rsb	r4, r3, #162	; 0xa2
 800f446:	f8ad 7004 	strh.w	r7, [sp, #4]
 800f44a:	19a1      	adds	r1, r4, r6
 800f44c:	2302      	movs	r3, #2
 800f44e:	aa01      	add	r2, sp, #4
 800f450:	b2c9      	uxtb	r1, r1
 800f452:	4628      	mov	r0, r5
 800f454:	f7ff ffbc 	bl	800f3d0 <ms_read_bytes>
 800f458:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f45c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f460:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f464:	f826 3b02 	strh.w	r3, [r6], #2
 800f468:	4546      	cmp	r6, r8
 800f46a:	d1ec      	bne.n	800f446 <ms5607_init+0x36>
 800f46c:	2001      	movs	r0, #1
 800f46e:	f005 fde0 	bl	8015032 <osDelay>
 800f472:	b002      	add	sp, #8
 800f474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f478:	10624dd3 	.word	0x10624dd3

0800f47c <ms5607_prepare_temp>:
 800f47c:	b508      	push	{r3, lr}
 800f47e:	2202      	movs	r2, #2
 800f480:	7342      	strb	r2, [r0, #13]
 800f482:	7b01      	ldrb	r1, [r0, #12]
 800f484:	3128      	adds	r1, #40	; 0x28
 800f486:	0049      	lsls	r1, r1, #1
 800f488:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 800f48c:	f7ff ff88 	bl	800f3a0 <ms_write_command>
 800f490:	bd08      	pop	{r3, pc}

0800f492 <ms5607_prepare_pres>:
 800f492:	b508      	push	{r3, lr}
 800f494:	2201      	movs	r2, #1
 800f496:	7342      	strb	r2, [r0, #13]
 800f498:	7b01      	ldrb	r1, [r0, #12]
 800f49a:	3120      	adds	r1, #32
 800f49c:	4091      	lsls	r1, r2
 800f49e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 800f4a2:	f7ff ff7d 	bl	800f3a0 <ms_write_command>
 800f4a6:	bd08      	pop	{r3, pc}

0800f4a8 <ms5607_get_temp_pres>:
 800f4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ac:	7f44      	ldrb	r4, [r0, #29]
 800f4ae:	7f83      	ldrb	r3, [r0, #30]
 800f4b0:	021b      	lsls	r3, r3, #8
 800f4b2:	eb03 4304 	add.w	r3, r3, r4, lsl #16
 800f4b6:	7fc4      	ldrb	r4, [r0, #31]
 800f4b8:	4423      	add	r3, r4
 800f4ba:	8ac4      	ldrh	r4, [r0, #22]
 800f4bc:	eba3 2304 	sub.w	r3, r3, r4, lsl #8
 800f4c0:	ea4f 79e3 	mov.w	r9, r3, asr #31
 800f4c4:	8b06      	ldrh	r6, [r0, #24]
 800f4c6:	fba6 ab03 	umull	sl, fp, r6, r3
 800f4ca:	fb06 bb09 	mla	fp, r6, r9, fp
 800f4ce:	ea4f 54da 	mov.w	r4, sl, lsr #23
 800f4d2:	ea44 244b 	orr.w	r4, r4, fp, lsl #9
 800f4d6:	f504 64fa 	add.w	r4, r4, #2000	; 0x7d0
 800f4da:	600c      	str	r4, [r1, #0]
 800f4dc:	f890 c01a 	ldrb.w	ip, [r0, #26]
 800f4e0:	7ec4      	ldrb	r4, [r0, #27]
 800f4e2:	0224      	lsls	r4, r4, #8
 800f4e4:	eb04 440c 	add.w	r4, r4, ip, lsl #16
 800f4e8:	f890 c01c 	ldrb.w	ip, [r0, #28]
 800f4ec:	44a4      	add	ip, r4
 800f4ee:	4664      	mov	r4, ip
 800f4f0:	17e5      	asrs	r5, r4, #31
 800f4f2:	f8b0 a012 	ldrh.w	sl, [r0, #18]
 800f4f6:	fbaa 6703 	umull	r6, r7, sl, r3
 800f4fa:	fb0a 7709 	mla	r7, sl, r9, r7
 800f4fe:	09f1      	lsrs	r1, r6, #7
 800f500:	ea41 6147 	orr.w	r1, r1, r7, lsl #25
 800f504:	ea4f 1ee7 	mov.w	lr, r7, asr #7
 800f508:	89c6      	ldrh	r6, [r0, #14]
 800f50a:	ea4f 4a06 	mov.w	sl, r6, lsl #16
 800f50e:	eb11 060a 	adds.w	r6, r1, sl
 800f512:	f04f 0100 	mov.w	r1, #0
 800f516:	eb4e 0e01 	adc.w	lr, lr, r1
 800f51a:	fb0c fe0e 	mul.w	lr, ip, lr
 800f51e:	fb06 ee05 	mla	lr, r6, r5, lr
 800f522:	fbac 4506 	umull	r4, r5, ip, r6
 800f526:	4475      	add	r5, lr
 800f528:	0d61      	lsrs	r1, r4, #21
 800f52a:	ea41 21c5 	orr.w	r1, r1, r5, lsl #11
 800f52e:	ea4f 5c65 	mov.w	ip, r5, asr #21
 800f532:	8a84      	ldrh	r4, [r0, #20]
 800f534:	fba4 6703 	umull	r6, r7, r4, r3
 800f538:	fb04 7709 	mla	r7, r4, r9, r7
 800f53c:	09b3      	lsrs	r3, r6, #6
 800f53e:	ea43 6387 	orr.w	r3, r3, r7, lsl #26
 800f542:	11bc      	asrs	r4, r7, #6
 800f544:	8a06      	ldrh	r6, [r0, #16]
 800f546:	2500      	movs	r5, #0
 800f548:	ea45 30d6 	orr.w	r0, r5, r6, lsr #15
 800f54c:	0475      	lsls	r5, r6, #17
 800f54e:	195b      	adds	r3, r3, r5
 800f550:	eb40 0404 	adc.w	r4, r0, r4
 800f554:	1ac9      	subs	r1, r1, r3
 800f556:	eb6c 0c04 	sbc.w	ip, ip, r4
 800f55a:	0bc9      	lsrs	r1, r1, #15
 800f55c:	ea41 414c 	orr.w	r1, r1, ip, lsl #17
 800f560:	6011      	str	r1, [r2, #0]
 800f562:	2001      	movs	r0, #1
 800f564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f568 <ms5607_read_raw>:
 800f568:	b510      	push	{r4, lr}
 800f56a:	4604      	mov	r4, r0
 800f56c:	7b43      	ldrb	r3, [r0, #13]
 800f56e:	2b01      	cmp	r3, #1
 800f570:	d003      	beq.n	800f57a <ms5607_read_raw+0x12>
 800f572:	2b02      	cmp	r3, #2
 800f574:	d008      	beq.n	800f588 <ms5607_read_raw+0x20>
 800f576:	2000      	movs	r0, #0
 800f578:	bd10      	pop	{r4, pc}
 800f57a:	2303      	movs	r3, #3
 800f57c:	f100 021a 	add.w	r2, r0, #26
 800f580:	2100      	movs	r1, #0
 800f582:	f7ff ff25 	bl	800f3d0 <ms_read_bytes>
 800f586:	e005      	b.n	800f594 <ms5607_read_raw+0x2c>
 800f588:	2303      	movs	r3, #3
 800f58a:	f100 021d 	add.w	r2, r0, #29
 800f58e:	2100      	movs	r1, #0
 800f590:	f7ff ff1e 	bl	800f3d0 <ms_read_bytes>
 800f594:	2001      	movs	r0, #1
 800f596:	7360      	strb	r0, [r4, #13]
 800f598:	e7ee      	b.n	800f578 <ms5607_read_raw+0x10>

0800f59a <Error_Handler>:
 800f59a:	b672      	cpsid	i
 800f59c:	e7fe      	b.n	800f59c <Error_Handler+0x2>
	...

0800f5a0 <task_buzzer>:
 800f5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5a4:	4b2f      	ldr	r3, [pc, #188]	; (800f664 <task_buzzer+0xc4>)
 800f5a6:	2234      	movs	r2, #52	; 0x34
 800f5a8:	492f      	ldr	r1, [pc, #188]	; (800f668 <task_buzzer+0xc8>)
 800f5aa:	2001      	movs	r0, #1
 800f5ac:	f000 fe52 	bl	8010254 <log_log>
 800f5b0:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800f5b4:	482d      	ldr	r0, [pc, #180]	; (800f66c <task_buzzer+0xcc>)
 800f5b6:	f7fd ff6f 	bl	800d498 <buzzer_set_freq>
 800f5ba:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800f67c <task_buzzer+0xdc>
 800f5be:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 800f680 <task_buzzer+0xe0>
 800f5c2:	e02d      	b.n	800f620 <task_buzzer+0x80>
 800f5c4:	3b41      	subs	r3, #65	; 0x41
 800f5c6:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800f5ca:	4628      	mov	r0, r5
 800f5cc:	f7fd ff64 	bl	800d498 <buzzer_set_freq>
 800f5d0:	46ba      	mov	sl, r7
 800f5d2:	4628      	mov	r0, r5
 800f5d4:	f7fd ff80 	bl	800d4d8 <buzzer_start>
 800f5d8:	4650      	mov	r0, sl
 800f5da:	f005 fd2a 	bl	8015032 <osDelay>
 800f5de:	4628      	mov	r0, r5
 800f5e0:	f7fd ff82 	bl	800d4e8 <buzzer_stop>
 800f5e4:	4638      	mov	r0, r7
 800f5e6:	f005 fd24 	bl	8015032 <osDelay>
 800f5ea:	42b4      	cmp	r4, r6
 800f5ec:	d014      	beq.n	800f618 <task_buzzer+0x78>
 800f5ee:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f5f2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f5f6:	b2d2      	uxtb	r2, r2
 800f5f8:	2a07      	cmp	r2, #7
 800f5fa:	d9e3      	bls.n	800f5c4 <task_buzzer+0x24>
 800f5fc:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f600:	b2d2      	uxtb	r2, r2
 800f602:	2a07      	cmp	r2, #7
 800f604:	d8e5      	bhi.n	800f5d2 <task_buzzer+0x32>
 800f606:	3b61      	subs	r3, #97	; 0x61
 800f608:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800f60c:	4628      	mov	r0, r5
 800f60e:	f7fd ff43 	bl	800d498 <buzzer_set_freq>
 800f612:	f04f 0a28 	mov.w	sl, #40	; 0x28
 800f616:	e7dc      	b.n	800f5d2 <task_buzzer+0x32>
 800f618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f61c:	f005 fd09 	bl	8015032 <osDelay>
 800f620:	f04f 33ff 	mov.w	r3, #4294967295
 800f624:	2200      	movs	r2, #0
 800f626:	21ff      	movs	r1, #255	; 0xff
 800f628:	f8d8 0000 	ldr.w	r0, [r8]
 800f62c:	f005 fd8d 	bl	801514a <osEventFlagsWait>
 800f630:	b2c4      	uxtb	r4, r0
 800f632:	4621      	mov	r1, r4
 800f634:	f8d8 0000 	ldr.w	r0, [r8]
 800f638:	f005 fd66 	bl	8015108 <osEventFlagsClear>
 800f63c:	4b0c      	ldr	r3, [pc, #48]	; (800f670 <task_buzzer+0xd0>)
 800f63e:	7f19      	ldrb	r1, [r3, #28]
 800f640:	480a      	ldr	r0, [pc, #40]	; (800f66c <task_buzzer+0xcc>)
 800f642:	f7fd feff 	bl	800d444 <buzzer_set_volume>
 800f646:	4b0b      	ldr	r3, [pc, #44]	; (800f674 <task_buzzer+0xd4>)
 800f648:	5d1b      	ldrb	r3, [r3, r4]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d0e4      	beq.n	800f618 <task_buzzer+0x78>
 800f64e:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800f652:	4e09      	ldr	r6, [pc, #36]	; (800f678 <task_buzzer+0xd8>)
 800f654:	1834      	adds	r4, r6, r0
 800f656:	4418      	add	r0, r3
 800f658:	4406      	add	r6, r0
 800f65a:	f04f 0a00 	mov.w	sl, #0
 800f65e:	4d03      	ldr	r5, [pc, #12]	; (800f66c <task_buzzer+0xcc>)
 800f660:	2764      	movs	r7, #100	; 0x64
 800f662:	e7c4      	b.n	800f5ee <task_buzzer+0x4e>
 800f664:	08019d64 	.word	0x08019d64
 800f668:	08019d8a 	.word	0x08019d8a
 800f66c:	20000008 	.word	0x20000008
 800f670:	20000474 	.word	0x20000474
 800f674:	08019de0 	.word	0x08019de0
 800f678:	08019d98 	.word	0x08019d98
 800f67c:	200053e8 	.word	0x200053e8
 800f680:	08019de8 	.word	0x08019de8

0800f684 <task_cli>:
 800f684:	b538      	push	{r3, r4, r5, lr}
 800f686:	4b0d      	ldr	r3, [pc, #52]	; (800f6bc <task_cli+0x38>)
 800f688:	2210      	movs	r2, #16
 800f68a:	490d      	ldr	r1, [pc, #52]	; (800f6c0 <task_cli+0x3c>)
 800f68c:	2001      	movs	r0, #1
 800f68e:	f000 fde1 	bl	8010254 <log_log>
 800f692:	490c      	ldr	r1, [pc, #48]	; (800f6c4 <task_cli+0x40>)
 800f694:	480c      	ldr	r0, [pc, #48]	; (800f6c8 <task_cli+0x44>)
 800f696:	f7fd f90d 	bl	800c8b4 <cli_enter>
 800f69a:	f005 fc57 	bl	8014f4c <osKernelGetTickCount>
 800f69e:	4604      	mov	r4, r0
 800f6a0:	f005 fc5e 	bl	8014f60 <osKernelGetTickFreq>
 800f6a4:	4b09      	ldr	r3, [pc, #36]	; (800f6cc <task_cli+0x48>)
 800f6a6:	fba3 3500 	umull	r3, r5, r3, r0
 800f6aa:	096d      	lsrs	r5, r5, #5
 800f6ac:	f7fc fffe 	bl	800c6ac <cli_process>
 800f6b0:	442c      	add	r4, r5
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	f005 fccb 	bl	801504e <osDelayUntil>
 800f6b8:	e7f8      	b.n	800f6ac <task_cli+0x28>
 800f6ba:	bf00      	nop
 800f6bc:	08019e08 	.word	0x08019e08
 800f6c0:	08019e2e 	.word	0x08019e2e
 800f6c4:	20005614 	.word	0x20005614
 800f6c8:	200053b0 	.word	0x200053b0
 800f6cc:	51eb851f 	.word	0x51eb851f

0800f6d0 <task_fsm>:
 800f6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6d2:	b089      	sub	sp, #36	; 0x24
 800f6d4:	4b1d      	ldr	r3, [pc, #116]	; (800f74c <task_fsm+0x7c>)
 800f6d6:	2216      	movs	r2, #22
 800f6d8:	491d      	ldr	r1, [pc, #116]	; (800f750 <task_fsm+0x80>)
 800f6da:	2001      	movs	r0, #1
 800f6dc:	f000 fdba 	bl	8010254 <log_log>
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	f88d 3004 	strb.w	r3, [sp, #4]
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	9302      	str	r3, [sp, #8]
 800f6ea:	9303      	str	r3, [sp, #12]
 800f6ec:	9304      	str	r3, [sp, #16]
 800f6ee:	9305      	str	r3, [sp, #20]
 800f6f0:	2103      	movs	r1, #3
 800f6f2:	4b18      	ldr	r3, [pc, #96]	; (800f754 <task_fsm+0x84>)
 800f6f4:	6818      	ldr	r0, [r3, #0]
 800f6f6:	f005 fcd9 	bl	80150ac <osEventFlagsSet>
 800f6fa:	f005 fc27 	bl	8014f4c <osKernelGetTickCount>
 800f6fe:	4604      	mov	r4, r0
 800f700:	f005 fc2e 	bl	8014f60 <osKernelGetTickFreq>
 800f704:	4b14      	ldr	r3, [pc, #80]	; (800f758 <task_fsm+0x88>)
 800f706:	fba3 3500 	umull	r3, r5, r3, r0
 800f70a:	096d      	lsrs	r5, r5, #5
 800f70c:	4f13      	ldr	r7, [pc, #76]	; (800f75c <task_fsm+0x8c>)
 800f70e:	4e14      	ldr	r6, [pc, #80]	; (800f760 <task_fsm+0x90>)
 800f710:	e009      	b.n	800f726 <task_fsm+0x56>
 800f712:	a801      	add	r0, sp, #4
 800f714:	f7fd fff4 	bl	800d700 <update_fsm>
 800f718:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f71c:	7033      	strb	r3, [r6, #0]
 800f71e:	442c      	add	r4, r5
 800f720:	4620      	mov	r0, r4
 800f722:	f005 fc94 	bl	801504e <osDelayUntil>
 800f726:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d0f1      	beq.n	800f712 <task_fsm+0x42>
 800f72e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f732:	2b03      	cmp	r3, #3
 800f734:	d8ed      	bhi.n	800f712 <task_fsm+0x42>
 800f736:	2104      	movs	r1, #4
 800f738:	4638      	mov	r0, r7
 800f73a:	f001 fcf9 	bl	8011130 <HAL_GPIO_ReadPin>
 800f73e:	2800      	cmp	r0, #0
 800f740:	d0ea      	beq.n	800f718 <task_fsm+0x48>
 800f742:	2300      	movs	r3, #0
 800f744:	f88d 3018 	strb.w	r3, [sp, #24]
 800f748:	e7e6      	b.n	800f718 <task_fsm+0x48>
 800f74a:	bf00      	nop
 800f74c:	08019e3c 	.word	0x08019e3c
 800f750:	08019e62 	.word	0x08019e62
 800f754:	200053e8 	.word	0x200053e8
 800f758:	51eb851f 	.word	0x51eb851f
 800f75c:	40020000 	.word	0x40020000
 800f760:	20000000 	.word	0x20000000

0800f764 <task_heater>:
 800f764:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f766:	ed2d 8b02 	vpush	{d8}
 800f76a:	b083      	sub	sp, #12
 800f76c:	4b44      	ldr	r3, [pc, #272]	; (800f880 <task_heater+0x11c>)
 800f76e:	2217      	movs	r2, #23
 800f770:	4944      	ldr	r1, [pc, #272]	; (800f884 <task_heater+0x120>)
 800f772:	2001      	movs	r0, #1
 800f774:	f000 fd6e 	bl	8010254 <log_log>
 800f778:	2200      	movs	r2, #0
 800f77a:	2110      	movs	r1, #16
 800f77c:	4842      	ldr	r0, [pc, #264]	; (800f888 <task_heater+0x124>)
 800f77e:	f001 fcdd 	bl	801113c <HAL_GPIO_WritePin>
 800f782:	f005 fbe3 	bl	8014f4c <osKernelGetTickCount>
 800f786:	4604      	mov	r4, r0
 800f788:	f005 fbea 	bl	8014f60 <osKernelGetTickFreq>
 800f78c:	4b3f      	ldr	r3, [pc, #252]	; (800f88c <task_heater+0x128>)
 800f78e:	fba3 3500 	umull	r3, r5, r3, r0
 800f792:	08ed      	lsrs	r5, r5, #3
 800f794:	4f3c      	ldr	r7, [pc, #240]	; (800f888 <task_heater+0x124>)
 800f796:	ed9f 8a3e 	vldr	s16, [pc, #248]	; 800f890 <task_heater+0x12c>
 800f79a:	2600      	movs	r6, #0
 800f79c:	e018      	b.n	800f7d0 <task_heater+0x6c>
 800f79e:	2200      	movs	r2, #0
 800f7a0:	2110      	movs	r1, #16
 800f7a2:	4638      	mov	r0, r7
 800f7a4:	f001 fcca 	bl	801113c <HAL_GPIO_WritePin>
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	2120      	movs	r1, #32
 800f7ac:	4638      	mov	r0, r7
 800f7ae:	f001 fcc5 	bl	801113c <HAL_GPIO_WritePin>
 800f7b2:	9601      	str	r6, [sp, #4]
 800f7b4:	a801      	add	r0, sp, #4
 800f7b6:	f7ff fdc7 	bl	800f348 <get_temperature>
 800f7ba:	b128      	cbz	r0, 800f7c8 <task_heater+0x64>
 800f7bc:	4b35      	ldr	r3, [pc, #212]	; (800f894 <task_heater+0x130>)
 800f7be:	223a      	movs	r2, #58	; 0x3a
 800f7c0:	4930      	ldr	r1, [pc, #192]	; (800f884 <task_heater+0x120>)
 800f7c2:	2004      	movs	r0, #4
 800f7c4:	f000 fd46 	bl	8010254 <log_log>
 800f7c8:	442c      	add	r4, r5
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	f005 fc3f 	bl	801504e <osDelayUntil>
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	21ff      	movs	r1, #255	; 0xff
 800f7d6:	4830      	ldr	r0, [pc, #192]	; (800f898 <task_heater+0x134>)
 800f7d8:	6800      	ldr	r0, [r0, #0]
 800f7da:	f005 fcb6 	bl	801514a <osEventFlagsWait>
 800f7de:	b2c0      	uxtb	r0, r0
 800f7e0:	2801      	cmp	r0, #1
 800f7e2:	d0dc      	beq.n	800f79e <task_heater+0x3a>
 800f7e4:	2802      	cmp	r0, #2
 800f7e6:	d018      	beq.n	800f81a <task_heater+0xb6>
 800f7e8:	2803      	cmp	r0, #3
 800f7ea:	d02f      	beq.n	800f84c <task_heater+0xe8>
 800f7ec:	2804      	cmp	r0, #4
 800f7ee:	d1e0      	bne.n	800f7b2 <task_heater+0x4e>
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	2110      	movs	r1, #16
 800f7f4:	4638      	mov	r0, r7
 800f7f6:	f001 fca1 	bl	801113c <HAL_GPIO_WritePin>
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	2120      	movs	r1, #32
 800f7fe:	4638      	mov	r0, r7
 800f800:	f001 fc9c 	bl	801113c <HAL_GPIO_WritePin>
 800f804:	4b25      	ldr	r3, [pc, #148]	; (800f89c <task_heater+0x138>)
 800f806:	2231      	movs	r2, #49	; 0x31
 800f808:	491e      	ldr	r1, [pc, #120]	; (800f884 <task_heater+0x120>)
 800f80a:	2001      	movs	r0, #1
 800f80c:	f000 fd22 	bl	8010254 <log_log>
 800f810:	f005 fbf3 	bl	8014ffa <osThreadGetId>
 800f814:	f005 fbf5 	bl	8015002 <osThreadTerminate>
 800f818:	e7cb      	b.n	800f7b2 <task_heater+0x4e>
 800f81a:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800f81e:	f7fd fe73 	bl	800d508 <dcdc_set_voltage>
 800f822:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f826:	481e      	ldr	r0, [pc, #120]	; (800f8a0 <task_heater+0x13c>)
 800f828:	f001 fc82 	bl	8011130 <HAL_GPIO_ReadPin>
 800f82c:	b140      	cbz	r0, 800f840 <task_heater+0xdc>
 800f82e:	2064      	movs	r0, #100	; 0x64
 800f830:	f005 fbff 	bl	8015032 <osDelay>
 800f834:	2201      	movs	r2, #1
 800f836:	2120      	movs	r1, #32
 800f838:	4638      	mov	r0, r7
 800f83a:	f001 fc7f 	bl	801113c <HAL_GPIO_WritePin>
 800f83e:	e7b8      	b.n	800f7b2 <task_heater+0x4e>
 800f840:	2201      	movs	r2, #1
 800f842:	2110      	movs	r1, #16
 800f844:	4638      	mov	r0, r7
 800f846:	f001 fc79 	bl	801113c <HAL_GPIO_WritePin>
 800f84a:	e7f0      	b.n	800f82e <task_heater+0xca>
 800f84c:	eeb0 0a48 	vmov.f32	s0, s16
 800f850:	f7fd fe5a 	bl	800d508 <dcdc_set_voltage>
 800f854:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f858:	4811      	ldr	r0, [pc, #68]	; (800f8a0 <task_heater+0x13c>)
 800f85a:	f001 fc69 	bl	8011130 <HAL_GPIO_ReadPin>
 800f85e:	b140      	cbz	r0, 800f872 <task_heater+0x10e>
 800f860:	2064      	movs	r0, #100	; 0x64
 800f862:	f005 fbe6 	bl	8015032 <osDelay>
 800f866:	2201      	movs	r2, #1
 800f868:	2120      	movs	r1, #32
 800f86a:	4638      	mov	r0, r7
 800f86c:	f001 fc66 	bl	801113c <HAL_GPIO_WritePin>
 800f870:	e79f      	b.n	800f7b2 <task_heater+0x4e>
 800f872:	2201      	movs	r2, #1
 800f874:	2110      	movs	r1, #16
 800f876:	4638      	mov	r0, r7
 800f878:	f001 fc60 	bl	801113c <HAL_GPIO_WritePin>
 800f87c:	e7f0      	b.n	800f860 <task_heater+0xfc>
 800f87e:	bf00      	nop
 800f880:	08019e70 	.word	0x08019e70
 800f884:	08019e96 	.word	0x08019e96
 800f888:	40020400 	.word	0x40020400
 800f88c:	cccccccd 	.word	0xcccccccd
 800f890:	41433333 	.word	0x41433333
 800f894:	08019eb8 	.word	0x08019eb8
 800f898:	2000560c 	.word	0x2000560c
 800f89c:	08019ea4 	.word	0x08019ea4
 800f8a0:	40020000 	.word	0x40020000

0800f8a4 <task_sensor_read>:
LIGHT_SENSOR LIGHT = {
	.source = ADC_SOURCE_LIGHT,
};


void task_sensor_read(void *argument) {
 800f8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	log_debug("Task Sensor Read started");
 800f8a8:	4b3b      	ldr	r3, [pc, #236]	; (800f998 <task_sensor_read+0xf4>)
 800f8aa:	222c      	movs	r2, #44	; 0x2c
 800f8ac:	493b      	ldr	r1, [pc, #236]	; (800f99c <task_sensor_read+0xf8>)
 800f8ae:	2001      	movs	r0, #1
 800f8b0:	f000 fcd0 	bl	8010254 <log_log>
#pragma once

#include "target/target.h"

static inline void pm_cut_on(){
	HAL_GPIO_WritePin(P_EN_CUT_GPIO_Port, P_EN_CUT_Pin, GPIO_PIN_SET);
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f8ba:	4839      	ldr	r0, [pc, #228]	; (800f9a0 <task_sensor_read+0xfc>)
 800f8bc:	f001 fc3e 	bl	801113c <HAL_GPIO_WritePin>


	/* Enable CUT power rail as light sensor is on there */
	pm_cut_on();

	lsm6dsr_init(&IMU);
 800f8c0:	4c38      	ldr	r4, [pc, #224]	; (800f9a4 <task_sensor_read+0x100>)
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	f7ff f930 	bl	800eb28 <lsm6dsr_init>
	ms5607_init(&BARO);
 800f8c8:	4837      	ldr	r0, [pc, #220]	; (800f9a8 <task_sensor_read+0x104>)
 800f8ca:	f7ff fda1 	bl	800f410 <ms5607_init>
	light_init(&LIGHT);
 800f8ce:	4837      	ldr	r0, [pc, #220]	; (800f9ac <task_sensor_read+0x108>)
 800f8d0:	f7ff f8da 	bl	800ea88 <light_init>

	/* Set continuous conversion mode */
	lsm6dsr_enable(&IMU);
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	f7ff f966 	bl	800eba6 <lsm6dsr_enable>

	uint8_t stage = 0;

	uint32_t tick_count = osKernelGetTickCount();
 800f8da:	f005 fb37 	bl	8014f4c <osKernelGetTickCount>
 800f8de:	4604      	mov	r4, r0
	uint32_t tick_update = osKernelGetTickFreq() / (2*SAMPLING_FREQ);
 800f8e0:	f005 fb3e 	bl	8014f60 <osKernelGetTickFreq>
 800f8e4:	4b32      	ldr	r3, [pc, #200]	; (800f9b0 <task_sensor_read+0x10c>)
 800f8e6:	fba3 3600 	umull	r3, r6, r3, r0
 800f8ea:	09b6      	lsrs	r6, r6, #6
	uint8_t stage = 0;
 800f8ec:	2500      	movs	r5, #0
}

static inline void pm_cut_off(){
	HAL_GPIO_WritePin(P_EN_CUT_GPIO_Port, P_EN_CUT_Pin, GPIO_PIN_RESET);
 800f8ee:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800f9a0 <task_sensor_read+0xfc>
		/* Stage 1: Read all sensor data and save it in global register */
		if(stage == 1){
			/* Readout pressure data */
			ms5607_read_raw(&BARO);
			/* Store pressure and temperature data*/
			ms5607_get_temp_pres(&BARO, &global_baro_data.temperature, &global_baro_data.pressure);
 800f8f2:	4f30      	ldr	r7, [pc, #192]	; (800f9b4 <task_sensor_read+0x110>)
 800f8f4:	f107 0804 	add.w	r8, r7, #4
 800f8f8:	e01e      	b.n	800f938 <task_sensor_read+0x94>
			lsm6dsr_enable(&IMU);
 800f8fa:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800f9a4 <task_sensor_read+0x100>
 800f8fe:	4650      	mov	r0, sl
 800f900:	f7ff f951 	bl	800eba6 <lsm6dsr_enable>
			lsm6dsr_wakeup_disable(&IMU);
 800f904:	4650      	mov	r0, sl
 800f906:	f7ff f98f 	bl	800ec28 <lsm6dsr_wakeup_disable>
		if(stage == 1){
 800f90a:	2d00      	cmp	r5, #0
 800f90c:	d03b      	beq.n	800f986 <task_sensor_read+0xe2>
			ms5607_read_raw(&BARO);
 800f90e:	4d26      	ldr	r5, [pc, #152]	; (800f9a8 <task_sensor_read+0x104>)
 800f910:	4628      	mov	r0, r5
 800f912:	f7ff fe29 	bl	800f568 <ms5607_read_raw>
			ms5607_get_temp_pres(&BARO, &global_baro_data.temperature, &global_baro_data.pressure);
 800f916:	463a      	mov	r2, r7
 800f918:	4641      	mov	r1, r8
 800f91a:	4628      	mov	r0, r5
 800f91c:	f7ff fdc4 	bl	800f4a8 <ms5607_get_temp_pres>
			/* Prepare temperature data */
			ms5607_prepare_temp(&BARO);
 800f920:	4628      	mov	r0, r5
 800f922:	f7ff fdab 	bl	800f47c <ms5607_prepare_temp>

			/* Readout acceleration */
			lsm6dsr_get_accel(&IMU, global_imu_data.acceleration);
 800f926:	4924      	ldr	r1, [pc, #144]	; (800f9b8 <task_sensor_read+0x114>)
 800f928:	481e      	ldr	r0, [pc, #120]	; (800f9a4 <task_sensor_read+0x100>)
 800f92a:	f7ff f9b1 	bl	800ec90 <lsm6dsr_get_accel>

			/* Readout light sensor */
			//log_info("Light sensor %ld",light_get(&LIGHT));

			stage = 0;
 800f92e:	2500      	movs	r5, #0
			ms5607_prepare_pres(&BARO);
			stage = 1;
		}


		tick_count += tick_update;
 800f930:	4434      	add	r4, r6
		osDelayUntil(tick_count);
 800f932:	4620      	mov	r0, r4
 800f934:	f005 fb8b 	bl	801504e <osDelayUntil>
		sensor_mode_e mode = osEventFlagsWait(sensor_mode_id, 0xFF, osFlagsWaitAny, 0);
 800f938:	2300      	movs	r3, #0
 800f93a:	461a      	mov	r2, r3
 800f93c:	21ff      	movs	r1, #255	; 0xff
 800f93e:	481f      	ldr	r0, [pc, #124]	; (800f9bc <task_sensor_read+0x118>)
 800f940:	6800      	ldr	r0, [r0, #0]
 800f942:	f005 fc02 	bl	801514a <osEventFlagsWait>
 800f946:	b2c0      	uxtb	r0, r0
		if(mode == SENSOR_MODE_CONTINUOUS){
 800f948:	2801      	cmp	r0, #1
 800f94a:	d0d6      	beq.n	800f8fa <task_sensor_read+0x56>
		} else if (mode == SENSOR_MODE_WAKEUP){
 800f94c:	2802      	cmp	r0, #2
 800f94e:	d015      	beq.n	800f97c <task_sensor_read+0xd8>
		} else if (mode == SENSOR_MODE_SHUTDOWN){
 800f950:	2803      	cmp	r0, #3
 800f952:	d1da      	bne.n	800f90a <task_sensor_read+0x66>
			log_debug("Task Sensor Read stopped");
 800f954:	4b1a      	ldr	r3, [pc, #104]	; (800f9c0 <task_sensor_read+0x11c>)
 800f956:	224a      	movs	r2, #74	; 0x4a
 800f958:	4910      	ldr	r1, [pc, #64]	; (800f99c <task_sensor_read+0xf8>)
 800f95a:	2001      	movs	r0, #1
 800f95c:	f000 fc7a 	bl	8010254 <log_log>
			lsm6dsr_shutdown(&IMU);
 800f960:	4810      	ldr	r0, [pc, #64]	; (800f9a4 <task_sensor_read+0x100>)
 800f962:	f7ff f915 	bl	800eb90 <lsm6dsr_shutdown>
 800f966:	2200      	movs	r2, #0
 800f968:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f96c:	4648      	mov	r0, r9
 800f96e:	f001 fbe5 	bl	801113c <HAL_GPIO_WritePin>
			osThreadTerminate(osThreadGetId());
 800f972:	f005 fb42 	bl	8014ffa <osThreadGetId>
 800f976:	f005 fb44 	bl	8015002 <osThreadTerminate>
 800f97a:	e7c6      	b.n	800f90a <task_sensor_read+0x66>
			lsm6dsr_wakeup_enable(&IMU, 10);
 800f97c:	210a      	movs	r1, #10
 800f97e:	4809      	ldr	r0, [pc, #36]	; (800f9a4 <task_sensor_read+0x100>)
 800f980:	f7ff f91c 	bl	800ebbc <lsm6dsr_wakeup_enable>
 800f984:	e7c1      	b.n	800f90a <task_sensor_read+0x66>
			ms5607_read_raw(&BARO);
 800f986:	4d08      	ldr	r5, [pc, #32]	; (800f9a8 <task_sensor_read+0x104>)
 800f988:	4628      	mov	r0, r5
 800f98a:	f7ff fded 	bl	800f568 <ms5607_read_raw>
			ms5607_prepare_pres(&BARO);
 800f98e:	4628      	mov	r0, r5
 800f990:	f7ff fd7f 	bl	800f492 <ms5607_prepare_pres>
			stage = 1;
 800f994:	2501      	movs	r5, #1
 800f996:	e7cb      	b.n	800f930 <task_sensor_read+0x8c>
 800f998:	08019ed4 	.word	0x08019ed4
 800f99c:	08019f02 	.word	0x08019f02
 800f9a0:	40020400 	.word	0x40020400
 800f9a4:	2000003c 	.word	0x2000003c
 800f9a8:	2000001c 	.word	0x2000001c
 800f9ac:	20000048 	.word	0x20000048
 800f9b0:	51eb851f 	.word	0x51eb851f
 800f9b4:	20005604 	.word	0x20005604
 800f9b8:	200053c8 	.word	0x200053c8
 800f9bc:	20005610 	.word	0x20005610
 800f9c0:	08019f18 	.word	0x08019f18

0800f9c4 <task_state_est>:
 800f9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c8:	ed2d 8b06 	vpush	{d8-d10}
 800f9cc:	b083      	sub	sp, #12
 800f9ce:	4b87      	ldr	r3, [pc, #540]	; (800fbec <task_state_est+0x228>)
 800f9d0:	221d      	movs	r2, #29
 800f9d2:	4987      	ldr	r1, [pc, #540]	; (800fbf0 <task_state_est+0x22c>)
 800f9d4:	2001      	movs	r0, #1
 800f9d6:	f000 fc3d 	bl	8010254 <log_log>
 800f9da:	4886      	ldr	r0, [pc, #536]	; (800fbf4 <task_state_est+0x230>)
 800f9dc:	f7fe f86c 	bl	800dab8 <kalman_init>
 800f9e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f9e4:	f005 fb25 	bl	8015032 <osDelay>
 800f9e8:	4b83      	ldr	r3, [pc, #524]	; (800fbf8 <task_state_est+0x234>)
 800f9ea:	ed93 9a00 	vldr	s18, [r3]
 800f9ee:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 800f9f2:	f005 faab 	bl	8014f4c <osKernelGetTickCount>
 800f9f6:	4605      	mov	r5, r0
 800f9f8:	f005 fab2 	bl	8014f60 <osKernelGetTickFreq>
 800f9fc:	4b7f      	ldr	r3, [pc, #508]	; (800fbfc <task_state_est+0x238>)
 800f9fe:	fba3 3900 	umull	r3, r9, r3, r0
 800fa02:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800fa06:	2700      	movs	r7, #0
 800fa08:	eddf 8a7d 	vldr	s17, [pc, #500]	; 800fc00 <task_state_est+0x23c>
 800fa0c:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 800fbf0 <task_state_est+0x22c>
 800fa10:	4e7c      	ldr	r6, [pc, #496]	; (800fc04 <task_state_est+0x240>)
 800fa12:	eeb0 8a68 	vmov.f32	s16, s17
 800fa16:	ed9f aa7c 	vldr	s20, [pc, #496]	; 800fc08 <task_state_est+0x244>
 800fa1a:	eddf 9a7c 	vldr	s19, [pc, #496]	; 800fc0c <task_state_est+0x248>
 800fa1e:	4c75      	ldr	r4, [pc, #468]	; (800fbf4 <task_state_est+0x230>)
 800fa20:	e090      	b.n	800fb44 <task_state_est+0x180>
 800fa22:	4b7b      	ldr	r3, [pc, #492]	; (800fc10 <task_state_est+0x24c>)
 800fa24:	2233      	movs	r2, #51	; 0x33
 800fa26:	4641      	mov	r1, r8
 800fa28:	2001      	movs	r0, #1
 800fa2a:	f000 fc13 	bl	8010254 <log_log>
 800fa2e:	f005 fae4 	bl	8014ffa <osThreadGetId>
 800fa32:	f005 fae6 	bl	8015002 <osThreadTerminate>
 800fa36:	e090      	b.n	800fb5a <task_state_est+0x196>
 800fa38:	ee07 3a90 	vmov	s15, r3
 800fa3c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800fa40:	eef0 0a4a 	vmov.f32	s1, s20
 800fa44:	ee80 0a09 	vdiv.f32	s0, s0, s18
 800fa48:	f008 ffd8 	bl	80189fc <powf>
 800fa4c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fa50:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fa54:	ee20 0a69 	vnmul.f32	s0, s0, s19
 800fa58:	eddf 7a6e 	vldr	s15, [pc, #440]	; 800fc14 <task_state_est+0x250>
 800fa5c:	eec0 6a27 	vdiv.f32	s13, s0, s15
 800fa60:	4b6d      	ldr	r3, [pc, #436]	; (800fc18 <task_state_est+0x254>)
 800fa62:	edd3 7a00 	vldr	s15, [r3]
 800fa66:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800fa6a:	ed9f 6a6c 	vldr	s12, [pc, #432]	; 800fc1c <task_state_est+0x258>
 800fa6e:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800fa72:	ed9f 6a6b 	vldr	s12, [pc, #428]	; 800fc20 <task_state_est+0x25c>
 800fa76:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800fa7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa7e:	dd14      	ble.n	800faaa <task_state_est+0xe6>
 800fa80:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800fa84:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fa88:	edc3 7a00 	vstr	s15, [r3]
 800fa8c:	4b62      	ldr	r3, [pc, #392]	; (800fc18 <task_state_est+0x254>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	6023      	str	r3, [r4, #0]
 800fa92:	4620      	mov	r0, r4
 800fa94:	f7fe f88a 	bl	800dbac <kalman_predict>
 800fa98:	4620      	mov	r0, r4
 800fa9a:	f7fe f8b5 	bl	800dc08 <kalman_update>
 800fa9e:	4b61      	ldr	r3, [pc, #388]	; (800fc24 <task_state_est+0x260>)
 800faa0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800faa2:	601a      	str	r2, [r3, #0]
 800faa4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800faa6:	605a      	str	r2, [r3, #4]
 800faa8:	e070      	b.n	800fb8c <task_state_est+0x1c8>
 800faaa:	eebb 6a0e 	vmov.f32	s12, #190	; 0xc1f00000 -30.0
 800faae:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800fab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fab6:	d507      	bpl.n	800fac8 <task_state_est+0x104>
 800fab8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800fc28 <task_state_est+0x264>
 800fabc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fac0:	4b55      	ldr	r3, [pc, #340]	; (800fc18 <task_state_est+0x254>)
 800fac2:	edc3 7a00 	vstr	s15, [r3]
 800fac6:	e7e1      	b.n	800fa8c <task_state_est+0xc8>
 800fac8:	4b53      	ldr	r3, [pc, #332]	; (800fc18 <task_state_est+0x254>)
 800faca:	edc3 6a00 	vstr	s13, [r3]
 800face:	e7dd      	b.n	800fa8c <task_state_est+0xc8>
 800fad0:	f005 fa3c 	bl	8014f4c <osKernelGetTickCount>
 800fad4:	4601      	mov	r1, r0
 800fad6:	f8df b14c 	ldr.w	fp, [pc, #332]	; 800fc24 <task_state_est+0x260>
 800fada:	eddb 7a00 	vldr	s15, [fp]
 800fade:	eddf aa53 	vldr	s21, [pc, #332]	; 800fc2c <task_state_est+0x268>
 800fae2:	ee67 7aaa 	vmul.f32	s15, s15, s21
 800fae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800faea:	f8df a154 	ldr.w	sl, [pc, #340]	; 800fc40 <task_state_est+0x27c>
 800faee:	ee17 3a90 	vmov	r3, s15
 800faf2:	b21b      	sxth	r3, r3
 800faf4:	2201      	movs	r2, #1
 800faf6:	4650      	mov	r0, sl
 800faf8:	f7fe ff67 	bl	800e9ca <recorder_record>
 800fafc:	f005 fa26 	bl	8014f4c <osKernelGetTickCount>
 800fb00:	4601      	mov	r1, r0
 800fb02:	eddb 7a01 	vldr	s15, [fp, #4]
 800fb06:	ee67 7aaa 	vmul.f32	s15, s15, s21
 800fb0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb0e:	ee17 3a90 	vmov	r3, s15
 800fb12:	b21b      	sxth	r3, r3
 800fb14:	2202      	movs	r2, #2
 800fb16:	4650      	mov	r0, sl
 800fb18:	f7fe ff57 	bl	800e9ca <recorder_record>
 800fb1c:	f005 fa16 	bl	8014f4c <osKernelGetTickCount>
 800fb20:	4601      	mov	r1, r0
 800fb22:	edd4 7a00 	vldr	s15, [r4]
 800fb26:	ee67 7aaa 	vmul.f32	s15, s15, s21
 800fb2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb2e:	ee17 3a90 	vmov	r3, s15
 800fb32:	b21b      	sxth	r3, r3
 800fb34:	2203      	movs	r2, #3
 800fb36:	4650      	mov	r0, sl
 800fb38:	f7fe ff47 	bl	800e9ca <recorder_record>
 800fb3c:	444d      	add	r5, r9
 800fb3e:	4628      	mov	r0, r5
 800fb40:	f005 fa85 	bl	801504e <osDelayUntil>
 800fb44:	2300      	movs	r3, #0
 800fb46:	461a      	mov	r2, r3
 800fb48:	21ff      	movs	r1, #255	; 0xff
 800fb4a:	4839      	ldr	r0, [pc, #228]	; (800fc30 <task_state_est+0x26c>)
 800fb4c:	6800      	ldr	r0, [r0, #0]
 800fb4e:	f005 fafc 	bl	801514a <osEventFlagsWait>
 800fb52:	b2c0      	uxtb	r0, r0
 800fb54:	2803      	cmp	r0, #3
 800fb56:	f43f af64 	beq.w	800fa22 <task_state_est+0x5e>
 800fb5a:	6833      	ldr	r3, [r6, #0]
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	bfb8      	it	lt
 800fb62:	1dda      	addlt	r2, r3, #7
 800fb64:	eba3 03e2 	sub.w	r3, r3, r2, asr #3
 800fb68:	4a23      	ldr	r2, [pc, #140]	; (800fbf8 <task_state_est+0x234>)
 800fb6a:	6812      	ldr	r2, [r2, #0]
 800fb6c:	2a00      	cmp	r2, #0
 800fb6e:	bfb8      	it	lt
 800fb70:	3207      	addlt	r2, #7
 800fb72:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800fb76:	6033      	str	r3, [r6, #0]
 800fb78:	1e59      	subs	r1, r3, #1
 800fb7a:	4a2e      	ldr	r2, [pc, #184]	; (800fc34 <task_state_est+0x270>)
 800fb7c:	4291      	cmp	r1, r2
 800fb7e:	f67f af5b 	bls.w	800fa38 <task_state_est+0x74>
 800fb82:	4b28      	ldr	r3, [pc, #160]	; (800fc24 <task_state_est+0x260>)
 800fb84:	ed83 8a00 	vstr	s16, [r3]
 800fb88:	ed83 8a01 	vstr	s16, [r3, #4]
 800fb8c:	ed94 7a16 	vldr	s14, [r4, #88]	; 0x58
 800fb90:	eddf 6a26 	vldr	s13, [pc, #152]	; 800fc2c <task_state_est+0x268>
 800fb94:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fb98:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800fb9c:	ed8d 7a01 	vstr	s14, [sp, #4]
 800fba0:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
 800fba4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fbac:	edcd 7a00 	vstr	s15, [sp]
 800fbb0:	4b21      	ldr	r3, [pc, #132]	; (800fc38 <task_state_est+0x274>)
 800fbb2:	224e      	movs	r2, #78	; 0x4e
 800fbb4:	4641      	mov	r1, r8
 800fbb6:	2002      	movs	r0, #2
 800fbb8:	f000 fb4c 	bl	8010254 <log_log>
 800fbbc:	4b1f      	ldr	r3, [pc, #124]	; (800fc3c <task_state_est+0x278>)
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	2b03      	cmp	r3, #3
 800fbc2:	d885      	bhi.n	800fad0 <task_state_est+0x10c>
 800fbc4:	2f14      	cmp	r7, #20
 800fbc6:	d008      	beq.n	800fbda <task_state_est+0x216>
 800fbc8:	4b0b      	ldr	r3, [pc, #44]	; (800fbf8 <task_state_est+0x234>)
 800fbca:	edd3 7a00 	vldr	s15, [r3]
 800fbce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fbd2:	ee78 8aa7 	vadd.f32	s17, s17, s15
 800fbd6:	3701      	adds	r7, #1
 800fbd8:	e7b0      	b.n	800fb3c <task_state_est+0x178>
 800fbda:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800fbde:	ee88 9aa7 	vdiv.f32	s18, s17, s15
 800fbe2:	2700      	movs	r7, #0
 800fbe4:	eddf 8a06 	vldr	s17, [pc, #24]	; 800fc00 <task_state_est+0x23c>
 800fbe8:	e7a8      	b.n	800fb3c <task_state_est+0x178>
 800fbea:	bf00      	nop
 800fbec:	08019f34 	.word	0x08019f34
 800fbf0:	08019f66 	.word	0x08019f66
 800fbf4:	200004b4 	.word	0x200004b4
 800fbf8:	20005604 	.word	0x20005604
 800fbfc:	51eb851f 	.word	0x51eb851f
 800fc00:	00000000 	.word	0x00000000
 800fc04:	200004b0 	.word	0x200004b0
 800fc08:	3e42c9b4 	.word	0x3e42c9b4
 800fc0c:	43901333 	.word	0x43901333
 800fc10:	08019f78 	.word	0x08019f78
 800fc14:	3bd4fdf4 	.word	0x3bd4fdf4
 800fc18:	20000538 	.word	0x20000538
 800fc1c:	3c23d70a 	.word	0x3c23d70a
 800fc20:	43480000 	.word	0x43480000
 800fc24:	200053f0 	.word	0x200053f0
 800fc28:	3e999999 	.word	0x3e999999
 800fc2c:	42c80000 	.word	0x42c80000
 800fc30:	200055f8 	.word	0x200055f8
 800fc34:	7ffffffd 	.word	0x7ffffffd
 800fc38:	08019f98 	.word	0x08019f98
 800fc3c:	20000000 	.word	0x20000000
 800fc40:	200053d4 	.word	0x200053d4

0800fc44 <task_supervision>:
	.source = ADC_SOURCE_BATTERY,
	.multiply = 1.157,
	.add = 0,
};

void task_supervision(void *argument) {
 800fc44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc48:	ed2d 8b02 	vpush	{d8}
 800fc4c:	b085      	sub	sp, #20

	log_debug("Task Supervisor started");
 800fc4e:	4c5f      	ldr	r4, [pc, #380]	; (800fdcc <task_supervision+0x188>)
 800fc50:	4b5f      	ldr	r3, [pc, #380]	; (800fdd0 <task_supervision+0x18c>)
 800fc52:	2219      	movs	r2, #25
 800fc54:	4621      	mov	r1, r4
 800fc56:	2001      	movs	r0, #1
 800fc58:	f000 fafc 	bl	8010254 <log_log>

	bool cli_stared = false;

	osDelay(100);
 800fc5c:	2064      	movs	r0, #100	; 0x64
 800fc5e:	f005 f9e8 	bl	8015032 <osDelay>

	float voltage;
	battery_voltage(&BATTERY, &voltage);
 800fc62:	a903      	add	r1, sp, #12
 800fc64:	485b      	ldr	r0, [pc, #364]	; (800fdd4 <task_supervision+0x190>)
 800fc66:	f7fe feef 	bl	800ea48 <battery_voltage>
	log_info("Battery Voltage: %d mV", (int)voltage);
 800fc6a:	eddd 7a03 	vldr	s15, [sp, #12]
 800fc6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fc72:	edcd 7a00 	vstr	s15, [sp]
 800fc76:	4b58      	ldr	r3, [pc, #352]	; (800fdd8 <task_supervision+0x194>)
 800fc78:	2221      	movs	r2, #33	; 0x21
 800fc7a:	4621      	mov	r1, r4
 800fc7c:	2002      	movs	r0, #2
 800fc7e:	f000 fae9 	bl	8010254 <log_log>

	uint32_t count = 0;

	uint32_t tick_count = osKernelGetTickCount();
 800fc82:	f005 f963 	bl	8014f4c <osKernelGetTickCount>
 800fc86:	4604      	mov	r4, r0
	uint32_t tick_update = osKernelGetTickFreq() / 10;
 800fc88:	f005 f96a 	bl	8014f60 <osKernelGetTickFreq>
 800fc8c:	4b53      	ldr	r3, [pc, #332]	; (800fddc <task_supervision+0x198>)
 800fc8e:	fba3 3700 	umull	r3, r7, r3, r0
 800fc92:	08ff      	lsrs	r7, r7, #3
	uint32_t count = 0;
 800fc94:	2600      	movs	r6, #0
	bool cli_stared = false;
 800fc96:	46b0      	mov	r8, r6
	while (1) {

		supervisor_mode_e mode = osEventFlagsWait(supervisor_mode_id, 0xFF, osFlagsWaitAny, 0);

		if(mode == SUPERVISOR_MODE_SHUTDOWN){
			log_debug("Task Supervisor stopped");
 800fc98:	4d4c      	ldr	r5, [pc, #304]	; (800fdcc <task_supervision+0x188>)
		HAL_GPIO_WritePin(DCDC_EN_GPIO_Port, DCDC_EN_Pin, GPIO_PIN_SET);
	}
}

static inline void dcdc_disable(){
	HAL_GPIO_WritePin(DCDC_EN_GPIO_Port, DCDC_EN_Pin, GPIO_PIN_RESET);
 800fc9a:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800fe08 <task_supervision+0x1c4>
			cli_stared = true;
			init_cli();
		}

		battery_voltage(&BATTERY, &voltage);
		if(voltage < 3500.0f) {
 800fc9e:	ed9f 8a50 	vldr	s16, [pc, #320]	; 800fde0 <task_supervision+0x19c>
 800fca2:	e05d      	b.n	800fd60 <task_supervision+0x11c>
			log_debug("Task Supervisor stopped");
 800fca4:	4b4f      	ldr	r3, [pc, #316]	; (800fde4 <task_supervision+0x1a0>)
 800fca6:	222d      	movs	r2, #45	; 0x2d
 800fca8:	4629      	mov	r1, r5
 800fcaa:	f000 fad3 	bl	8010254 <log_log>
			if(global_usb_initialized_flag){
 800fcae:	4b4e      	ldr	r3, [pc, #312]	; (800fde8 <task_supervision+0x1a4>)
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	b923      	cbnz	r3, 800fcbe <task_supervision+0x7a>
			osThreadTerminate(osThreadGetId());
 800fcb4:	f005 f9a1 	bl	8014ffa <osThreadGetId>
 800fcb8:	f005 f9a3 	bl	8015002 <osThreadTerminate>
 800fcbc:	e05a      	b.n	800fd74 <task_supervision+0x130>
				MX_USB_DEVICE_DeInit();
 800fcbe:	f007 fd9b 	bl	80177f8 <MX_USB_DEVICE_DeInit>
				global_usb_initialized_flag = false;
 800fcc2:	4b49      	ldr	r3, [pc, #292]	; (800fde8 <task_supervision+0x1a4>)
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	701a      	strb	r2, [r3, #0]
				if(cli_stared){
 800fcc8:	f1b8 0f00 	cmp.w	r8, #0
 800fccc:	d0f2      	beq.n	800fcb4 <task_supervision+0x70>
					deinit_cli();
 800fcce:	f7fe fd3b 	bl	800e748 <deinit_cli>
					cli_stared = false;
 800fcd2:	f04f 0800 	mov.w	r8, #0
 800fcd6:	e7ed      	b.n	800fcb4 <task_supervision+0x70>
 800fcd8:	2200      	movs	r2, #0
 800fcda:	2110      	movs	r1, #16
 800fcdc:	4648      	mov	r0, r9
 800fcde:	f001 fa2d 	bl	801113c <HAL_GPIO_WritePin>
			if(global_usb_initialized_flag == false){
 800fce2:	4b41      	ldr	r3, [pc, #260]	; (800fde8 <task_supervision+0x1a4>)
 800fce4:	781b      	ldrb	r3, [r3, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d14f      	bne.n	800fd8a <task_supervision+0x146>
				global_usb_initialized_flag = true;
 800fcea:	4b3f      	ldr	r3, [pc, #252]	; (800fde8 <task_supervision+0x1a4>)
 800fcec:	2201      	movs	r2, #1
 800fcee:	701a      	strb	r2, [r3, #0]
				MX_USB_DEVICE_Init();
 800fcf0:	f007 fd58 	bl	80177a4 <MX_USB_DEVICE_Init>
				log_enable();
 800fcf4:	f000 fa9c 	bl	8010230 <log_enable>
 800fcf8:	e047      	b.n	800fd8a <task_supervision+0x146>
				global_usb_initialized_flag = false;
 800fcfa:	4b3b      	ldr	r3, [pc, #236]	; (800fde8 <task_supervision+0x1a4>)
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	701a      	strb	r2, [r3, #0]
				MX_USB_DEVICE_DeInit();
 800fd00:	f007 fd7a 	bl	80177f8 <MX_USB_DEVICE_DeInit>
				if(cli_stared){
 800fd04:	f1b8 0f00 	cmp.w	r8, #0
 800fd08:	d148      	bne.n	800fd9c <task_supervision+0x158>
		if(fifo_get_length(&usb_input_fifo) && cli_stared == false){
 800fd0a:	4838      	ldr	r0, [pc, #224]	; (800fdec <task_supervision+0x1a8>)
 800fd0c:	f000 f8d6 	bl	800febc <fifo_get_length>
 800fd10:	2800      	cmp	r0, #0
 800fd12:	d058      	beq.n	800fdc6 <task_supervision+0x182>
			init_cli();
 800fd14:	f7fe fd06 	bl	800e724 <init_cli>
			cli_stared = true;
 800fd18:	f04f 0801 	mov.w	r8, #1
		battery_voltage(&BATTERY, &voltage);
 800fd1c:	a903      	add	r1, sp, #12
 800fd1e:	482d      	ldr	r0, [pc, #180]	; (800fdd4 <task_supervision+0x190>)
 800fd20:	f7fe fe92 	bl	800ea48 <battery_voltage>
		if(voltage < 3500.0f) {
 800fd24:	eddd 7a03 	vldr	s15, [sp, #12]
 800fd28:	eef4 7ac8 	vcmpe.f32	s15, s16
 800fd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd30:	d437      	bmi.n	800fda2 <task_supervision+0x15e>
			log_error("Battery Low! %dmV", (int)voltage);
		}

		log_info("Battery Voltage:%dmV", (int)voltage);
 800fd32:	eddd 7a03 	vldr	s15, [sp, #12]
 800fd36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd3a:	edcd 7a00 	vstr	s15, [sp]
 800fd3e:	4b2c      	ldr	r3, [pc, #176]	; (800fdf0 <task_supervision+0x1ac>)
 800fd40:	225a      	movs	r2, #90	; 0x5a
 800fd42:	4629      	mov	r1, r5
 800fd44:	2002      	movs	r0, #2
 800fd46:	f000 fa85 	bl	8010254 <log_log>

		if(global_flight_state == RECOVERY){
 800fd4a:	4b2a      	ldr	r3, [pc, #168]	; (800fdf4 <task_supervision+0x1b0>)
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	2b07      	cmp	r3, #7
 800fd50:	d102      	bne.n	800fd58 <task_supervision+0x114>
			if(count == 20){
 800fd52:	2e14      	cmp	r6, #20
 800fd54:	d030      	beq.n	800fdb8 <task_supervision+0x174>
				count = 0;
				osEventFlagsSet(buzzer_event_id, BEEP_RECOVERY);
			} else {
				count++;
 800fd56:	3601      	adds	r6, #1
			}
		}


		tick_count += tick_update;
 800fd58:	443c      	add	r4, r7
		osDelayUntil(tick_count);
 800fd5a:	4620      	mov	r0, r4
 800fd5c:	f005 f977 	bl	801504e <osDelayUntil>
		supervisor_mode_e mode = osEventFlagsWait(supervisor_mode_id, 0xFF, osFlagsWaitAny, 0);
 800fd60:	2300      	movs	r3, #0
 800fd62:	461a      	mov	r2, r3
 800fd64:	21ff      	movs	r1, #255	; 0xff
 800fd66:	4824      	ldr	r0, [pc, #144]	; (800fdf8 <task_supervision+0x1b4>)
 800fd68:	6800      	ldr	r0, [r0, #0]
 800fd6a:	f005 f9ee 	bl	801514a <osEventFlagsWait>
		if(mode == SUPERVISOR_MODE_SHUTDOWN){
 800fd6e:	b2c0      	uxtb	r0, r0
 800fd70:	2801      	cmp	r0, #1
 800fd72:	d097      	beq.n	800fca4 <task_supervision+0x60>
		if(HAL_GPIO_ReadPin(USB_DET_GPIO_Port, USB_DET_Pin)){
 800fd74:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fd78:	4820      	ldr	r0, [pc, #128]	; (800fdfc <task_supervision+0x1b8>)
 800fd7a:	f001 f9d9 	bl	8011130 <HAL_GPIO_ReadPin>
 800fd7e:	2800      	cmp	r0, #0
 800fd80:	d1aa      	bne.n	800fcd8 <task_supervision+0x94>
			if(global_usb_initialized_flag){
 800fd82:	4b19      	ldr	r3, [pc, #100]	; (800fde8 <task_supervision+0x1a4>)
 800fd84:	781b      	ldrb	r3, [r3, #0]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d1b7      	bne.n	800fcfa <task_supervision+0xb6>
		if(fifo_get_length(&usb_input_fifo) && cli_stared == false){
 800fd8a:	4818      	ldr	r0, [pc, #96]	; (800fdec <task_supervision+0x1a8>)
 800fd8c:	f000 f896 	bl	800febc <fifo_get_length>
 800fd90:	2800      	cmp	r0, #0
 800fd92:	d0c3      	beq.n	800fd1c <task_supervision+0xd8>
 800fd94:	f1b8 0f00 	cmp.w	r8, #0
 800fd98:	d1c0      	bne.n	800fd1c <task_supervision+0xd8>
 800fd9a:	e7bb      	b.n	800fd14 <task_supervision+0xd0>
					deinit_cli();
 800fd9c:	f7fe fcd4 	bl	800e748 <deinit_cli>
					cli_stared = false;
 800fda0:	e7b3      	b.n	800fd0a <task_supervision+0xc6>
			log_error("Battery Low! %dmV", (int)voltage);
 800fda2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fda6:	edcd 7a00 	vstr	s15, [sp]
 800fdaa:	4b15      	ldr	r3, [pc, #84]	; (800fe00 <task_supervision+0x1bc>)
 800fdac:	2257      	movs	r2, #87	; 0x57
 800fdae:	4629      	mov	r1, r5
 800fdb0:	2004      	movs	r0, #4
 800fdb2:	f000 fa4f 	bl	8010254 <log_log>
 800fdb6:	e7bc      	b.n	800fd32 <task_supervision+0xee>
				osEventFlagsSet(buzzer_event_id, BEEP_RECOVERY);
 800fdb8:	2106      	movs	r1, #6
 800fdba:	4b12      	ldr	r3, [pc, #72]	; (800fe04 <task_supervision+0x1c0>)
 800fdbc:	6818      	ldr	r0, [r3, #0]
 800fdbe:	f005 f975 	bl	80150ac <osEventFlagsSet>
				count = 0;
 800fdc2:	2600      	movs	r6, #0
 800fdc4:	e7c8      	b.n	800fd58 <task_supervision+0x114>
		if(fifo_get_length(&usb_input_fifo) && cli_stared == false){
 800fdc6:	f04f 0800 	mov.w	r8, #0
 800fdca:	e7a7      	b.n	800fd1c <task_supervision+0xd8>
 800fdcc:	08019fe6 	.word	0x08019fe6
 800fdd0:	08019fbc 	.word	0x08019fbc
 800fdd4:	20000054 	.word	0x20000054
 800fdd8:	08019ffc 	.word	0x08019ffc
 800fddc:	cccccccd 	.word	0xcccccccd
 800fde0:	455ac000 	.word	0x455ac000
 800fde4:	0801a014 	.word	0x0801a014
 800fde8:	20000494 	.word	0x20000494
 800fdec:	200053b0 	.word	0x200053b0
 800fdf0:	0801a040 	.word	0x0801a040
 800fdf4:	20000000 	.word	0x20000000
 800fdf8:	200055fc 	.word	0x200055fc
 800fdfc:	40020000 	.word	0x40020000
 800fe00:	0801a02c 	.word	0x0801a02c
 800fe04:	200053e8 	.word	0x200053e8
 800fe08:	40020400 	.word	0x40020400

0800fe0c <task_telemetry>:
 800fe0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe10:	4b1b      	ldr	r3, [pc, #108]	; (800fe80 <task_telemetry+0x74>)
 800fe12:	2211      	movs	r2, #17
 800fe14:	491b      	ldr	r1, [pc, #108]	; (800fe84 <task_telemetry+0x78>)
 800fe16:	2001      	movs	r0, #1
 800fe18:	f000 fa1c 	bl	8010254 <log_log>
 800fe1c:	2201      	movs	r2, #1
 800fe1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fe22:	4819      	ldr	r0, [pc, #100]	; (800fe88 <task_telemetry+0x7c>)
 800fe24:	f001 f98a 	bl	801113c <HAL_GPIO_WritePin>
 800fe28:	f005 f890 	bl	8014f4c <osKernelGetTickCount>
 800fe2c:	4604      	mov	r4, r0
 800fe2e:	f005 f897 	bl	8014f60 <osKernelGetTickFreq>
 800fe32:	4b16      	ldr	r3, [pc, #88]	; (800fe8c <task_telemetry+0x80>)
 800fe34:	fba3 3500 	umull	r3, r5, r3, r0
 800fe38:	08ed      	lsrs	r5, r5, #3
 800fe3a:	4e15      	ldr	r6, [pc, #84]	; (800fe90 <task_telemetry+0x84>)
 800fe3c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800fe94 <task_telemetry+0x88>
 800fe40:	4f11      	ldr	r7, [pc, #68]	; (800fe88 <task_telemetry+0x7c>)
 800fe42:	e003      	b.n	800fe4c <task_telemetry+0x40>
 800fe44:	442c      	add	r4, r5
 800fe46:	4620      	mov	r0, r4
 800fe48:	f005 f901 	bl	801504e <osDelayUntil>
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	461a      	mov	r2, r3
 800fe50:	21ff      	movs	r1, #255	; 0xff
 800fe52:	6830      	ldr	r0, [r6, #0]
 800fe54:	f005 f979 	bl	801514a <osEventFlagsWait>
 800fe58:	b2c0      	uxtb	r0, r0
 800fe5a:	2801      	cmp	r0, #1
 800fe5c:	d1f2      	bne.n	800fe44 <task_telemetry+0x38>
 800fe5e:	4643      	mov	r3, r8
 800fe60:	221c      	movs	r2, #28
 800fe62:	4908      	ldr	r1, [pc, #32]	; (800fe84 <task_telemetry+0x78>)
 800fe64:	f000 f9f6 	bl	8010254 <log_log>
 800fe68:	2200      	movs	r2, #0
 800fe6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fe6e:	4638      	mov	r0, r7
 800fe70:	f001 f964 	bl	801113c <HAL_GPIO_WritePin>
 800fe74:	f005 f8c1 	bl	8014ffa <osThreadGetId>
 800fe78:	f005 f8c3 	bl	8015002 <osThreadTerminate>
 800fe7c:	e7e2      	b.n	800fe44 <task_telemetry+0x38>
 800fe7e:	bf00      	nop
 800fe80:	0801a058 	.word	0x0801a058
 800fe84:	0801a082 	.word	0x0801a082
 800fe88:	40020400 	.word	0x40020400
 800fe8c:	cccccccd 	.word	0xcccccccd
 800fe90:	20005600 	.word	0x20005600
 800fe94:	0801a094 	.word	0x0801a094

0800fe98 <fifo_flush>:
 800fe98:	7d03      	ldrb	r3, [r0, #20]
 800fe9a:	b933      	cbnz	r3, 800feaa <fifo_flush+0x12>
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	7503      	strb	r3, [r0, #20]
 800fea0:	2300      	movs	r3, #0
 800fea2:	6043      	str	r3, [r0, #4]
 800fea4:	6003      	str	r3, [r0, #0]
 800fea6:	6083      	str	r3, [r0, #8]
 800fea8:	7503      	strb	r3, [r0, #20]
 800feaa:	4770      	bx	lr

0800feac <fifo_init>:
 800feac:	b508      	push	{r3, lr}
 800feae:	6101      	str	r1, [r0, #16]
 800feb0:	60c2      	str	r2, [r0, #12]
 800feb2:	2200      	movs	r2, #0
 800feb4:	7502      	strb	r2, [r0, #20]
 800feb6:	f7ff ffef 	bl	800fe98 <fifo_flush>
 800feba:	bd08      	pop	{r3, pc}

0800febc <fifo_get_length>:
 800febc:	6880      	ldr	r0, [r0, #8]
 800febe:	4770      	bx	lr

0800fec0 <fifo_read>:
 800fec0:	7d02      	ldrb	r2, [r0, #20]
 800fec2:	b9da      	cbnz	r2, 800fefc <fifo_read+0x3c>
 800fec4:	4603      	mov	r3, r0
 800fec6:	2201      	movs	r2, #1
 800fec8:	7502      	strb	r2, [r0, #20]
 800feca:	6882      	ldr	r2, [r0, #8]
 800fecc:	b912      	cbnz	r2, 800fed4 <fifo_read+0x14>
 800fece:	2000      	movs	r0, #0
 800fed0:	7518      	strb	r0, [r3, #20]
 800fed2:	4770      	bx	lr
 800fed4:	b410      	push	{r4}
 800fed6:	6842      	ldr	r2, [r0, #4]
 800fed8:	6901      	ldr	r1, [r0, #16]
 800feda:	5c88      	ldrb	r0, [r1, r2]
 800fedc:	685a      	ldr	r2, [r3, #4]
 800fede:	68dc      	ldr	r4, [r3, #12]
 800fee0:	3201      	adds	r2, #1
 800fee2:	fbb2 f1f4 	udiv	r1, r2, r4
 800fee6:	fb04 2211 	mls	r2, r4, r1, r2
 800feea:	605a      	str	r2, [r3, #4]
 800feec:	689a      	ldr	r2, [r3, #8]
 800feee:	3a01      	subs	r2, #1
 800fef0:	609a      	str	r2, [r3, #8]
 800fef2:	2200      	movs	r2, #0
 800fef4:	751a      	strb	r2, [r3, #20]
 800fef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fefa:	4770      	bx	lr
 800fefc:	2000      	movs	r0, #0
 800fefe:	4770      	bx	lr

0800ff00 <fifo_write>:
 800ff00:	7d02      	ldrb	r2, [r0, #20]
 800ff02:	bb02      	cbnz	r2, 800ff46 <fifo_write+0x46>
 800ff04:	b410      	push	{r4}
 800ff06:	4603      	mov	r3, r0
 800ff08:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800ff0c:	2201      	movs	r2, #1
 800ff0e:	751a      	strb	r2, [r3, #20]
 800ff10:	689c      	ldr	r4, [r3, #8]
 800ff12:	68da      	ldr	r2, [r3, #12]
 800ff14:	4294      	cmp	r4, r2
 800ff16:	d304      	bcc.n	800ff22 <fifo_write+0x22>
 800ff18:	2200      	movs	r2, #0
 800ff1a:	751a      	strb	r2, [r3, #20]
 800ff1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff20:	4770      	bx	lr
 800ff22:	681a      	ldr	r2, [r3, #0]
 800ff24:	6918      	ldr	r0, [r3, #16]
 800ff26:	5481      	strb	r1, [r0, r2]
 800ff28:	681a      	ldr	r2, [r3, #0]
 800ff2a:	68d8      	ldr	r0, [r3, #12]
 800ff2c:	3201      	adds	r2, #1
 800ff2e:	fbb2 f1f0 	udiv	r1, r2, r0
 800ff32:	fb00 2211 	mls	r2, r0, r1, r2
 800ff36:	601a      	str	r2, [r3, #0]
 800ff38:	689a      	ldr	r2, [r3, #8]
 800ff3a:	3201      	adds	r2, #1
 800ff3c:	609a      	str	r2, [r3, #8]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	751a      	strb	r2, [r3, #20]
 800ff42:	2001      	movs	r0, #1
 800ff44:	e7ea      	b.n	800ff1c <fifo_write+0x1c>
 800ff46:	2000      	movs	r0, #0
 800ff48:	4770      	bx	lr

0800ff4a <fifo_read_bytes>:
 800ff4a:	7d03      	ldrb	r3, [r0, #20]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d141      	bne.n	800ffd4 <fifo_read_bytes+0x8a>
 800ff50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff54:	4604      	mov	r4, r0
 800ff56:	460e      	mov	r6, r1
 800ff58:	4615      	mov	r5, r2
 800ff5a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800ff5e:	2301      	movs	r3, #1
 800ff60:	7523      	strb	r3, [r4, #20]
 800ff62:	68a3      	ldr	r3, [r4, #8]
 800ff64:	4293      	cmp	r3, r2
 800ff66:	d203      	bcs.n	800ff70 <fifo_read_bytes+0x26>
 800ff68:	2300      	movs	r3, #0
 800ff6a:	7523      	strb	r3, [r4, #20]
 800ff6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff70:	6863      	ldr	r3, [r4, #4]
 800ff72:	68e2      	ldr	r2, [r4, #12]
 800ff74:	442b      	add	r3, r5
 800ff76:	4293      	cmp	r3, r2
 800ff78:	d924      	bls.n	800ffc4 <fifo_read_bytes+0x7a>
 800ff7a:	6863      	ldr	r3, [r4, #4]
 800ff7c:	68e2      	ldr	r2, [r4, #12]
 800ff7e:	442b      	add	r3, r5
 800ff80:	fbb3 f7f2 	udiv	r7, r3, r2
 800ff84:	fb02 3717 	mls	r7, r2, r7, r3
 800ff88:	eba5 0807 	sub.w	r8, r5, r7
 800ff8c:	6863      	ldr	r3, [r4, #4]
 800ff8e:	6921      	ldr	r1, [r4, #16]
 800ff90:	4642      	mov	r2, r8
 800ff92:	4419      	add	r1, r3
 800ff94:	4630      	mov	r0, r6
 800ff96:	f007 ff11 	bl	8017dbc <memcpy>
 800ff9a:	463a      	mov	r2, r7
 800ff9c:	6921      	ldr	r1, [r4, #16]
 800ff9e:	eb06 0008 	add.w	r0, r6, r8
 800ffa2:	f007 ff0b 	bl	8017dbc <memcpy>
 800ffa6:	6863      	ldr	r3, [r4, #4]
 800ffa8:	68e1      	ldr	r1, [r4, #12]
 800ffaa:	442b      	add	r3, r5
 800ffac:	fbb3 f2f1 	udiv	r2, r3, r1
 800ffb0:	fb01 3312 	mls	r3, r1, r2, r3
 800ffb4:	6063      	str	r3, [r4, #4]
 800ffb6:	68a2      	ldr	r2, [r4, #8]
 800ffb8:	1b55      	subs	r5, r2, r5
 800ffba:	60a5      	str	r5, [r4, #8]
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	7523      	strb	r3, [r4, #20]
 800ffc0:	2001      	movs	r0, #1
 800ffc2:	e7d3      	b.n	800ff6c <fifo_read_bytes+0x22>
 800ffc4:	6863      	ldr	r3, [r4, #4]
 800ffc6:	6921      	ldr	r1, [r4, #16]
 800ffc8:	462a      	mov	r2, r5
 800ffca:	4419      	add	r1, r3
 800ffcc:	4630      	mov	r0, r6
 800ffce:	f007 fef5 	bl	8017dbc <memcpy>
 800ffd2:	e7e8      	b.n	800ffa6 <fifo_read_bytes+0x5c>
 800ffd4:	2000      	movs	r0, #0
 800ffd6:	4770      	bx	lr

0800ffd8 <fifo_write_bytes>:
 800ffd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffdc:	7d03      	ldrb	r3, [r0, #20]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d13c      	bne.n	801005c <fifo_write_bytes+0x84>
 800ffe2:	4604      	mov	r4, r0
 800ffe4:	460e      	mov	r6, r1
 800ffe6:	4615      	mov	r5, r2
 800ffe8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800ffec:	2301      	movs	r3, #1
 800ffee:	7523      	strb	r3, [r4, #20]
 800fff0:	68e3      	ldr	r3, [r4, #12]
 800fff2:	68a2      	ldr	r2, [r4, #8]
 800fff4:	1a9b      	subs	r3, r3, r2
 800fff6:	42ab      	cmp	r3, r5
 800fff8:	d202      	bcs.n	8010000 <fifo_write_bytes+0x28>
 800fffa:	2300      	movs	r3, #0
 800fffc:	7523      	strb	r3, [r4, #20]
 800fffe:	e02e      	b.n	801005e <fifo_write_bytes+0x86>
 8010000:	6823      	ldr	r3, [r4, #0]
 8010002:	68e2      	ldr	r2, [r4, #12]
 8010004:	442b      	add	r3, r5
 8010006:	4293      	cmp	r3, r2
 8010008:	d921      	bls.n	801004e <fifo_write_bytes+0x76>
 801000a:	6827      	ldr	r7, [r4, #0]
 801000c:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8010010:	eba9 0807 	sub.w	r8, r9, r7
 8010014:	6823      	ldr	r3, [r4, #0]
 8010016:	6920      	ldr	r0, [r4, #16]
 8010018:	4642      	mov	r2, r8
 801001a:	4418      	add	r0, r3
 801001c:	f007 fece 	bl	8017dbc <memcpy>
 8010020:	197a      	adds	r2, r7, r5
 8010022:	eba2 0209 	sub.w	r2, r2, r9
 8010026:	eb06 0108 	add.w	r1, r6, r8
 801002a:	6920      	ldr	r0, [r4, #16]
 801002c:	f007 fec6 	bl	8017dbc <memcpy>
 8010030:	6823      	ldr	r3, [r4, #0]
 8010032:	68e1      	ldr	r1, [r4, #12]
 8010034:	442b      	add	r3, r5
 8010036:	fbb3 f2f1 	udiv	r2, r3, r1
 801003a:	fb01 3312 	mls	r3, r1, r2, r3
 801003e:	6023      	str	r3, [r4, #0]
 8010040:	68a2      	ldr	r2, [r4, #8]
 8010042:	4415      	add	r5, r2
 8010044:	60a5      	str	r5, [r4, #8]
 8010046:	2300      	movs	r3, #0
 8010048:	7523      	strb	r3, [r4, #20]
 801004a:	2001      	movs	r0, #1
 801004c:	e007      	b.n	801005e <fifo_write_bytes+0x86>
 801004e:	6823      	ldr	r3, [r4, #0]
 8010050:	6920      	ldr	r0, [r4, #16]
 8010052:	462a      	mov	r2, r5
 8010054:	4418      	add	r0, r3
 8010056:	f007 feb1 	bl	8017dbc <memcpy>
 801005a:	e7e9      	b.n	8010030 <fifo_write_bytes+0x58>
 801005c:	2000      	movs	r0, #0
 801005e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010062 <fifo_write_str>:
 8010062:	b538      	push	{r3, r4, r5, lr}
 8010064:	4605      	mov	r5, r0
 8010066:	460c      	mov	r4, r1
 8010068:	780b      	ldrb	r3, [r1, #0]
 801006a:	b14b      	cbz	r3, 8010080 <fifo_write_str+0x1e>
 801006c:	7821      	ldrb	r1, [r4, #0]
 801006e:	4628      	mov	r0, r5
 8010070:	f7ff ff46 	bl	800ff00 <fifo_write>
 8010074:	2800      	cmp	r0, #0
 8010076:	d0f9      	beq.n	801006c <fifo_write_str+0xa>
 8010078:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801007c:	2b00      	cmp	r3, #0
 801007e:	d1f5      	bne.n	801006c <fifo_write_str+0xa>
 8010080:	bd38      	pop	{r3, r4, r5, pc}
	...

08010084 <mul>:
 8010084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010088:	b085      	sub	sp, #20
 801008a:	9102      	str	r1, [sp, #8]
 801008c:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
 8010090:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8010094:	9300      	str	r3, [sp, #0]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d048      	beq.n	801012c <mul+0xa8>
 801009a:	4696      	mov	lr, r2
 801009c:	ea4f 048a 	mov.w	r4, sl, lsl #2
 80100a0:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 80100a4:	1e7a      	subs	r2, r7, #1
 80100a6:	b292      	uxth	r2, r2
 80100a8:	1c53      	adds	r3, r2, #1
 80100aa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80100ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80100b2:	b29b      	uxth	r3, r3
 80100b4:	1c59      	adds	r1, r3, #1
 80100b6:	0089      	lsls	r1, r1, #2
 80100b8:	9101      	str	r1, [sp, #4]
 80100ba:	f04f 0800 	mov.w	r8, #0
 80100be:	0092      	lsls	r2, r2, #2
 80100c0:	f082 0903 	eor.w	r9, r2, #3
 80100c4:	ea6f 0909 	mvn.w	r9, r9
 80100c8:	9103      	str	r1, [sp, #12]
 80100ca:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8010134 <mul+0xb0>
 80100ce:	e022      	b.n	8010116 <mul+0x92>
 80100d0:	3504      	adds	r5, #4
 80100d2:	42b1      	cmp	r1, r6
 80100d4:	d015      	beq.n	8010102 <mul+0x7e>
 80100d6:	462b      	mov	r3, r5
 80100d8:	ece1 6a01 	vstmia	r1!, {s13}
 80100dc:	2f00      	cmp	r7, #0
 80100de:	d0f7      	beq.n	80100d0 <mul+0x4c>
 80100e0:	4662      	mov	r2, ip
 80100e2:	ecf2 7a01 	vldmia	r2!, {s15}
 80100e6:	ed93 7a00 	vldr	s14, [r3]
 80100ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80100ee:	ed51 7a01 	vldr	s15, [r1, #-4]
 80100f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80100f6:	ed41 7a01 	vstr	s15, [r1, #-4]
 80100fa:	4423      	add	r3, r4
 80100fc:	4282      	cmp	r2, r0
 80100fe:	d1f0      	bne.n	80100e2 <mul+0x5e>
 8010100:	e7e6      	b.n	80100d0 <mul+0x4c>
 8010102:	9b01      	ldr	r3, [sp, #4]
 8010104:	449e      	add	lr, r3
 8010106:	f108 0801 	add.w	r8, r8, #1
 801010a:	4458      	add	r0, fp
 801010c:	fa1f f388 	uxth.w	r3, r8
 8010110:	9a00      	ldr	r2, [sp, #0]
 8010112:	429a      	cmp	r2, r3
 8010114:	d90a      	bls.n	801012c <mul+0xa8>
 8010116:	f1ba 0f00 	cmp.w	sl, #0
 801011a:	d0f4      	beq.n	8010106 <mul+0x82>
 801011c:	eb09 0c00 	add.w	ip, r9, r0
 8010120:	4671      	mov	r1, lr
 8010122:	9d02      	ldr	r5, [sp, #8]
 8010124:	9b03      	ldr	r3, [sp, #12]
 8010126:	eb03 060e 	add.w	r6, r3, lr
 801012a:	e7d4      	b.n	80100d6 <mul+0x52>
 801012c:	b005      	add	sp, #20
 801012e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010132:	bf00      	nop
 8010134:	00000000 	.word	0x00000000

08010138 <tran>:
 8010138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801013c:	af00      	add	r7, sp, #0
 801013e:	460b      	mov	r3, r1
 8010140:	fb02 fa01 	mul.w	sl, r2, r1
 8010144:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8010148:	f10a 0107 	add.w	r1, sl, #7
 801014c:	f021 0107 	bic.w	r1, r1, #7
 8010150:	ebad 0d01 	sub.w	sp, sp, r1
 8010154:	4669      	mov	r1, sp
 8010156:	b32b      	cbz	r3, 80101a4 <tran+0x6c>
 8010158:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801015c:	468e      	mov	lr, r1
 801015e:	f103 38ff 	add.w	r8, r3, #4294967295
 8010162:	fa1f f888 	uxth.w	r8, r8
 8010166:	f108 0801 	add.w	r8, r8, #1
 801016a:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 801016e:	f102 39ff 	add.w	r9, r2, #4294967295
 8010172:	fa1f f989 	uxth.w	r9, r9
 8010176:	f109 0901 	add.w	r9, r9, #1
 801017a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 801017e:	4603      	mov	r3, r0
 8010180:	e003      	b.n	801018a <tran+0x52>
 8010182:	f10e 0e04 	add.w	lr, lr, #4
 8010186:	45c6      	cmp	lr, r8
 8010188:	d00c      	beq.n	80101a4 <tran+0x6c>
 801018a:	4674      	mov	r4, lr
 801018c:	2a00      	cmp	r2, #0
 801018e:	d0f8      	beq.n	8010182 <tran+0x4a>
 8010190:	eb03 0609 	add.w	r6, r3, r9
 8010194:	f853 5b04 	ldr.w	r5, [r3], #4
 8010198:	6025      	str	r5, [r4, #0]
 801019a:	4464      	add	r4, ip
 801019c:	42b3      	cmp	r3, r6
 801019e:	d1f9      	bne.n	8010194 <tran+0x5c>
 80101a0:	4633      	mov	r3, r6
 80101a2:	e7ee      	b.n	8010182 <tran+0x4a>
 80101a4:	4652      	mov	r2, sl
 80101a6:	f007 fe09 	bl	8017dbc <memcpy>
 80101aa:	46bd      	mov	sp, r7
 80101ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080101b0 <add>:
 80101b0:	b1a3      	cbz	r3, 80101dc <add+0x2c>
 80101b2:	b410      	push	{r4}
 80101b4:	461c      	mov	r4, r3
 80101b6:	4603      	mov	r3, r0
 80101b8:	3c01      	subs	r4, #1
 80101ba:	b2a4      	uxth	r4, r4
 80101bc:	3004      	adds	r0, #4
 80101be:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80101c2:	ecf3 7a01 	vldmia	r3!, {s15}
 80101c6:	ecb1 7a01 	vldmia	r1!, {s14}
 80101ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80101ce:	ece2 7a01 	vstmia	r2!, {s15}
 80101d2:	4283      	cmp	r3, r0
 80101d4:	d1f5      	bne.n	80101c2 <add+0x12>
 80101d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101da:	4770      	bx	lr
 80101dc:	4770      	bx	lr

080101de <sub>:
 80101de:	b1a3      	cbz	r3, 801020a <sub+0x2c>
 80101e0:	b410      	push	{r4}
 80101e2:	461c      	mov	r4, r3
 80101e4:	4603      	mov	r3, r0
 80101e6:	3c01      	subs	r4, #1
 80101e8:	b2a4      	uxth	r4, r4
 80101ea:	3004      	adds	r0, #4
 80101ec:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80101f0:	ecf3 7a01 	vldmia	r3!, {s15}
 80101f4:	ecb1 7a01 	vldmia	r1!, {s14}
 80101f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80101fc:	ece2 7a01 	vstmia	r2!, {s15}
 8010200:	4283      	cmp	r3, r0
 8010202:	d1f5      	bne.n	80101f0 <sub+0x12>
 8010204:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010208:	4770      	bx	lr
 801020a:	4770      	bx	lr

0801020c <log_init>:
 801020c:	b510      	push	{r4, lr}
 801020e:	b084      	sub	sp, #16
 8010210:	4b05      	ldr	r3, [pc, #20]	; (8010228 <log_init+0x1c>)
 8010212:	466c      	mov	r4, sp
 8010214:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010216:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801021a:	4620      	mov	r0, r4
 801021c:	f004 ffc8 	bl	80151b0 <osMutexNew>
 8010220:	4b02      	ldr	r3, [pc, #8]	; (801022c <log_init+0x20>)
 8010222:	6018      	str	r0, [r3, #0]
 8010224:	b004      	add	sp, #16
 8010226:	bd10      	pop	{r4, pc}
 8010228:	080192ac 	.word	0x080192ac
 801022c:	200080d8 	.word	0x200080d8

08010230 <log_enable>:
 8010230:	4b01      	ldr	r3, [pc, #4]	; (8010238 <log_enable+0x8>)
 8010232:	2201      	movs	r2, #1
 8010234:	711a      	strb	r2, [r3, #4]
 8010236:	4770      	bx	lr
 8010238:	2000053c 	.word	0x2000053c

0801023c <log_disable>:
 801023c:	4b01      	ldr	r3, [pc, #4]	; (8010244 <log_disable+0x8>)
 801023e:	2200      	movs	r2, #0
 8010240:	711a      	strb	r2, [r3, #4]
 8010242:	4770      	bx	lr
 8010244:	2000053c 	.word	0x2000053c

08010248 <log_is_enabled>:
 8010248:	4b01      	ldr	r3, [pc, #4]	; (8010250 <log_is_enabled+0x8>)
 801024a:	7918      	ldrb	r0, [r3, #4]
 801024c:	4770      	bx	lr
 801024e:	bf00      	nop
 8010250:	2000053c 	.word	0x2000053c

08010254 <log_log>:
 8010254:	b408      	push	{r3}
 8010256:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801025a:	b086      	sub	sp, #24
 801025c:	4b2d      	ldr	r3, [pc, #180]	; (8010314 <log_log+0xc0>)
 801025e:	791b      	ldrb	r3, [r3, #4]
 8010260:	b133      	cbz	r3, 8010270 <log_log+0x1c>
 8010262:	4606      	mov	r6, r0
 8010264:	460d      	mov	r5, r1
 8010266:	4614      	mov	r4, r2
 8010268:	4b2a      	ldr	r3, [pc, #168]	; (8010314 <log_log+0xc0>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	4283      	cmp	r3, r0
 801026e:	dd04      	ble.n	801027a <log_log+0x26>
 8010270:	b006      	add	sp, #24
 8010272:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010276:	b001      	add	sp, #4
 8010278:	4770      	bx	lr
 801027a:	2105      	movs	r1, #5
 801027c:	4b26      	ldr	r3, [pc, #152]	; (8010318 <log_log+0xc4>)
 801027e:	6818      	ldr	r0, [r3, #0]
 8010280:	f004 ffd6 	bl	8015230 <osMutexAcquire>
 8010284:	2800      	cmp	r0, #0
 8010286:	d1f3      	bne.n	8010270 <log_log+0x1c>
 8010288:	f004 fe60 	bl	8014f4c <osKernelGetTickCount>
 801028c:	4603      	mov	r3, r0
 801028e:	4f23      	ldr	r7, [pc, #140]	; (801031c <log_log+0xc8>)
 8010290:	4a23      	ldr	r2, [pc, #140]	; (8010320 <log_log+0xcc>)
 8010292:	2110      	movs	r1, #16
 8010294:	4638      	mov	r0, r7
 8010296:	f007 fe61 	bl	8017f5c <sniprintf>
 801029a:	f04f 0900 	mov.w	r9, #0
 801029e:	f807 9000 	strb.w	r9, [r7, r0]
 80102a2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8010340 <log_log+0xec>
 80102a6:	9400      	str	r4, [sp, #0]
 80102a8:	462b      	mov	r3, r5
 80102aa:	4a1e      	ldr	r2, [pc, #120]	; (8010324 <log_log+0xd0>)
 80102ac:	211e      	movs	r1, #30
 80102ae:	4640      	mov	r0, r8
 80102b0:	f007 fe54 	bl	8017f5c <sniprintf>
 80102b4:	f808 9000 	strb.w	r9, [r8, r0]
 80102b8:	4c1b      	ldr	r4, [pc, #108]	; (8010328 <log_log+0xd4>)
 80102ba:	f8cd 8008 	str.w	r8, [sp, #8]
 80102be:	4b1b      	ldr	r3, [pc, #108]	; (801032c <log_log+0xd8>)
 80102c0:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80102c4:	9301      	str	r3, [sp, #4]
 80102c6:	4b1a      	ldr	r3, [pc, #104]	; (8010330 <log_log+0xdc>)
 80102c8:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80102cc:	9300      	str	r3, [sp, #0]
 80102ce:	463b      	mov	r3, r7
 80102d0:	4a18      	ldr	r2, [pc, #96]	; (8010334 <log_log+0xe0>)
 80102d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80102d6:	4620      	mov	r0, r4
 80102d8:	f007 fe40 	bl	8017f5c <sniprintf>
 80102dc:	ab0e      	add	r3, sp, #56	; 0x38
 80102de:	9305      	str	r3, [sp, #20]
 80102e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80102e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80102e6:	4420      	add	r0, r4
 80102e8:	f008 f834 	bl	8018354 <vsniprintf>
 80102ec:	4620      	mov	r0, r4
 80102ee:	f7fb fea7 	bl	800c040 <strlen>
 80102f2:	4b11      	ldr	r3, [pc, #68]	; (8010338 <log_log+0xe4>)
 80102f4:	881b      	ldrh	r3, [r3, #0]
 80102f6:	5223      	strh	r3, [r4, r0]
 80102f8:	4620      	mov	r0, r4
 80102fa:	f7fb fea1 	bl	800c040 <strlen>
 80102fe:	4602      	mov	r2, r0
 8010300:	4621      	mov	r1, r4
 8010302:	480e      	ldr	r0, [pc, #56]	; (801033c <log_log+0xe8>)
 8010304:	f7ff fe68 	bl	800ffd8 <fifo_write_bytes>
 8010308:	4b03      	ldr	r3, [pc, #12]	; (8010318 <log_log+0xc4>)
 801030a:	6818      	ldr	r0, [r3, #0]
 801030c:	f004 ffbc 	bl	8015288 <osMutexRelease>
 8010310:	e7ae      	b.n	8010270 <log_log+0x1c>
 8010312:	bf00      	nop
 8010314:	2000053c 	.word	0x2000053c
 8010318:	200080d8 	.word	0x200080d8
 801031c:	20000564 	.word	0x20000564
 8010320:	08019308 	.word	0x08019308
 8010324:	0801a118 	.word	0x0801a118
 8010328:	20000574 	.word	0x20000574
 801032c:	0801a15c 	.word	0x0801a15c
 8010330:	0801a144 	.word	0x0801a144
 8010334:	0801a120 	.word	0x0801a120
 8010338:	0801a140 	.word	0x0801a140
 801033c:	20005614 	.word	0x20005614
 8010340:	20000544 	.word	0x20000544

08010344 <Reset_Handler>:
 8010344:	f8df d034 	ldr.w	sp, [pc, #52]	; 801037c <LoopFillZerobss+0x12>
 8010348:	480d      	ldr	r0, [pc, #52]	; (8010380 <LoopFillZerobss+0x16>)
 801034a:	490e      	ldr	r1, [pc, #56]	; (8010384 <LoopFillZerobss+0x1a>)
 801034c:	4a0e      	ldr	r2, [pc, #56]	; (8010388 <LoopFillZerobss+0x1e>)
 801034e:	2300      	movs	r3, #0
 8010350:	e002      	b.n	8010358 <LoopCopyDataInit>

08010352 <CopyDataInit>:
 8010352:	58d4      	ldr	r4, [r2, r3]
 8010354:	50c4      	str	r4, [r0, r3]
 8010356:	3304      	adds	r3, #4

08010358 <LoopCopyDataInit>:
 8010358:	18c4      	adds	r4, r0, r3
 801035a:	428c      	cmp	r4, r1
 801035c:	d3f9      	bcc.n	8010352 <CopyDataInit>
 801035e:	4a0b      	ldr	r2, [pc, #44]	; (801038c <LoopFillZerobss+0x22>)
 8010360:	4c0b      	ldr	r4, [pc, #44]	; (8010390 <LoopFillZerobss+0x26>)
 8010362:	2300      	movs	r3, #0
 8010364:	e001      	b.n	801036a <LoopFillZerobss>

08010366 <FillZerobss>:
 8010366:	6013      	str	r3, [r2, #0]
 8010368:	3204      	adds	r2, #4

0801036a <LoopFillZerobss>:
 801036a:	42a2      	cmp	r2, r4
 801036c:	d3fb      	bcc.n	8010366 <FillZerobss>
 801036e:	f7fe f817 	bl	800e3a0 <SystemInit>
 8010372:	f007 fcf7 	bl	8017d64 <__libc_init_array>
 8010376:	f7fd fdbd 	bl	800def4 <main>
 801037a:	4770      	bx	lr
 801037c:	20020000 	.word	0x20020000
 8010380:	20000000 	.word	0x20000000
 8010384:	20000248 	.word	0x20000248
 8010388:	0801a30c 	.word	0x0801a30c
 801038c:	20000248 	.word	0x20000248
 8010390:	20008cf4 	.word	0x20008cf4

08010394 <ADC_IRQHandler>:
 8010394:	e7fe      	b.n	8010394 <ADC_IRQHandler>
	...

08010398 <HAL_Init>:
 8010398:	b508      	push	{r3, lr}
 801039a:	4b0b      	ldr	r3, [pc, #44]	; (80103c8 <HAL_Init+0x30>)
 801039c:	681a      	ldr	r2, [r3, #0]
 801039e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80103a2:	601a      	str	r2, [r3, #0]
 80103a4:	681a      	ldr	r2, [r3, #0]
 80103a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80103aa:	601a      	str	r2, [r3, #0]
 80103ac:	681a      	ldr	r2, [r3, #0]
 80103ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80103b2:	601a      	str	r2, [r3, #0]
 80103b4:	2003      	movs	r0, #3
 80103b6:	f000 faf5 	bl	80109a4 <HAL_NVIC_SetPriorityGrouping>
 80103ba:	200f      	movs	r0, #15
 80103bc:	f7fd ff54 	bl	800e268 <HAL_InitTick>
 80103c0:	f7fd fdb0 	bl	800df24 <HAL_MspInit>
 80103c4:	2000      	movs	r0, #0
 80103c6:	bd08      	pop	{r3, pc}
 80103c8:	40023c00 	.word	0x40023c00

080103cc <HAL_IncTick>:
 80103cc:	4a03      	ldr	r2, [pc, #12]	; (80103dc <HAL_IncTick+0x10>)
 80103ce:	6811      	ldr	r1, [r2, #0]
 80103d0:	4b03      	ldr	r3, [pc, #12]	; (80103e0 <HAL_IncTick+0x14>)
 80103d2:	781b      	ldrb	r3, [r3, #0]
 80103d4:	440b      	add	r3, r1
 80103d6:	6013      	str	r3, [r2, #0]
 80103d8:	4770      	bx	lr
 80103da:	bf00      	nop
 80103dc:	200080dc 	.word	0x200080dc
 80103e0:	20000060 	.word	0x20000060

080103e4 <HAL_GetTick>:
 80103e4:	4b01      	ldr	r3, [pc, #4]	; (80103ec <HAL_GetTick+0x8>)
 80103e6:	6818      	ldr	r0, [r3, #0]
 80103e8:	4770      	bx	lr
 80103ea:	bf00      	nop
 80103ec:	200080dc 	.word	0x200080dc

080103f0 <HAL_Delay>:
 80103f0:	b538      	push	{r3, r4, r5, lr}
 80103f2:	4604      	mov	r4, r0
 80103f4:	f7ff fff6 	bl	80103e4 <HAL_GetTick>
 80103f8:	4605      	mov	r5, r0
 80103fa:	f1b4 3fff 	cmp.w	r4, #4294967295
 80103fe:	d002      	beq.n	8010406 <HAL_Delay+0x16>
 8010400:	4b04      	ldr	r3, [pc, #16]	; (8010414 <HAL_Delay+0x24>)
 8010402:	781b      	ldrb	r3, [r3, #0]
 8010404:	441c      	add	r4, r3
 8010406:	f7ff ffed 	bl	80103e4 <HAL_GetTick>
 801040a:	1b40      	subs	r0, r0, r5
 801040c:	42a0      	cmp	r0, r4
 801040e:	d3fa      	bcc.n	8010406 <HAL_Delay+0x16>
 8010410:	bd38      	pop	{r3, r4, r5, pc}
 8010412:	bf00      	nop
 8010414:	20000060 	.word	0x20000060

08010418 <HAL_GetREVID>:
 8010418:	4b01      	ldr	r3, [pc, #4]	; (8010420 <HAL_GetREVID+0x8>)
 801041a:	6818      	ldr	r0, [r3, #0]
 801041c:	0c00      	lsrs	r0, r0, #16
 801041e:	4770      	bx	lr
 8010420:	e0042000 	.word	0xe0042000

08010424 <HAL_GetDEVID>:
 8010424:	4b02      	ldr	r3, [pc, #8]	; (8010430 <HAL_GetDEVID+0xc>)
 8010426:	6818      	ldr	r0, [r3, #0]
 8010428:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801042c:	4770      	bx	lr
 801042e:	bf00      	nop
 8010430:	e0042000 	.word	0xe0042000

08010434 <HAL_ADC_Init>:
 8010434:	2800      	cmp	r0, #0
 8010436:	f000 80b9 	beq.w	80105ac <HAL_ADC_Init+0x178>
 801043a:	b510      	push	{r4, lr}
 801043c:	4604      	mov	r4, r0
 801043e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010440:	b143      	cbz	r3, 8010454 <HAL_ADC_Init+0x20>
 8010442:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010444:	f013 0f10 	tst.w	r3, #16
 8010448:	d00b      	beq.n	8010462 <HAL_ADC_Init+0x2e>
 801044a:	2001      	movs	r0, #1
 801044c:	2300      	movs	r3, #0
 801044e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8010452:	bd10      	pop	{r4, pc}
 8010454:	f7fd fd88 	bl	800df68 <HAL_ADC_MspInit>
 8010458:	2300      	movs	r3, #0
 801045a:	6463      	str	r3, [r4, #68]	; 0x44
 801045c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8010460:	e7ef      	b.n	8010442 <HAL_ADC_Init+0xe>
 8010462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010464:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8010468:	f023 0302 	bic.w	r3, r3, #2
 801046c:	f043 0302 	orr.w	r3, r3, #2
 8010470:	6423      	str	r3, [r4, #64]	; 0x40
 8010472:	4b4f      	ldr	r3, [pc, #316]	; (80105b0 <HAL_ADC_Init+0x17c>)
 8010474:	685a      	ldr	r2, [r3, #4]
 8010476:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 801047a:	605a      	str	r2, [r3, #4]
 801047c:	685a      	ldr	r2, [r3, #4]
 801047e:	6861      	ldr	r1, [r4, #4]
 8010480:	430a      	orrs	r2, r1
 8010482:	605a      	str	r2, [r3, #4]
 8010484:	6822      	ldr	r2, [r4, #0]
 8010486:	6853      	ldr	r3, [r2, #4]
 8010488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801048c:	6053      	str	r3, [r2, #4]
 801048e:	6822      	ldr	r2, [r4, #0]
 8010490:	6853      	ldr	r3, [r2, #4]
 8010492:	6921      	ldr	r1, [r4, #16]
 8010494:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8010498:	6053      	str	r3, [r2, #4]
 801049a:	6822      	ldr	r2, [r4, #0]
 801049c:	6853      	ldr	r3, [r2, #4]
 801049e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80104a2:	6053      	str	r3, [r2, #4]
 80104a4:	6822      	ldr	r2, [r4, #0]
 80104a6:	6853      	ldr	r3, [r2, #4]
 80104a8:	68a1      	ldr	r1, [r4, #8]
 80104aa:	430b      	orrs	r3, r1
 80104ac:	6053      	str	r3, [r2, #4]
 80104ae:	6822      	ldr	r2, [r4, #0]
 80104b0:	6893      	ldr	r3, [r2, #8]
 80104b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80104b6:	6093      	str	r3, [r2, #8]
 80104b8:	6822      	ldr	r2, [r4, #0]
 80104ba:	6893      	ldr	r3, [r2, #8]
 80104bc:	68e1      	ldr	r1, [r4, #12]
 80104be:	430b      	orrs	r3, r1
 80104c0:	6093      	str	r3, [r2, #8]
 80104c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80104c4:	4b3b      	ldr	r3, [pc, #236]	; (80105b4 <HAL_ADC_Init+0x180>)
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d05f      	beq.n	801058a <HAL_ADC_Init+0x156>
 80104ca:	6822      	ldr	r2, [r4, #0]
 80104cc:	6893      	ldr	r3, [r2, #8]
 80104ce:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80104d2:	6093      	str	r3, [r2, #8]
 80104d4:	6822      	ldr	r2, [r4, #0]
 80104d6:	6893      	ldr	r3, [r2, #8]
 80104d8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80104da:	430b      	orrs	r3, r1
 80104dc:	6093      	str	r3, [r2, #8]
 80104de:	6822      	ldr	r2, [r4, #0]
 80104e0:	6893      	ldr	r3, [r2, #8]
 80104e2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80104e6:	6093      	str	r3, [r2, #8]
 80104e8:	6822      	ldr	r2, [r4, #0]
 80104ea:	6893      	ldr	r3, [r2, #8]
 80104ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80104ee:	430b      	orrs	r3, r1
 80104f0:	6093      	str	r3, [r2, #8]
 80104f2:	6822      	ldr	r2, [r4, #0]
 80104f4:	6893      	ldr	r3, [r2, #8]
 80104f6:	f023 0302 	bic.w	r3, r3, #2
 80104fa:	6093      	str	r3, [r2, #8]
 80104fc:	6822      	ldr	r2, [r4, #0]
 80104fe:	6893      	ldr	r3, [r2, #8]
 8010500:	7e21      	ldrb	r1, [r4, #24]
 8010502:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8010506:	6093      	str	r3, [r2, #8]
 8010508:	f894 3020 	ldrb.w	r3, [r4, #32]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d047      	beq.n	80105a0 <HAL_ADC_Init+0x16c>
 8010510:	6822      	ldr	r2, [r4, #0]
 8010512:	6853      	ldr	r3, [r2, #4]
 8010514:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010518:	6053      	str	r3, [r2, #4]
 801051a:	6822      	ldr	r2, [r4, #0]
 801051c:	6853      	ldr	r3, [r2, #4]
 801051e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8010522:	6053      	str	r3, [r2, #4]
 8010524:	6821      	ldr	r1, [r4, #0]
 8010526:	684b      	ldr	r3, [r1, #4]
 8010528:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801052a:	3a01      	subs	r2, #1
 801052c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8010530:	604b      	str	r3, [r1, #4]
 8010532:	6822      	ldr	r2, [r4, #0]
 8010534:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8010536:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801053a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801053c:	6821      	ldr	r1, [r4, #0]
 801053e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8010540:	69e2      	ldr	r2, [r4, #28]
 8010542:	3a01      	subs	r2, #1
 8010544:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8010548:	62cb      	str	r3, [r1, #44]	; 0x2c
 801054a:	6822      	ldr	r2, [r4, #0]
 801054c:	6893      	ldr	r3, [r2, #8]
 801054e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010552:	6093      	str	r3, [r2, #8]
 8010554:	6822      	ldr	r2, [r4, #0]
 8010556:	6893      	ldr	r3, [r2, #8]
 8010558:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 801055c:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8010560:	6093      	str	r3, [r2, #8]
 8010562:	6822      	ldr	r2, [r4, #0]
 8010564:	6893      	ldr	r3, [r2, #8]
 8010566:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801056a:	6093      	str	r3, [r2, #8]
 801056c:	6822      	ldr	r2, [r4, #0]
 801056e:	6893      	ldr	r3, [r2, #8]
 8010570:	6961      	ldr	r1, [r4, #20]
 8010572:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8010576:	6093      	str	r3, [r2, #8]
 8010578:	2000      	movs	r0, #0
 801057a:	6460      	str	r0, [r4, #68]	; 0x44
 801057c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801057e:	f023 0303 	bic.w	r3, r3, #3
 8010582:	f043 0301 	orr.w	r3, r3, #1
 8010586:	6423      	str	r3, [r4, #64]	; 0x40
 8010588:	e760      	b.n	801044c <HAL_ADC_Init+0x18>
 801058a:	6822      	ldr	r2, [r4, #0]
 801058c:	6893      	ldr	r3, [r2, #8]
 801058e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8010592:	6093      	str	r3, [r2, #8]
 8010594:	6822      	ldr	r2, [r4, #0]
 8010596:	6893      	ldr	r3, [r2, #8]
 8010598:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 801059c:	6093      	str	r3, [r2, #8]
 801059e:	e7a8      	b.n	80104f2 <HAL_ADC_Init+0xbe>
 80105a0:	6822      	ldr	r2, [r4, #0]
 80105a2:	6853      	ldr	r3, [r2, #4]
 80105a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80105a8:	6053      	str	r3, [r2, #4]
 80105aa:	e7c2      	b.n	8010532 <HAL_ADC_Init+0xfe>
 80105ac:	2001      	movs	r0, #1
 80105ae:	4770      	bx	lr
 80105b0:	40012300 	.word	0x40012300
 80105b4:	0f000001 	.word	0x0f000001

080105b8 <HAL_ADC_DeInit>:
 80105b8:	b1c8      	cbz	r0, 80105ee <HAL_ADC_DeInit+0x36>
 80105ba:	b510      	push	{r4, lr}
 80105bc:	4604      	mov	r4, r0
 80105be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80105c0:	f043 0302 	orr.w	r3, r3, #2
 80105c4:	6403      	str	r3, [r0, #64]	; 0x40
 80105c6:	6802      	ldr	r2, [r0, #0]
 80105c8:	6893      	ldr	r3, [r2, #8]
 80105ca:	f023 0301 	bic.w	r3, r3, #1
 80105ce:	6093      	str	r3, [r2, #8]
 80105d0:	6803      	ldr	r3, [r0, #0]
 80105d2:	689b      	ldr	r3, [r3, #8]
 80105d4:	f013 0f01 	tst.w	r3, #1
 80105d8:	d003      	beq.n	80105e2 <HAL_ADC_DeInit+0x2a>
 80105da:	2000      	movs	r0, #0
 80105dc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80105e0:	bd10      	pop	{r4, pc}
 80105e2:	f7fd fcf5 	bl	800dfd0 <HAL_ADC_MspDeInit>
 80105e6:	2300      	movs	r3, #0
 80105e8:	6463      	str	r3, [r4, #68]	; 0x44
 80105ea:	6423      	str	r3, [r4, #64]	; 0x40
 80105ec:	e7f5      	b.n	80105da <HAL_ADC_DeInit+0x22>
 80105ee:	2001      	movs	r0, #1
 80105f0:	4770      	bx	lr
	...

080105f4 <HAL_ADC_Start>:
 80105f4:	b082      	sub	sp, #8
 80105f6:	2300      	movs	r3, #0
 80105f8:	9301      	str	r3, [sp, #4]
 80105fa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80105fe:	2b01      	cmp	r3, #1
 8010600:	d06e      	beq.n	80106e0 <HAL_ADC_Start+0xec>
 8010602:	2301      	movs	r3, #1
 8010604:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8010608:	6803      	ldr	r3, [r0, #0]
 801060a:	689a      	ldr	r2, [r3, #8]
 801060c:	f012 0f01 	tst.w	r2, #1
 8010610:	d114      	bne.n	801063c <HAL_ADC_Start+0x48>
 8010612:	689a      	ldr	r2, [r3, #8]
 8010614:	f042 0201 	orr.w	r2, r2, #1
 8010618:	609a      	str	r2, [r3, #8]
 801061a:	4b34      	ldr	r3, [pc, #208]	; (80106ec <HAL_ADC_Start+0xf8>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	4a34      	ldr	r2, [pc, #208]	; (80106f0 <HAL_ADC_Start+0xfc>)
 8010620:	fba2 2303 	umull	r2, r3, r2, r3
 8010624:	0c9b      	lsrs	r3, r3, #18
 8010626:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801062a:	9301      	str	r3, [sp, #4]
 801062c:	9b01      	ldr	r3, [sp, #4]
 801062e:	b12b      	cbz	r3, 801063c <HAL_ADC_Start+0x48>
 8010630:	9b01      	ldr	r3, [sp, #4]
 8010632:	3b01      	subs	r3, #1
 8010634:	9301      	str	r3, [sp, #4]
 8010636:	9b01      	ldr	r3, [sp, #4]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d1f9      	bne.n	8010630 <HAL_ADC_Start+0x3c>
 801063c:	6802      	ldr	r2, [r0, #0]
 801063e:	6893      	ldr	r3, [r2, #8]
 8010640:	f013 0f01 	tst.w	r3, #1
 8010644:	d041      	beq.n	80106ca <HAL_ADC_Start+0xd6>
 8010646:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010648:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801064c:	f023 0301 	bic.w	r3, r3, #1
 8010650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010654:	6403      	str	r3, [r0, #64]	; 0x40
 8010656:	6853      	ldr	r3, [r2, #4]
 8010658:	f413 6f80 	tst.w	r3, #1024	; 0x400
 801065c:	d005      	beq.n	801066a <HAL_ADC_Start+0x76>
 801065e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010660:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010664:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010668:	6403      	str	r3, [r0, #64]	; 0x40
 801066a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801066c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8010670:	bf1a      	itte	ne
 8010672:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 8010674:	f023 0306 	bicne.w	r3, r3, #6
 8010678:	2300      	moveq	r3, #0
 801067a:	6443      	str	r3, [r0, #68]	; 0x44
 801067c:	2300      	movs	r3, #0
 801067e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8010682:	f06f 0322 	mvn.w	r3, #34	; 0x22
 8010686:	6013      	str	r3, [r2, #0]
 8010688:	4b1a      	ldr	r3, [pc, #104]	; (80106f4 <HAL_ADC_Start+0x100>)
 801068a:	685b      	ldr	r3, [r3, #4]
 801068c:	f013 0f1f 	tst.w	r3, #31
 8010690:	d10a      	bne.n	80106a8 <HAL_ADC_Start+0xb4>
 8010692:	6803      	ldr	r3, [r0, #0]
 8010694:	689a      	ldr	r2, [r3, #8]
 8010696:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 801069a:	d123      	bne.n	80106e4 <HAL_ADC_Start+0xf0>
 801069c:	689a      	ldr	r2, [r3, #8]
 801069e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80106a2:	609a      	str	r2, [r3, #8]
 80106a4:	2000      	movs	r0, #0
 80106a6:	e019      	b.n	80106dc <HAL_ADC_Start+0xe8>
 80106a8:	6802      	ldr	r2, [r0, #0]
 80106aa:	4b13      	ldr	r3, [pc, #76]	; (80106f8 <HAL_ADC_Start+0x104>)
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d001      	beq.n	80106b4 <HAL_ADC_Start+0xc0>
 80106b0:	2000      	movs	r0, #0
 80106b2:	e013      	b.n	80106dc <HAL_ADC_Start+0xe8>
 80106b4:	689b      	ldr	r3, [r3, #8]
 80106b6:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 80106ba:	d115      	bne.n	80106e8 <HAL_ADC_Start+0xf4>
 80106bc:	4a0e      	ldr	r2, [pc, #56]	; (80106f8 <HAL_ADC_Start+0x104>)
 80106be:	6893      	ldr	r3, [r2, #8]
 80106c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80106c4:	6093      	str	r3, [r2, #8]
 80106c6:	2000      	movs	r0, #0
 80106c8:	e008      	b.n	80106dc <HAL_ADC_Start+0xe8>
 80106ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80106cc:	f043 0310 	orr.w	r3, r3, #16
 80106d0:	6403      	str	r3, [r0, #64]	; 0x40
 80106d2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80106d4:	f043 0301 	orr.w	r3, r3, #1
 80106d8:	6443      	str	r3, [r0, #68]	; 0x44
 80106da:	2000      	movs	r0, #0
 80106dc:	b002      	add	sp, #8
 80106de:	4770      	bx	lr
 80106e0:	2002      	movs	r0, #2
 80106e2:	e7fb      	b.n	80106dc <HAL_ADC_Start+0xe8>
 80106e4:	2000      	movs	r0, #0
 80106e6:	e7f9      	b.n	80106dc <HAL_ADC_Start+0xe8>
 80106e8:	2000      	movs	r0, #0
 80106ea:	e7f7      	b.n	80106dc <HAL_ADC_Start+0xe8>
 80106ec:	20000004 	.word	0x20000004
 80106f0:	431bde83 	.word	0x431bde83
 80106f4:	40012300 	.word	0x40012300
 80106f8:	40012000 	.word	0x40012000

080106fc <HAL_ADC_Stop>:
 80106fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010700:	2b01      	cmp	r3, #1
 8010702:	d019      	beq.n	8010738 <HAL_ADC_Stop+0x3c>
 8010704:	2301      	movs	r3, #1
 8010706:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 801070a:	6802      	ldr	r2, [r0, #0]
 801070c:	6893      	ldr	r3, [r2, #8]
 801070e:	f023 0301 	bic.w	r3, r3, #1
 8010712:	6093      	str	r3, [r2, #8]
 8010714:	6803      	ldr	r3, [r0, #0]
 8010716:	689b      	ldr	r3, [r3, #8]
 8010718:	f013 0f01 	tst.w	r3, #1
 801071c:	d107      	bne.n	801072e <HAL_ADC_Stop+0x32>
 801071e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8010720:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8010724:	f023 0301 	bic.w	r3, r3, #1
 8010728:	f043 0301 	orr.w	r3, r3, #1
 801072c:	6403      	str	r3, [r0, #64]	; 0x40
 801072e:	2300      	movs	r3, #0
 8010730:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8010734:	4618      	mov	r0, r3
 8010736:	4770      	bx	lr
 8010738:	2002      	movs	r0, #2
 801073a:	4770      	bx	lr

0801073c <HAL_ADC_PollForConversion>:
 801073c:	b570      	push	{r4, r5, r6, lr}
 801073e:	4605      	mov	r5, r0
 8010740:	460c      	mov	r4, r1
 8010742:	6803      	ldr	r3, [r0, #0]
 8010744:	689a      	ldr	r2, [r3, #8]
 8010746:	f412 6f80 	tst.w	r2, #1024	; 0x400
 801074a:	d003      	beq.n	8010754 <HAL_ADC_PollForConversion+0x18>
 801074c:	689b      	ldr	r3, [r3, #8]
 801074e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8010752:	d119      	bne.n	8010788 <HAL_ADC_PollForConversion+0x4c>
 8010754:	f7ff fe46 	bl	80103e4 <HAL_GetTick>
 8010758:	4606      	mov	r6, r0
 801075a:	682a      	ldr	r2, [r5, #0]
 801075c:	6813      	ldr	r3, [r2, #0]
 801075e:	f013 0f02 	tst.w	r3, #2
 8010762:	d120      	bne.n	80107a6 <HAL_ADC_PollForConversion+0x6a>
 8010764:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010768:	d0f8      	beq.n	801075c <HAL_ADC_PollForConversion+0x20>
 801076a:	b9b4      	cbnz	r4, 801079a <HAL_ADC_PollForConversion+0x5e>
 801076c:	682b      	ldr	r3, [r5, #0]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	f013 0f02 	tst.w	r3, #2
 8010774:	d1f1      	bne.n	801075a <HAL_ADC_PollForConversion+0x1e>
 8010776:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8010778:	f043 0304 	orr.w	r3, r3, #4
 801077c:	642b      	str	r3, [r5, #64]	; 0x40
 801077e:	2300      	movs	r3, #0
 8010780:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 8010784:	2003      	movs	r0, #3
 8010786:	e032      	b.n	80107ee <HAL_ADC_PollForConversion+0xb2>
 8010788:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801078a:	f043 0320 	orr.w	r3, r3, #32
 801078e:	6403      	str	r3, [r0, #64]	; 0x40
 8010790:	2300      	movs	r3, #0
 8010792:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8010796:	2001      	movs	r0, #1
 8010798:	e029      	b.n	80107ee <HAL_ADC_PollForConversion+0xb2>
 801079a:	f7ff fe23 	bl	80103e4 <HAL_GetTick>
 801079e:	1b80      	subs	r0, r0, r6
 80107a0:	42a0      	cmp	r0, r4
 80107a2:	d9da      	bls.n	801075a <HAL_ADC_PollForConversion+0x1e>
 80107a4:	e7e2      	b.n	801076c <HAL_ADC_PollForConversion+0x30>
 80107a6:	f06f 0312 	mvn.w	r3, #18
 80107aa:	6013      	str	r3, [r2, #0]
 80107ac:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80107ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80107b2:	642b      	str	r3, [r5, #64]	; 0x40
 80107b4:	682b      	ldr	r3, [r5, #0]
 80107b6:	689a      	ldr	r2, [r3, #8]
 80107b8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80107bc:	d116      	bne.n	80107ec <HAL_ADC_PollForConversion+0xb0>
 80107be:	7e28      	ldrb	r0, [r5, #24]
 80107c0:	b9b0      	cbnz	r0, 80107f0 <HAL_ADC_PollForConversion+0xb4>
 80107c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107c4:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80107c8:	d003      	beq.n	80107d2 <HAL_ADC_PollForConversion+0x96>
 80107ca:	689b      	ldr	r3, [r3, #8]
 80107cc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80107d0:	d10d      	bne.n	80107ee <HAL_ADC_PollForConversion+0xb2>
 80107d2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80107d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80107d8:	642b      	str	r3, [r5, #64]	; 0x40
 80107da:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80107dc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80107e0:	d105      	bne.n	80107ee <HAL_ADC_PollForConversion+0xb2>
 80107e2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80107e4:	f043 0301 	orr.w	r3, r3, #1
 80107e8:	642b      	str	r3, [r5, #64]	; 0x40
 80107ea:	e000      	b.n	80107ee <HAL_ADC_PollForConversion+0xb2>
 80107ec:	2000      	movs	r0, #0
 80107ee:	bd70      	pop	{r4, r5, r6, pc}
 80107f0:	2000      	movs	r0, #0
 80107f2:	e7fc      	b.n	80107ee <HAL_ADC_PollForConversion+0xb2>

080107f4 <HAL_ADC_GetValue>:
 80107f4:	6803      	ldr	r3, [r0, #0]
 80107f6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80107f8:	4770      	bx	lr
	...

080107fc <HAL_ADC_ConfigChannel>:
 80107fc:	b430      	push	{r4, r5}
 80107fe:	b082      	sub	sp, #8
 8010800:	2300      	movs	r3, #0
 8010802:	9301      	str	r3, [sp, #4]
 8010804:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8010808:	2b01      	cmp	r3, #1
 801080a:	f000 80bf 	beq.w	801098c <HAL_ADC_ConfigChannel+0x190>
 801080e:	2301      	movs	r3, #1
 8010810:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8010814:	680b      	ldr	r3, [r1, #0]
 8010816:	2b09      	cmp	r3, #9
 8010818:	d93a      	bls.n	8010890 <HAL_ADC_ConfigChannel+0x94>
 801081a:	6805      	ldr	r5, [r0, #0]
 801081c:	68ea      	ldr	r2, [r5, #12]
 801081e:	b29b      	uxth	r3, r3
 8010820:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010824:	3b1e      	subs	r3, #30
 8010826:	2407      	movs	r4, #7
 8010828:	fa04 f303 	lsl.w	r3, r4, r3
 801082c:	ea22 0303 	bic.w	r3, r2, r3
 8010830:	60eb      	str	r3, [r5, #12]
 8010832:	6804      	ldr	r4, [r0, #0]
 8010834:	68e5      	ldr	r5, [r4, #12]
 8010836:	880b      	ldrh	r3, [r1, #0]
 8010838:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801083c:	3b1e      	subs	r3, #30
 801083e:	688a      	ldr	r2, [r1, #8]
 8010840:	fa02 f303 	lsl.w	r3, r2, r3
 8010844:	432b      	orrs	r3, r5
 8010846:	60e3      	str	r3, [r4, #12]
 8010848:	684b      	ldr	r3, [r1, #4]
 801084a:	2b06      	cmp	r3, #6
 801084c:	d835      	bhi.n	80108ba <HAL_ADC_ConfigChannel+0xbe>
 801084e:	6805      	ldr	r5, [r0, #0]
 8010850:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8010852:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010856:	3b05      	subs	r3, #5
 8010858:	241f      	movs	r4, #31
 801085a:	fa04 f303 	lsl.w	r3, r4, r3
 801085e:	ea22 0303 	bic.w	r3, r2, r3
 8010862:	636b      	str	r3, [r5, #52]	; 0x34
 8010864:	6804      	ldr	r4, [r0, #0]
 8010866:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8010868:	880a      	ldrh	r2, [r1, #0]
 801086a:	684b      	ldr	r3, [r1, #4]
 801086c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010870:	3b05      	subs	r3, #5
 8010872:	fa02 f303 	lsl.w	r3, r2, r3
 8010876:	432b      	orrs	r3, r5
 8010878:	6363      	str	r3, [r4, #52]	; 0x34
 801087a:	6802      	ldr	r2, [r0, #0]
 801087c:	4b44      	ldr	r3, [pc, #272]	; (8010990 <HAL_ADC_ConfigChannel+0x194>)
 801087e:	429a      	cmp	r2, r3
 8010880:	d04b      	beq.n	801091a <HAL_ADC_ConfigChannel+0x11e>
 8010882:	2300      	movs	r3, #0
 8010884:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8010888:	4618      	mov	r0, r3
 801088a:	b002      	add	sp, #8
 801088c:	bc30      	pop	{r4, r5}
 801088e:	4770      	bx	lr
 8010890:	6805      	ldr	r5, [r0, #0]
 8010892:	692a      	ldr	r2, [r5, #16]
 8010894:	b29b      	uxth	r3, r3
 8010896:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801089a:	2407      	movs	r4, #7
 801089c:	fa04 f303 	lsl.w	r3, r4, r3
 80108a0:	ea22 0303 	bic.w	r3, r2, r3
 80108a4:	612b      	str	r3, [r5, #16]
 80108a6:	6804      	ldr	r4, [r0, #0]
 80108a8:	6925      	ldr	r5, [r4, #16]
 80108aa:	880b      	ldrh	r3, [r1, #0]
 80108ac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80108b0:	688b      	ldr	r3, [r1, #8]
 80108b2:	4093      	lsls	r3, r2
 80108b4:	432b      	orrs	r3, r5
 80108b6:	6123      	str	r3, [r4, #16]
 80108b8:	e7c6      	b.n	8010848 <HAL_ADC_ConfigChannel+0x4c>
 80108ba:	2b0c      	cmp	r3, #12
 80108bc:	d816      	bhi.n	80108ec <HAL_ADC_ConfigChannel+0xf0>
 80108be:	6805      	ldr	r5, [r0, #0]
 80108c0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80108c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80108c6:	3b23      	subs	r3, #35	; 0x23
 80108c8:	241f      	movs	r4, #31
 80108ca:	fa04 f303 	lsl.w	r3, r4, r3
 80108ce:	ea22 0303 	bic.w	r3, r2, r3
 80108d2:	632b      	str	r3, [r5, #48]	; 0x30
 80108d4:	6804      	ldr	r4, [r0, #0]
 80108d6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80108d8:	880a      	ldrh	r2, [r1, #0]
 80108da:	684b      	ldr	r3, [r1, #4]
 80108dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80108e0:	3b23      	subs	r3, #35	; 0x23
 80108e2:	fa02 f303 	lsl.w	r3, r2, r3
 80108e6:	432b      	orrs	r3, r5
 80108e8:	6323      	str	r3, [r4, #48]	; 0x30
 80108ea:	e7c6      	b.n	801087a <HAL_ADC_ConfigChannel+0x7e>
 80108ec:	6805      	ldr	r5, [r0, #0]
 80108ee:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80108f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80108f4:	3b41      	subs	r3, #65	; 0x41
 80108f6:	241f      	movs	r4, #31
 80108f8:	fa04 f303 	lsl.w	r3, r4, r3
 80108fc:	ea22 0303 	bic.w	r3, r2, r3
 8010900:	62eb      	str	r3, [r5, #44]	; 0x2c
 8010902:	6804      	ldr	r4, [r0, #0]
 8010904:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8010906:	880a      	ldrh	r2, [r1, #0]
 8010908:	684b      	ldr	r3, [r1, #4]
 801090a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801090e:	3b41      	subs	r3, #65	; 0x41
 8010910:	fa02 f303 	lsl.w	r3, r2, r3
 8010914:	432b      	orrs	r3, r5
 8010916:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010918:	e7af      	b.n	801087a <HAL_ADC_ConfigChannel+0x7e>
 801091a:	680b      	ldr	r3, [r1, #0]
 801091c:	2b12      	cmp	r3, #18
 801091e:	d026      	beq.n	801096e <HAL_ADC_ConfigChannel+0x172>
 8010920:	680b      	ldr	r3, [r1, #0]
 8010922:	4a1c      	ldr	r2, [pc, #112]	; (8010994 <HAL_ADC_ConfigChannel+0x198>)
 8010924:	4293      	cmp	r3, r2
 8010926:	d001      	beq.n	801092c <HAL_ADC_ConfigChannel+0x130>
 8010928:	2b11      	cmp	r3, #17
 801092a:	d1aa      	bne.n	8010882 <HAL_ADC_ConfigChannel+0x86>
 801092c:	4b1a      	ldr	r3, [pc, #104]	; (8010998 <HAL_ADC_ConfigChannel+0x19c>)
 801092e:	685a      	ldr	r2, [r3, #4]
 8010930:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8010934:	605a      	str	r2, [r3, #4]
 8010936:	685a      	ldr	r2, [r3, #4]
 8010938:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 801093c:	605a      	str	r2, [r3, #4]
 801093e:	680a      	ldr	r2, [r1, #0]
 8010940:	4b14      	ldr	r3, [pc, #80]	; (8010994 <HAL_ADC_ConfigChannel+0x198>)
 8010942:	429a      	cmp	r2, r3
 8010944:	d19d      	bne.n	8010882 <HAL_ADC_ConfigChannel+0x86>
 8010946:	4b15      	ldr	r3, [pc, #84]	; (801099c <HAL_ADC_ConfigChannel+0x1a0>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	4a15      	ldr	r2, [pc, #84]	; (80109a0 <HAL_ADC_ConfigChannel+0x1a4>)
 801094c:	fba2 2303 	umull	r2, r3, r2, r3
 8010950:	0c9b      	lsrs	r3, r3, #18
 8010952:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010956:	005b      	lsls	r3, r3, #1
 8010958:	9301      	str	r3, [sp, #4]
 801095a:	9b01      	ldr	r3, [sp, #4]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d090      	beq.n	8010882 <HAL_ADC_ConfigChannel+0x86>
 8010960:	9b01      	ldr	r3, [sp, #4]
 8010962:	3b01      	subs	r3, #1
 8010964:	9301      	str	r3, [sp, #4]
 8010966:	9b01      	ldr	r3, [sp, #4]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d1f9      	bne.n	8010960 <HAL_ADC_ConfigChannel+0x164>
 801096c:	e789      	b.n	8010882 <HAL_ADC_ConfigChannel+0x86>
 801096e:	4b0a      	ldr	r3, [pc, #40]	; (8010998 <HAL_ADC_ConfigChannel+0x19c>)
 8010970:	685a      	ldr	r2, [r3, #4]
 8010972:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010976:	605a      	str	r2, [r3, #4]
 8010978:	685a      	ldr	r2, [r3, #4]
 801097a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 801097e:	605a      	str	r2, [r3, #4]
 8010980:	6802      	ldr	r2, [r0, #0]
 8010982:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8010986:	429a      	cmp	r2, r3
 8010988:	d0ca      	beq.n	8010920 <HAL_ADC_ConfigChannel+0x124>
 801098a:	e77a      	b.n	8010882 <HAL_ADC_ConfigChannel+0x86>
 801098c:	2002      	movs	r0, #2
 801098e:	e77c      	b.n	801088a <HAL_ADC_ConfigChannel+0x8e>
 8010990:	40012000 	.word	0x40012000
 8010994:	10000012 	.word	0x10000012
 8010998:	40012300 	.word	0x40012300
 801099c:	20000004 	.word	0x20000004
 80109a0:	431bde83 	.word	0x431bde83

080109a4 <HAL_NVIC_SetPriorityGrouping>:
 80109a4:	4907      	ldr	r1, [pc, #28]	; (80109c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80109a6:	68ca      	ldr	r2, [r1, #12]
 80109a8:	0203      	lsls	r3, r0, #8
 80109aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80109ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80109b2:	0412      	lsls	r2, r2, #16
 80109b4:	0c12      	lsrs	r2, r2, #16
 80109b6:	4313      	orrs	r3, r2
 80109b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80109bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80109c0:	60cb      	str	r3, [r1, #12]
 80109c2:	4770      	bx	lr
 80109c4:	e000ed00 	.word	0xe000ed00

080109c8 <HAL_NVIC_SetPriority>:
 80109c8:	b430      	push	{r4, r5}
 80109ca:	4b16      	ldr	r3, [pc, #88]	; (8010a24 <HAL_NVIC_SetPriority+0x5c>)
 80109cc:	68db      	ldr	r3, [r3, #12]
 80109ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80109d2:	f1c3 0407 	rsb	r4, r3, #7
 80109d6:	2c04      	cmp	r4, #4
 80109d8:	bf28      	it	cs
 80109da:	2404      	movcs	r4, #4
 80109dc:	1d1d      	adds	r5, r3, #4
 80109de:	2d06      	cmp	r5, #6
 80109e0:	bf8c      	ite	hi
 80109e2:	3b03      	subhi	r3, #3
 80109e4:	2300      	movls	r3, #0
 80109e6:	f04f 35ff 	mov.w	r5, #4294967295
 80109ea:	fa05 f404 	lsl.w	r4, r5, r4
 80109ee:	ea21 0104 	bic.w	r1, r1, r4
 80109f2:	4099      	lsls	r1, r3
 80109f4:	fa05 f303 	lsl.w	r3, r5, r3
 80109f8:	ea22 0203 	bic.w	r2, r2, r3
 80109fc:	4311      	orrs	r1, r2
 80109fe:	2800      	cmp	r0, #0
 8010a00:	db09      	blt.n	8010a16 <HAL_NVIC_SetPriority+0x4e>
 8010a02:	0109      	lsls	r1, r1, #4
 8010a04:	b2c9      	uxtb	r1, r1
 8010a06:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8010a0a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8010a0e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
 8010a12:	bc30      	pop	{r4, r5}
 8010a14:	4770      	bx	lr
 8010a16:	f000 000f 	and.w	r0, r0, #15
 8010a1a:	0109      	lsls	r1, r1, #4
 8010a1c:	b2c9      	uxtb	r1, r1
 8010a1e:	4b02      	ldr	r3, [pc, #8]	; (8010a28 <HAL_NVIC_SetPriority+0x60>)
 8010a20:	5419      	strb	r1, [r3, r0]
 8010a22:	e7f6      	b.n	8010a12 <HAL_NVIC_SetPriority+0x4a>
 8010a24:	e000ed00 	.word	0xe000ed00
 8010a28:	e000ed14 	.word	0xe000ed14

08010a2c <HAL_NVIC_EnableIRQ>:
 8010a2c:	2800      	cmp	r0, #0
 8010a2e:	db08      	blt.n	8010a42 <HAL_NVIC_EnableIRQ+0x16>
 8010a30:	0942      	lsrs	r2, r0, #5
 8010a32:	f000 001f 	and.w	r0, r0, #31
 8010a36:	2301      	movs	r3, #1
 8010a38:	fa03 f000 	lsl.w	r0, r3, r0
 8010a3c:	4b01      	ldr	r3, [pc, #4]	; (8010a44 <HAL_NVIC_EnableIRQ+0x18>)
 8010a3e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010a42:	4770      	bx	lr
 8010a44:	e000e100 	.word	0xe000e100

08010a48 <HAL_NVIC_DisableIRQ>:
 8010a48:	2800      	cmp	r0, #0
 8010a4a:	db0d      	blt.n	8010a68 <HAL_NVIC_DisableIRQ+0x20>
 8010a4c:	0943      	lsrs	r3, r0, #5
 8010a4e:	f000 001f 	and.w	r0, r0, #31
 8010a52:	2201      	movs	r2, #1
 8010a54:	fa02 f000 	lsl.w	r0, r2, r0
 8010a58:	3320      	adds	r3, #32
 8010a5a:	4a04      	ldr	r2, [pc, #16]	; (8010a6c <HAL_NVIC_DisableIRQ+0x24>)
 8010a5c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8010a60:	f3bf 8f4f 	dsb	sy
 8010a64:	f3bf 8f6f 	isb	sy
 8010a68:	4770      	bx	lr
 8010a6a:	bf00      	nop
 8010a6c:	e000e100 	.word	0xe000e100

08010a70 <FLASH_Program_DoubleWord>:
 8010a70:	b410      	push	{r4}
 8010a72:	490a      	ldr	r1, [pc, #40]	; (8010a9c <FLASH_Program_DoubleWord+0x2c>)
 8010a74:	690c      	ldr	r4, [r1, #16]
 8010a76:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8010a7a:	610c      	str	r4, [r1, #16]
 8010a7c:	690c      	ldr	r4, [r1, #16]
 8010a7e:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8010a82:	610c      	str	r4, [r1, #16]
 8010a84:	690c      	ldr	r4, [r1, #16]
 8010a86:	f044 0401 	orr.w	r4, r4, #1
 8010a8a:	610c      	str	r4, [r1, #16]
 8010a8c:	6002      	str	r2, [r0, #0]
 8010a8e:	f3bf 8f6f 	isb	sy
 8010a92:	6043      	str	r3, [r0, #4]
 8010a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a98:	4770      	bx	lr
 8010a9a:	bf00      	nop
 8010a9c:	40023c00 	.word	0x40023c00

08010aa0 <FLASH_Program_Word>:
 8010aa0:	4b07      	ldr	r3, [pc, #28]	; (8010ac0 <FLASH_Program_Word+0x20>)
 8010aa2:	691a      	ldr	r2, [r3, #16]
 8010aa4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010aa8:	611a      	str	r2, [r3, #16]
 8010aaa:	691a      	ldr	r2, [r3, #16]
 8010aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010ab0:	611a      	str	r2, [r3, #16]
 8010ab2:	691a      	ldr	r2, [r3, #16]
 8010ab4:	f042 0201 	orr.w	r2, r2, #1
 8010ab8:	611a      	str	r2, [r3, #16]
 8010aba:	6001      	str	r1, [r0, #0]
 8010abc:	4770      	bx	lr
 8010abe:	bf00      	nop
 8010ac0:	40023c00 	.word	0x40023c00

08010ac4 <FLASH_Program_HalfWord>:
 8010ac4:	4b07      	ldr	r3, [pc, #28]	; (8010ae4 <FLASH_Program_HalfWord+0x20>)
 8010ac6:	691a      	ldr	r2, [r3, #16]
 8010ac8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010acc:	611a      	str	r2, [r3, #16]
 8010ace:	691a      	ldr	r2, [r3, #16]
 8010ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010ad4:	611a      	str	r2, [r3, #16]
 8010ad6:	691a      	ldr	r2, [r3, #16]
 8010ad8:	f042 0201 	orr.w	r2, r2, #1
 8010adc:	611a      	str	r2, [r3, #16]
 8010ade:	8001      	strh	r1, [r0, #0]
 8010ae0:	4770      	bx	lr
 8010ae2:	bf00      	nop
 8010ae4:	40023c00 	.word	0x40023c00

08010ae8 <FLASH_SetErrorCode>:
 8010ae8:	4b27      	ldr	r3, [pc, #156]	; (8010b88 <FLASH_SetErrorCode+0xa0>)
 8010aea:	68db      	ldr	r3, [r3, #12]
 8010aec:	f013 0f10 	tst.w	r3, #16
 8010af0:	d007      	beq.n	8010b02 <FLASH_SetErrorCode+0x1a>
 8010af2:	4a26      	ldr	r2, [pc, #152]	; (8010b8c <FLASH_SetErrorCode+0xa4>)
 8010af4:	69d3      	ldr	r3, [r2, #28]
 8010af6:	f043 0310 	orr.w	r3, r3, #16
 8010afa:	61d3      	str	r3, [r2, #28]
 8010afc:	4b22      	ldr	r3, [pc, #136]	; (8010b88 <FLASH_SetErrorCode+0xa0>)
 8010afe:	2210      	movs	r2, #16
 8010b00:	60da      	str	r2, [r3, #12]
 8010b02:	4b21      	ldr	r3, [pc, #132]	; (8010b88 <FLASH_SetErrorCode+0xa0>)
 8010b04:	68db      	ldr	r3, [r3, #12]
 8010b06:	f013 0f20 	tst.w	r3, #32
 8010b0a:	d007      	beq.n	8010b1c <FLASH_SetErrorCode+0x34>
 8010b0c:	4a1f      	ldr	r2, [pc, #124]	; (8010b8c <FLASH_SetErrorCode+0xa4>)
 8010b0e:	69d3      	ldr	r3, [r2, #28]
 8010b10:	f043 0308 	orr.w	r3, r3, #8
 8010b14:	61d3      	str	r3, [r2, #28]
 8010b16:	4b1c      	ldr	r3, [pc, #112]	; (8010b88 <FLASH_SetErrorCode+0xa0>)
 8010b18:	2220      	movs	r2, #32
 8010b1a:	60da      	str	r2, [r3, #12]
 8010b1c:	4b1a      	ldr	r3, [pc, #104]	; (8010b88 <FLASH_SetErrorCode+0xa0>)
 8010b1e:	68db      	ldr	r3, [r3, #12]
 8010b20:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010b24:	d007      	beq.n	8010b36 <FLASH_SetErrorCode+0x4e>
 8010b26:	4a19      	ldr	r2, [pc, #100]	; (8010b8c <FLASH_SetErrorCode+0xa4>)
 8010b28:	69d3      	ldr	r3, [r2, #28]
 8010b2a:	f043 0304 	orr.w	r3, r3, #4
 8010b2e:	61d3      	str	r3, [r2, #28]
 8010b30:	4b15      	ldr	r3, [pc, #84]	; (8010b88 <FLASH_SetErrorCode+0xa0>)
 8010b32:	2240      	movs	r2, #64	; 0x40
 8010b34:	60da      	str	r2, [r3, #12]
 8010b36:	4b14      	ldr	r3, [pc, #80]	; (8010b88 <FLASH_SetErrorCode+0xa0>)
 8010b38:	68db      	ldr	r3, [r3, #12]
 8010b3a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010b3e:	d007      	beq.n	8010b50 <FLASH_SetErrorCode+0x68>
 8010b40:	4a12      	ldr	r2, [pc, #72]	; (8010b8c <FLASH_SetErrorCode+0xa4>)
 8010b42:	69d3      	ldr	r3, [r2, #28]
 8010b44:	f043 0302 	orr.w	r3, r3, #2
 8010b48:	61d3      	str	r3, [r2, #28]
 8010b4a:	4b0f      	ldr	r3, [pc, #60]	; (8010b88 <FLASH_SetErrorCode+0xa0>)
 8010b4c:	2280      	movs	r2, #128	; 0x80
 8010b4e:	60da      	str	r2, [r3, #12]
 8010b50:	4b0d      	ldr	r3, [pc, #52]	; (8010b88 <FLASH_SetErrorCode+0xa0>)
 8010b52:	68db      	ldr	r3, [r3, #12]
 8010b54:	f413 7f80 	tst.w	r3, #256	; 0x100
 8010b58:	d008      	beq.n	8010b6c <FLASH_SetErrorCode+0x84>
 8010b5a:	4a0c      	ldr	r2, [pc, #48]	; (8010b8c <FLASH_SetErrorCode+0xa4>)
 8010b5c:	69d3      	ldr	r3, [r2, #28]
 8010b5e:	f043 0301 	orr.w	r3, r3, #1
 8010b62:	61d3      	str	r3, [r2, #28]
 8010b64:	4b08      	ldr	r3, [pc, #32]	; (8010b88 <FLASH_SetErrorCode+0xa0>)
 8010b66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010b6a:	60da      	str	r2, [r3, #12]
 8010b6c:	4b06      	ldr	r3, [pc, #24]	; (8010b88 <FLASH_SetErrorCode+0xa0>)
 8010b6e:	68db      	ldr	r3, [r3, #12]
 8010b70:	f013 0f02 	tst.w	r3, #2
 8010b74:	d007      	beq.n	8010b86 <FLASH_SetErrorCode+0x9e>
 8010b76:	4a05      	ldr	r2, [pc, #20]	; (8010b8c <FLASH_SetErrorCode+0xa4>)
 8010b78:	69d3      	ldr	r3, [r2, #28]
 8010b7a:	f043 0320 	orr.w	r3, r3, #32
 8010b7e:	61d3      	str	r3, [r2, #28]
 8010b80:	4b01      	ldr	r3, [pc, #4]	; (8010b88 <FLASH_SetErrorCode+0xa0>)
 8010b82:	2202      	movs	r2, #2
 8010b84:	60da      	str	r2, [r3, #12]
 8010b86:	4770      	bx	lr
 8010b88:	40023c00 	.word	0x40023c00
 8010b8c:	200080e0 	.word	0x200080e0

08010b90 <HAL_FLASH_Unlock>:
 8010b90:	4b07      	ldr	r3, [pc, #28]	; (8010bb0 <HAL_FLASH_Unlock+0x20>)
 8010b92:	691b      	ldr	r3, [r3, #16]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	db01      	blt.n	8010b9c <HAL_FLASH_Unlock+0xc>
 8010b98:	2000      	movs	r0, #0
 8010b9a:	4770      	bx	lr
 8010b9c:	4b04      	ldr	r3, [pc, #16]	; (8010bb0 <HAL_FLASH_Unlock+0x20>)
 8010b9e:	4a05      	ldr	r2, [pc, #20]	; (8010bb4 <HAL_FLASH_Unlock+0x24>)
 8010ba0:	605a      	str	r2, [r3, #4]
 8010ba2:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8010ba6:	605a      	str	r2, [r3, #4]
 8010ba8:	6918      	ldr	r0, [r3, #16]
 8010baa:	0fc0      	lsrs	r0, r0, #31
 8010bac:	4770      	bx	lr
 8010bae:	bf00      	nop
 8010bb0:	40023c00 	.word	0x40023c00
 8010bb4:	45670123 	.word	0x45670123

08010bb8 <HAL_FLASH_Lock>:
 8010bb8:	4a03      	ldr	r2, [pc, #12]	; (8010bc8 <HAL_FLASH_Lock+0x10>)
 8010bba:	6913      	ldr	r3, [r2, #16]
 8010bbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010bc0:	6113      	str	r3, [r2, #16]
 8010bc2:	2000      	movs	r0, #0
 8010bc4:	4770      	bx	lr
 8010bc6:	bf00      	nop
 8010bc8:	40023c00 	.word	0x40023c00

08010bcc <FLASH_WaitForLastOperation>:
 8010bcc:	b570      	push	{r4, r5, r6, lr}
 8010bce:	4604      	mov	r4, r0
 8010bd0:	4b15      	ldr	r3, [pc, #84]	; (8010c28 <FLASH_WaitForLastOperation+0x5c>)
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	61da      	str	r2, [r3, #28]
 8010bd6:	f7ff fc05 	bl	80103e4 <HAL_GetTick>
 8010bda:	4606      	mov	r6, r0
 8010bdc:	4d13      	ldr	r5, [pc, #76]	; (8010c2c <FLASH_WaitForLastOperation+0x60>)
 8010bde:	68eb      	ldr	r3, [r5, #12]
 8010be0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8010be4:	d00a      	beq.n	8010bfc <FLASH_WaitForLastOperation+0x30>
 8010be6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010bea:	d0f8      	beq.n	8010bde <FLASH_WaitForLastOperation+0x12>
 8010bec:	b1cc      	cbz	r4, 8010c22 <FLASH_WaitForLastOperation+0x56>
 8010bee:	f7ff fbf9 	bl	80103e4 <HAL_GetTick>
 8010bf2:	1b80      	subs	r0, r0, r6
 8010bf4:	42a0      	cmp	r0, r4
 8010bf6:	d9f2      	bls.n	8010bde <FLASH_WaitForLastOperation+0x12>
 8010bf8:	2003      	movs	r0, #3
 8010bfa:	e00d      	b.n	8010c18 <FLASH_WaitForLastOperation+0x4c>
 8010bfc:	4b0b      	ldr	r3, [pc, #44]	; (8010c2c <FLASH_WaitForLastOperation+0x60>)
 8010bfe:	68db      	ldr	r3, [r3, #12]
 8010c00:	f013 0f01 	tst.w	r3, #1
 8010c04:	d002      	beq.n	8010c0c <FLASH_WaitForLastOperation+0x40>
 8010c06:	4b09      	ldr	r3, [pc, #36]	; (8010c2c <FLASH_WaitForLastOperation+0x60>)
 8010c08:	2201      	movs	r2, #1
 8010c0a:	60da      	str	r2, [r3, #12]
 8010c0c:	4b07      	ldr	r3, [pc, #28]	; (8010c2c <FLASH_WaitForLastOperation+0x60>)
 8010c0e:	68db      	ldr	r3, [r3, #12]
 8010c10:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 8010c14:	d101      	bne.n	8010c1a <FLASH_WaitForLastOperation+0x4e>
 8010c16:	2000      	movs	r0, #0
 8010c18:	bd70      	pop	{r4, r5, r6, pc}
 8010c1a:	f7ff ff65 	bl	8010ae8 <FLASH_SetErrorCode>
 8010c1e:	2001      	movs	r0, #1
 8010c20:	e7fa      	b.n	8010c18 <FLASH_WaitForLastOperation+0x4c>
 8010c22:	2003      	movs	r0, #3
 8010c24:	e7f8      	b.n	8010c18 <FLASH_WaitForLastOperation+0x4c>
 8010c26:	bf00      	nop
 8010c28:	200080e0 	.word	0x200080e0
 8010c2c:	40023c00 	.word	0x40023c00

08010c30 <HAL_FLASH_Program>:
 8010c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c32:	4615      	mov	r5, r2
 8010c34:	4a1f      	ldr	r2, [pc, #124]	; (8010cb4 <HAL_FLASH_Program+0x84>)
 8010c36:	7e12      	ldrb	r2, [r2, #24]
 8010c38:	2a01      	cmp	r2, #1
 8010c3a:	d039      	beq.n	8010cb0 <HAL_FLASH_Program+0x80>
 8010c3c:	4604      	mov	r4, r0
 8010c3e:	460e      	mov	r6, r1
 8010c40:	461f      	mov	r7, r3
 8010c42:	4b1c      	ldr	r3, [pc, #112]	; (8010cb4 <HAL_FLASH_Program+0x84>)
 8010c44:	2201      	movs	r2, #1
 8010c46:	761a      	strb	r2, [r3, #24]
 8010c48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010c4c:	f7ff ffbe 	bl	8010bcc <FLASH_WaitForLastOperation>
 8010c50:	b990      	cbnz	r0, 8010c78 <HAL_FLASH_Program+0x48>
 8010c52:	b1ac      	cbz	r4, 8010c80 <HAL_FLASH_Program+0x50>
 8010c54:	2c01      	cmp	r4, #1
 8010c56:	d021      	beq.n	8010c9c <HAL_FLASH_Program+0x6c>
 8010c58:	2c02      	cmp	r4, #2
 8010c5a:	d024      	beq.n	8010ca6 <HAL_FLASH_Program+0x76>
 8010c5c:	462a      	mov	r2, r5
 8010c5e:	463b      	mov	r3, r7
 8010c60:	4630      	mov	r0, r6
 8010c62:	f7ff ff05 	bl	8010a70 <FLASH_Program_DoubleWord>
 8010c66:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010c6a:	f7ff ffaf 	bl	8010bcc <FLASH_WaitForLastOperation>
 8010c6e:	4a12      	ldr	r2, [pc, #72]	; (8010cb8 <HAL_FLASH_Program+0x88>)
 8010c70:	6913      	ldr	r3, [r2, #16]
 8010c72:	f023 0301 	bic.w	r3, r3, #1
 8010c76:	6113      	str	r3, [r2, #16]
 8010c78:	4b0e      	ldr	r3, [pc, #56]	; (8010cb4 <HAL_FLASH_Program+0x84>)
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	761a      	strb	r2, [r3, #24]
 8010c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c80:	b2ed      	uxtb	r5, r5
 8010c82:	4b0d      	ldr	r3, [pc, #52]	; (8010cb8 <HAL_FLASH_Program+0x88>)
 8010c84:	6919      	ldr	r1, [r3, #16]
 8010c86:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8010c8a:	6119      	str	r1, [r3, #16]
 8010c8c:	691a      	ldr	r2, [r3, #16]
 8010c8e:	611a      	str	r2, [r3, #16]
 8010c90:	6919      	ldr	r1, [r3, #16]
 8010c92:	f041 0101 	orr.w	r1, r1, #1
 8010c96:	6119      	str	r1, [r3, #16]
 8010c98:	7035      	strb	r5, [r6, #0]
 8010c9a:	e7e4      	b.n	8010c66 <HAL_FLASH_Program+0x36>
 8010c9c:	b2a9      	uxth	r1, r5
 8010c9e:	4630      	mov	r0, r6
 8010ca0:	f7ff ff10 	bl	8010ac4 <FLASH_Program_HalfWord>
 8010ca4:	e7df      	b.n	8010c66 <HAL_FLASH_Program+0x36>
 8010ca6:	4629      	mov	r1, r5
 8010ca8:	4630      	mov	r0, r6
 8010caa:	f7ff fef9 	bl	8010aa0 <FLASH_Program_Word>
 8010cae:	e7da      	b.n	8010c66 <HAL_FLASH_Program+0x36>
 8010cb0:	2002      	movs	r0, #2
 8010cb2:	e7e4      	b.n	8010c7e <HAL_FLASH_Program+0x4e>
 8010cb4:	200080e0 	.word	0x200080e0
 8010cb8:	40023c00 	.word	0x40023c00

08010cbc <FLASH_MassErase>:
 8010cbc:	4b07      	ldr	r3, [pc, #28]	; (8010cdc <FLASH_MassErase+0x20>)
 8010cbe:	6919      	ldr	r1, [r3, #16]
 8010cc0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8010cc4:	6119      	str	r1, [r3, #16]
 8010cc6:	6919      	ldr	r1, [r3, #16]
 8010cc8:	f041 0104 	orr.w	r1, r1, #4
 8010ccc:	6119      	str	r1, [r3, #16]
 8010cce:	691a      	ldr	r2, [r3, #16]
 8010cd0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8010cd4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8010cd8:	611a      	str	r2, [r3, #16]
 8010cda:	4770      	bx	lr
 8010cdc:	40023c00 	.word	0x40023c00

08010ce0 <FLASH_Erase_Sector>:
 8010ce0:	b410      	push	{r4}
 8010ce2:	b141      	cbz	r1, 8010cf6 <FLASH_Erase_Sector+0x16>
 8010ce4:	2901      	cmp	r1, #1
 8010ce6:	d020      	beq.n	8010d2a <FLASH_Erase_Sector+0x4a>
 8010ce8:	2902      	cmp	r1, #2
 8010cea:	bf0c      	ite	eq
 8010cec:	f44f 7400 	moveq.w	r4, #512	; 0x200
 8010cf0:	f44f 7440 	movne.w	r4, #768	; 0x300
 8010cf4:	e000      	b.n	8010cf8 <FLASH_Erase_Sector+0x18>
 8010cf6:	2400      	movs	r4, #0
 8010cf8:	4b0d      	ldr	r3, [pc, #52]	; (8010d30 <FLASH_Erase_Sector+0x50>)
 8010cfa:	6919      	ldr	r1, [r3, #16]
 8010cfc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8010d00:	6119      	str	r1, [r3, #16]
 8010d02:	691a      	ldr	r2, [r3, #16]
 8010d04:	4322      	orrs	r2, r4
 8010d06:	611a      	str	r2, [r3, #16]
 8010d08:	691a      	ldr	r2, [r3, #16]
 8010d0a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8010d0e:	611a      	str	r2, [r3, #16]
 8010d10:	691a      	ldr	r2, [r3, #16]
 8010d12:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8010d16:	f040 0002 	orr.w	r0, r0, #2
 8010d1a:	6118      	str	r0, [r3, #16]
 8010d1c:	691a      	ldr	r2, [r3, #16]
 8010d1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8010d22:	611a      	str	r2, [r3, #16]
 8010d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d28:	4770      	bx	lr
 8010d2a:	f44f 7480 	mov.w	r4, #256	; 0x100
 8010d2e:	e7e3      	b.n	8010cf8 <FLASH_Erase_Sector+0x18>
 8010d30:	40023c00 	.word	0x40023c00

08010d34 <FLASH_FlushCaches>:
 8010d34:	4b16      	ldr	r3, [pc, #88]	; (8010d90 <FLASH_FlushCaches+0x5c>)
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	f413 7f00 	tst.w	r3, #512	; 0x200
 8010d3c:	d010      	beq.n	8010d60 <FLASH_FlushCaches+0x2c>
 8010d3e:	4b14      	ldr	r3, [pc, #80]	; (8010d90 <FLASH_FlushCaches+0x5c>)
 8010d40:	681a      	ldr	r2, [r3, #0]
 8010d42:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010d46:	601a      	str	r2, [r3, #0]
 8010d48:	681a      	ldr	r2, [r3, #0]
 8010d4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010d4e:	601a      	str	r2, [r3, #0]
 8010d50:	681a      	ldr	r2, [r3, #0]
 8010d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010d56:	601a      	str	r2, [r3, #0]
 8010d58:	681a      	ldr	r2, [r3, #0]
 8010d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010d5e:	601a      	str	r2, [r3, #0]
 8010d60:	4b0b      	ldr	r3, [pc, #44]	; (8010d90 <FLASH_FlushCaches+0x5c>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8010d68:	d010      	beq.n	8010d8c <FLASH_FlushCaches+0x58>
 8010d6a:	4b09      	ldr	r3, [pc, #36]	; (8010d90 <FLASH_FlushCaches+0x5c>)
 8010d6c:	681a      	ldr	r2, [r3, #0]
 8010d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010d72:	601a      	str	r2, [r3, #0]
 8010d74:	681a      	ldr	r2, [r3, #0]
 8010d76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010d7a:	601a      	str	r2, [r3, #0]
 8010d7c:	681a      	ldr	r2, [r3, #0]
 8010d7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010d82:	601a      	str	r2, [r3, #0]
 8010d84:	681a      	ldr	r2, [r3, #0]
 8010d86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010d8a:	601a      	str	r2, [r3, #0]
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop
 8010d90:	40023c00 	.word	0x40023c00

08010d94 <HAL_FLASHEx_Erase>:
 8010d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d98:	4b26      	ldr	r3, [pc, #152]	; (8010e34 <HAL_FLASHEx_Erase+0xa0>)
 8010d9a:	7e1b      	ldrb	r3, [r3, #24]
 8010d9c:	2b01      	cmp	r3, #1
 8010d9e:	d045      	beq.n	8010e2c <HAL_FLASHEx_Erase+0x98>
 8010da0:	4604      	mov	r4, r0
 8010da2:	460f      	mov	r7, r1
 8010da4:	4b23      	ldr	r3, [pc, #140]	; (8010e34 <HAL_FLASHEx_Erase+0xa0>)
 8010da6:	2201      	movs	r2, #1
 8010da8:	761a      	strb	r2, [r3, #24]
 8010daa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010dae:	f7ff ff0d 	bl	8010bcc <FLASH_WaitForLastOperation>
 8010db2:	4681      	mov	r9, r0
 8010db4:	2800      	cmp	r0, #0
 8010db6:	d133      	bne.n	8010e20 <HAL_FLASHEx_Erase+0x8c>
 8010db8:	f04f 33ff 	mov.w	r3, #4294967295
 8010dbc:	603b      	str	r3, [r7, #0]
 8010dbe:	6823      	ldr	r3, [r4, #0]
 8010dc0:	2b01      	cmp	r3, #1
 8010dc2:	d01b      	beq.n	8010dfc <HAL_FLASHEx_Erase+0x68>
 8010dc4:	68a5      	ldr	r5, [r4, #8]
 8010dc6:	68e3      	ldr	r3, [r4, #12]
 8010dc8:	442b      	add	r3, r5
 8010dca:	429d      	cmp	r5, r3
 8010dcc:	d226      	bcs.n	8010e1c <HAL_FLASHEx_Erase+0x88>
 8010dce:	f24c 3850 	movw	r8, #50000	; 0xc350
 8010dd2:	4e19      	ldr	r6, [pc, #100]	; (8010e38 <HAL_FLASHEx_Erase+0xa4>)
 8010dd4:	7c21      	ldrb	r1, [r4, #16]
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	f7ff ff82 	bl	8010ce0 <FLASH_Erase_Sector>
 8010ddc:	4640      	mov	r0, r8
 8010dde:	f7ff fef5 	bl	8010bcc <FLASH_WaitForLastOperation>
 8010de2:	6933      	ldr	r3, [r6, #16]
 8010de4:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8010de8:	6133      	str	r3, [r6, #16]
 8010dea:	4681      	mov	r9, r0
 8010dec:	b9a8      	cbnz	r0, 8010e1a <HAL_FLASHEx_Erase+0x86>
 8010dee:	3501      	adds	r5, #1
 8010df0:	68e3      	ldr	r3, [r4, #12]
 8010df2:	68a2      	ldr	r2, [r4, #8]
 8010df4:	4413      	add	r3, r2
 8010df6:	42ab      	cmp	r3, r5
 8010df8:	d8ec      	bhi.n	8010dd4 <HAL_FLASHEx_Erase+0x40>
 8010dfa:	e00f      	b.n	8010e1c <HAL_FLASHEx_Erase+0x88>
 8010dfc:	6861      	ldr	r1, [r4, #4]
 8010dfe:	7c20      	ldrb	r0, [r4, #16]
 8010e00:	f7ff ff5c 	bl	8010cbc <FLASH_MassErase>
 8010e04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010e08:	f7ff fee0 	bl	8010bcc <FLASH_WaitForLastOperation>
 8010e0c:	4681      	mov	r9, r0
 8010e0e:	4a0a      	ldr	r2, [pc, #40]	; (8010e38 <HAL_FLASHEx_Erase+0xa4>)
 8010e10:	6913      	ldr	r3, [r2, #16]
 8010e12:	f023 0304 	bic.w	r3, r3, #4
 8010e16:	6113      	str	r3, [r2, #16]
 8010e18:	e000      	b.n	8010e1c <HAL_FLASHEx_Erase+0x88>
 8010e1a:	603d      	str	r5, [r7, #0]
 8010e1c:	f7ff ff8a 	bl	8010d34 <FLASH_FlushCaches>
 8010e20:	4b04      	ldr	r3, [pc, #16]	; (8010e34 <HAL_FLASHEx_Erase+0xa0>)
 8010e22:	2200      	movs	r2, #0
 8010e24:	761a      	strb	r2, [r3, #24]
 8010e26:	4648      	mov	r0, r9
 8010e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e2c:	f04f 0902 	mov.w	r9, #2
 8010e30:	e7f9      	b.n	8010e26 <HAL_FLASHEx_Erase+0x92>
 8010e32:	bf00      	nop
 8010e34:	200080e0 	.word	0x200080e0
 8010e38:	40023c00 	.word	0x40023c00

08010e3c <HAL_GPIO_Init>:
 8010e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e40:	b083      	sub	sp, #12
 8010e42:	2300      	movs	r3, #0
 8010e44:	2601      	movs	r6, #1
 8010e46:	2703      	movs	r7, #3
 8010e48:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8011004 <HAL_GPIO_Init+0x1c8>
 8010e4c:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8011008 <HAL_GPIO_Init+0x1cc>
 8010e50:	4d6a      	ldr	r5, [pc, #424]	; (8010ffc <HAL_GPIO_Init+0x1c0>)
 8010e52:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 801100c <HAL_GPIO_Init+0x1d0>
 8010e56:	e04b      	b.n	8010ef0 <HAL_GPIO_Init+0xb4>
 8010e58:	6882      	ldr	r2, [r0, #8]
 8010e5a:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 8010e5e:	fa07 fa0b 	lsl.w	sl, r7, fp
 8010e62:	ea22 0a0a 	bic.w	sl, r2, sl
 8010e66:	68ca      	ldr	r2, [r1, #12]
 8010e68:	fa02 f20b 	lsl.w	r2, r2, fp
 8010e6c:	ea42 020a 	orr.w	r2, r2, sl
 8010e70:	6082      	str	r2, [r0, #8]
 8010e72:	6842      	ldr	r2, [r0, #4]
 8010e74:	ea22 0a04 	bic.w	sl, r2, r4
 8010e78:	684a      	ldr	r2, [r1, #4]
 8010e7a:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8010e7e:	409c      	lsls	r4, r3
 8010e80:	ea44 040a 	orr.w	r4, r4, sl
 8010e84:	6044      	str	r4, [r0, #4]
 8010e86:	e041      	b.n	8010f0c <HAL_GPIO_Init+0xd0>
 8010e88:	2400      	movs	r4, #0
 8010e8a:	fa04 f40b 	lsl.w	r4, r4, fp
 8010e8e:	ea44 040a 	orr.w	r4, r4, sl
 8010e92:	6094      	str	r4, [r2, #8]
 8010e94:	682c      	ldr	r4, [r5, #0]
 8010e96:	ea6f 0a08 	mvn.w	sl, r8
 8010e9a:	684a      	ldr	r2, [r1, #4]
 8010e9c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8010ea0:	bf0c      	ite	eq
 8010ea2:	ea04 040a 	andeq.w	r4, r4, sl
 8010ea6:	ea48 0404 	orrne.w	r4, r8, r4
 8010eaa:	602c      	str	r4, [r5, #0]
 8010eac:	686c      	ldr	r4, [r5, #4]
 8010eae:	684a      	ldr	r2, [r1, #4]
 8010eb0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8010eb4:	bf0c      	ite	eq
 8010eb6:	ea04 040a 	andeq.w	r4, r4, sl
 8010eba:	ea48 0404 	orrne.w	r4, r8, r4
 8010ebe:	606c      	str	r4, [r5, #4]
 8010ec0:	68ac      	ldr	r4, [r5, #8]
 8010ec2:	684a      	ldr	r2, [r1, #4]
 8010ec4:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8010ec8:	bf0c      	ite	eq
 8010eca:	ea04 040a 	andeq.w	r4, r4, sl
 8010ece:	ea48 0404 	orrne.w	r4, r8, r4
 8010ed2:	60ac      	str	r4, [r5, #8]
 8010ed4:	68ec      	ldr	r4, [r5, #12]
 8010ed6:	684a      	ldr	r2, [r1, #4]
 8010ed8:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8010edc:	bf0c      	ite	eq
 8010ede:	ea0a 0204 	andeq.w	r2, sl, r4
 8010ee2:	ea48 0204 	orrne.w	r2, r8, r4
 8010ee6:	60ea      	str	r2, [r5, #12]
 8010ee8:	3301      	adds	r3, #1
 8010eea:	2b10      	cmp	r3, #16
 8010eec:	f000 8082 	beq.w	8010ff4 <HAL_GPIO_Init+0x1b8>
 8010ef0:	fa06 f403 	lsl.w	r4, r6, r3
 8010ef4:	680a      	ldr	r2, [r1, #0]
 8010ef6:	ea04 0802 	and.w	r8, r4, r2
 8010efa:	ea34 0202 	bics.w	r2, r4, r2
 8010efe:	d1f3      	bne.n	8010ee8 <HAL_GPIO_Init+0xac>
 8010f00:	684a      	ldr	r2, [r1, #4]
 8010f02:	f002 0203 	and.w	r2, r2, #3
 8010f06:	3a01      	subs	r2, #1
 8010f08:	2a01      	cmp	r2, #1
 8010f0a:	d9a5      	bls.n	8010e58 <HAL_GPIO_Init+0x1c>
 8010f0c:	684a      	ldr	r2, [r1, #4]
 8010f0e:	f002 0203 	and.w	r2, r2, #3
 8010f12:	2a03      	cmp	r2, #3
 8010f14:	d024      	beq.n	8010f60 <HAL_GPIO_Init+0x124>
 8010f16:	68c4      	ldr	r4, [r0, #12]
 8010f18:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8010f1c:	fa07 f20a 	lsl.w	r2, r7, sl
 8010f20:	ea24 0402 	bic.w	r4, r4, r2
 8010f24:	688a      	ldr	r2, [r1, #8]
 8010f26:	fa02 f20a 	lsl.w	r2, r2, sl
 8010f2a:	4322      	orrs	r2, r4
 8010f2c:	60c2      	str	r2, [r0, #12]
 8010f2e:	684a      	ldr	r2, [r1, #4]
 8010f30:	f002 0203 	and.w	r2, r2, #3
 8010f34:	2a02      	cmp	r2, #2
 8010f36:	d113      	bne.n	8010f60 <HAL_GPIO_Init+0x124>
 8010f38:	08dc      	lsrs	r4, r3, #3
 8010f3a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8010f3e:	f8d4 a020 	ldr.w	sl, [r4, #32]
 8010f42:	f003 0207 	and.w	r2, r3, #7
 8010f46:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8010f4a:	220f      	movs	r2, #15
 8010f4c:	fa02 f20b 	lsl.w	r2, r2, fp
 8010f50:	ea2a 0a02 	bic.w	sl, sl, r2
 8010f54:	690a      	ldr	r2, [r1, #16]
 8010f56:	fa02 f20b 	lsl.w	r2, r2, fp
 8010f5a:	ea42 020a 	orr.w	r2, r2, sl
 8010f5e:	6222      	str	r2, [r4, #32]
 8010f60:	6802      	ldr	r2, [r0, #0]
 8010f62:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8010f66:	fa07 f40a 	lsl.w	r4, r7, sl
 8010f6a:	ea22 0404 	bic.w	r4, r2, r4
 8010f6e:	684a      	ldr	r2, [r1, #4]
 8010f70:	f002 0203 	and.w	r2, r2, #3
 8010f74:	fa02 f20a 	lsl.w	r2, r2, sl
 8010f78:	4322      	orrs	r2, r4
 8010f7a:	6002      	str	r2, [r0, #0]
 8010f7c:	684a      	ldr	r2, [r1, #4]
 8010f7e:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8010f82:	d0b1      	beq.n	8010ee8 <HAL_GPIO_Init+0xac>
 8010f84:	2200      	movs	r2, #0
 8010f86:	9201      	str	r2, [sp, #4]
 8010f88:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 8010f8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010f90:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
 8010f94:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 8010f98:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8010f9c:	9201      	str	r2, [sp, #4]
 8010f9e:	9a01      	ldr	r2, [sp, #4]
 8010fa0:	f023 0203 	bic.w	r2, r3, #3
 8010fa4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8010fa8:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8010fac:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8010fb0:	f003 0403 	and.w	r4, r3, #3
 8010fb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010fb8:	240f      	movs	r4, #15
 8010fba:	fa04 f40b 	lsl.w	r4, r4, fp
 8010fbe:	ea2a 0a04 	bic.w	sl, sl, r4
 8010fc2:	4570      	cmp	r0, lr
 8010fc4:	f43f af60 	beq.w	8010e88 <HAL_GPIO_Init+0x4c>
 8010fc8:	4548      	cmp	r0, r9
 8010fca:	d00d      	beq.n	8010fe8 <HAL_GPIO_Init+0x1ac>
 8010fcc:	4c0c      	ldr	r4, [pc, #48]	; (8011000 <HAL_GPIO_Init+0x1c4>)
 8010fce:	42a0      	cmp	r0, r4
 8010fd0:	d00c      	beq.n	8010fec <HAL_GPIO_Init+0x1b0>
 8010fd2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8010fd6:	42a0      	cmp	r0, r4
 8010fd8:	d00a      	beq.n	8010ff0 <HAL_GPIO_Init+0x1b4>
 8010fda:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8010fde:	42a0      	cmp	r0, r4
 8010fe0:	bf0c      	ite	eq
 8010fe2:	2404      	moveq	r4, #4
 8010fe4:	2407      	movne	r4, #7
 8010fe6:	e750      	b.n	8010e8a <HAL_GPIO_Init+0x4e>
 8010fe8:	4634      	mov	r4, r6
 8010fea:	e74e      	b.n	8010e8a <HAL_GPIO_Init+0x4e>
 8010fec:	2402      	movs	r4, #2
 8010fee:	e74c      	b.n	8010e8a <HAL_GPIO_Init+0x4e>
 8010ff0:	463c      	mov	r4, r7
 8010ff2:	e74a      	b.n	8010e8a <HAL_GPIO_Init+0x4e>
 8010ff4:	b003      	add	sp, #12
 8010ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ffa:	bf00      	nop
 8010ffc:	40013c00 	.word	0x40013c00
 8011000:	40020800 	.word	0x40020800
 8011004:	40023800 	.word	0x40023800
 8011008:	40020000 	.word	0x40020000
 801100c:	40020400 	.word	0x40020400

08011010 <HAL_GPIO_DeInit>:
 8011010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011014:	b083      	sub	sp, #12
 8011016:	2300      	movs	r3, #0
 8011018:	f04f 0e01 	mov.w	lr, #1
 801101c:	f04f 0a0f 	mov.w	sl, #15
 8011020:	f04f 0b03 	mov.w	fp, #3
 8011024:	f8df 8104 	ldr.w	r8, [pc, #260]	; 801112c <HAL_GPIO_DeInit+0x11c>
 8011028:	e028      	b.n	801107c <HAL_GPIO_DeInit+0x6c>
 801102a:	f04f 0900 	mov.w	r9, #0
 801102e:	fa09 f505 	lsl.w	r5, r9, r5
 8011032:	9f01      	ldr	r7, [sp, #4]
 8011034:	42bd      	cmp	r5, r7
 8011036:	d056      	beq.n	80110e6 <HAL_GPIO_DeInit+0xd6>
 8011038:	6805      	ldr	r5, [r0, #0]
 801103a:	005c      	lsls	r4, r3, #1
 801103c:	fa0b f404 	lsl.w	r4, fp, r4
 8011040:	ea25 0504 	bic.w	r5, r5, r4
 8011044:	6005      	str	r5, [r0, #0]
 8011046:	08de      	lsrs	r6, r3, #3
 8011048:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 801104c:	6a37      	ldr	r7, [r6, #32]
 801104e:	f003 0507 	and.w	r5, r3, #7
 8011052:	00ad      	lsls	r5, r5, #2
 8011054:	fa0a f505 	lsl.w	r5, sl, r5
 8011058:	ea27 0505 	bic.w	r5, r7, r5
 801105c:	6235      	str	r5, [r6, #32]
 801105e:	68c5      	ldr	r5, [r0, #12]
 8011060:	ea25 0504 	bic.w	r5, r5, r4
 8011064:	60c5      	str	r5, [r0, #12]
 8011066:	6845      	ldr	r5, [r0, #4]
 8011068:	ea25 0202 	bic.w	r2, r5, r2
 801106c:	6042      	str	r2, [r0, #4]
 801106e:	6882      	ldr	r2, [r0, #8]
 8011070:	ea22 0404 	bic.w	r4, r2, r4
 8011074:	6084      	str	r4, [r0, #8]
 8011076:	3301      	adds	r3, #1
 8011078:	2b10      	cmp	r3, #16
 801107a:	d051      	beq.n	8011120 <HAL_GPIO_DeInit+0x110>
 801107c:	fa0e f203 	lsl.w	r2, lr, r3
 8011080:	ea02 0601 	and.w	r6, r2, r1
 8011084:	ea32 0401 	bics.w	r4, r2, r1
 8011088:	d1f5      	bne.n	8011076 <HAL_GPIO_DeInit+0x66>
 801108a:	f023 0403 	bic.w	r4, r3, #3
 801108e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8011092:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 8011096:	68a7      	ldr	r7, [r4, #8]
 8011098:	f003 0503 	and.w	r5, r3, #3
 801109c:	00ad      	lsls	r5, r5, #2
 801109e:	fa0a fc05 	lsl.w	ip, sl, r5
 80110a2:	ea0c 0707 	and.w	r7, ip, r7
 80110a6:	9701      	str	r7, [sp, #4]
 80110a8:	4f1f      	ldr	r7, [pc, #124]	; (8011128 <HAL_GPIO_DeInit+0x118>)
 80110aa:	42b8      	cmp	r0, r7
 80110ac:	d0bd      	beq.n	801102a <HAL_GPIO_DeInit+0x1a>
 80110ae:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80110b2:	42b8      	cmp	r0, r7
 80110b4:	d010      	beq.n	80110d8 <HAL_GPIO_DeInit+0xc8>
 80110b6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80110ba:	42b8      	cmp	r0, r7
 80110bc:	d00e      	beq.n	80110dc <HAL_GPIO_DeInit+0xcc>
 80110be:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80110c2:	42b8      	cmp	r0, r7
 80110c4:	d00d      	beq.n	80110e2 <HAL_GPIO_DeInit+0xd2>
 80110c6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80110ca:	42b8      	cmp	r0, r7
 80110cc:	bf0c      	ite	eq
 80110ce:	f04f 0904 	moveq.w	r9, #4
 80110d2:	f04f 0907 	movne.w	r9, #7
 80110d6:	e7aa      	b.n	801102e <HAL_GPIO_DeInit+0x1e>
 80110d8:	46f1      	mov	r9, lr
 80110da:	e7a8      	b.n	801102e <HAL_GPIO_DeInit+0x1e>
 80110dc:	f04f 0902 	mov.w	r9, #2
 80110e0:	e7a5      	b.n	801102e <HAL_GPIO_DeInit+0x1e>
 80110e2:	46d9      	mov	r9, fp
 80110e4:	e7a3      	b.n	801102e <HAL_GPIO_DeInit+0x1e>
 80110e6:	f8d8 5000 	ldr.w	r5, [r8]
 80110ea:	ea25 0506 	bic.w	r5, r5, r6
 80110ee:	f8c8 5000 	str.w	r5, [r8]
 80110f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80110f6:	ea25 0506 	bic.w	r5, r5, r6
 80110fa:	f8c8 5004 	str.w	r5, [r8, #4]
 80110fe:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011102:	ea25 0506 	bic.w	r5, r5, r6
 8011106:	f8c8 5008 	str.w	r5, [r8, #8]
 801110a:	f8d8 500c 	ldr.w	r5, [r8, #12]
 801110e:	ea25 0606 	bic.w	r6, r5, r6
 8011112:	f8c8 600c 	str.w	r6, [r8, #12]
 8011116:	68a5      	ldr	r5, [r4, #8]
 8011118:	ea25 050c 	bic.w	r5, r5, ip
 801111c:	60a5      	str	r5, [r4, #8]
 801111e:	e78b      	b.n	8011038 <HAL_GPIO_DeInit+0x28>
 8011120:	b003      	add	sp, #12
 8011122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011126:	bf00      	nop
 8011128:	40020000 	.word	0x40020000
 801112c:	40013c00 	.word	0x40013c00

08011130 <HAL_GPIO_ReadPin>:
 8011130:	6903      	ldr	r3, [r0, #16]
 8011132:	4219      	tst	r1, r3
 8011134:	bf14      	ite	ne
 8011136:	2001      	movne	r0, #1
 8011138:	2000      	moveq	r0, #0
 801113a:	4770      	bx	lr

0801113c <HAL_GPIO_WritePin>:
 801113c:	b10a      	cbz	r2, 8011142 <HAL_GPIO_WritePin+0x6>
 801113e:	6181      	str	r1, [r0, #24]
 8011140:	4770      	bx	lr
 8011142:	0409      	lsls	r1, r1, #16
 8011144:	6181      	str	r1, [r0, #24]
 8011146:	4770      	bx	lr

08011148 <HAL_GPIO_EXTI_IRQHandler>:
 8011148:	b508      	push	{r3, lr}
 801114a:	4b05      	ldr	r3, [pc, #20]	; (8011160 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 801114c:	695b      	ldr	r3, [r3, #20]
 801114e:	4203      	tst	r3, r0
 8011150:	d100      	bne.n	8011154 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8011152:	bd08      	pop	{r3, pc}
 8011154:	4b02      	ldr	r3, [pc, #8]	; (8011160 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8011156:	6158      	str	r0, [r3, #20]
 8011158:	f7fc fac8 	bl	800d6ec <HAL_GPIO_EXTI_Callback>
 801115c:	e7f9      	b.n	8011152 <HAL_GPIO_EXTI_IRQHandler+0xa>
 801115e:	bf00      	nop
 8011160:	40013c00 	.word	0x40013c00

08011164 <HAL_PCD_Init>:
 8011164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011166:	b08b      	sub	sp, #44	; 0x2c
 8011168:	2800      	cmp	r0, #0
 801116a:	f000 808b 	beq.w	8011284 <HAL_PCD_Init+0x120>
 801116e:	4605      	mov	r5, r0
 8011170:	6804      	ldr	r4, [r0, #0]
 8011172:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8011176:	b32b      	cbz	r3, 80111c4 <HAL_PCD_Init+0x60>
 8011178:	2303      	movs	r3, #3
 801117a:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
 801117e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011180:	f413 7f80 	tst.w	r3, #256	; 0x100
 8011184:	bf04      	itt	eq
 8011186:	2300      	moveq	r3, #0
 8011188:	612b      	streq	r3, [r5, #16]
 801118a:	6828      	ldr	r0, [r5, #0]
 801118c:	f002 fadc 	bl	8013748 <USB_DisableGlobalInt>
 8011190:	462c      	mov	r4, r5
 8011192:	f854 7b10 	ldr.w	r7, [r4], #16
 8011196:	466e      	mov	r6, sp
 8011198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801119a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801119c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801119e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80111a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80111a4:	e886 0003 	stmia.w	r6, {r0, r1}
 80111a8:	1d2b      	adds	r3, r5, #4
 80111aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80111ac:	4638      	mov	r0, r7
 80111ae:	f002 fa0d 	bl	80135cc <USB_CoreInit>
 80111b2:	4604      	mov	r4, r0
 80111b4:	b158      	cbz	r0, 80111ce <HAL_PCD_Init+0x6a>
 80111b6:	2302      	movs	r3, #2
 80111b8:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
 80111bc:	2401      	movs	r4, #1
 80111be:	4620      	mov	r0, r4
 80111c0:	b00b      	add	sp, #44	; 0x2c
 80111c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111c4:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
 80111c8:	f006 fc4e 	bl	8017a68 <HAL_PCD_MspInit>
 80111cc:	e7d4      	b.n	8011178 <HAL_PCD_Init+0x14>
 80111ce:	2100      	movs	r1, #0
 80111d0:	6828      	ldr	r0, [r5, #0]
 80111d2:	f002 fabf 	bl	8013754 <USB_SetCurrentMode>
 80111d6:	6868      	ldr	r0, [r5, #4]
 80111d8:	b390      	cbz	r0, 8011240 <HAL_PCD_Init+0xdc>
 80111da:	4623      	mov	r3, r4
 80111dc:	2601      	movs	r6, #1
 80111de:	2100      	movs	r1, #0
 80111e0:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80111e4:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80111e8:	f882 603d 	strb.w	r6, [r2, #61]	; 0x3d
 80111ec:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
 80111f0:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
 80111f4:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
 80111f8:	6451      	str	r1, [r2, #68]	; 0x44
 80111fa:	6491      	str	r1, [r2, #72]	; 0x48
 80111fc:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8011200:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8011204:	6511      	str	r1, [r2, #80]	; 0x50
 8011206:	3301      	adds	r3, #1
 8011208:	b2db      	uxtb	r3, r3
 801120a:	4283      	cmp	r3, r0
 801120c:	d3e8      	bcc.n	80111e0 <HAL_PCD_Init+0x7c>
 801120e:	2200      	movs	r2, #0
 8011210:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8011214:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011218:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
 801121c:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
 8011220:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
 8011224:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8011228:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 801122c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8011230:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011234:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8011238:	3401      	adds	r4, #1
 801123a:	b2e4      	uxtb	r4, r4
 801123c:	4284      	cmp	r4, r0
 801123e:	d3e7      	bcc.n	8011210 <HAL_PCD_Init+0xac>
 8011240:	462c      	mov	r4, r5
 8011242:	f854 7b10 	ldr.w	r7, [r4], #16
 8011246:	466e      	mov	r6, sp
 8011248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801124a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801124c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801124e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011250:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011254:	e886 0003 	stmia.w	r6, {r0, r1}
 8011258:	1d2b      	adds	r3, r5, #4
 801125a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801125c:	4638      	mov	r0, r7
 801125e:	f002 fae1 	bl	8013824 <USB_DevInit>
 8011262:	4604      	mov	r4, r0
 8011264:	b120      	cbz	r0, 8011270 <HAL_PCD_Init+0x10c>
 8011266:	2302      	movs	r3, #2
 8011268:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
 801126c:	2401      	movs	r4, #1
 801126e:	e7a6      	b.n	80111be <HAL_PCD_Init+0x5a>
 8011270:	2300      	movs	r3, #0
 8011272:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 8011276:	2301      	movs	r3, #1
 8011278:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
 801127c:	6828      	ldr	r0, [r5, #0]
 801127e:	f002 febc 	bl	8013ffa <USB_DevDisconnect>
 8011282:	e79c      	b.n	80111be <HAL_PCD_Init+0x5a>
 8011284:	2401      	movs	r4, #1
 8011286:	e79a      	b.n	80111be <HAL_PCD_Init+0x5a>

08011288 <HAL_PCD_DeInit>:
 8011288:	b538      	push	{r3, r4, r5, lr}
 801128a:	b190      	cbz	r0, 80112b2 <HAL_PCD_DeInit+0x2a>
 801128c:	4604      	mov	r4, r0
 801128e:	2303      	movs	r3, #3
 8011290:	f880 33bd 	strb.w	r3, [r0, #957]	; 0x3bd
 8011294:	6800      	ldr	r0, [r0, #0]
 8011296:	f002 fe73 	bl	8013f80 <USB_StopDevice>
 801129a:	4605      	mov	r5, r0
 801129c:	b110      	cbz	r0, 80112a4 <HAL_PCD_DeInit+0x1c>
 801129e:	2501      	movs	r5, #1
 80112a0:	4628      	mov	r0, r5
 80112a2:	bd38      	pop	{r3, r4, r5, pc}
 80112a4:	4620      	mov	r0, r4
 80112a6:	f006 fc23 	bl	8017af0 <HAL_PCD_MspDeInit>
 80112aa:	2300      	movs	r3, #0
 80112ac:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
 80112b0:	e7f6      	b.n	80112a0 <HAL_PCD_DeInit+0x18>
 80112b2:	2501      	movs	r5, #1
 80112b4:	e7f4      	b.n	80112a0 <HAL_PCD_DeInit+0x18>

080112b6 <HAL_PCD_Start>:
 80112b6:	6802      	ldr	r2, [r0, #0]
 80112b8:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80112bc:	2b01      	cmp	r3, #1
 80112be:	d019      	beq.n	80112f4 <HAL_PCD_Start+0x3e>
 80112c0:	b510      	push	{r4, lr}
 80112c2:	4604      	mov	r4, r0
 80112c4:	2301      	movs	r3, #1
 80112c6:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
 80112ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80112cc:	2b01      	cmp	r3, #1
 80112ce:	d009      	beq.n	80112e4 <HAL_PCD_Start+0x2e>
 80112d0:	6820      	ldr	r0, [r4, #0]
 80112d2:	f002 fa33 	bl	801373c <USB_EnableGlobalInt>
 80112d6:	6820      	ldr	r0, [r4, #0]
 80112d8:	f002 fe81 	bl	8013fde <USB_DevConnect>
 80112dc:	2000      	movs	r0, #0
 80112de:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
 80112e2:	bd10      	pop	{r4, pc}
 80112e4:	6983      	ldr	r3, [r0, #24]
 80112e6:	2b01      	cmp	r3, #1
 80112e8:	d0f2      	beq.n	80112d0 <HAL_PCD_Start+0x1a>
 80112ea:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80112ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80112f0:	6393      	str	r3, [r2, #56]	; 0x38
 80112f2:	e7ed      	b.n	80112d0 <HAL_PCD_Start+0x1a>
 80112f4:	2002      	movs	r0, #2
 80112f6:	4770      	bx	lr

080112f8 <HAL_PCD_Stop>:
 80112f8:	b538      	push	{r3, r4, r5, lr}
 80112fa:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80112fe:	2b01      	cmp	r3, #1
 8011300:	d01d      	beq.n	801133e <HAL_PCD_Stop+0x46>
 8011302:	4604      	mov	r4, r0
 8011304:	6805      	ldr	r5, [r0, #0]
 8011306:	2301      	movs	r3, #1
 8011308:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
 801130c:	4628      	mov	r0, r5
 801130e:	f002 fa1b 	bl	8013748 <USB_DisableGlobalInt>
 8011312:	6820      	ldr	r0, [r4, #0]
 8011314:	f002 fe71 	bl	8013ffa <USB_DevDisconnect>
 8011318:	2110      	movs	r1, #16
 801131a:	6820      	ldr	r0, [r4, #0]
 801131c:	f002 fa4c 	bl	80137b8 <USB_FlushTxFifo>
 8011320:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011322:	2b01      	cmp	r3, #1
 8011324:	d003      	beq.n	801132e <HAL_PCD_Stop+0x36>
 8011326:	2000      	movs	r0, #0
 8011328:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
 801132c:	bd38      	pop	{r3, r4, r5, pc}
 801132e:	69a3      	ldr	r3, [r4, #24]
 8011330:	2b01      	cmp	r3, #1
 8011332:	d0f8      	beq.n	8011326 <HAL_PCD_Stop+0x2e>
 8011334:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801133a:	63ab      	str	r3, [r5, #56]	; 0x38
 801133c:	e7f3      	b.n	8011326 <HAL_PCD_Stop+0x2e>
 801133e:	2002      	movs	r0, #2
 8011340:	e7f4      	b.n	801132c <HAL_PCD_Stop+0x34>
	...

08011344 <HAL_PCD_IRQHandler>:
 8011344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011348:	b089      	sub	sp, #36	; 0x24
 801134a:	4604      	mov	r4, r0
 801134c:	f8d0 b000 	ldr.w	fp, [r0]
 8011350:	4658      	mov	r0, fp
 8011352:	f002 fe91 	bl	8014078 <USB_GetMode>
 8011356:	b110      	cbz	r0, 801135e <HAL_PCD_IRQHandler+0x1a>
 8011358:	b009      	add	sp, #36	; 0x24
 801135a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801135e:	4682      	mov	sl, r0
 8011360:	6820      	ldr	r0, [r4, #0]
 8011362:	f002 fe58 	bl	8014016 <USB_ReadInterrupts>
 8011366:	2800      	cmp	r0, #0
 8011368:	d0f6      	beq.n	8011358 <HAL_PCD_IRQHandler+0x14>
 801136a:	6820      	ldr	r0, [r4, #0]
 801136c:	f002 fe53 	bl	8014016 <USB_ReadInterrupts>
 8011370:	f010 0f02 	tst.w	r0, #2
 8011374:	d004      	beq.n	8011380 <HAL_PCD_IRQHandler+0x3c>
 8011376:	6822      	ldr	r2, [r4, #0]
 8011378:	6953      	ldr	r3, [r2, #20]
 801137a:	f003 0302 	and.w	r3, r3, #2
 801137e:	6153      	str	r3, [r2, #20]
 8011380:	6820      	ldr	r0, [r4, #0]
 8011382:	f002 fe48 	bl	8014016 <USB_ReadInterrupts>
 8011386:	f010 0f10 	tst.w	r0, #16
 801138a:	d014      	beq.n	80113b6 <HAL_PCD_IRQHandler+0x72>
 801138c:	6822      	ldr	r2, [r4, #0]
 801138e:	6993      	ldr	r3, [r2, #24]
 8011390:	f023 0310 	bic.w	r3, r3, #16
 8011394:	6193      	str	r3, [r2, #24]
 8011396:	f8db 5020 	ldr.w	r5, [fp, #32]
 801139a:	f005 060f 	and.w	r6, r5, #15
 801139e:	f3c5 4343 	ubfx	r3, r5, #17, #4
 80113a2:	2b02      	cmp	r3, #2
 80113a4:	d06a      	beq.n	801147c <HAL_PCD_IRQHandler+0x138>
 80113a6:	2b06      	cmp	r3, #6
 80113a8:	f000 8086 	beq.w	80114b8 <HAL_PCD_IRQHandler+0x174>
 80113ac:	6822      	ldr	r2, [r4, #0]
 80113ae:	6993      	ldr	r3, [r2, #24]
 80113b0:	f043 0310 	orr.w	r3, r3, #16
 80113b4:	6193      	str	r3, [r2, #24]
 80113b6:	f8cd b00c 	str.w	fp, [sp, #12]
 80113ba:	6820      	ldr	r0, [r4, #0]
 80113bc:	f002 fe2b 	bl	8014016 <USB_ReadInterrupts>
 80113c0:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 80113c4:	f040 808a 	bne.w	80114dc <HAL_PCD_IRQHandler+0x198>
 80113c8:	6820      	ldr	r0, [r4, #0]
 80113ca:	f002 fe24 	bl	8014016 <USB_ReadInterrupts>
 80113ce:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 80113d2:	f040 8155 	bne.w	8011680 <HAL_PCD_IRQHandler+0x33c>
 80113d6:	6820      	ldr	r0, [r4, #0]
 80113d8:	f002 fe1d 	bl	8014016 <USB_ReadInterrupts>
 80113dc:	2800      	cmp	r0, #0
 80113de:	f2c0 821e 	blt.w	801181e <HAL_PCD_IRQHandler+0x4da>
 80113e2:	6820      	ldr	r0, [r4, #0]
 80113e4:	f002 fe17 	bl	8014016 <USB_ReadInterrupts>
 80113e8:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80113ec:	d00a      	beq.n	8011404 <HAL_PCD_IRQHandler+0xc0>
 80113ee:	f8db 3808 	ldr.w	r3, [fp, #2056]	; 0x808
 80113f2:	f013 0f01 	tst.w	r3, #1
 80113f6:	f040 822c 	bne.w	8011852 <HAL_PCD_IRQHandler+0x50e>
 80113fa:	6822      	ldr	r2, [r4, #0]
 80113fc:	6953      	ldr	r3, [r2, #20]
 80113fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011402:	6153      	str	r3, [r2, #20]
 8011404:	6820      	ldr	r0, [r4, #0]
 8011406:	f002 fe06 	bl	8014016 <USB_ReadInterrupts>
 801140a:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 801140e:	f040 8224 	bne.w	801185a <HAL_PCD_IRQHandler+0x516>
 8011412:	6820      	ldr	r0, [r4, #0]
 8011414:	f002 fdff 	bl	8014016 <USB_ReadInterrupts>
 8011418:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 801141c:	f040 8277 	bne.w	801190e <HAL_PCD_IRQHandler+0x5ca>
 8011420:	6820      	ldr	r0, [r4, #0]
 8011422:	f002 fdf8 	bl	8014016 <USB_ReadInterrupts>
 8011426:	f010 0f08 	tst.w	r0, #8
 801142a:	f040 8288 	bne.w	801193e <HAL_PCD_IRQHandler+0x5fa>
 801142e:	6820      	ldr	r0, [r4, #0]
 8011430:	f002 fdf1 	bl	8014016 <USB_ReadInterrupts>
 8011434:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8011438:	f040 828a 	bne.w	8011950 <HAL_PCD_IRQHandler+0x60c>
 801143c:	6820      	ldr	r0, [r4, #0]
 801143e:	f002 fdea 	bl	8014016 <USB_ReadInterrupts>
 8011442:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8011446:	f040 828d 	bne.w	8011964 <HAL_PCD_IRQHandler+0x620>
 801144a:	6820      	ldr	r0, [r4, #0]
 801144c:	f002 fde3 	bl	8014016 <USB_ReadInterrupts>
 8011450:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011454:	f040 8290 	bne.w	8011978 <HAL_PCD_IRQHandler+0x634>
 8011458:	6820      	ldr	r0, [r4, #0]
 801145a:	f002 fddc 	bl	8014016 <USB_ReadInterrupts>
 801145e:	f010 0f04 	tst.w	r0, #4
 8011462:	f43f af79 	beq.w	8011358 <HAL_PCD_IRQHandler+0x14>
 8011466:	6823      	ldr	r3, [r4, #0]
 8011468:	685d      	ldr	r5, [r3, #4]
 801146a:	f015 0f04 	tst.w	r5, #4
 801146e:	f040 828c 	bne.w	801198a <HAL_PCD_IRQHandler+0x646>
 8011472:	6822      	ldr	r2, [r4, #0]
 8011474:	6853      	ldr	r3, [r2, #4]
 8011476:	432b      	orrs	r3, r5
 8011478:	6053      	str	r3, [r2, #4]
 801147a:	e76d      	b.n	8011358 <HAL_PCD_IRQHandler+0x14>
 801147c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8011480:	421d      	tst	r5, r3
 8011482:	d093      	beq.n	80113ac <HAL_PCD_IRQHandler+0x68>
 8011484:	ea4f 1915 	mov.w	r9, r5, lsr #4
 8011488:	ebc6 07c6 	rsb	r7, r6, r6, lsl #3
 801148c:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8011490:	f3c5 120a 	ubfx	r2, r5, #4, #11
 8011494:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8011498:	4658      	mov	r0, fp
 801149a:	f002 fcf1 	bl	8013e80 <USB_ReadPacket>
 801149e:	f3c9 020a 	ubfx	r2, r9, #0, #11
 80114a2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80114a6:	4413      	add	r3, r2
 80114a8:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 80114ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80114b0:	441a      	add	r2, r3
 80114b2:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
 80114b6:	e779      	b.n	80113ac <HAL_PCD_IRQHandler+0x68>
 80114b8:	2208      	movs	r2, #8
 80114ba:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80114be:	4658      	mov	r0, fp
 80114c0:	f002 fcde 	bl	8013e80 <USB_ReadPacket>
 80114c4:	ebc6 01c6 	rsb	r1, r6, r6, lsl #3
 80114c8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80114cc:	f3c5 130a 	ubfx	r3, r5, #4, #11
 80114d0:	f8d1 2214 	ldr.w	r2, [r1, #532]	; 0x214
 80114d4:	4413      	add	r3, r2
 80114d6:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
 80114da:	e767      	b.n	80113ac <HAL_PCD_IRQHandler+0x68>
 80114dc:	6820      	ldr	r0, [r4, #0]
 80114de:	f002 fd9e 	bl	801401e <USB_ReadDevAllOutEpInterrupt>
 80114e2:	4605      	mov	r5, r0
 80114e4:	2800      	cmp	r0, #0
 80114e6:	f43f af6f 	beq.w	80113c8 <HAL_PCD_IRQHandler+0x84>
 80114ea:	f504 7801 	add.w	r8, r4, #516	; 0x204
 80114ee:	4656      	mov	r6, sl
 80114f0:	9b03      	ldr	r3, [sp, #12]
 80114f2:	f503 6930 	add.w	r9, r3, #2816	; 0xb00
 80114f6:	f8cd b008 	str.w	fp, [sp, #8]
 80114fa:	e096      	b.n	801162a <HAL_PCD_IRQHandler+0x2e6>
 80114fc:	eb09 1346 	add.w	r3, r9, r6, lsl #5
 8011500:	2201      	movs	r2, #1
 8011502:	609a      	str	r2, [r3, #8]
 8011504:	6820      	ldr	r0, [r4, #0]
 8011506:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 801150a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 801150e:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8011512:	689a      	ldr	r2, [r3, #8]
 8011514:	6921      	ldr	r1, [r4, #16]
 8011516:	2901      	cmp	r1, #1
 8011518:	d00c      	beq.n	8011534 <HAL_PCD_IRQHandler+0x1f0>
 801151a:	49bc      	ldr	r1, [pc, #752]	; (801180c <HAL_PCD_IRQHandler+0x4c8>)
 801151c:	458c      	cmp	ip, r1
 801151e:	d046      	beq.n	80115ae <HAL_PCD_IRQHandler+0x26a>
 8011520:	b91e      	cbnz	r6, 801152a <HAL_PCD_IRQHandler+0x1e6>
 8011522:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8011526:	2b00      	cmp	r3, #0
 8011528:	d052      	beq.n	80115d0 <HAL_PCD_IRQHandler+0x28c>
 801152a:	4659      	mov	r1, fp
 801152c:	4620      	mov	r0, r4
 801152e:	f006 faff 	bl	8017b30 <HAL_PCD_DataOutStageCallback>
 8011532:	e088      	b.n	8011646 <HAL_PCD_IRQHandler+0x302>
 8011534:	f012 0f08 	tst.w	r2, #8
 8011538:	d00a      	beq.n	8011550 <HAL_PCD_IRQHandler+0x20c>
 801153a:	49b5      	ldr	r1, [pc, #724]	; (8011810 <HAL_PCD_IRQHandler+0x4cc>)
 801153c:	458c      	cmp	ip, r1
 801153e:	f240 8082 	bls.w	8011646 <HAL_PCD_IRQHandler+0x302>
 8011542:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8011546:	d07e      	beq.n	8011646 <HAL_PCD_IRQHandler+0x302>
 8011548:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801154c:	609a      	str	r2, [r3, #8]
 801154e:	e07a      	b.n	8011646 <HAL_PCD_IRQHandler+0x302>
 8011550:	f012 0f20 	tst.w	r2, #32
 8011554:	d002      	beq.n	801155c <HAL_PCD_IRQHandler+0x218>
 8011556:	2220      	movs	r2, #32
 8011558:	609a      	str	r2, [r3, #8]
 801155a:	e074      	b.n	8011646 <HAL_PCD_IRQHandler+0x302>
 801155c:	f012 0f28 	tst.w	r2, #40	; 0x28
 8011560:	d171      	bne.n	8011646 <HAL_PCD_IRQHandler+0x302>
 8011562:	49ab      	ldr	r1, [pc, #684]	; (8011810 <HAL_PCD_IRQHandler+0x4cc>)
 8011564:	458c      	cmp	ip, r1
 8011566:	d906      	bls.n	8011576 <HAL_PCD_IRQHandler+0x232>
 8011568:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 801156c:	d003      	beq.n	8011576 <HAL_PCD_IRQHandler+0x232>
 801156e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011572:	609a      	str	r2, [r3, #8]
 8011574:	e067      	b.n	8011646 <HAL_PCD_IRQHandler+0x302>
 8011576:	f8d8 2000 	ldr.w	r2, [r8]
 801157a:	691b      	ldr	r3, [r3, #16]
 801157c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011580:	1ad3      	subs	r3, r2, r3
 8011582:	f8c8 3010 	str.w	r3, [r8, #16]
 8011586:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801158a:	4413      	add	r3, r2
 801158c:	f8c8 3004 	str.w	r3, [r8, #4]
 8011590:	b916      	cbnz	r6, 8011598 <HAL_PCD_IRQHandler+0x254>
 8011592:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8011596:	b123      	cbz	r3, 80115a2 <HAL_PCD_IRQHandler+0x25e>
 8011598:	4659      	mov	r1, fp
 801159a:	4620      	mov	r0, r4
 801159c:	f006 fac8 	bl	8017b30 <HAL_PCD_DataOutStageCallback>
 80115a0:	e051      	b.n	8011646 <HAL_PCD_IRQHandler+0x302>
 80115a2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80115a6:	2101      	movs	r1, #1
 80115a8:	f002 fd7a 	bl	80140a0 <USB_EP0_OutStart>
 80115ac:	e7f4      	b.n	8011598 <HAL_PCD_IRQHandler+0x254>
 80115ae:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80115b2:	d003      	beq.n	80115bc <HAL_PCD_IRQHandler+0x278>
 80115b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80115b8:	609a      	str	r2, [r3, #8]
 80115ba:	e044      	b.n	8011646 <HAL_PCD_IRQHandler+0x302>
 80115bc:	f012 0f20 	tst.w	r2, #32
 80115c0:	bf1c      	itt	ne
 80115c2:	2220      	movne	r2, #32
 80115c4:	609a      	strne	r2, [r3, #8]
 80115c6:	4659      	mov	r1, fp
 80115c8:	4620      	mov	r0, r4
 80115ca:	f006 fab1 	bl	8017b30 <HAL_PCD_DataOutStageCallback>
 80115ce:	e03a      	b.n	8011646 <HAL_PCD_IRQHandler+0x302>
 80115d0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80115d4:	2100      	movs	r1, #0
 80115d6:	f002 fd63 	bl	80140a0 <USB_EP0_OutStart>
 80115da:	e7a6      	b.n	801152a <HAL_PCD_IRQHandler+0x1e6>
 80115dc:	eb09 1346 	add.w	r3, r9, r6, lsl #5
 80115e0:	2208      	movs	r2, #8
 80115e2:	609a      	str	r2, [r3, #8]
 80115e4:	6823      	ldr	r3, [r4, #0]
 80115e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80115e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115ec:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 80115f0:	6899      	ldr	r1, [r3, #8]
 80115f2:	4887      	ldr	r0, [pc, #540]	; (8011810 <HAL_PCD_IRQHandler+0x4cc>)
 80115f4:	4282      	cmp	r2, r0
 80115f6:	f240 81cc 	bls.w	8011992 <HAL_PCD_IRQHandler+0x64e>
 80115fa:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80115fe:	d002      	beq.n	8011606 <HAL_PCD_IRQHandler+0x2c2>
 8011600:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011604:	609a      	str	r2, [r3, #8]
 8011606:	4620      	mov	r0, r4
 8011608:	f006 fa8a 	bl	8017b20 <HAL_PCD_SetupStageCallback>
 801160c:	6923      	ldr	r3, [r4, #16]
 801160e:	2b01      	cmp	r3, #1
 8011610:	d11c      	bne.n	801164c <HAL_PCD_IRQHandler+0x308>
 8011612:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8011616:	2101      	movs	r1, #1
 8011618:	6820      	ldr	r0, [r4, #0]
 801161a:	f002 fd41 	bl	80140a0 <USB_EP0_OutStart>
 801161e:	e015      	b.n	801164c <HAL_PCD_IRQHandler+0x308>
 8011620:	3601      	adds	r6, #1
 8011622:	f108 081c 	add.w	r8, r8, #28
 8011626:	086d      	lsrs	r5, r5, #1
 8011628:	d027      	beq.n	801167a <HAL_PCD_IRQHandler+0x336>
 801162a:	f015 0f01 	tst.w	r5, #1
 801162e:	d0f7      	beq.n	8011620 <HAL_PCD_IRQHandler+0x2dc>
 8011630:	fa5f fb86 	uxtb.w	fp, r6
 8011634:	4659      	mov	r1, fp
 8011636:	6820      	ldr	r0, [r4, #0]
 8011638:	f002 fd01 	bl	801403e <USB_ReadDevOutEPInterrupt>
 801163c:	4607      	mov	r7, r0
 801163e:	f010 0f01 	tst.w	r0, #1
 8011642:	f47f af5b 	bne.w	80114fc <HAL_PCD_IRQHandler+0x1b8>
 8011646:	f017 0f08 	tst.w	r7, #8
 801164a:	d1c7      	bne.n	80115dc <HAL_PCD_IRQHandler+0x298>
 801164c:	f017 0f10 	tst.w	r7, #16
 8011650:	d003      	beq.n	801165a <HAL_PCD_IRQHandler+0x316>
 8011652:	eb09 1346 	add.w	r3, r9, r6, lsl #5
 8011656:	2210      	movs	r2, #16
 8011658:	609a      	str	r2, [r3, #8]
 801165a:	f017 0f20 	tst.w	r7, #32
 801165e:	d003      	beq.n	8011668 <HAL_PCD_IRQHandler+0x324>
 8011660:	eb09 1346 	add.w	r3, r9, r6, lsl #5
 8011664:	2220      	movs	r2, #32
 8011666:	609a      	str	r2, [r3, #8]
 8011668:	f417 5f00 	tst.w	r7, #8192	; 0x2000
 801166c:	d0d8      	beq.n	8011620 <HAL_PCD_IRQHandler+0x2dc>
 801166e:	eb09 1346 	add.w	r3, r9, r6, lsl #5
 8011672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011676:	609a      	str	r2, [r3, #8]
 8011678:	e7d2      	b.n	8011620 <HAL_PCD_IRQHandler+0x2dc>
 801167a:	f8dd b008 	ldr.w	fp, [sp, #8]
 801167e:	e6a3      	b.n	80113c8 <HAL_PCD_IRQHandler+0x84>
 8011680:	6820      	ldr	r0, [r4, #0]
 8011682:	f002 fcd4 	bl	801402e <USB_ReadDevAllInEpInterrupt>
 8011686:	4607      	mov	r7, r0
 8011688:	2800      	cmp	r0, #0
 801168a:	f43f aea4 	beq.w	80113d6 <HAL_PCD_IRQHandler+0x92>
 801168e:	46a1      	mov	r9, r4
 8011690:	46d0      	mov	r8, sl
 8011692:	9b03      	ldr	r3, [sp, #12]
 8011694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011698:	9302      	str	r3, [sp, #8]
 801169a:	f8cd b010 	str.w	fp, [sp, #16]
 801169e:	f8cd a014 	str.w	sl, [sp, #20]
 80116a2:	e033      	b.n	801170c <HAL_PCD_IRQHandler+0x3c8>
 80116a4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80116a8:	4601      	mov	r1, r0
 80116aa:	6820      	ldr	r0, [r4, #0]
 80116ac:	f002 fcf8 	bl	80140a0 <USB_EP0_OutStart>
 80116b0:	4651      	mov	r1, sl
 80116b2:	4620      	mov	r0, r4
 80116b4:	f006 fa48 	bl	8017b48 <HAL_PCD_DataInStageCallback>
 80116b8:	f015 0f08 	tst.w	r5, #8
 80116bc:	d004      	beq.n	80116c8 <HAL_PCD_IRQHandler+0x384>
 80116be:	9b02      	ldr	r3, [sp, #8]
 80116c0:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80116c4:	2208      	movs	r2, #8
 80116c6:	609a      	str	r2, [r3, #8]
 80116c8:	f015 0f10 	tst.w	r5, #16
 80116cc:	d004      	beq.n	80116d8 <HAL_PCD_IRQHandler+0x394>
 80116ce:	9b02      	ldr	r3, [sp, #8]
 80116d0:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80116d4:	2210      	movs	r2, #16
 80116d6:	609a      	str	r2, [r3, #8]
 80116d8:	f015 0f40 	tst.w	r5, #64	; 0x40
 80116dc:	d004      	beq.n	80116e8 <HAL_PCD_IRQHandler+0x3a4>
 80116de:	9b02      	ldr	r3, [sp, #8]
 80116e0:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80116e4:	2240      	movs	r2, #64	; 0x40
 80116e6:	609a      	str	r2, [r3, #8]
 80116e8:	f015 0f02 	tst.w	r5, #2
 80116ec:	d004      	beq.n	80116f8 <HAL_PCD_IRQHandler+0x3b4>
 80116ee:	9b02      	ldr	r3, [sp, #8]
 80116f0:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80116f4:	2202      	movs	r2, #2
 80116f6:	609a      	str	r2, [r3, #8]
 80116f8:	f015 0f80 	tst.w	r5, #128	; 0x80
 80116fc:	d135      	bne.n	801176a <HAL_PCD_IRQHandler+0x426>
 80116fe:	f108 0801 	add.w	r8, r8, #1
 8011702:	f109 091c 	add.w	r9, r9, #28
 8011706:	087f      	lsrs	r7, r7, #1
 8011708:	f000 8084 	beq.w	8011814 <HAL_PCD_IRQHandler+0x4d0>
 801170c:	f017 0f01 	tst.w	r7, #1
 8011710:	d0f5      	beq.n	80116fe <HAL_PCD_IRQHandler+0x3ba>
 8011712:	fa5f fa88 	uxtb.w	sl, r8
 8011716:	4651      	mov	r1, sl
 8011718:	6820      	ldr	r0, [r4, #0]
 801171a:	f002 fc99 	bl	8014050 <USB_ReadDevInEPInterrupt>
 801171e:	4605      	mov	r5, r0
 8011720:	f010 0f01 	tst.w	r0, #1
 8011724:	d0c8      	beq.n	80116b8 <HAL_PCD_IRQHandler+0x374>
 8011726:	9b03      	ldr	r3, [sp, #12]
 8011728:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 801172c:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 8011730:	f008 020f 	and.w	r2, r8, #15
 8011734:	2001      	movs	r0, #1
 8011736:	fa00 f202 	lsl.w	r2, r0, r2
 801173a:	ea23 0302 	bic.w	r3, r3, r2
 801173e:	634b      	str	r3, [r1, #52]	; 0x34
 8011740:	9b02      	ldr	r3, [sp, #8]
 8011742:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8011746:	6098      	str	r0, [r3, #8]
 8011748:	6923      	ldr	r3, [r4, #16]
 801174a:	4283      	cmp	r3, r0
 801174c:	d1b0      	bne.n	80116b0 <HAL_PCD_IRQHandler+0x36c>
 801174e:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8011752:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 8011756:	4413      	add	r3, r2
 8011758:	f8c9 3048 	str.w	r3, [r9, #72]	; 0x48
 801175c:	f1b8 0f00 	cmp.w	r8, #0
 8011760:	d1a6      	bne.n	80116b0 <HAL_PCD_IRQHandler+0x36c>
 8011762:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8011764:	2b00      	cmp	r3, #0
 8011766:	d1a3      	bne.n	80116b0 <HAL_PCD_IRQHandler+0x36c>
 8011768:	e79c      	b.n	80116a4 <HAL_PCD_IRQHandler+0x360>
 801176a:	464e      	mov	r6, r9
 801176c:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8011770:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 8011774:	429a      	cmp	r2, r3
 8011776:	d8c2      	bhi.n	80116fe <HAL_PCD_IRQHandler+0x3ba>
 8011778:	6821      	ldr	r1, [r4, #0]
 801177a:	9106      	str	r1, [sp, #24]
 801177c:	1a9b      	subs	r3, r3, r2
 801177e:	f501 6b10 	add.w	fp, r1, #2304	; 0x900
 8011782:	eb0b 1b48 	add.w	fp, fp, r8, lsl #5
 8011786:	f8db 2018 	ldr.w	r2, [fp, #24]
 801178a:	b292      	uxth	r2, r2
 801178c:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 8011790:	428b      	cmp	r3, r1
 8011792:	bf28      	it	cs
 8011794:	460b      	movcs	r3, r1
 8011796:	3303      	adds	r3, #3
 8011798:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
 801179c:	d321      	bcc.n	80117e2 <HAL_PCD_IRQHandler+0x49e>
 801179e:	9707      	str	r7, [sp, #28]
 80117a0:	9f06      	ldr	r7, [sp, #24]
 80117a2:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80117a4:	6d35      	ldr	r5, [r6, #80]	; 0x50
 80117a6:	429d      	cmp	r5, r3
 80117a8:	d922      	bls.n	80117f0 <HAL_PCD_IRQHandler+0x4ac>
 80117aa:	b1fd      	cbz	r5, 80117ec <HAL_PCD_IRQHandler+0x4a8>
 80117ac:	1aed      	subs	r5, r5, r3
 80117ae:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80117b0:	429d      	cmp	r5, r3
 80117b2:	bf28      	it	cs
 80117b4:	461d      	movcs	r5, r3
 80117b6:	7c23      	ldrb	r3, [r4, #16]
 80117b8:	9300      	str	r3, [sp, #0]
 80117ba:	b2ab      	uxth	r3, r5
 80117bc:	4652      	mov	r2, sl
 80117be:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80117c0:	4638      	mov	r0, r7
 80117c2:	f002 fa4d 	bl	8013c60 <USB_WritePacket>
 80117c6:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80117c8:	442b      	add	r3, r5
 80117ca:	64b3      	str	r3, [r6, #72]	; 0x48
 80117cc:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80117ce:	442b      	add	r3, r5
 80117d0:	6573      	str	r3, [r6, #84]	; 0x54
 80117d2:	f8db 3018 	ldr.w	r3, [fp, #24]
 80117d6:	3503      	adds	r5, #3
 80117d8:	b29b      	uxth	r3, r3
 80117da:	ebb3 0f95 	cmp.w	r3, r5, lsr #2
 80117de:	d2e0      	bcs.n	80117a2 <HAL_PCD_IRQHandler+0x45e>
 80117e0:	9f07      	ldr	r7, [sp, #28]
 80117e2:	6d32      	ldr	r2, [r6, #80]	; 0x50
 80117e4:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80117e6:	429a      	cmp	r2, r3
 80117e8:	d889      	bhi.n	80116fe <HAL_PCD_IRQHandler+0x3ba>
 80117ea:	e002      	b.n	80117f2 <HAL_PCD_IRQHandler+0x4ae>
 80117ec:	9f07      	ldr	r7, [sp, #28]
 80117ee:	e000      	b.n	80117f2 <HAL_PCD_IRQHandler+0x4ae>
 80117f0:	9f07      	ldr	r7, [sp, #28]
 80117f2:	9b06      	ldr	r3, [sp, #24]
 80117f4:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 80117f8:	f008 010f 	and.w	r1, r8, #15
 80117fc:	2001      	movs	r0, #1
 80117fe:	fa00 f101 	lsl.w	r1, r0, r1
 8011802:	ea22 0201 	bic.w	r2, r2, r1
 8011806:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 801180a:	e778      	b.n	80116fe <HAL_PCD_IRQHandler+0x3ba>
 801180c:	4f54310a 	.word	0x4f54310a
 8011810:	4f54300a 	.word	0x4f54300a
 8011814:	f8dd b010 	ldr.w	fp, [sp, #16]
 8011818:	f8dd a014 	ldr.w	sl, [sp, #20]
 801181c:	e5db      	b.n	80113d6 <HAL_PCD_IRQHandler+0x92>
 801181e:	f8db 3804 	ldr.w	r3, [fp, #2052]	; 0x804
 8011822:	f023 0301 	bic.w	r3, r3, #1
 8011826:	f8cb 3804 	str.w	r3, [fp, #2052]	; 0x804
 801182a:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 801182e:	2b01      	cmp	r3, #1
 8011830:	d008      	beq.n	8011844 <HAL_PCD_IRQHandler+0x500>
 8011832:	4620      	mov	r0, r4
 8011834:	f006 f9c4 	bl	8017bc0 <HAL_PCD_ResumeCallback>
 8011838:	6822      	ldr	r2, [r4, #0]
 801183a:	6953      	ldr	r3, [r2, #20]
 801183c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011840:	6153      	str	r3, [r2, #20]
 8011842:	e5ce      	b.n	80113e2 <HAL_PCD_IRQHandler+0x9e>
 8011844:	2100      	movs	r1, #0
 8011846:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
 801184a:	4620      	mov	r0, r4
 801184c:	f000 fa30 	bl	8011cb0 <HAL_PCDEx_LPM_Callback>
 8011850:	e7f2      	b.n	8011838 <HAL_PCD_IRQHandler+0x4f4>
 8011852:	4620      	mov	r0, r4
 8011854:	f006 f99c 	bl	8017b90 <HAL_PCD_SuspendCallback>
 8011858:	e5cf      	b.n	80113fa <HAL_PCD_IRQHandler+0xb6>
 801185a:	f50b 6500 	add.w	r5, fp, #2048	; 0x800
 801185e:	686b      	ldr	r3, [r5, #4]
 8011860:	f023 0301 	bic.w	r3, r3, #1
 8011864:	606b      	str	r3, [r5, #4]
 8011866:	2110      	movs	r1, #16
 8011868:	6820      	ldr	r0, [r4, #0]
 801186a:	f001 ffa5 	bl	80137b8 <USB_FlushTxFifo>
 801186e:	6863      	ldr	r3, [r4, #4]
 8011870:	b303      	cbz	r3, 80118b4 <HAL_PCD_IRQHandler+0x570>
 8011872:	f50b 6310 	add.w	r3, fp, #2304	; 0x900
 8011876:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 801187a:	6099      	str	r1, [r3, #8]
 801187c:	681a      	ldr	r2, [r3, #0]
 801187e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8011882:	601a      	str	r2, [r3, #0]
 8011884:	681a      	ldr	r2, [r3, #0]
 8011886:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 801188a:	601a      	str	r2, [r3, #0]
 801188c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
 8011890:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011894:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8011898:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 801189c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80118a0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80118a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80118a8:	f10a 0a01 	add.w	sl, sl, #1
 80118ac:	3320      	adds	r3, #32
 80118ae:	6862      	ldr	r2, [r4, #4]
 80118b0:	4552      	cmp	r2, sl
 80118b2:	d8e2      	bhi.n	801187a <HAL_PCD_IRQHandler+0x536>
 80118b4:	69eb      	ldr	r3, [r5, #28]
 80118b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80118ba:	61eb      	str	r3, [r5, #28]
 80118bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80118be:	b1db      	cbz	r3, 80118f8 <HAL_PCD_IRQHandler+0x5b4>
 80118c0:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 80118c4:	f043 030b 	orr.w	r3, r3, #11
 80118c8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 80118cc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80118ce:	f043 030b 	orr.w	r3, r3, #11
 80118d2:	646b      	str	r3, [r5, #68]	; 0x44
 80118d4:	f8db 3800 	ldr.w	r3, [fp, #2048]	; 0x800
 80118d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80118dc:	f8cb 3800 	str.w	r3, [fp, #2048]	; 0x800
 80118e0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80118e4:	7c21      	ldrb	r1, [r4, #16]
 80118e6:	6820      	ldr	r0, [r4, #0]
 80118e8:	f002 fbda 	bl	80140a0 <USB_EP0_OutStart>
 80118ec:	6822      	ldr	r2, [r4, #0]
 80118ee:	6953      	ldr	r3, [r2, #20]
 80118f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80118f4:	6153      	str	r3, [r2, #20]
 80118f6:	e58c      	b.n	8011412 <HAL_PCD_IRQHandler+0xce>
 80118f8:	696b      	ldr	r3, [r5, #20]
 80118fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80118fe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8011902:	616b      	str	r3, [r5, #20]
 8011904:	692b      	ldr	r3, [r5, #16]
 8011906:	f043 030b 	orr.w	r3, r3, #11
 801190a:	612b      	str	r3, [r5, #16]
 801190c:	e7e2      	b.n	80118d4 <HAL_PCD_IRQHandler+0x590>
 801190e:	6820      	ldr	r0, [r4, #0]
 8011910:	f002 fbb6 	bl	8014080 <USB_ActivateSetup>
 8011914:	6820      	ldr	r0, [r4, #0]
 8011916:	f002 f851 	bl	80139bc <USB_GetDevSpeed>
 801191a:	60e0      	str	r0, [r4, #12]
 801191c:	6825      	ldr	r5, [r4, #0]
 801191e:	f000 fcfb 	bl	8012318 <HAL_RCC_GetHCLKFreq>
 8011922:	4601      	mov	r1, r0
 8011924:	7b22      	ldrb	r2, [r4, #12]
 8011926:	4628      	mov	r0, r5
 8011928:	f001 fe96 	bl	8013658 <USB_SetTurnaroundTime>
 801192c:	4620      	mov	r0, r4
 801192e:	f006 f91c 	bl	8017b6a <HAL_PCD_ResetCallback>
 8011932:	6822      	ldr	r2, [r4, #0]
 8011934:	6953      	ldr	r3, [r2, #20]
 8011936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801193a:	6153      	str	r3, [r2, #20]
 801193c:	e570      	b.n	8011420 <HAL_PCD_IRQHandler+0xdc>
 801193e:	4620      	mov	r0, r4
 8011940:	f006 f90d 	bl	8017b5e <HAL_PCD_SOFCallback>
 8011944:	6822      	ldr	r2, [r4, #0]
 8011946:	6953      	ldr	r3, [r2, #20]
 8011948:	f003 0308 	and.w	r3, r3, #8
 801194c:	6153      	str	r3, [r2, #20]
 801194e:	e56e      	b.n	801142e <HAL_PCD_IRQHandler+0xea>
 8011950:	2100      	movs	r1, #0
 8011952:	4620      	mov	r0, r4
 8011954:	f006 f940 	bl	8017bd8 <HAL_PCD_ISOINIncompleteCallback>
 8011958:	6822      	ldr	r2, [r4, #0]
 801195a:	6953      	ldr	r3, [r2, #20]
 801195c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011960:	6153      	str	r3, [r2, #20]
 8011962:	e56b      	b.n	801143c <HAL_PCD_IRQHandler+0xf8>
 8011964:	2100      	movs	r1, #0
 8011966:	4620      	mov	r0, r4
 8011968:	f006 f930 	bl	8017bcc <HAL_PCD_ISOOUTIncompleteCallback>
 801196c:	6822      	ldr	r2, [r4, #0]
 801196e:	6953      	ldr	r3, [r2, #20]
 8011970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011974:	6153      	str	r3, [r2, #20]
 8011976:	e568      	b.n	801144a <HAL_PCD_IRQHandler+0x106>
 8011978:	4620      	mov	r0, r4
 801197a:	f006 f933 	bl	8017be4 <HAL_PCD_ConnectCallback>
 801197e:	6822      	ldr	r2, [r4, #0]
 8011980:	6953      	ldr	r3, [r2, #20]
 8011982:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011986:	6153      	str	r3, [r2, #20]
 8011988:	e566      	b.n	8011458 <HAL_PCD_IRQHandler+0x114>
 801198a:	4620      	mov	r0, r4
 801198c:	f006 f930 	bl	8017bf0 <HAL_PCD_DisconnectCallback>
 8011990:	e56f      	b.n	8011472 <HAL_PCD_IRQHandler+0x12e>
 8011992:	4620      	mov	r0, r4
 8011994:	f006 f8c4 	bl	8017b20 <HAL_PCD_SetupStageCallback>
 8011998:	e658      	b.n	801164c <HAL_PCD_IRQHandler+0x308>
 801199a:	bf00      	nop

0801199c <HAL_PCD_SetAddress>:
 801199c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80119a0:	2b01      	cmp	r3, #1
 80119a2:	d00d      	beq.n	80119c0 <HAL_PCD_SetAddress+0x24>
 80119a4:	b510      	push	{r4, lr}
 80119a6:	4604      	mov	r4, r0
 80119a8:	2301      	movs	r3, #1
 80119aa:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
 80119ae:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80119b2:	6800      	ldr	r0, [r0, #0]
 80119b4:	f002 fb03 	bl	8013fbe <USB_SetDevAddress>
 80119b8:	2000      	movs	r0, #0
 80119ba:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
 80119be:	bd10      	pop	{r4, pc}
 80119c0:	2002      	movs	r0, #2
 80119c2:	4770      	bx	lr

080119c4 <HAL_PCD_EP_Open>:
 80119c4:	b570      	push	{r4, r5, r6, lr}
 80119c6:	4605      	mov	r5, r0
 80119c8:	460c      	mov	r4, r1
 80119ca:	f011 0f80 	tst.w	r1, #128	; 0x80
 80119ce:	d125      	bne.n	8011a1c <HAL_PCD_EP_Open+0x58>
 80119d0:	f001 000f 	and.w	r0, r1, #15
 80119d4:	ebc0 06c0 	rsb	r6, r0, r0, lsl #3
 80119d8:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80119dc:	f506 71fe 	add.w	r1, r6, #508	; 0x1fc
 80119e0:	4630      	mov	r0, r6
 80119e2:	2600      	movs	r6, #0
 80119e4:	f880 61fd 	strb.w	r6, [r0, #509]	; 0x1fd
 80119e8:	f004 040f 	and.w	r4, r4, #15
 80119ec:	700c      	strb	r4, [r1, #0]
 80119ee:	608a      	str	r2, [r1, #8]
 80119f0:	70cb      	strb	r3, [r1, #3]
 80119f2:	784a      	ldrb	r2, [r1, #1]
 80119f4:	b102      	cbz	r2, 80119f8 <HAL_PCD_EP_Open+0x34>
 80119f6:	80cc      	strh	r4, [r1, #6]
 80119f8:	2b02      	cmp	r3, #2
 80119fa:	bf04      	itt	eq
 80119fc:	2300      	moveq	r3, #0
 80119fe:	710b      	strbeq	r3, [r1, #4]
 8011a00:	f895 33bc 	ldrb.w	r3, [r5, #956]	; 0x3bc
 8011a04:	2b01      	cmp	r3, #1
 8011a06:	d018      	beq.n	8011a3a <HAL_PCD_EP_Open+0x76>
 8011a08:	2301      	movs	r3, #1
 8011a0a:	f885 33bc 	strb.w	r3, [r5, #956]	; 0x3bc
 8011a0e:	6828      	ldr	r0, [r5, #0]
 8011a10:	f001 ffe3 	bl	80139da <USB_ActivateEndpoint>
 8011a14:	2000      	movs	r0, #0
 8011a16:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
 8011a1a:	bd70      	pop	{r4, r5, r6, pc}
 8011a1c:	f001 000f 	and.w	r0, r1, #15
 8011a20:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 8011a24:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8011a28:	313c      	adds	r1, #60	; 0x3c
 8011a2a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8011a2e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8011a32:	2601      	movs	r6, #1
 8011a34:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
 8011a38:	e7d6      	b.n	80119e8 <HAL_PCD_EP_Open+0x24>
 8011a3a:	2002      	movs	r0, #2
 8011a3c:	e7ed      	b.n	8011a1a <HAL_PCD_EP_Open+0x56>

08011a3e <HAL_PCD_EP_Close>:
 8011a3e:	b510      	push	{r4, lr}
 8011a40:	4604      	mov	r4, r0
 8011a42:	460b      	mov	r3, r1
 8011a44:	f011 0f80 	tst.w	r1, #128	; 0x80
 8011a48:	d11f      	bne.n	8011a8a <HAL_PCD_EP_Close+0x4c>
 8011a4a:	f001 020f 	and.w	r2, r1, #15
 8011a4e:	ebc2 01c2 	rsb	r1, r2, r2, lsl #3
 8011a52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011a56:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
 8011a5a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8011a5e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8011a62:	2000      	movs	r0, #0
 8011a64:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
 8011a68:	f003 030f 	and.w	r3, r3, #15
 8011a6c:	700b      	strb	r3, [r1, #0]
 8011a6e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8011a72:	2b01      	cmp	r3, #1
 8011a74:	d018      	beq.n	8011aa8 <HAL_PCD_EP_Close+0x6a>
 8011a76:	2301      	movs	r3, #1
 8011a78:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
 8011a7c:	6820      	ldr	r0, [r4, #0]
 8011a7e:	f001 fff5 	bl	8013a6c <USB_DeactivateEndpoint>
 8011a82:	2000      	movs	r0, #0
 8011a84:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
 8011a88:	bd10      	pop	{r4, pc}
 8011a8a:	f001 020f 	and.w	r2, r1, #15
 8011a8e:	ebc2 01c2 	rsb	r1, r2, r2, lsl #3
 8011a92:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011a96:	313c      	adds	r1, #60	; 0x3c
 8011a98:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8011a9c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8011aa0:	2001      	movs	r0, #1
 8011aa2:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 8011aa6:	e7df      	b.n	8011a68 <HAL_PCD_EP_Close+0x2a>
 8011aa8:	2002      	movs	r0, #2
 8011aaa:	e7ed      	b.n	8011a88 <HAL_PCD_EP_Close+0x4a>

08011aac <HAL_PCD_EP_Receive>:
 8011aac:	b538      	push	{r3, r4, r5, lr}
 8011aae:	f001 040f 	and.w	r4, r1, #15
 8011ab2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8011ab6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011aba:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
 8011abe:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8011ac2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8011ac6:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
 8011aca:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
 8011ace:	2300      	movs	r3, #0
 8011ad0:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
 8011ad4:	f885 31fd 	strb.w	r3, [r5, #509]	; 0x1fd
 8011ad8:	f885 41fc 	strb.w	r4, [r5, #508]	; 0x1fc
 8011adc:	6903      	ldr	r3, [r0, #16]
 8011ade:	2b01      	cmp	r3, #1
 8011ae0:	d006      	beq.n	8011af0 <HAL_PCD_EP_Receive+0x44>
 8011ae2:	b964      	cbnz	r4, 8011afe <HAL_PCD_EP_Receive+0x52>
 8011ae4:	b2da      	uxtb	r2, r3
 8011ae6:	6800      	ldr	r0, [r0, #0]
 8011ae8:	f002 f82c 	bl	8013b44 <USB_EP0StartXfer>
 8011aec:	2000      	movs	r0, #0
 8011aee:	bd38      	pop	{r3, r4, r5, pc}
 8011af0:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8011af4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8011af8:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
 8011afc:	e7f1      	b.n	8011ae2 <HAL_PCD_EP_Receive+0x36>
 8011afe:	b2da      	uxtb	r2, r3
 8011b00:	6800      	ldr	r0, [r0, #0]
 8011b02:	f002 f8c3 	bl	8013c8c <USB_EPStartXfer>
 8011b06:	e7f1      	b.n	8011aec <HAL_PCD_EP_Receive+0x40>

08011b08 <HAL_PCD_EP_GetRxCount>:
 8011b08:	f001 010f 	and.w	r1, r1, #15
 8011b0c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8011b10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011b14:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8011b18:	4770      	bx	lr

08011b1a <HAL_PCD_EP_Transmit>:
 8011b1a:	b538      	push	{r3, r4, r5, lr}
 8011b1c:	f001 040f 	and.w	r4, r1, #15
 8011b20:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8011b24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011b28:	313c      	adds	r1, #60	; 0x3c
 8011b2a:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8011b2e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8011b32:	64aa      	str	r2, [r5, #72]	; 0x48
 8011b34:	652b      	str	r3, [r5, #80]	; 0x50
 8011b36:	2300      	movs	r3, #0
 8011b38:	656b      	str	r3, [r5, #84]	; 0x54
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 8011b40:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
 8011b44:	6903      	ldr	r3, [r0, #16]
 8011b46:	2b01      	cmp	r3, #1
 8011b48:	d006      	beq.n	8011b58 <HAL_PCD_EP_Transmit+0x3e>
 8011b4a:	b95c      	cbnz	r4, 8011b64 <HAL_PCD_EP_Transmit+0x4a>
 8011b4c:	b2da      	uxtb	r2, r3
 8011b4e:	6800      	ldr	r0, [r0, #0]
 8011b50:	f001 fff8 	bl	8013b44 <USB_EP0StartXfer>
 8011b54:	2000      	movs	r0, #0
 8011b56:	bd38      	pop	{r3, r4, r5, pc}
 8011b58:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8011b5c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8011b60:	64ea      	str	r2, [r5, #76]	; 0x4c
 8011b62:	e7f2      	b.n	8011b4a <HAL_PCD_EP_Transmit+0x30>
 8011b64:	b2da      	uxtb	r2, r3
 8011b66:	6800      	ldr	r0, [r0, #0]
 8011b68:	f002 f890 	bl	8013c8c <USB_EPStartXfer>
 8011b6c:	e7f2      	b.n	8011b54 <HAL_PCD_EP_Transmit+0x3a>

08011b6e <HAL_PCD_EP_SetStall>:
 8011b6e:	b538      	push	{r3, r4, r5, lr}
 8011b70:	f001 050f 	and.w	r5, r1, #15
 8011b74:	6842      	ldr	r2, [r0, #4]
 8011b76:	4295      	cmp	r5, r2
 8011b78:	d837      	bhi.n	8011bea <HAL_PCD_EP_SetStall+0x7c>
 8011b7a:	4604      	mov	r4, r0
 8011b7c:	460b      	mov	r3, r1
 8011b7e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8011b82:	d11e      	bne.n	8011bc2 <HAL_PCD_EP_SetStall+0x54>
 8011b84:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8011b88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011b8c:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
 8011b90:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8011b94:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8011b98:	2200      	movs	r2, #0
 8011b9a:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	708b      	strb	r3, [r1, #2]
 8011ba2:	700d      	strb	r5, [r1, #0]
 8011ba4:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8011ba8:	2b01      	cmp	r3, #1
 8011baa:	d020      	beq.n	8011bee <HAL_PCD_EP_SetStall+0x80>
 8011bac:	2301      	movs	r3, #1
 8011bae:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
 8011bb2:	6820      	ldr	r0, [r4, #0]
 8011bb4:	f002 f989 	bl	8013eca <USB_EPSetStall>
 8011bb8:	b185      	cbz	r5, 8011bdc <HAL_PCD_EP_SetStall+0x6e>
 8011bba:	2000      	movs	r0, #0
 8011bbc:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
 8011bc0:	bd38      	pop	{r3, r4, r5, pc}
 8011bc2:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 8011bc6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011bca:	313c      	adds	r1, #60	; 0x3c
 8011bcc:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8011bd0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8011bd4:	2201      	movs	r2, #1
 8011bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8011bda:	e7e0      	b.n	8011b9e <HAL_PCD_EP_SetStall+0x30>
 8011bdc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8011be0:	7c21      	ldrb	r1, [r4, #16]
 8011be2:	6820      	ldr	r0, [r4, #0]
 8011be4:	f002 fa5c 	bl	80140a0 <USB_EP0_OutStart>
 8011be8:	e7e7      	b.n	8011bba <HAL_PCD_EP_SetStall+0x4c>
 8011bea:	2001      	movs	r0, #1
 8011bec:	e7e8      	b.n	8011bc0 <HAL_PCD_EP_SetStall+0x52>
 8011bee:	2002      	movs	r0, #2
 8011bf0:	e7e6      	b.n	8011bc0 <HAL_PCD_EP_SetStall+0x52>

08011bf2 <HAL_PCD_EP_ClrStall>:
 8011bf2:	f001 030f 	and.w	r3, r1, #15
 8011bf6:	6842      	ldr	r2, [r0, #4]
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	d82f      	bhi.n	8011c5c <HAL_PCD_EP_ClrStall+0x6a>
 8011bfc:	b510      	push	{r4, lr}
 8011bfe:	4604      	mov	r4, r0
 8011c00:	f011 0f80 	tst.w	r1, #128	; 0x80
 8011c04:	d11d      	bne.n	8011c42 <HAL_PCD_EP_ClrStall+0x50>
 8011c06:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8011c0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011c0e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
 8011c12:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8011c16:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8011c1a:	2000      	movs	r0, #0
 8011c1c:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
 8011c20:	2200      	movs	r2, #0
 8011c22:	708a      	strb	r2, [r1, #2]
 8011c24:	700b      	strb	r3, [r1, #0]
 8011c26:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8011c2a:	2b01      	cmp	r3, #1
 8011c2c:	d018      	beq.n	8011c60 <HAL_PCD_EP_ClrStall+0x6e>
 8011c2e:	2301      	movs	r3, #1
 8011c30:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
 8011c34:	6820      	ldr	r0, [r4, #0]
 8011c36:	f002 f975 	bl	8013f24 <USB_EPClearStall>
 8011c3a:	2000      	movs	r0, #0
 8011c3c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
 8011c40:	bd10      	pop	{r4, pc}
 8011c42:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8011c46:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011c4a:	313c      	adds	r1, #60	; 0x3c
 8011c4c:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8011c50:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8011c54:	2001      	movs	r0, #1
 8011c56:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 8011c5a:	e7e1      	b.n	8011c20 <HAL_PCD_EP_ClrStall+0x2e>
 8011c5c:	2001      	movs	r0, #1
 8011c5e:	4770      	bx	lr
 8011c60:	2002      	movs	r0, #2
 8011c62:	e7ed      	b.n	8011c40 <HAL_PCD_EP_ClrStall+0x4e>

08011c64 <HAL_PCDEx_SetTxFiFo>:
 8011c64:	b430      	push	{r4, r5}
 8011c66:	6804      	ldr	r4, [r0, #0]
 8011c68:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011c6a:	b919      	cbnz	r1, 8011c74 <HAL_PCDEx_SetTxFiFo+0x10>
 8011c6c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8011c70:	62a0      	str	r0, [r4, #40]	; 0x28
 8011c72:	e016      	b.n	8011ca2 <HAL_PCDEx_SetTxFiFo+0x3e>
 8011c74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011c76:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8011c7a:	1e4d      	subs	r5, r1, #1
 8011c7c:	d00b      	beq.n	8011c96 <HAL_PCDEx_SetTxFiFo+0x32>
 8011c7e:	2300      	movs	r3, #0
 8011c80:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8011c84:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8011c88:	6849      	ldr	r1, [r1, #4]
 8011c8a:	eb00 4011 	add.w	r0, r0, r1, lsr #16
 8011c8e:	3301      	adds	r3, #1
 8011c90:	b2db      	uxtb	r3, r3
 8011c92:	42ab      	cmp	r3, r5
 8011c94:	d3f4      	bcc.n	8011c80 <HAL_PCDEx_SetTxFiFo+0x1c>
 8011c96:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8011c9a:	3540      	adds	r5, #64	; 0x40
 8011c9c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8011ca0:	6060      	str	r0, [r4, #4]
 8011ca2:	2000      	movs	r0, #0
 8011ca4:	bc30      	pop	{r4, r5}
 8011ca6:	4770      	bx	lr

08011ca8 <HAL_PCDEx_SetRxFiFo>:
 8011ca8:	6803      	ldr	r3, [r0, #0]
 8011caa:	6259      	str	r1, [r3, #36]	; 0x24
 8011cac:	2000      	movs	r0, #0
 8011cae:	4770      	bx	lr

08011cb0 <HAL_PCDEx_LPM_Callback>:
 8011cb0:	4770      	bx	lr
	...

08011cb4 <HAL_PWR_EnterSTOPMode>:
 8011cb4:	4a0b      	ldr	r2, [pc, #44]	; (8011ce4 <HAL_PWR_EnterSTOPMode+0x30>)
 8011cb6:	6813      	ldr	r3, [r2, #0]
 8011cb8:	f023 0303 	bic.w	r3, r3, #3
 8011cbc:	4303      	orrs	r3, r0
 8011cbe:	6013      	str	r3, [r2, #0]
 8011cc0:	4a09      	ldr	r2, [pc, #36]	; (8011ce8 <HAL_PWR_EnterSTOPMode+0x34>)
 8011cc2:	6913      	ldr	r3, [r2, #16]
 8011cc4:	f043 0304 	orr.w	r3, r3, #4
 8011cc8:	6113      	str	r3, [r2, #16]
 8011cca:	2901      	cmp	r1, #1
 8011ccc:	d008      	beq.n	8011ce0 <HAL_PWR_EnterSTOPMode+0x2c>
 8011cce:	bf40      	sev
 8011cd0:	bf20      	wfe
 8011cd2:	bf20      	wfe
 8011cd4:	4a04      	ldr	r2, [pc, #16]	; (8011ce8 <HAL_PWR_EnterSTOPMode+0x34>)
 8011cd6:	6913      	ldr	r3, [r2, #16]
 8011cd8:	f023 0304 	bic.w	r3, r3, #4
 8011cdc:	6113      	str	r3, [r2, #16]
 8011cde:	4770      	bx	lr
 8011ce0:	bf30      	wfi
 8011ce2:	e7f7      	b.n	8011cd4 <HAL_PWR_EnterSTOPMode+0x20>
 8011ce4:	40007000 	.word	0x40007000
 8011ce8:	e000ed00 	.word	0xe000ed00

08011cec <HAL_RCC_OscConfig>:
 8011cec:	2800      	cmp	r0, #0
 8011cee:	f000 81e2 	beq.w	80120b6 <HAL_RCC_OscConfig+0x3ca>
 8011cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cf6:	b082      	sub	sp, #8
 8011cf8:	4604      	mov	r4, r0
 8011cfa:	6803      	ldr	r3, [r0, #0]
 8011cfc:	f013 0f01 	tst.w	r3, #1
 8011d00:	d03b      	beq.n	8011d7a <HAL_RCC_OscConfig+0x8e>
 8011d02:	4ba7      	ldr	r3, [pc, #668]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011d04:	689b      	ldr	r3, [r3, #8]
 8011d06:	f003 030c 	and.w	r3, r3, #12
 8011d0a:	2b04      	cmp	r3, #4
 8011d0c:	d02c      	beq.n	8011d68 <HAL_RCC_OscConfig+0x7c>
 8011d0e:	4ba4      	ldr	r3, [pc, #656]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011d10:	689b      	ldr	r3, [r3, #8]
 8011d12:	f003 030c 	and.w	r3, r3, #12
 8011d16:	2b08      	cmp	r3, #8
 8011d18:	d021      	beq.n	8011d5e <HAL_RCC_OscConfig+0x72>
 8011d1a:	6863      	ldr	r3, [r4, #4]
 8011d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d20:	d04f      	beq.n	8011dc2 <HAL_RCC_OscConfig+0xd6>
 8011d22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011d26:	d052      	beq.n	8011dce <HAL_RCC_OscConfig+0xe2>
 8011d28:	4b9d      	ldr	r3, [pc, #628]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011d2a:	681a      	ldr	r2, [r3, #0]
 8011d2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8011d30:	601a      	str	r2, [r3, #0]
 8011d32:	681a      	ldr	r2, [r3, #0]
 8011d34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011d38:	601a      	str	r2, [r3, #0]
 8011d3a:	6863      	ldr	r3, [r4, #4]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d050      	beq.n	8011de2 <HAL_RCC_OscConfig+0xf6>
 8011d40:	f7fe fb50 	bl	80103e4 <HAL_GetTick>
 8011d44:	4605      	mov	r5, r0
 8011d46:	4e96      	ldr	r6, [pc, #600]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011d48:	6833      	ldr	r3, [r6, #0]
 8011d4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8011d4e:	d114      	bne.n	8011d7a <HAL_RCC_OscConfig+0x8e>
 8011d50:	f7fe fb48 	bl	80103e4 <HAL_GetTick>
 8011d54:	1b40      	subs	r0, r0, r5
 8011d56:	2864      	cmp	r0, #100	; 0x64
 8011d58:	d9f6      	bls.n	8011d48 <HAL_RCC_OscConfig+0x5c>
 8011d5a:	2003      	movs	r0, #3
 8011d5c:	e1b2      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 8011d5e:	4b90      	ldr	r3, [pc, #576]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011d60:	685b      	ldr	r3, [r3, #4]
 8011d62:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8011d66:	d0d8      	beq.n	8011d1a <HAL_RCC_OscConfig+0x2e>
 8011d68:	4b8d      	ldr	r3, [pc, #564]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8011d70:	d003      	beq.n	8011d7a <HAL_RCC_OscConfig+0x8e>
 8011d72:	6863      	ldr	r3, [r4, #4]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	f000 81a0 	beq.w	80120ba <HAL_RCC_OscConfig+0x3ce>
 8011d7a:	6823      	ldr	r3, [r4, #0]
 8011d7c:	f013 0f02 	tst.w	r3, #2
 8011d80:	d054      	beq.n	8011e2c <HAL_RCC_OscConfig+0x140>
 8011d82:	4b87      	ldr	r3, [pc, #540]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011d84:	689b      	ldr	r3, [r3, #8]
 8011d86:	f013 0f0c 	tst.w	r3, #12
 8011d8a:	d03e      	beq.n	8011e0a <HAL_RCC_OscConfig+0x11e>
 8011d8c:	4b84      	ldr	r3, [pc, #528]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011d8e:	689b      	ldr	r3, [r3, #8]
 8011d90:	f003 030c 	and.w	r3, r3, #12
 8011d94:	2b08      	cmp	r3, #8
 8011d96:	d033      	beq.n	8011e00 <HAL_RCC_OscConfig+0x114>
 8011d98:	68e3      	ldr	r3, [r4, #12]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d067      	beq.n	8011e6e <HAL_RCC_OscConfig+0x182>
 8011d9e:	4b81      	ldr	r3, [pc, #516]	; (8011fa4 <HAL_RCC_OscConfig+0x2b8>)
 8011da0:	2201      	movs	r2, #1
 8011da2:	601a      	str	r2, [r3, #0]
 8011da4:	f7fe fb1e 	bl	80103e4 <HAL_GetTick>
 8011da8:	4605      	mov	r5, r0
 8011daa:	4e7d      	ldr	r6, [pc, #500]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011dac:	6833      	ldr	r3, [r6, #0]
 8011dae:	f013 0f02 	tst.w	r3, #2
 8011db2:	d153      	bne.n	8011e5c <HAL_RCC_OscConfig+0x170>
 8011db4:	f7fe fb16 	bl	80103e4 <HAL_GetTick>
 8011db8:	1b40      	subs	r0, r0, r5
 8011dba:	2802      	cmp	r0, #2
 8011dbc:	d9f6      	bls.n	8011dac <HAL_RCC_OscConfig+0xc0>
 8011dbe:	2003      	movs	r0, #3
 8011dc0:	e180      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 8011dc2:	4a77      	ldr	r2, [pc, #476]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011dc4:	6813      	ldr	r3, [r2, #0]
 8011dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011dca:	6013      	str	r3, [r2, #0]
 8011dcc:	e7b5      	b.n	8011d3a <HAL_RCC_OscConfig+0x4e>
 8011dce:	4b74      	ldr	r3, [pc, #464]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011dd0:	681a      	ldr	r2, [r3, #0]
 8011dd2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011dd6:	601a      	str	r2, [r3, #0]
 8011dd8:	681a      	ldr	r2, [r3, #0]
 8011dda:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8011dde:	601a      	str	r2, [r3, #0]
 8011de0:	e7ab      	b.n	8011d3a <HAL_RCC_OscConfig+0x4e>
 8011de2:	f7fe faff 	bl	80103e4 <HAL_GetTick>
 8011de6:	4605      	mov	r5, r0
 8011de8:	4e6d      	ldr	r6, [pc, #436]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011dea:	6833      	ldr	r3, [r6, #0]
 8011dec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8011df0:	d0c3      	beq.n	8011d7a <HAL_RCC_OscConfig+0x8e>
 8011df2:	f7fe faf7 	bl	80103e4 <HAL_GetTick>
 8011df6:	1b40      	subs	r0, r0, r5
 8011df8:	2864      	cmp	r0, #100	; 0x64
 8011dfa:	d9f6      	bls.n	8011dea <HAL_RCC_OscConfig+0xfe>
 8011dfc:	2003      	movs	r0, #3
 8011dfe:	e161      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 8011e00:	4b67      	ldr	r3, [pc, #412]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011e02:	685b      	ldr	r3, [r3, #4]
 8011e04:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8011e08:	d1c6      	bne.n	8011d98 <HAL_RCC_OscConfig+0xac>
 8011e0a:	4b65      	ldr	r3, [pc, #404]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	f013 0f02 	tst.w	r3, #2
 8011e12:	d003      	beq.n	8011e1c <HAL_RCC_OscConfig+0x130>
 8011e14:	68e3      	ldr	r3, [r4, #12]
 8011e16:	2b01      	cmp	r3, #1
 8011e18:	f040 8151 	bne.w	80120be <HAL_RCC_OscConfig+0x3d2>
 8011e1c:	4a60      	ldr	r2, [pc, #384]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011e1e:	6813      	ldr	r3, [r2, #0]
 8011e20:	6921      	ldr	r1, [r4, #16]
 8011e22:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011e26:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8011e2a:	6013      	str	r3, [r2, #0]
 8011e2c:	6823      	ldr	r3, [r4, #0]
 8011e2e:	f013 0f08 	tst.w	r3, #8
 8011e32:	d040      	beq.n	8011eb6 <HAL_RCC_OscConfig+0x1ca>
 8011e34:	6963      	ldr	r3, [r4, #20]
 8011e36:	b363      	cbz	r3, 8011e92 <HAL_RCC_OscConfig+0x1a6>
 8011e38:	4b5b      	ldr	r3, [pc, #364]	; (8011fa8 <HAL_RCC_OscConfig+0x2bc>)
 8011e3a:	2201      	movs	r2, #1
 8011e3c:	601a      	str	r2, [r3, #0]
 8011e3e:	f7fe fad1 	bl	80103e4 <HAL_GetTick>
 8011e42:	4605      	mov	r5, r0
 8011e44:	4e56      	ldr	r6, [pc, #344]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011e46:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8011e48:	f013 0f02 	tst.w	r3, #2
 8011e4c:	d133      	bne.n	8011eb6 <HAL_RCC_OscConfig+0x1ca>
 8011e4e:	f7fe fac9 	bl	80103e4 <HAL_GetTick>
 8011e52:	1b40      	subs	r0, r0, r5
 8011e54:	2802      	cmp	r0, #2
 8011e56:	d9f6      	bls.n	8011e46 <HAL_RCC_OscConfig+0x15a>
 8011e58:	2003      	movs	r0, #3
 8011e5a:	e133      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 8011e5c:	4a50      	ldr	r2, [pc, #320]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011e5e:	6813      	ldr	r3, [r2, #0]
 8011e60:	6921      	ldr	r1, [r4, #16]
 8011e62:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011e66:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8011e6a:	6013      	str	r3, [r2, #0]
 8011e6c:	e7de      	b.n	8011e2c <HAL_RCC_OscConfig+0x140>
 8011e6e:	4b4d      	ldr	r3, [pc, #308]	; (8011fa4 <HAL_RCC_OscConfig+0x2b8>)
 8011e70:	2200      	movs	r2, #0
 8011e72:	601a      	str	r2, [r3, #0]
 8011e74:	f7fe fab6 	bl	80103e4 <HAL_GetTick>
 8011e78:	4605      	mov	r5, r0
 8011e7a:	4e49      	ldr	r6, [pc, #292]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011e7c:	6833      	ldr	r3, [r6, #0]
 8011e7e:	f013 0f02 	tst.w	r3, #2
 8011e82:	d0d3      	beq.n	8011e2c <HAL_RCC_OscConfig+0x140>
 8011e84:	f7fe faae 	bl	80103e4 <HAL_GetTick>
 8011e88:	1b40      	subs	r0, r0, r5
 8011e8a:	2802      	cmp	r0, #2
 8011e8c:	d9f6      	bls.n	8011e7c <HAL_RCC_OscConfig+0x190>
 8011e8e:	2003      	movs	r0, #3
 8011e90:	e118      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 8011e92:	4b45      	ldr	r3, [pc, #276]	; (8011fa8 <HAL_RCC_OscConfig+0x2bc>)
 8011e94:	2200      	movs	r2, #0
 8011e96:	601a      	str	r2, [r3, #0]
 8011e98:	f7fe faa4 	bl	80103e4 <HAL_GetTick>
 8011e9c:	4605      	mov	r5, r0
 8011e9e:	4e40      	ldr	r6, [pc, #256]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011ea0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8011ea2:	f013 0f02 	tst.w	r3, #2
 8011ea6:	d006      	beq.n	8011eb6 <HAL_RCC_OscConfig+0x1ca>
 8011ea8:	f7fe fa9c 	bl	80103e4 <HAL_GetTick>
 8011eac:	1b40      	subs	r0, r0, r5
 8011eae:	2802      	cmp	r0, #2
 8011eb0:	d9f6      	bls.n	8011ea0 <HAL_RCC_OscConfig+0x1b4>
 8011eb2:	2003      	movs	r0, #3
 8011eb4:	e106      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 8011eb6:	6823      	ldr	r3, [r4, #0]
 8011eb8:	f013 0f04 	tst.w	r3, #4
 8011ebc:	d079      	beq.n	8011fb2 <HAL_RCC_OscConfig+0x2c6>
 8011ebe:	4b38      	ldr	r3, [pc, #224]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ec2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8011ec6:	d10d      	bne.n	8011ee4 <HAL_RCC_OscConfig+0x1f8>
 8011ec8:	2300      	movs	r3, #0
 8011eca:	9301      	str	r3, [sp, #4]
 8011ecc:	4b34      	ldr	r3, [pc, #208]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011ed0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011ed4:	641a      	str	r2, [r3, #64]	; 0x40
 8011ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011edc:	9301      	str	r3, [sp, #4]
 8011ede:	9b01      	ldr	r3, [sp, #4]
 8011ee0:	2501      	movs	r5, #1
 8011ee2:	e000      	b.n	8011ee6 <HAL_RCC_OscConfig+0x1fa>
 8011ee4:	2500      	movs	r5, #0
 8011ee6:	4b31      	ldr	r3, [pc, #196]	; (8011fac <HAL_RCC_OscConfig+0x2c0>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	f413 7f80 	tst.w	r3, #256	; 0x100
 8011eee:	d021      	beq.n	8011f34 <HAL_RCC_OscConfig+0x248>
 8011ef0:	68a3      	ldr	r3, [r4, #8]
 8011ef2:	2b01      	cmp	r3, #1
 8011ef4:	d032      	beq.n	8011f5c <HAL_RCC_OscConfig+0x270>
 8011ef6:	2b05      	cmp	r3, #5
 8011ef8:	d036      	beq.n	8011f68 <HAL_RCC_OscConfig+0x27c>
 8011efa:	4b29      	ldr	r3, [pc, #164]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011efc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011efe:	f022 0201 	bic.w	r2, r2, #1
 8011f02:	671a      	str	r2, [r3, #112]	; 0x70
 8011f04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011f06:	f022 0204 	bic.w	r2, r2, #4
 8011f0a:	671a      	str	r2, [r3, #112]	; 0x70
 8011f0c:	68a3      	ldr	r3, [r4, #8]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d034      	beq.n	8011f7c <HAL_RCC_OscConfig+0x290>
 8011f12:	f7fe fa67 	bl	80103e4 <HAL_GetTick>
 8011f16:	4606      	mov	r6, r0
 8011f18:	4f21      	ldr	r7, [pc, #132]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011f1a:	f241 3888 	movw	r8, #5000	; 0x1388
 8011f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f20:	f013 0f02 	tst.w	r3, #2
 8011f24:	d144      	bne.n	8011fb0 <HAL_RCC_OscConfig+0x2c4>
 8011f26:	f7fe fa5d 	bl	80103e4 <HAL_GetTick>
 8011f2a:	1b80      	subs	r0, r0, r6
 8011f2c:	4540      	cmp	r0, r8
 8011f2e:	d9f6      	bls.n	8011f1e <HAL_RCC_OscConfig+0x232>
 8011f30:	2003      	movs	r0, #3
 8011f32:	e0c7      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 8011f34:	4a1d      	ldr	r2, [pc, #116]	; (8011fac <HAL_RCC_OscConfig+0x2c0>)
 8011f36:	6813      	ldr	r3, [r2, #0]
 8011f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011f3c:	6013      	str	r3, [r2, #0]
 8011f3e:	f7fe fa51 	bl	80103e4 <HAL_GetTick>
 8011f42:	4606      	mov	r6, r0
 8011f44:	4f19      	ldr	r7, [pc, #100]	; (8011fac <HAL_RCC_OscConfig+0x2c0>)
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	f413 7f80 	tst.w	r3, #256	; 0x100
 8011f4c:	d1d0      	bne.n	8011ef0 <HAL_RCC_OscConfig+0x204>
 8011f4e:	f7fe fa49 	bl	80103e4 <HAL_GetTick>
 8011f52:	1b80      	subs	r0, r0, r6
 8011f54:	2802      	cmp	r0, #2
 8011f56:	d9f6      	bls.n	8011f46 <HAL_RCC_OscConfig+0x25a>
 8011f58:	2003      	movs	r0, #3
 8011f5a:	e0b3      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 8011f5c:	4a10      	ldr	r2, [pc, #64]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011f5e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8011f60:	f043 0301 	orr.w	r3, r3, #1
 8011f64:	6713      	str	r3, [r2, #112]	; 0x70
 8011f66:	e7d1      	b.n	8011f0c <HAL_RCC_OscConfig+0x220>
 8011f68:	4b0d      	ldr	r3, [pc, #52]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011f6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011f6c:	f042 0204 	orr.w	r2, r2, #4
 8011f70:	671a      	str	r2, [r3, #112]	; 0x70
 8011f72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011f74:	f042 0201 	orr.w	r2, r2, #1
 8011f78:	671a      	str	r2, [r3, #112]	; 0x70
 8011f7a:	e7c7      	b.n	8011f0c <HAL_RCC_OscConfig+0x220>
 8011f7c:	f7fe fa32 	bl	80103e4 <HAL_GetTick>
 8011f80:	4606      	mov	r6, r0
 8011f82:	4f07      	ldr	r7, [pc, #28]	; (8011fa0 <HAL_RCC_OscConfig+0x2b4>)
 8011f84:	f241 3888 	movw	r8, #5000	; 0x1388
 8011f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f8a:	f013 0f02 	tst.w	r3, #2
 8011f8e:	d00f      	beq.n	8011fb0 <HAL_RCC_OscConfig+0x2c4>
 8011f90:	f7fe fa28 	bl	80103e4 <HAL_GetTick>
 8011f94:	1b80      	subs	r0, r0, r6
 8011f96:	4540      	cmp	r0, r8
 8011f98:	d9f6      	bls.n	8011f88 <HAL_RCC_OscConfig+0x29c>
 8011f9a:	2003      	movs	r0, #3
 8011f9c:	e092      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 8011f9e:	bf00      	nop
 8011fa0:	40023800 	.word	0x40023800
 8011fa4:	42470000 	.word	0x42470000
 8011fa8:	42470e80 	.word	0x42470e80
 8011fac:	40007000 	.word	0x40007000
 8011fb0:	b9ed      	cbnz	r5, 8011fee <HAL_RCC_OscConfig+0x302>
 8011fb2:	69a3      	ldr	r3, [r4, #24]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	f000 8084 	beq.w	80120c2 <HAL_RCC_OscConfig+0x3d6>
 8011fba:	4a49      	ldr	r2, [pc, #292]	; (80120e0 <HAL_RCC_OscConfig+0x3f4>)
 8011fbc:	6892      	ldr	r2, [r2, #8]
 8011fbe:	f002 020c 	and.w	r2, r2, #12
 8011fc2:	2a08      	cmp	r2, #8
 8011fc4:	d051      	beq.n	801206a <HAL_RCC_OscConfig+0x37e>
 8011fc6:	2b02      	cmp	r3, #2
 8011fc8:	d017      	beq.n	8011ffa <HAL_RCC_OscConfig+0x30e>
 8011fca:	4b46      	ldr	r3, [pc, #280]	; (80120e4 <HAL_RCC_OscConfig+0x3f8>)
 8011fcc:	2200      	movs	r2, #0
 8011fce:	601a      	str	r2, [r3, #0]
 8011fd0:	f7fe fa08 	bl	80103e4 <HAL_GetTick>
 8011fd4:	4604      	mov	r4, r0
 8011fd6:	4d42      	ldr	r5, [pc, #264]	; (80120e0 <HAL_RCC_OscConfig+0x3f4>)
 8011fd8:	682b      	ldr	r3, [r5, #0]
 8011fda:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8011fde:	d042      	beq.n	8012066 <HAL_RCC_OscConfig+0x37a>
 8011fe0:	f7fe fa00 	bl	80103e4 <HAL_GetTick>
 8011fe4:	1b00      	subs	r0, r0, r4
 8011fe6:	2802      	cmp	r0, #2
 8011fe8:	d9f6      	bls.n	8011fd8 <HAL_RCC_OscConfig+0x2ec>
 8011fea:	2003      	movs	r0, #3
 8011fec:	e06a      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 8011fee:	4a3c      	ldr	r2, [pc, #240]	; (80120e0 <HAL_RCC_OscConfig+0x3f4>)
 8011ff0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8011ff8:	e7db      	b.n	8011fb2 <HAL_RCC_OscConfig+0x2c6>
 8011ffa:	4b3a      	ldr	r3, [pc, #232]	; (80120e4 <HAL_RCC_OscConfig+0x3f8>)
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	601a      	str	r2, [r3, #0]
 8012000:	f7fe f9f0 	bl	80103e4 <HAL_GetTick>
 8012004:	4605      	mov	r5, r0
 8012006:	4e36      	ldr	r6, [pc, #216]	; (80120e0 <HAL_RCC_OscConfig+0x3f4>)
 8012008:	6833      	ldr	r3, [r6, #0]
 801200a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 801200e:	d006      	beq.n	801201e <HAL_RCC_OscConfig+0x332>
 8012010:	f7fe f9e8 	bl	80103e4 <HAL_GetTick>
 8012014:	1b40      	subs	r0, r0, r5
 8012016:	2802      	cmp	r0, #2
 8012018:	d9f6      	bls.n	8012008 <HAL_RCC_OscConfig+0x31c>
 801201a:	2003      	movs	r0, #3
 801201c:	e052      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 801201e:	69e3      	ldr	r3, [r4, #28]
 8012020:	6a22      	ldr	r2, [r4, #32]
 8012022:	4313      	orrs	r3, r2
 8012024:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8012026:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801202a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801202c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8012030:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8012032:	0852      	lsrs	r2, r2, #1
 8012034:	3a01      	subs	r2, #1
 8012036:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801203a:	4a29      	ldr	r2, [pc, #164]	; (80120e0 <HAL_RCC_OscConfig+0x3f4>)
 801203c:	6053      	str	r3, [r2, #4]
 801203e:	4b29      	ldr	r3, [pc, #164]	; (80120e4 <HAL_RCC_OscConfig+0x3f8>)
 8012040:	2201      	movs	r2, #1
 8012042:	601a      	str	r2, [r3, #0]
 8012044:	f7fe f9ce 	bl	80103e4 <HAL_GetTick>
 8012048:	4604      	mov	r4, r0
 801204a:	4d25      	ldr	r5, [pc, #148]	; (80120e0 <HAL_RCC_OscConfig+0x3f4>)
 801204c:	682b      	ldr	r3, [r5, #0]
 801204e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8012052:	d106      	bne.n	8012062 <HAL_RCC_OscConfig+0x376>
 8012054:	f7fe f9c6 	bl	80103e4 <HAL_GetTick>
 8012058:	1b00      	subs	r0, r0, r4
 801205a:	2802      	cmp	r0, #2
 801205c:	d9f6      	bls.n	801204c <HAL_RCC_OscConfig+0x360>
 801205e:	2003      	movs	r0, #3
 8012060:	e030      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 8012062:	2000      	movs	r0, #0
 8012064:	e02e      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 8012066:	2000      	movs	r0, #0
 8012068:	e02c      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 801206a:	2b01      	cmp	r3, #1
 801206c:	d02d      	beq.n	80120ca <HAL_RCC_OscConfig+0x3de>
 801206e:	4b1c      	ldr	r3, [pc, #112]	; (80120e0 <HAL_RCC_OscConfig+0x3f4>)
 8012070:	685b      	ldr	r3, [r3, #4]
 8012072:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8012076:	69e2      	ldr	r2, [r4, #28]
 8012078:	4291      	cmp	r1, r2
 801207a:	d128      	bne.n	80120ce <HAL_RCC_OscConfig+0x3e2>
 801207c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012080:	6a21      	ldr	r1, [r4, #32]
 8012082:	428a      	cmp	r2, r1
 8012084:	d125      	bne.n	80120d2 <HAL_RCC_OscConfig+0x3e6>
 8012086:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012088:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 801208c:	401a      	ands	r2, r3
 801208e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8012092:	d120      	bne.n	80120d6 <HAL_RCC_OscConfig+0x3ea>
 8012094:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8012098:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801209a:	0852      	lsrs	r2, r2, #1
 801209c:	3a01      	subs	r2, #1
 801209e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80120a2:	d11a      	bne.n	80120da <HAL_RCC_OscConfig+0x3ee>
 80120a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80120a6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80120aa:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80120ae:	bf14      	ite	ne
 80120b0:	2001      	movne	r0, #1
 80120b2:	2000      	moveq	r0, #0
 80120b4:	e006      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 80120b6:	2001      	movs	r0, #1
 80120b8:	4770      	bx	lr
 80120ba:	2001      	movs	r0, #1
 80120bc:	e002      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 80120be:	2001      	movs	r0, #1
 80120c0:	e000      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 80120c2:	2000      	movs	r0, #0
 80120c4:	b002      	add	sp, #8
 80120c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120ca:	2001      	movs	r0, #1
 80120cc:	e7fa      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 80120ce:	2001      	movs	r0, #1
 80120d0:	e7f8      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 80120d2:	2001      	movs	r0, #1
 80120d4:	e7f6      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 80120d6:	2001      	movs	r0, #1
 80120d8:	e7f4      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 80120da:	2001      	movs	r0, #1
 80120dc:	e7f2      	b.n	80120c4 <HAL_RCC_OscConfig+0x3d8>
 80120de:	bf00      	nop
 80120e0:	40023800 	.word	0x40023800
 80120e4:	42470060 	.word	0x42470060

080120e8 <HAL_RCC_GetSysClockFreq>:
 80120e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ea:	4b2f      	ldr	r3, [pc, #188]	; (80121a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80120ec:	689b      	ldr	r3, [r3, #8]
 80120ee:	f003 030c 	and.w	r3, r3, #12
 80120f2:	2b04      	cmp	r3, #4
 80120f4:	d053      	beq.n	801219e <HAL_RCC_GetSysClockFreq+0xb6>
 80120f6:	2b08      	cmp	r3, #8
 80120f8:	d153      	bne.n	80121a2 <HAL_RCC_GetSysClockFreq+0xba>
 80120fa:	4b2b      	ldr	r3, [pc, #172]	; (80121a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80120fc:	685a      	ldr	r2, [r3, #4]
 80120fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012102:	685b      	ldr	r3, [r3, #4]
 8012104:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8012108:	d028      	beq.n	801215c <HAL_RCC_GetSysClockFreq+0x74>
 801210a:	4b27      	ldr	r3, [pc, #156]	; (80121a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 801210c:	685b      	ldr	r3, [r3, #4]
 801210e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8012112:	0158      	lsls	r0, r3, #5
 8012114:	2100      	movs	r1, #0
 8012116:	1ac0      	subs	r0, r0, r3
 8012118:	f161 0100 	sbc.w	r1, r1, #0
 801211c:	018e      	lsls	r6, r1, #6
 801211e:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8012122:	0187      	lsls	r7, r0, #6
 8012124:	1a3c      	subs	r4, r7, r0
 8012126:	eb66 0501 	sbc.w	r5, r6, r1
 801212a:	00e9      	lsls	r1, r5, #3
 801212c:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8012130:	00e0      	lsls	r0, r4, #3
 8012132:	18c0      	adds	r0, r0, r3
 8012134:	f141 0100 	adc.w	r1, r1, #0
 8012138:	024b      	lsls	r3, r1, #9
 801213a:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 801213e:	0244      	lsls	r4, r0, #9
 8012140:	4620      	mov	r0, r4
 8012142:	4619      	mov	r1, r3
 8012144:	2300      	movs	r3, #0
 8012146:	f7f9 ffd3 	bl	800c0f0 <__aeabi_uldivmod>
 801214a:	4b17      	ldr	r3, [pc, #92]	; (80121a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 801214c:	685b      	ldr	r3, [r3, #4]
 801214e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8012152:	3301      	adds	r3, #1
 8012154:	005b      	lsls	r3, r3, #1
 8012156:	fbb0 f0f3 	udiv	r0, r0, r3
 801215a:	e023      	b.n	80121a4 <HAL_RCC_GetSysClockFreq+0xbc>
 801215c:	4b12      	ldr	r3, [pc, #72]	; (80121a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 801215e:	685b      	ldr	r3, [r3, #4]
 8012160:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8012164:	015c      	lsls	r4, r3, #5
 8012166:	2500      	movs	r5, #0
 8012168:	1ae4      	subs	r4, r4, r3
 801216a:	f165 0500 	sbc.w	r5, r5, #0
 801216e:	01ae      	lsls	r6, r5, #6
 8012170:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8012174:	01a7      	lsls	r7, r4, #6
 8012176:	1b38      	subs	r0, r7, r4
 8012178:	eb66 0105 	sbc.w	r1, r6, r5
 801217c:	00cc      	lsls	r4, r1, #3
 801217e:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8012182:	00c5      	lsls	r5, r0, #3
 8012184:	18e8      	adds	r0, r5, r3
 8012186:	f144 0100 	adc.w	r1, r4, #0
 801218a:	028b      	lsls	r3, r1, #10
 801218c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8012190:	0284      	lsls	r4, r0, #10
 8012192:	4620      	mov	r0, r4
 8012194:	4619      	mov	r1, r3
 8012196:	2300      	movs	r3, #0
 8012198:	f7f9 ffaa 	bl	800c0f0 <__aeabi_uldivmod>
 801219c:	e7d5      	b.n	801214a <HAL_RCC_GetSysClockFreq+0x62>
 801219e:	4803      	ldr	r0, [pc, #12]	; (80121ac <HAL_RCC_GetSysClockFreq+0xc4>)
 80121a0:	e000      	b.n	80121a4 <HAL_RCC_GetSysClockFreq+0xbc>
 80121a2:	4803      	ldr	r0, [pc, #12]	; (80121b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80121a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121a6:	bf00      	nop
 80121a8:	40023800 	.word	0x40023800
 80121ac:	007a1200 	.word	0x007a1200
 80121b0:	00f42400 	.word	0x00f42400

080121b4 <HAL_RCC_ClockConfig>:
 80121b4:	2800      	cmp	r0, #0
 80121b6:	f000 809d 	beq.w	80122f4 <HAL_RCC_ClockConfig+0x140>
 80121ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121be:	460d      	mov	r5, r1
 80121c0:	4604      	mov	r4, r0
 80121c2:	4b50      	ldr	r3, [pc, #320]	; (8012304 <HAL_RCC_ClockConfig+0x150>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	f003 0307 	and.w	r3, r3, #7
 80121ca:	428b      	cmp	r3, r1
 80121cc:	d208      	bcs.n	80121e0 <HAL_RCC_ClockConfig+0x2c>
 80121ce:	b2cb      	uxtb	r3, r1
 80121d0:	4a4c      	ldr	r2, [pc, #304]	; (8012304 <HAL_RCC_ClockConfig+0x150>)
 80121d2:	7013      	strb	r3, [r2, #0]
 80121d4:	6813      	ldr	r3, [r2, #0]
 80121d6:	f003 0307 	and.w	r3, r3, #7
 80121da:	428b      	cmp	r3, r1
 80121dc:	f040 808c 	bne.w	80122f8 <HAL_RCC_ClockConfig+0x144>
 80121e0:	6823      	ldr	r3, [r4, #0]
 80121e2:	f013 0f02 	tst.w	r3, #2
 80121e6:	d017      	beq.n	8012218 <HAL_RCC_ClockConfig+0x64>
 80121e8:	f013 0f04 	tst.w	r3, #4
 80121ec:	d004      	beq.n	80121f8 <HAL_RCC_ClockConfig+0x44>
 80121ee:	4a46      	ldr	r2, [pc, #280]	; (8012308 <HAL_RCC_ClockConfig+0x154>)
 80121f0:	6893      	ldr	r3, [r2, #8]
 80121f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80121f6:	6093      	str	r3, [r2, #8]
 80121f8:	6823      	ldr	r3, [r4, #0]
 80121fa:	f013 0f08 	tst.w	r3, #8
 80121fe:	d004      	beq.n	801220a <HAL_RCC_ClockConfig+0x56>
 8012200:	4a41      	ldr	r2, [pc, #260]	; (8012308 <HAL_RCC_ClockConfig+0x154>)
 8012202:	6893      	ldr	r3, [r2, #8]
 8012204:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012208:	6093      	str	r3, [r2, #8]
 801220a:	4a3f      	ldr	r2, [pc, #252]	; (8012308 <HAL_RCC_ClockConfig+0x154>)
 801220c:	6893      	ldr	r3, [r2, #8]
 801220e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012212:	68a1      	ldr	r1, [r4, #8]
 8012214:	430b      	orrs	r3, r1
 8012216:	6093      	str	r3, [r2, #8]
 8012218:	6823      	ldr	r3, [r4, #0]
 801221a:	f013 0f01 	tst.w	r3, #1
 801221e:	d032      	beq.n	8012286 <HAL_RCC_ClockConfig+0xd2>
 8012220:	6862      	ldr	r2, [r4, #4]
 8012222:	2a01      	cmp	r2, #1
 8012224:	d021      	beq.n	801226a <HAL_RCC_ClockConfig+0xb6>
 8012226:	1e93      	subs	r3, r2, #2
 8012228:	2b01      	cmp	r3, #1
 801222a:	d925      	bls.n	8012278 <HAL_RCC_ClockConfig+0xc4>
 801222c:	4b36      	ldr	r3, [pc, #216]	; (8012308 <HAL_RCC_ClockConfig+0x154>)
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	f013 0f02 	tst.w	r3, #2
 8012234:	d062      	beq.n	80122fc <HAL_RCC_ClockConfig+0x148>
 8012236:	4934      	ldr	r1, [pc, #208]	; (8012308 <HAL_RCC_ClockConfig+0x154>)
 8012238:	688b      	ldr	r3, [r1, #8]
 801223a:	f023 0303 	bic.w	r3, r3, #3
 801223e:	4313      	orrs	r3, r2
 8012240:	608b      	str	r3, [r1, #8]
 8012242:	f7fe f8cf 	bl	80103e4 <HAL_GetTick>
 8012246:	4606      	mov	r6, r0
 8012248:	4f2f      	ldr	r7, [pc, #188]	; (8012308 <HAL_RCC_ClockConfig+0x154>)
 801224a:	f241 3888 	movw	r8, #5000	; 0x1388
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	f003 030c 	and.w	r3, r3, #12
 8012254:	6862      	ldr	r2, [r4, #4]
 8012256:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 801225a:	d014      	beq.n	8012286 <HAL_RCC_ClockConfig+0xd2>
 801225c:	f7fe f8c2 	bl	80103e4 <HAL_GetTick>
 8012260:	1b80      	subs	r0, r0, r6
 8012262:	4540      	cmp	r0, r8
 8012264:	d9f3      	bls.n	801224e <HAL_RCC_ClockConfig+0x9a>
 8012266:	2003      	movs	r0, #3
 8012268:	e042      	b.n	80122f0 <HAL_RCC_ClockConfig+0x13c>
 801226a:	4b27      	ldr	r3, [pc, #156]	; (8012308 <HAL_RCC_ClockConfig+0x154>)
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8012272:	d1e0      	bne.n	8012236 <HAL_RCC_ClockConfig+0x82>
 8012274:	2001      	movs	r0, #1
 8012276:	e03b      	b.n	80122f0 <HAL_RCC_ClockConfig+0x13c>
 8012278:	4b23      	ldr	r3, [pc, #140]	; (8012308 <HAL_RCC_ClockConfig+0x154>)
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8012280:	d1d9      	bne.n	8012236 <HAL_RCC_ClockConfig+0x82>
 8012282:	2001      	movs	r0, #1
 8012284:	e034      	b.n	80122f0 <HAL_RCC_ClockConfig+0x13c>
 8012286:	4b1f      	ldr	r3, [pc, #124]	; (8012304 <HAL_RCC_ClockConfig+0x150>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	f003 0307 	and.w	r3, r3, #7
 801228e:	42ab      	cmp	r3, r5
 8012290:	d907      	bls.n	80122a2 <HAL_RCC_ClockConfig+0xee>
 8012292:	b2ea      	uxtb	r2, r5
 8012294:	4b1b      	ldr	r3, [pc, #108]	; (8012304 <HAL_RCC_ClockConfig+0x150>)
 8012296:	701a      	strb	r2, [r3, #0]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	f003 0307 	and.w	r3, r3, #7
 801229e:	42ab      	cmp	r3, r5
 80122a0:	d12e      	bne.n	8012300 <HAL_RCC_ClockConfig+0x14c>
 80122a2:	6823      	ldr	r3, [r4, #0]
 80122a4:	f013 0f04 	tst.w	r3, #4
 80122a8:	d006      	beq.n	80122b8 <HAL_RCC_ClockConfig+0x104>
 80122aa:	4a17      	ldr	r2, [pc, #92]	; (8012308 <HAL_RCC_ClockConfig+0x154>)
 80122ac:	6893      	ldr	r3, [r2, #8]
 80122ae:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80122b2:	68e1      	ldr	r1, [r4, #12]
 80122b4:	430b      	orrs	r3, r1
 80122b6:	6093      	str	r3, [r2, #8]
 80122b8:	6823      	ldr	r3, [r4, #0]
 80122ba:	f013 0f08 	tst.w	r3, #8
 80122be:	d007      	beq.n	80122d0 <HAL_RCC_ClockConfig+0x11c>
 80122c0:	4a11      	ldr	r2, [pc, #68]	; (8012308 <HAL_RCC_ClockConfig+0x154>)
 80122c2:	6893      	ldr	r3, [r2, #8]
 80122c4:	6921      	ldr	r1, [r4, #16]
 80122c6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80122ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80122ce:	6093      	str	r3, [r2, #8]
 80122d0:	f7ff ff0a 	bl	80120e8 <HAL_RCC_GetSysClockFreq>
 80122d4:	4b0c      	ldr	r3, [pc, #48]	; (8012308 <HAL_RCC_ClockConfig+0x154>)
 80122d6:	689b      	ldr	r3, [r3, #8]
 80122d8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80122dc:	4a0b      	ldr	r2, [pc, #44]	; (801230c <HAL_RCC_ClockConfig+0x158>)
 80122de:	5cd3      	ldrb	r3, [r2, r3]
 80122e0:	40d8      	lsrs	r0, r3
 80122e2:	4b0b      	ldr	r3, [pc, #44]	; (8012310 <HAL_RCC_ClockConfig+0x15c>)
 80122e4:	6018      	str	r0, [r3, #0]
 80122e6:	4b0b      	ldr	r3, [pc, #44]	; (8012314 <HAL_RCC_ClockConfig+0x160>)
 80122e8:	6818      	ldr	r0, [r3, #0]
 80122ea:	f7fb ffbd 	bl	800e268 <HAL_InitTick>
 80122ee:	2000      	movs	r0, #0
 80122f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122f4:	2001      	movs	r0, #1
 80122f6:	4770      	bx	lr
 80122f8:	2001      	movs	r0, #1
 80122fa:	e7f9      	b.n	80122f0 <HAL_RCC_ClockConfig+0x13c>
 80122fc:	2001      	movs	r0, #1
 80122fe:	e7f7      	b.n	80122f0 <HAL_RCC_ClockConfig+0x13c>
 8012300:	2001      	movs	r0, #1
 8012302:	e7f5      	b.n	80122f0 <HAL_RCC_ClockConfig+0x13c>
 8012304:	40023c00 	.word	0x40023c00
 8012308:	40023800 	.word	0x40023800
 801230c:	08019b24 	.word	0x08019b24
 8012310:	20000004 	.word	0x20000004
 8012314:	20000064 	.word	0x20000064

08012318 <HAL_RCC_GetHCLKFreq>:
 8012318:	4b01      	ldr	r3, [pc, #4]	; (8012320 <HAL_RCC_GetHCLKFreq+0x8>)
 801231a:	6818      	ldr	r0, [r3, #0]
 801231c:	4770      	bx	lr
 801231e:	bf00      	nop
 8012320:	20000004 	.word	0x20000004

08012324 <HAL_RCC_GetPCLK1Freq>:
 8012324:	4b04      	ldr	r3, [pc, #16]	; (8012338 <HAL_RCC_GetPCLK1Freq+0x14>)
 8012326:	689b      	ldr	r3, [r3, #8]
 8012328:	f3c3 2382 	ubfx	r3, r3, #10, #3
 801232c:	4a03      	ldr	r2, [pc, #12]	; (801233c <HAL_RCC_GetPCLK1Freq+0x18>)
 801232e:	5cd3      	ldrb	r3, [r2, r3]
 8012330:	4a03      	ldr	r2, [pc, #12]	; (8012340 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8012332:	6810      	ldr	r0, [r2, #0]
 8012334:	40d8      	lsrs	r0, r3
 8012336:	4770      	bx	lr
 8012338:	40023800 	.word	0x40023800
 801233c:	08019b34 	.word	0x08019b34
 8012340:	20000004 	.word	0x20000004

08012344 <HAL_RCC_GetPCLK2Freq>:
 8012344:	4b04      	ldr	r3, [pc, #16]	; (8012358 <HAL_RCC_GetPCLK2Freq+0x14>)
 8012346:	689b      	ldr	r3, [r3, #8]
 8012348:	f3c3 3342 	ubfx	r3, r3, #13, #3
 801234c:	4a03      	ldr	r2, [pc, #12]	; (801235c <HAL_RCC_GetPCLK2Freq+0x18>)
 801234e:	5cd3      	ldrb	r3, [r2, r3]
 8012350:	4a03      	ldr	r2, [pc, #12]	; (8012360 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8012352:	6810      	ldr	r0, [r2, #0]
 8012354:	40d8      	lsrs	r0, r3
 8012356:	4770      	bx	lr
 8012358:	40023800 	.word	0x40023800
 801235c:	08019b34 	.word	0x08019b34
 8012360:	20000004 	.word	0x20000004

08012364 <HAL_RCC_GetClockConfig>:
 8012364:	230f      	movs	r3, #15
 8012366:	6003      	str	r3, [r0, #0]
 8012368:	4b0b      	ldr	r3, [pc, #44]	; (8012398 <HAL_RCC_GetClockConfig+0x34>)
 801236a:	689a      	ldr	r2, [r3, #8]
 801236c:	f002 0203 	and.w	r2, r2, #3
 8012370:	6042      	str	r2, [r0, #4]
 8012372:	689a      	ldr	r2, [r3, #8]
 8012374:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8012378:	6082      	str	r2, [r0, #8]
 801237a:	689a      	ldr	r2, [r3, #8]
 801237c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8012380:	60c2      	str	r2, [r0, #12]
 8012382:	689b      	ldr	r3, [r3, #8]
 8012384:	08db      	lsrs	r3, r3, #3
 8012386:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 801238a:	6103      	str	r3, [r0, #16]
 801238c:	4b03      	ldr	r3, [pc, #12]	; (801239c <HAL_RCC_GetClockConfig+0x38>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	f003 0307 	and.w	r3, r3, #7
 8012394:	600b      	str	r3, [r1, #0]
 8012396:	4770      	bx	lr
 8012398:	40023800 	.word	0x40023800
 801239c:	40023c00 	.word	0x40023c00

080123a0 <SPI_WaitFlagStateUntilTimeout>:
 80123a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123a4:	b082      	sub	sp, #8
 80123a6:	4681      	mov	r9, r0
 80123a8:	460f      	mov	r7, r1
 80123aa:	4616      	mov	r6, r2
 80123ac:	461d      	mov	r5, r3
 80123ae:	f7fe f819 	bl	80103e4 <HAL_GetTick>
 80123b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123b4:	442b      	add	r3, r5
 80123b6:	eba3 0800 	sub.w	r8, r3, r0
 80123ba:	f7fe f813 	bl	80103e4 <HAL_GetTick>
 80123be:	4682      	mov	sl, r0
 80123c0:	4b2c      	ldr	r3, [pc, #176]	; (8012474 <SPI_WaitFlagStateUntilTimeout+0xd4>)
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80123c8:	fb08 f303 	mul.w	r3, r8, r3
 80123cc:	9301      	str	r3, [sp, #4]
 80123ce:	f8d9 3000 	ldr.w	r3, [r9]
 80123d2:	689c      	ldr	r4, [r3, #8]
 80123d4:	ea37 0204 	bics.w	r2, r7, r4
 80123d8:	bf0c      	ite	eq
 80123da:	2401      	moveq	r4, #1
 80123dc:	2400      	movne	r4, #0
 80123de:	42b4      	cmp	r4, r6
 80123e0:	d044      	beq.n	801246c <SPI_WaitFlagStateUntilTimeout+0xcc>
 80123e2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80123e6:	d0f4      	beq.n	80123d2 <SPI_WaitFlagStateUntilTimeout+0x32>
 80123e8:	f7fd fffc 	bl	80103e4 <HAL_GetTick>
 80123ec:	eba0 000a 	sub.w	r0, r0, sl
 80123f0:	4540      	cmp	r0, r8
 80123f2:	d207      	bcs.n	8012404 <SPI_WaitFlagStateUntilTimeout+0x64>
 80123f4:	9b01      	ldr	r3, [sp, #4]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	bf08      	it	eq
 80123fa:	4698      	moveq	r8, r3
 80123fc:	9b01      	ldr	r3, [sp, #4]
 80123fe:	3b01      	subs	r3, #1
 8012400:	9301      	str	r3, [sp, #4]
 8012402:	e7e4      	b.n	80123ce <SPI_WaitFlagStateUntilTimeout+0x2e>
 8012404:	f8d9 2000 	ldr.w	r2, [r9]
 8012408:	6853      	ldr	r3, [r2, #4]
 801240a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 801240e:	6053      	str	r3, [r2, #4]
 8012410:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012414:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012418:	d00c      	beq.n	8012434 <SPI_WaitFlagStateUntilTimeout+0x94>
 801241a:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 801241e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012422:	d016      	beq.n	8012452 <SPI_WaitFlagStateUntilTimeout+0xb2>
 8012424:	2301      	movs	r3, #1
 8012426:	f889 3051 	strb.w	r3, [r9, #81]	; 0x51
 801242a:	2300      	movs	r3, #0
 801242c:	f889 3050 	strb.w	r3, [r9, #80]	; 0x50
 8012430:	2003      	movs	r0, #3
 8012432:	e01c      	b.n	801246e <SPI_WaitFlagStateUntilTimeout+0xce>
 8012434:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801243c:	d002      	beq.n	8012444 <SPI_WaitFlagStateUntilTimeout+0xa4>
 801243e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012442:	d1ea      	bne.n	801241a <SPI_WaitFlagStateUntilTimeout+0x7a>
 8012444:	f8d9 2000 	ldr.w	r2, [r9]
 8012448:	6813      	ldr	r3, [r2, #0]
 801244a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801244e:	6013      	str	r3, [r2, #0]
 8012450:	e7e3      	b.n	801241a <SPI_WaitFlagStateUntilTimeout+0x7a>
 8012452:	f8d9 2000 	ldr.w	r2, [r9]
 8012456:	6813      	ldr	r3, [r2, #0]
 8012458:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801245c:	6013      	str	r3, [r2, #0]
 801245e:	f8d9 2000 	ldr.w	r2, [r9]
 8012462:	6813      	ldr	r3, [r2, #0]
 8012464:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012468:	6013      	str	r3, [r2, #0]
 801246a:	e7db      	b.n	8012424 <SPI_WaitFlagStateUntilTimeout+0x84>
 801246c:	2000      	movs	r0, #0
 801246e:	b002      	add	sp, #8
 8012470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012474:	20000004 	.word	0x20000004

08012478 <SPI_EndRxTxTransaction>:
 8012478:	b530      	push	{r4, r5, lr}
 801247a:	b085      	sub	sp, #20
 801247c:	4604      	mov	r4, r0
 801247e:	4b16      	ldr	r3, [pc, #88]	; (80124d8 <SPI_EndRxTxTransaction+0x60>)
 8012480:	6818      	ldr	r0, [r3, #0]
 8012482:	4b16      	ldr	r3, [pc, #88]	; (80124dc <SPI_EndRxTxTransaction+0x64>)
 8012484:	fba3 3000 	umull	r3, r0, r3, r0
 8012488:	0d40      	lsrs	r0, r0, #21
 801248a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 801248e:	fb05 f000 	mul.w	r0, r5, r0
 8012492:	9003      	str	r0, [sp, #12]
 8012494:	6863      	ldr	r3, [r4, #4]
 8012496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801249a:	d00b      	beq.n	80124b4 <SPI_EndRxTxTransaction+0x3c>
 801249c:	9b03      	ldr	r3, [sp, #12]
 801249e:	b1bb      	cbz	r3, 80124d0 <SPI_EndRxTxTransaction+0x58>
 80124a0:	9b03      	ldr	r3, [sp, #12]
 80124a2:	3b01      	subs	r3, #1
 80124a4:	9303      	str	r3, [sp, #12]
 80124a6:	6823      	ldr	r3, [r4, #0]
 80124a8:	689b      	ldr	r3, [r3, #8]
 80124aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80124ae:	d1f5      	bne.n	801249c <SPI_EndRxTxTransaction+0x24>
 80124b0:	2000      	movs	r0, #0
 80124b2:	e00e      	b.n	80124d2 <SPI_EndRxTxTransaction+0x5a>
 80124b4:	9200      	str	r2, [sp, #0]
 80124b6:	460b      	mov	r3, r1
 80124b8:	2200      	movs	r2, #0
 80124ba:	2180      	movs	r1, #128	; 0x80
 80124bc:	4620      	mov	r0, r4
 80124be:	f7ff ff6f 	bl	80123a0 <SPI_WaitFlagStateUntilTimeout>
 80124c2:	b130      	cbz	r0, 80124d2 <SPI_EndRxTxTransaction+0x5a>
 80124c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80124c6:	f043 0320 	orr.w	r3, r3, #32
 80124ca:	6563      	str	r3, [r4, #84]	; 0x54
 80124cc:	2003      	movs	r0, #3
 80124ce:	e000      	b.n	80124d2 <SPI_EndRxTxTransaction+0x5a>
 80124d0:	2000      	movs	r0, #0
 80124d2:	b005      	add	sp, #20
 80124d4:	bd30      	pop	{r4, r5, pc}
 80124d6:	bf00      	nop
 80124d8:	20000004 	.word	0x20000004
 80124dc:	165e9f81 	.word	0x165e9f81

080124e0 <SPI_EndRxTransaction>:
 80124e0:	b510      	push	{r4, lr}
 80124e2:	b082      	sub	sp, #8
 80124e4:	4604      	mov	r4, r0
 80124e6:	460b      	mov	r3, r1
 80124e8:	6841      	ldr	r1, [r0, #4]
 80124ea:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80124ee:	d009      	beq.n	8012504 <SPI_EndRxTransaction+0x24>
 80124f0:	9200      	str	r2, [sp, #0]
 80124f2:	2200      	movs	r2, #0
 80124f4:	2101      	movs	r1, #1
 80124f6:	4620      	mov	r0, r4
 80124f8:	f7ff ff52 	bl	80123a0 <SPI_WaitFlagStateUntilTimeout>
 80124fc:	2800      	cmp	r0, #0
 80124fe:	d131      	bne.n	8012564 <SPI_EndRxTransaction+0x84>
 8012500:	b002      	add	sp, #8
 8012502:	bd10      	pop	{r4, pc}
 8012504:	6881      	ldr	r1, [r0, #8]
 8012506:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 801250a:	d002      	beq.n	8012512 <SPI_EndRxTransaction+0x32>
 801250c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012510:	d10c      	bne.n	801252c <SPI_EndRxTransaction+0x4c>
 8012512:	6820      	ldr	r0, [r4, #0]
 8012514:	6801      	ldr	r1, [r0, #0]
 8012516:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 801251a:	6001      	str	r1, [r0, #0]
 801251c:	6861      	ldr	r1, [r4, #4]
 801251e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8012522:	d1e5      	bne.n	80124f0 <SPI_EndRxTransaction+0x10>
 8012524:	68a1      	ldr	r1, [r4, #8]
 8012526:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801252a:	d00d      	beq.n	8012548 <SPI_EndRxTransaction+0x68>
 801252c:	9200      	str	r2, [sp, #0]
 801252e:	2200      	movs	r2, #0
 8012530:	2180      	movs	r1, #128	; 0x80
 8012532:	4620      	mov	r0, r4
 8012534:	f7ff ff34 	bl	80123a0 <SPI_WaitFlagStateUntilTimeout>
 8012538:	2800      	cmp	r0, #0
 801253a:	d0e1      	beq.n	8012500 <SPI_EndRxTransaction+0x20>
 801253c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801253e:	f043 0320 	orr.w	r3, r3, #32
 8012542:	6563      	str	r3, [r4, #84]	; 0x54
 8012544:	2003      	movs	r0, #3
 8012546:	e7db      	b.n	8012500 <SPI_EndRxTransaction+0x20>
 8012548:	9200      	str	r2, [sp, #0]
 801254a:	2200      	movs	r2, #0
 801254c:	2101      	movs	r1, #1
 801254e:	4620      	mov	r0, r4
 8012550:	f7ff ff26 	bl	80123a0 <SPI_WaitFlagStateUntilTimeout>
 8012554:	2800      	cmp	r0, #0
 8012556:	d0d3      	beq.n	8012500 <SPI_EndRxTransaction+0x20>
 8012558:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801255a:	f043 0320 	orr.w	r3, r3, #32
 801255e:	6563      	str	r3, [r4, #84]	; 0x54
 8012560:	2003      	movs	r0, #3
 8012562:	e7cd      	b.n	8012500 <SPI_EndRxTransaction+0x20>
 8012564:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012566:	f043 0320 	orr.w	r3, r3, #32
 801256a:	6563      	str	r3, [r4, #84]	; 0x54
 801256c:	2003      	movs	r0, #3
 801256e:	e7c7      	b.n	8012500 <SPI_EndRxTransaction+0x20>

08012570 <HAL_SPI_Init>:
 8012570:	2800      	cmp	r0, #0
 8012572:	d05a      	beq.n	801262a <HAL_SPI_Init+0xba>
 8012574:	b510      	push	{r4, lr}
 8012576:	4604      	mov	r4, r0
 8012578:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801257a:	b933      	cbnz	r3, 801258a <HAL_SPI_Init+0x1a>
 801257c:	6843      	ldr	r3, [r0, #4]
 801257e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012582:	d005      	beq.n	8012590 <HAL_SPI_Init+0x20>
 8012584:	2300      	movs	r3, #0
 8012586:	61c3      	str	r3, [r0, #28]
 8012588:	e002      	b.n	8012590 <HAL_SPI_Init+0x20>
 801258a:	2300      	movs	r3, #0
 801258c:	6103      	str	r3, [r0, #16]
 801258e:	6143      	str	r3, [r0, #20]
 8012590:	2300      	movs	r3, #0
 8012592:	62a3      	str	r3, [r4, #40]	; 0x28
 8012594:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8012598:	2b00      	cmp	r3, #0
 801259a:	d040      	beq.n	801261e <HAL_SPI_Init+0xae>
 801259c:	2302      	movs	r3, #2
 801259e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 80125a2:	6822      	ldr	r2, [r4, #0]
 80125a4:	6813      	ldr	r3, [r2, #0]
 80125a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80125aa:	6013      	str	r3, [r2, #0]
 80125ac:	6822      	ldr	r2, [r4, #0]
 80125ae:	6863      	ldr	r3, [r4, #4]
 80125b0:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80125b4:	68a1      	ldr	r1, [r4, #8]
 80125b6:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 80125ba:	430b      	orrs	r3, r1
 80125bc:	68e1      	ldr	r1, [r4, #12]
 80125be:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 80125c2:	430b      	orrs	r3, r1
 80125c4:	6921      	ldr	r1, [r4, #16]
 80125c6:	f001 0102 	and.w	r1, r1, #2
 80125ca:	430b      	orrs	r3, r1
 80125cc:	6961      	ldr	r1, [r4, #20]
 80125ce:	f001 0101 	and.w	r1, r1, #1
 80125d2:	430b      	orrs	r3, r1
 80125d4:	69a1      	ldr	r1, [r4, #24]
 80125d6:	f401 7100 	and.w	r1, r1, #512	; 0x200
 80125da:	430b      	orrs	r3, r1
 80125dc:	69e1      	ldr	r1, [r4, #28]
 80125de:	f001 0138 	and.w	r1, r1, #56	; 0x38
 80125e2:	430b      	orrs	r3, r1
 80125e4:	6a21      	ldr	r1, [r4, #32]
 80125e6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80125ea:	430b      	orrs	r3, r1
 80125ec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80125ee:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80125f2:	430b      	orrs	r3, r1
 80125f4:	6013      	str	r3, [r2, #0]
 80125f6:	6821      	ldr	r1, [r4, #0]
 80125f8:	8b63      	ldrh	r3, [r4, #26]
 80125fa:	f003 0304 	and.w	r3, r3, #4
 80125fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8012600:	f002 0210 	and.w	r2, r2, #16
 8012604:	4313      	orrs	r3, r2
 8012606:	604b      	str	r3, [r1, #4]
 8012608:	6822      	ldr	r2, [r4, #0]
 801260a:	69d3      	ldr	r3, [r2, #28]
 801260c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012610:	61d3      	str	r3, [r2, #28]
 8012612:	2000      	movs	r0, #0
 8012614:	6560      	str	r0, [r4, #84]	; 0x54
 8012616:	2301      	movs	r3, #1
 8012618:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801261c:	bd10      	pop	{r4, pc}
 801261e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8012622:	4620      	mov	r0, r4
 8012624:	f7fb fcea 	bl	800dffc <HAL_SPI_MspInit>
 8012628:	e7b8      	b.n	801259c <HAL_SPI_Init+0x2c>
 801262a:	2001      	movs	r0, #1
 801262c:	4770      	bx	lr

0801262e <HAL_SPI_DeInit>:
 801262e:	b190      	cbz	r0, 8012656 <HAL_SPI_DeInit+0x28>
 8012630:	b510      	push	{r4, lr}
 8012632:	4604      	mov	r4, r0
 8012634:	2302      	movs	r3, #2
 8012636:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 801263a:	6802      	ldr	r2, [r0, #0]
 801263c:	6813      	ldr	r3, [r2, #0]
 801263e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012642:	6013      	str	r3, [r2, #0]
 8012644:	f7fb fd40 	bl	800e0c8 <HAL_SPI_MspDeInit>
 8012648:	2000      	movs	r0, #0
 801264a:	6560      	str	r0, [r4, #84]	; 0x54
 801264c:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
 8012650:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
 8012654:	bd10      	pop	{r4, pc}
 8012656:	2001      	movs	r0, #1
 8012658:	4770      	bx	lr

0801265a <HAL_SPI_Transmit>:
 801265a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801265e:	b082      	sub	sp, #8
 8012660:	461d      	mov	r5, r3
 8012662:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8012666:	2b01      	cmp	r3, #1
 8012668:	f000 80c2 	beq.w	80127f0 <HAL_SPI_Transmit+0x196>
 801266c:	4604      	mov	r4, r0
 801266e:	4688      	mov	r8, r1
 8012670:	4617      	mov	r7, r2
 8012672:	2301      	movs	r3, #1
 8012674:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 8012678:	f7fd feb4 	bl	80103e4 <HAL_GetTick>
 801267c:	4606      	mov	r6, r0
 801267e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8012682:	b2c0      	uxtb	r0, r0
 8012684:	2801      	cmp	r0, #1
 8012686:	f040 80a5 	bne.w	80127d4 <HAL_SPI_Transmit+0x17a>
 801268a:	f1b8 0f00 	cmp.w	r8, #0
 801268e:	f000 80a2 	beq.w	80127d6 <HAL_SPI_Transmit+0x17c>
 8012692:	2f00      	cmp	r7, #0
 8012694:	f000 809f 	beq.w	80127d6 <HAL_SPI_Transmit+0x17c>
 8012698:	2303      	movs	r3, #3
 801269a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 801269e:	2300      	movs	r3, #0
 80126a0:	6563      	str	r3, [r4, #84]	; 0x54
 80126a2:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 80126a6:	86a7      	strh	r7, [r4, #52]	; 0x34
 80126a8:	86e7      	strh	r7, [r4, #54]	; 0x36
 80126aa:	63a3      	str	r3, [r4, #56]	; 0x38
 80126ac:	87a3      	strh	r3, [r4, #60]	; 0x3c
 80126ae:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80126b0:	6463      	str	r3, [r4, #68]	; 0x44
 80126b2:	6423      	str	r3, [r4, #64]	; 0x40
 80126b4:	68a3      	ldr	r3, [r4, #8]
 80126b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80126ba:	d035      	beq.n	8012728 <HAL_SPI_Transmit+0xce>
 80126bc:	6823      	ldr	r3, [r4, #0]
 80126be:	681a      	ldr	r2, [r3, #0]
 80126c0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80126c4:	d103      	bne.n	80126ce <HAL_SPI_Transmit+0x74>
 80126c6:	681a      	ldr	r2, [r3, #0]
 80126c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80126cc:	601a      	str	r2, [r3, #0]
 80126ce:	68e3      	ldr	r3, [r4, #12]
 80126d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80126d4:	d033      	beq.n	801273e <HAL_SPI_Transmit+0xe4>
 80126d6:	6863      	ldr	r3, [r4, #4]
 80126d8:	b10b      	cbz	r3, 80126de <HAL_SPI_Transmit+0x84>
 80126da:	2f01      	cmp	r7, #1
 80126dc:	d10a      	bne.n	80126f4 <HAL_SPI_Transmit+0x9a>
 80126de:	6823      	ldr	r3, [r4, #0]
 80126e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80126e2:	7812      	ldrb	r2, [r2, #0]
 80126e4:	731a      	strb	r2, [r3, #12]
 80126e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80126e8:	3301      	adds	r3, #1
 80126ea:	6323      	str	r3, [r4, #48]	; 0x30
 80126ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80126ee:	3b01      	subs	r3, #1
 80126f0:	b29b      	uxth	r3, r3
 80126f2:	86e3      	strh	r3, [r4, #54]	; 0x36
 80126f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80126f6:	b29b      	uxth	r3, r3
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d15b      	bne.n	80127b4 <HAL_SPI_Transmit+0x15a>
 80126fc:	4632      	mov	r2, r6
 80126fe:	4629      	mov	r1, r5
 8012700:	4620      	mov	r0, r4
 8012702:	f7ff feb9 	bl	8012478 <SPI_EndRxTxTransaction>
 8012706:	b108      	cbz	r0, 801270c <HAL_SPI_Transmit+0xb2>
 8012708:	2320      	movs	r3, #32
 801270a:	6563      	str	r3, [r4, #84]	; 0x54
 801270c:	68a3      	ldr	r3, [r4, #8]
 801270e:	b933      	cbnz	r3, 801271e <HAL_SPI_Transmit+0xc4>
 8012710:	9301      	str	r3, [sp, #4]
 8012712:	6823      	ldr	r3, [r4, #0]
 8012714:	68da      	ldr	r2, [r3, #12]
 8012716:	9201      	str	r2, [sp, #4]
 8012718:	689b      	ldr	r3, [r3, #8]
 801271a:	9301      	str	r3, [sp, #4]
 801271c:	9b01      	ldr	r3, [sp, #4]
 801271e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012720:	3800      	subs	r0, #0
 8012722:	bf18      	it	ne
 8012724:	2001      	movne	r0, #1
 8012726:	e056      	b.n	80127d6 <HAL_SPI_Transmit+0x17c>
 8012728:	6822      	ldr	r2, [r4, #0]
 801272a:	6813      	ldr	r3, [r2, #0]
 801272c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012730:	6013      	str	r3, [r2, #0]
 8012732:	6822      	ldr	r2, [r4, #0]
 8012734:	6813      	ldr	r3, [r2, #0]
 8012736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801273a:	6013      	str	r3, [r2, #0]
 801273c:	e7be      	b.n	80126bc <HAL_SPI_Transmit+0x62>
 801273e:	6863      	ldr	r3, [r4, #4]
 8012740:	b10b      	cbz	r3, 8012746 <HAL_SPI_Transmit+0xec>
 8012742:	2f01      	cmp	r7, #1
 8012744:	d10a      	bne.n	801275c <HAL_SPI_Transmit+0x102>
 8012746:	6823      	ldr	r3, [r4, #0]
 8012748:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801274a:	8812      	ldrh	r2, [r2, #0]
 801274c:	60da      	str	r2, [r3, #12]
 801274e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012750:	3302      	adds	r3, #2
 8012752:	6323      	str	r3, [r4, #48]	; 0x30
 8012754:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8012756:	3b01      	subs	r3, #1
 8012758:	b29b      	uxth	r3, r3
 801275a:	86e3      	strh	r3, [r4, #54]	; 0x36
 801275c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801275e:	b29b      	uxth	r3, r3
 8012760:	b963      	cbnz	r3, 801277c <HAL_SPI_Transmit+0x122>
 8012762:	e7cb      	b.n	80126fc <HAL_SPI_Transmit+0xa2>
 8012764:	f7fd fe3e 	bl	80103e4 <HAL_GetTick>
 8012768:	1b80      	subs	r0, r0, r6
 801276a:	42a8      	cmp	r0, r5
 801276c:	d302      	bcc.n	8012774 <HAL_SPI_Transmit+0x11a>
 801276e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8012772:	d139      	bne.n	80127e8 <HAL_SPI_Transmit+0x18e>
 8012774:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8012776:	b29b      	uxth	r3, r3
 8012778:	2b00      	cmp	r3, #0
 801277a:	d0bf      	beq.n	80126fc <HAL_SPI_Transmit+0xa2>
 801277c:	6823      	ldr	r3, [r4, #0]
 801277e:	689a      	ldr	r2, [r3, #8]
 8012780:	f012 0f02 	tst.w	r2, #2
 8012784:	d0ee      	beq.n	8012764 <HAL_SPI_Transmit+0x10a>
 8012786:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012788:	8812      	ldrh	r2, [r2, #0]
 801278a:	60da      	str	r2, [r3, #12]
 801278c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801278e:	3302      	adds	r3, #2
 8012790:	6323      	str	r3, [r4, #48]	; 0x30
 8012792:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8012794:	3b01      	subs	r3, #1
 8012796:	b29b      	uxth	r3, r3
 8012798:	86e3      	strh	r3, [r4, #54]	; 0x36
 801279a:	e7eb      	b.n	8012774 <HAL_SPI_Transmit+0x11a>
 801279c:	f7fd fe22 	bl	80103e4 <HAL_GetTick>
 80127a0:	1b80      	subs	r0, r0, r6
 80127a2:	42a8      	cmp	r0, r5
 80127a4:	d302      	bcc.n	80127ac <HAL_SPI_Transmit+0x152>
 80127a6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80127aa:	d11f      	bne.n	80127ec <HAL_SPI_Transmit+0x192>
 80127ac:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80127ae:	b292      	uxth	r2, r2
 80127b0:	2a00      	cmp	r2, #0
 80127b2:	d0a3      	beq.n	80126fc <HAL_SPI_Transmit+0xa2>
 80127b4:	6823      	ldr	r3, [r4, #0]
 80127b6:	689a      	ldr	r2, [r3, #8]
 80127b8:	f012 0f02 	tst.w	r2, #2
 80127bc:	d0ee      	beq.n	801279c <HAL_SPI_Transmit+0x142>
 80127be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80127c0:	7812      	ldrb	r2, [r2, #0]
 80127c2:	731a      	strb	r2, [r3, #12]
 80127c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80127c6:	3301      	adds	r3, #1
 80127c8:	6323      	str	r3, [r4, #48]	; 0x30
 80127ca:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80127cc:	3a01      	subs	r2, #1
 80127ce:	b292      	uxth	r2, r2
 80127d0:	86e2      	strh	r2, [r4, #54]	; 0x36
 80127d2:	e7eb      	b.n	80127ac <HAL_SPI_Transmit+0x152>
 80127d4:	2002      	movs	r0, #2
 80127d6:	2301      	movs	r3, #1
 80127d8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 80127dc:	2300      	movs	r3, #0
 80127de:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80127e2:	b002      	add	sp, #8
 80127e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127e8:	2003      	movs	r0, #3
 80127ea:	e7f4      	b.n	80127d6 <HAL_SPI_Transmit+0x17c>
 80127ec:	2003      	movs	r0, #3
 80127ee:	e7f2      	b.n	80127d6 <HAL_SPI_Transmit+0x17c>
 80127f0:	2002      	movs	r0, #2
 80127f2:	e7f6      	b.n	80127e2 <HAL_SPI_Transmit+0x188>

080127f4 <HAL_SPI_TransmitReceive>:
 80127f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80127f8:	b083      	sub	sp, #12
 80127fa:	461f      	mov	r7, r3
 80127fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80127fe:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8012802:	2b01      	cmp	r3, #1
 8012804:	f000 8109 	beq.w	8012a1a <HAL_SPI_TransmitReceive+0x226>
 8012808:	4604      	mov	r4, r0
 801280a:	4688      	mov	r8, r1
 801280c:	4691      	mov	r9, r2
 801280e:	2301      	movs	r3, #1
 8012810:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 8012814:	f7fd fde6 	bl	80103e4 <HAL_GetTick>
 8012818:	4605      	mov	r5, r0
 801281a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 801281e:	b2c0      	uxtb	r0, r0
 8012820:	2801      	cmp	r0, #1
 8012822:	d00b      	beq.n	801283c <HAL_SPI_TransmitReceive+0x48>
 8012824:	6863      	ldr	r3, [r4, #4]
 8012826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801282a:	f040 80de 	bne.w	80129ea <HAL_SPI_TransmitReceive+0x1f6>
 801282e:	68a3      	ldr	r3, [r4, #8]
 8012830:	2b00      	cmp	r3, #0
 8012832:	f040 80e4 	bne.w	80129fe <HAL_SPI_TransmitReceive+0x20a>
 8012836:	2804      	cmp	r0, #4
 8012838:	f040 80e3 	bne.w	8012a02 <HAL_SPI_TransmitReceive+0x20e>
 801283c:	f1b8 0f00 	cmp.w	r8, #0
 8012840:	f000 80e1 	beq.w	8012a06 <HAL_SPI_TransmitReceive+0x212>
 8012844:	f1b9 0f00 	cmp.w	r9, #0
 8012848:	f000 80df 	beq.w	8012a0a <HAL_SPI_TransmitReceive+0x216>
 801284c:	2f00      	cmp	r7, #0
 801284e:	f000 80de 	beq.w	8012a0e <HAL_SPI_TransmitReceive+0x21a>
 8012852:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8012856:	b2db      	uxtb	r3, r3
 8012858:	2b04      	cmp	r3, #4
 801285a:	bf1c      	itt	ne
 801285c:	2305      	movne	r3, #5
 801285e:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
 8012862:	2300      	movs	r3, #0
 8012864:	6563      	str	r3, [r4, #84]	; 0x54
 8012866:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
 801286a:	87e7      	strh	r7, [r4, #62]	; 0x3e
 801286c:	87a7      	strh	r7, [r4, #60]	; 0x3c
 801286e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8012872:	86e7      	strh	r7, [r4, #54]	; 0x36
 8012874:	86a7      	strh	r7, [r4, #52]	; 0x34
 8012876:	6423      	str	r3, [r4, #64]	; 0x40
 8012878:	6463      	str	r3, [r4, #68]	; 0x44
 801287a:	6823      	ldr	r3, [r4, #0]
 801287c:	681a      	ldr	r2, [r3, #0]
 801287e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8012882:	d103      	bne.n	801288c <HAL_SPI_TransmitReceive+0x98>
 8012884:	681a      	ldr	r2, [r3, #0]
 8012886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801288a:	601a      	str	r2, [r3, #0]
 801288c:	68e3      	ldr	r3, [r4, #12]
 801288e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012892:	d012      	beq.n	80128ba <HAL_SPI_TransmitReceive+0xc6>
 8012894:	6863      	ldr	r3, [r4, #4]
 8012896:	b10b      	cbz	r3, 801289c <HAL_SPI_TransmitReceive+0xa8>
 8012898:	2f01      	cmp	r7, #1
 801289a:	d10a      	bne.n	80128b2 <HAL_SPI_TransmitReceive+0xbe>
 801289c:	6823      	ldr	r3, [r4, #0]
 801289e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80128a0:	7812      	ldrb	r2, [r2, #0]
 80128a2:	731a      	strb	r2, [r3, #12]
 80128a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80128a6:	3301      	adds	r3, #1
 80128a8:	6323      	str	r3, [r4, #48]	; 0x30
 80128aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80128ac:	3b01      	subs	r3, #1
 80128ae:	b29b      	uxth	r3, r3
 80128b0:	86e3      	strh	r3, [r4, #54]	; 0x36
 80128b2:	2701      	movs	r7, #1
 80128b4:	f04f 0800 	mov.w	r8, #0
 80128b8:	e066      	b.n	8012988 <HAL_SPI_TransmitReceive+0x194>
 80128ba:	6863      	ldr	r3, [r4, #4]
 80128bc:	b10b      	cbz	r3, 80128c2 <HAL_SPI_TransmitReceive+0xce>
 80128be:	2f01      	cmp	r7, #1
 80128c0:	d10a      	bne.n	80128d8 <HAL_SPI_TransmitReceive+0xe4>
 80128c2:	6823      	ldr	r3, [r4, #0]
 80128c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80128c6:	8812      	ldrh	r2, [r2, #0]
 80128c8:	60da      	str	r2, [r3, #12]
 80128ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80128cc:	3302      	adds	r3, #2
 80128ce:	6323      	str	r3, [r4, #48]	; 0x30
 80128d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80128d2:	3b01      	subs	r3, #1
 80128d4:	b29b      	uxth	r3, r3
 80128d6:	86e3      	strh	r3, [r4, #54]	; 0x36
 80128d8:	2701      	movs	r7, #1
 80128da:	f04f 0800 	mov.w	r8, #0
 80128de:	e01a      	b.n	8012916 <HAL_SPI_TransmitReceive+0x122>
 80128e0:	6822      	ldr	r2, [r4, #0]
 80128e2:	6893      	ldr	r3, [r2, #8]
 80128e4:	f013 0301 	ands.w	r3, r3, #1
 80128e8:	d00d      	beq.n	8012906 <HAL_SPI_TransmitReceive+0x112>
 80128ea:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80128ec:	b289      	uxth	r1, r1
 80128ee:	b151      	cbz	r1, 8012906 <HAL_SPI_TransmitReceive+0x112>
 80128f0:	68d1      	ldr	r1, [r2, #12]
 80128f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80128f4:	8011      	strh	r1, [r2, #0]
 80128f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80128f8:	3202      	adds	r2, #2
 80128fa:	63a2      	str	r2, [r4, #56]	; 0x38
 80128fc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80128fe:	3a01      	subs	r2, #1
 8012900:	b292      	uxth	r2, r2
 8012902:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8012904:	461f      	mov	r7, r3
 8012906:	f7fd fd6d 	bl	80103e4 <HAL_GetTick>
 801290a:	1b40      	subs	r0, r0, r5
 801290c:	42b0      	cmp	r0, r6
 801290e:	d302      	bcc.n	8012916 <HAL_SPI_TransmitReceive+0x122>
 8012910:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012914:	d17d      	bne.n	8012a12 <HAL_SPI_TransmitReceive+0x21e>
 8012916:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8012918:	b29b      	uxth	r3, r3
 801291a:	b91b      	cbnz	r3, 8012924 <HAL_SPI_TransmitReceive+0x130>
 801291c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801291e:	b29b      	uxth	r3, r3
 8012920:	2b00      	cmp	r3, #0
 8012922:	d04e      	beq.n	80129c2 <HAL_SPI_TransmitReceive+0x1ce>
 8012924:	6823      	ldr	r3, [r4, #0]
 8012926:	689a      	ldr	r2, [r3, #8]
 8012928:	f012 0f02 	tst.w	r2, #2
 801292c:	d0d8      	beq.n	80128e0 <HAL_SPI_TransmitReceive+0xec>
 801292e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8012930:	b292      	uxth	r2, r2
 8012932:	2a00      	cmp	r2, #0
 8012934:	d0d4      	beq.n	80128e0 <HAL_SPI_TransmitReceive+0xec>
 8012936:	2f00      	cmp	r7, #0
 8012938:	d0d2      	beq.n	80128e0 <HAL_SPI_TransmitReceive+0xec>
 801293a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801293c:	8812      	ldrh	r2, [r2, #0]
 801293e:	60da      	str	r2, [r3, #12]
 8012940:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012942:	3302      	adds	r3, #2
 8012944:	6323      	str	r3, [r4, #48]	; 0x30
 8012946:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8012948:	3b01      	subs	r3, #1
 801294a:	b29b      	uxth	r3, r3
 801294c:	86e3      	strh	r3, [r4, #54]	; 0x36
 801294e:	4647      	mov	r7, r8
 8012950:	e7c6      	b.n	80128e0 <HAL_SPI_TransmitReceive+0xec>
 8012952:	6822      	ldr	r2, [r4, #0]
 8012954:	6893      	ldr	r3, [r2, #8]
 8012956:	f013 0301 	ands.w	r3, r3, #1
 801295a:	d00d      	beq.n	8012978 <HAL_SPI_TransmitReceive+0x184>
 801295c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 801295e:	b289      	uxth	r1, r1
 8012960:	b151      	cbz	r1, 8012978 <HAL_SPI_TransmitReceive+0x184>
 8012962:	68d1      	ldr	r1, [r2, #12]
 8012964:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8012966:	7011      	strb	r1, [r2, #0]
 8012968:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801296a:	3201      	adds	r2, #1
 801296c:	63a2      	str	r2, [r4, #56]	; 0x38
 801296e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8012970:	3a01      	subs	r2, #1
 8012972:	b292      	uxth	r2, r2
 8012974:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8012976:	461f      	mov	r7, r3
 8012978:	f7fd fd34 	bl	80103e4 <HAL_GetTick>
 801297c:	1b43      	subs	r3, r0, r5
 801297e:	42b3      	cmp	r3, r6
 8012980:	d302      	bcc.n	8012988 <HAL_SPI_TransmitReceive+0x194>
 8012982:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012986:	d146      	bne.n	8012a16 <HAL_SPI_TransmitReceive+0x222>
 8012988:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801298a:	b29b      	uxth	r3, r3
 801298c:	b913      	cbnz	r3, 8012994 <HAL_SPI_TransmitReceive+0x1a0>
 801298e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8012990:	b29b      	uxth	r3, r3
 8012992:	b1b3      	cbz	r3, 80129c2 <HAL_SPI_TransmitReceive+0x1ce>
 8012994:	6823      	ldr	r3, [r4, #0]
 8012996:	689a      	ldr	r2, [r3, #8]
 8012998:	f012 0f02 	tst.w	r2, #2
 801299c:	d0d9      	beq.n	8012952 <HAL_SPI_TransmitReceive+0x15e>
 801299e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80129a0:	b292      	uxth	r2, r2
 80129a2:	2a00      	cmp	r2, #0
 80129a4:	d0d5      	beq.n	8012952 <HAL_SPI_TransmitReceive+0x15e>
 80129a6:	2f01      	cmp	r7, #1
 80129a8:	d1d3      	bne.n	8012952 <HAL_SPI_TransmitReceive+0x15e>
 80129aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80129ac:	7812      	ldrb	r2, [r2, #0]
 80129ae:	731a      	strb	r2, [r3, #12]
 80129b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80129b2:	3301      	adds	r3, #1
 80129b4:	6323      	str	r3, [r4, #48]	; 0x30
 80129b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80129b8:	3b01      	subs	r3, #1
 80129ba:	b29b      	uxth	r3, r3
 80129bc:	86e3      	strh	r3, [r4, #54]	; 0x36
 80129be:	4647      	mov	r7, r8
 80129c0:	e7c7      	b.n	8012952 <HAL_SPI_TransmitReceive+0x15e>
 80129c2:	462a      	mov	r2, r5
 80129c4:	4631      	mov	r1, r6
 80129c6:	4620      	mov	r0, r4
 80129c8:	f7ff fd56 	bl	8012478 <SPI_EndRxTxTransaction>
 80129cc:	b948      	cbnz	r0, 80129e2 <HAL_SPI_TransmitReceive+0x1ee>
 80129ce:	68a3      	ldr	r3, [r4, #8]
 80129d0:	b963      	cbnz	r3, 80129ec <HAL_SPI_TransmitReceive+0x1f8>
 80129d2:	9301      	str	r3, [sp, #4]
 80129d4:	6823      	ldr	r3, [r4, #0]
 80129d6:	68da      	ldr	r2, [r3, #12]
 80129d8:	9201      	str	r2, [sp, #4]
 80129da:	689b      	ldr	r3, [r3, #8]
 80129dc:	9301      	str	r3, [sp, #4]
 80129de:	9b01      	ldr	r3, [sp, #4]
 80129e0:	e004      	b.n	80129ec <HAL_SPI_TransmitReceive+0x1f8>
 80129e2:	2320      	movs	r3, #32
 80129e4:	6563      	str	r3, [r4, #84]	; 0x54
 80129e6:	2001      	movs	r0, #1
 80129e8:	e000      	b.n	80129ec <HAL_SPI_TransmitReceive+0x1f8>
 80129ea:	2002      	movs	r0, #2
 80129ec:	2301      	movs	r3, #1
 80129ee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 80129f2:	2300      	movs	r3, #0
 80129f4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80129f8:	b003      	add	sp, #12
 80129fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129fe:	2002      	movs	r0, #2
 8012a00:	e7f4      	b.n	80129ec <HAL_SPI_TransmitReceive+0x1f8>
 8012a02:	2002      	movs	r0, #2
 8012a04:	e7f2      	b.n	80129ec <HAL_SPI_TransmitReceive+0x1f8>
 8012a06:	2001      	movs	r0, #1
 8012a08:	e7f0      	b.n	80129ec <HAL_SPI_TransmitReceive+0x1f8>
 8012a0a:	2001      	movs	r0, #1
 8012a0c:	e7ee      	b.n	80129ec <HAL_SPI_TransmitReceive+0x1f8>
 8012a0e:	2001      	movs	r0, #1
 8012a10:	e7ec      	b.n	80129ec <HAL_SPI_TransmitReceive+0x1f8>
 8012a12:	2003      	movs	r0, #3
 8012a14:	e7ea      	b.n	80129ec <HAL_SPI_TransmitReceive+0x1f8>
 8012a16:	2003      	movs	r0, #3
 8012a18:	e7e8      	b.n	80129ec <HAL_SPI_TransmitReceive+0x1f8>
 8012a1a:	2002      	movs	r0, #2
 8012a1c:	e7ec      	b.n	80129f8 <HAL_SPI_TransmitReceive+0x204>

08012a1e <HAL_SPI_Receive>:
 8012a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a22:	b082      	sub	sp, #8
 8012a24:	4604      	mov	r4, r0
 8012a26:	4688      	mov	r8, r1
 8012a28:	4617      	mov	r7, r2
 8012a2a:	461d      	mov	r5, r3
 8012a2c:	6843      	ldr	r3, [r0, #4]
 8012a2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012a32:	d045      	beq.n	8012ac0 <HAL_SPI_Receive+0xa2>
 8012a34:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8012a38:	2b01      	cmp	r3, #1
 8012a3a:	f000 80a2 	beq.w	8012b82 <HAL_SPI_Receive+0x164>
 8012a3e:	2301      	movs	r3, #1
 8012a40:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8012a44:	f7fd fcce 	bl	80103e4 <HAL_GetTick>
 8012a48:	4606      	mov	r6, r0
 8012a4a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8012a4e:	b2c0      	uxtb	r0, r0
 8012a50:	2801      	cmp	r0, #1
 8012a52:	f040 8088 	bne.w	8012b66 <HAL_SPI_Receive+0x148>
 8012a56:	f1b8 0f00 	cmp.w	r8, #0
 8012a5a:	f000 8085 	beq.w	8012b68 <HAL_SPI_Receive+0x14a>
 8012a5e:	2f00      	cmp	r7, #0
 8012a60:	f000 8082 	beq.w	8012b68 <HAL_SPI_Receive+0x14a>
 8012a64:	2304      	movs	r3, #4
 8012a66:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	6563      	str	r3, [r4, #84]	; 0x54
 8012a6e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8012a72:	87a7      	strh	r7, [r4, #60]	; 0x3c
 8012a74:	87e7      	strh	r7, [r4, #62]	; 0x3e
 8012a76:	6323      	str	r3, [r4, #48]	; 0x30
 8012a78:	86a3      	strh	r3, [r4, #52]	; 0x34
 8012a7a:	86e3      	strh	r3, [r4, #54]	; 0x36
 8012a7c:	6423      	str	r3, [r4, #64]	; 0x40
 8012a7e:	6463      	str	r3, [r4, #68]	; 0x44
 8012a80:	68a3      	ldr	r3, [r4, #8]
 8012a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012a86:	d027      	beq.n	8012ad8 <HAL_SPI_Receive+0xba>
 8012a88:	6823      	ldr	r3, [r4, #0]
 8012a8a:	681a      	ldr	r2, [r3, #0]
 8012a8c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8012a90:	d103      	bne.n	8012a9a <HAL_SPI_Receive+0x7c>
 8012a92:	681a      	ldr	r2, [r3, #0]
 8012a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012a98:	601a      	str	r2, [r3, #0]
 8012a9a:	68e3      	ldr	r3, [r4, #12]
 8012a9c:	b33b      	cbz	r3, 8012aee <HAL_SPI_Receive+0xd0>
 8012a9e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8012aa0:	b29b      	uxth	r3, r3
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d14f      	bne.n	8012b46 <HAL_SPI_Receive+0x128>
 8012aa6:	4632      	mov	r2, r6
 8012aa8:	4629      	mov	r1, r5
 8012aaa:	4620      	mov	r0, r4
 8012aac:	f7ff fd18 	bl	80124e0 <SPI_EndRxTransaction>
 8012ab0:	b108      	cbz	r0, 8012ab6 <HAL_SPI_Receive+0x98>
 8012ab2:	2320      	movs	r3, #32
 8012ab4:	6563      	str	r3, [r4, #84]	; 0x54
 8012ab6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012ab8:	3800      	subs	r0, #0
 8012aba:	bf18      	it	ne
 8012abc:	2001      	movne	r0, #1
 8012abe:	e053      	b.n	8012b68 <HAL_SPI_Receive+0x14a>
 8012ac0:	6883      	ldr	r3, [r0, #8]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d1b6      	bne.n	8012a34 <HAL_SPI_Receive+0x16>
 8012ac6:	2304      	movs	r3, #4
 8012ac8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 8012acc:	9500      	str	r5, [sp, #0]
 8012ace:	4613      	mov	r3, r2
 8012ad0:	460a      	mov	r2, r1
 8012ad2:	f7ff fe8f 	bl	80127f4 <HAL_SPI_TransmitReceive>
 8012ad6:	e04d      	b.n	8012b74 <HAL_SPI_Receive+0x156>
 8012ad8:	6822      	ldr	r2, [r4, #0]
 8012ada:	6813      	ldr	r3, [r2, #0]
 8012adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012ae0:	6013      	str	r3, [r2, #0]
 8012ae2:	6822      	ldr	r2, [r4, #0]
 8012ae4:	6813      	ldr	r3, [r2, #0]
 8012ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012aea:	6013      	str	r3, [r2, #0]
 8012aec:	e7cc      	b.n	8012a88 <HAL_SPI_Receive+0x6a>
 8012aee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8012af0:	b29b      	uxth	r3, r3
 8012af2:	b963      	cbnz	r3, 8012b0e <HAL_SPI_Receive+0xf0>
 8012af4:	e7d7      	b.n	8012aa6 <HAL_SPI_Receive+0x88>
 8012af6:	f7fd fc75 	bl	80103e4 <HAL_GetTick>
 8012afa:	1b80      	subs	r0, r0, r6
 8012afc:	42a8      	cmp	r0, r5
 8012afe:	d302      	bcc.n	8012b06 <HAL_SPI_Receive+0xe8>
 8012b00:	f1b5 3fff 	cmp.w	r5, #4294967295
 8012b04:	d139      	bne.n	8012b7a <HAL_SPI_Receive+0x15c>
 8012b06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8012b08:	b29b      	uxth	r3, r3
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d0cb      	beq.n	8012aa6 <HAL_SPI_Receive+0x88>
 8012b0e:	6823      	ldr	r3, [r4, #0]
 8012b10:	689a      	ldr	r2, [r3, #8]
 8012b12:	f012 0f01 	tst.w	r2, #1
 8012b16:	d0ee      	beq.n	8012af6 <HAL_SPI_Receive+0xd8>
 8012b18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8012b1a:	7b1b      	ldrb	r3, [r3, #12]
 8012b1c:	7013      	strb	r3, [r2, #0]
 8012b1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012b20:	3301      	adds	r3, #1
 8012b22:	63a3      	str	r3, [r4, #56]	; 0x38
 8012b24:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8012b26:	3a01      	subs	r2, #1
 8012b28:	b292      	uxth	r2, r2
 8012b2a:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8012b2c:	e7eb      	b.n	8012b06 <HAL_SPI_Receive+0xe8>
 8012b2e:	f7fd fc59 	bl	80103e4 <HAL_GetTick>
 8012b32:	1b80      	subs	r0, r0, r6
 8012b34:	42a8      	cmp	r0, r5
 8012b36:	d302      	bcc.n	8012b3e <HAL_SPI_Receive+0x120>
 8012b38:	f1b5 3fff 	cmp.w	r5, #4294967295
 8012b3c:	d11f      	bne.n	8012b7e <HAL_SPI_Receive+0x160>
 8012b3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8012b40:	b29b      	uxth	r3, r3
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d0af      	beq.n	8012aa6 <HAL_SPI_Receive+0x88>
 8012b46:	6823      	ldr	r3, [r4, #0]
 8012b48:	689a      	ldr	r2, [r3, #8]
 8012b4a:	f012 0f01 	tst.w	r2, #1
 8012b4e:	d0ee      	beq.n	8012b2e <HAL_SPI_Receive+0x110>
 8012b50:	68da      	ldr	r2, [r3, #12]
 8012b52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012b54:	801a      	strh	r2, [r3, #0]
 8012b56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012b58:	3302      	adds	r3, #2
 8012b5a:	63a3      	str	r3, [r4, #56]	; 0x38
 8012b5c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8012b5e:	3a01      	subs	r2, #1
 8012b60:	b292      	uxth	r2, r2
 8012b62:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8012b64:	e7eb      	b.n	8012b3e <HAL_SPI_Receive+0x120>
 8012b66:	2002      	movs	r0, #2
 8012b68:	2301      	movs	r3, #1
 8012b6a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8012b6e:	2300      	movs	r3, #0
 8012b70:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8012b74:	b002      	add	sp, #8
 8012b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b7a:	2003      	movs	r0, #3
 8012b7c:	e7f4      	b.n	8012b68 <HAL_SPI_Receive+0x14a>
 8012b7e:	2003      	movs	r0, #3
 8012b80:	e7f2      	b.n	8012b68 <HAL_SPI_Receive+0x14a>
 8012b82:	2002      	movs	r0, #2
 8012b84:	e7f6      	b.n	8012b74 <HAL_SPI_Receive+0x156>
	...

08012b88 <TIM_OC1_SetConfig>:
 8012b88:	b470      	push	{r4, r5, r6}
 8012b8a:	6a03      	ldr	r3, [r0, #32]
 8012b8c:	f023 0301 	bic.w	r3, r3, #1
 8012b90:	6203      	str	r3, [r0, #32]
 8012b92:	6a03      	ldr	r3, [r0, #32]
 8012b94:	6844      	ldr	r4, [r0, #4]
 8012b96:	6982      	ldr	r2, [r0, #24]
 8012b98:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8012b9c:	680d      	ldr	r5, [r1, #0]
 8012b9e:	432a      	orrs	r2, r5
 8012ba0:	f023 0302 	bic.w	r3, r3, #2
 8012ba4:	688d      	ldr	r5, [r1, #8]
 8012ba6:	432b      	orrs	r3, r5
 8012ba8:	4d0b      	ldr	r5, [pc, #44]	; (8012bd8 <TIM_OC1_SetConfig+0x50>)
 8012baa:	42a8      	cmp	r0, r5
 8012bac:	d006      	beq.n	8012bbc <TIM_OC1_SetConfig+0x34>
 8012bae:	6044      	str	r4, [r0, #4]
 8012bb0:	6182      	str	r2, [r0, #24]
 8012bb2:	684a      	ldr	r2, [r1, #4]
 8012bb4:	6342      	str	r2, [r0, #52]	; 0x34
 8012bb6:	6203      	str	r3, [r0, #32]
 8012bb8:	bc70      	pop	{r4, r5, r6}
 8012bba:	4770      	bx	lr
 8012bbc:	f023 0308 	bic.w	r3, r3, #8
 8012bc0:	68cd      	ldr	r5, [r1, #12]
 8012bc2:	432b      	orrs	r3, r5
 8012bc4:	f023 0304 	bic.w	r3, r3, #4
 8012bc8:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8012bcc:	694d      	ldr	r5, [r1, #20]
 8012bce:	698e      	ldr	r6, [r1, #24]
 8012bd0:	4335      	orrs	r5, r6
 8012bd2:	432c      	orrs	r4, r5
 8012bd4:	e7eb      	b.n	8012bae <TIM_OC1_SetConfig+0x26>
 8012bd6:	bf00      	nop
 8012bd8:	40010000 	.word	0x40010000

08012bdc <TIM_OC3_SetConfig>:
 8012bdc:	b470      	push	{r4, r5, r6}
 8012bde:	6a03      	ldr	r3, [r0, #32]
 8012be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012be4:	6203      	str	r3, [r0, #32]
 8012be6:	6a03      	ldr	r3, [r0, #32]
 8012be8:	6844      	ldr	r4, [r0, #4]
 8012bea:	69c2      	ldr	r2, [r0, #28]
 8012bec:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8012bf0:	680d      	ldr	r5, [r1, #0]
 8012bf2:	432a      	orrs	r2, r5
 8012bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012bf8:	688d      	ldr	r5, [r1, #8]
 8012bfa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8012bfe:	4d0c      	ldr	r5, [pc, #48]	; (8012c30 <TIM_OC3_SetConfig+0x54>)
 8012c00:	42a8      	cmp	r0, r5
 8012c02:	d006      	beq.n	8012c12 <TIM_OC3_SetConfig+0x36>
 8012c04:	6044      	str	r4, [r0, #4]
 8012c06:	61c2      	str	r2, [r0, #28]
 8012c08:	684a      	ldr	r2, [r1, #4]
 8012c0a:	63c2      	str	r2, [r0, #60]	; 0x3c
 8012c0c:	6203      	str	r3, [r0, #32]
 8012c0e:	bc70      	pop	{r4, r5, r6}
 8012c10:	4770      	bx	lr
 8012c12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012c16:	68cd      	ldr	r5, [r1, #12]
 8012c18:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8012c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012c20:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
 8012c24:	694d      	ldr	r5, [r1, #20]
 8012c26:	698e      	ldr	r6, [r1, #24]
 8012c28:	4335      	orrs	r5, r6
 8012c2a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8012c2e:	e7e9      	b.n	8012c04 <TIM_OC3_SetConfig+0x28>
 8012c30:	40010000 	.word	0x40010000

08012c34 <TIM_OC4_SetConfig>:
 8012c34:	b430      	push	{r4, r5}
 8012c36:	6a03      	ldr	r3, [r0, #32]
 8012c38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012c3c:	6203      	str	r3, [r0, #32]
 8012c3e:	6a03      	ldr	r3, [r0, #32]
 8012c40:	6844      	ldr	r4, [r0, #4]
 8012c42:	69c2      	ldr	r2, [r0, #28]
 8012c44:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8012c48:	680d      	ldr	r5, [r1, #0]
 8012c4a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8012c4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012c52:	688d      	ldr	r5, [r1, #8]
 8012c54:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 8012c58:	4d07      	ldr	r5, [pc, #28]	; (8012c78 <TIM_OC4_SetConfig+0x44>)
 8012c5a:	42a8      	cmp	r0, r5
 8012c5c:	d006      	beq.n	8012c6c <TIM_OC4_SetConfig+0x38>
 8012c5e:	6044      	str	r4, [r0, #4]
 8012c60:	61c2      	str	r2, [r0, #28]
 8012c62:	684a      	ldr	r2, [r1, #4]
 8012c64:	6402      	str	r2, [r0, #64]	; 0x40
 8012c66:	6203      	str	r3, [r0, #32]
 8012c68:	bc30      	pop	{r4, r5}
 8012c6a:	4770      	bx	lr
 8012c6c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8012c70:	694d      	ldr	r5, [r1, #20]
 8012c72:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8012c76:	e7f2      	b.n	8012c5e <TIM_OC4_SetConfig+0x2a>
 8012c78:	40010000 	.word	0x40010000

08012c7c <HAL_TIM_Base_MspInit>:
 8012c7c:	4770      	bx	lr

08012c7e <HAL_TIM_Base_MspDeInit>:
 8012c7e:	4770      	bx	lr

08012c80 <HAL_TIM_Base_DeInit>:
 8012c80:	b510      	push	{r4, lr}
 8012c82:	4604      	mov	r4, r0
 8012c84:	2302      	movs	r3, #2
 8012c86:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8012c8a:	6803      	ldr	r3, [r0, #0]
 8012c8c:	6a19      	ldr	r1, [r3, #32]
 8012c8e:	f241 1211 	movw	r2, #4369	; 0x1111
 8012c92:	4211      	tst	r1, r2
 8012c94:	d108      	bne.n	8012ca8 <HAL_TIM_Base_DeInit+0x28>
 8012c96:	6a19      	ldr	r1, [r3, #32]
 8012c98:	f240 4244 	movw	r2, #1092	; 0x444
 8012c9c:	4211      	tst	r1, r2
 8012c9e:	d103      	bne.n	8012ca8 <HAL_TIM_Base_DeInit+0x28>
 8012ca0:	681a      	ldr	r2, [r3, #0]
 8012ca2:	f022 0201 	bic.w	r2, r2, #1
 8012ca6:	601a      	str	r2, [r3, #0]
 8012ca8:	4620      	mov	r0, r4
 8012caa:	f7ff ffe8 	bl	8012c7e <HAL_TIM_Base_MspDeInit>
 8012cae:	2000      	movs	r0, #0
 8012cb0:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
 8012cb4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
 8012cb8:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
 8012cbc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 8012cc0:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
 8012cc4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
 8012cc8:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8012ccc:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
 8012cd0:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
 8012cd4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 8012cd8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8012cdc:	bd10      	pop	{r4, pc}
	...

08012ce0 <HAL_TIM_Base_Start_IT>:
 8012ce0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8012ce4:	b2db      	uxtb	r3, r3
 8012ce6:	2b01      	cmp	r3, #1
 8012ce8:	d12f      	bne.n	8012d4a <HAL_TIM_Base_Start_IT+0x6a>
 8012cea:	2302      	movs	r3, #2
 8012cec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8012cf0:	6802      	ldr	r2, [r0, #0]
 8012cf2:	68d3      	ldr	r3, [r2, #12]
 8012cf4:	f043 0301 	orr.w	r3, r3, #1
 8012cf8:	60d3      	str	r3, [r2, #12]
 8012cfa:	6803      	ldr	r3, [r0, #0]
 8012cfc:	4a15      	ldr	r2, [pc, #84]	; (8012d54 <HAL_TIM_Base_Start_IT+0x74>)
 8012cfe:	4293      	cmp	r3, r2
 8012d00:	d018      	beq.n	8012d34 <HAL_TIM_Base_Start_IT+0x54>
 8012d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012d06:	d015      	beq.n	8012d34 <HAL_TIM_Base_Start_IT+0x54>
 8012d08:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8012d0c:	4293      	cmp	r3, r2
 8012d0e:	d011      	beq.n	8012d34 <HAL_TIM_Base_Start_IT+0x54>
 8012d10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012d14:	4293      	cmp	r3, r2
 8012d16:	d00d      	beq.n	8012d34 <HAL_TIM_Base_Start_IT+0x54>
 8012d18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012d1c:	4293      	cmp	r3, r2
 8012d1e:	d009      	beq.n	8012d34 <HAL_TIM_Base_Start_IT+0x54>
 8012d20:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8012d24:	4293      	cmp	r3, r2
 8012d26:	d005      	beq.n	8012d34 <HAL_TIM_Base_Start_IT+0x54>
 8012d28:	681a      	ldr	r2, [r3, #0]
 8012d2a:	f042 0201 	orr.w	r2, r2, #1
 8012d2e:	601a      	str	r2, [r3, #0]
 8012d30:	2000      	movs	r0, #0
 8012d32:	4770      	bx	lr
 8012d34:	689a      	ldr	r2, [r3, #8]
 8012d36:	f002 0207 	and.w	r2, r2, #7
 8012d3a:	2a06      	cmp	r2, #6
 8012d3c:	d007      	beq.n	8012d4e <HAL_TIM_Base_Start_IT+0x6e>
 8012d3e:	681a      	ldr	r2, [r3, #0]
 8012d40:	f042 0201 	orr.w	r2, r2, #1
 8012d44:	601a      	str	r2, [r3, #0]
 8012d46:	2000      	movs	r0, #0
 8012d48:	4770      	bx	lr
 8012d4a:	2001      	movs	r0, #1
 8012d4c:	4770      	bx	lr
 8012d4e:	2000      	movs	r0, #0
 8012d50:	4770      	bx	lr
 8012d52:	bf00      	nop
 8012d54:	40010000 	.word	0x40010000

08012d58 <HAL_TIM_PWM_DeInit>:
 8012d58:	b510      	push	{r4, lr}
 8012d5a:	4604      	mov	r4, r0
 8012d5c:	2302      	movs	r3, #2
 8012d5e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8012d62:	6803      	ldr	r3, [r0, #0]
 8012d64:	6a19      	ldr	r1, [r3, #32]
 8012d66:	f241 1211 	movw	r2, #4369	; 0x1111
 8012d6a:	4211      	tst	r1, r2
 8012d6c:	d108      	bne.n	8012d80 <HAL_TIM_PWM_DeInit+0x28>
 8012d6e:	6a19      	ldr	r1, [r3, #32]
 8012d70:	f240 4244 	movw	r2, #1092	; 0x444
 8012d74:	4211      	tst	r1, r2
 8012d76:	d103      	bne.n	8012d80 <HAL_TIM_PWM_DeInit+0x28>
 8012d78:	681a      	ldr	r2, [r3, #0]
 8012d7a:	f022 0201 	bic.w	r2, r2, #1
 8012d7e:	601a      	str	r2, [r3, #0]
 8012d80:	4620      	mov	r0, r4
 8012d82:	f7fb fa0f 	bl	800e1a4 <HAL_TIM_PWM_MspDeInit>
 8012d86:	2000      	movs	r0, #0
 8012d88:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
 8012d8c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
 8012d90:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
 8012d94:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
 8012d98:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
 8012d9c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
 8012da0:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8012da4:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
 8012da8:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
 8012dac:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 8012db0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8012db4:	bd10      	pop	{r4, pc}

08012db6 <HAL_TIM_OC_DelayElapsedCallback>:
 8012db6:	4770      	bx	lr

08012db8 <HAL_TIM_IC_CaptureCallback>:
 8012db8:	4770      	bx	lr

08012dba <HAL_TIM_PWM_PulseFinishedCallback>:
 8012dba:	4770      	bx	lr

08012dbc <HAL_TIM_TriggerCallback>:
 8012dbc:	4770      	bx	lr

08012dbe <HAL_TIM_IRQHandler>:
 8012dbe:	b510      	push	{r4, lr}
 8012dc0:	4604      	mov	r4, r0
 8012dc2:	6803      	ldr	r3, [r0, #0]
 8012dc4:	691a      	ldr	r2, [r3, #16]
 8012dc6:	f012 0f02 	tst.w	r2, #2
 8012dca:	d011      	beq.n	8012df0 <HAL_TIM_IRQHandler+0x32>
 8012dcc:	68da      	ldr	r2, [r3, #12]
 8012dce:	f012 0f02 	tst.w	r2, #2
 8012dd2:	d00d      	beq.n	8012df0 <HAL_TIM_IRQHandler+0x32>
 8012dd4:	f06f 0202 	mvn.w	r2, #2
 8012dd8:	611a      	str	r2, [r3, #16]
 8012dda:	2301      	movs	r3, #1
 8012ddc:	7703      	strb	r3, [r0, #28]
 8012dde:	6803      	ldr	r3, [r0, #0]
 8012de0:	699b      	ldr	r3, [r3, #24]
 8012de2:	f013 0f03 	tst.w	r3, #3
 8012de6:	d070      	beq.n	8012eca <HAL_TIM_IRQHandler+0x10c>
 8012de8:	f7ff ffe6 	bl	8012db8 <HAL_TIM_IC_CaptureCallback>
 8012dec:	2300      	movs	r3, #0
 8012dee:	7723      	strb	r3, [r4, #28]
 8012df0:	6823      	ldr	r3, [r4, #0]
 8012df2:	691a      	ldr	r2, [r3, #16]
 8012df4:	f012 0f04 	tst.w	r2, #4
 8012df8:	d012      	beq.n	8012e20 <HAL_TIM_IRQHandler+0x62>
 8012dfa:	68da      	ldr	r2, [r3, #12]
 8012dfc:	f012 0f04 	tst.w	r2, #4
 8012e00:	d00e      	beq.n	8012e20 <HAL_TIM_IRQHandler+0x62>
 8012e02:	f06f 0204 	mvn.w	r2, #4
 8012e06:	611a      	str	r2, [r3, #16]
 8012e08:	2302      	movs	r3, #2
 8012e0a:	7723      	strb	r3, [r4, #28]
 8012e0c:	6823      	ldr	r3, [r4, #0]
 8012e0e:	699b      	ldr	r3, [r3, #24]
 8012e10:	f413 7f40 	tst.w	r3, #768	; 0x300
 8012e14:	d05f      	beq.n	8012ed6 <HAL_TIM_IRQHandler+0x118>
 8012e16:	4620      	mov	r0, r4
 8012e18:	f7ff ffce 	bl	8012db8 <HAL_TIM_IC_CaptureCallback>
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	7723      	strb	r3, [r4, #28]
 8012e20:	6823      	ldr	r3, [r4, #0]
 8012e22:	691a      	ldr	r2, [r3, #16]
 8012e24:	f012 0f08 	tst.w	r2, #8
 8012e28:	d012      	beq.n	8012e50 <HAL_TIM_IRQHandler+0x92>
 8012e2a:	68da      	ldr	r2, [r3, #12]
 8012e2c:	f012 0f08 	tst.w	r2, #8
 8012e30:	d00e      	beq.n	8012e50 <HAL_TIM_IRQHandler+0x92>
 8012e32:	f06f 0208 	mvn.w	r2, #8
 8012e36:	611a      	str	r2, [r3, #16]
 8012e38:	2304      	movs	r3, #4
 8012e3a:	7723      	strb	r3, [r4, #28]
 8012e3c:	6823      	ldr	r3, [r4, #0]
 8012e3e:	69db      	ldr	r3, [r3, #28]
 8012e40:	f013 0f03 	tst.w	r3, #3
 8012e44:	d04e      	beq.n	8012ee4 <HAL_TIM_IRQHandler+0x126>
 8012e46:	4620      	mov	r0, r4
 8012e48:	f7ff ffb6 	bl	8012db8 <HAL_TIM_IC_CaptureCallback>
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	7723      	strb	r3, [r4, #28]
 8012e50:	6823      	ldr	r3, [r4, #0]
 8012e52:	691a      	ldr	r2, [r3, #16]
 8012e54:	f012 0f10 	tst.w	r2, #16
 8012e58:	d012      	beq.n	8012e80 <HAL_TIM_IRQHandler+0xc2>
 8012e5a:	68da      	ldr	r2, [r3, #12]
 8012e5c:	f012 0f10 	tst.w	r2, #16
 8012e60:	d00e      	beq.n	8012e80 <HAL_TIM_IRQHandler+0xc2>
 8012e62:	f06f 0210 	mvn.w	r2, #16
 8012e66:	611a      	str	r2, [r3, #16]
 8012e68:	2308      	movs	r3, #8
 8012e6a:	7723      	strb	r3, [r4, #28]
 8012e6c:	6823      	ldr	r3, [r4, #0]
 8012e6e:	69db      	ldr	r3, [r3, #28]
 8012e70:	f413 7f40 	tst.w	r3, #768	; 0x300
 8012e74:	d03d      	beq.n	8012ef2 <HAL_TIM_IRQHandler+0x134>
 8012e76:	4620      	mov	r0, r4
 8012e78:	f7ff ff9e 	bl	8012db8 <HAL_TIM_IC_CaptureCallback>
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	7723      	strb	r3, [r4, #28]
 8012e80:	6823      	ldr	r3, [r4, #0]
 8012e82:	691a      	ldr	r2, [r3, #16]
 8012e84:	f012 0f01 	tst.w	r2, #1
 8012e88:	d003      	beq.n	8012e92 <HAL_TIM_IRQHandler+0xd4>
 8012e8a:	68da      	ldr	r2, [r3, #12]
 8012e8c:	f012 0f01 	tst.w	r2, #1
 8012e90:	d136      	bne.n	8012f00 <HAL_TIM_IRQHandler+0x142>
 8012e92:	6823      	ldr	r3, [r4, #0]
 8012e94:	691a      	ldr	r2, [r3, #16]
 8012e96:	f012 0f80 	tst.w	r2, #128	; 0x80
 8012e9a:	d003      	beq.n	8012ea4 <HAL_TIM_IRQHandler+0xe6>
 8012e9c:	68da      	ldr	r2, [r3, #12]
 8012e9e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8012ea2:	d134      	bne.n	8012f0e <HAL_TIM_IRQHandler+0x150>
 8012ea4:	6823      	ldr	r3, [r4, #0]
 8012ea6:	691a      	ldr	r2, [r3, #16]
 8012ea8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8012eac:	d003      	beq.n	8012eb6 <HAL_TIM_IRQHandler+0xf8>
 8012eae:	68da      	ldr	r2, [r3, #12]
 8012eb0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8012eb4:	d132      	bne.n	8012f1c <HAL_TIM_IRQHandler+0x15e>
 8012eb6:	6823      	ldr	r3, [r4, #0]
 8012eb8:	691a      	ldr	r2, [r3, #16]
 8012eba:	f012 0f20 	tst.w	r2, #32
 8012ebe:	d003      	beq.n	8012ec8 <HAL_TIM_IRQHandler+0x10a>
 8012ec0:	68da      	ldr	r2, [r3, #12]
 8012ec2:	f012 0f20 	tst.w	r2, #32
 8012ec6:	d130      	bne.n	8012f2a <HAL_TIM_IRQHandler+0x16c>
 8012ec8:	bd10      	pop	{r4, pc}
 8012eca:	f7ff ff74 	bl	8012db6 <HAL_TIM_OC_DelayElapsedCallback>
 8012ece:	4620      	mov	r0, r4
 8012ed0:	f7ff ff73 	bl	8012dba <HAL_TIM_PWM_PulseFinishedCallback>
 8012ed4:	e78a      	b.n	8012dec <HAL_TIM_IRQHandler+0x2e>
 8012ed6:	4620      	mov	r0, r4
 8012ed8:	f7ff ff6d 	bl	8012db6 <HAL_TIM_OC_DelayElapsedCallback>
 8012edc:	4620      	mov	r0, r4
 8012ede:	f7ff ff6c 	bl	8012dba <HAL_TIM_PWM_PulseFinishedCallback>
 8012ee2:	e79b      	b.n	8012e1c <HAL_TIM_IRQHandler+0x5e>
 8012ee4:	4620      	mov	r0, r4
 8012ee6:	f7ff ff66 	bl	8012db6 <HAL_TIM_OC_DelayElapsedCallback>
 8012eea:	4620      	mov	r0, r4
 8012eec:	f7ff ff65 	bl	8012dba <HAL_TIM_PWM_PulseFinishedCallback>
 8012ef0:	e7ac      	b.n	8012e4c <HAL_TIM_IRQHandler+0x8e>
 8012ef2:	4620      	mov	r0, r4
 8012ef4:	f7ff ff5f 	bl	8012db6 <HAL_TIM_OC_DelayElapsedCallback>
 8012ef8:	4620      	mov	r0, r4
 8012efa:	f7ff ff5e 	bl	8012dba <HAL_TIM_PWM_PulseFinishedCallback>
 8012efe:	e7bd      	b.n	8012e7c <HAL_TIM_IRQHandler+0xbe>
 8012f00:	f06f 0201 	mvn.w	r2, #1
 8012f04:	611a      	str	r2, [r3, #16]
 8012f06:	4620      	mov	r0, r4
 8012f08:	f7fa fff8 	bl	800defc <HAL_TIM_PeriodElapsedCallback>
 8012f0c:	e7c1      	b.n	8012e92 <HAL_TIM_IRQHandler+0xd4>
 8012f0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8012f12:	611a      	str	r2, [r3, #16]
 8012f14:	4620      	mov	r0, r4
 8012f16:	f000 fa62 	bl	80133de <HAL_TIMEx_BreakCallback>
 8012f1a:	e7c3      	b.n	8012ea4 <HAL_TIM_IRQHandler+0xe6>
 8012f1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012f20:	611a      	str	r2, [r3, #16]
 8012f22:	4620      	mov	r0, r4
 8012f24:	f7ff ff4a 	bl	8012dbc <HAL_TIM_TriggerCallback>
 8012f28:	e7c5      	b.n	8012eb6 <HAL_TIM_IRQHandler+0xf8>
 8012f2a:	f06f 0220 	mvn.w	r2, #32
 8012f2e:	611a      	str	r2, [r3, #16]
 8012f30:	4620      	mov	r0, r4
 8012f32:	f000 fa53 	bl	80133dc <HAL_TIMEx_CommutCallback>
 8012f36:	e7c7      	b.n	8012ec8 <HAL_TIM_IRQHandler+0x10a>

08012f38 <TIM_Base_SetConfig>:
 8012f38:	6803      	ldr	r3, [r0, #0]
 8012f3a:	4a30      	ldr	r2, [pc, #192]	; (8012ffc <TIM_Base_SetConfig+0xc4>)
 8012f3c:	4290      	cmp	r0, r2
 8012f3e:	d042      	beq.n	8012fc6 <TIM_Base_SetConfig+0x8e>
 8012f40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012f44:	d021      	beq.n	8012f8a <TIM_Base_SetConfig+0x52>
 8012f46:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8012f4a:	4290      	cmp	r0, r2
 8012f4c:	d031      	beq.n	8012fb2 <TIM_Base_SetConfig+0x7a>
 8012f4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012f52:	4290      	cmp	r0, r2
 8012f54:	d04c      	beq.n	8012ff0 <TIM_Base_SetConfig+0xb8>
 8012f56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012f5a:	4290      	cmp	r0, r2
 8012f5c:	d02e      	beq.n	8012fbc <TIM_Base_SetConfig+0x84>
 8012f5e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8012f62:	4290      	cmp	r0, r2
 8012f64:	d015      	beq.n	8012f92 <TIM_Base_SetConfig+0x5a>
 8012f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012f6a:	4290      	cmp	r0, r2
 8012f6c:	d011      	beq.n	8012f92 <TIM_Base_SetConfig+0x5a>
 8012f6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012f72:	4290      	cmp	r0, r2
 8012f74:	d00d      	beq.n	8012f92 <TIM_Base_SetConfig+0x5a>
 8012f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f7a:	694a      	ldr	r2, [r1, #20]
 8012f7c:	4313      	orrs	r3, r2
 8012f7e:	6003      	str	r3, [r0, #0]
 8012f80:	688b      	ldr	r3, [r1, #8]
 8012f82:	62c3      	str	r3, [r0, #44]	; 0x2c
 8012f84:	680b      	ldr	r3, [r1, #0]
 8012f86:	6283      	str	r3, [r0, #40]	; 0x28
 8012f88:	e010      	b.n	8012fac <TIM_Base_SetConfig+0x74>
 8012f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012f8e:	684a      	ldr	r2, [r1, #4]
 8012f90:	4313      	orrs	r3, r2
 8012f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012f96:	68ca      	ldr	r2, [r1, #12]
 8012f98:	4313      	orrs	r3, r2
 8012f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f9e:	694a      	ldr	r2, [r1, #20]
 8012fa0:	4313      	orrs	r3, r2
 8012fa2:	6003      	str	r3, [r0, #0]
 8012fa4:	688b      	ldr	r3, [r1, #8]
 8012fa6:	62c3      	str	r3, [r0, #44]	; 0x2c
 8012fa8:	680b      	ldr	r3, [r1, #0]
 8012faa:	6283      	str	r3, [r0, #40]	; 0x28
 8012fac:	2301      	movs	r3, #1
 8012fae:	6143      	str	r3, [r0, #20]
 8012fb0:	4770      	bx	lr
 8012fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012fb6:	684a      	ldr	r2, [r1, #4]
 8012fb8:	4313      	orrs	r3, r2
 8012fba:	e7ea      	b.n	8012f92 <TIM_Base_SetConfig+0x5a>
 8012fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012fc0:	684a      	ldr	r2, [r1, #4]
 8012fc2:	4313      	orrs	r3, r2
 8012fc4:	e7e5      	b.n	8012f92 <TIM_Base_SetConfig+0x5a>
 8012fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012fca:	684a      	ldr	r2, [r1, #4]
 8012fcc:	4313      	orrs	r3, r2
 8012fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012fd2:	68ca      	ldr	r2, [r1, #12]
 8012fd4:	4313      	orrs	r3, r2
 8012fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012fda:	694a      	ldr	r2, [r1, #20]
 8012fdc:	4313      	orrs	r3, r2
 8012fde:	6003      	str	r3, [r0, #0]
 8012fe0:	688b      	ldr	r3, [r1, #8]
 8012fe2:	62c3      	str	r3, [r0, #44]	; 0x2c
 8012fe4:	680b      	ldr	r3, [r1, #0]
 8012fe6:	6283      	str	r3, [r0, #40]	; 0x28
 8012fe8:	690a      	ldr	r2, [r1, #16]
 8012fea:	4b04      	ldr	r3, [pc, #16]	; (8012ffc <TIM_Base_SetConfig+0xc4>)
 8012fec:	631a      	str	r2, [r3, #48]	; 0x30
 8012fee:	e7dd      	b.n	8012fac <TIM_Base_SetConfig+0x74>
 8012ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ff4:	684a      	ldr	r2, [r1, #4]
 8012ff6:	4313      	orrs	r3, r2
 8012ff8:	e7cb      	b.n	8012f92 <TIM_Base_SetConfig+0x5a>
 8012ffa:	bf00      	nop
 8012ffc:	40010000 	.word	0x40010000

08013000 <HAL_TIM_Base_Init>:
 8013000:	b340      	cbz	r0, 8013054 <HAL_TIM_Base_Init+0x54>
 8013002:	b510      	push	{r4, lr}
 8013004:	4604      	mov	r4, r0
 8013006:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 801300a:	b1f3      	cbz	r3, 801304a <HAL_TIM_Base_Init+0x4a>
 801300c:	2302      	movs	r3, #2
 801300e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8013012:	4621      	mov	r1, r4
 8013014:	f851 0b04 	ldr.w	r0, [r1], #4
 8013018:	f7ff ff8e 	bl	8012f38 <TIM_Base_SetConfig>
 801301c:	2301      	movs	r3, #1
 801301e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8013022:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8013026:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 801302a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 801302e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8013032:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801303a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801303e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013042:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8013046:	2000      	movs	r0, #0
 8013048:	bd10      	pop	{r4, pc}
 801304a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 801304e:	f7ff fe15 	bl	8012c7c <HAL_TIM_Base_MspInit>
 8013052:	e7db      	b.n	801300c <HAL_TIM_Base_Init+0xc>
 8013054:	2001      	movs	r0, #1
 8013056:	4770      	bx	lr

08013058 <HAL_TIM_PWM_Init>:
 8013058:	b340      	cbz	r0, 80130ac <HAL_TIM_PWM_Init+0x54>
 801305a:	b510      	push	{r4, lr}
 801305c:	4604      	mov	r4, r0
 801305e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8013062:	b1f3      	cbz	r3, 80130a2 <HAL_TIM_PWM_Init+0x4a>
 8013064:	2302      	movs	r3, #2
 8013066:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 801306a:	4621      	mov	r1, r4
 801306c:	f851 0b04 	ldr.w	r0, [r1], #4
 8013070:	f7ff ff62 	bl	8012f38 <TIM_Base_SetConfig>
 8013074:	2301      	movs	r3, #1
 8013076:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 801307a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 801307e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8013082:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8013086:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 801308a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801308e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013092:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8013096:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801309a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 801309e:	2000      	movs	r0, #0
 80130a0:	bd10      	pop	{r4, pc}
 80130a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80130a6:	f7fb f837 	bl	800e118 <HAL_TIM_PWM_MspInit>
 80130aa:	e7db      	b.n	8013064 <HAL_TIM_PWM_Init+0xc>
 80130ac:	2001      	movs	r0, #1
 80130ae:	4770      	bx	lr

080130b0 <TIM_OC2_SetConfig>:
 80130b0:	b470      	push	{r4, r5, r6}
 80130b2:	6a03      	ldr	r3, [r0, #32]
 80130b4:	f023 0310 	bic.w	r3, r3, #16
 80130b8:	6203      	str	r3, [r0, #32]
 80130ba:	6a03      	ldr	r3, [r0, #32]
 80130bc:	6844      	ldr	r4, [r0, #4]
 80130be:	6982      	ldr	r2, [r0, #24]
 80130c0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80130c4:	680d      	ldr	r5, [r1, #0]
 80130c6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80130ca:	f023 0320 	bic.w	r3, r3, #32
 80130ce:	688d      	ldr	r5, [r1, #8]
 80130d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80130d4:	4d0c      	ldr	r5, [pc, #48]	; (8013108 <TIM_OC2_SetConfig+0x58>)
 80130d6:	42a8      	cmp	r0, r5
 80130d8:	d006      	beq.n	80130e8 <TIM_OC2_SetConfig+0x38>
 80130da:	6044      	str	r4, [r0, #4]
 80130dc:	6182      	str	r2, [r0, #24]
 80130de:	684a      	ldr	r2, [r1, #4]
 80130e0:	6382      	str	r2, [r0, #56]	; 0x38
 80130e2:	6203      	str	r3, [r0, #32]
 80130e4:	bc70      	pop	{r4, r5, r6}
 80130e6:	4770      	bx	lr
 80130e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80130ec:	68cd      	ldr	r5, [r1, #12]
 80130ee:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80130f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80130f6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 80130fa:	694d      	ldr	r5, [r1, #20]
 80130fc:	698e      	ldr	r6, [r1, #24]
 80130fe:	4335      	orrs	r5, r6
 8013100:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8013104:	e7e9      	b.n	80130da <TIM_OC2_SetConfig+0x2a>
 8013106:	bf00      	nop
 8013108:	40010000 	.word	0x40010000

0801310c <HAL_TIM_PWM_ConfigChannel>:
 801310c:	b538      	push	{r3, r4, r5, lr}
 801310e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8013112:	2b01      	cmp	r3, #1
 8013114:	d066      	beq.n	80131e4 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8013116:	4604      	mov	r4, r0
 8013118:	460d      	mov	r5, r1
 801311a:	2301      	movs	r3, #1
 801311c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8013120:	2a0c      	cmp	r2, #12
 8013122:	d85a      	bhi.n	80131da <HAL_TIM_PWM_ConfigChannel+0xce>
 8013124:	e8df f002 	tbb	[pc, r2]
 8013128:	59595907 	.word	0x59595907
 801312c:	5959591b 	.word	0x5959591b
 8013130:	59595930 	.word	0x59595930
 8013134:	44          	.byte	0x44
 8013135:	00          	.byte	0x00
 8013136:	6800      	ldr	r0, [r0, #0]
 8013138:	f7ff fd26 	bl	8012b88 <TIM_OC1_SetConfig>
 801313c:	6822      	ldr	r2, [r4, #0]
 801313e:	6993      	ldr	r3, [r2, #24]
 8013140:	f043 0308 	orr.w	r3, r3, #8
 8013144:	6193      	str	r3, [r2, #24]
 8013146:	6822      	ldr	r2, [r4, #0]
 8013148:	6993      	ldr	r3, [r2, #24]
 801314a:	f023 0304 	bic.w	r3, r3, #4
 801314e:	6193      	str	r3, [r2, #24]
 8013150:	6822      	ldr	r2, [r4, #0]
 8013152:	6993      	ldr	r3, [r2, #24]
 8013154:	6929      	ldr	r1, [r5, #16]
 8013156:	430b      	orrs	r3, r1
 8013158:	6193      	str	r3, [r2, #24]
 801315a:	2000      	movs	r0, #0
 801315c:	e03e      	b.n	80131dc <HAL_TIM_PWM_ConfigChannel+0xd0>
 801315e:	6800      	ldr	r0, [r0, #0]
 8013160:	f7ff ffa6 	bl	80130b0 <TIM_OC2_SetConfig>
 8013164:	6822      	ldr	r2, [r4, #0]
 8013166:	6993      	ldr	r3, [r2, #24]
 8013168:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801316c:	6193      	str	r3, [r2, #24]
 801316e:	6822      	ldr	r2, [r4, #0]
 8013170:	6993      	ldr	r3, [r2, #24]
 8013172:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013176:	6193      	str	r3, [r2, #24]
 8013178:	6822      	ldr	r2, [r4, #0]
 801317a:	6993      	ldr	r3, [r2, #24]
 801317c:	6929      	ldr	r1, [r5, #16]
 801317e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8013182:	6193      	str	r3, [r2, #24]
 8013184:	2000      	movs	r0, #0
 8013186:	e029      	b.n	80131dc <HAL_TIM_PWM_ConfigChannel+0xd0>
 8013188:	6800      	ldr	r0, [r0, #0]
 801318a:	f7ff fd27 	bl	8012bdc <TIM_OC3_SetConfig>
 801318e:	6822      	ldr	r2, [r4, #0]
 8013190:	69d3      	ldr	r3, [r2, #28]
 8013192:	f043 0308 	orr.w	r3, r3, #8
 8013196:	61d3      	str	r3, [r2, #28]
 8013198:	6822      	ldr	r2, [r4, #0]
 801319a:	69d3      	ldr	r3, [r2, #28]
 801319c:	f023 0304 	bic.w	r3, r3, #4
 80131a0:	61d3      	str	r3, [r2, #28]
 80131a2:	6822      	ldr	r2, [r4, #0]
 80131a4:	69d3      	ldr	r3, [r2, #28]
 80131a6:	6929      	ldr	r1, [r5, #16]
 80131a8:	430b      	orrs	r3, r1
 80131aa:	61d3      	str	r3, [r2, #28]
 80131ac:	2000      	movs	r0, #0
 80131ae:	e015      	b.n	80131dc <HAL_TIM_PWM_ConfigChannel+0xd0>
 80131b0:	6800      	ldr	r0, [r0, #0]
 80131b2:	f7ff fd3f 	bl	8012c34 <TIM_OC4_SetConfig>
 80131b6:	6822      	ldr	r2, [r4, #0]
 80131b8:	69d3      	ldr	r3, [r2, #28]
 80131ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80131be:	61d3      	str	r3, [r2, #28]
 80131c0:	6822      	ldr	r2, [r4, #0]
 80131c2:	69d3      	ldr	r3, [r2, #28]
 80131c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80131c8:	61d3      	str	r3, [r2, #28]
 80131ca:	6822      	ldr	r2, [r4, #0]
 80131cc:	69d3      	ldr	r3, [r2, #28]
 80131ce:	6929      	ldr	r1, [r5, #16]
 80131d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80131d4:	61d3      	str	r3, [r2, #28]
 80131d6:	2000      	movs	r0, #0
 80131d8:	e000      	b.n	80131dc <HAL_TIM_PWM_ConfigChannel+0xd0>
 80131da:	2001      	movs	r0, #1
 80131dc:	2300      	movs	r3, #0
 80131de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80131e2:	bd38      	pop	{r3, r4, r5, pc}
 80131e4:	2002      	movs	r0, #2
 80131e6:	e7fc      	b.n	80131e2 <HAL_TIM_PWM_ConfigChannel+0xd6>

080131e8 <TIM_CCxChannelCmd>:
 80131e8:	b410      	push	{r4}
 80131ea:	f001 011f 	and.w	r1, r1, #31
 80131ee:	6a03      	ldr	r3, [r0, #32]
 80131f0:	2401      	movs	r4, #1
 80131f2:	408c      	lsls	r4, r1
 80131f4:	ea23 0304 	bic.w	r3, r3, r4
 80131f8:	6203      	str	r3, [r0, #32]
 80131fa:	6a03      	ldr	r3, [r0, #32]
 80131fc:	408a      	lsls	r2, r1
 80131fe:	431a      	orrs	r2, r3
 8013200:	6202      	str	r2, [r0, #32]
 8013202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013206:	4770      	bx	lr

08013208 <HAL_TIM_PWM_Start>:
 8013208:	b510      	push	{r4, lr}
 801320a:	4604      	mov	r4, r0
 801320c:	460b      	mov	r3, r1
 801320e:	bb41      	cbnz	r1, 8013262 <HAL_TIM_PWM_Start+0x5a>
 8013210:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8013214:	b2d2      	uxtb	r2, r2
 8013216:	2a01      	cmp	r2, #1
 8013218:	d154      	bne.n	80132c4 <HAL_TIM_PWM_Start+0xbc>
 801321a:	2202      	movs	r2, #2
 801321c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 8013220:	2201      	movs	r2, #1
 8013222:	4619      	mov	r1, r3
 8013224:	6820      	ldr	r0, [r4, #0]
 8013226:	f7ff ffdf 	bl	80131e8 <TIM_CCxChannelCmd>
 801322a:	6823      	ldr	r3, [r4, #0]
 801322c:	4a2a      	ldr	r2, [pc, #168]	; (80132d8 <HAL_TIM_PWM_Start+0xd0>)
 801322e:	4293      	cmp	r3, r2
 8013230:	d036      	beq.n	80132a0 <HAL_TIM_PWM_Start+0x98>
 8013232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013236:	d03a      	beq.n	80132ae <HAL_TIM_PWM_Start+0xa6>
 8013238:	4a28      	ldr	r2, [pc, #160]	; (80132dc <HAL_TIM_PWM_Start+0xd4>)
 801323a:	4293      	cmp	r3, r2
 801323c:	d037      	beq.n	80132ae <HAL_TIM_PWM_Start+0xa6>
 801323e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013242:	4293      	cmp	r3, r2
 8013244:	d033      	beq.n	80132ae <HAL_TIM_PWM_Start+0xa6>
 8013246:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801324a:	4293      	cmp	r3, r2
 801324c:	d02f      	beq.n	80132ae <HAL_TIM_PWM_Start+0xa6>
 801324e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8013252:	4293      	cmp	r3, r2
 8013254:	d02b      	beq.n	80132ae <HAL_TIM_PWM_Start+0xa6>
 8013256:	681a      	ldr	r2, [r3, #0]
 8013258:	f042 0201 	orr.w	r2, r2, #1
 801325c:	601a      	str	r2, [r3, #0]
 801325e:	2000      	movs	r0, #0
 8013260:	e02f      	b.n	80132c2 <HAL_TIM_PWM_Start+0xba>
 8013262:	2904      	cmp	r1, #4
 8013264:	d00a      	beq.n	801327c <HAL_TIM_PWM_Start+0x74>
 8013266:	2908      	cmp	r1, #8
 8013268:	d011      	beq.n	801328e <HAL_TIM_PWM_Start+0x86>
 801326a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 801326e:	b2d2      	uxtb	r2, r2
 8013270:	2a01      	cmp	r2, #1
 8013272:	d12d      	bne.n	80132d0 <HAL_TIM_PWM_Start+0xc8>
 8013274:	2202      	movs	r2, #2
 8013276:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
 801327a:	e7d1      	b.n	8013220 <HAL_TIM_PWM_Start+0x18>
 801327c:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 8013280:	b2d2      	uxtb	r2, r2
 8013282:	2a01      	cmp	r2, #1
 8013284:	d120      	bne.n	80132c8 <HAL_TIM_PWM_Start+0xc0>
 8013286:	2202      	movs	r2, #2
 8013288:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
 801328c:	e7c8      	b.n	8013220 <HAL_TIM_PWM_Start+0x18>
 801328e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8013292:	b2d2      	uxtb	r2, r2
 8013294:	2a01      	cmp	r2, #1
 8013296:	d119      	bne.n	80132cc <HAL_TIM_PWM_Start+0xc4>
 8013298:	2202      	movs	r2, #2
 801329a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 801329e:	e7bf      	b.n	8013220 <HAL_TIM_PWM_Start+0x18>
 80132a0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80132a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80132a6:	6453      	str	r3, [r2, #68]	; 0x44
 80132a8:	6823      	ldr	r3, [r4, #0]
 80132aa:	4293      	cmp	r3, r2
 80132ac:	d1c1      	bne.n	8013232 <HAL_TIM_PWM_Start+0x2a>
 80132ae:	689a      	ldr	r2, [r3, #8]
 80132b0:	f002 0207 	and.w	r2, r2, #7
 80132b4:	2a06      	cmp	r2, #6
 80132b6:	d00d      	beq.n	80132d4 <HAL_TIM_PWM_Start+0xcc>
 80132b8:	681a      	ldr	r2, [r3, #0]
 80132ba:	f042 0201 	orr.w	r2, r2, #1
 80132be:	601a      	str	r2, [r3, #0]
 80132c0:	2000      	movs	r0, #0
 80132c2:	bd10      	pop	{r4, pc}
 80132c4:	2001      	movs	r0, #1
 80132c6:	e7fc      	b.n	80132c2 <HAL_TIM_PWM_Start+0xba>
 80132c8:	2001      	movs	r0, #1
 80132ca:	e7fa      	b.n	80132c2 <HAL_TIM_PWM_Start+0xba>
 80132cc:	2001      	movs	r0, #1
 80132ce:	e7f8      	b.n	80132c2 <HAL_TIM_PWM_Start+0xba>
 80132d0:	2001      	movs	r0, #1
 80132d2:	e7f6      	b.n	80132c2 <HAL_TIM_PWM_Start+0xba>
 80132d4:	2000      	movs	r0, #0
 80132d6:	e7f4      	b.n	80132c2 <HAL_TIM_PWM_Start+0xba>
 80132d8:	40010000 	.word	0x40010000
 80132dc:	40000400 	.word	0x40000400

080132e0 <HAL_TIM_PWM_Stop>:
 80132e0:	b538      	push	{r3, r4, r5, lr}
 80132e2:	4604      	mov	r4, r0
 80132e4:	460d      	mov	r5, r1
 80132e6:	2200      	movs	r2, #0
 80132e8:	6800      	ldr	r0, [r0, #0]
 80132ea:	f7ff ff7d 	bl	80131e8 <TIM_CCxChannelCmd>
 80132ee:	6822      	ldr	r2, [r4, #0]
 80132f0:	4b1b      	ldr	r3, [pc, #108]	; (8013360 <HAL_TIM_PWM_Stop+0x80>)
 80132f2:	429a      	cmp	r2, r3
 80132f4:	d014      	beq.n	8013320 <HAL_TIM_PWM_Stop+0x40>
 80132f6:	6823      	ldr	r3, [r4, #0]
 80132f8:	6a19      	ldr	r1, [r3, #32]
 80132fa:	f241 1211 	movw	r2, #4369	; 0x1111
 80132fe:	4211      	tst	r1, r2
 8013300:	d108      	bne.n	8013314 <HAL_TIM_PWM_Stop+0x34>
 8013302:	6a19      	ldr	r1, [r3, #32]
 8013304:	f240 4244 	movw	r2, #1092	; 0x444
 8013308:	4211      	tst	r1, r2
 801330a:	d103      	bne.n	8013314 <HAL_TIM_PWM_Stop+0x34>
 801330c:	681a      	ldr	r2, [r3, #0]
 801330e:	f022 0201 	bic.w	r2, r2, #1
 8013312:	601a      	str	r2, [r3, #0]
 8013314:	b9ad      	cbnz	r5, 8013342 <HAL_TIM_PWM_Stop+0x62>
 8013316:	2301      	movs	r3, #1
 8013318:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 801331c:	2000      	movs	r0, #0
 801331e:	bd38      	pop	{r3, r4, r5, pc}
 8013320:	6a1a      	ldr	r2, [r3, #32]
 8013322:	f241 1311 	movw	r3, #4369	; 0x1111
 8013326:	421a      	tst	r2, r3
 8013328:	d1e5      	bne.n	80132f6 <HAL_TIM_PWM_Stop+0x16>
 801332a:	4b0d      	ldr	r3, [pc, #52]	; (8013360 <HAL_TIM_PWM_Stop+0x80>)
 801332c:	6a1a      	ldr	r2, [r3, #32]
 801332e:	f240 4344 	movw	r3, #1092	; 0x444
 8013332:	421a      	tst	r2, r3
 8013334:	d1df      	bne.n	80132f6 <HAL_TIM_PWM_Stop+0x16>
 8013336:	4a0a      	ldr	r2, [pc, #40]	; (8013360 <HAL_TIM_PWM_Stop+0x80>)
 8013338:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801333a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801333e:	6453      	str	r3, [r2, #68]	; 0x44
 8013340:	e7d9      	b.n	80132f6 <HAL_TIM_PWM_Stop+0x16>
 8013342:	2d04      	cmp	r5, #4
 8013344:	d008      	beq.n	8013358 <HAL_TIM_PWM_Stop+0x78>
 8013346:	2d08      	cmp	r5, #8
 8013348:	f04f 0301 	mov.w	r3, #1
 801334c:	bf0c      	ite	eq
 801334e:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8013352:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 8013356:	e7e1      	b.n	801331c <HAL_TIM_PWM_Stop+0x3c>
 8013358:	2301      	movs	r3, #1
 801335a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 801335e:	e7dd      	b.n	801331c <HAL_TIM_PWM_Stop+0x3c>
 8013360:	40010000 	.word	0x40010000

08013364 <HAL_TIMEx_MasterConfigSynchronization>:
 8013364:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8013368:	2b01      	cmp	r3, #1
 801336a:	d033      	beq.n	80133d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 801336c:	b430      	push	{r4, r5}
 801336e:	2301      	movs	r3, #1
 8013370:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8013374:	2302      	movs	r3, #2
 8013376:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 801337a:	6804      	ldr	r4, [r0, #0]
 801337c:	6863      	ldr	r3, [r4, #4]
 801337e:	68a2      	ldr	r2, [r4, #8]
 8013380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013384:	680d      	ldr	r5, [r1, #0]
 8013386:	432b      	orrs	r3, r5
 8013388:	6063      	str	r3, [r4, #4]
 801338a:	6803      	ldr	r3, [r0, #0]
 801338c:	4c12      	ldr	r4, [pc, #72]	; (80133d8 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 801338e:	42a3      	cmp	r3, r4
 8013390:	d012      	beq.n	80133b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8013392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013396:	d00f      	beq.n	80133b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8013398:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 801339c:	42a3      	cmp	r3, r4
 801339e:	d00b      	beq.n	80133b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80133a0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80133a4:	42a3      	cmp	r3, r4
 80133a6:	d007      	beq.n	80133b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80133a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80133ac:	42a3      	cmp	r3, r4
 80133ae:	d003      	beq.n	80133b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80133b0:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 80133b4:	42a3      	cmp	r3, r4
 80133b6:	d104      	bne.n	80133c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80133b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80133bc:	6849      	ldr	r1, [r1, #4]
 80133be:	430a      	orrs	r2, r1
 80133c0:	609a      	str	r2, [r3, #8]
 80133c2:	2301      	movs	r3, #1
 80133c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80133c8:	2300      	movs	r3, #0
 80133ca:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80133ce:	4618      	mov	r0, r3
 80133d0:	bc30      	pop	{r4, r5}
 80133d2:	4770      	bx	lr
 80133d4:	2002      	movs	r0, #2
 80133d6:	4770      	bx	lr
 80133d8:	40010000 	.word	0x40010000

080133dc <HAL_TIMEx_CommutCallback>:
 80133dc:	4770      	bx	lr

080133de <HAL_TIMEx_BreakCallback>:
 80133de:	4770      	bx	lr

080133e0 <UART_SetConfig>:
 80133e0:	b570      	push	{r4, r5, r6, lr}
 80133e2:	4604      	mov	r4, r0
 80133e4:	6802      	ldr	r2, [r0, #0]
 80133e6:	6913      	ldr	r3, [r2, #16]
 80133e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80133ec:	68c1      	ldr	r1, [r0, #12]
 80133ee:	430b      	orrs	r3, r1
 80133f0:	6113      	str	r3, [r2, #16]
 80133f2:	6801      	ldr	r1, [r0, #0]
 80133f4:	68ca      	ldr	r2, [r1, #12]
 80133f6:	6883      	ldr	r3, [r0, #8]
 80133f8:	6900      	ldr	r0, [r0, #16]
 80133fa:	4303      	orrs	r3, r0
 80133fc:	6960      	ldr	r0, [r4, #20]
 80133fe:	4303      	orrs	r3, r0
 8013400:	69e0      	ldr	r0, [r4, #28]
 8013402:	4303      	orrs	r3, r0
 8013404:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8013408:	f022 020c 	bic.w	r2, r2, #12
 801340c:	4313      	orrs	r3, r2
 801340e:	60cb      	str	r3, [r1, #12]
 8013410:	6822      	ldr	r2, [r4, #0]
 8013412:	6953      	ldr	r3, [r2, #20]
 8013414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013418:	69a1      	ldr	r1, [r4, #24]
 801341a:	430b      	orrs	r3, r1
 801341c:	6153      	str	r3, [r2, #20]
 801341e:	6823      	ldr	r3, [r4, #0]
 8013420:	4a31      	ldr	r2, [pc, #196]	; (80134e8 <UART_SetConfig+0x108>)
 8013422:	4293      	cmp	r3, r2
 8013424:	d006      	beq.n	8013434 <UART_SetConfig+0x54>
 8013426:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801342a:	4293      	cmp	r3, r2
 801342c:	d002      	beq.n	8013434 <UART_SetConfig+0x54>
 801342e:	f7fe ff79 	bl	8012324 <HAL_RCC_GetPCLK1Freq>
 8013432:	e001      	b.n	8013438 <UART_SetConfig+0x58>
 8013434:	f7fe ff86 	bl	8012344 <HAL_RCC_GetPCLK2Freq>
 8013438:	69e3      	ldr	r3, [r4, #28]
 801343a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801343e:	d025      	beq.n	801348c <UART_SetConfig+0xac>
 8013440:	2600      	movs	r6, #0
 8013442:	1805      	adds	r5, r0, r0
 8013444:	eb46 0106 	adc.w	r1, r6, r6
 8013448:	182d      	adds	r5, r5, r0
 801344a:	eb46 0101 	adc.w	r1, r6, r1
 801344e:	00cb      	lsls	r3, r1, #3
 8013450:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8013454:	00ea      	lsls	r2, r5, #3
 8013456:	4615      	mov	r5, r2
 8013458:	4619      	mov	r1, r3
 801345a:	6863      	ldr	r3, [r4, #4]
 801345c:	009a      	lsls	r2, r3, #2
 801345e:	0f9b      	lsrs	r3, r3, #30
 8013460:	1828      	adds	r0, r5, r0
 8013462:	eb46 0101 	adc.w	r1, r6, r1
 8013466:	f7f8 fe43 	bl	800c0f0 <__aeabi_uldivmod>
 801346a:	6824      	ldr	r4, [r4, #0]
 801346c:	491f      	ldr	r1, [pc, #124]	; (80134ec <UART_SetConfig+0x10c>)
 801346e:	fba1 3200 	umull	r3, r2, r1, r0
 8013472:	0952      	lsrs	r2, r2, #5
 8013474:	2364      	movs	r3, #100	; 0x64
 8013476:	fb03 0312 	mls	r3, r3, r2, r0
 801347a:	011b      	lsls	r3, r3, #4
 801347c:	3332      	adds	r3, #50	; 0x32
 801347e:	fba1 1303 	umull	r1, r3, r1, r3
 8013482:	0112      	lsls	r2, r2, #4
 8013484:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8013488:	60a3      	str	r3, [r4, #8]
 801348a:	bd70      	pop	{r4, r5, r6, pc}
 801348c:	2600      	movs	r6, #0
 801348e:	1805      	adds	r5, r0, r0
 8013490:	eb46 0106 	adc.w	r1, r6, r6
 8013494:	182d      	adds	r5, r5, r0
 8013496:	eb46 0101 	adc.w	r1, r6, r1
 801349a:	00cb      	lsls	r3, r1, #3
 801349c:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80134a0:	00ea      	lsls	r2, r5, #3
 80134a2:	4615      	mov	r5, r2
 80134a4:	4619      	mov	r1, r3
 80134a6:	6862      	ldr	r2, [r4, #4]
 80134a8:	4633      	mov	r3, r6
 80134aa:	1892      	adds	r2, r2, r2
 80134ac:	eb46 0303 	adc.w	r3, r6, r3
 80134b0:	1828      	adds	r0, r5, r0
 80134b2:	eb46 0101 	adc.w	r1, r6, r1
 80134b6:	f7f8 fe1b 	bl	800c0f0 <__aeabi_uldivmod>
 80134ba:	4d0c      	ldr	r5, [pc, #48]	; (80134ec <UART_SetConfig+0x10c>)
 80134bc:	fba5 3200 	umull	r3, r2, r5, r0
 80134c0:	0951      	lsrs	r1, r2, #5
 80134c2:	2364      	movs	r3, #100	; 0x64
 80134c4:	fb03 0311 	mls	r3, r3, r1, r0
 80134c8:	00db      	lsls	r3, r3, #3
 80134ca:	3332      	adds	r3, #50	; 0x32
 80134cc:	fba5 2303 	umull	r2, r3, r5, r3
 80134d0:	6820      	ldr	r0, [r4, #0]
 80134d2:	f3c3 1242 	ubfx	r2, r3, #5, #3
 80134d6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80134da:	091b      	lsrs	r3, r3, #4
 80134dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80134e0:	4413      	add	r3, r2
 80134e2:	6083      	str	r3, [r0, #8]
 80134e4:	e7d1      	b.n	801348a <UART_SetConfig+0xaa>
 80134e6:	bf00      	nop
 80134e8:	40011000 	.word	0x40011000
 80134ec:	51eb851f 	.word	0x51eb851f

080134f0 <HAL_UART_Init>:
 80134f0:	b358      	cbz	r0, 801354a <HAL_UART_Init+0x5a>
 80134f2:	b510      	push	{r4, lr}
 80134f4:	4604      	mov	r4, r0
 80134f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80134fa:	b30b      	cbz	r3, 8013540 <HAL_UART_Init+0x50>
 80134fc:	2324      	movs	r3, #36	; 0x24
 80134fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8013502:	6822      	ldr	r2, [r4, #0]
 8013504:	68d3      	ldr	r3, [r2, #12]
 8013506:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801350a:	60d3      	str	r3, [r2, #12]
 801350c:	4620      	mov	r0, r4
 801350e:	f7ff ff67 	bl	80133e0 <UART_SetConfig>
 8013512:	6822      	ldr	r2, [r4, #0]
 8013514:	6913      	ldr	r3, [r2, #16]
 8013516:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 801351a:	6113      	str	r3, [r2, #16]
 801351c:	6822      	ldr	r2, [r4, #0]
 801351e:	6953      	ldr	r3, [r2, #20]
 8013520:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8013524:	6153      	str	r3, [r2, #20]
 8013526:	6822      	ldr	r2, [r4, #0]
 8013528:	68d3      	ldr	r3, [r2, #12]
 801352a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801352e:	60d3      	str	r3, [r2, #12]
 8013530:	2000      	movs	r0, #0
 8013532:	6420      	str	r0, [r4, #64]	; 0x40
 8013534:	2320      	movs	r3, #32
 8013536:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 801353a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 801353e:	bd10      	pop	{r4, pc}
 8013540:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8013544:	f7fa fe3e 	bl	800e1c4 <HAL_UART_MspInit>
 8013548:	e7d8      	b.n	80134fc <HAL_UART_Init+0xc>
 801354a:	2001      	movs	r0, #1
 801354c:	4770      	bx	lr

0801354e <HAL_UART_DeInit>:
 801354e:	b1a8      	cbz	r0, 801357c <HAL_UART_DeInit+0x2e>
 8013550:	b510      	push	{r4, lr}
 8013552:	4604      	mov	r4, r0
 8013554:	2324      	movs	r3, #36	; 0x24
 8013556:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 801355a:	6802      	ldr	r2, [r0, #0]
 801355c:	68d3      	ldr	r3, [r2, #12]
 801355e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013562:	60d3      	str	r3, [r2, #12]
 8013564:	f7fa fe68 	bl	800e238 <HAL_UART_MspDeInit>
 8013568:	2000      	movs	r0, #0
 801356a:	6420      	str	r0, [r4, #64]	; 0x40
 801356c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 8013570:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
 8013574:	6320      	str	r0, [r4, #48]	; 0x30
 8013576:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 801357a:	bd10      	pop	{r4, pc}
 801357c:	2001      	movs	r0, #1
 801357e:	4770      	bx	lr

08013580 <USB_CoreReset>:
 8013580:	b082      	sub	sp, #8
 8013582:	2300      	movs	r3, #0
 8013584:	9301      	str	r3, [sp, #4]
 8013586:	4a10      	ldr	r2, [pc, #64]	; (80135c8 <USB_CoreReset+0x48>)
 8013588:	9b01      	ldr	r3, [sp, #4]
 801358a:	3301      	adds	r3, #1
 801358c:	9301      	str	r3, [sp, #4]
 801358e:	4293      	cmp	r3, r2
 8013590:	d814      	bhi.n	80135bc <USB_CoreReset+0x3c>
 8013592:	6903      	ldr	r3, [r0, #16]
 8013594:	2b00      	cmp	r3, #0
 8013596:	daf7      	bge.n	8013588 <USB_CoreReset+0x8>
 8013598:	2300      	movs	r3, #0
 801359a:	9301      	str	r3, [sp, #4]
 801359c:	6903      	ldr	r3, [r0, #16]
 801359e:	f043 0301 	orr.w	r3, r3, #1
 80135a2:	6103      	str	r3, [r0, #16]
 80135a4:	4a08      	ldr	r2, [pc, #32]	; (80135c8 <USB_CoreReset+0x48>)
 80135a6:	9b01      	ldr	r3, [sp, #4]
 80135a8:	3301      	adds	r3, #1
 80135aa:	9301      	str	r3, [sp, #4]
 80135ac:	4293      	cmp	r3, r2
 80135ae:	d808      	bhi.n	80135c2 <USB_CoreReset+0x42>
 80135b0:	6903      	ldr	r3, [r0, #16]
 80135b2:	f013 0f01 	tst.w	r3, #1
 80135b6:	d1f6      	bne.n	80135a6 <USB_CoreReset+0x26>
 80135b8:	2000      	movs	r0, #0
 80135ba:	e000      	b.n	80135be <USB_CoreReset+0x3e>
 80135bc:	2003      	movs	r0, #3
 80135be:	b002      	add	sp, #8
 80135c0:	4770      	bx	lr
 80135c2:	2003      	movs	r0, #3
 80135c4:	e7fb      	b.n	80135be <USB_CoreReset+0x3e>
 80135c6:	bf00      	nop
 80135c8:	00030d40 	.word	0x00030d40

080135cc <USB_CoreInit>:
 80135cc:	b084      	sub	sp, #16
 80135ce:	b510      	push	{r4, lr}
 80135d0:	4604      	mov	r4, r0
 80135d2:	a803      	add	r0, sp, #12
 80135d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80135d8:	9b08      	ldr	r3, [sp, #32]
 80135da:	2b01      	cmp	r3, #1
 80135dc:	d11f      	bne.n	801361e <USB_CoreInit+0x52>
 80135de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80135e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80135e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80135e6:	68e3      	ldr	r3, [r4, #12]
 80135e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80135ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80135f0:	60e3      	str	r3, [r4, #12]
 80135f2:	68e3      	ldr	r3, [r4, #12]
 80135f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80135f8:	60e3      	str	r3, [r4, #12]
 80135fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80135fc:	2b01      	cmp	r3, #1
 80135fe:	d009      	beq.n	8013614 <USB_CoreInit+0x48>
 8013600:	4620      	mov	r0, r4
 8013602:	f7ff ffbd 	bl	8013580 <USB_CoreReset>
 8013606:	9b06      	ldr	r3, [sp, #24]
 8013608:	2b01      	cmp	r3, #1
 801360a:	d01b      	beq.n	8013644 <USB_CoreInit+0x78>
 801360c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013610:	b004      	add	sp, #16
 8013612:	4770      	bx	lr
 8013614:	68e3      	ldr	r3, [r4, #12]
 8013616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801361a:	60e3      	str	r3, [r4, #12]
 801361c:	e7f0      	b.n	8013600 <USB_CoreInit+0x34>
 801361e:	68e3      	ldr	r3, [r4, #12]
 8013620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013624:	60e3      	str	r3, [r4, #12]
 8013626:	4620      	mov	r0, r4
 8013628:	f7ff ffaa 	bl	8013580 <USB_CoreReset>
 801362c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801362e:	b923      	cbnz	r3, 801363a <USB_CoreInit+0x6e>
 8013630:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013636:	63a3      	str	r3, [r4, #56]	; 0x38
 8013638:	e7e5      	b.n	8013606 <USB_CoreInit+0x3a>
 801363a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801363c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013640:	63a3      	str	r3, [r4, #56]	; 0x38
 8013642:	e7e0      	b.n	8013606 <USB_CoreInit+0x3a>
 8013644:	68a3      	ldr	r3, [r4, #8]
 8013646:	f043 0306 	orr.w	r3, r3, #6
 801364a:	60a3      	str	r3, [r4, #8]
 801364c:	68a3      	ldr	r3, [r4, #8]
 801364e:	f043 0320 	orr.w	r3, r3, #32
 8013652:	60a3      	str	r3, [r4, #8]
 8013654:	e7da      	b.n	801360c <USB_CoreInit+0x40>
	...

08013658 <USB_SetTurnaroundTime>:
 8013658:	2a02      	cmp	r2, #2
 801365a:	d00a      	beq.n	8013672 <USB_SetTurnaroundTime+0x1a>
 801365c:	2109      	movs	r1, #9
 801365e:	68c2      	ldr	r2, [r0, #12]
 8013660:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8013664:	60c2      	str	r2, [r0, #12]
 8013666:	68c3      	ldr	r3, [r0, #12]
 8013668:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 801366c:	60c3      	str	r3, [r0, #12]
 801366e:	2000      	movs	r0, #0
 8013670:	4770      	bx	lr
 8013672:	4b23      	ldr	r3, [pc, #140]	; (8013700 <USB_SetTurnaroundTime+0xa8>)
 8013674:	440b      	add	r3, r1
 8013676:	4a23      	ldr	r2, [pc, #140]	; (8013704 <USB_SetTurnaroundTime+0xac>)
 8013678:	4293      	cmp	r3, r2
 801367a:	d930      	bls.n	80136de <USB_SetTurnaroundTime+0x86>
 801367c:	4b22      	ldr	r3, [pc, #136]	; (8013708 <USB_SetTurnaroundTime+0xb0>)
 801367e:	440b      	add	r3, r1
 8013680:	4a22      	ldr	r2, [pc, #136]	; (801370c <USB_SetTurnaroundTime+0xb4>)
 8013682:	4293      	cmp	r3, r2
 8013684:	d92d      	bls.n	80136e2 <USB_SetTurnaroundTime+0x8a>
 8013686:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 801368a:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 801368e:	4a20      	ldr	r2, [pc, #128]	; (8013710 <USB_SetTurnaroundTime+0xb8>)
 8013690:	4293      	cmp	r3, r2
 8013692:	d928      	bls.n	80136e6 <USB_SetTurnaroundTime+0x8e>
 8013694:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8013698:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 801369c:	4a1d      	ldr	r2, [pc, #116]	; (8013714 <USB_SetTurnaroundTime+0xbc>)
 801369e:	4293      	cmp	r3, r2
 80136a0:	d323      	bcc.n	80136ea <USB_SetTurnaroundTime+0x92>
 80136a2:	4b1d      	ldr	r3, [pc, #116]	; (8013718 <USB_SetTurnaroundTime+0xc0>)
 80136a4:	440b      	add	r3, r1
 80136a6:	4a1d      	ldr	r2, [pc, #116]	; (801371c <USB_SetTurnaroundTime+0xc4>)
 80136a8:	4293      	cmp	r3, r2
 80136aa:	d920      	bls.n	80136ee <USB_SetTurnaroundTime+0x96>
 80136ac:	4b1c      	ldr	r3, [pc, #112]	; (8013720 <USB_SetTurnaroundTime+0xc8>)
 80136ae:	440b      	add	r3, r1
 80136b0:	4a1c      	ldr	r2, [pc, #112]	; (8013724 <USB_SetTurnaroundTime+0xcc>)
 80136b2:	4293      	cmp	r3, r2
 80136b4:	d31d      	bcc.n	80136f2 <USB_SetTurnaroundTime+0x9a>
 80136b6:	4b1c      	ldr	r3, [pc, #112]	; (8013728 <USB_SetTurnaroundTime+0xd0>)
 80136b8:	440b      	add	r3, r1
 80136ba:	4a1c      	ldr	r2, [pc, #112]	; (801372c <USB_SetTurnaroundTime+0xd4>)
 80136bc:	4293      	cmp	r3, r2
 80136be:	d31a      	bcc.n	80136f6 <USB_SetTurnaroundTime+0x9e>
 80136c0:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 80136c4:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80136c8:	4a19      	ldr	r2, [pc, #100]	; (8013730 <USB_SetTurnaroundTime+0xd8>)
 80136ca:	4293      	cmp	r3, r2
 80136cc:	d315      	bcc.n	80136fa <USB_SetTurnaroundTime+0xa2>
 80136ce:	4b19      	ldr	r3, [pc, #100]	; (8013734 <USB_SetTurnaroundTime+0xdc>)
 80136d0:	440b      	add	r3, r1
 80136d2:	4919      	ldr	r1, [pc, #100]	; (8013738 <USB_SetTurnaroundTime+0xe0>)
 80136d4:	428b      	cmp	r3, r1
 80136d6:	bf34      	ite	cc
 80136d8:	2107      	movcc	r1, #7
 80136da:	2106      	movcs	r1, #6
 80136dc:	e7bf      	b.n	801365e <USB_SetTurnaroundTime+0x6>
 80136de:	210f      	movs	r1, #15
 80136e0:	e7bd      	b.n	801365e <USB_SetTurnaroundTime+0x6>
 80136e2:	210e      	movs	r1, #14
 80136e4:	e7bb      	b.n	801365e <USB_SetTurnaroundTime+0x6>
 80136e6:	210d      	movs	r1, #13
 80136e8:	e7b9      	b.n	801365e <USB_SetTurnaroundTime+0x6>
 80136ea:	210c      	movs	r1, #12
 80136ec:	e7b7      	b.n	801365e <USB_SetTurnaroundTime+0x6>
 80136ee:	210b      	movs	r1, #11
 80136f0:	e7b5      	b.n	801365e <USB_SetTurnaroundTime+0x6>
 80136f2:	210a      	movs	r1, #10
 80136f4:	e7b3      	b.n	801365e <USB_SetTurnaroundTime+0x6>
 80136f6:	2109      	movs	r1, #9
 80136f8:	e7b1      	b.n	801365e <USB_SetTurnaroundTime+0x6>
 80136fa:	2108      	movs	r1, #8
 80136fc:	e7af      	b.n	801365e <USB_SetTurnaroundTime+0x6>
 80136fe:	bf00      	nop
 8013700:	ff275340 	.word	0xff275340
 8013704:	000c34ff 	.word	0x000c34ff
 8013708:	ff1b1e40 	.word	0xff1b1e40
 801370c:	000f423f 	.word	0x000f423f
 8013710:	00124f7f 	.word	0x00124f7f
 8013714:	0013d620 	.word	0x0013d620
 8013718:	fee5b660 	.word	0xfee5b660
 801371c:	0016e35f 	.word	0x0016e35f
 8013720:	feced300 	.word	0xfeced300
 8013724:	001b7740 	.word	0x001b7740
 8013728:	feb35bc0 	.word	0xfeb35bc0
 801372c:	002191c0 	.word	0x002191c0
 8013730:	00387520 	.word	0x00387520
 8013734:	fe5954e0 	.word	0xfe5954e0
 8013738:	00419ce0 	.word	0x00419ce0

0801373c <USB_EnableGlobalInt>:
 801373c:	6883      	ldr	r3, [r0, #8]
 801373e:	f043 0301 	orr.w	r3, r3, #1
 8013742:	6083      	str	r3, [r0, #8]
 8013744:	2000      	movs	r0, #0
 8013746:	4770      	bx	lr

08013748 <USB_DisableGlobalInt>:
 8013748:	6883      	ldr	r3, [r0, #8]
 801374a:	f023 0301 	bic.w	r3, r3, #1
 801374e:	6083      	str	r3, [r0, #8]
 8013750:	2000      	movs	r0, #0
 8013752:	4770      	bx	lr

08013754 <USB_SetCurrentMode>:
 8013754:	b570      	push	{r4, r5, r6, lr}
 8013756:	4605      	mov	r5, r0
 8013758:	68c3      	ldr	r3, [r0, #12]
 801375a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801375e:	60c3      	str	r3, [r0, #12]
 8013760:	2901      	cmp	r1, #1
 8013762:	d015      	beq.n	8013790 <USB_SetCurrentMode+0x3c>
 8013764:	bb29      	cbnz	r1, 80137b2 <USB_SetCurrentMode+0x5e>
 8013766:	68c3      	ldr	r3, [r0, #12]
 8013768:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801376c:	60c3      	str	r3, [r0, #12]
 801376e:	2400      	movs	r4, #0
 8013770:	2601      	movs	r6, #1
 8013772:	4630      	mov	r0, r6
 8013774:	f7fc fe3c 	bl	80103f0 <HAL_Delay>
 8013778:	3401      	adds	r4, #1
 801377a:	696b      	ldr	r3, [r5, #20]
 801377c:	f013 0f01 	tst.w	r3, #1
 8013780:	d001      	beq.n	8013786 <USB_SetCurrentMode+0x32>
 8013782:	2c32      	cmp	r4, #50	; 0x32
 8013784:	d1f5      	bne.n	8013772 <USB_SetCurrentMode+0x1e>
 8013786:	2c32      	cmp	r4, #50	; 0x32
 8013788:	bf14      	ite	ne
 801378a:	2000      	movne	r0, #0
 801378c:	2001      	moveq	r0, #1
 801378e:	bd70      	pop	{r4, r5, r6, pc}
 8013790:	68c3      	ldr	r3, [r0, #12]
 8013792:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013796:	60c3      	str	r3, [r0, #12]
 8013798:	2400      	movs	r4, #0
 801379a:	2601      	movs	r6, #1
 801379c:	4630      	mov	r0, r6
 801379e:	f7fc fe27 	bl	80103f0 <HAL_Delay>
 80137a2:	3401      	adds	r4, #1
 80137a4:	696b      	ldr	r3, [r5, #20]
 80137a6:	f013 0f01 	tst.w	r3, #1
 80137aa:	d1ec      	bne.n	8013786 <USB_SetCurrentMode+0x32>
 80137ac:	2c32      	cmp	r4, #50	; 0x32
 80137ae:	d1f5      	bne.n	801379c <USB_SetCurrentMode+0x48>
 80137b0:	e7e9      	b.n	8013786 <USB_SetCurrentMode+0x32>
 80137b2:	2001      	movs	r0, #1
 80137b4:	e7eb      	b.n	801378e <USB_SetCurrentMode+0x3a>
	...

080137b8 <USB_FlushTxFifo>:
 80137b8:	b082      	sub	sp, #8
 80137ba:	2300      	movs	r3, #0
 80137bc:	9301      	str	r3, [sp, #4]
 80137be:	0189      	lsls	r1, r1, #6
 80137c0:	f041 0120 	orr.w	r1, r1, #32
 80137c4:	6101      	str	r1, [r0, #16]
 80137c6:	4a07      	ldr	r2, [pc, #28]	; (80137e4 <USB_FlushTxFifo+0x2c>)
 80137c8:	9b01      	ldr	r3, [sp, #4]
 80137ca:	3301      	adds	r3, #1
 80137cc:	9301      	str	r3, [sp, #4]
 80137ce:	4293      	cmp	r3, r2
 80137d0:	d805      	bhi.n	80137de <USB_FlushTxFifo+0x26>
 80137d2:	6903      	ldr	r3, [r0, #16]
 80137d4:	f013 0f20 	tst.w	r3, #32
 80137d8:	d1f6      	bne.n	80137c8 <USB_FlushTxFifo+0x10>
 80137da:	2000      	movs	r0, #0
 80137dc:	e000      	b.n	80137e0 <USB_FlushTxFifo+0x28>
 80137de:	2003      	movs	r0, #3
 80137e0:	b002      	add	sp, #8
 80137e2:	4770      	bx	lr
 80137e4:	00030d40 	.word	0x00030d40

080137e8 <USB_FlushRxFifo>:
 80137e8:	b082      	sub	sp, #8
 80137ea:	2300      	movs	r3, #0
 80137ec:	9301      	str	r3, [sp, #4]
 80137ee:	2310      	movs	r3, #16
 80137f0:	6103      	str	r3, [r0, #16]
 80137f2:	4a07      	ldr	r2, [pc, #28]	; (8013810 <USB_FlushRxFifo+0x28>)
 80137f4:	9b01      	ldr	r3, [sp, #4]
 80137f6:	3301      	adds	r3, #1
 80137f8:	9301      	str	r3, [sp, #4]
 80137fa:	4293      	cmp	r3, r2
 80137fc:	d805      	bhi.n	801380a <USB_FlushRxFifo+0x22>
 80137fe:	6903      	ldr	r3, [r0, #16]
 8013800:	f013 0f10 	tst.w	r3, #16
 8013804:	d1f6      	bne.n	80137f4 <USB_FlushRxFifo+0xc>
 8013806:	2000      	movs	r0, #0
 8013808:	e000      	b.n	801380c <USB_FlushRxFifo+0x24>
 801380a:	2003      	movs	r0, #3
 801380c:	b002      	add	sp, #8
 801380e:	4770      	bx	lr
 8013810:	00030d40 	.word	0x00030d40

08013814 <USB_SetDevSpeed>:
 8013814:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8013818:	4319      	orrs	r1, r3
 801381a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
 801381e:	2000      	movs	r0, #0
 8013820:	4770      	bx	lr
	...

08013824 <USB_DevInit>:
 8013824:	b084      	sub	sp, #16
 8013826:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801382a:	4604      	mov	r4, r0
 801382c:	a809      	add	r0, sp, #36	; 0x24
 801382e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8013832:	460d      	mov	r5, r1
 8013834:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013836:	2300      	movs	r3, #0
 8013838:	4619      	mov	r1, r3
 801383a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 801383e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013842:	6051      	str	r1, [r2, #4]
 8013844:	3301      	adds	r3, #1
 8013846:	2b0f      	cmp	r3, #15
 8013848:	d1f7      	bne.n	801383a <USB_DevInit+0x16>
 801384a:	bb26      	cbnz	r6, 8013896 <USB_DevInit+0x72>
 801384c:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8013850:	f043 0302 	orr.w	r3, r3, #2
 8013854:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
 8013858:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801385a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801385e:	63a3      	str	r3, [r4, #56]	; 0x38
 8013860:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013862:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8013866:	63a3      	str	r3, [r4, #56]	; 0x38
 8013868:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801386a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801386e:	63a3      	str	r3, [r4, #56]	; 0x38
 8013870:	2300      	movs	r3, #0
 8013872:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
 8013876:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 801387a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 801387e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
 8013882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013884:	2b01      	cmp	r3, #1
 8013886:	d114      	bne.n	80138b2 <USB_DevInit+0x8e>
 8013888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801388a:	b96b      	cbnz	r3, 80138a8 <USB_DevInit+0x84>
 801388c:	2100      	movs	r1, #0
 801388e:	4620      	mov	r0, r4
 8013890:	f7ff ffc0 	bl	8013814 <USB_SetDevSpeed>
 8013894:	e011      	b.n	80138ba <USB_DevInit+0x96>
 8013896:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013898:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801389c:	63a3      	str	r3, [r4, #56]	; 0x38
 801389e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80138a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80138a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80138a6:	e7e3      	b.n	8013870 <USB_DevInit+0x4c>
 80138a8:	2101      	movs	r1, #1
 80138aa:	4620      	mov	r0, r4
 80138ac:	f7ff ffb2 	bl	8013814 <USB_SetDevSpeed>
 80138b0:	e003      	b.n	80138ba <USB_DevInit+0x96>
 80138b2:	2103      	movs	r1, #3
 80138b4:	4620      	mov	r0, r4
 80138b6:	f7ff ffad 	bl	8013814 <USB_SetDevSpeed>
 80138ba:	2110      	movs	r1, #16
 80138bc:	4620      	mov	r0, r4
 80138be:	f7ff ff7b 	bl	80137b8 <USB_FlushTxFifo>
 80138c2:	4680      	mov	r8, r0
 80138c4:	4620      	mov	r0, r4
 80138c6:	f7ff ff8f 	bl	80137e8 <USB_FlushRxFifo>
 80138ca:	ea48 0800 	orr.w	r8, r8, r0
 80138ce:	f018 0fff 	tst.w	r8, #255	; 0xff
 80138d2:	bf14      	ite	ne
 80138d4:	f04f 0e01 	movne.w	lr, #1
 80138d8:	f04f 0e00 	moveq.w	lr, #0
 80138dc:	2300      	movs	r3, #0
 80138de:	613b      	str	r3, [r7, #16]
 80138e0:	617b      	str	r3, [r7, #20]
 80138e2:	61fb      	str	r3, [r7, #28]
 80138e4:	2d00      	cmp	r5, #0
 80138e6:	d03f      	beq.n	8013968 <USB_DevInit+0x144>
 80138e8:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 80138ec:	2200      	movs	r2, #0
 80138ee:	4694      	mov	ip, r2
 80138f0:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
 80138f4:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
 80138f8:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 80138fc:	e00a      	b.n	8013914 <USB_DevInit+0xf0>
 80138fe:	b182      	cbz	r2, 8013922 <USB_DevInit+0xfe>
 8013900:	f8c3 9000 	str.w	r9, [r3]
 8013904:	f8c1 c010 	str.w	ip, [r1, #16]
 8013908:	f8c1 8008 	str.w	r8, [r1, #8]
 801390c:	3201      	adds	r2, #1
 801390e:	3320      	adds	r3, #32
 8013910:	4295      	cmp	r5, r2
 8013912:	d009      	beq.n	8013928 <USB_DevInit+0x104>
 8013914:	4619      	mov	r1, r3
 8013916:	6818      	ldr	r0, [r3, #0]
 8013918:	2800      	cmp	r0, #0
 801391a:	dbf0      	blt.n	80138fe <USB_DevInit+0xda>
 801391c:	f8c3 c000 	str.w	ip, [r3]
 8013920:	e7f0      	b.n	8013904 <USB_DevInit+0xe0>
 8013922:	f8c3 a000 	str.w	sl, [r3]
 8013926:	e7ed      	b.n	8013904 <USB_DevInit+0xe0>
 8013928:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 801392c:	2200      	movs	r2, #0
 801392e:	4694      	mov	ip, r2
 8013930:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
 8013934:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
 8013938:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 801393c:	e00a      	b.n	8013954 <USB_DevInit+0x130>
 801393e:	b182      	cbz	r2, 8013962 <USB_DevInit+0x13e>
 8013940:	f8c3 9000 	str.w	r9, [r3]
 8013944:	f8c1 c010 	str.w	ip, [r1, #16]
 8013948:	f8c1 8008 	str.w	r8, [r1, #8]
 801394c:	3201      	adds	r2, #1
 801394e:	3320      	adds	r3, #32
 8013950:	4295      	cmp	r5, r2
 8013952:	d009      	beq.n	8013968 <USB_DevInit+0x144>
 8013954:	4619      	mov	r1, r3
 8013956:	6818      	ldr	r0, [r3, #0]
 8013958:	2800      	cmp	r0, #0
 801395a:	dbf0      	blt.n	801393e <USB_DevInit+0x11a>
 801395c:	f8c3 c000 	str.w	ip, [r3]
 8013960:	e7f0      	b.n	8013944 <USB_DevInit+0x120>
 8013962:	f8c3 a000 	str.w	sl, [r3]
 8013966:	e7ed      	b.n	8013944 <USB_DevInit+0x120>
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801396e:	613b      	str	r3, [r7, #16]
 8013970:	2300      	movs	r3, #0
 8013972:	61a3      	str	r3, [r4, #24]
 8013974:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8013978:	6163      	str	r3, [r4, #20]
 801397a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801397c:	b91b      	cbnz	r3, 8013986 <USB_DevInit+0x162>
 801397e:	69a3      	ldr	r3, [r4, #24]
 8013980:	f043 0310 	orr.w	r3, r3, #16
 8013984:	61a3      	str	r3, [r4, #24]
 8013986:	69a2      	ldr	r2, [r4, #24]
 8013988:	4b0b      	ldr	r3, [pc, #44]	; (80139b8 <USB_DevInit+0x194>)
 801398a:	4313      	orrs	r3, r2
 801398c:	61a3      	str	r3, [r4, #24]
 801398e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013990:	b11b      	cbz	r3, 801399a <USB_DevInit+0x176>
 8013992:	69a3      	ldr	r3, [r4, #24]
 8013994:	f043 0308 	orr.w	r3, r3, #8
 8013998:	61a3      	str	r3, [r4, #24]
 801399a:	2e01      	cmp	r6, #1
 801399c:	d004      	beq.n	80139a8 <USB_DevInit+0x184>
 801399e:	4670      	mov	r0, lr
 80139a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139a4:	b004      	add	sp, #16
 80139a6:	4770      	bx	lr
 80139a8:	69a3      	ldr	r3, [r4, #24]
 80139aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80139ae:	f043 0304 	orr.w	r3, r3, #4
 80139b2:	61a3      	str	r3, [r4, #24]
 80139b4:	e7f3      	b.n	801399e <USB_DevInit+0x17a>
 80139b6:	bf00      	nop
 80139b8:	803c3800 	.word	0x803c3800

080139bc <USB_GetDevSpeed>:
 80139bc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80139c0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80139c4:	f013 0f06 	tst.w	r3, #6
 80139c8:	d005      	beq.n	80139d6 <USB_GetDevSpeed+0x1a>
 80139ca:	f013 0f02 	tst.w	r3, #2
 80139ce:	bf14      	ite	ne
 80139d0:	2002      	movne	r0, #2
 80139d2:	200f      	moveq	r0, #15
 80139d4:	4770      	bx	lr
 80139d6:	2000      	movs	r0, #0
 80139d8:	4770      	bx	lr

080139da <USB_ActivateEndpoint>:
 80139da:	b470      	push	{r4, r5, r6}
 80139dc:	780c      	ldrb	r4, [r1, #0]
 80139de:	784a      	ldrb	r2, [r1, #1]
 80139e0:	2a01      	cmp	r2, #1
 80139e2:	d022      	beq.n	8013a2a <USB_ActivateEndpoint+0x50>
 80139e4:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 80139e8:	f004 060f 	and.w	r6, r4, #15
 80139ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80139f0:	40b3      	lsls	r3, r6
 80139f2:	432b      	orrs	r3, r5
 80139f4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
 80139f8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 80139fc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013a00:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8013a04:	d10e      	bne.n	8013a24 <USB_ActivateEndpoint+0x4a>
 8013a06:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8013a0a:	688b      	ldr	r3, [r1, #8]
 8013a0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013a10:	4313      	orrs	r3, r2
 8013a12:	78ca      	ldrb	r2, [r1, #3]
 8013a14:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8013a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013a20:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8013a24:	2000      	movs	r0, #0
 8013a26:	bc70      	pop	{r4, r5, r6}
 8013a28:	4770      	bx	lr
 8013a2a:	f8d0 581c 	ldr.w	r5, [r0, #2076]	; 0x81c
 8013a2e:	f004 060f 	and.w	r6, r4, #15
 8013a32:	40b2      	lsls	r2, r6
 8013a34:	432a      	orrs	r2, r5
 8013a36:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
 8013a3a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8013a3e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013a42:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8013a46:	d1ed      	bne.n	8013a24 <USB_ActivateEndpoint+0x4a>
 8013a48:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 8013a4c:	688a      	ldr	r2, [r1, #8]
 8013a4e:	f3c2 030a 	ubfx	r3, r2, #0, #11
 8013a52:	432b      	orrs	r3, r5
 8013a54:	78ca      	ldrb	r2, [r1, #3]
 8013a56:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8013a5a:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 8013a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013a66:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8013a6a:	e7db      	b.n	8013a24 <USB_ActivateEndpoint+0x4a>

08013a6c <USB_DeactivateEndpoint>:
 8013a6c:	b430      	push	{r4, r5}
 8013a6e:	780b      	ldrb	r3, [r1, #0]
 8013a70:	784a      	ldrb	r2, [r1, #1]
 8013a72:	2a01      	cmp	r2, #1
 8013a74:	d024      	beq.n	8013ac0 <USB_DeactivateEndpoint+0x54>
 8013a76:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8013a7a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8013a7e:	2a00      	cmp	r2, #0
 8013a80:	db4e      	blt.n	8013b20 <USB_DeactivateEndpoint+0xb4>
 8013a82:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8013a86:	780a      	ldrb	r2, [r1, #0]
 8013a88:	f002 020f 	and.w	r2, r2, #15
 8013a8c:	2401      	movs	r4, #1
 8013a8e:	fa04 f202 	lsl.w	r2, r4, r2
 8013a92:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 8013a96:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
 8013a9a:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8013a9e:	7809      	ldrb	r1, [r1, #0]
 8013aa0:	f001 010f 	and.w	r1, r1, #15
 8013aa4:	408c      	lsls	r4, r1
 8013aa6:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 8013aaa:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
 8013aae:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8013ab2:	4a22      	ldr	r2, [pc, #136]	; (8013b3c <USB_DeactivateEndpoint+0xd0>)
 8013ab4:	400a      	ands	r2, r1
 8013ab6:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8013aba:	2000      	movs	r0, #0
 8013abc:	bc30      	pop	{r4, r5}
 8013abe:	4770      	bx	lr
 8013ac0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8013ac4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8013ac8:	2a00      	cmp	r2, #0
 8013aca:	db1c      	blt.n	8013b06 <USB_DeactivateEndpoint+0x9a>
 8013acc:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8013ad0:	780a      	ldrb	r2, [r1, #0]
 8013ad2:	f002 020f 	and.w	r2, r2, #15
 8013ad6:	2401      	movs	r4, #1
 8013ad8:	fa04 f202 	lsl.w	r2, r4, r2
 8013adc:	ea25 0202 	bic.w	r2, r5, r2
 8013ae0:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
 8013ae4:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8013ae8:	7809      	ldrb	r1, [r1, #0]
 8013aea:	f001 010f 	and.w	r1, r1, #15
 8013aee:	408c      	lsls	r4, r1
 8013af0:	ea22 0404 	bic.w	r4, r2, r4
 8013af4:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
 8013af8:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8013afc:	4a10      	ldr	r2, [pc, #64]	; (8013b40 <USB_DeactivateEndpoint+0xd4>)
 8013afe:	400a      	ands	r2, r1
 8013b00:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8013b04:	e7d9      	b.n	8013aba <USB_DeactivateEndpoint+0x4e>
 8013b06:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8013b0a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8013b0e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8013b12:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8013b16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8013b1a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8013b1e:	e7d5      	b.n	8013acc <USB_DeactivateEndpoint+0x60>
 8013b20:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8013b24:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8013b28:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8013b2c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8013b30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8013b34:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8013b38:	e7a3      	b.n	8013a82 <USB_DeactivateEndpoint+0x16>
 8013b3a:	bf00      	nop
 8013b3c:	eff37800 	.word	0xeff37800
 8013b40:	ec337800 	.word	0xec337800

08013b44 <USB_EP0StartXfer>:
 8013b44:	b470      	push	{r4, r5, r6}
 8013b46:	780b      	ldrb	r3, [r1, #0]
 8013b48:	784c      	ldrb	r4, [r1, #1]
 8013b4a:	2c01      	cmp	r4, #1
 8013b4c:	d026      	beq.n	8013b9c <USB_EP0StartXfer+0x58>
 8013b4e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8013b52:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8013b56:	691c      	ldr	r4, [r3, #16]
 8013b58:	0ce4      	lsrs	r4, r4, #19
 8013b5a:	04e4      	lsls	r4, r4, #19
 8013b5c:	611c      	str	r4, [r3, #16]
 8013b5e:	691c      	ldr	r4, [r3, #16]
 8013b60:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8013b64:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8013b68:	611c      	str	r4, [r3, #16]
 8013b6a:	694c      	ldr	r4, [r1, #20]
 8013b6c:	b10c      	cbz	r4, 8013b72 <USB_EP0StartXfer+0x2e>
 8013b6e:	688c      	ldr	r4, [r1, #8]
 8013b70:	614c      	str	r4, [r1, #20]
 8013b72:	691c      	ldr	r4, [r3, #16]
 8013b74:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8013b78:	611c      	str	r4, [r3, #16]
 8013b7a:	691d      	ldr	r5, [r3, #16]
 8013b7c:	688c      	ldr	r4, [r1, #8]
 8013b7e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8013b82:	432c      	orrs	r4, r5
 8013b84:	611c      	str	r4, [r3, #16]
 8013b86:	2a01      	cmp	r2, #1
 8013b88:	d065      	beq.n	8013c56 <USB_EP0StartXfer+0x112>
 8013b8a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013b8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013b92:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8013b96:	2000      	movs	r0, #0
 8013b98:	bc70      	pop	{r4, r5, r6}
 8013b9a:	4770      	bx	lr
 8013b9c:	694c      	ldr	r4, [r1, #20]
 8013b9e:	bb6c      	cbnz	r4, 8013bfc <USB_EP0StartXfer+0xb8>
 8013ba0:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8013ba4:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8013ba8:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8013bac:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8013bb0:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
 8013bb4:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8013bb8:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8013bbc:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
 8013bc0:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8013bc4:	0ced      	lsrs	r5, r5, #19
 8013bc6:	04ed      	lsls	r5, r5, #19
 8013bc8:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
 8013bcc:	2a01      	cmp	r2, #1
 8013bce:	d033      	beq.n	8013c38 <USB_EP0StartXfer+0xf4>
 8013bd0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8013bd4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8013bd8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8013bdc:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8013be0:	694b      	ldr	r3, [r1, #20]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d0d7      	beq.n	8013b96 <USB_EP0StartXfer+0x52>
 8013be6:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 8013bea:	780b      	ldrb	r3, [r1, #0]
 8013bec:	f003 020f 	and.w	r2, r3, #15
 8013bf0:	2301      	movs	r3, #1
 8013bf2:	4093      	lsls	r3, r2
 8013bf4:	4323      	orrs	r3, r4
 8013bf6:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8013bfa:	e7cc      	b.n	8013b96 <USB_EP0StartXfer+0x52>
 8013bfc:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8013c00:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8013c04:	6925      	ldr	r5, [r4, #16]
 8013c06:	0ced      	lsrs	r5, r5, #19
 8013c08:	04ed      	lsls	r5, r5, #19
 8013c0a:	6125      	str	r5, [r4, #16]
 8013c0c:	6925      	ldr	r5, [r4, #16]
 8013c0e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8013c12:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8013c16:	6125      	str	r5, [r4, #16]
 8013c18:	688d      	ldr	r5, [r1, #8]
 8013c1a:	694e      	ldr	r6, [r1, #20]
 8013c1c:	42ae      	cmp	r6, r5
 8013c1e:	bf88      	it	hi
 8013c20:	614d      	strhi	r5, [r1, #20]
 8013c22:	6925      	ldr	r5, [r4, #16]
 8013c24:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8013c28:	6125      	str	r5, [r4, #16]
 8013c2a:	6926      	ldr	r6, [r4, #16]
 8013c2c:	694d      	ldr	r5, [r1, #20]
 8013c2e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8013c32:	4335      	orrs	r5, r6
 8013c34:	6125      	str	r5, [r4, #16]
 8013c36:	e7c9      	b.n	8013bcc <USB_EP0StartXfer+0x88>
 8013c38:	690a      	ldr	r2, [r1, #16]
 8013c3a:	b11a      	cbz	r2, 8013c44 <USB_EP0StartXfer+0x100>
 8013c3c:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8013c40:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
 8013c44:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8013c48:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8013c4c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8013c50:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8013c54:	e79f      	b.n	8013b96 <USB_EP0StartXfer+0x52>
 8013c56:	68ca      	ldr	r2, [r1, #12]
 8013c58:	2a00      	cmp	r2, #0
 8013c5a:	d096      	beq.n	8013b8a <USB_EP0StartXfer+0x46>
 8013c5c:	615a      	str	r2, [r3, #20]
 8013c5e:	e794      	b.n	8013b8a <USB_EP0StartXfer+0x46>

08013c60 <USB_WritePacket>:
 8013c60:	b410      	push	{r4}
 8013c62:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8013c66:	b96c      	cbnz	r4, 8013c84 <USB_WritePacket+0x24>
 8013c68:	3303      	adds	r3, #3
 8013c6a:	089c      	lsrs	r4, r3, #2
 8013c6c:	2b03      	cmp	r3, #3
 8013c6e:	d909      	bls.n	8013c84 <USB_WritePacket+0x24>
 8013c70:	3201      	adds	r2, #1
 8013c72:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8013c76:	2300      	movs	r3, #0
 8013c78:	f851 2b04 	ldr.w	r2, [r1], #4
 8013c7c:	6002      	str	r2, [r0, #0]
 8013c7e:	3301      	adds	r3, #1
 8013c80:	429c      	cmp	r4, r3
 8013c82:	d8f9      	bhi.n	8013c78 <USB_WritePacket+0x18>
 8013c84:	2000      	movs	r0, #0
 8013c86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c8a:	4770      	bx	lr

08013c8c <USB_EPStartXfer>:
 8013c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c8e:	b083      	sub	sp, #12
 8013c90:	780b      	ldrb	r3, [r1, #0]
 8013c92:	784c      	ldrb	r4, [r1, #1]
 8013c94:	2c01      	cmp	r4, #1
 8013c96:	d02b      	beq.n	8013cf0 <USB_EPStartXfer+0x64>
 8013c98:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8013c9c:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8013ca0:	6925      	ldr	r5, [r4, #16]
 8013ca2:	0ced      	lsrs	r5, r5, #19
 8013ca4:	04ed      	lsls	r5, r5, #19
 8013ca6:	6125      	str	r5, [r4, #16]
 8013ca8:	6925      	ldr	r5, [r4, #16]
 8013caa:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8013cae:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8013cb2:	6125      	str	r5, [r4, #16]
 8013cb4:	694d      	ldr	r5, [r1, #20]
 8013cb6:	2d00      	cmp	r5, #0
 8013cb8:	f040 80b7 	bne.w	8013e2a <USB_EPStartXfer+0x19e>
 8013cbc:	6926      	ldr	r6, [r4, #16]
 8013cbe:	688d      	ldr	r5, [r1, #8]
 8013cc0:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8013cc4:	4335      	orrs	r5, r6
 8013cc6:	6125      	str	r5, [r4, #16]
 8013cc8:	6925      	ldr	r5, [r4, #16]
 8013cca:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8013cce:	6125      	str	r5, [r4, #16]
 8013cd0:	2a01      	cmp	r2, #1
 8013cd2:	f000 80bf 	beq.w	8013e54 <USB_EPStartXfer+0x1c8>
 8013cd6:	78ca      	ldrb	r2, [r1, #3]
 8013cd8:	2a01      	cmp	r2, #1
 8013cda:	f000 80c1 	beq.w	8013e60 <USB_EPStartXfer+0x1d4>
 8013cde:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8013ce2:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8013ce6:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8013cea:	2000      	movs	r0, #0
 8013cec:	b003      	add	sp, #12
 8013cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cf0:	694c      	ldr	r4, [r1, #20]
 8013cf2:	bb84      	cbnz	r4, 8013d56 <USB_EPStartXfer+0xca>
 8013cf4:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8013cf8:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8013cfc:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8013d00:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8013d04:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
 8013d08:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8013d0c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8013d10:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
 8013d14:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8013d18:	0ced      	lsrs	r5, r5, #19
 8013d1a:	04ed      	lsls	r5, r5, #19
 8013d1c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
 8013d20:	2a01      	cmp	r2, #1
 8013d22:	d04c      	beq.n	8013dbe <USB_EPStartXfer+0x132>
 8013d24:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8013d28:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8013d2c:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8013d30:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8013d34:	78cc      	ldrb	r4, [r1, #3]
 8013d36:	2c01      	cmp	r4, #1
 8013d38:	d063      	beq.n	8013e02 <USB_EPStartXfer+0x176>
 8013d3a:	694b      	ldr	r3, [r1, #20]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d0d4      	beq.n	8013cea <USB_EPStartXfer+0x5e>
 8013d40:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8013d44:	780a      	ldrb	r2, [r1, #0]
 8013d46:	f002 010f 	and.w	r1, r2, #15
 8013d4a:	2201      	movs	r2, #1
 8013d4c:	408a      	lsls	r2, r1
 8013d4e:	431a      	orrs	r2, r3
 8013d50:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8013d54:	e7c9      	b.n	8013cea <USB_EPStartXfer+0x5e>
 8013d56:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8013d5a:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8013d5e:	0ced      	lsrs	r5, r5, #19
 8013d60:	04ed      	lsls	r5, r5, #19
 8013d62:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
 8013d66:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8013d6a:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8013d6e:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8013d72:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
 8013d76:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8013d7a:	688e      	ldr	r6, [r1, #8]
 8013d7c:	694d      	ldr	r5, [r1, #20]
 8013d7e:	4435      	add	r5, r6
 8013d80:	3d01      	subs	r5, #1
 8013d82:	fbb5 f5f6 	udiv	r5, r5, r6
 8013d86:	4e3d      	ldr	r6, [pc, #244]	; (8013e7c <USB_EPStartXfer+0x1f0>)
 8013d88:	ea06 45c5 	and.w	r5, r6, r5, lsl #19
 8013d8c:	433d      	orrs	r5, r7
 8013d8e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
 8013d92:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8013d96:	694d      	ldr	r5, [r1, #20]
 8013d98:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8013d9c:	4335      	orrs	r5, r6
 8013d9e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
 8013da2:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8013da6:	78cd      	ldrb	r5, [r1, #3]
 8013da8:	2d01      	cmp	r5, #1
 8013daa:	d1b9      	bne.n	8013d20 <USB_EPStartXfer+0x94>
 8013dac:	6925      	ldr	r5, [r4, #16]
 8013dae:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8013db2:	6125      	str	r5, [r4, #16]
 8013db4:	6925      	ldr	r5, [r4, #16]
 8013db6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013dba:	6125      	str	r5, [r4, #16]
 8013dbc:	e7b0      	b.n	8013d20 <USB_EPStartXfer+0x94>
 8013dbe:	690a      	ldr	r2, [r1, #16]
 8013dc0:	b11a      	cbz	r2, 8013dca <USB_EPStartXfer+0x13e>
 8013dc2:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8013dc6:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
 8013dca:	78ca      	ldrb	r2, [r1, #3]
 8013dcc:	2a01      	cmp	r2, #1
 8013dce:	d008      	beq.n	8013de2 <USB_EPStartXfer+0x156>
 8013dd0:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8013dd4:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8013dd8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8013ddc:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8013de0:	e783      	b.n	8013cea <USB_EPStartXfer+0x5e>
 8013de2:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8013de6:	f412 7f80 	tst.w	r2, #256	; 0x100
 8013dea:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8013dee:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8013df2:	bf0c      	ite	eq
 8013df4:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 8013df8:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8013dfc:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8013e00:	e7e6      	b.n	8013dd0 <USB_EPStartXfer+0x144>
 8013e02:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8013e06:	f414 7f80 	tst.w	r4, #256	; 0x100
 8013e0a:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8013e0e:	bf0c      	ite	eq
 8013e10:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
 8013e14:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8013e18:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8013e1c:	9200      	str	r2, [sp, #0]
 8013e1e:	8a8b      	ldrh	r3, [r1, #20]
 8013e20:	780a      	ldrb	r2, [r1, #0]
 8013e22:	68c9      	ldr	r1, [r1, #12]
 8013e24:	f7ff ff1c 	bl	8013c60 <USB_WritePacket>
 8013e28:	e75f      	b.n	8013cea <USB_EPStartXfer+0x5e>
 8013e2a:	688e      	ldr	r6, [r1, #8]
 8013e2c:	4435      	add	r5, r6
 8013e2e:	3d01      	subs	r5, #1
 8013e30:	fbb5 f5f6 	udiv	r5, r5, r6
 8013e34:	6927      	ldr	r7, [r4, #16]
 8013e36:	4e11      	ldr	r6, [pc, #68]	; (8013e7c <USB_EPStartXfer+0x1f0>)
 8013e38:	ea06 46c5 	and.w	r6, r6, r5, lsl #19
 8013e3c:	433e      	orrs	r6, r7
 8013e3e:	6126      	str	r6, [r4, #16]
 8013e40:	6927      	ldr	r7, [r4, #16]
 8013e42:	b2ad      	uxth	r5, r5
 8013e44:	688e      	ldr	r6, [r1, #8]
 8013e46:	fb06 f505 	mul.w	r5, r6, r5
 8013e4a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8013e4e:	433d      	orrs	r5, r7
 8013e50:	6125      	str	r5, [r4, #16]
 8013e52:	e73d      	b.n	8013cd0 <USB_EPStartXfer+0x44>
 8013e54:	68ca      	ldr	r2, [r1, #12]
 8013e56:	2a00      	cmp	r2, #0
 8013e58:	f43f af3d 	beq.w	8013cd6 <USB_EPStartXfer+0x4a>
 8013e5c:	6162      	str	r2, [r4, #20]
 8013e5e:	e73a      	b.n	8013cd6 <USB_EPStartXfer+0x4a>
 8013e60:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8013e64:	f412 7f80 	tst.w	r2, #256	; 0x100
 8013e68:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8013e6c:	bf0c      	ite	eq
 8013e6e:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 8013e72:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8013e76:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8013e7a:	e730      	b.n	8013cde <USB_EPStartXfer+0x52>
 8013e7c:	1ff80000 	.word	0x1ff80000

08013e80 <USB_ReadPacket>:
 8013e80:	b4f0      	push	{r4, r5, r6, r7}
 8013e82:	f002 0603 	and.w	r6, r2, #3
 8013e86:	0895      	lsrs	r5, r2, #2
 8013e88:	d00b      	beq.n	8013ea2 <USB_ReadPacket+0x22>
 8013e8a:	460a      	mov	r2, r1
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
 8013e92:	683c      	ldr	r4, [r7, #0]
 8013e94:	f842 4b04 	str.w	r4, [r2], #4
 8013e98:	3301      	adds	r3, #1
 8013e9a:	429d      	cmp	r5, r3
 8013e9c:	d1f9      	bne.n	8013e92 <USB_ReadPacket+0x12>
 8013e9e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8013ea2:	b17e      	cbz	r6, 8013ec4 <USB_ReadPacket+0x44>
 8013ea4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8013ea8:	6804      	ldr	r4, [r0, #0]
 8013eaa:	1e70      	subs	r0, r6, #1
 8013eac:	b280      	uxth	r0, r0
 8013eae:	3001      	adds	r0, #1
 8013eb0:	4408      	add	r0, r1
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	fa24 f203 	lsr.w	r2, r4, r3
 8013eb8:	f801 2b01 	strb.w	r2, [r1], #1
 8013ebc:	3308      	adds	r3, #8
 8013ebe:	4281      	cmp	r1, r0
 8013ec0:	d1f8      	bne.n	8013eb4 <USB_ReadPacket+0x34>
 8013ec2:	e000      	b.n	8013ec6 <USB_ReadPacket+0x46>
 8013ec4:	4608      	mov	r0, r1
 8013ec6:	bcf0      	pop	{r4, r5, r6, r7}
 8013ec8:	4770      	bx	lr

08013eca <USB_EPSetStall>:
 8013eca:	780b      	ldrb	r3, [r1, #0]
 8013ecc:	784a      	ldrb	r2, [r1, #1]
 8013ece:	2a01      	cmp	r2, #1
 8013ed0:	d014      	beq.n	8013efc <USB_EPSetStall+0x32>
 8013ed2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8013ed6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8013eda:	2a00      	cmp	r2, #0
 8013edc:	db06      	blt.n	8013eec <USB_EPSetStall+0x22>
 8013ede:	b12b      	cbz	r3, 8013eec <USB_EPSetStall+0x22>
 8013ee0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013ee4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013ee8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8013eec:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013ef0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013ef4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8013ef8:	2000      	movs	r0, #0
 8013efa:	4770      	bx	lr
 8013efc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8013f00:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8013f04:	2a00      	cmp	r2, #0
 8013f06:	db06      	blt.n	8013f16 <USB_EPSetStall+0x4c>
 8013f08:	b12b      	cbz	r3, 8013f16 <USB_EPSetStall+0x4c>
 8013f0a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013f0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013f12:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8013f16:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013f1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013f1e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8013f22:	e7e9      	b.n	8013ef8 <USB_EPSetStall+0x2e>

08013f24 <USB_EPClearStall>:
 8013f24:	780b      	ldrb	r3, [r1, #0]
 8013f26:	784a      	ldrb	r2, [r1, #1]
 8013f28:	2a01      	cmp	r2, #1
 8013f2a:	d00e      	beq.n	8013f4a <USB_EPClearStall+0x26>
 8013f2c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8013f30:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013f34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013f38:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8013f3c:	78cb      	ldrb	r3, [r1, #3]
 8013f3e:	3b02      	subs	r3, #2
 8013f40:	b2db      	uxtb	r3, r3
 8013f42:	2b01      	cmp	r3, #1
 8013f44:	d915      	bls.n	8013f72 <USB_EPClearStall+0x4e>
 8013f46:	2000      	movs	r0, #0
 8013f48:	4770      	bx	lr
 8013f4a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8013f4e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013f52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013f56:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8013f5a:	78cb      	ldrb	r3, [r1, #3]
 8013f5c:	3b02      	subs	r3, #2
 8013f5e:	b2db      	uxtb	r3, r3
 8013f60:	2b01      	cmp	r3, #1
 8013f62:	d8f0      	bhi.n	8013f46 <USB_EPClearStall+0x22>
 8013f64:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013f6c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8013f70:	e7e9      	b.n	8013f46 <USB_EPClearStall+0x22>
 8013f72:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013f7a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8013f7e:	e7e2      	b.n	8013f46 <USB_EPClearStall+0x22>

08013f80 <USB_StopDevice>:
 8013f80:	b538      	push	{r3, r4, r5, lr}
 8013f82:	4605      	mov	r5, r0
 8013f84:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 8013f88:	f500 642e 	add.w	r4, r0, #2784	; 0xae0
 8013f8c:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8013f90:	609a      	str	r2, [r3, #8]
 8013f92:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8013f96:	3320      	adds	r3, #32
 8013f98:	42a3      	cmp	r3, r4
 8013f9a:	d1f9      	bne.n	8013f90 <USB_StopDevice+0x10>
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	f8c5 2810 	str.w	r2, [r5, #2064]	; 0x810
 8013fa2:	f8c5 2814 	str.w	r2, [r5, #2068]	; 0x814
 8013fa6:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
 8013faa:	4628      	mov	r0, r5
 8013fac:	f7ff fc1c 	bl	80137e8 <USB_FlushRxFifo>
 8013fb0:	b100      	cbz	r0, 8013fb4 <USB_StopDevice+0x34>
 8013fb2:	bd38      	pop	{r3, r4, r5, pc}
 8013fb4:	2110      	movs	r1, #16
 8013fb6:	4628      	mov	r0, r5
 8013fb8:	f7ff fbfe 	bl	80137b8 <USB_FlushTxFifo>
 8013fbc:	e7f9      	b.n	8013fb2 <USB_StopDevice+0x32>

08013fbe <USB_SetDevAddress>:
 8013fbe:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8013fc2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013fc6:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
 8013fca:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8013fce:	0109      	lsls	r1, r1, #4
 8013fd0:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8013fd4:	4319      	orrs	r1, r3
 8013fd6:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
 8013fda:	2000      	movs	r0, #0
 8013fdc:	4770      	bx	lr

08013fde <USB_DevConnect>:
 8013fde:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8013fe2:	f023 0303 	bic.w	r3, r3, #3
 8013fe6:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
 8013fea:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8013fee:	f023 0302 	bic.w	r3, r3, #2
 8013ff2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
 8013ff6:	2000      	movs	r0, #0
 8013ff8:	4770      	bx	lr

08013ffa <USB_DevDisconnect>:
 8013ffa:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8013ffe:	f023 0303 	bic.w	r3, r3, #3
 8014002:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
 8014006:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 801400a:	f043 0302 	orr.w	r3, r3, #2
 801400e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
 8014012:	2000      	movs	r0, #0
 8014014:	4770      	bx	lr

08014016 <USB_ReadInterrupts>:
 8014016:	6942      	ldr	r2, [r0, #20]
 8014018:	6980      	ldr	r0, [r0, #24]
 801401a:	4010      	ands	r0, r2
 801401c:	4770      	bx	lr

0801401e <USB_ReadDevAllOutEpInterrupt>:
 801401e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8014022:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8014026:	69c0      	ldr	r0, [r0, #28]
 8014028:	4018      	ands	r0, r3
 801402a:	0c00      	lsrs	r0, r0, #16
 801402c:	4770      	bx	lr

0801402e <USB_ReadDevAllInEpInterrupt>:
 801402e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8014032:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8014036:	69c0      	ldr	r0, [r0, #28]
 8014038:	4018      	ands	r0, r3
 801403a:	b280      	uxth	r0, r0
 801403c:	4770      	bx	lr

0801403e <USB_ReadDevOutEPInterrupt>:
 801403e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8014042:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
 8014046:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801404a:	6940      	ldr	r0, [r0, #20]
 801404c:	4010      	ands	r0, r2
 801404e:	4770      	bx	lr

08014050 <USB_ReadDevInEPInterrupt>:
 8014050:	b410      	push	{r4}
 8014052:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
 8014056:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 801405a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 801405e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8014062:	6880      	ldr	r0, [r0, #8]
 8014064:	f001 010f 	and.w	r1, r1, #15
 8014068:	40cb      	lsrs	r3, r1
 801406a:	01db      	lsls	r3, r3, #7
 801406c:	b2db      	uxtb	r3, r3
 801406e:	4323      	orrs	r3, r4
 8014070:	4018      	ands	r0, r3
 8014072:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014076:	4770      	bx	lr

08014078 <USB_GetMode>:
 8014078:	6940      	ldr	r0, [r0, #20]
 801407a:	f000 0001 	and.w	r0, r0, #1
 801407e:	4770      	bx	lr

08014080 <USB_ActivateSetup>:
 8014080:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8014084:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014088:	f023 0307 	bic.w	r3, r3, #7
 801408c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8014090:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8014094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014098:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
 801409c:	2000      	movs	r0, #0
 801409e:	4770      	bx	lr

080140a0 <USB_EP0_OutStart>:
 80140a0:	b410      	push	{r4}
 80140a2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80140a4:	4b15      	ldr	r3, [pc, #84]	; (80140fc <USB_EP0_OutStart+0x5c>)
 80140a6:	429c      	cmp	r4, r3
 80140a8:	d903      	bls.n	80140b2 <USB_EP0_OutStart+0x12>
 80140aa:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	db16      	blt.n	80140e0 <USB_EP0_OutStart+0x40>
 80140b2:	2400      	movs	r4, #0
 80140b4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
 80140b8:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80140bc:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 80140c0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
 80140c4:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80140c8:	f044 0418 	orr.w	r4, r4, #24
 80140cc:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
 80140d0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 80140d4:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 80140d8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
 80140dc:	2901      	cmp	r1, #1
 80140de:	d003      	beq.n	80140e8 <USB_EP0_OutStart+0x48>
 80140e0:	2000      	movs	r0, #0
 80140e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140e6:	4770      	bx	lr
 80140e8:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
 80140ec:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80140f0:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80140f4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80140f8:	e7f2      	b.n	80140e0 <USB_EP0_OutStart+0x40>
 80140fa:	bf00      	nop
 80140fc:	4f54300a 	.word	0x4f54300a

08014100 <USBD_CDC_EP0_RxReady>:
 8014100:	b510      	push	{r4, lr}
 8014102:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
 8014106:	b184      	cbz	r4, 801412a <USBD_CDC_EP0_RxReady+0x2a>
 8014108:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 801410c:	b17b      	cbz	r3, 801412e <USBD_CDC_EP0_RxReady+0x2e>
 801410e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8014112:	28ff      	cmp	r0, #255	; 0xff
 8014114:	d00d      	beq.n	8014132 <USBD_CDC_EP0_RxReady+0x32>
 8014116:	689b      	ldr	r3, [r3, #8]
 8014118:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 801411c:	4621      	mov	r1, r4
 801411e:	4798      	blx	r3
 8014120:	23ff      	movs	r3, #255	; 0xff
 8014122:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8014126:	2000      	movs	r0, #0
 8014128:	bd10      	pop	{r4, pc}
 801412a:	2003      	movs	r0, #3
 801412c:	e7fc      	b.n	8014128 <USBD_CDC_EP0_RxReady+0x28>
 801412e:	2000      	movs	r0, #0
 8014130:	e7fa      	b.n	8014128 <USBD_CDC_EP0_RxReady+0x28>
 8014132:	2000      	movs	r0, #0
 8014134:	e7f8      	b.n	8014128 <USBD_CDC_EP0_RxReady+0x28>
	...

08014138 <USBD_CDC_GetFSCfgDesc>:
 8014138:	2343      	movs	r3, #67	; 0x43
 801413a:	8003      	strh	r3, [r0, #0]
 801413c:	4800      	ldr	r0, [pc, #0]	; (8014140 <USBD_CDC_GetFSCfgDesc+0x8>)
 801413e:	4770      	bx	lr
 8014140:	200000a0 	.word	0x200000a0

08014144 <USBD_CDC_GetHSCfgDesc>:
 8014144:	2343      	movs	r3, #67	; 0x43
 8014146:	8003      	strh	r3, [r0, #0]
 8014148:	4800      	ldr	r0, [pc, #0]	; (801414c <USBD_CDC_GetHSCfgDesc+0x8>)
 801414a:	4770      	bx	lr
 801414c:	200000e4 	.word	0x200000e4

08014150 <USBD_CDC_GetOtherSpeedCfgDesc>:
 8014150:	2343      	movs	r3, #67	; 0x43
 8014152:	8003      	strh	r3, [r0, #0]
 8014154:	4800      	ldr	r0, [pc, #0]	; (8014158 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8014156:	4770      	bx	lr
 8014158:	20000134 	.word	0x20000134

0801415c <USBD_CDC_GetDeviceQualifierDescriptor>:
 801415c:	230a      	movs	r3, #10
 801415e:	8003      	strh	r3, [r0, #0]
 8014160:	4800      	ldr	r0, [pc, #0]	; (8014164 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8014162:	4770      	bx	lr
 8014164:	20000128 	.word	0x20000128

08014168 <USBD_CDC_DataOut>:
 8014168:	b538      	push	{r3, r4, r5, lr}
 801416a:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 801416e:	b175      	cbz	r5, 801418e <USBD_CDC_DataOut+0x26>
 8014170:	4604      	mov	r4, r0
 8014172:	f003 fd87 	bl	8017c84 <USBD_LL_GetRxDataSize>
 8014176:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
 801417a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 801417e:	68db      	ldr	r3, [r3, #12]
 8014180:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8014184:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8014188:	4798      	blx	r3
 801418a:	2000      	movs	r0, #0
 801418c:	bd38      	pop	{r3, r4, r5, pc}
 801418e:	2003      	movs	r0, #3
 8014190:	e7fc      	b.n	801418c <USBD_CDC_DataOut+0x24>

08014192 <USBD_CDC_DataIn>:
 8014192:	b538      	push	{r3, r4, r5, lr}
 8014194:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8014198:	b363      	cbz	r3, 80141f4 <USBD_CDC_DataIn+0x62>
 801419a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 801419e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80141a2:	6992      	ldr	r2, [r2, #24]
 80141a4:	b15a      	cbz	r2, 80141be <USBD_CDC_DataIn+0x2c>
 80141a6:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 80141aa:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
 80141ae:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 80141b2:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80141b4:	fbb2 f4f5 	udiv	r4, r2, r5
 80141b8:	fb05 2214 	mls	r2, r5, r4, r2
 80141bc:	b172      	cbz	r2, 80141dc <USBD_CDC_DataIn+0x4a>
 80141be:	2200      	movs	r2, #0
 80141c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80141c4:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 80141c8:	6914      	ldr	r4, [r2, #16]
 80141ca:	b1ac      	cbz	r4, 80141f8 <USBD_CDC_DataIn+0x66>
 80141cc:	460a      	mov	r2, r1
 80141ce:	f503 7104 	add.w	r1, r3, #528	; 0x210
 80141d2:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 80141d6:	47a0      	blx	r4
 80141d8:	2000      	movs	r0, #0
 80141da:	bd38      	pop	{r3, r4, r5, pc}
 80141dc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80141e0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80141e4:	2400      	movs	r4, #0
 80141e6:	619c      	str	r4, [r3, #24]
 80141e8:	4623      	mov	r3, r4
 80141ea:	4622      	mov	r2, r4
 80141ec:	f003 fd9f 	bl	8017d2e <USBD_LL_Transmit>
 80141f0:	4620      	mov	r0, r4
 80141f2:	e7f2      	b.n	80141da <USBD_CDC_DataIn+0x48>
 80141f4:	2003      	movs	r0, #3
 80141f6:	e7f0      	b.n	80141da <USBD_CDC_DataIn+0x48>
 80141f8:	2000      	movs	r0, #0
 80141fa:	e7ee      	b.n	80141da <USBD_CDC_DataIn+0x48>

080141fc <USBD_CDC_Setup>:
 80141fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141fe:	b083      	sub	sp, #12
 8014200:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
 8014204:	2300      	movs	r3, #0
 8014206:	f88d 3007 	strb.w	r3, [sp, #7]
 801420a:	f8ad 3004 	strh.w	r3, [sp, #4]
 801420e:	2e00      	cmp	r6, #0
 8014210:	d06c      	beq.n	80142ec <USBD_CDC_Setup+0xf0>
 8014212:	4607      	mov	r7, r0
 8014214:	460c      	mov	r4, r1
 8014216:	780b      	ldrb	r3, [r1, #0]
 8014218:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 801421c:	d02a      	beq.n	8014274 <USBD_CDC_Setup+0x78>
 801421e:	2d20      	cmp	r5, #32
 8014220:	d15e      	bne.n	80142e0 <USBD_CDC_Setup+0xe4>
 8014222:	88ca      	ldrh	r2, [r1, #6]
 8014224:	b1f2      	cbz	r2, 8014264 <USBD_CDC_Setup+0x68>
 8014226:	f013 0f80 	tst.w	r3, #128	; 0x80
 801422a:	d00f      	beq.n	801424c <USBD_CDC_Setup+0x50>
 801422c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8014230:	689b      	ldr	r3, [r3, #8]
 8014232:	4631      	mov	r1, r6
 8014234:	7860      	ldrb	r0, [r4, #1]
 8014236:	4798      	blx	r3
 8014238:	88e2      	ldrh	r2, [r4, #6]
 801423a:	2a07      	cmp	r2, #7
 801423c:	bf28      	it	cs
 801423e:	2207      	movcs	r2, #7
 8014240:	4631      	mov	r1, r6
 8014242:	4638      	mov	r0, r7
 8014244:	f000 fe03 	bl	8014e4e <USBD_CtlSendData>
 8014248:	2500      	movs	r5, #0
 801424a:	e04c      	b.n	80142e6 <USBD_CDC_Setup+0xea>
 801424c:	784b      	ldrb	r3, [r1, #1]
 801424e:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
 8014252:	88cb      	ldrh	r3, [r1, #6]
 8014254:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
 8014258:	88ca      	ldrh	r2, [r1, #6]
 801425a:	4631      	mov	r1, r6
 801425c:	f000 fe0c 	bl	8014e78 <USBD_CtlPrepareRx>
 8014260:	2500      	movs	r5, #0
 8014262:	e040      	b.n	80142e6 <USBD_CDC_Setup+0xea>
 8014264:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8014268:	689b      	ldr	r3, [r3, #8]
 801426a:	2200      	movs	r2, #0
 801426c:	7848      	ldrb	r0, [r1, #1]
 801426e:	4798      	blx	r3
 8014270:	2500      	movs	r5, #0
 8014272:	e038      	b.n	80142e6 <USBD_CDC_Setup+0xea>
 8014274:	784e      	ldrb	r6, [r1, #1]
 8014276:	2e0b      	cmp	r6, #11
 8014278:	d82e      	bhi.n	80142d8 <USBD_CDC_Setup+0xdc>
 801427a:	e8df f006 	tbb	[pc, r6]
 801427e:	3406      	.short	0x3406
 8014280:	2d2d2d2d 	.word	0x2d2d2d2d
 8014284:	2d2d2d2d 	.word	0x2d2d2d2d
 8014288:	2415      	.short	0x2415
 801428a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801428e:	b2db      	uxtb	r3, r3
 8014290:	2b03      	cmp	r3, #3
 8014292:	d003      	beq.n	801429c <USBD_CDC_Setup+0xa0>
 8014294:	f000 faca 	bl	801482c <USBD_CtlError>
 8014298:	2503      	movs	r5, #3
 801429a:	e024      	b.n	80142e6 <USBD_CDC_Setup+0xea>
 801429c:	2202      	movs	r2, #2
 801429e:	a901      	add	r1, sp, #4
 80142a0:	f000 fdd5 	bl	8014e4e <USBD_CtlSendData>
 80142a4:	4635      	mov	r5, r6
 80142a6:	e01e      	b.n	80142e6 <USBD_CDC_Setup+0xea>
 80142a8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80142ac:	b2db      	uxtb	r3, r3
 80142ae:	2b03      	cmp	r3, #3
 80142b0:	d003      	beq.n	80142ba <USBD_CDC_Setup+0xbe>
 80142b2:	f000 fabb 	bl	801482c <USBD_CtlError>
 80142b6:	2503      	movs	r5, #3
 80142b8:	e015      	b.n	80142e6 <USBD_CDC_Setup+0xea>
 80142ba:	2201      	movs	r2, #1
 80142bc:	f10d 0107 	add.w	r1, sp, #7
 80142c0:	f000 fdc5 	bl	8014e4e <USBD_CtlSendData>
 80142c4:	e00f      	b.n	80142e6 <USBD_CDC_Setup+0xea>
 80142c6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80142ca:	b2db      	uxtb	r3, r3
 80142cc:	2b03      	cmp	r3, #3
 80142ce:	d00a      	beq.n	80142e6 <USBD_CDC_Setup+0xea>
 80142d0:	f000 faac 	bl	801482c <USBD_CtlError>
 80142d4:	2503      	movs	r5, #3
 80142d6:	e006      	b.n	80142e6 <USBD_CDC_Setup+0xea>
 80142d8:	f000 faa8 	bl	801482c <USBD_CtlError>
 80142dc:	2503      	movs	r5, #3
 80142de:	e002      	b.n	80142e6 <USBD_CDC_Setup+0xea>
 80142e0:	f000 faa4 	bl	801482c <USBD_CtlError>
 80142e4:	2503      	movs	r5, #3
 80142e6:	4628      	mov	r0, r5
 80142e8:	b003      	add	sp, #12
 80142ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142ec:	2503      	movs	r5, #3
 80142ee:	e7fa      	b.n	80142e6 <USBD_CDC_Setup+0xea>

080142f0 <USBD_CDC_DeInit>:
 80142f0:	b538      	push	{r3, r4, r5, lr}
 80142f2:	4604      	mov	r4, r0
 80142f4:	2181      	movs	r1, #129	; 0x81
 80142f6:	f003 fcfa 	bl	8017cee <USBD_LL_CloseEP>
 80142fa:	2500      	movs	r5, #0
 80142fc:	8725      	strh	r5, [r4, #56]	; 0x38
 80142fe:	2101      	movs	r1, #1
 8014300:	4620      	mov	r0, r4
 8014302:	f003 fcf4 	bl	8017cee <USBD_LL_CloseEP>
 8014306:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
 801430a:	2182      	movs	r1, #130	; 0x82
 801430c:	4620      	mov	r0, r4
 801430e:	f003 fcee 	bl	8017cee <USBD_LL_CloseEP>
 8014312:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
 8014316:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
 801431a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 801431e:	b14b      	cbz	r3, 8014334 <USBD_CDC_DeInit+0x44>
 8014320:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8014324:	685b      	ldr	r3, [r3, #4]
 8014326:	4798      	blx	r3
 8014328:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 801432c:	f003 fcb4 	bl	8017c98 <USBD_static_free>
 8014330:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
 8014334:	2000      	movs	r0, #0
 8014336:	bd38      	pop	{r3, r4, r5, pc}

08014338 <USBD_CDC_Init>:
 8014338:	b570      	push	{r4, r5, r6, lr}
 801433a:	4604      	mov	r4, r0
 801433c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014340:	f003 fca6 	bl	8017c90 <USBD_static_malloc>
 8014344:	b3b8      	cbz	r0, 80143b6 <USBD_CDC_Init+0x7e>
 8014346:	4606      	mov	r6, r0
 8014348:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
 801434c:	7c23      	ldrb	r3, [r4, #16]
 801434e:	bbbb      	cbnz	r3, 80143c0 <USBD_CDC_Init+0x88>
 8014350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014354:	2202      	movs	r2, #2
 8014356:	2181      	movs	r1, #129	; 0x81
 8014358:	4620      	mov	r0, r4
 801435a:	f003 fcbd 	bl	8017cd8 <USBD_LL_OpenEP>
 801435e:	2501      	movs	r5, #1
 8014360:	8725      	strh	r5, [r4, #56]	; 0x38
 8014362:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014366:	2202      	movs	r2, #2
 8014368:	4629      	mov	r1, r5
 801436a:	4620      	mov	r0, r4
 801436c:	f003 fcb4 	bl	8017cd8 <USBD_LL_OpenEP>
 8014370:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
 8014374:	2310      	movs	r3, #16
 8014376:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 801437a:	2308      	movs	r3, #8
 801437c:	2203      	movs	r2, #3
 801437e:	2182      	movs	r1, #130	; 0x82
 8014380:	4620      	mov	r0, r4
 8014382:	f003 fca9 	bl	8017cd8 <USBD_LL_OpenEP>
 8014386:	2301      	movs	r3, #1
 8014388:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 801438c:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	4798      	blx	r3
 8014394:	2300      	movs	r3, #0
 8014396:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 801439a:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
 801439e:	7c25      	ldrb	r5, [r4, #16]
 80143a0:	bb15      	cbnz	r5, 80143e8 <USBD_CDC_Init+0xb0>
 80143a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80143a6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80143aa:	2101      	movs	r1, #1
 80143ac:	4620      	mov	r0, r4
 80143ae:	f003 fcc6 	bl	8017d3e <USBD_LL_PrepareReceive>
 80143b2:	4628      	mov	r0, r5
 80143b4:	bd70      	pop	{r4, r5, r6, pc}
 80143b6:	2300      	movs	r3, #0
 80143b8:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
 80143bc:	2502      	movs	r5, #2
 80143be:	e7f8      	b.n	80143b2 <USBD_CDC_Init+0x7a>
 80143c0:	2340      	movs	r3, #64	; 0x40
 80143c2:	2202      	movs	r2, #2
 80143c4:	2181      	movs	r1, #129	; 0x81
 80143c6:	4620      	mov	r0, r4
 80143c8:	f003 fc86 	bl	8017cd8 <USBD_LL_OpenEP>
 80143cc:	2501      	movs	r5, #1
 80143ce:	8725      	strh	r5, [r4, #56]	; 0x38
 80143d0:	2340      	movs	r3, #64	; 0x40
 80143d2:	2202      	movs	r2, #2
 80143d4:	4629      	mov	r1, r5
 80143d6:	4620      	mov	r0, r4
 80143d8:	f003 fc7e 	bl	8017cd8 <USBD_LL_OpenEP>
 80143dc:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
 80143e0:	2310      	movs	r3, #16
 80143e2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80143e6:	e7c8      	b.n	801437a <USBD_CDC_Init+0x42>
 80143e8:	2340      	movs	r3, #64	; 0x40
 80143ea:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80143ee:	2101      	movs	r1, #1
 80143f0:	4620      	mov	r0, r4
 80143f2:	f003 fca4 	bl	8017d3e <USBD_LL_PrepareReceive>
 80143f6:	2500      	movs	r5, #0
 80143f8:	e7db      	b.n	80143b2 <USBD_CDC_Init+0x7a>

080143fa <USBD_CDC_RegisterInterface>:
 80143fa:	b119      	cbz	r1, 8014404 <USBD_CDC_RegisterInterface+0xa>
 80143fc:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0
 8014400:	2000      	movs	r0, #0
 8014402:	4770      	bx	lr
 8014404:	2003      	movs	r0, #3
 8014406:	4770      	bx	lr

08014408 <USBD_CDC_SetTxBuffer>:
 8014408:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 801440c:	b12b      	cbz	r3, 801441a <USBD_CDC_SetTxBuffer+0x12>
 801440e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
 8014412:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8014416:	2000      	movs	r0, #0
 8014418:	4770      	bx	lr
 801441a:	2003      	movs	r0, #3
 801441c:	4770      	bx	lr

0801441e <USBD_CDC_SetRxBuffer>:
 801441e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8014422:	b11b      	cbz	r3, 801442c <USBD_CDC_SetRxBuffer+0xe>
 8014424:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
 8014428:	2000      	movs	r0, #0
 801442a:	4770      	bx	lr
 801442c:	2003      	movs	r0, #3
 801442e:	4770      	bx	lr

08014430 <USBD_CDC_TransmitPacket>:
 8014430:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8014434:	b1a2      	cbz	r2, 8014460 <USBD_CDC_TransmitPacket+0x30>
 8014436:	b508      	push	{r3, lr}
 8014438:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 801443c:	b10b      	cbz	r3, 8014442 <USBD_CDC_TransmitPacket+0x12>
 801443e:	2001      	movs	r0, #1
 8014440:	bd08      	pop	{r3, pc}
 8014442:	2301      	movs	r3, #1
 8014444:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8014448:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 801444c:	62c3      	str	r3, [r0, #44]	; 0x2c
 801444e:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8014452:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8014456:	2181      	movs	r1, #129	; 0x81
 8014458:	f003 fc69 	bl	8017d2e <USBD_LL_Transmit>
 801445c:	2000      	movs	r0, #0
 801445e:	e7ef      	b.n	8014440 <USBD_CDC_TransmitPacket+0x10>
 8014460:	2003      	movs	r0, #3
 8014462:	4770      	bx	lr

08014464 <USBD_CDC_ReceivePacket>:
 8014464:	b510      	push	{r4, lr}
 8014466:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 801446a:	b192      	cbz	r2, 8014492 <USBD_CDC_ReceivePacket+0x2e>
 801446c:	7c04      	ldrb	r4, [r0, #16]
 801446e:	b944      	cbnz	r4, 8014482 <USBD_CDC_ReceivePacket+0x1e>
 8014470:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014474:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8014478:	2101      	movs	r1, #1
 801447a:	f003 fc60 	bl	8017d3e <USBD_LL_PrepareReceive>
 801447e:	4620      	mov	r0, r4
 8014480:	bd10      	pop	{r4, pc}
 8014482:	2340      	movs	r3, #64	; 0x40
 8014484:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8014488:	2101      	movs	r1, #1
 801448a:	f003 fc58 	bl	8017d3e <USBD_LL_PrepareReceive>
 801448e:	2400      	movs	r4, #0
 8014490:	e7f5      	b.n	801447e <USBD_CDC_ReceivePacket+0x1a>
 8014492:	2403      	movs	r4, #3
 8014494:	e7f3      	b.n	801447e <USBD_CDC_ReceivePacket+0x1a>

08014496 <USBD_Init>:
 8014496:	b198      	cbz	r0, 80144c0 <USBD_Init+0x2a>
 8014498:	b508      	push	{r3, lr}
 801449a:	4603      	mov	r3, r0
 801449c:	2000      	movs	r0, #0
 801449e:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
 80144a2:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
 80144a6:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc
 80144aa:	b109      	cbz	r1, 80144b0 <USBD_Init+0x1a>
 80144ac:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
 80144b0:	2101      	movs	r1, #1
 80144b2:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
 80144b6:	701a      	strb	r2, [r3, #0]
 80144b8:	4618      	mov	r0, r3
 80144ba:	f003 fb9f 	bl	8017bfc <USBD_LL_Init>
 80144be:	bd08      	pop	{r3, pc}
 80144c0:	2003      	movs	r0, #3
 80144c2:	4770      	bx	lr

080144c4 <USBD_DeInit>:
 80144c4:	b510      	push	{r4, lr}
 80144c6:	4604      	mov	r4, r0
 80144c8:	f003 fbfe 	bl	8017cc8 <USBD_LL_Stop>
 80144cc:	2301      	movs	r3, #1
 80144ce:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80144d2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80144d6:	b143      	cbz	r3, 80144ea <USBD_DeInit+0x26>
 80144d8:	685b      	ldr	r3, [r3, #4]
 80144da:	7921      	ldrb	r1, [r4, #4]
 80144dc:	4620      	mov	r0, r4
 80144de:	4798      	blx	r3
 80144e0:	2300      	movs	r3, #0
 80144e2:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
 80144e6:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
 80144ea:	2300      	movs	r3, #0
 80144ec:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4
 80144f0:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
 80144f4:	4620      	mov	r0, r4
 80144f6:	f003 fbd7 	bl	8017ca8 <USBD_LL_DeInit>
 80144fa:	bd10      	pop	{r4, pc}

080144fc <USBD_RegisterClass>:
 80144fc:	b510      	push	{r4, lr}
 80144fe:	b082      	sub	sp, #8
 8014500:	2300      	movs	r3, #0
 8014502:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014506:	b161      	cbz	r1, 8014522 <USBD_RegisterClass+0x26>
 8014508:	4604      	mov	r4, r0
 801450a:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
 801450e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8014510:	b14b      	cbz	r3, 8014526 <USBD_RegisterClass+0x2a>
 8014512:	f10d 0006 	add.w	r0, sp, #6
 8014516:	4798      	blx	r3
 8014518:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
 801451c:	2000      	movs	r0, #0
 801451e:	b002      	add	sp, #8
 8014520:	bd10      	pop	{r4, pc}
 8014522:	2003      	movs	r0, #3
 8014524:	e7fb      	b.n	801451e <USBD_RegisterClass+0x22>
 8014526:	2000      	movs	r0, #0
 8014528:	e7f9      	b.n	801451e <USBD_RegisterClass+0x22>

0801452a <USBD_Start>:
 801452a:	b508      	push	{r3, lr}
 801452c:	f003 fbc4 	bl	8017cb8 <USBD_LL_Start>
 8014530:	bd08      	pop	{r3, pc}

08014532 <USBD_SetClassConfig>:
 8014532:	b508      	push	{r3, lr}
 8014534:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014538:	b113      	cbz	r3, 8014540 <USBD_SetClassConfig+0xe>
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	4798      	blx	r3
 801453e:	bd08      	pop	{r3, pc}
 8014540:	2003      	movs	r0, #3
 8014542:	e7fc      	b.n	801453e <USBD_SetClassConfig+0xc>

08014544 <USBD_ClrClassConfig>:
 8014544:	b508      	push	{r3, lr}
 8014546:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801454a:	b10b      	cbz	r3, 8014550 <USBD_ClrClassConfig+0xc>
 801454c:	685b      	ldr	r3, [r3, #4]
 801454e:	4798      	blx	r3
 8014550:	2000      	movs	r0, #0
 8014552:	bd08      	pop	{r3, pc}

08014554 <USBD_LL_SetupStage>:
 8014554:	b538      	push	{r3, r4, r5, lr}
 8014556:	4604      	mov	r4, r0
 8014558:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 801455c:	4628      	mov	r0, r5
 801455e:	f000 f951 	bl	8014804 <USBD_ParseSetupRequest>
 8014562:	2301      	movs	r3, #1
 8014564:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
 8014568:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 801456c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 8014570:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 8014574:	f001 031f 	and.w	r3, r1, #31
 8014578:	2b01      	cmp	r3, #1
 801457a:	d00d      	beq.n	8014598 <USBD_LL_SetupStage+0x44>
 801457c:	2b02      	cmp	r3, #2
 801457e:	d010      	beq.n	80145a2 <USBD_LL_SetupStage+0x4e>
 8014580:	b12b      	cbz	r3, 801458e <USBD_LL_SetupStage+0x3a>
 8014582:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8014586:	4620      	mov	r0, r4
 8014588:	f003 fbb9 	bl	8017cfe <USBD_LL_StallEP>
 801458c:	e003      	b.n	8014596 <USBD_LL_SetupStage+0x42>
 801458e:	4629      	mov	r1, r5
 8014590:	4620      	mov	r0, r4
 8014592:	f000 f955 	bl	8014840 <USBD_StdDevReq>
 8014596:	bd38      	pop	{r3, r4, r5, pc}
 8014598:	4629      	mov	r1, r5
 801459a:	4620      	mov	r0, r4
 801459c:	f000 fb1e 	bl	8014bdc <USBD_StdItfReq>
 80145a0:	e7f9      	b.n	8014596 <USBD_LL_SetupStage+0x42>
 80145a2:	4629      	mov	r1, r5
 80145a4:	4620      	mov	r0, r4
 80145a6:	f000 fb4d 	bl	8014c44 <USBD_StdEPReq>
 80145aa:	e7f4      	b.n	8014596 <USBD_LL_SetupStage+0x42>

080145ac <USBD_LL_DataOutStage>:
 80145ac:	b538      	push	{r3, r4, r5, lr}
 80145ae:	4604      	mov	r4, r0
 80145b0:	460d      	mov	r5, r1
 80145b2:	bb41      	cbnz	r1, 8014606 <USBD_LL_DataOutStage+0x5a>
 80145b4:	4613      	mov	r3, r2
 80145b6:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80145ba:	2a03      	cmp	r2, #3
 80145bc:	d001      	beq.n	80145c2 <USBD_LL_DataOutStage+0x16>
 80145be:	4608      	mov	r0, r1
 80145c0:	bd38      	pop	{r3, r4, r5, pc}
 80145c2:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 80145c6:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 80145ca:	4291      	cmp	r1, r2
 80145cc:	d809      	bhi.n	80145e2 <USBD_LL_DataOutStage+0x36>
 80145ce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80145d2:	b2db      	uxtb	r3, r3
 80145d4:	2b03      	cmp	r3, #3
 80145d6:	d00f      	beq.n	80145f8 <USBD_LL_DataOutStage+0x4c>
 80145d8:	4620      	mov	r0, r4
 80145da:	f000 fc64 	bl	8014ea6 <USBD_CtlSendStatus>
 80145de:	4628      	mov	r0, r5
 80145e0:	e7ee      	b.n	80145c0 <USBD_LL_DataOutStage+0x14>
 80145e2:	1a89      	subs	r1, r1, r2
 80145e4:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
 80145e8:	428a      	cmp	r2, r1
 80145ea:	bf28      	it	cs
 80145ec:	460a      	movcs	r2, r1
 80145ee:	4619      	mov	r1, r3
 80145f0:	f000 fc51 	bl	8014e96 <USBD_CtlContinueRx>
 80145f4:	4628      	mov	r0, r5
 80145f6:	e7e3      	b.n	80145c0 <USBD_LL_DataOutStage+0x14>
 80145f8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80145fc:	691b      	ldr	r3, [r3, #16]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d0ea      	beq.n	80145d8 <USBD_LL_DataOutStage+0x2c>
 8014602:	4798      	blx	r3
 8014604:	e7e8      	b.n	80145d8 <USBD_LL_DataOutStage+0x2c>
 8014606:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801460a:	b2db      	uxtb	r3, r3
 801460c:	2b03      	cmp	r3, #3
 801460e:	d001      	beq.n	8014614 <USBD_LL_DataOutStage+0x68>
 8014610:	2000      	movs	r0, #0
 8014612:	e7d5      	b.n	80145c0 <USBD_LL_DataOutStage+0x14>
 8014614:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014618:	699b      	ldr	r3, [r3, #24]
 801461a:	b10b      	cbz	r3, 8014620 <USBD_LL_DataOutStage+0x74>
 801461c:	4798      	blx	r3
 801461e:	e7cf      	b.n	80145c0 <USBD_LL_DataOutStage+0x14>
 8014620:	2000      	movs	r0, #0
 8014622:	e7cd      	b.n	80145c0 <USBD_LL_DataOutStage+0x14>

08014624 <USBD_LL_DataInStage>:
 8014624:	b538      	push	{r3, r4, r5, lr}
 8014626:	4604      	mov	r4, r0
 8014628:	460d      	mov	r5, r1
 801462a:	2900      	cmp	r1, #0
 801462c:	d14a      	bne.n	80146c4 <USBD_LL_DataInStage+0xa0>
 801462e:	4613      	mov	r3, r2
 8014630:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8014634:	2a02      	cmp	r2, #2
 8014636:	d005      	beq.n	8014644 <USBD_LL_DataInStage+0x20>
 8014638:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 801463c:	2b01      	cmp	r3, #1
 801463e:	d03c      	beq.n	80146ba <USBD_LL_DataInStage+0x96>
 8014640:	4628      	mov	r0, r5
 8014642:	bd38      	pop	{r3, r4, r5, pc}
 8014644:	69c2      	ldr	r2, [r0, #28]
 8014646:	6a01      	ldr	r1, [r0, #32]
 8014648:	428a      	cmp	r2, r1
 801464a:	d80e      	bhi.n	801466a <USBD_LL_DataInStage+0x46>
 801464c:	428a      	cmp	r2, r1
 801464e:	d018      	beq.n	8014682 <USBD_LL_DataInStage+0x5e>
 8014650:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8014654:	b2db      	uxtb	r3, r3
 8014656:	2b03      	cmp	r3, #3
 8014658:	d027      	beq.n	80146aa <USBD_LL_DataInStage+0x86>
 801465a:	2180      	movs	r1, #128	; 0x80
 801465c:	4620      	mov	r0, r4
 801465e:	f003 fb4e 	bl	8017cfe <USBD_LL_StallEP>
 8014662:	4620      	mov	r0, r4
 8014664:	f000 fc2a 	bl	8014ebc <USBD_CtlReceiveStatus>
 8014668:	e7e6      	b.n	8014638 <USBD_LL_DataInStage+0x14>
 801466a:	1a52      	subs	r2, r2, r1
 801466c:	61c2      	str	r2, [r0, #28]
 801466e:	4619      	mov	r1, r3
 8014670:	f000 fbfa 	bl	8014e68 <USBD_CtlContinueSendData>
 8014674:	2300      	movs	r3, #0
 8014676:	461a      	mov	r2, r3
 8014678:	4619      	mov	r1, r3
 801467a:	4620      	mov	r0, r4
 801467c:	f003 fb5f 	bl	8017d3e <USBD_LL_PrepareReceive>
 8014680:	e7da      	b.n	8014638 <USBD_LL_DataInStage+0x14>
 8014682:	6983      	ldr	r3, [r0, #24]
 8014684:	4299      	cmp	r1, r3
 8014686:	d8e3      	bhi.n	8014650 <USBD_LL_DataInStage+0x2c>
 8014688:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 801468c:	4293      	cmp	r3, r2
 801468e:	d2df      	bcs.n	8014650 <USBD_LL_DataInStage+0x2c>
 8014690:	2200      	movs	r2, #0
 8014692:	4611      	mov	r1, r2
 8014694:	f000 fbe8 	bl	8014e68 <USBD_CtlContinueSendData>
 8014698:	2100      	movs	r1, #0
 801469a:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
 801469e:	460b      	mov	r3, r1
 80146a0:	460a      	mov	r2, r1
 80146a2:	4620      	mov	r0, r4
 80146a4:	f003 fb4b 	bl	8017d3e <USBD_LL_PrepareReceive>
 80146a8:	e7c6      	b.n	8014638 <USBD_LL_DataInStage+0x14>
 80146aa:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80146ae:	68db      	ldr	r3, [r3, #12]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d0d2      	beq.n	801465a <USBD_LL_DataInStage+0x36>
 80146b4:	4620      	mov	r0, r4
 80146b6:	4798      	blx	r3
 80146b8:	e7cf      	b.n	801465a <USBD_LL_DataInStage+0x36>
 80146ba:	2300      	movs	r3, #0
 80146bc:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
 80146c0:	4628      	mov	r0, r5
 80146c2:	e7be      	b.n	8014642 <USBD_LL_DataInStage+0x1e>
 80146c4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80146c8:	b2db      	uxtb	r3, r3
 80146ca:	2b03      	cmp	r3, #3
 80146cc:	d001      	beq.n	80146d2 <USBD_LL_DataInStage+0xae>
 80146ce:	2000      	movs	r0, #0
 80146d0:	e7b7      	b.n	8014642 <USBD_LL_DataInStage+0x1e>
 80146d2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80146d6:	695b      	ldr	r3, [r3, #20]
 80146d8:	b10b      	cbz	r3, 80146de <USBD_LL_DataInStage+0xba>
 80146da:	4798      	blx	r3
 80146dc:	e7b1      	b.n	8014642 <USBD_LL_DataInStage+0x1e>
 80146de:	2000      	movs	r0, #0
 80146e0:	e7af      	b.n	8014642 <USBD_LL_DataInStage+0x1e>

080146e2 <USBD_LL_Reset>:
 80146e2:	2301      	movs	r3, #1
 80146e4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 80146e8:	2300      	movs	r3, #0
 80146ea:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
 80146ee:	6043      	str	r3, [r0, #4]
 80146f0:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
 80146f4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80146f8:	b1f3      	cbz	r3, 8014738 <USBD_LL_Reset+0x56>
 80146fa:	b570      	push	{r4, r5, r6, lr}
 80146fc:	4604      	mov	r4, r0
 80146fe:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8014702:	b11a      	cbz	r2, 801470c <USBD_LL_Reset+0x2a>
 8014704:	685b      	ldr	r3, [r3, #4]
 8014706:	b10b      	cbz	r3, 801470c <USBD_LL_Reset+0x2a>
 8014708:	2100      	movs	r1, #0
 801470a:	4798      	blx	r3
 801470c:	2340      	movs	r3, #64	; 0x40
 801470e:	2200      	movs	r2, #0
 8014710:	4611      	mov	r1, r2
 8014712:	4620      	mov	r0, r4
 8014714:	f003 fae0 	bl	8017cd8 <USBD_LL_OpenEP>
 8014718:	2601      	movs	r6, #1
 801471a:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
 801471e:	2540      	movs	r5, #64	; 0x40
 8014720:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
 8014724:	462b      	mov	r3, r5
 8014726:	2200      	movs	r2, #0
 8014728:	2180      	movs	r1, #128	; 0x80
 801472a:	4620      	mov	r0, r4
 801472c:	f003 fad4 	bl	8017cd8 <USBD_LL_OpenEP>
 8014730:	84a6      	strh	r6, [r4, #36]	; 0x24
 8014732:	6225      	str	r5, [r4, #32]
 8014734:	2000      	movs	r0, #0
 8014736:	bd70      	pop	{r4, r5, r6, pc}
 8014738:	2003      	movs	r0, #3
 801473a:	4770      	bx	lr

0801473c <USBD_LL_SetSpeed>:
 801473c:	7401      	strb	r1, [r0, #16]
 801473e:	2000      	movs	r0, #0
 8014740:	4770      	bx	lr

08014742 <USBD_LL_Suspend>:
 8014742:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014746:	b2db      	uxtb	r3, r3
 8014748:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
 801474c:	2304      	movs	r3, #4
 801474e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8014752:	2000      	movs	r0, #0
 8014754:	4770      	bx	lr

08014756 <USBD_LL_Resume>:
 8014756:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801475a:	b2db      	uxtb	r3, r3
 801475c:	2b04      	cmp	r3, #4
 801475e:	d001      	beq.n	8014764 <USBD_LL_Resume+0xe>
 8014760:	2000      	movs	r0, #0
 8014762:	4770      	bx	lr
 8014764:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8014768:	b2db      	uxtb	r3, r3
 801476a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 801476e:	e7f7      	b.n	8014760 <USBD_LL_Resume+0xa>

08014770 <USBD_LL_SOF>:
 8014770:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8014774:	b162      	cbz	r2, 8014790 <USBD_LL_SOF+0x20>
 8014776:	b508      	push	{r3, lr}
 8014778:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801477c:	b2db      	uxtb	r3, r3
 801477e:	2b03      	cmp	r3, #3
 8014780:	d001      	beq.n	8014786 <USBD_LL_SOF+0x16>
 8014782:	2000      	movs	r0, #0
 8014784:	bd08      	pop	{r3, pc}
 8014786:	69d3      	ldr	r3, [r2, #28]
 8014788:	b123      	cbz	r3, 8014794 <USBD_LL_SOF+0x24>
 801478a:	4798      	blx	r3
 801478c:	2000      	movs	r0, #0
 801478e:	e7f9      	b.n	8014784 <USBD_LL_SOF+0x14>
 8014790:	2003      	movs	r0, #3
 8014792:	4770      	bx	lr
 8014794:	2000      	movs	r0, #0
 8014796:	e7f5      	b.n	8014784 <USBD_LL_SOF+0x14>

08014798 <USBD_LL_IsoINIncomplete>:
 8014798:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 801479c:	b162      	cbz	r2, 80147b8 <USBD_LL_IsoINIncomplete+0x20>
 801479e:	b508      	push	{r3, lr}
 80147a0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80147a4:	b2db      	uxtb	r3, r3
 80147a6:	2b03      	cmp	r3, #3
 80147a8:	d001      	beq.n	80147ae <USBD_LL_IsoINIncomplete+0x16>
 80147aa:	2000      	movs	r0, #0
 80147ac:	bd08      	pop	{r3, pc}
 80147ae:	6a13      	ldr	r3, [r2, #32]
 80147b0:	b123      	cbz	r3, 80147bc <USBD_LL_IsoINIncomplete+0x24>
 80147b2:	4798      	blx	r3
 80147b4:	2000      	movs	r0, #0
 80147b6:	e7f9      	b.n	80147ac <USBD_LL_IsoINIncomplete+0x14>
 80147b8:	2003      	movs	r0, #3
 80147ba:	4770      	bx	lr
 80147bc:	2000      	movs	r0, #0
 80147be:	e7f5      	b.n	80147ac <USBD_LL_IsoINIncomplete+0x14>

080147c0 <USBD_LL_IsoOUTIncomplete>:
 80147c0:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 80147c4:	b162      	cbz	r2, 80147e0 <USBD_LL_IsoOUTIncomplete+0x20>
 80147c6:	b508      	push	{r3, lr}
 80147c8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80147cc:	b2db      	uxtb	r3, r3
 80147ce:	2b03      	cmp	r3, #3
 80147d0:	d001      	beq.n	80147d6 <USBD_LL_IsoOUTIncomplete+0x16>
 80147d2:	2000      	movs	r0, #0
 80147d4:	bd08      	pop	{r3, pc}
 80147d6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80147d8:	b123      	cbz	r3, 80147e4 <USBD_LL_IsoOUTIncomplete+0x24>
 80147da:	4798      	blx	r3
 80147dc:	2000      	movs	r0, #0
 80147de:	e7f9      	b.n	80147d4 <USBD_LL_IsoOUTIncomplete+0x14>
 80147e0:	2003      	movs	r0, #3
 80147e2:	4770      	bx	lr
 80147e4:	2000      	movs	r0, #0
 80147e6:	e7f5      	b.n	80147d4 <USBD_LL_IsoOUTIncomplete+0x14>

080147e8 <USBD_LL_DevConnected>:
 80147e8:	2000      	movs	r0, #0
 80147ea:	4770      	bx	lr

080147ec <USBD_LL_DevDisconnected>:
 80147ec:	b508      	push	{r3, lr}
 80147ee:	2301      	movs	r3, #1
 80147f0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 80147f4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80147f8:	b113      	cbz	r3, 8014800 <USBD_LL_DevDisconnected+0x14>
 80147fa:	685b      	ldr	r3, [r3, #4]
 80147fc:	7901      	ldrb	r1, [r0, #4]
 80147fe:	4798      	blx	r3
 8014800:	2000      	movs	r0, #0
 8014802:	bd08      	pop	{r3, pc}

08014804 <USBD_ParseSetupRequest>:
 8014804:	780b      	ldrb	r3, [r1, #0]
 8014806:	7003      	strb	r3, [r0, #0]
 8014808:	784b      	ldrb	r3, [r1, #1]
 801480a:	7043      	strb	r3, [r0, #1]
 801480c:	78ca      	ldrb	r2, [r1, #3]
 801480e:	788b      	ldrb	r3, [r1, #2]
 8014810:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014814:	8043      	strh	r3, [r0, #2]
 8014816:	794a      	ldrb	r2, [r1, #5]
 8014818:	790b      	ldrb	r3, [r1, #4]
 801481a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801481e:	8083      	strh	r3, [r0, #4]
 8014820:	79ca      	ldrb	r2, [r1, #7]
 8014822:	798b      	ldrb	r3, [r1, #6]
 8014824:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014828:	80c3      	strh	r3, [r0, #6]
 801482a:	4770      	bx	lr

0801482c <USBD_CtlError>:
 801482c:	b510      	push	{r4, lr}
 801482e:	4604      	mov	r4, r0
 8014830:	2180      	movs	r1, #128	; 0x80
 8014832:	f003 fa64 	bl	8017cfe <USBD_LL_StallEP>
 8014836:	2100      	movs	r1, #0
 8014838:	4620      	mov	r0, r4
 801483a:	f003 fa60 	bl	8017cfe <USBD_LL_StallEP>
 801483e:	bd10      	pop	{r4, pc}

08014840 <USBD_StdDevReq>:
 8014840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014842:	b083      	sub	sp, #12
 8014844:	4607      	mov	r7, r0
 8014846:	460e      	mov	r6, r1
 8014848:	780c      	ldrb	r4, [r1, #0]
 801484a:	f004 0460 	and.w	r4, r4, #96	; 0x60
 801484e:	2c20      	cmp	r4, #32
 8014850:	d006      	beq.n	8014860 <USBD_StdDevReq+0x20>
 8014852:	2c40      	cmp	r4, #64	; 0x40
 8014854:	d004      	beq.n	8014860 <USBD_StdDevReq+0x20>
 8014856:	b16c      	cbz	r4, 8014874 <USBD_StdDevReq+0x34>
 8014858:	f7ff ffe8 	bl	801482c <USBD_CtlError>
 801485c:	2400      	movs	r4, #0
 801485e:	e006      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014860:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8014864:	689b      	ldr	r3, [r3, #8]
 8014866:	4631      	mov	r1, r6
 8014868:	4638      	mov	r0, r7
 801486a:	4798      	blx	r3
 801486c:	4604      	mov	r4, r0
 801486e:	4620      	mov	r0, r4
 8014870:	b003      	add	sp, #12
 8014872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014874:	784d      	ldrb	r5, [r1, #1]
 8014876:	2d09      	cmp	r5, #9
 8014878:	f200 81ab 	bhi.w	8014bd2 <USBD_StdDevReq+0x392>
 801487c:	e8df f015 	tbh	[pc, r5, lsl #1]
 8014880:	0197016f 	.word	0x0197016f
 8014884:	018e01a9 	.word	0x018e01a9
 8014888:	00ca01a9 	.word	0x00ca01a9
 801488c:	01a9000a 	.word	0x01a9000a
 8014890:	00f1014f 	.word	0x00f1014f
 8014894:	2300      	movs	r3, #0
 8014896:	f8ad 3006 	strh.w	r3, [sp, #6]
 801489a:	884a      	ldrh	r2, [r1, #2]
 801489c:	0a13      	lsrs	r3, r2, #8
 801489e:	3b01      	subs	r3, #1
 80148a0:	2b06      	cmp	r3, #6
 80148a2:	f200 80aa 	bhi.w	80149fa <USBD_StdDevReq+0x1ba>
 80148a6:	e8df f003 	tbb	[pc, r3]
 80148aa:	1e04      	.short	0x1e04
 80148ac:	8ca8a832 	.word	0x8ca8a832
 80148b0:	99          	.byte	0x99
 80148b1:	00          	.byte	0x00
 80148b2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	f10d 0106 	add.w	r1, sp, #6
 80148bc:	7c00      	ldrb	r0, [r0, #16]
 80148be:	4798      	blx	r3
 80148c0:	88f2      	ldrh	r2, [r6, #6]
 80148c2:	2a00      	cmp	r2, #0
 80148c4:	f000 80a2 	beq.w	8014a0c <USBD_StdDevReq+0x1cc>
 80148c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	f000 8098 	beq.w	8014a02 <USBD_StdDevReq+0x1c2>
 80148d2:	429a      	cmp	r2, r3
 80148d4:	bf28      	it	cs
 80148d6:	461a      	movcs	r2, r3
 80148d8:	f8ad 2006 	strh.w	r2, [sp, #6]
 80148dc:	4601      	mov	r1, r0
 80148de:	4638      	mov	r0, r7
 80148e0:	f000 fab5 	bl	8014e4e <USBD_CtlSendData>
 80148e4:	e7c3      	b.n	801486e <USBD_StdDevReq+0x2e>
 80148e6:	7c03      	ldrb	r3, [r0, #16]
 80148e8:	b943      	cbnz	r3, 80148fc <USBD_StdDevReq+0xbc>
 80148ea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80148ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80148f0:	f10d 0006 	add.w	r0, sp, #6
 80148f4:	4798      	blx	r3
 80148f6:	2302      	movs	r3, #2
 80148f8:	7043      	strb	r3, [r0, #1]
 80148fa:	e7e1      	b.n	80148c0 <USBD_StdDevReq+0x80>
 80148fc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014902:	f10d 0006 	add.w	r0, sp, #6
 8014906:	4798      	blx	r3
 8014908:	2302      	movs	r3, #2
 801490a:	7043      	strb	r3, [r0, #1]
 801490c:	e7d8      	b.n	80148c0 <USBD_StdDevReq+0x80>
 801490e:	b2d2      	uxtb	r2, r2
 8014910:	2a05      	cmp	r2, #5
 8014912:	d852      	bhi.n	80149ba <USBD_StdDevReq+0x17a>
 8014914:	e8df f002 	tbb	[pc, r2]
 8014918:	2a1d1003 	.word	0x2a1d1003
 801491c:	4437      	.short	0x4437
 801491e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014922:	685b      	ldr	r3, [r3, #4]
 8014924:	b123      	cbz	r3, 8014930 <USBD_StdDevReq+0xf0>
 8014926:	f10d 0106 	add.w	r1, sp, #6
 801492a:	7c00      	ldrb	r0, [r0, #16]
 801492c:	4798      	blx	r3
 801492e:	e7c7      	b.n	80148c0 <USBD_StdDevReq+0x80>
 8014930:	4631      	mov	r1, r6
 8014932:	f7ff ff7b 	bl	801482c <USBD_CtlError>
 8014936:	e79a      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014938:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801493c:	689b      	ldr	r3, [r3, #8]
 801493e:	b123      	cbz	r3, 801494a <USBD_StdDevReq+0x10a>
 8014940:	f10d 0106 	add.w	r1, sp, #6
 8014944:	7c00      	ldrb	r0, [r0, #16]
 8014946:	4798      	blx	r3
 8014948:	e7ba      	b.n	80148c0 <USBD_StdDevReq+0x80>
 801494a:	4631      	mov	r1, r6
 801494c:	f7ff ff6e 	bl	801482c <USBD_CtlError>
 8014950:	e78d      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014952:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014956:	68db      	ldr	r3, [r3, #12]
 8014958:	b123      	cbz	r3, 8014964 <USBD_StdDevReq+0x124>
 801495a:	f10d 0106 	add.w	r1, sp, #6
 801495e:	7c00      	ldrb	r0, [r0, #16]
 8014960:	4798      	blx	r3
 8014962:	e7ad      	b.n	80148c0 <USBD_StdDevReq+0x80>
 8014964:	4631      	mov	r1, r6
 8014966:	f7ff ff61 	bl	801482c <USBD_CtlError>
 801496a:	e780      	b.n	801486e <USBD_StdDevReq+0x2e>
 801496c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014970:	691b      	ldr	r3, [r3, #16]
 8014972:	b123      	cbz	r3, 801497e <USBD_StdDevReq+0x13e>
 8014974:	f10d 0106 	add.w	r1, sp, #6
 8014978:	7c00      	ldrb	r0, [r0, #16]
 801497a:	4798      	blx	r3
 801497c:	e7a0      	b.n	80148c0 <USBD_StdDevReq+0x80>
 801497e:	4631      	mov	r1, r6
 8014980:	f7ff ff54 	bl	801482c <USBD_CtlError>
 8014984:	e773      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014986:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801498a:	695b      	ldr	r3, [r3, #20]
 801498c:	b123      	cbz	r3, 8014998 <USBD_StdDevReq+0x158>
 801498e:	f10d 0106 	add.w	r1, sp, #6
 8014992:	7c00      	ldrb	r0, [r0, #16]
 8014994:	4798      	blx	r3
 8014996:	e793      	b.n	80148c0 <USBD_StdDevReq+0x80>
 8014998:	4631      	mov	r1, r6
 801499a:	f7ff ff47 	bl	801482c <USBD_CtlError>
 801499e:	e766      	b.n	801486e <USBD_StdDevReq+0x2e>
 80149a0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80149a4:	699b      	ldr	r3, [r3, #24]
 80149a6:	b123      	cbz	r3, 80149b2 <USBD_StdDevReq+0x172>
 80149a8:	f10d 0106 	add.w	r1, sp, #6
 80149ac:	7c00      	ldrb	r0, [r0, #16]
 80149ae:	4798      	blx	r3
 80149b0:	e786      	b.n	80148c0 <USBD_StdDevReq+0x80>
 80149b2:	4631      	mov	r1, r6
 80149b4:	f7ff ff3a 	bl	801482c <USBD_CtlError>
 80149b8:	e759      	b.n	801486e <USBD_StdDevReq+0x2e>
 80149ba:	4631      	mov	r1, r6
 80149bc:	f7ff ff36 	bl	801482c <USBD_CtlError>
 80149c0:	e755      	b.n	801486e <USBD_StdDevReq+0x2e>
 80149c2:	7c03      	ldrb	r3, [r0, #16]
 80149c4:	b933      	cbnz	r3, 80149d4 <USBD_StdDevReq+0x194>
 80149c6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80149ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149cc:	f10d 0006 	add.w	r0, sp, #6
 80149d0:	4798      	blx	r3
 80149d2:	e775      	b.n	80148c0 <USBD_StdDevReq+0x80>
 80149d4:	4631      	mov	r1, r6
 80149d6:	f7ff ff29 	bl	801482c <USBD_CtlError>
 80149da:	e748      	b.n	801486e <USBD_StdDevReq+0x2e>
 80149dc:	7c03      	ldrb	r3, [r0, #16]
 80149de:	b943      	cbnz	r3, 80149f2 <USBD_StdDevReq+0x1b2>
 80149e0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80149e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149e6:	f10d 0006 	add.w	r0, sp, #6
 80149ea:	4798      	blx	r3
 80149ec:	2307      	movs	r3, #7
 80149ee:	7043      	strb	r3, [r0, #1]
 80149f0:	e766      	b.n	80148c0 <USBD_StdDevReq+0x80>
 80149f2:	4631      	mov	r1, r6
 80149f4:	f7ff ff1a 	bl	801482c <USBD_CtlError>
 80149f8:	e739      	b.n	801486e <USBD_StdDevReq+0x2e>
 80149fa:	4631      	mov	r1, r6
 80149fc:	f7ff ff16 	bl	801482c <USBD_CtlError>
 8014a00:	e735      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014a02:	4631      	mov	r1, r6
 8014a04:	4638      	mov	r0, r7
 8014a06:	f7ff ff11 	bl	801482c <USBD_CtlError>
 8014a0a:	e730      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014a0c:	4638      	mov	r0, r7
 8014a0e:	f000 fa4a 	bl	8014ea6 <USBD_CtlSendStatus>
 8014a12:	e72c      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014a14:	888b      	ldrh	r3, [r1, #4]
 8014a16:	b9fb      	cbnz	r3, 8014a58 <USBD_StdDevReq+0x218>
 8014a18:	88cb      	ldrh	r3, [r1, #6]
 8014a1a:	b9eb      	cbnz	r3, 8014a58 <USBD_StdDevReq+0x218>
 8014a1c:	884b      	ldrh	r3, [r1, #2]
 8014a1e:	2b7f      	cmp	r3, #127	; 0x7f
 8014a20:	d81a      	bhi.n	8014a58 <USBD_StdDevReq+0x218>
 8014a22:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8014a26:	b2d2      	uxtb	r2, r2
 8014a28:	2a03      	cmp	r2, #3
 8014a2a:	d00d      	beq.n	8014a48 <USBD_StdDevReq+0x208>
 8014a2c:	b2dd      	uxtb	r5, r3
 8014a2e:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
 8014a32:	4629      	mov	r1, r5
 8014a34:	f003 f973 	bl	8017d1e <USBD_LL_SetUSBAddress>
 8014a38:	4638      	mov	r0, r7
 8014a3a:	f000 fa34 	bl	8014ea6 <USBD_CtlSendStatus>
 8014a3e:	b135      	cbz	r5, 8014a4e <USBD_StdDevReq+0x20e>
 8014a40:	2302      	movs	r3, #2
 8014a42:	f887 329c 	strb.w	r3, [r7, #668]	; 0x29c
 8014a46:	e712      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014a48:	f7ff fef0 	bl	801482c <USBD_CtlError>
 8014a4c:	e70f      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014a4e:	2301      	movs	r3, #1
 8014a50:	f887 329c 	strb.w	r3, [r7, #668]	; 0x29c
 8014a54:	462c      	mov	r4, r5
 8014a56:	e70a      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014a58:	4631      	mov	r1, r6
 8014a5a:	4638      	mov	r0, r7
 8014a5c:	f7ff fee6 	bl	801482c <USBD_CtlError>
 8014a60:	e705      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014a62:	788d      	ldrb	r5, [r1, #2]
 8014a64:	4b5c      	ldr	r3, [pc, #368]	; (8014bd8 <USBD_StdDevReq+0x398>)
 8014a66:	701d      	strb	r5, [r3, #0]
 8014a68:	2d01      	cmp	r5, #1
 8014a6a:	d80f      	bhi.n	8014a8c <USBD_StdDevReq+0x24c>
 8014a6c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014a70:	b2db      	uxtb	r3, r3
 8014a72:	2b02      	cmp	r3, #2
 8014a74:	d00e      	beq.n	8014a94 <USBD_StdDevReq+0x254>
 8014a76:	2b03      	cmp	r3, #3
 8014a78:	d023      	beq.n	8014ac2 <USBD_StdDevReq+0x282>
 8014a7a:	f7ff fed7 	bl	801482c <USBD_CtlError>
 8014a7e:	4b56      	ldr	r3, [pc, #344]	; (8014bd8 <USBD_StdDevReq+0x398>)
 8014a80:	7819      	ldrb	r1, [r3, #0]
 8014a82:	4638      	mov	r0, r7
 8014a84:	f7ff fd5e 	bl	8014544 <USBD_ClrClassConfig>
 8014a88:	2403      	movs	r4, #3
 8014a8a:	e6f0      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014a8c:	f7ff fece 	bl	801482c <USBD_CtlError>
 8014a90:	2403      	movs	r4, #3
 8014a92:	e6ec      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014a94:	b18d      	cbz	r5, 8014aba <USBD_StdDevReq+0x27a>
 8014a96:	2101      	movs	r1, #1
 8014a98:	6041      	str	r1, [r0, #4]
 8014a9a:	f7ff fd4a 	bl	8014532 <USBD_SetClassConfig>
 8014a9e:	4604      	mov	r4, r0
 8014aa0:	b120      	cbz	r0, 8014aac <USBD_StdDevReq+0x26c>
 8014aa2:	4631      	mov	r1, r6
 8014aa4:	4638      	mov	r0, r7
 8014aa6:	f7ff fec1 	bl	801482c <USBD_CtlError>
 8014aaa:	e6e0      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014aac:	4638      	mov	r0, r7
 8014aae:	f000 f9fa 	bl	8014ea6 <USBD_CtlSendStatus>
 8014ab2:	2303      	movs	r3, #3
 8014ab4:	f887 329c 	strb.w	r3, [r7, #668]	; 0x29c
 8014ab8:	e6d9      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014aba:	f000 f9f4 	bl	8014ea6 <USBD_CtlSendStatus>
 8014abe:	462c      	mov	r4, r5
 8014ac0:	e6d5      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014ac2:	b1cd      	cbz	r5, 8014af8 <USBD_StdDevReq+0x2b8>
 8014ac4:	6841      	ldr	r1, [r0, #4]
 8014ac6:	2901      	cmp	r1, #1
 8014ac8:	d026      	beq.n	8014b18 <USBD_StdDevReq+0x2d8>
 8014aca:	b2c9      	uxtb	r1, r1
 8014acc:	f7ff fd3a 	bl	8014544 <USBD_ClrClassConfig>
 8014ad0:	4b41      	ldr	r3, [pc, #260]	; (8014bd8 <USBD_StdDevReq+0x398>)
 8014ad2:	7819      	ldrb	r1, [r3, #0]
 8014ad4:	6079      	str	r1, [r7, #4]
 8014ad6:	4638      	mov	r0, r7
 8014ad8:	f7ff fd2b 	bl	8014532 <USBD_SetClassConfig>
 8014adc:	4604      	mov	r4, r0
 8014ade:	b1b8      	cbz	r0, 8014b10 <USBD_StdDevReq+0x2d0>
 8014ae0:	4631      	mov	r1, r6
 8014ae2:	4638      	mov	r0, r7
 8014ae4:	f7ff fea2 	bl	801482c <USBD_CtlError>
 8014ae8:	7939      	ldrb	r1, [r7, #4]
 8014aea:	4638      	mov	r0, r7
 8014aec:	f7ff fd2a 	bl	8014544 <USBD_ClrClassConfig>
 8014af0:	2302      	movs	r3, #2
 8014af2:	f887 329c 	strb.w	r3, [r7, #668]	; 0x29c
 8014af6:	e6ba      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014af8:	2302      	movs	r3, #2
 8014afa:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8014afe:	2100      	movs	r1, #0
 8014b00:	6041      	str	r1, [r0, #4]
 8014b02:	f7ff fd1f 	bl	8014544 <USBD_ClrClassConfig>
 8014b06:	4638      	mov	r0, r7
 8014b08:	f000 f9cd 	bl	8014ea6 <USBD_CtlSendStatus>
 8014b0c:	462c      	mov	r4, r5
 8014b0e:	e6ae      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014b10:	4638      	mov	r0, r7
 8014b12:	f000 f9c8 	bl	8014ea6 <USBD_CtlSendStatus>
 8014b16:	e6aa      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014b18:	f000 f9c5 	bl	8014ea6 <USBD_CtlSendStatus>
 8014b1c:	e6a7      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014b1e:	88cb      	ldrh	r3, [r1, #6]
 8014b20:	2b01      	cmp	r3, #1
 8014b22:	d10a      	bne.n	8014b3a <USBD_StdDevReq+0x2fa>
 8014b24:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014b28:	b2db      	uxtb	r3, r3
 8014b2a:	2b02      	cmp	r3, #2
 8014b2c:	d808      	bhi.n	8014b40 <USBD_StdDevReq+0x300>
 8014b2e:	b973      	cbnz	r3, 8014b4e <USBD_StdDevReq+0x30e>
 8014b30:	4631      	mov	r1, r6
 8014b32:	4638      	mov	r0, r7
 8014b34:	f7ff fe7a 	bl	801482c <USBD_CtlError>
 8014b38:	e699      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014b3a:	f7ff fe77 	bl	801482c <USBD_CtlError>
 8014b3e:	e696      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014b40:	2b03      	cmp	r3, #3
 8014b42:	d1f5      	bne.n	8014b30 <USBD_StdDevReq+0x2f0>
 8014b44:	2201      	movs	r2, #1
 8014b46:	1d01      	adds	r1, r0, #4
 8014b48:	f000 f981 	bl	8014e4e <USBD_CtlSendData>
 8014b4c:	e68f      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014b4e:	4601      	mov	r1, r0
 8014b50:	2300      	movs	r3, #0
 8014b52:	f841 3f08 	str.w	r3, [r1, #8]!
 8014b56:	2201      	movs	r2, #1
 8014b58:	f000 f979 	bl	8014e4e <USBD_CtlSendData>
 8014b5c:	e687      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014b5e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014b62:	3b01      	subs	r3, #1
 8014b64:	2b02      	cmp	r3, #2
 8014b66:	d815      	bhi.n	8014b94 <USBD_StdDevReq+0x354>
 8014b68:	88cb      	ldrh	r3, [r1, #6]
 8014b6a:	2b02      	cmp	r3, #2
 8014b6c:	d10e      	bne.n	8014b8c <USBD_StdDevReq+0x34c>
 8014b6e:	2301      	movs	r3, #1
 8014b70:	60c3      	str	r3, [r0, #12]
 8014b72:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8014b76:	b10b      	cbz	r3, 8014b7c <USBD_StdDevReq+0x33c>
 8014b78:	2303      	movs	r3, #3
 8014b7a:	60c3      	str	r3, [r0, #12]
 8014b7c:	2202      	movs	r2, #2
 8014b7e:	f107 010c 	add.w	r1, r7, #12
 8014b82:	4638      	mov	r0, r7
 8014b84:	f000 f963 	bl	8014e4e <USBD_CtlSendData>
 8014b88:	462c      	mov	r4, r5
 8014b8a:	e670      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014b8c:	f7ff fe4e 	bl	801482c <USBD_CtlError>
 8014b90:	462c      	mov	r4, r5
 8014b92:	e66c      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014b94:	f7ff fe4a 	bl	801482c <USBD_CtlError>
 8014b98:	462c      	mov	r4, r5
 8014b9a:	e668      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014b9c:	884b      	ldrh	r3, [r1, #2]
 8014b9e:	2b01      	cmp	r3, #1
 8014ba0:	f47f ae65 	bne.w	801486e <USBD_StdDevReq+0x2e>
 8014ba4:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
 8014ba8:	f000 f97d 	bl	8014ea6 <USBD_CtlSendStatus>
 8014bac:	e65f      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014bae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014bb2:	3b01      	subs	r3, #1
 8014bb4:	2b02      	cmp	r3, #2
 8014bb6:	d809      	bhi.n	8014bcc <USBD_StdDevReq+0x38c>
 8014bb8:	884b      	ldrh	r3, [r1, #2]
 8014bba:	2b01      	cmp	r3, #1
 8014bbc:	f47f ae57 	bne.w	801486e <USBD_StdDevReq+0x2e>
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
 8014bc6:	f000 f96e 	bl	8014ea6 <USBD_CtlSendStatus>
 8014bca:	e650      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014bcc:	f7ff fe2e 	bl	801482c <USBD_CtlError>
 8014bd0:	e64d      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014bd2:	f7ff fe2b 	bl	801482c <USBD_CtlError>
 8014bd6:	e64a      	b.n	801486e <USBD_StdDevReq+0x2e>
 8014bd8:	20000674 	.word	0x20000674

08014bdc <USBD_StdItfReq>:
 8014bdc:	b570      	push	{r4, r5, r6, lr}
 8014bde:	4605      	mov	r5, r0
 8014be0:	460c      	mov	r4, r1
 8014be2:	780b      	ldrb	r3, [r1, #0]
 8014be4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8014be8:	2a40      	cmp	r2, #64	; 0x40
 8014bea:	d007      	beq.n	8014bfc <USBD_StdItfReq+0x20>
 8014bec:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014bf0:	d004      	beq.n	8014bfc <USBD_StdItfReq+0x20>
 8014bf2:	f7ff fe1b 	bl	801482c <USBD_CtlError>
 8014bf6:	2600      	movs	r6, #0
 8014bf8:	4630      	mov	r0, r6
 8014bfa:	bd70      	pop	{r4, r5, r6, pc}
 8014bfc:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8014c00:	3b01      	subs	r3, #1
 8014c02:	2b02      	cmp	r3, #2
 8014c04:	d818      	bhi.n	8014c38 <USBD_StdItfReq+0x5c>
 8014c06:	7923      	ldrb	r3, [r4, #4]
 8014c08:	2b01      	cmp	r3, #1
 8014c0a:	d80f      	bhi.n	8014c2c <USBD_StdItfReq+0x50>
 8014c0c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8014c10:	689b      	ldr	r3, [r3, #8]
 8014c12:	4621      	mov	r1, r4
 8014c14:	4628      	mov	r0, r5
 8014c16:	4798      	blx	r3
 8014c18:	4606      	mov	r6, r0
 8014c1a:	88e3      	ldrh	r3, [r4, #6]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d1eb      	bne.n	8014bf8 <USBD_StdItfReq+0x1c>
 8014c20:	2800      	cmp	r0, #0
 8014c22:	d1e9      	bne.n	8014bf8 <USBD_StdItfReq+0x1c>
 8014c24:	4628      	mov	r0, r5
 8014c26:	f000 f93e 	bl	8014ea6 <USBD_CtlSendStatus>
 8014c2a:	e7e5      	b.n	8014bf8 <USBD_StdItfReq+0x1c>
 8014c2c:	4621      	mov	r1, r4
 8014c2e:	4628      	mov	r0, r5
 8014c30:	f7ff fdfc 	bl	801482c <USBD_CtlError>
 8014c34:	2600      	movs	r6, #0
 8014c36:	e7df      	b.n	8014bf8 <USBD_StdItfReq+0x1c>
 8014c38:	4621      	mov	r1, r4
 8014c3a:	4628      	mov	r0, r5
 8014c3c:	f7ff fdf6 	bl	801482c <USBD_CtlError>
 8014c40:	2600      	movs	r6, #0
 8014c42:	e7d9      	b.n	8014bf8 <USBD_StdItfReq+0x1c>

08014c44 <USBD_StdEPReq>:
 8014c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c46:	4607      	mov	r7, r0
 8014c48:	460e      	mov	r6, r1
 8014c4a:	780c      	ldrb	r4, [r1, #0]
 8014c4c:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8014c50:	2c20      	cmp	r4, #32
 8014c52:	d006      	beq.n	8014c62 <USBD_StdEPReq+0x1e>
 8014c54:	2c40      	cmp	r4, #64	; 0x40
 8014c56:	d004      	beq.n	8014c62 <USBD_StdEPReq+0x1e>
 8014c58:	b164      	cbz	r4, 8014c74 <USBD_StdEPReq+0x30>
 8014c5a:	f7ff fde7 	bl	801482c <USBD_CtlError>
 8014c5e:	2400      	movs	r4, #0
 8014c60:	e006      	b.n	8014c70 <USBD_StdEPReq+0x2c>
 8014c62:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8014c66:	689b      	ldr	r3, [r3, #8]
 8014c68:	4631      	mov	r1, r6
 8014c6a:	4638      	mov	r0, r7
 8014c6c:	4798      	blx	r3
 8014c6e:	4604      	mov	r4, r0
 8014c70:	4620      	mov	r0, r4
 8014c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c74:	888b      	ldrh	r3, [r1, #4]
 8014c76:	b2d9      	uxtb	r1, r3
 8014c78:	7875      	ldrb	r5, [r6, #1]
 8014c7a:	2d01      	cmp	r5, #1
 8014c7c:	d02f      	beq.n	8014cde <USBD_StdEPReq+0x9a>
 8014c7e:	2d03      	cmp	r5, #3
 8014c80:	d005      	beq.n	8014c8e <USBD_StdEPReq+0x4a>
 8014c82:	2d00      	cmp	r5, #0
 8014c84:	d059      	beq.n	8014d3a <USBD_StdEPReq+0xf6>
 8014c86:	4631      	mov	r1, r6
 8014c88:	f7ff fdd0 	bl	801482c <USBD_CtlError>
 8014c8c:	e7f0      	b.n	8014c70 <USBD_StdEPReq+0x2c>
 8014c8e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014c92:	b2db      	uxtb	r3, r3
 8014c94:	2b02      	cmp	r3, #2
 8014c96:	d005      	beq.n	8014ca4 <USBD_StdEPReq+0x60>
 8014c98:	2b03      	cmp	r3, #3
 8014c9a:	d012      	beq.n	8014cc2 <USBD_StdEPReq+0x7e>
 8014c9c:	4631      	mov	r1, r6
 8014c9e:	f7ff fdc5 	bl	801482c <USBD_CtlError>
 8014ca2:	e7e5      	b.n	8014c70 <USBD_StdEPReq+0x2c>
 8014ca4:	f011 057f 	ands.w	r5, r1, #127	; 0x7f
 8014ca8:	d006      	beq.n	8014cb8 <USBD_StdEPReq+0x74>
 8014caa:	f003 f828 	bl	8017cfe <USBD_LL_StallEP>
 8014cae:	2180      	movs	r1, #128	; 0x80
 8014cb0:	4638      	mov	r0, r7
 8014cb2:	f003 f824 	bl	8017cfe <USBD_LL_StallEP>
 8014cb6:	e7db      	b.n	8014c70 <USBD_StdEPReq+0x2c>
 8014cb8:	4631      	mov	r1, r6
 8014cba:	f7ff fdb7 	bl	801482c <USBD_CtlError>
 8014cbe:	462c      	mov	r4, r5
 8014cc0:	e7d6      	b.n	8014c70 <USBD_StdEPReq+0x2c>
 8014cc2:	8873      	ldrh	r3, [r6, #2]
 8014cc4:	b923      	cbnz	r3, 8014cd0 <USBD_StdEPReq+0x8c>
 8014cc6:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8014cca:	d001      	beq.n	8014cd0 <USBD_StdEPReq+0x8c>
 8014ccc:	88f3      	ldrh	r3, [r6, #6]
 8014cce:	b11b      	cbz	r3, 8014cd8 <USBD_StdEPReq+0x94>
 8014cd0:	4638      	mov	r0, r7
 8014cd2:	f000 f8e8 	bl	8014ea6 <USBD_CtlSendStatus>
 8014cd6:	e7cb      	b.n	8014c70 <USBD_StdEPReq+0x2c>
 8014cd8:	f003 f811 	bl	8017cfe <USBD_LL_StallEP>
 8014cdc:	e7f8      	b.n	8014cd0 <USBD_StdEPReq+0x8c>
 8014cde:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014ce2:	b2db      	uxtb	r3, r3
 8014ce4:	2b02      	cmp	r3, #2
 8014ce6:	d005      	beq.n	8014cf4 <USBD_StdEPReq+0xb0>
 8014ce8:	2b03      	cmp	r3, #3
 8014cea:	d012      	beq.n	8014d12 <USBD_StdEPReq+0xce>
 8014cec:	4631      	mov	r1, r6
 8014cee:	f7ff fd9d 	bl	801482c <USBD_CtlError>
 8014cf2:	e7bd      	b.n	8014c70 <USBD_StdEPReq+0x2c>
 8014cf4:	f011 057f 	ands.w	r5, r1, #127	; 0x7f
 8014cf8:	d006      	beq.n	8014d08 <USBD_StdEPReq+0xc4>
 8014cfa:	f003 f800 	bl	8017cfe <USBD_LL_StallEP>
 8014cfe:	2180      	movs	r1, #128	; 0x80
 8014d00:	4638      	mov	r0, r7
 8014d02:	f002 fffc 	bl	8017cfe <USBD_LL_StallEP>
 8014d06:	e7b3      	b.n	8014c70 <USBD_StdEPReq+0x2c>
 8014d08:	4631      	mov	r1, r6
 8014d0a:	f7ff fd8f 	bl	801482c <USBD_CtlError>
 8014d0e:	462c      	mov	r4, r5
 8014d10:	e7ae      	b.n	8014c70 <USBD_StdEPReq+0x2c>
 8014d12:	8873      	ldrh	r3, [r6, #2]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d1ab      	bne.n	8014c70 <USBD_StdEPReq+0x2c>
 8014d18:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8014d1c:	d10a      	bne.n	8014d34 <USBD_StdEPReq+0xf0>
 8014d1e:	4638      	mov	r0, r7
 8014d20:	f000 f8c1 	bl	8014ea6 <USBD_CtlSendStatus>
 8014d24:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8014d28:	689b      	ldr	r3, [r3, #8]
 8014d2a:	4631      	mov	r1, r6
 8014d2c:	4638      	mov	r0, r7
 8014d2e:	4798      	blx	r3
 8014d30:	4604      	mov	r4, r0
 8014d32:	e79d      	b.n	8014c70 <USBD_StdEPReq+0x2c>
 8014d34:	f002 ffeb 	bl	8017d0e <USBD_LL_ClearStallEP>
 8014d38:	e7f1      	b.n	8014d1e <USBD_StdEPReq+0xda>
 8014d3a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8014d3e:	b2d2      	uxtb	r2, r2
 8014d40:	2a02      	cmp	r2, #2
 8014d42:	d006      	beq.n	8014d52 <USBD_StdEPReq+0x10e>
 8014d44:	2a03      	cmp	r2, #3
 8014d46:	d019      	beq.n	8014d7c <USBD_StdEPReq+0x138>
 8014d48:	4631      	mov	r1, r6
 8014d4a:	f7ff fd6f 	bl	801482c <USBD_CtlError>
 8014d4e:	462c      	mov	r4, r5
 8014d50:	e78e      	b.n	8014c70 <USBD_StdEPReq+0x2c>
 8014d52:	f011 047f 	ands.w	r4, r1, #127	; 0x7f
 8014d56:	d004      	beq.n	8014d62 <USBD_StdEPReq+0x11e>
 8014d58:	4631      	mov	r1, r6
 8014d5a:	f7ff fd67 	bl	801482c <USBD_CtlError>
 8014d5e:	462c      	mov	r4, r5
 8014d60:	e786      	b.n	8014c70 <USBD_StdEPReq+0x2c>
 8014d62:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014d66:	bf14      	ite	ne
 8014d68:	f100 0114 	addne.w	r1, r0, #20
 8014d6c:	f500 71aa 	addeq.w	r1, r0, #340	; 0x154
 8014d70:	2300      	movs	r3, #0
 8014d72:	600b      	str	r3, [r1, #0]
 8014d74:	2202      	movs	r2, #2
 8014d76:	f000 f86a 	bl	8014e4e <USBD_CtlSendData>
 8014d7a:	e779      	b.n	8014c70 <USBD_StdEPReq+0x2c>
 8014d7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014d80:	d11c      	bne.n	8014dbc <USBD_StdEPReq+0x178>
 8014d82:	f001 030f 	and.w	r3, r1, #15
 8014d86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014d8a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8014d8e:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8014d92:	b343      	cbz	r3, 8014de6 <USBD_StdEPReq+0x1a2>
 8014d94:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8014d98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014d9c:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 8014da0:	f504 74aa 	add.w	r4, r4, #340	; 0x154
 8014da4:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8014da8:	d122      	bne.n	8014df0 <USBD_StdEPReq+0x1ac>
 8014daa:	2300      	movs	r3, #0
 8014dac:	6023      	str	r3, [r4, #0]
 8014dae:	2202      	movs	r2, #2
 8014db0:	4621      	mov	r1, r4
 8014db2:	4638      	mov	r0, r7
 8014db4:	f000 f84b 	bl	8014e4e <USBD_CtlSendData>
 8014db8:	462c      	mov	r4, r5
 8014dba:	e759      	b.n	8014c70 <USBD_StdEPReq+0x2c>
 8014dbc:	f001 030f 	and.w	r3, r1, #15
 8014dc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014dc4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8014dc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014dca:	b13b      	cbz	r3, 8014ddc <USBD_StdEPReq+0x198>
 8014dcc:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8014dd0:	3401      	adds	r4, #1
 8014dd2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8014dd6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8014dda:	e7e3      	b.n	8014da4 <USBD_StdEPReq+0x160>
 8014ddc:	4631      	mov	r1, r6
 8014dde:	f7ff fd25 	bl	801482c <USBD_CtlError>
 8014de2:	462c      	mov	r4, r5
 8014de4:	e744      	b.n	8014c70 <USBD_StdEPReq+0x2c>
 8014de6:	4631      	mov	r1, r6
 8014de8:	f7ff fd20 	bl	801482c <USBD_CtlError>
 8014dec:	462c      	mov	r4, r5
 8014dee:	e73f      	b.n	8014c70 <USBD_StdEPReq+0x2c>
 8014df0:	4638      	mov	r0, r7
 8014df2:	f002 ff37 	bl	8017c64 <USBD_LL_IsStallEP>
 8014df6:	b110      	cbz	r0, 8014dfe <USBD_StdEPReq+0x1ba>
 8014df8:	2301      	movs	r3, #1
 8014dfa:	6023      	str	r3, [r4, #0]
 8014dfc:	e7d7      	b.n	8014dae <USBD_StdEPReq+0x16a>
 8014dfe:	2300      	movs	r3, #0
 8014e00:	6023      	str	r3, [r4, #0]
 8014e02:	e7d4      	b.n	8014dae <USBD_StdEPReq+0x16a>

08014e04 <USBD_GetString>:
 8014e04:	b310      	cbz	r0, 8014e4c <USBD_GetString+0x48>
 8014e06:	b470      	push	{r4, r5, r6}
 8014e08:	4604      	mov	r4, r0
 8014e0a:	7803      	ldrb	r3, [r0, #0]
 8014e0c:	b13b      	cbz	r3, 8014e1e <USBD_GetString+0x1a>
 8014e0e:	f1c0 0601 	rsb	r6, r0, #1
 8014e12:	1983      	adds	r3, r0, r6
 8014e14:	b2db      	uxtb	r3, r3
 8014e16:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8014e1a:	2d00      	cmp	r5, #0
 8014e1c:	d1f9      	bne.n	8014e12 <USBD_GetString+0xe>
 8014e1e:	3301      	adds	r3, #1
 8014e20:	005b      	lsls	r3, r3, #1
 8014e22:	8013      	strh	r3, [r2, #0]
 8014e24:	700b      	strb	r3, [r1, #0]
 8014e26:	2303      	movs	r3, #3
 8014e28:	704b      	strb	r3, [r1, #1]
 8014e2a:	7822      	ldrb	r2, [r4, #0]
 8014e2c:	b162      	cbz	r2, 8014e48 <USBD_GetString+0x44>
 8014e2e:	4620      	mov	r0, r4
 8014e30:	2302      	movs	r3, #2
 8014e32:	2400      	movs	r4, #0
 8014e34:	54ca      	strb	r2, [r1, r3]
 8014e36:	1c5a      	adds	r2, r3, #1
 8014e38:	b2d2      	uxtb	r2, r2
 8014e3a:	548c      	strb	r4, [r1, r2]
 8014e3c:	3302      	adds	r3, #2
 8014e3e:	b2db      	uxtb	r3, r3
 8014e40:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8014e44:	2a00      	cmp	r2, #0
 8014e46:	d1f5      	bne.n	8014e34 <USBD_GetString+0x30>
 8014e48:	bc70      	pop	{r4, r5, r6}
 8014e4a:	4770      	bx	lr
 8014e4c:	4770      	bx	lr

08014e4e <USBD_CtlSendData>:
 8014e4e:	b510      	push	{r4, lr}
 8014e50:	4613      	mov	r3, r2
 8014e52:	2202      	movs	r2, #2
 8014e54:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
 8014e58:	6183      	str	r3, [r0, #24]
 8014e5a:	61c3      	str	r3, [r0, #28]
 8014e5c:	460a      	mov	r2, r1
 8014e5e:	2100      	movs	r1, #0
 8014e60:	f002 ff65 	bl	8017d2e <USBD_LL_Transmit>
 8014e64:	2000      	movs	r0, #0
 8014e66:	bd10      	pop	{r4, pc}

08014e68 <USBD_CtlContinueSendData>:
 8014e68:	b508      	push	{r3, lr}
 8014e6a:	4613      	mov	r3, r2
 8014e6c:	460a      	mov	r2, r1
 8014e6e:	2100      	movs	r1, #0
 8014e70:	f002 ff5d 	bl	8017d2e <USBD_LL_Transmit>
 8014e74:	2000      	movs	r0, #0
 8014e76:	bd08      	pop	{r3, pc}

08014e78 <USBD_CtlPrepareRx>:
 8014e78:	b510      	push	{r4, lr}
 8014e7a:	4613      	mov	r3, r2
 8014e7c:	2203      	movs	r2, #3
 8014e7e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
 8014e82:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
 8014e86:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
 8014e8a:	460a      	mov	r2, r1
 8014e8c:	2100      	movs	r1, #0
 8014e8e:	f002 ff56 	bl	8017d3e <USBD_LL_PrepareReceive>
 8014e92:	2000      	movs	r0, #0
 8014e94:	bd10      	pop	{r4, pc}

08014e96 <USBD_CtlContinueRx>:
 8014e96:	b508      	push	{r3, lr}
 8014e98:	4613      	mov	r3, r2
 8014e9a:	460a      	mov	r2, r1
 8014e9c:	2100      	movs	r1, #0
 8014e9e:	f002 ff4e 	bl	8017d3e <USBD_LL_PrepareReceive>
 8014ea2:	2000      	movs	r0, #0
 8014ea4:	bd08      	pop	{r3, pc}

08014ea6 <USBD_CtlSendStatus>:
 8014ea6:	b508      	push	{r3, lr}
 8014ea8:	2204      	movs	r2, #4
 8014eaa:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
 8014eae:	2300      	movs	r3, #0
 8014eb0:	461a      	mov	r2, r3
 8014eb2:	4619      	mov	r1, r3
 8014eb4:	f002 ff3b 	bl	8017d2e <USBD_LL_Transmit>
 8014eb8:	2000      	movs	r0, #0
 8014eba:	bd08      	pop	{r3, pc}

08014ebc <USBD_CtlReceiveStatus>:
 8014ebc:	b508      	push	{r3, lr}
 8014ebe:	2205      	movs	r2, #5
 8014ec0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	461a      	mov	r2, r3
 8014ec8:	4619      	mov	r1, r3
 8014eca:	f002 ff38 	bl	8017d3e <USBD_LL_PrepareReceive>
 8014ece:	2000      	movs	r0, #0
 8014ed0:	bd08      	pop	{r3, pc}
	...

08014ed4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8014ed4:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8014ed6:	4b05      	ldr	r3, [pc, #20]	; (8014eec <SysTick_Handler+0x18>)
 8014ed8:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8014eda:	f001 fe67 	bl	8016bac <xTaskGetSchedulerState>
 8014ede:	2801      	cmp	r0, #1
 8014ee0:	d100      	bne.n	8014ee4 <SysTick_Handler+0x10>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8014ee2:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8014ee4:	f002 fa6e 	bl	80173c4 <xPortSysTickHandler>
}
 8014ee8:	e7fb      	b.n	8014ee2 <SysTick_Handler+0xe>
 8014eea:	bf00      	nop
 8014eec:	e000e010 	.word	0xe000e010

08014ef0 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ef0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8014ef4:	b92b      	cbnz	r3, 8014f02 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8014ef6:	4b06      	ldr	r3, [pc, #24]	; (8014f10 <osKernelInitialize+0x20>)
 8014ef8:	6818      	ldr	r0, [r3, #0]
 8014efa:	b928      	cbnz	r0, 8014f08 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014efc:	2201      	movs	r2, #1
 8014efe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014f00:	4770      	bx	lr
    stat = osErrorISR;
 8014f02:	f06f 0005 	mvn.w	r0, #5
 8014f06:	4770      	bx	lr
    } else {
      stat = osError;
 8014f08:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8014f0c:	4770      	bx	lr
 8014f0e:	bf00      	nop
 8014f10:	200008d4 	.word	0x200008d4

08014f14 <osKernelStart>:
 8014f14:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8014f18:	b973      	cbnz	r3, 8014f38 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8014f1a:	4b0a      	ldr	r3, [pc, #40]	; (8014f44 <osKernelStart+0x30>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	2b01      	cmp	r3, #1
 8014f20:	d10d      	bne.n	8014f3e <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8014f22:	b510      	push	{r4, lr}
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014f24:	2400      	movs	r4, #0
 8014f26:	4b08      	ldr	r3, [pc, #32]	; (8014f48 <osKernelStart+0x34>)
 8014f28:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8014f2a:	4b06      	ldr	r3, [pc, #24]	; (8014f44 <osKernelStart+0x30>)
 8014f2c:	2202      	movs	r2, #2
 8014f2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8014f30:	f001 faba 	bl	80164a8 <vTaskStartScheduler>
      stat = osOK;
 8014f34:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8014f36:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8014f38:	f06f 0005 	mvn.w	r0, #5
 8014f3c:	4770      	bx	lr
      stat = osError;
 8014f3e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8014f42:	4770      	bx	lr
 8014f44:	200008d4 	.word	0x200008d4
 8014f48:	e000ed00 	.word	0xe000ed00

08014f4c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8014f4c:	b508      	push	{r3, lr}
 8014f4e:	f3ef 8305 	mrs	r3, IPSR
  TickType_t ticks;

  if (IS_IRQ()) {
 8014f52:	b113      	cbz	r3, 8014f5a <osKernelGetTickCount+0xe>
    ticks = xTaskGetTickCountFromISR();
 8014f54:	f001 fafc 	bl	8016550 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
  }

  return (ticks);
}
 8014f58:	bd08      	pop	{r3, pc}
    ticks = xTaskGetTickCount();
 8014f5a:	f001 faf3 	bl	8016544 <xTaskGetTickCount>
  return (ticks);
 8014f5e:	e7fb      	b.n	8014f58 <osKernelGetTickCount+0xc>

08014f60 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}
 8014f60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014f64:	4770      	bx	lr

08014f66 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8014f66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f68:	b087      	sub	sp, #28
 8014f6a:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	9205      	str	r2, [sp, #20]
 8014f70:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8014f74:	2a00      	cmp	r2, #0
 8014f76:	d13b      	bne.n	8014ff0 <osThreadNew+0x8a>
 8014f78:	2800      	cmp	r0, #0
 8014f7a:	d039      	beq.n	8014ff0 <osThreadNew+0x8a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8014f7c:	b354      	cbz	r4, 8014fd4 <osThreadNew+0x6e>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8014f7e:	69a3      	ldr	r3, [r4, #24]
 8014f80:	b12b      	cbz	r3, 8014f8e <osThreadNew+0x28>
        prio = (UBaseType_t)attr->priority;
 8014f82:	461d      	mov	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8014f84:	3b01      	subs	r3, #1
 8014f86:	2b37      	cmp	r3, #55	; 0x37
 8014f88:	d902      	bls.n	8014f90 <osThreadNew+0x2a>
        return (NULL);
 8014f8a:	2000      	movs	r0, #0
 8014f8c:	e031      	b.n	8014ff2 <osThreadNew+0x8c>
 8014f8e:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8014f90:	6863      	ldr	r3, [r4, #4]
 8014f92:	f013 0f01 	tst.w	r3, #1
 8014f96:	d12e      	bne.n	8014ff6 <osThreadNew+0x90>
      }

      if (attr->stack_size > 0U) {
 8014f98:	6963      	ldr	r3, [r4, #20]
 8014f9a:	b19b      	cbz	r3, 8014fc4 <osThreadNew+0x5e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8014f9c:	089a      	lsrs	r2, r3, #2
      if (attr->name != NULL) {
 8014f9e:	f8d4 c000 	ldr.w	ip, [r4]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014fa2:	68a6      	ldr	r6, [r4, #8]
 8014fa4:	b186      	cbz	r6, 8014fc8 <osThreadNew+0x62>
 8014fa6:	68e7      	ldr	r7, [r4, #12]
 8014fa8:	2f5b      	cmp	r7, #91	; 0x5b
 8014faa:	d921      	bls.n	8014ff0 <osThreadNew+0x8a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014fac:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014fae:	b1fc      	cbz	r4, 8014ff0 <osThreadNew+0x8a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014fb0:	b1f3      	cbz	r3, 8014ff0 <osThreadNew+0x8a>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014fb2:	9602      	str	r6, [sp, #8]
 8014fb4:	9401      	str	r4, [sp, #4]
 8014fb6:	9500      	str	r5, [sp, #0]
 8014fb8:	460b      	mov	r3, r1
 8014fba:	4661      	mov	r1, ip
 8014fbc:	f001 f966 	bl	801628c <xTaskCreateStatic>
 8014fc0:	9005      	str	r0, [sp, #20]
 8014fc2:	e015      	b.n	8014ff0 <osThreadNew+0x8a>
    stack = configMINIMAL_STACK_SIZE;
 8014fc4:	2280      	movs	r2, #128	; 0x80
 8014fc6:	e7ea      	b.n	8014f9e <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014fc8:	68e3      	ldr	r3, [r4, #12]
 8014fca:	b98b      	cbnz	r3, 8014ff0 <osThreadNew+0x8a>
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8014fcc:	6923      	ldr	r3, [r4, #16]
 8014fce:	4664      	mov	r4, ip
 8014fd0:	b973      	cbnz	r3, 8014ff0 <osThreadNew+0x8a>
 8014fd2:	e001      	b.n	8014fd8 <osThreadNew+0x72>
    prio  = (UBaseType_t)osPriorityNormal;
 8014fd4:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8014fd6:	2280      	movs	r2, #128	; 0x80
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8014fd8:	ab05      	add	r3, sp, #20
 8014fda:	9301      	str	r3, [sp, #4]
 8014fdc:	9500      	str	r5, [sp, #0]
 8014fde:	460b      	mov	r3, r1
 8014fe0:	b292      	uxth	r2, r2
 8014fe2:	4621      	mov	r1, r4
 8014fe4:	f001 f98c 	bl	8016300 <xTaskCreate>
 8014fe8:	2801      	cmp	r0, #1
            hTask = NULL;
 8014fea:	bf1c      	itt	ne
 8014fec:	2300      	movne	r3, #0
 8014fee:	9305      	strne	r3, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8014ff0:	9805      	ldr	r0, [sp, #20]
}
 8014ff2:	b007      	add	sp, #28
 8014ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return (NULL);
 8014ff6:	2000      	movs	r0, #0
 8014ff8:	e7fb      	b.n	8014ff2 <osThreadNew+0x8c>

08014ffa <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8014ffa:	b508      	push	{r3, lr}
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8014ffc:	f001 fdd0 	bl	8016ba0 <xTaskGetCurrentTaskHandle>

  return (id);
}
 8015000:	bd08      	pop	{r3, pc}

08015002 <osThreadTerminate>:
 8015002:	f3ef 8305 	mrs	r3, IPSR
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8015006:	b95b      	cbnz	r3, 8015020 <osThreadTerminate+0x1e>
osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8015008:	b510      	push	{r4, lr}
 801500a:	4604      	mov	r4, r0
    stat = osErrorISR;
  }
  else if (hTask == NULL) {
 801500c:	b158      	cbz	r0, 8015026 <osThreadTerminate+0x24>
    stat = osErrorParameter;
  }
  else {
    tstate = eTaskGetState (hTask);
 801500e:	f001 fa05 	bl	801641c <eTaskGetState>

    if (tstate != eDeleted) {
 8015012:	2804      	cmp	r0, #4
 8015014:	d00a      	beq.n	801502c <osThreadTerminate+0x2a>
      stat = osOK;
      vTaskDelete (hTask);
 8015016:	4620      	mov	r0, r4
 8015018:	f001 f9a4 	bl	8016364 <vTaskDelete>
      stat = osOK;
 801501c:	2000      	movs	r0, #0
#else
  stat = osError;
#endif

  return (stat);
}
 801501e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8015020:	f06f 0005 	mvn.w	r0, #5
}
 8015024:	4770      	bx	lr
    stat = osErrorParameter;
 8015026:	f06f 0003 	mvn.w	r0, #3
 801502a:	e7f8      	b.n	801501e <osThreadTerminate+0x1c>
      stat = osErrorResource;
 801502c:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8015030:	e7f5      	b.n	801501e <osThreadTerminate+0x1c>

08015032 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015032:	b508      	push	{r3, lr}
 8015034:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8015038:	b933      	cbnz	r3, 8015048 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 801503a:	b908      	cbnz	r0, 8015040 <osDelay+0xe>
    stat = osOK;
 801503c:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 801503e:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8015040:	f001 fbfa 	bl	8016838 <vTaskDelay>
    stat = osOK;
 8015044:	2000      	movs	r0, #0
 8015046:	e7fa      	b.n	801503e <osDelay+0xc>
    stat = osErrorISR;
 8015048:	f06f 0005 	mvn.w	r0, #5
 801504c:	e7f7      	b.n	801503e <osDelay+0xc>

0801504e <osDelayUntil>:
 801504e:	f3ef 8305 	mrs	r3, IPSR

osStatus_t osDelayUntil (uint32_t ticks) {
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8015052:	b973      	cbnz	r3, 8015072 <osDelayUntil+0x24>
osStatus_t osDelayUntil (uint32_t ticks) {
 8015054:	b510      	push	{r4, lr}
 8015056:	b082      	sub	sp, #8
 8015058:	4604      	mov	r4, r0
    stat = osErrorISR;
  }
  else {
    stat = osOK;
    tcnt = xTaskGetTickCount();
 801505a:	f001 fa73 	bl	8016544 <xTaskGetTickCount>
 801505e:	9001      	str	r0, [sp, #4]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8015060:	1a21      	subs	r1, r4, r0

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8015062:	2900      	cmp	r1, #0
 8015064:	dd08      	ble.n	8015078 <osDelayUntil+0x2a>
      vTaskDelayUntil (&tcnt, delay);
 8015066:	a801      	add	r0, sp, #4
 8015068:	f001 fb94 	bl	8016794 <vTaskDelayUntil>
    stat = osOK;
 801506c:	2000      	movs	r0, #0
      stat = osErrorParameter;
    }
  }

  return (stat);
}
 801506e:	b002      	add	sp, #8
 8015070:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8015072:	f06f 0005 	mvn.w	r0, #5
}
 8015076:	4770      	bx	lr
      stat = osErrorParameter;
 8015078:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 801507c:	e7f7      	b.n	801506e <osDelayUntil+0x20>

0801507e <osEventFlagsNew>:
 801507e:	f3ef 8205 	mrs	r2, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 8015082:	b98a      	cbnz	r2, 80150a8 <osEventFlagsNew+0x2a>
osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8015084:	b508      	push	{r3, lr}
 8015086:	4603      	mov	r3, r0
    mem = -1;

    if (attr != NULL) {
 8015088:	b140      	cbz	r0, 801509c <osEventFlagsNew+0x1e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 801508a:	6880      	ldr	r0, [r0, #8]
 801508c:	b120      	cbz	r0, 8015098 <osEventFlagsNew+0x1a>
 801508e:	68db      	ldr	r3, [r3, #12]
 8015090:	2b1f      	cmp	r3, #31
 8015092:	d806      	bhi.n	80150a2 <osEventFlagsNew+0x24>
  hEventGroup = NULL;
 8015094:	2000      	movs	r0, #0
 8015096:	e003      	b.n	80150a0 <osEventFlagsNew+0x22>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8015098:	68db      	ldr	r3, [r3, #12]
 801509a:	b90b      	cbnz	r3, 80150a0 <osEventFlagsNew+0x22>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 801509c:	f000 f955 	bl	801534a <xEventGroupCreate>
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
}
 80150a0:	bd08      	pop	{r3, pc}
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80150a2:	f000 f92d 	bl	8015300 <xEventGroupCreateStatic>
 80150a6:	e7fb      	b.n	80150a0 <osEventFlagsNew+0x22>
  hEventGroup = NULL;
 80150a8:	2000      	movs	r0, #0
}
 80150aa:	4770      	bx	lr

080150ac <osEventFlagsSet>:
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80150ac:	b1e8      	cbz	r0, 80150ea <osEventFlagsSet+0x3e>
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80150ae:	b510      	push	{r4, lr}
 80150b0:	b082      	sub	sp, #8
 80150b2:	460c      	mov	r4, r1
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80150b4:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 80150b8:	d11a      	bne.n	80150f0 <osEventFlagsSet+0x44>
 80150ba:	f3ef 8205 	mrs	r2, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 80150be:	b18a      	cbz	r2, 80150e4 <osEventFlagsSet+0x38>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80150c0:	2200      	movs	r2, #0
 80150c2:	9201      	str	r2, [sp, #4]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80150c4:	aa01      	add	r2, sp, #4
 80150c6:	f000 fa6d 	bl	80155a4 <xEventGroupSetBitsFromISR>
 80150ca:	b1a8      	cbz	r0, 80150f8 <osEventFlagsSet+0x4c>
      rflags = (uint32_t)osErrorResource;
    } else {
      rflags = flags;
      portYIELD_FROM_ISR (yield);
 80150cc:	9b01      	ldr	r3, [sp, #4]
 80150ce:	b1b3      	cbz	r3, 80150fe <osEventFlagsSet+0x52>
 80150d0:	4b0c      	ldr	r3, [pc, #48]	; (8015104 <osEventFlagsSet+0x58>)
 80150d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150d6:	601a      	str	r2, [r3, #0]
 80150d8:	f3bf 8f4f 	dsb	sy
 80150dc:	f3bf 8f6f 	isb	sy
      rflags = flags;
 80150e0:	4620      	mov	r0, r4
 80150e2:	e007      	b.n	80150f4 <osEventFlagsSet+0x48>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80150e4:	f000 fa12 	bl	801550c <xEventGroupSetBits>
 80150e8:	e004      	b.n	80150f4 <osEventFlagsSet+0x48>
    rflags = (uint32_t)osErrorParameter;
 80150ea:	f06f 0003 	mvn.w	r0, #3
  }

  return (rflags);
}
 80150ee:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 80150f0:	f06f 0003 	mvn.w	r0, #3
}
 80150f4:	b002      	add	sp, #8
 80150f6:	bd10      	pop	{r4, pc}
      rflags = (uint32_t)osErrorResource;
 80150f8:	f06f 0002 	mvn.w	r0, #2
 80150fc:	e7fa      	b.n	80150f4 <osEventFlagsSet+0x48>
      rflags = flags;
 80150fe:	4620      	mov	r0, r4
  return (rflags);
 8015100:	e7f8      	b.n	80150f4 <osEventFlagsSet+0x48>
 8015102:	bf00      	nop
 8015104:	e000ed04 	.word	0xe000ed04

08015108 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8015108:	b570      	push	{r4, r5, r6, lr}
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801510a:	b1b8      	cbz	r0, 801513c <osEventFlagsClear+0x34>
 801510c:	460c      	mov	r4, r1
 801510e:	4606      	mov	r6, r0
 8015110:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8015114:	d115      	bne.n	8015142 <osEventFlagsClear+0x3a>
 8015116:	f3ef 8305 	mrs	r3, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 801511a:	b15b      	cbz	r3, 8015134 <osEventFlagsClear+0x2c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 801511c:	f000 f9e8 	bl	80154f0 <xEventGroupGetBitsFromISR>
 8015120:	4605      	mov	r5, r0

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8015122:	4621      	mov	r1, r4
 8015124:	4630      	mov	r0, r6
 8015126:	f000 f9d9 	bl	80154dc <xEventGroupClearBitsFromISR>
      rflags = (uint32_t)osErrorResource;
 801512a:	2800      	cmp	r0, #0
 801512c:	bf08      	it	eq
 801512e:	f06f 0502 	mvneq.w	r5, #2
 8015132:	e008      	b.n	8015146 <osEventFlagsClear+0x3e>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8015134:	f000 f9aa 	bl	801548c <xEventGroupClearBits>
 8015138:	4605      	mov	r5, r0
 801513a:	e004      	b.n	8015146 <osEventFlagsClear+0x3e>
    rflags = (uint32_t)osErrorParameter;
 801513c:	f06f 0503 	mvn.w	r5, #3
 8015140:	e001      	b.n	8015146 <osEventFlagsClear+0x3e>
 8015142:	f06f 0503 	mvn.w	r5, #3
  }

  return (rflags);
}
 8015146:	4628      	mov	r0, r5
 8015148:	bd70      	pop	{r4, r5, r6, pc}

0801514a <osEventFlagsWait>:
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801514a:	b338      	cbz	r0, 801519c <osEventFlagsWait+0x52>
uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 801514c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801514e:	b083      	sub	sp, #12
 8015150:	460c      	mov	r4, r1
 8015152:	461d      	mov	r5, r3
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8015154:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8015158:	d123      	bne.n	80151a2 <osEventFlagsWait+0x58>
 801515a:	f3ef 8305 	mrs	r3, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 801515e:	bb23      	cbnz	r3, 80151aa <osEventFlagsWait+0x60>
    rflags = (uint32_t)osErrorISR;
  }
  else {
    if (options & osFlagsWaitAll) {
 8015160:	f002 0701 	and.w	r7, r2, #1
      wait_all = pdTRUE;
    } else {
      wait_all = pdFAIL;
    }

    if (options & osFlagsNoClear) {
 8015164:	f082 0202 	eor.w	r2, r2, #2
      exit_clr = pdFAIL;
    } else {
      exit_clr = pdTRUE;
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8015168:	9500      	str	r5, [sp, #0]
 801516a:	463b      	mov	r3, r7
 801516c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8015170:	f000 f8fa 	bl	8015368 <xEventGroupWaitBits>

    if (options & osFlagsWaitAll) {
 8015174:	b14f      	cbz	r7, 801518a <osEventFlagsWait+0x40>
      if ((flags & rflags) != flags) {
 8015176:	ea34 0300 	bics.w	r3, r4, r0
 801517a:	d014      	beq.n	80151a6 <osEventFlagsWait+0x5c>
        if (timeout > 0U) {
          rflags = (uint32_t)osErrorTimeout;
        } else {
          rflags = (uint32_t)osErrorResource;
 801517c:	2d00      	cmp	r5, #0
 801517e:	bf14      	ite	ne
 8015180:	f06f 0001 	mvnne.w	r0, #1
 8015184:	f06f 0002 	mvneq.w	r0, #2
 8015188:	e00d      	b.n	80151a6 <osEventFlagsWait+0x5c>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 801518a:	4204      	tst	r4, r0
 801518c:	d10b      	bne.n	80151a6 <osEventFlagsWait+0x5c>
        if (timeout > 0U) {
          rflags = (uint32_t)osErrorTimeout;
        } else {
          rflags = (uint32_t)osErrorResource;
 801518e:	2d00      	cmp	r5, #0
 8015190:	bf14      	ite	ne
 8015192:	f06f 0001 	mvnne.w	r0, #1
 8015196:	f06f 0002 	mvneq.w	r0, #2
 801519a:	e004      	b.n	80151a6 <osEventFlagsWait+0x5c>
    rflags = (uint32_t)osErrorParameter;
 801519c:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (rflags);
}
 80151a0:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 80151a2:	f06f 0003 	mvn.w	r0, #3
}
 80151a6:	b003      	add	sp, #12
 80151a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rflags = (uint32_t)osErrorISR;
 80151aa:	f06f 0005 	mvn.w	r0, #5
 80151ae:	e7fa      	b.n	80151a6 <osEventFlagsWait+0x5c>

080151b0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80151b0:	b570      	push	{r4, r5, r6, lr}
 80151b2:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80151b6:	2e00      	cmp	r6, #0
 80151b8:	d135      	bne.n	8015226 <osMutexNew+0x76>
 80151ba:	4604      	mov	r4, r0
    if (attr != NULL) {
 80151bc:	b370      	cbz	r0, 801521c <osMutexNew+0x6c>
      type = attr->attr_bits;
 80151be:	6843      	ldr	r3, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80151c0:	f013 0f08 	tst.w	r3, #8
 80151c4:	d132      	bne.n	801522c <osMutexNew+0x7c>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80151c6:	f003 0301 	and.w	r3, r3, #1
      rmtx = 1U;
 80151ca:	461e      	mov	r6, r3
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80151cc:	6881      	ldr	r1, [r0, #8]
 80151ce:	b121      	cbz	r1, 80151da <osMutexNew+0x2a>
 80151d0:	68c2      	ldr	r2, [r0, #12]
 80151d2:	2a4f      	cmp	r2, #79	; 0x4f
 80151d4:	d80d      	bhi.n	80151f2 <osMutexNew+0x42>
  hMutex = NULL;
 80151d6:	2500      	movs	r5, #0
 80151d8:	e026      	b.n	8015228 <osMutexNew+0x78>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 80151da:	68c2      	ldr	r2, [r0, #12]
 80151dc:	2a00      	cmp	r2, #0
 80151de:	d1fa      	bne.n	80151d6 <osMutexNew+0x26>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80151e0:	b1e3      	cbz	r3, 801521c <osMutexNew+0x6c>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80151e2:	2004      	movs	r0, #4
 80151e4:	f000 fc54 	bl	8015a90 <xQueueCreateMutex>
 80151e8:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80151ea:	2d00      	cmp	r5, #0
 80151ec:	d0f3      	beq.n	80151d6 <osMutexNew+0x26>
        if (attr != NULL) {
 80151ee:	b93c      	cbnz	r4, 8015200 <osMutexNew+0x50>
 80151f0:	e007      	b.n	8015202 <osMutexNew+0x52>
          if (rmtx != 0U) {
 80151f2:	b173      	cbz	r3, 8015212 <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80151f4:	2004      	movs	r0, #4
 80151f6:	f000 fc56 	bl	8015aa6 <xQueueCreateMutexStatic>
 80151fa:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 80151fc:	2d00      	cmp	r5, #0
 80151fe:	d0ea      	beq.n	80151d6 <osMutexNew+0x26>
          name = attr->name;
 8015200:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8015202:	4621      	mov	r1, r4
 8015204:	4628      	mov	r0, r5
 8015206:	f000 fe8d 	bl	8015f24 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801520a:	b16e      	cbz	r6, 8015228 <osMutexNew+0x78>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 801520c:	f045 0501 	orr.w	r5, r5, #1
 8015210:	e00a      	b.n	8015228 <osMutexNew+0x78>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8015212:	2001      	movs	r0, #1
 8015214:	f000 fc47 	bl	8015aa6 <xQueueCreateMutexStatic>
 8015218:	4605      	mov	r5, r0
 801521a:	e7ef      	b.n	80151fc <osMutexNew+0x4c>
              hMutex = xSemaphoreCreateMutex ();
 801521c:	2001      	movs	r0, #1
 801521e:	f000 fc37 	bl	8015a90 <xQueueCreateMutex>
 8015222:	4605      	mov	r5, r0
 8015224:	e7e1      	b.n	80151ea <osMutexNew+0x3a>
  hMutex = NULL;
 8015226:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8015228:	4628      	mov	r0, r5
 801522a:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 801522c:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 801522e:	e7fb      	b.n	8015228 <osMutexNew+0x78>

08015230 <osMutexAcquire>:
 8015230:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8015234:	b9f2      	cbnz	r2, 8015274 <osMutexAcquire+0x44>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8015236:	b510      	push	{r4, lr}
 8015238:	4603      	mov	r3, r0
 801523a:	460c      	mov	r4, r1
 801523c:	f020 0001 	bic.w	r0, r0, #1
 8015240:	f003 0301 	and.w	r3, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8015244:	b1c8      	cbz	r0, 801527a <osMutexAcquire+0x4a>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8015246:	b153      	cbz	r3, 801525e <osMutexAcquire+0x2e>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8015248:	f000 fe4a 	bl	8015ee0 <xQueueTakeMutexRecursive>
 801524c:	2801      	cmp	r0, #1
 801524e:	d017      	beq.n	8015280 <osMutexAcquire+0x50>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8015250:	2c00      	cmp	r4, #0
 8015252:	bf14      	ite	ne
 8015254:	f06f 0001 	mvnne.w	r0, #1
 8015258:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 801525c:	bd10      	pop	{r4, pc}
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 801525e:	f000 fd69 	bl	8015d34 <xQueueSemaphoreTake>
 8015262:	2801      	cmp	r0, #1
 8015264:	d00e      	beq.n	8015284 <osMutexAcquire+0x54>
          stat = osErrorResource;
 8015266:	2c00      	cmp	r4, #0
 8015268:	bf14      	ite	ne
 801526a:	f06f 0001 	mvnne.w	r0, #1
 801526e:	f06f 0002 	mvneq.w	r0, #2
 8015272:	e7f3      	b.n	801525c <osMutexAcquire+0x2c>
    stat = osErrorISR;
 8015274:	f06f 0005 	mvn.w	r0, #5
}
 8015278:	4770      	bx	lr
    stat = osErrorParameter;
 801527a:	f06f 0003 	mvn.w	r0, #3
 801527e:	e7ed      	b.n	801525c <osMutexAcquire+0x2c>
  stat = osOK;
 8015280:	2000      	movs	r0, #0
 8015282:	e7eb      	b.n	801525c <osMutexAcquire+0x2c>
 8015284:	2000      	movs	r0, #0
 8015286:	e7e9      	b.n	801525c <osMutexAcquire+0x2c>

08015288 <osMutexRelease>:
 8015288:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 801528c:	b9d2      	cbnz	r2, 80152c4 <osMutexRelease+0x3c>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 801528e:	b508      	push	{r3, lr}
 8015290:	4603      	mov	r3, r0
 8015292:	f020 0001 	bic.w	r0, r0, #1
 8015296:	f003 0301 	and.w	r3, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 801529a:	b1b0      	cbz	r0, 80152ca <osMutexRelease+0x42>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 801529c:	b13b      	cbz	r3, 80152ae <osMutexRelease+0x26>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 801529e:	f000 fc11 	bl	8015ac4 <xQueueGiveMutexRecursive>
        stat = osErrorResource;
 80152a2:	2801      	cmp	r0, #1
 80152a4:	bf0c      	ite	eq
 80152a6:	2000      	moveq	r0, #0
 80152a8:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 80152ac:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80152ae:	2300      	movs	r3, #0
 80152b0:	461a      	mov	r2, r3
 80152b2:	4619      	mov	r1, r3
 80152b4:	f000 fb1a 	bl	80158ec <xQueueGenericSend>
        stat = osErrorResource;
 80152b8:	2801      	cmp	r0, #1
 80152ba:	bf0c      	ite	eq
 80152bc:	2000      	moveq	r0, #0
 80152be:	f06f 0002 	mvnne.w	r0, #2
 80152c2:	e7f3      	b.n	80152ac <osMutexRelease+0x24>
    stat = osErrorISR;
 80152c4:	f06f 0005 	mvn.w	r0, #5
}
 80152c8:	4770      	bx	lr
    stat = osErrorParameter;
 80152ca:	f06f 0003 	mvn.w	r0, #3
 80152ce:	e7ed      	b.n	80152ac <osMutexRelease+0x24>

080152d0 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80152d0:	4b03      	ldr	r3, [pc, #12]	; (80152e0 <vApplicationGetIdleTaskMemory+0x10>)
 80152d2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80152d4:	4b03      	ldr	r3, [pc, #12]	; (80152e4 <vApplicationGetIdleTaskMemory+0x14>)
 80152d6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80152d8:	2380      	movs	r3, #128	; 0x80
 80152da:	6013      	str	r3, [r2, #0]
}
 80152dc:	4770      	bx	lr
 80152de:	bf00      	nop
 80152e0:	20000878 	.word	0x20000878
 80152e4:	20000678 	.word	0x20000678

080152e8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80152e8:	4b03      	ldr	r3, [pc, #12]	; (80152f8 <vApplicationGetTimerTaskMemory+0x10>)
 80152ea:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80152ec:	4b03      	ldr	r3, [pc, #12]	; (80152fc <vApplicationGetTimerTaskMemory+0x14>)
 80152ee:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80152f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80152f4:	6013      	str	r3, [r2, #0]
}
 80152f6:	4770      	bx	lr
 80152f8:	20000cd8 	.word	0x20000cd8
 80152fc:	200008d8 	.word	0x200008d8

08015300 <xEventGroupCreateStatic>:
	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8015300:	b180      	cbz	r0, 8015324 <xEventGroupCreateStatic+0x24>
	{
 8015302:	b510      	push	{r4, lr}
 8015304:	b082      	sub	sp, #8
 8015306:	4604      	mov	r4, r0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8015308:	2320      	movs	r3, #32
 801530a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 801530c:	9b01      	ldr	r3, [sp, #4]
 801530e:	2b20      	cmp	r3, #32
 8015310:	d011      	beq.n	8015336 <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015316:	f383 8811 	msr	BASEPRI, r3
 801531a:	f3bf 8f6f 	isb	sy
 801531e:	f3bf 8f4f 	dsb	sy
 8015322:	e7fe      	b.n	8015322 <xEventGroupCreateStatic+0x22>
 8015324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015328:	f383 8811 	msr	BASEPRI, r3
 801532c:	f3bf 8f6f 	isb	sy
 8015330:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 8015334:	e7fe      	b.n	8015334 <xEventGroupCreateStatic+0x34>
		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */

		if( pxEventBits != NULL )
		{
			pxEventBits->uxEventBits = 0;
 8015336:	2300      	movs	r3, #0
 8015338:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801533c:	f000 f93c 	bl	80155b8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8015340:	2301      	movs	r3, #1
 8015342:	7723      	strb	r3, [r4, #28]
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
	}
 8015344:	4620      	mov	r0, r4
 8015346:	b002      	add	sp, #8
 8015348:	bd10      	pop	{r4, pc}

0801534a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801534a:	b538      	push	{r3, r4, r5, lr}
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 801534c:	2020      	movs	r0, #32
 801534e:	f002 f94f 	bl	80175f0 <pvPortMalloc>

		if( pxEventBits != NULL )
 8015352:	4604      	mov	r4, r0
 8015354:	b128      	cbz	r0, 8015362 <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 8015356:	2500      	movs	r5, #0
 8015358:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801535c:	f000 f92c 	bl	80155b8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8015360:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
	}
 8015362:	4620      	mov	r0, r4
 8015364:	bd38      	pop	{r3, r4, r5, pc}
	...

08015368 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8015368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801536c:	f8dd a020 	ldr.w	sl, [sp, #32]
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8015370:	b178      	cbz	r0, 8015392 <xEventGroupWaitBits+0x2a>
 8015372:	460c      	mov	r4, r1
 8015374:	4617      	mov	r7, r2
 8015376:	4698      	mov	r8, r3
 8015378:	4606      	mov	r6, r0
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801537a:	f011 497f 	ands.w	r9, r1, #4278190080	; 0xff000000
 801537e:	d011      	beq.n	80153a4 <xEventGroupWaitBits+0x3c>
 8015380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015384:	f383 8811 	msr	BASEPRI, r3
 8015388:	f3bf 8f6f 	isb	sy
 801538c:	f3bf 8f4f 	dsb	sy
 8015390:	e7fe      	b.n	8015390 <xEventGroupWaitBits+0x28>
 8015392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015396:	f383 8811 	msr	BASEPRI, r3
 801539a:	f3bf 8f6f 	isb	sy
 801539e:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 80153a2:	e7fe      	b.n	80153a2 <xEventGroupWaitBits+0x3a>
	configASSERT( uxBitsToWaitFor != 0 );
 80153a4:	b941      	cbnz	r1, 80153b8 <xEventGroupWaitBits+0x50>
 80153a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153aa:	f383 8811 	msr	BASEPRI, r3
 80153ae:	f3bf 8f6f 	isb	sy
 80153b2:	f3bf 8f4f 	dsb	sy
 80153b6:	e7fe      	b.n	80153b6 <xEventGroupWaitBits+0x4e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80153b8:	f001 fbf8 	bl	8016bac <xTaskGetSchedulerState>
 80153bc:	b958      	cbnz	r0, 80153d6 <xEventGroupWaitBits+0x6e>
 80153be:	f1ba 0f00 	cmp.w	sl, #0
 80153c2:	d008      	beq.n	80153d6 <xEventGroupWaitBits+0x6e>
 80153c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153c8:	f383 8811 	msr	BASEPRI, r3
 80153cc:	f3bf 8f6f 	isb	sy
 80153d0:	f3bf 8f4f 	dsb	sy
 80153d4:	e7fe      	b.n	80153d4 <xEventGroupWaitBits+0x6c>
	}
	#endif

	vTaskSuspendAll();
 80153d6:	f001 f8ad 	bl	8016534 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80153da:	6835      	ldr	r5, [r6, #0]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 80153dc:	f1b8 0f00 	cmp.w	r8, #0
 80153e0:	d10b      	bne.n	80153fa <xEventGroupWaitBits+0x92>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80153e2:	422c      	tst	r4, r5
 80153e4:	bf14      	ite	ne
 80153e6:	2301      	movne	r3, #1
 80153e8:	2300      	moveq	r3, #0
		if( xWaitConditionMet != pdFALSE )
 80153ea:	b163      	cbz	r3, 8015406 <xEventGroupWaitBits+0x9e>
			if( xClearOnExit != pdFALSE )
 80153ec:	b117      	cbz	r7, 80153f4 <xEventGroupWaitBits+0x8c>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80153ee:	ea25 0404 	bic.w	r4, r5, r4
 80153f2:	6034      	str	r4, [r6, #0]
	xAlreadyYielded = xTaskResumeAll();
 80153f4:	f001 f94c 	bl	8016690 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 80153f8:	e02a      	b.n	8015450 <xEventGroupWaitBits+0xe8>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80153fa:	ea34 0305 	bics.w	r3, r4, r5
 80153fe:	bf0c      	ite	eq
 8015400:	2301      	moveq	r3, #1
 8015402:	2300      	movne	r3, #0
 8015404:	e7f1      	b.n	80153ea <xEventGroupWaitBits+0x82>
		else if( xTicksToWait == ( TickType_t ) 0 )
 8015406:	f1ba 0f00 	cmp.w	sl, #0
 801540a:	d0f3      	beq.n	80153f4 <xEventGroupWaitBits+0x8c>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801540c:	2f00      	cmp	r7, #0
 801540e:	bf18      	it	ne
 8015410:	f04f 7980 	movne.w	r9, #16777216	; 0x1000000
			if( xWaitForAllBits != pdFALSE )
 8015414:	f1b8 0f00 	cmp.w	r8, #0
 8015418:	d001      	beq.n	801541e <xEventGroupWaitBits+0xb6>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 801541a:	f049 6980 	orr.w	r9, r9, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801541e:	4652      	mov	r2, sl
 8015420:	ea49 0104 	orr.w	r1, r9, r4
 8015424:	1d30      	adds	r0, r6, #4
 8015426:	f001 fa95 	bl	8016954 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 801542a:	f001 f931 	bl	8016690 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 801542e:	b938      	cbnz	r0, 8015440 <xEventGroupWaitBits+0xd8>
			portYIELD_WITHIN_API();
 8015430:	4b15      	ldr	r3, [pc, #84]	; (8015488 <xEventGroupWaitBits+0x120>)
 8015432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015436:	601a      	str	r2, [r3, #0]
 8015438:	f3bf 8f4f 	dsb	sy
 801543c:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 8015440:	f001 fca8 	bl	8016d94 <uxTaskResetEventItemValue>
 8015444:	4605      	mov	r5, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8015446:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 801544a:	d004      	beq.n	8015456 <xEventGroupWaitBits+0xee>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801544c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
}
 8015450:	4628      	mov	r0, r5
 8015452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			taskENTER_CRITICAL();
 8015456:	f001 ff45 	bl	80172e4 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 801545a:	6835      	ldr	r5, [r6, #0]
	if( xWaitForAllBits == pdFALSE )
 801545c:	f1b8 0f00 	cmp.w	r8, #0
 8015460:	d10b      	bne.n	801547a <xEventGroupWaitBits+0x112>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8015462:	422c      	tst	r4, r5
 8015464:	bf14      	ite	ne
 8015466:	2301      	movne	r3, #1
 8015468:	2300      	moveq	r3, #0
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801546a:	b11b      	cbz	r3, 8015474 <xEventGroupWaitBits+0x10c>
					if( xClearOnExit != pdFALSE )
 801546c:	b117      	cbz	r7, 8015474 <xEventGroupWaitBits+0x10c>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801546e:	ea25 0404 	bic.w	r4, r5, r4
 8015472:	6034      	str	r4, [r6, #0]
			taskEXIT_CRITICAL();
 8015474:	f001 ff58 	bl	8017328 <vPortExitCritical>
 8015478:	e7e8      	b.n	801544c <xEventGroupWaitBits+0xe4>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801547a:	ea34 0305 	bics.w	r3, r4, r5
 801547e:	bf0c      	ite	eq
 8015480:	2301      	moveq	r3, #1
 8015482:	2300      	movne	r3, #0
 8015484:	e7f1      	b.n	801546a <xEventGroupWaitBits+0x102>
 8015486:	bf00      	nop
 8015488:	e000ed04 	.word	0xe000ed04

0801548c <xEventGroupClearBits>:
	configASSERT( xEventGroup );
 801548c:	b170      	cbz	r0, 80154ac <xEventGroupClearBits+0x20>
{
 801548e:	b570      	push	{r4, r5, r6, lr}
 8015490:	460c      	mov	r4, r1
 8015492:	4606      	mov	r6, r0
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8015494:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8015498:	d011      	beq.n	80154be <xEventGroupClearBits+0x32>
 801549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801549e:	f383 8811 	msr	BASEPRI, r3
 80154a2:	f3bf 8f6f 	isb	sy
 80154a6:	f3bf 8f4f 	dsb	sy
 80154aa:	e7fe      	b.n	80154aa <xEventGroupClearBits+0x1e>
 80154ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154b0:	f383 8811 	msr	BASEPRI, r3
 80154b4:	f3bf 8f6f 	isb	sy
 80154b8:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 80154bc:	e7fe      	b.n	80154bc <xEventGroupClearBits+0x30>
	taskENTER_CRITICAL();
 80154be:	f001 ff11 	bl	80172e4 <vPortEnterCritical>
		uxReturn = pxEventBits->uxEventBits;
 80154c2:	6835      	ldr	r5, [r6, #0]
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80154c4:	ea25 0404 	bic.w	r4, r5, r4
 80154c8:	6034      	str	r4, [r6, #0]
	taskEXIT_CRITICAL();
 80154ca:	f001 ff2d 	bl	8017328 <vPortExitCritical>
}
 80154ce:	4628      	mov	r0, r5
 80154d0:	bd70      	pop	{r4, r5, r6, pc}

080154d2 <vEventGroupClearBitsCallback>:
{
 80154d2:	b508      	push	{r3, lr}
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80154d4:	f7ff ffda 	bl	801548c <xEventGroupClearBits>
}
 80154d8:	bd08      	pop	{r3, pc}
	...

080154dc <xEventGroupClearBitsFromISR>:
	{
 80154dc:	b508      	push	{r3, lr}
 80154de:	460a      	mov	r2, r1
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80154e0:	2300      	movs	r3, #0
 80154e2:	4601      	mov	r1, r0
 80154e4:	4801      	ldr	r0, [pc, #4]	; (80154ec <xEventGroupClearBitsFromISR+0x10>)
 80154e6:	f001 fe7d 	bl	80171e4 <xTimerPendFunctionCallFromISR>
	}
 80154ea:	bd08      	pop	{r3, pc}
 80154ec:	080154d3 	.word	0x080154d3

080154f0 <xEventGroupGetBitsFromISR>:

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80154f0:	f3ef 8311 	mrs	r3, BASEPRI
 80154f4:	f04f 0250 	mov.w	r2, #80	; 0x50
 80154f8:	f382 8811 	msr	BASEPRI, r2
 80154fc:	f3bf 8f6f 	isb	sy
 8015500:	f3bf 8f4f 	dsb	sy
		uxReturn = pxEventBits->uxEventBits;
 8015504:	6800      	ldr	r0, [r0, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015506:	f383 8811 	msr	BASEPRI, r3
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 801550a:	4770      	bx	lr

0801550c <xEventGroupSetBits>:
	configASSERT( xEventGroup );
 801550c:	b178      	cbz	r0, 801552e <xEventGroupSetBits+0x22>
{
 801550e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015512:	460e      	mov	r6, r1
 8015514:	4604      	mov	r4, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8015516:	f011 477f 	ands.w	r7, r1, #4278190080	; 0xff000000
 801551a:	d011      	beq.n	8015540 <xEventGroupSetBits+0x34>
	__asm volatile
 801551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015520:	f383 8811 	msr	BASEPRI, r3
 8015524:	f3bf 8f6f 	isb	sy
 8015528:	f3bf 8f4f 	dsb	sy
 801552c:	e7fe      	b.n	801552c <xEventGroupSetBits+0x20>
 801552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015532:	f383 8811 	msr	BASEPRI, r3
 8015536:	f3bf 8f6f 	isb	sy
 801553a:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 801553e:	e7fe      	b.n	801553e <xEventGroupSetBits+0x32>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015540:	f100 080c 	add.w	r8, r0, #12
	vTaskSuspendAll();
 8015544:	f000 fff6 	bl	8016534 <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8015548:	6925      	ldr	r5, [r4, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 801554a:	6823      	ldr	r3, [r4, #0]
 801554c:	4333      	orrs	r3, r6
 801554e:	6023      	str	r3, [r4, #0]
		while( pxListItem != pxListEnd )
 8015550:	45a8      	cmp	r8, r5
 8015552:	d117      	bne.n	8015584 <xEventGroupSetBits+0x78>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8015554:	6823      	ldr	r3, [r4, #0]
 8015556:	ea23 0307 	bic.w	r3, r3, r7
 801555a:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 801555c:	f001 f898 	bl	8016690 <xTaskResumeAll>
}
 8015560:	6820      	ldr	r0, [r4, #0]
 8015562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8015566:	6821      	ldr	r1, [r4, #0]
 8015568:	ea33 0101 	bics.w	r1, r3, r1
 801556c:	d108      	bne.n	8015580 <xEventGroupSetBits+0x74>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801556e:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
					uxBitsToClear |= uxBitsWaitedFor;
 8015572:	bf18      	it	ne
 8015574:	431f      	orrne	r7, r3
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8015576:	6821      	ldr	r1, [r4, #0]
 8015578:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 801557c:	f001 fa78 	bl	8016a70 <vTaskRemoveFromUnorderedEventList>
		while( pxListItem != pxListEnd )
 8015580:	45a8      	cmp	r8, r5
 8015582:	d0e7      	beq.n	8015554 <xEventGroupSetBits+0x48>
			pxNext = listGET_NEXT( pxListItem );
 8015584:	4628      	mov	r0, r5
 8015586:	686d      	ldr	r5, [r5, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8015588:	6802      	ldr	r2, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801558a:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801558e:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 8015592:	d1e8      	bne.n	8015566 <xEventGroupSetBits+0x5a>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8015594:	6821      	ldr	r1, [r4, #0]
 8015596:	420b      	tst	r3, r1
 8015598:	d1e9      	bne.n	801556e <xEventGroupSetBits+0x62>
 801559a:	e7f1      	b.n	8015580 <xEventGroupSetBits+0x74>

0801559c <vEventGroupSetBitsCallback>:
{
 801559c:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801559e:	f7ff ffb5 	bl	801550c <xEventGroupSetBits>
}
 80155a2:	bd08      	pop	{r3, pc}

080155a4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80155a4:	b508      	push	{r3, lr}
 80155a6:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80155a8:	460a      	mov	r2, r1
 80155aa:	4601      	mov	r1, r0
 80155ac:	4801      	ldr	r0, [pc, #4]	; (80155b4 <xEventGroupSetBitsFromISR+0x10>)
 80155ae:	f001 fe19 	bl	80171e4 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 80155b2:	bd08      	pop	{r3, pc}
 80155b4:	0801559d 	.word	0x0801559d

080155b8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80155b8:	f100 0308 	add.w	r3, r0, #8
 80155bc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80155be:	f04f 32ff 	mov.w	r2, #4294967295
 80155c2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80155c4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80155c6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80155c8:	2300      	movs	r3, #0
 80155ca:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80155cc:	4770      	bx	lr

080155ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80155ce:	2300      	movs	r3, #0
 80155d0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80155d2:	4770      	bx	lr

080155d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80155d4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80155d6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80155d8:	689a      	ldr	r2, [r3, #8]
 80155da:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80155dc:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80155de:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80155e0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80155e2:	6803      	ldr	r3, [r0, #0]
 80155e4:	3301      	adds	r3, #1
 80155e6:	6003      	str	r3, [r0, #0]
}
 80155e8:	4770      	bx	lr

080155ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80155ea:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80155ec:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80155ee:	f1b5 3fff 	cmp.w	r5, #4294967295
 80155f2:	d011      	beq.n	8015618 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80155f4:	f100 0308 	add.w	r3, r0, #8
 80155f8:	461c      	mov	r4, r3
 80155fa:	685b      	ldr	r3, [r3, #4]
 80155fc:	681a      	ldr	r2, [r3, #0]
 80155fe:	42aa      	cmp	r2, r5
 8015600:	d9fa      	bls.n	80155f8 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015602:	6863      	ldr	r3, [r4, #4]
 8015604:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015606:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015608:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 801560a:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801560c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 801560e:	6803      	ldr	r3, [r0, #0]
 8015610:	3301      	adds	r3, #1
 8015612:	6003      	str	r3, [r0, #0]
}
 8015614:	bc30      	pop	{r4, r5}
 8015616:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8015618:	6904      	ldr	r4, [r0, #16]
 801561a:	e7f2      	b.n	8015602 <vListInsert+0x18>

0801561c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801561c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801561e:	6841      	ldr	r1, [r0, #4]
 8015620:	6882      	ldr	r2, [r0, #8]
 8015622:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015624:	6841      	ldr	r1, [r0, #4]
 8015626:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015628:	685a      	ldr	r2, [r3, #4]
 801562a:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801562c:	bf04      	itt	eq
 801562e:	6882      	ldreq	r2, [r0, #8]
 8015630:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015632:	2200      	movs	r2, #0
 8015634:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8015636:	681a      	ldr	r2, [r3, #0]
 8015638:	3a01      	subs	r2, #1
 801563a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801563c:	6818      	ldr	r0, [r3, #0]
}
 801563e:	4770      	bx	lr

08015640 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015640:	b510      	push	{r4, lr}
 8015642:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015644:	f001 fe4e 	bl	80172e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015648:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 801564a:	f001 fe6d 	bl	8017328 <vPortExitCritical>

	return xReturn;
}
 801564e:	fab4 f084 	clz	r0, r4
 8015652:	0940      	lsrs	r0, r0, #5
 8015654:	bd10      	pop	{r4, pc}

08015656 <prvCopyDataToQueue>:
{
 8015656:	b570      	push	{r4, r5, r6, lr}
 8015658:	4604      	mov	r4, r0
 801565a:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801565c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801565e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8015660:	b95a      	cbnz	r2, 801567a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015662:	6803      	ldr	r3, [r0, #0]
 8015664:	b11b      	cbz	r3, 801566e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8015666:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015668:	3601      	adds	r6, #1
 801566a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 801566c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801566e:	6880      	ldr	r0, [r0, #8]
 8015670:	f001 faf6 	bl	8016c60 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015674:	2300      	movs	r3, #0
 8015676:	60a3      	str	r3, [r4, #8]
 8015678:	e7f6      	b.n	8015668 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 801567a:	b96d      	cbnz	r5, 8015698 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801567c:	6840      	ldr	r0, [r0, #4]
 801567e:	f002 fb9d 	bl	8017dbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015682:	6863      	ldr	r3, [r4, #4]
 8015684:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8015686:	4413      	add	r3, r2
 8015688:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801568a:	68a2      	ldr	r2, [r4, #8]
 801568c:	4293      	cmp	r3, r2
 801568e:	d319      	bcc.n	80156c4 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015690:	6823      	ldr	r3, [r4, #0]
 8015692:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8015694:	4628      	mov	r0, r5
 8015696:	e7e7      	b.n	8015668 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015698:	68c0      	ldr	r0, [r0, #12]
 801569a:	f002 fb8f 	bl	8017dbc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801569e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80156a0:	4251      	negs	r1, r2
 80156a2:	68e3      	ldr	r3, [r4, #12]
 80156a4:	1a9b      	subs	r3, r3, r2
 80156a6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80156a8:	6822      	ldr	r2, [r4, #0]
 80156aa:	4293      	cmp	r3, r2
 80156ac:	d202      	bcs.n	80156b4 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80156ae:	68a3      	ldr	r3, [r4, #8]
 80156b0:	440b      	add	r3, r1
 80156b2:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80156b4:	2d02      	cmp	r5, #2
 80156b6:	d001      	beq.n	80156bc <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80156b8:	2000      	movs	r0, #0
 80156ba:	e7d5      	b.n	8015668 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80156bc:	b126      	cbz	r6, 80156c8 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80156be:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80156c0:	2000      	movs	r0, #0
 80156c2:	e7d1      	b.n	8015668 <prvCopyDataToQueue+0x12>
 80156c4:	4628      	mov	r0, r5
 80156c6:	e7cf      	b.n	8015668 <prvCopyDataToQueue+0x12>
 80156c8:	2000      	movs	r0, #0
 80156ca:	e7cd      	b.n	8015668 <prvCopyDataToQueue+0x12>

080156cc <prvCopyDataFromQueue>:
{
 80156cc:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80156ce:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80156d0:	b16a      	cbz	r2, 80156ee <prvCopyDataFromQueue+0x22>
{
 80156d2:	b510      	push	{r4, lr}
 80156d4:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80156d6:	68d9      	ldr	r1, [r3, #12]
 80156d8:	4411      	add	r1, r2
 80156da:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80156dc:	689c      	ldr	r4, [r3, #8]
 80156de:	42a1      	cmp	r1, r4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80156e0:	bf24      	itt	cs
 80156e2:	6819      	ldrcs	r1, [r3, #0]
 80156e4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80156e6:	68d9      	ldr	r1, [r3, #12]
 80156e8:	f002 fb68 	bl	8017dbc <memcpy>
}
 80156ec:	bd10      	pop	{r4, pc}
 80156ee:	4770      	bx	lr

080156f0 <prvUnlockQueue>:
{
 80156f0:	b570      	push	{r4, r5, r6, lr}
 80156f2:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80156f4:	f001 fdf6 	bl	80172e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80156f8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80156fc:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80156fe:	2c00      	cmp	r4, #0
 8015700:	dd0f      	ble.n	8015722 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015702:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8015706:	e004      	b.n	8015712 <prvUnlockQueue+0x22>
						vTaskMissedYield();
 8015708:	f001 fa44 	bl	8016b94 <vTaskMissedYield>
			--cTxLock;
 801570c:	3c01      	subs	r4, #1
 801570e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015710:	b13c      	cbz	r4, 8015722 <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015712:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015714:	b12b      	cbz	r3, 8015722 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015716:	4630      	mov	r0, r6
 8015718:	f001 f966 	bl	80169e8 <xTaskRemoveFromEventList>
 801571c:	2800      	cmp	r0, #0
 801571e:	d0f5      	beq.n	801570c <prvUnlockQueue+0x1c>
 8015720:	e7f2      	b.n	8015708 <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 8015722:	23ff      	movs	r3, #255	; 0xff
 8015724:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8015728:	f001 fdfe 	bl	8017328 <vPortExitCritical>
	taskENTER_CRITICAL();
 801572c:	f001 fdda 	bl	80172e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8015730:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8015734:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015736:	2c00      	cmp	r4, #0
 8015738:	dd0f      	ble.n	801575a <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801573a:	f105 0610 	add.w	r6, r5, #16
 801573e:	e004      	b.n	801574a <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8015740:	f001 fa28 	bl	8016b94 <vTaskMissedYield>
				--cRxLock;
 8015744:	3c01      	subs	r4, #1
 8015746:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015748:	b13c      	cbz	r4, 801575a <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801574a:	692b      	ldr	r3, [r5, #16]
 801574c:	b12b      	cbz	r3, 801575a <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801574e:	4630      	mov	r0, r6
 8015750:	f001 f94a 	bl	80169e8 <xTaskRemoveFromEventList>
 8015754:	2800      	cmp	r0, #0
 8015756:	d0f5      	beq.n	8015744 <prvUnlockQueue+0x54>
 8015758:	e7f2      	b.n	8015740 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 801575a:	23ff      	movs	r3, #255	; 0xff
 801575c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8015760:	f001 fde2 	bl	8017328 <vPortExitCritical>
}
 8015764:	bd70      	pop	{r4, r5, r6, pc}
	...

08015768 <xQueueGenericReset>:
{
 8015768:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 801576a:	b1e0      	cbz	r0, 80157a6 <xQueueGenericReset+0x3e>
 801576c:	460d      	mov	r5, r1
 801576e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8015770:	f001 fdb8 	bl	80172e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015774:	6822      	ldr	r2, [r4, #0]
 8015776:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015778:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801577a:	fb03 f301 	mul.w	r3, r3, r1
 801577e:	18d0      	adds	r0, r2, r3
 8015780:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015782:	2000      	movs	r0, #0
 8015784:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015786:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015788:	1a5b      	subs	r3, r3, r1
 801578a:	4413      	add	r3, r2
 801578c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801578e:	23ff      	movs	r3, #255	; 0xff
 8015790:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015794:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8015798:	b9ed      	cbnz	r5, 80157d6 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801579a:	6923      	ldr	r3, [r4, #16]
 801579c:	b963      	cbnz	r3, 80157b8 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 801579e:	f001 fdc3 	bl	8017328 <vPortExitCritical>
}
 80157a2:	2001      	movs	r0, #1
 80157a4:	bd38      	pop	{r3, r4, r5, pc}
 80157a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157aa:	f383 8811 	msr	BASEPRI, r3
 80157ae:	f3bf 8f6f 	isb	sy
 80157b2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80157b6:	e7fe      	b.n	80157b6 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80157b8:	f104 0010 	add.w	r0, r4, #16
 80157bc:	f001 f914 	bl	80169e8 <xTaskRemoveFromEventList>
 80157c0:	2800      	cmp	r0, #0
 80157c2:	d0ec      	beq.n	801579e <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80157c4:	4b08      	ldr	r3, [pc, #32]	; (80157e8 <xQueueGenericReset+0x80>)
 80157c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157ca:	601a      	str	r2, [r3, #0]
 80157cc:	f3bf 8f4f 	dsb	sy
 80157d0:	f3bf 8f6f 	isb	sy
 80157d4:	e7e3      	b.n	801579e <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80157d6:	f104 0010 	add.w	r0, r4, #16
 80157da:	f7ff feed 	bl	80155b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80157de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80157e2:	f7ff fee9 	bl	80155b8 <vListInitialise>
 80157e6:	e7da      	b.n	801579e <xQueueGenericReset+0x36>
 80157e8:	e000ed04 	.word	0xe000ed04

080157ec <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80157ec:	b940      	cbnz	r0, 8015800 <xQueueGenericCreateStatic+0x14>
 80157ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157f2:	f383 8811 	msr	BASEPRI, r3
 80157f6:	f3bf 8f6f 	isb	sy
 80157fa:	f3bf 8f4f 	dsb	sy
 80157fe:	e7fe      	b.n	80157fe <xQueueGenericCreateStatic+0x12>
	{
 8015800:	b510      	push	{r4, lr}
 8015802:	b082      	sub	sp, #8
 8015804:	461c      	mov	r4, r3
 8015806:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 8015808:	b154      	cbz	r4, 8015820 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801580a:	b192      	cbz	r2, 8015832 <xQueueGenericCreateStatic+0x46>
 801580c:	b9d9      	cbnz	r1, 8015846 <xQueueGenericCreateStatic+0x5a>
 801580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015812:	f383 8811 	msr	BASEPRI, r3
 8015816:	f3bf 8f6f 	isb	sy
 801581a:	f3bf 8f4f 	dsb	sy
 801581e:	e7fe      	b.n	801581e <xQueueGenericCreateStatic+0x32>
 8015820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015824:	f383 8811 	msr	BASEPRI, r3
 8015828:	f3bf 8f6f 	isb	sy
 801582c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8015830:	e7fe      	b.n	8015830 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015832:	b341      	cbz	r1, 8015886 <xQueueGenericCreateStatic+0x9a>
 8015834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015838:	f383 8811 	msr	BASEPRI, r3
 801583c:	f3bf 8f6f 	isb	sy
 8015840:	f3bf 8f4f 	dsb	sy
 8015844:	e7fe      	b.n	8015844 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015846:	2050      	movs	r0, #80	; 0x50
 8015848:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 801584a:	9801      	ldr	r0, [sp, #4]
 801584c:	2850      	cmp	r0, #80	; 0x50
 801584e:	d008      	beq.n	8015862 <xQueueGenericCreateStatic+0x76>
 8015850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015854:	f383 8811 	msr	BASEPRI, r3
 8015858:	f3bf 8f6f 	isb	sy
 801585c:	f3bf 8f4f 	dsb	sy
 8015860:	e7fe      	b.n	8015860 <xQueueGenericCreateStatic+0x74>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015862:	9801      	ldr	r0, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015864:	2001      	movs	r0, #1
 8015866:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 801586a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 801586c:	63e3      	str	r3, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801586e:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015870:	2101      	movs	r1, #1
 8015872:	4620      	mov	r0, r4
 8015874:	f7ff ff78 	bl	8015768 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8015878:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801587c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8015880:	4620      	mov	r0, r4
 8015882:	b002      	add	sp, #8
 8015884:	bd10      	pop	{r4, pc}
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015886:	2250      	movs	r2, #80	; 0x50
 8015888:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 801588a:	9a01      	ldr	r2, [sp, #4]
 801588c:	2a50      	cmp	r2, #80	; 0x50
 801588e:	d1df      	bne.n	8015850 <xQueueGenericCreateStatic+0x64>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015890:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015892:	2201      	movs	r2, #1
 8015894:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015898:	4622      	mov	r2, r4
 801589a:	e7e6      	b.n	801586a <xQueueGenericCreateStatic+0x7e>

0801589c <xQueueGenericCreate>:
	{
 801589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801589e:	b940      	cbnz	r0, 80158b2 <xQueueGenericCreate+0x16>
 80158a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158a4:	f383 8811 	msr	BASEPRI, r3
 80158a8:	f3bf 8f6f 	isb	sy
 80158ac:	f3bf 8f4f 	dsb	sy
 80158b0:	e7fe      	b.n	80158b0 <xQueueGenericCreate+0x14>
 80158b2:	460d      	mov	r5, r1
 80158b4:	4616      	mov	r6, r2
 80158b6:	4607      	mov	r7, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80158b8:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80158bc:	3050      	adds	r0, #80	; 0x50
 80158be:	f001 fe97 	bl	80175f0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80158c2:	4604      	mov	r4, r0
 80158c4:	b170      	cbz	r0, 80158e4 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80158c6:	2300      	movs	r3, #0
 80158c8:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80158cc:	b165      	cbz	r5, 80158e8 <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80158ce:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80158d2:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80158d4:	63e7      	str	r7, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80158d6:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80158d8:	2101      	movs	r1, #1
 80158da:	4620      	mov	r0, r4
 80158dc:	f7ff ff44 	bl	8015768 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80158e0:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
	}
 80158e4:	4620      	mov	r0, r4
 80158e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80158e8:	4603      	mov	r3, r0
 80158ea:	e7f2      	b.n	80158d2 <xQueueGenericCreate+0x36>

080158ec <xQueueGenericSend>:
{
 80158ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158f0:	b084      	sub	sp, #16
 80158f2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80158f4:	b188      	cbz	r0, 801591a <xQueueGenericSend+0x2e>
 80158f6:	460e      	mov	r6, r1
 80158f8:	461d      	mov	r5, r3
 80158fa:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80158fc:	b1b1      	cbz	r1, 801592c <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80158fe:	2d02      	cmp	r5, #2
 8015900:	d120      	bne.n	8015944 <xQueueGenericSend+0x58>
 8015902:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015904:	2b01      	cmp	r3, #1
 8015906:	d01d      	beq.n	8015944 <xQueueGenericSend+0x58>
 8015908:	f04f 0350 	mov.w	r3, #80	; 0x50
 801590c:	f383 8811 	msr	BASEPRI, r3
 8015910:	f3bf 8f6f 	isb	sy
 8015914:	f3bf 8f4f 	dsb	sy
 8015918:	e7fe      	b.n	8015918 <xQueueGenericSend+0x2c>
 801591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801591e:	f383 8811 	msr	BASEPRI, r3
 8015922:	f3bf 8f6f 	isb	sy
 8015926:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 801592a:	e7fe      	b.n	801592a <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801592c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801592e:	2b00      	cmp	r3, #0
 8015930:	d0e5      	beq.n	80158fe <xQueueGenericSend+0x12>
 8015932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015936:	f383 8811 	msr	BASEPRI, r3
 801593a:	f3bf 8f6f 	isb	sy
 801593e:	f3bf 8f4f 	dsb	sy
 8015942:	e7fe      	b.n	8015942 <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015944:	f001 f932 	bl	8016bac <xTaskGetSchedulerState>
 8015948:	b950      	cbnz	r0, 8015960 <xQueueGenericSend+0x74>
 801594a:	9b01      	ldr	r3, [sp, #4]
 801594c:	b173      	cbz	r3, 801596c <xQueueGenericSend+0x80>
 801594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015952:	f383 8811 	msr	BASEPRI, r3
 8015956:	f3bf 8f6f 	isb	sy
 801595a:	f3bf 8f4f 	dsb	sy
 801595e:	e7fe      	b.n	801595e <xQueueGenericSend+0x72>
 8015960:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 8015962:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8015966:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8015a74 <xQueueGenericSend+0x188>
 801596a:	e034      	b.n	80159d6 <xQueueGenericSend+0xea>
 801596c:	2700      	movs	r7, #0
 801596e:	e7f8      	b.n	8015962 <xQueueGenericSend+0x76>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015970:	462a      	mov	r2, r5
 8015972:	4631      	mov	r1, r6
 8015974:	4620      	mov	r0, r4
 8015976:	f7ff fe6e 	bl	8015656 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801597a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801597c:	b972      	cbnz	r2, 801599c <xQueueGenericSend+0xb0>
					else if( xYieldRequired != pdFALSE )
 801597e:	b138      	cbz	r0, 8015990 <xQueueGenericSend+0xa4>
						queueYIELD_IF_USING_PREEMPTION();
 8015980:	4b3c      	ldr	r3, [pc, #240]	; (8015a74 <xQueueGenericSend+0x188>)
 8015982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015986:	601a      	str	r2, [r3, #0]
 8015988:	f3bf 8f4f 	dsb	sy
 801598c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8015990:	f001 fcca 	bl	8017328 <vPortExitCritical>
				return pdPASS;
 8015994:	2001      	movs	r0, #1
}
 8015996:	b004      	add	sp, #16
 8015998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801599c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80159a0:	f001 f822 	bl	80169e8 <xTaskRemoveFromEventList>
 80159a4:	2800      	cmp	r0, #0
 80159a6:	d0f3      	beq.n	8015990 <xQueueGenericSend+0xa4>
							queueYIELD_IF_USING_PREEMPTION();
 80159a8:	4b32      	ldr	r3, [pc, #200]	; (8015a74 <xQueueGenericSend+0x188>)
 80159aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159ae:	601a      	str	r2, [r3, #0]
 80159b0:	f3bf 8f4f 	dsb	sy
 80159b4:	f3bf 8f6f 	isb	sy
 80159b8:	e7ea      	b.n	8015990 <xQueueGenericSend+0xa4>
					taskEXIT_CRITICAL();
 80159ba:	f001 fcb5 	bl	8017328 <vPortExitCritical>
					return errQUEUE_FULL;
 80159be:	2000      	movs	r0, #0
 80159c0:	e7e9      	b.n	8015996 <xQueueGenericSend+0xaa>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80159c2:	a802      	add	r0, sp, #8
 80159c4:	f001 f898 	bl	8016af8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80159c8:	e012      	b.n	80159f0 <xQueueGenericSend+0x104>
				prvUnlockQueue( pxQueue );
 80159ca:	4620      	mov	r0, r4
 80159cc:	f7ff fe90 	bl	80156f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80159d0:	f000 fe5e 	bl	8016690 <xTaskResumeAll>
 80159d4:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 80159d6:	f001 fc85 	bl	80172e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80159da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80159dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80159de:	429a      	cmp	r2, r3
 80159e0:	d3c6      	bcc.n	8015970 <xQueueGenericSend+0x84>
 80159e2:	2d02      	cmp	r5, #2
 80159e4:	d0c4      	beq.n	8015970 <xQueueGenericSend+0x84>
				if( xTicksToWait == ( TickType_t ) 0 )
 80159e6:	9b01      	ldr	r3, [sp, #4]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d0e6      	beq.n	80159ba <xQueueGenericSend+0xce>
				else if( xEntryTimeSet == pdFALSE )
 80159ec:	2f00      	cmp	r7, #0
 80159ee:	d0e8      	beq.n	80159c2 <xQueueGenericSend+0xd6>
		taskEXIT_CRITICAL();
 80159f0:	f001 fc9a 	bl	8017328 <vPortExitCritical>
		vTaskSuspendAll();
 80159f4:	f000 fd9e 	bl	8016534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80159f8:	f001 fc74 	bl	80172e4 <vPortEnterCritical>
 80159fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015a00:	b25b      	sxtb	r3, r3
 8015a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a06:	bf08      	it	eq
 8015a08:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8015a0c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015a10:	b25b      	sxtb	r3, r3
 8015a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a16:	bf08      	it	eq
 8015a18:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8015a1c:	f001 fc84 	bl	8017328 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015a20:	a901      	add	r1, sp, #4
 8015a22:	a802      	add	r0, sp, #8
 8015a24:	f001 f874 	bl	8016b10 <xTaskCheckForTimeOut>
 8015a28:	b9e8      	cbnz	r0, 8015a66 <xQueueGenericSend+0x17a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015a2a:	f001 fc5b 	bl	80172e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015a2e:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
 8015a32:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8015a34:	f001 fc78 	bl	8017328 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015a38:	45ba      	cmp	sl, r7
 8015a3a:	d1c6      	bne.n	80159ca <xQueueGenericSend+0xde>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015a3c:	9901      	ldr	r1, [sp, #4]
 8015a3e:	f104 0010 	add.w	r0, r4, #16
 8015a42:	f000 ff6f 	bl	8016924 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015a46:	4620      	mov	r0, r4
 8015a48:	f7ff fe52 	bl	80156f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015a4c:	f000 fe20 	bl	8016690 <xTaskResumeAll>
 8015a50:	2800      	cmp	r0, #0
 8015a52:	d1bf      	bne.n	80159d4 <xQueueGenericSend+0xe8>
					portYIELD_WITHIN_API();
 8015a54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8015a58:	f8c9 3000 	str.w	r3, [r9]
 8015a5c:	f3bf 8f4f 	dsb	sy
 8015a60:	f3bf 8f6f 	isb	sy
 8015a64:	e7b6      	b.n	80159d4 <xQueueGenericSend+0xe8>
			prvUnlockQueue( pxQueue );
 8015a66:	4620      	mov	r0, r4
 8015a68:	f7ff fe42 	bl	80156f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015a6c:	f000 fe10 	bl	8016690 <xTaskResumeAll>
			return errQUEUE_FULL;
 8015a70:	2000      	movs	r0, #0
 8015a72:	e790      	b.n	8015996 <xQueueGenericSend+0xaa>
 8015a74:	e000ed04 	.word	0xe000ed04

08015a78 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8015a78:	b148      	cbz	r0, 8015a8e <prvInitialiseMutex+0x16>
	{
 8015a7a:	b510      	push	{r4, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015a7c:	2100      	movs	r1, #0
 8015a7e:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015a80:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015a82:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015a84:	460b      	mov	r3, r1
 8015a86:	460a      	mov	r2, r1
 8015a88:	f7ff ff30 	bl	80158ec <xQueueGenericSend>
	}
 8015a8c:	bd10      	pop	{r4, pc}
 8015a8e:	4770      	bx	lr

08015a90 <xQueueCreateMutex>:
	{
 8015a90:	b510      	push	{r4, lr}
 8015a92:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8015a94:	2100      	movs	r1, #0
 8015a96:	2001      	movs	r0, #1
 8015a98:	f7ff ff00 	bl	801589c <xQueueGenericCreate>
 8015a9c:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8015a9e:	f7ff ffeb 	bl	8015a78 <prvInitialiseMutex>
	}
 8015aa2:	4620      	mov	r0, r4
 8015aa4:	bd10      	pop	{r4, pc}

08015aa6 <xQueueCreateMutexStatic>:
	{
 8015aa6:	b510      	push	{r4, lr}
 8015aa8:	b082      	sub	sp, #8
 8015aaa:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8015aac:	9000      	str	r0, [sp, #0]
 8015aae:	2200      	movs	r2, #0
 8015ab0:	4611      	mov	r1, r2
 8015ab2:	2001      	movs	r0, #1
 8015ab4:	f7ff fe9a 	bl	80157ec <xQueueGenericCreateStatic>
 8015ab8:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8015aba:	f7ff ffdd 	bl	8015a78 <prvInitialiseMutex>
	}
 8015abe:	4620      	mov	r0, r4
 8015ac0:	b002      	add	sp, #8
 8015ac2:	bd10      	pop	{r4, pc}

08015ac4 <xQueueGiveMutexRecursive>:
	{
 8015ac4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8015ac6:	b138      	cbz	r0, 8015ad8 <xQueueGiveMutexRecursive+0x14>
 8015ac8:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8015aca:	6885      	ldr	r5, [r0, #8]
 8015acc:	f001 f868 	bl	8016ba0 <xTaskGetCurrentTaskHandle>
 8015ad0:	4285      	cmp	r5, r0
 8015ad2:	d00a      	beq.n	8015aea <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8015ad4:	2000      	movs	r0, #0
	}
 8015ad6:	bd38      	pop	{r3, r4, r5, pc}
 8015ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015adc:	f383 8811 	msr	BASEPRI, r3
 8015ae0:	f3bf 8f6f 	isb	sy
 8015ae4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8015ae8:	e7fe      	b.n	8015ae8 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8015aea:	68e3      	ldr	r3, [r4, #12]
 8015aec:	3b01      	subs	r3, #1
 8015aee:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8015af0:	b10b      	cbz	r3, 8015af6 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8015af2:	2001      	movs	r0, #1
		return xReturn;
 8015af4:	e7ef      	b.n	8015ad6 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8015af6:	461a      	mov	r2, r3
 8015af8:	4619      	mov	r1, r3
 8015afa:	4620      	mov	r0, r4
 8015afc:	f7ff fef6 	bl	80158ec <xQueueGenericSend>
			xReturn = pdPASS;
 8015b00:	2001      	movs	r0, #1
 8015b02:	e7e8      	b.n	8015ad6 <xQueueGiveMutexRecursive+0x12>

08015b04 <xQueueGenericSendFromISR>:
{
 8015b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8015b08:	b190      	cbz	r0, 8015b30 <xQueueGenericSendFromISR+0x2c>
 8015b0a:	4689      	mov	r9, r1
 8015b0c:	4690      	mov	r8, r2
 8015b0e:	461f      	mov	r7, r3
 8015b10:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015b12:	b1b1      	cbz	r1, 8015b42 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015b14:	2f02      	cmp	r7, #2
 8015b16:	d120      	bne.n	8015b5a <xQueueGenericSendFromISR+0x56>
 8015b18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015b1a:	2b01      	cmp	r3, #1
 8015b1c:	d01d      	beq.n	8015b5a <xQueueGenericSendFromISR+0x56>
 8015b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b22:	f383 8811 	msr	BASEPRI, r3
 8015b26:	f3bf 8f6f 	isb	sy
 8015b2a:	f3bf 8f4f 	dsb	sy
 8015b2e:	e7fe      	b.n	8015b2e <xQueueGenericSendFromISR+0x2a>
 8015b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b34:	f383 8811 	msr	BASEPRI, r3
 8015b38:	f3bf 8f6f 	isb	sy
 8015b3c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8015b40:	e7fe      	b.n	8015b40 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015b42:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d0e5      	beq.n	8015b14 <xQueueGenericSendFromISR+0x10>
 8015b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b4c:	f383 8811 	msr	BASEPRI, r3
 8015b50:	f3bf 8f6f 	isb	sy
 8015b54:	f3bf 8f4f 	dsb	sy
 8015b58:	e7fe      	b.n	8015b58 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015b5a:	f001 fcef 	bl	801753c <vPortValidateInterruptPriority>
	__asm volatile
 8015b5e:	f3ef 8611 	mrs	r6, BASEPRI
 8015b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b66:	f383 8811 	msr	BASEPRI, r3
 8015b6a:	f3bf 8f6f 	isb	sy
 8015b6e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015b72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8015b74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015b76:	429a      	cmp	r2, r3
 8015b78:	d306      	bcc.n	8015b88 <xQueueGenericSendFromISR+0x84>
 8015b7a:	2f02      	cmp	r7, #2
 8015b7c:	d004      	beq.n	8015b88 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8015b7e:	2000      	movs	r0, #0
	__asm volatile
 8015b80:	f386 8811 	msr	BASEPRI, r6
}
 8015b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8015b88:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8015b8c:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015b8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015b90:	463a      	mov	r2, r7
 8015b92:	4649      	mov	r1, r9
 8015b94:	4620      	mov	r0, r4
 8015b96:	f7ff fd5e 	bl	8015656 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8015b9a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8015b9e:	d005      	beq.n	8015bac <xQueueGenericSendFromISR+0xa8>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015ba0:	1c6b      	adds	r3, r5, #1
 8015ba2:	b25b      	sxtb	r3, r3
 8015ba4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8015ba8:	2001      	movs	r0, #1
 8015baa:	e7e9      	b.n	8015b80 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015bac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015bae:	b90b      	cbnz	r3, 8015bb4 <xQueueGenericSendFromISR+0xb0>
			xReturn = pdPASS;
 8015bb0:	2001      	movs	r0, #1
 8015bb2:	e7e5      	b.n	8015b80 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015bb4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015bb8:	f000 ff16 	bl	80169e8 <xTaskRemoveFromEventList>
 8015bbc:	b130      	cbz	r0, 8015bcc <xQueueGenericSendFromISR+0xc8>
							if( pxHigherPriorityTaskWoken != NULL )
 8015bbe:	f1b8 0f00 	cmp.w	r8, #0
 8015bc2:	d005      	beq.n	8015bd0 <xQueueGenericSendFromISR+0xcc>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015bc4:	2001      	movs	r0, #1
 8015bc6:	f8c8 0000 	str.w	r0, [r8]
 8015bca:	e7d9      	b.n	8015b80 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8015bcc:	2001      	movs	r0, #1
 8015bce:	e7d7      	b.n	8015b80 <xQueueGenericSendFromISR+0x7c>
 8015bd0:	2001      	movs	r0, #1
 8015bd2:	e7d5      	b.n	8015b80 <xQueueGenericSendFromISR+0x7c>

08015bd4 <xQueueReceive>:
{
 8015bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015bd8:	b085      	sub	sp, #20
 8015bda:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8015bdc:	b180      	cbz	r0, 8015c00 <xQueueReceive+0x2c>
 8015bde:	460e      	mov	r6, r1
 8015be0:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015be2:	b1b1      	cbz	r1, 8015c12 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015be4:	f000 ffe2 	bl	8016bac <xTaskGetSchedulerState>
 8015be8:	b9f8      	cbnz	r0, 8015c2a <xQueueReceive+0x56>
 8015bea:	9b01      	ldr	r3, [sp, #4]
 8015bec:	b31b      	cbz	r3, 8015c36 <xQueueReceive+0x62>
	__asm volatile
 8015bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bf2:	f383 8811 	msr	BASEPRI, r3
 8015bf6:	f3bf 8f6f 	isb	sy
 8015bfa:	f3bf 8f4f 	dsb	sy
 8015bfe:	e7fe      	b.n	8015bfe <xQueueReceive+0x2a>
 8015c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c04:	f383 8811 	msr	BASEPRI, r3
 8015c08:	f3bf 8f6f 	isb	sy
 8015c0c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8015c10:	e7fe      	b.n	8015c10 <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015c12:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d0e5      	beq.n	8015be4 <xQueueReceive+0x10>
 8015c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c1c:	f383 8811 	msr	BASEPRI, r3
 8015c20:	f3bf 8f6f 	isb	sy
 8015c24:	f3bf 8f4f 	dsb	sy
 8015c28:	e7fe      	b.n	8015c28 <xQueueReceive+0x54>
 8015c2a:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 8015c2c:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8015c30:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8015d30 <xQueueReceive+0x15c>
 8015c34:	e037      	b.n	8015ca6 <xQueueReceive+0xd2>
 8015c36:	2700      	movs	r7, #0
 8015c38:	e7f8      	b.n	8015c2c <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015c3a:	4631      	mov	r1, r6
 8015c3c:	4620      	mov	r0, r4
 8015c3e:	f7ff fd45 	bl	80156cc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015c42:	3d01      	subs	r5, #1
 8015c44:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015c46:	6923      	ldr	r3, [r4, #16]
 8015c48:	b92b      	cbnz	r3, 8015c56 <xQueueReceive+0x82>
				taskEXIT_CRITICAL();
 8015c4a:	f001 fb6d 	bl	8017328 <vPortExitCritical>
				return pdPASS;
 8015c4e:	2001      	movs	r0, #1
}
 8015c50:	b005      	add	sp, #20
 8015c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015c56:	f104 0010 	add.w	r0, r4, #16
 8015c5a:	f000 fec5 	bl	80169e8 <xTaskRemoveFromEventList>
 8015c5e:	2800      	cmp	r0, #0
 8015c60:	d0f3      	beq.n	8015c4a <xQueueReceive+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 8015c62:	4b33      	ldr	r3, [pc, #204]	; (8015d30 <xQueueReceive+0x15c>)
 8015c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c68:	601a      	str	r2, [r3, #0]
 8015c6a:	f3bf 8f4f 	dsb	sy
 8015c6e:	f3bf 8f6f 	isb	sy
 8015c72:	e7ea      	b.n	8015c4a <xQueueReceive+0x76>
					taskEXIT_CRITICAL();
 8015c74:	f001 fb58 	bl	8017328 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8015c78:	2000      	movs	r0, #0
 8015c7a:	e7e9      	b.n	8015c50 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015c7c:	a802      	add	r0, sp, #8
 8015c7e:	f000 ff3b 	bl	8016af8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015c82:	e01a      	b.n	8015cba <xQueueReceive+0xe6>
				prvUnlockQueue( pxQueue );
 8015c84:	4620      	mov	r0, r4
 8015c86:	f7ff fd33 	bl	80156f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015c8a:	f000 fd01 	bl	8016690 <xTaskResumeAll>
 8015c8e:	e009      	b.n	8015ca4 <xQueueReceive+0xd0>
			prvUnlockQueue( pxQueue );
 8015c90:	4620      	mov	r0, r4
 8015c92:	f7ff fd2d 	bl	80156f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015c96:	f000 fcfb 	bl	8016690 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015c9a:	4620      	mov	r0, r4
 8015c9c:	f7ff fcd0 	bl	8015640 <prvIsQueueEmpty>
 8015ca0:	2800      	cmp	r0, #0
 8015ca2:	d142      	bne.n	8015d2a <xQueueReceive+0x156>
 8015ca4:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 8015ca6:	f001 fb1d 	bl	80172e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015caa:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015cac:	2d00      	cmp	r5, #0
 8015cae:	d1c4      	bne.n	8015c3a <xQueueReceive+0x66>
				if( xTicksToWait == ( TickType_t ) 0 )
 8015cb0:	9b01      	ldr	r3, [sp, #4]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d0de      	beq.n	8015c74 <xQueueReceive+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 8015cb6:	2f00      	cmp	r7, #0
 8015cb8:	d0e0      	beq.n	8015c7c <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
 8015cba:	f001 fb35 	bl	8017328 <vPortExitCritical>
		vTaskSuspendAll();
 8015cbe:	f000 fc39 	bl	8016534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015cc2:	f001 fb0f 	bl	80172e4 <vPortEnterCritical>
 8015cc6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015cca:	b25b      	sxtb	r3, r3
 8015ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cd0:	bf08      	it	eq
 8015cd2:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8015cd6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015cda:	b25b      	sxtb	r3, r3
 8015cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ce0:	bf08      	it	eq
 8015ce2:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8015ce6:	f001 fb1f 	bl	8017328 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015cea:	a901      	add	r1, sp, #4
 8015cec:	a802      	add	r0, sp, #8
 8015cee:	f000 ff0f 	bl	8016b10 <xTaskCheckForTimeOut>
 8015cf2:	2800      	cmp	r0, #0
 8015cf4:	d1cc      	bne.n	8015c90 <xQueueReceive+0xbc>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015cf6:	4620      	mov	r0, r4
 8015cf8:	f7ff fca2 	bl	8015640 <prvIsQueueEmpty>
 8015cfc:	2800      	cmp	r0, #0
 8015cfe:	d0c1      	beq.n	8015c84 <xQueueReceive+0xb0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015d00:	9901      	ldr	r1, [sp, #4]
 8015d02:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015d06:	f000 fe0d 	bl	8016924 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015d0a:	4620      	mov	r0, r4
 8015d0c:	f7ff fcf0 	bl	80156f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015d10:	f000 fcbe 	bl	8016690 <xTaskResumeAll>
 8015d14:	2800      	cmp	r0, #0
 8015d16:	d1c5      	bne.n	8015ca4 <xQueueReceive+0xd0>
					portYIELD_WITHIN_API();
 8015d18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8015d1c:	f8c9 3000 	str.w	r3, [r9]
 8015d20:	f3bf 8f4f 	dsb	sy
 8015d24:	f3bf 8f6f 	isb	sy
 8015d28:	e7bc      	b.n	8015ca4 <xQueueReceive+0xd0>
				return errQUEUE_EMPTY;
 8015d2a:	2000      	movs	r0, #0
 8015d2c:	e790      	b.n	8015c50 <xQueueReceive+0x7c>
 8015d2e:	bf00      	nop
 8015d30:	e000ed04 	.word	0xe000ed04

08015d34 <xQueueSemaphoreTake>:
{
 8015d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d38:	b084      	sub	sp, #16
 8015d3a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8015d3c:	b158      	cbz	r0, 8015d56 <xQueueSemaphoreTake+0x22>
 8015d3e:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8015d40:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8015d42:	b18b      	cbz	r3, 8015d68 <xQueueSemaphoreTake+0x34>
 8015d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d48:	f383 8811 	msr	BASEPRI, r3
 8015d4c:	f3bf 8f6f 	isb	sy
 8015d50:	f3bf 8f4f 	dsb	sy
 8015d54:	e7fe      	b.n	8015d54 <xQueueSemaphoreTake+0x20>
 8015d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d5a:	f383 8811 	msr	BASEPRI, r3
 8015d5e:	f3bf 8f6f 	isb	sy
 8015d62:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8015d66:	e7fe      	b.n	8015d66 <xQueueSemaphoreTake+0x32>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015d68:	f000 ff20 	bl	8016bac <xTaskGetSchedulerState>
 8015d6c:	b950      	cbnz	r0, 8015d84 <xQueueSemaphoreTake+0x50>
 8015d6e:	9b01      	ldr	r3, [sp, #4]
 8015d70:	b173      	cbz	r3, 8015d90 <xQueueSemaphoreTake+0x5c>
 8015d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d76:	f383 8811 	msr	BASEPRI, r3
 8015d7a:	f3bf 8f6f 	isb	sy
 8015d7e:	f3bf 8f4f 	dsb	sy
 8015d82:	e7fe      	b.n	8015d82 <xQueueSemaphoreTake+0x4e>
 8015d84:	2500      	movs	r5, #0
 8015d86:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8015d88:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8015d8a:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8015edc <xQueueSemaphoreTake+0x1a8>
 8015d8e:	e04d      	b.n	8015e2c <xQueueSemaphoreTake+0xf8>
 8015d90:	2500      	movs	r5, #0
 8015d92:	462e      	mov	r6, r5
 8015d94:	e7f8      	b.n	8015d88 <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015d96:	3b01      	subs	r3, #1
 8015d98:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015d9a:	6823      	ldr	r3, [r4, #0]
 8015d9c:	b143      	cbz	r3, 8015db0 <xQueueSemaphoreTake+0x7c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015d9e:	6923      	ldr	r3, [r4, #16]
 8015da0:	b953      	cbnz	r3, 8015db8 <xQueueSemaphoreTake+0x84>
				taskEXIT_CRITICAL();
 8015da2:	f001 fac1 	bl	8017328 <vPortExitCritical>
				return pdPASS;
 8015da6:	2501      	movs	r5, #1
}
 8015da8:	4628      	mov	r0, r5
 8015daa:	b004      	add	sp, #16
 8015dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015db0:	f000 fffc 	bl	8016dac <pvTaskIncrementMutexHeldCount>
 8015db4:	60a0      	str	r0, [r4, #8]
 8015db6:	e7f2      	b.n	8015d9e <xQueueSemaphoreTake+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015db8:	f104 0010 	add.w	r0, r4, #16
 8015dbc:	f000 fe14 	bl	80169e8 <xTaskRemoveFromEventList>
 8015dc0:	2800      	cmp	r0, #0
 8015dc2:	d0ee      	beq.n	8015da2 <xQueueSemaphoreTake+0x6e>
						queueYIELD_IF_USING_PREEMPTION();
 8015dc4:	4b45      	ldr	r3, [pc, #276]	; (8015edc <xQueueSemaphoreTake+0x1a8>)
 8015dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015dca:	601a      	str	r2, [r3, #0]
 8015dcc:	f3bf 8f4f 	dsb	sy
 8015dd0:	f3bf 8f6f 	isb	sy
 8015dd4:	e7e5      	b.n	8015da2 <xQueueSemaphoreTake+0x6e>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015dd6:	b145      	cbz	r5, 8015dea <xQueueSemaphoreTake+0xb6>
 8015dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ddc:	f383 8811 	msr	BASEPRI, r3
 8015de0:	f3bf 8f6f 	isb	sy
 8015de4:	f3bf 8f4f 	dsb	sy
 8015de8:	e7fe      	b.n	8015de8 <xQueueSemaphoreTake+0xb4>
					taskEXIT_CRITICAL();
 8015dea:	f001 fa9d 	bl	8017328 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8015dee:	e7db      	b.n	8015da8 <xQueueSemaphoreTake+0x74>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015df0:	a802      	add	r0, sp, #8
 8015df2:	f000 fe81 	bl	8016af8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015df6:	e023      	b.n	8015e40 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 8015df8:	f001 fa74 	bl	80172e4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015dfc:	68a0      	ldr	r0, [r4, #8]
 8015dfe:	f000 fee5 	bl	8016bcc <xTaskPriorityInherit>
 8015e02:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8015e04:	f001 fa90 	bl	8017328 <vPortExitCritical>
 8015e08:	e040      	b.n	8015e8c <xQueueSemaphoreTake+0x158>
				prvUnlockQueue( pxQueue );
 8015e0a:	4620      	mov	r0, r4
 8015e0c:	f7ff fc70 	bl	80156f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015e10:	f000 fc3e 	bl	8016690 <xTaskResumeAll>
 8015e14:	e009      	b.n	8015e2a <xQueueSemaphoreTake+0xf6>
			prvUnlockQueue( pxQueue );
 8015e16:	4620      	mov	r0, r4
 8015e18:	f7ff fc6a 	bl	80156f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015e1c:	f000 fc38 	bl	8016690 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015e20:	4620      	mov	r0, r4
 8015e22:	f7ff fc0d 	bl	8015640 <prvIsQueueEmpty>
 8015e26:	2800      	cmp	r0, #0
 8015e28:	d145      	bne.n	8015eb6 <xQueueSemaphoreTake+0x182>
 8015e2a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8015e2c:	f001 fa5a 	bl	80172e4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015e30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d1af      	bne.n	8015d96 <xQueueSemaphoreTake+0x62>
				if( xTicksToWait == ( TickType_t ) 0 )
 8015e36:	9b01      	ldr	r3, [sp, #4]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d0cc      	beq.n	8015dd6 <xQueueSemaphoreTake+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 8015e3c:	2e00      	cmp	r6, #0
 8015e3e:	d0d7      	beq.n	8015df0 <xQueueSemaphoreTake+0xbc>
		taskEXIT_CRITICAL();
 8015e40:	f001 fa72 	bl	8017328 <vPortExitCritical>
		vTaskSuspendAll();
 8015e44:	f000 fb76 	bl	8016534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015e48:	f001 fa4c 	bl	80172e4 <vPortEnterCritical>
 8015e4c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015e50:	b25b      	sxtb	r3, r3
 8015e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e56:	bf08      	it	eq
 8015e58:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8015e5c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015e60:	b25b      	sxtb	r3, r3
 8015e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e66:	bf08      	it	eq
 8015e68:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8015e6c:	f001 fa5c 	bl	8017328 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015e70:	a901      	add	r1, sp, #4
 8015e72:	a802      	add	r0, sp, #8
 8015e74:	f000 fe4c 	bl	8016b10 <xTaskCheckForTimeOut>
 8015e78:	2800      	cmp	r0, #0
 8015e7a:	d1cc      	bne.n	8015e16 <xQueueSemaphoreTake+0xe2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015e7c:	4620      	mov	r0, r4
 8015e7e:	f7ff fbdf 	bl	8015640 <prvIsQueueEmpty>
 8015e82:	2800      	cmp	r0, #0
 8015e84:	d0c1      	beq.n	8015e0a <xQueueSemaphoreTake+0xd6>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015e86:	6823      	ldr	r3, [r4, #0]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d0b5      	beq.n	8015df8 <xQueueSemaphoreTake+0xc4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015e8c:	9901      	ldr	r1, [sp, #4]
 8015e8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015e92:	f000 fd47 	bl	8016924 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015e96:	4620      	mov	r0, r4
 8015e98:	f7ff fc2a 	bl	80156f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015e9c:	f000 fbf8 	bl	8016690 <xTaskResumeAll>
 8015ea0:	2800      	cmp	r0, #0
 8015ea2:	d1c2      	bne.n	8015e2a <xQueueSemaphoreTake+0xf6>
					portYIELD_WITHIN_API();
 8015ea4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8015ea8:	f8c8 3000 	str.w	r3, [r8]
 8015eac:	f3bf 8f4f 	dsb	sy
 8015eb0:	f3bf 8f6f 	isb	sy
 8015eb4:	e7b9      	b.n	8015e2a <xQueueSemaphoreTake+0xf6>
					if( xInheritanceOccurred != pdFALSE )
 8015eb6:	2d00      	cmp	r5, #0
 8015eb8:	f43f af76 	beq.w	8015da8 <xQueueSemaphoreTake+0x74>
						taskENTER_CRITICAL();
 8015ebc:	f001 fa12 	bl	80172e4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015ec0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015ec2:	b119      	cbz	r1, 8015ecc <xQueueSemaphoreTake+0x198>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015ec4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015ec6:	6819      	ldr	r1, [r3, #0]
 8015ec8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015ecc:	68a0      	ldr	r0, [r4, #8]
 8015ece:	f000 ff0f 	bl	8016cf0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8015ed2:	f001 fa29 	bl	8017328 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8015ed6:	2500      	movs	r5, #0
 8015ed8:	e766      	b.n	8015da8 <xQueueSemaphoreTake+0x74>
 8015eda:	bf00      	nop
 8015edc:	e000ed04 	.word	0xe000ed04

08015ee0 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8015ee0:	b188      	cbz	r0, 8015f06 <xQueueTakeMutexRecursive+0x26>
	{
 8015ee2:	b570      	push	{r4, r5, r6, lr}
 8015ee4:	460d      	mov	r5, r1
 8015ee6:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8015ee8:	6886      	ldr	r6, [r0, #8]
 8015eea:	f000 fe59 	bl	8016ba0 <xTaskGetCurrentTaskHandle>
 8015eee:	4286      	cmp	r6, r0
 8015ef0:	d012      	beq.n	8015f18 <xQueueTakeMutexRecursive+0x38>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8015ef2:	4629      	mov	r1, r5
 8015ef4:	4620      	mov	r0, r4
 8015ef6:	f7ff ff1d 	bl	8015d34 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8015efa:	4602      	mov	r2, r0
 8015efc:	b180      	cbz	r0, 8015f20 <xQueueTakeMutexRecursive+0x40>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8015efe:	68e3      	ldr	r3, [r4, #12]
 8015f00:	3301      	adds	r3, #1
 8015f02:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8015f04:	e00c      	b.n	8015f20 <xQueueTakeMutexRecursive+0x40>
 8015f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f0a:	f383 8811 	msr	BASEPRI, r3
 8015f0e:	f3bf 8f6f 	isb	sy
 8015f12:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8015f16:	e7fe      	b.n	8015f16 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8015f18:	68e3      	ldr	r3, [r4, #12]
 8015f1a:	3301      	adds	r3, #1
 8015f1c:	60e3      	str	r3, [r4, #12]
			xReturn = pdPASS;
 8015f1e:	2201      	movs	r2, #1
	}
 8015f20:	4610      	mov	r0, r2
 8015f22:	bd70      	pop	{r4, r5, r6, pc}

08015f24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015f24:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015f26:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015f28:	4c08      	ldr	r4, [pc, #32]	; (8015f4c <vQueueAddToRegistry+0x28>)
 8015f2a:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8015f2e:	b12a      	cbz	r2, 8015f3c <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015f30:	3301      	adds	r3, #1
 8015f32:	2b08      	cmp	r3, #8
 8015f34:	d1f9      	bne.n	8015f2a <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f3a:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015f3c:	4a03      	ldr	r2, [pc, #12]	; (8015f4c <vQueueAddToRegistry+0x28>)
 8015f3e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015f42:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015f46:	6058      	str	r0, [r3, #4]
				break;
 8015f48:	e7f5      	b.n	8015f36 <vQueueAddToRegistry+0x12>
 8015f4a:	bf00      	nop
 8015f4c:	20008100 	.word	0x20008100

08015f50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015f50:	b570      	push	{r4, r5, r6, lr}
 8015f52:	4604      	mov	r4, r0
 8015f54:	460d      	mov	r5, r1
 8015f56:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015f58:	f001 f9c4 	bl	80172e4 <vPortEnterCritical>
 8015f5c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015f60:	b25b      	sxtb	r3, r3
 8015f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f66:	bf04      	itt	eq
 8015f68:	2300      	moveq	r3, #0
 8015f6a:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8015f6e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015f72:	b25b      	sxtb	r3, r3
 8015f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f78:	bf04      	itt	eq
 8015f7a:	2300      	moveq	r3, #0
 8015f7c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8015f80:	f001 f9d2 	bl	8017328 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015f84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015f86:	b11b      	cbz	r3, 8015f90 <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8015f88:	4620      	mov	r0, r4
 8015f8a:	f7ff fbb1 	bl	80156f0 <prvUnlockQueue>
	}
 8015f8e:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8015f90:	4632      	mov	r2, r6
 8015f92:	4629      	mov	r1, r5
 8015f94:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015f98:	f000 fd08 	bl	80169ac <vTaskPlaceOnEventListRestricted>
 8015f9c:	e7f4      	b.n	8015f88 <vQueueWaitForMessageRestricted+0x38>
	...

08015fa0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015fa0:	4b08      	ldr	r3, [pc, #32]	; (8015fc4 <prvResetNextTaskUnblockTime+0x24>)
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	b923      	cbnz	r3, 8015fb2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015fa8:	4b07      	ldr	r3, [pc, #28]	; (8015fc8 <prvResetNextTaskUnblockTime+0x28>)
 8015faa:	f04f 32ff 	mov.w	r2, #4294967295
 8015fae:	601a      	str	r2, [r3, #0]
 8015fb0:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015fb2:	4b04      	ldr	r3, [pc, #16]	; (8015fc4 <prvResetNextTaskUnblockTime+0x24>)
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015fb8:	68db      	ldr	r3, [r3, #12]
 8015fba:	685a      	ldr	r2, [r3, #4]
 8015fbc:	4b02      	ldr	r3, [pc, #8]	; (8015fc8 <prvResetNextTaskUnblockTime+0x28>)
 8015fbe:	601a      	str	r2, [r3, #0]
	}
}
 8015fc0:	4770      	bx	lr
 8015fc2:	bf00      	nop
 8015fc4:	20000d38 	.word	0x20000d38
 8015fc8:	200011dc 	.word	0x200011dc

08015fcc <prvInitialiseNewTask>:
{
 8015fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fd0:	4607      	mov	r7, r0
 8015fd2:	468a      	mov	sl, r1
 8015fd4:	4698      	mov	r8, r3
 8015fd6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8015fda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015fdc:	0096      	lsls	r6, r2, #2
 8015fde:	4632      	mov	r2, r6
 8015fe0:	21a5      	movs	r1, #165	; 0xa5
 8015fe2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8015fe4:	f001 fef8 	bl	8017dd8 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015fe8:	3e04      	subs	r6, #4
 8015fea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015fec:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015fee:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8015ff2:	f1ba 0f00 	cmp.w	sl, #0
 8015ff6:	d036      	beq.n	8016066 <prvInitialiseNewTask+0x9a>
 8015ff8:	f10a 32ff 	add.w	r2, sl, #4294967295
 8015ffc:	f104 0533 	add.w	r5, r4, #51	; 0x33
 8016000:	f10a 030f 	add.w	r3, sl, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016004:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8016008:	f805 1f01 	strb.w	r1, [r5, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 801600c:	b109      	cbz	r1, 8016012 <prvInitialiseNewTask+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801600e:	429a      	cmp	r2, r3
 8016010:	d1f8      	bne.n	8016004 <prvInitialiseNewTask+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016012:	2300      	movs	r3, #0
 8016014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016018:	9d08      	ldr	r5, [sp, #32]
 801601a:	2d37      	cmp	r5, #55	; 0x37
 801601c:	bf28      	it	cs
 801601e:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8016020:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8016022:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016024:	f04f 0a00 	mov.w	sl, #0
 8016028:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801602c:	1d20      	adds	r0, r4, #4
 801602e:	f7ff face 	bl	80155ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016032:	f104 0018 	add.w	r0, r4, #24
 8016036:	f7ff faca 	bl	80155ce <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801603a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801603c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
 8016040:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016042:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8016044:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016048:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801604c:	4642      	mov	r2, r8
 801604e:	4639      	mov	r1, r7
 8016050:	4630      	mov	r0, r6
 8016052:	f001 f919 	bl	8017288 <pxPortInitialiseStack>
 8016056:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8016058:	f1b9 0f00 	cmp.w	r9, #0
 801605c:	d001      	beq.n	8016062 <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801605e:	f8c9 4000 	str.w	r4, [r9]
}
 8016062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016066:	2300      	movs	r3, #0
 8016068:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 801606c:	e7d4      	b.n	8016018 <prvInitialiseNewTask+0x4c>
	...

08016070 <prvAddNewTaskToReadyList>:
{
 8016070:	b570      	push	{r4, r5, r6, lr}
 8016072:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8016074:	f001 f936 	bl	80172e4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8016078:	4a2f      	ldr	r2, [pc, #188]	; (8016138 <prvAddNewTaskToReadyList+0xc8>)
 801607a:	6813      	ldr	r3, [r2, #0]
 801607c:	3301      	adds	r3, #1
 801607e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016080:	4b2e      	ldr	r3, [pc, #184]	; (801613c <prvAddNewTaskToReadyList+0xcc>)
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d032      	beq.n	80160ee <prvAddNewTaskToReadyList+0x7e>
			if( xSchedulerRunning == pdFALSE )
 8016088:	4b2d      	ldr	r3, [pc, #180]	; (8016140 <prvAddNewTaskToReadyList+0xd0>)
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	b93b      	cbnz	r3, 801609e <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801608e:	4b2b      	ldr	r3, [pc, #172]	; (801613c <prvAddNewTaskToReadyList+0xcc>)
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016094:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016096:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8016098:	bf9c      	itt	ls
 801609a:	4b28      	ldrls	r3, [pc, #160]	; (801613c <prvAddNewTaskToReadyList+0xcc>)
 801609c:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
 801609e:	4a29      	ldr	r2, [pc, #164]	; (8016144 <prvAddNewTaskToReadyList+0xd4>)
 80160a0:	6813      	ldr	r3, [r2, #0]
 80160a2:	3301      	adds	r3, #1
 80160a4:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80160a6:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80160a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80160aa:	4b27      	ldr	r3, [pc, #156]	; (8016148 <prvAddNewTaskToReadyList+0xd8>)
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	4298      	cmp	r0, r3
 80160b0:	bf84      	itt	hi
 80160b2:	4b25      	ldrhi	r3, [pc, #148]	; (8016148 <prvAddNewTaskToReadyList+0xd8>)
 80160b4:	6018      	strhi	r0, [r3, #0]
 80160b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80160ba:	1d21      	adds	r1, r4, #4
 80160bc:	4b23      	ldr	r3, [pc, #140]	; (801614c <prvAddNewTaskToReadyList+0xdc>)
 80160be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80160c2:	f7ff fa87 	bl	80155d4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80160c6:	f001 f92f 	bl	8017328 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80160ca:	4b1d      	ldr	r3, [pc, #116]	; (8016140 <prvAddNewTaskToReadyList+0xd0>)
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	b16b      	cbz	r3, 80160ec <prvAddNewTaskToReadyList+0x7c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80160d0:	4b1a      	ldr	r3, [pc, #104]	; (801613c <prvAddNewTaskToReadyList+0xcc>)
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80160d8:	429a      	cmp	r2, r3
 80160da:	d207      	bcs.n	80160ec <prvAddNewTaskToReadyList+0x7c>
			taskYIELD_IF_USING_PREEMPTION();
 80160dc:	4b1c      	ldr	r3, [pc, #112]	; (8016150 <prvAddNewTaskToReadyList+0xe0>)
 80160de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80160e2:	601a      	str	r2, [r3, #0]
 80160e4:	f3bf 8f4f 	dsb	sy
 80160e8:	f3bf 8f6f 	isb	sy
}
 80160ec:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 80160ee:	4b13      	ldr	r3, [pc, #76]	; (801613c <prvAddNewTaskToReadyList+0xcc>)
 80160f0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80160f2:	6813      	ldr	r3, [r2, #0]
 80160f4:	2b01      	cmp	r3, #1
 80160f6:	d1d2      	bne.n	801609e <prvAddNewTaskToReadyList+0x2e>
 80160f8:	4d14      	ldr	r5, [pc, #80]	; (801614c <prvAddNewTaskToReadyList+0xdc>)
 80160fa:	f505 668c 	add.w	r6, r5, #1120	; 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80160fe:	4628      	mov	r0, r5
 8016100:	f7ff fa5a 	bl	80155b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016104:	3514      	adds	r5, #20
 8016106:	42b5      	cmp	r5, r6
 8016108:	d1f9      	bne.n	80160fe <prvAddNewTaskToReadyList+0x8e>
	vListInitialise( &xDelayedTaskList1 );
 801610a:	4e12      	ldr	r6, [pc, #72]	; (8016154 <prvAddNewTaskToReadyList+0xe4>)
 801610c:	4630      	mov	r0, r6
 801610e:	f7ff fa53 	bl	80155b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016112:	4d11      	ldr	r5, [pc, #68]	; (8016158 <prvAddNewTaskToReadyList+0xe8>)
 8016114:	4628      	mov	r0, r5
 8016116:	f7ff fa4f 	bl	80155b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801611a:	4810      	ldr	r0, [pc, #64]	; (801615c <prvAddNewTaskToReadyList+0xec>)
 801611c:	f7ff fa4c 	bl	80155b8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8016120:	480f      	ldr	r0, [pc, #60]	; (8016160 <prvAddNewTaskToReadyList+0xf0>)
 8016122:	f7ff fa49 	bl	80155b8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8016126:	480f      	ldr	r0, [pc, #60]	; (8016164 <prvAddNewTaskToReadyList+0xf4>)
 8016128:	f7ff fa46 	bl	80155b8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 801612c:	4b0e      	ldr	r3, [pc, #56]	; (8016168 <prvAddNewTaskToReadyList+0xf8>)
 801612e:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016130:	4b0e      	ldr	r3, [pc, #56]	; (801616c <prvAddNewTaskToReadyList+0xfc>)
 8016132:	601d      	str	r5, [r3, #0]
}
 8016134:	e7b3      	b.n	801609e <prvAddNewTaskToReadyList+0x2e>
 8016136:	bf00      	nop
 8016138:	200011a0 	.word	0x200011a0
 801613c:	20000d34 	.word	0x20000d34
 8016140:	200011fc 	.word	0x200011fc
 8016144:	200011ac 	.word	0x200011ac
 8016148:	200011b0 	.word	0x200011b0
 801614c:	20000d40 	.word	0x20000d40
 8016150:	e000ed04 	.word	0xe000ed04
 8016154:	200011b4 	.word	0x200011b4
 8016158:	200011c8 	.word	0x200011c8
 801615c:	200011e8 	.word	0x200011e8
 8016160:	20001214 	.word	0x20001214
 8016164:	20001200 	.word	0x20001200
 8016168:	20000d38 	.word	0x20000d38
 801616c:	20000d3c 	.word	0x20000d3c

08016170 <prvDeleteTCB>:
	{
 8016170:	b510      	push	{r4, lr}
 8016172:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016174:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8016178:	b163      	cbz	r3, 8016194 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801617a:	2b01      	cmp	r3, #1
 801617c:	d011      	beq.n	80161a2 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801617e:	2b02      	cmp	r3, #2
 8016180:	d00e      	beq.n	80161a0 <prvDeleteTCB+0x30>
 8016182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016186:	f383 8811 	msr	BASEPRI, r3
 801618a:	f3bf 8f6f 	isb	sy
 801618e:	f3bf 8f4f 	dsb	sy
 8016192:	e7fe      	b.n	8016192 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8016194:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8016196:	f001 fac7 	bl	8017728 <vPortFree>
				vPortFree( pxTCB );
 801619a:	4620      	mov	r0, r4
 801619c:	f001 fac4 	bl	8017728 <vPortFree>
	}
 80161a0:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80161a2:	f001 fac1 	bl	8017728 <vPortFree>
 80161a6:	e7fb      	b.n	80161a0 <prvDeleteTCB+0x30>

080161a8 <prvIdleTask>:
{
 80161a8:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80161aa:	4c14      	ldr	r4, [pc, #80]	; (80161fc <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80161ac:	4f14      	ldr	r7, [pc, #80]	; (8016200 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 80161ae:	4e15      	ldr	r6, [pc, #84]	; (8016204 <prvIdleTask+0x5c>)
				taskYIELD();
 80161b0:	f8df 8058 	ldr.w	r8, [pc, #88]	; 801620c <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80161b4:	6823      	ldr	r3, [r4, #0]
 80161b6:	b1a3      	cbz	r3, 80161e2 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80161b8:	f001 f894 	bl	80172e4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80161c0:	1d28      	adds	r0, r5, #4
 80161c2:	f7ff fa2b 	bl	801561c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80161c6:	6833      	ldr	r3, [r6, #0]
 80161c8:	3b01      	subs	r3, #1
 80161ca:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80161cc:	6823      	ldr	r3, [r4, #0]
 80161ce:	3b01      	subs	r3, #1
 80161d0:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80161d2:	f001 f8a9 	bl	8017328 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80161d6:	4628      	mov	r0, r5
 80161d8:	f7ff ffca 	bl	8016170 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80161dc:	6823      	ldr	r3, [r4, #0]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d1ea      	bne.n	80161b8 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80161e2:	4b09      	ldr	r3, [pc, #36]	; (8016208 <prvIdleTask+0x60>)
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	2b01      	cmp	r3, #1
 80161e8:	d9e4      	bls.n	80161b4 <prvIdleTask+0xc>
				taskYIELD();
 80161ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80161ee:	f8c8 3000 	str.w	r3, [r8]
 80161f2:	f3bf 8f4f 	dsb	sy
 80161f6:	f3bf 8f6f 	isb	sy
 80161fa:	e7db      	b.n	80161b4 <prvIdleTask+0xc>
 80161fc:	200011a4 	.word	0x200011a4
 8016200:	20001214 	.word	0x20001214
 8016204:	200011a0 	.word	0x200011a0
 8016208:	20000d40 	.word	0x20000d40
 801620c:	e000ed04 	.word	0xe000ed04

08016210 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016210:	b570      	push	{r4, r5, r6, lr}
 8016212:	4604      	mov	r4, r0
 8016214:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016216:	4b17      	ldr	r3, [pc, #92]	; (8016274 <prvAddCurrentTaskToDelayedList+0x64>)
 8016218:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801621a:	4b17      	ldr	r3, [pc, #92]	; (8016278 <prvAddCurrentTaskToDelayedList+0x68>)
 801621c:	6818      	ldr	r0, [r3, #0]
 801621e:	3004      	adds	r0, #4
 8016220:	f7ff f9fc 	bl	801561c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016224:	f1b4 3fff 	cmp.w	r4, #4294967295
 8016228:	d00d      	beq.n	8016246 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 801622a:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801622c:	4b12      	ldr	r3, [pc, #72]	; (8016278 <prvAddCurrentTaskToDelayedList+0x68>)
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8016232:	42a6      	cmp	r6, r4
 8016234:	d910      	bls.n	8016258 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016236:	4b11      	ldr	r3, [pc, #68]	; (801627c <prvAddCurrentTaskToDelayedList+0x6c>)
 8016238:	6818      	ldr	r0, [r3, #0]
 801623a:	4b0f      	ldr	r3, [pc, #60]	; (8016278 <prvAddCurrentTaskToDelayedList+0x68>)
 801623c:	6819      	ldr	r1, [r3, #0]
 801623e:	3104      	adds	r1, #4
 8016240:	f7ff f9d3 	bl	80155ea <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016244:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016246:	2d00      	cmp	r5, #0
 8016248:	d0ef      	beq.n	801622a <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801624a:	4b0b      	ldr	r3, [pc, #44]	; (8016278 <prvAddCurrentTaskToDelayedList+0x68>)
 801624c:	6819      	ldr	r1, [r3, #0]
 801624e:	3104      	adds	r1, #4
 8016250:	480b      	ldr	r0, [pc, #44]	; (8016280 <prvAddCurrentTaskToDelayedList+0x70>)
 8016252:	f7ff f9bf 	bl	80155d4 <vListInsertEnd>
 8016256:	e7f5      	b.n	8016244 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016258:	4b0a      	ldr	r3, [pc, #40]	; (8016284 <prvAddCurrentTaskToDelayedList+0x74>)
 801625a:	6818      	ldr	r0, [r3, #0]
 801625c:	4b06      	ldr	r3, [pc, #24]	; (8016278 <prvAddCurrentTaskToDelayedList+0x68>)
 801625e:	6819      	ldr	r1, [r3, #0]
 8016260:	3104      	adds	r1, #4
 8016262:	f7ff f9c2 	bl	80155ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016266:	4b08      	ldr	r3, [pc, #32]	; (8016288 <prvAddCurrentTaskToDelayedList+0x78>)
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 801626c:	bf84      	itt	hi
 801626e:	4b06      	ldrhi	r3, [pc, #24]	; (8016288 <prvAddCurrentTaskToDelayedList+0x78>)
 8016270:	601c      	strhi	r4, [r3, #0]
}
 8016272:	e7e7      	b.n	8016244 <prvAddCurrentTaskToDelayedList+0x34>
 8016274:	20001228 	.word	0x20001228
 8016278:	20000d34 	.word	0x20000d34
 801627c:	20000d3c 	.word	0x20000d3c
 8016280:	20001200 	.word	0x20001200
 8016284:	20000d38 	.word	0x20000d38
 8016288:	200011dc 	.word	0x200011dc

0801628c <xTaskCreateStatic>:
	{
 801628c:	b570      	push	{r4, r5, r6, lr}
 801628e:	b086      	sub	sp, #24
 8016290:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016292:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8016294:	b175      	cbz	r5, 80162b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016296:	b1b4      	cbz	r4, 80162c6 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8016298:	265c      	movs	r6, #92	; 0x5c
 801629a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801629c:	9e04      	ldr	r6, [sp, #16]
 801629e:	2e5c      	cmp	r6, #92	; 0x5c
 80162a0:	d01a      	beq.n	80162d8 <xTaskCreateStatic+0x4c>
 80162a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162a6:	f383 8811 	msr	BASEPRI, r3
 80162aa:	f3bf 8f6f 	isb	sy
 80162ae:	f3bf 8f4f 	dsb	sy
 80162b2:	e7fe      	b.n	80162b2 <xTaskCreateStatic+0x26>
 80162b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162b8:	f383 8811 	msr	BASEPRI, r3
 80162bc:	f3bf 8f6f 	isb	sy
 80162c0:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80162c4:	e7fe      	b.n	80162c4 <xTaskCreateStatic+0x38>
 80162c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162ca:	f383 8811 	msr	BASEPRI, r3
 80162ce:	f3bf 8f6f 	isb	sy
 80162d2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80162d6:	e7fe      	b.n	80162d6 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80162d8:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80162da:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80162dc:	2502      	movs	r5, #2
 80162de:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80162e2:	2500      	movs	r5, #0
 80162e4:	9503      	str	r5, [sp, #12]
 80162e6:	9402      	str	r4, [sp, #8]
 80162e8:	ad05      	add	r5, sp, #20
 80162ea:	9501      	str	r5, [sp, #4]
 80162ec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80162ee:	9500      	str	r5, [sp, #0]
 80162f0:	f7ff fe6c 	bl	8015fcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80162f4:	4620      	mov	r0, r4
 80162f6:	f7ff febb 	bl	8016070 <prvAddNewTaskToReadyList>
	}
 80162fa:	9805      	ldr	r0, [sp, #20]
 80162fc:	b006      	add	sp, #24
 80162fe:	bd70      	pop	{r4, r5, r6, pc}

08016300 <xTaskCreate>:
	{
 8016300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016304:	b085      	sub	sp, #20
 8016306:	4607      	mov	r7, r0
 8016308:	4688      	mov	r8, r1
 801630a:	4614      	mov	r4, r2
 801630c:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801630e:	0090      	lsls	r0, r2, #2
 8016310:	f001 f96e 	bl	80175f0 <pvPortMalloc>
			if( pxStack != NULL )
 8016314:	b308      	cbz	r0, 801635a <xTaskCreate+0x5a>
 8016316:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016318:	205c      	movs	r0, #92	; 0x5c
 801631a:	f001 f969 	bl	80175f0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801631e:	4605      	mov	r5, r0
 8016320:	b1a8      	cbz	r0, 801634e <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8016322:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016326:	2300      	movs	r3, #0
 8016328:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801632c:	9303      	str	r3, [sp, #12]
 801632e:	9002      	str	r0, [sp, #8]
 8016330:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016332:	9301      	str	r3, [sp, #4]
 8016334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016336:	9300      	str	r3, [sp, #0]
 8016338:	4633      	mov	r3, r6
 801633a:	4622      	mov	r2, r4
 801633c:	4641      	mov	r1, r8
 801633e:	4638      	mov	r0, r7
 8016340:	f7ff fe44 	bl	8015fcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016344:	4628      	mov	r0, r5
 8016346:	f7ff fe93 	bl	8016070 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801634a:	2001      	movs	r0, #1
 801634c:	e007      	b.n	801635e <xTaskCreate+0x5e>
					vPortFree( pxStack );
 801634e:	4648      	mov	r0, r9
 8016350:	f001 f9ea 	bl	8017728 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016354:	f04f 30ff 	mov.w	r0, #4294967295
 8016358:	e001      	b.n	801635e <xTaskCreate+0x5e>
 801635a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 801635e:	b005      	add	sp, #20
 8016360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016364 <vTaskDelete>:
	{
 8016364:	b538      	push	{r3, r4, r5, lr}
 8016366:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8016368:	f000 ffbc 	bl	80172e4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801636c:	b324      	cbz	r4, 80163b8 <vTaskDelete+0x54>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801636e:	1d25      	adds	r5, r4, #4
 8016370:	4628      	mov	r0, r5
 8016372:	f7ff f953 	bl	801561c <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016376:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016378:	b11b      	cbz	r3, 8016382 <vTaskDelete+0x1e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801637a:	f104 0018 	add.w	r0, r4, #24
 801637e:	f7ff f94d 	bl	801561c <uxListRemove>
			uxTaskNumber++;
 8016382:	4a1e      	ldr	r2, [pc, #120]	; (80163fc <vTaskDelete+0x98>)
 8016384:	6813      	ldr	r3, [r2, #0]
 8016386:	3301      	adds	r3, #1
 8016388:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 801638a:	4b1d      	ldr	r3, [pc, #116]	; (8016400 <vTaskDelete+0x9c>)
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	42a3      	cmp	r3, r4
 8016390:	d015      	beq.n	80163be <vTaskDelete+0x5a>
				--uxCurrentNumberOfTasks;
 8016392:	4a1c      	ldr	r2, [pc, #112]	; (8016404 <vTaskDelete+0xa0>)
 8016394:	6813      	ldr	r3, [r2, #0]
 8016396:	3b01      	subs	r3, #1
 8016398:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 801639a:	4620      	mov	r0, r4
 801639c:	f7ff fee8 	bl	8016170 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 80163a0:	f7ff fdfe 	bl	8015fa0 <prvResetNextTaskUnblockTime>
		taskEXIT_CRITICAL();
 80163a4:	f000 ffc0 	bl	8017328 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 80163a8:	4b17      	ldr	r3, [pc, #92]	; (8016408 <vTaskDelete+0xa4>)
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	b11b      	cbz	r3, 80163b6 <vTaskDelete+0x52>
			if( pxTCB == pxCurrentTCB )
 80163ae:	4b14      	ldr	r3, [pc, #80]	; (8016400 <vTaskDelete+0x9c>)
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	42a3      	cmp	r3, r4
 80163b4:	d00c      	beq.n	80163d0 <vTaskDelete+0x6c>
	}
 80163b6:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80163b8:	4b11      	ldr	r3, [pc, #68]	; (8016400 <vTaskDelete+0x9c>)
 80163ba:	681c      	ldr	r4, [r3, #0]
 80163bc:	e7d7      	b.n	801636e <vTaskDelete+0xa>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80163be:	4629      	mov	r1, r5
 80163c0:	4812      	ldr	r0, [pc, #72]	; (801640c <vTaskDelete+0xa8>)
 80163c2:	f7ff f907 	bl	80155d4 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 80163c6:	4a12      	ldr	r2, [pc, #72]	; (8016410 <vTaskDelete+0xac>)
 80163c8:	6813      	ldr	r3, [r2, #0]
 80163ca:	3301      	adds	r3, #1
 80163cc:	6013      	str	r3, [r2, #0]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 80163ce:	e7e9      	b.n	80163a4 <vTaskDelete+0x40>
				configASSERT( uxSchedulerSuspended == 0 );
 80163d0:	4b10      	ldr	r3, [pc, #64]	; (8016414 <vTaskDelete+0xb0>)
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	b143      	cbz	r3, 80163e8 <vTaskDelete+0x84>
 80163d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163da:	f383 8811 	msr	BASEPRI, r3
 80163de:	f3bf 8f6f 	isb	sy
 80163e2:	f3bf 8f4f 	dsb	sy
 80163e6:	e7fe      	b.n	80163e6 <vTaskDelete+0x82>
				portYIELD_WITHIN_API();
 80163e8:	4b0b      	ldr	r3, [pc, #44]	; (8016418 <vTaskDelete+0xb4>)
 80163ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80163ee:	601a      	str	r2, [r3, #0]
 80163f0:	f3bf 8f4f 	dsb	sy
 80163f4:	f3bf 8f6f 	isb	sy
	}
 80163f8:	e7dd      	b.n	80163b6 <vTaskDelete+0x52>
 80163fa:	bf00      	nop
 80163fc:	200011ac 	.word	0x200011ac
 8016400:	20000d34 	.word	0x20000d34
 8016404:	200011a0 	.word	0x200011a0
 8016408:	200011fc 	.word	0x200011fc
 801640c:	20001214 	.word	0x20001214
 8016410:	200011a4 	.word	0x200011a4
 8016414:	200011a8 	.word	0x200011a8
 8016418:	e000ed04 	.word	0xe000ed04

0801641c <eTaskGetState>:
	{
 801641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxTCB );
 801641e:	b1e0      	cbz	r0, 801645a <eTaskGetState+0x3e>
 8016420:	4605      	mov	r5, r0
		if( pxTCB == pxCurrentTCB )
 8016422:	4b1c      	ldr	r3, [pc, #112]	; (8016494 <eTaskGetState+0x78>)
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	4283      	cmp	r3, r0
 8016428:	d02c      	beq.n	8016484 <eTaskGetState+0x68>
			taskENTER_CRITICAL();
 801642a:	f000 ff5b 	bl	80172e4 <vPortEnterCritical>
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801642e:	696c      	ldr	r4, [r5, #20]
				pxDelayedList = pxDelayedTaskList;
 8016430:	4b19      	ldr	r3, [pc, #100]	; (8016498 <eTaskGetState+0x7c>)
 8016432:	681f      	ldr	r7, [r3, #0]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8016434:	4b19      	ldr	r3, [pc, #100]	; (801649c <eTaskGetState+0x80>)
 8016436:	681e      	ldr	r6, [r3, #0]
			taskEXIT_CRITICAL();
 8016438:	f000 ff76 	bl	8017328 <vPortExitCritical>
			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801643c:	42bc      	cmp	r4, r7
 801643e:	d023      	beq.n	8016488 <eTaskGetState+0x6c>
 8016440:	42b4      	cmp	r4, r6
 8016442:	d023      	beq.n	801648c <eTaskGetState+0x70>
				else if( pxStateList == &xSuspendedTaskList )
 8016444:	4b16      	ldr	r3, [pc, #88]	; (80164a0 <eTaskGetState+0x84>)
 8016446:	429c      	cmp	r4, r3
 8016448:	d010      	beq.n	801646c <eTaskGetState+0x50>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801644a:	4b16      	ldr	r3, [pc, #88]	; (80164a4 <eTaskGetState+0x88>)
 801644c:	429c      	cmp	r4, r3
 801644e:	d01f      	beq.n	8016490 <eTaskGetState+0x74>
				eReturn = eReady;
 8016450:	2c00      	cmp	r4, #0
 8016452:	bf0c      	ite	eq
 8016454:	2004      	moveq	r0, #4
 8016456:	2001      	movne	r0, #1
 8016458:	e015      	b.n	8016486 <eTaskGetState+0x6a>
 801645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801645e:	f383 8811 	msr	BASEPRI, r3
 8016462:	f3bf 8f6f 	isb	sy
 8016466:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTCB );
 801646a:	e7fe      	b.n	801646a <eTaskGetState+0x4e>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801646c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801646e:	b10b      	cbz	r3, 8016474 <eTaskGetState+0x58>
						eReturn = eBlocked;
 8016470:	2002      	movs	r0, #2
 8016472:	e008      	b.n	8016486 <eTaskGetState+0x6a>
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8016474:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 8016478:	b2db      	uxtb	r3, r3
								eReturn = eSuspended;
 801647a:	2b01      	cmp	r3, #1
 801647c:	bf0c      	ite	eq
 801647e:	2002      	moveq	r0, #2
 8016480:	2003      	movne	r0, #3
 8016482:	e000      	b.n	8016486 <eTaskGetState+0x6a>
			eReturn = eRunning;
 8016484:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8016486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				eReturn = eBlocked;
 8016488:	2002      	movs	r0, #2
 801648a:	e7fc      	b.n	8016486 <eTaskGetState+0x6a>
 801648c:	2002      	movs	r0, #2
 801648e:	e7fa      	b.n	8016486 <eTaskGetState+0x6a>
					eReturn = eDeleted;
 8016490:	2004      	movs	r0, #4
 8016492:	e7f8      	b.n	8016486 <eTaskGetState+0x6a>
 8016494:	20000d34 	.word	0x20000d34
 8016498:	20000d38 	.word	0x20000d38
 801649c:	20000d3c 	.word	0x20000d3c
 80164a0:	20001200 	.word	0x20001200
 80164a4:	20001214 	.word	0x20001214

080164a8 <vTaskStartScheduler>:
{
 80164a8:	b510      	push	{r4, lr}
 80164aa:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80164ac:	2400      	movs	r4, #0
 80164ae:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80164b0:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80164b2:	aa07      	add	r2, sp, #28
 80164b4:	a906      	add	r1, sp, #24
 80164b6:	a805      	add	r0, sp, #20
 80164b8:	f7fe ff0a 	bl	80152d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80164bc:	9b05      	ldr	r3, [sp, #20]
 80164be:	9302      	str	r3, [sp, #8]
 80164c0:	9b06      	ldr	r3, [sp, #24]
 80164c2:	9301      	str	r3, [sp, #4]
 80164c4:	9400      	str	r4, [sp, #0]
 80164c6:	4623      	mov	r3, r4
 80164c8:	9a07      	ldr	r2, [sp, #28]
 80164ca:	4915      	ldr	r1, [pc, #84]	; (8016520 <vTaskStartScheduler+0x78>)
 80164cc:	4815      	ldr	r0, [pc, #84]	; (8016524 <vTaskStartScheduler+0x7c>)
 80164ce:	f7ff fedd 	bl	801628c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80164d2:	b310      	cbz	r0, 801651a <vTaskStartScheduler+0x72>
			xReturn = xTimerCreateTimerTask();
 80164d4:	f000 fcd4 	bl	8016e80 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80164d8:	2801      	cmp	r0, #1
 80164da:	d00b      	beq.n	80164f4 <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80164dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80164e0:	d11b      	bne.n	801651a <vTaskStartScheduler+0x72>
 80164e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164e6:	f383 8811 	msr	BASEPRI, r3
 80164ea:	f3bf 8f6f 	isb	sy
 80164ee:	f3bf 8f4f 	dsb	sy
 80164f2:	e7fe      	b.n	80164f2 <vTaskStartScheduler+0x4a>
 80164f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164f8:	f383 8811 	msr	BASEPRI, r3
 80164fc:	f3bf 8f6f 	isb	sy
 8016500:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8016504:	4b08      	ldr	r3, [pc, #32]	; (8016528 <vTaskStartScheduler+0x80>)
 8016506:	f04f 32ff 	mov.w	r2, #4294967295
 801650a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801650c:	4b07      	ldr	r3, [pc, #28]	; (801652c <vTaskStartScheduler+0x84>)
 801650e:	2201      	movs	r2, #1
 8016510:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016512:	4b07      	ldr	r3, [pc, #28]	; (8016530 <vTaskStartScheduler+0x88>)
 8016514:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8016516:	f000 ff87 	bl	8017428 <xPortStartScheduler>
}
 801651a:	b008      	add	sp, #32
 801651c:	bd10      	pop	{r4, pc}
 801651e:	bf00      	nop
 8016520:	08019ac8 	.word	0x08019ac8
 8016524:	080161a9 	.word	0x080161a9
 8016528:	200011dc 	.word	0x200011dc
 801652c:	200011fc 	.word	0x200011fc
 8016530:	20001228 	.word	0x20001228

08016534 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8016534:	4a02      	ldr	r2, [pc, #8]	; (8016540 <vTaskSuspendAll+0xc>)
 8016536:	6813      	ldr	r3, [r2, #0]
 8016538:	3301      	adds	r3, #1
 801653a:	6013      	str	r3, [r2, #0]
}
 801653c:	4770      	bx	lr
 801653e:	bf00      	nop
 8016540:	200011a8 	.word	0x200011a8

08016544 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8016544:	4b01      	ldr	r3, [pc, #4]	; (801654c <xTaskGetTickCount+0x8>)
 8016546:	6818      	ldr	r0, [r3, #0]
}
 8016548:	4770      	bx	lr
 801654a:	bf00      	nop
 801654c:	20001228 	.word	0x20001228

08016550 <xTaskGetTickCountFromISR>:
{
 8016550:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016552:	f000 fff3 	bl	801753c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8016556:	4b01      	ldr	r3, [pc, #4]	; (801655c <xTaskGetTickCountFromISR+0xc>)
 8016558:	6818      	ldr	r0, [r3, #0]
}
 801655a:	bd08      	pop	{r3, pc}
 801655c:	20001228 	.word	0x20001228

08016560 <xTaskIncrementTick>:
{
 8016560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016564:	4b3f      	ldr	r3, [pc, #252]	; (8016664 <xTaskIncrementTick+0x104>)
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d173      	bne.n	8016654 <xTaskIncrementTick+0xf4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801656c:	4b3e      	ldr	r3, [pc, #248]	; (8016668 <xTaskIncrementTick+0x108>)
 801656e:	681d      	ldr	r5, [r3, #0]
 8016570:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8016572:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016574:	b9c5      	cbnz	r5, 80165a8 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8016576:	4b3d      	ldr	r3, [pc, #244]	; (801666c <xTaskIncrementTick+0x10c>)
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	b143      	cbz	r3, 8016590 <xTaskIncrementTick+0x30>
 801657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016582:	f383 8811 	msr	BASEPRI, r3
 8016586:	f3bf 8f6f 	isb	sy
 801658a:	f3bf 8f4f 	dsb	sy
 801658e:	e7fe      	b.n	801658e <xTaskIncrementTick+0x2e>
 8016590:	4a36      	ldr	r2, [pc, #216]	; (801666c <xTaskIncrementTick+0x10c>)
 8016592:	6811      	ldr	r1, [r2, #0]
 8016594:	4b36      	ldr	r3, [pc, #216]	; (8016670 <xTaskIncrementTick+0x110>)
 8016596:	6818      	ldr	r0, [r3, #0]
 8016598:	6010      	str	r0, [r2, #0]
 801659a:	6019      	str	r1, [r3, #0]
 801659c:	4a35      	ldr	r2, [pc, #212]	; (8016674 <xTaskIncrementTick+0x114>)
 801659e:	6813      	ldr	r3, [r2, #0]
 80165a0:	3301      	adds	r3, #1
 80165a2:	6013      	str	r3, [r2, #0]
 80165a4:	f7ff fcfc 	bl	8015fa0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80165a8:	4b33      	ldr	r3, [pc, #204]	; (8016678 <xTaskIncrementTick+0x118>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	42ab      	cmp	r3, r5
 80165ae:	d83f      	bhi.n	8016630 <xTaskIncrementTick+0xd0>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80165b0:	4b2e      	ldr	r3, [pc, #184]	; (801666c <xTaskIncrementTick+0x10c>)
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	b133      	cbz	r3, 80165c6 <xTaskIncrementTick+0x66>
BaseType_t xSwitchRequired = pdFALSE;
 80165b8:	2400      	movs	r4, #0
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80165ba:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801666c <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 80165be:	4f2f      	ldr	r7, [pc, #188]	; (801667c <xTaskIncrementTick+0x11c>)
 80165c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8016684 <xTaskIncrementTick+0x124>
 80165c4:	e020      	b.n	8016608 <xTaskIncrementTick+0xa8>
BaseType_t xSwitchRequired = pdFALSE;
 80165c6:	2400      	movs	r4, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80165c8:	4b2b      	ldr	r3, [pc, #172]	; (8016678 <xTaskIncrementTick+0x118>)
 80165ca:	f04f 32ff 	mov.w	r2, #4294967295
 80165ce:	601a      	str	r2, [r3, #0]
					break;
 80165d0:	e02f      	b.n	8016632 <xTaskIncrementTick+0xd2>
						xNextTaskUnblockTime = xItemValue;
 80165d2:	4a29      	ldr	r2, [pc, #164]	; (8016678 <xTaskIncrementTick+0x118>)
 80165d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80165d6:	e02c      	b.n	8016632 <xTaskIncrementTick+0xd2>
					prvAddTaskToReadyList( pxTCB );
 80165d8:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80165da:	683b      	ldr	r3, [r7, #0]
 80165dc:	4298      	cmp	r0, r3
 80165de:	bf88      	it	hi
 80165e0:	6038      	strhi	r0, [r7, #0]
 80165e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80165e6:	4649      	mov	r1, r9
 80165e8:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 80165ec:	f7fe fff2 	bl	80155d4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80165f0:	4b23      	ldr	r3, [pc, #140]	; (8016680 <xTaskIncrementTick+0x120>)
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80165f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80165f8:	429a      	cmp	r2, r3
 80165fa:	bf28      	it	cs
 80165fc:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80165fe:	f8d8 3000 	ldr.w	r3, [r8]
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d0df      	beq.n	80165c8 <xTaskIncrementTick+0x68>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016608:	f8d8 3000 	ldr.w	r3, [r8]
 801660c:	68db      	ldr	r3, [r3, #12]
 801660e:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016610:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8016612:	429d      	cmp	r5, r3
 8016614:	d3dd      	bcc.n	80165d2 <xTaskIncrementTick+0x72>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016616:	f106 0904 	add.w	r9, r6, #4
 801661a:	4648      	mov	r0, r9
 801661c:	f7fe fffe 	bl	801561c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016620:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8016622:	2b00      	cmp	r3, #0
 8016624:	d0d8      	beq.n	80165d8 <xTaskIncrementTick+0x78>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016626:	f106 0018 	add.w	r0, r6, #24
 801662a:	f7fe fff7 	bl	801561c <uxListRemove>
 801662e:	e7d3      	b.n	80165d8 <xTaskIncrementTick+0x78>
BaseType_t xSwitchRequired = pdFALSE;
 8016630:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016632:	4b13      	ldr	r3, [pc, #76]	; (8016680 <xTaskIncrementTick+0x120>)
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016638:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801663c:	009b      	lsls	r3, r3, #2
 801663e:	4a11      	ldr	r2, [pc, #68]	; (8016684 <xTaskIncrementTick+0x124>)
 8016640:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 8016642:	2b02      	cmp	r3, #2
 8016644:	bf28      	it	cs
 8016646:	2401      	movcs	r4, #1
			if( xYieldPending != pdFALSE )
 8016648:	4b0f      	ldr	r3, [pc, #60]	; (8016688 <xTaskIncrementTick+0x128>)
 801664a:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 801664c:	2b00      	cmp	r3, #0
 801664e:	bf18      	it	ne
 8016650:	2401      	movne	r4, #1
 8016652:	e004      	b.n	801665e <xTaskIncrementTick+0xfe>
		++xPendedTicks;
 8016654:	4a0d      	ldr	r2, [pc, #52]	; (801668c <xTaskIncrementTick+0x12c>)
 8016656:	6813      	ldr	r3, [r2, #0]
 8016658:	3301      	adds	r3, #1
 801665a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 801665c:	2400      	movs	r4, #0
}
 801665e:	4620      	mov	r0, r4
 8016660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016664:	200011a8 	.word	0x200011a8
 8016668:	20001228 	.word	0x20001228
 801666c:	20000d38 	.word	0x20000d38
 8016670:	20000d3c 	.word	0x20000d3c
 8016674:	200011e0 	.word	0x200011e0
 8016678:	200011dc 	.word	0x200011dc
 801667c:	200011b0 	.word	0x200011b0
 8016680:	20000d34 	.word	0x20000d34
 8016684:	20000d40 	.word	0x20000d40
 8016688:	2000122c 	.word	0x2000122c
 801668c:	200011e4 	.word	0x200011e4

08016690 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8016690:	4b37      	ldr	r3, [pc, #220]	; (8016770 <xTaskResumeAll+0xe0>)
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	b943      	cbnz	r3, 80166a8 <xTaskResumeAll+0x18>
 8016696:	f04f 0350 	mov.w	r3, #80	; 0x50
 801669a:	f383 8811 	msr	BASEPRI, r3
 801669e:	f3bf 8f6f 	isb	sy
 80166a2:	f3bf 8f4f 	dsb	sy
 80166a6:	e7fe      	b.n	80166a6 <xTaskResumeAll+0x16>
{
 80166a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 80166ac:	f000 fe1a 	bl	80172e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80166b0:	4b2f      	ldr	r3, [pc, #188]	; (8016770 <xTaskResumeAll+0xe0>)
 80166b2:	681a      	ldr	r2, [r3, #0]
 80166b4:	3a01      	subs	r2, #1
 80166b6:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d147      	bne.n	801674e <xTaskResumeAll+0xbe>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80166be:	4b2d      	ldr	r3, [pc, #180]	; (8016774 <xTaskResumeAll+0xe4>)
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d049      	beq.n	801675a <xTaskResumeAll+0xca>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80166c6:	4b2c      	ldr	r3, [pc, #176]	; (8016778 <xTaskResumeAll+0xe8>)
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d049      	beq.n	8016762 <xTaskResumeAll+0xd2>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80166ce:	4e2a      	ldr	r6, [pc, #168]	; (8016778 <xTaskResumeAll+0xe8>)
					prvAddTaskToReadyList( pxTCB );
 80166d0:	4d2a      	ldr	r5, [pc, #168]	; (801677c <xTaskResumeAll+0xec>)
 80166d2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8016790 <xTaskResumeAll+0x100>
 80166d6:	e002      	b.n	80166de <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80166d8:	6833      	ldr	r3, [r6, #0]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d03f      	beq.n	801675e <xTaskResumeAll+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80166de:	68f3      	ldr	r3, [r6, #12]
 80166e0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80166e2:	f104 0018 	add.w	r0, r4, #24
 80166e6:	f7fe ff99 	bl	801561c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80166ea:	1d27      	adds	r7, r4, #4
 80166ec:	4638      	mov	r0, r7
 80166ee:	f7fe ff95 	bl	801561c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80166f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80166f4:	682b      	ldr	r3, [r5, #0]
 80166f6:	4298      	cmp	r0, r3
 80166f8:	bf88      	it	hi
 80166fa:	6028      	strhi	r0, [r5, #0]
 80166fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016700:	4639      	mov	r1, r7
 8016702:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8016706:	f7fe ff65 	bl	80155d4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801670a:	4b1d      	ldr	r3, [pc, #116]	; (8016780 <xTaskResumeAll+0xf0>)
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016712:	429a      	cmp	r2, r3
 8016714:	d3e0      	bcc.n	80166d8 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8016716:	4b1b      	ldr	r3, [pc, #108]	; (8016784 <xTaskResumeAll+0xf4>)
 8016718:	2201      	movs	r2, #1
 801671a:	601a      	str	r2, [r3, #0]
 801671c:	e7dc      	b.n	80166d8 <xTaskResumeAll+0x48>
						} while( xPendedCounts > ( TickType_t ) 0U );
 801671e:	3c01      	subs	r4, #1
 8016720:	d005      	beq.n	801672e <xTaskResumeAll+0x9e>
							if( xTaskIncrementTick() != pdFALSE )
 8016722:	f7ff ff1d 	bl	8016560 <xTaskIncrementTick>
 8016726:	2800      	cmp	r0, #0
 8016728:	d0f9      	beq.n	801671e <xTaskResumeAll+0x8e>
								xYieldPending = pdTRUE;
 801672a:	6035      	str	r5, [r6, #0]
 801672c:	e7f7      	b.n	801671e <xTaskResumeAll+0x8e>
						xPendedTicks = 0;
 801672e:	4b16      	ldr	r3, [pc, #88]	; (8016788 <xTaskResumeAll+0xf8>)
 8016730:	2200      	movs	r2, #0
 8016732:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8016734:	4b13      	ldr	r3, [pc, #76]	; (8016784 <xTaskResumeAll+0xf4>)
 8016736:	681c      	ldr	r4, [r3, #0]
 8016738:	b154      	cbz	r4, 8016750 <xTaskResumeAll+0xc0>
					taskYIELD_IF_USING_PREEMPTION();
 801673a:	4b14      	ldr	r3, [pc, #80]	; (801678c <xTaskResumeAll+0xfc>)
 801673c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016740:	601a      	str	r2, [r3, #0]
 8016742:	f3bf 8f4f 	dsb	sy
 8016746:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 801674a:	2401      	movs	r4, #1
 801674c:	e000      	b.n	8016750 <xTaskResumeAll+0xc0>
BaseType_t xAlreadyYielded = pdFALSE;
 801674e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8016750:	f000 fdea 	bl	8017328 <vPortExitCritical>
}
 8016754:	4620      	mov	r0, r4
 8016756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 801675a:	2400      	movs	r4, #0
 801675c:	e7f8      	b.n	8016750 <xTaskResumeAll+0xc0>
					prvResetNextTaskUnblockTime();
 801675e:	f7ff fc1f 	bl	8015fa0 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8016762:	4b09      	ldr	r3, [pc, #36]	; (8016788 <xTaskResumeAll+0xf8>)
 8016764:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8016766:	2c00      	cmp	r4, #0
 8016768:	d0e4      	beq.n	8016734 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 801676a:	4e06      	ldr	r6, [pc, #24]	; (8016784 <xTaskResumeAll+0xf4>)
 801676c:	2501      	movs	r5, #1
 801676e:	e7d8      	b.n	8016722 <xTaskResumeAll+0x92>
 8016770:	200011a8 	.word	0x200011a8
 8016774:	200011a0 	.word	0x200011a0
 8016778:	200011e8 	.word	0x200011e8
 801677c:	200011b0 	.word	0x200011b0
 8016780:	20000d34 	.word	0x20000d34
 8016784:	2000122c 	.word	0x2000122c
 8016788:	200011e4 	.word	0x200011e4
 801678c:	e000ed04 	.word	0xe000ed04
 8016790:	20000d40 	.word	0x20000d40

08016794 <vTaskDelayUntil>:
	{
 8016794:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 8016796:	b158      	cbz	r0, 80167b0 <vTaskDelayUntil+0x1c>
 8016798:	460c      	mov	r4, r1
 801679a:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 801679c:	b989      	cbnz	r1, 80167c2 <vTaskDelayUntil+0x2e>
 801679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167a2:	f383 8811 	msr	BASEPRI, r3
 80167a6:	f3bf 8f6f 	isb	sy
 80167aa:	f3bf 8f4f 	dsb	sy
 80167ae:	e7fe      	b.n	80167ae <vTaskDelayUntil+0x1a>
 80167b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167b4:	f383 8811 	msr	BASEPRI, r3
 80167b8:	f3bf 8f6f 	isb	sy
 80167bc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
 80167c0:	e7fe      	b.n	80167c0 <vTaskDelayUntil+0x2c>
		configASSERT( uxSchedulerSuspended == 0 );
 80167c2:	4b1a      	ldr	r3, [pc, #104]	; (801682c <vTaskDelayUntil+0x98>)
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	b143      	cbz	r3, 80167da <vTaskDelayUntil+0x46>
 80167c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167cc:	f383 8811 	msr	BASEPRI, r3
 80167d0:	f3bf 8f6f 	isb	sy
 80167d4:	f3bf 8f4f 	dsb	sy
 80167d8:	e7fe      	b.n	80167d8 <vTaskDelayUntil+0x44>
		vTaskSuspendAll();
 80167da:	f7ff feab 	bl	8016534 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 80167de:	4b14      	ldr	r3, [pc, #80]	; (8016830 <vTaskDelayUntil+0x9c>)
 80167e0:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80167e2:	682a      	ldr	r2, [r5, #0]
 80167e4:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
 80167e6:	4282      	cmp	r2, r0
 80167e8:	d909      	bls.n	80167fe <vTaskDelayUntil+0x6a>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80167ea:	42a2      	cmp	r2, r4
 80167ec:	d801      	bhi.n	80167f2 <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
 80167ee:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 80167f0:	e00e      	b.n	8016810 <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80167f2:	42a0      	cmp	r0, r4
 80167f4:	d301      	bcc.n	80167fa <vTaskDelayUntil+0x66>
			*pxPreviousWakeTime = xTimeToWake;
 80167f6:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 80167f8:	e00a      	b.n	8016810 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 80167fa:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 80167fc:	e004      	b.n	8016808 <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80167fe:	42a2      	cmp	r2, r4
 8016800:	d801      	bhi.n	8016806 <vTaskDelayUntil+0x72>
 8016802:	42a0      	cmp	r0, r4
 8016804:	d210      	bcs.n	8016828 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
 8016806:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8016808:	2100      	movs	r1, #0
 801680a:	1a20      	subs	r0, r4, r0
 801680c:	f7ff fd00 	bl	8016210 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 8016810:	f7ff ff3e 	bl	8016690 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8016814:	b938      	cbnz	r0, 8016826 <vTaskDelayUntil+0x92>
			portYIELD_WITHIN_API();
 8016816:	4b07      	ldr	r3, [pc, #28]	; (8016834 <vTaskDelayUntil+0xa0>)
 8016818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801681c:	601a      	str	r2, [r3, #0]
 801681e:	f3bf 8f4f 	dsb	sy
 8016822:	f3bf 8f6f 	isb	sy
	}
 8016826:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
 8016828:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 801682a:	e7f1      	b.n	8016810 <vTaskDelayUntil+0x7c>
 801682c:	200011a8 	.word	0x200011a8
 8016830:	20001228 	.word	0x20001228
 8016834:	e000ed04 	.word	0xe000ed04

08016838 <vTaskDelay>:
	{
 8016838:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 801683a:	b1a8      	cbz	r0, 8016868 <vTaskDelay+0x30>
 801683c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 801683e:	4b0f      	ldr	r3, [pc, #60]	; (801687c <vTaskDelay+0x44>)
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	b143      	cbz	r3, 8016856 <vTaskDelay+0x1e>
 8016844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016848:	f383 8811 	msr	BASEPRI, r3
 801684c:	f3bf 8f6f 	isb	sy
 8016850:	f3bf 8f4f 	dsb	sy
 8016854:	e7fe      	b.n	8016854 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8016856:	f7ff fe6d 	bl	8016534 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801685a:	2100      	movs	r1, #0
 801685c:	4620      	mov	r0, r4
 801685e:	f7ff fcd7 	bl	8016210 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8016862:	f7ff ff15 	bl	8016690 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8016866:	b938      	cbnz	r0, 8016878 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8016868:	4b05      	ldr	r3, [pc, #20]	; (8016880 <vTaskDelay+0x48>)
 801686a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801686e:	601a      	str	r2, [r3, #0]
 8016870:	f3bf 8f4f 	dsb	sy
 8016874:	f3bf 8f6f 	isb	sy
	}
 8016878:	bd10      	pop	{r4, pc}
 801687a:	bf00      	nop
 801687c:	200011a8 	.word	0x200011a8
 8016880:	e000ed04 	.word	0xe000ed04

08016884 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016884:	4b22      	ldr	r3, [pc, #136]	; (8016910 <vTaskSwitchContext+0x8c>)
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	b11b      	cbz	r3, 8016892 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 801688a:	4b22      	ldr	r3, [pc, #136]	; (8016914 <vTaskSwitchContext+0x90>)
 801688c:	2201      	movs	r2, #1
 801688e:	601a      	str	r2, [r3, #0]
 8016890:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8016892:	4b20      	ldr	r3, [pc, #128]	; (8016914 <vTaskSwitchContext+0x90>)
 8016894:	2200      	movs	r2, #0
 8016896:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016898:	4b1f      	ldr	r3, [pc, #124]	; (8016918 <vTaskSwitchContext+0x94>)
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80168a0:	0092      	lsls	r2, r2, #2
 80168a2:	491e      	ldr	r1, [pc, #120]	; (801691c <vTaskSwitchContext+0x98>)
 80168a4:	588a      	ldr	r2, [r1, r2]
 80168a6:	b992      	cbnz	r2, 80168ce <vTaskSwitchContext+0x4a>
 80168a8:	b143      	cbz	r3, 80168bc <vTaskSwitchContext+0x38>
 80168aa:	460a      	mov	r2, r1
 80168ac:	3b01      	subs	r3, #1
 80168ae:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80168b2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80168b6:	b951      	cbnz	r1, 80168ce <vTaskSwitchContext+0x4a>
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d1f7      	bne.n	80168ac <vTaskSwitchContext+0x28>
 80168bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168c0:	f383 8811 	msr	BASEPRI, r3
 80168c4:	f3bf 8f6f 	isb	sy
 80168c8:	f3bf 8f4f 	dsb	sy
 80168cc:	e7fe      	b.n	80168cc <vTaskSwitchContext+0x48>
 80168ce:	4a13      	ldr	r2, [pc, #76]	; (801691c <vTaskSwitchContext+0x98>)
 80168d0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80168d4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80168d8:	6848      	ldr	r0, [r1, #4]
 80168da:	6840      	ldr	r0, [r0, #4]
 80168dc:	6048      	str	r0, [r1, #4]
 80168de:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80168e2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80168e6:	3208      	adds	r2, #8
 80168e8:	4290      	cmp	r0, r2
 80168ea:	d00b      	beq.n	8016904 <vTaskSwitchContext+0x80>
 80168ec:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80168f0:	4a0a      	ldr	r2, [pc, #40]	; (801691c <vTaskSwitchContext+0x98>)
 80168f2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80168f6:	6852      	ldr	r2, [r2, #4]
 80168f8:	68d1      	ldr	r1, [r2, #12]
 80168fa:	4a09      	ldr	r2, [pc, #36]	; (8016920 <vTaskSwitchContext+0x9c>)
 80168fc:	6011      	str	r1, [r2, #0]
 80168fe:	4a06      	ldr	r2, [pc, #24]	; (8016918 <vTaskSwitchContext+0x94>)
 8016900:	6013      	str	r3, [r2, #0]
}
 8016902:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016904:	6840      	ldr	r0, [r0, #4]
 8016906:	4a05      	ldr	r2, [pc, #20]	; (801691c <vTaskSwitchContext+0x98>)
 8016908:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801690c:	6050      	str	r0, [r2, #4]
 801690e:	e7ed      	b.n	80168ec <vTaskSwitchContext+0x68>
 8016910:	200011a8 	.word	0x200011a8
 8016914:	2000122c 	.word	0x2000122c
 8016918:	200011b0 	.word	0x200011b0
 801691c:	20000d40 	.word	0x20000d40
 8016920:	20000d34 	.word	0x20000d34

08016924 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8016924:	b158      	cbz	r0, 801693e <vTaskPlaceOnEventList+0x1a>
{
 8016926:	b510      	push	{r4, lr}
 8016928:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801692a:	4b09      	ldr	r3, [pc, #36]	; (8016950 <vTaskPlaceOnEventList+0x2c>)
 801692c:	6819      	ldr	r1, [r3, #0]
 801692e:	3118      	adds	r1, #24
 8016930:	f7fe fe5b 	bl	80155ea <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016934:	2101      	movs	r1, #1
 8016936:	4620      	mov	r0, r4
 8016938:	f7ff fc6a 	bl	8016210 <prvAddCurrentTaskToDelayedList>
}
 801693c:	bd10      	pop	{r4, pc}
 801693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016942:	f383 8811 	msr	BASEPRI, r3
 8016946:	f3bf 8f6f 	isb	sy
 801694a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 801694e:	e7fe      	b.n	801694e <vTaskPlaceOnEventList+0x2a>
 8016950:	20000d34 	.word	0x20000d34

08016954 <vTaskPlaceOnUnorderedEventList>:
{
 8016954:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
 8016956:	b168      	cbz	r0, 8016974 <vTaskPlaceOnUnorderedEventList+0x20>
 8016958:	460b      	mov	r3, r1
 801695a:	4614      	mov	r4, r2
	configASSERT( uxSchedulerSuspended != 0 );
 801695c:	4a11      	ldr	r2, [pc, #68]	; (80169a4 <vTaskPlaceOnUnorderedEventList+0x50>)
 801695e:	6812      	ldr	r2, [r2, #0]
 8016960:	b98a      	cbnz	r2, 8016986 <vTaskPlaceOnUnorderedEventList+0x32>
 8016962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016966:	f383 8811 	msr	BASEPRI, r3
 801696a:	f3bf 8f6f 	isb	sy
 801696e:	f3bf 8f4f 	dsb	sy
 8016972:	e7fe      	b.n	8016972 <vTaskPlaceOnUnorderedEventList+0x1e>
 8016974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016978:	f383 8811 	msr	BASEPRI, r3
 801697c:	f3bf 8f6f 	isb	sy
 8016980:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8016984:	e7fe      	b.n	8016984 <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8016986:	4a08      	ldr	r2, [pc, #32]	; (80169a8 <vTaskPlaceOnUnorderedEventList+0x54>)
 8016988:	6811      	ldr	r1, [r2, #0]
 801698a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801698e:	618b      	str	r3, [r1, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016990:	6811      	ldr	r1, [r2, #0]
 8016992:	3118      	adds	r1, #24
 8016994:	f7fe fe1e 	bl	80155d4 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016998:	2101      	movs	r1, #1
 801699a:	4620      	mov	r0, r4
 801699c:	f7ff fc38 	bl	8016210 <prvAddCurrentTaskToDelayedList>
}
 80169a0:	bd38      	pop	{r3, r4, r5, pc}
 80169a2:	bf00      	nop
 80169a4:	200011a8 	.word	0x200011a8
 80169a8:	20000d34 	.word	0x20000d34

080169ac <vTaskPlaceOnEventListRestricted>:
	{
 80169ac:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80169ae:	b178      	cbz	r0, 80169d0 <vTaskPlaceOnEventListRestricted+0x24>
 80169b0:	460d      	mov	r5, r1
 80169b2:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80169b4:	4b0b      	ldr	r3, [pc, #44]	; (80169e4 <vTaskPlaceOnEventListRestricted+0x38>)
 80169b6:	6819      	ldr	r1, [r3, #0]
 80169b8:	3118      	adds	r1, #24
 80169ba:	f7fe fe0b 	bl	80155d4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80169be:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80169c0:	4621      	mov	r1, r4
 80169c2:	bf0c      	ite	eq
 80169c4:	4628      	moveq	r0, r5
 80169c6:	f04f 30ff 	movne.w	r0, #4294967295
 80169ca:	f7ff fc21 	bl	8016210 <prvAddCurrentTaskToDelayedList>
	}
 80169ce:	bd38      	pop	{r3, r4, r5, pc}
 80169d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169d4:	f383 8811 	msr	BASEPRI, r3
 80169d8:	f3bf 8f6f 	isb	sy
 80169dc:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80169e0:	e7fe      	b.n	80169e0 <vTaskPlaceOnEventListRestricted+0x34>
 80169e2:	bf00      	nop
 80169e4:	20000d34 	.word	0x20000d34

080169e8 <xTaskRemoveFromEventList>:
{
 80169e8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80169ea:	68c3      	ldr	r3, [r0, #12]
 80169ec:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80169ee:	b32c      	cbz	r4, 8016a3c <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80169f0:	f104 0518 	add.w	r5, r4, #24
 80169f4:	4628      	mov	r0, r5
 80169f6:	f7fe fe11 	bl	801561c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80169fa:	4b17      	ldr	r3, [pc, #92]	; (8016a58 <xTaskRemoveFromEventList+0x70>)
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	bb33      	cbnz	r3, 8016a4e <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016a00:	1d25      	adds	r5, r4, #4
 8016a02:	4628      	mov	r0, r5
 8016a04:	f7fe fe0a 	bl	801561c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016a08:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016a0a:	4b14      	ldr	r3, [pc, #80]	; (8016a5c <xTaskRemoveFromEventList+0x74>)
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	4298      	cmp	r0, r3
 8016a10:	bf84      	itt	hi
 8016a12:	4b12      	ldrhi	r3, [pc, #72]	; (8016a5c <xTaskRemoveFromEventList+0x74>)
 8016a14:	6018      	strhi	r0, [r3, #0]
 8016a16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016a1a:	4629      	mov	r1, r5
 8016a1c:	4b10      	ldr	r3, [pc, #64]	; (8016a60 <xTaskRemoveFromEventList+0x78>)
 8016a1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016a22:	f7fe fdd7 	bl	80155d4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016a26:	4b0f      	ldr	r3, [pc, #60]	; (8016a64 <xTaskRemoveFromEventList+0x7c>)
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a2e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8016a30:	bf83      	ittte	hi
 8016a32:	2001      	movhi	r0, #1
 8016a34:	4b0c      	ldrhi	r3, [pc, #48]	; (8016a68 <xTaskRemoveFromEventList+0x80>)
 8016a36:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8016a38:	2000      	movls	r0, #0
}
 8016a3a:	bd38      	pop	{r3, r4, r5, pc}
 8016a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a40:	f383 8811 	msr	BASEPRI, r3
 8016a44:	f3bf 8f6f 	isb	sy
 8016a48:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8016a4c:	e7fe      	b.n	8016a4c <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016a4e:	4629      	mov	r1, r5
 8016a50:	4806      	ldr	r0, [pc, #24]	; (8016a6c <xTaskRemoveFromEventList+0x84>)
 8016a52:	f7fe fdbf 	bl	80155d4 <vListInsertEnd>
 8016a56:	e7e6      	b.n	8016a26 <xTaskRemoveFromEventList+0x3e>
 8016a58:	200011a8 	.word	0x200011a8
 8016a5c:	200011b0 	.word	0x200011b0
 8016a60:	20000d40 	.word	0x20000d40
 8016a64:	20000d34 	.word	0x20000d34
 8016a68:	2000122c 	.word	0x2000122c
 8016a6c:	200011e8 	.word	0x200011e8

08016a70 <vTaskRemoveFromUnorderedEventList>:
{
 8016a70:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8016a72:	4a1c      	ldr	r2, [pc, #112]	; (8016ae4 <vTaskRemoveFromUnorderedEventList+0x74>)
 8016a74:	6812      	ldr	r2, [r2, #0]
 8016a76:	b942      	cbnz	r2, 8016a8a <vTaskRemoveFromUnorderedEventList+0x1a>
 8016a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a7c:	f383 8811 	msr	BASEPRI, r3
 8016a80:	f3bf 8f6f 	isb	sy
 8016a84:	f3bf 8f4f 	dsb	sy
 8016a88:	e7fe      	b.n	8016a88 <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8016a8a:	f041 4300 	orr.w	r3, r1, #2147483648	; 0x80000000
 8016a8e:	6003      	str	r3, [r0, #0]
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a90:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 8016a92:	b1f4      	cbz	r4, 8016ad2 <vTaskRemoveFromUnorderedEventList+0x62>
	( void ) uxListRemove( pxEventListItem );
 8016a94:	f7fe fdc2 	bl	801561c <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016a98:	1d25      	adds	r5, r4, #4
 8016a9a:	4628      	mov	r0, r5
 8016a9c:	f7fe fdbe 	bl	801561c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8016aa0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016aa2:	4b11      	ldr	r3, [pc, #68]	; (8016ae8 <vTaskRemoveFromUnorderedEventList+0x78>)
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	4298      	cmp	r0, r3
 8016aa8:	bf84      	itt	hi
 8016aaa:	4b0f      	ldrhi	r3, [pc, #60]	; (8016ae8 <vTaskRemoveFromUnorderedEventList+0x78>)
 8016aac:	6018      	strhi	r0, [r3, #0]
 8016aae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016ab2:	4629      	mov	r1, r5
 8016ab4:	4b0d      	ldr	r3, [pc, #52]	; (8016aec <vTaskRemoveFromUnorderedEventList+0x7c>)
 8016ab6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016aba:	f7fe fd8b 	bl	80155d4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016abe:	4b0c      	ldr	r3, [pc, #48]	; (8016af0 <vTaskRemoveFromUnorderedEventList+0x80>)
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ac6:	429a      	cmp	r2, r3
 8016ac8:	d902      	bls.n	8016ad0 <vTaskRemoveFromUnorderedEventList+0x60>
		xYieldPending = pdTRUE;
 8016aca:	4b0a      	ldr	r3, [pc, #40]	; (8016af4 <vTaskRemoveFromUnorderedEventList+0x84>)
 8016acc:	2201      	movs	r2, #1
 8016ace:	601a      	str	r2, [r3, #0]
}
 8016ad0:	bd38      	pop	{r3, r4, r5, pc}
 8016ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ad6:	f383 8811 	msr	BASEPRI, r3
 8016ada:	f3bf 8f6f 	isb	sy
 8016ade:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8016ae2:	e7fe      	b.n	8016ae2 <vTaskRemoveFromUnorderedEventList+0x72>
 8016ae4:	200011a8 	.word	0x200011a8
 8016ae8:	200011b0 	.word	0x200011b0
 8016aec:	20000d40 	.word	0x20000d40
 8016af0:	20000d34 	.word	0x20000d34
 8016af4:	2000122c 	.word	0x2000122c

08016af8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016af8:	4b03      	ldr	r3, [pc, #12]	; (8016b08 <vTaskInternalSetTimeOutState+0x10>)
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016afe:	4b03      	ldr	r3, [pc, #12]	; (8016b0c <vTaskInternalSetTimeOutState+0x14>)
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	6043      	str	r3, [r0, #4]
}
 8016b04:	4770      	bx	lr
 8016b06:	bf00      	nop
 8016b08:	200011e0 	.word	0x200011e0
 8016b0c:	20001228 	.word	0x20001228

08016b10 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8016b10:	b1d0      	cbz	r0, 8016b48 <xTaskCheckForTimeOut+0x38>
{
 8016b12:	b570      	push	{r4, r5, r6, lr}
 8016b14:	460c      	mov	r4, r1
 8016b16:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8016b18:	b1f9      	cbz	r1, 8016b5a <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8016b1a:	f000 fbe3 	bl	80172e4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8016b1e:	4b1b      	ldr	r3, [pc, #108]	; (8016b8c <xTaskCheckForTimeOut+0x7c>)
 8016b20:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8016b22:	6823      	ldr	r3, [r4, #0]
 8016b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b28:	d028      	beq.n	8016b7c <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016b2a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016b2c:	4818      	ldr	r0, [pc, #96]	; (8016b90 <xTaskCheckForTimeOut+0x80>)
 8016b2e:	6800      	ldr	r0, [r0, #0]
 8016b30:	682e      	ldr	r6, [r5, #0]
 8016b32:	4286      	cmp	r6, r0
 8016b34:	d001      	beq.n	8016b3a <xTaskCheckForTimeOut+0x2a>
 8016b36:	428a      	cmp	r2, r1
 8016b38:	d925      	bls.n	8016b86 <xTaskCheckForTimeOut+0x76>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016b3a:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016b3c:	4283      	cmp	r3, r0
 8016b3e:	d815      	bhi.n	8016b6c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8016b40:	2300      	movs	r3, #0
 8016b42:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8016b44:	2401      	movs	r4, #1
 8016b46:	e01a      	b.n	8016b7e <xTaskCheckForTimeOut+0x6e>
 8016b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b4c:	f383 8811 	msr	BASEPRI, r3
 8016b50:	f3bf 8f6f 	isb	sy
 8016b54:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8016b58:	e7fe      	b.n	8016b58 <xTaskCheckForTimeOut+0x48>
 8016b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b5e:	f383 8811 	msr	BASEPRI, r3
 8016b62:	f3bf 8f6f 	isb	sy
 8016b66:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8016b6a:	e7fe      	b.n	8016b6a <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8016b6c:	1a5b      	subs	r3, r3, r1
 8016b6e:	4413      	add	r3, r2
 8016b70:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016b72:	4628      	mov	r0, r5
 8016b74:	f7ff ffc0 	bl	8016af8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016b78:	2400      	movs	r4, #0
 8016b7a:	e000      	b.n	8016b7e <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8016b7c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8016b7e:	f000 fbd3 	bl	8017328 <vPortExitCritical>
}
 8016b82:	4620      	mov	r0, r4
 8016b84:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8016b86:	2401      	movs	r4, #1
 8016b88:	e7f9      	b.n	8016b7e <xTaskCheckForTimeOut+0x6e>
 8016b8a:	bf00      	nop
 8016b8c:	20001228 	.word	0x20001228
 8016b90:	200011e0 	.word	0x200011e0

08016b94 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8016b94:	4b01      	ldr	r3, [pc, #4]	; (8016b9c <vTaskMissedYield+0x8>)
 8016b96:	2201      	movs	r2, #1
 8016b98:	601a      	str	r2, [r3, #0]
}
 8016b9a:	4770      	bx	lr
 8016b9c:	2000122c 	.word	0x2000122c

08016ba0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8016ba0:	4b01      	ldr	r3, [pc, #4]	; (8016ba8 <xTaskGetCurrentTaskHandle+0x8>)
 8016ba2:	6818      	ldr	r0, [r3, #0]
	}
 8016ba4:	4770      	bx	lr
 8016ba6:	bf00      	nop
 8016ba8:	20000d34 	.word	0x20000d34

08016bac <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8016bac:	4b05      	ldr	r3, [pc, #20]	; (8016bc4 <xTaskGetSchedulerState+0x18>)
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	b133      	cbz	r3, 8016bc0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016bb2:	4b05      	ldr	r3, [pc, #20]	; (8016bc8 <xTaskGetSchedulerState+0x1c>)
 8016bb4:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	bf0c      	ite	eq
 8016bba:	2002      	moveq	r0, #2
 8016bbc:	2000      	movne	r0, #0
 8016bbe:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016bc0:	2001      	movs	r0, #1
	}
 8016bc2:	4770      	bx	lr
 8016bc4:	200011fc 	.word	0x200011fc
 8016bc8:	200011a8 	.word	0x200011a8

08016bcc <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8016bcc:	2800      	cmp	r0, #0
 8016bce:	d03f      	beq.n	8016c50 <xTaskPriorityInherit+0x84>
	{
 8016bd0:	b538      	push	{r3, r4, r5, lr}
 8016bd2:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016bd4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8016bd6:	4a1f      	ldr	r2, [pc, #124]	; (8016c54 <xTaskPriorityInherit+0x88>)
 8016bd8:	6812      	ldr	r2, [r2, #0]
 8016bda:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8016bdc:	4293      	cmp	r3, r2
 8016bde:	d22e      	bcs.n	8016c3e <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016be0:	6982      	ldr	r2, [r0, #24]
 8016be2:	2a00      	cmp	r2, #0
 8016be4:	db05      	blt.n	8016bf2 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016be6:	4a1b      	ldr	r2, [pc, #108]	; (8016c54 <xTaskPriorityInherit+0x88>)
 8016be8:	6812      	ldr	r2, [r2, #0]
 8016bea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8016bec:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8016bf0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016bf2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016bf6:	4a18      	ldr	r2, [pc, #96]	; (8016c58 <xTaskPriorityInherit+0x8c>)
 8016bf8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016bfc:	6962      	ldr	r2, [r4, #20]
 8016bfe:	429a      	cmp	r2, r3
 8016c00:	d005      	beq.n	8016c0e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016c02:	4b14      	ldr	r3, [pc, #80]	; (8016c54 <xTaskPriorityInherit+0x88>)
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c08:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8016c0a:	2001      	movs	r0, #1
 8016c0c:	e01f      	b.n	8016c4e <xTaskPriorityInherit+0x82>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016c0e:	1d25      	adds	r5, r4, #4
 8016c10:	4628      	mov	r0, r5
 8016c12:	f7fe fd03 	bl	801561c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016c16:	4b0f      	ldr	r3, [pc, #60]	; (8016c54 <xTaskPriorityInherit+0x88>)
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8016c1c:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016c1e:	4b0f      	ldr	r3, [pc, #60]	; (8016c5c <xTaskPriorityInherit+0x90>)
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	4298      	cmp	r0, r3
 8016c24:	bf84      	itt	hi
 8016c26:	4b0d      	ldrhi	r3, [pc, #52]	; (8016c5c <xTaskPriorityInherit+0x90>)
 8016c28:	6018      	strhi	r0, [r3, #0]
 8016c2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016c2e:	4629      	mov	r1, r5
 8016c30:	4b09      	ldr	r3, [pc, #36]	; (8016c58 <xTaskPriorityInherit+0x8c>)
 8016c32:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016c36:	f7fe fccd 	bl	80155d4 <vListInsertEnd>
				xReturn = pdTRUE;
 8016c3a:	2001      	movs	r0, #1
 8016c3c:	e007      	b.n	8016c4e <xTaskPriorityInherit+0x82>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016c3e:	4b05      	ldr	r3, [pc, #20]	; (8016c54 <xTaskPriorityInherit+0x88>)
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8016c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c46:	4298      	cmp	r0, r3
 8016c48:	bf2c      	ite	cs
 8016c4a:	2000      	movcs	r0, #0
 8016c4c:	2001      	movcc	r0, #1
	}
 8016c4e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8016c50:	2000      	movs	r0, #0
	}
 8016c52:	4770      	bx	lr
 8016c54:	20000d34 	.word	0x20000d34
 8016c58:	20000d40 	.word	0x20000d40
 8016c5c:	200011b0 	.word	0x200011b0

08016c60 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8016c60:	2800      	cmp	r0, #0
 8016c62:	d03b      	beq.n	8016cdc <xTaskPriorityDisinherit+0x7c>
	{
 8016c64:	b538      	push	{r3, r4, r5, lr}
 8016c66:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8016c68:	4b1e      	ldr	r3, [pc, #120]	; (8016ce4 <xTaskPriorityDisinherit+0x84>)
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	4283      	cmp	r3, r0
 8016c6e:	d008      	beq.n	8016c82 <xTaskPriorityDisinherit+0x22>
 8016c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c74:	f383 8811 	msr	BASEPRI, r3
 8016c78:	f3bf 8f6f 	isb	sy
 8016c7c:	f3bf 8f4f 	dsb	sy
 8016c80:	e7fe      	b.n	8016c80 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8016c82:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8016c84:	b943      	cbnz	r3, 8016c98 <xTaskPriorityDisinherit+0x38>
 8016c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c8a:	f383 8811 	msr	BASEPRI, r3
 8016c8e:	f3bf 8f6f 	isb	sy
 8016c92:	f3bf 8f4f 	dsb	sy
 8016c96:	e7fe      	b.n	8016c96 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8016c98:	3b01      	subs	r3, #1
 8016c9a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016c9c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8016c9e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8016ca0:	4291      	cmp	r1, r2
 8016ca2:	d01d      	beq.n	8016ce0 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016ca4:	b10b      	cbz	r3, 8016caa <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8016ca6:	2000      	movs	r0, #0
	}
 8016ca8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016caa:	1d05      	adds	r5, r0, #4
 8016cac:	4628      	mov	r0, r5
 8016cae:	f7fe fcb5 	bl	801561c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016cb2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8016cb4:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016cb6:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8016cba:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8016cbc:	4b0a      	ldr	r3, [pc, #40]	; (8016ce8 <xTaskPriorityDisinherit+0x88>)
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	4298      	cmp	r0, r3
 8016cc2:	bf84      	itt	hi
 8016cc4:	4b08      	ldrhi	r3, [pc, #32]	; (8016ce8 <xTaskPriorityDisinherit+0x88>)
 8016cc6:	6018      	strhi	r0, [r3, #0]
 8016cc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016ccc:	4629      	mov	r1, r5
 8016cce:	4b07      	ldr	r3, [pc, #28]	; (8016cec <xTaskPriorityDisinherit+0x8c>)
 8016cd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016cd4:	f7fe fc7e 	bl	80155d4 <vListInsertEnd>
					xReturn = pdTRUE;
 8016cd8:	2001      	movs	r0, #1
 8016cda:	e7e5      	b.n	8016ca8 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8016cdc:	2000      	movs	r0, #0
	}
 8016cde:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8016ce0:	2000      	movs	r0, #0
 8016ce2:	e7e1      	b.n	8016ca8 <xTaskPriorityDisinherit+0x48>
 8016ce4:	20000d34 	.word	0x20000d34
 8016ce8:	200011b0 	.word	0x200011b0
 8016cec:	20000d40 	.word	0x20000d40

08016cf0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8016cf0:	2800      	cmp	r0, #0
 8016cf2:	d047      	beq.n	8016d84 <vTaskPriorityDisinheritAfterTimeout+0x94>
	{
 8016cf4:	b538      	push	{r3, r4, r5, lr}
 8016cf6:	460b      	mov	r3, r1
 8016cf8:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8016cfa:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8016cfc:	b941      	cbnz	r1, 8016d10 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8016cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d02:	f383 8811 	msr	BASEPRI, r3
 8016d06:	f3bf 8f6f 	isb	sy
 8016d0a:	f3bf 8f4f 	dsb	sy
 8016d0e:	e7fe      	b.n	8016d0e <vTaskPriorityDisinheritAfterTimeout+0x1e>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016d10:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8016d12:	4293      	cmp	r3, r2
 8016d14:	bf38      	it	cc
 8016d16:	4613      	movcc	r3, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016d18:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8016d1a:	429a      	cmp	r2, r3
 8016d1c:	d001      	beq.n	8016d22 <vTaskPriorityDisinheritAfterTimeout+0x32>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016d1e:	2901      	cmp	r1, #1
 8016d20:	d000      	beq.n	8016d24 <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
 8016d22:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8016d24:	4918      	ldr	r1, [pc, #96]	; (8016d88 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8016d26:	6809      	ldr	r1, [r1, #0]
 8016d28:	4281      	cmp	r1, r0
 8016d2a:	d022      	beq.n	8016d72 <vTaskPriorityDisinheritAfterTimeout+0x82>
					pxTCB->uxPriority = uxPriorityToUse;
 8016d2c:	62c3      	str	r3, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016d2e:	6981      	ldr	r1, [r0, #24]
 8016d30:	2900      	cmp	r1, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016d32:	bfa4      	itt	ge
 8016d34:	f1c3 0338 	rsbge	r3, r3, #56	; 0x38
 8016d38:	6183      	strge	r3, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016d3a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016d3e:	4b13      	ldr	r3, [pc, #76]	; (8016d8c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8016d40:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8016d44:	6943      	ldr	r3, [r0, #20]
 8016d46:	4293      	cmp	r3, r2
 8016d48:	d1eb      	bne.n	8016d22 <vTaskPriorityDisinheritAfterTimeout+0x32>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016d4a:	1d05      	adds	r5, r0, #4
 8016d4c:	4628      	mov	r0, r5
 8016d4e:	f7fe fc65 	bl	801561c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8016d52:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016d54:	4b0e      	ldr	r3, [pc, #56]	; (8016d90 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	4298      	cmp	r0, r3
 8016d5a:	bf84      	itt	hi
 8016d5c:	4b0c      	ldrhi	r3, [pc, #48]	; (8016d90 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8016d5e:	6018      	strhi	r0, [r3, #0]
 8016d60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016d64:	4629      	mov	r1, r5
 8016d66:	4b09      	ldr	r3, [pc, #36]	; (8016d8c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8016d68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016d6c:	f7fe fc32 	bl	80155d4 <vListInsertEnd>
	}
 8016d70:	e7d7      	b.n	8016d22 <vTaskPriorityDisinheritAfterTimeout+0x32>
 8016d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d76:	f383 8811 	msr	BASEPRI, r3
 8016d7a:	f3bf 8f6f 	isb	sy
 8016d7e:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8016d82:	e7fe      	b.n	8016d82 <vTaskPriorityDisinheritAfterTimeout+0x92>
 8016d84:	4770      	bx	lr
 8016d86:	bf00      	nop
 8016d88:	20000d34 	.word	0x20000d34
 8016d8c:	20000d40 	.word	0x20000d40
 8016d90:	200011b0 	.word	0x200011b0

08016d94 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8016d94:	4b04      	ldr	r3, [pc, #16]	; (8016da8 <uxTaskResetEventItemValue+0x14>)
 8016d96:	681a      	ldr	r2, [r3, #0]
 8016d98:	6990      	ldr	r0, [r2, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016d9a:	6819      	ldr	r1, [r3, #0]
 8016d9c:	681a      	ldr	r2, [r3, #0]
 8016d9e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8016da0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8016da4:	6193      	str	r3, [r2, #24]
}
 8016da6:	4770      	bx	lr
 8016da8:	20000d34 	.word	0x20000d34

08016dac <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8016dac:	4b05      	ldr	r3, [pc, #20]	; (8016dc4 <pvTaskIncrementMutexHeldCount+0x18>)
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	b123      	cbz	r3, 8016dbc <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8016db2:	4b04      	ldr	r3, [pc, #16]	; (8016dc4 <pvTaskIncrementMutexHeldCount+0x18>)
 8016db4:	681a      	ldr	r2, [r3, #0]
 8016db6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8016db8:	3301      	adds	r3, #1
 8016dba:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8016dbc:	4b01      	ldr	r3, [pc, #4]	; (8016dc4 <pvTaskIncrementMutexHeldCount+0x18>)
 8016dbe:	6818      	ldr	r0, [r3, #0]
	}
 8016dc0:	4770      	bx	lr
 8016dc2:	bf00      	nop
 8016dc4:	20000d34 	.word	0x20000d34

08016dc8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016dc8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016dca:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016dcc:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8016dce:	4291      	cmp	r1, r2
 8016dd0:	d80c      	bhi.n	8016dec <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016dd2:	1ad2      	subs	r2, r2, r3
 8016dd4:	6983      	ldr	r3, [r0, #24]
 8016dd6:	429a      	cmp	r2, r3
 8016dd8:	d301      	bcc.n	8016dde <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8016dda:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8016ddc:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016dde:	1d01      	adds	r1, r0, #4
 8016de0:	4b09      	ldr	r3, [pc, #36]	; (8016e08 <prvInsertTimerInActiveList+0x40>)
 8016de2:	6818      	ldr	r0, [r3, #0]
 8016de4:	f7fe fc01 	bl	80155ea <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8016de8:	2000      	movs	r0, #0
 8016dea:	e7f7      	b.n	8016ddc <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8016dec:	429a      	cmp	r2, r3
 8016dee:	d201      	bcs.n	8016df4 <prvInsertTimerInActiveList+0x2c>
 8016df0:	4299      	cmp	r1, r3
 8016df2:	d206      	bcs.n	8016e02 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016df4:	1d01      	adds	r1, r0, #4
 8016df6:	4b05      	ldr	r3, [pc, #20]	; (8016e0c <prvInsertTimerInActiveList+0x44>)
 8016df8:	6818      	ldr	r0, [r3, #0]
 8016dfa:	f7fe fbf6 	bl	80155ea <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8016dfe:	2000      	movs	r0, #0
 8016e00:	e7ec      	b.n	8016ddc <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8016e02:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8016e04:	e7ea      	b.n	8016ddc <prvInsertTimerInActiveList+0x14>
 8016e06:	bf00      	nop
 8016e08:	20001234 	.word	0x20001234
 8016e0c:	20001230 	.word	0x20001230

08016e10 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016e10:	b530      	push	{r4, r5, lr}
 8016e12:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8016e14:	f000 fa66 	bl	80172e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8016e18:	4b11      	ldr	r3, [pc, #68]	; (8016e60 <prvCheckForValidListAndQueue+0x50>)
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	b11b      	cbz	r3, 8016e26 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016e1e:	f000 fa83 	bl	8017328 <vPortExitCritical>
}
 8016e22:	b003      	add	sp, #12
 8016e24:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8016e26:	4d0f      	ldr	r5, [pc, #60]	; (8016e64 <prvCheckForValidListAndQueue+0x54>)
 8016e28:	4628      	mov	r0, r5
 8016e2a:	f7fe fbc5 	bl	80155b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016e2e:	4c0e      	ldr	r4, [pc, #56]	; (8016e68 <prvCheckForValidListAndQueue+0x58>)
 8016e30:	4620      	mov	r0, r4
 8016e32:	f7fe fbc1 	bl	80155b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8016e36:	4b0d      	ldr	r3, [pc, #52]	; (8016e6c <prvCheckForValidListAndQueue+0x5c>)
 8016e38:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8016e3a:	4b0d      	ldr	r3, [pc, #52]	; (8016e70 <prvCheckForValidListAndQueue+0x60>)
 8016e3c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016e3e:	2300      	movs	r3, #0
 8016e40:	9300      	str	r3, [sp, #0]
 8016e42:	4b0c      	ldr	r3, [pc, #48]	; (8016e74 <prvCheckForValidListAndQueue+0x64>)
 8016e44:	4a0c      	ldr	r2, [pc, #48]	; (8016e78 <prvCheckForValidListAndQueue+0x68>)
 8016e46:	2110      	movs	r1, #16
 8016e48:	200a      	movs	r0, #10
 8016e4a:	f7fe fccf 	bl	80157ec <xQueueGenericCreateStatic>
 8016e4e:	4b04      	ldr	r3, [pc, #16]	; (8016e60 <prvCheckForValidListAndQueue+0x50>)
 8016e50:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8016e52:	2800      	cmp	r0, #0
 8016e54:	d0e3      	beq.n	8016e1e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8016e56:	4909      	ldr	r1, [pc, #36]	; (8016e7c <prvCheckForValidListAndQueue+0x6c>)
 8016e58:	f7ff f864 	bl	8015f24 <vQueueAddToRegistry>
 8016e5c:	e7df      	b.n	8016e1e <prvCheckForValidListAndQueue+0xe>
 8016e5e:	bf00      	nop
 8016e60:	20001354 	.word	0x20001354
 8016e64:	200012d8 	.word	0x200012d8
 8016e68:	200012ec 	.word	0x200012ec
 8016e6c:	20001230 	.word	0x20001230
 8016e70:	20001234 	.word	0x20001234
 8016e74:	20001304 	.word	0x20001304
 8016e78:	20001238 	.word	0x20001238
 8016e7c:	0801a174 	.word	0x0801a174

08016e80 <xTimerCreateTimerTask>:
{
 8016e80:	b510      	push	{r4, lr}
 8016e82:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8016e84:	f7ff ffc4 	bl	8016e10 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8016e88:	4b12      	ldr	r3, [pc, #72]	; (8016ed4 <xTimerCreateTimerTask+0x54>)
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	b1cb      	cbz	r3, 8016ec2 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8016e8e:	2400      	movs	r4, #0
 8016e90:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8016e92:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016e94:	aa07      	add	r2, sp, #28
 8016e96:	a906      	add	r1, sp, #24
 8016e98:	a805      	add	r0, sp, #20
 8016e9a:	f7fe fa25 	bl	80152e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016e9e:	9b05      	ldr	r3, [sp, #20]
 8016ea0:	9302      	str	r3, [sp, #8]
 8016ea2:	9b06      	ldr	r3, [sp, #24]
 8016ea4:	9301      	str	r3, [sp, #4]
 8016ea6:	2302      	movs	r3, #2
 8016ea8:	9300      	str	r3, [sp, #0]
 8016eaa:	4623      	mov	r3, r4
 8016eac:	9a07      	ldr	r2, [sp, #28]
 8016eae:	490a      	ldr	r1, [pc, #40]	; (8016ed8 <xTimerCreateTimerTask+0x58>)
 8016eb0:	480a      	ldr	r0, [pc, #40]	; (8016edc <xTimerCreateTimerTask+0x5c>)
 8016eb2:	f7ff f9eb 	bl	801628c <xTaskCreateStatic>
 8016eb6:	4a0a      	ldr	r2, [pc, #40]	; (8016ee0 <xTimerCreateTimerTask+0x60>)
 8016eb8:	6010      	str	r0, [r2, #0]
			if( xTimerTaskHandle != NULL )
 8016eba:	b110      	cbz	r0, 8016ec2 <xTimerCreateTimerTask+0x42>
}
 8016ebc:	2001      	movs	r0, #1
 8016ebe:	b008      	add	sp, #32
 8016ec0:	bd10      	pop	{r4, pc}
 8016ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ec6:	f383 8811 	msr	BASEPRI, r3
 8016eca:	f3bf 8f6f 	isb	sy
 8016ece:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8016ed2:	e7fe      	b.n	8016ed2 <xTimerCreateTimerTask+0x52>
 8016ed4:	20001354 	.word	0x20001354
 8016ed8:	0801a17c 	.word	0x0801a17c
 8016edc:	08016ff5 	.word	0x08016ff5
 8016ee0:	20001358 	.word	0x20001358

08016ee4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8016ee4:	b1d8      	cbz	r0, 8016f1e <xTimerGenericCommand+0x3a>
{
 8016ee6:	b510      	push	{r4, lr}
 8016ee8:	b084      	sub	sp, #16
 8016eea:	4614      	mov	r4, r2
 8016eec:	461a      	mov	r2, r3
 8016eee:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8016ef0:	4813      	ldr	r0, [pc, #76]	; (8016f40 <xTimerGenericCommand+0x5c>)
 8016ef2:	6800      	ldr	r0, [r0, #0]
 8016ef4:	b308      	cbz	r0, 8016f3a <xTimerGenericCommand+0x56>
		xMessage.xMessageID = xCommandID;
 8016ef6:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016ef8:	9401      	str	r4, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016efa:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016efc:	2905      	cmp	r1, #5
 8016efe:	dc17      	bgt.n	8016f30 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016f00:	f7ff fe54 	bl	8016bac <xTaskGetSchedulerState>
 8016f04:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016f06:	f04f 0300 	mov.w	r3, #0
 8016f0a:	bf0c      	ite	eq
 8016f0c:	9a06      	ldreq	r2, [sp, #24]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016f0e:	461a      	movne	r2, r3
 8016f10:	4669      	mov	r1, sp
 8016f12:	480b      	ldr	r0, [pc, #44]	; (8016f40 <xTimerGenericCommand+0x5c>)
 8016f14:	6800      	ldr	r0, [r0, #0]
 8016f16:	f7fe fce9 	bl	80158ec <xQueueGenericSend>
}
 8016f1a:	b004      	add	sp, #16
 8016f1c:	bd10      	pop	{r4, pc}
 8016f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f22:	f383 8811 	msr	BASEPRI, r3
 8016f26:	f3bf 8f6f 	isb	sy
 8016f2a:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8016f2e:	e7fe      	b.n	8016f2e <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016f30:	2300      	movs	r3, #0
 8016f32:	4669      	mov	r1, sp
 8016f34:	f7fe fde6 	bl	8015b04 <xQueueGenericSendFromISR>
 8016f38:	e7ef      	b.n	8016f1a <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
 8016f3a:	2000      	movs	r0, #0
	return xReturn;
 8016f3c:	e7ed      	b.n	8016f1a <xTimerGenericCommand+0x36>
 8016f3e:	bf00      	nop
 8016f40:	20001354 	.word	0x20001354

08016f44 <prvSampleTimeNow>:
{
 8016f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f48:	b082      	sub	sp, #8
 8016f4a:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8016f4c:	f7ff fafa 	bl	8016544 <xTaskGetTickCount>
 8016f50:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8016f52:	4b25      	ldr	r3, [pc, #148]	; (8016fe8 <prvSampleTimeNow+0xa4>)
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	4283      	cmp	r3, r0
 8016f58:	d807      	bhi.n	8016f6a <prvSampleTimeNow+0x26>
		*pxTimerListsWereSwitched = pdFALSE;
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8016f5e:	4b22      	ldr	r3, [pc, #136]	; (8016fe8 <prvSampleTimeNow+0xa4>)
 8016f60:	601c      	str	r4, [r3, #0]
}
 8016f62:	4620      	mov	r0, r4
 8016f64:	b002      	add	sp, #8
 8016f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016f6a:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8016ff0 <prvSampleTimeNow+0xac>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016f6e:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016f72:	f8d8 3000 	ldr.w	r3, [r8]
 8016f76:	681a      	ldr	r2, [r3, #0]
 8016f78:	b372      	cbz	r2, 8016fd8 <prvSampleTimeNow+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016f7a:	68db      	ldr	r3, [r3, #12]
 8016f7c:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016f80:	68dd      	ldr	r5, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016f82:	1d2f      	adds	r7, r5, #4
 8016f84:	4638      	mov	r0, r7
 8016f86:	f7fe fb49 	bl	801561c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016f8a:	6a2b      	ldr	r3, [r5, #32]
 8016f8c:	4628      	mov	r0, r5
 8016f8e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016f90:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8016f94:	f013 0f04 	tst.w	r3, #4
 8016f98:	d0eb      	beq.n	8016f72 <prvSampleTimeNow+0x2e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016f9a:	69ab      	ldr	r3, [r5, #24]
 8016f9c:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8016f9e:	459a      	cmp	sl, r3
 8016fa0:	d207      	bcs.n	8016fb2 <prvSampleTimeNow+0x6e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8016fa2:	606b      	str	r3, [r5, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016fa4:	612d      	str	r5, [r5, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016fa6:	4639      	mov	r1, r7
 8016fa8:	f8d8 0000 	ldr.w	r0, [r8]
 8016fac:	f7fe fb1d 	bl	80155ea <vListInsert>
 8016fb0:	e7df      	b.n	8016f72 <prvSampleTimeNow+0x2e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016fb2:	f8cd 9000 	str.w	r9, [sp]
 8016fb6:	464b      	mov	r3, r9
 8016fb8:	4652      	mov	r2, sl
 8016fba:	4649      	mov	r1, r9
 8016fbc:	4628      	mov	r0, r5
 8016fbe:	f7ff ff91 	bl	8016ee4 <xTimerGenericCommand>
				configASSERT( xResult );
 8016fc2:	2800      	cmp	r0, #0
 8016fc4:	d1d5      	bne.n	8016f72 <prvSampleTimeNow+0x2e>
 8016fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fca:	f383 8811 	msr	BASEPRI, r3
 8016fce:	f3bf 8f6f 	isb	sy
 8016fd2:	f3bf 8f4f 	dsb	sy
 8016fd6:	e7fe      	b.n	8016fd6 <prvSampleTimeNow+0x92>
	pxCurrentTimerList = pxOverflowTimerList;
 8016fd8:	4a04      	ldr	r2, [pc, #16]	; (8016fec <prvSampleTimeNow+0xa8>)
 8016fda:	6810      	ldr	r0, [r2, #0]
 8016fdc:	4904      	ldr	r1, [pc, #16]	; (8016ff0 <prvSampleTimeNow+0xac>)
 8016fde:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8016fe0:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8016fe2:	2301      	movs	r3, #1
 8016fe4:	6033      	str	r3, [r6, #0]
 8016fe6:	e7ba      	b.n	8016f5e <prvSampleTimeNow+0x1a>
 8016fe8:	20001300 	.word	0x20001300
 8016fec:	20001234 	.word	0x20001234
 8016ff0:	20001230 	.word	0x20001230

08016ff4 <prvTimerTask>:
{
 8016ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ff8:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8016ffa:	4e76      	ldr	r6, [pc, #472]	; (80171d4 <prvTimerTask+0x1e0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8016ffc:	4d76      	ldr	r5, [pc, #472]	; (80171d8 <prvTimerTask+0x1e4>)
					portYIELD_WITHIN_API();
 8016ffe:	4f77      	ldr	r7, [pc, #476]	; (80171dc <prvTimerTask+0x1e8>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017000:	6833      	ldr	r3, [r6, #0]
 8017002:	681c      	ldr	r4, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017004:	b324      	cbz	r4, 8017050 <prvTimerTask+0x5c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017006:	68db      	ldr	r3, [r3, #12]
 8017008:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 801700a:	f7ff fa93 	bl	8016534 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801700e:	a804      	add	r0, sp, #16
 8017010:	f7ff ff98 	bl	8016f44 <prvSampleTimeNow>
 8017014:	4680      	mov	r8, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8017016:	9a04      	ldr	r2, [sp, #16]
 8017018:	2a00      	cmp	r2, #0
 801701a:	d153      	bne.n	80170c4 <prvTimerTask+0xd0>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801701c:	4284      	cmp	r4, r0
 801701e:	d825      	bhi.n	801706c <prvTimerTask+0x78>
				( void ) xTaskResumeAll();
 8017020:	f7ff fb36 	bl	8016690 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017024:	6833      	ldr	r3, [r6, #0]
 8017026:	68db      	ldr	r3, [r3, #12]
 8017028:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801702c:	f109 0004 	add.w	r0, r9, #4
 8017030:	f7fe faf4 	bl	801561c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017034:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 8017038:	f013 0f04 	tst.w	r3, #4
 801703c:	d126      	bne.n	801708c <prvTimerTask+0x98>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801703e:	f023 0301 	bic.w	r3, r3, #1
 8017042:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017046:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801704a:	4648      	mov	r0, r9
 801704c:	4798      	blx	r3
}
 801704e:	e03b      	b.n	80170c8 <prvTimerTask+0xd4>
	vTaskSuspendAll();
 8017050:	f7ff fa70 	bl	8016534 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017054:	a804      	add	r0, sp, #16
 8017056:	f7ff ff75 	bl	8016f44 <prvSampleTimeNow>
 801705a:	4680      	mov	r8, r0
		if( xTimerListsWereSwitched == pdFALSE )
 801705c:	9b04      	ldr	r3, [sp, #16]
 801705e:	bb8b      	cbnz	r3, 80170c4 <prvTimerTask+0xd0>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017060:	4b5f      	ldr	r3, [pc, #380]	; (80171e0 <prvTimerTask+0x1ec>)
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	681a      	ldr	r2, [r3, #0]
 8017066:	fab2 f282 	clz	r2, r2
 801706a:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801706c:	eba4 0108 	sub.w	r1, r4, r8
 8017070:	6828      	ldr	r0, [r5, #0]
 8017072:	f7fe ff6d 	bl	8015f50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017076:	f7ff fb0b 	bl	8016690 <xTaskResumeAll>
 801707a:	bb28      	cbnz	r0, 80170c8 <prvTimerTask+0xd4>
					portYIELD_WITHIN_API();
 801707c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8017080:	603b      	str	r3, [r7, #0]
 8017082:	f3bf 8f4f 	dsb	sy
 8017086:	f3bf 8f6f 	isb	sy
 801708a:	e01d      	b.n	80170c8 <prvTimerTask+0xd4>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801708c:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8017090:	4623      	mov	r3, r4
 8017092:	4642      	mov	r2, r8
 8017094:	4421      	add	r1, r4
 8017096:	4648      	mov	r0, r9
 8017098:	f7ff fe96 	bl	8016dc8 <prvInsertTimerInActiveList>
 801709c:	2800      	cmp	r0, #0
 801709e:	d0d2      	beq.n	8017046 <prvTimerTask+0x52>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80170a0:	2100      	movs	r1, #0
 80170a2:	9100      	str	r1, [sp, #0]
 80170a4:	460b      	mov	r3, r1
 80170a6:	4622      	mov	r2, r4
 80170a8:	4648      	mov	r0, r9
 80170aa:	f7ff ff1b 	bl	8016ee4 <xTimerGenericCommand>
			configASSERT( xResult );
 80170ae:	2800      	cmp	r0, #0
 80170b0:	d1c9      	bne.n	8017046 <prvTimerTask+0x52>
 80170b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170b6:	f383 8811 	msr	BASEPRI, r3
 80170ba:	f3bf 8f6f 	isb	sy
 80170be:	f3bf 8f4f 	dsb	sy
 80170c2:	e7fe      	b.n	80170c2 <prvTimerTask+0xce>
			( void ) xTaskResumeAll();
 80170c4:	f7ff fae4 	bl	8016690 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80170c8:	2400      	movs	r4, #0
}
 80170ca:	e006      	b.n	80170da <prvTimerTask+0xe6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80170cc:	9907      	ldr	r1, [sp, #28]
 80170ce:	9806      	ldr	r0, [sp, #24]
 80170d0:	9b05      	ldr	r3, [sp, #20]
 80170d2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80170d4:	9b04      	ldr	r3, [sp, #16]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	da09      	bge.n	80170ee <prvTimerTask+0xfa>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80170da:	4622      	mov	r2, r4
 80170dc:	a904      	add	r1, sp, #16
 80170de:	6828      	ldr	r0, [r5, #0]
 80170e0:	f7fe fd78 	bl	8015bd4 <xQueueReceive>
 80170e4:	2800      	cmp	r0, #0
 80170e6:	d08b      	beq.n	8017000 <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80170e8:	9b04      	ldr	r3, [sp, #16]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	dbee      	blt.n	80170cc <prvTimerTask+0xd8>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80170ee:	f8dd 8018 	ldr.w	r8, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80170f2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80170f6:	b11b      	cbz	r3, 8017100 <prvTimerTask+0x10c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80170f8:	f108 0004 	add.w	r0, r8, #4
 80170fc:	f7fe fa8e 	bl	801561c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017100:	a803      	add	r0, sp, #12
 8017102:	f7ff ff1f 	bl	8016f44 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8017106:	9b04      	ldr	r3, [sp, #16]
 8017108:	2b09      	cmp	r3, #9
 801710a:	d8e6      	bhi.n	80170da <prvTimerTask+0xe6>
 801710c:	e8df f003 	tbb	[pc, r3]
 8017110:	33050505 	.word	0x33050505
 8017114:	0505543a 	.word	0x0505543a
 8017118:	3a33      	.short	0x3a33
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801711a:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 801711e:	f043 0301 	orr.w	r3, r3, #1
 8017122:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017126:	9b05      	ldr	r3, [sp, #20]
 8017128:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801712c:	4602      	mov	r2, r0
 801712e:	4419      	add	r1, r3
 8017130:	4640      	mov	r0, r8
 8017132:	f7ff fe49 	bl	8016dc8 <prvInsertTimerInActiveList>
 8017136:	2800      	cmp	r0, #0
 8017138:	d0cf      	beq.n	80170da <prvTimerTask+0xe6>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801713a:	f8d8 3020 	ldr.w	r3, [r8, #32]
 801713e:	4640      	mov	r0, r8
 8017140:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017142:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 8017146:	f013 0f04 	tst.w	r3, #4
 801714a:	d0c6      	beq.n	80170da <prvTimerTask+0xe6>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801714c:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8017150:	9400      	str	r4, [sp, #0]
 8017152:	4623      	mov	r3, r4
 8017154:	9905      	ldr	r1, [sp, #20]
 8017156:	440a      	add	r2, r1
 8017158:	4621      	mov	r1, r4
 801715a:	4640      	mov	r0, r8
 801715c:	f7ff fec2 	bl	8016ee4 <xTimerGenericCommand>
							configASSERT( xResult );
 8017160:	2800      	cmp	r0, #0
 8017162:	d1ba      	bne.n	80170da <prvTimerTask+0xe6>
 8017164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017168:	f383 8811 	msr	BASEPRI, r3
 801716c:	f3bf 8f6f 	isb	sy
 8017170:	f3bf 8f4f 	dsb	sy
 8017174:	e7fe      	b.n	8017174 <prvTimerTask+0x180>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017176:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 801717a:	f023 0301 	bic.w	r3, r3, #1
 801717e:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
					break;
 8017182:	e7aa      	b.n	80170da <prvTimerTask+0xe6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017184:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 8017188:	f043 0301 	orr.w	r3, r3, #1
 801718c:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017190:	9905      	ldr	r1, [sp, #20]
 8017192:	f8c8 1018 	str.w	r1, [r8, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017196:	b131      	cbz	r1, 80171a6 <prvTimerTask+0x1b2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017198:	4603      	mov	r3, r0
 801719a:	4602      	mov	r2, r0
 801719c:	4401      	add	r1, r0
 801719e:	4640      	mov	r0, r8
 80171a0:	f7ff fe12 	bl	8016dc8 <prvInsertTimerInActiveList>
					break;
 80171a4:	e799      	b.n	80170da <prvTimerTask+0xe6>
 80171a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171aa:	f383 8811 	msr	BASEPRI, r3
 80171ae:	f3bf 8f6f 	isb	sy
 80171b2:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80171b6:	e7fe      	b.n	80171b6 <prvTimerTask+0x1c2>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80171b8:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 80171bc:	f013 0f02 	tst.w	r3, #2
 80171c0:	d004      	beq.n	80171cc <prvTimerTask+0x1d8>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80171c2:	f023 0301 	bic.w	r3, r3, #1
 80171c6:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
 80171ca:	e786      	b.n	80170da <prvTimerTask+0xe6>
							vPortFree( pxTimer );
 80171cc:	4640      	mov	r0, r8
 80171ce:	f000 faab 	bl	8017728 <vPortFree>
 80171d2:	e782      	b.n	80170da <prvTimerTask+0xe6>
 80171d4:	20001230 	.word	0x20001230
 80171d8:	20001354 	.word	0x20001354
 80171dc:	e000ed04 	.word	0xe000ed04
 80171e0:	20001234 	.word	0x20001234

080171e4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80171e4:	b510      	push	{r4, lr}
 80171e6:	b084      	sub	sp, #16
 80171e8:	4614      	mov	r4, r2
 80171ea:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80171ec:	f06f 0301 	mvn.w	r3, #1
 80171f0:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80171f2:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80171f4:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80171f6:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80171f8:	2300      	movs	r3, #0
 80171fa:	4669      	mov	r1, sp
 80171fc:	4802      	ldr	r0, [pc, #8]	; (8017208 <xTimerPendFunctionCallFromISR+0x24>)
 80171fe:	6800      	ldr	r0, [r0, #0]
 8017200:	f7fe fc80 	bl	8015b04 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8017204:	b004      	add	sp, #16
 8017206:	bd10      	pop	{r4, pc}
 8017208:	20001354 	.word	0x20001354

0801720c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801720c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 801720e:	2300      	movs	r3, #0
 8017210:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017212:	4b0d      	ldr	r3, [pc, #52]	; (8017248 <prvTaskExitError+0x3c>)
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	f1b3 3fff 	cmp.w	r3, #4294967295
 801721a:	d008      	beq.n	801722e <prvTaskExitError+0x22>
 801721c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017220:	f383 8811 	msr	BASEPRI, r3
 8017224:	f3bf 8f6f 	isb	sy
 8017228:	f3bf 8f4f 	dsb	sy
 801722c:	e7fe      	b.n	801722c <prvTaskExitError+0x20>
 801722e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017232:	f383 8811 	msr	BASEPRI, r3
 8017236:	f3bf 8f6f 	isb	sy
 801723a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801723e:	9b01      	ldr	r3, [sp, #4]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d0fc      	beq.n	801723e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017244:	b002      	add	sp, #8
 8017246:	4770      	bx	lr
 8017248:	20000178 	.word	0x20000178

0801724c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801724c:	4808      	ldr	r0, [pc, #32]	; (8017270 <prvPortStartFirstTask+0x24>)
 801724e:	6800      	ldr	r0, [r0, #0]
 8017250:	6800      	ldr	r0, [r0, #0]
 8017252:	f380 8808 	msr	MSP, r0
 8017256:	f04f 0000 	mov.w	r0, #0
 801725a:	f380 8814 	msr	CONTROL, r0
 801725e:	b662      	cpsie	i
 8017260:	b661      	cpsie	f
 8017262:	f3bf 8f4f 	dsb	sy
 8017266:	f3bf 8f6f 	isb	sy
 801726a:	df00      	svc	0
 801726c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801726e:	0000      	.short	0x0000
 8017270:	e000ed08 	.word	0xe000ed08

08017274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017274:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017284 <vPortEnableVFP+0x10>
 8017278:	6801      	ldr	r1, [r0, #0]
 801727a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801727e:	6001      	str	r1, [r0, #0]
 8017280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017282:	0000      	.short	0x0000
 8017284:	e000ed88 	.word	0xe000ed88

08017288 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801728c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017290:	f021 0101 	bic.w	r1, r1, #1
 8017294:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017298:	4b05      	ldr	r3, [pc, #20]	; (80172b0 <pxPortInitialiseStack+0x28>)
 801729a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801729e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80172a2:	f06f 0302 	mvn.w	r3, #2
 80172a6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80172aa:	3844      	subs	r0, #68	; 0x44
 80172ac:	4770      	bx	lr
 80172ae:	bf00      	nop
 80172b0:	0801720d 	.word	0x0801720d
	...

080172c0 <SVC_Handler>:
	__asm volatile (
 80172c0:	4b07      	ldr	r3, [pc, #28]	; (80172e0 <pxCurrentTCBConst2>)
 80172c2:	6819      	ldr	r1, [r3, #0]
 80172c4:	6808      	ldr	r0, [r1, #0]
 80172c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172ca:	f380 8809 	msr	PSP, r0
 80172ce:	f3bf 8f6f 	isb	sy
 80172d2:	f04f 0000 	mov.w	r0, #0
 80172d6:	f380 8811 	msr	BASEPRI, r0
 80172da:	4770      	bx	lr
 80172dc:	f3af 8000 	nop.w

080172e0 <pxCurrentTCBConst2>:
 80172e0:	20000d34 	.word	0x20000d34

080172e4 <vPortEnterCritical>:
 80172e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172e8:	f383 8811 	msr	BASEPRI, r3
 80172ec:	f3bf 8f6f 	isb	sy
 80172f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80172f4:	4a0a      	ldr	r2, [pc, #40]	; (8017320 <vPortEnterCritical+0x3c>)
 80172f6:	6813      	ldr	r3, [r2, #0]
 80172f8:	3301      	adds	r3, #1
 80172fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80172fc:	2b01      	cmp	r3, #1
 80172fe:	d000      	beq.n	8017302 <vPortEnterCritical+0x1e>
}
 8017300:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017302:	4b08      	ldr	r3, [pc, #32]	; (8017324 <vPortEnterCritical+0x40>)
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	f013 0fff 	tst.w	r3, #255	; 0xff
 801730a:	d0f9      	beq.n	8017300 <vPortEnterCritical+0x1c>
 801730c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017310:	f383 8811 	msr	BASEPRI, r3
 8017314:	f3bf 8f6f 	isb	sy
 8017318:	f3bf 8f4f 	dsb	sy
 801731c:	e7fe      	b.n	801731c <vPortEnterCritical+0x38>
 801731e:	bf00      	nop
 8017320:	20000178 	.word	0x20000178
 8017324:	e000ed04 	.word	0xe000ed04

08017328 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8017328:	4b09      	ldr	r3, [pc, #36]	; (8017350 <vPortExitCritical+0x28>)
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	b943      	cbnz	r3, 8017340 <vPortExitCritical+0x18>
 801732e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017332:	f383 8811 	msr	BASEPRI, r3
 8017336:	f3bf 8f6f 	isb	sy
 801733a:	f3bf 8f4f 	dsb	sy
 801733e:	e7fe      	b.n	801733e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8017340:	3b01      	subs	r3, #1
 8017342:	4a03      	ldr	r2, [pc, #12]	; (8017350 <vPortExitCritical+0x28>)
 8017344:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017346:	b90b      	cbnz	r3, 801734c <vPortExitCritical+0x24>
	__asm volatile
 8017348:	f383 8811 	msr	BASEPRI, r3
}
 801734c:	4770      	bx	lr
 801734e:	bf00      	nop
 8017350:	20000178 	.word	0x20000178
	...

08017360 <PendSV_Handler>:
	__asm volatile
 8017360:	f3ef 8009 	mrs	r0, PSP
 8017364:	f3bf 8f6f 	isb	sy
 8017368:	4b15      	ldr	r3, [pc, #84]	; (80173c0 <pxCurrentTCBConst>)
 801736a:	681a      	ldr	r2, [r3, #0]
 801736c:	f01e 0f10 	tst.w	lr, #16
 8017370:	bf08      	it	eq
 8017372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801737a:	6010      	str	r0, [r2, #0]
 801737c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8017384:	f380 8811 	msr	BASEPRI, r0
 8017388:	f3bf 8f4f 	dsb	sy
 801738c:	f3bf 8f6f 	isb	sy
 8017390:	f7ff fa78 	bl	8016884 <vTaskSwitchContext>
 8017394:	f04f 0000 	mov.w	r0, #0
 8017398:	f380 8811 	msr	BASEPRI, r0
 801739c:	bc09      	pop	{r0, r3}
 801739e:	6819      	ldr	r1, [r3, #0]
 80173a0:	6808      	ldr	r0, [r1, #0]
 80173a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173a6:	f01e 0f10 	tst.w	lr, #16
 80173aa:	bf08      	it	eq
 80173ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80173b0:	f380 8809 	msr	PSP, r0
 80173b4:	f3bf 8f6f 	isb	sy
 80173b8:	4770      	bx	lr
 80173ba:	bf00      	nop
 80173bc:	f3af 8000 	nop.w

080173c0 <pxCurrentTCBConst>:
 80173c0:	20000d34 	.word	0x20000d34

080173c4 <xPortSysTickHandler>:
{
 80173c4:	b508      	push	{r3, lr}
	__asm volatile
 80173c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173ca:	f383 8811 	msr	BASEPRI, r3
 80173ce:	f3bf 8f6f 	isb	sy
 80173d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80173d6:	f7ff f8c3 	bl	8016560 <xTaskIncrementTick>
 80173da:	b118      	cbz	r0, 80173e4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80173dc:	4b03      	ldr	r3, [pc, #12]	; (80173ec <xPortSysTickHandler+0x28>)
 80173de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80173e2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80173e4:	2300      	movs	r3, #0
 80173e6:	f383 8811 	msr	BASEPRI, r3
}
 80173ea:	bd08      	pop	{r3, pc}
 80173ec:	e000ed04 	.word	0xe000ed04

080173f0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80173f0:	4a08      	ldr	r2, [pc, #32]	; (8017414 <vPortSetupTimerInterrupt+0x24>)
 80173f2:	2300      	movs	r3, #0
 80173f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80173f6:	4908      	ldr	r1, [pc, #32]	; (8017418 <vPortSetupTimerInterrupt+0x28>)
 80173f8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80173fa:	4b08      	ldr	r3, [pc, #32]	; (801741c <vPortSetupTimerInterrupt+0x2c>)
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	4908      	ldr	r1, [pc, #32]	; (8017420 <vPortSetupTimerInterrupt+0x30>)
 8017400:	fba1 1303 	umull	r1, r3, r1, r3
 8017404:	099b      	lsrs	r3, r3, #6
 8017406:	3b01      	subs	r3, #1
 8017408:	4906      	ldr	r1, [pc, #24]	; (8017424 <vPortSetupTimerInterrupt+0x34>)
 801740a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801740c:	2307      	movs	r3, #7
 801740e:	6013      	str	r3, [r2, #0]
}
 8017410:	4770      	bx	lr
 8017412:	bf00      	nop
 8017414:	e000e010 	.word	0xe000e010
 8017418:	e000e018 	.word	0xe000e018
 801741c:	20000004 	.word	0x20000004
 8017420:	10624dd3 	.word	0x10624dd3
 8017424:	e000e014 	.word	0xe000e014

08017428 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017428:	4b3b      	ldr	r3, [pc, #236]	; (8017518 <xPortStartScheduler+0xf0>)
 801742a:	681a      	ldr	r2, [r3, #0]
 801742c:	4b3b      	ldr	r3, [pc, #236]	; (801751c <xPortStartScheduler+0xf4>)
 801742e:	429a      	cmp	r2, r3
 8017430:	d039      	beq.n	80174a6 <xPortStartScheduler+0x7e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8017432:	4b39      	ldr	r3, [pc, #228]	; (8017518 <xPortStartScheduler+0xf0>)
 8017434:	681a      	ldr	r2, [r3, #0]
 8017436:	4b3a      	ldr	r3, [pc, #232]	; (8017520 <xPortStartScheduler+0xf8>)
 8017438:	429a      	cmp	r2, r3
 801743a:	d03d      	beq.n	80174b8 <xPortStartScheduler+0x90>
{
 801743c:	b510      	push	{r4, lr}
 801743e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017440:	4b38      	ldr	r3, [pc, #224]	; (8017524 <xPortStartScheduler+0xfc>)
 8017442:	781a      	ldrb	r2, [r3, #0]
 8017444:	b2d2      	uxtb	r2, r2
 8017446:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017448:	22ff      	movs	r2, #255	; 0xff
 801744a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801744c:	781b      	ldrb	r3, [r3, #0]
 801744e:	b2db      	uxtb	r3, r3
 8017450:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017454:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8017458:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801745c:	4a32      	ldr	r2, [pc, #200]	; (8017528 <xPortStartScheduler+0x100>)
 801745e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017460:	4b32      	ldr	r3, [pc, #200]	; (801752c <xPortStartScheduler+0x104>)
 8017462:	2207      	movs	r2, #7
 8017464:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017466:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801746a:	f013 0f80 	tst.w	r3, #128	; 0x80
 801746e:	d011      	beq.n	8017494 <xPortStartScheduler+0x6c>
 8017470:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017472:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8017476:	005b      	lsls	r3, r3, #1
 8017478:	b2db      	uxtb	r3, r3
 801747a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801747e:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8017482:	4613      	mov	r3, r2
 8017484:	3a01      	subs	r2, #1
 8017486:	f011 0f80 	tst.w	r1, #128	; 0x80
 801748a:	d1f2      	bne.n	8017472 <xPortStartScheduler+0x4a>
 801748c:	4a27      	ldr	r2, [pc, #156]	; (801752c <xPortStartScheduler+0x104>)
 801748e:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017490:	2b03      	cmp	r3, #3
 8017492:	d01a      	beq.n	80174ca <xPortStartScheduler+0xa2>
	__asm volatile
 8017494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017498:	f383 8811 	msr	BASEPRI, r3
 801749c:	f3bf 8f6f 	isb	sy
 80174a0:	f3bf 8f4f 	dsb	sy
 80174a4:	e7fe      	b.n	80174a4 <xPortStartScheduler+0x7c>
 80174a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174aa:	f383 8811 	msr	BASEPRI, r3
 80174ae:	f3bf 8f6f 	isb	sy
 80174b2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80174b6:	e7fe      	b.n	80174b6 <xPortStartScheduler+0x8e>
 80174b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174bc:	f383 8811 	msr	BASEPRI, r3
 80174c0:	f3bf 8f6f 	isb	sy
 80174c4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80174c8:	e7fe      	b.n	80174c8 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80174ca:	4b18      	ldr	r3, [pc, #96]	; (801752c <xPortStartScheduler+0x104>)
 80174cc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80174d0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80174d2:	9b01      	ldr	r3, [sp, #4]
 80174d4:	b2db      	uxtb	r3, r3
 80174d6:	4a13      	ldr	r2, [pc, #76]	; (8017524 <xPortStartScheduler+0xfc>)
 80174d8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80174da:	4b15      	ldr	r3, [pc, #84]	; (8017530 <xPortStartScheduler+0x108>)
 80174dc:	681a      	ldr	r2, [r3, #0]
 80174de:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80174e2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80174e4:	681a      	ldr	r2, [r3, #0]
 80174e6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80174ea:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80174ec:	f7ff ff80 	bl	80173f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80174f0:	2400      	movs	r4, #0
 80174f2:	4b10      	ldr	r3, [pc, #64]	; (8017534 <xPortStartScheduler+0x10c>)
 80174f4:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80174f6:	f7ff febd 	bl	8017274 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80174fa:	4a0f      	ldr	r2, [pc, #60]	; (8017538 <xPortStartScheduler+0x110>)
 80174fc:	6813      	ldr	r3, [r2, #0]
 80174fe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8017502:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8017504:	f7ff fea2 	bl	801724c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8017508:	f7ff f9bc 	bl	8016884 <vTaskSwitchContext>
	prvTaskExitError();
 801750c:	f7ff fe7e 	bl	801720c <prvTaskExitError>
}
 8017510:	4620      	mov	r0, r4
 8017512:	b002      	add	sp, #8
 8017514:	bd10      	pop	{r4, pc}
 8017516:	bf00      	nop
 8017518:	e000ed00 	.word	0xe000ed00
 801751c:	410fc271 	.word	0x410fc271
 8017520:	410fc270 	.word	0x410fc270
 8017524:	e000e400 	.word	0xe000e400
 8017528:	2000135c 	.word	0x2000135c
 801752c:	20001360 	.word	0x20001360
 8017530:	e000ed20 	.word	0xe000ed20
 8017534:	20000178 	.word	0x20000178
 8017538:	e000ef34 	.word	0xe000ef34

0801753c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801753c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017540:	2b0f      	cmp	r3, #15
 8017542:	d90f      	bls.n	8017564 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017544:	4a10      	ldr	r2, [pc, #64]	; (8017588 <vPortValidateInterruptPriority+0x4c>)
 8017546:	5c9b      	ldrb	r3, [r3, r2]
 8017548:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801754a:	4a10      	ldr	r2, [pc, #64]	; (801758c <vPortValidateInterruptPriority+0x50>)
 801754c:	7812      	ldrb	r2, [r2, #0]
 801754e:	429a      	cmp	r2, r3
 8017550:	d908      	bls.n	8017564 <vPortValidateInterruptPriority+0x28>
 8017552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017556:	f383 8811 	msr	BASEPRI, r3
 801755a:	f3bf 8f6f 	isb	sy
 801755e:	f3bf 8f4f 	dsb	sy
 8017562:	e7fe      	b.n	8017562 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017564:	4b0a      	ldr	r3, [pc, #40]	; (8017590 <vPortValidateInterruptPriority+0x54>)
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801756c:	4a09      	ldr	r2, [pc, #36]	; (8017594 <vPortValidateInterruptPriority+0x58>)
 801756e:	6812      	ldr	r2, [r2, #0]
 8017570:	4293      	cmp	r3, r2
 8017572:	d908      	bls.n	8017586 <vPortValidateInterruptPriority+0x4a>
 8017574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017578:	f383 8811 	msr	BASEPRI, r3
 801757c:	f3bf 8f6f 	isb	sy
 8017580:	f3bf 8f4f 	dsb	sy
 8017584:	e7fe      	b.n	8017584 <vPortValidateInterruptPriority+0x48>
	}
 8017586:	4770      	bx	lr
 8017588:	e000e3f0 	.word	0xe000e3f0
 801758c:	2000135c 	.word	0x2000135c
 8017590:	e000ed0c 	.word	0xe000ed0c
 8017594:	20001360 	.word	0x20001360

08017598 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017598:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801759a:	4b13      	ldr	r3, [pc, #76]	; (80175e8 <prvInsertBlockIntoFreeList+0x50>)
 801759c:	461a      	mov	r2, r3
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	4283      	cmp	r3, r0
 80175a2:	d3fb      	bcc.n	801759c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80175a4:	6851      	ldr	r1, [r2, #4]
 80175a6:	1854      	adds	r4, r2, r1
 80175a8:	42a0      	cmp	r0, r4
 80175aa:	d00a      	beq.n	80175c2 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80175ac:	6841      	ldr	r1, [r0, #4]
 80175ae:	1844      	adds	r4, r0, r1
 80175b0:	42a3      	cmp	r3, r4
 80175b2:	d00b      	beq.n	80175cc <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80175b4:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80175b6:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80175b8:	bf18      	it	ne
 80175ba:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80175bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175c0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80175c2:	6840      	ldr	r0, [r0, #4]
 80175c4:	4401      	add	r1, r0
 80175c6:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80175c8:	4610      	mov	r0, r2
 80175ca:	e7ef      	b.n	80175ac <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80175cc:	4c07      	ldr	r4, [pc, #28]	; (80175ec <prvInsertBlockIntoFreeList+0x54>)
 80175ce:	6824      	ldr	r4, [r4, #0]
 80175d0:	42a3      	cmp	r3, r4
 80175d2:	d006      	beq.n	80175e2 <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80175d4:	685b      	ldr	r3, [r3, #4]
 80175d6:	4419      	add	r1, r3
 80175d8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80175da:	6813      	ldr	r3, [r2, #0]
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	6003      	str	r3, [r0, #0]
 80175e0:	e7e9      	b.n	80175b6 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80175e2:	6004      	str	r4, [r0, #0]
 80175e4:	e7e7      	b.n	80175b6 <prvInsertBlockIntoFreeList+0x1e>
 80175e6:	bf00      	nop
 80175e8:	20004f7c 	.word	0x20004f7c
 80175ec:	20001364 	.word	0x20001364

080175f0 <pvPortMalloc>:
{
 80175f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175f2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80175f4:	f7fe ff9e 	bl	8016534 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80175f8:	4b44      	ldr	r3, [pc, #272]	; (801770c <pvPortMalloc+0x11c>)
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	b1b3      	cbz	r3, 801762c <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80175fe:	4b44      	ldr	r3, [pc, #272]	; (8017710 <pvPortMalloc+0x120>)
 8017600:	681e      	ldr	r6, [r3, #0]
 8017602:	4226      	tst	r6, r4
 8017604:	d17d      	bne.n	8017702 <pvPortMalloc+0x112>
			if( xWantedSize > 0 )
 8017606:	2c00      	cmp	r4, #0
 8017608:	d07b      	beq.n	8017702 <pvPortMalloc+0x112>
				xWantedSize += xHeapStructSize;
 801760a:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801760e:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017612:	bf1c      	itt	ne
 8017614:	f023 0307 	bicne.w	r3, r3, #7
 8017618:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801761a:	2b00      	cmp	r3, #0
 801761c:	d071      	beq.n	8017702 <pvPortMalloc+0x112>
 801761e:	4a3d      	ldr	r2, [pc, #244]	; (8017714 <pvPortMalloc+0x124>)
 8017620:	6815      	ldr	r5, [r2, #0]
 8017622:	429d      	cmp	r5, r3
 8017624:	d36d      	bcc.n	8017702 <pvPortMalloc+0x112>
				pxBlock = xStart.pxNextFreeBlock;
 8017626:	4a3c      	ldr	r2, [pc, #240]	; (8017718 <pvPortMalloc+0x128>)
 8017628:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801762a:	e027      	b.n	801767c <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 801762c:	4a3b      	ldr	r2, [pc, #236]	; (801771c <pvPortMalloc+0x12c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801762e:	f012 0f07 	tst.w	r2, #7
 8017632:	d01e      	beq.n	8017672 <pvPortMalloc+0x82>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017634:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017636:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801763a:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
 801763e:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017640:	460a      	mov	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017642:	4835      	ldr	r0, [pc, #212]	; (8017718 <pvPortMalloc+0x128>)
 8017644:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017646:	2100      	movs	r1, #0
 8017648:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801764a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 801764c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801764e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8017652:	482e      	ldr	r0, [pc, #184]	; (801770c <pvPortMalloc+0x11c>)
 8017654:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8017656:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017658:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801765a:	1a99      	subs	r1, r3, r2
 801765c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801765e:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017660:	4b2f      	ldr	r3, [pc, #188]	; (8017720 <pvPortMalloc+0x130>)
 8017662:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017664:	4b2b      	ldr	r3, [pc, #172]	; (8017714 <pvPortMalloc+0x124>)
 8017666:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017668:	4b29      	ldr	r3, [pc, #164]	; (8017710 <pvPortMalloc+0x120>)
 801766a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801766e:	601a      	str	r2, [r3, #0]
}
 8017670:	e7c5      	b.n	80175fe <pvPortMalloc+0xe>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017672:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8017676:	e7e4      	b.n	8017642 <pvPortMalloc+0x52>
 8017678:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 801767a:	460c      	mov	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801767c:	6861      	ldr	r1, [r4, #4]
 801767e:	4299      	cmp	r1, r3
 8017680:	d202      	bcs.n	8017688 <pvPortMalloc+0x98>
 8017682:	6821      	ldr	r1, [r4, #0]
 8017684:	2900      	cmp	r1, #0
 8017686:	d1f7      	bne.n	8017678 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 8017688:	4920      	ldr	r1, [pc, #128]	; (801770c <pvPortMalloc+0x11c>)
 801768a:	6809      	ldr	r1, [r1, #0]
 801768c:	42a1      	cmp	r1, r4
 801768e:	d038      	beq.n	8017702 <pvPortMalloc+0x112>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017690:	6817      	ldr	r7, [r2, #0]
 8017692:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017694:	6821      	ldr	r1, [r4, #0]
 8017696:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017698:	6862      	ldr	r2, [r4, #4]
 801769a:	1ad2      	subs	r2, r2, r3
 801769c:	2a10      	cmp	r2, #16
 801769e:	d910      	bls.n	80176c2 <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80176a0:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80176a2:	f010 0f07 	tst.w	r0, #7
 80176a6:	d008      	beq.n	80176ba <pvPortMalloc+0xca>
 80176a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176ac:	f383 8811 	msr	BASEPRI, r3
 80176b0:	f3bf 8f6f 	isb	sy
 80176b4:	f3bf 8f4f 	dsb	sy
 80176b8:	e7fe      	b.n	80176b8 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80176ba:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80176bc:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80176be:	f7ff ff6b 	bl	8017598 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80176c2:	6862      	ldr	r2, [r4, #4]
 80176c4:	1aad      	subs	r5, r5, r2
 80176c6:	4913      	ldr	r1, [pc, #76]	; (8017714 <pvPortMalloc+0x124>)
 80176c8:	600d      	str	r5, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80176ca:	4915      	ldr	r1, [pc, #84]	; (8017720 <pvPortMalloc+0x130>)
 80176cc:	6809      	ldr	r1, [r1, #0]
 80176ce:	428d      	cmp	r5, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80176d0:	bf3c      	itt	cc
 80176d2:	4913      	ldrcc	r1, [pc, #76]	; (8017720 <pvPortMalloc+0x130>)
 80176d4:	600d      	strcc	r5, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80176d6:	4316      	orrs	r6, r2
 80176d8:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80176da:	2300      	movs	r3, #0
 80176dc:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 80176de:	4a11      	ldr	r2, [pc, #68]	; (8017724 <pvPortMalloc+0x134>)
 80176e0:	6813      	ldr	r3, [r2, #0]
 80176e2:	3301      	adds	r3, #1
 80176e4:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 80176e6:	f7fe ffd3 	bl	8016690 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80176ea:	f017 0f07 	tst.w	r7, #7
 80176ee:	d00b      	beq.n	8017708 <pvPortMalloc+0x118>
 80176f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176f4:	f383 8811 	msr	BASEPRI, r3
 80176f8:	f3bf 8f6f 	isb	sy
 80176fc:	f3bf 8f4f 	dsb	sy
 8017700:	e7fe      	b.n	8017700 <pvPortMalloc+0x110>
	( void ) xTaskResumeAll();
 8017702:	f7fe ffc5 	bl	8016690 <xTaskResumeAll>
 8017706:	2700      	movs	r7, #0
}
 8017708:	4638      	mov	r0, r7
 801770a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801770c:	20001364 	.word	0x20001364
 8017710:	20004f68 	.word	0x20004f68
 8017714:	20004f6c 	.word	0x20004f6c
 8017718:	20004f7c 	.word	0x20004f7c
 801771c:	20001368 	.word	0x20001368
 8017720:	20004f70 	.word	0x20004f70
 8017724:	20004f74 	.word	0x20004f74

08017728 <vPortFree>:
	if( pv != NULL )
 8017728:	2800      	cmp	r0, #0
 801772a:	d033      	beq.n	8017794 <vPortFree+0x6c>
{
 801772c:	b510      	push	{r4, lr}
 801772e:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017730:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017734:	4a18      	ldr	r2, [pc, #96]	; (8017798 <vPortFree+0x70>)
 8017736:	6812      	ldr	r2, [r2, #0]
 8017738:	4213      	tst	r3, r2
 801773a:	d108      	bne.n	801774e <vPortFree+0x26>
 801773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017740:	f383 8811 	msr	BASEPRI, r3
 8017744:	f3bf 8f6f 	isb	sy
 8017748:	f3bf 8f4f 	dsb	sy
 801774c:	e7fe      	b.n	801774c <vPortFree+0x24>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801774e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8017752:	b141      	cbz	r1, 8017766 <vPortFree+0x3e>
 8017754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017758:	f383 8811 	msr	BASEPRI, r3
 801775c:	f3bf 8f6f 	isb	sy
 8017760:	f3bf 8f4f 	dsb	sy
 8017764:	e7fe      	b.n	8017764 <vPortFree+0x3c>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017766:	ea23 0302 	bic.w	r3, r3, r2
 801776a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 801776e:	f7fe fee1 	bl	8016534 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017772:	4a0a      	ldr	r2, [pc, #40]	; (801779c <vPortFree+0x74>)
 8017774:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017778:	6811      	ldr	r1, [r2, #0]
 801777a:	440b      	add	r3, r1
 801777c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801777e:	f1a4 0008 	sub.w	r0, r4, #8
 8017782:	f7ff ff09 	bl	8017598 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8017786:	4a06      	ldr	r2, [pc, #24]	; (80177a0 <vPortFree+0x78>)
 8017788:	6813      	ldr	r3, [r2, #0]
 801778a:	3301      	adds	r3, #1
 801778c:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 801778e:	f7fe ff7f 	bl	8016690 <xTaskResumeAll>
}
 8017792:	bd10      	pop	{r4, pc}
 8017794:	4770      	bx	lr
 8017796:	bf00      	nop
 8017798:	20004f68 	.word	0x20004f68
 801779c:	20004f6c 	.word	0x20004f6c
 80177a0:	20004f78 	.word	0x20004f78

080177a4 <MX_USB_DEVICE_Init>:
 80177a4:	b508      	push	{r3, lr}
 80177a6:	2200      	movs	r2, #0
 80177a8:	490f      	ldr	r1, [pc, #60]	; (80177e8 <MX_USB_DEVICE_Init+0x44>)
 80177aa:	4810      	ldr	r0, [pc, #64]	; (80177ec <MX_USB_DEVICE_Init+0x48>)
 80177ac:	f7fc fe73 	bl	8014496 <USBD_Init>
 80177b0:	b970      	cbnz	r0, 80177d0 <MX_USB_DEVICE_Init+0x2c>
 80177b2:	490f      	ldr	r1, [pc, #60]	; (80177f0 <MX_USB_DEVICE_Init+0x4c>)
 80177b4:	480d      	ldr	r0, [pc, #52]	; (80177ec <MX_USB_DEVICE_Init+0x48>)
 80177b6:	f7fc fea1 	bl	80144fc <USBD_RegisterClass>
 80177ba:	b960      	cbnz	r0, 80177d6 <MX_USB_DEVICE_Init+0x32>
 80177bc:	490d      	ldr	r1, [pc, #52]	; (80177f4 <MX_USB_DEVICE_Init+0x50>)
 80177be:	480b      	ldr	r0, [pc, #44]	; (80177ec <MX_USB_DEVICE_Init+0x48>)
 80177c0:	f7fc fe1b 	bl	80143fa <USBD_CDC_RegisterInterface>
 80177c4:	b950      	cbnz	r0, 80177dc <MX_USB_DEVICE_Init+0x38>
 80177c6:	4809      	ldr	r0, [pc, #36]	; (80177ec <MX_USB_DEVICE_Init+0x48>)
 80177c8:	f7fc feaf 	bl	801452a <USBD_Start>
 80177cc:	b948      	cbnz	r0, 80177e2 <MX_USB_DEVICE_Init+0x3e>
 80177ce:	bd08      	pop	{r3, pc}
 80177d0:	f7f7 fee3 	bl	800f59a <Error_Handler>
 80177d4:	e7ed      	b.n	80177b2 <MX_USB_DEVICE_Init+0xe>
 80177d6:	f7f7 fee0 	bl	800f59a <Error_Handler>
 80177da:	e7ef      	b.n	80177bc <MX_USB_DEVICE_Init+0x18>
 80177dc:	f7f7 fedd 	bl	800f59a <Error_Handler>
 80177e0:	e7f1      	b.n	80177c6 <MX_USB_DEVICE_Init+0x22>
 80177e2:	f7f7 feda 	bl	800f59a <Error_Handler>
 80177e6:	e7f2      	b.n	80177ce <MX_USB_DEVICE_Init+0x2a>
 80177e8:	20000190 	.word	0x20000190
 80177ec:	20008140 	.word	0x20008140
 80177f0:	20000068 	.word	0x20000068
 80177f4:	2000017c 	.word	0x2000017c

080177f8 <MX_USB_DEVICE_DeInit>:
 80177f8:	b508      	push	{r3, lr}
 80177fa:	4804      	ldr	r0, [pc, #16]	; (801780c <MX_USB_DEVICE_DeInit+0x14>)
 80177fc:	f7fc fe62 	bl	80144c4 <USBD_DeInit>
 8017800:	b900      	cbnz	r0, 8017804 <MX_USB_DEVICE_DeInit+0xc>
 8017802:	bd08      	pop	{r3, pc}
 8017804:	f7f7 fec9 	bl	800f59a <Error_Handler>
 8017808:	e7fb      	b.n	8017802 <MX_USB_DEVICE_DeInit+0xa>
 801780a:	bf00      	nop
 801780c:	20008140 	.word	0x20008140

08017810 <CDC_Control_FS>:
 8017810:	2821      	cmp	r0, #33	; 0x21
 8017812:	d001      	beq.n	8017818 <CDC_Control_FS+0x8>
 8017814:	2000      	movs	r0, #0
 8017816:	4770      	bx	lr
 8017818:	2300      	movs	r3, #0
 801781a:	700b      	strb	r3, [r1, #0]
 801781c:	22c2      	movs	r2, #194	; 0xc2
 801781e:	704a      	strb	r2, [r1, #1]
 8017820:	2201      	movs	r2, #1
 8017822:	708a      	strb	r2, [r1, #2]
 8017824:	70cb      	strb	r3, [r1, #3]
 8017826:	710b      	strb	r3, [r1, #4]
 8017828:	714b      	strb	r3, [r1, #5]
 801782a:	2308      	movs	r3, #8
 801782c:	718b      	strb	r3, [r1, #6]
 801782e:	e7f1      	b.n	8017814 <CDC_Control_FS+0x4>

08017830 <CDC_TransmitCplt_FS>:
 8017830:	2000      	movs	r0, #0
 8017832:	4770      	bx	lr

08017834 <CDC_Receive_FS>:
 8017834:	b538      	push	{r3, r4, r5, lr}
 8017836:	4604      	mov	r4, r0
 8017838:	680a      	ldr	r2, [r1, #0]
 801783a:	b94a      	cbnz	r2, 8017850 <CDC_Receive_FS+0x1c>
 801783c:	4d07      	ldr	r5, [pc, #28]	; (801785c <CDC_Receive_FS+0x28>)
 801783e:	4621      	mov	r1, r4
 8017840:	4628      	mov	r0, r5
 8017842:	f7fc fdec 	bl	801441e <USBD_CDC_SetRxBuffer>
 8017846:	4628      	mov	r0, r5
 8017848:	f7fc fe0c 	bl	8014464 <USBD_CDC_ReceivePacket>
 801784c:	2000      	movs	r0, #0
 801784e:	bd38      	pop	{r3, r4, r5, pc}
 8017850:	4601      	mov	r1, r0
 8017852:	4803      	ldr	r0, [pc, #12]	; (8017860 <CDC_Receive_FS+0x2c>)
 8017854:	f7f8 fbc0 	bl	800ffd8 <fifo_write_bytes>
 8017858:	e7f0      	b.n	801783c <CDC_Receive_FS+0x8>
 801785a:	bf00      	nop
 801785c:	20008140 	.word	0x20008140
 8017860:	200053b0 	.word	0x200053b0

08017864 <CDC_DeInit_FS>:
 8017864:	b508      	push	{r3, lr}
 8017866:	4802      	ldr	r0, [pc, #8]	; (8017870 <CDC_DeInit_FS+0xc>)
 8017868:	f7fb fa0a 	bl	8012c80 <HAL_TIM_Base_DeInit>
 801786c:	2000      	movs	r0, #0
 801786e:	bd08      	pop	{r3, pc}
 8017870:	20008694 	.word	0x20008694

08017874 <CDC_Init_FS>:
 8017874:	b510      	push	{r4, lr}
 8017876:	b082      	sub	sp, #8
 8017878:	2200      	movs	r2, #0
 801787a:	9201      	str	r2, [sp, #4]
 801787c:	4b1f      	ldr	r3, [pc, #124]	; (80178fc <CDC_Init_FS+0x88>)
 801787e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8017880:	f041 0108 	orr.w	r1, r1, #8
 8017884:	6419      	str	r1, [r3, #64]	; 0x40
 8017886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017888:	f003 0308 	and.w	r3, r3, #8
 801788c:	9301      	str	r3, [sp, #4]
 801788e:	9b01      	ldr	r3, [sp, #4]
 8017890:	481b      	ldr	r0, [pc, #108]	; (8017900 <CDC_Init_FS+0x8c>)
 8017892:	4b1c      	ldr	r3, [pc, #112]	; (8017904 <CDC_Init_FS+0x90>)
 8017894:	6003      	str	r3, [r0, #0]
 8017896:	f240 73cf 	movw	r3, #1999	; 0x7cf
 801789a:	60c3      	str	r3, [r0, #12]
 801789c:	4b1a      	ldr	r3, [pc, #104]	; (8017908 <CDC_Init_FS+0x94>)
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	491a      	ldr	r1, [pc, #104]	; (801790c <CDC_Init_FS+0x98>)
 80178a2:	fba1 1303 	umull	r1, r3, r1, r3
 80178a6:	0cdb      	lsrs	r3, r3, #19
 80178a8:	3b01      	subs	r3, #1
 80178aa:	6043      	str	r3, [r0, #4]
 80178ac:	6102      	str	r2, [r0, #16]
 80178ae:	6082      	str	r2, [r0, #8]
 80178b0:	f7fb fba6 	bl	8013000 <HAL_TIM_Base_Init>
 80178b4:	b9e0      	cbnz	r0, 80178f0 <CDC_Init_FS+0x7c>
 80178b6:	2200      	movs	r2, #0
 80178b8:	4611      	mov	r1, r2
 80178ba:	2032      	movs	r0, #50	; 0x32
 80178bc:	f7f9 f884 	bl	80109c8 <HAL_NVIC_SetPriority>
 80178c0:	2032      	movs	r0, #50	; 0x32
 80178c2:	f7f9 f8b3 	bl	8010a2c <HAL_NVIC_EnableIRQ>
 80178c6:	480e      	ldr	r0, [pc, #56]	; (8017900 <CDC_Init_FS+0x8c>)
 80178c8:	f7fb fa0a 	bl	8012ce0 <HAL_TIM_Base_Start_IT>
 80178cc:	b998      	cbnz	r0, 80178f6 <CDC_Init_FS+0x82>
 80178ce:	4c10      	ldr	r4, [pc, #64]	; (8017910 <CDC_Init_FS+0x9c>)
 80178d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80178d4:	490f      	ldr	r1, [pc, #60]	; (8017914 <CDC_Init_FS+0xa0>)
 80178d6:	4620      	mov	r0, r4
 80178d8:	f7fc fd96 	bl	8014408 <USBD_CDC_SetTxBuffer>
 80178dc:	490e      	ldr	r1, [pc, #56]	; (8017918 <CDC_Init_FS+0xa4>)
 80178de:	4620      	mov	r0, r4
 80178e0:	f7fc fd9d 	bl	801441e <USBD_CDC_SetRxBuffer>
 80178e4:	4b0d      	ldr	r3, [pc, #52]	; (801791c <CDC_Init_FS+0xa8>)
 80178e6:	2201      	movs	r2, #1
 80178e8:	701a      	strb	r2, [r3, #0]
 80178ea:	2000      	movs	r0, #0
 80178ec:	b002      	add	sp, #8
 80178ee:	bd10      	pop	{r4, pc}
 80178f0:	f7f7 fe53 	bl	800f59a <Error_Handler>
 80178f4:	e7df      	b.n	80178b6 <CDC_Init_FS+0x42>
 80178f6:	f7f7 fe50 	bl	800f59a <Error_Handler>
 80178fa:	e7e8      	b.n	80178ce <CDC_Init_FS+0x5a>
 80178fc:	40023800 	.word	0x40023800
 8017900:	20008694 	.word	0x20008694
 8017904:	40000c00 	.word	0x40000c00
 8017908:	20000004 	.word	0x20000004
 801790c:	431bde83 	.word	0x431bde83
 8017910:	20008140 	.word	0x20008140
 8017914:	20008450 	.word	0x20008450
 8017918:	20008410 	.word	0x20008410
 801791c:	20004f84 	.word	0x20004f84

08017920 <TIM5_IRQHandler>:
 8017920:	b508      	push	{r3, lr}
 8017922:	4802      	ldr	r0, [pc, #8]	; (801792c <TIM5_IRQHandler+0xc>)
 8017924:	f7fb fa4b 	bl	8012dbe <HAL_TIM_IRQHandler>
 8017928:	bd08      	pop	{r3, pc}
 801792a:	bf00      	nop
 801792c:	20008694 	.word	0x20008694

08017930 <CDC_Transmit_Elapsed>:
 8017930:	b538      	push	{r3, r4, r5, lr}
 8017932:	4b0f      	ldr	r3, [pc, #60]	; (8017970 <CDC_Transmit_Elapsed+0x40>)
 8017934:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017938:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801793c:	b103      	cbz	r3, 8017940 <CDC_Transmit_Elapsed+0x10>
 801793e:	bd38      	pop	{r3, r4, r5, pc}
 8017940:	480c      	ldr	r0, [pc, #48]	; (8017974 <CDC_Transmit_Elapsed+0x44>)
 8017942:	f7f8 fabb 	bl	800febc <fifo_get_length>
 8017946:	4604      	mov	r4, r0
 8017948:	2800      	cmp	r0, #0
 801794a:	d0f8      	beq.n	801793e <CDC_Transmit_Elapsed+0xe>
 801794c:	4602      	mov	r2, r0
 801794e:	490a      	ldr	r1, [pc, #40]	; (8017978 <CDC_Transmit_Elapsed+0x48>)
 8017950:	4808      	ldr	r0, [pc, #32]	; (8017974 <CDC_Transmit_Elapsed+0x44>)
 8017952:	f7f8 fafa 	bl	800ff4a <fifo_read_bytes>
 8017956:	2800      	cmp	r0, #0
 8017958:	d0f1      	beq.n	801793e <CDC_Transmit_Elapsed+0xe>
 801795a:	4d05      	ldr	r5, [pc, #20]	; (8017970 <CDC_Transmit_Elapsed+0x40>)
 801795c:	4622      	mov	r2, r4
 801795e:	4906      	ldr	r1, [pc, #24]	; (8017978 <CDC_Transmit_Elapsed+0x48>)
 8017960:	4628      	mov	r0, r5
 8017962:	f7fc fd51 	bl	8014408 <USBD_CDC_SetTxBuffer>
 8017966:	4628      	mov	r0, r5
 8017968:	f7fc fd62 	bl	8014430 <USBD_CDC_TransmitPacket>
 801796c:	e7e7      	b.n	801793e <CDC_Transmit_Elapsed+0xe>
 801796e:	bf00      	nop
 8017970:	20008140 	.word	0x20008140
 8017974:	20005614 	.word	0x20005614
 8017978:	20008450 	.word	0x20008450

0801797c <USBD_FS_DeviceDescriptor>:
 801797c:	2312      	movs	r3, #18
 801797e:	800b      	strh	r3, [r1, #0]
 8017980:	4800      	ldr	r0, [pc, #0]	; (8017984 <USBD_FS_DeviceDescriptor+0x8>)
 8017982:	4770      	bx	lr
 8017984:	200001ac 	.word	0x200001ac

08017988 <USBD_FS_LangIDStrDescriptor>:
 8017988:	2304      	movs	r3, #4
 801798a:	800b      	strh	r3, [r1, #0]
 801798c:	4800      	ldr	r0, [pc, #0]	; (8017990 <USBD_FS_LangIDStrDescriptor+0x8>)
 801798e:	4770      	bx	lr
 8017990:	200001c0 	.word	0x200001c0

08017994 <IntToUnicode>:
 8017994:	b1aa      	cbz	r2, 80179c2 <IntToUnicode+0x2e>
 8017996:	b470      	push	{r4, r5, r6}
 8017998:	4614      	mov	r4, r2
 801799a:	2300      	movs	r3, #0
 801799c:	1c4e      	adds	r6, r1, #1
 801799e:	461d      	mov	r5, r3
 80179a0:	0f02      	lsrs	r2, r0, #28
 80179a2:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 80179a6:	bf34      	ite	cc
 80179a8:	3230      	addcc	r2, #48	; 0x30
 80179aa:	3237      	addcs	r2, #55	; 0x37
 80179ac:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
 80179b0:	0100      	lsls	r0, r0, #4
 80179b2:	f806 5013 	strb.w	r5, [r6, r3, lsl #1]
 80179b6:	3301      	adds	r3, #1
 80179b8:	b2da      	uxtb	r2, r3
 80179ba:	42a2      	cmp	r2, r4
 80179bc:	d3f0      	bcc.n	80179a0 <IntToUnicode+0xc>
 80179be:	bc70      	pop	{r4, r5, r6}
 80179c0:	4770      	bx	lr
 80179c2:	4770      	bx	lr

080179c4 <USBD_FS_SerialStrDescriptor>:
 80179c4:	b538      	push	{r3, r4, r5, lr}
 80179c6:	231a      	movs	r3, #26
 80179c8:	800b      	strh	r3, [r1, #0]
 80179ca:	4b0b      	ldr	r3, [pc, #44]	; (80179f8 <USBD_FS_SerialStrDescriptor+0x34>)
 80179cc:	6818      	ldr	r0, [r3, #0]
 80179ce:	3308      	adds	r3, #8
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	18c0      	adds	r0, r0, r3
 80179d4:	d101      	bne.n	80179da <USBD_FS_SerialStrDescriptor+0x16>
 80179d6:	4809      	ldr	r0, [pc, #36]	; (80179fc <USBD_FS_SerialStrDescriptor+0x38>)
 80179d8:	bd38      	pop	{r3, r4, r5, pc}
 80179da:	4b09      	ldr	r3, [pc, #36]	; (8017a00 <USBD_FS_SerialStrDescriptor+0x3c>)
 80179dc:	681d      	ldr	r5, [r3, #0]
 80179de:	4c07      	ldr	r4, [pc, #28]	; (80179fc <USBD_FS_SerialStrDescriptor+0x38>)
 80179e0:	2208      	movs	r2, #8
 80179e2:	1ca1      	adds	r1, r4, #2
 80179e4:	f7ff ffd6 	bl	8017994 <IntToUnicode>
 80179e8:	2204      	movs	r2, #4
 80179ea:	f104 0112 	add.w	r1, r4, #18
 80179ee:	4628      	mov	r0, r5
 80179f0:	f7ff ffd0 	bl	8017994 <IntToUnicode>
 80179f4:	e7ef      	b.n	80179d6 <USBD_FS_SerialStrDescriptor+0x12>
 80179f6:	bf00      	nop
 80179f8:	1fff7a10 	.word	0x1fff7a10
 80179fc:	200001c4 	.word	0x200001c4
 8017a00:	1fff7a14 	.word	0x1fff7a14

08017a04 <USBD_FS_ProductStrDescriptor>:
 8017a04:	b508      	push	{r3, lr}
 8017a06:	460a      	mov	r2, r1
 8017a08:	4902      	ldr	r1, [pc, #8]	; (8017a14 <USBD_FS_ProductStrDescriptor+0x10>)
 8017a0a:	4803      	ldr	r0, [pc, #12]	; (8017a18 <USBD_FS_ProductStrDescriptor+0x14>)
 8017a0c:	f7fd f9fa 	bl	8014e04 <USBD_GetString>
 8017a10:	4800      	ldr	r0, [pc, #0]	; (8017a14 <USBD_FS_ProductStrDescriptor+0x10>)
 8017a12:	bd08      	pop	{r3, pc}
 8017a14:	200086dc 	.word	0x200086dc
 8017a18:	080193d0 	.word	0x080193d0

08017a1c <USBD_FS_ManufacturerStrDescriptor>:
 8017a1c:	b510      	push	{r4, lr}
 8017a1e:	460a      	mov	r2, r1
 8017a20:	4c03      	ldr	r4, [pc, #12]	; (8017a30 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8017a22:	4621      	mov	r1, r4
 8017a24:	4803      	ldr	r0, [pc, #12]	; (8017a34 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8017a26:	f7fd f9ed 	bl	8014e04 <USBD_GetString>
 8017a2a:	4620      	mov	r0, r4
 8017a2c:	bd10      	pop	{r4, pc}
 8017a2e:	bf00      	nop
 8017a30:	200086dc 	.word	0x200086dc
 8017a34:	0801a184 	.word	0x0801a184

08017a38 <USBD_FS_ConfigStrDescriptor>:
 8017a38:	b508      	push	{r3, lr}
 8017a3a:	460a      	mov	r2, r1
 8017a3c:	4902      	ldr	r1, [pc, #8]	; (8017a48 <USBD_FS_ConfigStrDescriptor+0x10>)
 8017a3e:	4803      	ldr	r0, [pc, #12]	; (8017a4c <USBD_FS_ConfigStrDescriptor+0x14>)
 8017a40:	f7fd f9e0 	bl	8014e04 <USBD_GetString>
 8017a44:	4800      	ldr	r0, [pc, #0]	; (8017a48 <USBD_FS_ConfigStrDescriptor+0x10>)
 8017a46:	bd08      	pop	{r3, pc}
 8017a48:	200086dc 	.word	0x200086dc
 8017a4c:	0801a18c 	.word	0x0801a18c

08017a50 <USBD_FS_InterfaceStrDescriptor>:
 8017a50:	b508      	push	{r3, lr}
 8017a52:	460a      	mov	r2, r1
 8017a54:	4902      	ldr	r1, [pc, #8]	; (8017a60 <USBD_FS_InterfaceStrDescriptor+0x10>)
 8017a56:	4803      	ldr	r0, [pc, #12]	; (8017a64 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8017a58:	f7fd f9d4 	bl	8014e04 <USBD_GetString>
 8017a5c:	4800      	ldr	r0, [pc, #0]	; (8017a60 <USBD_FS_InterfaceStrDescriptor+0x10>)
 8017a5e:	bd08      	pop	{r3, pc}
 8017a60:	200086dc 	.word	0x200086dc
 8017a64:	0801a198 	.word	0x0801a198

08017a68 <HAL_PCD_MspInit>:
 8017a68:	b530      	push	{r4, r5, lr}
 8017a6a:	b089      	sub	sp, #36	; 0x24
 8017a6c:	2300      	movs	r3, #0
 8017a6e:	9303      	str	r3, [sp, #12]
 8017a70:	9304      	str	r3, [sp, #16]
 8017a72:	9305      	str	r3, [sp, #20]
 8017a74:	9306      	str	r3, [sp, #24]
 8017a76:	9307      	str	r3, [sp, #28]
 8017a78:	6803      	ldr	r3, [r0, #0]
 8017a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017a7e:	d001      	beq.n	8017a84 <HAL_PCD_MspInit+0x1c>
 8017a80:	b009      	add	sp, #36	; 0x24
 8017a82:	bd30      	pop	{r4, r5, pc}
 8017a84:	2500      	movs	r5, #0
 8017a86:	9501      	str	r5, [sp, #4]
 8017a88:	4c17      	ldr	r4, [pc, #92]	; (8017ae8 <HAL_PCD_MspInit+0x80>)
 8017a8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017a8c:	f043 0301 	orr.w	r3, r3, #1
 8017a90:	6323      	str	r3, [r4, #48]	; 0x30
 8017a92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017a94:	f003 0301 	and.w	r3, r3, #1
 8017a98:	9301      	str	r3, [sp, #4]
 8017a9a:	9b01      	ldr	r3, [sp, #4]
 8017a9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017aa0:	9303      	str	r3, [sp, #12]
 8017aa2:	2302      	movs	r3, #2
 8017aa4:	9304      	str	r3, [sp, #16]
 8017aa6:	9505      	str	r5, [sp, #20]
 8017aa8:	2303      	movs	r3, #3
 8017aaa:	9306      	str	r3, [sp, #24]
 8017aac:	230a      	movs	r3, #10
 8017aae:	9307      	str	r3, [sp, #28]
 8017ab0:	a903      	add	r1, sp, #12
 8017ab2:	480e      	ldr	r0, [pc, #56]	; (8017aec <HAL_PCD_MspInit+0x84>)
 8017ab4:	f7f9 f9c2 	bl	8010e3c <HAL_GPIO_Init>
 8017ab8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017abe:	6363      	str	r3, [r4, #52]	; 0x34
 8017ac0:	9502      	str	r5, [sp, #8]
 8017ac2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017ac8:	6463      	str	r3, [r4, #68]	; 0x44
 8017aca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017ad0:	9302      	str	r3, [sp, #8]
 8017ad2:	9b02      	ldr	r3, [sp, #8]
 8017ad4:	462a      	mov	r2, r5
 8017ad6:	4629      	mov	r1, r5
 8017ad8:	2043      	movs	r0, #67	; 0x43
 8017ada:	f7f8 ff75 	bl	80109c8 <HAL_NVIC_SetPriority>
 8017ade:	2043      	movs	r0, #67	; 0x43
 8017ae0:	f7f8 ffa4 	bl	8010a2c <HAL_NVIC_EnableIRQ>
 8017ae4:	e7cc      	b.n	8017a80 <HAL_PCD_MspInit+0x18>
 8017ae6:	bf00      	nop
 8017ae8:	40023800 	.word	0x40023800
 8017aec:	40020000 	.word	0x40020000

08017af0 <HAL_PCD_MspDeInit>:
 8017af0:	b508      	push	{r3, lr}
 8017af2:	6803      	ldr	r3, [r0, #0]
 8017af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017af8:	d000      	beq.n	8017afc <HAL_PCD_MspDeInit+0xc>
 8017afa:	bd08      	pop	{r3, pc}
 8017afc:	4a06      	ldr	r2, [pc, #24]	; (8017b18 <HAL_PCD_MspDeInit+0x28>)
 8017afe:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8017b00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017b04:	6353      	str	r3, [r2, #52]	; 0x34
 8017b06:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8017b0a:	4804      	ldr	r0, [pc, #16]	; (8017b1c <HAL_PCD_MspDeInit+0x2c>)
 8017b0c:	f7f9 fa80 	bl	8011010 <HAL_GPIO_DeInit>
 8017b10:	2043      	movs	r0, #67	; 0x43
 8017b12:	f7f8 ff99 	bl	8010a48 <HAL_NVIC_DisableIRQ>
 8017b16:	e7f0      	b.n	8017afa <HAL_PCD_MspDeInit+0xa>
 8017b18:	40023800 	.word	0x40023800
 8017b1c:	40020000 	.word	0x40020000

08017b20 <HAL_PCD_SetupStageCallback>:
 8017b20:	b508      	push	{r3, lr}
 8017b22:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8017b26:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017b2a:	f7fc fd13 	bl	8014554 <USBD_LL_SetupStage>
 8017b2e:	bd08      	pop	{r3, pc}

08017b30 <HAL_PCD_DataOutStageCallback>:
 8017b30:	b508      	push	{r3, lr}
 8017b32:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8017b36:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8017b3a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8017b3e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017b42:	f7fc fd33 	bl	80145ac <USBD_LL_DataOutStage>
 8017b46:	bd08      	pop	{r3, pc}

08017b48 <HAL_PCD_DataInStageCallback>:
 8017b48:	b508      	push	{r3, lr}
 8017b4a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8017b4e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8017b52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8017b54:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017b58:	f7fc fd64 	bl	8014624 <USBD_LL_DataInStage>
 8017b5c:	bd08      	pop	{r3, pc}

08017b5e <HAL_PCD_SOFCallback>:
 8017b5e:	b508      	push	{r3, lr}
 8017b60:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017b64:	f7fc fe04 	bl	8014770 <USBD_LL_SOF>
 8017b68:	bd08      	pop	{r3, pc}

08017b6a <HAL_PCD_ResetCallback>:
 8017b6a:	b510      	push	{r4, lr}
 8017b6c:	4604      	mov	r4, r0
 8017b6e:	68c3      	ldr	r3, [r0, #12]
 8017b70:	2b02      	cmp	r3, #2
 8017b72:	d109      	bne.n	8017b88 <HAL_PCD_ResetCallback+0x1e>
 8017b74:	2101      	movs	r1, #1
 8017b76:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8017b7a:	f7fc fddf 	bl	801473c <USBD_LL_SetSpeed>
 8017b7e:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8017b82:	f7fc fdae 	bl	80146e2 <USBD_LL_Reset>
 8017b86:	bd10      	pop	{r4, pc}
 8017b88:	f7f7 fd07 	bl	800f59a <Error_Handler>
 8017b8c:	e7f2      	b.n	8017b74 <HAL_PCD_ResetCallback+0xa>
	...

08017b90 <HAL_PCD_SuspendCallback>:
 8017b90:	b510      	push	{r4, lr}
 8017b92:	4604      	mov	r4, r0
 8017b94:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017b98:	f7fc fdd3 	bl	8014742 <USBD_LL_Suspend>
 8017b9c:	6822      	ldr	r2, [r4, #0]
 8017b9e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8017ba2:	f043 0301 	orr.w	r3, r3, #1
 8017ba6:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
 8017baa:	6a23      	ldr	r3, [r4, #32]
 8017bac:	b123      	cbz	r3, 8017bb8 <HAL_PCD_SuspendCallback+0x28>
 8017bae:	4a03      	ldr	r2, [pc, #12]	; (8017bbc <HAL_PCD_SuspendCallback+0x2c>)
 8017bb0:	6913      	ldr	r3, [r2, #16]
 8017bb2:	f043 0306 	orr.w	r3, r3, #6
 8017bb6:	6113      	str	r3, [r2, #16]
 8017bb8:	bd10      	pop	{r4, pc}
 8017bba:	bf00      	nop
 8017bbc:	e000ed00 	.word	0xe000ed00

08017bc0 <HAL_PCD_ResumeCallback>:
 8017bc0:	b508      	push	{r3, lr}
 8017bc2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017bc6:	f7fc fdc6 	bl	8014756 <USBD_LL_Resume>
 8017bca:	bd08      	pop	{r3, pc}

08017bcc <HAL_PCD_ISOOUTIncompleteCallback>:
 8017bcc:	b508      	push	{r3, lr}
 8017bce:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017bd2:	f7fc fdf5 	bl	80147c0 <USBD_LL_IsoOUTIncomplete>
 8017bd6:	bd08      	pop	{r3, pc}

08017bd8 <HAL_PCD_ISOINIncompleteCallback>:
 8017bd8:	b508      	push	{r3, lr}
 8017bda:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017bde:	f7fc fddb 	bl	8014798 <USBD_LL_IsoINIncomplete>
 8017be2:	bd08      	pop	{r3, pc}

08017be4 <HAL_PCD_ConnectCallback>:
 8017be4:	b508      	push	{r3, lr}
 8017be6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017bea:	f7fc fdfd 	bl	80147e8 <USBD_LL_DevConnected>
 8017bee:	bd08      	pop	{r3, pc}

08017bf0 <HAL_PCD_DisconnectCallback>:
 8017bf0:	b508      	push	{r3, lr}
 8017bf2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8017bf6:	f7fc fdf9 	bl	80147ec <USBD_LL_DevDisconnected>
 8017bfa:	bd08      	pop	{r3, pc}

08017bfc <USBD_LL_Init>:
 8017bfc:	7802      	ldrb	r2, [r0, #0]
 8017bfe:	b10a      	cbz	r2, 8017c04 <USBD_LL_Init+0x8>
 8017c00:	2000      	movs	r0, #0
 8017c02:	4770      	bx	lr
 8017c04:	b510      	push	{r4, lr}
 8017c06:	4603      	mov	r3, r0
 8017c08:	4815      	ldr	r0, [pc, #84]	; (8017c60 <USBD_LL_Init+0x64>)
 8017c0a:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
 8017c0e:	f8c3 02c4 	str.w	r0, [r3, #708]	; 0x2c4
 8017c12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8017c16:	6003      	str	r3, [r0, #0]
 8017c18:	2304      	movs	r3, #4
 8017c1a:	6043      	str	r3, [r0, #4]
 8017c1c:	2202      	movs	r2, #2
 8017c1e:	60c2      	str	r2, [r0, #12]
 8017c20:	2300      	movs	r3, #0
 8017c22:	6103      	str	r3, [r0, #16]
 8017c24:	6182      	str	r2, [r0, #24]
 8017c26:	61c3      	str	r3, [r0, #28]
 8017c28:	6203      	str	r3, [r0, #32]
 8017c2a:	6243      	str	r3, [r0, #36]	; 0x24
 8017c2c:	62c3      	str	r3, [r0, #44]	; 0x2c
 8017c2e:	6303      	str	r3, [r0, #48]	; 0x30
 8017c30:	f7f9 fa98 	bl	8011164 <HAL_PCD_Init>
 8017c34:	b980      	cbnz	r0, 8017c58 <USBD_LL_Init+0x5c>
 8017c36:	4c0a      	ldr	r4, [pc, #40]	; (8017c60 <USBD_LL_Init+0x64>)
 8017c38:	2180      	movs	r1, #128	; 0x80
 8017c3a:	4620      	mov	r0, r4
 8017c3c:	f7fa f834 	bl	8011ca8 <HAL_PCDEx_SetRxFiFo>
 8017c40:	2240      	movs	r2, #64	; 0x40
 8017c42:	2100      	movs	r1, #0
 8017c44:	4620      	mov	r0, r4
 8017c46:	f7fa f80d 	bl	8011c64 <HAL_PCDEx_SetTxFiFo>
 8017c4a:	2280      	movs	r2, #128	; 0x80
 8017c4c:	2101      	movs	r1, #1
 8017c4e:	4620      	mov	r0, r4
 8017c50:	f7fa f808 	bl	8011c64 <HAL_PCDEx_SetTxFiFo>
 8017c54:	2000      	movs	r0, #0
 8017c56:	bd10      	pop	{r4, pc}
 8017c58:	f7f7 fc9f 	bl	800f59a <Error_Handler>
 8017c5c:	e7eb      	b.n	8017c36 <USBD_LL_Init+0x3a>
 8017c5e:	bf00      	nop
 8017c60:	200088dc 	.word	0x200088dc

08017c64 <USBD_LL_IsStallEP>:
 8017c64:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
 8017c68:	f011 0f80 	tst.w	r1, #128	; 0x80
 8017c6c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8017c70:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8017c74:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8017c78:	bf14      	ite	ne
 8017c7a:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
 8017c7e:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
 8017c82:	4770      	bx	lr

08017c84 <USBD_LL_GetRxDataSize>:
 8017c84:	b508      	push	{r3, lr}
 8017c86:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8017c8a:	f7f9 ff3d 	bl	8011b08 <HAL_PCD_EP_GetRxCount>
 8017c8e:	bd08      	pop	{r3, pc}

08017c90 <USBD_static_malloc>:
 8017c90:	4800      	ldr	r0, [pc, #0]	; (8017c94 <USBD_static_malloc+0x4>)
 8017c92:	4770      	bx	lr
 8017c94:	20004f88 	.word	0x20004f88

08017c98 <USBD_static_free>:
 8017c98:	4770      	bx	lr

08017c9a <USBD_Get_USB_Status>:
 8017c9a:	b120      	cbz	r0, 8017ca6 <USBD_Get_USB_Status+0xc>
 8017c9c:	2802      	cmp	r0, #2
 8017c9e:	bf14      	ite	ne
 8017ca0:	2003      	movne	r0, #3
 8017ca2:	2001      	moveq	r0, #1
 8017ca4:	4770      	bx	lr
 8017ca6:	4770      	bx	lr

08017ca8 <USBD_LL_DeInit>:
 8017ca8:	b508      	push	{r3, lr}
 8017caa:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8017cae:	f7f9 faeb 	bl	8011288 <HAL_PCD_DeInit>
 8017cb2:	f7ff fff2 	bl	8017c9a <USBD_Get_USB_Status>
 8017cb6:	bd08      	pop	{r3, pc}

08017cb8 <USBD_LL_Start>:
 8017cb8:	b508      	push	{r3, lr}
 8017cba:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8017cbe:	f7f9 fafa 	bl	80112b6 <HAL_PCD_Start>
 8017cc2:	f7ff ffea 	bl	8017c9a <USBD_Get_USB_Status>
 8017cc6:	bd08      	pop	{r3, pc}

08017cc8 <USBD_LL_Stop>:
 8017cc8:	b508      	push	{r3, lr}
 8017cca:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8017cce:	f7f9 fb13 	bl	80112f8 <HAL_PCD_Stop>
 8017cd2:	f7ff ffe2 	bl	8017c9a <USBD_Get_USB_Status>
 8017cd6:	bd08      	pop	{r3, pc}

08017cd8 <USBD_LL_OpenEP>:
 8017cd8:	b510      	push	{r4, lr}
 8017cda:	4614      	mov	r4, r2
 8017cdc:	461a      	mov	r2, r3
 8017cde:	4623      	mov	r3, r4
 8017ce0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8017ce4:	f7f9 fe6e 	bl	80119c4 <HAL_PCD_EP_Open>
 8017ce8:	f7ff ffd7 	bl	8017c9a <USBD_Get_USB_Status>
 8017cec:	bd10      	pop	{r4, pc}

08017cee <USBD_LL_CloseEP>:
 8017cee:	b508      	push	{r3, lr}
 8017cf0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8017cf4:	f7f9 fea3 	bl	8011a3e <HAL_PCD_EP_Close>
 8017cf8:	f7ff ffcf 	bl	8017c9a <USBD_Get_USB_Status>
 8017cfc:	bd08      	pop	{r3, pc}

08017cfe <USBD_LL_StallEP>:
 8017cfe:	b508      	push	{r3, lr}
 8017d00:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8017d04:	f7f9 ff33 	bl	8011b6e <HAL_PCD_EP_SetStall>
 8017d08:	f7ff ffc7 	bl	8017c9a <USBD_Get_USB_Status>
 8017d0c:	bd08      	pop	{r3, pc}

08017d0e <USBD_LL_ClearStallEP>:
 8017d0e:	b508      	push	{r3, lr}
 8017d10:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8017d14:	f7f9 ff6d 	bl	8011bf2 <HAL_PCD_EP_ClrStall>
 8017d18:	f7ff ffbf 	bl	8017c9a <USBD_Get_USB_Status>
 8017d1c:	bd08      	pop	{r3, pc}

08017d1e <USBD_LL_SetUSBAddress>:
 8017d1e:	b508      	push	{r3, lr}
 8017d20:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8017d24:	f7f9 fe3a 	bl	801199c <HAL_PCD_SetAddress>
 8017d28:	f7ff ffb7 	bl	8017c9a <USBD_Get_USB_Status>
 8017d2c:	bd08      	pop	{r3, pc}

08017d2e <USBD_LL_Transmit>:
 8017d2e:	b508      	push	{r3, lr}
 8017d30:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8017d34:	f7f9 fef1 	bl	8011b1a <HAL_PCD_EP_Transmit>
 8017d38:	f7ff ffaf 	bl	8017c9a <USBD_Get_USB_Status>
 8017d3c:	bd08      	pop	{r3, pc}

08017d3e <USBD_LL_PrepareReceive>:
 8017d3e:	b508      	push	{r3, lr}
 8017d40:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8017d44:	f7f9 feb2 	bl	8011aac <HAL_PCD_EP_Receive>
 8017d48:	f7ff ffa7 	bl	8017c9a <USBD_Get_USB_Status>
 8017d4c:	bd08      	pop	{r3, pc}

08017d4e <atoi>:
 8017d4e:	220a      	movs	r2, #10
 8017d50:	2100      	movs	r1, #0
 8017d52:	f000 ba43 	b.w	80181dc <strtol>
	...

08017d58 <__errno>:
 8017d58:	4b01      	ldr	r3, [pc, #4]	; (8017d60 <__errno+0x8>)
 8017d5a:	6818      	ldr	r0, [r3, #0]
 8017d5c:	4770      	bx	lr
 8017d5e:	bf00      	nop
 8017d60:	200001e0 	.word	0x200001e0

08017d64 <__libc_init_array>:
 8017d64:	b570      	push	{r4, r5, r6, lr}
 8017d66:	4d0d      	ldr	r5, [pc, #52]	; (8017d9c <__libc_init_array+0x38>)
 8017d68:	4c0d      	ldr	r4, [pc, #52]	; (8017da0 <__libc_init_array+0x3c>)
 8017d6a:	1b64      	subs	r4, r4, r5
 8017d6c:	10a4      	asrs	r4, r4, #2
 8017d6e:	2600      	movs	r6, #0
 8017d70:	42a6      	cmp	r6, r4
 8017d72:	d109      	bne.n	8017d88 <__libc_init_array+0x24>
 8017d74:	4d0b      	ldr	r5, [pc, #44]	; (8017da4 <__libc_init_array+0x40>)
 8017d76:	4c0c      	ldr	r4, [pc, #48]	; (8017da8 <__libc_init_array+0x44>)
 8017d78:	f001 fa84 	bl	8019284 <_init>
 8017d7c:	1b64      	subs	r4, r4, r5
 8017d7e:	10a4      	asrs	r4, r4, #2
 8017d80:	2600      	movs	r6, #0
 8017d82:	42a6      	cmp	r6, r4
 8017d84:	d105      	bne.n	8017d92 <__libc_init_array+0x2e>
 8017d86:	bd70      	pop	{r4, r5, r6, pc}
 8017d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d8c:	4798      	blx	r3
 8017d8e:	3601      	adds	r6, #1
 8017d90:	e7ee      	b.n	8017d70 <__libc_init_array+0xc>
 8017d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d96:	4798      	blx	r3
 8017d98:	3601      	adds	r6, #1
 8017d9a:	e7f2      	b.n	8017d82 <__libc_init_array+0x1e>
 8017d9c:	0801a304 	.word	0x0801a304
 8017da0:	0801a304 	.word	0x0801a304
 8017da4:	0801a304 	.word	0x0801a304
 8017da8:	0801a308 	.word	0x0801a308

08017dac <malloc>:
 8017dac:	4b02      	ldr	r3, [pc, #8]	; (8017db8 <malloc+0xc>)
 8017dae:	4601      	mov	r1, r0
 8017db0:	6818      	ldr	r0, [r3, #0]
 8017db2:	f000 b869 	b.w	8017e88 <_malloc_r>
 8017db6:	bf00      	nop
 8017db8:	200001e0 	.word	0x200001e0

08017dbc <memcpy>:
 8017dbc:	440a      	add	r2, r1
 8017dbe:	4291      	cmp	r1, r2
 8017dc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8017dc4:	d100      	bne.n	8017dc8 <memcpy+0xc>
 8017dc6:	4770      	bx	lr
 8017dc8:	b510      	push	{r4, lr}
 8017dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017dce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017dd2:	4291      	cmp	r1, r2
 8017dd4:	d1f9      	bne.n	8017dca <memcpy+0xe>
 8017dd6:	bd10      	pop	{r4, pc}

08017dd8 <memset>:
 8017dd8:	4402      	add	r2, r0
 8017dda:	4603      	mov	r3, r0
 8017ddc:	4293      	cmp	r3, r2
 8017dde:	d100      	bne.n	8017de2 <memset+0xa>
 8017de0:	4770      	bx	lr
 8017de2:	f803 1b01 	strb.w	r1, [r3], #1
 8017de6:	e7f9      	b.n	8017ddc <memset+0x4>

08017de8 <_free_r>:
 8017de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017dea:	2900      	cmp	r1, #0
 8017dec:	d048      	beq.n	8017e80 <_free_r+0x98>
 8017dee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017df2:	9001      	str	r0, [sp, #4]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	f1a1 0404 	sub.w	r4, r1, #4
 8017dfa:	bfb8      	it	lt
 8017dfc:	18e4      	addlt	r4, r4, r3
 8017dfe:	f000 fab7 	bl	8018370 <__malloc_lock>
 8017e02:	4a20      	ldr	r2, [pc, #128]	; (8017e84 <_free_r+0x9c>)
 8017e04:	9801      	ldr	r0, [sp, #4]
 8017e06:	6813      	ldr	r3, [r2, #0]
 8017e08:	4615      	mov	r5, r2
 8017e0a:	b933      	cbnz	r3, 8017e1a <_free_r+0x32>
 8017e0c:	6063      	str	r3, [r4, #4]
 8017e0e:	6014      	str	r4, [r2, #0]
 8017e10:	b003      	add	sp, #12
 8017e12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017e16:	f000 bab1 	b.w	801837c <__malloc_unlock>
 8017e1a:	42a3      	cmp	r3, r4
 8017e1c:	d90b      	bls.n	8017e36 <_free_r+0x4e>
 8017e1e:	6821      	ldr	r1, [r4, #0]
 8017e20:	1862      	adds	r2, r4, r1
 8017e22:	4293      	cmp	r3, r2
 8017e24:	bf04      	itt	eq
 8017e26:	681a      	ldreq	r2, [r3, #0]
 8017e28:	685b      	ldreq	r3, [r3, #4]
 8017e2a:	6063      	str	r3, [r4, #4]
 8017e2c:	bf04      	itt	eq
 8017e2e:	1852      	addeq	r2, r2, r1
 8017e30:	6022      	streq	r2, [r4, #0]
 8017e32:	602c      	str	r4, [r5, #0]
 8017e34:	e7ec      	b.n	8017e10 <_free_r+0x28>
 8017e36:	461a      	mov	r2, r3
 8017e38:	685b      	ldr	r3, [r3, #4]
 8017e3a:	b10b      	cbz	r3, 8017e40 <_free_r+0x58>
 8017e3c:	42a3      	cmp	r3, r4
 8017e3e:	d9fa      	bls.n	8017e36 <_free_r+0x4e>
 8017e40:	6811      	ldr	r1, [r2, #0]
 8017e42:	1855      	adds	r5, r2, r1
 8017e44:	42a5      	cmp	r5, r4
 8017e46:	d10b      	bne.n	8017e60 <_free_r+0x78>
 8017e48:	6824      	ldr	r4, [r4, #0]
 8017e4a:	4421      	add	r1, r4
 8017e4c:	1854      	adds	r4, r2, r1
 8017e4e:	42a3      	cmp	r3, r4
 8017e50:	6011      	str	r1, [r2, #0]
 8017e52:	d1dd      	bne.n	8017e10 <_free_r+0x28>
 8017e54:	681c      	ldr	r4, [r3, #0]
 8017e56:	685b      	ldr	r3, [r3, #4]
 8017e58:	6053      	str	r3, [r2, #4]
 8017e5a:	4421      	add	r1, r4
 8017e5c:	6011      	str	r1, [r2, #0]
 8017e5e:	e7d7      	b.n	8017e10 <_free_r+0x28>
 8017e60:	d902      	bls.n	8017e68 <_free_r+0x80>
 8017e62:	230c      	movs	r3, #12
 8017e64:	6003      	str	r3, [r0, #0]
 8017e66:	e7d3      	b.n	8017e10 <_free_r+0x28>
 8017e68:	6825      	ldr	r5, [r4, #0]
 8017e6a:	1961      	adds	r1, r4, r5
 8017e6c:	428b      	cmp	r3, r1
 8017e6e:	bf04      	itt	eq
 8017e70:	6819      	ldreq	r1, [r3, #0]
 8017e72:	685b      	ldreq	r3, [r3, #4]
 8017e74:	6063      	str	r3, [r4, #4]
 8017e76:	bf04      	itt	eq
 8017e78:	1949      	addeq	r1, r1, r5
 8017e7a:	6021      	streq	r1, [r4, #0]
 8017e7c:	6054      	str	r4, [r2, #4]
 8017e7e:	e7c7      	b.n	8017e10 <_free_r+0x28>
 8017e80:	b003      	add	sp, #12
 8017e82:	bd30      	pop	{r4, r5, pc}
 8017e84:	200051a8 	.word	0x200051a8

08017e88 <_malloc_r>:
 8017e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e8a:	1ccd      	adds	r5, r1, #3
 8017e8c:	f025 0503 	bic.w	r5, r5, #3
 8017e90:	3508      	adds	r5, #8
 8017e92:	2d0c      	cmp	r5, #12
 8017e94:	bf38      	it	cc
 8017e96:	250c      	movcc	r5, #12
 8017e98:	2d00      	cmp	r5, #0
 8017e9a:	4606      	mov	r6, r0
 8017e9c:	db01      	blt.n	8017ea2 <_malloc_r+0x1a>
 8017e9e:	42a9      	cmp	r1, r5
 8017ea0:	d903      	bls.n	8017eaa <_malloc_r+0x22>
 8017ea2:	230c      	movs	r3, #12
 8017ea4:	6033      	str	r3, [r6, #0]
 8017ea6:	2000      	movs	r0, #0
 8017ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017eaa:	f000 fa61 	bl	8018370 <__malloc_lock>
 8017eae:	4921      	ldr	r1, [pc, #132]	; (8017f34 <_malloc_r+0xac>)
 8017eb0:	680a      	ldr	r2, [r1, #0]
 8017eb2:	4614      	mov	r4, r2
 8017eb4:	b99c      	cbnz	r4, 8017ede <_malloc_r+0x56>
 8017eb6:	4f20      	ldr	r7, [pc, #128]	; (8017f38 <_malloc_r+0xb0>)
 8017eb8:	683b      	ldr	r3, [r7, #0]
 8017eba:	b923      	cbnz	r3, 8017ec6 <_malloc_r+0x3e>
 8017ebc:	4621      	mov	r1, r4
 8017ebe:	4630      	mov	r0, r6
 8017ec0:	f000 f83c 	bl	8017f3c <_sbrk_r>
 8017ec4:	6038      	str	r0, [r7, #0]
 8017ec6:	4629      	mov	r1, r5
 8017ec8:	4630      	mov	r0, r6
 8017eca:	f000 f837 	bl	8017f3c <_sbrk_r>
 8017ece:	1c43      	adds	r3, r0, #1
 8017ed0:	d123      	bne.n	8017f1a <_malloc_r+0x92>
 8017ed2:	230c      	movs	r3, #12
 8017ed4:	6033      	str	r3, [r6, #0]
 8017ed6:	4630      	mov	r0, r6
 8017ed8:	f000 fa50 	bl	801837c <__malloc_unlock>
 8017edc:	e7e3      	b.n	8017ea6 <_malloc_r+0x1e>
 8017ede:	6823      	ldr	r3, [r4, #0]
 8017ee0:	1b5b      	subs	r3, r3, r5
 8017ee2:	d417      	bmi.n	8017f14 <_malloc_r+0x8c>
 8017ee4:	2b0b      	cmp	r3, #11
 8017ee6:	d903      	bls.n	8017ef0 <_malloc_r+0x68>
 8017ee8:	6023      	str	r3, [r4, #0]
 8017eea:	441c      	add	r4, r3
 8017eec:	6025      	str	r5, [r4, #0]
 8017eee:	e004      	b.n	8017efa <_malloc_r+0x72>
 8017ef0:	6863      	ldr	r3, [r4, #4]
 8017ef2:	42a2      	cmp	r2, r4
 8017ef4:	bf0c      	ite	eq
 8017ef6:	600b      	streq	r3, [r1, #0]
 8017ef8:	6053      	strne	r3, [r2, #4]
 8017efa:	4630      	mov	r0, r6
 8017efc:	f000 fa3e 	bl	801837c <__malloc_unlock>
 8017f00:	f104 000b 	add.w	r0, r4, #11
 8017f04:	1d23      	adds	r3, r4, #4
 8017f06:	f020 0007 	bic.w	r0, r0, #7
 8017f0a:	1ac2      	subs	r2, r0, r3
 8017f0c:	d0cc      	beq.n	8017ea8 <_malloc_r+0x20>
 8017f0e:	1a1b      	subs	r3, r3, r0
 8017f10:	50a3      	str	r3, [r4, r2]
 8017f12:	e7c9      	b.n	8017ea8 <_malloc_r+0x20>
 8017f14:	4622      	mov	r2, r4
 8017f16:	6864      	ldr	r4, [r4, #4]
 8017f18:	e7cc      	b.n	8017eb4 <_malloc_r+0x2c>
 8017f1a:	1cc4      	adds	r4, r0, #3
 8017f1c:	f024 0403 	bic.w	r4, r4, #3
 8017f20:	42a0      	cmp	r0, r4
 8017f22:	d0e3      	beq.n	8017eec <_malloc_r+0x64>
 8017f24:	1a21      	subs	r1, r4, r0
 8017f26:	4630      	mov	r0, r6
 8017f28:	f000 f808 	bl	8017f3c <_sbrk_r>
 8017f2c:	3001      	adds	r0, #1
 8017f2e:	d1dd      	bne.n	8017eec <_malloc_r+0x64>
 8017f30:	e7cf      	b.n	8017ed2 <_malloc_r+0x4a>
 8017f32:	bf00      	nop
 8017f34:	200051a8 	.word	0x200051a8
 8017f38:	200051ac 	.word	0x200051ac

08017f3c <_sbrk_r>:
 8017f3c:	b538      	push	{r3, r4, r5, lr}
 8017f3e:	4d06      	ldr	r5, [pc, #24]	; (8017f58 <_sbrk_r+0x1c>)
 8017f40:	2300      	movs	r3, #0
 8017f42:	4604      	mov	r4, r0
 8017f44:	4608      	mov	r0, r1
 8017f46:	602b      	str	r3, [r5, #0]
 8017f48:	f7f6 fa06 	bl	800e358 <_sbrk>
 8017f4c:	1c43      	adds	r3, r0, #1
 8017f4e:	d102      	bne.n	8017f56 <_sbrk_r+0x1a>
 8017f50:	682b      	ldr	r3, [r5, #0]
 8017f52:	b103      	cbz	r3, 8017f56 <_sbrk_r+0x1a>
 8017f54:	6023      	str	r3, [r4, #0]
 8017f56:	bd38      	pop	{r3, r4, r5, pc}
 8017f58:	20008ce4 	.word	0x20008ce4

08017f5c <sniprintf>:
 8017f5c:	b40c      	push	{r2, r3}
 8017f5e:	b530      	push	{r4, r5, lr}
 8017f60:	4b17      	ldr	r3, [pc, #92]	; (8017fc0 <sniprintf+0x64>)
 8017f62:	1e0c      	subs	r4, r1, #0
 8017f64:	681d      	ldr	r5, [r3, #0]
 8017f66:	b09d      	sub	sp, #116	; 0x74
 8017f68:	da08      	bge.n	8017f7c <sniprintf+0x20>
 8017f6a:	238b      	movs	r3, #139	; 0x8b
 8017f6c:	602b      	str	r3, [r5, #0]
 8017f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8017f72:	b01d      	add	sp, #116	; 0x74
 8017f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017f78:	b002      	add	sp, #8
 8017f7a:	4770      	bx	lr
 8017f7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017f80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017f84:	bf14      	ite	ne
 8017f86:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017f8a:	4623      	moveq	r3, r4
 8017f8c:	9304      	str	r3, [sp, #16]
 8017f8e:	9307      	str	r3, [sp, #28]
 8017f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017f94:	9002      	str	r0, [sp, #8]
 8017f96:	9006      	str	r0, [sp, #24]
 8017f98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017f9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017f9e:	ab21      	add	r3, sp, #132	; 0x84
 8017fa0:	a902      	add	r1, sp, #8
 8017fa2:	4628      	mov	r0, r5
 8017fa4:	9301      	str	r3, [sp, #4]
 8017fa6:	f000 fa4b 	bl	8018440 <_svfiprintf_r>
 8017faa:	1c43      	adds	r3, r0, #1
 8017fac:	bfbc      	itt	lt
 8017fae:	238b      	movlt	r3, #139	; 0x8b
 8017fb0:	602b      	strlt	r3, [r5, #0]
 8017fb2:	2c00      	cmp	r4, #0
 8017fb4:	d0dd      	beq.n	8017f72 <sniprintf+0x16>
 8017fb6:	9b02      	ldr	r3, [sp, #8]
 8017fb8:	2200      	movs	r2, #0
 8017fba:	701a      	strb	r2, [r3, #0]
 8017fbc:	e7d9      	b.n	8017f72 <sniprintf+0x16>
 8017fbe:	bf00      	nop
 8017fc0:	200001e0 	.word	0x200001e0

08017fc4 <strcasecmp>:
 8017fc4:	b570      	push	{r4, r5, r6, lr}
 8017fc6:	4d0c      	ldr	r5, [pc, #48]	; (8017ff8 <strcasecmp+0x34>)
 8017fc8:	4604      	mov	r4, r0
 8017fca:	462e      	mov	r6, r5
 8017fcc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017fd0:	5d5a      	ldrb	r2, [r3, r5]
 8017fd2:	f002 0203 	and.w	r2, r2, #3
 8017fd6:	2a01      	cmp	r2, #1
 8017fd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017fdc:	5cb0      	ldrb	r0, [r6, r2]
 8017fde:	f000 0003 	and.w	r0, r0, #3
 8017fe2:	bf08      	it	eq
 8017fe4:	3320      	addeq	r3, #32
 8017fe6:	2801      	cmp	r0, #1
 8017fe8:	bf08      	it	eq
 8017fea:	3220      	addeq	r2, #32
 8017fec:	1a98      	subs	r0, r3, r2
 8017fee:	d101      	bne.n	8017ff4 <strcasecmp+0x30>
 8017ff0:	2a00      	cmp	r2, #0
 8017ff2:	d1eb      	bne.n	8017fcc <strcasecmp+0x8>
 8017ff4:	bd70      	pop	{r4, r5, r6, pc}
 8017ff6:	bf00      	nop
 8017ff8:	0801a1a7 	.word	0x0801a1a7

08017ffc <strchr>:
 8017ffc:	b2c9      	uxtb	r1, r1
 8017ffe:	4603      	mov	r3, r0
 8018000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018004:	b11a      	cbz	r2, 801800e <strchr+0x12>
 8018006:	428a      	cmp	r2, r1
 8018008:	d1f9      	bne.n	8017ffe <strchr+0x2>
 801800a:	4618      	mov	r0, r3
 801800c:	4770      	bx	lr
 801800e:	2900      	cmp	r1, #0
 8018010:	bf18      	it	ne
 8018012:	2300      	movne	r3, #0
 8018014:	e7f9      	b.n	801800a <strchr+0xe>
	...

08018018 <strncasecmp>:
 8018018:	b570      	push	{r4, r5, r6, lr}
 801801a:	4e0f      	ldr	r6, [pc, #60]	; (8018058 <strncasecmp+0x40>)
 801801c:	4604      	mov	r4, r0
 801801e:	440a      	add	r2, r1
 8018020:	428a      	cmp	r2, r1
 8018022:	d101      	bne.n	8018028 <strncasecmp+0x10>
 8018024:	2000      	movs	r0, #0
 8018026:	e013      	b.n	8018050 <strncasecmp+0x38>
 8018028:	f814 3b01 	ldrb.w	r3, [r4], #1
 801802c:	5d98      	ldrb	r0, [r3, r6]
 801802e:	f000 0003 	and.w	r0, r0, #3
 8018032:	2801      	cmp	r0, #1
 8018034:	f811 0b01 	ldrb.w	r0, [r1], #1
 8018038:	5c35      	ldrb	r5, [r6, r0]
 801803a:	f005 0503 	and.w	r5, r5, #3
 801803e:	bf08      	it	eq
 8018040:	3320      	addeq	r3, #32
 8018042:	2d01      	cmp	r5, #1
 8018044:	bf08      	it	eq
 8018046:	3020      	addeq	r0, #32
 8018048:	1a1b      	subs	r3, r3, r0
 801804a:	d102      	bne.n	8018052 <strncasecmp+0x3a>
 801804c:	2800      	cmp	r0, #0
 801804e:	d1e7      	bne.n	8018020 <strncasecmp+0x8>
 8018050:	bd70      	pop	{r4, r5, r6, pc}
 8018052:	4618      	mov	r0, r3
 8018054:	e7fc      	b.n	8018050 <strncasecmp+0x38>
 8018056:	bf00      	nop
 8018058:	0801a1a7 	.word	0x0801a1a7

0801805c <strncmp>:
 801805c:	b510      	push	{r4, lr}
 801805e:	b16a      	cbz	r2, 801807c <strncmp+0x20>
 8018060:	3901      	subs	r1, #1
 8018062:	1884      	adds	r4, r0, r2
 8018064:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018068:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801806c:	4293      	cmp	r3, r2
 801806e:	d103      	bne.n	8018078 <strncmp+0x1c>
 8018070:	42a0      	cmp	r0, r4
 8018072:	d001      	beq.n	8018078 <strncmp+0x1c>
 8018074:	2b00      	cmp	r3, #0
 8018076:	d1f5      	bne.n	8018064 <strncmp+0x8>
 8018078:	1a98      	subs	r0, r3, r2
 801807a:	bd10      	pop	{r4, pc}
 801807c:	4610      	mov	r0, r2
 801807e:	e7fc      	b.n	801807a <strncmp+0x1e>

08018080 <strncpy>:
 8018080:	b510      	push	{r4, lr}
 8018082:	3901      	subs	r1, #1
 8018084:	4603      	mov	r3, r0
 8018086:	b132      	cbz	r2, 8018096 <strncpy+0x16>
 8018088:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801808c:	f803 4b01 	strb.w	r4, [r3], #1
 8018090:	3a01      	subs	r2, #1
 8018092:	2c00      	cmp	r4, #0
 8018094:	d1f7      	bne.n	8018086 <strncpy+0x6>
 8018096:	441a      	add	r2, r3
 8018098:	2100      	movs	r1, #0
 801809a:	4293      	cmp	r3, r2
 801809c:	d100      	bne.n	80180a0 <strncpy+0x20>
 801809e:	bd10      	pop	{r4, pc}
 80180a0:	f803 1b01 	strb.w	r1, [r3], #1
 80180a4:	e7f9      	b.n	801809a <strncpy+0x1a>

080180a6 <strstr>:
 80180a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180a8:	780c      	ldrb	r4, [r1, #0]
 80180aa:	b164      	cbz	r4, 80180c6 <strstr+0x20>
 80180ac:	4603      	mov	r3, r0
 80180ae:	781a      	ldrb	r2, [r3, #0]
 80180b0:	4618      	mov	r0, r3
 80180b2:	1c5e      	adds	r6, r3, #1
 80180b4:	b90a      	cbnz	r2, 80180ba <strstr+0x14>
 80180b6:	4610      	mov	r0, r2
 80180b8:	e005      	b.n	80180c6 <strstr+0x20>
 80180ba:	4294      	cmp	r4, r2
 80180bc:	d108      	bne.n	80180d0 <strstr+0x2a>
 80180be:	460d      	mov	r5, r1
 80180c0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80180c4:	b902      	cbnz	r2, 80180c8 <strstr+0x22>
 80180c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180c8:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80180cc:	4297      	cmp	r7, r2
 80180ce:	d0f7      	beq.n	80180c0 <strstr+0x1a>
 80180d0:	4633      	mov	r3, r6
 80180d2:	e7ec      	b.n	80180ae <strstr+0x8>

080180d4 <_strtol_l.isra.0>:
 80180d4:	2b01      	cmp	r3, #1
 80180d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180da:	d001      	beq.n	80180e0 <_strtol_l.isra.0+0xc>
 80180dc:	2b24      	cmp	r3, #36	; 0x24
 80180de:	d906      	bls.n	80180ee <_strtol_l.isra.0+0x1a>
 80180e0:	f7ff fe3a 	bl	8017d58 <__errno>
 80180e4:	2316      	movs	r3, #22
 80180e6:	6003      	str	r3, [r0, #0]
 80180e8:	2000      	movs	r0, #0
 80180ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180ee:	4f3a      	ldr	r7, [pc, #232]	; (80181d8 <_strtol_l.isra.0+0x104>)
 80180f0:	468e      	mov	lr, r1
 80180f2:	4676      	mov	r6, lr
 80180f4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80180f8:	5de5      	ldrb	r5, [r4, r7]
 80180fa:	f015 0508 	ands.w	r5, r5, #8
 80180fe:	d1f8      	bne.n	80180f2 <_strtol_l.isra.0+0x1e>
 8018100:	2c2d      	cmp	r4, #45	; 0x2d
 8018102:	d134      	bne.n	801816e <_strtol_l.isra.0+0x9a>
 8018104:	f89e 4000 	ldrb.w	r4, [lr]
 8018108:	f04f 0801 	mov.w	r8, #1
 801810c:	f106 0e02 	add.w	lr, r6, #2
 8018110:	2b00      	cmp	r3, #0
 8018112:	d05c      	beq.n	80181ce <_strtol_l.isra.0+0xfa>
 8018114:	2b10      	cmp	r3, #16
 8018116:	d10c      	bne.n	8018132 <_strtol_l.isra.0+0x5e>
 8018118:	2c30      	cmp	r4, #48	; 0x30
 801811a:	d10a      	bne.n	8018132 <_strtol_l.isra.0+0x5e>
 801811c:	f89e 4000 	ldrb.w	r4, [lr]
 8018120:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018124:	2c58      	cmp	r4, #88	; 0x58
 8018126:	d14d      	bne.n	80181c4 <_strtol_l.isra.0+0xf0>
 8018128:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801812c:	2310      	movs	r3, #16
 801812e:	f10e 0e02 	add.w	lr, lr, #2
 8018132:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8018136:	f10c 3cff 	add.w	ip, ip, #4294967295
 801813a:	2600      	movs	r6, #0
 801813c:	fbbc f9f3 	udiv	r9, ip, r3
 8018140:	4635      	mov	r5, r6
 8018142:	fb03 ca19 	mls	sl, r3, r9, ip
 8018146:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801814a:	2f09      	cmp	r7, #9
 801814c:	d818      	bhi.n	8018180 <_strtol_l.isra.0+0xac>
 801814e:	463c      	mov	r4, r7
 8018150:	42a3      	cmp	r3, r4
 8018152:	dd24      	ble.n	801819e <_strtol_l.isra.0+0xca>
 8018154:	2e00      	cmp	r6, #0
 8018156:	db1f      	blt.n	8018198 <_strtol_l.isra.0+0xc4>
 8018158:	45a9      	cmp	r9, r5
 801815a:	d31d      	bcc.n	8018198 <_strtol_l.isra.0+0xc4>
 801815c:	d101      	bne.n	8018162 <_strtol_l.isra.0+0x8e>
 801815e:	45a2      	cmp	sl, r4
 8018160:	db1a      	blt.n	8018198 <_strtol_l.isra.0+0xc4>
 8018162:	fb05 4503 	mla	r5, r5, r3, r4
 8018166:	2601      	movs	r6, #1
 8018168:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801816c:	e7eb      	b.n	8018146 <_strtol_l.isra.0+0x72>
 801816e:	2c2b      	cmp	r4, #43	; 0x2b
 8018170:	bf08      	it	eq
 8018172:	f89e 4000 	ldrbeq.w	r4, [lr]
 8018176:	46a8      	mov	r8, r5
 8018178:	bf08      	it	eq
 801817a:	f106 0e02 	addeq.w	lr, r6, #2
 801817e:	e7c7      	b.n	8018110 <_strtol_l.isra.0+0x3c>
 8018180:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018184:	2f19      	cmp	r7, #25
 8018186:	d801      	bhi.n	801818c <_strtol_l.isra.0+0xb8>
 8018188:	3c37      	subs	r4, #55	; 0x37
 801818a:	e7e1      	b.n	8018150 <_strtol_l.isra.0+0x7c>
 801818c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018190:	2f19      	cmp	r7, #25
 8018192:	d804      	bhi.n	801819e <_strtol_l.isra.0+0xca>
 8018194:	3c57      	subs	r4, #87	; 0x57
 8018196:	e7db      	b.n	8018150 <_strtol_l.isra.0+0x7c>
 8018198:	f04f 36ff 	mov.w	r6, #4294967295
 801819c:	e7e4      	b.n	8018168 <_strtol_l.isra.0+0x94>
 801819e:	2e00      	cmp	r6, #0
 80181a0:	da05      	bge.n	80181ae <_strtol_l.isra.0+0xda>
 80181a2:	2322      	movs	r3, #34	; 0x22
 80181a4:	6003      	str	r3, [r0, #0]
 80181a6:	4665      	mov	r5, ip
 80181a8:	b942      	cbnz	r2, 80181bc <_strtol_l.isra.0+0xe8>
 80181aa:	4628      	mov	r0, r5
 80181ac:	e79d      	b.n	80180ea <_strtol_l.isra.0+0x16>
 80181ae:	f1b8 0f00 	cmp.w	r8, #0
 80181b2:	d000      	beq.n	80181b6 <_strtol_l.isra.0+0xe2>
 80181b4:	426d      	negs	r5, r5
 80181b6:	2a00      	cmp	r2, #0
 80181b8:	d0f7      	beq.n	80181aa <_strtol_l.isra.0+0xd6>
 80181ba:	b10e      	cbz	r6, 80181c0 <_strtol_l.isra.0+0xec>
 80181bc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80181c0:	6011      	str	r1, [r2, #0]
 80181c2:	e7f2      	b.n	80181aa <_strtol_l.isra.0+0xd6>
 80181c4:	2430      	movs	r4, #48	; 0x30
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d1b3      	bne.n	8018132 <_strtol_l.isra.0+0x5e>
 80181ca:	2308      	movs	r3, #8
 80181cc:	e7b1      	b.n	8018132 <_strtol_l.isra.0+0x5e>
 80181ce:	2c30      	cmp	r4, #48	; 0x30
 80181d0:	d0a4      	beq.n	801811c <_strtol_l.isra.0+0x48>
 80181d2:	230a      	movs	r3, #10
 80181d4:	e7ad      	b.n	8018132 <_strtol_l.isra.0+0x5e>
 80181d6:	bf00      	nop
 80181d8:	0801a1a7 	.word	0x0801a1a7

080181dc <strtol>:
 80181dc:	4613      	mov	r3, r2
 80181de:	460a      	mov	r2, r1
 80181e0:	4601      	mov	r1, r0
 80181e2:	4802      	ldr	r0, [pc, #8]	; (80181ec <strtol+0x10>)
 80181e4:	6800      	ldr	r0, [r0, #0]
 80181e6:	f7ff bf75 	b.w	80180d4 <_strtol_l.isra.0>
 80181ea:	bf00      	nop
 80181ec:	200001e0 	.word	0x200001e0

080181f0 <_strtoul_l.isra.0>:
 80181f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80181f4:	4e3b      	ldr	r6, [pc, #236]	; (80182e4 <_strtoul_l.isra.0+0xf4>)
 80181f6:	4686      	mov	lr, r0
 80181f8:	468c      	mov	ip, r1
 80181fa:	4660      	mov	r0, ip
 80181fc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8018200:	5da5      	ldrb	r5, [r4, r6]
 8018202:	f015 0508 	ands.w	r5, r5, #8
 8018206:	d1f8      	bne.n	80181fa <_strtoul_l.isra.0+0xa>
 8018208:	2c2d      	cmp	r4, #45	; 0x2d
 801820a:	d134      	bne.n	8018276 <_strtoul_l.isra.0+0x86>
 801820c:	f89c 4000 	ldrb.w	r4, [ip]
 8018210:	f04f 0801 	mov.w	r8, #1
 8018214:	f100 0c02 	add.w	ip, r0, #2
 8018218:	2b00      	cmp	r3, #0
 801821a:	d05e      	beq.n	80182da <_strtoul_l.isra.0+0xea>
 801821c:	2b10      	cmp	r3, #16
 801821e:	d10c      	bne.n	801823a <_strtoul_l.isra.0+0x4a>
 8018220:	2c30      	cmp	r4, #48	; 0x30
 8018222:	d10a      	bne.n	801823a <_strtoul_l.isra.0+0x4a>
 8018224:	f89c 0000 	ldrb.w	r0, [ip]
 8018228:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801822c:	2858      	cmp	r0, #88	; 0x58
 801822e:	d14f      	bne.n	80182d0 <_strtoul_l.isra.0+0xe0>
 8018230:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8018234:	2310      	movs	r3, #16
 8018236:	f10c 0c02 	add.w	ip, ip, #2
 801823a:	f04f 37ff 	mov.w	r7, #4294967295
 801823e:	2500      	movs	r5, #0
 8018240:	fbb7 f7f3 	udiv	r7, r7, r3
 8018244:	fb03 f907 	mul.w	r9, r3, r7
 8018248:	ea6f 0909 	mvn.w	r9, r9
 801824c:	4628      	mov	r0, r5
 801824e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8018252:	2e09      	cmp	r6, #9
 8018254:	d818      	bhi.n	8018288 <_strtoul_l.isra.0+0x98>
 8018256:	4634      	mov	r4, r6
 8018258:	42a3      	cmp	r3, r4
 801825a:	dd24      	ble.n	80182a6 <_strtoul_l.isra.0+0xb6>
 801825c:	2d00      	cmp	r5, #0
 801825e:	db1f      	blt.n	80182a0 <_strtoul_l.isra.0+0xb0>
 8018260:	4287      	cmp	r7, r0
 8018262:	d31d      	bcc.n	80182a0 <_strtoul_l.isra.0+0xb0>
 8018264:	d101      	bne.n	801826a <_strtoul_l.isra.0+0x7a>
 8018266:	45a1      	cmp	r9, r4
 8018268:	db1a      	blt.n	80182a0 <_strtoul_l.isra.0+0xb0>
 801826a:	fb00 4003 	mla	r0, r0, r3, r4
 801826e:	2501      	movs	r5, #1
 8018270:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8018274:	e7eb      	b.n	801824e <_strtoul_l.isra.0+0x5e>
 8018276:	2c2b      	cmp	r4, #43	; 0x2b
 8018278:	bf08      	it	eq
 801827a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801827e:	46a8      	mov	r8, r5
 8018280:	bf08      	it	eq
 8018282:	f100 0c02 	addeq.w	ip, r0, #2
 8018286:	e7c7      	b.n	8018218 <_strtoul_l.isra.0+0x28>
 8018288:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801828c:	2e19      	cmp	r6, #25
 801828e:	d801      	bhi.n	8018294 <_strtoul_l.isra.0+0xa4>
 8018290:	3c37      	subs	r4, #55	; 0x37
 8018292:	e7e1      	b.n	8018258 <_strtoul_l.isra.0+0x68>
 8018294:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8018298:	2e19      	cmp	r6, #25
 801829a:	d804      	bhi.n	80182a6 <_strtoul_l.isra.0+0xb6>
 801829c:	3c57      	subs	r4, #87	; 0x57
 801829e:	e7db      	b.n	8018258 <_strtoul_l.isra.0+0x68>
 80182a0:	f04f 35ff 	mov.w	r5, #4294967295
 80182a4:	e7e4      	b.n	8018270 <_strtoul_l.isra.0+0x80>
 80182a6:	2d00      	cmp	r5, #0
 80182a8:	da07      	bge.n	80182ba <_strtoul_l.isra.0+0xca>
 80182aa:	2322      	movs	r3, #34	; 0x22
 80182ac:	f8ce 3000 	str.w	r3, [lr]
 80182b0:	f04f 30ff 	mov.w	r0, #4294967295
 80182b4:	b942      	cbnz	r2, 80182c8 <_strtoul_l.isra.0+0xd8>
 80182b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182ba:	f1b8 0f00 	cmp.w	r8, #0
 80182be:	d000      	beq.n	80182c2 <_strtoul_l.isra.0+0xd2>
 80182c0:	4240      	negs	r0, r0
 80182c2:	2a00      	cmp	r2, #0
 80182c4:	d0f7      	beq.n	80182b6 <_strtoul_l.isra.0+0xc6>
 80182c6:	b10d      	cbz	r5, 80182cc <_strtoul_l.isra.0+0xdc>
 80182c8:	f10c 31ff 	add.w	r1, ip, #4294967295
 80182cc:	6011      	str	r1, [r2, #0]
 80182ce:	e7f2      	b.n	80182b6 <_strtoul_l.isra.0+0xc6>
 80182d0:	2430      	movs	r4, #48	; 0x30
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d1b1      	bne.n	801823a <_strtoul_l.isra.0+0x4a>
 80182d6:	2308      	movs	r3, #8
 80182d8:	e7af      	b.n	801823a <_strtoul_l.isra.0+0x4a>
 80182da:	2c30      	cmp	r4, #48	; 0x30
 80182dc:	d0a2      	beq.n	8018224 <_strtoul_l.isra.0+0x34>
 80182de:	230a      	movs	r3, #10
 80182e0:	e7ab      	b.n	801823a <_strtoul_l.isra.0+0x4a>
 80182e2:	bf00      	nop
 80182e4:	0801a1a7 	.word	0x0801a1a7

080182e8 <strtoul>:
 80182e8:	4613      	mov	r3, r2
 80182ea:	460a      	mov	r2, r1
 80182ec:	4601      	mov	r1, r0
 80182ee:	4802      	ldr	r0, [pc, #8]	; (80182f8 <strtoul+0x10>)
 80182f0:	6800      	ldr	r0, [r0, #0]
 80182f2:	f7ff bf7d 	b.w	80181f0 <_strtoul_l.isra.0>
 80182f6:	bf00      	nop
 80182f8:	200001e0 	.word	0x200001e0

080182fc <_vsniprintf_r>:
 80182fc:	b530      	push	{r4, r5, lr}
 80182fe:	1e14      	subs	r4, r2, #0
 8018300:	4605      	mov	r5, r0
 8018302:	b09b      	sub	sp, #108	; 0x6c
 8018304:	4618      	mov	r0, r3
 8018306:	da05      	bge.n	8018314 <_vsniprintf_r+0x18>
 8018308:	238b      	movs	r3, #139	; 0x8b
 801830a:	602b      	str	r3, [r5, #0]
 801830c:	f04f 30ff 	mov.w	r0, #4294967295
 8018310:	b01b      	add	sp, #108	; 0x6c
 8018312:	bd30      	pop	{r4, r5, pc}
 8018314:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018318:	f8ad 300c 	strh.w	r3, [sp, #12]
 801831c:	bf14      	ite	ne
 801831e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018322:	4623      	moveq	r3, r4
 8018324:	9302      	str	r3, [sp, #8]
 8018326:	9305      	str	r3, [sp, #20]
 8018328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801832c:	9100      	str	r1, [sp, #0]
 801832e:	9104      	str	r1, [sp, #16]
 8018330:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018334:	4602      	mov	r2, r0
 8018336:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018338:	4669      	mov	r1, sp
 801833a:	4628      	mov	r0, r5
 801833c:	f000 f880 	bl	8018440 <_svfiprintf_r>
 8018340:	1c43      	adds	r3, r0, #1
 8018342:	bfbc      	itt	lt
 8018344:	238b      	movlt	r3, #139	; 0x8b
 8018346:	602b      	strlt	r3, [r5, #0]
 8018348:	2c00      	cmp	r4, #0
 801834a:	d0e1      	beq.n	8018310 <_vsniprintf_r+0x14>
 801834c:	9b00      	ldr	r3, [sp, #0]
 801834e:	2200      	movs	r2, #0
 8018350:	701a      	strb	r2, [r3, #0]
 8018352:	e7dd      	b.n	8018310 <_vsniprintf_r+0x14>

08018354 <vsniprintf>:
 8018354:	b507      	push	{r0, r1, r2, lr}
 8018356:	9300      	str	r3, [sp, #0]
 8018358:	4613      	mov	r3, r2
 801835a:	460a      	mov	r2, r1
 801835c:	4601      	mov	r1, r0
 801835e:	4803      	ldr	r0, [pc, #12]	; (801836c <vsniprintf+0x18>)
 8018360:	6800      	ldr	r0, [r0, #0]
 8018362:	f7ff ffcb 	bl	80182fc <_vsniprintf_r>
 8018366:	b003      	add	sp, #12
 8018368:	f85d fb04 	ldr.w	pc, [sp], #4
 801836c:	200001e0 	.word	0x200001e0

08018370 <__malloc_lock>:
 8018370:	4801      	ldr	r0, [pc, #4]	; (8018378 <__malloc_lock+0x8>)
 8018372:	f000 baf9 	b.w	8018968 <__retarget_lock_acquire_recursive>
 8018376:	bf00      	nop
 8018378:	20008cec 	.word	0x20008cec

0801837c <__malloc_unlock>:
 801837c:	4801      	ldr	r0, [pc, #4]	; (8018384 <__malloc_unlock+0x8>)
 801837e:	f000 baf4 	b.w	801896a <__retarget_lock_release_recursive>
 8018382:	bf00      	nop
 8018384:	20008cec 	.word	0x20008cec

08018388 <__ssputs_r>:
 8018388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801838c:	688e      	ldr	r6, [r1, #8]
 801838e:	429e      	cmp	r6, r3
 8018390:	4682      	mov	sl, r0
 8018392:	460c      	mov	r4, r1
 8018394:	4690      	mov	r8, r2
 8018396:	461f      	mov	r7, r3
 8018398:	d838      	bhi.n	801840c <__ssputs_r+0x84>
 801839a:	898a      	ldrh	r2, [r1, #12]
 801839c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80183a0:	d032      	beq.n	8018408 <__ssputs_r+0x80>
 80183a2:	6825      	ldr	r5, [r4, #0]
 80183a4:	6909      	ldr	r1, [r1, #16]
 80183a6:	eba5 0901 	sub.w	r9, r5, r1
 80183aa:	6965      	ldr	r5, [r4, #20]
 80183ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80183b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80183b4:	3301      	adds	r3, #1
 80183b6:	444b      	add	r3, r9
 80183b8:	106d      	asrs	r5, r5, #1
 80183ba:	429d      	cmp	r5, r3
 80183bc:	bf38      	it	cc
 80183be:	461d      	movcc	r5, r3
 80183c0:	0553      	lsls	r3, r2, #21
 80183c2:	d531      	bpl.n	8018428 <__ssputs_r+0xa0>
 80183c4:	4629      	mov	r1, r5
 80183c6:	f7ff fd5f 	bl	8017e88 <_malloc_r>
 80183ca:	4606      	mov	r6, r0
 80183cc:	b950      	cbnz	r0, 80183e4 <__ssputs_r+0x5c>
 80183ce:	230c      	movs	r3, #12
 80183d0:	f8ca 3000 	str.w	r3, [sl]
 80183d4:	89a3      	ldrh	r3, [r4, #12]
 80183d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80183da:	81a3      	strh	r3, [r4, #12]
 80183dc:	f04f 30ff 	mov.w	r0, #4294967295
 80183e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183e4:	6921      	ldr	r1, [r4, #16]
 80183e6:	464a      	mov	r2, r9
 80183e8:	f7ff fce8 	bl	8017dbc <memcpy>
 80183ec:	89a3      	ldrh	r3, [r4, #12]
 80183ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80183f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80183f6:	81a3      	strh	r3, [r4, #12]
 80183f8:	6126      	str	r6, [r4, #16]
 80183fa:	6165      	str	r5, [r4, #20]
 80183fc:	444e      	add	r6, r9
 80183fe:	eba5 0509 	sub.w	r5, r5, r9
 8018402:	6026      	str	r6, [r4, #0]
 8018404:	60a5      	str	r5, [r4, #8]
 8018406:	463e      	mov	r6, r7
 8018408:	42be      	cmp	r6, r7
 801840a:	d900      	bls.n	801840e <__ssputs_r+0x86>
 801840c:	463e      	mov	r6, r7
 801840e:	4632      	mov	r2, r6
 8018410:	6820      	ldr	r0, [r4, #0]
 8018412:	4641      	mov	r1, r8
 8018414:	f000 faaa 	bl	801896c <memmove>
 8018418:	68a3      	ldr	r3, [r4, #8]
 801841a:	6822      	ldr	r2, [r4, #0]
 801841c:	1b9b      	subs	r3, r3, r6
 801841e:	4432      	add	r2, r6
 8018420:	60a3      	str	r3, [r4, #8]
 8018422:	6022      	str	r2, [r4, #0]
 8018424:	2000      	movs	r0, #0
 8018426:	e7db      	b.n	80183e0 <__ssputs_r+0x58>
 8018428:	462a      	mov	r2, r5
 801842a:	f000 fab9 	bl	80189a0 <_realloc_r>
 801842e:	4606      	mov	r6, r0
 8018430:	2800      	cmp	r0, #0
 8018432:	d1e1      	bne.n	80183f8 <__ssputs_r+0x70>
 8018434:	6921      	ldr	r1, [r4, #16]
 8018436:	4650      	mov	r0, sl
 8018438:	f7ff fcd6 	bl	8017de8 <_free_r>
 801843c:	e7c7      	b.n	80183ce <__ssputs_r+0x46>
	...

08018440 <_svfiprintf_r>:
 8018440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018444:	4698      	mov	r8, r3
 8018446:	898b      	ldrh	r3, [r1, #12]
 8018448:	061b      	lsls	r3, r3, #24
 801844a:	b09d      	sub	sp, #116	; 0x74
 801844c:	4607      	mov	r7, r0
 801844e:	460d      	mov	r5, r1
 8018450:	4614      	mov	r4, r2
 8018452:	d50e      	bpl.n	8018472 <_svfiprintf_r+0x32>
 8018454:	690b      	ldr	r3, [r1, #16]
 8018456:	b963      	cbnz	r3, 8018472 <_svfiprintf_r+0x32>
 8018458:	2140      	movs	r1, #64	; 0x40
 801845a:	f7ff fd15 	bl	8017e88 <_malloc_r>
 801845e:	6028      	str	r0, [r5, #0]
 8018460:	6128      	str	r0, [r5, #16]
 8018462:	b920      	cbnz	r0, 801846e <_svfiprintf_r+0x2e>
 8018464:	230c      	movs	r3, #12
 8018466:	603b      	str	r3, [r7, #0]
 8018468:	f04f 30ff 	mov.w	r0, #4294967295
 801846c:	e0d1      	b.n	8018612 <_svfiprintf_r+0x1d2>
 801846e:	2340      	movs	r3, #64	; 0x40
 8018470:	616b      	str	r3, [r5, #20]
 8018472:	2300      	movs	r3, #0
 8018474:	9309      	str	r3, [sp, #36]	; 0x24
 8018476:	2320      	movs	r3, #32
 8018478:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801847c:	f8cd 800c 	str.w	r8, [sp, #12]
 8018480:	2330      	movs	r3, #48	; 0x30
 8018482:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801862c <_svfiprintf_r+0x1ec>
 8018486:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801848a:	f04f 0901 	mov.w	r9, #1
 801848e:	4623      	mov	r3, r4
 8018490:	469a      	mov	sl, r3
 8018492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018496:	b10a      	cbz	r2, 801849c <_svfiprintf_r+0x5c>
 8018498:	2a25      	cmp	r2, #37	; 0x25
 801849a:	d1f9      	bne.n	8018490 <_svfiprintf_r+0x50>
 801849c:	ebba 0b04 	subs.w	fp, sl, r4
 80184a0:	d00b      	beq.n	80184ba <_svfiprintf_r+0x7a>
 80184a2:	465b      	mov	r3, fp
 80184a4:	4622      	mov	r2, r4
 80184a6:	4629      	mov	r1, r5
 80184a8:	4638      	mov	r0, r7
 80184aa:	f7ff ff6d 	bl	8018388 <__ssputs_r>
 80184ae:	3001      	adds	r0, #1
 80184b0:	f000 80aa 	beq.w	8018608 <_svfiprintf_r+0x1c8>
 80184b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184b6:	445a      	add	r2, fp
 80184b8:	9209      	str	r2, [sp, #36]	; 0x24
 80184ba:	f89a 3000 	ldrb.w	r3, [sl]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	f000 80a2 	beq.w	8018608 <_svfiprintf_r+0x1c8>
 80184c4:	2300      	movs	r3, #0
 80184c6:	f04f 32ff 	mov.w	r2, #4294967295
 80184ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80184ce:	f10a 0a01 	add.w	sl, sl, #1
 80184d2:	9304      	str	r3, [sp, #16]
 80184d4:	9307      	str	r3, [sp, #28]
 80184d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80184da:	931a      	str	r3, [sp, #104]	; 0x68
 80184dc:	4654      	mov	r4, sl
 80184de:	2205      	movs	r2, #5
 80184e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184e4:	4851      	ldr	r0, [pc, #324]	; (801862c <_svfiprintf_r+0x1ec>)
 80184e6:	f7f3 fdb3 	bl	800c050 <memchr>
 80184ea:	9a04      	ldr	r2, [sp, #16]
 80184ec:	b9d8      	cbnz	r0, 8018526 <_svfiprintf_r+0xe6>
 80184ee:	06d0      	lsls	r0, r2, #27
 80184f0:	bf44      	itt	mi
 80184f2:	2320      	movmi	r3, #32
 80184f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80184f8:	0711      	lsls	r1, r2, #28
 80184fa:	bf44      	itt	mi
 80184fc:	232b      	movmi	r3, #43	; 0x2b
 80184fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018502:	f89a 3000 	ldrb.w	r3, [sl]
 8018506:	2b2a      	cmp	r3, #42	; 0x2a
 8018508:	d015      	beq.n	8018536 <_svfiprintf_r+0xf6>
 801850a:	9a07      	ldr	r2, [sp, #28]
 801850c:	4654      	mov	r4, sl
 801850e:	2000      	movs	r0, #0
 8018510:	f04f 0c0a 	mov.w	ip, #10
 8018514:	4621      	mov	r1, r4
 8018516:	f811 3b01 	ldrb.w	r3, [r1], #1
 801851a:	3b30      	subs	r3, #48	; 0x30
 801851c:	2b09      	cmp	r3, #9
 801851e:	d94e      	bls.n	80185be <_svfiprintf_r+0x17e>
 8018520:	b1b0      	cbz	r0, 8018550 <_svfiprintf_r+0x110>
 8018522:	9207      	str	r2, [sp, #28]
 8018524:	e014      	b.n	8018550 <_svfiprintf_r+0x110>
 8018526:	eba0 0308 	sub.w	r3, r0, r8
 801852a:	fa09 f303 	lsl.w	r3, r9, r3
 801852e:	4313      	orrs	r3, r2
 8018530:	9304      	str	r3, [sp, #16]
 8018532:	46a2      	mov	sl, r4
 8018534:	e7d2      	b.n	80184dc <_svfiprintf_r+0x9c>
 8018536:	9b03      	ldr	r3, [sp, #12]
 8018538:	1d19      	adds	r1, r3, #4
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	9103      	str	r1, [sp, #12]
 801853e:	2b00      	cmp	r3, #0
 8018540:	bfbb      	ittet	lt
 8018542:	425b      	neglt	r3, r3
 8018544:	f042 0202 	orrlt.w	r2, r2, #2
 8018548:	9307      	strge	r3, [sp, #28]
 801854a:	9307      	strlt	r3, [sp, #28]
 801854c:	bfb8      	it	lt
 801854e:	9204      	strlt	r2, [sp, #16]
 8018550:	7823      	ldrb	r3, [r4, #0]
 8018552:	2b2e      	cmp	r3, #46	; 0x2e
 8018554:	d10c      	bne.n	8018570 <_svfiprintf_r+0x130>
 8018556:	7863      	ldrb	r3, [r4, #1]
 8018558:	2b2a      	cmp	r3, #42	; 0x2a
 801855a:	d135      	bne.n	80185c8 <_svfiprintf_r+0x188>
 801855c:	9b03      	ldr	r3, [sp, #12]
 801855e:	1d1a      	adds	r2, r3, #4
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	9203      	str	r2, [sp, #12]
 8018564:	2b00      	cmp	r3, #0
 8018566:	bfb8      	it	lt
 8018568:	f04f 33ff 	movlt.w	r3, #4294967295
 801856c:	3402      	adds	r4, #2
 801856e:	9305      	str	r3, [sp, #20]
 8018570:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801863c <_svfiprintf_r+0x1fc>
 8018574:	7821      	ldrb	r1, [r4, #0]
 8018576:	2203      	movs	r2, #3
 8018578:	4650      	mov	r0, sl
 801857a:	f7f3 fd69 	bl	800c050 <memchr>
 801857e:	b140      	cbz	r0, 8018592 <_svfiprintf_r+0x152>
 8018580:	2340      	movs	r3, #64	; 0x40
 8018582:	eba0 000a 	sub.w	r0, r0, sl
 8018586:	fa03 f000 	lsl.w	r0, r3, r0
 801858a:	9b04      	ldr	r3, [sp, #16]
 801858c:	4303      	orrs	r3, r0
 801858e:	3401      	adds	r4, #1
 8018590:	9304      	str	r3, [sp, #16]
 8018592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018596:	4826      	ldr	r0, [pc, #152]	; (8018630 <_svfiprintf_r+0x1f0>)
 8018598:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801859c:	2206      	movs	r2, #6
 801859e:	f7f3 fd57 	bl	800c050 <memchr>
 80185a2:	2800      	cmp	r0, #0
 80185a4:	d038      	beq.n	8018618 <_svfiprintf_r+0x1d8>
 80185a6:	4b23      	ldr	r3, [pc, #140]	; (8018634 <_svfiprintf_r+0x1f4>)
 80185a8:	bb1b      	cbnz	r3, 80185f2 <_svfiprintf_r+0x1b2>
 80185aa:	9b03      	ldr	r3, [sp, #12]
 80185ac:	3307      	adds	r3, #7
 80185ae:	f023 0307 	bic.w	r3, r3, #7
 80185b2:	3308      	adds	r3, #8
 80185b4:	9303      	str	r3, [sp, #12]
 80185b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185b8:	4433      	add	r3, r6
 80185ba:	9309      	str	r3, [sp, #36]	; 0x24
 80185bc:	e767      	b.n	801848e <_svfiprintf_r+0x4e>
 80185be:	fb0c 3202 	mla	r2, ip, r2, r3
 80185c2:	460c      	mov	r4, r1
 80185c4:	2001      	movs	r0, #1
 80185c6:	e7a5      	b.n	8018514 <_svfiprintf_r+0xd4>
 80185c8:	2300      	movs	r3, #0
 80185ca:	3401      	adds	r4, #1
 80185cc:	9305      	str	r3, [sp, #20]
 80185ce:	4619      	mov	r1, r3
 80185d0:	f04f 0c0a 	mov.w	ip, #10
 80185d4:	4620      	mov	r0, r4
 80185d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80185da:	3a30      	subs	r2, #48	; 0x30
 80185dc:	2a09      	cmp	r2, #9
 80185de:	d903      	bls.n	80185e8 <_svfiprintf_r+0x1a8>
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d0c5      	beq.n	8018570 <_svfiprintf_r+0x130>
 80185e4:	9105      	str	r1, [sp, #20]
 80185e6:	e7c3      	b.n	8018570 <_svfiprintf_r+0x130>
 80185e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80185ec:	4604      	mov	r4, r0
 80185ee:	2301      	movs	r3, #1
 80185f0:	e7f0      	b.n	80185d4 <_svfiprintf_r+0x194>
 80185f2:	ab03      	add	r3, sp, #12
 80185f4:	9300      	str	r3, [sp, #0]
 80185f6:	462a      	mov	r2, r5
 80185f8:	4b0f      	ldr	r3, [pc, #60]	; (8018638 <_svfiprintf_r+0x1f8>)
 80185fa:	a904      	add	r1, sp, #16
 80185fc:	4638      	mov	r0, r7
 80185fe:	f3af 8000 	nop.w
 8018602:	1c42      	adds	r2, r0, #1
 8018604:	4606      	mov	r6, r0
 8018606:	d1d6      	bne.n	80185b6 <_svfiprintf_r+0x176>
 8018608:	89ab      	ldrh	r3, [r5, #12]
 801860a:	065b      	lsls	r3, r3, #25
 801860c:	f53f af2c 	bmi.w	8018468 <_svfiprintf_r+0x28>
 8018610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018612:	b01d      	add	sp, #116	; 0x74
 8018614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018618:	ab03      	add	r3, sp, #12
 801861a:	9300      	str	r3, [sp, #0]
 801861c:	462a      	mov	r2, r5
 801861e:	4b06      	ldr	r3, [pc, #24]	; (8018638 <_svfiprintf_r+0x1f8>)
 8018620:	a904      	add	r1, sp, #16
 8018622:	4638      	mov	r0, r7
 8018624:	f000 f87a 	bl	801871c <_printf_i>
 8018628:	e7eb      	b.n	8018602 <_svfiprintf_r+0x1c2>
 801862a:	bf00      	nop
 801862c:	0801a2a7 	.word	0x0801a2a7
 8018630:	0801a2b1 	.word	0x0801a2b1
 8018634:	00000000 	.word	0x00000000
 8018638:	08018389 	.word	0x08018389
 801863c:	0801a2ad 	.word	0x0801a2ad

08018640 <_printf_common>:
 8018640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018644:	4616      	mov	r6, r2
 8018646:	4699      	mov	r9, r3
 8018648:	688a      	ldr	r2, [r1, #8]
 801864a:	690b      	ldr	r3, [r1, #16]
 801864c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018650:	4293      	cmp	r3, r2
 8018652:	bfb8      	it	lt
 8018654:	4613      	movlt	r3, r2
 8018656:	6033      	str	r3, [r6, #0]
 8018658:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801865c:	4607      	mov	r7, r0
 801865e:	460c      	mov	r4, r1
 8018660:	b10a      	cbz	r2, 8018666 <_printf_common+0x26>
 8018662:	3301      	adds	r3, #1
 8018664:	6033      	str	r3, [r6, #0]
 8018666:	6823      	ldr	r3, [r4, #0]
 8018668:	0699      	lsls	r1, r3, #26
 801866a:	bf42      	ittt	mi
 801866c:	6833      	ldrmi	r3, [r6, #0]
 801866e:	3302      	addmi	r3, #2
 8018670:	6033      	strmi	r3, [r6, #0]
 8018672:	6825      	ldr	r5, [r4, #0]
 8018674:	f015 0506 	ands.w	r5, r5, #6
 8018678:	d106      	bne.n	8018688 <_printf_common+0x48>
 801867a:	f104 0a19 	add.w	sl, r4, #25
 801867e:	68e3      	ldr	r3, [r4, #12]
 8018680:	6832      	ldr	r2, [r6, #0]
 8018682:	1a9b      	subs	r3, r3, r2
 8018684:	42ab      	cmp	r3, r5
 8018686:	dc26      	bgt.n	80186d6 <_printf_common+0x96>
 8018688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801868c:	1e13      	subs	r3, r2, #0
 801868e:	6822      	ldr	r2, [r4, #0]
 8018690:	bf18      	it	ne
 8018692:	2301      	movne	r3, #1
 8018694:	0692      	lsls	r2, r2, #26
 8018696:	d42b      	bmi.n	80186f0 <_printf_common+0xb0>
 8018698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801869c:	4649      	mov	r1, r9
 801869e:	4638      	mov	r0, r7
 80186a0:	47c0      	blx	r8
 80186a2:	3001      	adds	r0, #1
 80186a4:	d01e      	beq.n	80186e4 <_printf_common+0xa4>
 80186a6:	6823      	ldr	r3, [r4, #0]
 80186a8:	68e5      	ldr	r5, [r4, #12]
 80186aa:	6832      	ldr	r2, [r6, #0]
 80186ac:	f003 0306 	and.w	r3, r3, #6
 80186b0:	2b04      	cmp	r3, #4
 80186b2:	bf08      	it	eq
 80186b4:	1aad      	subeq	r5, r5, r2
 80186b6:	68a3      	ldr	r3, [r4, #8]
 80186b8:	6922      	ldr	r2, [r4, #16]
 80186ba:	bf0c      	ite	eq
 80186bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80186c0:	2500      	movne	r5, #0
 80186c2:	4293      	cmp	r3, r2
 80186c4:	bfc4      	itt	gt
 80186c6:	1a9b      	subgt	r3, r3, r2
 80186c8:	18ed      	addgt	r5, r5, r3
 80186ca:	2600      	movs	r6, #0
 80186cc:	341a      	adds	r4, #26
 80186ce:	42b5      	cmp	r5, r6
 80186d0:	d11a      	bne.n	8018708 <_printf_common+0xc8>
 80186d2:	2000      	movs	r0, #0
 80186d4:	e008      	b.n	80186e8 <_printf_common+0xa8>
 80186d6:	2301      	movs	r3, #1
 80186d8:	4652      	mov	r2, sl
 80186da:	4649      	mov	r1, r9
 80186dc:	4638      	mov	r0, r7
 80186de:	47c0      	blx	r8
 80186e0:	3001      	adds	r0, #1
 80186e2:	d103      	bne.n	80186ec <_printf_common+0xac>
 80186e4:	f04f 30ff 	mov.w	r0, #4294967295
 80186e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186ec:	3501      	adds	r5, #1
 80186ee:	e7c6      	b.n	801867e <_printf_common+0x3e>
 80186f0:	18e1      	adds	r1, r4, r3
 80186f2:	1c5a      	adds	r2, r3, #1
 80186f4:	2030      	movs	r0, #48	; 0x30
 80186f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80186fa:	4422      	add	r2, r4
 80186fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018700:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018704:	3302      	adds	r3, #2
 8018706:	e7c7      	b.n	8018698 <_printf_common+0x58>
 8018708:	2301      	movs	r3, #1
 801870a:	4622      	mov	r2, r4
 801870c:	4649      	mov	r1, r9
 801870e:	4638      	mov	r0, r7
 8018710:	47c0      	blx	r8
 8018712:	3001      	adds	r0, #1
 8018714:	d0e6      	beq.n	80186e4 <_printf_common+0xa4>
 8018716:	3601      	adds	r6, #1
 8018718:	e7d9      	b.n	80186ce <_printf_common+0x8e>
	...

0801871c <_printf_i>:
 801871c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018720:	460c      	mov	r4, r1
 8018722:	4691      	mov	r9, r2
 8018724:	7e27      	ldrb	r7, [r4, #24]
 8018726:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018728:	2f78      	cmp	r7, #120	; 0x78
 801872a:	4680      	mov	r8, r0
 801872c:	469a      	mov	sl, r3
 801872e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018732:	d807      	bhi.n	8018744 <_printf_i+0x28>
 8018734:	2f62      	cmp	r7, #98	; 0x62
 8018736:	d80a      	bhi.n	801874e <_printf_i+0x32>
 8018738:	2f00      	cmp	r7, #0
 801873a:	f000 80d8 	beq.w	80188ee <_printf_i+0x1d2>
 801873e:	2f58      	cmp	r7, #88	; 0x58
 8018740:	f000 80a3 	beq.w	801888a <_printf_i+0x16e>
 8018744:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801874c:	e03a      	b.n	80187c4 <_printf_i+0xa8>
 801874e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018752:	2b15      	cmp	r3, #21
 8018754:	d8f6      	bhi.n	8018744 <_printf_i+0x28>
 8018756:	a001      	add	r0, pc, #4	; (adr r0, 801875c <_printf_i+0x40>)
 8018758:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801875c:	080187b5 	.word	0x080187b5
 8018760:	080187c9 	.word	0x080187c9
 8018764:	08018745 	.word	0x08018745
 8018768:	08018745 	.word	0x08018745
 801876c:	08018745 	.word	0x08018745
 8018770:	08018745 	.word	0x08018745
 8018774:	080187c9 	.word	0x080187c9
 8018778:	08018745 	.word	0x08018745
 801877c:	08018745 	.word	0x08018745
 8018780:	08018745 	.word	0x08018745
 8018784:	08018745 	.word	0x08018745
 8018788:	080188d5 	.word	0x080188d5
 801878c:	080187f9 	.word	0x080187f9
 8018790:	080188b7 	.word	0x080188b7
 8018794:	08018745 	.word	0x08018745
 8018798:	08018745 	.word	0x08018745
 801879c:	080188f7 	.word	0x080188f7
 80187a0:	08018745 	.word	0x08018745
 80187a4:	080187f9 	.word	0x080187f9
 80187a8:	08018745 	.word	0x08018745
 80187ac:	08018745 	.word	0x08018745
 80187b0:	080188bf 	.word	0x080188bf
 80187b4:	680b      	ldr	r3, [r1, #0]
 80187b6:	1d1a      	adds	r2, r3, #4
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	600a      	str	r2, [r1, #0]
 80187bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80187c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80187c4:	2301      	movs	r3, #1
 80187c6:	e0a3      	b.n	8018910 <_printf_i+0x1f4>
 80187c8:	6825      	ldr	r5, [r4, #0]
 80187ca:	6808      	ldr	r0, [r1, #0]
 80187cc:	062e      	lsls	r6, r5, #24
 80187ce:	f100 0304 	add.w	r3, r0, #4
 80187d2:	d50a      	bpl.n	80187ea <_printf_i+0xce>
 80187d4:	6805      	ldr	r5, [r0, #0]
 80187d6:	600b      	str	r3, [r1, #0]
 80187d8:	2d00      	cmp	r5, #0
 80187da:	da03      	bge.n	80187e4 <_printf_i+0xc8>
 80187dc:	232d      	movs	r3, #45	; 0x2d
 80187de:	426d      	negs	r5, r5
 80187e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80187e4:	485e      	ldr	r0, [pc, #376]	; (8018960 <_printf_i+0x244>)
 80187e6:	230a      	movs	r3, #10
 80187e8:	e019      	b.n	801881e <_printf_i+0x102>
 80187ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80187ee:	6805      	ldr	r5, [r0, #0]
 80187f0:	600b      	str	r3, [r1, #0]
 80187f2:	bf18      	it	ne
 80187f4:	b22d      	sxthne	r5, r5
 80187f6:	e7ef      	b.n	80187d8 <_printf_i+0xbc>
 80187f8:	680b      	ldr	r3, [r1, #0]
 80187fa:	6825      	ldr	r5, [r4, #0]
 80187fc:	1d18      	adds	r0, r3, #4
 80187fe:	6008      	str	r0, [r1, #0]
 8018800:	0628      	lsls	r0, r5, #24
 8018802:	d501      	bpl.n	8018808 <_printf_i+0xec>
 8018804:	681d      	ldr	r5, [r3, #0]
 8018806:	e002      	b.n	801880e <_printf_i+0xf2>
 8018808:	0669      	lsls	r1, r5, #25
 801880a:	d5fb      	bpl.n	8018804 <_printf_i+0xe8>
 801880c:	881d      	ldrh	r5, [r3, #0]
 801880e:	4854      	ldr	r0, [pc, #336]	; (8018960 <_printf_i+0x244>)
 8018810:	2f6f      	cmp	r7, #111	; 0x6f
 8018812:	bf0c      	ite	eq
 8018814:	2308      	moveq	r3, #8
 8018816:	230a      	movne	r3, #10
 8018818:	2100      	movs	r1, #0
 801881a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801881e:	6866      	ldr	r6, [r4, #4]
 8018820:	60a6      	str	r6, [r4, #8]
 8018822:	2e00      	cmp	r6, #0
 8018824:	bfa2      	ittt	ge
 8018826:	6821      	ldrge	r1, [r4, #0]
 8018828:	f021 0104 	bicge.w	r1, r1, #4
 801882c:	6021      	strge	r1, [r4, #0]
 801882e:	b90d      	cbnz	r5, 8018834 <_printf_i+0x118>
 8018830:	2e00      	cmp	r6, #0
 8018832:	d04d      	beq.n	80188d0 <_printf_i+0x1b4>
 8018834:	4616      	mov	r6, r2
 8018836:	fbb5 f1f3 	udiv	r1, r5, r3
 801883a:	fb03 5711 	mls	r7, r3, r1, r5
 801883e:	5dc7      	ldrb	r7, [r0, r7]
 8018840:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018844:	462f      	mov	r7, r5
 8018846:	42bb      	cmp	r3, r7
 8018848:	460d      	mov	r5, r1
 801884a:	d9f4      	bls.n	8018836 <_printf_i+0x11a>
 801884c:	2b08      	cmp	r3, #8
 801884e:	d10b      	bne.n	8018868 <_printf_i+0x14c>
 8018850:	6823      	ldr	r3, [r4, #0]
 8018852:	07df      	lsls	r7, r3, #31
 8018854:	d508      	bpl.n	8018868 <_printf_i+0x14c>
 8018856:	6923      	ldr	r3, [r4, #16]
 8018858:	6861      	ldr	r1, [r4, #4]
 801885a:	4299      	cmp	r1, r3
 801885c:	bfde      	ittt	le
 801885e:	2330      	movle	r3, #48	; 0x30
 8018860:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018864:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018868:	1b92      	subs	r2, r2, r6
 801886a:	6122      	str	r2, [r4, #16]
 801886c:	f8cd a000 	str.w	sl, [sp]
 8018870:	464b      	mov	r3, r9
 8018872:	aa03      	add	r2, sp, #12
 8018874:	4621      	mov	r1, r4
 8018876:	4640      	mov	r0, r8
 8018878:	f7ff fee2 	bl	8018640 <_printf_common>
 801887c:	3001      	adds	r0, #1
 801887e:	d14c      	bne.n	801891a <_printf_i+0x1fe>
 8018880:	f04f 30ff 	mov.w	r0, #4294967295
 8018884:	b004      	add	sp, #16
 8018886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801888a:	4835      	ldr	r0, [pc, #212]	; (8018960 <_printf_i+0x244>)
 801888c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018890:	6823      	ldr	r3, [r4, #0]
 8018892:	680e      	ldr	r6, [r1, #0]
 8018894:	061f      	lsls	r7, r3, #24
 8018896:	f856 5b04 	ldr.w	r5, [r6], #4
 801889a:	600e      	str	r6, [r1, #0]
 801889c:	d514      	bpl.n	80188c8 <_printf_i+0x1ac>
 801889e:	07d9      	lsls	r1, r3, #31
 80188a0:	bf44      	itt	mi
 80188a2:	f043 0320 	orrmi.w	r3, r3, #32
 80188a6:	6023      	strmi	r3, [r4, #0]
 80188a8:	b91d      	cbnz	r5, 80188b2 <_printf_i+0x196>
 80188aa:	6823      	ldr	r3, [r4, #0]
 80188ac:	f023 0320 	bic.w	r3, r3, #32
 80188b0:	6023      	str	r3, [r4, #0]
 80188b2:	2310      	movs	r3, #16
 80188b4:	e7b0      	b.n	8018818 <_printf_i+0xfc>
 80188b6:	6823      	ldr	r3, [r4, #0]
 80188b8:	f043 0320 	orr.w	r3, r3, #32
 80188bc:	6023      	str	r3, [r4, #0]
 80188be:	2378      	movs	r3, #120	; 0x78
 80188c0:	4828      	ldr	r0, [pc, #160]	; (8018964 <_printf_i+0x248>)
 80188c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80188c6:	e7e3      	b.n	8018890 <_printf_i+0x174>
 80188c8:	065e      	lsls	r6, r3, #25
 80188ca:	bf48      	it	mi
 80188cc:	b2ad      	uxthmi	r5, r5
 80188ce:	e7e6      	b.n	801889e <_printf_i+0x182>
 80188d0:	4616      	mov	r6, r2
 80188d2:	e7bb      	b.n	801884c <_printf_i+0x130>
 80188d4:	680b      	ldr	r3, [r1, #0]
 80188d6:	6826      	ldr	r6, [r4, #0]
 80188d8:	6960      	ldr	r0, [r4, #20]
 80188da:	1d1d      	adds	r5, r3, #4
 80188dc:	600d      	str	r5, [r1, #0]
 80188de:	0635      	lsls	r5, r6, #24
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	d501      	bpl.n	80188e8 <_printf_i+0x1cc>
 80188e4:	6018      	str	r0, [r3, #0]
 80188e6:	e002      	b.n	80188ee <_printf_i+0x1d2>
 80188e8:	0671      	lsls	r1, r6, #25
 80188ea:	d5fb      	bpl.n	80188e4 <_printf_i+0x1c8>
 80188ec:	8018      	strh	r0, [r3, #0]
 80188ee:	2300      	movs	r3, #0
 80188f0:	6123      	str	r3, [r4, #16]
 80188f2:	4616      	mov	r6, r2
 80188f4:	e7ba      	b.n	801886c <_printf_i+0x150>
 80188f6:	680b      	ldr	r3, [r1, #0]
 80188f8:	1d1a      	adds	r2, r3, #4
 80188fa:	600a      	str	r2, [r1, #0]
 80188fc:	681e      	ldr	r6, [r3, #0]
 80188fe:	6862      	ldr	r2, [r4, #4]
 8018900:	2100      	movs	r1, #0
 8018902:	4630      	mov	r0, r6
 8018904:	f7f3 fba4 	bl	800c050 <memchr>
 8018908:	b108      	cbz	r0, 801890e <_printf_i+0x1f2>
 801890a:	1b80      	subs	r0, r0, r6
 801890c:	6060      	str	r0, [r4, #4]
 801890e:	6863      	ldr	r3, [r4, #4]
 8018910:	6123      	str	r3, [r4, #16]
 8018912:	2300      	movs	r3, #0
 8018914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018918:	e7a8      	b.n	801886c <_printf_i+0x150>
 801891a:	6923      	ldr	r3, [r4, #16]
 801891c:	4632      	mov	r2, r6
 801891e:	4649      	mov	r1, r9
 8018920:	4640      	mov	r0, r8
 8018922:	47d0      	blx	sl
 8018924:	3001      	adds	r0, #1
 8018926:	d0ab      	beq.n	8018880 <_printf_i+0x164>
 8018928:	6823      	ldr	r3, [r4, #0]
 801892a:	079b      	lsls	r3, r3, #30
 801892c:	d413      	bmi.n	8018956 <_printf_i+0x23a>
 801892e:	68e0      	ldr	r0, [r4, #12]
 8018930:	9b03      	ldr	r3, [sp, #12]
 8018932:	4298      	cmp	r0, r3
 8018934:	bfb8      	it	lt
 8018936:	4618      	movlt	r0, r3
 8018938:	e7a4      	b.n	8018884 <_printf_i+0x168>
 801893a:	2301      	movs	r3, #1
 801893c:	4632      	mov	r2, r6
 801893e:	4649      	mov	r1, r9
 8018940:	4640      	mov	r0, r8
 8018942:	47d0      	blx	sl
 8018944:	3001      	adds	r0, #1
 8018946:	d09b      	beq.n	8018880 <_printf_i+0x164>
 8018948:	3501      	adds	r5, #1
 801894a:	68e3      	ldr	r3, [r4, #12]
 801894c:	9903      	ldr	r1, [sp, #12]
 801894e:	1a5b      	subs	r3, r3, r1
 8018950:	42ab      	cmp	r3, r5
 8018952:	dcf2      	bgt.n	801893a <_printf_i+0x21e>
 8018954:	e7eb      	b.n	801892e <_printf_i+0x212>
 8018956:	2500      	movs	r5, #0
 8018958:	f104 0619 	add.w	r6, r4, #25
 801895c:	e7f5      	b.n	801894a <_printf_i+0x22e>
 801895e:	bf00      	nop
 8018960:	0801a2b8 	.word	0x0801a2b8
 8018964:	0801a2c9 	.word	0x0801a2c9

08018968 <__retarget_lock_acquire_recursive>:
 8018968:	4770      	bx	lr

0801896a <__retarget_lock_release_recursive>:
 801896a:	4770      	bx	lr

0801896c <memmove>:
 801896c:	4288      	cmp	r0, r1
 801896e:	b510      	push	{r4, lr}
 8018970:	eb01 0402 	add.w	r4, r1, r2
 8018974:	d902      	bls.n	801897c <memmove+0x10>
 8018976:	4284      	cmp	r4, r0
 8018978:	4623      	mov	r3, r4
 801897a:	d807      	bhi.n	801898c <memmove+0x20>
 801897c:	1e43      	subs	r3, r0, #1
 801897e:	42a1      	cmp	r1, r4
 8018980:	d008      	beq.n	8018994 <memmove+0x28>
 8018982:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018986:	f803 2f01 	strb.w	r2, [r3, #1]!
 801898a:	e7f8      	b.n	801897e <memmove+0x12>
 801898c:	4402      	add	r2, r0
 801898e:	4601      	mov	r1, r0
 8018990:	428a      	cmp	r2, r1
 8018992:	d100      	bne.n	8018996 <memmove+0x2a>
 8018994:	bd10      	pop	{r4, pc}
 8018996:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801899a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801899e:	e7f7      	b.n	8018990 <memmove+0x24>

080189a0 <_realloc_r>:
 80189a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189a2:	4607      	mov	r7, r0
 80189a4:	4614      	mov	r4, r2
 80189a6:	460e      	mov	r6, r1
 80189a8:	b921      	cbnz	r1, 80189b4 <_realloc_r+0x14>
 80189aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80189ae:	4611      	mov	r1, r2
 80189b0:	f7ff ba6a 	b.w	8017e88 <_malloc_r>
 80189b4:	b922      	cbnz	r2, 80189c0 <_realloc_r+0x20>
 80189b6:	f7ff fa17 	bl	8017de8 <_free_r>
 80189ba:	4625      	mov	r5, r4
 80189bc:	4628      	mov	r0, r5
 80189be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80189c0:	f000 f814 	bl	80189ec <_malloc_usable_size_r>
 80189c4:	42a0      	cmp	r0, r4
 80189c6:	d20f      	bcs.n	80189e8 <_realloc_r+0x48>
 80189c8:	4621      	mov	r1, r4
 80189ca:	4638      	mov	r0, r7
 80189cc:	f7ff fa5c 	bl	8017e88 <_malloc_r>
 80189d0:	4605      	mov	r5, r0
 80189d2:	2800      	cmp	r0, #0
 80189d4:	d0f2      	beq.n	80189bc <_realloc_r+0x1c>
 80189d6:	4631      	mov	r1, r6
 80189d8:	4622      	mov	r2, r4
 80189da:	f7ff f9ef 	bl	8017dbc <memcpy>
 80189de:	4631      	mov	r1, r6
 80189e0:	4638      	mov	r0, r7
 80189e2:	f7ff fa01 	bl	8017de8 <_free_r>
 80189e6:	e7e9      	b.n	80189bc <_realloc_r+0x1c>
 80189e8:	4635      	mov	r5, r6
 80189ea:	e7e7      	b.n	80189bc <_realloc_r+0x1c>

080189ec <_malloc_usable_size_r>:
 80189ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80189f0:	1f18      	subs	r0, r3, #4
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	bfbc      	itt	lt
 80189f6:	580b      	ldrlt	r3, [r1, r0]
 80189f8:	18c0      	addlt	r0, r0, r3
 80189fa:	4770      	bx	lr

080189fc <powf>:
 80189fc:	b508      	push	{r3, lr}
 80189fe:	ed2d 8b04 	vpush	{d8-d9}
 8018a02:	eeb0 9a40 	vmov.f32	s18, s0
 8018a06:	eef0 8a60 	vmov.f32	s17, s1
 8018a0a:	f000 f88f 	bl	8018b2c <__ieee754_powf>
 8018a0e:	4b43      	ldr	r3, [pc, #268]	; (8018b1c <powf+0x120>)
 8018a10:	f993 3000 	ldrsb.w	r3, [r3]
 8018a14:	3301      	adds	r3, #1
 8018a16:	eeb0 8a40 	vmov.f32	s16, s0
 8018a1a:	d012      	beq.n	8018a42 <powf+0x46>
 8018a1c:	eef4 8a68 	vcmp.f32	s17, s17
 8018a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a24:	d60d      	bvs.n	8018a42 <powf+0x46>
 8018a26:	eeb4 9a49 	vcmp.f32	s18, s18
 8018a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a2e:	d70d      	bvc.n	8018a4c <powf+0x50>
 8018a30:	eef5 8a40 	vcmp.f32	s17, #0.0
 8018a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018a3c:	bf08      	it	eq
 8018a3e:	eeb0 8a67 	vmoveq.f32	s16, s15
 8018a42:	eeb0 0a48 	vmov.f32	s0, s16
 8018a46:	ecbd 8b04 	vpop	{d8-d9}
 8018a4a:	bd08      	pop	{r3, pc}
 8018a4c:	eddf 9a34 	vldr	s19, [pc, #208]	; 8018b20 <powf+0x124>
 8018a50:	eeb4 9a69 	vcmp.f32	s18, s19
 8018a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a58:	d116      	bne.n	8018a88 <powf+0x8c>
 8018a5a:	eef4 8a69 	vcmp.f32	s17, s19
 8018a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a62:	d057      	beq.n	8018b14 <powf+0x118>
 8018a64:	eeb0 0a68 	vmov.f32	s0, s17
 8018a68:	f000 fb2a 	bl	80190c0 <finitef>
 8018a6c:	2800      	cmp	r0, #0
 8018a6e:	d0e8      	beq.n	8018a42 <powf+0x46>
 8018a70:	eef4 8ae9 	vcmpe.f32	s17, s19
 8018a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a78:	d5e3      	bpl.n	8018a42 <powf+0x46>
 8018a7a:	f7ff f96d 	bl	8017d58 <__errno>
 8018a7e:	2321      	movs	r3, #33	; 0x21
 8018a80:	6003      	str	r3, [r0, #0]
 8018a82:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8018b24 <powf+0x128>
 8018a86:	e7dc      	b.n	8018a42 <powf+0x46>
 8018a88:	f000 fb1a 	bl	80190c0 <finitef>
 8018a8c:	bb50      	cbnz	r0, 8018ae4 <powf+0xe8>
 8018a8e:	eeb0 0a49 	vmov.f32	s0, s18
 8018a92:	f000 fb15 	bl	80190c0 <finitef>
 8018a96:	b328      	cbz	r0, 8018ae4 <powf+0xe8>
 8018a98:	eeb0 0a68 	vmov.f32	s0, s17
 8018a9c:	f000 fb10 	bl	80190c0 <finitef>
 8018aa0:	b300      	cbz	r0, 8018ae4 <powf+0xe8>
 8018aa2:	eeb4 8a48 	vcmp.f32	s16, s16
 8018aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aaa:	d706      	bvc.n	8018aba <powf+0xbe>
 8018aac:	f7ff f954 	bl	8017d58 <__errno>
 8018ab0:	2321      	movs	r3, #33	; 0x21
 8018ab2:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8018ab6:	6003      	str	r3, [r0, #0]
 8018ab8:	e7c3      	b.n	8018a42 <powf+0x46>
 8018aba:	f7ff f94d 	bl	8017d58 <__errno>
 8018abe:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8018ac2:	2322      	movs	r3, #34	; 0x22
 8018ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ac8:	6003      	str	r3, [r0, #0]
 8018aca:	d508      	bpl.n	8018ade <powf+0xe2>
 8018acc:	eeb0 0a68 	vmov.f32	s0, s17
 8018ad0:	f000 fb0a 	bl	80190e8 <rintf>
 8018ad4:	eeb4 0a68 	vcmp.f32	s0, s17
 8018ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018adc:	d1d1      	bne.n	8018a82 <powf+0x86>
 8018ade:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8018b28 <powf+0x12c>
 8018ae2:	e7ae      	b.n	8018a42 <powf+0x46>
 8018ae4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aec:	d1a9      	bne.n	8018a42 <powf+0x46>
 8018aee:	eeb0 0a49 	vmov.f32	s0, s18
 8018af2:	f000 fae5 	bl	80190c0 <finitef>
 8018af6:	2800      	cmp	r0, #0
 8018af8:	d0a3      	beq.n	8018a42 <powf+0x46>
 8018afa:	eeb0 0a68 	vmov.f32	s0, s17
 8018afe:	f000 fadf 	bl	80190c0 <finitef>
 8018b02:	2800      	cmp	r0, #0
 8018b04:	d09d      	beq.n	8018a42 <powf+0x46>
 8018b06:	f7ff f927 	bl	8017d58 <__errno>
 8018b0a:	2322      	movs	r3, #34	; 0x22
 8018b0c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8018b20 <powf+0x124>
 8018b10:	6003      	str	r3, [r0, #0]
 8018b12:	e796      	b.n	8018a42 <powf+0x46>
 8018b14:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8018b18:	e793      	b.n	8018a42 <powf+0x46>
 8018b1a:	bf00      	nop
 8018b1c:	20000244 	.word	0x20000244
 8018b20:	00000000 	.word	0x00000000
 8018b24:	ff800000 	.word	0xff800000
 8018b28:	7f800000 	.word	0x7f800000

08018b2c <__ieee754_powf>:
 8018b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b30:	ee10 5a90 	vmov	r5, s1
 8018b34:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8018b38:	ed2d 8b02 	vpush	{d8}
 8018b3c:	eeb0 8a40 	vmov.f32	s16, s0
 8018b40:	eef0 8a60 	vmov.f32	s17, s1
 8018b44:	f000 8291 	beq.w	801906a <__ieee754_powf+0x53e>
 8018b48:	ee10 8a10 	vmov	r8, s0
 8018b4c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8018b50:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8018b54:	dc06      	bgt.n	8018b64 <__ieee754_powf+0x38>
 8018b56:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8018b5a:	dd0a      	ble.n	8018b72 <__ieee754_powf+0x46>
 8018b5c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8018b60:	f000 8283 	beq.w	801906a <__ieee754_powf+0x53e>
 8018b64:	ecbd 8b02 	vpop	{d8}
 8018b68:	48d8      	ldr	r0, [pc, #864]	; (8018ecc <__ieee754_powf+0x3a0>)
 8018b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018b6e:	f000 bab5 	b.w	80190dc <nanf>
 8018b72:	f1b8 0f00 	cmp.w	r8, #0
 8018b76:	da1f      	bge.n	8018bb8 <__ieee754_powf+0x8c>
 8018b78:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8018b7c:	da2e      	bge.n	8018bdc <__ieee754_powf+0xb0>
 8018b7e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8018b82:	f2c0 827b 	blt.w	801907c <__ieee754_powf+0x550>
 8018b86:	15fb      	asrs	r3, r7, #23
 8018b88:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8018b8c:	fa47 f603 	asr.w	r6, r7, r3
 8018b90:	fa06 f303 	lsl.w	r3, r6, r3
 8018b94:	42bb      	cmp	r3, r7
 8018b96:	f040 8271 	bne.w	801907c <__ieee754_powf+0x550>
 8018b9a:	f006 0601 	and.w	r6, r6, #1
 8018b9e:	f1c6 0602 	rsb	r6, r6, #2
 8018ba2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8018ba6:	d120      	bne.n	8018bea <__ieee754_powf+0xbe>
 8018ba8:	2d00      	cmp	r5, #0
 8018baa:	f280 8264 	bge.w	8019076 <__ieee754_powf+0x54a>
 8018bae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018bb2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8018bb6:	e00d      	b.n	8018bd4 <__ieee754_powf+0xa8>
 8018bb8:	2600      	movs	r6, #0
 8018bba:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8018bbe:	d1f0      	bne.n	8018ba2 <__ieee754_powf+0x76>
 8018bc0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8018bc4:	f000 8251 	beq.w	801906a <__ieee754_powf+0x53e>
 8018bc8:	dd0a      	ble.n	8018be0 <__ieee754_powf+0xb4>
 8018bca:	2d00      	cmp	r5, #0
 8018bcc:	f280 8250 	bge.w	8019070 <__ieee754_powf+0x544>
 8018bd0:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8018ed0 <__ieee754_powf+0x3a4>
 8018bd4:	ecbd 8b02 	vpop	{d8}
 8018bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bdc:	2602      	movs	r6, #2
 8018bde:	e7ec      	b.n	8018bba <__ieee754_powf+0x8e>
 8018be0:	2d00      	cmp	r5, #0
 8018be2:	daf5      	bge.n	8018bd0 <__ieee754_powf+0xa4>
 8018be4:	eeb1 0a68 	vneg.f32	s0, s17
 8018be8:	e7f4      	b.n	8018bd4 <__ieee754_powf+0xa8>
 8018bea:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8018bee:	d102      	bne.n	8018bf6 <__ieee754_powf+0xca>
 8018bf0:	ee28 0a08 	vmul.f32	s0, s16, s16
 8018bf4:	e7ee      	b.n	8018bd4 <__ieee754_powf+0xa8>
 8018bf6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8018bfa:	eeb0 0a48 	vmov.f32	s0, s16
 8018bfe:	d108      	bne.n	8018c12 <__ieee754_powf+0xe6>
 8018c00:	f1b8 0f00 	cmp.w	r8, #0
 8018c04:	db05      	blt.n	8018c12 <__ieee754_powf+0xe6>
 8018c06:	ecbd 8b02 	vpop	{d8}
 8018c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c0e:	f000 ba4d 	b.w	80190ac <__ieee754_sqrtf>
 8018c12:	f000 fa4e 	bl	80190b2 <fabsf>
 8018c16:	b124      	cbz	r4, 8018c22 <__ieee754_powf+0xf6>
 8018c18:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8018c1c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8018c20:	d117      	bne.n	8018c52 <__ieee754_powf+0x126>
 8018c22:	2d00      	cmp	r5, #0
 8018c24:	bfbc      	itt	lt
 8018c26:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8018c2a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8018c2e:	f1b8 0f00 	cmp.w	r8, #0
 8018c32:	dacf      	bge.n	8018bd4 <__ieee754_powf+0xa8>
 8018c34:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8018c38:	ea54 0306 	orrs.w	r3, r4, r6
 8018c3c:	d104      	bne.n	8018c48 <__ieee754_powf+0x11c>
 8018c3e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018c42:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018c46:	e7c5      	b.n	8018bd4 <__ieee754_powf+0xa8>
 8018c48:	2e01      	cmp	r6, #1
 8018c4a:	d1c3      	bne.n	8018bd4 <__ieee754_powf+0xa8>
 8018c4c:	eeb1 0a40 	vneg.f32	s0, s0
 8018c50:	e7c0      	b.n	8018bd4 <__ieee754_powf+0xa8>
 8018c52:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8018c56:	3801      	subs	r0, #1
 8018c58:	ea56 0300 	orrs.w	r3, r6, r0
 8018c5c:	d104      	bne.n	8018c68 <__ieee754_powf+0x13c>
 8018c5e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8018c62:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018c66:	e7b5      	b.n	8018bd4 <__ieee754_powf+0xa8>
 8018c68:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8018c6c:	dd6b      	ble.n	8018d46 <__ieee754_powf+0x21a>
 8018c6e:	4b99      	ldr	r3, [pc, #612]	; (8018ed4 <__ieee754_powf+0x3a8>)
 8018c70:	429c      	cmp	r4, r3
 8018c72:	dc06      	bgt.n	8018c82 <__ieee754_powf+0x156>
 8018c74:	2d00      	cmp	r5, #0
 8018c76:	daab      	bge.n	8018bd0 <__ieee754_powf+0xa4>
 8018c78:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8018ed8 <__ieee754_powf+0x3ac>
 8018c7c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8018c80:	e7a8      	b.n	8018bd4 <__ieee754_powf+0xa8>
 8018c82:	4b96      	ldr	r3, [pc, #600]	; (8018edc <__ieee754_powf+0x3b0>)
 8018c84:	429c      	cmp	r4, r3
 8018c86:	dd02      	ble.n	8018c8e <__ieee754_powf+0x162>
 8018c88:	2d00      	cmp	r5, #0
 8018c8a:	dcf5      	bgt.n	8018c78 <__ieee754_powf+0x14c>
 8018c8c:	e7a0      	b.n	8018bd0 <__ieee754_powf+0xa4>
 8018c8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018c92:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018c96:	eddf 6a92 	vldr	s13, [pc, #584]	; 8018ee0 <__ieee754_powf+0x3b4>
 8018c9a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8018c9e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8018ca2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018ca6:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8018caa:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018cb2:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8018ee4 <__ieee754_powf+0x3b8>
 8018cb6:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8018cba:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8018ee8 <__ieee754_powf+0x3bc>
 8018cbe:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018cc2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8018eec <__ieee754_powf+0x3c0>
 8018cc6:	eef0 6a67 	vmov.f32	s13, s15
 8018cca:	eee0 6a07 	vfma.f32	s13, s0, s14
 8018cce:	ee16 3a90 	vmov	r3, s13
 8018cd2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8018cd6:	f023 030f 	bic.w	r3, r3, #15
 8018cda:	ee00 3a90 	vmov	s1, r3
 8018cde:	eee0 0a47 	vfms.f32	s1, s0, s14
 8018ce2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018ce6:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8018cea:	f025 050f 	bic.w	r5, r5, #15
 8018cee:	ee07 5a10 	vmov	s14, r5
 8018cf2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8018cf6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8018cfa:	ee07 3a90 	vmov	s15, r3
 8018cfe:	eee7 0a27 	vfma.f32	s1, s14, s15
 8018d02:	3e01      	subs	r6, #1
 8018d04:	ea56 0200 	orrs.w	r2, r6, r0
 8018d08:	ee07 5a10 	vmov	s14, r5
 8018d0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018d10:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8018d14:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8018d18:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8018d1c:	ee17 4a10 	vmov	r4, s14
 8018d20:	bf08      	it	eq
 8018d22:	eeb0 8a40 	vmoveq.f32	s16, s0
 8018d26:	2c00      	cmp	r4, #0
 8018d28:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8018d2c:	f340 8184 	ble.w	8019038 <__ieee754_powf+0x50c>
 8018d30:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8018d34:	f340 80fc 	ble.w	8018f30 <__ieee754_powf+0x404>
 8018d38:	eddf 7a67 	vldr	s15, [pc, #412]	; 8018ed8 <__ieee754_powf+0x3ac>
 8018d3c:	ee28 0a27 	vmul.f32	s0, s16, s15
 8018d40:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018d44:	e746      	b.n	8018bd4 <__ieee754_powf+0xa8>
 8018d46:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8018d4a:	bf01      	itttt	eq
 8018d4c:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8018ef0 <__ieee754_powf+0x3c4>
 8018d50:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8018d54:	f06f 0217 	mvneq.w	r2, #23
 8018d58:	ee17 4a90 	vmoveq	r4, s15
 8018d5c:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8018d60:	bf18      	it	ne
 8018d62:	2200      	movne	r2, #0
 8018d64:	3b7f      	subs	r3, #127	; 0x7f
 8018d66:	4413      	add	r3, r2
 8018d68:	4a62      	ldr	r2, [pc, #392]	; (8018ef4 <__ieee754_powf+0x3c8>)
 8018d6a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8018d6e:	4294      	cmp	r4, r2
 8018d70:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8018d74:	dd06      	ble.n	8018d84 <__ieee754_powf+0x258>
 8018d76:	4a60      	ldr	r2, [pc, #384]	; (8018ef8 <__ieee754_powf+0x3cc>)
 8018d78:	4294      	cmp	r4, r2
 8018d7a:	f340 80a4 	ble.w	8018ec6 <__ieee754_powf+0x39a>
 8018d7e:	3301      	adds	r3, #1
 8018d80:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8018d84:	2400      	movs	r4, #0
 8018d86:	4a5d      	ldr	r2, [pc, #372]	; (8018efc <__ieee754_powf+0x3d0>)
 8018d88:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8018d8c:	ee07 1a90 	vmov	s15, r1
 8018d90:	ed92 7a00 	vldr	s14, [r2]
 8018d94:	4a5a      	ldr	r2, [pc, #360]	; (8018f00 <__ieee754_powf+0x3d4>)
 8018d96:	ee37 6a27 	vadd.f32	s12, s14, s15
 8018d9a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8018d9e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8018da2:	1049      	asrs	r1, r1, #1
 8018da4:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8018da8:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8018dac:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8018db0:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8018db4:	ee06 1a10 	vmov	s12, r1
 8018db8:	ee65 4a26 	vmul.f32	s9, s10, s13
 8018dbc:	ee36 7a47 	vsub.f32	s14, s12, s14
 8018dc0:	ee14 7a90 	vmov	r7, s9
 8018dc4:	4017      	ands	r7, r2
 8018dc6:	ee05 7a90 	vmov	s11, r7
 8018dca:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8018dce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018dd2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8018f04 <__ieee754_powf+0x3d8>
 8018dd6:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8018dda:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8018dde:	ee25 6a26 	vmul.f32	s12, s10, s13
 8018de2:	eddf 6a49 	vldr	s13, [pc, #292]	; 8018f08 <__ieee754_powf+0x3dc>
 8018de6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8018dea:	eddf 6a48 	vldr	s13, [pc, #288]	; 8018f0c <__ieee754_powf+0x3e0>
 8018dee:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018df2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8018ee0 <__ieee754_powf+0x3b4>
 8018df6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018dfa:	eddf 6a45 	vldr	s13, [pc, #276]	; 8018f10 <__ieee754_powf+0x3e4>
 8018dfe:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018e02:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8018f14 <__ieee754_powf+0x3e8>
 8018e06:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018e0a:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8018e0e:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8018e12:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018e16:	eee5 6a07 	vfma.f32	s13, s10, s14
 8018e1a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8018e1e:	eef0 7a45 	vmov.f32	s15, s10
 8018e22:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8018e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018e2a:	ee17 1a90 	vmov	r1, s15
 8018e2e:	4011      	ands	r1, r2
 8018e30:	ee07 1a90 	vmov	s15, r1
 8018e34:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8018e38:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8018e3c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8018e40:	ee27 7a24 	vmul.f32	s14, s14, s9
 8018e44:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018e48:	eeb0 6a47 	vmov.f32	s12, s14
 8018e4c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8018e50:	ee16 1a10 	vmov	r1, s12
 8018e54:	4011      	ands	r1, r2
 8018e56:	ee06 1a90 	vmov	s13, r1
 8018e5a:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8018e5e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8018f18 <__ieee754_powf+0x3ec>
 8018e62:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8018f1c <__ieee754_powf+0x3f0>
 8018e66:	ee37 7a66 	vsub.f32	s14, s14, s13
 8018e6a:	ee06 1a10 	vmov	s12, r1
 8018e6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018e72:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8018f20 <__ieee754_powf+0x3f4>
 8018e76:	492b      	ldr	r1, [pc, #172]	; (8018f24 <__ieee754_powf+0x3f8>)
 8018e78:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018e7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018e80:	edd1 7a00 	vldr	s15, [r1]
 8018e84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018e88:	ee07 3a90 	vmov	s15, r3
 8018e8c:	4b26      	ldr	r3, [pc, #152]	; (8018f28 <__ieee754_powf+0x3fc>)
 8018e8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8018e92:	eef0 7a47 	vmov.f32	s15, s14
 8018e96:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018e9a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018e9e:	edd4 0a00 	vldr	s1, [r4]
 8018ea2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8018ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018eaa:	ee17 3a90 	vmov	r3, s15
 8018eae:	4013      	ands	r3, r2
 8018eb0:	ee07 3a90 	vmov	s15, r3
 8018eb4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8018eb8:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8018ebc:	eee6 6a65 	vfms.f32	s13, s12, s11
 8018ec0:	ee77 7a66 	vsub.f32	s15, s14, s13
 8018ec4:	e70f      	b.n	8018ce6 <__ieee754_powf+0x1ba>
 8018ec6:	2401      	movs	r4, #1
 8018ec8:	e75d      	b.n	8018d86 <__ieee754_powf+0x25a>
 8018eca:	bf00      	nop
 8018ecc:	0801a2ac 	.word	0x0801a2ac
 8018ed0:	00000000 	.word	0x00000000
 8018ed4:	3f7ffff7 	.word	0x3f7ffff7
 8018ed8:	7149f2ca 	.word	0x7149f2ca
 8018edc:	3f800007 	.word	0x3f800007
 8018ee0:	3eaaaaab 	.word	0x3eaaaaab
 8018ee4:	3fb8aa3b 	.word	0x3fb8aa3b
 8018ee8:	36eca570 	.word	0x36eca570
 8018eec:	3fb8aa00 	.word	0x3fb8aa00
 8018ef0:	4b800000 	.word	0x4b800000
 8018ef4:	001cc471 	.word	0x001cc471
 8018ef8:	005db3d6 	.word	0x005db3d6
 8018efc:	0801a2dc 	.word	0x0801a2dc
 8018f00:	fffff000 	.word	0xfffff000
 8018f04:	3e6c3255 	.word	0x3e6c3255
 8018f08:	3e53f142 	.word	0x3e53f142
 8018f0c:	3e8ba305 	.word	0x3e8ba305
 8018f10:	3edb6db7 	.word	0x3edb6db7
 8018f14:	3f19999a 	.word	0x3f19999a
 8018f18:	3f76384f 	.word	0x3f76384f
 8018f1c:	3f763800 	.word	0x3f763800
 8018f20:	369dc3a0 	.word	0x369dc3a0
 8018f24:	0801a2ec 	.word	0x0801a2ec
 8018f28:	0801a2e4 	.word	0x0801a2e4
 8018f2c:	3338aa3c 	.word	0x3338aa3c
 8018f30:	f040 8092 	bne.w	8019058 <__ieee754_powf+0x52c>
 8018f34:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8018f2c <__ieee754_powf+0x400>
 8018f38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018f3c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8018f40:	eef4 6ac7 	vcmpe.f32	s13, s14
 8018f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f48:	f73f aef6 	bgt.w	8018d38 <__ieee754_powf+0x20c>
 8018f4c:	15db      	asrs	r3, r3, #23
 8018f4e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8018f52:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8018f56:	4103      	asrs	r3, r0
 8018f58:	4423      	add	r3, r4
 8018f5a:	4949      	ldr	r1, [pc, #292]	; (8019080 <__ieee754_powf+0x554>)
 8018f5c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018f60:	3a7f      	subs	r2, #127	; 0x7f
 8018f62:	4111      	asrs	r1, r2
 8018f64:	ea23 0101 	bic.w	r1, r3, r1
 8018f68:	ee07 1a10 	vmov	s14, r1
 8018f6c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8018f70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8018f74:	f1c2 0217 	rsb	r2, r2, #23
 8018f78:	4110      	asrs	r0, r2
 8018f7a:	2c00      	cmp	r4, #0
 8018f7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018f80:	bfb8      	it	lt
 8018f82:	4240      	neglt	r0, r0
 8018f84:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8018f88:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8019084 <__ieee754_powf+0x558>
 8018f8c:	ee17 3a10 	vmov	r3, s14
 8018f90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8018f94:	f023 030f 	bic.w	r3, r3, #15
 8018f98:	ee07 3a10 	vmov	s14, r3
 8018f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018fa0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8018fa4:	eddf 7a38 	vldr	s15, [pc, #224]	; 8019088 <__ieee754_powf+0x55c>
 8018fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018fac:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8018fb0:	eddf 6a36 	vldr	s13, [pc, #216]	; 801908c <__ieee754_powf+0x560>
 8018fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8018fb8:	eea7 0a26 	vfma.f32	s0, s14, s13
 8018fbc:	eeb0 6a40 	vmov.f32	s12, s0
 8018fc0:	eea7 6a66 	vfms.f32	s12, s14, s13
 8018fc4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018fc8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018fcc:	eddf 6a30 	vldr	s13, [pc, #192]	; 8019090 <__ieee754_powf+0x564>
 8018fd0:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8019094 <__ieee754_powf+0x568>
 8018fd4:	eea7 6a26 	vfma.f32	s12, s14, s13
 8018fd8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8019098 <__ieee754_powf+0x56c>
 8018fdc:	eee6 6a07 	vfma.f32	s13, s12, s14
 8018fe0:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801909c <__ieee754_powf+0x570>
 8018fe4:	eea6 6a87 	vfma.f32	s12, s13, s14
 8018fe8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80190a0 <__ieee754_powf+0x574>
 8018fec:	eee6 6a07 	vfma.f32	s13, s12, s14
 8018ff0:	eeb0 6a40 	vmov.f32	s12, s0
 8018ff4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8018ff8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8018ffc:	eeb0 7a46 	vmov.f32	s14, s12
 8019000:	ee77 6a66 	vsub.f32	s13, s14, s13
 8019004:	ee20 6a06 	vmul.f32	s12, s0, s12
 8019008:	eee0 7a27 	vfma.f32	s15, s0, s15
 801900c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8019010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019014:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019018:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801901c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019020:	ee10 3a10 	vmov	r3, s0
 8019024:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8019028:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801902c:	da1a      	bge.n	8019064 <__ieee754_powf+0x538>
 801902e:	f000 f8b7 	bl	80191a0 <scalbnf>
 8019032:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019036:	e5cd      	b.n	8018bd4 <__ieee754_powf+0xa8>
 8019038:	4a1a      	ldr	r2, [pc, #104]	; (80190a4 <__ieee754_powf+0x578>)
 801903a:	4293      	cmp	r3, r2
 801903c:	dd02      	ble.n	8019044 <__ieee754_powf+0x518>
 801903e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80190a8 <__ieee754_powf+0x57c>
 8019042:	e67b      	b.n	8018d3c <__ieee754_powf+0x210>
 8019044:	d108      	bne.n	8019058 <__ieee754_powf+0x52c>
 8019046:	ee37 7a67 	vsub.f32	s14, s14, s15
 801904a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801904e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019052:	f6ff af7b 	blt.w	8018f4c <__ieee754_powf+0x420>
 8019056:	e7f2      	b.n	801903e <__ieee754_powf+0x512>
 8019058:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801905c:	f73f af76 	bgt.w	8018f4c <__ieee754_powf+0x420>
 8019060:	2000      	movs	r0, #0
 8019062:	e78f      	b.n	8018f84 <__ieee754_powf+0x458>
 8019064:	ee00 3a10 	vmov	s0, r3
 8019068:	e7e3      	b.n	8019032 <__ieee754_powf+0x506>
 801906a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801906e:	e5b1      	b.n	8018bd4 <__ieee754_powf+0xa8>
 8019070:	eeb0 0a68 	vmov.f32	s0, s17
 8019074:	e5ae      	b.n	8018bd4 <__ieee754_powf+0xa8>
 8019076:	eeb0 0a48 	vmov.f32	s0, s16
 801907a:	e5ab      	b.n	8018bd4 <__ieee754_powf+0xa8>
 801907c:	2600      	movs	r6, #0
 801907e:	e590      	b.n	8018ba2 <__ieee754_powf+0x76>
 8019080:	007fffff 	.word	0x007fffff
 8019084:	3f317218 	.word	0x3f317218
 8019088:	35bfbe8c 	.word	0x35bfbe8c
 801908c:	3f317200 	.word	0x3f317200
 8019090:	3331bb4c 	.word	0x3331bb4c
 8019094:	b5ddea0e 	.word	0xb5ddea0e
 8019098:	388ab355 	.word	0x388ab355
 801909c:	bb360b61 	.word	0xbb360b61
 80190a0:	3e2aaaab 	.word	0x3e2aaaab
 80190a4:	43160000 	.word	0x43160000
 80190a8:	0da24260 	.word	0x0da24260

080190ac <__ieee754_sqrtf>:
 80190ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80190b0:	4770      	bx	lr

080190b2 <fabsf>:
 80190b2:	ee10 3a10 	vmov	r3, s0
 80190b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80190ba:	ee00 3a10 	vmov	s0, r3
 80190be:	4770      	bx	lr

080190c0 <finitef>:
 80190c0:	b082      	sub	sp, #8
 80190c2:	ed8d 0a01 	vstr	s0, [sp, #4]
 80190c6:	9801      	ldr	r0, [sp, #4]
 80190c8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80190cc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80190d0:	bfac      	ite	ge
 80190d2:	2000      	movge	r0, #0
 80190d4:	2001      	movlt	r0, #1
 80190d6:	b002      	add	sp, #8
 80190d8:	4770      	bx	lr
	...

080190dc <nanf>:
 80190dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80190e4 <nanf+0x8>
 80190e0:	4770      	bx	lr
 80190e2:	bf00      	nop
 80190e4:	7fc00000 	.word	0x7fc00000

080190e8 <rintf>:
 80190e8:	ee10 2a10 	vmov	r2, s0
 80190ec:	b513      	push	{r0, r1, r4, lr}
 80190ee:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80190f2:	397f      	subs	r1, #127	; 0x7f
 80190f4:	2916      	cmp	r1, #22
 80190f6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80190fa:	dc47      	bgt.n	801918c <rintf+0xa4>
 80190fc:	b32b      	cbz	r3, 801914a <rintf+0x62>
 80190fe:	2900      	cmp	r1, #0
 8019100:	ee10 3a10 	vmov	r3, s0
 8019104:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8019108:	da21      	bge.n	801914e <rintf+0x66>
 801910a:	f3c2 0316 	ubfx	r3, r2, #0, #23
 801910e:	425b      	negs	r3, r3
 8019110:	4921      	ldr	r1, [pc, #132]	; (8019198 <rintf+0xb0>)
 8019112:	0a5b      	lsrs	r3, r3, #9
 8019114:	0d12      	lsrs	r2, r2, #20
 8019116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801911a:	0512      	lsls	r2, r2, #20
 801911c:	4313      	orrs	r3, r2
 801911e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8019122:	ee07 3a90 	vmov	s15, r3
 8019126:	edd1 6a00 	vldr	s13, [r1]
 801912a:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801912e:	ed8d 7a01 	vstr	s14, [sp, #4]
 8019132:	eddd 7a01 	vldr	s15, [sp, #4]
 8019136:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801913a:	ee17 3a90 	vmov	r3, s15
 801913e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019142:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8019146:	ee00 3a10 	vmov	s0, r3
 801914a:	b002      	add	sp, #8
 801914c:	bd10      	pop	{r4, pc}
 801914e:	4a13      	ldr	r2, [pc, #76]	; (801919c <rintf+0xb4>)
 8019150:	410a      	asrs	r2, r1
 8019152:	4213      	tst	r3, r2
 8019154:	d0f9      	beq.n	801914a <rintf+0x62>
 8019156:	0854      	lsrs	r4, r2, #1
 8019158:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 801915c:	d006      	beq.n	801916c <rintf+0x84>
 801915e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8019162:	ea23 0304 	bic.w	r3, r3, r4
 8019166:	fa42 f101 	asr.w	r1, r2, r1
 801916a:	430b      	orrs	r3, r1
 801916c:	4a0a      	ldr	r2, [pc, #40]	; (8019198 <rintf+0xb0>)
 801916e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8019172:	ed90 7a00 	vldr	s14, [r0]
 8019176:	ee07 3a90 	vmov	s15, r3
 801917a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801917e:	edcd 7a01 	vstr	s15, [sp, #4]
 8019182:	ed9d 0a01 	vldr	s0, [sp, #4]
 8019186:	ee30 0a47 	vsub.f32	s0, s0, s14
 801918a:	e7de      	b.n	801914a <rintf+0x62>
 801918c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019190:	d3db      	bcc.n	801914a <rintf+0x62>
 8019192:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019196:	e7d8      	b.n	801914a <rintf+0x62>
 8019198:	0801a2f4 	.word	0x0801a2f4
 801919c:	007fffff 	.word	0x007fffff

080191a0 <scalbnf>:
 80191a0:	ee10 3a10 	vmov	r3, s0
 80191a4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80191a8:	d025      	beq.n	80191f6 <scalbnf+0x56>
 80191aa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80191ae:	d302      	bcc.n	80191b6 <scalbnf+0x16>
 80191b0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80191b4:	4770      	bx	lr
 80191b6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80191ba:	d122      	bne.n	8019202 <scalbnf+0x62>
 80191bc:	4b2a      	ldr	r3, [pc, #168]	; (8019268 <scalbnf+0xc8>)
 80191be:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801926c <scalbnf+0xcc>
 80191c2:	4298      	cmp	r0, r3
 80191c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80191c8:	db16      	blt.n	80191f8 <scalbnf+0x58>
 80191ca:	ee10 3a10 	vmov	r3, s0
 80191ce:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80191d2:	3a19      	subs	r2, #25
 80191d4:	4402      	add	r2, r0
 80191d6:	2afe      	cmp	r2, #254	; 0xfe
 80191d8:	dd15      	ble.n	8019206 <scalbnf+0x66>
 80191da:	ee10 3a10 	vmov	r3, s0
 80191de:	eddf 7a24 	vldr	s15, [pc, #144]	; 8019270 <scalbnf+0xd0>
 80191e2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8019274 <scalbnf+0xd4>
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	eeb0 7a67 	vmov.f32	s14, s15
 80191ec:	bfb8      	it	lt
 80191ee:	eef0 7a66 	vmovlt.f32	s15, s13
 80191f2:	ee27 0a27 	vmul.f32	s0, s14, s15
 80191f6:	4770      	bx	lr
 80191f8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8019278 <scalbnf+0xd8>
 80191fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019200:	4770      	bx	lr
 8019202:	0dd2      	lsrs	r2, r2, #23
 8019204:	e7e6      	b.n	80191d4 <scalbnf+0x34>
 8019206:	2a00      	cmp	r2, #0
 8019208:	dd06      	ble.n	8019218 <scalbnf+0x78>
 801920a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801920e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8019212:	ee00 3a10 	vmov	s0, r3
 8019216:	4770      	bx	lr
 8019218:	f112 0f16 	cmn.w	r2, #22
 801921c:	da1a      	bge.n	8019254 <scalbnf+0xb4>
 801921e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019222:	4298      	cmp	r0, r3
 8019224:	ee10 3a10 	vmov	r3, s0
 8019228:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801922c:	dd0a      	ble.n	8019244 <scalbnf+0xa4>
 801922e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8019270 <scalbnf+0xd0>
 8019232:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8019274 <scalbnf+0xd4>
 8019236:	eef0 7a40 	vmov.f32	s15, s0
 801923a:	2b00      	cmp	r3, #0
 801923c:	bf18      	it	ne
 801923e:	eeb0 0a47 	vmovne.f32	s0, s14
 8019242:	e7db      	b.n	80191fc <scalbnf+0x5c>
 8019244:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8019278 <scalbnf+0xd8>
 8019248:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801927c <scalbnf+0xdc>
 801924c:	eef0 7a40 	vmov.f32	s15, s0
 8019250:	2b00      	cmp	r3, #0
 8019252:	e7f3      	b.n	801923c <scalbnf+0x9c>
 8019254:	3219      	adds	r2, #25
 8019256:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801925a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801925e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019280 <scalbnf+0xe0>
 8019262:	ee07 3a10 	vmov	s14, r3
 8019266:	e7c4      	b.n	80191f2 <scalbnf+0x52>
 8019268:	ffff3cb0 	.word	0xffff3cb0
 801926c:	4c000000 	.word	0x4c000000
 8019270:	7149f2ca 	.word	0x7149f2ca
 8019274:	f149f2ca 	.word	0xf149f2ca
 8019278:	0da24260 	.word	0x0da24260
 801927c:	8da24260 	.word	0x8da24260
 8019280:	33000000 	.word	0x33000000

08019284 <_init>:
 8019284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019286:	bf00      	nop
 8019288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801928a:	bc08      	pop	{r3}
 801928c:	469e      	mov	lr, r3
 801928e:	4770      	bx	lr

08019290 <_fini>:
 8019290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019292:	bf00      	nop
 8019294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019296:	bc08      	pop	{r3}
 8019298:	469e      	mov	lr, r3
 801929a:	4770      	bx	lr

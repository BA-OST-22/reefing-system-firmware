
reefing-system-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  0800e66c  0800e66c  0001e66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e910  0800e910  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800e910  0800e910  0001e910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e918  0800e918  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e918  0800e918  0001e918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e91c  0800e91c  0001e91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800e920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007cb0  20000218  0800eb38  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007ec8  0800eb38  00027ec8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00043d56  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006bdd  00000000  00000000  00063f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b08  00000000  00000000  0006ab80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001f242  00000000  00000000  0006d688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002e2b8  00000000  00000000  0008c8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b2e63  00000000  00000000  000bab82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0016d9e5  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00002858  00000000  00000000  0016da38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b980  00000000  00000000  00170290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e654 	.word	0x0800e654

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800e654 	.word	0x0800e654

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <ADC_Select>:
#include "adc.h"

extern ADC_HandleTypeDef hadc1;

void ADC_Select(adc_source_t channel)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = (uint32_t)channel;
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = 1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80005a8:	2303      	movs	r3, #3
 80005aa:	613b      	str	r3, [r7, #16]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	4619      	mov	r1, r3
 80005b2:	4804      	ldr	r0, [pc, #16]	; (80005c4 <ADC_Select+0x3c>)
 80005b4:	f002 fa96 	bl	8002ae4 <HAL_ADC_ConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
	    return;
	  }
}
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20005c30 	.word	0x20005c30

080005c8 <ADC_Get>:

uint32_t ADC_Get(adc_source_t channel){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	uint32_t value;
	ADC_Select(channel);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffd7 	bl	8000588 <ADC_Select>
	HAL_ADC_Start(&hadc1);
 80005da:	480a      	ldr	r0, [pc, #40]	; (8000604 <ADC_Get+0x3c>)
 80005dc:	f002 f902 	bl	80027e4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80005e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005e4:	4807      	ldr	r0, [pc, #28]	; (8000604 <ADC_Get+0x3c>)
 80005e6:	f002 f9e4 	bl	80029b2 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(&hadc1);
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <ADC_Get+0x3c>)
 80005ec:	f002 fa6c 	bl	8002ac8 <HAL_ADC_GetValue>
 80005f0:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(&hadc1);
 80005f2:	4804      	ldr	r0, [pc, #16]	; (8000604 <ADC_Get+0x3c>)
 80005f4:	f002 f9aa 	bl	800294c <HAL_ADC_Stop>
	return value;
 80005f8:	68fb      	ldr	r3, [r7, #12]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20005c30 	.word	0x20005c30

08000608 <go_to_sleep>:
#include "main.h"
#include "sleep.h"

void go_to_sleep(){
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000612:	480e      	ldr	r0, [pc, #56]	; (800064c <go_to_sleep+0x44>)
 8000614:	f002 ff44 	bl	80034a0 <HAL_GPIO_WritePin>

	while((HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0));
 8000618:	bf00      	nop
 800061a:	2104      	movs	r1, #4
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <go_to_sleep+0x48>)
 800061e:	f002 ff27 	bl	8003470 <HAL_GPIO_ReadPin>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0f8      	beq.n	800061a <go_to_sleep+0x12>
	HAL_Delay(10);
 8000628:	200a      	movs	r0, #10
 800062a:	f002 f873 	bl	8002714 <HAL_Delay>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800062e:	2008      	movs	r0, #8
 8000630:	f002 fd7e 	bl	8003130 <HAL_NVIC_EnableIRQ>
	/* Disable Systick interrupt */
	HAL_SuspendTick();
 8000634:	f000 fe44 	bl	80012c0 <HAL_SuspendTick>

    /* Go to sleep */
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000638:	2101      	movs	r1, #1
 800063a:	2001      	movs	r0, #1
 800063c:	f004 f8e6 	bl	800480c <HAL_PWR_EnterSTOPMode>

    /* Return from sleep */
    SystemClock_Config();
 8000640:	f000 f930 	bl	80008a4 <SystemClock_Config>
    HAL_ResumeTick();
 8000644:	f000 fe4e 	bl	80012e4 <HAL_ResumeTick>

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40020800 	.word	0x40020800
 8000650:	40020000 	.word	0x40020000

08000654 <wake_up>:

void wake_up(){
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
	/* Clear Wake Up Flag */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <wake_up+0x1c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <wake_up+0x1c>)
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40007000 	.word	0x40007000

08000674 <platform_write>:
                             uint16_t len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	607a      	str	r2, [r7, #4]
 800067e:	461a      	mov	r2, r3
 8000680:	460b      	mov	r3, r1
 8000682:	72fb      	strb	r3, [r7, #11]
 8000684:	4613      	mov	r3, r2
 8000686:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2104      	movs	r1, #4
 800068c:	480c      	ldr	r0, [pc, #48]	; (80006c0 <platform_write+0x4c>)
 800068e:	f002 ff07 	bl	80034a0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 2);
 8000692:	f107 010b 	add.w	r1, r7, #11
 8000696:	2302      	movs	r3, #2
 8000698:	2201      	movs	r2, #1
 800069a:	68f8      	ldr	r0, [r7, #12]
 800069c:	f004 fe11 	bl	80052c2 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 2);
 80006a0:	893a      	ldrh	r2, [r7, #8]
 80006a2:	2302      	movs	r3, #2
 80006a4:	6879      	ldr	r1, [r7, #4]
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f004 fe0b 	bl	80052c2 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2104      	movs	r1, #4
 80006b0:	4803      	ldr	r0, [pc, #12]	; (80006c0 <platform_write+0x4c>)
 80006b2:	f002 fef5 	bl	80034a0 <HAL_GPIO_WritePin>
  return 0;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40020400 	.word	0x40020400

080006c4 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	607a      	str	r2, [r7, #4]
 80006ce:	461a      	mov	r2, r3
 80006d0:	460b      	mov	r3, r1
 80006d2:	72fb      	strb	r3, [r7, #11]
 80006d4:	4613      	mov	r3, r2
 80006d6:	813b      	strh	r3, [r7, #8]
  reg |= 0x80;
 80006d8:	7afb      	ldrb	r3, [r7, #11]
 80006da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2104      	movs	r1, #4
 80006e6:	480e      	ldr	r0, [pc, #56]	; (8000720 <platform_read+0x5c>)
 80006e8:	f002 feda 	bl	80034a0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 80006ec:	f107 010b 	add.w	r1, r7, #11
 80006f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f4:	2201      	movs	r2, #1
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f004 fde3 	bl	80052c2 <HAL_SPI_Transmit>
  HAL_SPI_Receive(handle, bufp, len, 1000);
 80006fc:	893a      	ldrh	r2, [r7, #8]
 80006fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	68f8      	ldr	r0, [r7, #12]
 8000706:	f004 ff18 	bl	800553a <HAL_SPI_Receive>
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 800070a:	2201      	movs	r2, #1
 800070c:	2104      	movs	r1, #4
 800070e:	4804      	ldr	r0, [pc, #16]	; (8000720 <platform_read+0x5c>)
 8000710:	f002 fec6 	bl	80034a0 <HAL_GPIO_WritePin>
  return 0;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40020400 	.word	0x40020400

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072a:	f001 ffb1 	bl	8002690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072e:	f000 f8b9 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000732:	f000 fa6f 	bl	8000c14 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000736:	f000 f91d 	bl	8000974 <MX_ADC1_Init>
  MX_TIM4_Init();
 800073a:	f000 f9e7 	bl	8000b0c <MX_TIM4_Init>
  MX_SPI1_Init();
 800073e:	f000 f979 	bl	8000a34 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000742:	f000 f9ad 	bl	8000aa0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000746:	f000 fa3b 	bl	8000bc0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800074a:	2008      	movs	r0, #8
 800074c:	f002 fcfe 	bl	800314c <HAL_NVIC_DisableIRQ>



  HAL_GPIO_WritePin(P_EN_CUT_GPIO_Port, P_EN_CUT_Pin, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000756:	483f      	ldr	r0, [pc, #252]	; (8000854 <main+0x130>)
 8000758:	f002 fea2 	bl	80034a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CUT_EN_GPIO_Port, CUT_EN_Pin, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2120      	movs	r1, #32
 8000760:	483c      	ldr	r0, [pc, #240]	; (8000854 <main+0x130>)
 8000762:	f002 fe9d 	bl	80034a0 <HAL_GPIO_WritePin>

  dev_ctx.write_reg = platform_write;
 8000766:	4b3c      	ldr	r3, [pc, #240]	; (8000858 <main+0x134>)
 8000768:	4a3c      	ldr	r2, [pc, #240]	; (800085c <main+0x138>)
 800076a:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 800076c:	4b3a      	ldr	r3, [pc, #232]	; (8000858 <main+0x134>)
 800076e:	4a3c      	ldr	r2, [pc, #240]	; (8000860 <main+0x13c>)
 8000770:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &hspi1;
 8000772:	4b39      	ldr	r3, [pc, #228]	; (8000858 <main+0x134>)
 8000774:	4a3b      	ldr	r2, [pc, #236]	; (8000864 <main+0x140>)
 8000776:	609a      	str	r2, [r3, #8]

  uint8_t whoamI;
  lsm6dsr_pin_int1_route_t int1_route;

  lsm6dsr_device_id_get(&dev_ctx, &whoamI);
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	4619      	mov	r1, r3
 800077c:	4836      	ldr	r0, [pc, #216]	; (8000858 <main+0x134>)
 800077e:	f001 f9da 	bl	8001b36 <lsm6dsr_device_id_get>

  if (whoamI != LSM6DSR_ID)
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b6b      	cmp	r3, #107	; 0x6b
 8000786:	d000      	beq.n	800078a <main+0x66>
      while (1);
 8000788:	e7fe      	b.n	8000788 <main+0x64>

  lsm6dsr_reset_set(&dev_ctx, PROPERTY_ENABLE);
 800078a:	2101      	movs	r1, #1
 800078c:	4832      	ldr	r0, [pc, #200]	; (8000858 <main+0x134>)
 800078e:	f001 f9e3 	bl	8001b58 <lsm6dsr_reset_set>
  HAL_Delay(10);
 8000792:	200a      	movs	r0, #10
 8000794:	f001 ffbe 	bl	8002714 <HAL_Delay>

  /* Disable I3C interface */
  lsm6dsr_i3c_disable_set(&dev_ctx, LSM6DSR_I3C_DISABLE);
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	482f      	ldr	r0, [pc, #188]	; (8000858 <main+0x134>)
 800079c:	f001 fa28 	bl	8001bf0 <lsm6dsr_i3c_disable_set>

  /* Enable Block Data Update */
  lsm6dsr_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80007a0:	2101      	movs	r1, #1
 80007a2:	482d      	ldr	r0, [pc, #180]	; (8000858 <main+0x134>)
 80007a4:	f001 f8c2 	bl	800192c <lsm6dsr_block_data_update_set>
  /* Set Output Data Rate */
  lsm6dsr_xl_data_rate_set(&dev_ctx, LSM6DSR_XL_ODR_12Hz5);
 80007a8:	2101      	movs	r1, #1
 80007aa:	482b      	ldr	r0, [pc, #172]	; (8000858 <main+0x134>)
 80007ac:	f000 fea0 	bl	80014f0 <lsm6dsr_xl_data_rate_set>
  lsm6dsr_gy_data_rate_set(&dev_ctx, LSM6DSR_GY_ODR_12Hz5);
 80007b0:	2101      	movs	r1, #1
 80007b2:	4829      	ldr	r0, [pc, #164]	; (8000858 <main+0x134>)
 80007b4:	f000 ffbe 	bl	8001734 <lsm6dsr_gy_data_rate_set>
  /* Set full scale */
  lsm6dsr_xl_full_scale_set(&dev_ctx, LSM6DSR_16g);
 80007b8:	2101      	movs	r1, #1
 80007ba:	4827      	ldr	r0, [pc, #156]	; (8000858 <main+0x134>)
 80007bc:	f000 fe72 	bl	80014a4 <lsm6dsr_xl_full_scale_set>
  lsm6dsr_gy_full_scale_set(&dev_ctx, LSM6DSR_2000dps);
 80007c0:	210c      	movs	r1, #12
 80007c2:	4825      	ldr	r0, [pc, #148]	; (8000858 <main+0x134>)
 80007c4:	f000 ff90 	bl	80016e8 <lsm6dsr_gy_full_scale_set>
  */
  //lsm6dsr_xl_hp_path_on_out_set(&dev_ctx, LSM6DSR_LP_ODR_DIV_100);
  //lsm6dsr_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);

  /* Apply high-pass digital filter on Wake-Up function */
  lsm6dsr_xl_hp_path_internal_set(&dev_ctx, LSM6DSR_USE_SLOPE);
 80007c8:	2100      	movs	r1, #0
 80007ca:	4823      	ldr	r0, [pc, #140]	; (8000858 <main+0x134>)
 80007cc:	f001 f9ea 	bl	8001ba4 <lsm6dsr_xl_hp_path_internal_set>
  /* Set Wake-Up threshold: 1 LSb corresponds to FS_XL/2^6 */
  lsm6dsr_wkup_threshold_set(&dev_ctx, 2);
 80007d0:	2102      	movs	r1, #2
 80007d2:	4821      	ldr	r0, [pc, #132]	; (8000858 <main+0x134>)
 80007d4:	f001 fc05 	bl	8001fe2 <lsm6dsr_wkup_threshold_set>

  /* interrupt generation on Wake-Up INT1 pin */
  lsm6dsr_pin_int1_route_get(&dev_ctx, &int1_route);
 80007d8:	463b      	mov	r3, r7
 80007da:	4619      	mov	r1, r3
 80007dc:	481e      	ldr	r0, [pc, #120]	; (8000858 <main+0x134>)
 80007de:	f001 fbb3 	bl	8001f48 <lsm6dsr_pin_int1_route_get>
  int1_route.md1_cfg.int1_wu = PROPERTY_ENABLE;
 80007e2:	787b      	ldrb	r3, [r7, #1]
 80007e4:	f043 0320 	orr.w	r3, r3, #32
 80007e8:	707b      	strb	r3, [r7, #1]
  lsm6dsr_pin_int1_route_set(&dev_ctx, &int1_route);
 80007ea:	463b      	mov	r3, r7
 80007ec:	4619      	mov	r1, r3
 80007ee:	481a      	ldr	r0, [pc, #104]	; (8000858 <main+0x134>)
 80007f0:	f001 fa44 	bl	8001c7c <lsm6dsr_pin_int1_route_set>



  fifo_init(&usb_output_fifo, usb_fifo_out_buffer, USB_OUTPUT_BUFFER_SIZE);
 80007f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f8:	491b      	ldr	r1, [pc, #108]	; (8000868 <main+0x144>)
 80007fa:	481c      	ldr	r0, [pc, #112]	; (800086c <main+0x148>)
 80007fc:	f001 fd52 	bl	80022a4 <fifo_init>
  fifo_init(&usb_input_fifo, usb_fifo_in_buffer, USB_INPUT_BUFFER_SIZE);
 8000800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000804:	491a      	ldr	r1, [pc, #104]	; (8000870 <main+0x14c>)
 8000806:	481b      	ldr	r0, [pc, #108]	; (8000874 <main+0x150>)
 8000808:	f001 fd4c 	bl	80022a4 <fifo_init>

  log_enable();
 800080c:	f001 fe80 	bl	8002510 <log_enable>
  //dcdc_enable();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000810:	f009 fa66 	bl	8009ce0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000814:	4a18      	ldr	r2, [pc, #96]	; (8000878 <main+0x154>)
 8000816:	2100      	movs	r1, #0
 8000818:	4818      	ldr	r0, [pc, #96]	; (800087c <main+0x158>)
 800081a:	f009 fac9 	bl	8009db0 <osThreadNew>
 800081e:	4603      	mov	r3, r0
 8000820:	4a17      	ldr	r2, [pc, #92]	; (8000880 <main+0x15c>)
 8000822:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadNew(task_sensor_read, NULL, &task_sensor_read_attributes);
 8000824:	4a17      	ldr	r2, [pc, #92]	; (8000884 <main+0x160>)
 8000826:	2100      	movs	r1, #0
 8000828:	4817      	ldr	r0, [pc, #92]	; (8000888 <main+0x164>)
 800082a:	f009 fac1 	bl	8009db0 <osThreadNew>
  osThreadNew(task_fsm, NULL, &task_fsm_attributes);
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <main+0x168>)
 8000830:	2100      	movs	r1, #0
 8000832:	4817      	ldr	r0, [pc, #92]	; (8000890 <main+0x16c>)
 8000834:	f009 fabc 	bl	8009db0 <osThreadNew>
  osThreadNew(task_heater, NULL, &task_heater_attributes);
 8000838:	4a16      	ldr	r2, [pc, #88]	; (8000894 <main+0x170>)
 800083a:	2100      	movs	r1, #0
 800083c:	4816      	ldr	r0, [pc, #88]	; (8000898 <main+0x174>)
 800083e:	f009 fab7 	bl	8009db0 <osThreadNew>
  osThreadNew(task_state_est, NULL, &task_state_est_attributes);
 8000842:	4a16      	ldr	r2, [pc, #88]	; (800089c <main+0x178>)
 8000844:	2100      	movs	r1, #0
 8000846:	4816      	ldr	r0, [pc, #88]	; (80008a0 <main+0x17c>)
 8000848:	f009 fab2 	bl	8009db0 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800084c:	f009 fa6c 	bl	8009d28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000850:	e7fe      	b.n	8000850 <main+0x12c>
 8000852:	bf00      	nop
 8000854:	40020400 	.word	0x40020400
 8000858:	20000234 	.word	0x20000234
 800085c:	08000675 	.word	0x08000675
 8000860:	080006c5 	.word	0x080006c5
 8000864:	200071d0 	.word	0x200071d0
 8000868:	20005174 	.word	0x20005174
 800086c:	20005374 	.word	0x20005374
 8000870:	20004f5c 	.word	0x20004f5c
 8000874:	2000515c 	.word	0x2000515c
 8000878:	0800e810 	.word	0x0800e810
 800087c:	08000de5 	.word	0x08000de5
 8000880:	2000538c 	.word	0x2000538c
 8000884:	0800e834 	.word	0x0800e834
 8000888:	0800222d 	.word	0x0800222d
 800088c:	0800e858 	.word	0x0800e858
 8000890:	08002185 	.word	0x08002185
 8000894:	0800e8a0 	.word	0x0800e8a0
 8000898:	080021b9 	.word	0x080021b9
 800089c:	0800e87c 	.word	0x0800e87c
 80008a0:	08002269 	.word	0x08002269

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b094      	sub	sp, #80	; 0x50
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0320 	add.w	r3, r7, #32
 80008ae:	2230      	movs	r2, #48	; 0x30
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f00d fa58 	bl	800dd68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	4b27      	ldr	r3, [pc, #156]	; (800096c <SystemClock_Config+0xc8>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	4a26      	ldr	r2, [pc, #152]	; (800096c <SystemClock_Config+0xc8>)
 80008d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d6:	6413      	str	r3, [r2, #64]	; 0x40
 80008d8:	4b24      	ldr	r3, [pc, #144]	; (800096c <SystemClock_Config+0xc8>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	4b21      	ldr	r3, [pc, #132]	; (8000970 <SystemClock_Config+0xcc>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a20      	ldr	r2, [pc, #128]	; (8000970 <SystemClock_Config+0xcc>)
 80008ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <SystemClock_Config+0xcc>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000900:	2301      	movs	r3, #1
 8000902:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000904:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090a:	2302      	movs	r3, #2
 800090c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000912:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000914:	2304      	movs	r3, #4
 8000916:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000918:	2360      	movs	r3, #96	; 0x60
 800091a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800091c:	2306      	movs	r3, #6
 800091e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000920:	2304      	movs	r3, #4
 8000922:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000924:	f107 0320 	add.w	r3, r7, #32
 8000928:	4618      	mov	r0, r3
 800092a:	f003 ff9b 	bl	8004864 <HAL_RCC_OscConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000934:	f000 fad4 	bl	8000ee0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000938:	230f      	movs	r3, #15
 800093a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093c:	2302      	movs	r3, #2
 800093e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000948:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f004 f9fd 	bl	8004d54 <HAL_RCC_ClockConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000960:	f000 fabe 	bl	8000ee0 <Error_Handler>
  }
}
 8000964:	bf00      	nop
 8000966:	3750      	adds	r7, #80	; 0x50
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40007000 	.word	0x40007000

08000974 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800097a:	463b      	mov	r3, r7
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000986:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <MX_ADC1_Init+0xb4>)
 8000988:	4a28      	ldr	r2, [pc, #160]	; (8000a2c <MX_ADC1_Init+0xb8>)
 800098a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800098c:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <MX_ADC1_Init+0xb4>)
 800098e:	2200      	movs	r2, #0
 8000990:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <MX_ADC1_Init+0xb4>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <MX_ADC1_Init+0xb4>)
 800099a:	2201      	movs	r2, #1
 800099c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_ADC1_Init+0xb4>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009a4:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <MX_ADC1_Init+0xb4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_ADC1_Init+0xb4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_ADC1_Init+0xb4>)
 80009b4:	4a1e      	ldr	r2, [pc, #120]	; (8000a30 <MX_ADC1_Init+0xbc>)
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_ADC1_Init+0xb4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_ADC1_Init+0xb4>)
 80009c0:	2202      	movs	r2, #2
 80009c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_ADC1_Init+0xb4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_ADC1_Init+0xb4>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009d2:	4815      	ldr	r0, [pc, #84]	; (8000a28 <MX_ADC1_Init+0xb4>)
 80009d4:	f001 fec2 	bl	800275c <HAL_ADC_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009de:	f000 fa7f 	bl	8000ee0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009e6:	2301      	movs	r3, #1
 80009e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80009ea:	2303      	movs	r3, #3
 80009ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	4619      	mov	r1, r3
 80009f2:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MX_ADC1_Init+0xb4>)
 80009f4:	f002 f876 	bl	8002ae4 <HAL_ADC_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80009fe:	f000 fa6f 	bl	8000ee0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <MX_ADC1_Init+0xb4>)
 8000a10:	f002 f868 	bl	8002ae4 <HAL_ADC_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000a1a:	f000 fa61 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20005c30 	.word	0x20005c30
 8000a2c:	40012000 	.word	0x40012000
 8000a30:	0f000001 	.word	0x0f000001

08000a34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a3a:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <MX_SPI1_Init+0x68>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a80:	220a      	movs	r2, #10
 8000a82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a86:	f004 fb93 	bl	80051b0 <HAL_SPI_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a90:	f000 fa26 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200071d0 	.word	0x200071d0
 8000a9c:	40013000 	.word	0x40013000

08000aa0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_SPI2_Init+0x64>)
 8000aa6:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <MX_SPI2_Init+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_SPI2_Init+0x64>)
 8000aac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_SPI2_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_SPI2_Init+0x64>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_SPI2_Init+0x64>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_SPI2_Init+0x64>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_SPI2_Init+0x64>)
 8000acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_SPI2_Init+0x64>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <MX_SPI2_Init+0x64>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_SPI2_Init+0x64>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <MX_SPI2_Init+0x64>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_SPI2_Init+0x64>)
 8000aec:	220a      	movs	r2, #10
 8000aee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_SPI2_Init+0x64>)
 8000af2:	f004 fb5d 	bl	80051b0 <HAL_SPI_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000afc:	f000 f9f0 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20005390 	.word	0x20005390
 8000b08:	40003800 	.word	0x40003800

08000b0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b12:	f107 0320 	add.w	r3, r7, #32
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]
 8000b2a:	615a      	str	r2, [r3, #20]
 8000b2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b2e:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <MX_TIM4_Init+0xac>)
 8000b30:	4a22      	ldr	r2, [pc, #136]	; (8000bbc <MX_TIM4_Init+0xb0>)
 8000b32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16;
 8000b34:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <MX_TIM4_Init+0xac>)
 8000b36:	2210      	movs	r2, #16
 8000b38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <MX_TIM4_Init+0xac>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <MX_TIM4_Init+0xac>)
 8000b42:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <MX_TIM4_Init+0xac>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_TIM4_Init+0xac>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b54:	4818      	ldr	r0, [pc, #96]	; (8000bb8 <MX_TIM4_Init+0xac>)
 8000b56:	f005 f98f 	bl	8005e78 <HAL_TIM_PWM_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000b60:	f000 f9be 	bl	8000ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b6c:	f107 0320 	add.w	r3, r7, #32
 8000b70:	4619      	mov	r1, r3
 8000b72:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <MX_TIM4_Init+0xac>)
 8000b74:	f005 fdce 	bl	8006714 <HAL_TIMEx_MasterConfigSynchronization>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000b7e:	f000 f9af 	bl	8000ee0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b82:	2360      	movs	r3, #96	; 0x60
 8000b84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 8000b86:	23fa      	movs	r3, #250	; 0xfa
 8000b88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2200      	movs	r2, #0
 8000b96:	4619      	mov	r1, r3
 8000b98:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <MX_TIM4_Init+0xac>)
 8000b9a:	f005 fac5 	bl	8006128 <HAL_TIM_PWM_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000ba4:	f000 f99c 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <MX_TIM4_Init+0xac>)
 8000baa:	f000 faaf 	bl	800110c <HAL_TIM_MspPostInit>

}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	; 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200053e8 	.word	0x200053e8
 8000bbc:	40000800 	.word	0x40000800

08000bc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_USART1_UART_Init+0x4c>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <MX_USART1_UART_Init+0x50>)
 8000bc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <MX_USART1_UART_Init+0x4c>)
 8000bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_USART1_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <MX_USART1_UART_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <MX_USART1_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_USART1_UART_Init+0x4c>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <MX_USART1_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_USART1_UART_Init+0x4c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_USART1_UART_Init+0x4c>)
 8000bf8:	f005 fe0e 	bl	8006818 <HAL_UART_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c02:	f000 f96d 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20006478 	.word	0x20006478
 8000c10:	40011000 	.word	0x40011000

08000c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b5d      	ldr	r3, [pc, #372]	; (8000da4 <MX_GPIO_Init+0x190>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a5c      	ldr	r2, [pc, #368]	; (8000da4 <MX_GPIO_Init+0x190>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b5a      	ldr	r3, [pc, #360]	; (8000da4 <MX_GPIO_Init+0x190>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b56      	ldr	r3, [pc, #344]	; (8000da4 <MX_GPIO_Init+0x190>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a55      	ldr	r2, [pc, #340]	; (8000da4 <MX_GPIO_Init+0x190>)
 8000c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b53      	ldr	r3, [pc, #332]	; (8000da4 <MX_GPIO_Init+0x190>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	4b4f      	ldr	r3, [pc, #316]	; (8000da4 <MX_GPIO_Init+0x190>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a4e      	ldr	r2, [pc, #312]	; (8000da4 <MX_GPIO_Init+0x190>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b4c      	ldr	r3, [pc, #304]	; (8000da4 <MX_GPIO_Init+0x190>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b48      	ldr	r3, [pc, #288]	; (8000da4 <MX_GPIO_Init+0x190>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a47      	ldr	r2, [pc, #284]	; (8000da4 <MX_GPIO_Init+0x190>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <MX_GPIO_Init+0x190>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca0:	4841      	ldr	r0, [pc, #260]	; (8000da8 <MX_GPIO_Init+0x194>)
 8000ca2:	f002 fbfd 	bl	80034a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TC_CS_Pin|R_CS_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2118      	movs	r1, #24
 8000caa:	4840      	ldr	r0, [pc, #256]	; (8000dac <MX_GPIO_Init+0x198>)
 8000cac:	f002 fbf8 	bl	80034a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BARO_CS_Pin|IMU_CS_Pin|DCDC_EN_Pin|CUT_EN_Pin
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f240 31b6 	movw	r1, #950	; 0x3b6
 8000cb6:	483e      	ldr	r0, [pc, #248]	; (8000db0 <MX_GPIO_Init+0x19c>)
 8000cb8:	f002 fbf2 	bl	80034a0 <HAL_GPIO_WritePin>
                          |P_EN_LIGHT_Pin|P_EN_CUT_Pin|P_EN_RADIO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4834      	ldr	r0, [pc, #208]	; (8000da8 <MX_GPIO_Init+0x194>)
 8000cd6:	f002 fa47 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	482f      	ldr	r0, [pc, #188]	; (8000dac <MX_GPIO_Init+0x198>)
 8000cf0:	f002 fa3a 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_CS_Pin R_CS_Pin */
  GPIO_InitStruct.Pin = TC_CS_Pin|R_CS_Pin;
 8000cf4:	2318      	movs	r3, #24
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4828      	ldr	r0, [pc, #160]	; (8000dac <MX_GPIO_Init+0x198>)
 8000d0c:	f002 fa2c 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_INT_Pin */
  GPIO_InitStruct.Pin = RF_INT_Pin;
 8000d10:	2301      	movs	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_INT_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4823      	ldr	r0, [pc, #140]	; (8000db0 <MX_GPIO_Init+0x19c>)
 8000d24:	f002 fa20 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : BARO_CS_Pin IMU_CS_Pin DCDC_EN_Pin CUT_EN_Pin
                           P_EN_LIGHT_Pin P_EN_CUT_Pin P_EN_RADIO_Pin */
  GPIO_InitStruct.Pin = BARO_CS_Pin|IMU_CS_Pin|DCDC_EN_Pin|CUT_EN_Pin
 8000d28:	f240 33b6 	movw	r3, #950	; 0x3b6
 8000d2c:	617b      	str	r3, [r7, #20]
                          |P_EN_LIGHT_Pin|P_EN_CUT_Pin|P_EN_RADIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	481b      	ldr	r0, [pc, #108]	; (8000db0 <MX_GPIO_Init+0x19c>)
 8000d42:	f002 fa11 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|IMU_INT1_Pin;
 8000d46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4814      	ldr	r0, [pc, #80]	; (8000db0 <MX_GPIO_Init+0x19c>)
 8000d5e:	f002 fa03 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DET_Pin CHRG_Pin */
  GPIO_InitStruct.Pin = USB_DET_Pin|CHRG_Pin;
 8000d62:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <MX_GPIO_Init+0x198>)
 8000d78:	f002 f9f6 	bl	8003168 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	2008      	movs	r0, #8
 8000d82:	f002 f9b9 	bl	80030f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d86:	2008      	movs	r0, #8
 8000d88:	f002 f9d2 	bl	8003130 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2105      	movs	r1, #5
 8000d90:	2028      	movs	r0, #40	; 0x28
 8000d92:	f002 f9b1 	bl	80030f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d96:	2028      	movs	r0, #40	; 0x28
 8000d98:	f002 f9ca 	bl	8003130 <HAL_NVIC_EnableIRQ>

}
 8000d9c:	bf00      	nop
 8000d9e:	3728      	adds	r7, #40	; 0x28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020800 	.word	0x40020800
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020400 	.word	0x40020400

08000db4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	80fb      	strh	r3, [r7, #6]
  wake_up();
 8000dbe:	f7ff fc49 	bl	8000654 <wake_up>
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dc2:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <HAL_GPIO_EXTI_Callback+0x28>)
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	6153      	str	r3, [r2, #20]

 lsm6dsr_all_sources_t all_source;
 /* Check if Wake-Up events */
 lsm6dsr_all_sources_get(&dev_ctx, &all_source);
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4804      	ldr	r0, [pc, #16]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000dd0:	f000 fdd2 	bl	8001978 <lsm6dsr_all_sources_get>

 if (all_source.wake_up_src.wu_ia){

 }

}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40013c00 	.word	0x40013c00
 8000de0:	20000234 	.word	0x20000234

08000de4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08c      	sub	sp, #48	; 0x30
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  log_init();
 8000dec:	f001 fb78 	bl	80024e0 <log_init>
  MX_USB_DEVICE_Init();
 8000df0:	f00c f9d4 	bl	800d19c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  int counter = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Infinite loop */
  for(;;)
  {
	  uint32_t value[2];
	  value[0] = ADC_Get(BATTERY);
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f7ff fbe5 	bl	80005c8 <ADC_Get>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
	  value[1] = ADC_Get(LIGHT);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f7ff fbe0 	bl	80005c8 <ADC_Get>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28



	  if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0){
 8000e0c:	2104      	movs	r1, #4
 8000e0e:	4823      	ldr	r0, [pc, #140]	; (8000e9c <StartDefaultTask+0xb8>)
 8000e10:	f002 fb2e 	bl	8003470 <HAL_GPIO_ReadPin>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d103      	bne.n	8000e22 <StartDefaultTask+0x3e>
		  counter++;
 8000e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e20:	e001      	b.n	8000e26 <StartDefaultTask+0x42>
	  } else {
		  counter = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
	  }

	  if(value[1] > 100){
 8000e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e28:	2b64      	cmp	r3, #100	; 0x64
 8000e2a:	d906      	bls.n	8000e3a <StartDefaultTask+0x56>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e32:	481b      	ldr	r0, [pc, #108]	; (8000ea0 <StartDefaultTask+0xbc>)
 8000e34:	f002 fb34 	bl	80034a0 <HAL_GPIO_WritePin>
 8000e38:	e005      	b.n	8000e46 <StartDefaultTask+0x62>
	  } else {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e40:	4817      	ldr	r0, [pc, #92]	; (8000ea0 <StartDefaultTask+0xbc>)
 8000e42:	f002 fb2d 	bl	80034a0 <HAL_GPIO_WritePin>
	  }
	  if(counter == 30){
 8000e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e48:	2b1e      	cmp	r3, #30
 8000e4a:	d101      	bne.n	8000e50 <StartDefaultTask+0x6c>
		  go_to_sleep();
 8000e4c:	f7ff fbdc 	bl	8000608 <go_to_sleep>
	  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
	  int16_t data_raw_acceleration[3];
	  float acceleration_mg[3];
	  int16_t data_raw_angular_rate[3];

	  lsm6dsr_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	4813      	ldr	r0, [pc, #76]	; (8000ea4 <StartDefaultTask+0xc0>)
 8000e58:	f000 fdfc 	bl	8001a54 <lsm6dsr_acceleration_raw_get>
	  acceleration_mg[0] = lsm6dsr_from_fs16g_to_mg(data_raw_acceleration[0]);
 8000e5c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 fb07 	bl	8001474 <lsm6dsr_from_fs16g_to_mg>
 8000e66:	eef0 7a40 	vmov.f32	s15, s0
 8000e6a:	edc7 7a04 	vstr	s15, [r7, #16]
	  acceleration_mg[1] = lsm6dsr_from_fs16g_to_mg(data_raw_acceleration[1]);
 8000e6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 fafe 	bl	8001474 <lsm6dsr_from_fs16g_to_mg>
 8000e78:	eef0 7a40 	vmov.f32	s15, s0
 8000e7c:	edc7 7a05 	vstr	s15, [r7, #20]
	  acceleration_mg[2] =  lsm6dsr_from_fs16g_to_mg(data_raw_acceleration[2]);
 8000e80:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 faf5 	bl	8001474 <lsm6dsr_from_fs16g_to_mg>
 8000e8a:	eef0 7a40 	vmov.f32	s15, s0
 8000e8e:	edc7 7a06 	vstr	s15, [r7, #24]

    osDelay(100);
 8000e92:	2064      	movs	r0, #100	; 0x64
 8000e94:	f009 f81e 	bl	8009ed4 <osDelay>
  {
 8000e98:	e7ae      	b.n	8000df8 <StartDefaultTask+0x14>
 8000e9a:	bf00      	nop
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	20000234 	.word	0x20000234

08000ea8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d102      	bne.n	8000ec0 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000eba:	f001 fc0b 	bl	80026d4 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if (htim->Instance == TIM5) {
	  CDC_Transmit_Elapsed();
  }
  /* USER CODE END Callback 1 */
}
 8000ebe:	e006      	b.n	8000ece <HAL_TIM_PeriodElapsedCallback+0x26>
  else if (htim->Instance == TIM5) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a05      	ldr	r2, [pc, #20]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d101      	bne.n	8000ece <HAL_TIM_PeriodElapsedCallback+0x26>
	  CDC_Transmit_Elapsed();
 8000eca:	f00c fa87 	bl	800d3dc <CDC_Transmit_Elapsed>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40010000 	.word	0x40010000
 8000edc:	40000c00 	.word	0x40000c00

08000ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
}
 8000ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <Error_Handler+0x8>
	...

08000eec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_MspInit+0x54>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a11      	ldr	r2, [pc, #68]	; (8000f40 <HAL_MspInit+0x54>)
 8000efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_MspInit+0x54>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_MspInit+0x54>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_MspInit+0x54>)
 8000f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_MspInit+0x54>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	f06f 0001 	mvn.w	r0, #1
 8000f32:	f002 f8e1 	bl	80030f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800

08000f44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <HAL_ADC_MspInit+0x7c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d127      	bne.n	8000fb6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <HAL_ADC_MspInit+0x80>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a15      	ldr	r2, [pc, #84]	; (8000fc4 <HAL_ADC_MspInit+0x80>)
 8000f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <HAL_ADC_MspInit+0x80>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_ADC_MspInit+0x80>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <HAL_ADC_MspInit+0x80>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <HAL_ADC_MspInit+0x80>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = V_BAT_Pin|LIGHT_Pin;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <HAL_ADC_MspInit+0x84>)
 8000fb2:	f002 f8d9 	bl	8003168 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3728      	adds	r7, #40	; 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40012000 	.word	0x40012000
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020000 	.word	0x40020000

08000fcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	; 0x30
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a32      	ldr	r2, [pc, #200]	; (80010b4 <HAL_SPI_MspInit+0xe8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d12c      	bne.n	8001048 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <HAL_SPI_MspInit+0xec>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a30      	ldr	r2, [pc, #192]	; (80010b8 <HAL_SPI_MspInit+0xec>)
 8000ff8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b2e      	ldr	r3, [pc, #184]	; (80010b8 <HAL_SPI_MspInit+0xec>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001006:	61bb      	str	r3, [r7, #24]
 8001008:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <HAL_SPI_MspInit+0xec>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <HAL_SPI_MspInit+0xec>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <HAL_SPI_MspInit+0xec>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001026:	23e0      	movs	r3, #224	; 0xe0
 8001028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001036:	2305      	movs	r3, #5
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	481e      	ldr	r0, [pc, #120]	; (80010bc <HAL_SPI_MspInit+0xf0>)
 8001042:	f002 f891 	bl	8003168 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001046:	e031      	b.n	80010ac <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a1c      	ldr	r2, [pc, #112]	; (80010c0 <HAL_SPI_MspInit+0xf4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d12c      	bne.n	80010ac <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <HAL_SPI_MspInit+0xec>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <HAL_SPI_MspInit+0xec>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001060:	6413      	str	r3, [r2, #64]	; 0x40
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_SPI_MspInit+0xec>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_SPI_MspInit+0xec>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a10      	ldr	r2, [pc, #64]	; (80010b8 <HAL_SPI_MspInit+0xec>)
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_SPI_MspInit+0xec>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800108a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800108e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800109c:	2305      	movs	r3, #5
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	4807      	ldr	r0, [pc, #28]	; (80010c4 <HAL_SPI_MspInit+0xf8>)
 80010a8:	f002 f85e 	bl	8003168 <HAL_GPIO_Init>
}
 80010ac:	bf00      	nop
 80010ae:	3730      	adds	r7, #48	; 0x30
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40013000 	.word	0x40013000
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40003800 	.word	0x40003800
 80010c4:	40020400 	.word	0x40020400

080010c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <HAL_TIM_PWM_MspInit+0x3c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d10d      	bne.n	80010f6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_TIM_PWM_MspInit+0x40>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	4a09      	ldr	r2, [pc, #36]	; (8001108 <HAL_TIM_PWM_MspInit+0x40>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <HAL_TIM_PWM_MspInit+0x40>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40000800 	.word	0x40000800
 8001108:	40023800 	.word	0x40023800

0800110c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a12      	ldr	r2, [pc, #72]	; (8001174 <HAL_TIM_MspPostInit+0x68>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d11d      	bne.n	800116a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_TIM_MspPostInit+0x6c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a10      	ldr	r2, [pc, #64]	; (8001178 <HAL_TIM_MspPostInit+0x6c>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_TIM_MspPostInit+0x6c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800114a:	2340      	movs	r3, #64	; 0x40
 800114c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800115a:	2302      	movs	r3, #2
 800115c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <HAL_TIM_MspPostInit+0x70>)
 8001166:	f001 ffff 	bl	8003168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800116a:	bf00      	nop
 800116c:	3720      	adds	r7, #32
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40000800 	.word	0x40000800
 8001178:	40023800 	.word	0x40023800
 800117c:	40020400 	.word	0x40020400

08001180 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a19      	ldr	r2, [pc, #100]	; (8001204 <HAL_UART_MspInit+0x84>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d12c      	bne.n	80011fc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_UART_MspInit+0x88>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a17      	ldr	r2, [pc, #92]	; (8001208 <HAL_UART_MspInit+0x88>)
 80011ac:	f043 0310 	orr.w	r3, r3, #16
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_UART_MspInit+0x88>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_UART_MspInit+0x88>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a10      	ldr	r2, [pc, #64]	; (8001208 <HAL_UART_MspInit+0x88>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_UART_MspInit+0x88>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ec:	2307      	movs	r3, #7
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <HAL_UART_MspInit+0x8c>)
 80011f8:	f001 ffb6 	bl	8003168 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40011000 	.word	0x40011000
 8001208:	40023800 	.word	0x40023800
 800120c:	40020000 	.word	0x40020000

08001210 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	; 0x30
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	2019      	movs	r0, #25
 8001226:	f001 ff67 	bl	80030f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800122a:	2019      	movs	r0, #25
 800122c:	f001 ff80 	bl	8003130 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <HAL_InitTick+0xa0>)
 8001236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001238:	4a1d      	ldr	r2, [pc, #116]	; (80012b0 <HAL_InitTick+0xa0>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6453      	str	r3, [r2, #68]	; 0x44
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <HAL_InitTick+0xa0>)
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800124c:	f107 0210 	add.w	r2, r7, #16
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f003 ff78 	bl	800514c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800125c:	f003 ff62 	bl	8005124 <HAL_RCC_GetPCLK2Freq>
 8001260:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001264:	4a13      	ldr	r2, [pc, #76]	; (80012b4 <HAL_InitTick+0xa4>)
 8001266:	fba2 2303 	umull	r2, r3, r2, r3
 800126a:	0c9b      	lsrs	r3, r3, #18
 800126c:	3b01      	subs	r3, #1
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_InitTick+0xa8>)
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <HAL_InitTick+0xac>)
 8001274:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HAL_InitTick+0xa8>)
 8001278:	f240 32e7 	movw	r2, #999	; 0x3e7
 800127c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800127e:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <HAL_InitTick+0xa8>)
 8001280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001282:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <HAL_InitTick+0xa8>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_InitTick+0xa8>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001290:	4809      	ldr	r0, [pc, #36]	; (80012b8 <HAL_InitTick+0xa8>)
 8001292:	f004 fd35 	bl	8005d00 <HAL_TIM_Base_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d104      	bne.n	80012a6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800129c:	4806      	ldr	r0, [pc, #24]	; (80012b8 <HAL_InitTick+0xa8>)
 800129e:	f004 fd89 	bl	8005db4 <HAL_TIM_Base_Start_IT>
 80012a2:	4603      	mov	r3, r0
 80012a4:	e000      	b.n	80012a8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3730      	adds	r7, #48	; 0x30
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800
 80012b4:	431bde83 	.word	0x431bde83
 80012b8:	20007284 	.word	0x20007284
 80012bc:	40010000 	.word	0x40010000

080012c0 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* Disable TIM1 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_SuspendTick+0x20>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_SuspendTick+0x20>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0201 	bic.w	r2, r2, #1
 80012d2:	60da      	str	r2, [r3, #12]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20007284 	.word	0x20007284

080012e4 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* Enable TIM1 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_ResumeTick+0x20>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_ResumeTick+0x20>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0201 	orr.w	r2, r2, #1
 80012f6:	60da      	str	r2, [r3, #12]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20007284 	.word	0x20007284

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800130c:	e7fe      	b.n	800130c <NMI_Handler+0x4>

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <MemManage_Handler+0x4>

0800131a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <BusFault_Handler+0x4>

08001320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <UsageFault_Handler+0x4>

08001326 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001338:	2004      	movs	r0, #4
 800133a:	f002 f8cb 	bl	80034d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800134a:	f004 fde4 	bl	8005f16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20007284 	.word	0x20007284

08001358 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT2_Pin);
 800135c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001360:	f002 f8b8 	bl	80034d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 8001364:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001368:	f002 f8b4 	bl	80034d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}

08001370 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <OTG_FS_IRQHandler+0x10>)
 8001376:	f002 fa15 	bl	80037a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20007ab0 	.word	0x20007ab0

08001384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <_sbrk+0x5c>)
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <_sbrk+0x60>)
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <_sbrk+0x64>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <_sbrk+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d207      	bcs.n	80013c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b4:	f00c fca0 	bl	800dcf8 <__errno>
 80013b8:	4603      	mov	r3, r0
 80013ba:	220c      	movs	r2, #12
 80013bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e009      	b.n	80013d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ca:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <_sbrk+0x64>)
 80013d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20020000 	.word	0x20020000
 80013e4:	00000400 	.word	0x00000400
 80013e8:	20000240 	.word	0x20000240
 80013ec:	20007ec8 	.word	0x20007ec8

080013f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <SystemInit+0x20>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <SystemInit+0x20>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	461a      	mov	r2, r3
 8001420:	460b      	mov	r3, r1
 8001422:	72fb      	strb	r3, [r7, #11]
 8001424:	4613      	mov	r3, r2
 8001426:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	685c      	ldr	r4, [r3, #4]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6898      	ldr	r0, [r3, #8]
 8001430:	893b      	ldrh	r3, [r7, #8]
 8001432:	7af9      	ldrb	r1, [r7, #11]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	47a0      	blx	r4
 8001438:	6178      	str	r0, [r7, #20]

  return ret;
 800143a:	697b      	ldr	r3, [r7, #20]
}
 800143c:	4618      	mov	r0, r3
 800143e:	371c      	adds	r7, #28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd90      	pop	{r4, r7, pc}

08001444 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	461a      	mov	r2, r3
 8001450:	460b      	mov	r3, r1
 8001452:	72fb      	strb	r3, [r7, #11]
 8001454:	4613      	mov	r3, r2
 8001456:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681c      	ldr	r4, [r3, #0]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6898      	ldr	r0, [r3, #8]
 8001460:	893b      	ldrh	r3, [r7, #8]
 8001462:	7af9      	ldrb	r1, [r7, #11]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	47a0      	blx	r4
 8001468:	6178      	str	r0, [r7, #20]

  return ret;
 800146a:	697b      	ldr	r3, [r7, #20]
}
 800146c:	4618      	mov	r0, r3
 800146e:	371c      	adds	r7, #28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}

08001474 <lsm6dsr_from_fs16g_to_mg>:
{
  return ((float_t)lsb * 0.244f);
}

float_t lsm6dsr_from_fs16g_to_mg(int16_t lsb)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.488f);
 800147e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014a0 <lsm6dsr_from_fs16g_to_mg+0x2c>
 800148e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001492:	eeb0 0a67 	vmov.f32	s0, s15
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	3ef9db23 	.word	0x3ef9db23

080014a4 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80014b0:	f107 0208 	add.w	r2, r7, #8
 80014b4:	2301      	movs	r3, #1
 80014b6:	2110      	movs	r1, #16
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ffab 	bl	8001414 <lsm6dsr_read_reg>
 80014be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10f      	bne.n	80014e6 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	7a3b      	ldrb	r3, [r7, #8]
 80014d0:	f362 0383 	bfi	r3, r2, #2, #2
 80014d4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80014d6:	f107 0208 	add.w	r2, r7, #8
 80014da:	2301      	movs	r3, #1
 80014dc:	2110      	movs	r1, #16
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffb0 	bl	8001444 <lsm6dsr_write_reg>
 80014e4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	4619      	mov	r1, r3
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fd91 	bl	800202e <lsm6dsr_fsm_enable_get>
 800150c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f040 80c4 	bne.w	800169e <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001516:	7b3b      	ldrb	r3, [r7, #12]
 8001518:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800151c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800151e:	7b3b      	ldrb	r3, [r7, #12]
 8001520:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001524:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001526:	4313      	orrs	r3, r2
 8001528:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800152a:	7b3b      	ldrb	r3, [r7, #12]
 800152c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001530:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001532:	4313      	orrs	r3, r2
 8001534:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001536:	7b3b      	ldrb	r3, [r7, #12]
 8001538:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800153c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800153e:	4313      	orrs	r3, r2
 8001540:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001542:	7b3b      	ldrb	r3, [r7, #12]
 8001544:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001548:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800154a:	4313      	orrs	r3, r2
 800154c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800154e:	7b3b      	ldrb	r3, [r7, #12]
 8001550:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001554:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001556:	4313      	orrs	r3, r2
 8001558:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800155a:	7b3b      	ldrb	r3, [r7, #12]
 800155c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001560:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001562:	4313      	orrs	r3, r2
 8001564:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001566:	7b3b      	ldrb	r3, [r7, #12]
 8001568:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800156c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800156e:	4313      	orrs	r3, r2
 8001570:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001572:	7b7b      	ldrb	r3, [r7, #13]
 8001574:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001578:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800157a:	4313      	orrs	r3, r2
 800157c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800157e:	7b7b      	ldrb	r3, [r7, #13]
 8001580:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001584:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001586:	4313      	orrs	r3, r2
 8001588:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800158a:	7b7b      	ldrb	r3, [r7, #13]
 800158c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001590:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001592:	4313      	orrs	r3, r2
 8001594:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001596:	7b7b      	ldrb	r3, [r7, #13]
 8001598:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800159c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800159e:	4313      	orrs	r3, r2
 80015a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80015a2:	7b7b      	ldrb	r3, [r7, #13]
 80015a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80015a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80015aa:	4313      	orrs	r3, r2
 80015ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80015ae:	7b7b      	ldrb	r3, [r7, #13]
 80015b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80015b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80015ba:	7b7b      	ldrb	r3, [r7, #13]
 80015bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80015c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80015c2:	4313      	orrs	r3, r2
 80015c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80015c6:	7b7b      	ldrb	r3, [r7, #13]
 80015c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80015cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d163      	bne.n	800169e <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80015d6:	f107 030b 	add.w	r3, r7, #11
 80015da:	4619      	mov	r1, r3
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 fd53 	bl	8002088 <lsm6dsr_fsm_data_rate_get>
 80015e2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d159      	bne.n	800169e <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80015ea:	7afb      	ldrb	r3, [r7, #11]
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	d853      	bhi.n	8001698 <lsm6dsr_xl_data_rate_set+0x1a8>
 80015f0:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <lsm6dsr_xl_data_rate_set+0x108>)
 80015f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f6:	bf00      	nop
 80015f8:	08001609 	.word	0x08001609
 80015fc:	0800161b 	.word	0x0800161b
 8001600:	08001639 	.word	0x08001639
 8001604:	08001663 	.word	0x08001663
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800160e:	2301      	movs	r3, #1
 8001610:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001612:	e045      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	75fb      	strb	r3, [r7, #23]
            break;
 8001618:	e042      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8001620:	2302      	movs	r3, #2
 8001622:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001624:	e03c      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d102      	bne.n	8001632 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800162c:	2302      	movs	r3, #2
 800162e:	75fb      	strb	r3, [r7, #23]
            break;
 8001630:	e036      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	75fb      	strb	r3, [r7, #23]
            break;
 8001636:	e033      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800163e:	2303      	movs	r3, #3
 8001640:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001642:	e02d      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d102      	bne.n	8001650 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800164a:	2303      	movs	r3, #3
 800164c:	75fb      	strb	r3, [r7, #23]
            break;
 800164e:	e027      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d102      	bne.n	800165c <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8001656:	2303      	movs	r3, #3
 8001658:	75fb      	strb	r3, [r7, #23]
            break;
 800165a:	e021      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	75fb      	strb	r3, [r7, #23]
            break;
 8001660:	e01e      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8001668:	2304      	movs	r3, #4
 800166a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800166c:	e018      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d102      	bne.n	800167a <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8001674:	2304      	movs	r3, #4
 8001676:	75fb      	strb	r3, [r7, #23]
            break;
 8001678:	e012      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d102      	bne.n	8001686 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8001680:	2304      	movs	r3, #4
 8001682:	75fb      	strb	r3, [r7, #23]
            break;
 8001684:	e00c      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d102      	bne.n	8001692 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800168c:	2304      	movs	r3, #4
 800168e:	75fb      	strb	r3, [r7, #23]
            break;
 8001690:	e006      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	75fb      	strb	r3, [r7, #23]
            break;
 8001696:	e003      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	75fb      	strb	r3, [r7, #23]
            break;
 800169c:	e000      	b.n	80016a0 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 800169e:	bf00      	nop
    }
  }

  if (ret == 0)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d107      	bne.n	80016b6 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80016a6:	f107 0208 	add.w	r2, r7, #8
 80016aa:	2301      	movs	r3, #1
 80016ac:	2110      	movs	r1, #16
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff feb0 	bl	8001414 <lsm6dsr_read_reg>
 80016b4:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10f      	bne.n	80016dc <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	7a3b      	ldrb	r3, [r7, #8]
 80016c6:	f362 1307 	bfi	r3, r2, #4, #4
 80016ca:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80016cc:	f107 0208 	add.w	r2, r7, #8
 80016d0:	2301      	movs	r3, #1
 80016d2:	2110      	movs	r1, #16
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff feb5 	bl	8001444 <lsm6dsr_write_reg>
 80016da:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80016dc:	693b      	ldr	r3, [r7, #16]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop

080016e8 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80016f4:	f107 0208 	add.w	r2, r7, #8
 80016f8:	2301      	movs	r3, #1
 80016fa:	2111      	movs	r1, #17
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff fe89 	bl	8001414 <lsm6dsr_read_reg>
 8001702:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10f      	bne.n	800172a <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	f003 030f 	and.w	r3, r3, #15
 8001710:	b2da      	uxtb	r2, r3
 8001712:	7a3b      	ldrb	r3, [r7, #8]
 8001714:	f362 0303 	bfi	r3, r2, #0, #4
 8001718:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800171a:	f107 0208 	add.w	r2, r7, #8
 800171e:	2301      	movs	r3, #1
 8001720:	2111      	movs	r1, #17
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fe8e 	bl	8001444 <lsm6dsr_write_reg>
 8001728:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	4619      	mov	r1, r3
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 fc6f 	bl	800202e <lsm6dsr_fsm_enable_get>
 8001750:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	2b00      	cmp	r3, #0
 8001756:	f040 80c4 	bne.w	80018e2 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800175a:	7b3b      	ldrb	r3, [r7, #12]
 800175c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001760:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001762:	7b3b      	ldrb	r3, [r7, #12]
 8001764:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001768:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800176a:	4313      	orrs	r3, r2
 800176c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800176e:	7b3b      	ldrb	r3, [r7, #12]
 8001770:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001774:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001776:	4313      	orrs	r3, r2
 8001778:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800177a:	7b3b      	ldrb	r3, [r7, #12]
 800177c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001780:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001782:	4313      	orrs	r3, r2
 8001784:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001786:	7b3b      	ldrb	r3, [r7, #12]
 8001788:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800178c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800178e:	4313      	orrs	r3, r2
 8001790:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001792:	7b3b      	ldrb	r3, [r7, #12]
 8001794:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001798:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800179a:	4313      	orrs	r3, r2
 800179c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800179e:	7b3b      	ldrb	r3, [r7, #12]
 80017a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80017a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80017a6:	4313      	orrs	r3, r2
 80017a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80017aa:	7b3b      	ldrb	r3, [r7, #12]
 80017ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80017b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80017b2:	4313      	orrs	r3, r2
 80017b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80017b6:	7b7b      	ldrb	r3, [r7, #13]
 80017b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80017be:	4313      	orrs	r3, r2
 80017c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80017c2:	7b7b      	ldrb	r3, [r7, #13]
 80017c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80017c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80017ce:	7b7b      	ldrb	r3, [r7, #13]
 80017d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80017d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80017da:	7b7b      	ldrb	r3, [r7, #13]
 80017dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80017e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80017e2:	4313      	orrs	r3, r2
 80017e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80017e6:	7b7b      	ldrb	r3, [r7, #13]
 80017e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80017ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80017f2:	7b7b      	ldrb	r3, [r7, #13]
 80017f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80017f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80017fa:	4313      	orrs	r3, r2
 80017fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80017fe:	7b7b      	ldrb	r3, [r7, #13]
 8001800:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001804:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001806:	4313      	orrs	r3, r2
 8001808:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800180a:	7b7b      	ldrb	r3, [r7, #13]
 800180c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001810:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001812:	4313      	orrs	r3, r2
 8001814:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001816:	2b01      	cmp	r3, #1
 8001818:	d163      	bne.n	80018e2 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800181a:	f107 030b 	add.w	r3, r7, #11
 800181e:	4619      	mov	r1, r3
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 fc31 	bl	8002088 <lsm6dsr_fsm_data_rate_get>
 8001826:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d159      	bne.n	80018e2 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800182e:	7afb      	ldrb	r3, [r7, #11]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d853      	bhi.n	80018dc <lsm6dsr_gy_data_rate_set+0x1a8>
 8001834:	a201      	add	r2, pc, #4	; (adr r2, 800183c <lsm6dsr_gy_data_rate_set+0x108>)
 8001836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183a:	bf00      	nop
 800183c:	0800184d 	.word	0x0800184d
 8001840:	0800185f 	.word	0x0800185f
 8001844:	0800187d 	.word	0x0800187d
 8001848:	080018a7 	.word	0x080018a7
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8001852:	2301      	movs	r3, #1
 8001854:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8001856:	e045      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	75fb      	strb	r3, [r7, #23]
            break;
 800185c:	e042      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8001864:	2302      	movs	r3, #2
 8001866:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8001868:	e03c      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d102      	bne.n	8001876 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8001870:	2302      	movs	r3, #2
 8001872:	75fb      	strb	r3, [r7, #23]
            break;
 8001874:	e036      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	75fb      	strb	r3, [r7, #23]
            break;
 800187a:	e033      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d102      	bne.n	8001888 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8001882:	2303      	movs	r3, #3
 8001884:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8001886:	e02d      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d102      	bne.n	8001894 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800188e:	2303      	movs	r3, #3
 8001890:	75fb      	strb	r3, [r7, #23]
            break;
 8001892:	e027      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d102      	bne.n	80018a0 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800189a:	2303      	movs	r3, #3
 800189c:	75fb      	strb	r3, [r7, #23]
            break;
 800189e:	e021      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	75fb      	strb	r3, [r7, #23]
            break;
 80018a4:	e01e      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d102      	bne.n	80018b2 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80018ac:	2304      	movs	r3, #4
 80018ae:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80018b0:	e018      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d102      	bne.n	80018be <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80018b8:	2304      	movs	r3, #4
 80018ba:	75fb      	strb	r3, [r7, #23]
            break;
 80018bc:	e012      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d102      	bne.n	80018ca <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80018c4:	2304      	movs	r3, #4
 80018c6:	75fb      	strb	r3, [r7, #23]
            break;
 80018c8:	e00c      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d102      	bne.n	80018d6 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80018d0:	2304      	movs	r3, #4
 80018d2:	75fb      	strb	r3, [r7, #23]
            break;
 80018d4:	e006      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	75fb      	strb	r3, [r7, #23]
            break;
 80018da:	e003      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	75fb      	strb	r3, [r7, #23]
            break;
 80018e0:	e000      	b.n	80018e4 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 80018e2:	bf00      	nop
    }
  }

  if (ret == 0)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d107      	bne.n	80018fa <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80018ea:	f107 0208 	add.w	r2, r7, #8
 80018ee:	2301      	movs	r3, #1
 80018f0:	2111      	movs	r1, #17
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff fd8e 	bl	8001414 <lsm6dsr_read_reg>
 80018f8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10f      	bne.n	8001920 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8001900:	7dfb      	ldrb	r3, [r7, #23]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	b2da      	uxtb	r2, r3
 8001908:	7a3b      	ldrb	r3, [r7, #8]
 800190a:	f362 1307 	bfi	r3, r2, #4, #4
 800190e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001910:	f107 0208 	add.w	r2, r7, #8
 8001914:	2301      	movs	r3, #1
 8001916:	2111      	movs	r1, #17
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff fd93 	bl	8001444 <lsm6dsr_write_reg>
 800191e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8001920:	693b      	ldr	r3, [r7, #16]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop

0800192c <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001938:	f107 0208 	add.w	r2, r7, #8
 800193c:	2301      	movs	r3, #1
 800193e:	2112      	movs	r1, #18
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff fd67 	bl	8001414 <lsm6dsr_read_reg>
 8001946:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10f      	bne.n	800196e <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	b2da      	uxtb	r2, r3
 8001956:	7a3b      	ldrb	r3, [r7, #8]
 8001958:	f362 1386 	bfi	r3, r2, #6, #1
 800195c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800195e:	f107 0208 	add.w	r2, r7, #8
 8001962:	2301      	movs	r3, #1
 8001964:	2112      	movs	r1, #18
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fd6c 	bl	8001444 <lsm6dsr_write_reg>
 800196c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <lsm6dsr_all_sources_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_all_sources_get(stmdev_ctx_t *ctx,
                                lsm6dsr_all_sources_t *val)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_ALL_INT_SRC,
                         (uint8_t *)&val->all_int_src, 1);
 8001982:	683a      	ldr	r2, [r7, #0]
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_ALL_INT_SRC,
 8001984:	2301      	movs	r3, #1
 8001986:	211a      	movs	r1, #26
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fd43 	bl	8001414 <lsm6dsr_read_reg>
 800198e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d107      	bne.n	80019a6 <lsm6dsr_all_sources_get+0x2e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_WAKE_UP_SRC,
                           (uint8_t *)&val->wake_up_src, 1);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_WAKE_UP_SRC,
 800199a:	2301      	movs	r3, #1
 800199c:	211b      	movs	r1, #27
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff fd38 	bl	8001414 <lsm6dsr_read_reg>
 80019a4:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d107      	bne.n	80019bc <lsm6dsr_all_sources_get+0x44>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_SRC,
                           (uint8_t *)&val->tap_src, 1);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	1c9a      	adds	r2, r3, #2
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_SRC,
 80019b0:	2301      	movs	r3, #1
 80019b2:	211c      	movs	r1, #28
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff fd2d 	bl	8001414 <lsm6dsr_read_reg>
 80019ba:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d107      	bne.n	80019d2 <lsm6dsr_all_sources_get+0x5a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_D6D_SRC,
                           (uint8_t *)&val->d6d_src, 1);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	1cda      	adds	r2, r3, #3
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_D6D_SRC,
 80019c6:	2301      	movs	r3, #1
 80019c8:	211d      	movs	r1, #29
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fd22 	bl	8001414 <lsm6dsr_read_reg>
 80019d0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d107      	bne.n	80019e8 <lsm6dsr_all_sources_get+0x70>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
                           (uint8_t *)&val->status_reg, 1);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	1d1a      	adds	r2, r3, #4
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80019dc:	2301      	movs	r3, #1
 80019de:	211e      	movs	r1, #30
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff fd17 	bl	8001414 <lsm6dsr_read_reg>
 80019e6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d104      	bne.n	80019f8 <lsm6dsr_all_sources_get+0x80>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80019ee:	2102      	movs	r1, #2
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f87a 	bl	8001aea <lsm6dsr_mem_bank_set>
 80019f6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d107      	bne.n	8001a0e <lsm6dsr_all_sources_get+0x96>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_STATUS,
                           (uint8_t *)&val->emb_func_status, 1);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	1d5a      	adds	r2, r3, #5
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_STATUS,
 8001a02:	2301      	movs	r3, #1
 8001a04:	2112      	movs	r1, #18
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff fd04 	bl	8001414 <lsm6dsr_read_reg>
 8001a0c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d107      	bne.n	8001a24 <lsm6dsr_all_sources_get+0xac>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_STATUS_A,
                           (uint8_t *)&val->fsm_status_a, 1);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	1d9a      	adds	r2, r3, #6
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_STATUS_A,
 8001a18:	2301      	movs	r3, #1
 8001a1a:	2113      	movs	r1, #19
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff fcf9 	bl	8001414 <lsm6dsr_read_reg>
 8001a22:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d107      	bne.n	8001a3a <lsm6dsr_all_sources_get+0xc2>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_STATUS_B,
                           (uint8_t *)&val->fsm_status_b, 1);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	1dda      	adds	r2, r3, #7
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_STATUS_B,
 8001a2e:	2301      	movs	r3, #1
 8001a30:	2114      	movs	r1, #20
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fcee 	bl	8001414 <lsm6dsr_read_reg>
 8001a38:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d104      	bne.n	8001a4a <lsm6dsr_all_sources_get+0xd2>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8001a40:	2100      	movs	r1, #0
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f851 	bl	8001aea <lsm6dsr_mem_bank_set>
 8001a48:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8001a5e:	f107 020c 	add.w	r2, r7, #12
 8001a62:	2306      	movs	r3, #6
 8001a64:	2128      	movs	r1, #40	; 0x28
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fcd4 	bl	8001414 <lsm6dsr_read_reg>
 8001a6c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001a6e:	7b7b      	ldrb	r3, [r7, #13]
 8001a70:	b21a      	sxth	r2, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	7b3b      	ldrb	r3, [r7, #12]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	b21a      	sxth	r2, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	3302      	adds	r3, #2
 8001a96:	b212      	sxth	r2, r2
 8001a98:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	7bbb      	ldrb	r3, [r7, #14]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	b212      	sxth	r2, r2
 8001ab6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001ab8:	7c7a      	ldrb	r2, [r7, #17]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	3304      	adds	r3, #4
 8001abe:	b212      	sxth	r2, r2
 8001ac0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	7c3b      	ldrb	r3, [r7, #16]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	3304      	adds	r3, #4
 8001adc:	b212      	sxth	r2, r2
 8001ade:	801a      	strh	r2, [r3, #0]

  return ret;
 8001ae0:	697b      	ldr	r3, [r7, #20]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8001af6:	f107 0208 	add.w	r2, r7, #8
 8001afa:	2301      	movs	r3, #1
 8001afc:	2101      	movs	r1, #1
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fc88 	bl	8001414 <lsm6dsr_read_reg>
 8001b04:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10f      	bne.n	8001b2c <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	7a3b      	ldrb	r3, [r7, #8]
 8001b16:	f362 1387 	bfi	r3, r2, #6, #2
 8001b1a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8001b1c:	f107 0208 	add.w	r2, r7, #8
 8001b20:	2301      	movs	r3, #1
 8001b22:	2101      	movs	r1, #1
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fc8d 	bl	8001444 <lsm6dsr_write_reg>
 8001b2a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8001b40:	2301      	movs	r3, #1
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	210f      	movs	r1, #15
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fc64 	bl	8001414 <lsm6dsr_read_reg>
 8001b4c:	60f8      	str	r0, [r7, #12]

  return ret;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001b64:	f107 0208 	add.w	r2, r7, #8
 8001b68:	2301      	movs	r3, #1
 8001b6a:	2112      	movs	r1, #18
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fc51 	bl	8001414 <lsm6dsr_read_reg>
 8001b72:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10f      	bne.n	8001b9a <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	7a3b      	ldrb	r3, [r7, #8]
 8001b84:	f362 0300 	bfi	r3, r2, #0, #1
 8001b88:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001b8a:	f107 0208 	add.w	r2, r7, #8
 8001b8e:	2301      	movs	r3, #1
 8001b90:	2112      	movs	r1, #18
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fc56 	bl	8001444 <lsm6dsr_write_reg>
 8001b98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <lsm6dsr_xl_hp_path_internal_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_internal_set(stmdev_ctx_t *ctx,
                                        lsm6dsr_slope_fds_t val)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_tap_cfg0_t tap_cfg0;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_CFG0, (uint8_t *)&tap_cfg0, 1);
 8001bb0:	f107 0208 	add.w	r2, r7, #8
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	2156      	movs	r1, #86	; 0x56
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff fc2b 	bl	8001414 <lsm6dsr_read_reg>
 8001bbe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10f      	bne.n	8001be6 <lsm6dsr_xl_hp_path_internal_set+0x42>
  {
    tap_cfg0.slope_fds = (uint8_t)val;
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	7a3b      	ldrb	r3, [r7, #8]
 8001bd0:	f362 1304 	bfi	r3, r2, #4, #1
 8001bd4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_TAP_CFG0,
 8001bd6:	f107 0208 	add.w	r2, r7, #8
 8001bda:	2301      	movs	r3, #1
 8001bdc:	2156      	movs	r1, #86	; 0x56
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fc30 	bl	8001444 <lsm6dsr_write_reg>
 8001be4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&tap_cfg0, 1);
  }

  return ret;
 8001be6:	68fb      	ldr	r3, [r7, #12]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8001bfc:	f107 0210 	add.w	r2, r7, #16
 8001c00:	2301      	movs	r3, #1
 8001c02:	2118      	movs	r1, #24
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff fc05 	bl	8001414 <lsm6dsr_read_reg>
 8001c0a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d111      	bne.n	8001c36 <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	09db      	lsrs	r3, r3, #7
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	7c3b      	ldrb	r3, [r7, #16]
 8001c20:	f362 0341 	bfi	r3, r2, #1, #1
 8001c24:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 8001c26:	f107 0210 	add.w	r2, r7, #16
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	2118      	movs	r1, #24
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fc08 	bl	8001444 <lsm6dsr_write_reg>
 8001c34:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d107      	bne.n	8001c4c <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8001c3c:	f107 020c 	add.w	r2, r7, #12
 8001c40:	2301      	movs	r3, #1
 8001c42:	2162      	movs	r1, #98	; 0x62
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fbe5 	bl	8001414 <lsm6dsr_read_reg>
 8001c4a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10f      	bne.n	8001c72 <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	7b3b      	ldrb	r3, [r7, #12]
 8001c5c:	f362 03c4 	bfi	r3, r2, #3, #2
 8001c60:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8001c62:	f107 020c 	add.w	r2, r7, #12
 8001c66:	2301      	movs	r3, #1
 8001c68:	2162      	movs	r1, #98	; 0x62
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fbea 	bl	8001444 <lsm6dsr_write_reg>
 8001c70:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8001c72:	697b      	ldr	r3, [r7, #20]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <lsm6dsr_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsr_pin_int1_route_t *val)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  lsm6dsr_tap_cfg2_t tap_cfg2;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8001c86:	2102      	movs	r1, #2
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff2e 	bl	8001aea <lsm6dsr_mem_bank_set>
 8001c8e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d107      	bne.n	8001ca6 <lsm6dsr_pin_int1_route_set+0x2a>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
                            (uint8_t *)&val->emb_func_int1, 1);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	1c9a      	adds	r2, r3, #2
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	210a      	movs	r1, #10
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff fbd0 	bl	8001444 <lsm6dsr_write_reg>
 8001ca4:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <lsm6dsr_pin_int1_route_set+0x40>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_A,
                            (uint8_t *)&val->fsm_int1_a, 1);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	1cda      	adds	r2, r3, #3
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_A,
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	210b      	movs	r1, #11
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff fbc5 	bl	8001444 <lsm6dsr_write_reg>
 8001cba:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d107      	bne.n	8001cd2 <lsm6dsr_pin_int1_route_set+0x56>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_B,
                            (uint8_t *)&val->fsm_int1_b, 1);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	1d1a      	adds	r2, r3, #4
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_B,
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	210c      	movs	r1, #12
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fbba 	bl	8001444 <lsm6dsr_write_reg>
 8001cd0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d104      	bne.n	8001ce2 <lsm6dsr_pin_int1_route_set+0x66>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8001cd8:	2100      	movs	r1, #0
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ff05 	bl	8001aea <lsm6dsr_mem_bank_set>
 8001ce0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f040 809e 	bne.w	8001e26 <lsm6dsr_pin_int1_route_set+0x1aa>
  {
    if ((val->emb_func_int1.int1_fsm_lc |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	789b      	ldrb	r3, [r3, #2]
 8001cee:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001cf2:	b2da      	uxtb	r2, r3
         val->emb_func_int1.int1_sig_mot |
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	789b      	ldrb	r3, [r3, #2]
 8001cf8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001cfc:	b2db      	uxtb	r3, r3
    if ((val->emb_func_int1.int1_fsm_lc |
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	b2da      	uxtb	r2, r3
         val->emb_func_int1.int1_step_detector |
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	789b      	ldrb	r3, [r3, #2]
 8001d06:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001d0a:	b2db      	uxtb	r3, r3
         val->emb_func_int1.int1_sig_mot |
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	b2da      	uxtb	r2, r3
         val->emb_func_int1.int1_tilt |
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	789b      	ldrb	r3, [r3, #2]
 8001d14:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d18:	b2db      	uxtb	r3, r3
         val->emb_func_int1.int1_step_detector |
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm1 |
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	78db      	ldrb	r3, [r3, #3]
 8001d22:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001d26:	b2db      	uxtb	r3, r3
         val->emb_func_int1.int1_tilt |
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm2 |
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	78db      	ldrb	r3, [r3, #3]
 8001d30:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001d34:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm1 |
 8001d36:	4313      	orrs	r3, r2
 8001d38:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm3 |
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	78db      	ldrb	r3, [r3, #3]
 8001d3e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001d42:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm2 |
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm4 |
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	78db      	ldrb	r3, [r3, #3]
 8001d4c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001d50:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm3 |
 8001d52:	4313      	orrs	r3, r2
 8001d54:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm5 |
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	78db      	ldrb	r3, [r3, #3]
 8001d5a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d5e:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm4 |
 8001d60:	4313      	orrs	r3, r2
 8001d62:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm6 |
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	78db      	ldrb	r3, [r3, #3]
 8001d68:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001d6c:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm5 |
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm7 |
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	78db      	ldrb	r3, [r3, #3]
 8001d76:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d7a:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm6 |
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm8 |
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	78db      	ldrb	r3, [r3, #3]
 8001d84:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001d88:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm7 |
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm9 |
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	791b      	ldrb	r3, [r3, #4]
 8001d92:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001d96:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm8 |
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm10 |
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	791b      	ldrb	r3, [r3, #4]
 8001da0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001da4:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm9 |
 8001da6:	4313      	orrs	r3, r2
 8001da8:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm11 |
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	791b      	ldrb	r3, [r3, #4]
 8001dae:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001db2:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm10 |
 8001db4:	4313      	orrs	r3, r2
 8001db6:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm12 |
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	791b      	ldrb	r3, [r3, #4]
 8001dbc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001dc0:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm11 |
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm13 |
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	791b      	ldrb	r3, [r3, #4]
 8001dca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001dce:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm12 |
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm14 |
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	791b      	ldrb	r3, [r3, #4]
 8001dd8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ddc:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm13 |
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm15 |
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	791b      	ldrb	r3, [r3, #4]
 8001de6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001dea:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm14 |
 8001dec:	4313      	orrs	r3, r2
 8001dee:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm16) != PROPERTY_DISABLE)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	791b      	ldrb	r3, [r3, #4]
 8001df4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001df8:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm15 |
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	b2db      	uxtb	r3, r3
    if ((val->emb_func_int1.int1_fsm_lc |
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <lsm6dsr_pin_int1_route_set+0x192>
    {
      val->md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	7853      	ldrb	r3, [r2, #1]
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	7053      	strb	r3, [r2, #1]
 8001e0c:	e004      	b.n	8001e18 <lsm6dsr_pin_int1_route_set+0x19c>
    }

    else
    {
      val->md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	7853      	ldrb	r3, [r2, #1]
 8001e12:	f36f 0341 	bfc	r3, #1, #1
 8001e16:	7053      	strb	r3, [r2, #1]
    }

    ret = lsm6dsr_write_reg(ctx, LSM6DSR_INT1_CTRL,
                            (uint8_t *)&val->int1_ctrl, 1);
 8001e18:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_INT1_CTRL,
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	210d      	movs	r1, #13
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff fb10 	bl	8001444 <lsm6dsr_write_reg>
 8001e24:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d107      	bne.n	8001e3c <lsm6dsr_pin_int1_route_set+0x1c0>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_MD1_CFG,
                            (uint8_t *)&val->md1_cfg, 1);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_MD1_CFG,
 8001e30:	2301      	movs	r3, #1
 8001e32:	215e      	movs	r1, #94	; 0x5e
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff fb05 	bl	8001444 <lsm6dsr_write_reg>
 8001e3a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d172      	bne.n	8001f28 <lsm6dsr_pin_int1_route_set+0x2ac>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_CFG2, (uint8_t *)&tap_cfg2, 1);
 8001e42:	f107 0208 	add.w	r2, r7, #8
 8001e46:	2301      	movs	r3, #1
 8001e48:	2158      	movs	r1, #88	; 0x58
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fae2 	bl	8001414 <lsm6dsr_read_reg>
 8001e50:	60f8      	str	r0, [r7, #12]

    if ((val->int1_ctrl.den_drdy_flag |
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001e5a:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_boot |
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001e64:	b2db      	uxtb	r3, r3
    if ((val->int1_ctrl.den_drdy_flag |
 8001e66:	4313      	orrs	r3, r2
 8001e68:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_cnt_bdr |
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001e72:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_boot |
 8001e74:	4313      	orrs	r3, r2
 8001e76:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_drdy_g |
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001e80:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_cnt_bdr |
 8001e82:	4313      	orrs	r3, r2
 8001e84:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_drdy_xl |
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e8e:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_drdy_g |
 8001e90:	4313      	orrs	r3, r2
 8001e92:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_full |
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001e9c:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_drdy_xl |
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_ovr |
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001eaa:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_full |
 8001eac:	4313      	orrs	r3, r2
 8001eae:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_th |
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001eb8:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_ovr |
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_6d |
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	785b      	ldrb	r3, [r3, #1]
 8001ec2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001ec6:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_th |
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_double_tap |
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	785b      	ldrb	r3, [r3, #1]
 8001ed0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001ed4:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_6d |
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_ff |
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	785b      	ldrb	r3, [r3, #1]
 8001ede:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001ee2:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_double_tap |
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_wu |
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	785b      	ldrb	r3, [r3, #1]
 8001eec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ef0:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_ff |
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_single_tap |
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	785b      	ldrb	r3, [r3, #1]
 8001efa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001efe:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_wu |
 8001f00:	4313      	orrs	r3, r2
 8001f02:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	785b      	ldrb	r3, [r3, #1]
 8001f08:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001f0c:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_single_tap |
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	b2db      	uxtb	r3, r3
    if ((val->int1_ctrl.den_drdy_flag |
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d004      	beq.n	8001f20 <lsm6dsr_pin_int1_route_set+0x2a4>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 8001f16:	7a3b      	ldrb	r3, [r7, #8]
 8001f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f1c:	723b      	strb	r3, [r7, #8]
 8001f1e:	e003      	b.n	8001f28 <lsm6dsr_pin_int1_route_set+0x2ac>
    }

    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 8001f20:	7a3b      	ldrb	r3, [r7, #8]
 8001f22:	f36f 13c7 	bfc	r3, #7, #1
 8001f26:	723b      	strb	r3, [r7, #8]
    }
  }

  if (ret == 0)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d107      	bne.n	8001f3e <lsm6dsr_pin_int1_route_set+0x2c2>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_TAP_CFG2,
 8001f2e:	f107 0208 	add.w	r2, r7, #8
 8001f32:	2301      	movs	r3, #1
 8001f34:	2158      	movs	r1, #88	; 0x58
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff fa84 	bl	8001444 <lsm6dsr_write_reg>
 8001f3c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&tap_cfg2, 1);
  }

  return ret;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <lsm6dsr_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsr_pin_int1_route_t *val)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8001f52:	2102      	movs	r1, #2
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff fdc8 	bl	8001aea <lsm6dsr_mem_bank_set>
 8001f5a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d107      	bne.n	8001f72 <lsm6dsr_pin_int1_route_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
                           (uint8_t *)&val->emb_func_int1, 1);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	1c9a      	adds	r2, r3, #2
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
 8001f66:	2301      	movs	r3, #1
 8001f68:	210a      	movs	r1, #10
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff fa52 	bl	8001414 <lsm6dsr_read_reg>
 8001f70:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d107      	bne.n	8001f88 <lsm6dsr_pin_int1_route_get+0x40>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_A,
                           (uint8_t *)&val->fsm_int1_a, 1);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	1cda      	adds	r2, r3, #3
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_A,
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	210b      	movs	r1, #11
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff fa47 	bl	8001414 <lsm6dsr_read_reg>
 8001f86:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d107      	bne.n	8001f9e <lsm6dsr_pin_int1_route_get+0x56>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_B,
                           (uint8_t *)&val->fsm_int1_b, 1);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	1d1a      	adds	r2, r3, #4
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_B,
 8001f92:	2301      	movs	r3, #1
 8001f94:	210c      	movs	r1, #12
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fa3c 	bl	8001414 <lsm6dsr_read_reg>
 8001f9c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d104      	bne.n	8001fae <lsm6dsr_pin_int1_route_get+0x66>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fd9f 	bl	8001aea <lsm6dsr_mem_bank_set>
 8001fac:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d106      	bne.n	8001fc2 <lsm6dsr_pin_int1_route_get+0x7a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_INT1_CTRL,
                           (uint8_t *)&val->int1_ctrl, 1);
 8001fb4:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_INT1_CTRL,
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	210d      	movs	r1, #13
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff fa2a 	bl	8001414 <lsm6dsr_read_reg>
 8001fc0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d107      	bne.n	8001fd8 <lsm6dsr_pin_int1_route_get+0x90>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_MD1_CFG,
                           (uint8_t *)&val->md1_cfg, 1);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_MD1_CFG,
 8001fcc:	2301      	movs	r3, #1
 8001fce:	215e      	movs	r1, #94	; 0x5e
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff fa1f 	bl	8001414 <lsm6dsr_read_reg>
 8001fd6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <lsm6dsr_wkup_threshold_set>:
  * @param  val    Change the values of wk_ths in reg WAKE_UP_THS
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	460b      	mov	r3, r1
 8001fec:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_wake_up_ths_t wake_up_ths;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WAKE_UP_THS,
 8001fee:	f107 0208 	add.w	r2, r7, #8
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	215b      	movs	r1, #91	; 0x5b
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fa0c 	bl	8001414 <lsm6dsr_read_reg>
 8001ffc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&wake_up_ths, 1);

  if (ret == 0)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10f      	bne.n	8002024 <lsm6dsr_wkup_threshold_set+0x42>
  {
    wake_up_ths.wk_ths = (uint8_t)val;
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800200a:	b2da      	uxtb	r2, r3
 800200c:	7a3b      	ldrb	r3, [r7, #8]
 800200e:	f362 0305 	bfi	r3, r2, #0, #6
 8002012:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_WAKE_UP_THS,
 8002014:	f107 0208 	add.w	r2, r7, #8
 8002018:	2301      	movs	r3, #1
 800201a:	215b      	movs	r1, #91	; 0x5b
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff fa11 	bl	8001444 <lsm6dsr_write_reg>
 8002022:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&wake_up_ths, 1);
  }

  return ret;
 8002024:	68fb      	ldr	r3, [r7, #12]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8002038:	2102      	movs	r1, #2
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff fd55 	bl	8001aea <lsm6dsr_mem_bank_set>
 8002040:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d106      	bne.n	8002056 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8002048:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 800204a:	2301      	movs	r3, #1
 800204c:	2146      	movs	r1, #70	; 0x46
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff f9e0 	bl	8001414 <lsm6dsr_read_reg>
 8002054:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d107      	bne.n	800206c <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8002060:	2301      	movs	r3, #1
 8002062:	2147      	movs	r1, #71	; 0x47
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff f9d5 	bl	8001414 <lsm6dsr_read_reg>
 800206a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d104      	bne.n	800207c <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8002072:	2100      	movs	r1, #0
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff fd38 	bl	8001aea <lsm6dsr_mem_bank_set>
 800207a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800207c:	68fb      	ldr	r3, [r7, #12]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8002092:	2102      	movs	r1, #2
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff fd28 	bl	8001aea <lsm6dsr_mem_bank_set>
 800209a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d107      	bne.n	80020b2 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 80020a2:	f107 0208 	add.w	r2, r7, #8
 80020a6:	2301      	movs	r3, #1
 80020a8:	215f      	movs	r1, #95	; 0x5f
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff f9b2 	bl	8001414 <lsm6dsr_read_reg>
 80020b0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d104      	bne.n	80020c2 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80020b8:	2100      	movs	r1, #0
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fd15 	bl	8001aea <lsm6dsr_mem_bank_set>
 80020c0:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 80020c2:	7a3b      	ldrb	r3, [r7, #8]
 80020c4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d81a      	bhi.n	8002104 <lsm6dsr_fsm_data_rate_get+0x7c>
 80020ce:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <lsm6dsr_fsm_data_rate_get+0x4c>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	080020e5 	.word	0x080020e5
 80020d8:	080020ed 	.word	0x080020ed
 80020dc:	080020f5 	.word	0x080020f5
 80020e0:	080020fd 	.word	0x080020fd
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
      break;
 80020ea:	e00f      	b.n	800210c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2201      	movs	r2, #1
 80020f0:	701a      	strb	r2, [r3, #0]
      break;
 80020f2:	e00b      	b.n	800210c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2202      	movs	r2, #2
 80020f8:	701a      	strb	r2, [r3, #0]
      break;
 80020fa:	e007      	b.n	800210c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2203      	movs	r2, #3
 8002100:	701a      	strb	r2, [r3, #0]
      break;
 8002102:	e003      	b.n	800210c <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
      break;
 800210a:	bf00      	nop
  }

  return ret;
 800210c:	68fb      	ldr	r3, [r7, #12]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop

08002118 <get_temperature>:
#include "max6675.h"

#define MAX_SPI_HANDLE hspi2


thermocouple_status_t get_temperature(float *temperature){
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	uint8_t tmp[2];
	HAL_GPIO_WritePin(TC_CS_GPIO_Port, TC_CS_Pin, GPIO_PIN_RESET);
 8002120:	2200      	movs	r2, #0
 8002122:	2108      	movs	r1, #8
 8002124:	4815      	ldr	r0, [pc, #84]	; (800217c <get_temperature+0x64>)
 8002126:	f001 f9bb 	bl	80034a0 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&MAX_SPI_HANDLE, tmp, 2, 2);
 800212a:	f107 010c 	add.w	r1, r7, #12
 800212e:	2302      	movs	r3, #2
 8002130:	2202      	movs	r2, #2
 8002132:	4813      	ldr	r0, [pc, #76]	; (8002180 <get_temperature+0x68>)
 8002134:	f003 fa01 	bl	800553a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(TC_CS_GPIO_Port, TC_CS_Pin, GPIO_PIN_SET);
 8002138:	2201      	movs	r2, #1
 800213a:	2108      	movs	r1, #8
 800213c:	480f      	ldr	r0, [pc, #60]	; (800217c <get_temperature+0x64>)
 800213e:	f001 f9af 	bl	80034a0 <HAL_GPIO_WritePin>
	if(tmp[1] & 0x04){
 8002142:	7b7b      	ldrb	r3, [r7, #13]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <get_temperature+0x38>
		return TMP_OPEN;
 800214c:	2301      	movs	r3, #1
 800214e:	e011      	b.n	8002174 <get_temperature+0x5c>
	} else {
		*temperature = (((uint16_t)(tmp[0]) << 5) + ((tmp[1] & 0xF8) >> 3))/4.0f;
 8002150:	7b3b      	ldrb	r3, [r7, #12]
 8002152:	015b      	lsls	r3, r3, #5
 8002154:	7b7a      	ldrb	r2, [r7, #13]
 8002156:	08d2      	lsrs	r2, r2, #3
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	4413      	add	r3, r2
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002164:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	edc3 7a00 	vstr	s15, [r3]
		return TMP_OK;
 8002172:	2300      	movs	r3, #0
	}
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40020000 	.word	0x40020000
 8002180:	20005390 	.word	0x20005390

08002184 <task_fsm>:

#include "cmsis_os.h"
#include "task_fsm.h"
#include "config/globals.h"

void task_fsm(void *argument) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

	uint32_t tick_count = osKernelGetTickCount();
 800218c:	f007 fdf2 	bl	8009d74 <osKernelGetTickCount>
 8002190:	60f8      	str	r0, [r7, #12]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 8002192:	f007 fe04 	bl	8009d9e <osKernelGetTickFreq>
 8002196:	4603      	mov	r3, r0
 8002198:	4a06      	ldr	r2, [pc, #24]	; (80021b4 <task_fsm+0x30>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	60bb      	str	r3, [r7, #8]

	while (1) {

		tick_count += tick_update;
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4413      	add	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick_count);
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f007 fead 	bl	8009f0a <osDelayUntil>
		tick_count += tick_update;
 80021b0:	e7f7      	b.n	80021a2 <task_fsm+0x1e>
 80021b2:	bf00      	nop
 80021b4:	51eb851f 	.word	0x51eb851f

080021b8 <task_heater>:
#include "sensors/max6675.h"
#include "util/log.h"

#define SAMPLING_FREQ_HEATER 1 //Hz

void task_heater(void *argument) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af02      	add	r7, sp, #8
 80021be:	6078      	str	r0, [r7, #4]

	uint32_t tick_count = osKernelGetTickCount();
 80021c0:	f007 fdd8 	bl	8009d74 <osKernelGetTickCount>
 80021c4:	6178      	str	r0, [r7, #20]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ_HEATER;
 80021c6:	f007 fdea 	bl	8009d9e <osKernelGetTickFreq>
 80021ca:	6138      	str	r0, [r7, #16]

	while (1) {
		float temperature = 0;
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
		thermocouple_status_t status;

		status = get_temperature(&temperature);
 80021d2:	f107 0308 	add.w	r3, r7, #8
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff ff9e 	bl	8002118 <get_temperature>
 80021dc:	4603      	mov	r3, r0
 80021de:	73fb      	strb	r3, [r7, #15]

		if(status != TMP_OK) {
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d006      	beq.n	80021f4 <task_heater+0x3c>
			log_error("No thermocouple connected!");
 80021e6:	490e      	ldr	r1, [pc, #56]	; (8002220 <task_heater+0x68>)
 80021e8:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <task_heater+0x6c>)
 80021ea:	221e      	movs	r2, #30
 80021ec:	2004      	movs	r0, #4
 80021ee:	f000 f99b 	bl	8002528 <log_log>
 80021f2:	e00c      	b.n	800220e <task_heater+0x56>
		} else {
			log_info("Current thermocouple temperature: %d", (int32_t)temperature);
 80021f4:	490a      	ldr	r1, [pc, #40]	; (8002220 <task_heater+0x68>)
 80021f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80021fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021fe:	ee17 3a90 	vmov	r3, s15
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <task_heater+0x70>)
 8002206:	2220      	movs	r2, #32
 8002208:	2002      	movs	r0, #2
 800220a:	f000 f98d 	bl	8002528 <log_log>
		}
		//dcdc_set_voltage(8);
		//dcdc_enable();

		tick_count += tick_update;
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	617b      	str	r3, [r7, #20]
		osDelayUntil(tick_count);
 8002216:	6978      	ldr	r0, [r7, #20]
 8002218:	f007 fe77 	bl	8009f0a <osDelayUntil>
	while (1) {
 800221c:	e7d6      	b.n	80021cc <task_heater+0x14>
 800221e:	bf00      	nop
 8002220:	0800e6c6 	.word	0x0800e6c6
 8002224:	0800e6d4 	.word	0x0800e6d4
 8002228:	0800e6f0 	.word	0x0800e6f0

0800222c <task_sensor_read>:
#include "cmsis_os.h"
#include "task_sensor_read.h"
#include "config/globals.h"
#include "util/log.h"

void task_sensor_read(void *argument) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

	uint32_t tick_count = osKernelGetTickCount();
 8002234:	f007 fd9e 	bl	8009d74 <osKernelGetTickCount>
 8002238:	60f8      	str	r0, [r7, #12]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 800223a:	f007 fdb0 	bl	8009d9e <osKernelGetTickFreq>
 800223e:	4603      	mov	r3, r0
 8002240:	4a08      	ldr	r2, [pc, #32]	; (8002264 <task_sensor_read+0x38>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	60bb      	str	r3, [r7, #8]
	osDelay(2000);
 800224a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800224e:	f007 fe41 	bl	8009ed4 <osDelay>

	while (1) {

		tick_count += tick_update;
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick_count);
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f007 fe55 	bl	8009f0a <osDelayUntil>
		tick_count += tick_update;
 8002260:	e7f7      	b.n	8002252 <task_sensor_read+0x26>
 8002262:	bf00      	nop
 8002264:	51eb851f 	.word	0x51eb851f

08002268 <task_state_est>:
#include "cmsis_os.h"
#include "task_state_est.h"
#include "config/globals.h"
#include "util/log.h"

void task_state_est(void *argument) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

	uint32_t tick_count = osKernelGetTickCount();
 8002270:	f007 fd80 	bl	8009d74 <osKernelGetTickCount>
 8002274:	60f8      	str	r0, [r7, #12]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 8002276:	f007 fd92 	bl	8009d9e <osKernelGetTickFreq>
 800227a:	4603      	mov	r3, r0
 800227c:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <task_state_est+0x38>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	60bb      	str	r3, [r7, #8]
	osDelay(2000);
 8002286:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800228a:	f007 fe23 	bl	8009ed4 <osDelay>
	while (1) {
		tick_count += tick_update;
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4413      	add	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick_count);
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f007 fe37 	bl	8009f0a <osDelayUntil>
		tick_count += tick_update;
 800229c:	e7f7      	b.n	800228e <task_state_est+0x26>
 800229e:	bf00      	nop
 80022a0:	51eb851f 	.word	0x51eb851f

080022a4 <fifo_init>:
 */

#include <string.h>
#include "fifo.h"

void fifo_init(fifo_t *fifo, uint8_t *pdata, uint32_t size) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  fifo->data = pdata;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	611a      	str	r2, [r3, #16]
  fifo->size = size;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	60da      	str	r2, [r3, #12]
  fifo->mutex = false;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	751a      	strb	r2, [r3, #20]
  fifo_flush(fifo);
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f804 	bl	80022d0 <fifo_flush>
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <fifo_flush>:

void fifo_flush(fifo_t *fifo) {
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if (fifo->mutex == false) {
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	7d1b      	ldrb	r3, [r3, #20]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f083 0301 	eor.w	r3, r3, #1
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00e      	beq.n	8002306 <fifo_flush+0x36>
    fifo->mutex = true;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	751a      	strb	r2, [r3, #20]
    fifo->tail = 0;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	605a      	str	r2, [r3, #4]
    fifo->head = 0;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
    fifo->used = 0;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	751a      	strb	r2, [r3, #20]
  }
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <fifo_get_length>:

uint32_t fifo_get_length(fifo_t *fifo) { return fifo->used; }
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <fifo_read_bytes>:
    return true;
  }
  return false;
}

bool fifo_read_bytes(fifo_t *fifo, uint8_t *data, uint32_t count) {
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
  if (fifo->mutex == false) {
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	7d1b      	ldrb	r3, [r3, #20]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f083 0301 	eor.w	r3, r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d05a      	beq.n	80023fc <fifo_read_bytes+0xd2>
    fifo->mutex = true;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	751a      	strb	r2, [r3, #20]
    if (fifo->used < count) {
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	429a      	cmp	r2, r3
 8002354:	d904      	bls.n	8002360 <fifo_read_bytes+0x36>
      fifo->mutex = false;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	751a      	strb	r2, [r3, #20]
      return false;
 800235c:	2300      	movs	r3, #0
 800235e:	e04e      	b.n	80023fe <fifo_read_bytes+0xd4>
    }
    if (fifo->tail + count > fifo->size) {
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	441a      	add	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	429a      	cmp	r2, r3
 800236e:	d923      	bls.n	80023b8 <fifo_read_bytes+0x8e>
      uint32_t front = (fifo->tail + count) % fifo->size;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4413      	add	r3, r2
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	68d2      	ldr	r2, [r2, #12]
 800237c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002380:	fb02 f201 	mul.w	r2, r2, r1
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	617b      	str	r3, [r7, #20]
      uint32_t back = count - front;
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	613b      	str	r3, [r7, #16]
      memcpy(&data[0], &fifo->data[fifo->tail], back);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4413      	add	r3, r2
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4619      	mov	r1, r3
 800239e:	68b8      	ldr	r0, [r7, #8]
 80023a0:	f00b fcd4 	bl	800dd4c <memcpy>
      memcpy(&data[back], &fifo->data[0], front);
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	18d0      	adds	r0, r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	4619      	mov	r1, r3
 80023b2:	f00b fccb 	bl	800dd4c <memcpy>
 80023b6:	e009      	b.n	80023cc <fifo_read_bytes+0xa2>
    } else {
      memcpy(&data[0], &fifo->data[fifo->tail], count);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4619      	mov	r1, r3
 80023c6:	68b8      	ldr	r0, [r7, #8]
 80023c8:	f00b fcc0 	bl	800dd4c <memcpy>
    }
    fifo->tail = (fifo->tail + count) % fifo->size;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4413      	add	r3, r2
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	68d2      	ldr	r2, [r2, #12]
 80023d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80023dc:	fb02 f201 	mul.w	r2, r2, r1
 80023e0:	1a9a      	subs	r2, r3, r2
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	605a      	str	r2, [r3, #4]
    fifo->used -= count;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	1ad2      	subs	r2, r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	751a      	strb	r2, [r3, #20]
    return true;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <fifo_read_bytes+0xd4>
  }
  return false;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <fifo_write_bytes>:
    return i;
  }
  return 0;
}

bool fifo_write_bytes(fifo_t *fifo, uint8_t *data, uint32_t count) {
 8002406:	b580      	push	{r7, lr}
 8002408:	b086      	sub	sp, #24
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
  // If there is not enough space return false
  if (fifo->mutex == false) {
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	7d1b      	ldrb	r3, [r3, #20]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	f083 0301 	eor.w	r3, r3, #1
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d059      	beq.n	80024d6 <fifo_write_bytes+0xd0>
    fifo->mutex = true;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2201      	movs	r2, #1
 8002426:	751a      	strb	r2, [r3, #20]
    if ((fifo->size - fifo->used) < count) {
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	d904      	bls.n	8002442 <fifo_write_bytes+0x3c>
      fifo->mutex = false;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	751a      	strb	r2, [r3, #20]
      return false;
 800243e:	2300      	movs	r3, #0
 8002440:	e04a      	b.n	80024d8 <fifo_write_bytes+0xd2>
    }
    if (count + fifo->head > fifo->size) {
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	441a      	add	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	429a      	cmp	r2, r3
 8002450:	d91f      	bls.n	8002492 <fifo_write_bytes+0x8c>
      uint32_t front = fifo->head + count - fifo->size;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	441a      	add	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	617b      	str	r3, [r7, #20]
      uint32_t back = count - front;
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	613b      	str	r3, [r7, #16]
      memcpy(&fifo->data[fifo->head], data, back);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	691a      	ldr	r2, [r3, #16]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4413      	add	r3, r2
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	4618      	mov	r0, r3
 800247a:	f00b fc67 	bl	800dd4c <memcpy>
      memcpy(&fifo->data[0], &data[back], front);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6918      	ldr	r0, [r3, #16]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4413      	add	r3, r2
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	4619      	mov	r1, r3
 800248c:	f00b fc5e 	bl	800dd4c <memcpy>
 8002490:	e009      	b.n	80024a6 <fifo_write_bytes+0xa0>
    } else {
      memcpy(&fifo->data[fifo->head], data, count);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4413      	add	r3, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	68b9      	ldr	r1, [r7, #8]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f00b fc53 	bl	800dd4c <memcpy>
    }
    fifo->head = (fifo->head + count) % fifo->size;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	68d2      	ldr	r2, [r2, #12]
 80024b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80024b6:	fb02 f201 	mul.w	r2, r2, r1
 80024ba:	1a9a      	subs	r2, r3, r2
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	601a      	str	r2, [r3, #0]
    fifo->used += count;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	441a      	add	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	751a      	strb	r2, [r3, #20]
    return true;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <fifo_write_bytes+0xd2>
  }
  return false;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <log_init>:
static const char *level_colors[] = {"\x1b[94m", "\x1b[36m", "\x1b[32m", "\x1b[33m", "\x1b[31m", "\x1b[35m"};

osMutexId_t print_mutex;
static char print_buffer[PRINT_BUFFER_LEN];

void log_init(){
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
	const osMutexAttr_t print_mutex_attr = {
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <log_init+0x28>)
 80024e8:	463c      	mov	r4, r7
 80024ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  "print_mutex",       // human readable mutex name
	   osMutexPrioInherit,  // attr_bits
	   NULL,                // memory for control block
	   0U                   // size for control block
	};
	print_mutex = osMutexNew(&print_mutex_attr);
 80024f0:	463b      	mov	r3, r7
 80024f2:	4618      	mov	r0, r3
 80024f4:	f007 fd36 	bl	8009f64 <osMutexNew>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4a04      	ldr	r2, [pc, #16]	; (800250c <log_init+0x2c>)
 80024fc:	6013      	str	r3, [r2, #0]
}
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	bd90      	pop	{r4, r7, pc}
 8002506:	bf00      	nop
 8002508:	0800e784 	.word	0x0800e784
 800250c:	200072cc 	.word	0x200072cc

08002510 <log_enable>:

void log_set_level(int level) {
  L.level = level;
}

void log_enable() {
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  L.enabled = true;
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <log_enable+0x14>)
 8002516:	2201      	movs	r2, #1
 8002518:	711a      	strb	r2, [r3, #4]
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	20000244 	.word	0x20000244

08002528 <log_log>:

bool log_is_enabled() {
  return L.enabled;
}

void log_log(int level, const char *file, int line, const char *format, ...) {
 8002528:	b408      	push	{r3}
 800252a:	b580      	push	{r7, lr}
 800252c:	b08b      	sub	sp, #44	; 0x2c
 800252e:	af04      	add	r7, sp, #16
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
  if (L.enabled && level >= L.level && osMutexAcquire(print_mutex, 0U) == osOK) {
 8002536:	4b35      	ldr	r3, [pc, #212]	; (800260c <log_log+0xe4>)
 8002538:	791b      	ldrb	r3, [r3, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d05f      	beq.n	80025fe <log_log+0xd6>
 800253e:	4b33      	ldr	r3, [pc, #204]	; (800260c <log_log+0xe4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	429a      	cmp	r2, r3
 8002546:	db5a      	blt.n	80025fe <log_log+0xd6>
 8002548:	4b31      	ldr	r3, [pc, #196]	; (8002610 <log_log+0xe8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f007 fd8e 	bl	800a070 <osMutexAcquire>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d151      	bne.n	80025fe <log_log+0xd6>
    /* fill buffer with metadata */
    static char buf_ts[16];
    buf_ts[snprintf(buf_ts, sizeof(buf_ts), "%lu", osKernelGetTickCount())] = '\0';
 800255a:	f007 fc0b 	bl	8009d74 <osKernelGetTickCount>
 800255e:	4603      	mov	r3, r0
 8002560:	4a2c      	ldr	r2, [pc, #176]	; (8002614 <log_log+0xec>)
 8002562:	2110      	movs	r1, #16
 8002564:	482c      	ldr	r0, [pc, #176]	; (8002618 <log_log+0xf0>)
 8002566:	f00b fc07 	bl	800dd78 <sniprintf>
 800256a:	4603      	mov	r3, r0
 800256c:	4a2a      	ldr	r2, [pc, #168]	; (8002618 <log_log+0xf0>)
 800256e:	2100      	movs	r1, #0
 8002570:	54d1      	strb	r1, [r2, r3]
    static char buf_loc[30];
    buf_loc[snprintf(buf_loc, sizeof(buf_loc), "%s:%d:", file, line)] = '\0';
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	4a28      	ldr	r2, [pc, #160]	; (800261c <log_log+0xf4>)
 800257a:	211e      	movs	r1, #30
 800257c:	4828      	ldr	r0, [pc, #160]	; (8002620 <log_log+0xf8>)
 800257e:	f00b fbfb 	bl	800dd78 <sniprintf>
 8002582:	4603      	mov	r3, r0
 8002584:	4a26      	ldr	r2, [pc, #152]	; (8002620 <log_log+0xf8>)
 8002586:	2100      	movs	r1, #0
 8002588:	54d1      	strb	r1, [r2, r3]
    int len;
    len = snprintf(print_buffer, PRINT_BUFFER_LEN, "%6s %s%5s\x1b[0m \x1b[90m%30s\x1b[0m ", buf_ts, level_colors[level],
 800258a:	4a26      	ldr	r2, [pc, #152]	; (8002624 <log_log+0xfc>)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002592:	4925      	ldr	r1, [pc, #148]	; (8002628 <log_log+0x100>)
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800259a:	4921      	ldr	r1, [pc, #132]	; (8002620 <log_log+0xf8>)
 800259c:	9102      	str	r1, [sp, #8]
 800259e:	9201      	str	r2, [sp, #4]
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <log_log+0xf0>)
 80025a4:	4a21      	ldr	r2, [pc, #132]	; (800262c <log_log+0x104>)
 80025a6:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80025aa:	4821      	ldr	r0, [pc, #132]	; (8002630 <log_log+0x108>)
 80025ac:	f00b fbe4 	bl	800dd78 <sniprintf>
 80025b0:	6178      	str	r0, [r7, #20]
                   level_strings[level], buf_loc);
    va_list argptr;
    va_start(argptr, format);
 80025b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025b6:	613b      	str	r3, [r7, #16]
    vsnprintf(print_buffer + len, PRINT_BUFFER_LEN, format, argptr);
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	4a1d      	ldr	r2, [pc, #116]	; (8002630 <log_log+0x108>)
 80025bc:	1898      	adds	r0, r3, r2
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c2:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80025c6:	f00b fc37 	bl	800de38 <vsniprintf>
    va_end(argptr);
    snprintf(print_buffer + strlen(print_buffer), PRINT_BUFFER_LEN, "\n");
 80025ca:	4819      	ldr	r0, [pc, #100]	; (8002630 <log_log+0x108>)
 80025cc:	f7fd fe08 	bl	80001e0 <strlen>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4a17      	ldr	r2, [pc, #92]	; (8002630 <log_log+0x108>)
 80025d4:	4413      	add	r3, r2
 80025d6:	4a17      	ldr	r2, [pc, #92]	; (8002634 <log_log+0x10c>)
 80025d8:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80025dc:	4618      	mov	r0, r3
 80025de:	f00b fbcb 	bl	800dd78 <sniprintf>
    fifo_write_bytes(&usb_output_fifo, (uint8_t *)print_buffer, strlen(print_buffer));
 80025e2:	4813      	ldr	r0, [pc, #76]	; (8002630 <log_log+0x108>)
 80025e4:	f7fd fdfc 	bl	80001e0 <strlen>
 80025e8:	4603      	mov	r3, r0
 80025ea:	461a      	mov	r2, r3
 80025ec:	4910      	ldr	r1, [pc, #64]	; (8002630 <log_log+0x108>)
 80025ee:	4812      	ldr	r0, [pc, #72]	; (8002638 <log_log+0x110>)
 80025f0:	f7ff ff09 	bl	8002406 <fifo_write_bytes>
    osMutexRelease(print_mutex);
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <log_log+0xe8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f007 fd84 	bl	800a106 <osMutexRelease>
  }
}
 80025fe:	bf00      	nop
 8002600:	371c      	adds	r7, #28
 8002602:	46bd      	mov	sp, r7
 8002604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002608:	b001      	add	sp, #4
 800260a:	4770      	bx	lr
 800260c:	20000244 	.word	0x20000244
 8002610:	200072cc 	.word	0x200072cc
 8002614:	0800e794 	.word	0x0800e794
 8002618:	200003f0 	.word	0x200003f0
 800261c:	0800e798 	.word	0x0800e798
 8002620:	20000400 	.word	0x20000400
 8002624:	2000001c 	.word	0x2000001c
 8002628:	20000004 	.word	0x20000004
 800262c:	0800e7a0 	.word	0x0800e7a0
 8002630:	2000024c 	.word	0x2000024c
 8002634:	0800e7c0 	.word	0x0800e7c0
 8002638:	20005374 	.word	0x20005374

0800263c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800263c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002674 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002640:	480d      	ldr	r0, [pc, #52]	; (8002678 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002642:	490e      	ldr	r1, [pc, #56]	; (800267c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002644:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002648:	e002      	b.n	8002650 <LoopCopyDataInit>

0800264a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800264c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264e:	3304      	adds	r3, #4

08002650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002654:	d3f9      	bcc.n	800264a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002656:	4a0b      	ldr	r2, [pc, #44]	; (8002684 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002658:	4c0b      	ldr	r4, [pc, #44]	; (8002688 <LoopFillZerobss+0x26>)
  movs r3, #0
 800265a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800265c:	e001      	b.n	8002662 <LoopFillZerobss>

0800265e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002660:	3204      	adds	r2, #4

08002662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002664:	d3fb      	bcc.n	800265e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002666:	f7fe fec3 	bl	80013f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800266a:	f00b fb4b 	bl	800dd04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800266e:	f7fe f859 	bl	8000724 <main>
  bx  lr    
 8002672:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002674:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800267c:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8002680:	0800e920 	.word	0x0800e920
  ldr r2, =_sbss
 8002684:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8002688:	20007ec8 	.word	0x20007ec8

0800268c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800268c:	e7fe      	b.n	800268c <ADC_IRQHandler>
	...

08002690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <HAL_Init+0x40>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0d      	ldr	r2, [pc, #52]	; (80026d0 <HAL_Init+0x40>)
 800269a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800269e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_Init+0x40>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <HAL_Init+0x40>)
 80026a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026ac:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <HAL_Init+0x40>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a07      	ldr	r2, [pc, #28]	; (80026d0 <HAL_Init+0x40>)
 80026b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b8:	2003      	movs	r0, #3
 80026ba:	f000 fd12 	bl	80030e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026be:	200f      	movs	r0, #15
 80026c0:	f7fe fda6 	bl	8001210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026c4:	f7fe fc12 	bl	8000eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023c00 	.word	0x40023c00

080026d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_IncTick+0x20>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_IncTick+0x24>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <HAL_IncTick+0x24>)
 80026e6:	6013      	str	r3, [r2, #0]
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20000038 	.word	0x20000038
 80026f8:	200072d0 	.word	0x200072d0

080026fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <HAL_GetTick+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	200072d0 	.word	0x200072d0

08002714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800271c:	f7ff ffee 	bl	80026fc <HAL_GetTick>
 8002720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d005      	beq.n	800273a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_Delay+0x44>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800273a:	bf00      	nop
 800273c:	f7ff ffde 	bl	80026fc <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	429a      	cmp	r2, r3
 800274a:	d8f7      	bhi.n	800273c <HAL_Delay+0x28>
  {
  }
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000038 	.word	0x20000038

0800275c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e033      	b.n	80027da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fe fbe2 	bl	8000f44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	d118      	bne.n	80027cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027a2:	f023 0302 	bic.w	r3, r3, #2
 80027a6:	f043 0202 	orr.w	r2, r3, #2
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 faca 	bl	8002d48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f023 0303 	bic.w	r3, r3, #3
 80027c2:	f043 0201 	orr.w	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
 80027ca:	e001      	b.n	80027d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_Start+0x1a>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e097      	b.n	800292e <HAL_ADC_Start+0x14a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b01      	cmp	r3, #1
 8002812:	d018      	beq.n	8002846 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002824:	4b45      	ldr	r3, [pc, #276]	; (800293c <HAL_ADC_Start+0x158>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a45      	ldr	r2, [pc, #276]	; (8002940 <HAL_ADC_Start+0x15c>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	0c9a      	lsrs	r2, r3, #18
 8002830:	4613      	mov	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4413      	add	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002838:	e002      	b.n	8002840 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	3b01      	subs	r3, #1
 800283e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f9      	bne.n	800283a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d15f      	bne.n	8002914 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800287e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800288e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002892:	d106      	bne.n	80028a2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002898:	f023 0206 	bic.w	r2, r3, #6
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	645a      	str	r2, [r3, #68]	; 0x44
 80028a0:	e002      	b.n	80028a8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028b0:	4b24      	ldr	r3, [pc, #144]	; (8002944 <HAL_ADC_Start+0x160>)
 80028b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028bc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10f      	bne.n	80028ea <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d129      	bne.n	800292c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	e020      	b.n	800292c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a16      	ldr	r2, [pc, #88]	; (8002948 <HAL_ADC_Start+0x164>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d11b      	bne.n	800292c <HAL_ADC_Start+0x148>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d114      	bne.n	800292c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	e00b      	b.n	800292c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	f043 0210 	orr.w	r2, r3, #16
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002924:	f043 0201 	orr.w	r2, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000000 	.word	0x20000000
 8002940:	431bde83 	.word	0x431bde83
 8002944:	40012300 	.word	0x40012300
 8002948:	40012000 	.word	0x40012000

0800294c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_ADC_Stop+0x16>
 800295e:	2302      	movs	r3, #2
 8002960:	e021      	b.n	80029a6 <HAL_ADC_Stop+0x5a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0201 	bic.w	r2, r2, #1
 8002978:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d109      	bne.n	800299c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002990:	f023 0301 	bic.w	r3, r3, #1
 8002994:	f043 0201 	orr.w	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ce:	d113      	bne.n	80029f8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029de:	d10b      	bne.n	80029f8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	f043 0220 	orr.w	r2, r3, #32
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e063      	b.n	8002ac0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80029f8:	f7ff fe80 	bl	80026fc <HAL_GetTick>
 80029fc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029fe:	e021      	b.n	8002a44 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a06:	d01d      	beq.n	8002a44 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <HAL_ADC_PollForConversion+0x6c>
 8002a0e:	f7ff fe75 	bl	80026fc <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d212      	bcs.n	8002a44 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d00b      	beq.n	8002a44 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f043 0204 	orr.w	r2, r3, #4
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e03d      	b.n	8002ac0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d1d6      	bne.n	8002a00 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f06f 0212 	mvn.w	r2, #18
 8002a5a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d123      	bne.n	8002abe <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d11f      	bne.n	8002abe <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d006      	beq.n	8002a9a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d111      	bne.n	8002abe <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f043 0201 	orr.w	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x1c>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e113      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x244>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b09      	cmp	r3, #9
 8002b0e:	d925      	bls.n	8002b5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68d9      	ldr	r1, [r3, #12]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4613      	mov	r3, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	4413      	add	r3, r2
 8002b24:	3b1e      	subs	r3, #30
 8002b26:	2207      	movs	r2, #7
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43da      	mvns	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	400a      	ands	r2, r1
 8002b34:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68d9      	ldr	r1, [r3, #12]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	4618      	mov	r0, r3
 8002b48:	4603      	mov	r3, r0
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4403      	add	r3, r0
 8002b4e:	3b1e      	subs	r3, #30
 8002b50:	409a      	lsls	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	e022      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6919      	ldr	r1, [r3, #16]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	4413      	add	r3, r2
 8002b70:	2207      	movs	r2, #7
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43da      	mvns	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6919      	ldr	r1, [r3, #16]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	4618      	mov	r0, r3
 8002b92:	4603      	mov	r3, r0
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4403      	add	r3, r0
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d824      	bhi.n	8002bf4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	3b05      	subs	r3, #5
 8002bbc:	221f      	movs	r2, #31
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	400a      	ands	r2, r1
 8002bca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	4618      	mov	r0, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	3b05      	subs	r3, #5
 8002be6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	635a      	str	r2, [r3, #52]	; 0x34
 8002bf2:	e04c      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b0c      	cmp	r3, #12
 8002bfa:	d824      	bhi.n	8002c46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3b23      	subs	r3, #35	; 0x23
 8002c0e:	221f      	movs	r2, #31
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43da      	mvns	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	400a      	ands	r2, r1
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	3b23      	subs	r3, #35	; 0x23
 8002c38:	fa00 f203 	lsl.w	r2, r0, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
 8002c44:	e023      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	3b41      	subs	r3, #65	; 0x41
 8002c58:	221f      	movs	r2, #31
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	400a      	ands	r2, r1
 8002c66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	4618      	mov	r0, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	3b41      	subs	r3, #65	; 0x41
 8002c82:	fa00 f203 	lsl.w	r2, r0, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c8e:	4b29      	ldr	r3, [pc, #164]	; (8002d34 <HAL_ADC_ConfigChannel+0x250>)
 8002c90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a28      	ldr	r2, [pc, #160]	; (8002d38 <HAL_ADC_ConfigChannel+0x254>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d10f      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x1d8>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b12      	cmp	r3, #18
 8002ca2:	d10b      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <HAL_ADC_ConfigChannel+0x254>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d12b      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x23a>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1c      	ldr	r2, [pc, #112]	; (8002d3c <HAL_ADC_ConfigChannel+0x258>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <HAL_ADC_ConfigChannel+0x1f4>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b11      	cmp	r3, #17
 8002cd6:	d122      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a11      	ldr	r2, [pc, #68]	; (8002d3c <HAL_ADC_ConfigChannel+0x258>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d111      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cfa:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <HAL_ADC_ConfigChannel+0x25c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a11      	ldr	r2, [pc, #68]	; (8002d44 <HAL_ADC_ConfigChannel+0x260>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	0c9a      	lsrs	r2, r3, #18
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d10:	e002      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f9      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	40012300 	.word	0x40012300
 8002d38:	40012000 	.word	0x40012000
 8002d3c:	10000012 	.word	0x10000012
 8002d40:	20000000 	.word	0x20000000
 8002d44:	431bde83 	.word	0x431bde83

08002d48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d50:	4b79      	ldr	r3, [pc, #484]	; (8002f38 <ADC_Init+0x1f0>)
 8002d52:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	021a      	lsls	r2, r3, #8
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002da0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6899      	ldr	r1, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dda:	4a58      	ldr	r2, [pc, #352]	; (8002f3c <ADC_Init+0x1f4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d022      	beq.n	8002e26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6899      	ldr	r1, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6899      	ldr	r1, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	e00f      	b.n	8002e46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0202 	bic.w	r2, r2, #2
 8002e54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6899      	ldr	r1, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7e1b      	ldrb	r3, [r3, #24]
 8002e60:	005a      	lsls	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01b      	beq.n	8002eac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6859      	ldr	r1, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	035a      	lsls	r2, r3, #13
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	e007      	b.n	8002ebc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002eca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	051a      	lsls	r2, r3, #20
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ef0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6899      	ldr	r1, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002efe:	025a      	lsls	r2, r3, #9
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6899      	ldr	r1, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	029a      	lsls	r2, r3, #10
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	609a      	str	r2, [r3, #8]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	40012300 	.word	0x40012300
 8002f3c:	0f000001 	.word	0x0f000001

08002f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <__NVIC_SetPriorityGrouping+0x44>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f72:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <__NVIC_SetPriorityGrouping+0x44>)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	60d3      	str	r3, [r2, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	f003 0307 	and.w	r3, r3, #7
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	db0b      	blt.n	8002fce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	f003 021f 	and.w	r2, r3, #31
 8002fbc:	4907      	ldr	r1, [pc, #28]	; (8002fdc <__NVIC_EnableIRQ+0x38>)
 8002fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	e000e100 	.word	0xe000e100

08002fe0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	db12      	blt.n	8003018 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	f003 021f 	and.w	r2, r3, #31
 8002ff8:	490a      	ldr	r1, [pc, #40]	; (8003024 <__NVIC_DisableIRQ+0x44>)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	2001      	movs	r0, #1
 8003002:	fa00 f202 	lsl.w	r2, r0, r2
 8003006:	3320      	adds	r3, #32
 8003008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800300c:	f3bf 8f4f 	dsb	sy
}
 8003010:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003012:	f3bf 8f6f 	isb	sy
}
 8003016:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000e100 	.word	0xe000e100

08003028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	6039      	str	r1, [r7, #0]
 8003032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003038:	2b00      	cmp	r3, #0
 800303a:	db0a      	blt.n	8003052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	b2da      	uxtb	r2, r3
 8003040:	490c      	ldr	r1, [pc, #48]	; (8003074 <__NVIC_SetPriority+0x4c>)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	0112      	lsls	r2, r2, #4
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	440b      	add	r3, r1
 800304c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003050:	e00a      	b.n	8003068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	4908      	ldr	r1, [pc, #32]	; (8003078 <__NVIC_SetPriority+0x50>)
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	3b04      	subs	r3, #4
 8003060:	0112      	lsls	r2, r2, #4
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	440b      	add	r3, r1
 8003066:	761a      	strb	r2, [r3, #24]
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000e100 	.word	0xe000e100
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	; 0x24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f1c3 0307 	rsb	r3, r3, #7
 8003096:	2b04      	cmp	r3, #4
 8003098:	bf28      	it	cs
 800309a:	2304      	movcs	r3, #4
 800309c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3304      	adds	r3, #4
 80030a2:	2b06      	cmp	r3, #6
 80030a4:	d902      	bls.n	80030ac <NVIC_EncodePriority+0x30>
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3b03      	subs	r3, #3
 80030aa:	e000      	b.n	80030ae <NVIC_EncodePriority+0x32>
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b0:	f04f 32ff 	mov.w	r2, #4294967295
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	401a      	ands	r2, r3
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c4:	f04f 31ff 	mov.w	r1, #4294967295
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	43d9      	mvns	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d4:	4313      	orrs	r3, r2
         );
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3724      	adds	r7, #36	; 0x24
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff ff28 	bl	8002f40 <__NVIC_SetPriorityGrouping>
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800310a:	f7ff ff3d 	bl	8002f88 <__NVIC_GetPriorityGrouping>
 800310e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	6978      	ldr	r0, [r7, #20]
 8003116:	f7ff ffb1 	bl	800307c <NVIC_EncodePriority>
 800311a:	4602      	mov	r2, r0
 800311c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ff80 	bl	8003028 <__NVIC_SetPriority>
}
 8003128:	bf00      	nop
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff ff30 	bl	8002fa4 <__NVIC_EnableIRQ>
}
 8003144:	bf00      	nop
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff ff40 	bl	8002fe0 <__NVIC_DisableIRQ>
}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	; 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800317a:	2300      	movs	r3, #0
 800317c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	e159      	b.n	8003438 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003184:	2201      	movs	r2, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4013      	ands	r3, r2
 8003196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	429a      	cmp	r2, r3
 800319e:	f040 8148 	bne.w	8003432 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d005      	beq.n	80031ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d130      	bne.n	800321c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	2203      	movs	r2, #3
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031f0:	2201      	movs	r2, #1
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 0201 	and.w	r2, r3, #1
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	2b03      	cmp	r3, #3
 8003226:	d017      	beq.n	8003258 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2203      	movs	r2, #3
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d123      	bne.n	80032ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	08da      	lsrs	r2, r3, #3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3208      	adds	r2, #8
 800326c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	220f      	movs	r2, #15
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	08da      	lsrs	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3208      	adds	r2, #8
 80032a6:	69b9      	ldr	r1, [r7, #24]
 80032a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2203      	movs	r2, #3
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0203 	and.w	r2, r3, #3
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80a2 	beq.w	8003432 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	4b57      	ldr	r3, [pc, #348]	; (8003450 <HAL_GPIO_Init+0x2e8>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	4a56      	ldr	r2, [pc, #344]	; (8003450 <HAL_GPIO_Init+0x2e8>)
 80032f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032fc:	6453      	str	r3, [r2, #68]	; 0x44
 80032fe:	4b54      	ldr	r3, [pc, #336]	; (8003450 <HAL_GPIO_Init+0x2e8>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800330a:	4a52      	ldr	r2, [pc, #328]	; (8003454 <HAL_GPIO_Init+0x2ec>)
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	3302      	adds	r3, #2
 8003312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	220f      	movs	r2, #15
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a49      	ldr	r2, [pc, #292]	; (8003458 <HAL_GPIO_Init+0x2f0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d019      	beq.n	800336a <HAL_GPIO_Init+0x202>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a48      	ldr	r2, [pc, #288]	; (800345c <HAL_GPIO_Init+0x2f4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d013      	beq.n	8003366 <HAL_GPIO_Init+0x1fe>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a47      	ldr	r2, [pc, #284]	; (8003460 <HAL_GPIO_Init+0x2f8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00d      	beq.n	8003362 <HAL_GPIO_Init+0x1fa>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a46      	ldr	r2, [pc, #280]	; (8003464 <HAL_GPIO_Init+0x2fc>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d007      	beq.n	800335e <HAL_GPIO_Init+0x1f6>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a45      	ldr	r2, [pc, #276]	; (8003468 <HAL_GPIO_Init+0x300>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d101      	bne.n	800335a <HAL_GPIO_Init+0x1f2>
 8003356:	2304      	movs	r3, #4
 8003358:	e008      	b.n	800336c <HAL_GPIO_Init+0x204>
 800335a:	2307      	movs	r3, #7
 800335c:	e006      	b.n	800336c <HAL_GPIO_Init+0x204>
 800335e:	2303      	movs	r3, #3
 8003360:	e004      	b.n	800336c <HAL_GPIO_Init+0x204>
 8003362:	2302      	movs	r3, #2
 8003364:	e002      	b.n	800336c <HAL_GPIO_Init+0x204>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <HAL_GPIO_Init+0x204>
 800336a:	2300      	movs	r3, #0
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	f002 0203 	and.w	r2, r2, #3
 8003372:	0092      	lsls	r2, r2, #2
 8003374:	4093      	lsls	r3, r2
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800337c:	4935      	ldr	r1, [pc, #212]	; (8003454 <HAL_GPIO_Init+0x2ec>)
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	089b      	lsrs	r3, r3, #2
 8003382:	3302      	adds	r3, #2
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800338a:	4b38      	ldr	r3, [pc, #224]	; (800346c <HAL_GPIO_Init+0x304>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	43db      	mvns	r3, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4013      	ands	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033ae:	4a2f      	ldr	r2, [pc, #188]	; (800346c <HAL_GPIO_Init+0x304>)
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033b4:	4b2d      	ldr	r3, [pc, #180]	; (800346c <HAL_GPIO_Init+0x304>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033d8:	4a24      	ldr	r2, [pc, #144]	; (800346c <HAL_GPIO_Init+0x304>)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033de:	4b23      	ldr	r3, [pc, #140]	; (800346c <HAL_GPIO_Init+0x304>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003402:	4a1a      	ldr	r2, [pc, #104]	; (800346c <HAL_GPIO_Init+0x304>)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003408:	4b18      	ldr	r3, [pc, #96]	; (800346c <HAL_GPIO_Init+0x304>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800342c:	4a0f      	ldr	r2, [pc, #60]	; (800346c <HAL_GPIO_Init+0x304>)
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3301      	adds	r3, #1
 8003436:	61fb      	str	r3, [r7, #28]
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	2b0f      	cmp	r3, #15
 800343c:	f67f aea2 	bls.w	8003184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003440:	bf00      	nop
 8003442:	bf00      	nop
 8003444:	3724      	adds	r7, #36	; 0x24
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800
 8003454:	40013800 	.word	0x40013800
 8003458:	40020000 	.word	0x40020000
 800345c:	40020400 	.word	0x40020400
 8003460:	40020800 	.word	0x40020800
 8003464:	40020c00 	.word	0x40020c00
 8003468:	40021000 	.word	0x40021000
 800346c:	40013c00 	.word	0x40013c00

08003470 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	887b      	ldrh	r3, [r7, #2]
 8003482:	4013      	ands	r3, r2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003488:	2301      	movs	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
 800348c:	e001      	b.n	8003492 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800348e:	2300      	movs	r3, #0
 8003490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003492:	7bfb      	ldrb	r3, [r7, #15]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	807b      	strh	r3, [r7, #2]
 80034ac:	4613      	mov	r3, r2
 80034ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034b0:	787b      	ldrb	r3, [r7, #1]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034b6:	887a      	ldrh	r2, [r7, #2]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034bc:	e003      	b.n	80034c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034be:	887b      	ldrh	r3, [r7, #2]
 80034c0:	041a      	lsls	r2, r3, #16
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	619a      	str	r2, [r3, #24]
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d006      	beq.n	80034f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034ea:	4a05      	ldr	r2, [pc, #20]	; (8003500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd fc5e 	bl	8000db4 <HAL_GPIO_EXTI_Callback>
  }
}
 80034f8:	bf00      	nop
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40013c00 	.word	0x40013c00

08003504 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003506:	b08f      	sub	sp, #60	; 0x3c
 8003508:	af0a      	add	r7, sp, #40	; 0x28
 800350a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e10f      	b.n	8003736 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d106      	bne.n	8003536 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f00a f8d7 	bl	800d6e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2203      	movs	r2, #3
 800353a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f003 fc8a 	bl	8006e6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	687e      	ldr	r6, [r7, #4]
 8003562:	466d      	mov	r5, sp
 8003564:	f106 0410 	add.w	r4, r6, #16
 8003568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800356a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800356c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800356e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003570:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003574:	e885 0003 	stmia.w	r5, {r0, r1}
 8003578:	1d33      	adds	r3, r6, #4
 800357a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800357c:	6838      	ldr	r0, [r7, #0]
 800357e:	f003 fb61 	bl	8006c44 <USB_CoreInit>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0d0      	b.n	8003736 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f003 fc78 	bl	8006e90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a0:	2300      	movs	r3, #0
 80035a2:	73fb      	strb	r3, [r7, #15]
 80035a4:	e04a      	b.n	800363c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	333d      	adds	r3, #61	; 0x3d
 80035b6:	2201      	movs	r2, #1
 80035b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	333c      	adds	r3, #60	; 0x3c
 80035ca:	7bfa      	ldrb	r2, [r7, #15]
 80035cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035ce:	7bfa      	ldrb	r2, [r7, #15]
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	b298      	uxth	r0, r3
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	3342      	adds	r3, #66	; 0x42
 80035e2:	4602      	mov	r2, r0
 80035e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035e6:	7bfa      	ldrb	r2, [r7, #15]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	333f      	adds	r3, #63	; 0x3f
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	3344      	adds	r3, #68	; 0x44
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800360e:	7bfa      	ldrb	r2, [r7, #15]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	1a9b      	subs	r3, r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	3348      	adds	r3, #72	; 0x48
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	3350      	adds	r3, #80	; 0x50
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	3301      	adds	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
 800363c:	7bfa      	ldrb	r2, [r7, #15]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	429a      	cmp	r2, r3
 8003644:	d3af      	bcc.n	80035a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]
 800364a:	e044      	b.n	80036d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800364c:	7bfa      	ldrb	r2, [r7, #15]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003662:	7bfa      	ldrb	r2, [r7, #15]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003674:	7bfa      	ldrb	r2, [r7, #15]
 8003676:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003678:	7bfa      	ldrb	r2, [r7, #15]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800368e:	7bfa      	ldrb	r2, [r7, #15]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036a4:	7bfa      	ldrb	r2, [r7, #15]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036ba:	7bfa      	ldrb	r2, [r7, #15]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	3301      	adds	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
 80036d6:	7bfa      	ldrb	r2, [r7, #15]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d3b5      	bcc.n	800364c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	603b      	str	r3, [r7, #0]
 80036e6:	687e      	ldr	r6, [r7, #4]
 80036e8:	466d      	mov	r5, sp
 80036ea:	f106 0410 	add.w	r4, r6, #16
 80036ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80036fe:	1d33      	adds	r3, r6, #4
 8003700:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003702:	6838      	ldr	r0, [r7, #0]
 8003704:	f003 fc10 	bl	8006f28 <USB_DevInit>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2202      	movs	r2, #2
 8003712:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e00d      	b.n	8003736 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f004 fc8c 	bl	800804c <USB_DevDisconnect>

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800373e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_PCD_Start+0x1c>
 8003756:	2302      	movs	r3, #2
 8003758:	e020      	b.n	800379c <HAL_PCD_Start+0x5e>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	2b01      	cmp	r3, #1
 8003768:	d109      	bne.n	800377e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800376e:	2b01      	cmp	r3, #1
 8003770:	d005      	beq.n	800377e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f003 fb62 	bl	8006e4c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f004 fc3c 	bl	800800a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037a4:	b590      	push	{r4, r7, lr}
 80037a6:	b08d      	sub	sp, #52	; 0x34
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f004 fcfa 	bl	80081b4 <USB_GetMode>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f040 839d 	bne.w	8003f02 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f004 fc5e 	bl	800808e <USB_ReadInterrupts>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 8393 	beq.w	8003f00 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f004 fc55 	bl	800808e <USB_ReadInterrupts>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d107      	bne.n	80037fe <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695a      	ldr	r2, [r3, #20]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f002 0202 	and.w	r2, r2, #2
 80037fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f004 fc43 	bl	800808e <USB_ReadInterrupts>
 8003808:	4603      	mov	r3, r0
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b10      	cmp	r3, #16
 8003810:	d161      	bne.n	80038d6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699a      	ldr	r2, [r3, #24]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0210 	bic.w	r2, r2, #16
 8003820:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	f003 020f 	and.w	r2, r3, #15
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	4413      	add	r3, r2
 800383e:	3304      	adds	r3, #4
 8003840:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	0c5b      	lsrs	r3, r3, #17
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	2b02      	cmp	r3, #2
 800384c:	d124      	bne.n	8003898 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d035      	beq.n	80038c6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003864:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003868:	b29b      	uxth	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	6a38      	ldr	r0, [r7, #32]
 800386e:	f004 fa7a 	bl	8007d66 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800387e:	441a      	add	r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	699a      	ldr	r2, [r3, #24]
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	091b      	lsrs	r3, r3, #4
 800388c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003890:	441a      	add	r2, r3
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	619a      	str	r2, [r3, #24]
 8003896:	e016      	b.n	80038c6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	0c5b      	lsrs	r3, r3, #17
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	2b06      	cmp	r3, #6
 80038a2:	d110      	bne.n	80038c6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038aa:	2208      	movs	r2, #8
 80038ac:	4619      	mov	r1, r3
 80038ae:	6a38      	ldr	r0, [r7, #32]
 80038b0:	f004 fa59 	bl	8007d66 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	699a      	ldr	r2, [r3, #24]
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	091b      	lsrs	r3, r3, #4
 80038bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038c0:	441a      	add	r2, r3
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699a      	ldr	r2, [r3, #24]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0210 	orr.w	r2, r2, #16
 80038d4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f004 fbd7 	bl	800808e <USB_ReadInterrupts>
 80038e0:	4603      	mov	r3, r0
 80038e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038ea:	d16e      	bne.n	80039ca <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f004 fbdd 	bl	80080b4 <USB_ReadDevAllOutEpInterrupt>
 80038fa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80038fc:	e062      	b.n	80039c4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d057      	beq.n	80039b8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	4611      	mov	r1, r2
 8003912:	4618      	mov	r0, r3
 8003914:	f004 fc02 	bl	800811c <USB_ReadDevOutEPInterrupt>
 8003918:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00c      	beq.n	800393e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	4413      	add	r3, r2
 800392c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003930:	461a      	mov	r2, r3
 8003932:	2301      	movs	r3, #1
 8003934:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fdb1 	bl	80044a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00c      	beq.n	8003962 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003954:	461a      	mov	r2, r3
 8003956:	2308      	movs	r3, #8
 8003958:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800395a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 feab 	bl	80046b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003978:	461a      	mov	r2, r3
 800397a:	2310      	movs	r3, #16
 800397c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003994:	461a      	mov	r2, r3
 8003996:	2320      	movs	r3, #32
 8003998:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d009      	beq.n	80039b8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b0:	461a      	mov	r2, r3
 80039b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039b6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	3301      	adds	r3, #1
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d199      	bne.n	80038fe <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f004 fb5d 	bl	800808e <USB_ReadInterrupts>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039de:	f040 80c0 	bne.w	8003b62 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f004 fb7e 	bl	80080e8 <USB_ReadDevAllInEpInterrupt>
 80039ec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80039f2:	e0b2      	b.n	8003b5a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80a7 	beq.w	8003b4e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	4611      	mov	r1, r2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f004 fba4 	bl	8008158 <USB_ReadDevInEPInterrupt>
 8003a10:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d057      	beq.n	8003acc <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	2201      	movs	r2, #1
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	69f9      	ldr	r1, [r7, #28]
 8003a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2301      	movs	r3, #1
 8003a50:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d132      	bne.n	8003ac0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5e:	4613      	mov	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	3348      	adds	r3, #72	; 0x48
 8003a6a:	6819      	ldr	r1, [r3, #0]
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4403      	add	r3, r0
 8003a7a:	3344      	adds	r3, #68	; 0x44
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4419      	add	r1, r3
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4403      	add	r3, r0
 8003a8e:	3348      	adds	r3, #72	; 0x48
 8003a90:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d113      	bne.n	8003ac0 <HAL_PCD_IRQHandler+0x31c>
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	3350      	adds	r3, #80	; 0x50
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d108      	bne.n	8003ac0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2101      	movs	r1, #1
 8003abc:	f004 fbac 	bl	8008218 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f009 fe8d 	bl	800d7e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d008      	beq.n	8003ae8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afe:	461a      	mov	r2, r3
 8003b00:	2310      	movs	r3, #16
 8003b02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	2340      	movs	r3, #64	; 0x40
 8003b1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d008      	beq.n	8003b3c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b36:	461a      	mov	r2, r3
 8003b38:	2302      	movs	r3, #2
 8003b3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 fc1b 	bl	8004384 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	3301      	adds	r3, #1
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	085b      	lsrs	r3, r3, #1
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f47f af49 	bne.w	80039f4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f004 fa91 	bl	800808e <USB_ReadInterrupts>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b76:	d122      	bne.n	8003bbe <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d108      	bne.n	8003ba8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fe27 	bl	80047f4 <HAL_PCDEx_LPM_Callback>
 8003ba6:	e002      	b.n	8003bae <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f009 fe89 	bl	800d8c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695a      	ldr	r2, [r3, #20]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f004 fa63 	bl	800808e <USB_ReadInterrupts>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd2:	d112      	bne.n	8003bfa <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d102      	bne.n	8003bea <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f009 fe45 	bl	800d874 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003bf8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f004 fa45 	bl	800808e <USB_ReadInterrupts>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0e:	f040 80c7 	bne.w	8003da0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c20:	f023 0301 	bic.w	r3, r3, #1
 8003c24:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2110      	movs	r1, #16
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f003 fadf 	bl	80071f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c32:	2300      	movs	r3, #0
 8003c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c36:	e056      	b.n	8003ce6 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c44:	461a      	mov	r2, r3
 8003c46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c4a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c5c:	0151      	lsls	r1, r2, #5
 8003c5e:	69fa      	ldr	r2, [r7, #28]
 8003c60:	440a      	add	r2, r1
 8003c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c6a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c7c:	0151      	lsls	r1, r2, #5
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	440a      	add	r2, r1
 8003c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c9e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cb0:	0151      	lsls	r1, r2, #5
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	440a      	add	r2, r1
 8003cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cbe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cd0:	0151      	lsls	r1, r2, #5
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	440a      	add	r2, r1
 8003cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cde:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d3a3      	bcc.n	8003c38 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cfe:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d02:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d016      	beq.n	8003d3a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d1c:	f043 030b 	orr.w	r3, r3, #11
 8003d20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d32:	f043 030b 	orr.w	r3, r3, #11
 8003d36:	6453      	str	r3, [r2, #68]	; 0x44
 8003d38:	e015      	b.n	8003d66 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	69fa      	ldr	r2, [r7, #28]
 8003d44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d4c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d50:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d60:	f043 030b 	orr.w	r3, r3, #11
 8003d64:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d74:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d78:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f004 fa44 	bl	8008218 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f004 f972 	bl	800808e <USB_ReadInterrupts>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db4:	d124      	bne.n	8003e00 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f004 fa08 	bl	80081d0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f003 fa70 	bl	80072aa <USB_GetDevSpeed>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	461a      	mov	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681c      	ldr	r4, [r3, #0]
 8003dd6:	f001 f985 	bl	80050e4 <HAL_RCC_GetHCLKFreq>
 8003dda:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	4620      	mov	r0, r4
 8003de6:	f002 ff8f 	bl	8006d08 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f009 fd23 	bl	800d836 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f004 f942 	bl	800808e <USB_ReadInterrupts>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d10a      	bne.n	8003e2a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f009 fd00 	bl	800d81a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f002 0208 	and.w	r2, r2, #8
 8003e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f004 f92d 	bl	800808e <USB_ReadInterrupts>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e3e:	d10f      	bne.n	8003e60 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	4619      	mov	r1, r3
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f009 fd58 	bl	800d900 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695a      	ldr	r2, [r3, #20]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f004 f912 	bl	800808e <USB_ReadInterrupts>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e74:	d10f      	bne.n	8003e96 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	4619      	mov	r1, r3
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f009 fd2b 	bl	800d8dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f004 f8f7 	bl	800808e <USB_ReadInterrupts>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eaa:	d10a      	bne.n	8003ec2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f009 fd39 	bl	800d924 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ec0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f004 f8e1 	bl	800808e <USB_ReadInterrupts>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d115      	bne.n	8003f02 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f009 fd29 	bl	800d940 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	e000      	b.n	8003f02 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003f00:	bf00      	nop
    }
  }
}
 8003f02:	3734      	adds	r7, #52	; 0x34
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd90      	pop	{r4, r7, pc}

08003f08 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_PCD_SetAddress+0x1a>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e013      	b.n	8003f4a <HAL_PCD_SetAddress+0x42>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	78fa      	ldrb	r2, [r7, #3]
 8003f2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	4611      	mov	r1, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f004 f83f 	bl	8007fbe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	4608      	mov	r0, r1
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4603      	mov	r3, r0
 8003f62:	70fb      	strb	r3, [r7, #3]
 8003f64:	460b      	mov	r3, r1
 8003f66:	803b      	strh	r3, [r7, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	da0f      	bge.n	8003f98 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	f003 020f 	and.w	r2, r3, #15
 8003f7e:	4613      	mov	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	3338      	adds	r3, #56	; 0x38
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2201      	movs	r2, #1
 8003f94:	705a      	strb	r2, [r3, #1]
 8003f96:	e00f      	b.n	8003fb8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	f003 020f 	and.w	r2, r3, #15
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	4413      	add	r3, r2
 8003fae:	3304      	adds	r3, #4
 8003fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003fc4:	883a      	ldrh	r2, [r7, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	78ba      	ldrb	r2, [r7, #2]
 8003fce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	785b      	ldrb	r3, [r3, #1]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d004      	beq.n	8003fe2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003fe2:	78bb      	ldrb	r3, [r7, #2]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d102      	bne.n	8003fee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_PCD_EP_Open+0xaa>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e00e      	b.n	800401a <HAL_PCD_EP_Open+0xc8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68f9      	ldr	r1, [r7, #12]
 800400a:	4618      	mov	r0, r3
 800400c:	f003 f972 	bl	80072f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004018:	7afb      	ldrb	r3, [r7, #11]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b084      	sub	sp, #16
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	460b      	mov	r3, r1
 800402c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800402e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004032:	2b00      	cmp	r3, #0
 8004034:	da0f      	bge.n	8004056 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004036:	78fb      	ldrb	r3, [r7, #3]
 8004038:	f003 020f 	and.w	r2, r3, #15
 800403c:	4613      	mov	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	3338      	adds	r3, #56	; 0x38
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	4413      	add	r3, r2
 800404a:	3304      	adds	r3, #4
 800404c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2201      	movs	r2, #1
 8004052:	705a      	strb	r2, [r3, #1]
 8004054:	e00f      	b.n	8004076 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004056:	78fb      	ldrb	r3, [r7, #3]
 8004058:	f003 020f 	and.w	r2, r3, #15
 800405c:	4613      	mov	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	4413      	add	r3, r2
 800406c:	3304      	adds	r3, #4
 800406e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	b2da      	uxtb	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_PCD_EP_Close+0x6e>
 800408c:	2302      	movs	r3, #2
 800408e:	e00e      	b.n	80040ae <HAL_PCD_EP_Close+0x8c>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68f9      	ldr	r1, [r7, #12]
 800409e:	4618      	mov	r0, r3
 80040a0:	f003 f9b0 	bl	8007404 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b086      	sub	sp, #24
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	603b      	str	r3, [r7, #0]
 80040c2:	460b      	mov	r3, r1
 80040c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040c6:	7afb      	ldrb	r3, [r7, #11]
 80040c8:	f003 020f 	and.w	r2, r3, #15
 80040cc:	4613      	mov	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	3304      	adds	r3, #4
 80040de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2200      	movs	r2, #0
 80040f0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2200      	movs	r2, #0
 80040f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040f8:	7afb      	ldrb	r3, [r7, #11]
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d102      	bne.n	8004112 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004112:	7afb      	ldrb	r3, [r7, #11]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	2b00      	cmp	r3, #0
 800411a:	d109      	bne.n	8004130 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	6979      	ldr	r1, [r7, #20]
 800412a:	f003 fc8b 	bl	8007a44 <USB_EP0StartXfer>
 800412e:	e008      	b.n	8004142 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	461a      	mov	r2, r3
 800413c:	6979      	ldr	r1, [r7, #20]
 800413e:	f003 fa3d 	bl	80075bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	f003 020f 	and.w	r2, r3, #15
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800416e:	681b      	ldr	r3, [r3, #0]
}
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	460b      	mov	r3, r1
 800418a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800418c:	7afb      	ldrb	r3, [r7, #11]
 800418e:	f003 020f 	and.w	r2, r3, #15
 8004192:	4613      	mov	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	3338      	adds	r3, #56	; 0x38
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	4413      	add	r3, r2
 80041a0:	3304      	adds	r3, #4
 80041a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2200      	movs	r2, #0
 80041b4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2201      	movs	r2, #1
 80041ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041bc:	7afb      	ldrb	r3, [r7, #11]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d102      	bne.n	80041d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041d6:	7afb      	ldrb	r3, [r7, #11]
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d109      	bne.n	80041f4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	6979      	ldr	r1, [r7, #20]
 80041ee:	f003 fc29 	bl	8007a44 <USB_EP0StartXfer>
 80041f2:	e008      	b.n	8004206 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6818      	ldr	r0, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	461a      	mov	r2, r3
 8004200:	6979      	ldr	r1, [r7, #20]
 8004202:	f003 f9db 	bl	80075bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	f003 020f 	and.w	r2, r3, #15
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	429a      	cmp	r2, r3
 8004228:	d901      	bls.n	800422e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e050      	b.n	80042d0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800422e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004232:	2b00      	cmp	r3, #0
 8004234:	da0f      	bge.n	8004256 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	f003 020f 	and.w	r2, r3, #15
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	1a9b      	subs	r3, r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	3338      	adds	r3, #56	; 0x38
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	4413      	add	r3, r2
 800424a:	3304      	adds	r3, #4
 800424c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	705a      	strb	r2, [r3, #1]
 8004254:	e00d      	b.n	8004272 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004256:	78fa      	ldrb	r2, [r7, #3]
 8004258:	4613      	mov	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	4413      	add	r3, r2
 8004268:	3304      	adds	r3, #4
 800426a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	b2da      	uxtb	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_PCD_EP_SetStall+0x82>
 800428e:	2302      	movs	r3, #2
 8004290:	e01e      	b.n	80042d0 <HAL_PCD_EP_SetStall+0xc0>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68f9      	ldr	r1, [r7, #12]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f003 fdb8 	bl	8007e16 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042a6:	78fb      	ldrb	r3, [r7, #3]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	b2d9      	uxtb	r1, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042c0:	461a      	mov	r2, r3
 80042c2:	f003 ffa9 	bl	8008218 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	f003 020f 	and.w	r2, r3, #15
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d901      	bls.n	80042f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e042      	b.n	800437c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	da0f      	bge.n	800431e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	f003 020f 	and.w	r2, r3, #15
 8004304:	4613      	mov	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	3338      	adds	r3, #56	; 0x38
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	4413      	add	r3, r2
 8004312:	3304      	adds	r3, #4
 8004314:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	705a      	strb	r2, [r3, #1]
 800431c:	e00f      	b.n	800433e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800431e:	78fb      	ldrb	r3, [r7, #3]
 8004320:	f003 020f 	and.w	r2, r3, #15
 8004324:	4613      	mov	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	4413      	add	r3, r2
 8004334:	3304      	adds	r3, #4
 8004336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	b2da      	uxtb	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_PCD_EP_ClrStall+0x86>
 800435a:	2302      	movs	r3, #2
 800435c:	e00e      	b.n	800437c <HAL_PCD_EP_ClrStall+0xa4>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68f9      	ldr	r1, [r7, #12]
 800436c:	4618      	mov	r0, r3
 800436e:	f003 fdc0 	bl	8007ef2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b08a      	sub	sp, #40	; 0x28
 8004388:	af02      	add	r7, sp, #8
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	4613      	mov	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	3338      	adds	r3, #56	; 0x38
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	4413      	add	r3, r2
 80043a8:	3304      	adds	r3, #4
 80043aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	699a      	ldr	r2, [r3, #24]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d901      	bls.n	80043bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e06c      	b.n	8004496 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	695a      	ldr	r2, [r3, #20]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d902      	bls.n	80043d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	3303      	adds	r3, #3
 80043dc:	089b      	lsrs	r3, r3, #2
 80043de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043e0:	e02b      	b.n	800443a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	695a      	ldr	r2, [r3, #20]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d902      	bls.n	80043fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	3303      	adds	r3, #3
 8004402:	089b      	lsrs	r3, r3, #2
 8004404:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	68d9      	ldr	r1, [r3, #12]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	b2da      	uxtb	r2, r3
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004416:	b2db      	uxtb	r3, r3
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	4603      	mov	r3, r0
 800441c:	6978      	ldr	r0, [r7, #20]
 800441e:	f003 fc64 	bl	8007cea <USB_WritePacket>

    ep->xfer_buff  += len;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	441a      	add	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	441a      	add	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	b29b      	uxth	r3, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	429a      	cmp	r2, r3
 800444e:	d809      	bhi.n	8004464 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	699a      	ldr	r2, [r3, #24]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004458:	429a      	cmp	r2, r3
 800445a:	d203      	bcs.n	8004464 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1be      	bne.n	80043e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	695a      	ldr	r2, [r3, #20]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	429a      	cmp	r2, r3
 800446e:	d811      	bhi.n	8004494 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	2201      	movs	r2, #1
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	43db      	mvns	r3, r3
 800448a:	6939      	ldr	r1, [r7, #16]
 800448c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004490:	4013      	ands	r3, r2
 8004492:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	333c      	adds	r3, #60	; 0x3c
 80044b8:	3304      	adds	r3, #4
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	f040 80a0 	bne.w	8004618 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d015      	beq.n	800450e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4a72      	ldr	r2, [pc, #456]	; (80046b0 <PCD_EP_OutXfrComplete_int+0x210>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	f240 80dd 	bls.w	80046a6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80d7 	beq.w	80046a6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004504:	461a      	mov	r2, r3
 8004506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800450a:	6093      	str	r3, [r2, #8]
 800450c:	e0cb      	b.n	80046a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b00      	cmp	r3, #0
 8004516:	d009      	beq.n	800452c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004524:	461a      	mov	r2, r3
 8004526:	2320      	movs	r3, #32
 8004528:	6093      	str	r3, [r2, #8]
 800452a:	e0bc      	b.n	80046a6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004532:	2b00      	cmp	r3, #0
 8004534:	f040 80b7 	bne.w	80046a6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4a5d      	ldr	r2, [pc, #372]	; (80046b0 <PCD_EP_OutXfrComplete_int+0x210>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d90f      	bls.n	8004560 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004556:	461a      	mov	r2, r3
 8004558:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800455c:	6093      	str	r3, [r2, #8]
 800455e:	e0a2      	b.n	80046a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	4613      	mov	r3, r2
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004572:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	0159      	lsls	r1, r3, #5
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	440b      	add	r3, r1
 800457c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004586:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4403      	add	r3, r0
 8004596:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800459a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045ae:	6819      	ldr	r1, [r3, #0]
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4403      	add	r3, r0
 80045be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4419      	add	r1, r3
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	4613      	mov	r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4403      	add	r3, r0
 80045d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045d8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d114      	bne.n	800460a <PCD_EP_OutXfrComplete_int+0x16a>
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d108      	bne.n	800460a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6818      	ldr	r0, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004602:	461a      	mov	r2, r3
 8004604:	2101      	movs	r1, #1
 8004606:	f003 fe07 	bl	8008218 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	4619      	mov	r1, r3
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f009 f8cd 	bl	800d7b0 <HAL_PCD_DataOutStageCallback>
 8004616:	e046      	b.n	80046a6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4a26      	ldr	r2, [pc, #152]	; (80046b4 <PCD_EP_OutXfrComplete_int+0x214>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d124      	bne.n	800466a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004636:	461a      	mov	r2, r3
 8004638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800463c:	6093      	str	r3, [r2, #8]
 800463e:	e032      	b.n	80046a6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004656:	461a      	mov	r2, r3
 8004658:	2320      	movs	r3, #32
 800465a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	4619      	mov	r1, r3
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f009 f8a4 	bl	800d7b0 <HAL_PCD_DataOutStageCallback>
 8004668:	e01d      	b.n	80046a6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d114      	bne.n	800469a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	4613      	mov	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d108      	bne.n	800469a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004692:	461a      	mov	r2, r3
 8004694:	2100      	movs	r1, #0
 8004696:	f003 fdbf 	bl	8008218 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	4619      	mov	r1, r3
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f009 f885 	bl	800d7b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	4f54300a 	.word	0x4f54300a
 80046b4:	4f54310a 	.word	0x4f54310a

080046b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	333c      	adds	r3, #60	; 0x3c
 80046d0:	3304      	adds	r3, #4
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a15      	ldr	r2, [pc, #84]	; (8004740 <PCD_EP_OutSetupPacket_int+0x88>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d90e      	bls.n	800470c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d009      	beq.n	800470c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004704:	461a      	mov	r2, r3
 8004706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800470a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f009 f83d 	bl	800d78c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4a0a      	ldr	r2, [pc, #40]	; (8004740 <PCD_EP_OutSetupPacket_int+0x88>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d90c      	bls.n	8004734 <PCD_EP_OutSetupPacket_int+0x7c>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d108      	bne.n	8004734 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800472c:	461a      	mov	r2, r3
 800472e:	2101      	movs	r1, #1
 8004730:	f003 fd72 	bl	8008218 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	4f54300a 	.word	0x4f54300a

08004744 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	70fb      	strb	r3, [r7, #3]
 8004750:	4613      	mov	r3, r2
 8004752:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800475c:	78fb      	ldrb	r3, [r7, #3]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d107      	bne.n	8004772 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004762:	883b      	ldrh	r3, [r7, #0]
 8004764:	0419      	lsls	r1, r3, #16
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	430a      	orrs	r2, r1
 800476e:	629a      	str	r2, [r3, #40]	; 0x28
 8004770:	e028      	b.n	80047c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	0c1b      	lsrs	r3, r3, #16
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	4413      	add	r3, r2
 800477e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004780:	2300      	movs	r3, #0
 8004782:	73fb      	strb	r3, [r7, #15]
 8004784:	e00d      	b.n	80047a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	3340      	adds	r3, #64	; 0x40
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	0c1b      	lsrs	r3, r3, #16
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	4413      	add	r3, r2
 800479a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	3301      	adds	r3, #1
 80047a0:	73fb      	strb	r3, [r7, #15]
 80047a2:	7bfa      	ldrb	r2, [r7, #15]
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d3ec      	bcc.n	8004786 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80047ac:	883b      	ldrh	r3, [r7, #0]
 80047ae:	0418      	lsls	r0, r3, #16
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6819      	ldr	r1, [r3, #0]
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	4302      	orrs	r2, r0
 80047bc:	3340      	adds	r3, #64	; 0x40
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	460b      	mov	r3, r1
 80047dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	887a      	ldrh	r2, [r7, #2]
 80047e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8004818:	4b10      	ldr	r3, [pc, #64]	; (800485c <HAL_PWR_EnterSTOPMode+0x50>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f023 0203 	bic.w	r2, r3, #3
 8004820:	490e      	ldr	r1, [pc, #56]	; (800485c <HAL_PWR_EnterSTOPMode+0x50>)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4313      	orrs	r3, r2
 8004826:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004828:	4b0d      	ldr	r3, [pc, #52]	; (8004860 <HAL_PWR_EnterSTOPMode+0x54>)
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	4a0c      	ldr	r2, [pc, #48]	; (8004860 <HAL_PWR_EnterSTOPMode+0x54>)
 800482e:	f043 0304 	orr.w	r3, r3, #4
 8004832:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004834:	78fb      	ldrb	r3, [r7, #3]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800483a:	bf30      	wfi
 800483c:	e002      	b.n	8004844 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800483e:	bf40      	sev
    __WFE();
 8004840:	bf20      	wfe
    __WFE();
 8004842:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8004844:	4b06      	ldr	r3, [pc, #24]	; (8004860 <HAL_PWR_EnterSTOPMode+0x54>)
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	4a05      	ldr	r2, [pc, #20]	; (8004860 <HAL_PWR_EnterSTOPMode+0x54>)
 800484a:	f023 0304 	bic.w	r3, r3, #4
 800484e:	6113      	str	r3, [r2, #16]
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	40007000 	.word	0x40007000
 8004860:	e000ed00 	.word	0xe000ed00

08004864 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e264      	b.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d075      	beq.n	800496e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004882:	4ba3      	ldr	r3, [pc, #652]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 030c 	and.w	r3, r3, #12
 800488a:	2b04      	cmp	r3, #4
 800488c:	d00c      	beq.n	80048a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800488e:	4ba0      	ldr	r3, [pc, #640]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004896:	2b08      	cmp	r3, #8
 8004898:	d112      	bne.n	80048c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800489a:	4b9d      	ldr	r3, [pc, #628]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048a6:	d10b      	bne.n	80048c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a8:	4b99      	ldr	r3, [pc, #612]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d05b      	beq.n	800496c <HAL_RCC_OscConfig+0x108>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d157      	bne.n	800496c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e23f      	b.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c8:	d106      	bne.n	80048d8 <HAL_RCC_OscConfig+0x74>
 80048ca:	4b91      	ldr	r3, [pc, #580]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a90      	ldr	r2, [pc, #576]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80048d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	e01d      	b.n	8004914 <HAL_RCC_OscConfig+0xb0>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048e0:	d10c      	bne.n	80048fc <HAL_RCC_OscConfig+0x98>
 80048e2:	4b8b      	ldr	r3, [pc, #556]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a8a      	ldr	r2, [pc, #552]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80048e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	4b88      	ldr	r3, [pc, #544]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a87      	ldr	r2, [pc, #540]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80048f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	e00b      	b.n	8004914 <HAL_RCC_OscConfig+0xb0>
 80048fc:	4b84      	ldr	r3, [pc, #528]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a83      	ldr	r2, [pc, #524]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	4b81      	ldr	r3, [pc, #516]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a80      	ldr	r2, [pc, #512]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 800490e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d013      	beq.n	8004944 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fd feee 	bl	80026fc <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004924:	f7fd feea 	bl	80026fc <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b64      	cmp	r3, #100	; 0x64
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e204      	b.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004936:	4b76      	ldr	r3, [pc, #472]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f0      	beq.n	8004924 <HAL_RCC_OscConfig+0xc0>
 8004942:	e014      	b.n	800496e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004944:	f7fd feda 	bl	80026fc <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800494c:	f7fd fed6 	bl	80026fc <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b64      	cmp	r3, #100	; 0x64
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e1f0      	b.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800495e:	4b6c      	ldr	r3, [pc, #432]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f0      	bne.n	800494c <HAL_RCC_OscConfig+0xe8>
 800496a:	e000      	b.n	800496e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800496c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d063      	beq.n	8004a42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800497a:	4b65      	ldr	r3, [pc, #404]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 030c 	and.w	r3, r3, #12
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004986:	4b62      	ldr	r3, [pc, #392]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800498e:	2b08      	cmp	r3, #8
 8004990:	d11c      	bne.n	80049cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004992:	4b5f      	ldr	r3, [pc, #380]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d116      	bne.n	80049cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800499e:	4b5c      	ldr	r3, [pc, #368]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <HAL_RCC_OscConfig+0x152>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d001      	beq.n	80049b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e1c4      	b.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b6:	4b56      	ldr	r3, [pc, #344]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	4952      	ldr	r1, [pc, #328]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ca:	e03a      	b.n	8004a42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d020      	beq.n	8004a16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049d4:	4b4f      	ldr	r3, [pc, #316]	; (8004b14 <HAL_RCC_OscConfig+0x2b0>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049da:	f7fd fe8f 	bl	80026fc <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049e2:	f7fd fe8b 	bl	80026fc <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e1a5      	b.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f4:	4b46      	ldr	r3, [pc, #280]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a00:	4b43      	ldr	r3, [pc, #268]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	4940      	ldr	r1, [pc, #256]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	600b      	str	r3, [r1, #0]
 8004a14:	e015      	b.n	8004a42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a16:	4b3f      	ldr	r3, [pc, #252]	; (8004b14 <HAL_RCC_OscConfig+0x2b0>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1c:	f7fd fe6e 	bl	80026fc <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a24:	f7fd fe6a 	bl	80026fc <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e184      	b.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a36:	4b36      	ldr	r3, [pc, #216]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f0      	bne.n	8004a24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d030      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d016      	beq.n	8004a84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a56:	4b30      	ldr	r3, [pc, #192]	; (8004b18 <HAL_RCC_OscConfig+0x2b4>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5c:	f7fd fe4e 	bl	80026fc <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a64:	f7fd fe4a 	bl	80026fc <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e164      	b.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a76:	4b26      	ldr	r3, [pc, #152]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f0      	beq.n	8004a64 <HAL_RCC_OscConfig+0x200>
 8004a82:	e015      	b.n	8004ab0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a84:	4b24      	ldr	r3, [pc, #144]	; (8004b18 <HAL_RCC_OscConfig+0x2b4>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a8a:	f7fd fe37 	bl	80026fc <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a92:	f7fd fe33 	bl	80026fc <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e14d      	b.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa4:	4b1a      	ldr	r3, [pc, #104]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f0      	bne.n	8004a92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 80a0 	beq.w	8004bfe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ac2:	4b13      	ldr	r3, [pc, #76]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10f      	bne.n	8004aee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	4a0e      	ldr	r2, [pc, #56]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004adc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ade:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <HAL_RCC_OscConfig+0x2ac>)
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	60bb      	str	r3, [r7, #8]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aea:	2301      	movs	r3, #1
 8004aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aee:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <HAL_RCC_OscConfig+0x2b8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d121      	bne.n	8004b3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004afa:	4b08      	ldr	r3, [pc, #32]	; (8004b1c <HAL_RCC_OscConfig+0x2b8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a07      	ldr	r2, [pc, #28]	; (8004b1c <HAL_RCC_OscConfig+0x2b8>)
 8004b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b06:	f7fd fdf9 	bl	80026fc <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b0c:	e011      	b.n	8004b32 <HAL_RCC_OscConfig+0x2ce>
 8004b0e:	bf00      	nop
 8004b10:	40023800 	.word	0x40023800
 8004b14:	42470000 	.word	0x42470000
 8004b18:	42470e80 	.word	0x42470e80
 8004b1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b20:	f7fd fdec 	bl	80026fc <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e106      	b.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b32:	4b85      	ldr	r3, [pc, #532]	; (8004d48 <HAL_RCC_OscConfig+0x4e4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d106      	bne.n	8004b54 <HAL_RCC_OscConfig+0x2f0>
 8004b46:	4b81      	ldr	r3, [pc, #516]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4a:	4a80      	ldr	r2, [pc, #512]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004b4c:	f043 0301 	orr.w	r3, r3, #1
 8004b50:	6713      	str	r3, [r2, #112]	; 0x70
 8004b52:	e01c      	b.n	8004b8e <HAL_RCC_OscConfig+0x32a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b05      	cmp	r3, #5
 8004b5a:	d10c      	bne.n	8004b76 <HAL_RCC_OscConfig+0x312>
 8004b5c:	4b7b      	ldr	r3, [pc, #492]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b60:	4a7a      	ldr	r2, [pc, #488]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004b62:	f043 0304 	orr.w	r3, r3, #4
 8004b66:	6713      	str	r3, [r2, #112]	; 0x70
 8004b68:	4b78      	ldr	r3, [pc, #480]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6c:	4a77      	ldr	r2, [pc, #476]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004b6e:	f043 0301 	orr.w	r3, r3, #1
 8004b72:	6713      	str	r3, [r2, #112]	; 0x70
 8004b74:	e00b      	b.n	8004b8e <HAL_RCC_OscConfig+0x32a>
 8004b76:	4b75      	ldr	r3, [pc, #468]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7a:	4a74      	ldr	r2, [pc, #464]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004b7c:	f023 0301 	bic.w	r3, r3, #1
 8004b80:	6713      	str	r3, [r2, #112]	; 0x70
 8004b82:	4b72      	ldr	r3, [pc, #456]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	4a71      	ldr	r2, [pc, #452]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004b88:	f023 0304 	bic.w	r3, r3, #4
 8004b8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d015      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b96:	f7fd fdb1 	bl	80026fc <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9c:	e00a      	b.n	8004bb4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b9e:	f7fd fdad 	bl	80026fc <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e0c5      	b.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb4:	4b65      	ldr	r3, [pc, #404]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0ee      	beq.n	8004b9e <HAL_RCC_OscConfig+0x33a>
 8004bc0:	e014      	b.n	8004bec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc2:	f7fd fd9b 	bl	80026fc <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc8:	e00a      	b.n	8004be0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bca:	f7fd fd97 	bl	80026fc <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e0af      	b.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004be0:	4b5a      	ldr	r3, [pc, #360]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1ee      	bne.n	8004bca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bec:	7dfb      	ldrb	r3, [r7, #23]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d105      	bne.n	8004bfe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bf2:	4b56      	ldr	r3, [pc, #344]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	4a55      	ldr	r2, [pc, #340]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bfc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 809b 	beq.w	8004d3e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c08:	4b50      	ldr	r3, [pc, #320]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 030c 	and.w	r3, r3, #12
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d05c      	beq.n	8004cce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d141      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c1c:	4b4c      	ldr	r3, [pc, #304]	; (8004d50 <HAL_RCC_OscConfig+0x4ec>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c22:	f7fd fd6b 	bl	80026fc <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c2a:	f7fd fd67 	bl	80026fc <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e081      	b.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3c:	4b43      	ldr	r3, [pc, #268]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f0      	bne.n	8004c2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69da      	ldr	r2, [r3, #28]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	019b      	lsls	r3, r3, #6
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	3b01      	subs	r3, #1
 8004c62:	041b      	lsls	r3, r3, #16
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	061b      	lsls	r3, r3, #24
 8004c6c:	4937      	ldr	r1, [pc, #220]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c72:	4b37      	ldr	r3, [pc, #220]	; (8004d50 <HAL_RCC_OscConfig+0x4ec>)
 8004c74:	2201      	movs	r2, #1
 8004c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c78:	f7fd fd40 	bl	80026fc <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c80:	f7fd fd3c 	bl	80026fc <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e056      	b.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c92:	4b2e      	ldr	r3, [pc, #184]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0x41c>
 8004c9e:	e04e      	b.n	8004d3e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca0:	4b2b      	ldr	r3, [pc, #172]	; (8004d50 <HAL_RCC_OscConfig+0x4ec>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca6:	f7fd fd29 	bl	80026fc <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cae:	f7fd fd25 	bl	80026fc <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e03f      	b.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc0:	4b22      	ldr	r3, [pc, #136]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f0      	bne.n	8004cae <HAL_RCC_OscConfig+0x44a>
 8004ccc:	e037      	b.n	8004d3e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e032      	b.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cda:	4b1c      	ldr	r3, [pc, #112]	; (8004d4c <HAL_RCC_OscConfig+0x4e8>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d028      	beq.n	8004d3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d121      	bne.n	8004d3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d11a      	bne.n	8004d3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d10:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d111      	bne.n	8004d3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	085b      	lsrs	r3, r3, #1
 8004d22:	3b01      	subs	r3, #1
 8004d24:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d107      	bne.n	8004d3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d001      	beq.n	8004d3e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40007000 	.word	0x40007000
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	42470060 	.word	0x42470060

08004d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0cc      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d68:	4b68      	ldr	r3, [pc, #416]	; (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d90c      	bls.n	8004d90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d76:	4b65      	ldr	r3, [pc, #404]	; (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d7e:	4b63      	ldr	r3, [pc, #396]	; (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d001      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0b8      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d020      	beq.n	8004dde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d005      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004da8:	4b59      	ldr	r3, [pc, #356]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	4a58      	ldr	r2, [pc, #352]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004db2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dc0:	4b53      	ldr	r3, [pc, #332]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	4a52      	ldr	r2, [pc, #328]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dcc:	4b50      	ldr	r3, [pc, #320]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	494d      	ldr	r1, [pc, #308]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d044      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d107      	bne.n	8004e02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df2:	4b47      	ldr	r3, [pc, #284]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d119      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e07f      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d003      	beq.n	8004e12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d107      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e12:	4b3f      	ldr	r3, [pc, #252]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d109      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e06f      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e22:	4b3b      	ldr	r3, [pc, #236]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e067      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e32:	4b37      	ldr	r3, [pc, #220]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f023 0203 	bic.w	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	4934      	ldr	r1, [pc, #208]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e44:	f7fd fc5a 	bl	80026fc <HAL_GetTick>
 8004e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e4a:	e00a      	b.n	8004e62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e4c:	f7fd fc56 	bl	80026fc <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e04f      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e62:	4b2b      	ldr	r3, [pc, #172]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 020c 	and.w	r2, r3, #12
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d1eb      	bne.n	8004e4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e74:	4b25      	ldr	r3, [pc, #148]	; (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d20c      	bcs.n	8004e9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e82:	4b22      	ldr	r3, [pc, #136]	; (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8a:	4b20      	ldr	r3, [pc, #128]	; (8004f0c <HAL_RCC_ClockConfig+0x1b8>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d001      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e032      	b.n	8004f02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ea8:	4b19      	ldr	r3, [pc, #100]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	4916      	ldr	r1, [pc, #88]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d009      	beq.n	8004eda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ec6:	4b12      	ldr	r3, [pc, #72]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	490e      	ldr	r1, [pc, #56]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eda:	f000 f821 	bl	8004f20 <HAL_RCC_GetSysClockFreq>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	091b      	lsrs	r3, r3, #4
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	490a      	ldr	r1, [pc, #40]	; (8004f14 <HAL_RCC_ClockConfig+0x1c0>)
 8004eec:	5ccb      	ldrb	r3, [r1, r3]
 8004eee:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef2:	4a09      	ldr	r2, [pc, #36]	; (8004f18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ef6:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <HAL_RCC_ClockConfig+0x1c8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fc f988 	bl	8001210 <HAL_InitTick>

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40023c00 	.word	0x40023c00
 8004f10:	40023800 	.word	0x40023800
 8004f14:	0800e8c4 	.word	0x0800e8c4
 8004f18:	20000000 	.word	0x20000000
 8004f1c:	20000034 	.word	0x20000034

08004f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f24:	b084      	sub	sp, #16
 8004f26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	607b      	str	r3, [r7, #4]
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	2300      	movs	r3, #0
 8004f32:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f38:	4b67      	ldr	r3, [pc, #412]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 030c 	and.w	r3, r3, #12
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d00d      	beq.n	8004f60 <HAL_RCC_GetSysClockFreq+0x40>
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	f200 80bd 	bhi.w	80050c4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <HAL_RCC_GetSysClockFreq+0x34>
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d003      	beq.n	8004f5a <HAL_RCC_GetSysClockFreq+0x3a>
 8004f52:	e0b7      	b.n	80050c4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f54:	4b61      	ldr	r3, [pc, #388]	; (80050dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f56:	60bb      	str	r3, [r7, #8]
       break;
 8004f58:	e0b7      	b.n	80050ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f5a:	4b61      	ldr	r3, [pc, #388]	; (80050e0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004f5c:	60bb      	str	r3, [r7, #8]
      break;
 8004f5e:	e0b4      	b.n	80050ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f60:	4b5d      	ldr	r3, [pc, #372]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f6a:	4b5b      	ldr	r3, [pc, #364]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d04d      	beq.n	8005012 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f76:	4b58      	ldr	r3, [pc, #352]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	099b      	lsrs	r3, r3, #6
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f04f 0300 	mov.w	r3, #0
 8004f82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f86:	f04f 0100 	mov.w	r1, #0
 8004f8a:	ea02 0800 	and.w	r8, r2, r0
 8004f8e:	ea03 0901 	and.w	r9, r3, r1
 8004f92:	4640      	mov	r0, r8
 8004f94:	4649      	mov	r1, r9
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	014b      	lsls	r3, r1, #5
 8004fa0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004fa4:	0142      	lsls	r2, r0, #5
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	4619      	mov	r1, r3
 8004faa:	ebb0 0008 	subs.w	r0, r0, r8
 8004fae:	eb61 0109 	sbc.w	r1, r1, r9
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	f04f 0300 	mov.w	r3, #0
 8004fba:	018b      	lsls	r3, r1, #6
 8004fbc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004fc0:	0182      	lsls	r2, r0, #6
 8004fc2:	1a12      	subs	r2, r2, r0
 8004fc4:	eb63 0301 	sbc.w	r3, r3, r1
 8004fc8:	f04f 0000 	mov.w	r0, #0
 8004fcc:	f04f 0100 	mov.w	r1, #0
 8004fd0:	00d9      	lsls	r1, r3, #3
 8004fd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fd6:	00d0      	lsls	r0, r2, #3
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	eb12 0208 	adds.w	r2, r2, r8
 8004fe0:	eb43 0309 	adc.w	r3, r3, r9
 8004fe4:	f04f 0000 	mov.w	r0, #0
 8004fe8:	f04f 0100 	mov.w	r1, #0
 8004fec:	0259      	lsls	r1, r3, #9
 8004fee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004ff2:	0250      	lsls	r0, r2, #9
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	461a      	mov	r2, r3
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	f7fb f944 	bl	8000290 <__aeabi_uldivmod>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4613      	mov	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	e04a      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005012:	4b31      	ldr	r3, [pc, #196]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	099b      	lsrs	r3, r3, #6
 8005018:	461a      	mov	r2, r3
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005022:	f04f 0100 	mov.w	r1, #0
 8005026:	ea02 0400 	and.w	r4, r2, r0
 800502a:	ea03 0501 	and.w	r5, r3, r1
 800502e:	4620      	mov	r0, r4
 8005030:	4629      	mov	r1, r5
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	014b      	lsls	r3, r1, #5
 800503c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005040:	0142      	lsls	r2, r0, #5
 8005042:	4610      	mov	r0, r2
 8005044:	4619      	mov	r1, r3
 8005046:	1b00      	subs	r0, r0, r4
 8005048:	eb61 0105 	sbc.w	r1, r1, r5
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	018b      	lsls	r3, r1, #6
 8005056:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800505a:	0182      	lsls	r2, r0, #6
 800505c:	1a12      	subs	r2, r2, r0
 800505e:	eb63 0301 	sbc.w	r3, r3, r1
 8005062:	f04f 0000 	mov.w	r0, #0
 8005066:	f04f 0100 	mov.w	r1, #0
 800506a:	00d9      	lsls	r1, r3, #3
 800506c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005070:	00d0      	lsls	r0, r2, #3
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	1912      	adds	r2, r2, r4
 8005078:	eb45 0303 	adc.w	r3, r5, r3
 800507c:	f04f 0000 	mov.w	r0, #0
 8005080:	f04f 0100 	mov.w	r1, #0
 8005084:	0299      	lsls	r1, r3, #10
 8005086:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800508a:	0290      	lsls	r0, r2, #10
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4610      	mov	r0, r2
 8005092:	4619      	mov	r1, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	461a      	mov	r2, r3
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	f7fb f8f8 	bl	8000290 <__aeabi_uldivmod>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4613      	mov	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050a8:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	0c1b      	lsrs	r3, r3, #16
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	3301      	adds	r3, #1
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c0:	60bb      	str	r3, [r7, #8]
      break;
 80050c2:	e002      	b.n	80050ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050c6:	60bb      	str	r3, [r7, #8]
      break;
 80050c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ca:	68bb      	ldr	r3, [r7, #8]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80050d6:	bf00      	nop
 80050d8:	40023800 	.word	0x40023800
 80050dc:	00f42400 	.word	0x00f42400
 80050e0:	007a1200 	.word	0x007a1200

080050e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050e8:	4b03      	ldr	r3, [pc, #12]	; (80050f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80050ea:	681b      	ldr	r3, [r3, #0]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	20000000 	.word	0x20000000

080050fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005100:	f7ff fff0 	bl	80050e4 <HAL_RCC_GetHCLKFreq>
 8005104:	4602      	mov	r2, r0
 8005106:	4b05      	ldr	r3, [pc, #20]	; (800511c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	0a9b      	lsrs	r3, r3, #10
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	4903      	ldr	r1, [pc, #12]	; (8005120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005112:	5ccb      	ldrb	r3, [r1, r3]
 8005114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005118:	4618      	mov	r0, r3
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40023800 	.word	0x40023800
 8005120:	0800e8d4 	.word	0x0800e8d4

08005124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005128:	f7ff ffdc 	bl	80050e4 <HAL_RCC_GetHCLKFreq>
 800512c:	4602      	mov	r2, r0
 800512e:	4b05      	ldr	r3, [pc, #20]	; (8005144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	0b5b      	lsrs	r3, r3, #13
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	4903      	ldr	r1, [pc, #12]	; (8005148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800513a:	5ccb      	ldrb	r3, [r1, r3]
 800513c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005140:	4618      	mov	r0, r3
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40023800 	.word	0x40023800
 8005148:	0800e8d4 	.word	0x0800e8d4

0800514c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	220f      	movs	r2, #15
 800515a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800515c:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <HAL_RCC_GetClockConfig+0x5c>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 0203 	and.w	r2, r3, #3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005168:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <HAL_RCC_GetClockConfig+0x5c>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005174:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005180:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	08db      	lsrs	r3, r3, #3
 8005186:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800518e:	4b07      	ldr	r3, [pc, #28]	; (80051ac <HAL_RCC_GetClockConfig+0x60>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0207 	and.w	r2, r3, #7
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	601a      	str	r2, [r3, #0]
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40023800 	.word	0x40023800
 80051ac:	40023c00 	.word	0x40023c00

080051b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e07b      	b.n	80052ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d108      	bne.n	80051dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051d2:	d009      	beq.n	80051e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	61da      	str	r2, [r3, #28]
 80051da:	e005      	b.n	80051e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fb fee2 	bl	8000fcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800521e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	431a      	orrs	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005258:	431a      	orrs	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526c:	ea42 0103 	orr.w	r1, r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005274:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	0c1b      	lsrs	r3, r3, #16
 8005286:	f003 0104 	and.w	r1, r3, #4
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	f003 0210 	and.w	r2, r3, #16
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69da      	ldr	r2, [r3, #28]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b088      	sub	sp, #32
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	60f8      	str	r0, [r7, #12]
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	603b      	str	r3, [r7, #0]
 80052ce:	4613      	mov	r3, r2
 80052d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <HAL_SPI_Transmit+0x22>
 80052e0:	2302      	movs	r3, #2
 80052e2:	e126      	b.n	8005532 <HAL_SPI_Transmit+0x270>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052ec:	f7fd fa06 	bl	80026fc <HAL_GetTick>
 80052f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d002      	beq.n	8005308 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005302:	2302      	movs	r3, #2
 8005304:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005306:	e10b      	b.n	8005520 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <HAL_SPI_Transmit+0x52>
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d102      	bne.n	800531a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005318:	e102      	b.n	8005520 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2203      	movs	r2, #3
 800531e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	88fa      	ldrh	r2, [r7, #6]
 8005332:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	88fa      	ldrh	r2, [r7, #6]
 8005338:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005360:	d10f      	bne.n	8005382 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005370:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005380:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538c:	2b40      	cmp	r3, #64	; 0x40
 800538e:	d007      	beq.n	80053a0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800539e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053a8:	d14b      	bne.n	8005442 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <HAL_SPI_Transmit+0xf6>
 80053b2:	8afb      	ldrh	r3, [r7, #22]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d13e      	bne.n	8005436 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053bc:	881a      	ldrh	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	1c9a      	adds	r2, r3, #2
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053dc:	e02b      	b.n	8005436 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d112      	bne.n	8005412 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f0:	881a      	ldrh	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fc:	1c9a      	adds	r2, r3, #2
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005406:	b29b      	uxth	r3, r3
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005410:	e011      	b.n	8005436 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005412:	f7fd f973 	bl	80026fc <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d803      	bhi.n	800542a <HAL_SPI_Transmit+0x168>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d102      	bne.n	8005430 <HAL_SPI_Transmit+0x16e>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d102      	bne.n	8005436 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005434:	e074      	b.n	8005520 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800543a:	b29b      	uxth	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1ce      	bne.n	80053de <HAL_SPI_Transmit+0x11c>
 8005440:	e04c      	b.n	80054dc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_SPI_Transmit+0x18e>
 800544a:	8afb      	ldrh	r3, [r7, #22]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d140      	bne.n	80054d2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	330c      	adds	r3, #12
 800545a:	7812      	ldrb	r2, [r2, #0]
 800545c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800546c:	b29b      	uxth	r3, r3
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005476:	e02c      	b.n	80054d2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b02      	cmp	r3, #2
 8005484:	d113      	bne.n	80054ae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	330c      	adds	r3, #12
 8005490:	7812      	ldrb	r2, [r2, #0]
 8005492:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80054ac:	e011      	b.n	80054d2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ae:	f7fd f925 	bl	80026fc <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d803      	bhi.n	80054c6 <HAL_SPI_Transmit+0x204>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c4:	d102      	bne.n	80054cc <HAL_SPI_Transmit+0x20a>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d102      	bne.n	80054d2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054d0:	e026      	b.n	8005520 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1cd      	bne.n	8005478 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	6839      	ldr	r1, [r7, #0]
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 fbcb 	bl	8005c7c <SPI_EndRxTxTransaction>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054fa:	2300      	movs	r3, #0
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	77fb      	strb	r3, [r7, #31]
 800551c:	e000      	b.n	8005520 <HAL_SPI_Transmit+0x25e>
  }

error:
 800551e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005530:	7ffb      	ldrb	r3, [r7, #31]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3720      	adds	r7, #32
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b088      	sub	sp, #32
 800553e:	af02      	add	r7, sp, #8
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	603b      	str	r3, [r7, #0]
 8005546:	4613      	mov	r3, r2
 8005548:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005556:	d112      	bne.n	800557e <HAL_SPI_Receive+0x44>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10e      	bne.n	800557e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2204      	movs	r2, #4
 8005564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005568:	88fa      	ldrh	r2, [r7, #6]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	4613      	mov	r3, r2
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f8f1 	bl	800575c <HAL_SPI_TransmitReceive>
 800557a:	4603      	mov	r3, r0
 800557c:	e0ea      	b.n	8005754 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_SPI_Receive+0x52>
 8005588:	2302      	movs	r3, #2
 800558a:	e0e3      	b.n	8005754 <HAL_SPI_Receive+0x21a>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005594:	f7fd f8b2 	bl	80026fc <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d002      	beq.n	80055ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80055a6:	2302      	movs	r3, #2
 80055a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055aa:	e0ca      	b.n	8005742 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <HAL_SPI_Receive+0x7e>
 80055b2:	88fb      	ldrh	r3, [r7, #6]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d102      	bne.n	80055be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055bc:	e0c1      	b.n	8005742 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2204      	movs	r2, #4
 80055c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	88fa      	ldrh	r2, [r7, #6]
 80055d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	88fa      	ldrh	r2, [r7, #6]
 80055dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005604:	d10f      	bne.n	8005626 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005614:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005624:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005630:	2b40      	cmp	r3, #64	; 0x40
 8005632:	d007      	beq.n	8005644 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005642:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d162      	bne.n	8005712 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800564c:	e02e      	b.n	80056ac <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b01      	cmp	r3, #1
 800565a:	d115      	bne.n	8005688 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f103 020c 	add.w	r2, r3, #12
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005668:	7812      	ldrb	r2, [r2, #0]
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005686:	e011      	b.n	80056ac <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005688:	f7fd f838 	bl	80026fc <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d803      	bhi.n	80056a0 <HAL_SPI_Receive+0x166>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569e:	d102      	bne.n	80056a6 <HAL_SPI_Receive+0x16c>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d102      	bne.n	80056ac <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056aa:	e04a      	b.n	8005742 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1cb      	bne.n	800564e <HAL_SPI_Receive+0x114>
 80056b6:	e031      	b.n	800571c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d113      	bne.n	80056ee <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	b292      	uxth	r2, r2
 80056d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	1c9a      	adds	r2, r3, #2
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056ec:	e011      	b.n	8005712 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ee:	f7fd f805 	bl	80026fc <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d803      	bhi.n	8005706 <HAL_SPI_Receive+0x1cc>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005704:	d102      	bne.n	800570c <HAL_SPI_Receive+0x1d2>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d102      	bne.n	8005712 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005710:	e017      	b.n	8005742 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005716:	b29b      	uxth	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1cd      	bne.n	80056b8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	6839      	ldr	r1, [r7, #0]
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 fa45 	bl	8005bb0 <SPI_EndRxTransaction>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2220      	movs	r2, #32
 8005730:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	75fb      	strb	r3, [r7, #23]
 800573e:	e000      	b.n	8005742 <HAL_SPI_Receive+0x208>
  }

error :
 8005740:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005752:	7dfb      	ldrb	r3, [r7, #23]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3718      	adds	r7, #24
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b08c      	sub	sp, #48	; 0x30
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
 8005768:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800576a:	2301      	movs	r3, #1
 800576c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_SPI_TransmitReceive+0x26>
 800577e:	2302      	movs	r3, #2
 8005780:	e18a      	b.n	8005a98 <HAL_SPI_TransmitReceive+0x33c>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800578a:	f7fc ffb7 	bl	80026fc <HAL_GetTick>
 800578e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80057a0:	887b      	ldrh	r3, [r7, #2]
 80057a2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d00f      	beq.n	80057cc <HAL_SPI_TransmitReceive+0x70>
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057b2:	d107      	bne.n	80057c4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d103      	bne.n	80057c4 <HAL_SPI_TransmitReceive+0x68>
 80057bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	d003      	beq.n	80057cc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80057c4:	2302      	movs	r3, #2
 80057c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057ca:	e15b      	b.n	8005a84 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <HAL_SPI_TransmitReceive+0x82>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <HAL_SPI_TransmitReceive+0x82>
 80057d8:	887b      	ldrh	r3, [r7, #2]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d103      	bne.n	80057e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057e4:	e14e      	b.n	8005a84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d003      	beq.n	80057fa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2205      	movs	r2, #5
 80057f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	887a      	ldrh	r2, [r7, #2]
 800580a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	887a      	ldrh	r2, [r7, #2]
 8005810:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	887a      	ldrh	r2, [r7, #2]
 800581c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	887a      	ldrh	r2, [r7, #2]
 8005822:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583a:	2b40      	cmp	r3, #64	; 0x40
 800583c:	d007      	beq.n	800584e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800584c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005856:	d178      	bne.n	800594a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <HAL_SPI_TransmitReceive+0x10a>
 8005860:	8b7b      	ldrh	r3, [r7, #26]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d166      	bne.n	8005934 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586a:	881a      	ldrh	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005876:	1c9a      	adds	r2, r3, #2
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005880:	b29b      	uxth	r3, r3
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800588a:	e053      	b.n	8005934 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b02      	cmp	r3, #2
 8005898:	d11b      	bne.n	80058d2 <HAL_SPI_TransmitReceive+0x176>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800589e:	b29b      	uxth	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d016      	beq.n	80058d2 <HAL_SPI_TransmitReceive+0x176>
 80058a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d113      	bne.n	80058d2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	881a      	ldrh	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	1c9a      	adds	r2, r3, #2
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d119      	bne.n	8005914 <HAL_SPI_TransmitReceive+0x1b8>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d014      	beq.n	8005914 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68da      	ldr	r2, [r3, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f4:	b292      	uxth	r2, r2
 80058f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	1c9a      	adds	r2, r3, #2
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005910:	2301      	movs	r3, #1
 8005912:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005914:	f7fc fef2 	bl	80026fc <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005920:	429a      	cmp	r2, r3
 8005922:	d807      	bhi.n	8005934 <HAL_SPI_TransmitReceive+0x1d8>
 8005924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592a:	d003      	beq.n	8005934 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005932:	e0a7      	b.n	8005a84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1a6      	bne.n	800588c <HAL_SPI_TransmitReceive+0x130>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005942:	b29b      	uxth	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1a1      	bne.n	800588c <HAL_SPI_TransmitReceive+0x130>
 8005948:	e07c      	b.n	8005a44 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <HAL_SPI_TransmitReceive+0x1fc>
 8005952:	8b7b      	ldrh	r3, [r7, #26]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d16b      	bne.n	8005a30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	330c      	adds	r3, #12
 8005962:	7812      	ldrb	r2, [r2, #0]
 8005964:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005974:	b29b      	uxth	r3, r3
 8005976:	3b01      	subs	r3, #1
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800597e:	e057      	b.n	8005a30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b02      	cmp	r3, #2
 800598c:	d11c      	bne.n	80059c8 <HAL_SPI_TransmitReceive+0x26c>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005992:	b29b      	uxth	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d017      	beq.n	80059c8 <HAL_SPI_TransmitReceive+0x26c>
 8005998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599a:	2b01      	cmp	r3, #1
 800599c:	d114      	bne.n	80059c8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	330c      	adds	r3, #12
 80059a8:	7812      	ldrb	r2, [r2, #0]
 80059aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d119      	bne.n	8005a0a <HAL_SPI_TransmitReceive+0x2ae>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059da:	b29b      	uxth	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d014      	beq.n	8005a0a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a06:	2301      	movs	r3, #1
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a0a:	f7fc fe77 	bl	80026fc <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d803      	bhi.n	8005a22 <HAL_SPI_TransmitReceive+0x2c6>
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a20:	d102      	bne.n	8005a28 <HAL_SPI_TransmitReceive+0x2cc>
 8005a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d103      	bne.n	8005a30 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a2e:	e029      	b.n	8005a84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1a2      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x224>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d19d      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 f917 	bl	8005c7c <SPI_EndRxTxTransaction>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d006      	beq.n	8005a62 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005a60:	e010      	b.n	8005a84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10b      	bne.n	8005a82 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	e000      	b.n	8005a84 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005a82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3730      	adds	r7, #48	; 0x30
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	603b      	str	r3, [r7, #0]
 8005aac:	4613      	mov	r3, r2
 8005aae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ab0:	f7fc fe24 	bl	80026fc <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	1a9b      	subs	r3, r3, r2
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	4413      	add	r3, r2
 8005abe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ac0:	f7fc fe1c 	bl	80026fc <HAL_GetTick>
 8005ac4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ac6:	4b39      	ldr	r3, [pc, #228]	; (8005bac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	015b      	lsls	r3, r3, #5
 8005acc:	0d1b      	lsrs	r3, r3, #20
 8005ace:	69fa      	ldr	r2, [r7, #28]
 8005ad0:	fb02 f303 	mul.w	r3, r2, r3
 8005ad4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ad6:	e054      	b.n	8005b82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ade:	d050      	beq.n	8005b82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ae0:	f7fc fe0c 	bl	80026fc <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d902      	bls.n	8005af6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d13d      	bne.n	8005b72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b0e:	d111      	bne.n	8005b34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b18:	d004      	beq.n	8005b24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b22:	d107      	bne.n	8005b34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b3c:	d10f      	bne.n	8005b5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e017      	b.n	8005ba2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	bf0c      	ite	eq
 8005b92:	2301      	moveq	r3, #1
 8005b94:	2300      	movne	r3, #0
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d19b      	bne.n	8005ad8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3720      	adds	r7, #32
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	20000000 	.word	0x20000000

08005bb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bc4:	d111      	bne.n	8005bea <SPI_EndRxTransaction+0x3a>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bce:	d004      	beq.n	8005bda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd8:	d107      	bne.n	8005bea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005be8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bf2:	d12a      	bne.n	8005c4a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bfc:	d012      	beq.n	8005c24 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2200      	movs	r2, #0
 8005c06:	2180      	movs	r1, #128	; 0x80
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f7ff ff49 	bl	8005aa0 <SPI_WaitFlagStateUntilTimeout>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d02d      	beq.n	8005c70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c18:	f043 0220 	orr.w	r2, r3, #32
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e026      	b.n	8005c72 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f7ff ff36 	bl	8005aa0 <SPI_WaitFlagStateUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d01a      	beq.n	8005c70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3e:	f043 0220 	orr.w	r2, r3, #32
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e013      	b.n	8005c72 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2200      	movs	r2, #0
 8005c52:	2101      	movs	r1, #1
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f7ff ff23 	bl	8005aa0 <SPI_WaitFlagStateUntilTimeout>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d007      	beq.n	8005c70 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c64:	f043 0220 	orr.w	r2, r3, #32
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e000      	b.n	8005c72 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
	...

08005c7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c88:	4b1b      	ldr	r3, [pc, #108]	; (8005cf8 <SPI_EndRxTxTransaction+0x7c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1b      	ldr	r2, [pc, #108]	; (8005cfc <SPI_EndRxTxTransaction+0x80>)
 8005c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c92:	0d5b      	lsrs	r3, r3, #21
 8005c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c98:	fb02 f303 	mul.w	r3, r2, r3
 8005c9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ca6:	d112      	bne.n	8005cce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2180      	movs	r1, #128	; 0x80
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f7ff fef4 	bl	8005aa0 <SPI_WaitFlagStateUntilTimeout>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d016      	beq.n	8005cec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc2:	f043 0220 	orr.w	r2, r3, #32
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e00f      	b.n	8005cee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00a      	beq.n	8005cea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce4:	2b80      	cmp	r3, #128	; 0x80
 8005ce6:	d0f2      	beq.n	8005cce <SPI_EndRxTxTransaction+0x52>
 8005ce8:	e000      	b.n	8005cec <SPI_EndRxTxTransaction+0x70>
        break;
 8005cea:	bf00      	nop
  }

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000000 	.word	0x20000000
 8005cfc:	165e9f81 	.word	0x165e9f81

08005d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e041      	b.n	8005d96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f839 	bl	8005d9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4610      	mov	r0, r2
 8005d40:	f000 fadc 	bl	80062fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
	...

08005db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d001      	beq.n	8005dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e044      	b.n	8005e56 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0201 	orr.w	r2, r2, #1
 8005de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1e      	ldr	r2, [pc, #120]	; (8005e64 <HAL_TIM_Base_Start_IT+0xb0>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d018      	beq.n	8005e20 <HAL_TIM_Base_Start_IT+0x6c>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df6:	d013      	beq.n	8005e20 <HAL_TIM_Base_Start_IT+0x6c>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a1a      	ldr	r2, [pc, #104]	; (8005e68 <HAL_TIM_Base_Start_IT+0xb4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d00e      	beq.n	8005e20 <HAL_TIM_Base_Start_IT+0x6c>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a19      	ldr	r2, [pc, #100]	; (8005e6c <HAL_TIM_Base_Start_IT+0xb8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d009      	beq.n	8005e20 <HAL_TIM_Base_Start_IT+0x6c>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a17      	ldr	r2, [pc, #92]	; (8005e70 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d004      	beq.n	8005e20 <HAL_TIM_Base_Start_IT+0x6c>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a16      	ldr	r2, [pc, #88]	; (8005e74 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d111      	bne.n	8005e44 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b06      	cmp	r3, #6
 8005e30:	d010      	beq.n	8005e54 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f042 0201 	orr.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e42:	e007      	b.n	8005e54 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0201 	orr.w	r2, r2, #1
 8005e52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40010000 	.word	0x40010000
 8005e68:	40000400 	.word	0x40000400
 8005e6c:	40000800 	.word	0x40000800
 8005e70:	40000c00 	.word	0x40000c00
 8005e74:	40014000 	.word	0x40014000

08005e78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e041      	b.n	8005f0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d106      	bne.n	8005ea4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7fb f912 	bl	80010c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	f000 fa20 	bl	80062fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b082      	sub	sp, #8
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d122      	bne.n	8005f72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d11b      	bne.n	8005f72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f06f 0202 	mvn.w	r2, #2
 8005f42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f9b1 	bl	80062c0 <HAL_TIM_IC_CaptureCallback>
 8005f5e:	e005      	b.n	8005f6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f9a3 	bl	80062ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f9b4 	bl	80062d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b04      	cmp	r3, #4
 8005f7e:	d122      	bne.n	8005fc6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f003 0304 	and.w	r3, r3, #4
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	d11b      	bne.n	8005fc6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f06f 0204 	mvn.w	r2, #4
 8005f96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f987 	bl	80062c0 <HAL_TIM_IC_CaptureCallback>
 8005fb2:	e005      	b.n	8005fc0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f979 	bl	80062ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f98a 	bl	80062d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f003 0308 	and.w	r3, r3, #8
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d122      	bne.n	800601a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	f003 0308 	and.w	r3, r3, #8
 8005fde:	2b08      	cmp	r3, #8
 8005fe0:	d11b      	bne.n	800601a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f06f 0208 	mvn.w	r2, #8
 8005fea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2204      	movs	r2, #4
 8005ff0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	f003 0303 	and.w	r3, r3, #3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d003      	beq.n	8006008 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f95d 	bl	80062c0 <HAL_TIM_IC_CaptureCallback>
 8006006:	e005      	b.n	8006014 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f94f 	bl	80062ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f960 	bl	80062d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	f003 0310 	and.w	r3, r3, #16
 8006024:	2b10      	cmp	r3, #16
 8006026:	d122      	bne.n	800606e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f003 0310 	and.w	r3, r3, #16
 8006032:	2b10      	cmp	r3, #16
 8006034:	d11b      	bne.n	800606e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f06f 0210 	mvn.w	r2, #16
 800603e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2208      	movs	r2, #8
 8006044:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f933 	bl	80062c0 <HAL_TIM_IC_CaptureCallback>
 800605a:	e005      	b.n	8006068 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f925 	bl	80062ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f936 	bl	80062d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b01      	cmp	r3, #1
 800607a:	d10e      	bne.n	800609a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b01      	cmp	r3, #1
 8006088:	d107      	bne.n	800609a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f06f 0201 	mvn.w	r2, #1
 8006092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7fa ff07 	bl	8000ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a4:	2b80      	cmp	r3, #128	; 0x80
 80060a6:	d10e      	bne.n	80060c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b2:	2b80      	cmp	r3, #128	; 0x80
 80060b4:	d107      	bne.n	80060c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fb9f 	bl	8006804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d0:	2b40      	cmp	r3, #64	; 0x40
 80060d2:	d10e      	bne.n	80060f2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060de:	2b40      	cmp	r3, #64	; 0x40
 80060e0:	d107      	bne.n	80060f2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f8fb 	bl	80062e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f003 0320 	and.w	r3, r3, #32
 80060fc:	2b20      	cmp	r3, #32
 80060fe:	d10e      	bne.n	800611e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b20      	cmp	r3, #32
 800610c:	d107      	bne.n	800611e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f06f 0220 	mvn.w	r2, #32
 8006116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fb69 	bl	80067f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800611e:	bf00      	nop
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006142:	2302      	movs	r3, #2
 8006144:	e0ae      	b.n	80062a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b0c      	cmp	r3, #12
 8006152:	f200 809f 	bhi.w	8006294 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006156:	a201      	add	r2, pc, #4	; (adr r2, 800615c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615c:	08006191 	.word	0x08006191
 8006160:	08006295 	.word	0x08006295
 8006164:	08006295 	.word	0x08006295
 8006168:	08006295 	.word	0x08006295
 800616c:	080061d1 	.word	0x080061d1
 8006170:	08006295 	.word	0x08006295
 8006174:	08006295 	.word	0x08006295
 8006178:	08006295 	.word	0x08006295
 800617c:	08006213 	.word	0x08006213
 8006180:	08006295 	.word	0x08006295
 8006184:	08006295 	.word	0x08006295
 8006188:	08006295 	.word	0x08006295
 800618c:	08006253 	.word	0x08006253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	4618      	mov	r0, r3
 8006198:	f000 f930 	bl	80063fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699a      	ldr	r2, [r3, #24]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0208 	orr.w	r2, r2, #8
 80061aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0204 	bic.w	r2, r2, #4
 80061ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6999      	ldr	r1, [r3, #24]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	691a      	ldr	r2, [r3, #16]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	619a      	str	r2, [r3, #24]
      break;
 80061ce:	e064      	b.n	800629a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 f976 	bl	80064c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699a      	ldr	r2, [r3, #24]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6999      	ldr	r1, [r3, #24]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	021a      	lsls	r2, r3, #8
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	619a      	str	r2, [r3, #24]
      break;
 8006210:	e043      	b.n	800629a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	4618      	mov	r0, r3
 800621a:	f000 f9c1 	bl	80065a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69da      	ldr	r2, [r3, #28]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0208 	orr.w	r2, r2, #8
 800622c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69da      	ldr	r2, [r3, #28]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0204 	bic.w	r2, r2, #4
 800623c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69d9      	ldr	r1, [r3, #28]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	691a      	ldr	r2, [r3, #16]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	61da      	str	r2, [r3, #28]
      break;
 8006250:	e023      	b.n	800629a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	4618      	mov	r0, r3
 800625a:	f000 fa0b 	bl	8006674 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69da      	ldr	r2, [r3, #28]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800626c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800627c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69d9      	ldr	r1, [r3, #28]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	021a      	lsls	r2, r3, #8
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	61da      	str	r2, [r3, #28]
      break;
 8006292:	e002      	b.n	800629a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	75fb      	strb	r3, [r7, #23]
      break;
 8006298:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a34      	ldr	r2, [pc, #208]	; (80063e0 <TIM_Base_SetConfig+0xe4>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d00f      	beq.n	8006334 <TIM_Base_SetConfig+0x38>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800631a:	d00b      	beq.n	8006334 <TIM_Base_SetConfig+0x38>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a31      	ldr	r2, [pc, #196]	; (80063e4 <TIM_Base_SetConfig+0xe8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d007      	beq.n	8006334 <TIM_Base_SetConfig+0x38>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a30      	ldr	r2, [pc, #192]	; (80063e8 <TIM_Base_SetConfig+0xec>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d003      	beq.n	8006334 <TIM_Base_SetConfig+0x38>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a2f      	ldr	r2, [pc, #188]	; (80063ec <TIM_Base_SetConfig+0xf0>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d108      	bne.n	8006346 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a25      	ldr	r2, [pc, #148]	; (80063e0 <TIM_Base_SetConfig+0xe4>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d01b      	beq.n	8006386 <TIM_Base_SetConfig+0x8a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006354:	d017      	beq.n	8006386 <TIM_Base_SetConfig+0x8a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a22      	ldr	r2, [pc, #136]	; (80063e4 <TIM_Base_SetConfig+0xe8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d013      	beq.n	8006386 <TIM_Base_SetConfig+0x8a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a21      	ldr	r2, [pc, #132]	; (80063e8 <TIM_Base_SetConfig+0xec>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00f      	beq.n	8006386 <TIM_Base_SetConfig+0x8a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a20      	ldr	r2, [pc, #128]	; (80063ec <TIM_Base_SetConfig+0xf0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00b      	beq.n	8006386 <TIM_Base_SetConfig+0x8a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a1f      	ldr	r2, [pc, #124]	; (80063f0 <TIM_Base_SetConfig+0xf4>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d007      	beq.n	8006386 <TIM_Base_SetConfig+0x8a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a1e      	ldr	r2, [pc, #120]	; (80063f4 <TIM_Base_SetConfig+0xf8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d003      	beq.n	8006386 <TIM_Base_SetConfig+0x8a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a1d      	ldr	r2, [pc, #116]	; (80063f8 <TIM_Base_SetConfig+0xfc>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d108      	bne.n	8006398 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800638c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4313      	orrs	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a08      	ldr	r2, [pc, #32]	; (80063e0 <TIM_Base_SetConfig+0xe4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d103      	bne.n	80063cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	691a      	ldr	r2, [r3, #16]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	615a      	str	r2, [r3, #20]
}
 80063d2:	bf00      	nop
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	40010000 	.word	0x40010000
 80063e4:	40000400 	.word	0x40000400
 80063e8:	40000800 	.word	0x40000800
 80063ec:	40000c00 	.word	0x40000c00
 80063f0:	40014000 	.word	0x40014000
 80063f4:	40014400 	.word	0x40014400
 80063f8:	40014800 	.word	0x40014800

080063fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	f023 0201 	bic.w	r2, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 0303 	bic.w	r3, r3, #3
 8006432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f023 0302 	bic.w	r3, r3, #2
 8006444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4313      	orrs	r3, r2
 800644e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a1c      	ldr	r2, [pc, #112]	; (80064c4 <TIM_OC1_SetConfig+0xc8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d10c      	bne.n	8006472 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f023 0308 	bic.w	r3, r3, #8
 800645e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	4313      	orrs	r3, r2
 8006468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f023 0304 	bic.w	r3, r3, #4
 8006470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a13      	ldr	r2, [pc, #76]	; (80064c4 <TIM_OC1_SetConfig+0xc8>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d111      	bne.n	800649e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	4313      	orrs	r3, r2
 8006492:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	621a      	str	r2, [r3, #32]
}
 80064b8:	bf00      	nop
 80064ba:	371c      	adds	r7, #28
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	40010000 	.word	0x40010000

080064c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	f023 0210 	bic.w	r2, r3, #16
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f023 0320 	bic.w	r3, r3, #32
 8006512:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	4313      	orrs	r3, r2
 800651e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a1e      	ldr	r2, [pc, #120]	; (800659c <TIM_OC2_SetConfig+0xd4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d10d      	bne.n	8006544 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800652e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4313      	orrs	r3, r2
 800653a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006542:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a15      	ldr	r2, [pc, #84]	; (800659c <TIM_OC2_SetConfig+0xd4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d113      	bne.n	8006574 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800655a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	4313      	orrs	r3, r2
 8006572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	621a      	str	r2, [r3, #32]
}
 800658e:	bf00      	nop
 8006590:	371c      	adds	r7, #28
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40010000 	.word	0x40010000

080065a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 0303 	bic.w	r3, r3, #3
 80065d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	021b      	lsls	r3, r3, #8
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a1d      	ldr	r2, [pc, #116]	; (8006670 <TIM_OC3_SetConfig+0xd0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d10d      	bne.n	800661a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006604:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	021b      	lsls	r3, r3, #8
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	4313      	orrs	r3, r2
 8006610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a14      	ldr	r2, [pc, #80]	; (8006670 <TIM_OC3_SetConfig+0xd0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d113      	bne.n	800664a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	621a      	str	r2, [r3, #32]
}
 8006664:	bf00      	nop
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	40010000 	.word	0x40010000

08006674 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	021b      	lsls	r3, r3, #8
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	031b      	lsls	r3, r3, #12
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a10      	ldr	r2, [pc, #64]	; (8006710 <TIM_OC4_SetConfig+0x9c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d109      	bne.n	80066e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	019b      	lsls	r3, r3, #6
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	621a      	str	r2, [r3, #32]
}
 8006702:	bf00      	nop
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40010000 	.word	0x40010000

08006714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006728:	2302      	movs	r3, #2
 800672a:	e050      	b.n	80067ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a1c      	ldr	r2, [pc, #112]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d018      	beq.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006778:	d013      	beq.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a18      	ldr	r2, [pc, #96]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d00e      	beq.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a16      	ldr	r2, [pc, #88]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d009      	beq.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a15      	ldr	r2, [pc, #84]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d004      	beq.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a13      	ldr	r2, [pc, #76]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d10c      	bne.n	80067bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40010000 	.word	0x40010000
 80067e0:	40000400 	.word	0x40000400
 80067e4:	40000800 	.word	0x40000800
 80067e8:	40000c00 	.word	0x40000c00
 80067ec:	40014000 	.word	0x40014000

080067f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e03f      	b.n	80068aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d106      	bne.n	8006844 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7fa fc9e 	bl	8001180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2224      	movs	r2, #36	; 0x24
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800685a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f829 	bl	80068b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006870:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	695a      	ldr	r2, [r3, #20]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006880:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68da      	ldr	r2, [r3, #12]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006890:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b8:	b09f      	sub	sp, #124	; 0x7c
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ca:	68d9      	ldr	r1, [r3, #12]
 80068cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	ea40 0301 	orr.w	r3, r0, r1
 80068d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d8:	689a      	ldr	r2, [r3, #8]
 80068da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	431a      	orrs	r2, r3
 80068e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	431a      	orrs	r2, r3
 80068e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80068ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80068f8:	f021 010c 	bic.w	r1, r1, #12
 80068fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006902:	430b      	orrs	r3, r1
 8006904:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006912:	6999      	ldr	r1, [r3, #24]
 8006914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	ea40 0301 	orr.w	r3, r0, r1
 800691c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800691e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4bc5      	ldr	r3, [pc, #788]	; (8006c38 <UART_SetConfig+0x384>)
 8006924:	429a      	cmp	r2, r3
 8006926:	d004      	beq.n	8006932 <UART_SetConfig+0x7e>
 8006928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	4bc3      	ldr	r3, [pc, #780]	; (8006c3c <UART_SetConfig+0x388>)
 800692e:	429a      	cmp	r2, r3
 8006930:	d103      	bne.n	800693a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006932:	f7fe fbf7 	bl	8005124 <HAL_RCC_GetPCLK2Freq>
 8006936:	6778      	str	r0, [r7, #116]	; 0x74
 8006938:	e002      	b.n	8006940 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800693a:	f7fe fbdf 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
 800693e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006948:	f040 80b6 	bne.w	8006ab8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800694c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800694e:	461c      	mov	r4, r3
 8006950:	f04f 0500 	mov.w	r5, #0
 8006954:	4622      	mov	r2, r4
 8006956:	462b      	mov	r3, r5
 8006958:	1891      	adds	r1, r2, r2
 800695a:	6439      	str	r1, [r7, #64]	; 0x40
 800695c:	415b      	adcs	r3, r3
 800695e:	647b      	str	r3, [r7, #68]	; 0x44
 8006960:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006964:	1912      	adds	r2, r2, r4
 8006966:	eb45 0303 	adc.w	r3, r5, r3
 800696a:	f04f 0000 	mov.w	r0, #0
 800696e:	f04f 0100 	mov.w	r1, #0
 8006972:	00d9      	lsls	r1, r3, #3
 8006974:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006978:	00d0      	lsls	r0, r2, #3
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	1911      	adds	r1, r2, r4
 8006980:	6639      	str	r1, [r7, #96]	; 0x60
 8006982:	416b      	adcs	r3, r5
 8006984:	667b      	str	r3, [r7, #100]	; 0x64
 8006986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	461a      	mov	r2, r3
 800698c:	f04f 0300 	mov.w	r3, #0
 8006990:	1891      	adds	r1, r2, r2
 8006992:	63b9      	str	r1, [r7, #56]	; 0x38
 8006994:	415b      	adcs	r3, r3
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006998:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800699c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80069a0:	f7f9 fc76 	bl	8000290 <__aeabi_uldivmod>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4ba5      	ldr	r3, [pc, #660]	; (8006c40 <UART_SetConfig+0x38c>)
 80069aa:	fba3 2302 	umull	r2, r3, r3, r2
 80069ae:	095b      	lsrs	r3, r3, #5
 80069b0:	011e      	lsls	r6, r3, #4
 80069b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069b4:	461c      	mov	r4, r3
 80069b6:	f04f 0500 	mov.w	r5, #0
 80069ba:	4622      	mov	r2, r4
 80069bc:	462b      	mov	r3, r5
 80069be:	1891      	adds	r1, r2, r2
 80069c0:	6339      	str	r1, [r7, #48]	; 0x30
 80069c2:	415b      	adcs	r3, r3
 80069c4:	637b      	str	r3, [r7, #52]	; 0x34
 80069c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80069ca:	1912      	adds	r2, r2, r4
 80069cc:	eb45 0303 	adc.w	r3, r5, r3
 80069d0:	f04f 0000 	mov.w	r0, #0
 80069d4:	f04f 0100 	mov.w	r1, #0
 80069d8:	00d9      	lsls	r1, r3, #3
 80069da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069de:	00d0      	lsls	r0, r2, #3
 80069e0:	4602      	mov	r2, r0
 80069e2:	460b      	mov	r3, r1
 80069e4:	1911      	adds	r1, r2, r4
 80069e6:	65b9      	str	r1, [r7, #88]	; 0x58
 80069e8:	416b      	adcs	r3, r5
 80069ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	461a      	mov	r2, r3
 80069f2:	f04f 0300 	mov.w	r3, #0
 80069f6:	1891      	adds	r1, r2, r2
 80069f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80069fa:	415b      	adcs	r3, r3
 80069fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a02:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006a06:	f7f9 fc43 	bl	8000290 <__aeabi_uldivmod>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4b8c      	ldr	r3, [pc, #560]	; (8006c40 <UART_SetConfig+0x38c>)
 8006a10:	fba3 1302 	umull	r1, r3, r3, r2
 8006a14:	095b      	lsrs	r3, r3, #5
 8006a16:	2164      	movs	r1, #100	; 0x64
 8006a18:	fb01 f303 	mul.w	r3, r1, r3
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	3332      	adds	r3, #50	; 0x32
 8006a22:	4a87      	ldr	r2, [pc, #540]	; (8006c40 <UART_SetConfig+0x38c>)
 8006a24:	fba2 2303 	umull	r2, r3, r2, r3
 8006a28:	095b      	lsrs	r3, r3, #5
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a30:	441e      	add	r6, r3
 8006a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a34:	4618      	mov	r0, r3
 8006a36:	f04f 0100 	mov.w	r1, #0
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	1894      	adds	r4, r2, r2
 8006a40:	623c      	str	r4, [r7, #32]
 8006a42:	415b      	adcs	r3, r3
 8006a44:	627b      	str	r3, [r7, #36]	; 0x24
 8006a46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a4a:	1812      	adds	r2, r2, r0
 8006a4c:	eb41 0303 	adc.w	r3, r1, r3
 8006a50:	f04f 0400 	mov.w	r4, #0
 8006a54:	f04f 0500 	mov.w	r5, #0
 8006a58:	00dd      	lsls	r5, r3, #3
 8006a5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a5e:	00d4      	lsls	r4, r2, #3
 8006a60:	4622      	mov	r2, r4
 8006a62:	462b      	mov	r3, r5
 8006a64:	1814      	adds	r4, r2, r0
 8006a66:	653c      	str	r4, [r7, #80]	; 0x50
 8006a68:	414b      	adcs	r3, r1
 8006a6a:	657b      	str	r3, [r7, #84]	; 0x54
 8006a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	461a      	mov	r2, r3
 8006a72:	f04f 0300 	mov.w	r3, #0
 8006a76:	1891      	adds	r1, r2, r2
 8006a78:	61b9      	str	r1, [r7, #24]
 8006a7a:	415b      	adcs	r3, r3
 8006a7c:	61fb      	str	r3, [r7, #28]
 8006a7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006a86:	f7f9 fc03 	bl	8000290 <__aeabi_uldivmod>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4b6c      	ldr	r3, [pc, #432]	; (8006c40 <UART_SetConfig+0x38c>)
 8006a90:	fba3 1302 	umull	r1, r3, r3, r2
 8006a94:	095b      	lsrs	r3, r3, #5
 8006a96:	2164      	movs	r1, #100	; 0x64
 8006a98:	fb01 f303 	mul.w	r3, r1, r3
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	3332      	adds	r3, #50	; 0x32
 8006aa2:	4a67      	ldr	r2, [pc, #412]	; (8006c40 <UART_SetConfig+0x38c>)
 8006aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa8:	095b      	lsrs	r3, r3, #5
 8006aaa:	f003 0207 	and.w	r2, r3, #7
 8006aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4432      	add	r2, r6
 8006ab4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ab6:	e0b9      	b.n	8006c2c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ab8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aba:	461c      	mov	r4, r3
 8006abc:	f04f 0500 	mov.w	r5, #0
 8006ac0:	4622      	mov	r2, r4
 8006ac2:	462b      	mov	r3, r5
 8006ac4:	1891      	adds	r1, r2, r2
 8006ac6:	6139      	str	r1, [r7, #16]
 8006ac8:	415b      	adcs	r3, r3
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ad0:	1912      	adds	r2, r2, r4
 8006ad2:	eb45 0303 	adc.w	r3, r5, r3
 8006ad6:	f04f 0000 	mov.w	r0, #0
 8006ada:	f04f 0100 	mov.w	r1, #0
 8006ade:	00d9      	lsls	r1, r3, #3
 8006ae0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ae4:	00d0      	lsls	r0, r2, #3
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	eb12 0804 	adds.w	r8, r2, r4
 8006aee:	eb43 0905 	adc.w	r9, r3, r5
 8006af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f04f 0100 	mov.w	r1, #0
 8006afc:	f04f 0200 	mov.w	r2, #0
 8006b00:	f04f 0300 	mov.w	r3, #0
 8006b04:	008b      	lsls	r3, r1, #2
 8006b06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b0a:	0082      	lsls	r2, r0, #2
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	4649      	mov	r1, r9
 8006b10:	f7f9 fbbe 	bl	8000290 <__aeabi_uldivmod>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4b49      	ldr	r3, [pc, #292]	; (8006c40 <UART_SetConfig+0x38c>)
 8006b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b1e:	095b      	lsrs	r3, r3, #5
 8006b20:	011e      	lsls	r6, r3, #4
 8006b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b24:	4618      	mov	r0, r3
 8006b26:	f04f 0100 	mov.w	r1, #0
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	1894      	adds	r4, r2, r2
 8006b30:	60bc      	str	r4, [r7, #8]
 8006b32:	415b      	adcs	r3, r3
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b3a:	1812      	adds	r2, r2, r0
 8006b3c:	eb41 0303 	adc.w	r3, r1, r3
 8006b40:	f04f 0400 	mov.w	r4, #0
 8006b44:	f04f 0500 	mov.w	r5, #0
 8006b48:	00dd      	lsls	r5, r3, #3
 8006b4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b4e:	00d4      	lsls	r4, r2, #3
 8006b50:	4622      	mov	r2, r4
 8006b52:	462b      	mov	r3, r5
 8006b54:	1814      	adds	r4, r2, r0
 8006b56:	64bc      	str	r4, [r7, #72]	; 0x48
 8006b58:	414b      	adcs	r3, r1
 8006b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f04f 0100 	mov.w	r1, #0
 8006b66:	f04f 0200 	mov.w	r2, #0
 8006b6a:	f04f 0300 	mov.w	r3, #0
 8006b6e:	008b      	lsls	r3, r1, #2
 8006b70:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b74:	0082      	lsls	r2, r0, #2
 8006b76:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006b7a:	f7f9 fb89 	bl	8000290 <__aeabi_uldivmod>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	4b2f      	ldr	r3, [pc, #188]	; (8006c40 <UART_SetConfig+0x38c>)
 8006b84:	fba3 1302 	umull	r1, r3, r3, r2
 8006b88:	095b      	lsrs	r3, r3, #5
 8006b8a:	2164      	movs	r1, #100	; 0x64
 8006b8c:	fb01 f303 	mul.w	r3, r1, r3
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	3332      	adds	r3, #50	; 0x32
 8006b96:	4a2a      	ldr	r2, [pc, #168]	; (8006c40 <UART_SetConfig+0x38c>)
 8006b98:	fba2 2303 	umull	r2, r3, r2, r3
 8006b9c:	095b      	lsrs	r3, r3, #5
 8006b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ba2:	441e      	add	r6, r3
 8006ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f04f 0100 	mov.w	r1, #0
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	1894      	adds	r4, r2, r2
 8006bb2:	603c      	str	r4, [r7, #0]
 8006bb4:	415b      	adcs	r3, r3
 8006bb6:	607b      	str	r3, [r7, #4]
 8006bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bbc:	1812      	adds	r2, r2, r0
 8006bbe:	eb41 0303 	adc.w	r3, r1, r3
 8006bc2:	f04f 0400 	mov.w	r4, #0
 8006bc6:	f04f 0500 	mov.w	r5, #0
 8006bca:	00dd      	lsls	r5, r3, #3
 8006bcc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006bd0:	00d4      	lsls	r4, r2, #3
 8006bd2:	4622      	mov	r2, r4
 8006bd4:	462b      	mov	r3, r5
 8006bd6:	eb12 0a00 	adds.w	sl, r2, r0
 8006bda:	eb43 0b01 	adc.w	fp, r3, r1
 8006bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f04f 0100 	mov.w	r1, #0
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	f04f 0300 	mov.w	r3, #0
 8006bf0:	008b      	lsls	r3, r1, #2
 8006bf2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006bf6:	0082      	lsls	r2, r0, #2
 8006bf8:	4650      	mov	r0, sl
 8006bfa:	4659      	mov	r1, fp
 8006bfc:	f7f9 fb48 	bl	8000290 <__aeabi_uldivmod>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	4b0e      	ldr	r3, [pc, #56]	; (8006c40 <UART_SetConfig+0x38c>)
 8006c06:	fba3 1302 	umull	r1, r3, r3, r2
 8006c0a:	095b      	lsrs	r3, r3, #5
 8006c0c:	2164      	movs	r1, #100	; 0x64
 8006c0e:	fb01 f303 	mul.w	r3, r1, r3
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	3332      	adds	r3, #50	; 0x32
 8006c18:	4a09      	ldr	r2, [pc, #36]	; (8006c40 <UART_SetConfig+0x38c>)
 8006c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1e:	095b      	lsrs	r3, r3, #5
 8006c20:	f003 020f 	and.w	r2, r3, #15
 8006c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4432      	add	r2, r6
 8006c2a:	609a      	str	r2, [r3, #8]
}
 8006c2c:	bf00      	nop
 8006c2e:	377c      	adds	r7, #124	; 0x7c
 8006c30:	46bd      	mov	sp, r7
 8006c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c36:	bf00      	nop
 8006c38:	40011000 	.word	0x40011000
 8006c3c:	40011400 	.word	0x40011400
 8006c40:	51eb851f 	.word	0x51eb851f

08006c44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c44:	b084      	sub	sp, #16
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b084      	sub	sp, #16
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	f107 001c 	add.w	r0, r7, #28
 8006c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d122      	bne.n	8006ca2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d105      	bne.n	8006c96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f001 fb1c 	bl	80082d4 <USB_CoreReset>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]
 8006ca0:	e01a      	b.n	8006cd8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f001 fb10 	bl	80082d4 <USB_CoreReset>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d106      	bne.n	8006ccc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	639a      	str	r2, [r3, #56]	; 0x38
 8006cca:	e005      	b.n	8006cd8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d10b      	bne.n	8006cf6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f043 0206 	orr.w	r2, r3, #6
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f043 0220 	orr.w	r2, r3, #32
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d02:	b004      	add	sp, #16
 8006d04:	4770      	bx	lr
	...

08006d08 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	4613      	mov	r3, r2
 8006d14:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006d16:	79fb      	ldrb	r3, [r7, #7]
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d165      	bne.n	8006de8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4a41      	ldr	r2, [pc, #260]	; (8006e24 <USB_SetTurnaroundTime+0x11c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d906      	bls.n	8006d32 <USB_SetTurnaroundTime+0x2a>
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	4a40      	ldr	r2, [pc, #256]	; (8006e28 <USB_SetTurnaroundTime+0x120>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d202      	bcs.n	8006d32 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006d2c:	230f      	movs	r3, #15
 8006d2e:	617b      	str	r3, [r7, #20]
 8006d30:	e062      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	4a3c      	ldr	r2, [pc, #240]	; (8006e28 <USB_SetTurnaroundTime+0x120>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d306      	bcc.n	8006d48 <USB_SetTurnaroundTime+0x40>
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	4a3b      	ldr	r2, [pc, #236]	; (8006e2c <USB_SetTurnaroundTime+0x124>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d202      	bcs.n	8006d48 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006d42:	230e      	movs	r3, #14
 8006d44:	617b      	str	r3, [r7, #20]
 8006d46:	e057      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	4a38      	ldr	r2, [pc, #224]	; (8006e2c <USB_SetTurnaroundTime+0x124>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d306      	bcc.n	8006d5e <USB_SetTurnaroundTime+0x56>
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	4a37      	ldr	r2, [pc, #220]	; (8006e30 <USB_SetTurnaroundTime+0x128>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d202      	bcs.n	8006d5e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006d58:	230d      	movs	r3, #13
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	e04c      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	4a33      	ldr	r2, [pc, #204]	; (8006e30 <USB_SetTurnaroundTime+0x128>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d306      	bcc.n	8006d74 <USB_SetTurnaroundTime+0x6c>
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	4a32      	ldr	r2, [pc, #200]	; (8006e34 <USB_SetTurnaroundTime+0x12c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d802      	bhi.n	8006d74 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d6e:	230c      	movs	r3, #12
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	e041      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	4a2f      	ldr	r2, [pc, #188]	; (8006e34 <USB_SetTurnaroundTime+0x12c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d906      	bls.n	8006d8a <USB_SetTurnaroundTime+0x82>
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	4a2e      	ldr	r2, [pc, #184]	; (8006e38 <USB_SetTurnaroundTime+0x130>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d802      	bhi.n	8006d8a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d84:	230b      	movs	r3, #11
 8006d86:	617b      	str	r3, [r7, #20]
 8006d88:	e036      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	4a2a      	ldr	r2, [pc, #168]	; (8006e38 <USB_SetTurnaroundTime+0x130>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d906      	bls.n	8006da0 <USB_SetTurnaroundTime+0x98>
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	4a29      	ldr	r2, [pc, #164]	; (8006e3c <USB_SetTurnaroundTime+0x134>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d802      	bhi.n	8006da0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d9a:	230a      	movs	r3, #10
 8006d9c:	617b      	str	r3, [r7, #20]
 8006d9e:	e02b      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4a26      	ldr	r2, [pc, #152]	; (8006e3c <USB_SetTurnaroundTime+0x134>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d906      	bls.n	8006db6 <USB_SetTurnaroundTime+0xae>
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	4a25      	ldr	r2, [pc, #148]	; (8006e40 <USB_SetTurnaroundTime+0x138>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d202      	bcs.n	8006db6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006db0:	2309      	movs	r3, #9
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	e020      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	4a21      	ldr	r2, [pc, #132]	; (8006e40 <USB_SetTurnaroundTime+0x138>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d306      	bcc.n	8006dcc <USB_SetTurnaroundTime+0xc4>
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	4a20      	ldr	r2, [pc, #128]	; (8006e44 <USB_SetTurnaroundTime+0x13c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d802      	bhi.n	8006dcc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006dc6:	2308      	movs	r3, #8
 8006dc8:	617b      	str	r3, [r7, #20]
 8006dca:	e015      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	4a1d      	ldr	r2, [pc, #116]	; (8006e44 <USB_SetTurnaroundTime+0x13c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d906      	bls.n	8006de2 <USB_SetTurnaroundTime+0xda>
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	4a1c      	ldr	r2, [pc, #112]	; (8006e48 <USB_SetTurnaroundTime+0x140>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d202      	bcs.n	8006de2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006ddc:	2307      	movs	r3, #7
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	e00a      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006de2:	2306      	movs	r3, #6
 8006de4:	617b      	str	r3, [r7, #20]
 8006de6:	e007      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d102      	bne.n	8006df4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006dee:	2309      	movs	r3, #9
 8006df0:	617b      	str	r3, [r7, #20]
 8006df2:	e001      	b.n	8006df8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006df4:	2309      	movs	r3, #9
 8006df6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	68da      	ldr	r2, [r3, #12]
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	029b      	lsls	r3, r3, #10
 8006e0c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006e10:	431a      	orrs	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	371c      	adds	r7, #28
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	00d8acbf 	.word	0x00d8acbf
 8006e28:	00e4e1c0 	.word	0x00e4e1c0
 8006e2c:	00f42400 	.word	0x00f42400
 8006e30:	01067380 	.word	0x01067380
 8006e34:	011a499f 	.word	0x011a499f
 8006e38:	01312cff 	.word	0x01312cff
 8006e3c:	014ca43f 	.word	0x014ca43f
 8006e40:	016e3600 	.word	0x016e3600
 8006e44:	01a6ab1f 	.word	0x01a6ab1f
 8006e48:	01e84800 	.word	0x01e84800

08006e4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f043 0201 	orr.w	r2, r3, #1
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f023 0201 	bic.w	r2, r3, #1
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006eac:	78fb      	ldrb	r3, [r7, #3]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d115      	bne.n	8006ede <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ebe:	2001      	movs	r0, #1
 8006ec0:	f7fb fc28 	bl	8002714 <HAL_Delay>
      ms++;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 f972 	bl	80081b4 <USB_GetMode>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d01e      	beq.n	8006f14 <USB_SetCurrentMode+0x84>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b31      	cmp	r3, #49	; 0x31
 8006eda:	d9f0      	bls.n	8006ebe <USB_SetCurrentMode+0x2e>
 8006edc:	e01a      	b.n	8006f14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ede:	78fb      	ldrb	r3, [r7, #3]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d115      	bne.n	8006f10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	f7fb fc0f 	bl	8002714 <HAL_Delay>
      ms++;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 f959 	bl	80081b4 <USB_GetMode>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d005      	beq.n	8006f14 <USB_SetCurrentMode+0x84>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b31      	cmp	r3, #49	; 0x31
 8006f0c:	d9f0      	bls.n	8006ef0 <USB_SetCurrentMode+0x60>
 8006f0e:	e001      	b.n	8006f14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e005      	b.n	8006f20 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b32      	cmp	r3, #50	; 0x32
 8006f18:	d101      	bne.n	8006f1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e000      	b.n	8006f20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f28:	b084      	sub	sp, #16
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b086      	sub	sp, #24
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f42:	2300      	movs	r3, #0
 8006f44:	613b      	str	r3, [r7, #16]
 8006f46:	e009      	b.n	8006f5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	3340      	adds	r3, #64	; 0x40
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	2200      	movs	r2, #0
 8006f54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	613b      	str	r3, [r7, #16]
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	2b0e      	cmp	r3, #14
 8006f60:	d9f2      	bls.n	8006f48 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d11c      	bne.n	8006fa2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f76:	f043 0302 	orr.w	r3, r3, #2
 8006f7a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	639a      	str	r2, [r3, #56]	; 0x38
 8006fa0:	e00b      	b.n	8006fba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fcc:	4619      	mov	r1, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	680b      	ldr	r3, [r1, #0]
 8006fd8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d10c      	bne.n	8006ffa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d104      	bne.n	8006ff0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f945 	bl	8007278 <USB_SetDevSpeed>
 8006fee:	e008      	b.n	8007002 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f940 	bl	8007278 <USB_SetDevSpeed>
 8006ff8:	e003      	b.n	8007002 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ffa:	2103      	movs	r1, #3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f93b 	bl	8007278 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007002:	2110      	movs	r1, #16
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f8f3 	bl	80071f0 <USB_FlushTxFifo>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f90f 	bl	8007238 <USB_FlushRxFifo>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702a:	461a      	mov	r2, r3
 800702c:	2300      	movs	r3, #0
 800702e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007036:	461a      	mov	r2, r3
 8007038:	2300      	movs	r3, #0
 800703a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007042:	461a      	mov	r2, r3
 8007044:	2300      	movs	r3, #0
 8007046:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007048:	2300      	movs	r3, #0
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	e043      	b.n	80070d6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007060:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007064:	d118      	bne.n	8007098 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10a      	bne.n	8007082 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007078:	461a      	mov	r2, r3
 800707a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800707e:	6013      	str	r3, [r2, #0]
 8007080:	e013      	b.n	80070aa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4413      	add	r3, r2
 800708a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708e:	461a      	mov	r2, r3
 8007090:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	e008      	b.n	80070aa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a4:	461a      	mov	r2, r3
 80070a6:	2300      	movs	r3, #0
 80070a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b6:	461a      	mov	r2, r3
 80070b8:	2300      	movs	r3, #0
 80070ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c8:	461a      	mov	r2, r3
 80070ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	3301      	adds	r3, #1
 80070d4:	613b      	str	r3, [r7, #16]
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d3b7      	bcc.n	800704e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070de:	2300      	movs	r3, #0
 80070e0:	613b      	str	r3, [r7, #16]
 80070e2:	e043      	b.n	800716c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070fa:	d118      	bne.n	800712e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10a      	bne.n	8007118 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	4413      	add	r3, r2
 800710a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710e:	461a      	mov	r2, r3
 8007110:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	e013      	b.n	8007140 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007124:	461a      	mov	r2, r3
 8007126:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800712a:	6013      	str	r3, [r2, #0]
 800712c:	e008      	b.n	8007140 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713a:	461a      	mov	r2, r3
 800713c:	2300      	movs	r3, #0
 800713e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4413      	add	r3, r2
 8007148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800714c:	461a      	mov	r2, r3
 800714e:	2300      	movs	r3, #0
 8007150:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4413      	add	r3, r2
 800715a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715e:	461a      	mov	r2, r3
 8007160:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007164:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	3301      	adds	r3, #1
 800716a:	613b      	str	r3, [r7, #16]
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	429a      	cmp	r2, r3
 8007172:	d3b7      	bcc.n	80070e4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007182:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007186:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007194:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	2b00      	cmp	r3, #0
 800719a:	d105      	bne.n	80071a8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	f043 0210 	orr.w	r2, r3, #16
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	699a      	ldr	r2, [r3, #24]
 80071ac:	4b0f      	ldr	r3, [pc, #60]	; (80071ec <USB_DevInit+0x2c4>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d005      	beq.n	80071c6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	f043 0208 	orr.w	r2, r3, #8
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d107      	bne.n	80071dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071d4:	f043 0304 	orr.w	r3, r3, #4
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3718      	adds	r7, #24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071e8:	b004      	add	sp, #16
 80071ea:	4770      	bx	lr
 80071ec:	803c3800 	.word	0x803c3800

080071f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071fa:	2300      	movs	r3, #0
 80071fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	019b      	lsls	r3, r3, #6
 8007202:	f043 0220 	orr.w	r2, r3, #32
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	3301      	adds	r3, #1
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	4a08      	ldr	r2, [pc, #32]	; (8007234 <USB_FlushTxFifo+0x44>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d901      	bls.n	800721a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e006      	b.n	8007228 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b20      	cmp	r3, #32
 8007224:	d0f1      	beq.n	800720a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	00030d40 	.word	0x00030d40

08007238 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2210      	movs	r2, #16
 8007248:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3301      	adds	r3, #1
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	4a08      	ldr	r2, [pc, #32]	; (8007274 <USB_FlushRxFifo+0x3c>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d901      	bls.n	800725a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e006      	b.n	8007268 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	f003 0310 	and.w	r3, r3, #16
 8007262:	2b10      	cmp	r3, #16
 8007264:	d0f1      	beq.n	800724a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	00030d40 	.word	0x00030d40

08007278 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	460b      	mov	r3, r1
 8007282:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	78fb      	ldrb	r3, [r7, #3]
 8007292:	68f9      	ldr	r1, [r7, #12]
 8007294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007298:	4313      	orrs	r3, r2
 800729a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b087      	sub	sp, #28
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f003 0306 	and.w	r3, r3, #6
 80072c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d102      	bne.n	80072d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80072ca:	2300      	movs	r3, #0
 80072cc:	75fb      	strb	r3, [r7, #23]
 80072ce:	e00a      	b.n	80072e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d002      	beq.n	80072dc <USB_GetDevSpeed+0x32>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b06      	cmp	r3, #6
 80072da:	d102      	bne.n	80072e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80072dc:	2302      	movs	r3, #2
 80072de:	75fb      	strb	r3, [r7, #23]
 80072e0:	e001      	b.n	80072e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80072e2:	230f      	movs	r3, #15
 80072e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	371c      	adds	r7, #28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	785b      	ldrb	r3, [r3, #1]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d13a      	bne.n	8007386 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007316:	69da      	ldr	r2, [r3, #28]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	f003 030f 	and.w	r3, r3, #15
 8007320:	2101      	movs	r1, #1
 8007322:	fa01 f303 	lsl.w	r3, r1, r3
 8007326:	b29b      	uxth	r3, r3
 8007328:	68f9      	ldr	r1, [r7, #12]
 800732a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800732e:	4313      	orrs	r3, r2
 8007330:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d155      	bne.n	80073f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	015a      	lsls	r2, r3, #5
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	4413      	add	r3, r2
 8007350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	78db      	ldrb	r3, [r3, #3]
 8007362:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007364:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	059b      	lsls	r3, r3, #22
 800736a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800736c:	4313      	orrs	r3, r2
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	0151      	lsls	r1, r2, #5
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	440a      	add	r2, r1
 8007376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800737a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800737e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007382:	6013      	str	r3, [r2, #0]
 8007384:	e036      	b.n	80073f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738c:	69da      	ldr	r2, [r3, #28]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	f003 030f 	and.w	r3, r3, #15
 8007396:	2101      	movs	r1, #1
 8007398:	fa01 f303 	lsl.w	r3, r1, r3
 800739c:	041b      	lsls	r3, r3, #16
 800739e:	68f9      	ldr	r1, [r7, #12]
 80073a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073a4:	4313      	orrs	r3, r2
 80073a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d11a      	bne.n	80073f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	78db      	ldrb	r3, [r3, #3]
 80073d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073da:	430b      	orrs	r3, r1
 80073dc:	4313      	orrs	r3, r2
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	0151      	lsls	r1, r2, #5
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	440a      	add	r2, r1
 80073e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
	...

08007404 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	785b      	ldrb	r3, [r3, #1]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d161      	bne.n	80074e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007436:	d11f      	bne.n	8007478 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	0151      	lsls	r1, r2, #5
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	440a      	add	r2, r1
 800744e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007452:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007456:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	0151      	lsls	r1, r2, #5
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	440a      	add	r2, r1
 800746e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007472:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007476:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	f003 030f 	and.w	r3, r3, #15
 8007488:	2101      	movs	r1, #1
 800748a:	fa01 f303 	lsl.w	r3, r1, r3
 800748e:	b29b      	uxth	r3, r3
 8007490:	43db      	mvns	r3, r3
 8007492:	68f9      	ldr	r1, [r7, #12]
 8007494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007498:	4013      	ands	r3, r2
 800749a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a2:	69da      	ldr	r2, [r3, #28]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	f003 030f 	and.w	r3, r3, #15
 80074ac:	2101      	movs	r1, #1
 80074ae:	fa01 f303 	lsl.w	r3, r1, r3
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	43db      	mvns	r3, r3
 80074b6:	68f9      	ldr	r1, [r7, #12]
 80074b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074bc:	4013      	ands	r3, r2
 80074be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	0159      	lsls	r1, r3, #5
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	440b      	add	r3, r1
 80074d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074da:	4619      	mov	r1, r3
 80074dc:	4b35      	ldr	r3, [pc, #212]	; (80075b4 <USB_DeactivateEndpoint+0x1b0>)
 80074de:	4013      	ands	r3, r2
 80074e0:	600b      	str	r3, [r1, #0]
 80074e2:	e060      	b.n	80075a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074fa:	d11f      	bne.n	800753c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4413      	add	r3, r2
 8007504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	0151      	lsls	r1, r2, #5
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	440a      	add	r2, r1
 8007512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007516:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800751a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	0151      	lsls	r1, r2, #5
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	440a      	add	r2, r1
 8007532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007536:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800753a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007542:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	f003 030f 	and.w	r3, r3, #15
 800754c:	2101      	movs	r1, #1
 800754e:	fa01 f303 	lsl.w	r3, r1, r3
 8007552:	041b      	lsls	r3, r3, #16
 8007554:	43db      	mvns	r3, r3
 8007556:	68f9      	ldr	r1, [r7, #12]
 8007558:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800755c:	4013      	ands	r3, r2
 800755e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007566:	69da      	ldr	r2, [r3, #28]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	f003 030f 	and.w	r3, r3, #15
 8007570:	2101      	movs	r1, #1
 8007572:	fa01 f303 	lsl.w	r3, r1, r3
 8007576:	041b      	lsls	r3, r3, #16
 8007578:	43db      	mvns	r3, r3
 800757a:	68f9      	ldr	r1, [r7, #12]
 800757c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007580:	4013      	ands	r3, r2
 8007582:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	0159      	lsls	r1, r3, #5
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	440b      	add	r3, r1
 800759a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759e:	4619      	mov	r1, r3
 80075a0:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <USB_DeactivateEndpoint+0x1b4>)
 80075a2:	4013      	ands	r3, r2
 80075a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	ec337800 	.word	0xec337800
 80075b8:	eff37800 	.word	0xeff37800

080075bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b08a      	sub	sp, #40	; 0x28
 80075c0:	af02      	add	r7, sp, #8
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	4613      	mov	r3, r2
 80075c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	785b      	ldrb	r3, [r3, #1]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	f040 815c 	bne.w	8007896 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d132      	bne.n	800764c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	0151      	lsls	r1, r2, #5
 80075f8:	69fa      	ldr	r2, [r7, #28]
 80075fa:	440a      	add	r2, r1
 80075fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007600:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007604:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007608:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	69ba      	ldr	r2, [r7, #24]
 800761a:	0151      	lsls	r1, r2, #5
 800761c:	69fa      	ldr	r2, [r7, #28]
 800761e:	440a      	add	r2, r1
 8007620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007624:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007628:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	0151      	lsls	r1, r2, #5
 800763c:	69fa      	ldr	r2, [r7, #28]
 800763e:	440a      	add	r2, r1
 8007640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007644:	0cdb      	lsrs	r3, r3, #19
 8007646:	04db      	lsls	r3, r3, #19
 8007648:	6113      	str	r3, [r2, #16]
 800764a:	e074      	b.n	8007736 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	4413      	add	r3, r2
 8007654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	69ba      	ldr	r2, [r7, #24]
 800765c:	0151      	lsls	r1, r2, #5
 800765e:	69fa      	ldr	r2, [r7, #28]
 8007660:	440a      	add	r2, r1
 8007662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007666:	0cdb      	lsrs	r3, r3, #19
 8007668:	04db      	lsls	r3, r3, #19
 800766a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	4413      	add	r3, r2
 8007674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	0151      	lsls	r1, r2, #5
 800767e:	69fa      	ldr	r2, [r7, #28]
 8007680:	440a      	add	r2, r1
 8007682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007686:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800768a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800768e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	6959      	ldr	r1, [r3, #20]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	440b      	add	r3, r1
 80076a8:	1e59      	subs	r1, r3, #1
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80076b2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80076b4:	4b9d      	ldr	r3, [pc, #628]	; (800792c <USB_EPStartXfer+0x370>)
 80076b6:	400b      	ands	r3, r1
 80076b8:	69b9      	ldr	r1, [r7, #24]
 80076ba:	0148      	lsls	r0, r1, #5
 80076bc:	69f9      	ldr	r1, [r7, #28]
 80076be:	4401      	add	r1, r0
 80076c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076c4:	4313      	orrs	r3, r2
 80076c6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d4:	691a      	ldr	r2, [r3, #16]
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076de:	69b9      	ldr	r1, [r7, #24]
 80076e0:	0148      	lsls	r0, r1, #5
 80076e2:	69f9      	ldr	r1, [r7, #28]
 80076e4:	4401      	add	r1, r0
 80076e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076ea:	4313      	orrs	r3, r2
 80076ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	78db      	ldrb	r3, [r3, #3]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d11f      	bne.n	8007736 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	0151      	lsls	r1, r2, #5
 8007708:	69fa      	ldr	r2, [r7, #28]
 800770a:	440a      	add	r2, r1
 800770c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007710:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007714:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	69ba      	ldr	r2, [r7, #24]
 8007726:	0151      	lsls	r1, r2, #5
 8007728:	69fa      	ldr	r2, [r7, #28]
 800772a:	440a      	add	r2, r1
 800772c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007730:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007734:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007736:	79fb      	ldrb	r3, [r7, #7]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d14b      	bne.n	80077d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d009      	beq.n	8007758 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007750:	461a      	mov	r2, r3
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	78db      	ldrb	r3, [r3, #3]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d128      	bne.n	80077b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800776c:	2b00      	cmp	r3, #0
 800776e:	d110      	bne.n	8007792 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	0151      	lsls	r1, r2, #5
 8007782:	69fa      	ldr	r2, [r7, #28]
 8007784:	440a      	add	r2, r1
 8007786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800778a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	e00f      	b.n	80077b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	015a      	lsls	r2, r3, #5
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	4413      	add	r3, r2
 800779a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	69ba      	ldr	r2, [r7, #24]
 80077a2:	0151      	lsls	r1, r2, #5
 80077a4:	69fa      	ldr	r2, [r7, #28]
 80077a6:	440a      	add	r2, r1
 80077a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	0151      	lsls	r1, r2, #5
 80077c4:	69fa      	ldr	r2, [r7, #28]
 80077c6:	440a      	add	r2, r1
 80077c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	e12f      	b.n	8007a34 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	0151      	lsls	r1, r2, #5
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	440a      	add	r2, r1
 80077ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	78db      	ldrb	r3, [r3, #3]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d015      	beq.n	8007828 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 8117 	beq.w	8007a34 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800780c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	f003 030f 	and.w	r3, r3, #15
 8007816:	2101      	movs	r1, #1
 8007818:	fa01 f303 	lsl.w	r3, r1, r3
 800781c:	69f9      	ldr	r1, [r7, #28]
 800781e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007822:	4313      	orrs	r3, r2
 8007824:	634b      	str	r3, [r1, #52]	; 0x34
 8007826:	e105      	b.n	8007a34 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007834:	2b00      	cmp	r3, #0
 8007836:	d110      	bne.n	800785a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	0151      	lsls	r1, r2, #5
 800784a:	69fa      	ldr	r2, [r7, #28]
 800784c:	440a      	add	r2, r1
 800784e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007852:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	e00f      	b.n	800787a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	015a      	lsls	r2, r3, #5
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	4413      	add	r3, r2
 8007862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	69ba      	ldr	r2, [r7, #24]
 800786a:	0151      	lsls	r1, r2, #5
 800786c:	69fa      	ldr	r2, [r7, #28]
 800786e:	440a      	add	r2, r1
 8007870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007878:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	68d9      	ldr	r1, [r3, #12]
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	781a      	ldrb	r2, [r3, #0]
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	b298      	uxth	r0, r3
 8007888:	79fb      	ldrb	r3, [r7, #7]
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	4603      	mov	r3, r0
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 fa2b 	bl	8007cea <USB_WritePacket>
 8007894:	e0ce      	b.n	8007a34 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	4413      	add	r3, r2
 800789e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	0151      	lsls	r1, r2, #5
 80078a8:	69fa      	ldr	r2, [r7, #28]
 80078aa:	440a      	add	r2, r1
 80078ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078b0:	0cdb      	lsrs	r3, r3, #19
 80078b2:	04db      	lsls	r3, r3, #19
 80078b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	0151      	lsls	r1, r2, #5
 80078c8:	69fa      	ldr	r2, [r7, #28]
 80078ca:	440a      	add	r2, r1
 80078cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d126      	bne.n	8007930 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ee:	691a      	ldr	r2, [r3, #16]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078f8:	69b9      	ldr	r1, [r7, #24]
 80078fa:	0148      	lsls	r0, r1, #5
 80078fc:	69f9      	ldr	r1, [r7, #28]
 80078fe:	4401      	add	r1, r0
 8007900:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007904:	4313      	orrs	r3, r2
 8007906:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	69ba      	ldr	r2, [r7, #24]
 8007918:	0151      	lsls	r1, r2, #5
 800791a:	69fa      	ldr	r2, [r7, #28]
 800791c:	440a      	add	r2, r1
 800791e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007922:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007926:	6113      	str	r3, [r2, #16]
 8007928:	e036      	b.n	8007998 <USB_EPStartXfer+0x3dc>
 800792a:	bf00      	nop
 800792c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	695a      	ldr	r2, [r3, #20]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	4413      	add	r3, r2
 800793a:	1e5a      	subs	r2, r3, #1
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	fbb2 f3f3 	udiv	r3, r2, r3
 8007944:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	4413      	add	r3, r2
 800794e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007952:	691a      	ldr	r2, [r3, #16]
 8007954:	8afb      	ldrh	r3, [r7, #22]
 8007956:	04d9      	lsls	r1, r3, #19
 8007958:	4b39      	ldr	r3, [pc, #228]	; (8007a40 <USB_EPStartXfer+0x484>)
 800795a:	400b      	ands	r3, r1
 800795c:	69b9      	ldr	r1, [r7, #24]
 800795e:	0148      	lsls	r0, r1, #5
 8007960:	69f9      	ldr	r1, [r7, #28]
 8007962:	4401      	add	r1, r0
 8007964:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007968:	4313      	orrs	r3, r2
 800796a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	4413      	add	r3, r2
 8007974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007978:	691a      	ldr	r2, [r3, #16]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	8af9      	ldrh	r1, [r7, #22]
 8007980:	fb01 f303 	mul.w	r3, r1, r3
 8007984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007988:	69b9      	ldr	r1, [r7, #24]
 800798a:	0148      	lsls	r0, r1, #5
 800798c:	69f9      	ldr	r1, [r7, #28]
 800798e:	4401      	add	r1, r0
 8007990:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007994:	4313      	orrs	r3, r2
 8007996:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007998:	79fb      	ldrb	r3, [r7, #7]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d10d      	bne.n	80079ba <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d009      	beq.n	80079ba <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	68d9      	ldr	r1, [r3, #12]
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b6:	460a      	mov	r2, r1
 80079b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	78db      	ldrb	r3, [r3, #3]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d128      	bne.n	8007a14 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d110      	bne.n	80079f4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	0151      	lsls	r1, r2, #5
 80079e4:	69fa      	ldr	r2, [r7, #28]
 80079e6:	440a      	add	r2, r1
 80079e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079f0:	6013      	str	r3, [r2, #0]
 80079f2:	e00f      	b.n	8007a14 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69ba      	ldr	r2, [r7, #24]
 8007a04:	0151      	lsls	r1, r2, #5
 8007a06:	69fa      	ldr	r2, [r7, #28]
 8007a08:	440a      	add	r2, r1
 8007a0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	015a      	lsls	r2, r3, #5
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	0151      	lsls	r1, r2, #5
 8007a26:	69fa      	ldr	r2, [r7, #28]
 8007a28:	440a      	add	r2, r1
 8007a2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3720      	adds	r7, #32
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	1ff80000 	.word	0x1ff80000

08007a44 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b087      	sub	sp, #28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	785b      	ldrb	r3, [r3, #1]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	f040 80cd 	bne.w	8007c00 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d132      	bne.n	8007ad4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	0151      	lsls	r1, r2, #5
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	440a      	add	r2, r1
 8007a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	015a      	lsls	r2, r3, #5
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	0151      	lsls	r1, r2, #5
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	440a      	add	r2, r1
 8007aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ab0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	0151      	lsls	r1, r2, #5
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	440a      	add	r2, r1
 8007ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007acc:	0cdb      	lsrs	r3, r3, #19
 8007ace:	04db      	lsls	r3, r3, #19
 8007ad0:	6113      	str	r3, [r2, #16]
 8007ad2:	e04e      	b.n	8007b72 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	0151      	lsls	r1, r2, #5
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	440a      	add	r2, r1
 8007aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aee:	0cdb      	lsrs	r3, r3, #19
 8007af0:	04db      	lsls	r3, r3, #19
 8007af2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	0151      	lsls	r1, r2, #5
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	440a      	add	r2, r1
 8007b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b16:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	695a      	ldr	r2, [r3, #20]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d903      	bls.n	8007b2c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	689a      	ldr	r2, [r3, #8]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	0151      	lsls	r1, r2, #5
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	440a      	add	r2, r1
 8007b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	015a      	lsls	r2, r3, #5
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b58:	691a      	ldr	r2, [r3, #16]
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b62:	6939      	ldr	r1, [r7, #16]
 8007b64:	0148      	lsls	r0, r1, #5
 8007b66:	6979      	ldr	r1, [r7, #20]
 8007b68:	4401      	add	r1, r0
 8007b6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007b72:	79fb      	ldrb	r3, [r7, #7]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d11e      	bne.n	8007bb6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d009      	beq.n	8007b94 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	0151      	lsls	r1, r2, #5
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	440a      	add	r2, r1
 8007baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	e092      	b.n	8007cdc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	0151      	lsls	r1, r2, #5
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	440a      	add	r2, r1
 8007bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bd4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d07e      	beq.n	8007cdc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	f003 030f 	and.w	r3, r3, #15
 8007bee:	2101      	movs	r1, #1
 8007bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8007bf4:	6979      	ldr	r1, [r7, #20]
 8007bf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	634b      	str	r3, [r1, #52]	; 0x34
 8007bfe:	e06d      	b.n	8007cdc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	015a      	lsls	r2, r3, #5
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	4413      	add	r3, r2
 8007c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	0151      	lsls	r1, r2, #5
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	440a      	add	r2, r1
 8007c16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c1a:	0cdb      	lsrs	r3, r3, #19
 8007c1c:	04db      	lsls	r3, r3, #19
 8007c1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	0151      	lsls	r1, r2, #5
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	440a      	add	r2, r1
 8007c36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c42:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	015a      	lsls	r2, r3, #5
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	0151      	lsls	r1, r2, #5
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	440a      	add	r2, r1
 8007c6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c80:	691a      	ldr	r2, [r3, #16]
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c8a:	6939      	ldr	r1, [r7, #16]
 8007c8c:	0148      	lsls	r0, r1, #5
 8007c8e:	6979      	ldr	r1, [r7, #20]
 8007c90:	4401      	add	r1, r0
 8007c92:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c96:	4313      	orrs	r3, r2
 8007c98:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007c9a:	79fb      	ldrb	r3, [r7, #7]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d10d      	bne.n	8007cbc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d009      	beq.n	8007cbc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	68d9      	ldr	r1, [r3, #12]
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb8:	460a      	mov	r2, r1
 8007cba:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	0151      	lsls	r1, r2, #5
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	440a      	add	r2, r1
 8007cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007cda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	371c      	adds	r7, #28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b089      	sub	sp, #36	; 0x24
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	60b9      	str	r1, [r7, #8]
 8007cf4:	4611      	mov	r1, r2
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	71fb      	strb	r3, [r7, #7]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007d08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d123      	bne.n	8007d58 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007d10:	88bb      	ldrh	r3, [r7, #4]
 8007d12:	3303      	adds	r3, #3
 8007d14:	089b      	lsrs	r3, r3, #2
 8007d16:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d18:	2300      	movs	r3, #0
 8007d1a:	61bb      	str	r3, [r7, #24]
 8007d1c:	e018      	b.n	8007d50 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d1e:	79fb      	ldrb	r3, [r7, #7]
 8007d20:	031a      	lsls	r2, r3, #12
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	3301      	adds	r3, #1
 8007d36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	3301      	adds	r3, #1
 8007d42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	3301      	adds	r3, #1
 8007d48:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	61bb      	str	r3, [r7, #24]
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d3e2      	bcc.n	8007d1e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3724      	adds	r7, #36	; 0x24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b08b      	sub	sp, #44	; 0x2c
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	60f8      	str	r0, [r7, #12]
 8007d6e:	60b9      	str	r1, [r7, #8]
 8007d70:	4613      	mov	r3, r2
 8007d72:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d7c:	88fb      	ldrh	r3, [r7, #6]
 8007d7e:	089b      	lsrs	r3, r3, #2
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007d84:	88fb      	ldrh	r3, [r7, #6]
 8007d86:	f003 0303 	and.w	r3, r3, #3
 8007d8a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	623b      	str	r3, [r7, #32]
 8007d90:	e014      	b.n	8007dbc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	3301      	adds	r3, #1
 8007da2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da6:	3301      	adds	r3, #1
 8007da8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	3301      	adds	r3, #1
 8007dae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	3301      	adds	r3, #1
 8007db4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007db6:	6a3b      	ldr	r3, [r7, #32]
 8007db8:	3301      	adds	r3, #1
 8007dba:	623b      	str	r3, [r7, #32]
 8007dbc:	6a3a      	ldr	r2, [r7, #32]
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d3e6      	bcc.n	8007d92 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007dc4:	8bfb      	ldrh	r3, [r7, #30]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d01e      	beq.n	8007e08 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	f107 0310 	add.w	r3, r7, #16
 8007dda:	6812      	ldr	r2, [r2, #0]
 8007ddc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	00db      	lsls	r3, r3, #3
 8007de6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	701a      	strb	r2, [r3, #0]
      i++;
 8007df0:	6a3b      	ldr	r3, [r7, #32]
 8007df2:	3301      	adds	r3, #1
 8007df4:	623b      	str	r3, [r7, #32]
      pDest++;
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	3301      	adds	r3, #1
 8007dfa:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007dfc:	8bfb      	ldrh	r3, [r7, #30]
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007e02:	8bfb      	ldrh	r3, [r7, #30]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1ea      	bne.n	8007dde <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	372c      	adds	r7, #44	; 0x2c
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b085      	sub	sp, #20
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	785b      	ldrb	r3, [r3, #1]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d12c      	bne.n	8007e8c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	db12      	blt.n	8007e6a <USB_EPSetStall+0x54>
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00f      	beq.n	8007e6a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	015a      	lsls	r2, r3, #5
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	4413      	add	r3, r2
 8007e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	0151      	lsls	r1, r2, #5
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	440a      	add	r2, r1
 8007e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e68:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	0151      	lsls	r1, r2, #5
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	440a      	add	r2, r1
 8007e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e88:	6013      	str	r3, [r2, #0]
 8007e8a:	e02b      	b.n	8007ee4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	db12      	blt.n	8007ec4 <USB_EPSetStall+0xae>
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00f      	beq.n	8007ec4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	0151      	lsls	r1, r2, #5
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	440a      	add	r2, r1
 8007eba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ebe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ec2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	0151      	lsls	r1, r2, #5
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	440a      	add	r2, r1
 8007eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ede:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ee2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b085      	sub	sp, #20
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	785b      	ldrb	r3, [r3, #1]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d128      	bne.n	8007f60 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	0151      	lsls	r1, r2, #5
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	440a      	add	r2, r1
 8007f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	78db      	ldrb	r3, [r3, #3]
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d003      	beq.n	8007f3e <USB_EPClearStall+0x4c>
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	78db      	ldrb	r3, [r3, #3]
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d138      	bne.n	8007fb0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	015a      	lsls	r2, r3, #5
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	0151      	lsls	r1, r2, #5
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	440a      	add	r2, r1
 8007f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	e027      	b.n	8007fb0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	0151      	lsls	r1, r2, #5
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	440a      	add	r2, r1
 8007f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	78db      	ldrb	r3, [r3, #3]
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d003      	beq.n	8007f90 <USB_EPClearStall+0x9e>
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	78db      	ldrb	r3, [r3, #3]
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d10f      	bne.n	8007fb0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	0151      	lsls	r1, r2, #5
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	440a      	add	r2, r1
 8007fa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fae:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b085      	sub	sp, #20
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fdc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007fe0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	78fb      	ldrb	r3, [r7, #3]
 8007fec:	011b      	lsls	r3, r3, #4
 8007fee:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007ff2:	68f9      	ldr	r1, [r7, #12]
 8007ff4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800800a:	b480      	push	{r7}
 800800c:	b085      	sub	sp, #20
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008024:	f023 0303 	bic.w	r3, r3, #3
 8008028:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008038:	f023 0302 	bic.w	r3, r3, #2
 800803c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008066:	f023 0303 	bic.w	r3, r3, #3
 800806a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800807a:	f043 0302 	orr.w	r3, r3, #2
 800807e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800808e:	b480      	push	{r7}
 8008090:	b085      	sub	sp, #20
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	4013      	ands	r3, r2
 80080a4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80080a6:	68fb      	ldr	r3, [r7, #12]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	4013      	ands	r3, r2
 80080d6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	0c1b      	lsrs	r3, r3, #16
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	4013      	ands	r3, r2
 800810a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	b29b      	uxth	r3, r3
}
 8008110:	4618      	mov	r0, r3
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800812c:	78fb      	ldrb	r3, [r7, #3]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	4013      	ands	r3, r2
 8008148:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800814a:	68bb      	ldr	r3, [r7, #8]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800817c:	78fb      	ldrb	r3, [r7, #3]
 800817e:	f003 030f 	and.w	r3, r3, #15
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	fa22 f303 	lsr.w	r3, r2, r3
 8008188:	01db      	lsls	r3, r3, #7
 800818a:	b2db      	uxtb	r3, r3
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	4313      	orrs	r3, r2
 8008190:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008192:	78fb      	ldrb	r3, [r7, #3]
 8008194:	015a      	lsls	r2, r3, #5
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	4413      	add	r3, r2
 800819a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	4013      	ands	r3, r2
 80081a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80081a6:	68bb      	ldr	r3, [r7, #8]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	371c      	adds	r7, #28
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	695b      	ldr	r3, [r3, #20]
 80081c0:	f003 0301 	and.w	r3, r3, #1
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80081ee:	f023 0307 	bic.w	r3, r3, #7
 80081f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008206:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
	...

08008218 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	460b      	mov	r3, r1
 8008222:	607a      	str	r2, [r7, #4]
 8008224:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	333c      	adds	r3, #60	; 0x3c
 800822e:	3304      	adds	r3, #4
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	4a26      	ldr	r2, [pc, #152]	; (80082d0 <USB_EP0_OutStart+0xb8>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d90a      	bls.n	8008252 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008248:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800824c:	d101      	bne.n	8008252 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	e037      	b.n	80082c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008258:	461a      	mov	r2, r3
 800825a:	2300      	movs	r3, #0
 800825c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800826c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008270:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008280:	f043 0318 	orr.w	r3, r3, #24
 8008284:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008294:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008298:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800829a:	7afb      	ldrb	r3, [r7, #11]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d10f      	bne.n	80082c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a6:	461a      	mov	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80082be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	371c      	adds	r7, #28
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	4f54300a 	.word	0x4f54300a

080082d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082dc:	2300      	movs	r3, #0
 80082de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	3301      	adds	r3, #1
 80082e4:	60fb      	str	r3, [r7, #12]
 80082e6:	4a13      	ldr	r2, [pc, #76]	; (8008334 <USB_CoreReset+0x60>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d901      	bls.n	80082f0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e01a      	b.n	8008326 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	daf3      	bge.n	80082e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	f043 0201 	orr.w	r2, r3, #1
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3301      	adds	r3, #1
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	4a09      	ldr	r2, [pc, #36]	; (8008334 <USB_CoreReset+0x60>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d901      	bls.n	8008318 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e006      	b.n	8008326 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b01      	cmp	r3, #1
 8008322:	d0f1      	beq.n	8008308 <USB_CoreReset+0x34>

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	00030d40 	.word	0x00030d40

08008338 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	460b      	mov	r3, r1
 8008342:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008344:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008348:	f005 fc92 	bl	800dc70 <USBD_static_malloc>
 800834c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d105      	bne.n	8008360 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800835c:	2302      	movs	r3, #2
 800835e:	e066      	b.n	800842e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	7c1b      	ldrb	r3, [r3, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d119      	bne.n	80083a4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008374:	2202      	movs	r2, #2
 8008376:	2181      	movs	r1, #129	; 0x81
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f005 fb56 	bl	800da2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008384:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008388:	2202      	movs	r2, #2
 800838a:	2101      	movs	r1, #1
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f005 fb4c 	bl	800da2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2210      	movs	r2, #16
 800839e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80083a2:	e016      	b.n	80083d2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80083a4:	2340      	movs	r3, #64	; 0x40
 80083a6:	2202      	movs	r2, #2
 80083a8:	2181      	movs	r1, #129	; 0x81
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f005 fb3d 	bl	800da2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80083b6:	2340      	movs	r3, #64	; 0x40
 80083b8:	2202      	movs	r2, #2
 80083ba:	2101      	movs	r1, #1
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f005 fb34 	bl	800da2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2210      	movs	r2, #16
 80083ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80083d2:	2308      	movs	r3, #8
 80083d4:	2203      	movs	r2, #3
 80083d6:	2182      	movs	r1, #130	; 0x82
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f005 fb26 	bl	800da2a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	7c1b      	ldrb	r3, [r3, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d109      	bne.n	800841c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800840e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008412:	2101      	movs	r1, #1
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f005 fbf7 	bl	800dc08 <USBD_LL_PrepareReceive>
 800841a:	e007      	b.n	800842c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008422:	2340      	movs	r3, #64	; 0x40
 8008424:	2101      	movs	r1, #1
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f005 fbee 	bl	800dc08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b082      	sub	sp, #8
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	460b      	mov	r3, r1
 8008440:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008442:	2181      	movs	r1, #129	; 0x81
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f005 fb16 	bl	800da76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008450:	2101      	movs	r1, #1
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f005 fb0f 	bl	800da76 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008460:	2182      	movs	r1, #130	; 0x82
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f005 fb07 	bl	800da76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00e      	beq.n	80084a0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008492:	4618      	mov	r0, r3
 8008494:	f005 fbfa 	bl	800dc8c <USBD_static_free>
    pdev->pClassData = NULL;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b086      	sub	sp, #24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084bc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d101      	bne.n	80084d4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e0af      	b.n	8008634 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d03f      	beq.n	8008560 <USBD_CDC_Setup+0xb4>
 80084e0:	2b20      	cmp	r3, #32
 80084e2:	f040 809f 	bne.w	8008624 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	88db      	ldrh	r3, [r3, #6]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d02e      	beq.n	800854c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	b25b      	sxtb	r3, r3
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	da16      	bge.n	8008526 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	683a      	ldr	r2, [r7, #0]
 8008502:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008504:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	88d2      	ldrh	r2, [r2, #6]
 800850a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	88db      	ldrh	r3, [r3, #6]
 8008510:	2b07      	cmp	r3, #7
 8008512:	bf28      	it	cs
 8008514:	2307      	movcs	r3, #7
 8008516:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	89fa      	ldrh	r2, [r7, #14]
 800851c:	4619      	mov	r1, r3
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f001 fb19 	bl	8009b56 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008524:	e085      	b.n	8008632 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	785a      	ldrb	r2, [r3, #1]
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	88db      	ldrh	r3, [r3, #6]
 8008534:	b2da      	uxtb	r2, r3
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800853c:	6939      	ldr	r1, [r7, #16]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	88db      	ldrh	r3, [r3, #6]
 8008542:	461a      	mov	r2, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 fb32 	bl	8009bae <USBD_CtlPrepareRx>
      break;
 800854a:	e072      	b.n	8008632 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	7850      	ldrb	r0, [r2, #1]
 8008558:	2200      	movs	r2, #0
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	4798      	blx	r3
      break;
 800855e:	e068      	b.n	8008632 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	785b      	ldrb	r3, [r3, #1]
 8008564:	2b0b      	cmp	r3, #11
 8008566:	d852      	bhi.n	800860e <USBD_CDC_Setup+0x162>
 8008568:	a201      	add	r2, pc, #4	; (adr r2, 8008570 <USBD_CDC_Setup+0xc4>)
 800856a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856e:	bf00      	nop
 8008570:	080085a1 	.word	0x080085a1
 8008574:	0800861d 	.word	0x0800861d
 8008578:	0800860f 	.word	0x0800860f
 800857c:	0800860f 	.word	0x0800860f
 8008580:	0800860f 	.word	0x0800860f
 8008584:	0800860f 	.word	0x0800860f
 8008588:	0800860f 	.word	0x0800860f
 800858c:	0800860f 	.word	0x0800860f
 8008590:	0800860f 	.word	0x0800860f
 8008594:	0800860f 	.word	0x0800860f
 8008598:	080085cb 	.word	0x080085cb
 800859c:	080085f5 	.word	0x080085f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d107      	bne.n	80085bc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80085ac:	f107 030a 	add.w	r3, r7, #10
 80085b0:	2202      	movs	r2, #2
 80085b2:	4619      	mov	r1, r3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f001 face 	bl	8009b56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085ba:	e032      	b.n	8008622 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f001 fa58 	bl	8009a74 <USBD_CtlError>
            ret = USBD_FAIL;
 80085c4:	2303      	movs	r3, #3
 80085c6:	75fb      	strb	r3, [r7, #23]
          break;
 80085c8:	e02b      	b.n	8008622 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	d107      	bne.n	80085e6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80085d6:	f107 030d 	add.w	r3, r7, #13
 80085da:	2201      	movs	r2, #1
 80085dc:	4619      	mov	r1, r3
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f001 fab9 	bl	8009b56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085e4:	e01d      	b.n	8008622 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80085e6:	6839      	ldr	r1, [r7, #0]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f001 fa43 	bl	8009a74 <USBD_CtlError>
            ret = USBD_FAIL;
 80085ee:	2303      	movs	r3, #3
 80085f0:	75fb      	strb	r3, [r7, #23]
          break;
 80085f2:	e016      	b.n	8008622 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d00f      	beq.n	8008620 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f001 fa36 	bl	8009a74 <USBD_CtlError>
            ret = USBD_FAIL;
 8008608:	2303      	movs	r3, #3
 800860a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800860c:	e008      	b.n	8008620 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f001 fa2f 	bl	8009a74 <USBD_CtlError>
          ret = USBD_FAIL;
 8008616:	2303      	movs	r3, #3
 8008618:	75fb      	strb	r3, [r7, #23]
          break;
 800861a:	e002      	b.n	8008622 <USBD_CDC_Setup+0x176>
          break;
 800861c:	bf00      	nop
 800861e:	e008      	b.n	8008632 <USBD_CDC_Setup+0x186>
          break;
 8008620:	bf00      	nop
      }
      break;
 8008622:	e006      	b.n	8008632 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f001 fa24 	bl	8009a74 <USBD_CtlError>
      ret = USBD_FAIL;
 800862c:	2303      	movs	r3, #3
 800862e:	75fb      	strb	r3, [r7, #23]
      break;
 8008630:	bf00      	nop
  }

  return (uint8_t)ret;
 8008632:	7dfb      	ldrb	r3, [r7, #23]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3718      	adds	r7, #24
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800864e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800865a:	2303      	movs	r3, #3
 800865c:	e04f      	b.n	80086fe <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008664:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008666:	78fa      	ldrb	r2, [r7, #3]
 8008668:	6879      	ldr	r1, [r7, #4]
 800866a:	4613      	mov	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	440b      	add	r3, r1
 8008674:	3318      	adds	r3, #24
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d029      	beq.n	80086d0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800867c:	78fa      	ldrb	r2, [r7, #3]
 800867e:	6879      	ldr	r1, [r7, #4]
 8008680:	4613      	mov	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4413      	add	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	440b      	add	r3, r1
 800868a:	3318      	adds	r3, #24
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	78f9      	ldrb	r1, [r7, #3]
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	460b      	mov	r3, r1
 8008694:	00db      	lsls	r3, r3, #3
 8008696:	1a5b      	subs	r3, r3, r1
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4403      	add	r3, r0
 800869c:	3344      	adds	r3, #68	; 0x44
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80086a4:	fb03 f301 	mul.w	r3, r3, r1
 80086a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d110      	bne.n	80086d0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80086ae:	78fa      	ldrb	r2, [r7, #3]
 80086b0:	6879      	ldr	r1, [r7, #4]
 80086b2:	4613      	mov	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	440b      	add	r3, r1
 80086bc:	3318      	adds	r3, #24
 80086be:	2200      	movs	r2, #0
 80086c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80086c2:	78f9      	ldrb	r1, [r7, #3]
 80086c4:	2300      	movs	r3, #0
 80086c6:	2200      	movs	r2, #0
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f005 fa7c 	bl	800dbc6 <USBD_LL_Transmit>
 80086ce:	e015      	b.n	80086fc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00b      	beq.n	80086fc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80086f8:	78fa      	ldrb	r2, [r7, #3]
 80086fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b084      	sub	sp, #16
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	460b      	mov	r3, r1
 8008710:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008718:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008724:	2303      	movs	r3, #3
 8008726:	e015      	b.n	8008754 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008728:	78fb      	ldrb	r3, [r7, #3]
 800872a:	4619      	mov	r1, r3
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f005 fa8c 	bl	800dc4a <USBD_LL_GetRxDataSize>
 8008732:	4602      	mov	r2, r0
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800874e:	4611      	mov	r1, r2
 8008750:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800876a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d101      	bne.n	8008776 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008772:	2303      	movs	r3, #3
 8008774:	e01b      	b.n	80087ae <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d015      	beq.n	80087ac <USBD_CDC_EP0_RxReady+0x50>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008786:	2bff      	cmp	r3, #255	; 0xff
 8008788:	d010      	beq.n	80087ac <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008798:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80087a0:	b292      	uxth	r2, r2
 80087a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	22ff      	movs	r2, #255	; 0xff
 80087a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2243      	movs	r2, #67	; 0x43
 80087c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80087c6:	4b03      	ldr	r3, [pc, #12]	; (80087d4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr
 80087d4:	200000c4 	.word	0x200000c4

080087d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2243      	movs	r2, #67	; 0x43
 80087e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80087e6:	4b03      	ldr	r3, [pc, #12]	; (80087f4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	20000080 	.word	0x20000080

080087f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2243      	movs	r2, #67	; 0x43
 8008804:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008806:	4b03      	ldr	r3, [pc, #12]	; (8008814 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008808:	4618      	mov	r0, r3
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr
 8008814:	20000108 	.word	0x20000108

08008818 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	220a      	movs	r2, #10
 8008824:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008826:	4b03      	ldr	r3, [pc, #12]	; (8008834 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008828:	4618      	mov	r0, r3
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	2000003c 	.word	0x2000003c

08008838 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008848:	2303      	movs	r3, #3
 800884a:	e004      	b.n	8008856 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008862:	b480      	push	{r7}
 8008864:	b087      	sub	sp, #28
 8008866:	af00      	add	r7, sp, #0
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008874:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800887c:	2303      	movs	r3, #3
 800887e:	e008      	b.n	8008892 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	371c      	adds	r7, #28
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800889e:	b480      	push	{r7}
 80088a0:	b085      	sub	sp, #20
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e004      	b.n	80088c4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	683a      	ldr	r2, [r7, #0]
 80088be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088de:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80088e0:	2301      	movs	r3, #1
 80088e2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e01a      	b.n	8008928 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d114      	bne.n	8008926 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2201      	movs	r2, #1
 8008900:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800891a:	2181      	movs	r1, #129	; 0x81
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f005 f952 	bl	800dbc6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008926:	7bfb      	ldrb	r3, [r7, #15]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800893e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800894a:	2303      	movs	r3, #3
 800894c:	e016      	b.n	800897c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	7c1b      	ldrb	r3, [r3, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d109      	bne.n	800896a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800895c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008960:	2101      	movs	r1, #1
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f005 f950 	bl	800dc08 <USBD_LL_PrepareReceive>
 8008968:	e007      	b.n	800897a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008970:	2340      	movs	r3, #64	; 0x40
 8008972:	2101      	movs	r1, #1
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f005 f947 	bl	800dc08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	4613      	mov	r3, r2
 8008990:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008998:	2303      	movs	r3, #3
 800899a:	e01f      	b.n	80089dc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	79fa      	ldrb	r2, [r7, #7]
 80089ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f004 ffc3 	bl	800d95c <USBD_LL_Init>
 80089d6:	4603      	mov	r3, r0
 80089d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80089da:	7dfb      	ldrb	r3, [r7, #23]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089ee:	2300      	movs	r3, #0
 80089f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e016      	b.n	8008a2a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a18:	f107 020e 	add.w	r2, r7, #14
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	4798      	blx	r3
 8008a20:	4602      	mov	r2, r0
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b082      	sub	sp, #8
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f004 ffda 	bl	800d9f4 <USBD_LL_Start>
 8008a40:	4603      	mov	r3, r0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b083      	sub	sp, #12
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d009      	beq.n	8008a8e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	78fa      	ldrb	r2, [r7, #3]
 8008a84:	4611      	mov	r1, r2
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	4798      	blx	r3
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d007      	beq.n	8008abe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	78fa      	ldrb	r2, [r7, #3]
 8008ab8:	4611      	mov	r1, r2
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	4798      	blx	r3
  }

  return USBD_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 ff90 	bl	8009a00 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008aee:	461a      	mov	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008afc:	f003 031f 	and.w	r3, r3, #31
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d01a      	beq.n	8008b3a <USBD_LL_SetupStage+0x72>
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d822      	bhi.n	8008b4e <USBD_LL_SetupStage+0x86>
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <USBD_LL_SetupStage+0x4a>
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d00a      	beq.n	8008b26 <USBD_LL_SetupStage+0x5e>
 8008b10:	e01d      	b.n	8008b4e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fa62 	bl	8008fe4 <USBD_StdDevReq>
 8008b20:	4603      	mov	r3, r0
 8008b22:	73fb      	strb	r3, [r7, #15]
      break;
 8008b24:	e020      	b.n	8008b68 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fac6 	bl	80090c0 <USBD_StdItfReq>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73fb      	strb	r3, [r7, #15]
      break;
 8008b38:	e016      	b.n	8008b68 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b40:	4619      	mov	r1, r3
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fb05 	bl	8009152 <USBD_StdEPReq>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b4c:	e00c      	b.n	8008b68 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f004 ffa9 	bl	800dab4 <USBD_LL_StallEP>
 8008b62:	4603      	mov	r3, r0
 8008b64:	73fb      	strb	r3, [r7, #15]
      break;
 8008b66:	bf00      	nop
  }

  return ret;
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b086      	sub	sp, #24
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	60f8      	str	r0, [r7, #12]
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	607a      	str	r2, [r7, #4]
 8008b7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008b80:	7afb      	ldrb	r3, [r7, #11]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d138      	bne.n	8008bf8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008b8c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b94:	2b03      	cmp	r3, #3
 8008b96:	d14a      	bne.n	8008c2e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	689a      	ldr	r2, [r3, #8]
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d913      	bls.n	8008bcc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	689a      	ldr	r2, [r3, #8]
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	1ad2      	subs	r2, r2, r3
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	68da      	ldr	r2, [r3, #12]
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	bf28      	it	cs
 8008bbe:	4613      	movcs	r3, r2
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	6879      	ldr	r1, [r7, #4]
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f001 f80f 	bl	8009be8 <USBD_CtlContinueRx>
 8008bca:	e030      	b.n	8008c2e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b03      	cmp	r3, #3
 8008bd6:	d10b      	bne.n	8008bf0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d005      	beq.n	8008bf0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f001 f80a 	bl	8009c0a <USBD_CtlSendStatus>
 8008bf6:	e01a      	b.n	8008c2e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b03      	cmp	r3, #3
 8008c02:	d114      	bne.n	8008c2e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00e      	beq.n	8008c2e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	7afa      	ldrb	r2, [r7, #11]
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	4798      	blx	r3
 8008c20:	4603      	mov	r3, r0
 8008c22:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	e000      	b.n	8008c30 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	460b      	mov	r3, r1
 8008c42:	607a      	str	r2, [r7, #4]
 8008c44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008c46:	7afb      	ldrb	r3, [r7, #11]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d16b      	bne.n	8008d24 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3314      	adds	r3, #20
 8008c50:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d156      	bne.n	8008d0a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	689a      	ldr	r2, [r3, #8]
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d914      	bls.n	8008c92 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	689a      	ldr	r2, [r3, #8]
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	1ad2      	subs	r2, r2, r3
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	6879      	ldr	r1, [r7, #4]
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f000 ff84 	bl	8009b8c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c84:	2300      	movs	r3, #0
 8008c86:	2200      	movs	r2, #0
 8008c88:	2100      	movs	r1, #0
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f004 ffbc 	bl	800dc08 <USBD_LL_PrepareReceive>
 8008c90:	e03b      	b.n	8008d0a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	68da      	ldr	r2, [r3, #12]
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d11c      	bne.n	8008cd8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d316      	bcc.n	8008cd8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d20f      	bcs.n	8008cd8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008cb8:	2200      	movs	r2, #0
 8008cba:	2100      	movs	r1, #0
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 ff65 	bl	8009b8c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cca:	2300      	movs	r3, #0
 8008ccc:	2200      	movs	r2, #0
 8008cce:	2100      	movs	r1, #0
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f004 ff99 	bl	800dc08 <USBD_LL_PrepareReceive>
 8008cd6:	e018      	b.n	8008d0a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2b03      	cmp	r3, #3
 8008ce2:	d10b      	bne.n	8008cfc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d005      	beq.n	8008cfc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cfc:	2180      	movs	r1, #128	; 0x80
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f004 fed8 	bl	800dab4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f000 ff93 	bl	8009c30 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d122      	bne.n	8008d5a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f7ff fe98 	bl	8008a4a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008d22:	e01a      	b.n	8008d5a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	2b03      	cmp	r3, #3
 8008d2e:	d114      	bne.n	8008d5a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00e      	beq.n	8008d5a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d42:	695b      	ldr	r3, [r3, #20]
 8008d44:	7afa      	ldrb	r2, [r7, #11]
 8008d46:	4611      	mov	r1, r2
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	4798      	blx	r3
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008d50:	7dfb      	ldrb	r3, [r7, #23]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d001      	beq.n	8008d5a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008d56:	7dfb      	ldrb	r3, [r7, #23]
 8008d58:	e000      	b.n	8008d5c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d101      	bne.n	8008d98 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e02f      	b.n	8008df8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00f      	beq.n	8008dc2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d009      	beq.n	8008dc2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	6852      	ldr	r2, [r2, #4]
 8008dba:	b2d2      	uxtb	r2, r2
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dc2:	2340      	movs	r3, #64	; 0x40
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f004 fe2e 	bl	800da2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2240      	movs	r2, #64	; 0x40
 8008dda:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dde:	2340      	movs	r3, #64	; 0x40
 8008de0:	2200      	movs	r2, #0
 8008de2:	2180      	movs	r1, #128	; 0x80
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f004 fe20 	bl	800da2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2240      	movs	r2, #64	; 0x40
 8008df4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	78fa      	ldrb	r2, [r7, #3]
 8008e10:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e2e:	b2da      	uxtb	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2204      	movs	r2, #4
 8008e3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	2b04      	cmp	r3, #4
 8008e5e:	d106      	bne.n	8008e6e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008e66:	b2da      	uxtb	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d101      	bne.n	8008e92 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	e012      	b.n	8008eb8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b03      	cmp	r3, #3
 8008e9c:	d10b      	bne.n	8008eb6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ea4:	69db      	ldr	r3, [r3, #28]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d005      	beq.n	8008eb6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eb0:	69db      	ldr	r3, [r3, #28]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e014      	b.n	8008f04 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	d10d      	bne.n	8008f02 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d007      	beq.n	8008f02 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	78fa      	ldrb	r2, [r7, #3]
 8008efc:	4611      	mov	r1, r2
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e014      	b.n	8008f50 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d10d      	bne.n	8008f4e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d007      	beq.n	8008f4e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f46:	78fa      	ldrb	r2, [r7, #3]
 8008f48:	4611      	mov	r1, r2
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d009      	beq.n	8008f9c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	6852      	ldr	r2, [r2, #4]
 8008f94:	b2d2      	uxtb	r2, r2
 8008f96:	4611      	mov	r1, r2
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	4798      	blx	r3
  }

  return USBD_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b087      	sub	sp, #28
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008fc4:	8a3b      	ldrh	r3, [r7, #16]
 8008fc6:	021b      	lsls	r3, r3, #8
 8008fc8:	b21a      	sxth	r2, r3
 8008fca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	b21b      	sxth	r3, r3
 8008fd2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008fd4:	89fb      	ldrh	r3, [r7, #14]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	371c      	adds	r7, #28
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
	...

08008fe4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ffa:	2b40      	cmp	r3, #64	; 0x40
 8008ffc:	d005      	beq.n	800900a <USBD_StdDevReq+0x26>
 8008ffe:	2b40      	cmp	r3, #64	; 0x40
 8009000:	d853      	bhi.n	80090aa <USBD_StdDevReq+0xc6>
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00b      	beq.n	800901e <USBD_StdDevReq+0x3a>
 8009006:	2b20      	cmp	r3, #32
 8009008:	d14f      	bne.n	80090aa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	6839      	ldr	r1, [r7, #0]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	4798      	blx	r3
 8009018:	4603      	mov	r3, r0
 800901a:	73fb      	strb	r3, [r7, #15]
      break;
 800901c:	e04a      	b.n	80090b4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	785b      	ldrb	r3, [r3, #1]
 8009022:	2b09      	cmp	r3, #9
 8009024:	d83b      	bhi.n	800909e <USBD_StdDevReq+0xba>
 8009026:	a201      	add	r2, pc, #4	; (adr r2, 800902c <USBD_StdDevReq+0x48>)
 8009028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800902c:	08009081 	.word	0x08009081
 8009030:	08009095 	.word	0x08009095
 8009034:	0800909f 	.word	0x0800909f
 8009038:	0800908b 	.word	0x0800908b
 800903c:	0800909f 	.word	0x0800909f
 8009040:	0800905f 	.word	0x0800905f
 8009044:	08009055 	.word	0x08009055
 8009048:	0800909f 	.word	0x0800909f
 800904c:	08009077 	.word	0x08009077
 8009050:	08009069 	.word	0x08009069
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f9de 	bl	8009418 <USBD_GetDescriptor>
          break;
 800905c:	e024      	b.n	80090a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fb43 	bl	80096ec <USBD_SetAddress>
          break;
 8009066:	e01f      	b.n	80090a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fb82 	bl	8009774 <USBD_SetConfig>
 8009070:	4603      	mov	r3, r0
 8009072:	73fb      	strb	r3, [r7, #15]
          break;
 8009074:	e018      	b.n	80090a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009076:	6839      	ldr	r1, [r7, #0]
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fc21 	bl	80098c0 <USBD_GetConfig>
          break;
 800907e:	e013      	b.n	80090a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fc52 	bl	800992c <USBD_GetStatus>
          break;
 8009088:	e00e      	b.n	80090a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fc81 	bl	8009994 <USBD_SetFeature>
          break;
 8009092:	e009      	b.n	80090a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fc90 	bl	80099bc <USBD_ClrFeature>
          break;
 800909c:	e004      	b.n	80090a8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800909e:	6839      	ldr	r1, [r7, #0]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fce7 	bl	8009a74 <USBD_CtlError>
          break;
 80090a6:	bf00      	nop
      }
      break;
 80090a8:	e004      	b.n	80090b4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fce1 	bl	8009a74 <USBD_CtlError>
      break;
 80090b2:	bf00      	nop
  }

  return ret;
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop

080090c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090d6:	2b40      	cmp	r3, #64	; 0x40
 80090d8:	d005      	beq.n	80090e6 <USBD_StdItfReq+0x26>
 80090da:	2b40      	cmp	r3, #64	; 0x40
 80090dc:	d82f      	bhi.n	800913e <USBD_StdItfReq+0x7e>
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <USBD_StdItfReq+0x26>
 80090e2:	2b20      	cmp	r3, #32
 80090e4:	d12b      	bne.n	800913e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	3b01      	subs	r3, #1
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d81d      	bhi.n	8009130 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	889b      	ldrh	r3, [r3, #4]
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d813      	bhi.n	8009126 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	4798      	blx	r3
 800910c:	4603      	mov	r3, r0
 800910e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	88db      	ldrh	r3, [r3, #6]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d110      	bne.n	800913a <USBD_StdItfReq+0x7a>
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10d      	bne.n	800913a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 fd73 	bl	8009c0a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009124:	e009      	b.n	800913a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009126:	6839      	ldr	r1, [r7, #0]
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 fca3 	bl	8009a74 <USBD_CtlError>
          break;
 800912e:	e004      	b.n	800913a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fc9e 	bl	8009a74 <USBD_CtlError>
          break;
 8009138:	e000      	b.n	800913c <USBD_StdItfReq+0x7c>
          break;
 800913a:	bf00      	nop
      }
      break;
 800913c:	e004      	b.n	8009148 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 fc97 	bl	8009a74 <USBD_CtlError>
      break;
 8009146:	bf00      	nop
  }

  return ret;
 8009148:	7bfb      	ldrb	r3, [r7, #15]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b084      	sub	sp, #16
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800915c:	2300      	movs	r3, #0
 800915e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	889b      	ldrh	r3, [r3, #4]
 8009164:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800916e:	2b40      	cmp	r3, #64	; 0x40
 8009170:	d007      	beq.n	8009182 <USBD_StdEPReq+0x30>
 8009172:	2b40      	cmp	r3, #64	; 0x40
 8009174:	f200 8145 	bhi.w	8009402 <USBD_StdEPReq+0x2b0>
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00c      	beq.n	8009196 <USBD_StdEPReq+0x44>
 800917c:	2b20      	cmp	r3, #32
 800917e:	f040 8140 	bne.w	8009402 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	4798      	blx	r3
 8009190:	4603      	mov	r3, r0
 8009192:	73fb      	strb	r3, [r7, #15]
      break;
 8009194:	e13a      	b.n	800940c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	785b      	ldrb	r3, [r3, #1]
 800919a:	2b03      	cmp	r3, #3
 800919c:	d007      	beq.n	80091ae <USBD_StdEPReq+0x5c>
 800919e:	2b03      	cmp	r3, #3
 80091a0:	f300 8129 	bgt.w	80093f6 <USBD_StdEPReq+0x2a4>
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d07f      	beq.n	80092a8 <USBD_StdEPReq+0x156>
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d03c      	beq.n	8009226 <USBD_StdEPReq+0xd4>
 80091ac:	e123      	b.n	80093f6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d002      	beq.n	80091c0 <USBD_StdEPReq+0x6e>
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d016      	beq.n	80091ec <USBD_StdEPReq+0x9a>
 80091be:	e02c      	b.n	800921a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00d      	beq.n	80091e2 <USBD_StdEPReq+0x90>
 80091c6:	7bbb      	ldrb	r3, [r7, #14]
 80091c8:	2b80      	cmp	r3, #128	; 0x80
 80091ca:	d00a      	beq.n	80091e2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80091cc:	7bbb      	ldrb	r3, [r7, #14]
 80091ce:	4619      	mov	r1, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f004 fc6f 	bl	800dab4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80091d6:	2180      	movs	r1, #128	; 0x80
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f004 fc6b 	bl	800dab4 <USBD_LL_StallEP>
 80091de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80091e0:	e020      	b.n	8009224 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80091e2:	6839      	ldr	r1, [r7, #0]
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 fc45 	bl	8009a74 <USBD_CtlError>
              break;
 80091ea:	e01b      	b.n	8009224 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	885b      	ldrh	r3, [r3, #2]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10e      	bne.n	8009212 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80091f4:	7bbb      	ldrb	r3, [r7, #14]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00b      	beq.n	8009212 <USBD_StdEPReq+0xc0>
 80091fa:	7bbb      	ldrb	r3, [r7, #14]
 80091fc:	2b80      	cmp	r3, #128	; 0x80
 80091fe:	d008      	beq.n	8009212 <USBD_StdEPReq+0xc0>
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	88db      	ldrh	r3, [r3, #6]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d104      	bne.n	8009212 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009208:	7bbb      	ldrb	r3, [r7, #14]
 800920a:	4619      	mov	r1, r3
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f004 fc51 	bl	800dab4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fcf9 	bl	8009c0a <USBD_CtlSendStatus>

              break;
 8009218:	e004      	b.n	8009224 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800921a:	6839      	ldr	r1, [r7, #0]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fc29 	bl	8009a74 <USBD_CtlError>
              break;
 8009222:	bf00      	nop
          }
          break;
 8009224:	e0ec      	b.n	8009400 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b02      	cmp	r3, #2
 8009230:	d002      	beq.n	8009238 <USBD_StdEPReq+0xe6>
 8009232:	2b03      	cmp	r3, #3
 8009234:	d016      	beq.n	8009264 <USBD_StdEPReq+0x112>
 8009236:	e030      	b.n	800929a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009238:	7bbb      	ldrb	r3, [r7, #14]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00d      	beq.n	800925a <USBD_StdEPReq+0x108>
 800923e:	7bbb      	ldrb	r3, [r7, #14]
 8009240:	2b80      	cmp	r3, #128	; 0x80
 8009242:	d00a      	beq.n	800925a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009244:	7bbb      	ldrb	r3, [r7, #14]
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f004 fc33 	bl	800dab4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800924e:	2180      	movs	r1, #128	; 0x80
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f004 fc2f 	bl	800dab4 <USBD_LL_StallEP>
 8009256:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009258:	e025      	b.n	80092a6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fc09 	bl	8009a74 <USBD_CtlError>
              break;
 8009262:	e020      	b.n	80092a6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	885b      	ldrh	r3, [r3, #2]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d11b      	bne.n	80092a4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009272:	2b00      	cmp	r3, #0
 8009274:	d004      	beq.n	8009280 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009276:	7bbb      	ldrb	r3, [r7, #14]
 8009278:	4619      	mov	r1, r3
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f004 fc39 	bl	800daf2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fcc2 	bl	8009c0a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	4798      	blx	r3
 8009294:	4603      	mov	r3, r0
 8009296:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009298:	e004      	b.n	80092a4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800929a:	6839      	ldr	r1, [r7, #0]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fbe9 	bl	8009a74 <USBD_CtlError>
              break;
 80092a2:	e000      	b.n	80092a6 <USBD_StdEPReq+0x154>
              break;
 80092a4:	bf00      	nop
          }
          break;
 80092a6:	e0ab      	b.n	8009400 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	d002      	beq.n	80092ba <USBD_StdEPReq+0x168>
 80092b4:	2b03      	cmp	r3, #3
 80092b6:	d032      	beq.n	800931e <USBD_StdEPReq+0x1cc>
 80092b8:	e097      	b.n	80093ea <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092ba:	7bbb      	ldrb	r3, [r7, #14]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d007      	beq.n	80092d0 <USBD_StdEPReq+0x17e>
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
 80092c2:	2b80      	cmp	r3, #128	; 0x80
 80092c4:	d004      	beq.n	80092d0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fbd3 	bl	8009a74 <USBD_CtlError>
                break;
 80092ce:	e091      	b.n	80093f4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	da0b      	bge.n	80092f0 <USBD_StdEPReq+0x19e>
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
 80092da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092de:	4613      	mov	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4413      	add	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	3310      	adds	r3, #16
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	4413      	add	r3, r2
 80092ec:	3304      	adds	r3, #4
 80092ee:	e00b      	b.n	8009308 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80092f0:	7bbb      	ldrb	r3, [r7, #14]
 80092f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092f6:	4613      	mov	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4413      	add	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	4413      	add	r3, r2
 8009306:	3304      	adds	r3, #4
 8009308:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	2200      	movs	r2, #0
 800930e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	2202      	movs	r2, #2
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fc1d 	bl	8009b56 <USBD_CtlSendData>
              break;
 800931c:	e06a      	b.n	80093f4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800931e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009322:	2b00      	cmp	r3, #0
 8009324:	da11      	bge.n	800934a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009326:	7bbb      	ldrb	r3, [r7, #14]
 8009328:	f003 020f 	and.w	r2, r3, #15
 800932c:	6879      	ldr	r1, [r7, #4]
 800932e:	4613      	mov	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4413      	add	r3, r2
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	440b      	add	r3, r1
 8009338:	3324      	adds	r3, #36	; 0x24
 800933a:	881b      	ldrh	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d117      	bne.n	8009370 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009340:	6839      	ldr	r1, [r7, #0]
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 fb96 	bl	8009a74 <USBD_CtlError>
                  break;
 8009348:	e054      	b.n	80093f4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800934a:	7bbb      	ldrb	r3, [r7, #14]
 800934c:	f003 020f 	and.w	r2, r3, #15
 8009350:	6879      	ldr	r1, [r7, #4]
 8009352:	4613      	mov	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4413      	add	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	440b      	add	r3, r1
 800935c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009360:	881b      	ldrh	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d104      	bne.n	8009370 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009366:	6839      	ldr	r1, [r7, #0]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fb83 	bl	8009a74 <USBD_CtlError>
                  break;
 800936e:	e041      	b.n	80093f4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009370:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009374:	2b00      	cmp	r3, #0
 8009376:	da0b      	bge.n	8009390 <USBD_StdEPReq+0x23e>
 8009378:	7bbb      	ldrb	r3, [r7, #14]
 800937a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800937e:	4613      	mov	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	4413      	add	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	3310      	adds	r3, #16
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	4413      	add	r3, r2
 800938c:	3304      	adds	r3, #4
 800938e:	e00b      	b.n	80093a8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009390:	7bbb      	ldrb	r3, [r7, #14]
 8009392:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009396:	4613      	mov	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	4413      	add	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	4413      	add	r3, r2
 80093a6:	3304      	adds	r3, #4
 80093a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80093aa:	7bbb      	ldrb	r3, [r7, #14]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d002      	beq.n	80093b6 <USBD_StdEPReq+0x264>
 80093b0:	7bbb      	ldrb	r3, [r7, #14]
 80093b2:	2b80      	cmp	r3, #128	; 0x80
 80093b4:	d103      	bne.n	80093be <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2200      	movs	r2, #0
 80093ba:	601a      	str	r2, [r3, #0]
 80093bc:	e00e      	b.n	80093dc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80093be:	7bbb      	ldrb	r3, [r7, #14]
 80093c0:	4619      	mov	r1, r3
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f004 fbb4 	bl	800db30 <USBD_LL_IsStallEP>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d003      	beq.n	80093d6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	2201      	movs	r2, #1
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	e002      	b.n	80093dc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	2200      	movs	r2, #0
 80093da:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	2202      	movs	r2, #2
 80093e0:	4619      	mov	r1, r3
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fbb7 	bl	8009b56 <USBD_CtlSendData>
              break;
 80093e8:	e004      	b.n	80093f4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fb41 	bl	8009a74 <USBD_CtlError>
              break;
 80093f2:	bf00      	nop
          }
          break;
 80093f4:	e004      	b.n	8009400 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80093f6:	6839      	ldr	r1, [r7, #0]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fb3b 	bl	8009a74 <USBD_CtlError>
          break;
 80093fe:	bf00      	nop
      }
      break;
 8009400:	e004      	b.n	800940c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fb35 	bl	8009a74 <USBD_CtlError>
      break;
 800940a:	bf00      	nop
  }

  return ret;
 800940c:	7bfb      	ldrb	r3, [r7, #15]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
	...

08009418 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009422:	2300      	movs	r3, #0
 8009424:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009426:	2300      	movs	r3, #0
 8009428:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800942a:	2300      	movs	r3, #0
 800942c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	885b      	ldrh	r3, [r3, #2]
 8009432:	0a1b      	lsrs	r3, r3, #8
 8009434:	b29b      	uxth	r3, r3
 8009436:	3b01      	subs	r3, #1
 8009438:	2b06      	cmp	r3, #6
 800943a:	f200 8128 	bhi.w	800968e <USBD_GetDescriptor+0x276>
 800943e:	a201      	add	r2, pc, #4	; (adr r2, 8009444 <USBD_GetDescriptor+0x2c>)
 8009440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009444:	08009461 	.word	0x08009461
 8009448:	08009479 	.word	0x08009479
 800944c:	080094b9 	.word	0x080094b9
 8009450:	0800968f 	.word	0x0800968f
 8009454:	0800968f 	.word	0x0800968f
 8009458:	0800962f 	.word	0x0800962f
 800945c:	0800965b 	.word	0x0800965b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	7c12      	ldrb	r2, [r2, #16]
 800946c:	f107 0108 	add.w	r1, r7, #8
 8009470:	4610      	mov	r0, r2
 8009472:	4798      	blx	r3
 8009474:	60f8      	str	r0, [r7, #12]
      break;
 8009476:	e112      	b.n	800969e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	7c1b      	ldrb	r3, [r3, #16]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10d      	bne.n	800949c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009488:	f107 0208 	add.w	r2, r7, #8
 800948c:	4610      	mov	r0, r2
 800948e:	4798      	blx	r3
 8009490:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	3301      	adds	r3, #1
 8009496:	2202      	movs	r2, #2
 8009498:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800949a:	e100      	b.n	800969e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a4:	f107 0208 	add.w	r2, r7, #8
 80094a8:	4610      	mov	r0, r2
 80094aa:	4798      	blx	r3
 80094ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3301      	adds	r3, #1
 80094b2:	2202      	movs	r2, #2
 80094b4:	701a      	strb	r2, [r3, #0]
      break;
 80094b6:	e0f2      	b.n	800969e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	885b      	ldrh	r3, [r3, #2]
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	2b05      	cmp	r3, #5
 80094c0:	f200 80ac 	bhi.w	800961c <USBD_GetDescriptor+0x204>
 80094c4:	a201      	add	r2, pc, #4	; (adr r2, 80094cc <USBD_GetDescriptor+0xb4>)
 80094c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ca:	bf00      	nop
 80094cc:	080094e5 	.word	0x080094e5
 80094d0:	08009519 	.word	0x08009519
 80094d4:	0800954d 	.word	0x0800954d
 80094d8:	08009581 	.word	0x08009581
 80094dc:	080095b5 	.word	0x080095b5
 80094e0:	080095e9 	.word	0x080095e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00b      	beq.n	8009508 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	7c12      	ldrb	r2, [r2, #16]
 80094fc:	f107 0108 	add.w	r1, r7, #8
 8009500:	4610      	mov	r0, r2
 8009502:	4798      	blx	r3
 8009504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009506:	e091      	b.n	800962c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fab2 	bl	8009a74 <USBD_CtlError>
            err++;
 8009510:	7afb      	ldrb	r3, [r7, #11]
 8009512:	3301      	adds	r3, #1
 8009514:	72fb      	strb	r3, [r7, #11]
          break;
 8009516:	e089      	b.n	800962c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00b      	beq.n	800953c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	7c12      	ldrb	r2, [r2, #16]
 8009530:	f107 0108 	add.w	r1, r7, #8
 8009534:	4610      	mov	r0, r2
 8009536:	4798      	blx	r3
 8009538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800953a:	e077      	b.n	800962c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fa98 	bl	8009a74 <USBD_CtlError>
            err++;
 8009544:	7afb      	ldrb	r3, [r7, #11]
 8009546:	3301      	adds	r3, #1
 8009548:	72fb      	strb	r3, [r7, #11]
          break;
 800954a:	e06f      	b.n	800962c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00b      	beq.n	8009570 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	7c12      	ldrb	r2, [r2, #16]
 8009564:	f107 0108 	add.w	r1, r7, #8
 8009568:	4610      	mov	r0, r2
 800956a:	4798      	blx	r3
 800956c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800956e:	e05d      	b.n	800962c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fa7e 	bl	8009a74 <USBD_CtlError>
            err++;
 8009578:	7afb      	ldrb	r3, [r7, #11]
 800957a:	3301      	adds	r3, #1
 800957c:	72fb      	strb	r3, [r7, #11]
          break;
 800957e:	e055      	b.n	800962c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00b      	beq.n	80095a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	7c12      	ldrb	r2, [r2, #16]
 8009598:	f107 0108 	add.w	r1, r7, #8
 800959c:	4610      	mov	r0, r2
 800959e:	4798      	blx	r3
 80095a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095a2:	e043      	b.n	800962c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fa64 	bl	8009a74 <USBD_CtlError>
            err++;
 80095ac:	7afb      	ldrb	r3, [r7, #11]
 80095ae:	3301      	adds	r3, #1
 80095b0:	72fb      	strb	r3, [r7, #11]
          break;
 80095b2:	e03b      	b.n	800962c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ba:	695b      	ldr	r3, [r3, #20]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00b      	beq.n	80095d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095c6:	695b      	ldr	r3, [r3, #20]
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	7c12      	ldrb	r2, [r2, #16]
 80095cc:	f107 0108 	add.w	r1, r7, #8
 80095d0:	4610      	mov	r0, r2
 80095d2:	4798      	blx	r3
 80095d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095d6:	e029      	b.n	800962c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fa4a 	bl	8009a74 <USBD_CtlError>
            err++;
 80095e0:	7afb      	ldrb	r3, [r7, #11]
 80095e2:	3301      	adds	r3, #1
 80095e4:	72fb      	strb	r3, [r7, #11]
          break;
 80095e6:	e021      	b.n	800962c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00b      	beq.n	800960c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	7c12      	ldrb	r2, [r2, #16]
 8009600:	f107 0108 	add.w	r1, r7, #8
 8009604:	4610      	mov	r0, r2
 8009606:	4798      	blx	r3
 8009608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800960a:	e00f      	b.n	800962c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fa30 	bl	8009a74 <USBD_CtlError>
            err++;
 8009614:	7afb      	ldrb	r3, [r7, #11]
 8009616:	3301      	adds	r3, #1
 8009618:	72fb      	strb	r3, [r7, #11]
          break;
 800961a:	e007      	b.n	800962c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fa28 	bl	8009a74 <USBD_CtlError>
          err++;
 8009624:	7afb      	ldrb	r3, [r7, #11]
 8009626:	3301      	adds	r3, #1
 8009628:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800962a:	bf00      	nop
      }
      break;
 800962c:	e037      	b.n	800969e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	7c1b      	ldrb	r3, [r3, #16]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d109      	bne.n	800964a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800963c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800963e:	f107 0208 	add.w	r2, r7, #8
 8009642:	4610      	mov	r0, r2
 8009644:	4798      	blx	r3
 8009646:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009648:	e029      	b.n	800969e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fa11 	bl	8009a74 <USBD_CtlError>
        err++;
 8009652:	7afb      	ldrb	r3, [r7, #11]
 8009654:	3301      	adds	r3, #1
 8009656:	72fb      	strb	r3, [r7, #11]
      break;
 8009658:	e021      	b.n	800969e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	7c1b      	ldrb	r3, [r3, #16]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10d      	bne.n	800967e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966a:	f107 0208 	add.w	r2, r7, #8
 800966e:	4610      	mov	r0, r2
 8009670:	4798      	blx	r3
 8009672:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	3301      	adds	r3, #1
 8009678:	2207      	movs	r2, #7
 800967a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800967c:	e00f      	b.n	800969e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 f9f7 	bl	8009a74 <USBD_CtlError>
        err++;
 8009686:	7afb      	ldrb	r3, [r7, #11]
 8009688:	3301      	adds	r3, #1
 800968a:	72fb      	strb	r3, [r7, #11]
      break;
 800968c:	e007      	b.n	800969e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800968e:	6839      	ldr	r1, [r7, #0]
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f9ef 	bl	8009a74 <USBD_CtlError>
      err++;
 8009696:	7afb      	ldrb	r3, [r7, #11]
 8009698:	3301      	adds	r3, #1
 800969a:	72fb      	strb	r3, [r7, #11]
      break;
 800969c:	bf00      	nop
  }

  if (err != 0U)
 800969e:	7afb      	ldrb	r3, [r7, #11]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d11e      	bne.n	80096e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	88db      	ldrh	r3, [r3, #6]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d016      	beq.n	80096da <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80096ac:	893b      	ldrh	r3, [r7, #8]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00e      	beq.n	80096d0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	88da      	ldrh	r2, [r3, #6]
 80096b6:	893b      	ldrh	r3, [r7, #8]
 80096b8:	4293      	cmp	r3, r2
 80096ba:	bf28      	it	cs
 80096bc:	4613      	movcs	r3, r2
 80096be:	b29b      	uxth	r3, r3
 80096c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80096c2:	893b      	ldrh	r3, [r7, #8]
 80096c4:	461a      	mov	r2, r3
 80096c6:	68f9      	ldr	r1, [r7, #12]
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fa44 	bl	8009b56 <USBD_CtlSendData>
 80096ce:	e009      	b.n	80096e4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f9ce 	bl	8009a74 <USBD_CtlError>
 80096d8:	e004      	b.n	80096e4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fa95 	bl	8009c0a <USBD_CtlSendStatus>
 80096e0:	e000      	b.n	80096e4 <USBD_GetDescriptor+0x2cc>
    return;
 80096e2:	bf00      	nop
  }
}
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop

080096ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	889b      	ldrh	r3, [r3, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d131      	bne.n	8009762 <USBD_SetAddress+0x76>
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	88db      	ldrh	r3, [r3, #6]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d12d      	bne.n	8009762 <USBD_SetAddress+0x76>
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	885b      	ldrh	r3, [r3, #2]
 800970a:	2b7f      	cmp	r3, #127	; 0x7f
 800970c:	d829      	bhi.n	8009762 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	885b      	ldrh	r3, [r3, #2]
 8009712:	b2db      	uxtb	r3, r3
 8009714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009718:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009720:	b2db      	uxtb	r3, r3
 8009722:	2b03      	cmp	r3, #3
 8009724:	d104      	bne.n	8009730 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009726:	6839      	ldr	r1, [r7, #0]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f9a3 	bl	8009a74 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800972e:	e01d      	b.n	800976c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	7bfa      	ldrb	r2, [r7, #15]
 8009734:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	4619      	mov	r1, r3
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f004 fa23 	bl	800db88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fa61 	bl	8009c0a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009748:	7bfb      	ldrb	r3, [r7, #15]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d004      	beq.n	8009758 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2202      	movs	r2, #2
 8009752:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009756:	e009      	b.n	800976c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009760:	e004      	b.n	800976c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f985 	bl	8009a74 <USBD_CtlError>
  }
}
 800976a:	bf00      	nop
 800976c:	bf00      	nop
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	885b      	ldrh	r3, [r3, #2]
 8009786:	b2da      	uxtb	r2, r3
 8009788:	4b4c      	ldr	r3, [pc, #304]	; (80098bc <USBD_SetConfig+0x148>)
 800978a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800978c:	4b4b      	ldr	r3, [pc, #300]	; (80098bc <USBD_SetConfig+0x148>)
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d905      	bls.n	80097a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009794:	6839      	ldr	r1, [r7, #0]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f96c 	bl	8009a74 <USBD_CtlError>
    return USBD_FAIL;
 800979c:	2303      	movs	r3, #3
 800979e:	e088      	b.n	80098b2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d002      	beq.n	80097b2 <USBD_SetConfig+0x3e>
 80097ac:	2b03      	cmp	r3, #3
 80097ae:	d025      	beq.n	80097fc <USBD_SetConfig+0x88>
 80097b0:	e071      	b.n	8009896 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80097b2:	4b42      	ldr	r3, [pc, #264]	; (80098bc <USBD_SetConfig+0x148>)
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d01c      	beq.n	80097f4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80097ba:	4b40      	ldr	r3, [pc, #256]	; (80098bc <USBD_SetConfig+0x148>)
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80097c4:	4b3d      	ldr	r3, [pc, #244]	; (80098bc <USBD_SetConfig+0x148>)
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f7ff f948 	bl	8008a60 <USBD_SetClassConfig>
 80097d0:	4603      	mov	r3, r0
 80097d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d004      	beq.n	80097e4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80097da:	6839      	ldr	r1, [r7, #0]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f949 	bl	8009a74 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80097e2:	e065      	b.n	80098b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fa10 	bl	8009c0a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2203      	movs	r2, #3
 80097ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80097f2:	e05d      	b.n	80098b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fa08 	bl	8009c0a <USBD_CtlSendStatus>
      break;
 80097fa:	e059      	b.n	80098b0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80097fc:	4b2f      	ldr	r3, [pc, #188]	; (80098bc <USBD_SetConfig+0x148>)
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d112      	bne.n	800982a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2202      	movs	r2, #2
 8009808:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800980c:	4b2b      	ldr	r3, [pc, #172]	; (80098bc <USBD_SetConfig+0x148>)
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	461a      	mov	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009816:	4b29      	ldr	r3, [pc, #164]	; (80098bc <USBD_SetConfig+0x148>)
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	4619      	mov	r1, r3
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7ff f93b 	bl	8008a98 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f9f1 	bl	8009c0a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009828:	e042      	b.n	80098b0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800982a:	4b24      	ldr	r3, [pc, #144]	; (80098bc <USBD_SetConfig+0x148>)
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	461a      	mov	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	429a      	cmp	r2, r3
 8009836:	d02a      	beq.n	800988e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	b2db      	uxtb	r3, r3
 800983e:	4619      	mov	r1, r3
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7ff f929 	bl	8008a98 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009846:	4b1d      	ldr	r3, [pc, #116]	; (80098bc <USBD_SetConfig+0x148>)
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	461a      	mov	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009850:	4b1a      	ldr	r3, [pc, #104]	; (80098bc <USBD_SetConfig+0x148>)
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	4619      	mov	r1, r3
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff f902 	bl	8008a60 <USBD_SetClassConfig>
 800985c:	4603      	mov	r3, r0
 800985e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009860:	7bfb      	ldrb	r3, [r7, #15]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00f      	beq.n	8009886 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f903 	bl	8009a74 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	b2db      	uxtb	r3, r3
 8009874:	4619      	mov	r1, r3
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f7ff f90e 	bl	8008a98 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2202      	movs	r2, #2
 8009880:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009884:	e014      	b.n	80098b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f9bf 	bl	8009c0a <USBD_CtlSendStatus>
      break;
 800988c:	e010      	b.n	80098b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f9bb 	bl	8009c0a <USBD_CtlSendStatus>
      break;
 8009894:	e00c      	b.n	80098b0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f8eb 	bl	8009a74 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800989e:	4b07      	ldr	r3, [pc, #28]	; (80098bc <USBD_SetConfig+0x148>)
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	4619      	mov	r1, r3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f7ff f8f7 	bl	8008a98 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80098aa:	2303      	movs	r3, #3
 80098ac:	73fb      	strb	r3, [r7, #15]
      break;
 80098ae:	bf00      	nop
  }

  return ret;
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	2000041e 	.word	0x2000041e

080098c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	88db      	ldrh	r3, [r3, #6]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d004      	beq.n	80098dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 f8cd 	bl	8009a74 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80098da:	e023      	b.n	8009924 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	dc02      	bgt.n	80098ee <USBD_GetConfig+0x2e>
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	dc03      	bgt.n	80098f4 <USBD_GetConfig+0x34>
 80098ec:	e015      	b.n	800991a <USBD_GetConfig+0x5a>
 80098ee:	2b03      	cmp	r3, #3
 80098f0:	d00b      	beq.n	800990a <USBD_GetConfig+0x4a>
 80098f2:	e012      	b.n	800991a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	3308      	adds	r3, #8
 80098fe:	2201      	movs	r2, #1
 8009900:	4619      	mov	r1, r3
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 f927 	bl	8009b56 <USBD_CtlSendData>
        break;
 8009908:	e00c      	b.n	8009924 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	3304      	adds	r3, #4
 800990e:	2201      	movs	r2, #1
 8009910:	4619      	mov	r1, r3
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f91f 	bl	8009b56 <USBD_CtlSendData>
        break;
 8009918:	e004      	b.n	8009924 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 f8a9 	bl	8009a74 <USBD_CtlError>
        break;
 8009922:	bf00      	nop
}
 8009924:	bf00      	nop
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800993c:	b2db      	uxtb	r3, r3
 800993e:	3b01      	subs	r3, #1
 8009940:	2b02      	cmp	r3, #2
 8009942:	d81e      	bhi.n	8009982 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	88db      	ldrh	r3, [r3, #6]
 8009948:	2b02      	cmp	r3, #2
 800994a:	d004      	beq.n	8009956 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800994c:	6839      	ldr	r1, [r7, #0]
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f890 	bl	8009a74 <USBD_CtlError>
        break;
 8009954:	e01a      	b.n	800998c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009962:	2b00      	cmp	r3, #0
 8009964:	d005      	beq.n	8009972 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	f043 0202 	orr.w	r2, r3, #2
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	330c      	adds	r3, #12
 8009976:	2202      	movs	r2, #2
 8009978:	4619      	mov	r1, r3
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f8eb 	bl	8009b56 <USBD_CtlSendData>
      break;
 8009980:	e004      	b.n	800998c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009982:	6839      	ldr	r1, [r7, #0]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f875 	bl	8009a74 <USBD_CtlError>
      break;
 800998a:	bf00      	nop
  }
}
 800998c:	bf00      	nop
 800998e:	3708      	adds	r7, #8
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	885b      	ldrh	r3, [r3, #2]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d106      	bne.n	80099b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2201      	movs	r2, #1
 80099aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f92b 	bl	8009c0a <USBD_CtlSendStatus>
  }
}
 80099b4:	bf00      	nop
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	3b01      	subs	r3, #1
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d80b      	bhi.n	80099ec <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	885b      	ldrh	r3, [r3, #2]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d10c      	bne.n	80099f6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f910 	bl	8009c0a <USBD_CtlSendStatus>
      }
      break;
 80099ea:	e004      	b.n	80099f6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f840 	bl	8009a74 <USBD_CtlError>
      break;
 80099f4:	e000      	b.n	80099f8 <USBD_ClrFeature+0x3c>
      break;
 80099f6:	bf00      	nop
  }
}
 80099f8:	bf00      	nop
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	781a      	ldrb	r2, [r3, #0]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	781a      	ldrb	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	3301      	adds	r3, #1
 8009a28:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f7ff fabb 	bl	8008fa6 <SWAPBYTE>
 8009a30:	4603      	mov	r3, r0
 8009a32:	461a      	mov	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	3301      	adds	r3, #1
 8009a42:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f7ff faae 	bl	8008fa6 <SWAPBYTE>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	3301      	adds	r3, #1
 8009a56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f7ff faa1 	bl	8008fa6 <SWAPBYTE>
 8009a64:	4603      	mov	r3, r0
 8009a66:	461a      	mov	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	80da      	strh	r2, [r3, #6]
}
 8009a6c:	bf00      	nop
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a7e:	2180      	movs	r1, #128	; 0x80
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f004 f817 	bl	800dab4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009a86:	2100      	movs	r1, #0
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f004 f813 	bl	800dab4 <USBD_LL_StallEP>
}
 8009a8e:	bf00      	nop
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b086      	sub	sp, #24
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	60f8      	str	r0, [r7, #12]
 8009a9e:	60b9      	str	r1, [r7, #8]
 8009aa0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d036      	beq.n	8009b1a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009ab0:	6938      	ldr	r0, [r7, #16]
 8009ab2:	f000 f836 	bl	8009b22 <USBD_GetLen>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	3301      	adds	r3, #1
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	005b      	lsls	r3, r3, #1
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ac4:	7dfb      	ldrb	r3, [r7, #23]
 8009ac6:	68ba      	ldr	r2, [r7, #8]
 8009ac8:	4413      	add	r3, r2
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	7812      	ldrb	r2, [r2, #0]
 8009ace:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ad0:	7dfb      	ldrb	r3, [r7, #23]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009ad6:	7dfb      	ldrb	r3, [r7, #23]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	4413      	add	r3, r2
 8009adc:	2203      	movs	r2, #3
 8009ade:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ae0:	7dfb      	ldrb	r3, [r7, #23]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009ae6:	e013      	b.n	8009b10 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009ae8:	7dfb      	ldrb	r3, [r7, #23]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	4413      	add	r3, r2
 8009aee:	693a      	ldr	r2, [r7, #16]
 8009af0:	7812      	ldrb	r2, [r2, #0]
 8009af2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	3301      	adds	r3, #1
 8009af8:	613b      	str	r3, [r7, #16]
    idx++;
 8009afa:	7dfb      	ldrb	r3, [r7, #23]
 8009afc:	3301      	adds	r3, #1
 8009afe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009b00:	7dfb      	ldrb	r3, [r7, #23]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	4413      	add	r3, r2
 8009b06:	2200      	movs	r2, #0
 8009b08:	701a      	strb	r2, [r3, #0]
    idx++;
 8009b0a:	7dfb      	ldrb	r3, [r7, #23]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1e7      	bne.n	8009ae8 <USBD_GetString+0x52>
 8009b18:	e000      	b.n	8009b1c <USBD_GetString+0x86>
    return;
 8009b1a:	bf00      	nop
  }
}
 8009b1c:	3718      	adds	r7, #24
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009b22:	b480      	push	{r7}
 8009b24:	b085      	sub	sp, #20
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009b32:	e005      	b.n	8009b40 <USBD_GetLen+0x1e>
  {
    len++;
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
 8009b36:	3301      	adds	r3, #1
 8009b38:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1f5      	bne.n	8009b34 <USBD_GetLen+0x12>
  }

  return len;
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3714      	adds	r7, #20
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr

08009b56 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b084      	sub	sp, #16
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	60f8      	str	r0, [r7, #12]
 8009b5e:	60b9      	str	r1, [r7, #8]
 8009b60:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2202      	movs	r2, #2
 8009b66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f004 f822 	bl	800dbc6 <USBD_LL_Transmit>

  return USBD_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	68ba      	ldr	r2, [r7, #8]
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f004 f811 	bl	800dbc6 <USBD_LL_Transmit>

  return USBD_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b084      	sub	sp, #16
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	60f8      	str	r0, [r7, #12]
 8009bb6:	60b9      	str	r1, [r7, #8]
 8009bb8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2203      	movs	r2, #3
 8009bbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f004 f815 	bl	800dc08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f004 f804 	bl	800dc08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b082      	sub	sp, #8
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2204      	movs	r2, #4
 8009c16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	2100      	movs	r1, #0
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f003 ffd0 	bl	800dbc6 <USBD_LL_Transmit>

  return USBD_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2205      	movs	r2, #5
 8009c3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c40:	2300      	movs	r3, #0
 8009c42:	2200      	movs	r2, #0
 8009c44:	2100      	movs	r1, #0
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f003 ffde 	bl	800dc08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
	...

08009c58 <__NVIC_SetPriority>:
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	4603      	mov	r3, r0
 8009c60:	6039      	str	r1, [r7, #0]
 8009c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	db0a      	blt.n	8009c82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	490c      	ldr	r1, [pc, #48]	; (8009ca4 <__NVIC_SetPriority+0x4c>)
 8009c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c76:	0112      	lsls	r2, r2, #4
 8009c78:	b2d2      	uxtb	r2, r2
 8009c7a:	440b      	add	r3, r1
 8009c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009c80:	e00a      	b.n	8009c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	b2da      	uxtb	r2, r3
 8009c86:	4908      	ldr	r1, [pc, #32]	; (8009ca8 <__NVIC_SetPriority+0x50>)
 8009c88:	79fb      	ldrb	r3, [r7, #7]
 8009c8a:	f003 030f 	and.w	r3, r3, #15
 8009c8e:	3b04      	subs	r3, #4
 8009c90:	0112      	lsls	r2, r2, #4
 8009c92:	b2d2      	uxtb	r2, r2
 8009c94:	440b      	add	r3, r1
 8009c96:	761a      	strb	r2, [r3, #24]
}
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	e000e100 	.word	0xe000e100
 8009ca8:	e000ed00 	.word	0xe000ed00

08009cac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009cac:	b580      	push	{r7, lr}
 8009cae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009cb0:	4b05      	ldr	r3, [pc, #20]	; (8009cc8 <SysTick_Handler+0x1c>)
 8009cb2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009cb4:	f002 f90a 	bl	800becc <xTaskGetSchedulerState>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d001      	beq.n	8009cc2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009cbe:	f002 fff3 	bl	800cca8 <xPortSysTickHandler>
  }
}
 8009cc2:	bf00      	nop
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	e000e010 	.word	0xe000e010

08009ccc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	f06f 0004 	mvn.w	r0, #4
 8009cd6:	f7ff ffbf 	bl	8009c58 <__NVIC_SetPriority>
#endif
}
 8009cda:	bf00      	nop
 8009cdc:	bd80      	pop	{r7, pc}
	...

08009ce0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ce6:	f3ef 8305 	mrs	r3, IPSR
 8009cea:	603b      	str	r3, [r7, #0]
  return(result);
 8009cec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009cf2:	f06f 0305 	mvn.w	r3, #5
 8009cf6:	607b      	str	r3, [r7, #4]
 8009cf8:	e00c      	b.n	8009d14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009cfa:	4b0a      	ldr	r3, [pc, #40]	; (8009d24 <osKernelInitialize+0x44>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d105      	bne.n	8009d0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009d02:	4b08      	ldr	r3, [pc, #32]	; (8009d24 <osKernelInitialize+0x44>)
 8009d04:	2201      	movs	r2, #1
 8009d06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	607b      	str	r3, [r7, #4]
 8009d0c:	e002      	b.n	8009d14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d14:	687b      	ldr	r3, [r7, #4]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	370c      	adds	r7, #12
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	20000420 	.word	0x20000420

08009d28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d2e:	f3ef 8305 	mrs	r3, IPSR
 8009d32:	603b      	str	r3, [r7, #0]
  return(result);
 8009d34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d003      	beq.n	8009d42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009d3a:	f06f 0305 	mvn.w	r3, #5
 8009d3e:	607b      	str	r3, [r7, #4]
 8009d40:	e010      	b.n	8009d64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009d42:	4b0b      	ldr	r3, [pc, #44]	; (8009d70 <osKernelStart+0x48>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d109      	bne.n	8009d5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009d4a:	f7ff ffbf 	bl	8009ccc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009d4e:	4b08      	ldr	r3, [pc, #32]	; (8009d70 <osKernelStart+0x48>)
 8009d50:	2202      	movs	r2, #2
 8009d52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009d54:	f001 fc50 	bl	800b5f8 <vTaskStartScheduler>
      stat = osOK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	607b      	str	r3, [r7, #4]
 8009d5c:	e002      	b.n	8009d64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d64:	687b      	ldr	r3, [r7, #4]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	20000420 	.word	0x20000420

08009d74 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d7a:	f3ef 8305 	mrs	r3, IPSR
 8009d7e:	603b      	str	r3, [r7, #0]
  return(result);
 8009d80:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8009d86:	f001 fd59 	bl	800b83c <xTaskGetTickCountFromISR>
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	e002      	b.n	8009d94 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009d8e:	f001 fd45 	bl	800b81c <xTaskGetTickCount>
 8009d92:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8009d94:	687b      	ldr	r3, [r7, #4]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8009d9e:	b480      	push	{r7}
 8009da0:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8009da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b08e      	sub	sp, #56	; 0x38
 8009db4:	af04      	add	r7, sp, #16
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dc0:	f3ef 8305 	mrs	r3, IPSR
 8009dc4:	617b      	str	r3, [r7, #20]
  return(result);
 8009dc6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d17e      	bne.n	8009eca <osThreadNew+0x11a>
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d07b      	beq.n	8009eca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009dd2:	2380      	movs	r3, #128	; 0x80
 8009dd4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009dd6:	2318      	movs	r3, #24
 8009dd8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009dde:	f04f 33ff 	mov.w	r3, #4294967295
 8009de2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d045      	beq.n	8009e76 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d002      	beq.n	8009df8 <osThreadNew+0x48>
        name = attr->name;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d002      	beq.n	8009e06 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d008      	beq.n	8009e1e <osThreadNew+0x6e>
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	2b38      	cmp	r3, #56	; 0x38
 8009e10:	d805      	bhi.n	8009e1e <osThreadNew+0x6e>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	f003 0301 	and.w	r3, r3, #1
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d001      	beq.n	8009e22 <osThreadNew+0x72>
        return (NULL);
 8009e1e:	2300      	movs	r3, #0
 8009e20:	e054      	b.n	8009ecc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	695b      	ldr	r3, [r3, #20]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d003      	beq.n	8009e32 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	695b      	ldr	r3, [r3, #20]
 8009e2e:	089b      	lsrs	r3, r3, #2
 8009e30:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00e      	beq.n	8009e58 <osThreadNew+0xa8>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	2b5b      	cmp	r3, #91	; 0x5b
 8009e40:	d90a      	bls.n	8009e58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d006      	beq.n	8009e58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d002      	beq.n	8009e58 <osThreadNew+0xa8>
        mem = 1;
 8009e52:	2301      	movs	r3, #1
 8009e54:	61bb      	str	r3, [r7, #24]
 8009e56:	e010      	b.n	8009e7a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10c      	bne.n	8009e7a <osThreadNew+0xca>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d108      	bne.n	8009e7a <osThreadNew+0xca>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d104      	bne.n	8009e7a <osThreadNew+0xca>
          mem = 0;
 8009e70:	2300      	movs	r3, #0
 8009e72:	61bb      	str	r3, [r7, #24]
 8009e74:	e001      	b.n	8009e7a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009e76:	2300      	movs	r3, #0
 8009e78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d110      	bne.n	8009ea2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e88:	9202      	str	r2, [sp, #8]
 8009e8a:	9301      	str	r3, [sp, #4]
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	6a3a      	ldr	r2, [r7, #32]
 8009e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f001 f95a 	bl	800b150 <xTaskCreateStatic>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	613b      	str	r3, [r7, #16]
 8009ea0:	e013      	b.n	8009eca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d110      	bne.n	8009eca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009ea8:	6a3b      	ldr	r3, [r7, #32]
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	f107 0310 	add.w	r3, r7, #16
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f001 f9a5 	bl	800b20a <xTaskCreate>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d001      	beq.n	8009eca <osThreadNew+0x11a>
            hTask = NULL;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009eca:	693b      	ldr	r3, [r7, #16]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3728      	adds	r7, #40	; 0x28
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009edc:	f3ef 8305 	mrs	r3, IPSR
 8009ee0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ee2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d003      	beq.n	8009ef0 <osDelay+0x1c>
    stat = osErrorISR;
 8009ee8:	f06f 0305 	mvn.w	r3, #5
 8009eec:	60fb      	str	r3, [r7, #12]
 8009eee:	e007      	b.n	8009f00 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d002      	beq.n	8009f00 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f001 fb48 	bl	800b590 <vTaskDelay>
    }
  }

  return (stat);
 8009f00:	68fb      	ldr	r3, [r7, #12]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b086      	sub	sp, #24
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f12:	f3ef 8305 	mrs	r3, IPSR
 8009f16:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f18:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d003      	beq.n	8009f26 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8009f1e:	f06f 0305 	mvn.w	r3, #5
 8009f22:	617b      	str	r3, [r7, #20]
 8009f24:	e019      	b.n	8009f5a <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8009f2a:	f001 fc77 	bl	800b81c <xTaskGetTickCount>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d009      	beq.n	8009f54 <osDelayUntil+0x4a>
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	db06      	blt.n	8009f54 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8009f46:	f107 0308 	add.w	r3, r7, #8
 8009f4a:	6939      	ldr	r1, [r7, #16]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f001 faa1 	bl	800b494 <vTaskDelayUntil>
 8009f52:	e002      	b.n	8009f5a <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009f54:	f06f 0303 	mvn.w	r3, #3
 8009f58:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009f5a:	697b      	ldr	r3, [r7, #20]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b088      	sub	sp, #32
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f70:	f3ef 8305 	mrs	r3, IPSR
 8009f74:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f76:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d174      	bne.n	800a066 <osMutexNew+0x102>
    if (attr != NULL) {
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d003      	beq.n	8009f8a <osMutexNew+0x26>
      type = attr->attr_bits;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	61bb      	str	r3, [r7, #24]
 8009f88:	e001      	b.n	8009f8e <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	f003 0301 	and.w	r3, r3, #1
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d002      	beq.n	8009f9e <osMutexNew+0x3a>
      rmtx = 1U;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	617b      	str	r3, [r7, #20]
 8009f9c:	e001      	b.n	8009fa2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	f003 0308 	and.w	r3, r3, #8
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d15c      	bne.n	800a066 <osMutexNew+0x102>
      mem = -1;
 8009fac:	f04f 33ff 	mov.w	r3, #4294967295
 8009fb0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d015      	beq.n	8009fe4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d006      	beq.n	8009fce <osMutexNew+0x6a>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	2b4f      	cmp	r3, #79	; 0x4f
 8009fc6:	d902      	bls.n	8009fce <osMutexNew+0x6a>
          mem = 1;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	613b      	str	r3, [r7, #16]
 8009fcc:	e00c      	b.n	8009fe8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d108      	bne.n	8009fe8 <osMutexNew+0x84>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d104      	bne.n	8009fe8 <osMutexNew+0x84>
            mem = 0;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	613b      	str	r3, [r7, #16]
 8009fe2:	e001      	b.n	8009fe8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d112      	bne.n	800a014 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d007      	beq.n	800a004 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	2004      	movs	r0, #4
 8009ffc:	f000 fb17 	bl	800a62e <xQueueCreateMutexStatic>
 800a000:	61f8      	str	r0, [r7, #28]
 800a002:	e016      	b.n	800a032 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	4619      	mov	r1, r3
 800a00a:	2001      	movs	r0, #1
 800a00c:	f000 fb0f 	bl	800a62e <xQueueCreateMutexStatic>
 800a010:	61f8      	str	r0, [r7, #28]
 800a012:	e00e      	b.n	800a032 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d10b      	bne.n	800a032 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d004      	beq.n	800a02a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800a020:	2004      	movs	r0, #4
 800a022:	f000 faec 	bl	800a5fe <xQueueCreateMutex>
 800a026:	61f8      	str	r0, [r7, #28]
 800a028:	e003      	b.n	800a032 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800a02a:	2001      	movs	r0, #1
 800a02c:	f000 fae7 	bl	800a5fe <xQueueCreateMutex>
 800a030:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00c      	beq.n	800a052 <osMutexNew+0xee>
        if (attr != NULL) {
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d003      	beq.n	800a046 <osMutexNew+0xe2>
          name = attr->name;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	60fb      	str	r3, [r7, #12]
 800a044:	e001      	b.n	800a04a <osMutexNew+0xe6>
        } else {
          name = NULL;
 800a046:	2300      	movs	r3, #0
 800a048:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800a04a:	68f9      	ldr	r1, [r7, #12]
 800a04c:	69f8      	ldr	r0, [r7, #28]
 800a04e:	f001 f821 	bl	800b094 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d006      	beq.n	800a066 <osMutexNew+0x102>
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d003      	beq.n	800a066 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	f043 0301 	orr.w	r3, r3, #1
 800a064:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a066:	69fb      	ldr	r3, [r7, #28]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3720      	adds	r7, #32
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f023 0301 	bic.w	r3, r3, #1
 800a080:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f003 0301 	and.w	r3, r3, #1
 800a088:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a08a:	2300      	movs	r3, #0
 800a08c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a08e:	f3ef 8305 	mrs	r3, IPSR
 800a092:	60bb      	str	r3, [r7, #8]
  return(result);
 800a094:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800a09a:	f06f 0305 	mvn.w	r3, #5
 800a09e:	617b      	str	r3, [r7, #20]
 800a0a0:	e02c      	b.n	800a0fc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d103      	bne.n	800a0b0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800a0a8:	f06f 0303 	mvn.w	r3, #3
 800a0ac:	617b      	str	r3, [r7, #20]
 800a0ae:	e025      	b.n	800a0fc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d011      	beq.n	800a0da <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a0b6:	6839      	ldr	r1, [r7, #0]
 800a0b8:	6938      	ldr	r0, [r7, #16]
 800a0ba:	f000 fb07 	bl	800a6cc <xQueueTakeMutexRecursive>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d01b      	beq.n	800a0fc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d003      	beq.n	800a0d2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800a0ca:	f06f 0301 	mvn.w	r3, #1
 800a0ce:	617b      	str	r3, [r7, #20]
 800a0d0:	e014      	b.n	800a0fc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a0d2:	f06f 0302 	mvn.w	r3, #2
 800a0d6:	617b      	str	r3, [r7, #20]
 800a0d8:	e010      	b.n	800a0fc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	6938      	ldr	r0, [r7, #16]
 800a0de:	f000 fda5 	bl	800ac2c <xQueueSemaphoreTake>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d009      	beq.n	800a0fc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d003      	beq.n	800a0f6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800a0ee:	f06f 0301 	mvn.w	r3, #1
 800a0f2:	617b      	str	r3, [r7, #20]
 800a0f4:	e002      	b.n	800a0fc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a0f6:	f06f 0302 	mvn.w	r3, #2
 800a0fa:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800a0fc:	697b      	ldr	r3, [r7, #20]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3718      	adds	r7, #24
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a106:	b580      	push	{r7, lr}
 800a108:	b086      	sub	sp, #24
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f023 0301 	bic.w	r3, r3, #1
 800a114:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f003 0301 	and.w	r3, r3, #1
 800a11c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a11e:	2300      	movs	r3, #0
 800a120:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a122:	f3ef 8305 	mrs	r3, IPSR
 800a126:	60bb      	str	r3, [r7, #8]
  return(result);
 800a128:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d003      	beq.n	800a136 <osMutexRelease+0x30>
    stat = osErrorISR;
 800a12e:	f06f 0305 	mvn.w	r3, #5
 800a132:	617b      	str	r3, [r7, #20]
 800a134:	e01f      	b.n	800a176 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d103      	bne.n	800a144 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800a13c:	f06f 0303 	mvn.w	r3, #3
 800a140:	617b      	str	r3, [r7, #20]
 800a142:	e018      	b.n	800a176 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d009      	beq.n	800a15e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a14a:	6938      	ldr	r0, [r7, #16]
 800a14c:	f000 fa8a 	bl	800a664 <xQueueGiveMutexRecursive>
 800a150:	4603      	mov	r3, r0
 800a152:	2b01      	cmp	r3, #1
 800a154:	d00f      	beq.n	800a176 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a156:	f06f 0302 	mvn.w	r3, #2
 800a15a:	617b      	str	r3, [r7, #20]
 800a15c:	e00b      	b.n	800a176 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a15e:	2300      	movs	r3, #0
 800a160:	2200      	movs	r2, #0
 800a162:	2100      	movs	r1, #0
 800a164:	6938      	ldr	r0, [r7, #16]
 800a166:	f000 fae7 	bl	800a738 <xQueueGenericSend>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d002      	beq.n	800a176 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a170:	f06f 0302 	mvn.w	r3, #2
 800a174:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a176:	697b      	ldr	r3, [r7, #20]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3718      	adds	r7, #24
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	4a07      	ldr	r2, [pc, #28]	; (800a1ac <vApplicationGetIdleTaskMemory+0x2c>)
 800a190:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	4a06      	ldr	r2, [pc, #24]	; (800a1b0 <vApplicationGetIdleTaskMemory+0x30>)
 800a196:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2280      	movs	r2, #128	; 0x80
 800a19c:	601a      	str	r2, [r3, #0]
}
 800a19e:	bf00      	nop
 800a1a0:	3714      	adds	r7, #20
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	20000424 	.word	0x20000424
 800a1b0:	20000480 	.word	0x20000480

0800a1b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a1b4:	b480      	push	{r7}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	4a07      	ldr	r2, [pc, #28]	; (800a1e0 <vApplicationGetTimerTaskMemory+0x2c>)
 800a1c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	4a06      	ldr	r2, [pc, #24]	; (800a1e4 <vApplicationGetTimerTaskMemory+0x30>)
 800a1ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1d2:	601a      	str	r2, [r3, #0]
}
 800a1d4:	bf00      	nop
 800a1d6:	3714      	adds	r7, #20
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr
 800a1e0:	20000680 	.word	0x20000680
 800a1e4:	200006dc 	.word	0x200006dc

0800a1e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f103 0208 	add.w	r2, r3, #8
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a200:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f103 0208 	add.w	r2, r3, #8
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f103 0208 	add.w	r2, r3, #8
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a236:	bf00      	nop
 800a238:	370c      	adds	r7, #12
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr

0800a242 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a242:	b480      	push	{r7}
 800a244:	b085      	sub	sp, #20
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	689a      	ldr	r2, [r3, #8]
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	683a      	ldr	r2, [r7, #0]
 800a266:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	683a      	ldr	r2, [r7, #0]
 800a26c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	1c5a      	adds	r2, r3, #1
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	601a      	str	r2, [r3, #0]
}
 800a27e:	bf00      	nop
 800a280:	3714      	adds	r7, #20
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a28a:	b480      	push	{r7}
 800a28c:	b085      	sub	sp, #20
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a0:	d103      	bne.n	800a2aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	60fb      	str	r3, [r7, #12]
 800a2a8:	e00c      	b.n	800a2c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	3308      	adds	r3, #8
 800a2ae:	60fb      	str	r3, [r7, #12]
 800a2b0:	e002      	b.n	800a2b8 <vListInsert+0x2e>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	60fb      	str	r3, [r7, #12]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	68ba      	ldr	r2, [r7, #8]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d2f6      	bcs.n	800a2b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	685a      	ldr	r2, [r3, #4]
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	683a      	ldr	r2, [r7, #0]
 800a2d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	68fa      	ldr	r2, [r7, #12]
 800a2d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	1c5a      	adds	r2, r3, #1
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	601a      	str	r2, [r3, #0]
}
 800a2f0:	bf00      	nop
 800a2f2:	3714      	adds	r7, #20
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	6892      	ldr	r2, [r2, #8]
 800a312:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	6852      	ldr	r2, [r2, #4]
 800a31c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	429a      	cmp	r2, r3
 800a326:	d103      	bne.n	800a330 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	689a      	ldr	r2, [r3, #8]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	1e5a      	subs	r2, r3, #1
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3714      	adds	r7, #20
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d10a      	bne.n	800a37a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a368:	f383 8811 	msr	BASEPRI, r3
 800a36c:	f3bf 8f6f 	isb	sy
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a376:	bf00      	nop
 800a378:	e7fe      	b.n	800a378 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a37a:	f002 fc03 	bl	800cb84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a386:	68f9      	ldr	r1, [r7, #12]
 800a388:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a38a:	fb01 f303 	mul.w	r3, r1, r3
 800a38e:	441a      	add	r2, r3
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2200      	movs	r2, #0
 800a398:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	68f9      	ldr	r1, [r7, #12]
 800a3ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a3b0:	fb01 f303 	mul.w	r3, r1, r3
 800a3b4:	441a      	add	r2, r3
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	22ff      	movs	r2, #255	; 0xff
 800a3be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	22ff      	movs	r2, #255	; 0xff
 800a3c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d114      	bne.n	800a3fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	691b      	ldr	r3, [r3, #16]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d01a      	beq.n	800a40e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	3310      	adds	r3, #16
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f001 fba7 	bl	800bb30 <xTaskRemoveFromEventList>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d012      	beq.n	800a40e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a3e8:	4b0c      	ldr	r3, [pc, #48]	; (800a41c <xQueueGenericReset+0xcc>)
 800a3ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ee:	601a      	str	r2, [r3, #0]
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	e009      	b.n	800a40e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	3310      	adds	r3, #16
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7ff fef2 	bl	800a1e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	3324      	adds	r3, #36	; 0x24
 800a408:	4618      	mov	r0, r3
 800a40a:	f7ff feed 	bl	800a1e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a40e:	f002 fbe9 	bl	800cbe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a412:	2301      	movs	r3, #1
}
 800a414:	4618      	mov	r0, r3
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	e000ed04 	.word	0xe000ed04

0800a420 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a420:	b580      	push	{r7, lr}
 800a422:	b08e      	sub	sp, #56	; 0x38
 800a424:	af02      	add	r7, sp, #8
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
 800a42c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10a      	bne.n	800a44a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10a      	bne.n	800a466 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a454:	f383 8811 	msr	BASEPRI, r3
 800a458:	f3bf 8f6f 	isb	sy
 800a45c:	f3bf 8f4f 	dsb	sy
 800a460:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a462:	bf00      	nop
 800a464:	e7fe      	b.n	800a464 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d002      	beq.n	800a472 <xQueueGenericCreateStatic+0x52>
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <xQueueGenericCreateStatic+0x56>
 800a472:	2301      	movs	r3, #1
 800a474:	e000      	b.n	800a478 <xQueueGenericCreateStatic+0x58>
 800a476:	2300      	movs	r3, #0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10a      	bne.n	800a492 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a480:	f383 8811 	msr	BASEPRI, r3
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	f3bf 8f4f 	dsb	sy
 800a48c:	623b      	str	r3, [r7, #32]
}
 800a48e:	bf00      	nop
 800a490:	e7fe      	b.n	800a490 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d102      	bne.n	800a49e <xQueueGenericCreateStatic+0x7e>
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d101      	bne.n	800a4a2 <xQueueGenericCreateStatic+0x82>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e000      	b.n	800a4a4 <xQueueGenericCreateStatic+0x84>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10a      	bne.n	800a4be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ac:	f383 8811 	msr	BASEPRI, r3
 800a4b0:	f3bf 8f6f 	isb	sy
 800a4b4:	f3bf 8f4f 	dsb	sy
 800a4b8:	61fb      	str	r3, [r7, #28]
}
 800a4ba:	bf00      	nop
 800a4bc:	e7fe      	b.n	800a4bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a4be:	2350      	movs	r3, #80	; 0x50
 800a4c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	2b50      	cmp	r3, #80	; 0x50
 800a4c6:	d00a      	beq.n	800a4de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	61bb      	str	r3, [r7, #24]
}
 800a4da:	bf00      	nop
 800a4dc:	e7fe      	b.n	800a4dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a4de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00d      	beq.n	800a506 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	68b9      	ldr	r1, [r7, #8]
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f000 f83f 	bl	800a584 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a508:	4618      	mov	r0, r3
 800a50a:	3730      	adds	r7, #48	; 0x30
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a510:	b580      	push	{r7, lr}
 800a512:	b08a      	sub	sp, #40	; 0x28
 800a514:	af02      	add	r7, sp, #8
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	4613      	mov	r3, r2
 800a51c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10a      	bne.n	800a53a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	613b      	str	r3, [r7, #16]
}
 800a536:	bf00      	nop
 800a538:	e7fe      	b.n	800a538 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	fb02 f303 	mul.w	r3, r2, r3
 800a542:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	3350      	adds	r3, #80	; 0x50
 800a548:	4618      	mov	r0, r3
 800a54a:	f002 fc3d 	bl	800cdc8 <pvPortMalloc>
 800a54e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d011      	beq.n	800a57a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	3350      	adds	r3, #80	; 0x50
 800a55e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	2200      	movs	r2, #0
 800a564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a568:	79fa      	ldrb	r2, [r7, #7]
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	4613      	mov	r3, r2
 800a570:	697a      	ldr	r2, [r7, #20]
 800a572:	68b9      	ldr	r1, [r7, #8]
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	f000 f805 	bl	800a584 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a57a:	69bb      	ldr	r3, [r7, #24]
	}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3720      	adds	r7, #32
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
 800a590:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d103      	bne.n	800a5a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	69ba      	ldr	r2, [r7, #24]
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	e002      	b.n	800a5a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a5b2:	2101      	movs	r1, #1
 800a5b4:	69b8      	ldr	r0, [r7, #24]
 800a5b6:	f7ff fecb 	bl	800a350 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	78fa      	ldrb	r2, [r7, #3]
 800a5be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a5c2:	bf00      	nop
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b082      	sub	sp, #8
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00e      	beq.n	800a5f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 f8a1 	bl	800a738 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a5f6:	bf00      	nop
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b086      	sub	sp, #24
 800a602:	af00      	add	r7, sp, #0
 800a604:	4603      	mov	r3, r0
 800a606:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a608:	2301      	movs	r3, #1
 800a60a:	617b      	str	r3, [r7, #20]
 800a60c:	2300      	movs	r3, #0
 800a60e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a610:	79fb      	ldrb	r3, [r7, #7]
 800a612:	461a      	mov	r2, r3
 800a614:	6939      	ldr	r1, [r7, #16]
 800a616:	6978      	ldr	r0, [r7, #20]
 800a618:	f7ff ff7a 	bl	800a510 <xQueueGenericCreate>
 800a61c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f7ff ffd3 	bl	800a5ca <prvInitialiseMutex>

		return xNewQueue;
 800a624:	68fb      	ldr	r3, [r7, #12]
	}
 800a626:	4618      	mov	r0, r3
 800a628:	3718      	adds	r7, #24
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b088      	sub	sp, #32
 800a632:	af02      	add	r7, sp, #8
 800a634:	4603      	mov	r3, r0
 800a636:	6039      	str	r1, [r7, #0]
 800a638:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a63a:	2301      	movs	r3, #1
 800a63c:	617b      	str	r3, [r7, #20]
 800a63e:	2300      	movs	r3, #0
 800a640:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a642:	79fb      	ldrb	r3, [r7, #7]
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	2200      	movs	r2, #0
 800a64a:	6939      	ldr	r1, [r7, #16]
 800a64c:	6978      	ldr	r0, [r7, #20]
 800a64e:	f7ff fee7 	bl	800a420 <xQueueGenericCreateStatic>
 800a652:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f7ff ffb8 	bl	800a5ca <prvInitialiseMutex>

		return xNewQueue;
 800a65a:	68fb      	ldr	r3, [r7, #12]
	}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3718      	adds	r7, #24
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a664:	b590      	push	{r4, r7, lr}
 800a666:	b087      	sub	sp, #28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10a      	bne.n	800a68c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800a676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67a:	f383 8811 	msr	BASEPRI, r3
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f3bf 8f4f 	dsb	sy
 800a686:	60fb      	str	r3, [r7, #12]
}
 800a688:	bf00      	nop
 800a68a:	e7fe      	b.n	800a68a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	689c      	ldr	r4, [r3, #8]
 800a690:	f001 fc0c 	bl	800beac <xTaskGetCurrentTaskHandle>
 800a694:	4603      	mov	r3, r0
 800a696:	429c      	cmp	r4, r3
 800a698:	d111      	bne.n	800a6be <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	1e5a      	subs	r2, r3, #1
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d105      	bne.n	800a6b8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	6938      	ldr	r0, [r7, #16]
 800a6b4:	f000 f840 	bl	800a738 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	617b      	str	r3, [r7, #20]
 800a6bc:	e001      	b.n	800a6c2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a6c2:	697b      	ldr	r3, [r7, #20]
	}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	371c      	adds	r7, #28
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd90      	pop	{r4, r7, pc}

0800a6cc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a6cc:	b590      	push	{r4, r7, lr}
 800a6ce:	b087      	sub	sp, #28
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10a      	bne.n	800a6f6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800a6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	60fb      	str	r3, [r7, #12]
}
 800a6f2:	bf00      	nop
 800a6f4:	e7fe      	b.n	800a6f4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	689c      	ldr	r4, [r3, #8]
 800a6fa:	f001 fbd7 	bl	800beac <xTaskGetCurrentTaskHandle>
 800a6fe:	4603      	mov	r3, r0
 800a700:	429c      	cmp	r4, r3
 800a702:	d107      	bne.n	800a714 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	1c5a      	adds	r2, r3, #1
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a70e:	2301      	movs	r3, #1
 800a710:	617b      	str	r3, [r7, #20]
 800a712:	e00c      	b.n	800a72e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a714:	6839      	ldr	r1, [r7, #0]
 800a716:	6938      	ldr	r0, [r7, #16]
 800a718:	f000 fa88 	bl	800ac2c <xQueueSemaphoreTake>
 800a71c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d004      	beq.n	800a72e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	1c5a      	adds	r2, r3, #1
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a72e:	697b      	ldr	r3, [r7, #20]
	}
 800a730:	4618      	mov	r0, r3
 800a732:	371c      	adds	r7, #28
 800a734:	46bd      	mov	sp, r7
 800a736:	bd90      	pop	{r4, r7, pc}

0800a738 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b08e      	sub	sp, #56	; 0x38
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
 800a744:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a746:	2300      	movs	r3, #0
 800a748:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a750:	2b00      	cmp	r3, #0
 800a752:	d10a      	bne.n	800a76a <xQueueGenericSend+0x32>
	__asm volatile
 800a754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a758:	f383 8811 	msr	BASEPRI, r3
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a766:	bf00      	nop
 800a768:	e7fe      	b.n	800a768 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d103      	bne.n	800a778 <xQueueGenericSend+0x40>
 800a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a774:	2b00      	cmp	r3, #0
 800a776:	d101      	bne.n	800a77c <xQueueGenericSend+0x44>
 800a778:	2301      	movs	r3, #1
 800a77a:	e000      	b.n	800a77e <xQueueGenericSend+0x46>
 800a77c:	2300      	movs	r3, #0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d10a      	bne.n	800a798 <xQueueGenericSend+0x60>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a794:	bf00      	nop
 800a796:	e7fe      	b.n	800a796 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d103      	bne.n	800a7a6 <xQueueGenericSend+0x6e>
 800a79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d101      	bne.n	800a7aa <xQueueGenericSend+0x72>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e000      	b.n	800a7ac <xQueueGenericSend+0x74>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10a      	bne.n	800a7c6 <xQueueGenericSend+0x8e>
	__asm volatile
 800a7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	623b      	str	r3, [r7, #32]
}
 800a7c2:	bf00      	nop
 800a7c4:	e7fe      	b.n	800a7c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7c6:	f001 fb81 	bl	800becc <xTaskGetSchedulerState>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d102      	bne.n	800a7d6 <xQueueGenericSend+0x9e>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d101      	bne.n	800a7da <xQueueGenericSend+0xa2>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e000      	b.n	800a7dc <xQueueGenericSend+0xa4>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10a      	bne.n	800a7f6 <xQueueGenericSend+0xbe>
	__asm volatile
 800a7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	61fb      	str	r3, [r7, #28]
}
 800a7f2:	bf00      	nop
 800a7f4:	e7fe      	b.n	800a7f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7f6:	f002 f9c5 	bl	800cb84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a802:	429a      	cmp	r2, r3
 800a804:	d302      	bcc.n	800a80c <xQueueGenericSend+0xd4>
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	2b02      	cmp	r3, #2
 800a80a:	d129      	bne.n	800a860 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a80c:	683a      	ldr	r2, [r7, #0]
 800a80e:	68b9      	ldr	r1, [r7, #8]
 800a810:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a812:	f000 fb2f 	bl	800ae74 <prvCopyDataToQueue>
 800a816:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d010      	beq.n	800a842 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a822:	3324      	adds	r3, #36	; 0x24
 800a824:	4618      	mov	r0, r3
 800a826:	f001 f983 	bl	800bb30 <xTaskRemoveFromEventList>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d013      	beq.n	800a858 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a830:	4b3f      	ldr	r3, [pc, #252]	; (800a930 <xQueueGenericSend+0x1f8>)
 800a832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a836:	601a      	str	r2, [r3, #0]
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	e00a      	b.n	800a858 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a844:	2b00      	cmp	r3, #0
 800a846:	d007      	beq.n	800a858 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a848:	4b39      	ldr	r3, [pc, #228]	; (800a930 <xQueueGenericSend+0x1f8>)
 800a84a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	f3bf 8f4f 	dsb	sy
 800a854:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a858:	f002 f9c4 	bl	800cbe4 <vPortExitCritical>
				return pdPASS;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e063      	b.n	800a928 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d103      	bne.n	800a86e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a866:	f002 f9bd 	bl	800cbe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a86a:	2300      	movs	r3, #0
 800a86c:	e05c      	b.n	800a928 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a870:	2b00      	cmp	r3, #0
 800a872:	d106      	bne.n	800a882 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a874:	f107 0314 	add.w	r3, r7, #20
 800a878:	4618      	mov	r0, r3
 800a87a:	f001 f9bd 	bl	800bbf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a87e:	2301      	movs	r3, #1
 800a880:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a882:	f002 f9af 	bl	800cbe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a886:	f000 ff1d 	bl	800b6c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a88a:	f002 f97b 	bl	800cb84 <vPortEnterCritical>
 800a88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a894:	b25b      	sxtb	r3, r3
 800a896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a89a:	d103      	bne.n	800a8a4 <xQueueGenericSend+0x16c>
 800a89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8aa:	b25b      	sxtb	r3, r3
 800a8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b0:	d103      	bne.n	800a8ba <xQueueGenericSend+0x182>
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8ba:	f002 f993 	bl	800cbe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8be:	1d3a      	adds	r2, r7, #4
 800a8c0:	f107 0314 	add.w	r3, r7, #20
 800a8c4:	4611      	mov	r1, r2
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f001 f9ac 	bl	800bc24 <xTaskCheckForTimeOut>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d124      	bne.n	800a91c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a8d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8d4:	f000 fbc6 	bl	800b064 <prvIsQueueFull>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d018      	beq.n	800a910 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e0:	3310      	adds	r3, #16
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	4611      	mov	r1, r2
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f001 f8d2 	bl	800ba90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a8ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8ee:	f000 fb51 	bl	800af94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a8f2:	f000 fef5 	bl	800b6e0 <xTaskResumeAll>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f47f af7c 	bne.w	800a7f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a8fe:	4b0c      	ldr	r3, [pc, #48]	; (800a930 <xQueueGenericSend+0x1f8>)
 800a900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a904:	601a      	str	r2, [r3, #0]
 800a906:	f3bf 8f4f 	dsb	sy
 800a90a:	f3bf 8f6f 	isb	sy
 800a90e:	e772      	b.n	800a7f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a912:	f000 fb3f 	bl	800af94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a916:	f000 fee3 	bl	800b6e0 <xTaskResumeAll>
 800a91a:	e76c      	b.n	800a7f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a91c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a91e:	f000 fb39 	bl	800af94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a922:	f000 fedd 	bl	800b6e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a926:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3738      	adds	r7, #56	; 0x38
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	e000ed04 	.word	0xe000ed04

0800a934 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b090      	sub	sp, #64	; 0x40
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]
 800a940:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10a      	bne.n	800a962 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a950:	f383 8811 	msr	BASEPRI, r3
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a95e:	bf00      	nop
 800a960:	e7fe      	b.n	800a960 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d103      	bne.n	800a970 <xQueueGenericSendFromISR+0x3c>
 800a968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d101      	bne.n	800a974 <xQueueGenericSendFromISR+0x40>
 800a970:	2301      	movs	r3, #1
 800a972:	e000      	b.n	800a976 <xQueueGenericSendFromISR+0x42>
 800a974:	2300      	movs	r3, #0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d10a      	bne.n	800a990 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97e:	f383 8811 	msr	BASEPRI, r3
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a98c:	bf00      	nop
 800a98e:	e7fe      	b.n	800a98e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	2b02      	cmp	r3, #2
 800a994:	d103      	bne.n	800a99e <xQueueGenericSendFromISR+0x6a>
 800a996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d101      	bne.n	800a9a2 <xQueueGenericSendFromISR+0x6e>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e000      	b.n	800a9a4 <xQueueGenericSendFromISR+0x70>
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10a      	bne.n	800a9be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ac:	f383 8811 	msr	BASEPRI, r3
 800a9b0:	f3bf 8f6f 	isb	sy
 800a9b4:	f3bf 8f4f 	dsb	sy
 800a9b8:	623b      	str	r3, [r7, #32]
}
 800a9ba:	bf00      	nop
 800a9bc:	e7fe      	b.n	800a9bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9be:	f002 f9c3 	bl	800cd48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a9c2:	f3ef 8211 	mrs	r2, BASEPRI
 800a9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ca:	f383 8811 	msr	BASEPRI, r3
 800a9ce:	f3bf 8f6f 	isb	sy
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	61fa      	str	r2, [r7, #28]
 800a9d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a9da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d302      	bcc.n	800a9f0 <xQueueGenericSendFromISR+0xbc>
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d12f      	bne.n	800aa50 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa00:	683a      	ldr	r2, [r7, #0]
 800aa02:	68b9      	ldr	r1, [r7, #8]
 800aa04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa06:	f000 fa35 	bl	800ae74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800aa0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa12:	d112      	bne.n	800aa3a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d016      	beq.n	800aa4a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1e:	3324      	adds	r3, #36	; 0x24
 800aa20:	4618      	mov	r0, r3
 800aa22:	f001 f885 	bl	800bb30 <xTaskRemoveFromEventList>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d00e      	beq.n	800aa4a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00b      	beq.n	800aa4a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2201      	movs	r2, #1
 800aa36:	601a      	str	r2, [r3, #0]
 800aa38:	e007      	b.n	800aa4a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aa3e:	3301      	adds	r3, #1
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	b25a      	sxtb	r2, r3
 800aa44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800aa4e:	e001      	b.n	800aa54 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa50:	2300      	movs	r3, #0
 800aa52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa56:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3740      	adds	r7, #64	; 0x40
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
	...

0800aa6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b08c      	sub	sp, #48	; 0x30
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d10a      	bne.n	800aa9c <xQueueReceive+0x30>
	__asm volatile
 800aa86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	623b      	str	r3, [r7, #32]
}
 800aa98:	bf00      	nop
 800aa9a:	e7fe      	b.n	800aa9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d103      	bne.n	800aaaa <xQueueReceive+0x3e>
 800aaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d101      	bne.n	800aaae <xQueueReceive+0x42>
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e000      	b.n	800aab0 <xQueueReceive+0x44>
 800aaae:	2300      	movs	r3, #0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10a      	bne.n	800aaca <xQueueReceive+0x5e>
	__asm volatile
 800aab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	61fb      	str	r3, [r7, #28]
}
 800aac6:	bf00      	nop
 800aac8:	e7fe      	b.n	800aac8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aaca:	f001 f9ff 	bl	800becc <xTaskGetSchedulerState>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d102      	bne.n	800aada <xQueueReceive+0x6e>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d101      	bne.n	800aade <xQueueReceive+0x72>
 800aada:	2301      	movs	r3, #1
 800aadc:	e000      	b.n	800aae0 <xQueueReceive+0x74>
 800aade:	2300      	movs	r3, #0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d10a      	bne.n	800aafa <xQueueReceive+0x8e>
	__asm volatile
 800aae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae8:	f383 8811 	msr	BASEPRI, r3
 800aaec:	f3bf 8f6f 	isb	sy
 800aaf0:	f3bf 8f4f 	dsb	sy
 800aaf4:	61bb      	str	r3, [r7, #24]
}
 800aaf6:	bf00      	nop
 800aaf8:	e7fe      	b.n	800aaf8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aafa:	f002 f843 	bl	800cb84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d01f      	beq.n	800ab4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab0a:	68b9      	ldr	r1, [r7, #8]
 800ab0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab0e:	f000 fa1b 	bl	800af48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab14:	1e5a      	subs	r2, r3, #1
 800ab16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00f      	beq.n	800ab42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab24:	3310      	adds	r3, #16
 800ab26:	4618      	mov	r0, r3
 800ab28:	f001 f802 	bl	800bb30 <xTaskRemoveFromEventList>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d007      	beq.n	800ab42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab32:	4b3d      	ldr	r3, [pc, #244]	; (800ac28 <xQueueReceive+0x1bc>)
 800ab34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab38:	601a      	str	r2, [r3, #0]
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab42:	f002 f84f 	bl	800cbe4 <vPortExitCritical>
				return pdPASS;
 800ab46:	2301      	movs	r3, #1
 800ab48:	e069      	b.n	800ac1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d103      	bne.n	800ab58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab50:	f002 f848 	bl	800cbe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab54:	2300      	movs	r3, #0
 800ab56:	e062      	b.n	800ac1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d106      	bne.n	800ab6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab5e:	f107 0310 	add.w	r3, r7, #16
 800ab62:	4618      	mov	r0, r3
 800ab64:	f001 f848 	bl	800bbf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab6c:	f002 f83a 	bl	800cbe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab70:	f000 fda8 	bl	800b6c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab74:	f002 f806 	bl	800cb84 <vPortEnterCritical>
 800ab78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab7e:	b25b      	sxtb	r3, r3
 800ab80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab84:	d103      	bne.n	800ab8e <xQueueReceive+0x122>
 800ab86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab94:	b25b      	sxtb	r3, r3
 800ab96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab9a:	d103      	bne.n	800aba4 <xQueueReceive+0x138>
 800ab9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aba4:	f002 f81e 	bl	800cbe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aba8:	1d3a      	adds	r2, r7, #4
 800abaa:	f107 0310 	add.w	r3, r7, #16
 800abae:	4611      	mov	r1, r2
 800abb0:	4618      	mov	r0, r3
 800abb2:	f001 f837 	bl	800bc24 <xTaskCheckForTimeOut>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d123      	bne.n	800ac04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abbe:	f000 fa3b 	bl	800b038 <prvIsQueueEmpty>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d017      	beq.n	800abf8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abca:	3324      	adds	r3, #36	; 0x24
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	4611      	mov	r1, r2
 800abd0:	4618      	mov	r0, r3
 800abd2:	f000 ff5d 	bl	800ba90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abd8:	f000 f9dc 	bl	800af94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abdc:	f000 fd80 	bl	800b6e0 <xTaskResumeAll>
 800abe0:	4603      	mov	r3, r0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d189      	bne.n	800aafa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800abe6:	4b10      	ldr	r3, [pc, #64]	; (800ac28 <xQueueReceive+0x1bc>)
 800abe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abec:	601a      	str	r2, [r3, #0]
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	e780      	b.n	800aafa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800abf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abfa:	f000 f9cb 	bl	800af94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abfe:	f000 fd6f 	bl	800b6e0 <xTaskResumeAll>
 800ac02:	e77a      	b.n	800aafa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ac04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac06:	f000 f9c5 	bl	800af94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac0a:	f000 fd69 	bl	800b6e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac10:	f000 fa12 	bl	800b038 <prvIsQueueEmpty>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f43f af6f 	beq.w	800aafa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3730      	adds	r7, #48	; 0x30
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	e000ed04 	.word	0xe000ed04

0800ac2c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b08e      	sub	sp, #56	; 0x38
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac36:	2300      	movs	r3, #0
 800ac38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d10a      	bne.n	800ac5e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ac48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4c:	f383 8811 	msr	BASEPRI, r3
 800ac50:	f3bf 8f6f 	isb	sy
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	623b      	str	r3, [r7, #32]
}
 800ac5a:	bf00      	nop
 800ac5c:	e7fe      	b.n	800ac5c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00a      	beq.n	800ac7c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ac66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6a:	f383 8811 	msr	BASEPRI, r3
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	61fb      	str	r3, [r7, #28]
}
 800ac78:	bf00      	nop
 800ac7a:	e7fe      	b.n	800ac7a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac7c:	f001 f926 	bl	800becc <xTaskGetSchedulerState>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d102      	bne.n	800ac8c <xQueueSemaphoreTake+0x60>
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d101      	bne.n	800ac90 <xQueueSemaphoreTake+0x64>
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e000      	b.n	800ac92 <xQueueSemaphoreTake+0x66>
 800ac90:	2300      	movs	r3, #0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d10a      	bne.n	800acac <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ac96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9a:	f383 8811 	msr	BASEPRI, r3
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	61bb      	str	r3, [r7, #24]
}
 800aca8:	bf00      	nop
 800acaa:	e7fe      	b.n	800acaa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acac:	f001 ff6a 	bl	800cb84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800acb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800acb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d024      	beq.n	800ad06 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800acbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acbe:	1e5a      	subs	r2, r3, #1
 800acc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d104      	bne.n	800acd6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800accc:	f001 fa74 	bl	800c1b8 <pvTaskIncrementMutexHeldCount>
 800acd0:	4602      	mov	r2, r0
 800acd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00f      	beq.n	800acfe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace0:	3310      	adds	r3, #16
 800ace2:	4618      	mov	r0, r3
 800ace4:	f000 ff24 	bl	800bb30 <xTaskRemoveFromEventList>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d007      	beq.n	800acfe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800acee:	4b54      	ldr	r3, [pc, #336]	; (800ae40 <xQueueSemaphoreTake+0x214>)
 800acf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acf4:	601a      	str	r2, [r3, #0]
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800acfe:	f001 ff71 	bl	800cbe4 <vPortExitCritical>
				return pdPASS;
 800ad02:	2301      	movs	r3, #1
 800ad04:	e097      	b.n	800ae36 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d111      	bne.n	800ad30 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ad0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d00a      	beq.n	800ad28 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ad12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad16:	f383 8811 	msr	BASEPRI, r3
 800ad1a:	f3bf 8f6f 	isb	sy
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	617b      	str	r3, [r7, #20]
}
 800ad24:	bf00      	nop
 800ad26:	e7fe      	b.n	800ad26 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ad28:	f001 ff5c 	bl	800cbe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	e082      	b.n	800ae36 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d106      	bne.n	800ad44 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad36:	f107 030c 	add.w	r3, r7, #12
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f000 ff5c 	bl	800bbf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad40:	2301      	movs	r3, #1
 800ad42:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad44:	f001 ff4e 	bl	800cbe4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad48:	f000 fcbc 	bl	800b6c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad4c:	f001 ff1a 	bl	800cb84 <vPortEnterCritical>
 800ad50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad56:	b25b      	sxtb	r3, r3
 800ad58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad5c:	d103      	bne.n	800ad66 <xQueueSemaphoreTake+0x13a>
 800ad5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad60:	2200      	movs	r2, #0
 800ad62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad6c:	b25b      	sxtb	r3, r3
 800ad6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad72:	d103      	bne.n	800ad7c <xQueueSemaphoreTake+0x150>
 800ad74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad7c:	f001 ff32 	bl	800cbe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad80:	463a      	mov	r2, r7
 800ad82:	f107 030c 	add.w	r3, r7, #12
 800ad86:	4611      	mov	r1, r2
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 ff4b 	bl	800bc24 <xTaskCheckForTimeOut>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d132      	bne.n	800adfa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad96:	f000 f94f 	bl	800b038 <prvIsQueueEmpty>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d026      	beq.n	800adee <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ada0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d109      	bne.n	800adbc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ada8:	f001 feec 	bl	800cb84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800adac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f001 f8a9 	bl	800bf08 <xTaskPriorityInherit>
 800adb6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800adb8:	f001 ff14 	bl	800cbe4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800adbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbe:	3324      	adds	r3, #36	; 0x24
 800adc0:	683a      	ldr	r2, [r7, #0]
 800adc2:	4611      	mov	r1, r2
 800adc4:	4618      	mov	r0, r3
 800adc6:	f000 fe63 	bl	800ba90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800adca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adcc:	f000 f8e2 	bl	800af94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800add0:	f000 fc86 	bl	800b6e0 <xTaskResumeAll>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	f47f af68 	bne.w	800acac <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800addc:	4b18      	ldr	r3, [pc, #96]	; (800ae40 <xQueueSemaphoreTake+0x214>)
 800adde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ade2:	601a      	str	r2, [r3, #0]
 800ade4:	f3bf 8f4f 	dsb	sy
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	e75e      	b.n	800acac <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800adee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adf0:	f000 f8d0 	bl	800af94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adf4:	f000 fc74 	bl	800b6e0 <xTaskResumeAll>
 800adf8:	e758      	b.n	800acac <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800adfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adfc:	f000 f8ca 	bl	800af94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae00:	f000 fc6e 	bl	800b6e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae06:	f000 f917 	bl	800b038 <prvIsQueueEmpty>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f43f af4d 	beq.w	800acac <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ae12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00d      	beq.n	800ae34 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ae18:	f001 feb4 	bl	800cb84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ae1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae1e:	f000 f811 	bl	800ae44 <prvGetDisinheritPriorityAfterTimeout>
 800ae22:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ae24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f001 f942 	bl	800c0b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ae30:	f001 fed8 	bl	800cbe4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3738      	adds	r7, #56	; 0x38
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	e000ed04 	.word	0xe000ed04

0800ae44 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d006      	beq.n	800ae62 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ae5e:	60fb      	str	r3, [r7, #12]
 800ae60:	e001      	b.n	800ae66 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ae62:	2300      	movs	r3, #0
 800ae64:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ae66:	68fb      	ldr	r3, [r7, #12]
	}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3714      	adds	r7, #20
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae80:	2300      	movs	r3, #0
 800ae82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10d      	bne.n	800aeae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d14d      	bne.n	800af36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f001 f89a 	bl	800bfd8 <xTaskPriorityDisinherit>
 800aea4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	609a      	str	r2, [r3, #8]
 800aeac:	e043      	b.n	800af36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d119      	bne.n	800aee8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6858      	ldr	r0, [r3, #4]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aebc:	461a      	mov	r2, r3
 800aebe:	68b9      	ldr	r1, [r7, #8]
 800aec0:	f002 ff44 	bl	800dd4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aecc:	441a      	add	r2, r3
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d32b      	bcc.n	800af36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	605a      	str	r2, [r3, #4]
 800aee6:	e026      	b.n	800af36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	68d8      	ldr	r0, [r3, #12]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef0:	461a      	mov	r2, r3
 800aef2:	68b9      	ldr	r1, [r7, #8]
 800aef4:	f002 ff2a 	bl	800dd4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	68da      	ldr	r2, [r3, #12]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af00:	425b      	negs	r3, r3
 800af02:	441a      	add	r2, r3
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	68da      	ldr	r2, [r3, #12]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	429a      	cmp	r2, r3
 800af12:	d207      	bcs.n	800af24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	689a      	ldr	r2, [r3, #8]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1c:	425b      	negs	r3, r3
 800af1e:	441a      	add	r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b02      	cmp	r3, #2
 800af28:	d105      	bne.n	800af36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	3b01      	subs	r3, #1
 800af34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	1c5a      	adds	r2, r3, #1
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800af3e:	697b      	ldr	r3, [r7, #20]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3718      	adds	r7, #24
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af56:	2b00      	cmp	r3, #0
 800af58:	d018      	beq.n	800af8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	68da      	ldr	r2, [r3, #12]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af62:	441a      	add	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	68da      	ldr	r2, [r3, #12]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	429a      	cmp	r2, r3
 800af72:	d303      	bcc.n	800af7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	68d9      	ldr	r1, [r3, #12]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af84:	461a      	mov	r2, r3
 800af86:	6838      	ldr	r0, [r7, #0]
 800af88:	f002 fee0 	bl	800dd4c <memcpy>
	}
}
 800af8c:	bf00      	nop
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af9c:	f001 fdf2 	bl	800cb84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afa6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afa8:	e011      	b.n	800afce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d012      	beq.n	800afd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	3324      	adds	r3, #36	; 0x24
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 fdba 	bl	800bb30 <xTaskRemoveFromEventList>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d001      	beq.n	800afc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800afc2:	f000 fe91 	bl	800bce8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	3b01      	subs	r3, #1
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	dce9      	bgt.n	800afaa <prvUnlockQueue+0x16>
 800afd6:	e000      	b.n	800afda <prvUnlockQueue+0x46>
					break;
 800afd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	22ff      	movs	r2, #255	; 0xff
 800afde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800afe2:	f001 fdff 	bl	800cbe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800afe6:	f001 fdcd 	bl	800cb84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aff0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aff2:	e011      	b.n	800b018 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	691b      	ldr	r3, [r3, #16]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d012      	beq.n	800b022 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	3310      	adds	r3, #16
 800b000:	4618      	mov	r0, r3
 800b002:	f000 fd95 	bl	800bb30 <xTaskRemoveFromEventList>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d001      	beq.n	800b010 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b00c:	f000 fe6c 	bl	800bce8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b010:	7bbb      	ldrb	r3, [r7, #14]
 800b012:	3b01      	subs	r3, #1
 800b014:	b2db      	uxtb	r3, r3
 800b016:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	dce9      	bgt.n	800aff4 <prvUnlockQueue+0x60>
 800b020:	e000      	b.n	800b024 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b022:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	22ff      	movs	r2, #255	; 0xff
 800b028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b02c:	f001 fdda 	bl	800cbe4 <vPortExitCritical>
}
 800b030:	bf00      	nop
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b040:	f001 fda0 	bl	800cb84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d102      	bne.n	800b052 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b04c:	2301      	movs	r3, #1
 800b04e:	60fb      	str	r3, [r7, #12]
 800b050:	e001      	b.n	800b056 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b052:	2300      	movs	r3, #0
 800b054:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b056:	f001 fdc5 	bl	800cbe4 <vPortExitCritical>

	return xReturn;
 800b05a:	68fb      	ldr	r3, [r7, #12]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b06c:	f001 fd8a 	bl	800cb84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b078:	429a      	cmp	r2, r3
 800b07a:	d102      	bne.n	800b082 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b07c:	2301      	movs	r3, #1
 800b07e:	60fb      	str	r3, [r7, #12]
 800b080:	e001      	b.n	800b086 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b082:	2300      	movs	r3, #0
 800b084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b086:	f001 fdad 	bl	800cbe4 <vPortExitCritical>

	return xReturn;
 800b08a:	68fb      	ldr	r3, [r7, #12]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b094:	b480      	push	{r7}
 800b096:	b085      	sub	sp, #20
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b09e:	2300      	movs	r3, #0
 800b0a0:	60fb      	str	r3, [r7, #12]
 800b0a2:	e014      	b.n	800b0ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b0a4:	4a0f      	ldr	r2, [pc, #60]	; (800b0e4 <vQueueAddToRegistry+0x50>)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d10b      	bne.n	800b0c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b0b0:	490c      	ldr	r1, [pc, #48]	; (800b0e4 <vQueueAddToRegistry+0x50>)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	683a      	ldr	r2, [r7, #0]
 800b0b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b0ba:	4a0a      	ldr	r2, [pc, #40]	; (800b0e4 <vQueueAddToRegistry+0x50>)
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	00db      	lsls	r3, r3, #3
 800b0c0:	4413      	add	r3, r2
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b0c6:	e006      	b.n	800b0d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	60fb      	str	r3, [r7, #12]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2b07      	cmp	r3, #7
 800b0d2:	d9e7      	bls.n	800b0a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b0d4:	bf00      	nop
 800b0d6:	bf00      	nop
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	200072d4 	.word	0x200072d4

0800b0e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b086      	sub	sp, #24
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0f8:	f001 fd44 	bl	800cb84 <vPortEnterCritical>
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b102:	b25b      	sxtb	r3, r3
 800b104:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b108:	d103      	bne.n	800b112 <vQueueWaitForMessageRestricted+0x2a>
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	2200      	movs	r2, #0
 800b10e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b118:	b25b      	sxtb	r3, r3
 800b11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b11e:	d103      	bne.n	800b128 <vQueueWaitForMessageRestricted+0x40>
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	2200      	movs	r2, #0
 800b124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b128:	f001 fd5c 	bl	800cbe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b130:	2b00      	cmp	r3, #0
 800b132:	d106      	bne.n	800b142 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	3324      	adds	r3, #36	; 0x24
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	68b9      	ldr	r1, [r7, #8]
 800b13c:	4618      	mov	r0, r3
 800b13e:	f000 fccb 	bl	800bad8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b142:	6978      	ldr	r0, [r7, #20]
 800b144:	f7ff ff26 	bl	800af94 <prvUnlockQueue>
	}
 800b148:	bf00      	nop
 800b14a:	3718      	adds	r7, #24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b150:	b580      	push	{r7, lr}
 800b152:	b08e      	sub	sp, #56	; 0x38
 800b154:	af04      	add	r7, sp, #16
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
 800b15c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10a      	bne.n	800b17a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b168:	f383 8811 	msr	BASEPRI, r3
 800b16c:	f3bf 8f6f 	isb	sy
 800b170:	f3bf 8f4f 	dsb	sy
 800b174:	623b      	str	r3, [r7, #32]
}
 800b176:	bf00      	nop
 800b178:	e7fe      	b.n	800b178 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d10a      	bne.n	800b196 <xTaskCreateStatic+0x46>
	__asm volatile
 800b180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b184:	f383 8811 	msr	BASEPRI, r3
 800b188:	f3bf 8f6f 	isb	sy
 800b18c:	f3bf 8f4f 	dsb	sy
 800b190:	61fb      	str	r3, [r7, #28]
}
 800b192:	bf00      	nop
 800b194:	e7fe      	b.n	800b194 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b196:	235c      	movs	r3, #92	; 0x5c
 800b198:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	2b5c      	cmp	r3, #92	; 0x5c
 800b19e:	d00a      	beq.n	800b1b6 <xTaskCreateStatic+0x66>
	__asm volatile
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	61bb      	str	r3, [r7, #24]
}
 800b1b2:	bf00      	nop
 800b1b4:	e7fe      	b.n	800b1b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b1b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d01e      	beq.n	800b1fc <xTaskCreateStatic+0xac>
 800b1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d01b      	beq.n	800b1fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d0:	2202      	movs	r2, #2
 800b1d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	9303      	str	r3, [sp, #12]
 800b1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1dc:	9302      	str	r3, [sp, #8]
 800b1de:	f107 0314 	add.w	r3, r7, #20
 800b1e2:	9301      	str	r3, [sp, #4]
 800b1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	68b9      	ldr	r1, [r7, #8]
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f000 f850 	bl	800b294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1f6:	f000 f8dd 	bl	800b3b4 <prvAddNewTaskToReadyList>
 800b1fa:	e001      	b.n	800b200 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b200:	697b      	ldr	r3, [r7, #20]
	}
 800b202:	4618      	mov	r0, r3
 800b204:	3728      	adds	r7, #40	; 0x28
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b08c      	sub	sp, #48	; 0x30
 800b20e:	af04      	add	r7, sp, #16
 800b210:	60f8      	str	r0, [r7, #12]
 800b212:	60b9      	str	r1, [r7, #8]
 800b214:	603b      	str	r3, [r7, #0]
 800b216:	4613      	mov	r3, r2
 800b218:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b21a:	88fb      	ldrh	r3, [r7, #6]
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	4618      	mov	r0, r3
 800b220:	f001 fdd2 	bl	800cdc8 <pvPortMalloc>
 800b224:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00e      	beq.n	800b24a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b22c:	205c      	movs	r0, #92	; 0x5c
 800b22e:	f001 fdcb 	bl	800cdc8 <pvPortMalloc>
 800b232:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d003      	beq.n	800b242 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b23a:	69fb      	ldr	r3, [r7, #28]
 800b23c:	697a      	ldr	r2, [r7, #20]
 800b23e:	631a      	str	r2, [r3, #48]	; 0x30
 800b240:	e005      	b.n	800b24e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b242:	6978      	ldr	r0, [r7, #20]
 800b244:	f001 fe8c 	bl	800cf60 <vPortFree>
 800b248:	e001      	b.n	800b24e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b24a:	2300      	movs	r3, #0
 800b24c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d017      	beq.n	800b284 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	2200      	movs	r2, #0
 800b258:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b25c:	88fa      	ldrh	r2, [r7, #6]
 800b25e:	2300      	movs	r3, #0
 800b260:	9303      	str	r3, [sp, #12]
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	9302      	str	r3, [sp, #8]
 800b266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b268:	9301      	str	r3, [sp, #4]
 800b26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	68b9      	ldr	r1, [r7, #8]
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f000 f80e 	bl	800b294 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b278:	69f8      	ldr	r0, [r7, #28]
 800b27a:	f000 f89b 	bl	800b3b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b27e:	2301      	movs	r3, #1
 800b280:	61bb      	str	r3, [r7, #24]
 800b282:	e002      	b.n	800b28a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b284:	f04f 33ff 	mov.w	r3, #4294967295
 800b288:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b28a:	69bb      	ldr	r3, [r7, #24]
	}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3720      	adds	r7, #32
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b088      	sub	sp, #32
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
 800b2a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	21a5      	movs	r1, #165	; 0xa5
 800b2ae:	f002 fd5b 	bl	800dd68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	f023 0307 	bic.w	r3, r3, #7
 800b2ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	f003 0307 	and.w	r3, r3, #7
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00a      	beq.n	800b2ec <prvInitialiseNewTask+0x58>
	__asm volatile
 800b2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2da:	f383 8811 	msr	BASEPRI, r3
 800b2de:	f3bf 8f6f 	isb	sy
 800b2e2:	f3bf 8f4f 	dsb	sy
 800b2e6:	617b      	str	r3, [r7, #20]
}
 800b2e8:	bf00      	nop
 800b2ea:	e7fe      	b.n	800b2ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d01f      	beq.n	800b332 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	61fb      	str	r3, [r7, #28]
 800b2f6:	e012      	b.n	800b31e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2f8:	68ba      	ldr	r2, [r7, #8]
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	7819      	ldrb	r1, [r3, #0]
 800b300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	4413      	add	r3, r2
 800b306:	3334      	adds	r3, #52	; 0x34
 800b308:	460a      	mov	r2, r1
 800b30a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b30c:	68ba      	ldr	r2, [r7, #8]
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	4413      	add	r3, r2
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d006      	beq.n	800b326 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	3301      	adds	r3, #1
 800b31c:	61fb      	str	r3, [r7, #28]
 800b31e:	69fb      	ldr	r3, [r7, #28]
 800b320:	2b0f      	cmp	r3, #15
 800b322:	d9e9      	bls.n	800b2f8 <prvInitialiseNewTask+0x64>
 800b324:	e000      	b.n	800b328 <prvInitialiseNewTask+0x94>
			{
				break;
 800b326:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32a:	2200      	movs	r2, #0
 800b32c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b330:	e003      	b.n	800b33a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b334:	2200      	movs	r2, #0
 800b336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33c:	2b37      	cmp	r3, #55	; 0x37
 800b33e:	d901      	bls.n	800b344 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b340:	2337      	movs	r3, #55	; 0x37
 800b342:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b348:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b34e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b352:	2200      	movs	r2, #0
 800b354:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b358:	3304      	adds	r3, #4
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fe ff64 	bl	800a228 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b362:	3318      	adds	r3, #24
 800b364:	4618      	mov	r0, r3
 800b366:	f7fe ff5f 	bl	800a228 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b36e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b372:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b378:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b37e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b382:	2200      	movs	r2, #0
 800b384:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b388:	2200      	movs	r2, #0
 800b38a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	68f9      	ldr	r1, [r7, #12]
 800b392:	69b8      	ldr	r0, [r7, #24]
 800b394:	f001 fac6 	bl	800c924 <pxPortInitialiseStack>
 800b398:	4602      	mov	r2, r0
 800b39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d002      	beq.n	800b3aa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3aa:	bf00      	nop
 800b3ac:	3720      	adds	r7, #32
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
	...

0800b3b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3bc:	f001 fbe2 	bl	800cb84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3c0:	4b2d      	ldr	r3, [pc, #180]	; (800b478 <prvAddNewTaskToReadyList+0xc4>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	4a2c      	ldr	r2, [pc, #176]	; (800b478 <prvAddNewTaskToReadyList+0xc4>)
 800b3c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b3ca:	4b2c      	ldr	r3, [pc, #176]	; (800b47c <prvAddNewTaskToReadyList+0xc8>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d109      	bne.n	800b3e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3d2:	4a2a      	ldr	r2, [pc, #168]	; (800b47c <prvAddNewTaskToReadyList+0xc8>)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3d8:	4b27      	ldr	r3, [pc, #156]	; (800b478 <prvAddNewTaskToReadyList+0xc4>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d110      	bne.n	800b402 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3e0:	f000 fca6 	bl	800bd30 <prvInitialiseTaskLists>
 800b3e4:	e00d      	b.n	800b402 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3e6:	4b26      	ldr	r3, [pc, #152]	; (800b480 <prvAddNewTaskToReadyList+0xcc>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d109      	bne.n	800b402 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3ee:	4b23      	ldr	r3, [pc, #140]	; (800b47c <prvAddNewTaskToReadyList+0xc8>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d802      	bhi.n	800b402 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b3fc:	4a1f      	ldr	r2, [pc, #124]	; (800b47c <prvAddNewTaskToReadyList+0xc8>)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b402:	4b20      	ldr	r3, [pc, #128]	; (800b484 <prvAddNewTaskToReadyList+0xd0>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3301      	adds	r3, #1
 800b408:	4a1e      	ldr	r2, [pc, #120]	; (800b484 <prvAddNewTaskToReadyList+0xd0>)
 800b40a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b40c:	4b1d      	ldr	r3, [pc, #116]	; (800b484 <prvAddNewTaskToReadyList+0xd0>)
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b418:	4b1b      	ldr	r3, [pc, #108]	; (800b488 <prvAddNewTaskToReadyList+0xd4>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d903      	bls.n	800b428 <prvAddNewTaskToReadyList+0x74>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b424:	4a18      	ldr	r2, [pc, #96]	; (800b488 <prvAddNewTaskToReadyList+0xd4>)
 800b426:	6013      	str	r3, [r2, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b42c:	4613      	mov	r3, r2
 800b42e:	009b      	lsls	r3, r3, #2
 800b430:	4413      	add	r3, r2
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	4a15      	ldr	r2, [pc, #84]	; (800b48c <prvAddNewTaskToReadyList+0xd8>)
 800b436:	441a      	add	r2, r3
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	3304      	adds	r3, #4
 800b43c:	4619      	mov	r1, r3
 800b43e:	4610      	mov	r0, r2
 800b440:	f7fe feff 	bl	800a242 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b444:	f001 fbce 	bl	800cbe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b448:	4b0d      	ldr	r3, [pc, #52]	; (800b480 <prvAddNewTaskToReadyList+0xcc>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00e      	beq.n	800b46e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b450:	4b0a      	ldr	r3, [pc, #40]	; (800b47c <prvAddNewTaskToReadyList+0xc8>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d207      	bcs.n	800b46e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b45e:	4b0c      	ldr	r3, [pc, #48]	; (800b490 <prvAddNewTaskToReadyList+0xdc>)
 800b460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b464:	601a      	str	r2, [r3, #0]
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b46e:	bf00      	nop
 800b470:	3708      	adds	r7, #8
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	20000fb0 	.word	0x20000fb0
 800b47c:	20000adc 	.word	0x20000adc
 800b480:	20000fbc 	.word	0x20000fbc
 800b484:	20000fcc 	.word	0x20000fcc
 800b488:	20000fb8 	.word	0x20000fb8
 800b48c:	20000ae0 	.word	0x20000ae0
 800b490:	e000ed04 	.word	0xe000ed04

0800b494 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b494:	b580      	push	{r7, lr}
 800b496:	b08a      	sub	sp, #40	; 0x28
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10a      	bne.n	800b4be <vTaskDelayUntil+0x2a>
	__asm volatile
 800b4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ac:	f383 8811 	msr	BASEPRI, r3
 800b4b0:	f3bf 8f6f 	isb	sy
 800b4b4:	f3bf 8f4f 	dsb	sy
 800b4b8:	617b      	str	r3, [r7, #20]
}
 800b4ba:	bf00      	nop
 800b4bc:	e7fe      	b.n	800b4bc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10a      	bne.n	800b4da <vTaskDelayUntil+0x46>
	__asm volatile
 800b4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c8:	f383 8811 	msr	BASEPRI, r3
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	613b      	str	r3, [r7, #16]
}
 800b4d6:	bf00      	nop
 800b4d8:	e7fe      	b.n	800b4d8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b4da:	4b2a      	ldr	r3, [pc, #168]	; (800b584 <vTaskDelayUntil+0xf0>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00a      	beq.n	800b4f8 <vTaskDelayUntil+0x64>
	__asm volatile
 800b4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e6:	f383 8811 	msr	BASEPRI, r3
 800b4ea:	f3bf 8f6f 	isb	sy
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	60fb      	str	r3, [r7, #12]
}
 800b4f4:	bf00      	nop
 800b4f6:	e7fe      	b.n	800b4f6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b4f8:	f000 f8e4 	bl	800b6c4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b4fc:	4b22      	ldr	r3, [pc, #136]	; (800b588 <vTaskDelayUntil+0xf4>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	683a      	ldr	r2, [r7, #0]
 800b508:	4413      	add	r3, r2
 800b50a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	6a3a      	ldr	r2, [r7, #32]
 800b512:	429a      	cmp	r2, r3
 800b514:	d20b      	bcs.n	800b52e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	69fa      	ldr	r2, [r7, #28]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d211      	bcs.n	800b544 <vTaskDelayUntil+0xb0>
 800b520:	69fa      	ldr	r2, [r7, #28]
 800b522:	6a3b      	ldr	r3, [r7, #32]
 800b524:	429a      	cmp	r2, r3
 800b526:	d90d      	bls.n	800b544 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b528:	2301      	movs	r3, #1
 800b52a:	627b      	str	r3, [r7, #36]	; 0x24
 800b52c:	e00a      	b.n	800b544 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	69fa      	ldr	r2, [r7, #28]
 800b534:	429a      	cmp	r2, r3
 800b536:	d303      	bcc.n	800b540 <vTaskDelayUntil+0xac>
 800b538:	69fa      	ldr	r2, [r7, #28]
 800b53a:	6a3b      	ldr	r3, [r7, #32]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d901      	bls.n	800b544 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b540:	2301      	movs	r3, #1
 800b542:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	69fa      	ldr	r2, [r7, #28]
 800b548:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d006      	beq.n	800b55e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b550:	69fa      	ldr	r2, [r7, #28]
 800b552:	6a3b      	ldr	r3, [r7, #32]
 800b554:	1ad3      	subs	r3, r2, r3
 800b556:	2100      	movs	r1, #0
 800b558:	4618      	mov	r0, r3
 800b55a:	f000 fe41 	bl	800c1e0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b55e:	f000 f8bf 	bl	800b6e0 <xTaskResumeAll>
 800b562:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b564:	69bb      	ldr	r3, [r7, #24]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d107      	bne.n	800b57a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b56a:	4b08      	ldr	r3, [pc, #32]	; (800b58c <vTaskDelayUntil+0xf8>)
 800b56c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b570:	601a      	str	r2, [r3, #0]
 800b572:	f3bf 8f4f 	dsb	sy
 800b576:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b57a:	bf00      	nop
 800b57c:	3728      	adds	r7, #40	; 0x28
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	20000fd8 	.word	0x20000fd8
 800b588:	20000fb4 	.word	0x20000fb4
 800b58c:	e000ed04 	.word	0xe000ed04

0800b590 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b598:	2300      	movs	r3, #0
 800b59a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d017      	beq.n	800b5d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b5a2:	4b13      	ldr	r3, [pc, #76]	; (800b5f0 <vTaskDelay+0x60>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00a      	beq.n	800b5c0 <vTaskDelay+0x30>
	__asm volatile
 800b5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ae:	f383 8811 	msr	BASEPRI, r3
 800b5b2:	f3bf 8f6f 	isb	sy
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	60bb      	str	r3, [r7, #8]
}
 800b5bc:	bf00      	nop
 800b5be:	e7fe      	b.n	800b5be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b5c0:	f000 f880 	bl	800b6c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 fe0a 	bl	800c1e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b5cc:	f000 f888 	bl	800b6e0 <xTaskResumeAll>
 800b5d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d107      	bne.n	800b5e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b5d8:	4b06      	ldr	r3, [pc, #24]	; (800b5f4 <vTaskDelay+0x64>)
 800b5da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5de:	601a      	str	r2, [r3, #0]
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b5e8:	bf00      	nop
 800b5ea:	3710      	adds	r7, #16
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	20000fd8 	.word	0x20000fd8
 800b5f4:	e000ed04 	.word	0xe000ed04

0800b5f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b08a      	sub	sp, #40	; 0x28
 800b5fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b5fe:	2300      	movs	r3, #0
 800b600:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b602:	2300      	movs	r3, #0
 800b604:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b606:	463a      	mov	r2, r7
 800b608:	1d39      	adds	r1, r7, #4
 800b60a:	f107 0308 	add.w	r3, r7, #8
 800b60e:	4618      	mov	r0, r3
 800b610:	f7fe fdb6 	bl	800a180 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	68ba      	ldr	r2, [r7, #8]
 800b61a:	9202      	str	r2, [sp, #8]
 800b61c:	9301      	str	r3, [sp, #4]
 800b61e:	2300      	movs	r3, #0
 800b620:	9300      	str	r3, [sp, #0]
 800b622:	2300      	movs	r3, #0
 800b624:	460a      	mov	r2, r1
 800b626:	4921      	ldr	r1, [pc, #132]	; (800b6ac <vTaskStartScheduler+0xb4>)
 800b628:	4821      	ldr	r0, [pc, #132]	; (800b6b0 <vTaskStartScheduler+0xb8>)
 800b62a:	f7ff fd91 	bl	800b150 <xTaskCreateStatic>
 800b62e:	4603      	mov	r3, r0
 800b630:	4a20      	ldr	r2, [pc, #128]	; (800b6b4 <vTaskStartScheduler+0xbc>)
 800b632:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b634:	4b1f      	ldr	r3, [pc, #124]	; (800b6b4 <vTaskStartScheduler+0xbc>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d002      	beq.n	800b642 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b63c:	2301      	movs	r3, #1
 800b63e:	617b      	str	r3, [r7, #20]
 800b640:	e001      	b.n	800b646 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b642:	2300      	movs	r3, #0
 800b644:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d102      	bne.n	800b652 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b64c:	f000 fe1c 	bl	800c288 <xTimerCreateTimerTask>
 800b650:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	2b01      	cmp	r3, #1
 800b656:	d116      	bne.n	800b686 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65c:	f383 8811 	msr	BASEPRI, r3
 800b660:	f3bf 8f6f 	isb	sy
 800b664:	f3bf 8f4f 	dsb	sy
 800b668:	613b      	str	r3, [r7, #16]
}
 800b66a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b66c:	4b12      	ldr	r3, [pc, #72]	; (800b6b8 <vTaskStartScheduler+0xc0>)
 800b66e:	f04f 32ff 	mov.w	r2, #4294967295
 800b672:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b674:	4b11      	ldr	r3, [pc, #68]	; (800b6bc <vTaskStartScheduler+0xc4>)
 800b676:	2201      	movs	r2, #1
 800b678:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b67a:	4b11      	ldr	r3, [pc, #68]	; (800b6c0 <vTaskStartScheduler+0xc8>)
 800b67c:	2200      	movs	r2, #0
 800b67e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b680:	f001 f9de 	bl	800ca40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b684:	e00e      	b.n	800b6a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b68c:	d10a      	bne.n	800b6a4 <vTaskStartScheduler+0xac>
	__asm volatile
 800b68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b692:	f383 8811 	msr	BASEPRI, r3
 800b696:	f3bf 8f6f 	isb	sy
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	60fb      	str	r3, [r7, #12]
}
 800b6a0:	bf00      	nop
 800b6a2:	e7fe      	b.n	800b6a2 <vTaskStartScheduler+0xaa>
}
 800b6a4:	bf00      	nop
 800b6a6:	3718      	adds	r7, #24
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	0800e7c4 	.word	0x0800e7c4
 800b6b0:	0800bd01 	.word	0x0800bd01
 800b6b4:	20000fd4 	.word	0x20000fd4
 800b6b8:	20000fd0 	.word	0x20000fd0
 800b6bc:	20000fbc 	.word	0x20000fbc
 800b6c0:	20000fb4 	.word	0x20000fb4

0800b6c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b6c8:	4b04      	ldr	r3, [pc, #16]	; (800b6dc <vTaskSuspendAll+0x18>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	4a03      	ldr	r2, [pc, #12]	; (800b6dc <vTaskSuspendAll+0x18>)
 800b6d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b6d2:	bf00      	nop
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr
 800b6dc:	20000fd8 	.word	0x20000fd8

0800b6e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b6ee:	4b42      	ldr	r3, [pc, #264]	; (800b7f8 <xTaskResumeAll+0x118>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d10a      	bne.n	800b70c <xTaskResumeAll+0x2c>
	__asm volatile
 800b6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fa:	f383 8811 	msr	BASEPRI, r3
 800b6fe:	f3bf 8f6f 	isb	sy
 800b702:	f3bf 8f4f 	dsb	sy
 800b706:	603b      	str	r3, [r7, #0]
}
 800b708:	bf00      	nop
 800b70a:	e7fe      	b.n	800b70a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b70c:	f001 fa3a 	bl	800cb84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b710:	4b39      	ldr	r3, [pc, #228]	; (800b7f8 <xTaskResumeAll+0x118>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	3b01      	subs	r3, #1
 800b716:	4a38      	ldr	r2, [pc, #224]	; (800b7f8 <xTaskResumeAll+0x118>)
 800b718:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b71a:	4b37      	ldr	r3, [pc, #220]	; (800b7f8 <xTaskResumeAll+0x118>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d162      	bne.n	800b7e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b722:	4b36      	ldr	r3, [pc, #216]	; (800b7fc <xTaskResumeAll+0x11c>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d05e      	beq.n	800b7e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b72a:	e02f      	b.n	800b78c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b72c:	4b34      	ldr	r3, [pc, #208]	; (800b800 <xTaskResumeAll+0x120>)
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	3318      	adds	r3, #24
 800b738:	4618      	mov	r0, r3
 800b73a:	f7fe fddf 	bl	800a2fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	3304      	adds	r3, #4
 800b742:	4618      	mov	r0, r3
 800b744:	f7fe fdda 	bl	800a2fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b74c:	4b2d      	ldr	r3, [pc, #180]	; (800b804 <xTaskResumeAll+0x124>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	429a      	cmp	r2, r3
 800b752:	d903      	bls.n	800b75c <xTaskResumeAll+0x7c>
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b758:	4a2a      	ldr	r2, [pc, #168]	; (800b804 <xTaskResumeAll+0x124>)
 800b75a:	6013      	str	r3, [r2, #0]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b760:	4613      	mov	r3, r2
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	4413      	add	r3, r2
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	4a27      	ldr	r2, [pc, #156]	; (800b808 <xTaskResumeAll+0x128>)
 800b76a:	441a      	add	r2, r3
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	3304      	adds	r3, #4
 800b770:	4619      	mov	r1, r3
 800b772:	4610      	mov	r0, r2
 800b774:	f7fe fd65 	bl	800a242 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b77c:	4b23      	ldr	r3, [pc, #140]	; (800b80c <xTaskResumeAll+0x12c>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b782:	429a      	cmp	r2, r3
 800b784:	d302      	bcc.n	800b78c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b786:	4b22      	ldr	r3, [pc, #136]	; (800b810 <xTaskResumeAll+0x130>)
 800b788:	2201      	movs	r2, #1
 800b78a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b78c:	4b1c      	ldr	r3, [pc, #112]	; (800b800 <xTaskResumeAll+0x120>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1cb      	bne.n	800b72c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d001      	beq.n	800b79e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b79a:	f000 fb67 	bl	800be6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b79e:	4b1d      	ldr	r3, [pc, #116]	; (800b814 <xTaskResumeAll+0x134>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d010      	beq.n	800b7cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b7aa:	f000 f859 	bl	800b860 <xTaskIncrementTick>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d002      	beq.n	800b7ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b7b4:	4b16      	ldr	r3, [pc, #88]	; (800b810 <xTaskResumeAll+0x130>)
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	3b01      	subs	r3, #1
 800b7be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1f1      	bne.n	800b7aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b7c6:	4b13      	ldr	r3, [pc, #76]	; (800b814 <xTaskResumeAll+0x134>)
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b7cc:	4b10      	ldr	r3, [pc, #64]	; (800b810 <xTaskResumeAll+0x130>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d009      	beq.n	800b7e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b7d8:	4b0f      	ldr	r3, [pc, #60]	; (800b818 <xTaskResumeAll+0x138>)
 800b7da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7de:	601a      	str	r2, [r3, #0]
 800b7e0:	f3bf 8f4f 	dsb	sy
 800b7e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b7e8:	f001 f9fc 	bl	800cbe4 <vPortExitCritical>

	return xAlreadyYielded;
 800b7ec:	68bb      	ldr	r3, [r7, #8]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20000fd8 	.word	0x20000fd8
 800b7fc:	20000fb0 	.word	0x20000fb0
 800b800:	20000f70 	.word	0x20000f70
 800b804:	20000fb8 	.word	0x20000fb8
 800b808:	20000ae0 	.word	0x20000ae0
 800b80c:	20000adc 	.word	0x20000adc
 800b810:	20000fc4 	.word	0x20000fc4
 800b814:	20000fc0 	.word	0x20000fc0
 800b818:	e000ed04 	.word	0xe000ed04

0800b81c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b822:	4b05      	ldr	r3, [pc, #20]	; (800b838 <xTaskGetTickCount+0x1c>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b828:	687b      	ldr	r3, [r7, #4]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	370c      	adds	r7, #12
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr
 800b836:	bf00      	nop
 800b838:	20000fb4 	.word	0x20000fb4

0800b83c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b842:	f001 fa81 	bl	800cd48 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b846:	2300      	movs	r3, #0
 800b848:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b84a:	4b04      	ldr	r3, [pc, #16]	; (800b85c <xTaskGetTickCountFromISR+0x20>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b850:	683b      	ldr	r3, [r7, #0]
}
 800b852:	4618      	mov	r0, r3
 800b854:	3708      	adds	r7, #8
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	20000fb4 	.word	0x20000fb4

0800b860 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b086      	sub	sp, #24
 800b864:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b866:	2300      	movs	r3, #0
 800b868:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b86a:	4b4f      	ldr	r3, [pc, #316]	; (800b9a8 <xTaskIncrementTick+0x148>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	f040 808f 	bne.w	800b992 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b874:	4b4d      	ldr	r3, [pc, #308]	; (800b9ac <xTaskIncrementTick+0x14c>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	3301      	adds	r3, #1
 800b87a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b87c:	4a4b      	ldr	r2, [pc, #300]	; (800b9ac <xTaskIncrementTick+0x14c>)
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d120      	bne.n	800b8ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b888:	4b49      	ldr	r3, [pc, #292]	; (800b9b0 <xTaskIncrementTick+0x150>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00a      	beq.n	800b8a8 <xTaskIncrementTick+0x48>
	__asm volatile
 800b892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b896:	f383 8811 	msr	BASEPRI, r3
 800b89a:	f3bf 8f6f 	isb	sy
 800b89e:	f3bf 8f4f 	dsb	sy
 800b8a2:	603b      	str	r3, [r7, #0]
}
 800b8a4:	bf00      	nop
 800b8a6:	e7fe      	b.n	800b8a6 <xTaskIncrementTick+0x46>
 800b8a8:	4b41      	ldr	r3, [pc, #260]	; (800b9b0 <xTaskIncrementTick+0x150>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	60fb      	str	r3, [r7, #12]
 800b8ae:	4b41      	ldr	r3, [pc, #260]	; (800b9b4 <xTaskIncrementTick+0x154>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4a3f      	ldr	r2, [pc, #252]	; (800b9b0 <xTaskIncrementTick+0x150>)
 800b8b4:	6013      	str	r3, [r2, #0]
 800b8b6:	4a3f      	ldr	r2, [pc, #252]	; (800b9b4 <xTaskIncrementTick+0x154>)
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6013      	str	r3, [r2, #0]
 800b8bc:	4b3e      	ldr	r3, [pc, #248]	; (800b9b8 <xTaskIncrementTick+0x158>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	4a3d      	ldr	r2, [pc, #244]	; (800b9b8 <xTaskIncrementTick+0x158>)
 800b8c4:	6013      	str	r3, [r2, #0]
 800b8c6:	f000 fad1 	bl	800be6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b8ca:	4b3c      	ldr	r3, [pc, #240]	; (800b9bc <xTaskIncrementTick+0x15c>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	693a      	ldr	r2, [r7, #16]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d349      	bcc.n	800b968 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8d4:	4b36      	ldr	r3, [pc, #216]	; (800b9b0 <xTaskIncrementTick+0x150>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d104      	bne.n	800b8e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8de:	4b37      	ldr	r3, [pc, #220]	; (800b9bc <xTaskIncrementTick+0x15c>)
 800b8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e4:	601a      	str	r2, [r3, #0]
					break;
 800b8e6:	e03f      	b.n	800b968 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8e8:	4b31      	ldr	r3, [pc, #196]	; (800b9b0 <xTaskIncrementTick+0x150>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b8f8:	693a      	ldr	r2, [r7, #16]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d203      	bcs.n	800b908 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b900:	4a2e      	ldr	r2, [pc, #184]	; (800b9bc <xTaskIncrementTick+0x15c>)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b906:	e02f      	b.n	800b968 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	3304      	adds	r3, #4
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7fe fcf5 	bl	800a2fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b916:	2b00      	cmp	r3, #0
 800b918:	d004      	beq.n	800b924 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	3318      	adds	r3, #24
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fe fcec 	bl	800a2fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b928:	4b25      	ldr	r3, [pc, #148]	; (800b9c0 <xTaskIncrementTick+0x160>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d903      	bls.n	800b938 <xTaskIncrementTick+0xd8>
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b934:	4a22      	ldr	r2, [pc, #136]	; (800b9c0 <xTaskIncrementTick+0x160>)
 800b936:	6013      	str	r3, [r2, #0]
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b93c:	4613      	mov	r3, r2
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	4413      	add	r3, r2
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	4a1f      	ldr	r2, [pc, #124]	; (800b9c4 <xTaskIncrementTick+0x164>)
 800b946:	441a      	add	r2, r3
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	3304      	adds	r3, #4
 800b94c:	4619      	mov	r1, r3
 800b94e:	4610      	mov	r0, r2
 800b950:	f7fe fc77 	bl	800a242 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b958:	4b1b      	ldr	r3, [pc, #108]	; (800b9c8 <xTaskIncrementTick+0x168>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95e:	429a      	cmp	r2, r3
 800b960:	d3b8      	bcc.n	800b8d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b962:	2301      	movs	r3, #1
 800b964:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b966:	e7b5      	b.n	800b8d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b968:	4b17      	ldr	r3, [pc, #92]	; (800b9c8 <xTaskIncrementTick+0x168>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b96e:	4915      	ldr	r1, [pc, #84]	; (800b9c4 <xTaskIncrementTick+0x164>)
 800b970:	4613      	mov	r3, r2
 800b972:	009b      	lsls	r3, r3, #2
 800b974:	4413      	add	r3, r2
 800b976:	009b      	lsls	r3, r3, #2
 800b978:	440b      	add	r3, r1
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d901      	bls.n	800b984 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b980:	2301      	movs	r3, #1
 800b982:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b984:	4b11      	ldr	r3, [pc, #68]	; (800b9cc <xTaskIncrementTick+0x16c>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d007      	beq.n	800b99c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b98c:	2301      	movs	r3, #1
 800b98e:	617b      	str	r3, [r7, #20]
 800b990:	e004      	b.n	800b99c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b992:	4b0f      	ldr	r3, [pc, #60]	; (800b9d0 <xTaskIncrementTick+0x170>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	3301      	adds	r3, #1
 800b998:	4a0d      	ldr	r2, [pc, #52]	; (800b9d0 <xTaskIncrementTick+0x170>)
 800b99a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b99c:	697b      	ldr	r3, [r7, #20]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3718      	adds	r7, #24
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	20000fd8 	.word	0x20000fd8
 800b9ac:	20000fb4 	.word	0x20000fb4
 800b9b0:	20000f68 	.word	0x20000f68
 800b9b4:	20000f6c 	.word	0x20000f6c
 800b9b8:	20000fc8 	.word	0x20000fc8
 800b9bc:	20000fd0 	.word	0x20000fd0
 800b9c0:	20000fb8 	.word	0x20000fb8
 800b9c4:	20000ae0 	.word	0x20000ae0
 800b9c8:	20000adc 	.word	0x20000adc
 800b9cc:	20000fc4 	.word	0x20000fc4
 800b9d0:	20000fc0 	.word	0x20000fc0

0800b9d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b9da:	4b28      	ldr	r3, [pc, #160]	; (800ba7c <vTaskSwitchContext+0xa8>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d003      	beq.n	800b9ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b9e2:	4b27      	ldr	r3, [pc, #156]	; (800ba80 <vTaskSwitchContext+0xac>)
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b9e8:	e041      	b.n	800ba6e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b9ea:	4b25      	ldr	r3, [pc, #148]	; (800ba80 <vTaskSwitchContext+0xac>)
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9f0:	4b24      	ldr	r3, [pc, #144]	; (800ba84 <vTaskSwitchContext+0xb0>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	60fb      	str	r3, [r7, #12]
 800b9f6:	e010      	b.n	800ba1a <vTaskSwitchContext+0x46>
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10a      	bne.n	800ba14 <vTaskSwitchContext+0x40>
	__asm volatile
 800b9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba02:	f383 8811 	msr	BASEPRI, r3
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	607b      	str	r3, [r7, #4]
}
 800ba10:	bf00      	nop
 800ba12:	e7fe      	b.n	800ba12 <vTaskSwitchContext+0x3e>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	3b01      	subs	r3, #1
 800ba18:	60fb      	str	r3, [r7, #12]
 800ba1a:	491b      	ldr	r1, [pc, #108]	; (800ba88 <vTaskSwitchContext+0xb4>)
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	4613      	mov	r3, r2
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4413      	add	r3, r2
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	440b      	add	r3, r1
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d0e4      	beq.n	800b9f8 <vTaskSwitchContext+0x24>
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	4613      	mov	r3, r2
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	4413      	add	r3, r2
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	4a13      	ldr	r2, [pc, #76]	; (800ba88 <vTaskSwitchContext+0xb4>)
 800ba3a:	4413      	add	r3, r2
 800ba3c:	60bb      	str	r3, [r7, #8]
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	685a      	ldr	r2, [r3, #4]
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	605a      	str	r2, [r3, #4]
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	685a      	ldr	r2, [r3, #4]
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	3308      	adds	r3, #8
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d104      	bne.n	800ba5e <vTaskSwitchContext+0x8a>
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	685a      	ldr	r2, [r3, #4]
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	605a      	str	r2, [r3, #4]
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	4a09      	ldr	r2, [pc, #36]	; (800ba8c <vTaskSwitchContext+0xb8>)
 800ba66:	6013      	str	r3, [r2, #0]
 800ba68:	4a06      	ldr	r2, [pc, #24]	; (800ba84 <vTaskSwitchContext+0xb0>)
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	6013      	str	r3, [r2, #0]
}
 800ba6e:	bf00      	nop
 800ba70:	3714      	adds	r7, #20
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	20000fd8 	.word	0x20000fd8
 800ba80:	20000fc4 	.word	0x20000fc4
 800ba84:	20000fb8 	.word	0x20000fb8
 800ba88:	20000ae0 	.word	0x20000ae0
 800ba8c:	20000adc 	.word	0x20000adc

0800ba90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d10a      	bne.n	800bab6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800baa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa4:	f383 8811 	msr	BASEPRI, r3
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	f3bf 8f4f 	dsb	sy
 800bab0:	60fb      	str	r3, [r7, #12]
}
 800bab2:	bf00      	nop
 800bab4:	e7fe      	b.n	800bab4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bab6:	4b07      	ldr	r3, [pc, #28]	; (800bad4 <vTaskPlaceOnEventList+0x44>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	3318      	adds	r3, #24
 800babc:	4619      	mov	r1, r3
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f7fe fbe3 	bl	800a28a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bac4:	2101      	movs	r1, #1
 800bac6:	6838      	ldr	r0, [r7, #0]
 800bac8:	f000 fb8a 	bl	800c1e0 <prvAddCurrentTaskToDelayedList>
}
 800bacc:	bf00      	nop
 800bace:	3710      	adds	r7, #16
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	20000adc 	.word	0x20000adc

0800bad8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b086      	sub	sp, #24
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d10a      	bne.n	800bb00 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800baea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baee:	f383 8811 	msr	BASEPRI, r3
 800baf2:	f3bf 8f6f 	isb	sy
 800baf6:	f3bf 8f4f 	dsb	sy
 800bafa:	617b      	str	r3, [r7, #20]
}
 800bafc:	bf00      	nop
 800bafe:	e7fe      	b.n	800bafe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb00:	4b0a      	ldr	r3, [pc, #40]	; (800bb2c <vTaskPlaceOnEventListRestricted+0x54>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	3318      	adds	r3, #24
 800bb06:	4619      	mov	r1, r3
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	f7fe fb9a 	bl	800a242 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d002      	beq.n	800bb1a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bb14:	f04f 33ff 	mov.w	r3, #4294967295
 800bb18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb1a:	6879      	ldr	r1, [r7, #4]
 800bb1c:	68b8      	ldr	r0, [r7, #8]
 800bb1e:	f000 fb5f 	bl	800c1e0 <prvAddCurrentTaskToDelayedList>
	}
 800bb22:	bf00      	nop
 800bb24:	3718      	adds	r7, #24
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	20000adc 	.word	0x20000adc

0800bb30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b086      	sub	sp, #24
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d10a      	bne.n	800bb5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4a:	f383 8811 	msr	BASEPRI, r3
 800bb4e:	f3bf 8f6f 	isb	sy
 800bb52:	f3bf 8f4f 	dsb	sy
 800bb56:	60fb      	str	r3, [r7, #12]
}
 800bb58:	bf00      	nop
 800bb5a:	e7fe      	b.n	800bb5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	3318      	adds	r3, #24
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7fe fbcb 	bl	800a2fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb66:	4b1e      	ldr	r3, [pc, #120]	; (800bbe0 <xTaskRemoveFromEventList+0xb0>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d11d      	bne.n	800bbaa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	3304      	adds	r3, #4
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fe fbc2 	bl	800a2fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb7c:	4b19      	ldr	r3, [pc, #100]	; (800bbe4 <xTaskRemoveFromEventList+0xb4>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d903      	bls.n	800bb8c <xTaskRemoveFromEventList+0x5c>
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb88:	4a16      	ldr	r2, [pc, #88]	; (800bbe4 <xTaskRemoveFromEventList+0xb4>)
 800bb8a:	6013      	str	r3, [r2, #0]
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb90:	4613      	mov	r3, r2
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	4413      	add	r3, r2
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	4a13      	ldr	r2, [pc, #76]	; (800bbe8 <xTaskRemoveFromEventList+0xb8>)
 800bb9a:	441a      	add	r2, r3
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	3304      	adds	r3, #4
 800bba0:	4619      	mov	r1, r3
 800bba2:	4610      	mov	r0, r2
 800bba4:	f7fe fb4d 	bl	800a242 <vListInsertEnd>
 800bba8:	e005      	b.n	800bbb6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	3318      	adds	r3, #24
 800bbae:	4619      	mov	r1, r3
 800bbb0:	480e      	ldr	r0, [pc, #56]	; (800bbec <xTaskRemoveFromEventList+0xbc>)
 800bbb2:	f7fe fb46 	bl	800a242 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbba:	4b0d      	ldr	r3, [pc, #52]	; (800bbf0 <xTaskRemoveFromEventList+0xc0>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d905      	bls.n	800bbd0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bbc8:	4b0a      	ldr	r3, [pc, #40]	; (800bbf4 <xTaskRemoveFromEventList+0xc4>)
 800bbca:	2201      	movs	r2, #1
 800bbcc:	601a      	str	r2, [r3, #0]
 800bbce:	e001      	b.n	800bbd4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bbd4:	697b      	ldr	r3, [r7, #20]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3718      	adds	r7, #24
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	20000fd8 	.word	0x20000fd8
 800bbe4:	20000fb8 	.word	0x20000fb8
 800bbe8:	20000ae0 	.word	0x20000ae0
 800bbec:	20000f70 	.word	0x20000f70
 800bbf0:	20000adc 	.word	0x20000adc
 800bbf4:	20000fc4 	.word	0x20000fc4

0800bbf8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc00:	4b06      	ldr	r3, [pc, #24]	; (800bc1c <vTaskInternalSetTimeOutState+0x24>)
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc08:	4b05      	ldr	r3, [pc, #20]	; (800bc20 <vTaskInternalSetTimeOutState+0x28>)
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	605a      	str	r2, [r3, #4]
}
 800bc10:	bf00      	nop
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	20000fc8 	.word	0x20000fc8
 800bc20:	20000fb4 	.word	0x20000fb4

0800bc24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b088      	sub	sp, #32
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10a      	bne.n	800bc4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	613b      	str	r3, [r7, #16]
}
 800bc46:	bf00      	nop
 800bc48:	e7fe      	b.n	800bc48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d10a      	bne.n	800bc66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc54:	f383 8811 	msr	BASEPRI, r3
 800bc58:	f3bf 8f6f 	isb	sy
 800bc5c:	f3bf 8f4f 	dsb	sy
 800bc60:	60fb      	str	r3, [r7, #12]
}
 800bc62:	bf00      	nop
 800bc64:	e7fe      	b.n	800bc64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bc66:	f000 ff8d 	bl	800cb84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc6a:	4b1d      	ldr	r3, [pc, #116]	; (800bce0 <xTaskCheckForTimeOut+0xbc>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	69ba      	ldr	r2, [r7, #24]
 800bc76:	1ad3      	subs	r3, r2, r3
 800bc78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc82:	d102      	bne.n	800bc8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc84:	2300      	movs	r3, #0
 800bc86:	61fb      	str	r3, [r7, #28]
 800bc88:	e023      	b.n	800bcd2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	4b15      	ldr	r3, [pc, #84]	; (800bce4 <xTaskCheckForTimeOut+0xc0>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d007      	beq.n	800bca6 <xTaskCheckForTimeOut+0x82>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	69ba      	ldr	r2, [r7, #24]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d302      	bcc.n	800bca6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bca0:	2301      	movs	r3, #1
 800bca2:	61fb      	str	r3, [r7, #28]
 800bca4:	e015      	b.n	800bcd2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	697a      	ldr	r2, [r7, #20]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d20b      	bcs.n	800bcc8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	1ad2      	subs	r2, r2, r3
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f7ff ff9b 	bl	800bbf8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	61fb      	str	r3, [r7, #28]
 800bcc6:	e004      	b.n	800bcd2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	2200      	movs	r2, #0
 800bccc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bcd2:	f000 ff87 	bl	800cbe4 <vPortExitCritical>

	return xReturn;
 800bcd6:	69fb      	ldr	r3, [r7, #28]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3720      	adds	r7, #32
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	20000fb4 	.word	0x20000fb4
 800bce4:	20000fc8 	.word	0x20000fc8

0800bce8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bce8:	b480      	push	{r7}
 800bcea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bcec:	4b03      	ldr	r3, [pc, #12]	; (800bcfc <vTaskMissedYield+0x14>)
 800bcee:	2201      	movs	r2, #1
 800bcf0:	601a      	str	r2, [r3, #0]
}
 800bcf2:	bf00      	nop
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr
 800bcfc:	20000fc4 	.word	0x20000fc4

0800bd00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd08:	f000 f852 	bl	800bdb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd0c:	4b06      	ldr	r3, [pc, #24]	; (800bd28 <prvIdleTask+0x28>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d9f9      	bls.n	800bd08 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd14:	4b05      	ldr	r3, [pc, #20]	; (800bd2c <prvIdleTask+0x2c>)
 800bd16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd1a:	601a      	str	r2, [r3, #0]
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd24:	e7f0      	b.n	800bd08 <prvIdleTask+0x8>
 800bd26:	bf00      	nop
 800bd28:	20000ae0 	.word	0x20000ae0
 800bd2c:	e000ed04 	.word	0xe000ed04

0800bd30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd36:	2300      	movs	r3, #0
 800bd38:	607b      	str	r3, [r7, #4]
 800bd3a:	e00c      	b.n	800bd56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	4413      	add	r3, r2
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4a12      	ldr	r2, [pc, #72]	; (800bd90 <prvInitialiseTaskLists+0x60>)
 800bd48:	4413      	add	r3, r2
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7fe fa4c 	bl	800a1e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	3301      	adds	r3, #1
 800bd54:	607b      	str	r3, [r7, #4]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2b37      	cmp	r3, #55	; 0x37
 800bd5a:	d9ef      	bls.n	800bd3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd5c:	480d      	ldr	r0, [pc, #52]	; (800bd94 <prvInitialiseTaskLists+0x64>)
 800bd5e:	f7fe fa43 	bl	800a1e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd62:	480d      	ldr	r0, [pc, #52]	; (800bd98 <prvInitialiseTaskLists+0x68>)
 800bd64:	f7fe fa40 	bl	800a1e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd68:	480c      	ldr	r0, [pc, #48]	; (800bd9c <prvInitialiseTaskLists+0x6c>)
 800bd6a:	f7fe fa3d 	bl	800a1e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd6e:	480c      	ldr	r0, [pc, #48]	; (800bda0 <prvInitialiseTaskLists+0x70>)
 800bd70:	f7fe fa3a 	bl	800a1e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd74:	480b      	ldr	r0, [pc, #44]	; (800bda4 <prvInitialiseTaskLists+0x74>)
 800bd76:	f7fe fa37 	bl	800a1e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd7a:	4b0b      	ldr	r3, [pc, #44]	; (800bda8 <prvInitialiseTaskLists+0x78>)
 800bd7c:	4a05      	ldr	r2, [pc, #20]	; (800bd94 <prvInitialiseTaskLists+0x64>)
 800bd7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd80:	4b0a      	ldr	r3, [pc, #40]	; (800bdac <prvInitialiseTaskLists+0x7c>)
 800bd82:	4a05      	ldr	r2, [pc, #20]	; (800bd98 <prvInitialiseTaskLists+0x68>)
 800bd84:	601a      	str	r2, [r3, #0]
}
 800bd86:	bf00      	nop
 800bd88:	3708      	adds	r7, #8
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	20000ae0 	.word	0x20000ae0
 800bd94:	20000f40 	.word	0x20000f40
 800bd98:	20000f54 	.word	0x20000f54
 800bd9c:	20000f70 	.word	0x20000f70
 800bda0:	20000f84 	.word	0x20000f84
 800bda4:	20000f9c 	.word	0x20000f9c
 800bda8:	20000f68 	.word	0x20000f68
 800bdac:	20000f6c 	.word	0x20000f6c

0800bdb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdb6:	e019      	b.n	800bdec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bdb8:	f000 fee4 	bl	800cb84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdbc:	4b10      	ldr	r3, [pc, #64]	; (800be00 <prvCheckTasksWaitingTermination+0x50>)
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	68db      	ldr	r3, [r3, #12]
 800bdc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	3304      	adds	r3, #4
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7fe fa97 	bl	800a2fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bdce:	4b0d      	ldr	r3, [pc, #52]	; (800be04 <prvCheckTasksWaitingTermination+0x54>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	4a0b      	ldr	r2, [pc, #44]	; (800be04 <prvCheckTasksWaitingTermination+0x54>)
 800bdd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bdd8:	4b0b      	ldr	r3, [pc, #44]	; (800be08 <prvCheckTasksWaitingTermination+0x58>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	3b01      	subs	r3, #1
 800bdde:	4a0a      	ldr	r2, [pc, #40]	; (800be08 <prvCheckTasksWaitingTermination+0x58>)
 800bde0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bde2:	f000 feff 	bl	800cbe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 f810 	bl	800be0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdec:	4b06      	ldr	r3, [pc, #24]	; (800be08 <prvCheckTasksWaitingTermination+0x58>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1e1      	bne.n	800bdb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bdf4:	bf00      	nop
 800bdf6:	bf00      	nop
 800bdf8:	3708      	adds	r7, #8
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	20000f84 	.word	0x20000f84
 800be04:	20000fb0 	.word	0x20000fb0
 800be08:	20000f98 	.word	0x20000f98

0800be0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d108      	bne.n	800be30 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be22:	4618      	mov	r0, r3
 800be24:	f001 f89c 	bl	800cf60 <vPortFree>
				vPortFree( pxTCB );
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f001 f899 	bl	800cf60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be2e:	e018      	b.n	800be62 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be36:	2b01      	cmp	r3, #1
 800be38:	d103      	bne.n	800be42 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f001 f890 	bl	800cf60 <vPortFree>
	}
 800be40:	e00f      	b.n	800be62 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800be48:	2b02      	cmp	r3, #2
 800be4a:	d00a      	beq.n	800be62 <prvDeleteTCB+0x56>
	__asm volatile
 800be4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be50:	f383 8811 	msr	BASEPRI, r3
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	60fb      	str	r3, [r7, #12]
}
 800be5e:	bf00      	nop
 800be60:	e7fe      	b.n	800be60 <prvDeleteTCB+0x54>
	}
 800be62:	bf00      	nop
 800be64:	3710      	adds	r7, #16
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
	...

0800be6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be72:	4b0c      	ldr	r3, [pc, #48]	; (800bea4 <prvResetNextTaskUnblockTime+0x38>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d104      	bne.n	800be86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be7c:	4b0a      	ldr	r3, [pc, #40]	; (800bea8 <prvResetNextTaskUnblockTime+0x3c>)
 800be7e:	f04f 32ff 	mov.w	r2, #4294967295
 800be82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be84:	e008      	b.n	800be98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be86:	4b07      	ldr	r3, [pc, #28]	; (800bea4 <prvResetNextTaskUnblockTime+0x38>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	4a04      	ldr	r2, [pc, #16]	; (800bea8 <prvResetNextTaskUnblockTime+0x3c>)
 800be96:	6013      	str	r3, [r2, #0]
}
 800be98:	bf00      	nop
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr
 800bea4:	20000f68 	.word	0x20000f68
 800bea8:	20000fd0 	.word	0x20000fd0

0800beac <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800beb2:	4b05      	ldr	r3, [pc, #20]	; (800bec8 <xTaskGetCurrentTaskHandle+0x1c>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800beb8:	687b      	ldr	r3, [r7, #4]
	}
 800beba:	4618      	mov	r0, r3
 800bebc:	370c      	adds	r7, #12
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr
 800bec6:	bf00      	nop
 800bec8:	20000adc 	.word	0x20000adc

0800becc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bed2:	4b0b      	ldr	r3, [pc, #44]	; (800bf00 <xTaskGetSchedulerState+0x34>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d102      	bne.n	800bee0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800beda:	2301      	movs	r3, #1
 800bedc:	607b      	str	r3, [r7, #4]
 800bede:	e008      	b.n	800bef2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bee0:	4b08      	ldr	r3, [pc, #32]	; (800bf04 <xTaskGetSchedulerState+0x38>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d102      	bne.n	800beee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bee8:	2302      	movs	r3, #2
 800beea:	607b      	str	r3, [r7, #4]
 800beec:	e001      	b.n	800bef2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800beee:	2300      	movs	r3, #0
 800bef0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bef2:	687b      	ldr	r3, [r7, #4]
	}
 800bef4:	4618      	mov	r0, r3
 800bef6:	370c      	adds	r7, #12
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr
 800bf00:	20000fbc 	.word	0x20000fbc
 800bf04:	20000fd8 	.word	0x20000fd8

0800bf08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bf14:	2300      	movs	r3, #0
 800bf16:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d051      	beq.n	800bfc2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf22:	4b2a      	ldr	r3, [pc, #168]	; (800bfcc <xTaskPriorityInherit+0xc4>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d241      	bcs.n	800bfb0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	699b      	ldr	r3, [r3, #24]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	db06      	blt.n	800bf42 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf34:	4b25      	ldr	r3, [pc, #148]	; (800bfcc <xTaskPriorityInherit+0xc4>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	6959      	ldr	r1, [r3, #20]
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	4413      	add	r3, r2
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	4a1f      	ldr	r2, [pc, #124]	; (800bfd0 <xTaskPriorityInherit+0xc8>)
 800bf54:	4413      	add	r3, r2
 800bf56:	4299      	cmp	r1, r3
 800bf58:	d122      	bne.n	800bfa0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	3304      	adds	r3, #4
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7fe f9cc 	bl	800a2fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf64:	4b19      	ldr	r3, [pc, #100]	; (800bfcc <xTaskPriorityInherit+0xc4>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf72:	4b18      	ldr	r3, [pc, #96]	; (800bfd4 <xTaskPriorityInherit+0xcc>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d903      	bls.n	800bf82 <xTaskPriorityInherit+0x7a>
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7e:	4a15      	ldr	r2, [pc, #84]	; (800bfd4 <xTaskPriorityInherit+0xcc>)
 800bf80:	6013      	str	r3, [r2, #0]
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf86:	4613      	mov	r3, r2
 800bf88:	009b      	lsls	r3, r3, #2
 800bf8a:	4413      	add	r3, r2
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	4a10      	ldr	r2, [pc, #64]	; (800bfd0 <xTaskPriorityInherit+0xc8>)
 800bf90:	441a      	add	r2, r3
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	3304      	adds	r3, #4
 800bf96:	4619      	mov	r1, r3
 800bf98:	4610      	mov	r0, r2
 800bf9a:	f7fe f952 	bl	800a242 <vListInsertEnd>
 800bf9e:	e004      	b.n	800bfaa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfa0:	4b0a      	ldr	r3, [pc, #40]	; (800bfcc <xTaskPriorityInherit+0xc4>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	60fb      	str	r3, [r7, #12]
 800bfae:	e008      	b.n	800bfc2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bfb4:	4b05      	ldr	r3, [pc, #20]	; (800bfcc <xTaskPriorityInherit+0xc4>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d201      	bcs.n	800bfc2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
	}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	20000adc 	.word	0x20000adc
 800bfd0:	20000ae0 	.word	0x20000ae0
 800bfd4:	20000fb8 	.word	0x20000fb8

0800bfd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b086      	sub	sp, #24
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d056      	beq.n	800c09c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bfee:	4b2e      	ldr	r3, [pc, #184]	; (800c0a8 <xTaskPriorityDisinherit+0xd0>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	693a      	ldr	r2, [r7, #16]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d00a      	beq.n	800c00e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bffc:	f383 8811 	msr	BASEPRI, r3
 800c000:	f3bf 8f6f 	isb	sy
 800c004:	f3bf 8f4f 	dsb	sy
 800c008:	60fb      	str	r3, [r7, #12]
}
 800c00a:	bf00      	nop
 800c00c:	e7fe      	b.n	800c00c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c012:	2b00      	cmp	r3, #0
 800c014:	d10a      	bne.n	800c02c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01a:	f383 8811 	msr	BASEPRI, r3
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f3bf 8f4f 	dsb	sy
 800c026:	60bb      	str	r3, [r7, #8]
}
 800c028:	bf00      	nop
 800c02a:	e7fe      	b.n	800c02a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c030:	1e5a      	subs	r2, r3, #1
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c03e:	429a      	cmp	r2, r3
 800c040:	d02c      	beq.n	800c09c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c046:	2b00      	cmp	r3, #0
 800c048:	d128      	bne.n	800c09c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	3304      	adds	r3, #4
 800c04e:	4618      	mov	r0, r3
 800c050:	f7fe f954 	bl	800a2fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c060:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c06c:	4b0f      	ldr	r3, [pc, #60]	; (800c0ac <xTaskPriorityDisinherit+0xd4>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	429a      	cmp	r2, r3
 800c072:	d903      	bls.n	800c07c <xTaskPriorityDisinherit+0xa4>
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c078:	4a0c      	ldr	r2, [pc, #48]	; (800c0ac <xTaskPriorityDisinherit+0xd4>)
 800c07a:	6013      	str	r3, [r2, #0]
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c080:	4613      	mov	r3, r2
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	4413      	add	r3, r2
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	4a09      	ldr	r2, [pc, #36]	; (800c0b0 <xTaskPriorityDisinherit+0xd8>)
 800c08a:	441a      	add	r2, r3
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	3304      	adds	r3, #4
 800c090:	4619      	mov	r1, r3
 800c092:	4610      	mov	r0, r2
 800c094:	f7fe f8d5 	bl	800a242 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c098:	2301      	movs	r3, #1
 800c09a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c09c:	697b      	ldr	r3, [r7, #20]
	}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3718      	adds	r7, #24
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	20000adc 	.word	0x20000adc
 800c0ac:	20000fb8 	.word	0x20000fb8
 800c0b0:	20000ae0 	.word	0x20000ae0

0800c0b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b088      	sub	sp, #32
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d06a      	beq.n	800c1a2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d10a      	bne.n	800c0ea <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d8:	f383 8811 	msr	BASEPRI, r3
 800c0dc:	f3bf 8f6f 	isb	sy
 800c0e0:	f3bf 8f4f 	dsb	sy
 800c0e4:	60fb      	str	r3, [r7, #12]
}
 800c0e6:	bf00      	nop
 800c0e8:	e7fe      	b.n	800c0e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0ee:	683a      	ldr	r2, [r7, #0]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d902      	bls.n	800c0fa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	61fb      	str	r3, [r7, #28]
 800c0f8:	e002      	b.n	800c100 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0fe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c104:	69fa      	ldr	r2, [r7, #28]
 800c106:	429a      	cmp	r2, r3
 800c108:	d04b      	beq.n	800c1a2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c10e:	697a      	ldr	r2, [r7, #20]
 800c110:	429a      	cmp	r2, r3
 800c112:	d146      	bne.n	800c1a2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c114:	4b25      	ldr	r3, [pc, #148]	; (800c1ac <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	69ba      	ldr	r2, [r7, #24]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d10a      	bne.n	800c134 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	60bb      	str	r3, [r7, #8]
}
 800c130:	bf00      	nop
 800c132:	e7fe      	b.n	800c132 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c134:	69bb      	ldr	r3, [r7, #24]
 800c136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c138:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	69fa      	ldr	r2, [r7, #28]
 800c13e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	699b      	ldr	r3, [r3, #24]
 800c144:	2b00      	cmp	r3, #0
 800c146:	db04      	blt.n	800c152 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	6959      	ldr	r1, [r3, #20]
 800c156:	693a      	ldr	r2, [r7, #16]
 800c158:	4613      	mov	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	4a13      	ldr	r2, [pc, #76]	; (800c1b0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c162:	4413      	add	r3, r2
 800c164:	4299      	cmp	r1, r3
 800c166:	d11c      	bne.n	800c1a2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	3304      	adds	r3, #4
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fe f8c5 	bl	800a2fc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c176:	4b0f      	ldr	r3, [pc, #60]	; (800c1b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d903      	bls.n	800c186 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c17e:	69bb      	ldr	r3, [r7, #24]
 800c180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c182:	4a0c      	ldr	r2, [pc, #48]	; (800c1b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c184:	6013      	str	r3, [r2, #0]
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c18a:	4613      	mov	r3, r2
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	4413      	add	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4a07      	ldr	r2, [pc, #28]	; (800c1b0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c194:	441a      	add	r2, r3
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	3304      	adds	r3, #4
 800c19a:	4619      	mov	r1, r3
 800c19c:	4610      	mov	r0, r2
 800c19e:	f7fe f850 	bl	800a242 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1a2:	bf00      	nop
 800c1a4:	3720      	adds	r7, #32
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	20000adc 	.word	0x20000adc
 800c1b0:	20000ae0 	.word	0x20000ae0
 800c1b4:	20000fb8 	.word	0x20000fb8

0800c1b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c1b8:	b480      	push	{r7}
 800c1ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c1bc:	4b07      	ldr	r3, [pc, #28]	; (800c1dc <pvTaskIncrementMutexHeldCount+0x24>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d004      	beq.n	800c1ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c1c4:	4b05      	ldr	r3, [pc, #20]	; (800c1dc <pvTaskIncrementMutexHeldCount+0x24>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c1ca:	3201      	adds	r2, #1
 800c1cc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c1ce:	4b03      	ldr	r3, [pc, #12]	; (800c1dc <pvTaskIncrementMutexHeldCount+0x24>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
	}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr
 800c1dc:	20000adc 	.word	0x20000adc

0800c1e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c1ea:	4b21      	ldr	r3, [pc, #132]	; (800c270 <prvAddCurrentTaskToDelayedList+0x90>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1f0:	4b20      	ldr	r3, [pc, #128]	; (800c274 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	3304      	adds	r3, #4
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fe f880 	bl	800a2fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c202:	d10a      	bne.n	800c21a <prvAddCurrentTaskToDelayedList+0x3a>
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d007      	beq.n	800c21a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c20a:	4b1a      	ldr	r3, [pc, #104]	; (800c274 <prvAddCurrentTaskToDelayedList+0x94>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	3304      	adds	r3, #4
 800c210:	4619      	mov	r1, r3
 800c212:	4819      	ldr	r0, [pc, #100]	; (800c278 <prvAddCurrentTaskToDelayedList+0x98>)
 800c214:	f7fe f815 	bl	800a242 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c218:	e026      	b.n	800c268 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c21a:	68fa      	ldr	r2, [r7, #12]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	4413      	add	r3, r2
 800c220:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c222:	4b14      	ldr	r3, [pc, #80]	; (800c274 <prvAddCurrentTaskToDelayedList+0x94>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c22a:	68ba      	ldr	r2, [r7, #8]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d209      	bcs.n	800c246 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c232:	4b12      	ldr	r3, [pc, #72]	; (800c27c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	4b0f      	ldr	r3, [pc, #60]	; (800c274 <prvAddCurrentTaskToDelayedList+0x94>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	3304      	adds	r3, #4
 800c23c:	4619      	mov	r1, r3
 800c23e:	4610      	mov	r0, r2
 800c240:	f7fe f823 	bl	800a28a <vListInsert>
}
 800c244:	e010      	b.n	800c268 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c246:	4b0e      	ldr	r3, [pc, #56]	; (800c280 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	4b0a      	ldr	r3, [pc, #40]	; (800c274 <prvAddCurrentTaskToDelayedList+0x94>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	3304      	adds	r3, #4
 800c250:	4619      	mov	r1, r3
 800c252:	4610      	mov	r0, r2
 800c254:	f7fe f819 	bl	800a28a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c258:	4b0a      	ldr	r3, [pc, #40]	; (800c284 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	68ba      	ldr	r2, [r7, #8]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d202      	bcs.n	800c268 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c262:	4a08      	ldr	r2, [pc, #32]	; (800c284 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	6013      	str	r3, [r2, #0]
}
 800c268:	bf00      	nop
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	20000fb4 	.word	0x20000fb4
 800c274:	20000adc 	.word	0x20000adc
 800c278:	20000f9c 	.word	0x20000f9c
 800c27c:	20000f6c 	.word	0x20000f6c
 800c280:	20000f68 	.word	0x20000f68
 800c284:	20000fd0 	.word	0x20000fd0

0800c288 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b08a      	sub	sp, #40	; 0x28
 800c28c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c28e:	2300      	movs	r3, #0
 800c290:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c292:	f000 fb07 	bl	800c8a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c296:	4b1c      	ldr	r3, [pc, #112]	; (800c308 <xTimerCreateTimerTask+0x80>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d021      	beq.n	800c2e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c2a6:	1d3a      	adds	r2, r7, #4
 800c2a8:	f107 0108 	add.w	r1, r7, #8
 800c2ac:	f107 030c 	add.w	r3, r7, #12
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7fd ff7f 	bl	800a1b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c2b6:	6879      	ldr	r1, [r7, #4]
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	9202      	str	r2, [sp, #8]
 800c2be:	9301      	str	r3, [sp, #4]
 800c2c0:	2302      	movs	r3, #2
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	460a      	mov	r2, r1
 800c2c8:	4910      	ldr	r1, [pc, #64]	; (800c30c <xTimerCreateTimerTask+0x84>)
 800c2ca:	4811      	ldr	r0, [pc, #68]	; (800c310 <xTimerCreateTimerTask+0x88>)
 800c2cc:	f7fe ff40 	bl	800b150 <xTaskCreateStatic>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	4a10      	ldr	r2, [pc, #64]	; (800c314 <xTimerCreateTimerTask+0x8c>)
 800c2d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c2d6:	4b0f      	ldr	r3, [pc, #60]	; (800c314 <xTimerCreateTimerTask+0x8c>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d001      	beq.n	800c2e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d10a      	bne.n	800c2fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ec:	f383 8811 	msr	BASEPRI, r3
 800c2f0:	f3bf 8f6f 	isb	sy
 800c2f4:	f3bf 8f4f 	dsb	sy
 800c2f8:	613b      	str	r3, [r7, #16]
}
 800c2fa:	bf00      	nop
 800c2fc:	e7fe      	b.n	800c2fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c2fe:	697b      	ldr	r3, [r7, #20]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3718      	adds	r7, #24
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	2000100c 	.word	0x2000100c
 800c30c:	0800e7cc 	.word	0x0800e7cc
 800c310:	0800c44d 	.word	0x0800c44d
 800c314:	20001010 	.word	0x20001010

0800c318 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b08a      	sub	sp, #40	; 0x28
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]
 800c324:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c326:	2300      	movs	r3, #0
 800c328:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d10a      	bne.n	800c346 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c334:	f383 8811 	msr	BASEPRI, r3
 800c338:	f3bf 8f6f 	isb	sy
 800c33c:	f3bf 8f4f 	dsb	sy
 800c340:	623b      	str	r3, [r7, #32]
}
 800c342:	bf00      	nop
 800c344:	e7fe      	b.n	800c344 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c346:	4b1a      	ldr	r3, [pc, #104]	; (800c3b0 <xTimerGenericCommand+0x98>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d02a      	beq.n	800c3a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	2b05      	cmp	r3, #5
 800c35e:	dc18      	bgt.n	800c392 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c360:	f7ff fdb4 	bl	800becc <xTaskGetSchedulerState>
 800c364:	4603      	mov	r3, r0
 800c366:	2b02      	cmp	r3, #2
 800c368:	d109      	bne.n	800c37e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c36a:	4b11      	ldr	r3, [pc, #68]	; (800c3b0 <xTimerGenericCommand+0x98>)
 800c36c:	6818      	ldr	r0, [r3, #0]
 800c36e:	f107 0110 	add.w	r1, r7, #16
 800c372:	2300      	movs	r3, #0
 800c374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c376:	f7fe f9df 	bl	800a738 <xQueueGenericSend>
 800c37a:	6278      	str	r0, [r7, #36]	; 0x24
 800c37c:	e012      	b.n	800c3a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c37e:	4b0c      	ldr	r3, [pc, #48]	; (800c3b0 <xTimerGenericCommand+0x98>)
 800c380:	6818      	ldr	r0, [r3, #0]
 800c382:	f107 0110 	add.w	r1, r7, #16
 800c386:	2300      	movs	r3, #0
 800c388:	2200      	movs	r2, #0
 800c38a:	f7fe f9d5 	bl	800a738 <xQueueGenericSend>
 800c38e:	6278      	str	r0, [r7, #36]	; 0x24
 800c390:	e008      	b.n	800c3a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c392:	4b07      	ldr	r3, [pc, #28]	; (800c3b0 <xTimerGenericCommand+0x98>)
 800c394:	6818      	ldr	r0, [r3, #0]
 800c396:	f107 0110 	add.w	r1, r7, #16
 800c39a:	2300      	movs	r3, #0
 800c39c:	683a      	ldr	r2, [r7, #0]
 800c39e:	f7fe fac9 	bl	800a934 <xQueueGenericSendFromISR>
 800c3a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3728      	adds	r7, #40	; 0x28
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	2000100c 	.word	0x2000100c

0800c3b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b088      	sub	sp, #32
 800c3b8:	af02      	add	r7, sp, #8
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3be:	4b22      	ldr	r3, [pc, #136]	; (800c448 <prvProcessExpiredTimer+0x94>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	68db      	ldr	r3, [r3, #12]
 800c3c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	3304      	adds	r3, #4
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7fd ff95 	bl	800a2fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3d8:	f003 0304 	and.w	r3, r3, #4
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d022      	beq.n	800c426 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	699a      	ldr	r2, [r3, #24]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	18d1      	adds	r1, r2, r3
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	683a      	ldr	r2, [r7, #0]
 800c3ec:	6978      	ldr	r0, [r7, #20]
 800c3ee:	f000 f8d1 	bl	800c594 <prvInsertTimerInActiveList>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d01f      	beq.n	800c438 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	9300      	str	r3, [sp, #0]
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	2100      	movs	r1, #0
 800c402:	6978      	ldr	r0, [r7, #20]
 800c404:	f7ff ff88 	bl	800c318 <xTimerGenericCommand>
 800c408:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d113      	bne.n	800c438 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c414:	f383 8811 	msr	BASEPRI, r3
 800c418:	f3bf 8f6f 	isb	sy
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	60fb      	str	r3, [r7, #12]
}
 800c422:	bf00      	nop
 800c424:	e7fe      	b.n	800c424 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c42c:	f023 0301 	bic.w	r3, r3, #1
 800c430:	b2da      	uxtb	r2, r3
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	6a1b      	ldr	r3, [r3, #32]
 800c43c:	6978      	ldr	r0, [r7, #20]
 800c43e:	4798      	blx	r3
}
 800c440:	bf00      	nop
 800c442:	3718      	adds	r7, #24
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	20001004 	.word	0x20001004

0800c44c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c454:	f107 0308 	add.w	r3, r7, #8
 800c458:	4618      	mov	r0, r3
 800c45a:	f000 f857 	bl	800c50c <prvGetNextExpireTime>
 800c45e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	4619      	mov	r1, r3
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f000 f803 	bl	800c470 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c46a:	f000 f8d5 	bl	800c618 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c46e:	e7f1      	b.n	800c454 <prvTimerTask+0x8>

0800c470 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c47a:	f7ff f923 	bl	800b6c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c47e:	f107 0308 	add.w	r3, r7, #8
 800c482:	4618      	mov	r0, r3
 800c484:	f000 f866 	bl	800c554 <prvSampleTimeNow>
 800c488:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d130      	bne.n	800c4f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d10a      	bne.n	800c4ac <prvProcessTimerOrBlockTask+0x3c>
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d806      	bhi.n	800c4ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c49e:	f7ff f91f 	bl	800b6e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c4a2:	68f9      	ldr	r1, [r7, #12]
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f7ff ff85 	bl	800c3b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c4aa:	e024      	b.n	800c4f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d008      	beq.n	800c4c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c4b2:	4b13      	ldr	r3, [pc, #76]	; (800c500 <prvProcessTimerOrBlockTask+0x90>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d101      	bne.n	800c4c0 <prvProcessTimerOrBlockTask+0x50>
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e000      	b.n	800c4c2 <prvProcessTimerOrBlockTask+0x52>
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c4c4:	4b0f      	ldr	r3, [pc, #60]	; (800c504 <prvProcessTimerOrBlockTask+0x94>)
 800c4c6:	6818      	ldr	r0, [r3, #0]
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	1ad3      	subs	r3, r2, r3
 800c4ce:	683a      	ldr	r2, [r7, #0]
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	f7fe fe09 	bl	800b0e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c4d6:	f7ff f903 	bl	800b6e0 <xTaskResumeAll>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d10a      	bne.n	800c4f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c4e0:	4b09      	ldr	r3, [pc, #36]	; (800c508 <prvProcessTimerOrBlockTask+0x98>)
 800c4e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e6:	601a      	str	r2, [r3, #0]
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	f3bf 8f6f 	isb	sy
}
 800c4f0:	e001      	b.n	800c4f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c4f2:	f7ff f8f5 	bl	800b6e0 <xTaskResumeAll>
}
 800c4f6:	bf00      	nop
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	20001008 	.word	0x20001008
 800c504:	2000100c 	.word	0x2000100c
 800c508:	e000ed04 	.word	0xe000ed04

0800c50c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c50c:	b480      	push	{r7}
 800c50e:	b085      	sub	sp, #20
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c514:	4b0e      	ldr	r3, [pc, #56]	; (800c550 <prvGetNextExpireTime+0x44>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d101      	bne.n	800c522 <prvGetNextExpireTime+0x16>
 800c51e:	2201      	movs	r2, #1
 800c520:	e000      	b.n	800c524 <prvGetNextExpireTime+0x18>
 800c522:	2200      	movs	r2, #0
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d105      	bne.n	800c53c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c530:	4b07      	ldr	r3, [pc, #28]	; (800c550 <prvGetNextExpireTime+0x44>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	60fb      	str	r3, [r7, #12]
 800c53a:	e001      	b.n	800c540 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c53c:	2300      	movs	r3, #0
 800c53e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c540:	68fb      	ldr	r3, [r7, #12]
}
 800c542:	4618      	mov	r0, r3
 800c544:	3714      	adds	r7, #20
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	20001004 	.word	0x20001004

0800c554 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c55c:	f7ff f95e 	bl	800b81c <xTaskGetTickCount>
 800c560:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c562:	4b0b      	ldr	r3, [pc, #44]	; (800c590 <prvSampleTimeNow+0x3c>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d205      	bcs.n	800c578 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c56c:	f000 f936 	bl	800c7dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2201      	movs	r2, #1
 800c574:	601a      	str	r2, [r3, #0]
 800c576:	e002      	b.n	800c57e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c57e:	4a04      	ldr	r2, [pc, #16]	; (800c590 <prvSampleTimeNow+0x3c>)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c584:	68fb      	ldr	r3, [r7, #12]
}
 800c586:	4618      	mov	r0, r3
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	20001014 	.word	0x20001014

0800c594 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b086      	sub	sp, #24
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	607a      	str	r2, [r7, #4]
 800c5a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	68ba      	ldr	r2, [r7, #8]
 800c5aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	68fa      	ldr	r2, [r7, #12]
 800c5b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c5b2:	68ba      	ldr	r2, [r7, #8]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d812      	bhi.n	800c5e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	1ad2      	subs	r2, r2, r3
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	699b      	ldr	r3, [r3, #24]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d302      	bcc.n	800c5ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	617b      	str	r3, [r7, #20]
 800c5cc:	e01b      	b.n	800c606 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c5ce:	4b10      	ldr	r3, [pc, #64]	; (800c610 <prvInsertTimerInActiveList+0x7c>)
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	3304      	adds	r3, #4
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	4610      	mov	r0, r2
 800c5da:	f7fd fe56 	bl	800a28a <vListInsert>
 800c5de:	e012      	b.n	800c606 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d206      	bcs.n	800c5f6 <prvInsertTimerInActiveList+0x62>
 800c5e8:	68ba      	ldr	r2, [r7, #8]
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d302      	bcc.n	800c5f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	617b      	str	r3, [r7, #20]
 800c5f4:	e007      	b.n	800c606 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c5f6:	4b07      	ldr	r3, [pc, #28]	; (800c614 <prvInsertTimerInActiveList+0x80>)
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	3304      	adds	r3, #4
 800c5fe:	4619      	mov	r1, r3
 800c600:	4610      	mov	r0, r2
 800c602:	f7fd fe42 	bl	800a28a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c606:	697b      	ldr	r3, [r7, #20]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3718      	adds	r7, #24
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	20001008 	.word	0x20001008
 800c614:	20001004 	.word	0x20001004

0800c618 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b08e      	sub	sp, #56	; 0x38
 800c61c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c61e:	e0ca      	b.n	800c7b6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	da18      	bge.n	800c658 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c626:	1d3b      	adds	r3, r7, #4
 800c628:	3304      	adds	r3, #4
 800c62a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10a      	bne.n	800c648 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c636:	f383 8811 	msr	BASEPRI, r3
 800c63a:	f3bf 8f6f 	isb	sy
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	61fb      	str	r3, [r7, #28]
}
 800c644:	bf00      	nop
 800c646:	e7fe      	b.n	800c646 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c64e:	6850      	ldr	r0, [r2, #4]
 800c650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c652:	6892      	ldr	r2, [r2, #8]
 800c654:	4611      	mov	r1, r2
 800c656:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	f2c0 80aa 	blt.w	800c7b4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c666:	695b      	ldr	r3, [r3, #20]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d004      	beq.n	800c676 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66e:	3304      	adds	r3, #4
 800c670:	4618      	mov	r0, r3
 800c672:	f7fd fe43 	bl	800a2fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c676:	463b      	mov	r3, r7
 800c678:	4618      	mov	r0, r3
 800c67a:	f7ff ff6b 	bl	800c554 <prvSampleTimeNow>
 800c67e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2b09      	cmp	r3, #9
 800c684:	f200 8097 	bhi.w	800c7b6 <prvProcessReceivedCommands+0x19e>
 800c688:	a201      	add	r2, pc, #4	; (adr r2, 800c690 <prvProcessReceivedCommands+0x78>)
 800c68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c68e:	bf00      	nop
 800c690:	0800c6b9 	.word	0x0800c6b9
 800c694:	0800c6b9 	.word	0x0800c6b9
 800c698:	0800c6b9 	.word	0x0800c6b9
 800c69c:	0800c72d 	.word	0x0800c72d
 800c6a0:	0800c741 	.word	0x0800c741
 800c6a4:	0800c78b 	.word	0x0800c78b
 800c6a8:	0800c6b9 	.word	0x0800c6b9
 800c6ac:	0800c6b9 	.word	0x0800c6b9
 800c6b0:	0800c72d 	.word	0x0800c72d
 800c6b4:	0800c741 	.word	0x0800c741
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6be:	f043 0301 	orr.w	r3, r3, #1
 800c6c2:	b2da      	uxtb	r2, r3
 800c6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c6ca:	68ba      	ldr	r2, [r7, #8]
 800c6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ce:	699b      	ldr	r3, [r3, #24]
 800c6d0:	18d1      	adds	r1, r2, r3
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6d8:	f7ff ff5c 	bl	800c594 <prvInsertTimerInActiveList>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d069      	beq.n	800c7b6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e4:	6a1b      	ldr	r3, [r3, #32]
 800c6e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6f0:	f003 0304 	and.w	r3, r3, #4
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d05e      	beq.n	800c7b6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c6f8:	68ba      	ldr	r2, [r7, #8]
 800c6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fc:	699b      	ldr	r3, [r3, #24]
 800c6fe:	441a      	add	r2, r3
 800c700:	2300      	movs	r3, #0
 800c702:	9300      	str	r3, [sp, #0]
 800c704:	2300      	movs	r3, #0
 800c706:	2100      	movs	r1, #0
 800c708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c70a:	f7ff fe05 	bl	800c318 <xTimerGenericCommand>
 800c70e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c710:	6a3b      	ldr	r3, [r7, #32]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d14f      	bne.n	800c7b6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71a:	f383 8811 	msr	BASEPRI, r3
 800c71e:	f3bf 8f6f 	isb	sy
 800c722:	f3bf 8f4f 	dsb	sy
 800c726:	61bb      	str	r3, [r7, #24]
}
 800c728:	bf00      	nop
 800c72a:	e7fe      	b.n	800c72a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c732:	f023 0301 	bic.w	r3, r3, #1
 800c736:	b2da      	uxtb	r2, r3
 800c738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c73e:	e03a      	b.n	800c7b6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c742:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c746:	f043 0301 	orr.w	r3, r3, #1
 800c74a:	b2da      	uxtb	r2, r3
 800c74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c752:	68ba      	ldr	r2, [r7, #8]
 800c754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c756:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75a:	699b      	ldr	r3, [r3, #24]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d10a      	bne.n	800c776 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c764:	f383 8811 	msr	BASEPRI, r3
 800c768:	f3bf 8f6f 	isb	sy
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	617b      	str	r3, [r7, #20]
}
 800c772:	bf00      	nop
 800c774:	e7fe      	b.n	800c774 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c778:	699a      	ldr	r2, [r3, #24]
 800c77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77c:	18d1      	adds	r1, r2, r3
 800c77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c784:	f7ff ff06 	bl	800c594 <prvInsertTimerInActiveList>
					break;
 800c788:	e015      	b.n	800c7b6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c790:	f003 0302 	and.w	r3, r3, #2
 800c794:	2b00      	cmp	r3, #0
 800c796:	d103      	bne.n	800c7a0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c79a:	f000 fbe1 	bl	800cf60 <vPortFree>
 800c79e:	e00a      	b.n	800c7b6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7a6:	f023 0301 	bic.w	r3, r3, #1
 800c7aa:	b2da      	uxtb	r2, r3
 800c7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c7b2:	e000      	b.n	800c7b6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c7b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7b6:	4b08      	ldr	r3, [pc, #32]	; (800c7d8 <prvProcessReceivedCommands+0x1c0>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	1d39      	adds	r1, r7, #4
 800c7bc:	2200      	movs	r2, #0
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7fe f954 	bl	800aa6c <xQueueReceive>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f47f af2a 	bne.w	800c620 <prvProcessReceivedCommands+0x8>
	}
}
 800c7cc:	bf00      	nop
 800c7ce:	bf00      	nop
 800c7d0:	3730      	adds	r7, #48	; 0x30
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	2000100c 	.word	0x2000100c

0800c7dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b088      	sub	sp, #32
 800c7e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c7e2:	e048      	b.n	800c876 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7e4:	4b2d      	ldr	r3, [pc, #180]	; (800c89c <prvSwitchTimerLists+0xc0>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7ee:	4b2b      	ldr	r3, [pc, #172]	; (800c89c <prvSwitchTimerLists+0xc0>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	3304      	adds	r3, #4
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7fd fd7d 	bl	800a2fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	6a1b      	ldr	r3, [r3, #32]
 800c806:	68f8      	ldr	r0, [r7, #12]
 800c808:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c810:	f003 0304 	and.w	r3, r3, #4
 800c814:	2b00      	cmp	r3, #0
 800c816:	d02e      	beq.n	800c876 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	699b      	ldr	r3, [r3, #24]
 800c81c:	693a      	ldr	r2, [r7, #16]
 800c81e:	4413      	add	r3, r2
 800c820:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c822:	68ba      	ldr	r2, [r7, #8]
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	429a      	cmp	r2, r3
 800c828:	d90e      	bls.n	800c848 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c836:	4b19      	ldr	r3, [pc, #100]	; (800c89c <prvSwitchTimerLists+0xc0>)
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	3304      	adds	r3, #4
 800c83e:	4619      	mov	r1, r3
 800c840:	4610      	mov	r0, r2
 800c842:	f7fd fd22 	bl	800a28a <vListInsert>
 800c846:	e016      	b.n	800c876 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c848:	2300      	movs	r3, #0
 800c84a:	9300      	str	r3, [sp, #0]
 800c84c:	2300      	movs	r3, #0
 800c84e:	693a      	ldr	r2, [r7, #16]
 800c850:	2100      	movs	r1, #0
 800c852:	68f8      	ldr	r0, [r7, #12]
 800c854:	f7ff fd60 	bl	800c318 <xTimerGenericCommand>
 800c858:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d10a      	bne.n	800c876 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c864:	f383 8811 	msr	BASEPRI, r3
 800c868:	f3bf 8f6f 	isb	sy
 800c86c:	f3bf 8f4f 	dsb	sy
 800c870:	603b      	str	r3, [r7, #0]
}
 800c872:	bf00      	nop
 800c874:	e7fe      	b.n	800c874 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c876:	4b09      	ldr	r3, [pc, #36]	; (800c89c <prvSwitchTimerLists+0xc0>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d1b1      	bne.n	800c7e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c880:	4b06      	ldr	r3, [pc, #24]	; (800c89c <prvSwitchTimerLists+0xc0>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c886:	4b06      	ldr	r3, [pc, #24]	; (800c8a0 <prvSwitchTimerLists+0xc4>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a04      	ldr	r2, [pc, #16]	; (800c89c <prvSwitchTimerLists+0xc0>)
 800c88c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c88e:	4a04      	ldr	r2, [pc, #16]	; (800c8a0 <prvSwitchTimerLists+0xc4>)
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	6013      	str	r3, [r2, #0]
}
 800c894:	bf00      	nop
 800c896:	3718      	adds	r7, #24
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	20001004 	.word	0x20001004
 800c8a0:	20001008 	.word	0x20001008

0800c8a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c8aa:	f000 f96b 	bl	800cb84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c8ae:	4b15      	ldr	r3, [pc, #84]	; (800c904 <prvCheckForValidListAndQueue+0x60>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d120      	bne.n	800c8f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c8b6:	4814      	ldr	r0, [pc, #80]	; (800c908 <prvCheckForValidListAndQueue+0x64>)
 800c8b8:	f7fd fc96 	bl	800a1e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c8bc:	4813      	ldr	r0, [pc, #76]	; (800c90c <prvCheckForValidListAndQueue+0x68>)
 800c8be:	f7fd fc93 	bl	800a1e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c8c2:	4b13      	ldr	r3, [pc, #76]	; (800c910 <prvCheckForValidListAndQueue+0x6c>)
 800c8c4:	4a10      	ldr	r2, [pc, #64]	; (800c908 <prvCheckForValidListAndQueue+0x64>)
 800c8c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c8c8:	4b12      	ldr	r3, [pc, #72]	; (800c914 <prvCheckForValidListAndQueue+0x70>)
 800c8ca:	4a10      	ldr	r2, [pc, #64]	; (800c90c <prvCheckForValidListAndQueue+0x68>)
 800c8cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	4b11      	ldr	r3, [pc, #68]	; (800c918 <prvCheckForValidListAndQueue+0x74>)
 800c8d4:	4a11      	ldr	r2, [pc, #68]	; (800c91c <prvCheckForValidListAndQueue+0x78>)
 800c8d6:	2110      	movs	r1, #16
 800c8d8:	200a      	movs	r0, #10
 800c8da:	f7fd fda1 	bl	800a420 <xQueueGenericCreateStatic>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	4a08      	ldr	r2, [pc, #32]	; (800c904 <prvCheckForValidListAndQueue+0x60>)
 800c8e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c8e4:	4b07      	ldr	r3, [pc, #28]	; (800c904 <prvCheckForValidListAndQueue+0x60>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d005      	beq.n	800c8f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c8ec:	4b05      	ldr	r3, [pc, #20]	; (800c904 <prvCheckForValidListAndQueue+0x60>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	490b      	ldr	r1, [pc, #44]	; (800c920 <prvCheckForValidListAndQueue+0x7c>)
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fe fbce 	bl	800b094 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8f8:	f000 f974 	bl	800cbe4 <vPortExitCritical>
}
 800c8fc:	bf00      	nop
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	2000100c 	.word	0x2000100c
 800c908:	20000fdc 	.word	0x20000fdc
 800c90c:	20000ff0 	.word	0x20000ff0
 800c910:	20001004 	.word	0x20001004
 800c914:	20001008 	.word	0x20001008
 800c918:	200010b8 	.word	0x200010b8
 800c91c:	20001018 	.word	0x20001018
 800c920:	0800e7d4 	.word	0x0800e7d4

0800c924 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c924:	b480      	push	{r7}
 800c926:	b085      	sub	sp, #20
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	3b04      	subs	r3, #4
 800c934:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c93c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	3b04      	subs	r3, #4
 800c942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	f023 0201 	bic.w	r2, r3, #1
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	3b04      	subs	r3, #4
 800c952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c954:	4a0c      	ldr	r2, [pc, #48]	; (800c988 <pxPortInitialiseStack+0x64>)
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	3b14      	subs	r3, #20
 800c95e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	3b04      	subs	r3, #4
 800c96a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f06f 0202 	mvn.w	r2, #2
 800c972:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	3b20      	subs	r3, #32
 800c978:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c97a:	68fb      	ldr	r3, [r7, #12]
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3714      	adds	r7, #20
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	0800c98d 	.word	0x0800c98d

0800c98c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c98c:	b480      	push	{r7}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c992:	2300      	movs	r3, #0
 800c994:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c996:	4b12      	ldr	r3, [pc, #72]	; (800c9e0 <prvTaskExitError+0x54>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c99e:	d00a      	beq.n	800c9b6 <prvTaskExitError+0x2a>
	__asm volatile
 800c9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a4:	f383 8811 	msr	BASEPRI, r3
 800c9a8:	f3bf 8f6f 	isb	sy
 800c9ac:	f3bf 8f4f 	dsb	sy
 800c9b0:	60fb      	str	r3, [r7, #12]
}
 800c9b2:	bf00      	nop
 800c9b4:	e7fe      	b.n	800c9b4 <prvTaskExitError+0x28>
	__asm volatile
 800c9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ba:	f383 8811 	msr	BASEPRI, r3
 800c9be:	f3bf 8f6f 	isb	sy
 800c9c2:	f3bf 8f4f 	dsb	sy
 800c9c6:	60bb      	str	r3, [r7, #8]
}
 800c9c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c9ca:	bf00      	nop
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d0fc      	beq.n	800c9cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c9d2:	bf00      	nop
 800c9d4:	bf00      	nop
 800c9d6:	3714      	adds	r7, #20
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr
 800c9e0:	2000014c 	.word	0x2000014c
	...

0800c9f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c9f0:	4b07      	ldr	r3, [pc, #28]	; (800ca10 <pxCurrentTCBConst2>)
 800c9f2:	6819      	ldr	r1, [r3, #0]
 800c9f4:	6808      	ldr	r0, [r1, #0]
 800c9f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9fa:	f380 8809 	msr	PSP, r0
 800c9fe:	f3bf 8f6f 	isb	sy
 800ca02:	f04f 0000 	mov.w	r0, #0
 800ca06:	f380 8811 	msr	BASEPRI, r0
 800ca0a:	4770      	bx	lr
 800ca0c:	f3af 8000 	nop.w

0800ca10 <pxCurrentTCBConst2>:
 800ca10:	20000adc 	.word	0x20000adc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca14:	bf00      	nop
 800ca16:	bf00      	nop

0800ca18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ca18:	4808      	ldr	r0, [pc, #32]	; (800ca3c <prvPortStartFirstTask+0x24>)
 800ca1a:	6800      	ldr	r0, [r0, #0]
 800ca1c:	6800      	ldr	r0, [r0, #0]
 800ca1e:	f380 8808 	msr	MSP, r0
 800ca22:	f04f 0000 	mov.w	r0, #0
 800ca26:	f380 8814 	msr	CONTROL, r0
 800ca2a:	b662      	cpsie	i
 800ca2c:	b661      	cpsie	f
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	f3bf 8f6f 	isb	sy
 800ca36:	df00      	svc	0
 800ca38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ca3a:	bf00      	nop
 800ca3c:	e000ed08 	.word	0xe000ed08

0800ca40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b086      	sub	sp, #24
 800ca44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ca46:	4b46      	ldr	r3, [pc, #280]	; (800cb60 <xPortStartScheduler+0x120>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a46      	ldr	r2, [pc, #280]	; (800cb64 <xPortStartScheduler+0x124>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d10a      	bne.n	800ca66 <xPortStartScheduler+0x26>
	__asm volatile
 800ca50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca54:	f383 8811 	msr	BASEPRI, r3
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	613b      	str	r3, [r7, #16]
}
 800ca62:	bf00      	nop
 800ca64:	e7fe      	b.n	800ca64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ca66:	4b3e      	ldr	r3, [pc, #248]	; (800cb60 <xPortStartScheduler+0x120>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a3f      	ldr	r2, [pc, #252]	; (800cb68 <xPortStartScheduler+0x128>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d10a      	bne.n	800ca86 <xPortStartScheduler+0x46>
	__asm volatile
 800ca70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca74:	f383 8811 	msr	BASEPRI, r3
 800ca78:	f3bf 8f6f 	isb	sy
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	60fb      	str	r3, [r7, #12]
}
 800ca82:	bf00      	nop
 800ca84:	e7fe      	b.n	800ca84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ca86:	4b39      	ldr	r3, [pc, #228]	; (800cb6c <xPortStartScheduler+0x12c>)
 800ca88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	22ff      	movs	r2, #255	; 0xff
 800ca96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	b2db      	uxtb	r3, r3
 800ca9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800caa0:	78fb      	ldrb	r3, [r7, #3]
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800caa8:	b2da      	uxtb	r2, r3
 800caaa:	4b31      	ldr	r3, [pc, #196]	; (800cb70 <xPortStartScheduler+0x130>)
 800caac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800caae:	4b31      	ldr	r3, [pc, #196]	; (800cb74 <xPortStartScheduler+0x134>)
 800cab0:	2207      	movs	r2, #7
 800cab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cab4:	e009      	b.n	800caca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cab6:	4b2f      	ldr	r3, [pc, #188]	; (800cb74 <xPortStartScheduler+0x134>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	3b01      	subs	r3, #1
 800cabc:	4a2d      	ldr	r2, [pc, #180]	; (800cb74 <xPortStartScheduler+0x134>)
 800cabe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cac0:	78fb      	ldrb	r3, [r7, #3]
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	005b      	lsls	r3, r3, #1
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800caca:	78fb      	ldrb	r3, [r7, #3]
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cad2:	2b80      	cmp	r3, #128	; 0x80
 800cad4:	d0ef      	beq.n	800cab6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cad6:	4b27      	ldr	r3, [pc, #156]	; (800cb74 <xPortStartScheduler+0x134>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f1c3 0307 	rsb	r3, r3, #7
 800cade:	2b04      	cmp	r3, #4
 800cae0:	d00a      	beq.n	800caf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae6:	f383 8811 	msr	BASEPRI, r3
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	60bb      	str	r3, [r7, #8]
}
 800caf4:	bf00      	nop
 800caf6:	e7fe      	b.n	800caf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800caf8:	4b1e      	ldr	r3, [pc, #120]	; (800cb74 <xPortStartScheduler+0x134>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	021b      	lsls	r3, r3, #8
 800cafe:	4a1d      	ldr	r2, [pc, #116]	; (800cb74 <xPortStartScheduler+0x134>)
 800cb00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cb02:	4b1c      	ldr	r3, [pc, #112]	; (800cb74 <xPortStartScheduler+0x134>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cb0a:	4a1a      	ldr	r2, [pc, #104]	; (800cb74 <xPortStartScheduler+0x134>)
 800cb0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	b2da      	uxtb	r2, r3
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cb16:	4b18      	ldr	r3, [pc, #96]	; (800cb78 <xPortStartScheduler+0x138>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4a17      	ldr	r2, [pc, #92]	; (800cb78 <xPortStartScheduler+0x138>)
 800cb1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cb20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cb22:	4b15      	ldr	r3, [pc, #84]	; (800cb78 <xPortStartScheduler+0x138>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4a14      	ldr	r2, [pc, #80]	; (800cb78 <xPortStartScheduler+0x138>)
 800cb28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cb2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cb2e:	f000 f8dd 	bl	800ccec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cb32:	4b12      	ldr	r3, [pc, #72]	; (800cb7c <xPortStartScheduler+0x13c>)
 800cb34:	2200      	movs	r2, #0
 800cb36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cb38:	f000 f8fc 	bl	800cd34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cb3c:	4b10      	ldr	r3, [pc, #64]	; (800cb80 <xPortStartScheduler+0x140>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a0f      	ldr	r2, [pc, #60]	; (800cb80 <xPortStartScheduler+0x140>)
 800cb42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cb46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cb48:	f7ff ff66 	bl	800ca18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cb4c:	f7fe ff42 	bl	800b9d4 <vTaskSwitchContext>
	prvTaskExitError();
 800cb50:	f7ff ff1c 	bl	800c98c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3718      	adds	r7, #24
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	e000ed00 	.word	0xe000ed00
 800cb64:	410fc271 	.word	0x410fc271
 800cb68:	410fc270 	.word	0x410fc270
 800cb6c:	e000e400 	.word	0xe000e400
 800cb70:	20001108 	.word	0x20001108
 800cb74:	2000110c 	.word	0x2000110c
 800cb78:	e000ed20 	.word	0xe000ed20
 800cb7c:	2000014c 	.word	0x2000014c
 800cb80:	e000ef34 	.word	0xe000ef34

0800cb84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
	__asm volatile
 800cb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8e:	f383 8811 	msr	BASEPRI, r3
 800cb92:	f3bf 8f6f 	isb	sy
 800cb96:	f3bf 8f4f 	dsb	sy
 800cb9a:	607b      	str	r3, [r7, #4]
}
 800cb9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cb9e:	4b0f      	ldr	r3, [pc, #60]	; (800cbdc <vPortEnterCritical+0x58>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	3301      	adds	r3, #1
 800cba4:	4a0d      	ldr	r2, [pc, #52]	; (800cbdc <vPortEnterCritical+0x58>)
 800cba6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cba8:	4b0c      	ldr	r3, [pc, #48]	; (800cbdc <vPortEnterCritical+0x58>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d10f      	bne.n	800cbd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cbb0:	4b0b      	ldr	r3, [pc, #44]	; (800cbe0 <vPortEnterCritical+0x5c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d00a      	beq.n	800cbd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbbe:	f383 8811 	msr	BASEPRI, r3
 800cbc2:	f3bf 8f6f 	isb	sy
 800cbc6:	f3bf 8f4f 	dsb	sy
 800cbca:	603b      	str	r3, [r7, #0]
}
 800cbcc:	bf00      	nop
 800cbce:	e7fe      	b.n	800cbce <vPortEnterCritical+0x4a>
	}
}
 800cbd0:	bf00      	nop
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr
 800cbdc:	2000014c 	.word	0x2000014c
 800cbe0:	e000ed04 	.word	0xe000ed04

0800cbe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cbea:	4b12      	ldr	r3, [pc, #72]	; (800cc34 <vPortExitCritical+0x50>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d10a      	bne.n	800cc08 <vPortExitCritical+0x24>
	__asm volatile
 800cbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf6:	f383 8811 	msr	BASEPRI, r3
 800cbfa:	f3bf 8f6f 	isb	sy
 800cbfe:	f3bf 8f4f 	dsb	sy
 800cc02:	607b      	str	r3, [r7, #4]
}
 800cc04:	bf00      	nop
 800cc06:	e7fe      	b.n	800cc06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cc08:	4b0a      	ldr	r3, [pc, #40]	; (800cc34 <vPortExitCritical+0x50>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	4a09      	ldr	r2, [pc, #36]	; (800cc34 <vPortExitCritical+0x50>)
 800cc10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc12:	4b08      	ldr	r3, [pc, #32]	; (800cc34 <vPortExitCritical+0x50>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d105      	bne.n	800cc26 <vPortExitCritical+0x42>
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	f383 8811 	msr	BASEPRI, r3
}
 800cc24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cc26:	bf00      	nop
 800cc28:	370c      	adds	r7, #12
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop
 800cc34:	2000014c 	.word	0x2000014c
	...

0800cc40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cc40:	f3ef 8009 	mrs	r0, PSP
 800cc44:	f3bf 8f6f 	isb	sy
 800cc48:	4b15      	ldr	r3, [pc, #84]	; (800cca0 <pxCurrentTCBConst>)
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	f01e 0f10 	tst.w	lr, #16
 800cc50:	bf08      	it	eq
 800cc52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cc56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5a:	6010      	str	r0, [r2, #0]
 800cc5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cc60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cc64:	f380 8811 	msr	BASEPRI, r0
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	f3bf 8f6f 	isb	sy
 800cc70:	f7fe feb0 	bl	800b9d4 <vTaskSwitchContext>
 800cc74:	f04f 0000 	mov.w	r0, #0
 800cc78:	f380 8811 	msr	BASEPRI, r0
 800cc7c:	bc09      	pop	{r0, r3}
 800cc7e:	6819      	ldr	r1, [r3, #0]
 800cc80:	6808      	ldr	r0, [r1, #0]
 800cc82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc86:	f01e 0f10 	tst.w	lr, #16
 800cc8a:	bf08      	it	eq
 800cc8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cc90:	f380 8809 	msr	PSP, r0
 800cc94:	f3bf 8f6f 	isb	sy
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop
 800cc9c:	f3af 8000 	nop.w

0800cca0 <pxCurrentTCBConst>:
 800cca0:	20000adc 	.word	0x20000adc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cca4:	bf00      	nop
 800cca6:	bf00      	nop

0800cca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
	__asm volatile
 800ccae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb2:	f383 8811 	msr	BASEPRI, r3
 800ccb6:	f3bf 8f6f 	isb	sy
 800ccba:	f3bf 8f4f 	dsb	sy
 800ccbe:	607b      	str	r3, [r7, #4]
}
 800ccc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ccc2:	f7fe fdcd 	bl	800b860 <xTaskIncrementTick>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d003      	beq.n	800ccd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cccc:	4b06      	ldr	r3, [pc, #24]	; (800cce8 <xPortSysTickHandler+0x40>)
 800ccce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccd2:	601a      	str	r2, [r3, #0]
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	f383 8811 	msr	BASEPRI, r3
}
 800ccde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cce0:	bf00      	nop
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	e000ed04 	.word	0xe000ed04

0800ccec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ccec:	b480      	push	{r7}
 800ccee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ccf0:	4b0b      	ldr	r3, [pc, #44]	; (800cd20 <vPortSetupTimerInterrupt+0x34>)
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ccf6:	4b0b      	ldr	r3, [pc, #44]	; (800cd24 <vPortSetupTimerInterrupt+0x38>)
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ccfc:	4b0a      	ldr	r3, [pc, #40]	; (800cd28 <vPortSetupTimerInterrupt+0x3c>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a0a      	ldr	r2, [pc, #40]	; (800cd2c <vPortSetupTimerInterrupt+0x40>)
 800cd02:	fba2 2303 	umull	r2, r3, r2, r3
 800cd06:	099b      	lsrs	r3, r3, #6
 800cd08:	4a09      	ldr	r2, [pc, #36]	; (800cd30 <vPortSetupTimerInterrupt+0x44>)
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cd0e:	4b04      	ldr	r3, [pc, #16]	; (800cd20 <vPortSetupTimerInterrupt+0x34>)
 800cd10:	2207      	movs	r2, #7
 800cd12:	601a      	str	r2, [r3, #0]
}
 800cd14:	bf00      	nop
 800cd16:	46bd      	mov	sp, r7
 800cd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1c:	4770      	bx	lr
 800cd1e:	bf00      	nop
 800cd20:	e000e010 	.word	0xe000e010
 800cd24:	e000e018 	.word	0xe000e018
 800cd28:	20000000 	.word	0x20000000
 800cd2c:	10624dd3 	.word	0x10624dd3
 800cd30:	e000e014 	.word	0xe000e014

0800cd34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cd34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cd44 <vPortEnableVFP+0x10>
 800cd38:	6801      	ldr	r1, [r0, #0]
 800cd3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cd3e:	6001      	str	r1, [r0, #0]
 800cd40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cd42:	bf00      	nop
 800cd44:	e000ed88 	.word	0xe000ed88

0800cd48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cd48:	b480      	push	{r7}
 800cd4a:	b085      	sub	sp, #20
 800cd4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cd4e:	f3ef 8305 	mrs	r3, IPSR
 800cd52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2b0f      	cmp	r3, #15
 800cd58:	d914      	bls.n	800cd84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cd5a:	4a17      	ldr	r2, [pc, #92]	; (800cdb8 <vPortValidateInterruptPriority+0x70>)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	4413      	add	r3, r2
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cd64:	4b15      	ldr	r3, [pc, #84]	; (800cdbc <vPortValidateInterruptPriority+0x74>)
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	7afa      	ldrb	r2, [r7, #11]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d20a      	bcs.n	800cd84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd72:	f383 8811 	msr	BASEPRI, r3
 800cd76:	f3bf 8f6f 	isb	sy
 800cd7a:	f3bf 8f4f 	dsb	sy
 800cd7e:	607b      	str	r3, [r7, #4]
}
 800cd80:	bf00      	nop
 800cd82:	e7fe      	b.n	800cd82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cd84:	4b0e      	ldr	r3, [pc, #56]	; (800cdc0 <vPortValidateInterruptPriority+0x78>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cd8c:	4b0d      	ldr	r3, [pc, #52]	; (800cdc4 <vPortValidateInterruptPriority+0x7c>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d90a      	bls.n	800cdaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cd94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd98:	f383 8811 	msr	BASEPRI, r3
 800cd9c:	f3bf 8f6f 	isb	sy
 800cda0:	f3bf 8f4f 	dsb	sy
 800cda4:	603b      	str	r3, [r7, #0]
}
 800cda6:	bf00      	nop
 800cda8:	e7fe      	b.n	800cda8 <vPortValidateInterruptPriority+0x60>
	}
 800cdaa:	bf00      	nop
 800cdac:	3714      	adds	r7, #20
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr
 800cdb6:	bf00      	nop
 800cdb8:	e000e3f0 	.word	0xe000e3f0
 800cdbc:	20001108 	.word	0x20001108
 800cdc0:	e000ed0c 	.word	0xe000ed0c
 800cdc4:	2000110c 	.word	0x2000110c

0800cdc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b08a      	sub	sp, #40	; 0x28
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cdd4:	f7fe fc76 	bl	800b6c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cdd8:	4b5b      	ldr	r3, [pc, #364]	; (800cf48 <pvPortMalloc+0x180>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d101      	bne.n	800cde4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cde0:	f000 f920 	bl	800d024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cde4:	4b59      	ldr	r3, [pc, #356]	; (800cf4c <pvPortMalloc+0x184>)
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	4013      	ands	r3, r2
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	f040 8093 	bne.w	800cf18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d01d      	beq.n	800ce34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cdf8:	2208      	movs	r2, #8
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f003 0307 	and.w	r3, r3, #7
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d014      	beq.n	800ce34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f023 0307 	bic.w	r3, r3, #7
 800ce10:	3308      	adds	r3, #8
 800ce12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f003 0307 	and.w	r3, r3, #7
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00a      	beq.n	800ce34 <pvPortMalloc+0x6c>
	__asm volatile
 800ce1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce22:	f383 8811 	msr	BASEPRI, r3
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	f3bf 8f4f 	dsb	sy
 800ce2e:	617b      	str	r3, [r7, #20]
}
 800ce30:	bf00      	nop
 800ce32:	e7fe      	b.n	800ce32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d06e      	beq.n	800cf18 <pvPortMalloc+0x150>
 800ce3a:	4b45      	ldr	r3, [pc, #276]	; (800cf50 <pvPortMalloc+0x188>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d869      	bhi.n	800cf18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ce44:	4b43      	ldr	r3, [pc, #268]	; (800cf54 <pvPortMalloc+0x18c>)
 800ce46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ce48:	4b42      	ldr	r3, [pc, #264]	; (800cf54 <pvPortMalloc+0x18c>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce4e:	e004      	b.n	800ce5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ce50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ce54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d903      	bls.n	800ce6c <pvPortMalloc+0xa4>
 800ce64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d1f1      	bne.n	800ce50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ce6c:	4b36      	ldr	r3, [pc, #216]	; (800cf48 <pvPortMalloc+0x180>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d050      	beq.n	800cf18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ce76:	6a3b      	ldr	r3, [r7, #32]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2208      	movs	r2, #8
 800ce7c:	4413      	add	r3, r2
 800ce7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ce80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	6a3b      	ldr	r3, [r7, #32]
 800ce86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ce88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8a:	685a      	ldr	r2, [r3, #4]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	1ad2      	subs	r2, r2, r3
 800ce90:	2308      	movs	r3, #8
 800ce92:	005b      	lsls	r3, r3, #1
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d91f      	bls.n	800ced8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ce98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	f003 0307 	and.w	r3, r3, #7
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00a      	beq.n	800cec0 <pvPortMalloc+0xf8>
	__asm volatile
 800ceaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceae:	f383 8811 	msr	BASEPRI, r3
 800ceb2:	f3bf 8f6f 	isb	sy
 800ceb6:	f3bf 8f4f 	dsb	sy
 800ceba:	613b      	str	r3, [r7, #16]
}
 800cebc:	bf00      	nop
 800cebe:	e7fe      	b.n	800cebe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec2:	685a      	ldr	r2, [r3, #4]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	1ad2      	subs	r2, r2, r3
 800cec8:	69bb      	ldr	r3, [r7, #24]
 800ceca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ced2:	69b8      	ldr	r0, [r7, #24]
 800ced4:	f000 f908 	bl	800d0e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ced8:	4b1d      	ldr	r3, [pc, #116]	; (800cf50 <pvPortMalloc+0x188>)
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	1ad3      	subs	r3, r2, r3
 800cee2:	4a1b      	ldr	r2, [pc, #108]	; (800cf50 <pvPortMalloc+0x188>)
 800cee4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cee6:	4b1a      	ldr	r3, [pc, #104]	; (800cf50 <pvPortMalloc+0x188>)
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	4b1b      	ldr	r3, [pc, #108]	; (800cf58 <pvPortMalloc+0x190>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d203      	bcs.n	800cefa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cef2:	4b17      	ldr	r3, [pc, #92]	; (800cf50 <pvPortMalloc+0x188>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4a18      	ldr	r2, [pc, #96]	; (800cf58 <pvPortMalloc+0x190>)
 800cef8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefc:	685a      	ldr	r2, [r3, #4]
 800cefe:	4b13      	ldr	r3, [pc, #76]	; (800cf4c <pvPortMalloc+0x184>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	431a      	orrs	r2, r3
 800cf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cf0e:	4b13      	ldr	r3, [pc, #76]	; (800cf5c <pvPortMalloc+0x194>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	3301      	adds	r3, #1
 800cf14:	4a11      	ldr	r2, [pc, #68]	; (800cf5c <pvPortMalloc+0x194>)
 800cf16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf18:	f7fe fbe2 	bl	800b6e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	f003 0307 	and.w	r3, r3, #7
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d00a      	beq.n	800cf3c <pvPortMalloc+0x174>
	__asm volatile
 800cf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2a:	f383 8811 	msr	BASEPRI, r3
 800cf2e:	f3bf 8f6f 	isb	sy
 800cf32:	f3bf 8f4f 	dsb	sy
 800cf36:	60fb      	str	r3, [r7, #12]
}
 800cf38:	bf00      	nop
 800cf3a:	e7fe      	b.n	800cf3a <pvPortMalloc+0x172>
	return pvReturn;
 800cf3c:	69fb      	ldr	r3, [r7, #28]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3728      	adds	r7, #40	; 0x28
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	20004d18 	.word	0x20004d18
 800cf4c:	20004d2c 	.word	0x20004d2c
 800cf50:	20004d1c 	.word	0x20004d1c
 800cf54:	20004d10 	.word	0x20004d10
 800cf58:	20004d20 	.word	0x20004d20
 800cf5c:	20004d24 	.word	0x20004d24

0800cf60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b086      	sub	sp, #24
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d04d      	beq.n	800d00e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cf72:	2308      	movs	r3, #8
 800cf74:	425b      	negs	r3, r3
 800cf76:	697a      	ldr	r2, [r7, #20]
 800cf78:	4413      	add	r3, r2
 800cf7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	685a      	ldr	r2, [r3, #4]
 800cf84:	4b24      	ldr	r3, [pc, #144]	; (800d018 <vPortFree+0xb8>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4013      	ands	r3, r2
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d10a      	bne.n	800cfa4 <vPortFree+0x44>
	__asm volatile
 800cf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf92:	f383 8811 	msr	BASEPRI, r3
 800cf96:	f3bf 8f6f 	isb	sy
 800cf9a:	f3bf 8f4f 	dsb	sy
 800cf9e:	60fb      	str	r3, [r7, #12]
}
 800cfa0:	bf00      	nop
 800cfa2:	e7fe      	b.n	800cfa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d00a      	beq.n	800cfc2 <vPortFree+0x62>
	__asm volatile
 800cfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb0:	f383 8811 	msr	BASEPRI, r3
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	f3bf 8f4f 	dsb	sy
 800cfbc:	60bb      	str	r3, [r7, #8]
}
 800cfbe:	bf00      	nop
 800cfc0:	e7fe      	b.n	800cfc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	685a      	ldr	r2, [r3, #4]
 800cfc6:	4b14      	ldr	r3, [pc, #80]	; (800d018 <vPortFree+0xb8>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4013      	ands	r3, r2
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d01e      	beq.n	800d00e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d11a      	bne.n	800d00e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	685a      	ldr	r2, [r3, #4]
 800cfdc:	4b0e      	ldr	r3, [pc, #56]	; (800d018 <vPortFree+0xb8>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	43db      	mvns	r3, r3
 800cfe2:	401a      	ands	r2, r3
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cfe8:	f7fe fb6c 	bl	800b6c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	685a      	ldr	r2, [r3, #4]
 800cff0:	4b0a      	ldr	r3, [pc, #40]	; (800d01c <vPortFree+0xbc>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4413      	add	r3, r2
 800cff6:	4a09      	ldr	r2, [pc, #36]	; (800d01c <vPortFree+0xbc>)
 800cff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cffa:	6938      	ldr	r0, [r7, #16]
 800cffc:	f000 f874 	bl	800d0e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d000:	4b07      	ldr	r3, [pc, #28]	; (800d020 <vPortFree+0xc0>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	3301      	adds	r3, #1
 800d006:	4a06      	ldr	r2, [pc, #24]	; (800d020 <vPortFree+0xc0>)
 800d008:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d00a:	f7fe fb69 	bl	800b6e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d00e:	bf00      	nop
 800d010:	3718      	adds	r7, #24
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	20004d2c 	.word	0x20004d2c
 800d01c:	20004d1c 	.word	0x20004d1c
 800d020:	20004d28 	.word	0x20004d28

0800d024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d024:	b480      	push	{r7}
 800d026:	b085      	sub	sp, #20
 800d028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d02a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d02e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d030:	4b27      	ldr	r3, [pc, #156]	; (800d0d0 <prvHeapInit+0xac>)
 800d032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f003 0307 	and.w	r3, r3, #7
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00c      	beq.n	800d058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	3307      	adds	r3, #7
 800d042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f023 0307 	bic.w	r3, r3, #7
 800d04a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	1ad3      	subs	r3, r2, r3
 800d052:	4a1f      	ldr	r2, [pc, #124]	; (800d0d0 <prvHeapInit+0xac>)
 800d054:	4413      	add	r3, r2
 800d056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d05c:	4a1d      	ldr	r2, [pc, #116]	; (800d0d4 <prvHeapInit+0xb0>)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d062:	4b1c      	ldr	r3, [pc, #112]	; (800d0d4 <prvHeapInit+0xb0>)
 800d064:	2200      	movs	r2, #0
 800d066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	68ba      	ldr	r2, [r7, #8]
 800d06c:	4413      	add	r3, r2
 800d06e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d070:	2208      	movs	r2, #8
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	1a9b      	subs	r3, r3, r2
 800d076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f023 0307 	bic.w	r3, r3, #7
 800d07e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	4a15      	ldr	r2, [pc, #84]	; (800d0d8 <prvHeapInit+0xb4>)
 800d084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d086:	4b14      	ldr	r3, [pc, #80]	; (800d0d8 <prvHeapInit+0xb4>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2200      	movs	r2, #0
 800d08c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d08e:	4b12      	ldr	r3, [pc, #72]	; (800d0d8 <prvHeapInit+0xb4>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	2200      	movs	r2, #0
 800d094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	68fa      	ldr	r2, [r7, #12]
 800d09e:	1ad2      	subs	r2, r2, r3
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d0a4:	4b0c      	ldr	r3, [pc, #48]	; (800d0d8 <prvHeapInit+0xb4>)
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	4a0a      	ldr	r2, [pc, #40]	; (800d0dc <prvHeapInit+0xb8>)
 800d0b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	4a09      	ldr	r2, [pc, #36]	; (800d0e0 <prvHeapInit+0xbc>)
 800d0ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d0bc:	4b09      	ldr	r3, [pc, #36]	; (800d0e4 <prvHeapInit+0xc0>)
 800d0be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d0c2:	601a      	str	r2, [r3, #0]
}
 800d0c4:	bf00      	nop
 800d0c6:	3714      	adds	r7, #20
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr
 800d0d0:	20001110 	.word	0x20001110
 800d0d4:	20004d10 	.word	0x20004d10
 800d0d8:	20004d18 	.word	0x20004d18
 800d0dc:	20004d20 	.word	0x20004d20
 800d0e0:	20004d1c 	.word	0x20004d1c
 800d0e4:	20004d2c 	.word	0x20004d2c

0800d0e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b085      	sub	sp, #20
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d0f0:	4b28      	ldr	r3, [pc, #160]	; (800d194 <prvInsertBlockIntoFreeList+0xac>)
 800d0f2:	60fb      	str	r3, [r7, #12]
 800d0f4:	e002      	b.n	800d0fc <prvInsertBlockIntoFreeList+0x14>
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	60fb      	str	r3, [r7, #12]
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	429a      	cmp	r2, r3
 800d104:	d8f7      	bhi.n	800d0f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	68ba      	ldr	r2, [r7, #8]
 800d110:	4413      	add	r3, r2
 800d112:	687a      	ldr	r2, [r7, #4]
 800d114:	429a      	cmp	r2, r3
 800d116:	d108      	bne.n	800d12a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	685a      	ldr	r2, [r3, #4]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	441a      	add	r2, r3
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	68ba      	ldr	r2, [r7, #8]
 800d134:	441a      	add	r2, r3
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d118      	bne.n	800d170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	4b15      	ldr	r3, [pc, #84]	; (800d198 <prvInsertBlockIntoFreeList+0xb0>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	429a      	cmp	r2, r3
 800d148:	d00d      	beq.n	800d166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	685a      	ldr	r2, [r3, #4]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	441a      	add	r2, r3
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	601a      	str	r2, [r3, #0]
 800d164:	e008      	b.n	800d178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d166:	4b0c      	ldr	r3, [pc, #48]	; (800d198 <prvInsertBlockIntoFreeList+0xb0>)
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	601a      	str	r2, [r3, #0]
 800d16e:	e003      	b.n	800d178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d178:	68fa      	ldr	r2, [r7, #12]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d002      	beq.n	800d186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d186:	bf00      	nop
 800d188:	3714      	adds	r7, #20
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop
 800d194:	20004d10 	.word	0x20004d10
 800d198:	20004d18 	.word	0x20004d18

0800d19c <MX_USB_DEVICE_Init>:

/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(void) {
 800d19c:	b580      	push	{r7, lr}
 800d19e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	4912      	ldr	r1, [pc, #72]	; (800d1ec <MX_USB_DEVICE_Init+0x50>)
 800d1a4:	4812      	ldr	r0, [pc, #72]	; (800d1f0 <MX_USB_DEVICE_Init+0x54>)
 800d1a6:	f7fb fbed 	bl	8008984 <USBD_Init>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d001      	beq.n	800d1b4 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800d1b0:	f7f3 fe96 	bl	8000ee0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d1b4:	490f      	ldr	r1, [pc, #60]	; (800d1f4 <MX_USB_DEVICE_Init+0x58>)
 800d1b6:	480e      	ldr	r0, [pc, #56]	; (800d1f0 <MX_USB_DEVICE_Init+0x54>)
 800d1b8:	f7fb fc14 	bl	80089e4 <USBD_RegisterClass>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d001      	beq.n	800d1c6 <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 800d1c2:	f7f3 fe8d 	bl	8000ee0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d1c6:	490c      	ldr	r1, [pc, #48]	; (800d1f8 <MX_USB_DEVICE_Init+0x5c>)
 800d1c8:	4809      	ldr	r0, [pc, #36]	; (800d1f0 <MX_USB_DEVICE_Init+0x54>)
 800d1ca:	f7fb fb35 	bl	8008838 <USBD_CDC_RegisterInterface>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d001      	beq.n	800d1d8 <MX_USB_DEVICE_Init+0x3c>
    Error_Handler();
 800d1d4:	f7f3 fe84 	bl	8000ee0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d1d8:	4805      	ldr	r0, [pc, #20]	; (800d1f0 <MX_USB_DEVICE_Init+0x54>)
 800d1da:	f7fb fc2a 	bl	8008a32 <USBD_Start>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d001      	beq.n	800d1e8 <MX_USB_DEVICE_Init+0x4c>
    Error_Handler();
 800d1e4:	f7f3 fe7c 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d1e8:	bf00      	nop
 800d1ea:	bd80      	pop	{r7, pc}
 800d1ec:	20000164 	.word	0x20000164
 800d1f0:	20007314 	.word	0x20007314
 800d1f4:	20000048 	.word	0x20000048
 800d1f8:	20000150 	.word	0x20000150

0800d1fc <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	af00      	add	r7, sp, #0
  TIM_Config();
 800d200:	f000 f91a 	bl	800d438 <TIM_Config>

  if (HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK) {
 800d204:	480b      	ldr	r0, [pc, #44]	; (800d234 <CDC_Init_FS+0x38>)
 800d206:	f7f8 fdd5 	bl	8005db4 <HAL_TIM_Base_Start_IT>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d001      	beq.n	800d214 <CDC_Init_FS+0x18>
    /* Starting Error */
    Error_Handler();
 800d210:	f7f3 fe66 	bl	8000ee0 <Error_Handler>
  }
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 512);
 800d214:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d218:	4907      	ldr	r1, [pc, #28]	; (800d238 <CDC_Init_FS+0x3c>)
 800d21a:	4808      	ldr	r0, [pc, #32]	; (800d23c <CDC_Init_FS+0x40>)
 800d21c:	f7fb fb21 	bl	8008862 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d220:	4907      	ldr	r1, [pc, #28]	; (800d240 <CDC_Init_FS+0x44>)
 800d222:	4806      	ldr	r0, [pc, #24]	; (800d23c <CDC_Init_FS+0x40>)
 800d224:	f7fb fb3b 	bl	800889e <USBD_CDC_SetRxBuffer>

  usb_initialized = true;
 800d228:	4b06      	ldr	r3, [pc, #24]	; (800d244 <CDC_Init_FS+0x48>)
 800d22a:	2201      	movs	r2, #1
 800d22c:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800d22e:	2300      	movs	r3, #0
}
 800d230:	4618      	mov	r0, r3
 800d232:	bd80      	pop	{r7, pc}
 800d234:	20007868 	.word	0x20007868
 800d238:	20007624 	.word	0x20007624
 800d23c:	20007314 	.word	0x20007314
 800d240:	200075e4 	.word	0x200075e4
 800d244:	20004d30 	.word	0x20004d30

0800d248 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 800d248:	b480      	push	{r7}
 800d24a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d24c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d24e:	4618      	mov	r0, r3
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr

0800d258 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 800d258:	b480      	push	{r7}
 800d25a:	b085      	sub	sp, #20
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	4603      	mov	r3, r0
 800d260:	6039      	str	r1, [r7, #0]
 800d262:	71fb      	strb	r3, [r7, #7]
 800d264:	4613      	mov	r3, r2
 800d266:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  UNUSED(length);
  uint32_t speed = 115200;
 800d268:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800d26c:	60fb      	str	r3, [r7, #12]
  switch (cmd) {
 800d26e:	79fb      	ldrb	r3, [r7, #7]
 800d270:	2b23      	cmp	r3, #35	; 0x23
 800d272:	d86e      	bhi.n	800d352 <CDC_Control_FS+0xfa>
 800d274:	a201      	add	r2, pc, #4	; (adr r2, 800d27c <CDC_Control_FS+0x24>)
 800d276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d27a:	bf00      	nop
 800d27c:	0800d353 	.word	0x0800d353
 800d280:	0800d353 	.word	0x0800d353
 800d284:	0800d353 	.word	0x0800d353
 800d288:	0800d353 	.word	0x0800d353
 800d28c:	0800d353 	.word	0x0800d353
 800d290:	0800d353 	.word	0x0800d353
 800d294:	0800d353 	.word	0x0800d353
 800d298:	0800d353 	.word	0x0800d353
 800d29c:	0800d353 	.word	0x0800d353
 800d2a0:	0800d353 	.word	0x0800d353
 800d2a4:	0800d353 	.word	0x0800d353
 800d2a8:	0800d353 	.word	0x0800d353
 800d2ac:	0800d353 	.word	0x0800d353
 800d2b0:	0800d353 	.word	0x0800d353
 800d2b4:	0800d353 	.word	0x0800d353
 800d2b8:	0800d353 	.word	0x0800d353
 800d2bc:	0800d353 	.word	0x0800d353
 800d2c0:	0800d353 	.word	0x0800d353
 800d2c4:	0800d353 	.word	0x0800d353
 800d2c8:	0800d353 	.word	0x0800d353
 800d2cc:	0800d353 	.word	0x0800d353
 800d2d0:	0800d353 	.word	0x0800d353
 800d2d4:	0800d353 	.word	0x0800d353
 800d2d8:	0800d353 	.word	0x0800d353
 800d2dc:	0800d353 	.word	0x0800d353
 800d2e0:	0800d353 	.word	0x0800d353
 800d2e4:	0800d353 	.word	0x0800d353
 800d2e8:	0800d353 	.word	0x0800d353
 800d2ec:	0800d353 	.word	0x0800d353
 800d2f0:	0800d353 	.word	0x0800d353
 800d2f4:	0800d353 	.word	0x0800d353
 800d2f8:	0800d353 	.word	0x0800d353
 800d2fc:	0800d353 	.word	0x0800d353
 800d300:	0800d30d 	.word	0x0800d30d
 800d304:	0800d353 	.word	0x0800d353
 800d308:	0800d353 	.word	0x0800d353
    case CDC_SET_LINE_CODING:

      break;

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(speed);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	b2da      	uxtb	r2, r3
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(speed >> 8);
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	0a1a      	lsrs	r2, r3, #8
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	3301      	adds	r3, #1
 800d31c:	b2d2      	uxtb	r2, r2
 800d31e:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(speed >> 16);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	0c1a      	lsrs	r2, r3, #16
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	3302      	adds	r3, #2
 800d328:	b2d2      	uxtb	r2, r2
 800d32a:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(speed >> 24);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	0e1a      	lsrs	r2, r3, #24
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	3303      	adds	r3, #3
 800d334:	b2d2      	uxtb	r2, r2
 800d336:	701a      	strb	r2, [r3, #0]
      pbuf[4] = 0;
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	3304      	adds	r3, #4
 800d33c:	2200      	movs	r2, #0
 800d33e:	701a      	strb	r2, [r3, #0]
      pbuf[5] = 0;
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	3305      	adds	r3, #5
 800d344:	2200      	movs	r2, #0
 800d346:	701a      	strb	r2, [r3, #0]
      pbuf[6] = 8;
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	3306      	adds	r3, #6
 800d34c:	2208      	movs	r2, #8
 800d34e:	701a      	strb	r2, [r3, #0]
      break;
 800d350:	e000      	b.n	800d354 <CDC_Control_FS+0xfc>
    case CDC_SEND_BREAK:

      break;

    default:
      break;
 800d352:	bf00      	nop
  }

  return (USBD_OK);
 800d354:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d356:	4618      	mov	r0, r3
 800d358:	3714      	adds	r7, #20
 800d35a:	46bd      	mov	sp, r7
 800d35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop

0800d364 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t buf_length = *Len;
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	60fb      	str	r3, [r7, #12]
  if (buf_length != 0) {
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d004      	beq.n	800d384 <CDC_Receive_FS+0x20>
    fifo_write_bytes(&usb_input_fifo, Buf, buf_length);
 800d37a:	68fa      	ldr	r2, [r7, #12]
 800d37c:	6879      	ldr	r1, [r7, #4]
 800d37e:	4807      	ldr	r0, [pc, #28]	; (800d39c <CDC_Receive_FS+0x38>)
 800d380:	f7f5 f841 	bl	8002406 <fifo_write_bytes>
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d384:	6879      	ldr	r1, [r7, #4]
 800d386:	4806      	ldr	r0, [pc, #24]	; (800d3a0 <CDC_Receive_FS+0x3c>)
 800d388:	f7fb fa89 	bl	800889e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d38c:	4804      	ldr	r0, [pc, #16]	; (800d3a0 <CDC_Receive_FS+0x3c>)
 800d38e:	f7fb facf 	bl	8008930 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d392:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d394:	4618      	mov	r0, r3
 800d396:	3710      	adds	r7, #16
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	2000515c 	.word	0x2000515c
 800d3a0:	20007314 	.word	0x20007314

0800d3a4 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 800d3a4:	b480      	push	{r7}
 800d3a6:	b087      	sub	sp, #28
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	71fb      	strb	r3, [r7, #7]
  int8_t result = USBD_OK;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d3b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	371c      	adds	r7, #28
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr
	...

0800d3c8 <TIM5_IRQHandler>:

void TIMUsb_IRQHandler(void) {
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TimHandle);
 800d3cc:	4802      	ldr	r0, [pc, #8]	; (800d3d8 <TIM5_IRQHandler+0x10>)
 800d3ce:	f7f8 fda2 	bl	8005f16 <HAL_TIM_IRQHandler>
}
 800d3d2:	bf00      	nop
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	20007868 	.word	0x20007868

0800d3dc <CDC_Transmit_Elapsed>:

void CDC_Transmit_Elapsed() {
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800d3e2:	4b12      	ldr	r3, [pc, #72]	; (800d42c <CDC_Transmit_Elapsed+0x50>)
 800d3e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3e8:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState == 0) {
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d116      	bne.n	800d422 <CDC_Transmit_Elapsed+0x46>
    // Check usb fifo and print out to usb
    uint32_t len = fifo_get_length(&usb_output_fifo);
 800d3f4:	480e      	ldr	r0, [pc, #56]	; (800d430 <CDC_Transmit_Elapsed+0x54>)
 800d3f6:	f7f4 ff8c 	bl	8002312 <fifo_get_length>
 800d3fa:	6038      	str	r0, [r7, #0]
    if (len) {
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d00f      	beq.n	800d422 <CDC_Transmit_Elapsed+0x46>
      if (fifo_read_bytes(&usb_output_fifo, UserTxBufferFS, len)) {
 800d402:	683a      	ldr	r2, [r7, #0]
 800d404:	490b      	ldr	r1, [pc, #44]	; (800d434 <CDC_Transmit_Elapsed+0x58>)
 800d406:	480a      	ldr	r0, [pc, #40]	; (800d430 <CDC_Transmit_Elapsed+0x54>)
 800d408:	f7f4 ff8f 	bl	800232a <fifo_read_bytes>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d007      	beq.n	800d422 <CDC_Transmit_Elapsed+0x46>
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, len);
 800d412:	683a      	ldr	r2, [r7, #0]
 800d414:	4907      	ldr	r1, [pc, #28]	; (800d434 <CDC_Transmit_Elapsed+0x58>)
 800d416:	4805      	ldr	r0, [pc, #20]	; (800d42c <CDC_Transmit_Elapsed+0x50>)
 800d418:	f7fb fa23 	bl	8008862 <USBD_CDC_SetTxBuffer>
        USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d41c:	4803      	ldr	r0, [pc, #12]	; (800d42c <CDC_Transmit_Elapsed+0x50>)
 800d41e:	f7fb fa57 	bl	80088d0 <USBD_CDC_TransmitPacket>
      }
    }
  }
}
 800d422:	bf00      	nop
 800d424:	3708      	adds	r7, #8
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	20007314 	.word	0x20007314
 800d430:	20005374 	.word	0x20005374
 800d434:	20007624 	.word	0x20007624

0800d438 <TIM_Config>:

static void TIM_Config(void) {
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
   /* Enable TIM peripherals Clock */
  TIMUsb_CLK_ENABLE();
 800d43e:	2300      	movs	r3, #0
 800d440:	607b      	str	r3, [r7, #4]
 800d442:	4b1b      	ldr	r3, [pc, #108]	; (800d4b0 <TIM_Config+0x78>)
 800d444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d446:	4a1a      	ldr	r2, [pc, #104]	; (800d4b0 <TIM_Config+0x78>)
 800d448:	f043 0308 	orr.w	r3, r3, #8
 800d44c:	6413      	str	r3, [r2, #64]	; 0x40
 800d44e:	4b18      	ldr	r3, [pc, #96]	; (800d4b0 <TIM_Config+0x78>)
 800d450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d452:	f003 0308 	and.w	r3, r3, #8
 800d456:	607b      	str	r3, [r7, #4]
 800d458:	687b      	ldr	r3, [r7, #4]

  /* Set TIMUsb instance */
  TimHandle.Instance = TIMUsb;
 800d45a:	4b16      	ldr	r3, [pc, #88]	; (800d4b4 <TIM_Config+0x7c>)
 800d45c:	4a16      	ldr	r2, [pc, #88]	; (800d4b8 <TIM_Config+0x80>)
 800d45e:	601a      	str	r2, [r3, #0]

  TimHandle.Init.Period = (CDC_POLLING_INTERVAL * 1000) - 1;
 800d460:	4b14      	ldr	r3, [pc, #80]	; (800d4b4 <TIM_Config+0x7c>)
 800d462:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800d466:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = (SystemCoreClock / 2 / (1000000)) - 1;
 800d468:	4b14      	ldr	r3, [pc, #80]	; (800d4bc <TIM_Config+0x84>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a14      	ldr	r2, [pc, #80]	; (800d4c0 <TIM_Config+0x88>)
 800d46e:	fba2 2303 	umull	r2, r3, r2, r3
 800d472:	0cdb      	lsrs	r3, r3, #19
 800d474:	3b01      	subs	r3, #1
 800d476:	4a0f      	ldr	r2, [pc, #60]	; (800d4b4 <TIM_Config+0x7c>)
 800d478:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 800d47a:	4b0e      	ldr	r3, [pc, #56]	; (800d4b4 <TIM_Config+0x7c>)
 800d47c:	2200      	movs	r2, #0
 800d47e:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d480:	4b0c      	ldr	r3, [pc, #48]	; (800d4b4 <TIM_Config+0x7c>)
 800d482:	2200      	movs	r2, #0
 800d484:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK) {
 800d486:	480b      	ldr	r0, [pc, #44]	; (800d4b4 <TIM_Config+0x7c>)
 800d488:	f7f8 fc3a 	bl	8005d00 <HAL_TIM_Base_Init>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d001      	beq.n	800d496 <TIM_Config+0x5e>
    /* Initialization Error */
    Error_Handler();
 800d492:	f7f3 fd25 	bl	8000ee0 <Error_Handler>
  }


  /* Configure the NVIC for TIMx */
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(TIMUsb_IRQn, 0, 0);
 800d496:	2200      	movs	r2, #0
 800d498:	2100      	movs	r1, #0
 800d49a:	2032      	movs	r0, #50	; 0x32
 800d49c:	f7f5 fe2c 	bl	80030f8 <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMUsb_IRQn);
 800d4a0:	2032      	movs	r0, #50	; 0x32
 800d4a2:	f7f5 fe45 	bl	8003130 <HAL_NVIC_EnableIRQ>
}
 800d4a6:	bf00      	nop
 800d4a8:	3708      	adds	r7, #8
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	40023800 	.word	0x40023800
 800d4b4:	20007868 	.word	0x20007868
 800d4b8:	40000c00 	.word	0x40000c00
 800d4bc:	20000000 	.word	0x20000000
 800d4c0:	431bde83 	.word	0x431bde83

0800d4c4 <USBD_FS_DeviceDescriptor>:
 * @brief  Return the device descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	6039      	str	r1, [r7, #0]
 800d4ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	2212      	movs	r2, #18
 800d4d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d4d6:	4b03      	ldr	r3, [pc, #12]	; (800d4e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	370c      	adds	r7, #12
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr
 800d4e4:	20000180 	.word	0x20000180

0800d4e8 <USBD_FS_LangIDStrDescriptor>:
 * @brief  Return the LangID string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	6039      	str	r1, [r7, #0]
 800d4f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	2204      	movs	r2, #4
 800d4f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d4fa:	4b03      	ldr	r3, [pc, #12]	; (800d508 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr
 800d508:	20000194 	.word	0x20000194

0800d50c <USBD_FS_ProductStrDescriptor>:
 * @brief  Return the product string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	4603      	mov	r3, r0
 800d514:	6039      	str	r1, [r7, #0]
 800d516:	71fb      	strb	r3, [r7, #7]
  if (speed == 0) {
 800d518:	79fb      	ldrb	r3, [r7, #7]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d105      	bne.n	800d52a <USBD_FS_ProductStrDescriptor+0x1e>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d51e:	683a      	ldr	r2, [r7, #0]
 800d520:	4907      	ldr	r1, [pc, #28]	; (800d540 <USBD_FS_ProductStrDescriptor+0x34>)
 800d522:	4808      	ldr	r0, [pc, #32]	; (800d544 <USBD_FS_ProductStrDescriptor+0x38>)
 800d524:	f7fc fab7 	bl	8009a96 <USBD_GetString>
 800d528:	e004      	b.n	800d534 <USBD_FS_ProductStrDescriptor+0x28>
  } else {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d52a:	683a      	ldr	r2, [r7, #0]
 800d52c:	4904      	ldr	r1, [pc, #16]	; (800d540 <USBD_FS_ProductStrDescriptor+0x34>)
 800d52e:	4805      	ldr	r0, [pc, #20]	; (800d544 <USBD_FS_ProductStrDescriptor+0x38>)
 800d530:	f7fc fab1 	bl	8009a96 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d534:	4b02      	ldr	r3, [pc, #8]	; (800d540 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d536:	4618      	mov	r0, r3
 800d538:	3708      	adds	r7, #8
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}
 800d53e:	bf00      	nop
 800d540:	200078b0 	.word	0x200078b0
 800d544:	0800e7dc 	.word	0x0800e7dc

0800d548 <USBD_FS_ManufacturerStrDescriptor>:
 * @brief  Return the manufacturer string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	4603      	mov	r3, r0
 800d550:	6039      	str	r1, [r7, #0]
 800d552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d554:	683a      	ldr	r2, [r7, #0]
 800d556:	4904      	ldr	r1, [pc, #16]	; (800d568 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d558:	4804      	ldr	r0, [pc, #16]	; (800d56c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d55a:	f7fc fa9c 	bl	8009a96 <USBD_GetString>
  return USBD_StrDesc;
 800d55e:	4b02      	ldr	r3, [pc, #8]	; (800d568 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d560:	4618      	mov	r0, r3
 800d562:	3708      	adds	r7, #8
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	200078b0 	.word	0x200078b0
 800d56c:	0800e7ec 	.word	0x0800e7ec

0800d570 <USBD_FS_SerialStrDescriptor>:
 * @brief  Return the serial number string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	4603      	mov	r3, r0
 800d578:	6039      	str	r1, [r7, #0]
 800d57a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	221a      	movs	r2, #26
 800d580:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d582:	f000 f843 	bl	800d60c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *)USBD_StringSerial;
 800d586:	4b02      	ldr	r3, [pc, #8]	; (800d590 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3708      	adds	r7, #8
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	20000198 	.word	0x20000198

0800d594 <USBD_FS_ConfigStrDescriptor>:
 * @brief  Return the configuration string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	4603      	mov	r3, r0
 800d59c:	6039      	str	r1, [r7, #0]
 800d59e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH) {
 800d5a0:	79fb      	ldrb	r3, [r7, #7]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d105      	bne.n	800d5b2 <USBD_FS_ConfigStrDescriptor+0x1e>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d5a6:	683a      	ldr	r2, [r7, #0]
 800d5a8:	4907      	ldr	r1, [pc, #28]	; (800d5c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d5aa:	4808      	ldr	r0, [pc, #32]	; (800d5cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800d5ac:	f7fc fa73 	bl	8009a96 <USBD_GetString>
 800d5b0:	e004      	b.n	800d5bc <USBD_FS_ConfigStrDescriptor+0x28>
  } else {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d5b2:	683a      	ldr	r2, [r7, #0]
 800d5b4:	4904      	ldr	r1, [pc, #16]	; (800d5c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d5b6:	4805      	ldr	r0, [pc, #20]	; (800d5cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800d5b8:	f7fc fa6d 	bl	8009a96 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5bc:	4b02      	ldr	r3, [pc, #8]	; (800d5c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3708      	adds	r7, #8
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	200078b0 	.word	0x200078b0
 800d5cc:	0800e7f4 	.word	0x0800e7f4

0800d5d0 <USBD_FS_InterfaceStrDescriptor>:
 * @brief  Return the interface string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	6039      	str	r1, [r7, #0]
 800d5da:	71fb      	strb	r3, [r7, #7]
  if (speed == 0) {
 800d5dc:	79fb      	ldrb	r3, [r7, #7]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d105      	bne.n	800d5ee <USBD_FS_InterfaceStrDescriptor+0x1e>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d5e2:	683a      	ldr	r2, [r7, #0]
 800d5e4:	4907      	ldr	r1, [pc, #28]	; (800d604 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d5e6:	4808      	ldr	r0, [pc, #32]	; (800d608 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d5e8:	f7fc fa55 	bl	8009a96 <USBD_GetString>
 800d5ec:	e004      	b.n	800d5f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  } else {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d5ee:	683a      	ldr	r2, [r7, #0]
 800d5f0:	4904      	ldr	r1, [pc, #16]	; (800d604 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d5f2:	4805      	ldr	r0, [pc, #20]	; (800d608 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d5f4:	f7fc fa4f 	bl	8009a96 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5f8:	4b02      	ldr	r3, [pc, #8]	; (800d604 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	200078b0 	.word	0x200078b0
 800d608:	0800e800 	.word	0x0800e800

0800d60c <Get_SerialNum>:
/**
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void) {
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800d612:	4b0f      	ldr	r3, [pc, #60]	; (800d650 <Get_SerialNum+0x44>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800d618:	4b0e      	ldr	r3, [pc, #56]	; (800d654 <Get_SerialNum+0x48>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800d61e:	4b0e      	ldr	r3, [pc, #56]	; (800d658 <Get_SerialNum+0x4c>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d624:	68fa      	ldr	r2, [r7, #12]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	4413      	add	r3, r2
 800d62a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0) {
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d009      	beq.n	800d646 <Get_SerialNum+0x3a>
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d632:	2208      	movs	r2, #8
 800d634:	4909      	ldr	r1, [pc, #36]	; (800d65c <Get_SerialNum+0x50>)
 800d636:	68f8      	ldr	r0, [r7, #12]
 800d638:	f000 f814 	bl	800d664 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d63c:	2204      	movs	r2, #4
 800d63e:	4908      	ldr	r1, [pc, #32]	; (800d660 <Get_SerialNum+0x54>)
 800d640:	68b8      	ldr	r0, [r7, #8]
 800d642:	f000 f80f 	bl	800d664 <IntToUnicode>
  }
}
 800d646:	bf00      	nop
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	1fff7a10 	.word	0x1fff7a10
 800d654:	1fff7a14 	.word	0x1fff7a14
 800d658:	1fff7a18 	.word	0x1fff7a18
 800d65c:	2000019a 	.word	0x2000019a
 800d660:	200001aa 	.word	0x200001aa

0800d664 <IntToUnicode>:
 * @param  value: value to convert
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len) {
 800d664:	b480      	push	{r7}
 800d666:	b087      	sub	sp, #28
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	4613      	mov	r3, r2
 800d670:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d672:	2300      	movs	r3, #0
 800d674:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++) {
 800d676:	2300      	movs	r3, #0
 800d678:	75fb      	strb	r3, [r7, #23]
 800d67a:	e027      	b.n	800d6cc <IntToUnicode+0x68>
    if (((value >> 28)) < 0xA) {
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	0f1b      	lsrs	r3, r3, #28
 800d680:	2b09      	cmp	r3, #9
 800d682:	d80b      	bhi.n	800d69c <IntToUnicode+0x38>
      pbuf[2 * idx] = (value >> 28) + '0';
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	0f1b      	lsrs	r3, r3, #28
 800d688:	b2da      	uxtb	r2, r3
 800d68a:	7dfb      	ldrb	r3, [r7, #23]
 800d68c:	005b      	lsls	r3, r3, #1
 800d68e:	4619      	mov	r1, r3
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	440b      	add	r3, r1
 800d694:	3230      	adds	r2, #48	; 0x30
 800d696:	b2d2      	uxtb	r2, r2
 800d698:	701a      	strb	r2, [r3, #0]
 800d69a:	e00a      	b.n	800d6b2 <IntToUnicode+0x4e>
    } else {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	0f1b      	lsrs	r3, r3, #28
 800d6a0:	b2da      	uxtb	r2, r3
 800d6a2:	7dfb      	ldrb	r3, [r7, #23]
 800d6a4:	005b      	lsls	r3, r3, #1
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	440b      	add	r3, r1
 800d6ac:	3237      	adds	r2, #55	; 0x37
 800d6ae:	b2d2      	uxtb	r2, r2
 800d6b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	011b      	lsls	r3, r3, #4
 800d6b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d6b8:	7dfb      	ldrb	r3, [r7, #23]
 800d6ba:	005b      	lsls	r3, r3, #1
 800d6bc:	3301      	adds	r3, #1
 800d6be:	68ba      	ldr	r2, [r7, #8]
 800d6c0:	4413      	add	r3, r2
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++) {
 800d6c6:	7dfb      	ldrb	r3, [r7, #23]
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	75fb      	strb	r3, [r7, #23]
 800d6cc:	7dfa      	ldrb	r2, [r7, #23]
 800d6ce:	79fb      	ldrb	r3, [r7, #7]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d3d3      	bcc.n	800d67c <IntToUnicode+0x18>
  }
}
 800d6d4:	bf00      	nop
 800d6d6:	bf00      	nop
 800d6d8:	371c      	adds	r7, #28
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e0:	4770      	bx	lr
	...

0800d6e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b08a      	sub	sp, #40	; 0x28
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d6ec:	f107 0314 	add.w	r3, r7, #20
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	605a      	str	r2, [r3, #4]
 800d6f6:	609a      	str	r2, [r3, #8]
 800d6f8:	60da      	str	r2, [r3, #12]
 800d6fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d704:	d13a      	bne.n	800d77c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d706:	2300      	movs	r3, #0
 800d708:	613b      	str	r3, [r7, #16]
 800d70a:	4b1e      	ldr	r3, [pc, #120]	; (800d784 <HAL_PCD_MspInit+0xa0>)
 800d70c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d70e:	4a1d      	ldr	r2, [pc, #116]	; (800d784 <HAL_PCD_MspInit+0xa0>)
 800d710:	f043 0301 	orr.w	r3, r3, #1
 800d714:	6313      	str	r3, [r2, #48]	; 0x30
 800d716:	4b1b      	ldr	r3, [pc, #108]	; (800d784 <HAL_PCD_MspInit+0xa0>)
 800d718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d71a:	f003 0301 	and.w	r3, r3, #1
 800d71e:	613b      	str	r3, [r7, #16]
 800d720:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d722:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d728:	2302      	movs	r3, #2
 800d72a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d72c:	2300      	movs	r3, #0
 800d72e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d730:	2303      	movs	r3, #3
 800d732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d734:	230a      	movs	r3, #10
 800d736:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d738:	f107 0314 	add.w	r3, r7, #20
 800d73c:	4619      	mov	r1, r3
 800d73e:	4812      	ldr	r0, [pc, #72]	; (800d788 <HAL_PCD_MspInit+0xa4>)
 800d740:	f7f5 fd12 	bl	8003168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d744:	4b0f      	ldr	r3, [pc, #60]	; (800d784 <HAL_PCD_MspInit+0xa0>)
 800d746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d748:	4a0e      	ldr	r2, [pc, #56]	; (800d784 <HAL_PCD_MspInit+0xa0>)
 800d74a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d74e:	6353      	str	r3, [r2, #52]	; 0x34
 800d750:	2300      	movs	r3, #0
 800d752:	60fb      	str	r3, [r7, #12]
 800d754:	4b0b      	ldr	r3, [pc, #44]	; (800d784 <HAL_PCD_MspInit+0xa0>)
 800d756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d758:	4a0a      	ldr	r2, [pc, #40]	; (800d784 <HAL_PCD_MspInit+0xa0>)
 800d75a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d75e:	6453      	str	r3, [r2, #68]	; 0x44
 800d760:	4b08      	ldr	r3, [pc, #32]	; (800d784 <HAL_PCD_MspInit+0xa0>)
 800d762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d768:	60fb      	str	r3, [r7, #12]
 800d76a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d76c:	2200      	movs	r2, #0
 800d76e:	2100      	movs	r1, #0
 800d770:	2043      	movs	r0, #67	; 0x43
 800d772:	f7f5 fcc1 	bl	80030f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d776:	2043      	movs	r0, #67	; 0x43
 800d778:	f7f5 fcda 	bl	8003130 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d77c:	bf00      	nop
 800d77e:	3728      	adds	r7, #40	; 0x28
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}
 800d784:	40023800 	.word	0x40023800
 800d788:	40020000 	.word	0x40020000

0800d78c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	4610      	mov	r0, r2
 800d7a4:	f7fb f990 	bl	8008ac8 <USBD_LL_SetupStage>
}
 800d7a8:	bf00      	nop
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d7c2:	78fa      	ldrb	r2, [r7, #3]
 800d7c4:	6879      	ldr	r1, [r7, #4]
 800d7c6:	4613      	mov	r3, r2
 800d7c8:	00db      	lsls	r3, r3, #3
 800d7ca:	1a9b      	subs	r3, r3, r2
 800d7cc:	009b      	lsls	r3, r3, #2
 800d7ce:	440b      	add	r3, r1
 800d7d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	78fb      	ldrb	r3, [r7, #3]
 800d7d8:	4619      	mov	r1, r3
 800d7da:	f7fb f9ca 	bl	8008b72 <USBD_LL_DataOutStage>
}
 800d7de:	bf00      	nop
 800d7e0:	3708      	adds	r7, #8
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}

0800d7e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7e6:	b580      	push	{r7, lr}
 800d7e8:	b082      	sub	sp, #8
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	6078      	str	r0, [r7, #4]
 800d7ee:	460b      	mov	r3, r1
 800d7f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d7f8:	78fa      	ldrb	r2, [r7, #3]
 800d7fa:	6879      	ldr	r1, [r7, #4]
 800d7fc:	4613      	mov	r3, r2
 800d7fe:	00db      	lsls	r3, r3, #3
 800d800:	1a9b      	subs	r3, r3, r2
 800d802:	009b      	lsls	r3, r3, #2
 800d804:	440b      	add	r3, r1
 800d806:	3348      	adds	r3, #72	; 0x48
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	78fb      	ldrb	r3, [r7, #3]
 800d80c:	4619      	mov	r1, r3
 800d80e:	f7fb fa13 	bl	8008c38 <USBD_LL_DataInStage>
}
 800d812:	bf00      	nop
 800d814:	3708      	adds	r7, #8
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b082      	sub	sp, #8
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d828:	4618      	mov	r0, r3
 800d82a:	f7fb fb27 	bl	8008e7c <USBD_LL_SOF>
}
 800d82e:	bf00      	nop
 800d830:	3708      	adds	r7, #8
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d836:	b580      	push	{r7, lr}
 800d838:	b084      	sub	sp, #16
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d83e:	2301      	movs	r3, #1
 800d840:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	68db      	ldr	r3, [r3, #12]
 800d846:	2b02      	cmp	r3, #2
 800d848:	d001      	beq.n	800d84e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d84a:	f7f3 fb49 	bl	8000ee0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d854:	7bfa      	ldrb	r2, [r7, #15]
 800d856:	4611      	mov	r1, r2
 800d858:	4618      	mov	r0, r3
 800d85a:	f7fb fad1 	bl	8008e00 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d864:	4618      	mov	r0, r3
 800d866:	f7fb fa7d 	bl	8008d64 <USBD_LL_Reset>
}
 800d86a:	bf00      	nop
 800d86c:	3710      	adds	r7, #16
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
	...

0800d874 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b082      	sub	sp, #8
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d882:	4618      	mov	r0, r3
 800d884:	f7fb facc 	bl	8008e20 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	6812      	ldr	r2, [r2, #0]
 800d896:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d89a:	f043 0301 	orr.w	r3, r3, #1
 800d89e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6a1b      	ldr	r3, [r3, #32]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d005      	beq.n	800d8b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d8a8:	4b04      	ldr	r3, [pc, #16]	; (800d8bc <HAL_PCD_SuspendCallback+0x48>)
 800d8aa:	691b      	ldr	r3, [r3, #16]
 800d8ac:	4a03      	ldr	r2, [pc, #12]	; (800d8bc <HAL_PCD_SuspendCallback+0x48>)
 800d8ae:	f043 0306 	orr.w	r3, r3, #6
 800d8b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d8b4:	bf00      	nop
 800d8b6:	3708      	adds	r7, #8
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	e000ed00 	.word	0xe000ed00

0800d8c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7fb fabc 	bl	8008e4c <USBD_LL_Resume>
}
 800d8d4:	bf00      	nop
 800d8d6:	3708      	adds	r7, #8
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d8ee:	78fa      	ldrb	r2, [r7, #3]
 800d8f0:	4611      	mov	r1, r2
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7fb fb0a 	bl	8008f0c <USBD_LL_IsoOUTIncomplete>
}
 800d8f8:	bf00      	nop
 800d8fa:	3708      	adds	r7, #8
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}

0800d900 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	460b      	mov	r3, r1
 800d90a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d912:	78fa      	ldrb	r2, [r7, #3]
 800d914:	4611      	mov	r1, r2
 800d916:	4618      	mov	r0, r3
 800d918:	f7fb fad2 	bl	8008ec0 <USBD_LL_IsoINIncomplete>
}
 800d91c:	bf00      	nop
 800d91e:	3708      	adds	r7, #8
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d932:	4618      	mov	r0, r3
 800d934:	f7fb fb10 	bl	8008f58 <USBD_LL_DevConnected>
}
 800d938:	bf00      	nop
 800d93a:	3708      	adds	r7, #8
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b082      	sub	sp, #8
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d94e:	4618      	mov	r0, r3
 800d950:	f7fb fb0d 	bl	8008f6e <USBD_LL_DevDisconnected>
}
 800d954:	bf00      	nop
 800d956:	3708      	adds	r7, #8
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d13c      	bne.n	800d9e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d96c:	4a20      	ldr	r2, [pc, #128]	; (800d9f0 <USBD_LL_Init+0x94>)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	4a1e      	ldr	r2, [pc, #120]	; (800d9f0 <USBD_LL_Init+0x94>)
 800d978:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d97c:	4b1c      	ldr	r3, [pc, #112]	; (800d9f0 <USBD_LL_Init+0x94>)
 800d97e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d982:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d984:	4b1a      	ldr	r3, [pc, #104]	; (800d9f0 <USBD_LL_Init+0x94>)
 800d986:	2204      	movs	r2, #4
 800d988:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d98a:	4b19      	ldr	r3, [pc, #100]	; (800d9f0 <USBD_LL_Init+0x94>)
 800d98c:	2202      	movs	r2, #2
 800d98e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d990:	4b17      	ldr	r3, [pc, #92]	; (800d9f0 <USBD_LL_Init+0x94>)
 800d992:	2200      	movs	r2, #0
 800d994:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d996:	4b16      	ldr	r3, [pc, #88]	; (800d9f0 <USBD_LL_Init+0x94>)
 800d998:	2202      	movs	r2, #2
 800d99a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d99c:	4b14      	ldr	r3, [pc, #80]	; (800d9f0 <USBD_LL_Init+0x94>)
 800d99e:	2200      	movs	r2, #0
 800d9a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d9a2:	4b13      	ldr	r3, [pc, #76]	; (800d9f0 <USBD_LL_Init+0x94>)
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d9a8:	4b11      	ldr	r3, [pc, #68]	; (800d9f0 <USBD_LL_Init+0x94>)
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d9ae:	4b10      	ldr	r3, [pc, #64]	; (800d9f0 <USBD_LL_Init+0x94>)
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d9b4:	4b0e      	ldr	r3, [pc, #56]	; (800d9f0 <USBD_LL_Init+0x94>)
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d9ba:	480d      	ldr	r0, [pc, #52]	; (800d9f0 <USBD_LL_Init+0x94>)
 800d9bc:	f7f5 fda2 	bl	8003504 <HAL_PCD_Init>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d001      	beq.n	800d9ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d9c6:	f7f3 fa8b 	bl	8000ee0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d9ca:	2180      	movs	r1, #128	; 0x80
 800d9cc:	4808      	ldr	r0, [pc, #32]	; (800d9f0 <USBD_LL_Init+0x94>)
 800d9ce:	f7f6 ff00 	bl	80047d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d9d2:	2240      	movs	r2, #64	; 0x40
 800d9d4:	2100      	movs	r1, #0
 800d9d6:	4806      	ldr	r0, [pc, #24]	; (800d9f0 <USBD_LL_Init+0x94>)
 800d9d8:	f7f6 feb4 	bl	8004744 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d9dc:	2280      	movs	r2, #128	; 0x80
 800d9de:	2101      	movs	r1, #1
 800d9e0:	4803      	ldr	r0, [pc, #12]	; (800d9f0 <USBD_LL_Init+0x94>)
 800d9e2:	f7f6 feaf 	bl	8004744 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d9e6:	2300      	movs	r3, #0
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3708      	adds	r7, #8
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	20007ab0 	.word	0x20007ab0

0800d9f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da00:	2300      	movs	r3, #0
 800da02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7f5 fe97 	bl	800373e <HAL_PCD_Start>
 800da10:	4603      	mov	r3, r0
 800da12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da14:	7bfb      	ldrb	r3, [r7, #15]
 800da16:	4618      	mov	r0, r3
 800da18:	f000 f942 	bl	800dca0 <USBD_Get_USB_Status>
 800da1c:	4603      	mov	r3, r0
 800da1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da20:	7bbb      	ldrb	r3, [r7, #14]
}
 800da22:	4618      	mov	r0, r3
 800da24:	3710      	adds	r7, #16
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}

0800da2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800da2a:	b580      	push	{r7, lr}
 800da2c:	b084      	sub	sp, #16
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
 800da32:	4608      	mov	r0, r1
 800da34:	4611      	mov	r1, r2
 800da36:	461a      	mov	r2, r3
 800da38:	4603      	mov	r3, r0
 800da3a:	70fb      	strb	r3, [r7, #3]
 800da3c:	460b      	mov	r3, r1
 800da3e:	70bb      	strb	r3, [r7, #2]
 800da40:	4613      	mov	r3, r2
 800da42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da44:	2300      	movs	r3, #0
 800da46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da48:	2300      	movs	r3, #0
 800da4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da52:	78bb      	ldrb	r3, [r7, #2]
 800da54:	883a      	ldrh	r2, [r7, #0]
 800da56:	78f9      	ldrb	r1, [r7, #3]
 800da58:	f7f6 fa7b 	bl	8003f52 <HAL_PCD_EP_Open>
 800da5c:	4603      	mov	r3, r0
 800da5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da60:	7bfb      	ldrb	r3, [r7, #15]
 800da62:	4618      	mov	r0, r3
 800da64:	f000 f91c 	bl	800dca0 <USBD_Get_USB_Status>
 800da68:	4603      	mov	r3, r0
 800da6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da76:	b580      	push	{r7, lr}
 800da78:	b084      	sub	sp, #16
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
 800da7e:	460b      	mov	r3, r1
 800da80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da82:	2300      	movs	r3, #0
 800da84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da86:	2300      	movs	r3, #0
 800da88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da90:	78fa      	ldrb	r2, [r7, #3]
 800da92:	4611      	mov	r1, r2
 800da94:	4618      	mov	r0, r3
 800da96:	f7f6 fac4 	bl	8004022 <HAL_PCD_EP_Close>
 800da9a:	4603      	mov	r3, r0
 800da9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da9e:	7bfb      	ldrb	r3, [r7, #15]
 800daa0:	4618      	mov	r0, r3
 800daa2:	f000 f8fd 	bl	800dca0 <USBD_Get_USB_Status>
 800daa6:	4603      	mov	r3, r0
 800daa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800daaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800daac:	4618      	mov	r0, r3
 800daae:	3710      	adds	r7, #16
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b084      	sub	sp, #16
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	460b      	mov	r3, r1
 800dabe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dac0:	2300      	movs	r3, #0
 800dac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dac4:	2300      	movs	r3, #0
 800dac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dace:	78fa      	ldrb	r2, [r7, #3]
 800dad0:	4611      	mov	r1, r2
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7f6 fb9c 	bl	8004210 <HAL_PCD_EP_SetStall>
 800dad8:	4603      	mov	r3, r0
 800dada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dadc:	7bfb      	ldrb	r3, [r7, #15]
 800dade:	4618      	mov	r0, r3
 800dae0:	f000 f8de 	bl	800dca0 <USBD_Get_USB_Status>
 800dae4:	4603      	mov	r3, r0
 800dae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dae8:	7bbb      	ldrb	r3, [r7, #14]
}
 800daea:	4618      	mov	r0, r3
 800daec:	3710      	adds	r7, #16
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b084      	sub	sp, #16
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
 800dafa:	460b      	mov	r3, r1
 800dafc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dafe:	2300      	movs	r3, #0
 800db00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db02:	2300      	movs	r3, #0
 800db04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db0c:	78fa      	ldrb	r2, [r7, #3]
 800db0e:	4611      	mov	r1, r2
 800db10:	4618      	mov	r0, r3
 800db12:	f7f6 fbe1 	bl	80042d8 <HAL_PCD_EP_ClrStall>
 800db16:	4603      	mov	r3, r0
 800db18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db1a:	7bfb      	ldrb	r3, [r7, #15]
 800db1c:	4618      	mov	r0, r3
 800db1e:	f000 f8bf 	bl	800dca0 <USBD_Get_USB_Status>
 800db22:	4603      	mov	r3, r0
 800db24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db26:	7bbb      	ldrb	r3, [r7, #14]
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3710      	adds	r7, #16
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db30:	b480      	push	{r7}
 800db32:	b085      	sub	sp, #20
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	460b      	mov	r3, r1
 800db3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800db44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	da0b      	bge.n	800db64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800db4c:	78fb      	ldrb	r3, [r7, #3]
 800db4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db52:	68f9      	ldr	r1, [r7, #12]
 800db54:	4613      	mov	r3, r2
 800db56:	00db      	lsls	r3, r3, #3
 800db58:	1a9b      	subs	r3, r3, r2
 800db5a:	009b      	lsls	r3, r3, #2
 800db5c:	440b      	add	r3, r1
 800db5e:	333e      	adds	r3, #62	; 0x3e
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	e00b      	b.n	800db7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800db64:	78fb      	ldrb	r3, [r7, #3]
 800db66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db6a:	68f9      	ldr	r1, [r7, #12]
 800db6c:	4613      	mov	r3, r2
 800db6e:	00db      	lsls	r3, r3, #3
 800db70:	1a9b      	subs	r3, r3, r2
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	440b      	add	r3, r1
 800db76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800db7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3714      	adds	r7, #20
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr

0800db88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	460b      	mov	r3, r1
 800db92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db94:	2300      	movs	r3, #0
 800db96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db98:	2300      	movs	r3, #0
 800db9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dba2:	78fa      	ldrb	r2, [r7, #3]
 800dba4:	4611      	mov	r1, r2
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7f6 f9ae 	bl	8003f08 <HAL_PCD_SetAddress>
 800dbac:	4603      	mov	r3, r0
 800dbae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbb0:	7bfb      	ldrb	r3, [r7, #15]
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f000 f874 	bl	800dca0 <USBD_Get_USB_Status>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3710      	adds	r7, #16
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b086      	sub	sp, #24
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	60f8      	str	r0, [r7, #12]
 800dbce:	607a      	str	r2, [r7, #4]
 800dbd0:	603b      	str	r3, [r7, #0]
 800dbd2:	460b      	mov	r3, r1
 800dbd4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dbe4:	7af9      	ldrb	r1, [r7, #11]
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	f7f6 fac7 	bl	800417c <HAL_PCD_EP_Transmit>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbf2:	7dfb      	ldrb	r3, [r7, #23]
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f000 f853 	bl	800dca0 <USBD_Get_USB_Status>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dbfe:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3718      	adds	r7, #24
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b086      	sub	sp, #24
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	607a      	str	r2, [r7, #4]
 800dc12:	603b      	str	r3, [r7, #0]
 800dc14:	460b      	mov	r3, r1
 800dc16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dc26:	7af9      	ldrb	r1, [r7, #11]
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	687a      	ldr	r2, [r7, #4]
 800dc2c:	f7f6 fa43 	bl	80040b6 <HAL_PCD_EP_Receive>
 800dc30:	4603      	mov	r3, r0
 800dc32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc34:	7dfb      	ldrb	r3, [r7, #23]
 800dc36:	4618      	mov	r0, r3
 800dc38:	f000 f832 	bl	800dca0 <USBD_Get_USB_Status>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc40:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3718      	adds	r7, #24
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}

0800dc4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc4a:	b580      	push	{r7, lr}
 800dc4c:	b082      	sub	sp, #8
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	6078      	str	r0, [r7, #4]
 800dc52:	460b      	mov	r3, r1
 800dc54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dc5c:	78fa      	ldrb	r2, [r7, #3]
 800dc5e:	4611      	mov	r1, r2
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7f6 fa73 	bl	800414c <HAL_PCD_EP_GetRxCount>
 800dc66:	4603      	mov	r3, r0
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3708      	adds	r7, #8
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b083      	sub	sp, #12
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dc78:	4b03      	ldr	r3, [pc, #12]	; (800dc88 <USBD_static_malloc+0x18>)
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	370c      	adds	r7, #12
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr
 800dc86:	bf00      	nop
 800dc88:	20004d34 	.word	0x20004d34

0800dc8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]

}
 800dc94:	bf00      	nop
 800dc96:	370c      	adds	r7, #12
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr

0800dca0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b085      	sub	sp, #20
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	4603      	mov	r3, r0
 800dca8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dcae:	79fb      	ldrb	r3, [r7, #7]
 800dcb0:	2b03      	cmp	r3, #3
 800dcb2:	d817      	bhi.n	800dce4 <USBD_Get_USB_Status+0x44>
 800dcb4:	a201      	add	r2, pc, #4	; (adr r2, 800dcbc <USBD_Get_USB_Status+0x1c>)
 800dcb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcba:	bf00      	nop
 800dcbc:	0800dccd 	.word	0x0800dccd
 800dcc0:	0800dcd3 	.word	0x0800dcd3
 800dcc4:	0800dcd9 	.word	0x0800dcd9
 800dcc8:	0800dcdf 	.word	0x0800dcdf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dccc:	2300      	movs	r3, #0
 800dcce:	73fb      	strb	r3, [r7, #15]
    break;
 800dcd0:	e00b      	b.n	800dcea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dcd2:	2303      	movs	r3, #3
 800dcd4:	73fb      	strb	r3, [r7, #15]
    break;
 800dcd6:	e008      	b.n	800dcea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	73fb      	strb	r3, [r7, #15]
    break;
 800dcdc:	e005      	b.n	800dcea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dcde:	2303      	movs	r3, #3
 800dce0:	73fb      	strb	r3, [r7, #15]
    break;
 800dce2:	e002      	b.n	800dcea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dce4:	2303      	movs	r3, #3
 800dce6:	73fb      	strb	r3, [r7, #15]
    break;
 800dce8:	bf00      	nop
  }
  return usb_status;
 800dcea:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3714      	adds	r7, #20
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <__errno>:
 800dcf8:	4b01      	ldr	r3, [pc, #4]	; (800dd00 <__errno+0x8>)
 800dcfa:	6818      	ldr	r0, [r3, #0]
 800dcfc:	4770      	bx	lr
 800dcfe:	bf00      	nop
 800dd00:	200001b4 	.word	0x200001b4

0800dd04 <__libc_init_array>:
 800dd04:	b570      	push	{r4, r5, r6, lr}
 800dd06:	4d0d      	ldr	r5, [pc, #52]	; (800dd3c <__libc_init_array+0x38>)
 800dd08:	4c0d      	ldr	r4, [pc, #52]	; (800dd40 <__libc_init_array+0x3c>)
 800dd0a:	1b64      	subs	r4, r4, r5
 800dd0c:	10a4      	asrs	r4, r4, #2
 800dd0e:	2600      	movs	r6, #0
 800dd10:	42a6      	cmp	r6, r4
 800dd12:	d109      	bne.n	800dd28 <__libc_init_array+0x24>
 800dd14:	4d0b      	ldr	r5, [pc, #44]	; (800dd44 <__libc_init_array+0x40>)
 800dd16:	4c0c      	ldr	r4, [pc, #48]	; (800dd48 <__libc_init_array+0x44>)
 800dd18:	f000 fc9c 	bl	800e654 <_init>
 800dd1c:	1b64      	subs	r4, r4, r5
 800dd1e:	10a4      	asrs	r4, r4, #2
 800dd20:	2600      	movs	r6, #0
 800dd22:	42a6      	cmp	r6, r4
 800dd24:	d105      	bne.n	800dd32 <__libc_init_array+0x2e>
 800dd26:	bd70      	pop	{r4, r5, r6, pc}
 800dd28:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd2c:	4798      	blx	r3
 800dd2e:	3601      	adds	r6, #1
 800dd30:	e7ee      	b.n	800dd10 <__libc_init_array+0xc>
 800dd32:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd36:	4798      	blx	r3
 800dd38:	3601      	adds	r6, #1
 800dd3a:	e7f2      	b.n	800dd22 <__libc_init_array+0x1e>
 800dd3c:	0800e918 	.word	0x0800e918
 800dd40:	0800e918 	.word	0x0800e918
 800dd44:	0800e918 	.word	0x0800e918
 800dd48:	0800e91c 	.word	0x0800e91c

0800dd4c <memcpy>:
 800dd4c:	440a      	add	r2, r1
 800dd4e:	4291      	cmp	r1, r2
 800dd50:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd54:	d100      	bne.n	800dd58 <memcpy+0xc>
 800dd56:	4770      	bx	lr
 800dd58:	b510      	push	{r4, lr}
 800dd5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd62:	4291      	cmp	r1, r2
 800dd64:	d1f9      	bne.n	800dd5a <memcpy+0xe>
 800dd66:	bd10      	pop	{r4, pc}

0800dd68 <memset>:
 800dd68:	4402      	add	r2, r0
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d100      	bne.n	800dd72 <memset+0xa>
 800dd70:	4770      	bx	lr
 800dd72:	f803 1b01 	strb.w	r1, [r3], #1
 800dd76:	e7f9      	b.n	800dd6c <memset+0x4>

0800dd78 <sniprintf>:
 800dd78:	b40c      	push	{r2, r3}
 800dd7a:	b530      	push	{r4, r5, lr}
 800dd7c:	4b17      	ldr	r3, [pc, #92]	; (800dddc <sniprintf+0x64>)
 800dd7e:	1e0c      	subs	r4, r1, #0
 800dd80:	681d      	ldr	r5, [r3, #0]
 800dd82:	b09d      	sub	sp, #116	; 0x74
 800dd84:	da08      	bge.n	800dd98 <sniprintf+0x20>
 800dd86:	238b      	movs	r3, #139	; 0x8b
 800dd88:	602b      	str	r3, [r5, #0]
 800dd8a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd8e:	b01d      	add	sp, #116	; 0x74
 800dd90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd94:	b002      	add	sp, #8
 800dd96:	4770      	bx	lr
 800dd98:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dd9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dda0:	bf14      	ite	ne
 800dda2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dda6:	4623      	moveq	r3, r4
 800dda8:	9304      	str	r3, [sp, #16]
 800ddaa:	9307      	str	r3, [sp, #28]
 800ddac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ddb0:	9002      	str	r0, [sp, #8]
 800ddb2:	9006      	str	r0, [sp, #24]
 800ddb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ddb8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ddba:	ab21      	add	r3, sp, #132	; 0x84
 800ddbc:	a902      	add	r1, sp, #8
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	9301      	str	r3, [sp, #4]
 800ddc2:	f000 f8a3 	bl	800df0c <_svfiprintf_r>
 800ddc6:	1c43      	adds	r3, r0, #1
 800ddc8:	bfbc      	itt	lt
 800ddca:	238b      	movlt	r3, #139	; 0x8b
 800ddcc:	602b      	strlt	r3, [r5, #0]
 800ddce:	2c00      	cmp	r4, #0
 800ddd0:	d0dd      	beq.n	800dd8e <sniprintf+0x16>
 800ddd2:	9b02      	ldr	r3, [sp, #8]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	701a      	strb	r2, [r3, #0]
 800ddd8:	e7d9      	b.n	800dd8e <sniprintf+0x16>
 800ddda:	bf00      	nop
 800dddc:	200001b4 	.word	0x200001b4

0800dde0 <_vsniprintf_r>:
 800dde0:	b530      	push	{r4, r5, lr}
 800dde2:	1e14      	subs	r4, r2, #0
 800dde4:	4605      	mov	r5, r0
 800dde6:	b09b      	sub	sp, #108	; 0x6c
 800dde8:	4618      	mov	r0, r3
 800ddea:	da05      	bge.n	800ddf8 <_vsniprintf_r+0x18>
 800ddec:	238b      	movs	r3, #139	; 0x8b
 800ddee:	602b      	str	r3, [r5, #0]
 800ddf0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddf4:	b01b      	add	sp, #108	; 0x6c
 800ddf6:	bd30      	pop	{r4, r5, pc}
 800ddf8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ddfc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800de00:	bf14      	ite	ne
 800de02:	f104 33ff 	addne.w	r3, r4, #4294967295
 800de06:	4623      	moveq	r3, r4
 800de08:	9302      	str	r3, [sp, #8]
 800de0a:	9305      	str	r3, [sp, #20]
 800de0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de10:	9100      	str	r1, [sp, #0]
 800de12:	9104      	str	r1, [sp, #16]
 800de14:	f8ad 300e 	strh.w	r3, [sp, #14]
 800de18:	4602      	mov	r2, r0
 800de1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800de1c:	4669      	mov	r1, sp
 800de1e:	4628      	mov	r0, r5
 800de20:	f000 f874 	bl	800df0c <_svfiprintf_r>
 800de24:	1c43      	adds	r3, r0, #1
 800de26:	bfbc      	itt	lt
 800de28:	238b      	movlt	r3, #139	; 0x8b
 800de2a:	602b      	strlt	r3, [r5, #0]
 800de2c:	2c00      	cmp	r4, #0
 800de2e:	d0e1      	beq.n	800ddf4 <_vsniprintf_r+0x14>
 800de30:	9b00      	ldr	r3, [sp, #0]
 800de32:	2200      	movs	r2, #0
 800de34:	701a      	strb	r2, [r3, #0]
 800de36:	e7dd      	b.n	800ddf4 <_vsniprintf_r+0x14>

0800de38 <vsniprintf>:
 800de38:	b507      	push	{r0, r1, r2, lr}
 800de3a:	9300      	str	r3, [sp, #0]
 800de3c:	4613      	mov	r3, r2
 800de3e:	460a      	mov	r2, r1
 800de40:	4601      	mov	r1, r0
 800de42:	4803      	ldr	r0, [pc, #12]	; (800de50 <vsniprintf+0x18>)
 800de44:	6800      	ldr	r0, [r0, #0]
 800de46:	f7ff ffcb 	bl	800dde0 <_vsniprintf_r>
 800de4a:	b003      	add	sp, #12
 800de4c:	f85d fb04 	ldr.w	pc, [sp], #4
 800de50:	200001b4 	.word	0x200001b4

0800de54 <__ssputs_r>:
 800de54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de58:	688e      	ldr	r6, [r1, #8]
 800de5a:	429e      	cmp	r6, r3
 800de5c:	4682      	mov	sl, r0
 800de5e:	460c      	mov	r4, r1
 800de60:	4690      	mov	r8, r2
 800de62:	461f      	mov	r7, r3
 800de64:	d838      	bhi.n	800ded8 <__ssputs_r+0x84>
 800de66:	898a      	ldrh	r2, [r1, #12]
 800de68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800de6c:	d032      	beq.n	800ded4 <__ssputs_r+0x80>
 800de6e:	6825      	ldr	r5, [r4, #0]
 800de70:	6909      	ldr	r1, [r1, #16]
 800de72:	eba5 0901 	sub.w	r9, r5, r1
 800de76:	6965      	ldr	r5, [r4, #20]
 800de78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800de80:	3301      	adds	r3, #1
 800de82:	444b      	add	r3, r9
 800de84:	106d      	asrs	r5, r5, #1
 800de86:	429d      	cmp	r5, r3
 800de88:	bf38      	it	cc
 800de8a:	461d      	movcc	r5, r3
 800de8c:	0553      	lsls	r3, r2, #21
 800de8e:	d531      	bpl.n	800def4 <__ssputs_r+0xa0>
 800de90:	4629      	mov	r1, r5
 800de92:	f000 fb39 	bl	800e508 <_malloc_r>
 800de96:	4606      	mov	r6, r0
 800de98:	b950      	cbnz	r0, 800deb0 <__ssputs_r+0x5c>
 800de9a:	230c      	movs	r3, #12
 800de9c:	f8ca 3000 	str.w	r3, [sl]
 800dea0:	89a3      	ldrh	r3, [r4, #12]
 800dea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dea6:	81a3      	strh	r3, [r4, #12]
 800dea8:	f04f 30ff 	mov.w	r0, #4294967295
 800deac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deb0:	6921      	ldr	r1, [r4, #16]
 800deb2:	464a      	mov	r2, r9
 800deb4:	f7ff ff4a 	bl	800dd4c <memcpy>
 800deb8:	89a3      	ldrh	r3, [r4, #12]
 800deba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800debe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dec2:	81a3      	strh	r3, [r4, #12]
 800dec4:	6126      	str	r6, [r4, #16]
 800dec6:	6165      	str	r5, [r4, #20]
 800dec8:	444e      	add	r6, r9
 800deca:	eba5 0509 	sub.w	r5, r5, r9
 800dece:	6026      	str	r6, [r4, #0]
 800ded0:	60a5      	str	r5, [r4, #8]
 800ded2:	463e      	mov	r6, r7
 800ded4:	42be      	cmp	r6, r7
 800ded6:	d900      	bls.n	800deda <__ssputs_r+0x86>
 800ded8:	463e      	mov	r6, r7
 800deda:	4632      	mov	r2, r6
 800dedc:	6820      	ldr	r0, [r4, #0]
 800dede:	4641      	mov	r1, r8
 800dee0:	f000 faa8 	bl	800e434 <memmove>
 800dee4:	68a3      	ldr	r3, [r4, #8]
 800dee6:	6822      	ldr	r2, [r4, #0]
 800dee8:	1b9b      	subs	r3, r3, r6
 800deea:	4432      	add	r2, r6
 800deec:	60a3      	str	r3, [r4, #8]
 800deee:	6022      	str	r2, [r4, #0]
 800def0:	2000      	movs	r0, #0
 800def2:	e7db      	b.n	800deac <__ssputs_r+0x58>
 800def4:	462a      	mov	r2, r5
 800def6:	f000 fb61 	bl	800e5bc <_realloc_r>
 800defa:	4606      	mov	r6, r0
 800defc:	2800      	cmp	r0, #0
 800defe:	d1e1      	bne.n	800dec4 <__ssputs_r+0x70>
 800df00:	6921      	ldr	r1, [r4, #16]
 800df02:	4650      	mov	r0, sl
 800df04:	f000 fab0 	bl	800e468 <_free_r>
 800df08:	e7c7      	b.n	800de9a <__ssputs_r+0x46>
	...

0800df0c <_svfiprintf_r>:
 800df0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df10:	4698      	mov	r8, r3
 800df12:	898b      	ldrh	r3, [r1, #12]
 800df14:	061b      	lsls	r3, r3, #24
 800df16:	b09d      	sub	sp, #116	; 0x74
 800df18:	4607      	mov	r7, r0
 800df1a:	460d      	mov	r5, r1
 800df1c:	4614      	mov	r4, r2
 800df1e:	d50e      	bpl.n	800df3e <_svfiprintf_r+0x32>
 800df20:	690b      	ldr	r3, [r1, #16]
 800df22:	b963      	cbnz	r3, 800df3e <_svfiprintf_r+0x32>
 800df24:	2140      	movs	r1, #64	; 0x40
 800df26:	f000 faef 	bl	800e508 <_malloc_r>
 800df2a:	6028      	str	r0, [r5, #0]
 800df2c:	6128      	str	r0, [r5, #16]
 800df2e:	b920      	cbnz	r0, 800df3a <_svfiprintf_r+0x2e>
 800df30:	230c      	movs	r3, #12
 800df32:	603b      	str	r3, [r7, #0]
 800df34:	f04f 30ff 	mov.w	r0, #4294967295
 800df38:	e0d1      	b.n	800e0de <_svfiprintf_r+0x1d2>
 800df3a:	2340      	movs	r3, #64	; 0x40
 800df3c:	616b      	str	r3, [r5, #20]
 800df3e:	2300      	movs	r3, #0
 800df40:	9309      	str	r3, [sp, #36]	; 0x24
 800df42:	2320      	movs	r3, #32
 800df44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df48:	f8cd 800c 	str.w	r8, [sp, #12]
 800df4c:	2330      	movs	r3, #48	; 0x30
 800df4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e0f8 <_svfiprintf_r+0x1ec>
 800df52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df56:	f04f 0901 	mov.w	r9, #1
 800df5a:	4623      	mov	r3, r4
 800df5c:	469a      	mov	sl, r3
 800df5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df62:	b10a      	cbz	r2, 800df68 <_svfiprintf_r+0x5c>
 800df64:	2a25      	cmp	r2, #37	; 0x25
 800df66:	d1f9      	bne.n	800df5c <_svfiprintf_r+0x50>
 800df68:	ebba 0b04 	subs.w	fp, sl, r4
 800df6c:	d00b      	beq.n	800df86 <_svfiprintf_r+0x7a>
 800df6e:	465b      	mov	r3, fp
 800df70:	4622      	mov	r2, r4
 800df72:	4629      	mov	r1, r5
 800df74:	4638      	mov	r0, r7
 800df76:	f7ff ff6d 	bl	800de54 <__ssputs_r>
 800df7a:	3001      	adds	r0, #1
 800df7c:	f000 80aa 	beq.w	800e0d4 <_svfiprintf_r+0x1c8>
 800df80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df82:	445a      	add	r2, fp
 800df84:	9209      	str	r2, [sp, #36]	; 0x24
 800df86:	f89a 3000 	ldrb.w	r3, [sl]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	f000 80a2 	beq.w	800e0d4 <_svfiprintf_r+0x1c8>
 800df90:	2300      	movs	r3, #0
 800df92:	f04f 32ff 	mov.w	r2, #4294967295
 800df96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df9a:	f10a 0a01 	add.w	sl, sl, #1
 800df9e:	9304      	str	r3, [sp, #16]
 800dfa0:	9307      	str	r3, [sp, #28]
 800dfa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dfa6:	931a      	str	r3, [sp, #104]	; 0x68
 800dfa8:	4654      	mov	r4, sl
 800dfaa:	2205      	movs	r2, #5
 800dfac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfb0:	4851      	ldr	r0, [pc, #324]	; (800e0f8 <_svfiprintf_r+0x1ec>)
 800dfb2:	f7f2 f91d 	bl	80001f0 <memchr>
 800dfb6:	9a04      	ldr	r2, [sp, #16]
 800dfb8:	b9d8      	cbnz	r0, 800dff2 <_svfiprintf_r+0xe6>
 800dfba:	06d0      	lsls	r0, r2, #27
 800dfbc:	bf44      	itt	mi
 800dfbe:	2320      	movmi	r3, #32
 800dfc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dfc4:	0711      	lsls	r1, r2, #28
 800dfc6:	bf44      	itt	mi
 800dfc8:	232b      	movmi	r3, #43	; 0x2b
 800dfca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dfce:	f89a 3000 	ldrb.w	r3, [sl]
 800dfd2:	2b2a      	cmp	r3, #42	; 0x2a
 800dfd4:	d015      	beq.n	800e002 <_svfiprintf_r+0xf6>
 800dfd6:	9a07      	ldr	r2, [sp, #28]
 800dfd8:	4654      	mov	r4, sl
 800dfda:	2000      	movs	r0, #0
 800dfdc:	f04f 0c0a 	mov.w	ip, #10
 800dfe0:	4621      	mov	r1, r4
 800dfe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfe6:	3b30      	subs	r3, #48	; 0x30
 800dfe8:	2b09      	cmp	r3, #9
 800dfea:	d94e      	bls.n	800e08a <_svfiprintf_r+0x17e>
 800dfec:	b1b0      	cbz	r0, 800e01c <_svfiprintf_r+0x110>
 800dfee:	9207      	str	r2, [sp, #28]
 800dff0:	e014      	b.n	800e01c <_svfiprintf_r+0x110>
 800dff2:	eba0 0308 	sub.w	r3, r0, r8
 800dff6:	fa09 f303 	lsl.w	r3, r9, r3
 800dffa:	4313      	orrs	r3, r2
 800dffc:	9304      	str	r3, [sp, #16]
 800dffe:	46a2      	mov	sl, r4
 800e000:	e7d2      	b.n	800dfa8 <_svfiprintf_r+0x9c>
 800e002:	9b03      	ldr	r3, [sp, #12]
 800e004:	1d19      	adds	r1, r3, #4
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	9103      	str	r1, [sp, #12]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	bfbb      	ittet	lt
 800e00e:	425b      	neglt	r3, r3
 800e010:	f042 0202 	orrlt.w	r2, r2, #2
 800e014:	9307      	strge	r3, [sp, #28]
 800e016:	9307      	strlt	r3, [sp, #28]
 800e018:	bfb8      	it	lt
 800e01a:	9204      	strlt	r2, [sp, #16]
 800e01c:	7823      	ldrb	r3, [r4, #0]
 800e01e:	2b2e      	cmp	r3, #46	; 0x2e
 800e020:	d10c      	bne.n	800e03c <_svfiprintf_r+0x130>
 800e022:	7863      	ldrb	r3, [r4, #1]
 800e024:	2b2a      	cmp	r3, #42	; 0x2a
 800e026:	d135      	bne.n	800e094 <_svfiprintf_r+0x188>
 800e028:	9b03      	ldr	r3, [sp, #12]
 800e02a:	1d1a      	adds	r2, r3, #4
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	9203      	str	r2, [sp, #12]
 800e030:	2b00      	cmp	r3, #0
 800e032:	bfb8      	it	lt
 800e034:	f04f 33ff 	movlt.w	r3, #4294967295
 800e038:	3402      	adds	r4, #2
 800e03a:	9305      	str	r3, [sp, #20]
 800e03c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e108 <_svfiprintf_r+0x1fc>
 800e040:	7821      	ldrb	r1, [r4, #0]
 800e042:	2203      	movs	r2, #3
 800e044:	4650      	mov	r0, sl
 800e046:	f7f2 f8d3 	bl	80001f0 <memchr>
 800e04a:	b140      	cbz	r0, 800e05e <_svfiprintf_r+0x152>
 800e04c:	2340      	movs	r3, #64	; 0x40
 800e04e:	eba0 000a 	sub.w	r0, r0, sl
 800e052:	fa03 f000 	lsl.w	r0, r3, r0
 800e056:	9b04      	ldr	r3, [sp, #16]
 800e058:	4303      	orrs	r3, r0
 800e05a:	3401      	adds	r4, #1
 800e05c:	9304      	str	r3, [sp, #16]
 800e05e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e062:	4826      	ldr	r0, [pc, #152]	; (800e0fc <_svfiprintf_r+0x1f0>)
 800e064:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e068:	2206      	movs	r2, #6
 800e06a:	f7f2 f8c1 	bl	80001f0 <memchr>
 800e06e:	2800      	cmp	r0, #0
 800e070:	d038      	beq.n	800e0e4 <_svfiprintf_r+0x1d8>
 800e072:	4b23      	ldr	r3, [pc, #140]	; (800e100 <_svfiprintf_r+0x1f4>)
 800e074:	bb1b      	cbnz	r3, 800e0be <_svfiprintf_r+0x1b2>
 800e076:	9b03      	ldr	r3, [sp, #12]
 800e078:	3307      	adds	r3, #7
 800e07a:	f023 0307 	bic.w	r3, r3, #7
 800e07e:	3308      	adds	r3, #8
 800e080:	9303      	str	r3, [sp, #12]
 800e082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e084:	4433      	add	r3, r6
 800e086:	9309      	str	r3, [sp, #36]	; 0x24
 800e088:	e767      	b.n	800df5a <_svfiprintf_r+0x4e>
 800e08a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e08e:	460c      	mov	r4, r1
 800e090:	2001      	movs	r0, #1
 800e092:	e7a5      	b.n	800dfe0 <_svfiprintf_r+0xd4>
 800e094:	2300      	movs	r3, #0
 800e096:	3401      	adds	r4, #1
 800e098:	9305      	str	r3, [sp, #20]
 800e09a:	4619      	mov	r1, r3
 800e09c:	f04f 0c0a 	mov.w	ip, #10
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0a6:	3a30      	subs	r2, #48	; 0x30
 800e0a8:	2a09      	cmp	r2, #9
 800e0aa:	d903      	bls.n	800e0b4 <_svfiprintf_r+0x1a8>
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d0c5      	beq.n	800e03c <_svfiprintf_r+0x130>
 800e0b0:	9105      	str	r1, [sp, #20]
 800e0b2:	e7c3      	b.n	800e03c <_svfiprintf_r+0x130>
 800e0b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0b8:	4604      	mov	r4, r0
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	e7f0      	b.n	800e0a0 <_svfiprintf_r+0x194>
 800e0be:	ab03      	add	r3, sp, #12
 800e0c0:	9300      	str	r3, [sp, #0]
 800e0c2:	462a      	mov	r2, r5
 800e0c4:	4b0f      	ldr	r3, [pc, #60]	; (800e104 <_svfiprintf_r+0x1f8>)
 800e0c6:	a904      	add	r1, sp, #16
 800e0c8:	4638      	mov	r0, r7
 800e0ca:	f3af 8000 	nop.w
 800e0ce:	1c42      	adds	r2, r0, #1
 800e0d0:	4606      	mov	r6, r0
 800e0d2:	d1d6      	bne.n	800e082 <_svfiprintf_r+0x176>
 800e0d4:	89ab      	ldrh	r3, [r5, #12]
 800e0d6:	065b      	lsls	r3, r3, #25
 800e0d8:	f53f af2c 	bmi.w	800df34 <_svfiprintf_r+0x28>
 800e0dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0de:	b01d      	add	sp, #116	; 0x74
 800e0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0e4:	ab03      	add	r3, sp, #12
 800e0e6:	9300      	str	r3, [sp, #0]
 800e0e8:	462a      	mov	r2, r5
 800e0ea:	4b06      	ldr	r3, [pc, #24]	; (800e104 <_svfiprintf_r+0x1f8>)
 800e0ec:	a904      	add	r1, sp, #16
 800e0ee:	4638      	mov	r0, r7
 800e0f0:	f000 f87a 	bl	800e1e8 <_printf_i>
 800e0f4:	e7eb      	b.n	800e0ce <_svfiprintf_r+0x1c2>
 800e0f6:	bf00      	nop
 800e0f8:	0800e8dc 	.word	0x0800e8dc
 800e0fc:	0800e8e6 	.word	0x0800e8e6
 800e100:	00000000 	.word	0x00000000
 800e104:	0800de55 	.word	0x0800de55
 800e108:	0800e8e2 	.word	0x0800e8e2

0800e10c <_printf_common>:
 800e10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e110:	4616      	mov	r6, r2
 800e112:	4699      	mov	r9, r3
 800e114:	688a      	ldr	r2, [r1, #8]
 800e116:	690b      	ldr	r3, [r1, #16]
 800e118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e11c:	4293      	cmp	r3, r2
 800e11e:	bfb8      	it	lt
 800e120:	4613      	movlt	r3, r2
 800e122:	6033      	str	r3, [r6, #0]
 800e124:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e128:	4607      	mov	r7, r0
 800e12a:	460c      	mov	r4, r1
 800e12c:	b10a      	cbz	r2, 800e132 <_printf_common+0x26>
 800e12e:	3301      	adds	r3, #1
 800e130:	6033      	str	r3, [r6, #0]
 800e132:	6823      	ldr	r3, [r4, #0]
 800e134:	0699      	lsls	r1, r3, #26
 800e136:	bf42      	ittt	mi
 800e138:	6833      	ldrmi	r3, [r6, #0]
 800e13a:	3302      	addmi	r3, #2
 800e13c:	6033      	strmi	r3, [r6, #0]
 800e13e:	6825      	ldr	r5, [r4, #0]
 800e140:	f015 0506 	ands.w	r5, r5, #6
 800e144:	d106      	bne.n	800e154 <_printf_common+0x48>
 800e146:	f104 0a19 	add.w	sl, r4, #25
 800e14a:	68e3      	ldr	r3, [r4, #12]
 800e14c:	6832      	ldr	r2, [r6, #0]
 800e14e:	1a9b      	subs	r3, r3, r2
 800e150:	42ab      	cmp	r3, r5
 800e152:	dc26      	bgt.n	800e1a2 <_printf_common+0x96>
 800e154:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e158:	1e13      	subs	r3, r2, #0
 800e15a:	6822      	ldr	r2, [r4, #0]
 800e15c:	bf18      	it	ne
 800e15e:	2301      	movne	r3, #1
 800e160:	0692      	lsls	r2, r2, #26
 800e162:	d42b      	bmi.n	800e1bc <_printf_common+0xb0>
 800e164:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e168:	4649      	mov	r1, r9
 800e16a:	4638      	mov	r0, r7
 800e16c:	47c0      	blx	r8
 800e16e:	3001      	adds	r0, #1
 800e170:	d01e      	beq.n	800e1b0 <_printf_common+0xa4>
 800e172:	6823      	ldr	r3, [r4, #0]
 800e174:	68e5      	ldr	r5, [r4, #12]
 800e176:	6832      	ldr	r2, [r6, #0]
 800e178:	f003 0306 	and.w	r3, r3, #6
 800e17c:	2b04      	cmp	r3, #4
 800e17e:	bf08      	it	eq
 800e180:	1aad      	subeq	r5, r5, r2
 800e182:	68a3      	ldr	r3, [r4, #8]
 800e184:	6922      	ldr	r2, [r4, #16]
 800e186:	bf0c      	ite	eq
 800e188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e18c:	2500      	movne	r5, #0
 800e18e:	4293      	cmp	r3, r2
 800e190:	bfc4      	itt	gt
 800e192:	1a9b      	subgt	r3, r3, r2
 800e194:	18ed      	addgt	r5, r5, r3
 800e196:	2600      	movs	r6, #0
 800e198:	341a      	adds	r4, #26
 800e19a:	42b5      	cmp	r5, r6
 800e19c:	d11a      	bne.n	800e1d4 <_printf_common+0xc8>
 800e19e:	2000      	movs	r0, #0
 800e1a0:	e008      	b.n	800e1b4 <_printf_common+0xa8>
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	4652      	mov	r2, sl
 800e1a6:	4649      	mov	r1, r9
 800e1a8:	4638      	mov	r0, r7
 800e1aa:	47c0      	blx	r8
 800e1ac:	3001      	adds	r0, #1
 800e1ae:	d103      	bne.n	800e1b8 <_printf_common+0xac>
 800e1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1b8:	3501      	adds	r5, #1
 800e1ba:	e7c6      	b.n	800e14a <_printf_common+0x3e>
 800e1bc:	18e1      	adds	r1, r4, r3
 800e1be:	1c5a      	adds	r2, r3, #1
 800e1c0:	2030      	movs	r0, #48	; 0x30
 800e1c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e1c6:	4422      	add	r2, r4
 800e1c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e1cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e1d0:	3302      	adds	r3, #2
 800e1d2:	e7c7      	b.n	800e164 <_printf_common+0x58>
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	4622      	mov	r2, r4
 800e1d8:	4649      	mov	r1, r9
 800e1da:	4638      	mov	r0, r7
 800e1dc:	47c0      	blx	r8
 800e1de:	3001      	adds	r0, #1
 800e1e0:	d0e6      	beq.n	800e1b0 <_printf_common+0xa4>
 800e1e2:	3601      	adds	r6, #1
 800e1e4:	e7d9      	b.n	800e19a <_printf_common+0x8e>
	...

0800e1e8 <_printf_i>:
 800e1e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e1ec:	460c      	mov	r4, r1
 800e1ee:	4691      	mov	r9, r2
 800e1f0:	7e27      	ldrb	r7, [r4, #24]
 800e1f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e1f4:	2f78      	cmp	r7, #120	; 0x78
 800e1f6:	4680      	mov	r8, r0
 800e1f8:	469a      	mov	sl, r3
 800e1fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e1fe:	d807      	bhi.n	800e210 <_printf_i+0x28>
 800e200:	2f62      	cmp	r7, #98	; 0x62
 800e202:	d80a      	bhi.n	800e21a <_printf_i+0x32>
 800e204:	2f00      	cmp	r7, #0
 800e206:	f000 80d8 	beq.w	800e3ba <_printf_i+0x1d2>
 800e20a:	2f58      	cmp	r7, #88	; 0x58
 800e20c:	f000 80a3 	beq.w	800e356 <_printf_i+0x16e>
 800e210:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e214:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e218:	e03a      	b.n	800e290 <_printf_i+0xa8>
 800e21a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e21e:	2b15      	cmp	r3, #21
 800e220:	d8f6      	bhi.n	800e210 <_printf_i+0x28>
 800e222:	a001      	add	r0, pc, #4	; (adr r0, 800e228 <_printf_i+0x40>)
 800e224:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e228:	0800e281 	.word	0x0800e281
 800e22c:	0800e295 	.word	0x0800e295
 800e230:	0800e211 	.word	0x0800e211
 800e234:	0800e211 	.word	0x0800e211
 800e238:	0800e211 	.word	0x0800e211
 800e23c:	0800e211 	.word	0x0800e211
 800e240:	0800e295 	.word	0x0800e295
 800e244:	0800e211 	.word	0x0800e211
 800e248:	0800e211 	.word	0x0800e211
 800e24c:	0800e211 	.word	0x0800e211
 800e250:	0800e211 	.word	0x0800e211
 800e254:	0800e3a1 	.word	0x0800e3a1
 800e258:	0800e2c5 	.word	0x0800e2c5
 800e25c:	0800e383 	.word	0x0800e383
 800e260:	0800e211 	.word	0x0800e211
 800e264:	0800e211 	.word	0x0800e211
 800e268:	0800e3c3 	.word	0x0800e3c3
 800e26c:	0800e211 	.word	0x0800e211
 800e270:	0800e2c5 	.word	0x0800e2c5
 800e274:	0800e211 	.word	0x0800e211
 800e278:	0800e211 	.word	0x0800e211
 800e27c:	0800e38b 	.word	0x0800e38b
 800e280:	680b      	ldr	r3, [r1, #0]
 800e282:	1d1a      	adds	r2, r3, #4
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	600a      	str	r2, [r1, #0]
 800e288:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e28c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e290:	2301      	movs	r3, #1
 800e292:	e0a3      	b.n	800e3dc <_printf_i+0x1f4>
 800e294:	6825      	ldr	r5, [r4, #0]
 800e296:	6808      	ldr	r0, [r1, #0]
 800e298:	062e      	lsls	r6, r5, #24
 800e29a:	f100 0304 	add.w	r3, r0, #4
 800e29e:	d50a      	bpl.n	800e2b6 <_printf_i+0xce>
 800e2a0:	6805      	ldr	r5, [r0, #0]
 800e2a2:	600b      	str	r3, [r1, #0]
 800e2a4:	2d00      	cmp	r5, #0
 800e2a6:	da03      	bge.n	800e2b0 <_printf_i+0xc8>
 800e2a8:	232d      	movs	r3, #45	; 0x2d
 800e2aa:	426d      	negs	r5, r5
 800e2ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2b0:	485e      	ldr	r0, [pc, #376]	; (800e42c <_printf_i+0x244>)
 800e2b2:	230a      	movs	r3, #10
 800e2b4:	e019      	b.n	800e2ea <_printf_i+0x102>
 800e2b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e2ba:	6805      	ldr	r5, [r0, #0]
 800e2bc:	600b      	str	r3, [r1, #0]
 800e2be:	bf18      	it	ne
 800e2c0:	b22d      	sxthne	r5, r5
 800e2c2:	e7ef      	b.n	800e2a4 <_printf_i+0xbc>
 800e2c4:	680b      	ldr	r3, [r1, #0]
 800e2c6:	6825      	ldr	r5, [r4, #0]
 800e2c8:	1d18      	adds	r0, r3, #4
 800e2ca:	6008      	str	r0, [r1, #0]
 800e2cc:	0628      	lsls	r0, r5, #24
 800e2ce:	d501      	bpl.n	800e2d4 <_printf_i+0xec>
 800e2d0:	681d      	ldr	r5, [r3, #0]
 800e2d2:	e002      	b.n	800e2da <_printf_i+0xf2>
 800e2d4:	0669      	lsls	r1, r5, #25
 800e2d6:	d5fb      	bpl.n	800e2d0 <_printf_i+0xe8>
 800e2d8:	881d      	ldrh	r5, [r3, #0]
 800e2da:	4854      	ldr	r0, [pc, #336]	; (800e42c <_printf_i+0x244>)
 800e2dc:	2f6f      	cmp	r7, #111	; 0x6f
 800e2de:	bf0c      	ite	eq
 800e2e0:	2308      	moveq	r3, #8
 800e2e2:	230a      	movne	r3, #10
 800e2e4:	2100      	movs	r1, #0
 800e2e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e2ea:	6866      	ldr	r6, [r4, #4]
 800e2ec:	60a6      	str	r6, [r4, #8]
 800e2ee:	2e00      	cmp	r6, #0
 800e2f0:	bfa2      	ittt	ge
 800e2f2:	6821      	ldrge	r1, [r4, #0]
 800e2f4:	f021 0104 	bicge.w	r1, r1, #4
 800e2f8:	6021      	strge	r1, [r4, #0]
 800e2fa:	b90d      	cbnz	r5, 800e300 <_printf_i+0x118>
 800e2fc:	2e00      	cmp	r6, #0
 800e2fe:	d04d      	beq.n	800e39c <_printf_i+0x1b4>
 800e300:	4616      	mov	r6, r2
 800e302:	fbb5 f1f3 	udiv	r1, r5, r3
 800e306:	fb03 5711 	mls	r7, r3, r1, r5
 800e30a:	5dc7      	ldrb	r7, [r0, r7]
 800e30c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e310:	462f      	mov	r7, r5
 800e312:	42bb      	cmp	r3, r7
 800e314:	460d      	mov	r5, r1
 800e316:	d9f4      	bls.n	800e302 <_printf_i+0x11a>
 800e318:	2b08      	cmp	r3, #8
 800e31a:	d10b      	bne.n	800e334 <_printf_i+0x14c>
 800e31c:	6823      	ldr	r3, [r4, #0]
 800e31e:	07df      	lsls	r7, r3, #31
 800e320:	d508      	bpl.n	800e334 <_printf_i+0x14c>
 800e322:	6923      	ldr	r3, [r4, #16]
 800e324:	6861      	ldr	r1, [r4, #4]
 800e326:	4299      	cmp	r1, r3
 800e328:	bfde      	ittt	le
 800e32a:	2330      	movle	r3, #48	; 0x30
 800e32c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e330:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e334:	1b92      	subs	r2, r2, r6
 800e336:	6122      	str	r2, [r4, #16]
 800e338:	f8cd a000 	str.w	sl, [sp]
 800e33c:	464b      	mov	r3, r9
 800e33e:	aa03      	add	r2, sp, #12
 800e340:	4621      	mov	r1, r4
 800e342:	4640      	mov	r0, r8
 800e344:	f7ff fee2 	bl	800e10c <_printf_common>
 800e348:	3001      	adds	r0, #1
 800e34a:	d14c      	bne.n	800e3e6 <_printf_i+0x1fe>
 800e34c:	f04f 30ff 	mov.w	r0, #4294967295
 800e350:	b004      	add	sp, #16
 800e352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e356:	4835      	ldr	r0, [pc, #212]	; (800e42c <_printf_i+0x244>)
 800e358:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e35c:	6823      	ldr	r3, [r4, #0]
 800e35e:	680e      	ldr	r6, [r1, #0]
 800e360:	061f      	lsls	r7, r3, #24
 800e362:	f856 5b04 	ldr.w	r5, [r6], #4
 800e366:	600e      	str	r6, [r1, #0]
 800e368:	d514      	bpl.n	800e394 <_printf_i+0x1ac>
 800e36a:	07d9      	lsls	r1, r3, #31
 800e36c:	bf44      	itt	mi
 800e36e:	f043 0320 	orrmi.w	r3, r3, #32
 800e372:	6023      	strmi	r3, [r4, #0]
 800e374:	b91d      	cbnz	r5, 800e37e <_printf_i+0x196>
 800e376:	6823      	ldr	r3, [r4, #0]
 800e378:	f023 0320 	bic.w	r3, r3, #32
 800e37c:	6023      	str	r3, [r4, #0]
 800e37e:	2310      	movs	r3, #16
 800e380:	e7b0      	b.n	800e2e4 <_printf_i+0xfc>
 800e382:	6823      	ldr	r3, [r4, #0]
 800e384:	f043 0320 	orr.w	r3, r3, #32
 800e388:	6023      	str	r3, [r4, #0]
 800e38a:	2378      	movs	r3, #120	; 0x78
 800e38c:	4828      	ldr	r0, [pc, #160]	; (800e430 <_printf_i+0x248>)
 800e38e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e392:	e7e3      	b.n	800e35c <_printf_i+0x174>
 800e394:	065e      	lsls	r6, r3, #25
 800e396:	bf48      	it	mi
 800e398:	b2ad      	uxthmi	r5, r5
 800e39a:	e7e6      	b.n	800e36a <_printf_i+0x182>
 800e39c:	4616      	mov	r6, r2
 800e39e:	e7bb      	b.n	800e318 <_printf_i+0x130>
 800e3a0:	680b      	ldr	r3, [r1, #0]
 800e3a2:	6826      	ldr	r6, [r4, #0]
 800e3a4:	6960      	ldr	r0, [r4, #20]
 800e3a6:	1d1d      	adds	r5, r3, #4
 800e3a8:	600d      	str	r5, [r1, #0]
 800e3aa:	0635      	lsls	r5, r6, #24
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	d501      	bpl.n	800e3b4 <_printf_i+0x1cc>
 800e3b0:	6018      	str	r0, [r3, #0]
 800e3b2:	e002      	b.n	800e3ba <_printf_i+0x1d2>
 800e3b4:	0671      	lsls	r1, r6, #25
 800e3b6:	d5fb      	bpl.n	800e3b0 <_printf_i+0x1c8>
 800e3b8:	8018      	strh	r0, [r3, #0]
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	6123      	str	r3, [r4, #16]
 800e3be:	4616      	mov	r6, r2
 800e3c0:	e7ba      	b.n	800e338 <_printf_i+0x150>
 800e3c2:	680b      	ldr	r3, [r1, #0]
 800e3c4:	1d1a      	adds	r2, r3, #4
 800e3c6:	600a      	str	r2, [r1, #0]
 800e3c8:	681e      	ldr	r6, [r3, #0]
 800e3ca:	6862      	ldr	r2, [r4, #4]
 800e3cc:	2100      	movs	r1, #0
 800e3ce:	4630      	mov	r0, r6
 800e3d0:	f7f1 ff0e 	bl	80001f0 <memchr>
 800e3d4:	b108      	cbz	r0, 800e3da <_printf_i+0x1f2>
 800e3d6:	1b80      	subs	r0, r0, r6
 800e3d8:	6060      	str	r0, [r4, #4]
 800e3da:	6863      	ldr	r3, [r4, #4]
 800e3dc:	6123      	str	r3, [r4, #16]
 800e3de:	2300      	movs	r3, #0
 800e3e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3e4:	e7a8      	b.n	800e338 <_printf_i+0x150>
 800e3e6:	6923      	ldr	r3, [r4, #16]
 800e3e8:	4632      	mov	r2, r6
 800e3ea:	4649      	mov	r1, r9
 800e3ec:	4640      	mov	r0, r8
 800e3ee:	47d0      	blx	sl
 800e3f0:	3001      	adds	r0, #1
 800e3f2:	d0ab      	beq.n	800e34c <_printf_i+0x164>
 800e3f4:	6823      	ldr	r3, [r4, #0]
 800e3f6:	079b      	lsls	r3, r3, #30
 800e3f8:	d413      	bmi.n	800e422 <_printf_i+0x23a>
 800e3fa:	68e0      	ldr	r0, [r4, #12]
 800e3fc:	9b03      	ldr	r3, [sp, #12]
 800e3fe:	4298      	cmp	r0, r3
 800e400:	bfb8      	it	lt
 800e402:	4618      	movlt	r0, r3
 800e404:	e7a4      	b.n	800e350 <_printf_i+0x168>
 800e406:	2301      	movs	r3, #1
 800e408:	4632      	mov	r2, r6
 800e40a:	4649      	mov	r1, r9
 800e40c:	4640      	mov	r0, r8
 800e40e:	47d0      	blx	sl
 800e410:	3001      	adds	r0, #1
 800e412:	d09b      	beq.n	800e34c <_printf_i+0x164>
 800e414:	3501      	adds	r5, #1
 800e416:	68e3      	ldr	r3, [r4, #12]
 800e418:	9903      	ldr	r1, [sp, #12]
 800e41a:	1a5b      	subs	r3, r3, r1
 800e41c:	42ab      	cmp	r3, r5
 800e41e:	dcf2      	bgt.n	800e406 <_printf_i+0x21e>
 800e420:	e7eb      	b.n	800e3fa <_printf_i+0x212>
 800e422:	2500      	movs	r5, #0
 800e424:	f104 0619 	add.w	r6, r4, #25
 800e428:	e7f5      	b.n	800e416 <_printf_i+0x22e>
 800e42a:	bf00      	nop
 800e42c:	0800e8ed 	.word	0x0800e8ed
 800e430:	0800e8fe 	.word	0x0800e8fe

0800e434 <memmove>:
 800e434:	4288      	cmp	r0, r1
 800e436:	b510      	push	{r4, lr}
 800e438:	eb01 0402 	add.w	r4, r1, r2
 800e43c:	d902      	bls.n	800e444 <memmove+0x10>
 800e43e:	4284      	cmp	r4, r0
 800e440:	4623      	mov	r3, r4
 800e442:	d807      	bhi.n	800e454 <memmove+0x20>
 800e444:	1e43      	subs	r3, r0, #1
 800e446:	42a1      	cmp	r1, r4
 800e448:	d008      	beq.n	800e45c <memmove+0x28>
 800e44a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e44e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e452:	e7f8      	b.n	800e446 <memmove+0x12>
 800e454:	4402      	add	r2, r0
 800e456:	4601      	mov	r1, r0
 800e458:	428a      	cmp	r2, r1
 800e45a:	d100      	bne.n	800e45e <memmove+0x2a>
 800e45c:	bd10      	pop	{r4, pc}
 800e45e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e466:	e7f7      	b.n	800e458 <memmove+0x24>

0800e468 <_free_r>:
 800e468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e46a:	2900      	cmp	r1, #0
 800e46c:	d048      	beq.n	800e500 <_free_r+0x98>
 800e46e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e472:	9001      	str	r0, [sp, #4]
 800e474:	2b00      	cmp	r3, #0
 800e476:	f1a1 0404 	sub.w	r4, r1, #4
 800e47a:	bfb8      	it	lt
 800e47c:	18e4      	addlt	r4, r4, r3
 800e47e:	f000 f8d3 	bl	800e628 <__malloc_lock>
 800e482:	4a20      	ldr	r2, [pc, #128]	; (800e504 <_free_r+0x9c>)
 800e484:	9801      	ldr	r0, [sp, #4]
 800e486:	6813      	ldr	r3, [r2, #0]
 800e488:	4615      	mov	r5, r2
 800e48a:	b933      	cbnz	r3, 800e49a <_free_r+0x32>
 800e48c:	6063      	str	r3, [r4, #4]
 800e48e:	6014      	str	r4, [r2, #0]
 800e490:	b003      	add	sp, #12
 800e492:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e496:	f000 b8cd 	b.w	800e634 <__malloc_unlock>
 800e49a:	42a3      	cmp	r3, r4
 800e49c:	d90b      	bls.n	800e4b6 <_free_r+0x4e>
 800e49e:	6821      	ldr	r1, [r4, #0]
 800e4a0:	1862      	adds	r2, r4, r1
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	bf04      	itt	eq
 800e4a6:	681a      	ldreq	r2, [r3, #0]
 800e4a8:	685b      	ldreq	r3, [r3, #4]
 800e4aa:	6063      	str	r3, [r4, #4]
 800e4ac:	bf04      	itt	eq
 800e4ae:	1852      	addeq	r2, r2, r1
 800e4b0:	6022      	streq	r2, [r4, #0]
 800e4b2:	602c      	str	r4, [r5, #0]
 800e4b4:	e7ec      	b.n	800e490 <_free_r+0x28>
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	b10b      	cbz	r3, 800e4c0 <_free_r+0x58>
 800e4bc:	42a3      	cmp	r3, r4
 800e4be:	d9fa      	bls.n	800e4b6 <_free_r+0x4e>
 800e4c0:	6811      	ldr	r1, [r2, #0]
 800e4c2:	1855      	adds	r5, r2, r1
 800e4c4:	42a5      	cmp	r5, r4
 800e4c6:	d10b      	bne.n	800e4e0 <_free_r+0x78>
 800e4c8:	6824      	ldr	r4, [r4, #0]
 800e4ca:	4421      	add	r1, r4
 800e4cc:	1854      	adds	r4, r2, r1
 800e4ce:	42a3      	cmp	r3, r4
 800e4d0:	6011      	str	r1, [r2, #0]
 800e4d2:	d1dd      	bne.n	800e490 <_free_r+0x28>
 800e4d4:	681c      	ldr	r4, [r3, #0]
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	6053      	str	r3, [r2, #4]
 800e4da:	4421      	add	r1, r4
 800e4dc:	6011      	str	r1, [r2, #0]
 800e4de:	e7d7      	b.n	800e490 <_free_r+0x28>
 800e4e0:	d902      	bls.n	800e4e8 <_free_r+0x80>
 800e4e2:	230c      	movs	r3, #12
 800e4e4:	6003      	str	r3, [r0, #0]
 800e4e6:	e7d3      	b.n	800e490 <_free_r+0x28>
 800e4e8:	6825      	ldr	r5, [r4, #0]
 800e4ea:	1961      	adds	r1, r4, r5
 800e4ec:	428b      	cmp	r3, r1
 800e4ee:	bf04      	itt	eq
 800e4f0:	6819      	ldreq	r1, [r3, #0]
 800e4f2:	685b      	ldreq	r3, [r3, #4]
 800e4f4:	6063      	str	r3, [r4, #4]
 800e4f6:	bf04      	itt	eq
 800e4f8:	1949      	addeq	r1, r1, r5
 800e4fa:	6021      	streq	r1, [r4, #0]
 800e4fc:	6054      	str	r4, [r2, #4]
 800e4fe:	e7c7      	b.n	800e490 <_free_r+0x28>
 800e500:	b003      	add	sp, #12
 800e502:	bd30      	pop	{r4, r5, pc}
 800e504:	20004f54 	.word	0x20004f54

0800e508 <_malloc_r>:
 800e508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e50a:	1ccd      	adds	r5, r1, #3
 800e50c:	f025 0503 	bic.w	r5, r5, #3
 800e510:	3508      	adds	r5, #8
 800e512:	2d0c      	cmp	r5, #12
 800e514:	bf38      	it	cc
 800e516:	250c      	movcc	r5, #12
 800e518:	2d00      	cmp	r5, #0
 800e51a:	4606      	mov	r6, r0
 800e51c:	db01      	blt.n	800e522 <_malloc_r+0x1a>
 800e51e:	42a9      	cmp	r1, r5
 800e520:	d903      	bls.n	800e52a <_malloc_r+0x22>
 800e522:	230c      	movs	r3, #12
 800e524:	6033      	str	r3, [r6, #0]
 800e526:	2000      	movs	r0, #0
 800e528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e52a:	f000 f87d 	bl	800e628 <__malloc_lock>
 800e52e:	4921      	ldr	r1, [pc, #132]	; (800e5b4 <_malloc_r+0xac>)
 800e530:	680a      	ldr	r2, [r1, #0]
 800e532:	4614      	mov	r4, r2
 800e534:	b99c      	cbnz	r4, 800e55e <_malloc_r+0x56>
 800e536:	4f20      	ldr	r7, [pc, #128]	; (800e5b8 <_malloc_r+0xb0>)
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	b923      	cbnz	r3, 800e546 <_malloc_r+0x3e>
 800e53c:	4621      	mov	r1, r4
 800e53e:	4630      	mov	r0, r6
 800e540:	f000 f862 	bl	800e608 <_sbrk_r>
 800e544:	6038      	str	r0, [r7, #0]
 800e546:	4629      	mov	r1, r5
 800e548:	4630      	mov	r0, r6
 800e54a:	f000 f85d 	bl	800e608 <_sbrk_r>
 800e54e:	1c43      	adds	r3, r0, #1
 800e550:	d123      	bne.n	800e59a <_malloc_r+0x92>
 800e552:	230c      	movs	r3, #12
 800e554:	6033      	str	r3, [r6, #0]
 800e556:	4630      	mov	r0, r6
 800e558:	f000 f86c 	bl	800e634 <__malloc_unlock>
 800e55c:	e7e3      	b.n	800e526 <_malloc_r+0x1e>
 800e55e:	6823      	ldr	r3, [r4, #0]
 800e560:	1b5b      	subs	r3, r3, r5
 800e562:	d417      	bmi.n	800e594 <_malloc_r+0x8c>
 800e564:	2b0b      	cmp	r3, #11
 800e566:	d903      	bls.n	800e570 <_malloc_r+0x68>
 800e568:	6023      	str	r3, [r4, #0]
 800e56a:	441c      	add	r4, r3
 800e56c:	6025      	str	r5, [r4, #0]
 800e56e:	e004      	b.n	800e57a <_malloc_r+0x72>
 800e570:	6863      	ldr	r3, [r4, #4]
 800e572:	42a2      	cmp	r2, r4
 800e574:	bf0c      	ite	eq
 800e576:	600b      	streq	r3, [r1, #0]
 800e578:	6053      	strne	r3, [r2, #4]
 800e57a:	4630      	mov	r0, r6
 800e57c:	f000 f85a 	bl	800e634 <__malloc_unlock>
 800e580:	f104 000b 	add.w	r0, r4, #11
 800e584:	1d23      	adds	r3, r4, #4
 800e586:	f020 0007 	bic.w	r0, r0, #7
 800e58a:	1ac2      	subs	r2, r0, r3
 800e58c:	d0cc      	beq.n	800e528 <_malloc_r+0x20>
 800e58e:	1a1b      	subs	r3, r3, r0
 800e590:	50a3      	str	r3, [r4, r2]
 800e592:	e7c9      	b.n	800e528 <_malloc_r+0x20>
 800e594:	4622      	mov	r2, r4
 800e596:	6864      	ldr	r4, [r4, #4]
 800e598:	e7cc      	b.n	800e534 <_malloc_r+0x2c>
 800e59a:	1cc4      	adds	r4, r0, #3
 800e59c:	f024 0403 	bic.w	r4, r4, #3
 800e5a0:	42a0      	cmp	r0, r4
 800e5a2:	d0e3      	beq.n	800e56c <_malloc_r+0x64>
 800e5a4:	1a21      	subs	r1, r4, r0
 800e5a6:	4630      	mov	r0, r6
 800e5a8:	f000 f82e 	bl	800e608 <_sbrk_r>
 800e5ac:	3001      	adds	r0, #1
 800e5ae:	d1dd      	bne.n	800e56c <_malloc_r+0x64>
 800e5b0:	e7cf      	b.n	800e552 <_malloc_r+0x4a>
 800e5b2:	bf00      	nop
 800e5b4:	20004f54 	.word	0x20004f54
 800e5b8:	20004f58 	.word	0x20004f58

0800e5bc <_realloc_r>:
 800e5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5be:	4607      	mov	r7, r0
 800e5c0:	4614      	mov	r4, r2
 800e5c2:	460e      	mov	r6, r1
 800e5c4:	b921      	cbnz	r1, 800e5d0 <_realloc_r+0x14>
 800e5c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e5ca:	4611      	mov	r1, r2
 800e5cc:	f7ff bf9c 	b.w	800e508 <_malloc_r>
 800e5d0:	b922      	cbnz	r2, 800e5dc <_realloc_r+0x20>
 800e5d2:	f7ff ff49 	bl	800e468 <_free_r>
 800e5d6:	4625      	mov	r5, r4
 800e5d8:	4628      	mov	r0, r5
 800e5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5dc:	f000 f830 	bl	800e640 <_malloc_usable_size_r>
 800e5e0:	42a0      	cmp	r0, r4
 800e5e2:	d20f      	bcs.n	800e604 <_realloc_r+0x48>
 800e5e4:	4621      	mov	r1, r4
 800e5e6:	4638      	mov	r0, r7
 800e5e8:	f7ff ff8e 	bl	800e508 <_malloc_r>
 800e5ec:	4605      	mov	r5, r0
 800e5ee:	2800      	cmp	r0, #0
 800e5f0:	d0f2      	beq.n	800e5d8 <_realloc_r+0x1c>
 800e5f2:	4631      	mov	r1, r6
 800e5f4:	4622      	mov	r2, r4
 800e5f6:	f7ff fba9 	bl	800dd4c <memcpy>
 800e5fa:	4631      	mov	r1, r6
 800e5fc:	4638      	mov	r0, r7
 800e5fe:	f7ff ff33 	bl	800e468 <_free_r>
 800e602:	e7e9      	b.n	800e5d8 <_realloc_r+0x1c>
 800e604:	4635      	mov	r5, r6
 800e606:	e7e7      	b.n	800e5d8 <_realloc_r+0x1c>

0800e608 <_sbrk_r>:
 800e608:	b538      	push	{r3, r4, r5, lr}
 800e60a:	4d06      	ldr	r5, [pc, #24]	; (800e624 <_sbrk_r+0x1c>)
 800e60c:	2300      	movs	r3, #0
 800e60e:	4604      	mov	r4, r0
 800e610:	4608      	mov	r0, r1
 800e612:	602b      	str	r3, [r5, #0]
 800e614:	f7f2 feb6 	bl	8001384 <_sbrk>
 800e618:	1c43      	adds	r3, r0, #1
 800e61a:	d102      	bne.n	800e622 <_sbrk_r+0x1a>
 800e61c:	682b      	ldr	r3, [r5, #0]
 800e61e:	b103      	cbz	r3, 800e622 <_sbrk_r+0x1a>
 800e620:	6023      	str	r3, [r4, #0]
 800e622:	bd38      	pop	{r3, r4, r5, pc}
 800e624:	20007eb8 	.word	0x20007eb8

0800e628 <__malloc_lock>:
 800e628:	4801      	ldr	r0, [pc, #4]	; (800e630 <__malloc_lock+0x8>)
 800e62a:	f000 b811 	b.w	800e650 <__retarget_lock_acquire_recursive>
 800e62e:	bf00      	nop
 800e630:	20007ec0 	.word	0x20007ec0

0800e634 <__malloc_unlock>:
 800e634:	4801      	ldr	r0, [pc, #4]	; (800e63c <__malloc_unlock+0x8>)
 800e636:	f000 b80c 	b.w	800e652 <__retarget_lock_release_recursive>
 800e63a:	bf00      	nop
 800e63c:	20007ec0 	.word	0x20007ec0

0800e640 <_malloc_usable_size_r>:
 800e640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e644:	1f18      	subs	r0, r3, #4
 800e646:	2b00      	cmp	r3, #0
 800e648:	bfbc      	itt	lt
 800e64a:	580b      	ldrlt	r3, [r1, r0]
 800e64c:	18c0      	addlt	r0, r0, r3
 800e64e:	4770      	bx	lr

0800e650 <__retarget_lock_acquire_recursive>:
 800e650:	4770      	bx	lr

0800e652 <__retarget_lock_release_recursive>:
 800e652:	4770      	bx	lr

0800e654 <_init>:
 800e654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e656:	bf00      	nop
 800e658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e65a:	bc08      	pop	{r3}
 800e65c:	469e      	mov	lr, r3
 800e65e:	4770      	bx	lr

0800e660 <_fini>:
 800e660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e662:	bf00      	nop
 800e664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e666:	bc08      	pop	{r3}
 800e668:	469e      	mov	lr, r3
 800e66a:	4770      	bx	lr


reefing-system-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000105d8  0800c000  0800c000  0001c000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b08  0801c5d8  0801c5d8  0002c5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d0e0  0801d0e0  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  0801d0e0  0801d0e0  0002d0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d0e8  0801d0e8  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d0e8  0801d0e8  0002d0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d0ec  0801d0ec  0002d0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0801d0f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007ef0  20000218  0801d308  00030218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008108  0801d308  00038108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004ad8a  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007e1e  00000000  00000000  0007afd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e60  00000000  00000000  00082df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002b68  00000000  00000000  00085c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021b1f  00000000  00000000  000887b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033550  00000000  00000000  000aa2d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b46bb  00000000  00000000  000dd827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00191ee2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c818  00000000  00000000  00191f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	; (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	; (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	20000218 	.word	0x20000218
 800c01c:	00000000 	.word	0x00000000
 800c020:	0801c5c0 	.word	0x0801c5c0

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	; (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	2000021c 	.word	0x2000021c
 800c03c:	0801c5c0 	.word	0x0801c5c0

0800c040 <strlen>:
 800c040:	4603      	mov	r3, r0
 800c042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c046:	2a00      	cmp	r2, #0
 800c048:	d1fb      	bne.n	800c042 <strlen+0x2>
 800c04a:	1a18      	subs	r0, r3, r0
 800c04c:	3801      	subs	r0, #1
 800c04e:	4770      	bx	lr

0800c050 <memchr>:
 800c050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c054:	2a10      	cmp	r2, #16
 800c056:	db2b      	blt.n	800c0b0 <memchr+0x60>
 800c058:	f010 0f07 	tst.w	r0, #7
 800c05c:	d008      	beq.n	800c070 <memchr+0x20>
 800c05e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c062:	3a01      	subs	r2, #1
 800c064:	428b      	cmp	r3, r1
 800c066:	d02d      	beq.n	800c0c4 <memchr+0x74>
 800c068:	f010 0f07 	tst.w	r0, #7
 800c06c:	b342      	cbz	r2, 800c0c0 <memchr+0x70>
 800c06e:	d1f6      	bne.n	800c05e <memchr+0xe>
 800c070:	b4f0      	push	{r4, r5, r6, r7}
 800c072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800c076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800c07a:	f022 0407 	bic.w	r4, r2, #7
 800c07e:	f07f 0700 	mvns.w	r7, #0
 800c082:	2300      	movs	r3, #0
 800c084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800c088:	3c08      	subs	r4, #8
 800c08a:	ea85 0501 	eor.w	r5, r5, r1
 800c08e:	ea86 0601 	eor.w	r6, r6, r1
 800c092:	fa85 f547 	uadd8	r5, r5, r7
 800c096:	faa3 f587 	sel	r5, r3, r7
 800c09a:	fa86 f647 	uadd8	r6, r6, r7
 800c09e:	faa5 f687 	sel	r6, r5, r7
 800c0a2:	b98e      	cbnz	r6, 800c0c8 <memchr+0x78>
 800c0a4:	d1ee      	bne.n	800c084 <memchr+0x34>
 800c0a6:	bcf0      	pop	{r4, r5, r6, r7}
 800c0a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c0ac:	f002 0207 	and.w	r2, r2, #7
 800c0b0:	b132      	cbz	r2, 800c0c0 <memchr+0x70>
 800c0b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c0b6:	3a01      	subs	r2, #1
 800c0b8:	ea83 0301 	eor.w	r3, r3, r1
 800c0bc:	b113      	cbz	r3, 800c0c4 <memchr+0x74>
 800c0be:	d1f8      	bne.n	800c0b2 <memchr+0x62>
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	4770      	bx	lr
 800c0c4:	3801      	subs	r0, #1
 800c0c6:	4770      	bx	lr
 800c0c8:	2d00      	cmp	r5, #0
 800c0ca:	bf06      	itte	eq
 800c0cc:	4635      	moveq	r5, r6
 800c0ce:	3803      	subeq	r0, #3
 800c0d0:	3807      	subne	r0, #7
 800c0d2:	f015 0f01 	tst.w	r5, #1
 800c0d6:	d107      	bne.n	800c0e8 <memchr+0x98>
 800c0d8:	3001      	adds	r0, #1
 800c0da:	f415 7f80 	tst.w	r5, #256	; 0x100
 800c0de:	bf02      	ittt	eq
 800c0e0:	3001      	addeq	r0, #1
 800c0e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 800c0e6:	3001      	addeq	r0, #1
 800c0e8:	bcf0      	pop	{r4, r5, r6, r7}
 800c0ea:	3801      	subs	r0, #1
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop

0800c0f0 <__aeabi_uldivmod>:
 800c0f0:	b953      	cbnz	r3, 800c108 <__aeabi_uldivmod+0x18>
 800c0f2:	b94a      	cbnz	r2, 800c108 <__aeabi_uldivmod+0x18>
 800c0f4:	2900      	cmp	r1, #0
 800c0f6:	bf08      	it	eq
 800c0f8:	2800      	cmpeq	r0, #0
 800c0fa:	bf1c      	itt	ne
 800c0fc:	f04f 31ff 	movne.w	r1, #4294967295
 800c100:	f04f 30ff 	movne.w	r0, #4294967295
 800c104:	f000 b96e 	b.w	800c3e4 <__aeabi_idiv0>
 800c108:	f1ad 0c08 	sub.w	ip, sp, #8
 800c10c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c110:	f000 f806 	bl	800c120 <__udivmoddi4>
 800c114:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c11c:	b004      	add	sp, #16
 800c11e:	4770      	bx	lr

0800c120 <__udivmoddi4>:
 800c120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c124:	9d08      	ldr	r5, [sp, #32]
 800c126:	4604      	mov	r4, r0
 800c128:	468c      	mov	ip, r1
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f040 8083 	bne.w	800c236 <__udivmoddi4+0x116>
 800c130:	428a      	cmp	r2, r1
 800c132:	4617      	mov	r7, r2
 800c134:	d947      	bls.n	800c1c6 <__udivmoddi4+0xa6>
 800c136:	fab2 f282 	clz	r2, r2
 800c13a:	b142      	cbz	r2, 800c14e <__udivmoddi4+0x2e>
 800c13c:	f1c2 0020 	rsb	r0, r2, #32
 800c140:	fa24 f000 	lsr.w	r0, r4, r0
 800c144:	4091      	lsls	r1, r2
 800c146:	4097      	lsls	r7, r2
 800c148:	ea40 0c01 	orr.w	ip, r0, r1
 800c14c:	4094      	lsls	r4, r2
 800c14e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800c152:	0c23      	lsrs	r3, r4, #16
 800c154:	fbbc f6f8 	udiv	r6, ip, r8
 800c158:	fa1f fe87 	uxth.w	lr, r7
 800c15c:	fb08 c116 	mls	r1, r8, r6, ip
 800c160:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c164:	fb06 f10e 	mul.w	r1, r6, lr
 800c168:	4299      	cmp	r1, r3
 800c16a:	d909      	bls.n	800c180 <__udivmoddi4+0x60>
 800c16c:	18fb      	adds	r3, r7, r3
 800c16e:	f106 30ff 	add.w	r0, r6, #4294967295
 800c172:	f080 8119 	bcs.w	800c3a8 <__udivmoddi4+0x288>
 800c176:	4299      	cmp	r1, r3
 800c178:	f240 8116 	bls.w	800c3a8 <__udivmoddi4+0x288>
 800c17c:	3e02      	subs	r6, #2
 800c17e:	443b      	add	r3, r7
 800c180:	1a5b      	subs	r3, r3, r1
 800c182:	b2a4      	uxth	r4, r4
 800c184:	fbb3 f0f8 	udiv	r0, r3, r8
 800c188:	fb08 3310 	mls	r3, r8, r0, r3
 800c18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c190:	fb00 fe0e 	mul.w	lr, r0, lr
 800c194:	45a6      	cmp	lr, r4
 800c196:	d909      	bls.n	800c1ac <__udivmoddi4+0x8c>
 800c198:	193c      	adds	r4, r7, r4
 800c19a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c19e:	f080 8105 	bcs.w	800c3ac <__udivmoddi4+0x28c>
 800c1a2:	45a6      	cmp	lr, r4
 800c1a4:	f240 8102 	bls.w	800c3ac <__udivmoddi4+0x28c>
 800c1a8:	3802      	subs	r0, #2
 800c1aa:	443c      	add	r4, r7
 800c1ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c1b0:	eba4 040e 	sub.w	r4, r4, lr
 800c1b4:	2600      	movs	r6, #0
 800c1b6:	b11d      	cbz	r5, 800c1c0 <__udivmoddi4+0xa0>
 800c1b8:	40d4      	lsrs	r4, r2
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	e9c5 4300 	strd	r4, r3, [r5]
 800c1c0:	4631      	mov	r1, r6
 800c1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c6:	b902      	cbnz	r2, 800c1ca <__udivmoddi4+0xaa>
 800c1c8:	deff      	udf	#255	; 0xff
 800c1ca:	fab2 f282 	clz	r2, r2
 800c1ce:	2a00      	cmp	r2, #0
 800c1d0:	d150      	bne.n	800c274 <__udivmoddi4+0x154>
 800c1d2:	1bcb      	subs	r3, r1, r7
 800c1d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c1d8:	fa1f f887 	uxth.w	r8, r7
 800c1dc:	2601      	movs	r6, #1
 800c1de:	fbb3 fcfe 	udiv	ip, r3, lr
 800c1e2:	0c21      	lsrs	r1, r4, #16
 800c1e4:	fb0e 331c 	mls	r3, lr, ip, r3
 800c1e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c1ec:	fb08 f30c 	mul.w	r3, r8, ip
 800c1f0:	428b      	cmp	r3, r1
 800c1f2:	d907      	bls.n	800c204 <__udivmoddi4+0xe4>
 800c1f4:	1879      	adds	r1, r7, r1
 800c1f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 800c1fa:	d202      	bcs.n	800c202 <__udivmoddi4+0xe2>
 800c1fc:	428b      	cmp	r3, r1
 800c1fe:	f200 80e9 	bhi.w	800c3d4 <__udivmoddi4+0x2b4>
 800c202:	4684      	mov	ip, r0
 800c204:	1ac9      	subs	r1, r1, r3
 800c206:	b2a3      	uxth	r3, r4
 800c208:	fbb1 f0fe 	udiv	r0, r1, lr
 800c20c:	fb0e 1110 	mls	r1, lr, r0, r1
 800c210:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800c214:	fb08 f800 	mul.w	r8, r8, r0
 800c218:	45a0      	cmp	r8, r4
 800c21a:	d907      	bls.n	800c22c <__udivmoddi4+0x10c>
 800c21c:	193c      	adds	r4, r7, r4
 800c21e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c222:	d202      	bcs.n	800c22a <__udivmoddi4+0x10a>
 800c224:	45a0      	cmp	r8, r4
 800c226:	f200 80d9 	bhi.w	800c3dc <__udivmoddi4+0x2bc>
 800c22a:	4618      	mov	r0, r3
 800c22c:	eba4 0408 	sub.w	r4, r4, r8
 800c230:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800c234:	e7bf      	b.n	800c1b6 <__udivmoddi4+0x96>
 800c236:	428b      	cmp	r3, r1
 800c238:	d909      	bls.n	800c24e <__udivmoddi4+0x12e>
 800c23a:	2d00      	cmp	r5, #0
 800c23c:	f000 80b1 	beq.w	800c3a2 <__udivmoddi4+0x282>
 800c240:	2600      	movs	r6, #0
 800c242:	e9c5 0100 	strd	r0, r1, [r5]
 800c246:	4630      	mov	r0, r6
 800c248:	4631      	mov	r1, r6
 800c24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c24e:	fab3 f683 	clz	r6, r3
 800c252:	2e00      	cmp	r6, #0
 800c254:	d14a      	bne.n	800c2ec <__udivmoddi4+0x1cc>
 800c256:	428b      	cmp	r3, r1
 800c258:	d302      	bcc.n	800c260 <__udivmoddi4+0x140>
 800c25a:	4282      	cmp	r2, r0
 800c25c:	f200 80b8 	bhi.w	800c3d0 <__udivmoddi4+0x2b0>
 800c260:	1a84      	subs	r4, r0, r2
 800c262:	eb61 0103 	sbc.w	r1, r1, r3
 800c266:	2001      	movs	r0, #1
 800c268:	468c      	mov	ip, r1
 800c26a:	2d00      	cmp	r5, #0
 800c26c:	d0a8      	beq.n	800c1c0 <__udivmoddi4+0xa0>
 800c26e:	e9c5 4c00 	strd	r4, ip, [r5]
 800c272:	e7a5      	b.n	800c1c0 <__udivmoddi4+0xa0>
 800c274:	f1c2 0320 	rsb	r3, r2, #32
 800c278:	fa20 f603 	lsr.w	r6, r0, r3
 800c27c:	4097      	lsls	r7, r2
 800c27e:	fa01 f002 	lsl.w	r0, r1, r2
 800c282:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800c286:	40d9      	lsrs	r1, r3
 800c288:	4330      	orrs	r0, r6
 800c28a:	0c03      	lsrs	r3, r0, #16
 800c28c:	fbb1 f6fe 	udiv	r6, r1, lr
 800c290:	fa1f f887 	uxth.w	r8, r7
 800c294:	fb0e 1116 	mls	r1, lr, r6, r1
 800c298:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c29c:	fb06 f108 	mul.w	r1, r6, r8
 800c2a0:	4299      	cmp	r1, r3
 800c2a2:	fa04 f402 	lsl.w	r4, r4, r2
 800c2a6:	d909      	bls.n	800c2bc <__udivmoddi4+0x19c>
 800c2a8:	18fb      	adds	r3, r7, r3
 800c2aa:	f106 3cff 	add.w	ip, r6, #4294967295
 800c2ae:	f080 808d 	bcs.w	800c3cc <__udivmoddi4+0x2ac>
 800c2b2:	4299      	cmp	r1, r3
 800c2b4:	f240 808a 	bls.w	800c3cc <__udivmoddi4+0x2ac>
 800c2b8:	3e02      	subs	r6, #2
 800c2ba:	443b      	add	r3, r7
 800c2bc:	1a5b      	subs	r3, r3, r1
 800c2be:	b281      	uxth	r1, r0
 800c2c0:	fbb3 f0fe 	udiv	r0, r3, lr
 800c2c4:	fb0e 3310 	mls	r3, lr, r0, r3
 800c2c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c2cc:	fb00 f308 	mul.w	r3, r0, r8
 800c2d0:	428b      	cmp	r3, r1
 800c2d2:	d907      	bls.n	800c2e4 <__udivmoddi4+0x1c4>
 800c2d4:	1879      	adds	r1, r7, r1
 800c2d6:	f100 3cff 	add.w	ip, r0, #4294967295
 800c2da:	d273      	bcs.n	800c3c4 <__udivmoddi4+0x2a4>
 800c2dc:	428b      	cmp	r3, r1
 800c2de:	d971      	bls.n	800c3c4 <__udivmoddi4+0x2a4>
 800c2e0:	3802      	subs	r0, #2
 800c2e2:	4439      	add	r1, r7
 800c2e4:	1acb      	subs	r3, r1, r3
 800c2e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800c2ea:	e778      	b.n	800c1de <__udivmoddi4+0xbe>
 800c2ec:	f1c6 0c20 	rsb	ip, r6, #32
 800c2f0:	fa03 f406 	lsl.w	r4, r3, r6
 800c2f4:	fa22 f30c 	lsr.w	r3, r2, ip
 800c2f8:	431c      	orrs	r4, r3
 800c2fa:	fa20 f70c 	lsr.w	r7, r0, ip
 800c2fe:	fa01 f306 	lsl.w	r3, r1, r6
 800c302:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800c306:	fa21 f10c 	lsr.w	r1, r1, ip
 800c30a:	431f      	orrs	r7, r3
 800c30c:	0c3b      	lsrs	r3, r7, #16
 800c30e:	fbb1 f9fe 	udiv	r9, r1, lr
 800c312:	fa1f f884 	uxth.w	r8, r4
 800c316:	fb0e 1119 	mls	r1, lr, r9, r1
 800c31a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800c31e:	fb09 fa08 	mul.w	sl, r9, r8
 800c322:	458a      	cmp	sl, r1
 800c324:	fa02 f206 	lsl.w	r2, r2, r6
 800c328:	fa00 f306 	lsl.w	r3, r0, r6
 800c32c:	d908      	bls.n	800c340 <__udivmoddi4+0x220>
 800c32e:	1861      	adds	r1, r4, r1
 800c330:	f109 30ff 	add.w	r0, r9, #4294967295
 800c334:	d248      	bcs.n	800c3c8 <__udivmoddi4+0x2a8>
 800c336:	458a      	cmp	sl, r1
 800c338:	d946      	bls.n	800c3c8 <__udivmoddi4+0x2a8>
 800c33a:	f1a9 0902 	sub.w	r9, r9, #2
 800c33e:	4421      	add	r1, r4
 800c340:	eba1 010a 	sub.w	r1, r1, sl
 800c344:	b2bf      	uxth	r7, r7
 800c346:	fbb1 f0fe 	udiv	r0, r1, lr
 800c34a:	fb0e 1110 	mls	r1, lr, r0, r1
 800c34e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800c352:	fb00 f808 	mul.w	r8, r0, r8
 800c356:	45b8      	cmp	r8, r7
 800c358:	d907      	bls.n	800c36a <__udivmoddi4+0x24a>
 800c35a:	19e7      	adds	r7, r4, r7
 800c35c:	f100 31ff 	add.w	r1, r0, #4294967295
 800c360:	d22e      	bcs.n	800c3c0 <__udivmoddi4+0x2a0>
 800c362:	45b8      	cmp	r8, r7
 800c364:	d92c      	bls.n	800c3c0 <__udivmoddi4+0x2a0>
 800c366:	3802      	subs	r0, #2
 800c368:	4427      	add	r7, r4
 800c36a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c36e:	eba7 0708 	sub.w	r7, r7, r8
 800c372:	fba0 8902 	umull	r8, r9, r0, r2
 800c376:	454f      	cmp	r7, r9
 800c378:	46c6      	mov	lr, r8
 800c37a:	4649      	mov	r1, r9
 800c37c:	d31a      	bcc.n	800c3b4 <__udivmoddi4+0x294>
 800c37e:	d017      	beq.n	800c3b0 <__udivmoddi4+0x290>
 800c380:	b15d      	cbz	r5, 800c39a <__udivmoddi4+0x27a>
 800c382:	ebb3 020e 	subs.w	r2, r3, lr
 800c386:	eb67 0701 	sbc.w	r7, r7, r1
 800c38a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800c38e:	40f2      	lsrs	r2, r6
 800c390:	ea4c 0202 	orr.w	r2, ip, r2
 800c394:	40f7      	lsrs	r7, r6
 800c396:	e9c5 2700 	strd	r2, r7, [r5]
 800c39a:	2600      	movs	r6, #0
 800c39c:	4631      	mov	r1, r6
 800c39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3a2:	462e      	mov	r6, r5
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	e70b      	b.n	800c1c0 <__udivmoddi4+0xa0>
 800c3a8:	4606      	mov	r6, r0
 800c3aa:	e6e9      	b.n	800c180 <__udivmoddi4+0x60>
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	e6fd      	b.n	800c1ac <__udivmoddi4+0x8c>
 800c3b0:	4543      	cmp	r3, r8
 800c3b2:	d2e5      	bcs.n	800c380 <__udivmoddi4+0x260>
 800c3b4:	ebb8 0e02 	subs.w	lr, r8, r2
 800c3b8:	eb69 0104 	sbc.w	r1, r9, r4
 800c3bc:	3801      	subs	r0, #1
 800c3be:	e7df      	b.n	800c380 <__udivmoddi4+0x260>
 800c3c0:	4608      	mov	r0, r1
 800c3c2:	e7d2      	b.n	800c36a <__udivmoddi4+0x24a>
 800c3c4:	4660      	mov	r0, ip
 800c3c6:	e78d      	b.n	800c2e4 <__udivmoddi4+0x1c4>
 800c3c8:	4681      	mov	r9, r0
 800c3ca:	e7b9      	b.n	800c340 <__udivmoddi4+0x220>
 800c3cc:	4666      	mov	r6, ip
 800c3ce:	e775      	b.n	800c2bc <__udivmoddi4+0x19c>
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	e74a      	b.n	800c26a <__udivmoddi4+0x14a>
 800c3d4:	f1ac 0c02 	sub.w	ip, ip, #2
 800c3d8:	4439      	add	r1, r7
 800c3da:	e713      	b.n	800c204 <__udivmoddi4+0xe4>
 800c3dc:	3802      	subs	r0, #2
 800c3de:	443c      	add	r4, r7
 800c3e0:	e724      	b.n	800c22c <__udivmoddi4+0x10c>
 800c3e2:	bf00      	nop

0800c3e4 <__aeabi_idiv0>:
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop

0800c3e8 <is_empty>:
static fifo_t *cli_out;

static void cli_print_error_va(const char *cmdName, const char *format, va_list va);
static void cli_print_error(const char *cmdName, const char *format, ...) __attribute__((format(printf, 2, 3)));

bool is_empty(const char *string) { return (string == NULL || *string == '\0') ? true : false; }
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d003      	beq.n	800c3fe <is_empty+0x16>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <is_empty+0x1a>
 800c3fe:	2301      	movs	r3, #1
 800c400:	e000      	b.n	800c404 <is_empty+0x1c>
 800c402:	2300      	movs	r3, #0
 800c404:	f003 0301 	and.w	r3, r3, #1
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	4618      	mov	r0, r3
 800c40c:	370c      	adds	r7, #12
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr

0800c416 <get_min_max>:

void get_min_max(const cli_value_t *var, int *min, int *max) {
 800c416:	b480      	push	{r7}
 800c418:	b085      	sub	sp, #20
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	60f8      	str	r0, [r7, #12]
 800c41e:	60b9      	str	r1, [r7, #8]
 800c420:	607a      	str	r2, [r7, #4]
  switch (var->type & VALUE_TYPE_MASK) {
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	791b      	ldrb	r3, [r3, #4]
 800c426:	f003 0307 	and.w	r3, r3, #7
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d001      	beq.n	800c432 <get_min_max+0x1c>
 800c42e:	2b02      	cmp	r3, #2
 800c430:	d10e      	bne.n	800c450 <get_min_max+0x3a>
    case VAR_UINT8:
    case VAR_UINT16:
      *min = var->config.minmax_unsigned.min;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c438:	b29b      	uxth	r3, r3
 800c43a:	461a      	mov	r2, r3
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	601a      	str	r2, [r3, #0]
      *max = var->config.minmax_unsigned.max;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c446:	b29b      	uxth	r3, r3
 800c448:	461a      	mov	r2, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	601a      	str	r2, [r3, #0]

      break;
 800c44e:	e00e      	b.n	800c46e <get_min_max+0x58>
    default:
      *min = var->config.minmax.min;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800c456:	b21b      	sxth	r3, r3
 800c458:	461a      	mov	r2, r3
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	601a      	str	r2, [r3, #0]
      *max = var->config.minmax.max;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
 800c464:	b21b      	sxth	r3, r3
 800c466:	461a      	mov	r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	601a      	str	r2, [r3, #0]

      break;
 800c46c:	bf00      	nop
  }
}
 800c46e:	bf00      	nop
 800c470:	3714      	adds	r7, #20
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr
	...

0800c47c <cli_print>:

void cli_print(const char *str) { fifo_write_str(cli_out, str); }
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	4b04      	ldr	r3, [pc, #16]	; (800c498 <cli_print+0x1c>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	6879      	ldr	r1, [r7, #4]
 800c48a:	4618      	mov	r0, r3
 800c48c:	f003 fb18 	bl	800fac0 <fifo_write_str>
 800c490:	bf00      	nop
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	2000033c 	.word	0x2000033c

0800c49c <cli_prompt>:

static void cli_prompt(void) { cli_printf("\r\n^._.^:>"); }
 800c49c:	b580      	push	{r7, lr}
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	4802      	ldr	r0, [pc, #8]	; (800c4ac <cli_prompt+0x10>)
 800c4a2:	f000 f851 	bl	800c548 <cli_printf>
 800c4a6:	bf00      	nop
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	0801c5d8 	.word	0x0801c5d8

0800c4b0 <cli_print_linefeed>:

void cli_print_linefeed(void) { cli_print("\r\n"); }
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	4802      	ldr	r0, [pc, #8]	; (800c4c0 <cli_print_linefeed+0x10>)
 800c4b6:	f7ff ffe1 	bl	800c47c <cli_print>
 800c4ba:	bf00      	nop
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	0801c5e4 	.word	0x0801c5e4

0800c4c4 <cli_print_line>:

void cli_print_line(const char *str) {
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  cli_print(str);
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f7ff ffd5 	bl	800c47c <cli_print>
  cli_print_linefeed();
 800c4d2:	f7ff ffed 	bl	800c4b0 <cli_print_linefeed>
}
 800c4d6:	bf00      	nop
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
	...

0800c4e0 <cli_printf_va>:

static void cli_printf_va(const char *format, va_list va) {
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  static char buffer[CLI_OUT_BUFFER_SIZE];
  vsnprintf(buffer, CLI_OUT_BUFFER_SIZE, format, va);
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c4f2:	4805      	ldr	r0, [pc, #20]	; (800c508 <cli_printf_va+0x28>)
 800c4f4:	f00f fc56 	bl	801bda4 <vsniprintf>
  cli_print(buffer);
 800c4f8:	4803      	ldr	r0, [pc, #12]	; (800c508 <cli_printf_va+0x28>)
 800c4fa:	f7ff ffbf 	bl	800c47c <cli_print>
}
 800c4fe:	bf00      	nop
 800c500:	3708      	adds	r7, #8
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	20000340 	.word	0x20000340

0800c50c <cli_write>:

static void cli_write(uint8_t ch) {
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	4603      	mov	r3, r0
 800c514:	71fb      	strb	r3, [r7, #7]
  while (fifo_write(cli_out, ch) == false) osDelay(3);
 800c516:	e002      	b.n	800c51e <cli_write+0x12>
 800c518:	2003      	movs	r0, #3
 800c51a:	f00b fb05 	bl	8017b28 <osDelay>
 800c51e:	4b09      	ldr	r3, [pc, #36]	; (800c544 <cli_write+0x38>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	79fa      	ldrb	r2, [r7, #7]
 800c524:	4611      	mov	r1, r2
 800c526:	4618      	mov	r0, r3
 800c528:	f003 f9af 	bl	800f88a <fifo_write>
 800c52c:	4603      	mov	r3, r0
 800c52e:	f083 0301 	eor.w	r3, r3, #1
 800c532:	b2db      	uxtb	r3, r3
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1ef      	bne.n	800c518 <cli_write+0xc>
}
 800c538:	bf00      	nop
 800c53a:	bf00      	nop
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	2000033c 	.word	0x2000033c

0800c548 <cli_printf>:

void cli_printf(const char *format, ...) {
 800c548:	b40f      	push	{r0, r1, r2, r3}
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b082      	sub	sp, #8
 800c54e:	af00      	add	r7, sp, #0
  va_list va;
  va_start(va, format);
 800c550:	f107 0314 	add.w	r3, r7, #20
 800c554:	607b      	str	r3, [r7, #4]
  cli_printf_va(format, va);
 800c556:	6879      	ldr	r1, [r7, #4]
 800c558:	6938      	ldr	r0, [r7, #16]
 800c55a:	f7ff ffc1 	bl	800c4e0 <cli_printf_va>
  va_end(va);
}
 800c55e:	bf00      	nop
 800c560:	3708      	adds	r7, #8
 800c562:	46bd      	mov	sp, r7
 800c564:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c568:	b004      	add	sp, #16
 800c56a:	4770      	bx	lr

0800c56c <cli_print_linef>:

void cli_print_linef(const char *format, ...) {
 800c56c:	b40f      	push	{r0, r1, r2, r3}
 800c56e:	b580      	push	{r7, lr}
 800c570:	b082      	sub	sp, #8
 800c572:	af00      	add	r7, sp, #0
  va_list va;
  va_start(va, format);
 800c574:	f107 0314 	add.w	r3, r7, #20
 800c578:	607b      	str	r3, [r7, #4]
  cli_printf_va(format, va);
 800c57a:	6879      	ldr	r1, [r7, #4]
 800c57c:	6938      	ldr	r0, [r7, #16]
 800c57e:	f7ff ffaf 	bl	800c4e0 <cli_printf_va>
  va_end(va);
  cli_print_linefeed();
 800c582:	f7ff ff95 	bl	800c4b0 <cli_print_linefeed>
}
 800c586:	bf00      	nop
 800c588:	3708      	adds	r7, #8
 800c58a:	46bd      	mov	sp, r7
 800c58c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c590:	b004      	add	sp, #16
 800c592:	4770      	bx	lr

0800c594 <cli_print_error_va>:

static void cli_print_error_va(const char *cmdName, const char *format, va_list va) {
 800c594:	b580      	push	{r7, lr}
 800c596:	b0c4      	sub	sp, #272	; 0x110
 800c598:	af00      	add	r7, sp, #0
 800c59a:	f107 030c 	add.w	r3, r7, #12
 800c59e:	6018      	str	r0, [r3, #0]
 800c5a0:	f107 0308 	add.w	r3, r7, #8
 800c5a4:	6019      	str	r1, [r3, #0]
 800c5a6:	1d3b      	adds	r3, r7, #4
 800c5a8:	601a      	str	r2, [r3, #0]
  cli_print("ERROR IN ");
 800c5aa:	4811      	ldr	r0, [pc, #68]	; (800c5f0 <cli_print_error_va+0x5c>)
 800c5ac:	f7ff ff66 	bl	800c47c <cli_print>
  cli_print(cmdName);
 800c5b0:	f107 030c 	add.w	r3, r7, #12
 800c5b4:	6818      	ldr	r0, [r3, #0]
 800c5b6:	f7ff ff61 	bl	800c47c <cli_print>
  cli_print(": ");
 800c5ba:	480e      	ldr	r0, [pc, #56]	; (800c5f4 <cli_print_error_va+0x60>)
 800c5bc:	f7ff ff5e 	bl	800c47c <cli_print>
  char buffer[CLI_OUT_BUFFER_SIZE];
  vsnprintf(buffer, CLI_OUT_BUFFER_SIZE, format, va);
 800c5c0:	1d3b      	adds	r3, r7, #4
 800c5c2:	f107 0208 	add.w	r2, r7, #8
 800c5c6:	f107 0010 	add.w	r0, r7, #16
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	6812      	ldr	r2, [r2, #0]
 800c5ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c5d2:	f00f fbe7 	bl	801bda4 <vsniprintf>
  cli_print(buffer);
 800c5d6:	f107 0310 	add.w	r3, r7, #16
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7ff ff4e 	bl	800c47c <cli_print>
  cli_print(": ");
 800c5e0:	4804      	ldr	r0, [pc, #16]	; (800c5f4 <cli_print_error_va+0x60>)
 800c5e2:	f7ff ff4b 	bl	800c47c <cli_print>
  va_end(va);
}
 800c5e6:	bf00      	nop
 800c5e8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	0801c5e8 	.word	0x0801c5e8
 800c5f4:	0801c5f4 	.word	0x0801c5f4

0800c5f8 <cli_print_error>:

static void cli_print_error(const char *cmdName, const char *format, ...) {
 800c5f8:	b40e      	push	{r1, r2, r3}
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b085      	sub	sp, #20
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800c602:	f107 0320 	add.w	r3, r7, #32
 800c606:	60fb      	str	r3, [r7, #12]
  cli_print_error_va(cmdName, format, va);
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	69f9      	ldr	r1, [r7, #28]
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f7ff ffc1 	bl	800c594 <cli_print_error_va>
}
 800c612:	bf00      	nop
 800c614:	3714      	adds	r7, #20
 800c616:	46bd      	mov	sp, r7
 800c618:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c61c:	b003      	add	sp, #12
 800c61e:	4770      	bx	lr

0800c620 <cli_print_error_linef>:

void cli_print_error_linef(const char *cmdName, const char *format, ...) {
 800c620:	b40e      	push	{r1, r2, r3}
 800c622:	b580      	push	{r7, lr}
 800c624:	b085      	sub	sp, #20
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800c62a:	f107 0320 	add.w	r3, r7, #32
 800c62e:	60fb      	str	r3, [r7, #12]
  cli_print_error_va(cmdName, format, va);
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	69f9      	ldr	r1, [r7, #28]
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7ff ffad 	bl	800c594 <cli_print_error_va>
  cli_print("\r\n");
 800c63a:	4805      	ldr	r0, [pc, #20]	; (800c650 <cli_print_error_linef+0x30>)
 800c63c:	f7ff ff1e 	bl	800c47c <cli_print>
}
 800c640:	bf00      	nop
 800c642:	3714      	adds	r7, #20
 800c644:	46bd      	mov	sp, r7
 800c646:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c64a:	b003      	add	sp, #12
 800c64c:	4770      	bx	lr
 800c64e:	bf00      	nop
 800c650:	0801c5e4 	.word	0x0801c5e4

0800c654 <skip_space>:

char *skip_space(char *buffer) {
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  while (*(buffer) == ' ') {
 800c65c:	e002      	b.n	800c664 <skip_space+0x10>
    buffer++;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	3301      	adds	r3, #1
 800c662:	607b      	str	r3, [r7, #4]
  while (*(buffer) == ' ') {
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	2b20      	cmp	r3, #32
 800c66a:	d0f8      	beq.n	800c65e <skip_space+0xa>
  }
  return buffer;
 800c66c:	687b      	ldr	r3, [r7, #4]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	370c      	adds	r7, #12
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr
	...

0800c67c <check_command>:

static char *check_command(char *cmdline, const char *command) {
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
  if (!strncasecmp(cmdline, command, strlen(command))  // command names match
 800c686:	6838      	ldr	r0, [r7, #0]
 800c688:	f7ff fcda 	bl	800c040 <strlen>
 800c68c:	4603      	mov	r3, r0
 800c68e:	461a      	mov	r2, r3
 800c690:	6839      	ldr	r1, [r7, #0]
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f00f f9fa 	bl	801ba8c <strncasecmp>
 800c698:	4603      	mov	r3, r0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d123      	bne.n	800c6e6 <check_command+0x6a>
      && (isspace((unsigned)cmdline[strlen(command)]) || cmdline[strlen(command)] == 0)) {
 800c69e:	6838      	ldr	r0, [r7, #0]
 800c6a0:	f7ff fcce 	bl	800c040 <strlen>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	4a10      	ldr	r2, [pc, #64]	; (800c6f0 <check_command+0x74>)
 800c6b0:	4413      	add	r3, r2
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	f003 0308 	and.w	r3, r3, #8
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d108      	bne.n	800c6ce <check_command+0x52>
 800c6bc:	6838      	ldr	r0, [r7, #0]
 800c6be:	f7ff fcbf 	bl	800c040 <strlen>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d10b      	bne.n	800c6e6 <check_command+0x6a>
    return skip_space(cmdline + strlen(command) + 1);
 800c6ce:	6838      	ldr	r0, [r7, #0]
 800c6d0:	f7ff fcb6 	bl	800c040 <strlen>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	4413      	add	r3, r2
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7ff ffb9 	bl	800c654 <skip_space>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	e000      	b.n	800c6e8 <check_command+0x6c>
  } else {
    return NULL;
 800c6e6:	2300      	movs	r3, #0
  }
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3708      	adds	r7, #8
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	0801cfac 	.word	0x0801cfac

0800c6f4 <process_character>:

static void process_character(const char c) {
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b086      	sub	sp, #24
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	71fb      	strb	r3, [r7, #7]
  if (buffer_index && (c == '\n' || c == '\r')) {
 800c6fe:	4b4b      	ldr	r3, [pc, #300]	; (800c82c <process_character+0x138>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d070      	beq.n	800c7e8 <process_character+0xf4>
 800c706:	79fb      	ldrb	r3, [r7, #7]
 800c708:	2b0a      	cmp	r3, #10
 800c70a:	d002      	beq.n	800c712 <process_character+0x1e>
 800c70c:	79fb      	ldrb	r3, [r7, #7]
 800c70e:	2b0d      	cmp	r3, #13
 800c710:	d16a      	bne.n	800c7e8 <process_character+0xf4>
    // enter pressed
    cli_print_linefeed();
 800c712:	f7ff fecd 	bl	800c4b0 <cli_print_linefeed>

    // Strip comment starting with # from line
    char *p = cli_buffer;
 800c716:	4b46      	ldr	r3, [pc, #280]	; (800c830 <process_character+0x13c>)
 800c718:	60fb      	str	r3, [r7, #12]
    p = strchr(p, '#');
 800c71a:	2123      	movs	r1, #35	; 0x23
 800c71c:	68f8      	ldr	r0, [r7, #12]
 800c71e:	f00f f9a7 	bl	801ba70 <strchr>
 800c722:	60f8      	str	r0, [r7, #12]
    if (NULL != p) {
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00b      	beq.n	800c742 <process_character+0x4e>
      buffer_index = (uint32_t)(p - cli_buffer);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	4a40      	ldr	r2, [pc, #256]	; (800c830 <process_character+0x13c>)
 800c72e:	1a9b      	subs	r3, r3, r2
 800c730:	461a      	mov	r2, r3
 800c732:	4b3e      	ldr	r3, [pc, #248]	; (800c82c <process_character+0x138>)
 800c734:	601a      	str	r2, [r3, #0]
    }
    // Strip trailing whitespace
    while (buffer_index > 0 && cli_buffer[buffer_index - 1] == ' ') {
 800c736:	e004      	b.n	800c742 <process_character+0x4e>
      buffer_index--;
 800c738:	4b3c      	ldr	r3, [pc, #240]	; (800c82c <process_character+0x138>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	3b01      	subs	r3, #1
 800c73e:	4a3b      	ldr	r2, [pc, #236]	; (800c82c <process_character+0x138>)
 800c740:	6013      	str	r3, [r2, #0]
    while (buffer_index > 0 && cli_buffer[buffer_index - 1] == ' ') {
 800c742:	4b3a      	ldr	r3, [pc, #232]	; (800c82c <process_character+0x138>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d006      	beq.n	800c758 <process_character+0x64>
 800c74a:	4b38      	ldr	r3, [pc, #224]	; (800c82c <process_character+0x138>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	3b01      	subs	r3, #1
 800c750:	4a37      	ldr	r2, [pc, #220]	; (800c830 <process_character+0x13c>)
 800c752:	5cd3      	ldrb	r3, [r2, r3]
 800c754:	2b20      	cmp	r3, #32
 800c756:	d0ef      	beq.n	800c738 <process_character+0x44>
    }

    // Process non-empty lines
    if (buffer_index > 0) {
 800c758:	4b34      	ldr	r3, [pc, #208]	; (800c82c <process_character+0x138>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d036      	beq.n	800c7ce <process_character+0xda>
      cli_buffer[buffer_index] = 0;  // null terminate
 800c760:	4b32      	ldr	r3, [pc, #200]	; (800c82c <process_character+0x138>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a32      	ldr	r2, [pc, #200]	; (800c830 <process_character+0x13c>)
 800c766:	2100      	movs	r1, #0
 800c768:	54d1      	strb	r1, [r2, r3]

      const clicmd_t *cmd;
      char *options = NULL;
 800c76a:	2300      	movs	r3, #0
 800c76c:	613b      	str	r3, [r7, #16]
      for (cmd = cmd_table; cmd < cmd_table + NUM_CLI_COMMANDS; cmd++) {
 800c76e:	4b31      	ldr	r3, [pc, #196]	; (800c834 <process_character+0x140>)
 800c770:	617b      	str	r3, [r7, #20]
 800c772:	e00c      	b.n	800c78e <process_character+0x9a>
        options = check_command(cli_buffer, cmd->name);
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4619      	mov	r1, r3
 800c77a:	482d      	ldr	r0, [pc, #180]	; (800c830 <process_character+0x13c>)
 800c77c:	f7ff ff7e 	bl	800c67c <check_command>
 800c780:	6138      	str	r0, [r7, #16]
        if (options) break;
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d10b      	bne.n	800c7a0 <process_character+0xac>
      for (cmd = cmd_table; cmd < cmd_table + NUM_CLI_COMMANDS; cmd++) {
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	3310      	adds	r3, #16
 800c78c:	617b      	str	r3, [r7, #20]
 800c78e:	4b2a      	ldr	r3, [pc, #168]	; (800c838 <process_character+0x144>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	011b      	lsls	r3, r3, #4
 800c794:	4a27      	ldr	r2, [pc, #156]	; (800c834 <process_character+0x140>)
 800c796:	4413      	add	r3, r2
 800c798:	697a      	ldr	r2, [r7, #20]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d3ea      	bcc.n	800c774 <process_character+0x80>
 800c79e:	e000      	b.n	800c7a2 <process_character+0xae>
        if (options) break;
 800c7a0:	bf00      	nop
      }
      if (cmd < cmd_table + NUM_CLI_COMMANDS) {
 800c7a2:	4b25      	ldr	r3, [pc, #148]	; (800c838 <process_character+0x144>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	011b      	lsls	r3, r3, #4
 800c7a8:	4a22      	ldr	r2, [pc, #136]	; (800c834 <process_character+0x140>)
 800c7aa:	4413      	add	r3, r2
 800c7ac:	697a      	ldr	r2, [r7, #20]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d207      	bcs.n	800c7c2 <process_character+0xce>
        cmd->cli_command(cmd->name, options);
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	697a      	ldr	r2, [r7, #20]
 800c7b8:	6812      	ldr	r2, [r2, #0]
 800c7ba:	6939      	ldr	r1, [r7, #16]
 800c7bc:	4610      	mov	r0, r2
 800c7be:	4798      	blx	r3
 800c7c0:	e002      	b.n	800c7c8 <process_character+0xd4>
      } else {
        cli_print_line("UNKNOWN COMMAND, TRY 'HELP'");
 800c7c2:	481e      	ldr	r0, [pc, #120]	; (800c83c <process_character+0x148>)
 800c7c4:	f7ff fe7e 	bl	800c4c4 <cli_print_line>
      }
      buffer_index = 0;
 800c7c8:	4b18      	ldr	r3, [pc, #96]	; (800c82c <process_character+0x138>)
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	601a      	str	r2, [r3, #0]
    }
    strncpy(old_cli_buffer, cli_buffer, sizeof(cli_buffer));
 800c7ce:	2280      	movs	r2, #128	; 0x80
 800c7d0:	4917      	ldr	r1, [pc, #92]	; (800c830 <process_character+0x13c>)
 800c7d2:	481b      	ldr	r0, [pc, #108]	; (800c840 <process_character+0x14c>)
 800c7d4:	f00f f97c 	bl	801bad0 <strncpy>
    memset(cli_buffer, 0, sizeof(cli_buffer));
 800c7d8:	2280      	movs	r2, #128	; 0x80
 800c7da:	2100      	movs	r1, #0
 800c7dc:	4814      	ldr	r0, [pc, #80]	; (800c830 <process_character+0x13c>)
 800c7de:	f00f f8ef 	bl	801b9c0 <memset>
    cli_prompt();
 800c7e2:	f7ff fe5b 	bl	800c49c <cli_prompt>
  if (buffer_index && (c == '\n' || c == '\r')) {
 800c7e6:	e01e      	b.n	800c826 <process_character+0x132>

    // 'exit' will reset this flag, so we don't need to print prompt again

  } else if (buffer_index < sizeof(cli_buffer) && c >= 32 && c <= 126) {
 800c7e8:	4b10      	ldr	r3, [pc, #64]	; (800c82c <process_character+0x138>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b7f      	cmp	r3, #127	; 0x7f
 800c7ee:	d81a      	bhi.n	800c826 <process_character+0x132>
 800c7f0:	79fb      	ldrb	r3, [r7, #7]
 800c7f2:	2b1f      	cmp	r3, #31
 800c7f4:	d917      	bls.n	800c826 <process_character+0x132>
 800c7f6:	79fb      	ldrb	r3, [r7, #7]
 800c7f8:	2b7e      	cmp	r3, #126	; 0x7e
 800c7fa:	d814      	bhi.n	800c826 <process_character+0x132>
    if (!buffer_index && c == ' ') return;  // Ignore leading spaces
 800c7fc:	4b0b      	ldr	r3, [pc, #44]	; (800c82c <process_character+0x138>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d102      	bne.n	800c80a <process_character+0x116>
 800c804:	79fb      	ldrb	r3, [r7, #7]
 800c806:	2b20      	cmp	r3, #32
 800c808:	d00c      	beq.n	800c824 <process_character+0x130>
    cli_buffer[buffer_index++] = c;
 800c80a:	4b08      	ldr	r3, [pc, #32]	; (800c82c <process_character+0x138>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	1c5a      	adds	r2, r3, #1
 800c810:	4906      	ldr	r1, [pc, #24]	; (800c82c <process_character+0x138>)
 800c812:	600a      	str	r2, [r1, #0]
 800c814:	4906      	ldr	r1, [pc, #24]	; (800c830 <process_character+0x13c>)
 800c816:	79fa      	ldrb	r2, [r7, #7]
 800c818:	54ca      	strb	r2, [r1, r3]
    cli_write(c);
 800c81a:	79fb      	ldrb	r3, [r7, #7]
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7ff fe75 	bl	800c50c <cli_write>
 800c822:	e000      	b.n	800c826 <process_character+0x132>
    if (!buffer_index && c == ' ') return;  // Ignore leading spaces
 800c824:	bf00      	nop
  }
}
 800c826:	3718      	adds	r7, #24
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	20000234 	.word	0x20000234
 800c830:	20000238 	.word	0x20000238
 800c834:	0801cd70 	.word	0x0801cd70
 800c838:	0801ce10 	.word	0x0801ce10
 800c83c:	0801c5f8 	.word	0x0801c5f8
 800c840:	200002b8 	.word	0x200002b8

0800c844 <process_character_interactive>:

static void process_character_interactive(const char c) {
 800c844:	b580      	push	{r7, lr}
 800c846:	b088      	sub	sp, #32
 800c848:	af00      	add	r7, sp, #0
 800c84a:	4603      	mov	r3, r0
 800c84c:	71fb      	strb	r3, [r7, #7]
  // We ignore a few characters, this is only used for the up arrow
  static uint16_t ignore = 0;
  if (ignore) {
 800c84e:	4b89      	ldr	r3, [pc, #548]	; (800ca74 <process_character_interactive+0x230>)
 800c850:	881b      	ldrh	r3, [r3, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d006      	beq.n	800c864 <process_character_interactive+0x20>
    ignore--;
 800c856:	4b87      	ldr	r3, [pc, #540]	; (800ca74 <process_character_interactive+0x230>)
 800c858:	881b      	ldrh	r3, [r3, #0]
 800c85a:	3b01      	subs	r3, #1
 800c85c:	b29a      	uxth	r2, r3
 800c85e:	4b85      	ldr	r3, [pc, #532]	; (800ca74 <process_character_interactive+0x230>)
 800c860:	801a      	strh	r2, [r3, #0]
    return;
 800c862:	e104      	b.n	800ca6e <process_character_interactive+0x22a>
  }
  if (c == '\t' || c == '?') {
 800c864:	79fb      	ldrb	r3, [r7, #7]
 800c866:	2b09      	cmp	r3, #9
 800c868:	d003      	beq.n	800c872 <process_character_interactive+0x2e>
 800c86a:	79fb      	ldrb	r3, [r7, #7]
 800c86c:	2b3f      	cmp	r3, #63	; 0x3f
 800c86e:	f040 809b 	bne.w	800c9a8 <process_character_interactive+0x164>
    // do tab completion
    const clicmd_t *cmd, *pstart = NULL, *pend = NULL;
 800c872:	2300      	movs	r3, #0
 800c874:	61bb      	str	r3, [r7, #24]
 800c876:	2300      	movs	r3, #0
 800c878:	617b      	str	r3, [r7, #20]
    uint32_t i = buffer_index;
 800c87a:	4b7f      	ldr	r3, [pc, #508]	; (800ca78 <process_character_interactive+0x234>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	613b      	str	r3, [r7, #16]
    for (cmd = cmd_table; cmd < cmd_table + NUM_CLI_COMMANDS; cmd++) {
 800c880:	4b7e      	ldr	r3, [pc, #504]	; (800ca7c <process_character_interactive+0x238>)
 800c882:	61fb      	str	r3, [r7, #28]
 800c884:	e01a      	b.n	800c8bc <process_character_interactive+0x78>
      if (buffer_index && (strncasecmp(cli_buffer, cmd->name, buffer_index) != 0)) {
 800c886:	4b7c      	ldr	r3, [pc, #496]	; (800ca78 <process_character_interactive+0x234>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00a      	beq.n	800c8a4 <process_character_interactive+0x60>
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4a79      	ldr	r2, [pc, #484]	; (800ca78 <process_character_interactive+0x234>)
 800c894:	6812      	ldr	r2, [r2, #0]
 800c896:	4619      	mov	r1, r3
 800c898:	4879      	ldr	r0, [pc, #484]	; (800ca80 <process_character_interactive+0x23c>)
 800c89a:	f00f f8f7 	bl	801ba8c <strncasecmp>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d107      	bne.n	800c8b4 <process_character_interactive+0x70>
        continue;
      }
      if (!pstart) {
 800c8a4:	69bb      	ldr	r3, [r7, #24]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d101      	bne.n	800c8ae <process_character_interactive+0x6a>
        pstart = cmd;
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	61bb      	str	r3, [r7, #24]
      }
      pend = cmd;
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	617b      	str	r3, [r7, #20]
 800c8b2:	e000      	b.n	800c8b6 <process_character_interactive+0x72>
        continue;
 800c8b4:	bf00      	nop
    for (cmd = cmd_table; cmd < cmd_table + NUM_CLI_COMMANDS; cmd++) {
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	3310      	adds	r3, #16
 800c8ba:	61fb      	str	r3, [r7, #28]
 800c8bc:	4b71      	ldr	r3, [pc, #452]	; (800ca84 <process_character_interactive+0x240>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	011b      	lsls	r3, r3, #4
 800c8c2:	4a6e      	ldr	r2, [pc, #440]	; (800ca7c <process_character_interactive+0x238>)
 800c8c4:	4413      	add	r3, r2
 800c8c6:	69fa      	ldr	r2, [r7, #28]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d3dc      	bcc.n	800c886 <process_character_interactive+0x42>
    }
    if (pstart) { /* Buffer matches one or more commands */
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d038      	beq.n	800c944 <process_character_interactive+0x100>
      for (;; buffer_index++) {
        if (pstart->name[buffer_index] != pend->name[buffer_index]) break;
 800c8d2:	69bb      	ldr	r3, [r7, #24]
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	4b68      	ldr	r3, [pc, #416]	; (800ca78 <process_character_interactive+0x234>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4413      	add	r3, r2
 800c8dc:	781a      	ldrb	r2, [r3, #0]
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	6819      	ldr	r1, [r3, #0]
 800c8e2:	4b65      	ldr	r3, [pc, #404]	; (800ca78 <process_character_interactive+0x234>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	440b      	add	r3, r1
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d129      	bne.n	800c942 <process_character_interactive+0xfe>
        if (!pstart->name[buffer_index] && buffer_index < sizeof(cli_buffer) - 2) {
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	4b61      	ldr	r3, [pc, #388]	; (800ca78 <process_character_interactive+0x234>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4413      	add	r3, r2
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d111      	bne.n	800c922 <process_character_interactive+0xde>
 800c8fe:	4b5e      	ldr	r3, [pc, #376]	; (800ca78 <process_character_interactive+0x234>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	2b7d      	cmp	r3, #125	; 0x7d
 800c904:	d80d      	bhi.n	800c922 <process_character_interactive+0xde>
          /* Unambiguous -- append a space */
          cli_buffer[buffer_index++] = ' ';
 800c906:	4b5c      	ldr	r3, [pc, #368]	; (800ca78 <process_character_interactive+0x234>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	1c5a      	adds	r2, r3, #1
 800c90c:	495a      	ldr	r1, [pc, #360]	; (800ca78 <process_character_interactive+0x234>)
 800c90e:	600a      	str	r2, [r1, #0]
 800c910:	4a5b      	ldr	r2, [pc, #364]	; (800ca80 <process_character_interactive+0x23c>)
 800c912:	2120      	movs	r1, #32
 800c914:	54d1      	strb	r1, [r2, r3]
          cli_buffer[buffer_index] = '\0';
 800c916:	4b58      	ldr	r3, [pc, #352]	; (800ca78 <process_character_interactive+0x234>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4a59      	ldr	r2, [pc, #356]	; (800ca80 <process_character_interactive+0x23c>)
 800c91c:	2100      	movs	r1, #0
 800c91e:	54d1      	strb	r1, [r2, r3]
          break;
 800c920:	e010      	b.n	800c944 <process_character_interactive+0x100>
        }
        cli_buffer[buffer_index] = pstart->name[buffer_index];
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	4b54      	ldr	r3, [pc, #336]	; (800ca78 <process_character_interactive+0x234>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	441a      	add	r2, r3
 800c92c:	4b52      	ldr	r3, [pc, #328]	; (800ca78 <process_character_interactive+0x234>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	7811      	ldrb	r1, [r2, #0]
 800c932:	4a53      	ldr	r2, [pc, #332]	; (800ca80 <process_character_interactive+0x23c>)
 800c934:	54d1      	strb	r1, [r2, r3]
      for (;; buffer_index++) {
 800c936:	4b50      	ldr	r3, [pc, #320]	; (800ca78 <process_character_interactive+0x234>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	3301      	adds	r3, #1
 800c93c:	4a4e      	ldr	r2, [pc, #312]	; (800ca78 <process_character_interactive+0x234>)
 800c93e:	6013      	str	r3, [r2, #0]
        if (pstart->name[buffer_index] != pend->name[buffer_index]) break;
 800c940:	e7c7      	b.n	800c8d2 <process_character_interactive+0x8e>
 800c942:	bf00      	nop
      }
    }
    if (!buffer_index || pstart != pend) {
 800c944:	4b4c      	ldr	r3, [pc, #304]	; (800ca78 <process_character_interactive+0x234>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d003      	beq.n	800c954 <process_character_interactive+0x110>
 800c94c:	69ba      	ldr	r2, [r7, #24]
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	429a      	cmp	r2, r3
 800c952:	d023      	beq.n	800c99c <process_character_interactive+0x158>
      /* Print list of ambiguous matches */
      cli_print("\r\n\033[K");
 800c954:	484c      	ldr	r0, [pc, #304]	; (800ca88 <process_character_interactive+0x244>)
 800c956:	f7ff fd91 	bl	800c47c <cli_print>
      for (cmd = pstart; cmd <= pend; cmd++) {
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	61fb      	str	r3, [r7, #28]
 800c95e:	e00a      	b.n	800c976 <process_character_interactive+0x132>
        cli_print(cmd->name);
 800c960:	69fb      	ldr	r3, [r7, #28]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4618      	mov	r0, r3
 800c966:	f7ff fd89 	bl	800c47c <cli_print>
        cli_write('\t');
 800c96a:	2009      	movs	r0, #9
 800c96c:	f7ff fdce 	bl	800c50c <cli_write>
      for (cmd = pstart; cmd <= pend; cmd++) {
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	3310      	adds	r3, #16
 800c974:	61fb      	str	r3, [r7, #28]
 800c976:	69fa      	ldr	r2, [r7, #28]
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d9f0      	bls.n	800c960 <process_character_interactive+0x11c>
      }
      cli_prompt();
 800c97e:	f7ff fd8d 	bl	800c49c <cli_prompt>
      i = 0; /* Redraw prompt */
 800c982:	2300      	movs	r3, #0
 800c984:	613b      	str	r3, [r7, #16]
    }
    for (; i < buffer_index; i++) cli_write(cli_buffer[i]);
 800c986:	e009      	b.n	800c99c <process_character_interactive+0x158>
 800c988:	4a3d      	ldr	r2, [pc, #244]	; (800ca80 <process_character_interactive+0x23c>)
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	4413      	add	r3, r2
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	4618      	mov	r0, r3
 800c992:	f7ff fdbb 	bl	800c50c <cli_write>
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	3301      	adds	r3, #1
 800c99a:	613b      	str	r3, [r7, #16]
 800c99c:	4b36      	ldr	r3, [pc, #216]	; (800ca78 <process_character_interactive+0x234>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	693a      	ldr	r2, [r7, #16]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d3f0      	bcc.n	800c988 <process_character_interactive+0x144>
  if (c == '\t' || c == '?') {
 800c9a6:	e062      	b.n	800ca6e <process_character_interactive+0x22a>
  } else if (c == 4) {
 800c9a8:	79fb      	ldrb	r3, [r7, #7]
 800c9aa:	2b04      	cmp	r3, #4
 800c9ac:	d105      	bne.n	800c9ba <process_character_interactive+0x176>
    // CTRL-D - clear screen
    cli_print("\033[2J\033[1;1H");
 800c9ae:	4837      	ldr	r0, [pc, #220]	; (800ca8c <process_character_interactive+0x248>)
 800c9b0:	f7ff fd64 	bl	800c47c <cli_print>
    cli_prompt();
 800c9b4:	f7ff fd72 	bl	800c49c <cli_prompt>
 800c9b8:	e059      	b.n	800ca6e <process_character_interactive+0x22a>
  } else if (c == 12) {  // CTRL-L - toggle logging
 800c9ba:	79fb      	ldrb	r3, [r7, #7]
 800c9bc:	2b0c      	cmp	r3, #12
 800c9be:	d10c      	bne.n	800c9da <process_character_interactive+0x196>
    if (log_is_enabled()) {
 800c9c0:	f003 f8ce 	bl	800fb60 <log_is_enabled>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d004      	beq.n	800c9d4 <process_character_interactive+0x190>
      log_disable();
 800c9ca:	f003 f8bd 	bl	800fb48 <log_disable>
      cli_prompt();
 800c9ce:	f7ff fd65 	bl	800c49c <cli_prompt>
 800c9d2:	e04c      	b.n	800ca6e <process_character_interactive+0x22a>
    } else {
      log_enable();
 800c9d4:	f003 f8ac 	bl	800fb30 <log_enable>
 800c9d8:	e049      	b.n	800ca6e <process_character_interactive+0x22a>
    }
  } else if (c == '\b') {
 800c9da:	79fb      	ldrb	r3, [r7, #7]
 800c9dc:	2b08      	cmp	r3, #8
 800c9de:	d111      	bne.n	800ca04 <process_character_interactive+0x1c0>
    // backspace
    if (buffer_index) {
 800c9e0:	4b25      	ldr	r3, [pc, #148]	; (800ca78 <process_character_interactive+0x234>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d042      	beq.n	800ca6e <process_character_interactive+0x22a>
      cli_buffer[--buffer_index] = 0;
 800c9e8:	4b23      	ldr	r3, [pc, #140]	; (800ca78 <process_character_interactive+0x234>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	3b01      	subs	r3, #1
 800c9ee:	4a22      	ldr	r2, [pc, #136]	; (800ca78 <process_character_interactive+0x234>)
 800c9f0:	6013      	str	r3, [r2, #0]
 800c9f2:	4b21      	ldr	r3, [pc, #132]	; (800ca78 <process_character_interactive+0x234>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a22      	ldr	r2, [pc, #136]	; (800ca80 <process_character_interactive+0x23c>)
 800c9f8:	2100      	movs	r1, #0
 800c9fa:	54d1      	strb	r1, [r2, r3]
      cli_print("\010 \010");
 800c9fc:	4824      	ldr	r0, [pc, #144]	; (800ca90 <process_character_interactive+0x24c>)
 800c9fe:	f7ff fd3d 	bl	800c47c <cli_print>
 800ca02:	e034      	b.n	800ca6e <process_character_interactive+0x22a>
    }
  } else if (c == 27) {  // ESC character is called from the up arrow, we only look at the first of 3 characters
 800ca04:	79fb      	ldrb	r3, [r7, #7]
 800ca06:	2b1b      	cmp	r3, #27
 800ca08:	d12d      	bne.n	800ca66 <process_character_interactive+0x222>
    // up arrow
    while (buffer_index) {
 800ca0a:	e00c      	b.n	800ca26 <process_character_interactive+0x1e2>
      cli_buffer[--buffer_index] = 0;
 800ca0c:	4b1a      	ldr	r3, [pc, #104]	; (800ca78 <process_character_interactive+0x234>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	3b01      	subs	r3, #1
 800ca12:	4a19      	ldr	r2, [pc, #100]	; (800ca78 <process_character_interactive+0x234>)
 800ca14:	6013      	str	r3, [r2, #0]
 800ca16:	4b18      	ldr	r3, [pc, #96]	; (800ca78 <process_character_interactive+0x234>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a19      	ldr	r2, [pc, #100]	; (800ca80 <process_character_interactive+0x23c>)
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	54d1      	strb	r1, [r2, r3]
      cli_print("\010 \010");
 800ca20:	481b      	ldr	r0, [pc, #108]	; (800ca90 <process_character_interactive+0x24c>)
 800ca22:	f7ff fd2b 	bl	800c47c <cli_print>
    while (buffer_index) {
 800ca26:	4b14      	ldr	r3, [pc, #80]	; (800ca78 <process_character_interactive+0x234>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d1ee      	bne.n	800ca0c <process_character_interactive+0x1c8>
    }
    for (int i = 0; i < sizeof(old_cli_buffer); i++) {
 800ca2e:	2300      	movs	r3, #0
 800ca30:	60fb      	str	r3, [r7, #12]
 800ca32:	e00f      	b.n	800ca54 <process_character_interactive+0x210>
      if (old_cli_buffer[i] == 0) break;
 800ca34:	4a17      	ldr	r2, [pc, #92]	; (800ca94 <process_character_interactive+0x250>)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	4413      	add	r3, r2
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00d      	beq.n	800ca5c <process_character_interactive+0x218>
      process_character(old_cli_buffer[i]);
 800ca40:	4a14      	ldr	r2, [pc, #80]	; (800ca94 <process_character_interactive+0x250>)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	4413      	add	r3, r2
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7ff fe53 	bl	800c6f4 <process_character>
    for (int i = 0; i < sizeof(old_cli_buffer); i++) {
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	3301      	adds	r3, #1
 800ca52:	60fb      	str	r3, [r7, #12]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2b7f      	cmp	r3, #127	; 0x7f
 800ca58:	d9ec      	bls.n	800ca34 <process_character_interactive+0x1f0>
 800ca5a:	e000      	b.n	800ca5e <process_character_interactive+0x21a>
      if (old_cli_buffer[i] == 0) break;
 800ca5c:	bf00      	nop
    }
    // Ignore the following characters
    ignore = 2;
 800ca5e:	4b05      	ldr	r3, [pc, #20]	; (800ca74 <process_character_interactive+0x230>)
 800ca60:	2202      	movs	r2, #2
 800ca62:	801a      	strh	r2, [r3, #0]
 800ca64:	e003      	b.n	800ca6e <process_character_interactive+0x22a>
  } else {
    process_character(c);
 800ca66:	79fb      	ldrb	r3, [r7, #7]
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7ff fe43 	bl	800c6f4 <process_character>
  }
}
 800ca6e:	3720      	adds	r7, #32
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	20000440 	.word	0x20000440
 800ca78:	20000234 	.word	0x20000234
 800ca7c:	0801cd70 	.word	0x0801cd70
 800ca80:	20000238 	.word	0x20000238
 800ca84:	0801ce10 	.word	0x0801ce10
 800ca88:	0801c614 	.word	0x0801c614
 800ca8c:	0801c61c 	.word	0x0801c61c
 800ca90:	0801c628 	.word	0x0801c628
 800ca94:	200002b8 	.word	0x200002b8

0800ca98 <cli_process>:

void cli_process(void) {
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	af00      	add	r7, sp, #0
  while (fifo_get_length(cli_in) > 0) {
 800ca9c:	e008      	b.n	800cab0 <cli_process+0x18>
    process_character_interactive(fifo_read(cli_in));
 800ca9e:	4b0a      	ldr	r3, [pc, #40]	; (800cac8 <cli_process+0x30>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4618      	mov	r0, r3
 800caa4:	f002 feb5 	bl	800f812 <fifo_read>
 800caa8:	4603      	mov	r3, r0
 800caaa:	4618      	mov	r0, r3
 800caac:	f7ff feca 	bl	800c844 <process_character_interactive>
  while (fifo_get_length(cli_in) > 0) {
 800cab0:	4b05      	ldr	r3, [pc, #20]	; (800cac8 <cli_process+0x30>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4618      	mov	r0, r3
 800cab6:	f002 fea0 	bl	800f7fa <fifo_get_length>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d1ee      	bne.n	800ca9e <cli_process+0x6>
  }
}
 800cac0:	bf00      	nop
 800cac2:	bf00      	nop
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	20000338 	.word	0x20000338

0800cacc <cli_enter>:

void cli_enter(fifo_t *in, fifo_t *out) {
 800cacc:	b580      	push	{r7, lr}
 800cace:	b082      	sub	sp, #8
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  cli_in = in;
 800cad6:	4a06      	ldr	r2, [pc, #24]	; (800caf0 <cli_enter+0x24>)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6013      	str	r3, [r2, #0]
  cli_out = out;
 800cadc:	4a05      	ldr	r2, [pc, #20]	; (800caf4 <cli_enter+0x28>)
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	6013      	str	r3, [r2, #0]
  cli_prompt();
 800cae2:	f7ff fcdb 	bl	800c49c <cli_prompt>
}
 800cae6:	bf00      	nop
 800cae8:	3708      	adds	r7, #8
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	20000338 	.word	0x20000338
 800caf4:	2000033c 	.word	0x2000033c

0800caf8 <print_value_pointer>:

static void print_value_pointer(const char *cmdName, const cli_value_t *var, const void *valuePointer, bool full) {
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b08a      	sub	sp, #40	; 0x28
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	607a      	str	r2, [r7, #4]
 800cb04:	70fb      	strb	r3, [r7, #3]
  if ((var->type & VALUE_MODE_MASK) == MODE_ARRAY) {
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	791b      	ldrb	r3, [r3, #4]
 800cb0a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800cb0e:	2b40      	cmp	r3, #64	; 0x40
 800cb10:	d159      	bne.n	800cbc6 <print_value_pointer+0xce>
    for (int i = 0; i < var->config.array.length; i++) {
 800cb12:	2300      	movs	r3, #0
 800cb14:	627b      	str	r3, [r7, #36]	; 0x24
 800cb16:	e04f      	b.n	800cbb8 <print_value_pointer+0xc0>
      switch (var->type & VALUE_TYPE_MASK) {
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	791b      	ldrb	r3, [r3, #4]
 800cb1c:	f003 0307 	and.w	r3, r3, #7
 800cb20:	3b01      	subs	r3, #1
 800cb22:	2b03      	cmp	r3, #3
 800cb24:	d80a      	bhi.n	800cb3c <print_value_pointer+0x44>
 800cb26:	a201      	add	r2, pc, #4	; (adr r2, 800cb2c <print_value_pointer+0x34>)
 800cb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb2c:	0800cb4f 	.word	0x0800cb4f
 800cb30:	0800cb63 	.word	0x0800cb63
 800cb34:	0800cb77 	.word	0x0800cb77
 800cb38:	0800cb8d 	.word	0x0800cb8d
        default:
        case VAR_UINT8:
          // uint8_t array
          cli_printf("%d", ((uint8_t *)valuePointer)[i]);
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	4413      	add	r3, r2
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	4619      	mov	r1, r3
 800cb46:	4884      	ldr	r0, [pc, #528]	; (800cd58 <print_value_pointer+0x260>)
 800cb48:	f7ff fcfe 	bl	800c548 <cli_printf>
          break;
 800cb4c:	e028      	b.n	800cba0 <print_value_pointer+0xa8>

        case VAR_INT8:
          // int8_t array
          cli_printf("%d", ((int8_t *)valuePointer)[i]);
 800cb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	4413      	add	r3, r2
 800cb54:	f993 3000 	ldrsb.w	r3, [r3]
 800cb58:	4619      	mov	r1, r3
 800cb5a:	487f      	ldr	r0, [pc, #508]	; (800cd58 <print_value_pointer+0x260>)
 800cb5c:	f7ff fcf4 	bl	800c548 <cli_printf>
          break;
 800cb60:	e01e      	b.n	800cba0 <print_value_pointer+0xa8>

        case VAR_UINT16:
          // uin16_t array
          cli_printf("%d", ((uint16_t *)valuePointer)[i]);
 800cb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb64:	005b      	lsls	r3, r3, #1
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	4413      	add	r3, r2
 800cb6a:	881b      	ldrh	r3, [r3, #0]
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	487a      	ldr	r0, [pc, #488]	; (800cd58 <print_value_pointer+0x260>)
 800cb70:	f7ff fcea 	bl	800c548 <cli_printf>
          break;
 800cb74:	e014      	b.n	800cba0 <print_value_pointer+0xa8>

        case VAR_INT16:
          // int16_t array
          cli_printf("%d", ((int16_t *)valuePointer)[i]);
 800cb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb78:	005b      	lsls	r3, r3, #1
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	4413      	add	r3, r2
 800cb7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb82:	4619      	mov	r1, r3
 800cb84:	4874      	ldr	r0, [pc, #464]	; (800cd58 <print_value_pointer+0x260>)
 800cb86:	f7ff fcdf 	bl	800c548 <cli_printf>
          break;
 800cb8a:	e009      	b.n	800cba0 <print_value_pointer+0xa8>

        case VAR_UINT32:
          // uin32_t array
          cli_printf("%lu", ((uint32_t *)valuePointer)[i]);
 800cb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	4413      	add	r3, r2
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4619      	mov	r1, r3
 800cb98:	4870      	ldr	r0, [pc, #448]	; (800cd5c <print_value_pointer+0x264>)
 800cb9a:	f7ff fcd5 	bl	800c548 <cli_printf>
          break;
 800cb9e:	bf00      	nop
      }

      if (i < var->config.array.length - 1) {
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	795b      	ldrb	r3, [r3, #5]
 800cba4:	3b01      	subs	r3, #1
 800cba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	da02      	bge.n	800cbb2 <print_value_pointer+0xba>
        cli_print(",");
 800cbac:	486c      	ldr	r0, [pc, #432]	; (800cd60 <print_value_pointer+0x268>)
 800cbae:	f7ff fc65 	bl	800c47c <cli_print>
    for (int i = 0; i < var->config.array.length; i++) {
 800cbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	627b      	str	r3, [r7, #36]	; 0x24
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	795b      	ldrb	r3, [r3, #5]
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	dba9      	blt.n	800cb18 <print_value_pointer+0x20>
    if (value_is_corrupted) {
      cli_print_linefeed();
      cli_print_error(cmdName, "CORRUPTED CONFIG: %s = %d", var->name, value);
    }
  }
}
 800cbc4:	e0c3      	b.n	800cd4e <print_value_pointer+0x256>
    int value = 0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	623b      	str	r3, [r7, #32]
    switch (var->type & VALUE_TYPE_MASK) {
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	791b      	ldrb	r3, [r3, #4]
 800cbce:	f003 0307 	and.w	r3, r3, #7
 800cbd2:	2b04      	cmp	r3, #4
 800cbd4:	d822      	bhi.n	800cc1c <print_value_pointer+0x124>
 800cbd6:	a201      	add	r2, pc, #4	; (adr r2, 800cbdc <print_value_pointer+0xe4>)
 800cbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbdc:	0800cbf1 	.word	0x0800cbf1
 800cbe0:	0800cbf9 	.word	0x0800cbf9
 800cbe4:	0800cc03 	.word	0x0800cc03
 800cbe8:	0800cc0b 	.word	0x0800cc0b
 800cbec:	0800cc15 	.word	0x0800cc15
        value = *(uint8_t *)valuePointer;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	623b      	str	r3, [r7, #32]
        break;
 800cbf6:	e011      	b.n	800cc1c <print_value_pointer+0x124>
        value = *(int8_t *)valuePointer;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f993 3000 	ldrsb.w	r3, [r3]
 800cbfe:	623b      	str	r3, [r7, #32]
        break;
 800cc00:	e00c      	b.n	800cc1c <print_value_pointer+0x124>
        value = *(uint16_t *)valuePointer;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	881b      	ldrh	r3, [r3, #0]
 800cc06:	623b      	str	r3, [r7, #32]
        break;
 800cc08:	e008      	b.n	800cc1c <print_value_pointer+0x124>
        value = *(int16_t *)valuePointer;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc10:	623b      	str	r3, [r7, #32]
        break;
 800cc12:	e003      	b.n	800cc1c <print_value_pointer+0x124>
        value = *(uint32_t *)valuePointer;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	623b      	str	r3, [r7, #32]
        break;
 800cc1a:	bf00      	nop
    bool value_is_corrupted = false;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	77fb      	strb	r3, [r7, #31]
    switch (var->type & VALUE_MODE_MASK) {
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	791b      	ldrb	r3, [r3, #4]
 800cc24:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800cc28:	2b80      	cmp	r3, #128	; 0x80
 800cc2a:	d077      	beq.n	800cd1c <print_value_pointer+0x224>
 800cc2c:	2b80      	cmp	r3, #128	; 0x80
 800cc2e:	f300 8082 	bgt.w	800cd36 <print_value_pointer+0x23e>
 800cc32:	2b60      	cmp	r3, #96	; 0x60
 800cc34:	d061      	beq.n	800ccfa <print_value_pointer+0x202>
 800cc36:	2b60      	cmp	r3, #96	; 0x60
 800cc38:	dc7d      	bgt.n	800cd36 <print_value_pointer+0x23e>
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d002      	beq.n	800cc44 <print_value_pointer+0x14c>
 800cc3e:	2b20      	cmp	r3, #32
 800cc40:	d040      	beq.n	800ccc4 <print_value_pointer+0x1cc>
 800cc42:	e078      	b.n	800cd36 <print_value_pointer+0x23e>
        if ((var->type & VALUE_TYPE_MASK) == VAR_UINT32) {
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	791b      	ldrb	r3, [r3, #4]
 800cc48:	f003 0307 	and.w	r3, r3, #7
 800cc4c:	2b04      	cmp	r3, #4
 800cc4e:	d118      	bne.n	800cc82 <print_value_pointer+0x18a>
          cli_printf("%lu", (uint32_t)value);
 800cc50:	6a3b      	ldr	r3, [r7, #32]
 800cc52:	4619      	mov	r1, r3
 800cc54:	4841      	ldr	r0, [pc, #260]	; (800cd5c <print_value_pointer+0x264>)
 800cc56:	f7ff fc77 	bl	800c548 <cli_printf>
          if ((uint32_t)value > var->config.u32_max) {
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	f8d3 2005 	ldr.w	r2, [r3, #5]
 800cc60:	6a3b      	ldr	r3, [r7, #32]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d202      	bcs.n	800cc6c <print_value_pointer+0x174>
            value_is_corrupted = true;
 800cc66:	2301      	movs	r3, #1
 800cc68:	77fb      	strb	r3, [r7, #31]
        break;
 800cc6a:	e063      	b.n	800cd34 <print_value_pointer+0x23c>
          } else if (full) {
 800cc6c:	78fb      	ldrb	r3, [r7, #3]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d060      	beq.n	800cd34 <print_value_pointer+0x23c>
            cli_printf(" 0 %lu", var->config.u32_max);
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800cc78:	4619      	mov	r1, r3
 800cc7a:	483a      	ldr	r0, [pc, #232]	; (800cd64 <print_value_pointer+0x26c>)
 800cc7c:	f7ff fc64 	bl	800c548 <cli_printf>
        break;
 800cc80:	e058      	b.n	800cd34 <print_value_pointer+0x23c>
          get_min_max(var, &min, &max);
 800cc82:	f107 0214 	add.w	r2, r7, #20
 800cc86:	f107 0318 	add.w	r3, r7, #24
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	68b8      	ldr	r0, [r7, #8]
 800cc8e:	f7ff fbc2 	bl	800c416 <get_min_max>
          cli_printf("%d", value);
 800cc92:	6a39      	ldr	r1, [r7, #32]
 800cc94:	4830      	ldr	r0, [pc, #192]	; (800cd58 <print_value_pointer+0x260>)
 800cc96:	f7ff fc57 	bl	800c548 <cli_printf>
          if ((value < min) || (value > max)) {
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	6a3a      	ldr	r2, [r7, #32]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	db03      	blt.n	800ccaa <print_value_pointer+0x1b2>
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	6a3a      	ldr	r2, [r7, #32]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	dd02      	ble.n	800ccb0 <print_value_pointer+0x1b8>
            value_is_corrupted = true;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	77fb      	strb	r3, [r7, #31]
        break;
 800ccae:	e041      	b.n	800cd34 <print_value_pointer+0x23c>
          } else if (full) {
 800ccb0:	78fb      	ldrb	r3, [r7, #3]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d03e      	beq.n	800cd34 <print_value_pointer+0x23c>
            cli_printf(" %d %d", min, max);
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	697a      	ldr	r2, [r7, #20]
 800ccba:	4619      	mov	r1, r3
 800ccbc:	482a      	ldr	r0, [pc, #168]	; (800cd68 <print_value_pointer+0x270>)
 800ccbe:	f7ff fc43 	bl	800c548 <cli_printf>
        break;
 800ccc2:	e037      	b.n	800cd34 <print_value_pointer+0x23c>
        if (value < lookup_tables[var->config.lookup.table_index].value_count) {
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	795b      	ldrb	r3, [r3, #5]
 800ccc8:	4a28      	ldr	r2, [pc, #160]	; (800cd6c <print_value_pointer+0x274>)
 800ccca:	00db      	lsls	r3, r3, #3
 800cccc:	4413      	add	r3, r2
 800ccce:	791b      	ldrb	r3, [r3, #4]
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	6a3b      	ldr	r3, [r7, #32]
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	da0d      	bge.n	800ccf4 <print_value_pointer+0x1fc>
          cli_print(lookup_tables[var->config.lookup.table_index].values[value]);
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	795b      	ldrb	r3, [r3, #5]
 800ccdc:	461a      	mov	r2, r3
 800ccde:	4b23      	ldr	r3, [pc, #140]	; (800cd6c <print_value_pointer+0x274>)
 800cce0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800cce4:	6a3b      	ldr	r3, [r7, #32]
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	4413      	add	r3, r2
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7ff fbc5 	bl	800c47c <cli_print>
        break;
 800ccf2:	e020      	b.n	800cd36 <print_value_pointer+0x23e>
          value_is_corrupted = true;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	77fb      	strb	r3, [r7, #31]
        break;
 800ccf8:	e01d      	b.n	800cd36 <print_value_pointer+0x23e>
        if (value & 1 << var->config.bitpos) {
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	795b      	ldrb	r3, [r3, #5]
 800ccfe:	461a      	mov	r2, r3
 800cd00:	6a3b      	ldr	r3, [r7, #32]
 800cd02:	4113      	asrs	r3, r2
 800cd04:	f003 0301 	and.w	r3, r3, #1
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d003      	beq.n	800cd14 <print_value_pointer+0x21c>
          cli_printf("ON");
 800cd0c:	4818      	ldr	r0, [pc, #96]	; (800cd70 <print_value_pointer+0x278>)
 800cd0e:	f7ff fc1b 	bl	800c548 <cli_printf>
        break;
 800cd12:	e010      	b.n	800cd36 <print_value_pointer+0x23e>
          cli_printf("OFF");
 800cd14:	4817      	ldr	r0, [pc, #92]	; (800cd74 <print_value_pointer+0x27c>)
 800cd16:	f7ff fc17 	bl	800c548 <cli_printf>
        break;
 800cd1a:	e00c      	b.n	800cd36 <print_value_pointer+0x23e>
        cli_printf("%s", (strlen((char *)valuePointer) == 0) ? "-" : (char *)valuePointer);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d001      	beq.n	800cd28 <print_value_pointer+0x230>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	e000      	b.n	800cd2a <print_value_pointer+0x232>
 800cd28:	4b13      	ldr	r3, [pc, #76]	; (800cd78 <print_value_pointer+0x280>)
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	4813      	ldr	r0, [pc, #76]	; (800cd7c <print_value_pointer+0x284>)
 800cd2e:	f7ff fc0b 	bl	800c548 <cli_printf>
        break;
 800cd32:	e000      	b.n	800cd36 <print_value_pointer+0x23e>
        break;
 800cd34:	bf00      	nop
    if (value_is_corrupted) {
 800cd36:	7ffb      	ldrb	r3, [r7, #31]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d008      	beq.n	800cd4e <print_value_pointer+0x256>
      cli_print_linefeed();
 800cd3c:	f7ff fbb8 	bl	800c4b0 <cli_print_linefeed>
      cli_print_error(cmdName, "CORRUPTED CONFIG: %s = %d", var->name, value);
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	6a3b      	ldr	r3, [r7, #32]
 800cd46:	490e      	ldr	r1, [pc, #56]	; (800cd80 <print_value_pointer+0x288>)
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f7ff fc55 	bl	800c5f8 <cli_print_error>
}
 800cd4e:	bf00      	nop
 800cd50:	3728      	adds	r7, #40	; 0x28
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	0801c62c 	.word	0x0801c62c
 800cd5c:	0801c630 	.word	0x0801c630
 800cd60:	0801c634 	.word	0x0801c634
 800cd64:	0801c638 	.word	0x0801c638
 800cd68:	0801c640 	.word	0x0801c640
 800cd6c:	0801ce94 	.word	0x0801ce94
 800cd70:	0801c648 	.word	0x0801c648
 800cd74:	0801c64c 	.word	0x0801c64c
 800cd78:	0801c650 	.word	0x0801c650
 800cd7c:	0801c654 	.word	0x0801c654
 800cd80:	0801c658 	.word	0x0801c658

0800cd84 <cli_print_var>:

void cli_print_var(const char *cmdName, const cli_value_t *var, bool full) {
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b086      	sub	sp, #24
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	71fb      	strb	r3, [r7, #7]
  const void *ptr = var->pdata;
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800cd98:	617b      	str	r3, [r7, #20]

  print_value_pointer(cmdName, var, ptr, full);
 800cd9a:	79fb      	ldrb	r3, [r7, #7]
 800cd9c:	697a      	ldr	r2, [r7, #20]
 800cd9e:	68b9      	ldr	r1, [r7, #8]
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f7ff fea9 	bl	800caf8 <print_value_pointer>
}
 800cda6:	bf00      	nop
 800cda8:	3718      	adds	r7, #24
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <get_word_length>:

uint8_t get_word_length(char *bufBegin, char *bufEnd) {
 800cdae:	b480      	push	{r7}
 800cdb0:	b083      	sub	sp, #12
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	6039      	str	r1, [r7, #0]
  while (*(bufEnd - 1) == ' ') {
 800cdb8:	e002      	b.n	800cdc0 <get_word_length+0x12>
    bufEnd--;
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	603b      	str	r3, [r7, #0]
  while (*(bufEnd - 1) == ' ') {
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	3b01      	subs	r3, #1
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	2b20      	cmp	r3, #32
 800cdc8:	d0f7      	beq.n	800cdba <get_word_length+0xc>
  }

  return bufEnd - bufBegin;
 800cdca:	683a      	ldr	r2, [r7, #0]
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	1ad3      	subs	r3, r2, r3
 800cdd0:	b2db      	uxtb	r3, r3
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	370c      	adds	r7, #12
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
	...

0800cde0 <cli_get_setting_index>:

uint16_t cli_get_setting_index(char *name, uint8_t length) {
 800cde0:	b590      	push	{r4, r7, lr}
 800cde2:	b085      	sub	sp, #20
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	460b      	mov	r3, r1
 800cdea:	70fb      	strb	r3, [r7, #3]
  for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800cdec:	2300      	movs	r3, #0
 800cdee:	60fb      	str	r3, [r7, #12]
 800cdf0:	e020      	b.n	800ce34 <cli_get_setting_index+0x54>
    const char *setting_name = value_table[i].name;
 800cdf2:	4916      	ldr	r1, [pc, #88]	; (800ce4c <cli_get_setting_index+0x6c>)
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	011b      	lsls	r3, r3, #4
 800cdfa:	4413      	add	r3, r2
 800cdfc:	440b      	add	r3, r1
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	60bb      	str	r3, [r7, #8]

    // ensure exact match when setting to prevent setting variables with shorter names
    if (strncasecmp(name, setting_name, strlen(setting_name)) == 0 && length == strlen(setting_name)) {
 800ce02:	68b8      	ldr	r0, [r7, #8]
 800ce04:	f7ff f91c 	bl	800c040 <strlen>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	68b9      	ldr	r1, [r7, #8]
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f00e fe3c 	bl	801ba8c <strncasecmp>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d109      	bne.n	800ce2e <cli_get_setting_index+0x4e>
 800ce1a:	78fc      	ldrb	r4, [r7, #3]
 800ce1c:	68b8      	ldr	r0, [r7, #8]
 800ce1e:	f7ff f90f 	bl	800c040 <strlen>
 800ce22:	4603      	mov	r3, r0
 800ce24:	429c      	cmp	r4, r3
 800ce26:	d102      	bne.n	800ce2e <cli_get_setting_index+0x4e>
      return i;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	e00a      	b.n	800ce44 <cli_get_setting_index+0x64>
  for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	3301      	adds	r3, #1
 800ce32:	60fb      	str	r3, [r7, #12]
 800ce34:	4b06      	ldr	r3, [pc, #24]	; (800ce50 <cli_get_setting_index+0x70>)
 800ce36:	881b      	ldrh	r3, [r3, #0]
 800ce38:	461a      	mov	r2, r3
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d3d8      	bcc.n	800cdf2 <cli_get_setting_index+0x12>
    }
  }
  return value_table_entry_count;
 800ce40:	4b03      	ldr	r3, [pc, #12]	; (800ce50 <cli_get_setting_index+0x70>)
 800ce42:	881b      	ldrh	r3, [r3, #0]
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3714      	adds	r7, #20
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd90      	pop	{r4, r7, pc}
 800ce4c:	0801ceac 	.word	0x0801ceac
 800ce50:	0801cece 	.word	0x0801cece

0800ce54 <cli_print_var_range>:
    ptr++;
  }
  return ptr;
}

void cli_print_var_range(const cli_value_t *var) {
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  switch (var->type & VALUE_MODE_MASK) {
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	791b      	ldrb	r3, [r3, #4]
 800ce60:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800ce64:	2b80      	cmp	r3, #128	; 0x80
 800ce66:	f000 8083 	beq.w	800cf70 <cli_print_var_range+0x11c>
 800ce6a:	2b80      	cmp	r3, #128	; 0x80
 800ce6c:	f300 808e 	bgt.w	800cf8c <cli_print_var_range+0x138>
 800ce70:	2b60      	cmp	r3, #96	; 0x60
 800ce72:	f000 8087 	beq.w	800cf84 <cli_print_var_range+0x130>
 800ce76:	2b60      	cmp	r3, #96	; 0x60
 800ce78:	f300 8088 	bgt.w	800cf8c <cli_print_var_range+0x138>
 800ce7c:	2b40      	cmp	r3, #64	; 0x40
 800ce7e:	d070      	beq.n	800cf62 <cli_print_var_range+0x10e>
 800ce80:	2b40      	cmp	r3, #64	; 0x40
 800ce82:	f300 8083 	bgt.w	800cf8c <cli_print_var_range+0x138>
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d002      	beq.n	800ce90 <cli_print_var_range+0x3c>
 800ce8a:	2b20      	cmp	r3, #32
 800ce8c:	d032      	beq.n	800cef4 <cli_print_var_range+0xa0>
    } break;
    case (MODE_BITSET): {
      cli_print_linef("Allowed values: OFF, ON");
    } break;
  }
}
 800ce8e:	e07d      	b.n	800cf8c <cli_print_var_range+0x138>
      switch (var->type & VALUE_TYPE_MASK) {
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	791b      	ldrb	r3, [r3, #4]
 800ce94:	f003 0307 	and.w	r3, r3, #7
 800ce98:	2b04      	cmp	r3, #4
 800ce9a:	d006      	beq.n	800ceaa <cli_print_var_range+0x56>
 800ce9c:	2b04      	cmp	r3, #4
 800ce9e:	dc1a      	bgt.n	800ced6 <cli_print_var_range+0x82>
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d00a      	beq.n	800ceba <cli_print_var_range+0x66>
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d008      	beq.n	800ceba <cli_print_var_range+0x66>
 800cea8:	e015      	b.n	800ced6 <cli_print_var_range+0x82>
          cli_print_linef("Allowed range: 0 - %lu", var->config.u32_max);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	4838      	ldr	r0, [pc, #224]	; (800cf94 <cli_print_var_range+0x140>)
 800ceb4:	f7ff fb5a 	bl	800c56c <cli_print_linef>
          break;
 800ceb8:	e01b      	b.n	800cef2 <cli_print_var_range+0x9e>
          cli_print_linef("Allowed range: %d - %d", var->config.minmax_unsigned.min, var->config.minmax_unsigned.max);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	4619      	mov	r1, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	461a      	mov	r2, r3
 800cece:	4832      	ldr	r0, [pc, #200]	; (800cf98 <cli_print_var_range+0x144>)
 800ced0:	f7ff fb4c 	bl	800c56c <cli_print_linef>
          break;
 800ced4:	e00d      	b.n	800cef2 <cli_print_var_range+0x9e>
          cli_print_linef("Allowed range: %d - %d", var->config.minmax.min, var->config.minmax.max);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 800cedc:	b21b      	sxth	r3, r3
 800cede:	4619      	mov	r1, r3
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
 800cee6:	b21b      	sxth	r3, r3
 800cee8:	461a      	mov	r2, r3
 800ceea:	482b      	ldr	r0, [pc, #172]	; (800cf98 <cli_print_var_range+0x144>)
 800ceec:	f7ff fb3e 	bl	800c56c <cli_print_linef>
          break;
 800cef0:	bf00      	nop
    } break;
 800cef2:	e04b      	b.n	800cf8c <cli_print_var_range+0x138>
      const lookup_table_entry_t *tableEntry = &lookup_tables[var->config.lookup.table_index];
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	795b      	ldrb	r3, [r3, #5]
 800cef8:	00db      	lsls	r3, r3, #3
 800cefa:	4a28      	ldr	r2, [pc, #160]	; (800cf9c <cli_print_var_range+0x148>)
 800cefc:	4413      	add	r3, r2
 800cefe:	60fb      	str	r3, [r7, #12]
      cli_print("Allowed values: ");
 800cf00:	4827      	ldr	r0, [pc, #156]	; (800cfa0 <cli_print_var_range+0x14c>)
 800cf02:	f7ff fabb 	bl	800c47c <cli_print>
      bool first_entry = true;
 800cf06:	2301      	movs	r3, #1
 800cf08:	75fb      	strb	r3, [r7, #23]
      for (unsigned i = 0; i < tableEntry->value_count; i++) {
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	613b      	str	r3, [r7, #16]
 800cf0e:	e01f      	b.n	800cf50 <cli_print_var_range+0xfc>
        if (tableEntry->values[i]) {
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	4413      	add	r3, r2
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d014      	beq.n	800cf4a <cli_print_var_range+0xf6>
          if (!first_entry) {
 800cf20:	7dfb      	ldrb	r3, [r7, #23]
 800cf22:	f083 0301 	eor.w	r3, r3, #1
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d002      	beq.n	800cf32 <cli_print_var_range+0xde>
            cli_print(", ");
 800cf2c:	481d      	ldr	r0, [pc, #116]	; (800cfa4 <cli_print_var_range+0x150>)
 800cf2e:	f7ff faa5 	bl	800c47c <cli_print>
          cli_printf("%s", tableEntry->values[i]);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681a      	ldr	r2, [r3, #0]
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	4413      	add	r3, r2
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4619      	mov	r1, r3
 800cf40:	4819      	ldr	r0, [pc, #100]	; (800cfa8 <cli_print_var_range+0x154>)
 800cf42:	f7ff fb01 	bl	800c548 <cli_printf>
          first_entry = false;
 800cf46:	2300      	movs	r3, #0
 800cf48:	75fb      	strb	r3, [r7, #23]
      for (unsigned i = 0; i < tableEntry->value_count; i++) {
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	613b      	str	r3, [r7, #16]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	791b      	ldrb	r3, [r3, #4]
 800cf54:	461a      	mov	r2, r3
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d3d9      	bcc.n	800cf10 <cli_print_var_range+0xbc>
      cli_print_linefeed();
 800cf5c:	f7ff faa8 	bl	800c4b0 <cli_print_linefeed>
    } break;
 800cf60:	e014      	b.n	800cf8c <cli_print_var_range+0x138>
      cli_print_linef("Array length: %d", var->config.array.length);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	795b      	ldrb	r3, [r3, #5]
 800cf66:	4619      	mov	r1, r3
 800cf68:	4810      	ldr	r0, [pc, #64]	; (800cfac <cli_print_var_range+0x158>)
 800cf6a:	f7ff faff 	bl	800c56c <cli_print_linef>
    } break;
 800cf6e:	e00d      	b.n	800cf8c <cli_print_var_range+0x138>
      cli_print_linef("String length: %d - %d", var->config.string.min_length, var->config.string.max_length);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	795b      	ldrb	r3, [r3, #5]
 800cf74:	4619      	mov	r1, r3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	799b      	ldrb	r3, [r3, #6]
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	480c      	ldr	r0, [pc, #48]	; (800cfb0 <cli_print_var_range+0x15c>)
 800cf7e:	f7ff faf5 	bl	800c56c <cli_print_linef>
    } break;
 800cf82:	e003      	b.n	800cf8c <cli_print_var_range+0x138>
      cli_print_linef("Allowed values: OFF, ON");
 800cf84:	480b      	ldr	r0, [pc, #44]	; (800cfb4 <cli_print_var_range+0x160>)
 800cf86:	f7ff faf1 	bl	800c56c <cli_print_linef>
    } break;
 800cf8a:	bf00      	nop
}
 800cf8c:	bf00      	nop
 800cf8e:	3718      	adds	r7, #24
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	0801c674 	.word	0x0801c674
 800cf98:	0801c68c 	.word	0x0801c68c
 800cf9c:	0801ce94 	.word	0x0801ce94
 800cfa0:	0801c6a4 	.word	0x0801c6a4
 800cfa4:	0801c6b8 	.word	0x0801c6b8
 800cfa8:	0801c654 	.word	0x0801c654
 800cfac:	0801c6bc 	.word	0x0801c6bc
 800cfb0:	0801c6d0 	.word	0x0801c6d0
 800cfb4:	0801c6e8 	.word	0x0801c6e8

0800cfb8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800cfbc:	f3bf 8f4f 	dsb	sy
}
 800cfc0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800cfc2:	4b06      	ldr	r3, [pc, #24]	; (800cfdc <__NVIC_SystemReset+0x24>)
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cfca:	4904      	ldr	r1, [pc, #16]	; (800cfdc <__NVIC_SystemReset+0x24>)
 800cfcc:	4b04      	ldr	r3, [pc, #16]	; (800cfe0 <__NVIC_SystemReset+0x28>)
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800cfd2:	f3bf 8f4f 	dsb	sy
}
 800cfd6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800cfd8:	bf00      	nop
 800cfda:	e7fd      	b.n	800cfd8 <__NVIC_SystemReset+0x20>
 800cfdc:	e000ed00 	.word	0xe000ed00
 800cfe0:	05fa0004 	.word	0x05fa0004

0800cfe4 <cli_cmd_help>:

static void fill_buf(uint8_t *buf, size_t buf_sz);

/** CLI command function definitions **/

static void cli_cmd_help(const char *cmd_name, char *args) {
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b086      	sub	sp, #24
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
  bool any_matches = false;
 800cfee:	2300      	movs	r3, #0
 800cff0:	75fb      	strb	r3, [r7, #23]

  for (uint32_t i = 0; i < ARRAYLEN(cmd_table); i++) {
 800cff2:	2300      	movs	r3, #0
 800cff4:	613b      	str	r3, [r7, #16]
 800cff6:	e05b      	b.n	800d0b0 <cli_cmd_help+0xcc>
    bool print_entry = false;
 800cff8:	2300      	movs	r3, #0
 800cffa:	73fb      	strb	r3, [r7, #15]
    if (is_empty(args)) {
 800cffc:	6838      	ldr	r0, [r7, #0]
 800cffe:	f7ff f9f3 	bl	800c3e8 <is_empty>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d002      	beq.n	800d00e <cli_cmd_help+0x2a>
      print_entry = true;
 800d008:	2301      	movs	r3, #1
 800d00a:	73fb      	strb	r3, [r7, #15]
 800d00c:	e01a      	b.n	800d044 <cli_cmd_help+0x60>
    } else {
      if (strstr(cmd_table[i].name, args) || strstr(cmd_table[i].description, args)) {
 800d00e:	4a36      	ldr	r2, [pc, #216]	; (800d0e8 <cli_cmd_help+0x104>)
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	011b      	lsls	r3, r3, #4
 800d014:	4413      	add	r3, r2
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	6839      	ldr	r1, [r7, #0]
 800d01a:	4618      	mov	r0, r3
 800d01c:	f00e fd6b 	bl	801baf6 <strstr>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d10c      	bne.n	800d040 <cli_cmd_help+0x5c>
 800d026:	4a30      	ldr	r2, [pc, #192]	; (800d0e8 <cli_cmd_help+0x104>)
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	011b      	lsls	r3, r3, #4
 800d02c:	4413      	add	r3, r2
 800d02e:	3304      	adds	r3, #4
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	6839      	ldr	r1, [r7, #0]
 800d034:	4618      	mov	r0, r3
 800d036:	f00e fd5e 	bl	801baf6 <strstr>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d001      	beq.n	800d044 <cli_cmd_help+0x60>
        print_entry = true;
 800d040:	2301      	movs	r3, #1
 800d042:	73fb      	strb	r3, [r7, #15]
      }
    }

    if (print_entry) {
 800d044:	7bfb      	ldrb	r3, [r7, #15]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d02f      	beq.n	800d0aa <cli_cmd_help+0xc6>
      any_matches = true;
 800d04a:	2301      	movs	r3, #1
 800d04c:	75fb      	strb	r3, [r7, #23]
      cli_print(cmd_table[i].name);
 800d04e:	4a26      	ldr	r2, [pc, #152]	; (800d0e8 <cli_cmd_help+0x104>)
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	011b      	lsls	r3, r3, #4
 800d054:	4413      	add	r3, r2
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4618      	mov	r0, r3
 800d05a:	f7ff fa0f 	bl	800c47c <cli_print>
      if (cmd_table[i].description) {
 800d05e:	4a22      	ldr	r2, [pc, #136]	; (800d0e8 <cli_cmd_help+0x104>)
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	011b      	lsls	r3, r3, #4
 800d064:	4413      	add	r3, r2
 800d066:	3304      	adds	r3, #4
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d009      	beq.n	800d082 <cli_cmd_help+0x9e>
        cli_printf(" - %s", cmd_table[i].description);
 800d06e:	4a1e      	ldr	r2, [pc, #120]	; (800d0e8 <cli_cmd_help+0x104>)
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	011b      	lsls	r3, r3, #4
 800d074:	4413      	add	r3, r2
 800d076:	3304      	adds	r3, #4
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4619      	mov	r1, r3
 800d07c:	481b      	ldr	r0, [pc, #108]	; (800d0ec <cli_cmd_help+0x108>)
 800d07e:	f7ff fa63 	bl	800c548 <cli_printf>
      }
      if (cmd_table[i].args) {
 800d082:	4a19      	ldr	r2, [pc, #100]	; (800d0e8 <cli_cmd_help+0x104>)
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	011b      	lsls	r3, r3, #4
 800d088:	4413      	add	r3, r2
 800d08a:	3308      	adds	r3, #8
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d009      	beq.n	800d0a6 <cli_cmd_help+0xc2>
        cli_printf("\r\n\t%s", cmd_table[i].args);
 800d092:	4a15      	ldr	r2, [pc, #84]	; (800d0e8 <cli_cmd_help+0x104>)
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	011b      	lsls	r3, r3, #4
 800d098:	4413      	add	r3, r2
 800d09a:	3308      	adds	r3, #8
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4619      	mov	r1, r3
 800d0a0:	4813      	ldr	r0, [pc, #76]	; (800d0f0 <cli_cmd_help+0x10c>)
 800d0a2:	f7ff fa51 	bl	800c548 <cli_printf>
      }
      cli_print_linefeed();
 800d0a6:	f7ff fa03 	bl	800c4b0 <cli_print_linefeed>
  for (uint32_t i = 0; i < ARRAYLEN(cmd_table); i++) {
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	613b      	str	r3, [r7, #16]
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	2b09      	cmp	r3, #9
 800d0b4:	d9a0      	bls.n	800cff8 <cli_cmd_help+0x14>
    }
  }
  if (!is_empty(args) && !any_matches) {
 800d0b6:	6838      	ldr	r0, [r7, #0]
 800d0b8:	f7ff f996 	bl	800c3e8 <is_empty>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	f083 0301 	eor.w	r3, r3, #1
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00a      	beq.n	800d0de <cli_cmd_help+0xfa>
 800d0c8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ca:	f083 0301 	eor.w	r3, r3, #1
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d004      	beq.n	800d0de <cli_cmd_help+0xfa>
    cli_print_error_linef(cmd_name, "NO MATCHES FOR '%s'", args);
 800d0d4:	683a      	ldr	r2, [r7, #0]
 800d0d6:	4907      	ldr	r1, [pc, #28]	; (800d0f4 <cli_cmd_help+0x110>)
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7ff faa1 	bl	800c620 <cli_print_error_linef>
  }
}
 800d0de:	bf00      	nop
 800d0e0:	3718      	adds	r7, #24
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	0801cd70 	.word	0x0801cd70
 800d0ec:	0801c858 	.word	0x0801c858
 800d0f0:	0801c860 	.word	0x0801c860
 800d0f4:	0801c868 	.word	0x0801c868

0800d0f8 <cli_cmd_reboot>:

static void cli_cmd_reboot(const char *cmd_name, char *args) { NVIC_SystemReset(); }
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
 800d102:	f7ff ff59 	bl	800cfb8 <__NVIC_SystemReset>
	...

0800d108 <cli_cmd_save>:

static void cli_cmd_save(const char *cmd_name, char *args) {
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
  if (config_save() == false) {
 800d112:	f000 fbad 	bl	800d870 <config_save>
 800d116:	4603      	mov	r3, r0
 800d118:	f083 0301 	eor.w	r3, r3, #1
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d00e      	beq.n	800d140 <cli_cmd_save+0x38>
    cli_print_line("Saving unsuccessful, trying force save...");
 800d122:	480a      	ldr	r0, [pc, #40]	; (800d14c <cli_cmd_save+0x44>)
 800d124:	f7ff f9ce 	bl	800c4c4 <cli_print_line>
    if (config_save() == false) {
 800d128:	f000 fba2 	bl	800d870 <config_save>
 800d12c:	4603      	mov	r3, r0
 800d12e:	f083 0301 	eor.w	r3, r3, #1
 800d132:	b2db      	uxtb	r3, r3
 800d134:	2b00      	cmp	r3, #0
 800d136:	d003      	beq.n	800d140 <cli_cmd_save+0x38>
      cli_print_line("Force save failed!");
 800d138:	4805      	ldr	r0, [pc, #20]	; (800d150 <cli_cmd_save+0x48>)
 800d13a:	f7ff f9c3 	bl	800c4c4 <cli_print_line>
      return;
 800d13e:	e002      	b.n	800d146 <cli_cmd_save+0x3e>
    }
  }
  cli_print_line("Successfully written to flash");
 800d140:	4804      	ldr	r0, [pc, #16]	; (800d154 <cli_cmd_save+0x4c>)
 800d142:	f7ff f9bf 	bl	800c4c4 <cli_print_line>
}
 800d146:	3708      	adds	r7, #8
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	0801c87c 	.word	0x0801c87c
 800d150:	0801c8a8 	.word	0x0801c8a8
 800d154:	0801c8bc 	.word	0x0801c8bc

0800d158 <cli_cmd_get>:

static void cli_cmd_get(const char *cmd_name, char *args) {
 800d158:	b580      	push	{r7, lr}
 800d15a:	b086      	sub	sp, #24
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	6039      	str	r1, [r7, #0]
  const cli_value_t *val;
  int matched_commands = 0;
 800d162:	2300      	movs	r3, #0
 800d164:	617b      	str	r3, [r7, #20]

  for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800d166:	2300      	movs	r3, #0
 800d168:	613b      	str	r3, [r7, #16]
 800d16a:	e034      	b.n	800d1d6 <cli_cmd_get+0x7e>
    if (strstr(value_table[i].name, args)) {
 800d16c:	4922      	ldr	r1, [pc, #136]	; (800d1f8 <cli_cmd_get+0xa0>)
 800d16e:	693a      	ldr	r2, [r7, #16]
 800d170:	4613      	mov	r3, r2
 800d172:	011b      	lsls	r3, r3, #4
 800d174:	4413      	add	r3, r2
 800d176:	440b      	add	r3, r1
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	6839      	ldr	r1, [r7, #0]
 800d17c:	4618      	mov	r0, r3
 800d17e:	f00e fcba 	bl	801baf6 <strstr>
 800d182:	4603      	mov	r3, r0
 800d184:	2b00      	cmp	r3, #0
 800d186:	d023      	beq.n	800d1d0 <cli_cmd_get+0x78>
      val = &value_table[i];
 800d188:	693a      	ldr	r2, [r7, #16]
 800d18a:	4613      	mov	r3, r2
 800d18c:	011b      	lsls	r3, r3, #4
 800d18e:	4413      	add	r3, r2
 800d190:	4a19      	ldr	r2, [pc, #100]	; (800d1f8 <cli_cmd_get+0xa0>)
 800d192:	4413      	add	r3, r2
 800d194:	60fb      	str	r3, [r7, #12]
      if (matched_commands > 0) {
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	dd01      	ble.n	800d1a0 <cli_cmd_get+0x48>
        cli_print_linefeed();
 800d19c:	f7ff f988 	bl	800c4b0 <cli_print_linefeed>
      }
      cli_printf("%s = ", value_table[i].name);
 800d1a0:	4915      	ldr	r1, [pc, #84]	; (800d1f8 <cli_cmd_get+0xa0>)
 800d1a2:	693a      	ldr	r2, [r7, #16]
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	011b      	lsls	r3, r3, #4
 800d1a8:	4413      	add	r3, r2
 800d1aa:	440b      	add	r3, r1
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	4812      	ldr	r0, [pc, #72]	; (800d1fc <cli_cmd_get+0xa4>)
 800d1b2:	f7ff f9c9 	bl	800c548 <cli_printf>
      cli_print_var(cmd_name, val, 0);
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	68f9      	ldr	r1, [r7, #12]
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f7ff fde2 	bl	800cd84 <cli_print_var>
      cli_print_linefeed();
 800d1c0:	f7ff f976 	bl	800c4b0 <cli_print_linefeed>
      cli_print_var_range(val);
 800d1c4:	68f8      	ldr	r0, [r7, #12]
 800d1c6:	f7ff fe45 	bl	800ce54 <cli_print_var_range>
      // cliPrintVarDefault(cmd_name, val);

      matched_commands++;
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	617b      	str	r3, [r7, #20]
  for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	613b      	str	r3, [r7, #16]
 800d1d6:	4b0a      	ldr	r3, [pc, #40]	; (800d200 <cli_cmd_get+0xa8>)
 800d1d8:	881b      	ldrh	r3, [r3, #0]
 800d1da:	461a      	mov	r2, r3
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d3c4      	bcc.n	800d16c <cli_cmd_get+0x14>
    }
  }

  if (!matched_commands) {
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d103      	bne.n	800d1f0 <cli_cmd_get+0x98>
    cli_print_error_linef(cmd_name, "INVALID NAME");
 800d1e8:	4906      	ldr	r1, [pc, #24]	; (800d204 <cli_cmd_get+0xac>)
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f7ff fa18 	bl	800c620 <cli_print_error_linef>
  }
}
 800d1f0:	bf00      	nop
 800d1f2:	3718      	adds	r7, #24
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	0801ceac 	.word	0x0801ceac
 800d1fc:	0801c8dc 	.word	0x0801c8dc
 800d200:	0801cece 	.word	0x0801cece
 800d204:	0801c8e4 	.word	0x0801c8e4

0800d208 <cli_cmd_set>:

static void cli_cmd_set(const char *cmd_name, char *args) {
 800d208:	b580      	push	{r7, lr}
 800d20a:	b09a      	sub	sp, #104	; 0x68
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]
  const uint32_t len = strlen(args);
 800d212:	6838      	ldr	r0, [r7, #0]
 800d214:	f7fe ff14 	bl	800c040 <strlen>
 800d218:	64b8      	str	r0, [r7, #72]	; 0x48
  char *eqptr;

  if (len == 0 || (len == 1 && args[0] == '*')) {
 800d21a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d006      	beq.n	800d22e <cli_cmd_set+0x26>
 800d220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d222:	2b01      	cmp	r3, #1
 800d224:	d132      	bne.n	800d28c <cli_cmd_set+0x84>
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	2b2a      	cmp	r3, #42	; 0x2a
 800d22c:	d12e      	bne.n	800d28c <cli_cmd_set+0x84>
    cli_print_line("Current settings: ");
 800d22e:	48b0      	ldr	r0, [pc, #704]	; (800d4f0 <cli_cmd_set+0x2e8>)
 800d230:	f7ff f948 	bl	800c4c4 <cli_print_line>

    for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800d234:	2300      	movs	r3, #0
 800d236:	667b      	str	r3, [r7, #100]	; 0x64
 800d238:	e021      	b.n	800d27e <cli_cmd_set+0x76>
      const cli_value_t *val = &value_table[i];
 800d23a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d23c:	4613      	mov	r3, r2
 800d23e:	011b      	lsls	r3, r3, #4
 800d240:	4413      	add	r3, r2
 800d242:	4aac      	ldr	r2, [pc, #688]	; (800d4f4 <cli_cmd_set+0x2ec>)
 800d244:	4413      	add	r3, r2
 800d246:	617b      	str	r3, [r7, #20]
      cli_printf("%s = ", value_table[i].name);
 800d248:	49aa      	ldr	r1, [pc, #680]	; (800d4f4 <cli_cmd_set+0x2ec>)
 800d24a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d24c:	4613      	mov	r3, r2
 800d24e:	011b      	lsls	r3, r3, #4
 800d250:	4413      	add	r3, r2
 800d252:	440b      	add	r3, r1
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4619      	mov	r1, r3
 800d258:	48a7      	ldr	r0, [pc, #668]	; (800d4f8 <cli_cmd_set+0x2f0>)
 800d25a:	f7ff f975 	bl	800c548 <cli_printf>
      // when len is 1 (when * is passed as argument), it will print min/max values as well, for gui
      cli_print_var(cmd_name, val, len);
 800d25e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d260:	2b00      	cmp	r3, #0
 800d262:	bf14      	ite	ne
 800d264:	2301      	movne	r3, #1
 800d266:	2300      	moveq	r3, #0
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	461a      	mov	r2, r3
 800d26c:	6979      	ldr	r1, [r7, #20]
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f7ff fd88 	bl	800cd84 <cli_print_var>
      cli_print_linefeed();
 800d274:	f7ff f91c 	bl	800c4b0 <cli_print_linefeed>
    for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800d278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d27a:	3301      	adds	r3, #1
 800d27c:	667b      	str	r3, [r7, #100]	; 0x64
 800d27e:	4b9f      	ldr	r3, [pc, #636]	; (800d4fc <cli_cmd_set+0x2f4>)
 800d280:	881b      	ldrh	r3, [r3, #0]
 800d282:	461a      	mov	r2, r3
 800d284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d286:	4293      	cmp	r3, r2
 800d288:	d3d7      	bcc.n	800d23a <cli_cmd_set+0x32>
 800d28a:	e18e      	b.n	800d5aa <cli_cmd_set+0x3a2>
    }
  } else if ((eqptr = strstr(args, "=")) != NULL) {
 800d28c:	213d      	movs	r1, #61	; 0x3d
 800d28e:	6838      	ldr	r0, [r7, #0]
 800d290:	f00e fbee 	bl	801ba70 <strchr>
 800d294:	6478      	str	r0, [r7, #68]	; 0x44
 800d296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d298:	2b00      	cmp	r3, #0
 800d29a:	f000 8180 	beq.w	800d59e <cli_cmd_set+0x396>
    // has equals

    uint8_t variable_name_length = get_word_length(args, eqptr);
 800d29e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d2a0:	6838      	ldr	r0, [r7, #0]
 800d2a2:	f7ff fd84 	bl	800cdae <get_word_length>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    // skip the '=' and any ' ' characters
    eqptr++;
 800d2ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	647b      	str	r3, [r7, #68]	; 0x44
    eqptr = skip_space(eqptr);
 800d2b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d2b4:	f7ff f9ce 	bl	800c654 <skip_space>
 800d2b8:	6478      	str	r0, [r7, #68]	; 0x44

    const uint16_t index = cli_get_setting_index(args, variable_name_length);
 800d2ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d2be:	4619      	mov	r1, r3
 800d2c0:	6838      	ldr	r0, [r7, #0]
 800d2c2:	f7ff fd8d 	bl	800cde0 <cli_get_setting_index>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    if (index >= value_table_entry_count) {
 800d2cc:	4b8b      	ldr	r3, [pc, #556]	; (800d4fc <cli_cmd_set+0x2f4>)
 800d2ce:	881b      	ldrh	r3, [r3, #0]
 800d2d0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d304      	bcc.n	800d2e2 <cli_cmd_set+0xda>
      cli_print_error_linef(cmd_name, "INVALID NAME");
 800d2d8:	4989      	ldr	r1, [pc, #548]	; (800d500 <cli_cmd_set+0x2f8>)
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f7ff f9a0 	bl	800c620 <cli_print_error_linef>
      return;
 800d2e0:	e163      	b.n	800d5aa <cli_cmd_set+0x3a2>
    }
    const cli_value_t *val = &value_table[index];
 800d2e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d2e6:	4613      	mov	r3, r2
 800d2e8:	011b      	lsls	r3, r3, #4
 800d2ea:	4413      	add	r3, r2
 800d2ec:	4a81      	ldr	r2, [pc, #516]	; (800d4f4 <cli_cmd_set+0x2ec>)
 800d2ee:	4413      	add	r3, r2
 800d2f0:	63fb      	str	r3, [r7, #60]	; 0x3c

    bool value_changed = false;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

    switch (val->type & VALUE_MODE_MASK) {
 800d2f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2fa:	791b      	ldrb	r3, [r3, #4]
 800d2fc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d300:	2b60      	cmp	r3, #96	; 0x60
 800d302:	d047      	beq.n	800d394 <cli_cmd_set+0x18c>
 800d304:	2b60      	cmp	r3, #96	; 0x60
 800d306:	f300 8128 	bgt.w	800d55a <cli_cmd_set+0x352>
 800d30a:	2b40      	cmp	r3, #64	; 0x40
 800d30c:	f000 8096 	beq.w	800d43c <cli_cmd_set+0x234>
 800d310:	2b40      	cmp	r3, #64	; 0x40
 800d312:	f300 8122 	bgt.w	800d55a <cli_cmd_set+0x352>
 800d316:	2b00      	cmp	r3, #0
 800d318:	d002      	beq.n	800d320 <cli_cmd_set+0x118>
 800d31a:	2b20      	cmp	r3, #32
 800d31c:	d03a      	beq.n	800d394 <cli_cmd_set+0x18c>
 800d31e:	e11c      	b.n	800d55a <cli_cmd_set+0x352>
      case MODE_DIRECT: {
        if ((val->type & VALUE_TYPE_MASK) == VAR_UINT32) {
 800d320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d322:	791b      	ldrb	r3, [r3, #4]
 800d324:	f003 0307 	and.w	r3, r3, #7
 800d328:	2b04      	cmp	r3, #4
 800d32a:	d114      	bne.n	800d356 <cli_cmd_set+0x14e>
          uint32_t value = strtoul(eqptr, NULL, 10);
 800d32c:	220a      	movs	r2, #10
 800d32e:	2100      	movs	r1, #0
 800d330:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d332:	f00e fd01 	bl	801bd38 <strtoul>
 800d336:	61b8      	str	r0, [r7, #24]

          if (value <= val->config.u32_max) {
 800d338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d33a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800d33e:	69ba      	ldr	r2, [r7, #24]
 800d340:	429a      	cmp	r2, r3
 800d342:	f200 8107 	bhi.w	800d554 <cli_cmd_set+0x34c>
            cli_set_var(val, value);
 800d346:	69b9      	ldr	r1, [r7, #24]
 800d348:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d34a:	f000 f9cb 	bl	800d6e4 <cli_set_var>
            value_changed = true;
 800d34e:	2301      	movs	r3, #1
 800d350:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            value_changed = true;
          }
        }
      }

      break;
 800d354:	e0fe      	b.n	800d554 <cli_cmd_set+0x34c>
          int value = atoi(eqptr);
 800d356:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d358:	f00e faf6 	bl	801b948 <atoi>
 800d35c:	61f8      	str	r0, [r7, #28]
          get_min_max(val, &min, &max);
 800d35e:	f107 020c 	add.w	r2, r7, #12
 800d362:	f107 0310 	add.w	r3, r7, #16
 800d366:	4619      	mov	r1, r3
 800d368:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d36a:	f7ff f854 	bl	800c416 <get_min_max>
          if (value >= min && value <= max) {
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	69fa      	ldr	r2, [r7, #28]
 800d372:	429a      	cmp	r2, r3
 800d374:	f2c0 80ee 	blt.w	800d554 <cli_cmd_set+0x34c>
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	69fa      	ldr	r2, [r7, #28]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	f300 80e9 	bgt.w	800d554 <cli_cmd_set+0x34c>
            cli_set_var(val, value);
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	4619      	mov	r1, r3
 800d386:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d388:	f000 f9ac 	bl	800d6e4 <cli_set_var>
            value_changed = true;
 800d38c:	2301      	movs	r3, #1
 800d38e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
      break;
 800d392:	e0df      	b.n	800d554 <cli_cmd_set+0x34c>
      case MODE_LOOKUP:
      case MODE_BITSET: {
        int tableIndex;
        if ((val->type & VALUE_MODE_MASK) == MODE_BITSET) {
 800d394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d396:	791b      	ldrb	r3, [r3, #4]
 800d398:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d39c:	2b60      	cmp	r3, #96	; 0x60
 800d39e:	d102      	bne.n	800d3a6 <cli_cmd_set+0x19e>
          tableIndex = TABLE_BOOTSTATE;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d3a4:	e002      	b.n	800d3ac <cli_cmd_set+0x1a4>
        } else {
          tableIndex = val->config.lookup.table_index;
 800d3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3a8:	795b      	ldrb	r3, [r3, #5]
 800d3aa:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        const lookup_table_entry_t *tableEntry = &lookup_tables[tableIndex];
 800d3ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3ae:	00db      	lsls	r3, r3, #3
 800d3b0:	4a54      	ldr	r2, [pc, #336]	; (800d504 <cli_cmd_set+0x2fc>)
 800d3b2:	4413      	add	r3, r2
 800d3b4:	623b      	str	r3, [r7, #32]
        bool matched = false;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        for (uint32_t tableValueIndex = 0; tableValueIndex < tableEntry->value_count && !matched; tableValueIndex++) {
 800d3bc:	2300      	movs	r3, #0
 800d3be:	657b      	str	r3, [r7, #84]	; 0x54
 800d3c0:	e02d      	b.n	800d41e <cli_cmd_set+0x216>
          matched = tableEntry->values[tableValueIndex] && strcasecmp(tableEntry->values[tableValueIndex], eqptr) == 0;
 800d3c2:	6a3b      	ldr	r3, [r7, #32]
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	4413      	add	r3, r2
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d00e      	beq.n	800d3f0 <cli_cmd_set+0x1e8>
 800d3d2:	6a3b      	ldr	r3, [r7, #32]
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3d8:	009b      	lsls	r3, r3, #2
 800d3da:	4413      	add	r3, r2
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f00e fb29 	bl	801ba38 <strcasecmp>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d101      	bne.n	800d3f0 <cli_cmd_set+0x1e8>
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	e000      	b.n	800d3f2 <cli_cmd_set+0x1ea>
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800d3f6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d3fa:	f003 0301 	and.w	r3, r3, #1
 800d3fe:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

          if (matched) {
 800d402:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d406:	2b00      	cmp	r3, #0
 800d408:	d006      	beq.n	800d418 <cli_cmd_set+0x210>
            cli_set_var(val, tableValueIndex);
 800d40a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d40c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d40e:	f000 f969 	bl	800d6e4 <cli_set_var>
            value_changed = true;
 800d412:	2301      	movs	r3, #1
 800d414:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
        for (uint32_t tableValueIndex = 0; tableValueIndex < tableEntry->value_count && !matched; tableValueIndex++) {
 800d418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d41a:	3301      	adds	r3, #1
 800d41c:	657b      	str	r3, [r7, #84]	; 0x54
 800d41e:	6a3b      	ldr	r3, [r7, #32]
 800d420:	791b      	ldrb	r3, [r3, #4]
 800d422:	461a      	mov	r2, r3
 800d424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d426:	4293      	cmp	r3, r2
 800d428:	f080 8096 	bcs.w	800d558 <cli_cmd_set+0x350>
 800d42c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d430:	f083 0301 	eor.w	r3, r3, #1
 800d434:	b2db      	uxtb	r3, r3
 800d436:	2b00      	cmp	r3, #0
 800d438:	d1c3      	bne.n	800d3c2 <cli_cmd_set+0x1ba>
          }
        }
      } break;
 800d43a:	e08d      	b.n	800d558 <cli_cmd_set+0x350>
      case MODE_ARRAY: {
        const uint8_t array_length = val->config.array.length;
 800d43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d43e:	795b      	ldrb	r3, [r3, #5]
 800d440:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        char *valPtr = eqptr;
 800d444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d446:	653b      	str	r3, [r7, #80]	; 0x50

        int i = 0;
 800d448:	2300      	movs	r3, #0
 800d44a:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (i < array_length && valPtr != NULL) {
 800d44c:	e076      	b.n	800d53c <cli_cmd_set+0x334>
          // skip spaces
          valPtr = skip_space(valPtr);
 800d44e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d450:	f7ff f900 	bl	800c654 <skip_space>
 800d454:	6538      	str	r0, [r7, #80]	; 0x50

          // process substring starting at valPtr
          // note: no need to copy substrings for atoi()
          //       it stops at the first character that cannot be converted...
          switch (val->type & VALUE_TYPE_MASK) {
 800d456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d458:	791b      	ldrb	r3, [r3, #4]
 800d45a:	f003 0307 	and.w	r3, r3, #7
 800d45e:	3b01      	subs	r3, #1
 800d460:	2b03      	cmp	r3, #3
 800d462:	d80b      	bhi.n	800d47c <cli_cmd_set+0x274>
 800d464:	a201      	add	r2, pc, #4	; (adr r2, 800d46c <cli_cmd_set+0x264>)
 800d466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d46a:	bf00      	nop
 800d46c:	0800d499 	.word	0x0800d499
 800d470:	0800d4b5 	.word	0x0800d4b5
 800d474:	0800d4d3 	.word	0x0800d4d3
 800d478:	0800d509 	.word	0x0800d509
            default:
            case VAR_UINT8: {
              // fetch data pointer
              uint8_t *data = (uint8_t *)val->pdata + i;
 800d47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d47e:	f8d3 2009 	ldr.w	r2, [r3, #9]
 800d482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d484:	4413      	add	r3, r2
 800d486:	627b      	str	r3, [r7, #36]	; 0x24
              // store value
              *data = (uint8_t)atoi((const char *)valPtr);
 800d488:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d48a:	f00e fa5d 	bl	801b948 <atoi>
 800d48e:	4603      	mov	r3, r0
 800d490:	b2da      	uxtb	r2, r3
 800d492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d494:	701a      	strb	r2, [r3, #0]
            }

            break;
 800d496:	e047      	b.n	800d528 <cli_cmd_set+0x320>
            case VAR_INT8: {
              // fetch data pointer
              int8_t *data = (int8_t *)val->pdata + i;
 800d498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d49a:	f8d3 2009 	ldr.w	r2, [r3, #9]
 800d49e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4a0:	4413      	add	r3, r2
 800d4a2:	62bb      	str	r3, [r7, #40]	; 0x28
              // store value
              *data = (int8_t)atoi((const char *)valPtr);
 800d4a4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d4a6:	f00e fa4f 	bl	801b948 <atoi>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	b25a      	sxtb	r2, r3
 800d4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b0:	701a      	strb	r2, [r3, #0]
            }

            break;
 800d4b2:	e039      	b.n	800d528 <cli_cmd_set+0x320>
            case VAR_UINT16: {
              // fetch data pointer
              uint16_t *data = (uint16_t *)val->pdata + i;
 800d4b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4b6:	f8d3 2009 	ldr.w	r2, [r3, #9]
 800d4ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4bc:	005b      	lsls	r3, r3, #1
 800d4be:	4413      	add	r3, r2
 800d4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
              // store value
              *data = (uint16_t)atoi((const char *)valPtr);
 800d4c2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d4c4:	f00e fa40 	bl	801b948 <atoi>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	b29a      	uxth	r2, r3
 800d4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ce:	801a      	strh	r2, [r3, #0]
            }

            break;
 800d4d0:	e02a      	b.n	800d528 <cli_cmd_set+0x320>
            case VAR_INT16: {
              // fetch data pointer
              int16_t *data = (int16_t *)val->pdata + i;
 800d4d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4d4:	f8d3 2009 	ldr.w	r2, [r3, #9]
 800d4d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4da:	005b      	lsls	r3, r3, #1
 800d4dc:	4413      	add	r3, r2
 800d4de:	633b      	str	r3, [r7, #48]	; 0x30
              // store value
              *data = (int16_t)atoi((const char *)valPtr);
 800d4e0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d4e2:	f00e fa31 	bl	801b948 <atoi>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	b21a      	sxth	r2, r3
 800d4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ec:	801a      	strh	r2, [r3, #0]
            }

            break;
 800d4ee:	e01b      	b.n	800d528 <cli_cmd_set+0x320>
 800d4f0:	0801c8f4 	.word	0x0801c8f4
 800d4f4:	0801ceac 	.word	0x0801ceac
 800d4f8:	0801c8dc 	.word	0x0801c8dc
 800d4fc:	0801cece 	.word	0x0801cece
 800d500:	0801c8e4 	.word	0x0801c8e4
 800d504:	0801ce94 	.word	0x0801ce94
            case VAR_UINT32: {
              // fetch data pointer
              uint32_t *data = (uint32_t *)val->pdata + i;
 800d508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d50a:	f8d3 2009 	ldr.w	r2, [r3, #9]
 800d50e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	4413      	add	r3, r2
 800d514:	637b      	str	r3, [r7, #52]	; 0x34
              // store value
              *data = (uint32_t)strtoul((const char *)valPtr, NULL, 10);
 800d516:	220a      	movs	r2, #10
 800d518:	2100      	movs	r1, #0
 800d51a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d51c:	f00e fc0c 	bl	801bd38 <strtoul>
 800d520:	4602      	mov	r2, r0
 800d522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d524:	601a      	str	r2, [r3, #0]
            }

            break;
 800d526:	bf00      	nop
          }

          // find next comma (or end of string)
          valPtr = strchr(valPtr, ',') + 1;
 800d528:	212c      	movs	r1, #44	; 0x2c
 800d52a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d52c:	f00e faa0 	bl	801ba70 <strchr>
 800d530:	4603      	mov	r3, r0
 800d532:	3301      	adds	r3, #1
 800d534:	653b      	str	r3, [r7, #80]	; 0x50

          i++;
 800d536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d538:	3301      	adds	r3, #1
 800d53a:	64fb      	str	r3, [r7, #76]	; 0x4c
        while (i < array_length && valPtr != NULL) {
 800d53c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d540:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d542:	429a      	cmp	r2, r3
 800d544:	da02      	bge.n	800d54c <cli_cmd_set+0x344>
 800d546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d180      	bne.n	800d44e <cli_cmd_set+0x246>
        }
      }
        // mark as changed
        value_changed = true;
 800d54c:	2301      	movs	r3, #1
 800d54e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

        break;
 800d552:	e002      	b.n	800d55a <cli_cmd_set+0x352>
      break;
 800d554:	bf00      	nop
 800d556:	e000      	b.n	800d55a <cli_cmd_set+0x352>
      } break;
 800d558:	bf00      	nop
    }

    if (value_changed) {
 800d55a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d015      	beq.n	800d58e <cli_cmd_set+0x386>
      cli_printf("%s set to ", val->name);
 800d562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4619      	mov	r1, r3
 800d568:	4811      	ldr	r0, [pc, #68]	; (800d5b0 <cli_cmd_set+0x3a8>)
 800d56a:	f7fe ffed 	bl	800c548 <cli_printf>
      cli_print_var(cmd_name, val, 0);
 800d56e:	2200      	movs	r2, #0
 800d570:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f7ff fc06 	bl	800cd84 <cli_print_var>
      if (val->cb != NULL) {
 800d578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d57a:	f8d3 300d 	ldr.w	r3, [r3, #13]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d012      	beq.n	800d5a8 <cli_cmd_set+0x3a0>
        val->cb(val);
 800d582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d584:	f8d3 300d 	ldr.w	r3, [r3, #13]
 800d588:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d58a:	4798      	blx	r3
    } else {
      cli_print_error_linef(cmd_name, "INVALID VALUE");
      cli_print_var_range(val);
    }

    return;
 800d58c:	e00c      	b.n	800d5a8 <cli_cmd_set+0x3a0>
      cli_print_error_linef(cmd_name, "INVALID VALUE");
 800d58e:	4909      	ldr	r1, [pc, #36]	; (800d5b4 <cli_cmd_set+0x3ac>)
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f7ff f845 	bl	800c620 <cli_print_error_linef>
      cli_print_var_range(val);
 800d596:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d598:	f7ff fc5c 	bl	800ce54 <cli_print_var_range>
    return;
 800d59c:	e004      	b.n	800d5a8 <cli_cmd_set+0x3a0>
  } else {
    // no equals, check for matching variables.
    cli_cmd_get(cmd_name, args);
 800d59e:	6839      	ldr	r1, [r7, #0]
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f7ff fdd9 	bl	800d158 <cli_cmd_get>
 800d5a6:	e000      	b.n	800d5aa <cli_cmd_set+0x3a2>
    return;
 800d5a8:	bf00      	nop
  }
}
 800d5aa:	3768      	adds	r7, #104	; 0x68
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	0801c908 	.word	0x0801c908
 800d5b4:	0801c914 	.word	0x0801c914

0800d5b8 <cli_cmd_defaults>:


static void cli_cmd_defaults(const char *cmd_name, char *args) {
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
  config_defaults();
 800d5c2:	f000 f939 	bl	800d838 <config_defaults>
  cli_print_line("Reset to default values");
 800d5c6:	4803      	ldr	r0, [pc, #12]	; (800d5d4 <cli_cmd_defaults+0x1c>)
 800d5c8:	f7fe ff7c 	bl	800c4c4 <cli_print_line>
}
 800d5cc:	bf00      	nop
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	0801c924 	.word	0x0801c924

0800d5d8 <cli_cmd_dump>:

static void cli_cmd_dump(const char *cmd_name, char *args) {
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b086      	sub	sp, #24
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
  const uint32_t len = strlen(args);
 800d5e2:	6838      	ldr	r0, [r7, #0]
 800d5e4:	f7fe fd2c 	bl	800c040 <strlen>
 800d5e8:	6138      	str	r0, [r7, #16]
  cli_printf("#Configuration dump");
 800d5ea:	481b      	ldr	r0, [pc, #108]	; (800d658 <cli_cmd_dump+0x80>)
 800d5ec:	f7fe ffac 	bl	800c548 <cli_printf>
  cli_print_linefeed();
 800d5f0:	f7fe ff5e 	bl	800c4b0 <cli_print_linefeed>
  for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	617b      	str	r3, [r7, #20]
 800d5f8:	e021      	b.n	800d63e <cli_cmd_dump+0x66>
    const cli_value_t *val = &value_table[i];
 800d5fa:	697a      	ldr	r2, [r7, #20]
 800d5fc:	4613      	mov	r3, r2
 800d5fe:	011b      	lsls	r3, r3, #4
 800d600:	4413      	add	r3, r2
 800d602:	4a16      	ldr	r2, [pc, #88]	; (800d65c <cli_cmd_dump+0x84>)
 800d604:	4413      	add	r3, r2
 800d606:	60fb      	str	r3, [r7, #12]
    cli_printf("set %s = ", value_table[i].name);
 800d608:	4914      	ldr	r1, [pc, #80]	; (800d65c <cli_cmd_dump+0x84>)
 800d60a:	697a      	ldr	r2, [r7, #20]
 800d60c:	4613      	mov	r3, r2
 800d60e:	011b      	lsls	r3, r3, #4
 800d610:	4413      	add	r3, r2
 800d612:	440b      	add	r3, r1
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4619      	mov	r1, r3
 800d618:	4811      	ldr	r0, [pc, #68]	; (800d660 <cli_cmd_dump+0x88>)
 800d61a:	f7fe ff95 	bl	800c548 <cli_printf>
    // when len is 1 (when * is passed as argument), it will print min/max values as well
    cli_print_var(cmd_name, val, len);
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	2b00      	cmp	r3, #0
 800d622:	bf14      	ite	ne
 800d624:	2301      	movne	r3, #1
 800d626:	2300      	moveq	r3, #0
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	461a      	mov	r2, r3
 800d62c:	68f9      	ldr	r1, [r7, #12]
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f7ff fba8 	bl	800cd84 <cli_print_var>
    cli_print_linefeed();
 800d634:	f7fe ff3c 	bl	800c4b0 <cli_print_linefeed>
  for (uint32_t i = 0; i < value_table_entry_count; i++) {
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	3301      	adds	r3, #1
 800d63c:	617b      	str	r3, [r7, #20]
 800d63e:	4b09      	ldr	r3, [pc, #36]	; (800d664 <cli_cmd_dump+0x8c>)
 800d640:	881b      	ldrh	r3, [r3, #0]
 800d642:	461a      	mov	r2, r3
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	4293      	cmp	r3, r2
 800d648:	d3d7      	bcc.n	800d5fa <cli_cmd_dump+0x22>
  }
  cli_printf("#End of configuration dump");
 800d64a:	4807      	ldr	r0, [pc, #28]	; (800d668 <cli_cmd_dump+0x90>)
 800d64c:	f7fe ff7c 	bl	800c548 <cli_printf>
}
 800d650:	bf00      	nop
 800d652:	3718      	adds	r7, #24
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	0801c93c 	.word	0x0801c93c
 800d65c:	0801ceac 	.word	0x0801ceac
 800d660:	0801c950 	.word	0x0801c950
 800d664:	0801cece 	.word	0x0801cece
 800d668:	0801c95c 	.word	0x0801c95c

0800d66c <cli_cmd_status>:

static void cli_cmd_status(const char *cmd_name, char *args) {
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	6039      	str	r1, [r7, #0]
  //const lookup_table_entry_t *p_boot_table = &lookup_tables[TABLE_BOOTSTATE];
  //const lookup_table_entry_t *p_event_table = &lookup_tables[TABLE_EVENTS];
  cli_printf("System time: %lu ticks\n", osKernelGetTickCount());
 800d676:	f00a f9a7 	bl	80179c8 <osKernelGetTickCount>
 800d67a:	4603      	mov	r3, r0
 800d67c:	4619      	mov	r1, r3
 800d67e:	4803      	ldr	r0, [pc, #12]	; (800d68c <cli_cmd_status+0x20>)
 800d680:	f7fe ff62 	bl	800c548 <cli_printf>
}
 800d684:	bf00      	nop
 800d686:	3708      	adds	r7, #8
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}
 800d68c:	0801c978 	.word	0x0801c978

0800d690 <cli_cmd_version>:

static void cli_cmd_version(const char *cmd_name, char *args) {
 800d690:	b590      	push	{r4, r7, lr}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  /* TODO: Store the board name somewhere else. */
  cli_printf("Board: %s\n", "Reefing System");
 800d69a:	4909      	ldr	r1, [pc, #36]	; (800d6c0 <cli_cmd_version+0x30>)
 800d69c:	4809      	ldr	r0, [pc, #36]	; (800d6c4 <cli_cmd_version+0x34>)
 800d69e:	f7fe ff53 	bl	800c548 <cli_printf>
  cli_printf("CPU ID: 0x%lx, Revision: 0x%lx\n", HAL_GetDEVID(), HAL_GetREVID());
 800d6a2:	f002 fb8f 	bl	800fdc4 <HAL_GetDEVID>
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	f002 fb80 	bl	800fdac <HAL_GetREVID>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	4621      	mov	r1, r4
 800d6b2:	4805      	ldr	r0, [pc, #20]	; (800d6c8 <cli_cmd_version+0x38>)
 800d6b4:	f7fe ff48 	bl	800c548 <cli_printf>
}
 800d6b8:	bf00      	nop
 800d6ba:	370c      	adds	r7, #12
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd90      	pop	{r4, r7, pc}
 800d6c0:	0801c990 	.word	0x0801c990
 800d6c4:	0801c9a0 	.word	0x0801c9a0
 800d6c8:	0801c9ac 	.word	0x0801c9ac

0800d6cc <cli_cmd_log_enable>:

static void cli_cmd_log_enable(const char *cmd_name, char *args) { log_enable(); }
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
 800d6d6:	f002 fa2b 	bl	800fb30 <log_enable>
 800d6da:	bf00      	nop
 800d6dc:	3708      	adds	r7, #8
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}
	...

0800d6e4 <cli_set_var>:


static void cli_set_var(const cli_value_t *var, const uint32_t value) {
 800d6e4:	b480      	push	{r7}
 800d6e6:	b087      	sub	sp, #28
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
  void *ptr = var->pdata;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f8d3 3009 	ldr.w	r3, [r3, #9]
 800d6f4:	613b      	str	r3, [r7, #16]
  uint32_t work_value;
  uint32_t mask;

  if ((var->type & VALUE_MODE_MASK) == MODE_BITSET) {
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	791b      	ldrb	r3, [r3, #4]
 800d6fa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d6fe:	2b60      	cmp	r3, #96	; 0x60
 800d700:	d160      	bne.n	800d7c4 <cli_set_var+0xe0>
    switch (var->type & VALUE_TYPE_MASK) {
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	791b      	ldrb	r3, [r3, #4]
 800d706:	f003 0307 	and.w	r3, r3, #7
 800d70a:	2b04      	cmp	r3, #4
 800d70c:	d041      	beq.n	800d792 <cli_set_var+0xae>
 800d70e:	2b04      	cmp	r3, #4
 800d710:	f300 8084 	bgt.w	800d81c <cli_set_var+0x138>
 800d714:	2b00      	cmp	r3, #0
 800d716:	d002      	beq.n	800d71e <cli_set_var+0x3a>
 800d718:	2b02      	cmp	r3, #2
 800d71a:	d01d      	beq.n	800d758 <cli_set_var+0x74>
      case VAR_UINT32:
        *(uint32_t *)ptr = value;
        break;
    }
  }
}
 800d71c:	e07e      	b.n	800d81c <cli_set_var+0x138>
        mask = (1 << var->config.bitpos) & 0xff;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	795b      	ldrb	r3, [r3, #5]
 800d722:	461a      	mov	r2, r3
 800d724:	2301      	movs	r3, #1
 800d726:	4093      	lsls	r3, r2
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	60fb      	str	r3, [r7, #12]
        if (value) {
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d006      	beq.n	800d740 <cli_set_var+0x5c>
          work_value = *(uint8_t *)ptr | mask;
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	461a      	mov	r2, r3
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	4313      	orrs	r3, r2
 800d73c:	617b      	str	r3, [r7, #20]
 800d73e:	e006      	b.n	800d74e <cli_set_var+0x6a>
          work_value = *(uint8_t *)ptr & ~mask;
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	461a      	mov	r2, r3
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	43db      	mvns	r3, r3
 800d74a:	4013      	ands	r3, r2
 800d74c:	617b      	str	r3, [r7, #20]
        *(uint8_t *)ptr = work_value;
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	b2da      	uxtb	r2, r3
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	701a      	strb	r2, [r3, #0]
        break;
 800d756:	e061      	b.n	800d81c <cli_set_var+0x138>
        mask = (1 << var->config.bitpos) & 0xffff;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	795b      	ldrb	r3, [r3, #5]
 800d75c:	461a      	mov	r2, r3
 800d75e:	2301      	movs	r3, #1
 800d760:	4093      	lsls	r3, r2
 800d762:	b29b      	uxth	r3, r3
 800d764:	60fb      	str	r3, [r7, #12]
        if (value) {
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d006      	beq.n	800d77a <cli_set_var+0x96>
          work_value = *(uint16_t *)ptr | mask;
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	881b      	ldrh	r3, [r3, #0]
 800d770:	461a      	mov	r2, r3
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	4313      	orrs	r3, r2
 800d776:	617b      	str	r3, [r7, #20]
 800d778:	e006      	b.n	800d788 <cli_set_var+0xa4>
          work_value = *(uint16_t *)ptr & ~mask;
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	881b      	ldrh	r3, [r3, #0]
 800d77e:	461a      	mov	r2, r3
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	43db      	mvns	r3, r3
 800d784:	4013      	ands	r3, r2
 800d786:	617b      	str	r3, [r7, #20]
        *(uint16_t *)ptr = work_value;
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	b29a      	uxth	r2, r3
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	801a      	strh	r2, [r3, #0]
        break;
 800d790:	e044      	b.n	800d81c <cli_set_var+0x138>
        mask = 1 << var->config.bitpos;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	795b      	ldrb	r3, [r3, #5]
 800d796:	461a      	mov	r2, r3
 800d798:	2301      	movs	r3, #1
 800d79a:	4093      	lsls	r3, r2
 800d79c:	60fb      	str	r3, [r7, #12]
        if (value) {
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d005      	beq.n	800d7b0 <cli_set_var+0xcc>
          work_value = *(uint32_t *)ptr | mask;
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	68fa      	ldr	r2, [r7, #12]
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	617b      	str	r3, [r7, #20]
 800d7ae:	e005      	b.n	800d7bc <cli_set_var+0xd8>
          work_value = *(uint32_t *)ptr & ~mask;
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	43db      	mvns	r3, r3
 800d7b8:	4013      	ands	r3, r2
 800d7ba:	617b      	str	r3, [r7, #20]
        *(uint32_t *)ptr = work_value;
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	697a      	ldr	r2, [r7, #20]
 800d7c0:	601a      	str	r2, [r3, #0]
        break;
 800d7c2:	e02b      	b.n	800d81c <cli_set_var+0x138>
    switch (var->type & VALUE_TYPE_MASK) {
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	791b      	ldrb	r3, [r3, #4]
 800d7c8:	f003 0307 	and.w	r3, r3, #7
 800d7cc:	2b04      	cmp	r3, #4
 800d7ce:	d825      	bhi.n	800d81c <cli_set_var+0x138>
 800d7d0:	a201      	add	r2, pc, #4	; (adr r2, 800d7d8 <cli_set_var+0xf4>)
 800d7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d6:	bf00      	nop
 800d7d8:	0800d7ed 	.word	0x0800d7ed
 800d7dc:	0800d7f7 	.word	0x0800d7f7
 800d7e0:	0800d801 	.word	0x0800d801
 800d7e4:	0800d80b 	.word	0x0800d80b
 800d7e8:	0800d815 	.word	0x0800d815
        *(uint8_t *)ptr = value;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	b2da      	uxtb	r2, r3
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	701a      	strb	r2, [r3, #0]
        break;
 800d7f4:	e012      	b.n	800d81c <cli_set_var+0x138>
        *(int8_t *)ptr = value;
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	b25a      	sxtb	r2, r3
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	701a      	strb	r2, [r3, #0]
        break;
 800d7fe:	e00d      	b.n	800d81c <cli_set_var+0x138>
        *(uint16_t *)ptr = value;
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	b29a      	uxth	r2, r3
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	801a      	strh	r2, [r3, #0]
        break;
 800d808:	e008      	b.n	800d81c <cli_set_var+0x138>
        *(int16_t *)ptr = value;
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	b21a      	sxth	r2, r3
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	801a      	strh	r2, [r3, #0]
        break;
 800d812:	e003      	b.n	800d81c <cli_set_var+0x138>
        *(uint32_t *)ptr = value;
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	683a      	ldr	r2, [r7, #0]
 800d818:	601a      	str	r2, [r3, #0]
        break;
 800d81a:	bf00      	nop
}
 800d81c:	bf00      	nop
 800d81e:	371c      	adds	r7, #28
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr

0800d828 <config_init>:
									  .config.timer_duration = 0};

config_u global_config = {};


void config_init() {
 800d828:	b480      	push	{r7}
 800d82a:	af00      	add	r7, sp, #0

}
 800d82c:	bf00      	nop
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr
	...

0800d838 <config_defaults>:

void config_defaults() {
 800d838:	b490      	push	{r4, r7}
 800d83a:	af00      	add	r7, sp, #0
	memcpy(&global_config, &DEFAULT_CONFIG, sizeof(global_config));
 800d83c:	4a04      	ldr	r2, [pc, #16]	; (800d850 <config_defaults+0x18>)
 800d83e:	4b05      	ldr	r3, [pc, #20]	; (800d854 <config_defaults+0x1c>)
 800d840:	4614      	mov	r4, r2
 800d842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800d848:	bf00      	nop
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bc90      	pop	{r4, r7}
 800d84e:	4770      	bx	lr
 800d850:	20000444 	.word	0x20000444
 800d854:	0801ced0 	.word	0x0801ced0

0800d858 <config_load>:

/** persistence functions **/
void config_load() {
 800d858:	b580      	push	{r7, lr}
 800d85a:	af00      	add	r7, sp, #0
  ee_read(0, sizeof(config_t), global_config.config_array);
 800d85c:	4a03      	ldr	r2, [pc, #12]	; (800d86c <config_load+0x14>)
 800d85e:	2110      	movs	r1, #16
 800d860:	2000      	movs	r0, #0
 800d862:	f000 f84d 	bl	800d900 <ee_read>
}
 800d866:	bf00      	nop
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	20000444 	.word	0x20000444

0800d870 <config_save>:


bool config_save() {
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
  bool status = false;
 800d876:	2300      	movs	r3, #0
 800d878:	71fb      	strb	r3, [r7, #7]
  status = ee_format();
 800d87a:	f000 f817 	bl	800d8ac <ee_format>
 800d87e:	4603      	mov	r3, r0
 800d880:	71fb      	strb	r3, [r7, #7]
  if(status == false) return status;
 800d882:	79fb      	ldrb	r3, [r7, #7]
 800d884:	f083 0301 	eor.w	r3, r3, #1
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d001      	beq.n	800d892 <config_save+0x22>
 800d88e:	79fb      	ldrb	r3, [r7, #7]
 800d890:	e005      	b.n	800d89e <config_save+0x2e>
  return ee_write(0, sizeof(config_t), global_config.config_array);
 800d892:	4a05      	ldr	r2, [pc, #20]	; (800d8a8 <config_save+0x38>)
 800d894:	2110      	movs	r1, #16
 800d896:	2000      	movs	r0, #0
 800d898:	f000 f861 	bl	800d95e <ee_write>
 800d89c:	4603      	mov	r3, r0
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3708      	adds	r7, #8
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	20000444 	.word	0x20000444

0800d8ac <ee_format>:
{
  return true;
}
//##########################################################################################################
bool ee_format()
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b086      	sub	sp, #24
 800d8b0:	af00      	add	r7, sp, #0
  uint32_t error;
  HAL_FLASH_Unlock();
 800d8b2:	f002 ffef 	bl	8010894 <HAL_FLASH_Unlock>
  FLASH_EraseInitTypeDef flashErase;

  flashErase.NbSectors = 1;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	60fb      	str	r3, [r7, #12]
  flashErase.Sector =  _EE_USE_FLASH_PAGE_OR_SECTOR;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	60bb      	str	r3, [r7, #8]
  flashErase.TypeErase = FLASH_TYPEERASE_SECTORS;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	603b      	str	r3, [r7, #0]
  flashErase.Banks = _EE_FLASH_BANK;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	607b      	str	r3, [r7, #4]
  flashErase.VoltageRange = _EE_VOLTAGE_RANGE;
 800d8c6:	2302      	movs	r3, #2
 800d8c8:	613b      	str	r3, [r7, #16]

  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 800d8ca:	f107 0214 	add.w	r2, r7, #20
 800d8ce:	463b      	mov	r3, r7
 800d8d0:	4611      	mov	r1, r2
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f003 f950 	bl	8010b78 <HAL_FLASHEx_Erase>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d109      	bne.n	800d8f2 <ee_format+0x46>
  {
    HAL_FLASH_Lock();
 800d8de:	f002 fffb 	bl	80108d8 <HAL_FLASH_Lock>
    if (error != 0xFFFFFFFF)
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e8:	d001      	beq.n	800d8ee <ee_format+0x42>
      return false;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	e004      	b.n	800d8f8 <ee_format+0x4c>
    else
    {
      return true;
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e002      	b.n	800d8f8 <ee_format+0x4c>
    }
  }
  HAL_FLASH_Lock();
 800d8f2:	f002 fff1 	bl	80108d8 <HAL_FLASH_Lock>
  return false;
 800d8f6:	2300      	movs	r3, #0
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3718      	adds	r7, #24
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}

0800d900 <ee_read>:
//##########################################################################################################
bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 800d900:	b480      	push	{r7}
 800d902:	b087      	sub	sp, #28
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	60b9      	str	r1, [r7, #8]
 800d90a:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	4413      	add	r3, r2
 800d912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d916:	d901      	bls.n	800d91c <ee_read+0x1c>
    return false;
 800d918:	2300      	movs	r3, #0
 800d91a:	e01a      	b.n	800d952 <ee_read+0x52>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	617b      	str	r3, [r7, #20]
 800d920:	e010      	b.n	800d944 <ee_read+0x44>
  {
    if (data != NULL)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00a      	beq.n	800d93e <ee_read+0x3e>
    {
      *data = (*(uint8_t*) (i + _EE_ADDR_INUSE));
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800d92e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800d932:	781a      	ldrb	r2, [r3, #0]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	701a      	strb	r2, [r3, #0]
      data++;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	3301      	adds	r3, #1
 800d93c:	607b      	str	r3, [r7, #4]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	3301      	adds	r3, #1
 800d942:	617b      	str	r3, [r7, #20]
 800d944:	68ba      	ldr	r2, [r7, #8]
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	4413      	add	r3, r2
 800d94a:	697a      	ldr	r2, [r7, #20]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d3e8      	bcc.n	800d922 <ee_read+0x22>
    }
  }
  return true;
 800d950:	2301      	movs	r3, #1
}
 800d952:	4618      	mov	r0, r3
 800d954:	371c      	adds	r7, #28
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr

0800d95e <ee_write>:
//##########################################################################################################
bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 800d95e:	b580      	push	{r7, lr}
 800d960:	b086      	sub	sp, #24
 800d962:	af00      	add	r7, sp, #0
 800d964:	60f8      	str	r0, [r7, #12]
 800d966:	60b9      	str	r1, [r7, #8]
 800d968:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 800d96a:	68fa      	ldr	r2, [r7, #12]
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	4413      	add	r3, r2
 800d970:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d974:	d901      	bls.n	800d97a <ee_write+0x1c>
    return false;
 800d976:	2300      	movs	r3, #0
 800d978:	e02b      	b.n	800d9d2 <ee_write+0x74>
  if (data == NULL)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d101      	bne.n	800d984 <ee_write+0x26>
    return false;
 800d980:	2300      	movs	r3, #0
 800d982:	e026      	b.n	800d9d2 <ee_write+0x74>
  HAL_FLASH_Unlock();
 800d984:	f002 ff86 	bl	8010894 <HAL_FLASH_Unlock>
  for (uint32_t i = 0; i < len ; i++)
 800d988:	2300      	movs	r3, #0
 800d98a:	617b      	str	r3, [r7, #20]
 800d98c:	e01a      	b.n	800d9c4 <ee_write+0x66>
  {		
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i])) != HAL_OK)
 800d98e:	697a      	ldr	r2, [r7, #20]
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	4413      	add	r3, r2
 800d994:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800d998:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	4413      	add	r3, r2
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	b2da      	uxtb	r2, r3
 800d9a6:	f04f 0300 	mov.w	r3, #0
 800d9aa:	2000      	movs	r0, #0
 800d9ac:	f002 ff1e 	bl	80107ec <HAL_FLASH_Program>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d003      	beq.n	800d9be <ee_write+0x60>
    {
      HAL_FLASH_Lock();
 800d9b6:	f002 ff8f 	bl	80108d8 <HAL_FLASH_Lock>
      return false;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	e009      	b.n	800d9d2 <ee_write+0x74>
  for (uint32_t i = 0; i < len ; i++)
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	617b      	str	r3, [r7, #20]
 800d9c4:	697a      	ldr	r2, [r7, #20]
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d3e0      	bcc.n	800d98e <ee_write+0x30>
    }
  }	
  HAL_FLASH_Lock();
 800d9cc:	f002 ff84 	bl	80108d8 <HAL_FLASH_Lock>
  return true;
 800d9d0:	2301      	movs	r3, #1
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3718      	adds	r7, #24
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
	...

0800d9dc <ADC_Select>:

#include "adc.h"

extern ADC_HandleTypeDef hadc1;

void ADC_Select(adc_source_t channel) {
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b086      	sub	sp, #24
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef sConfig = {0};
 800d9e6:	f107 0308 	add.w	r3, r7, #8
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	601a      	str	r2, [r3, #0]
 800d9ee:	605a      	str	r2, [r3, #4]
 800d9f0:	609a      	str	r2, [r3, #8]
 800d9f2:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = (uint32_t)channel;
 800d9f4:	79fb      	ldrb	r3, [r7, #7]
 800d9f6:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800d9fc:	2303      	movs	r3, #3
 800d9fe:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 800da00:	f107 0308 	add.w	r3, r7, #8
 800da04:	4619      	mov	r1, r3
 800da06:	4804      	ldr	r0, [pc, #16]	; (800da18 <ADC_Select+0x3c>)
 800da08:	f002 fbae 	bl	8010168 <HAL_ADC_ConfigChannel>
 800da0c:	4603      	mov	r3, r0
 800da0e:	2b00      	cmp	r3, #0
	return;
	}
}
 800da10:	3718      	adds	r7, #24
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	20005e50 	.word	0x20005e50

0800da1c <ADC_Get>:

uint32_t ADC_Get(adc_source_t channel){
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b084      	sub	sp, #16
 800da20:	af00      	add	r7, sp, #0
 800da22:	4603      	mov	r3, r0
 800da24:	71fb      	strb	r3, [r7, #7]
	uint32_t value;
	ADC_Select(channel);
 800da26:	79fb      	ldrb	r3, [r7, #7]
 800da28:	4618      	mov	r0, r3
 800da2a:	f7ff ffd7 	bl	800d9dc <ADC_Select>
	HAL_ADC_Start(&hadc1);
 800da2e:	480a      	ldr	r0, [pc, #40]	; (800da58 <ADC_Get+0x3c>)
 800da30:	f002 fa1a 	bl	800fe68 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800da34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800da38:	4807      	ldr	r0, [pc, #28]	; (800da58 <ADC_Get+0x3c>)
 800da3a:	f002 fafc 	bl	8010036 <HAL_ADC_PollForConversion>
	value = HAL_ADC_GetValue(&hadc1);
 800da3e:	4806      	ldr	r0, [pc, #24]	; (800da58 <ADC_Get+0x3c>)
 800da40:	f002 fb84 	bl	801014c <HAL_ADC_GetValue>
 800da44:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(&hadc1);
 800da46:	4804      	ldr	r0, [pc, #16]	; (800da58 <ADC_Get+0x3c>)
 800da48:	f002 fac2 	bl	800ffd0 <HAL_ADC_Stop>
	return value;
 800da4c:	68fb      	ldr	r3, [r7, #12]
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	20005e50 	.word	0x20005e50

0800da5c <go_to_sleep>:
#include "main.h"
#include "sleep.h"

void go_to_sleep(){
 800da5c:	b580      	push	{r7, lr}
 800da5e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800da60:	2201      	movs	r2, #1
 800da62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800da66:	480e      	ldr	r0, [pc, #56]	; (800daa0 <go_to_sleep+0x44>)
 800da68:	f003 fb44 	bl	80110f4 <HAL_GPIO_WritePin>

	while((HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0));
 800da6c:	bf00      	nop
 800da6e:	2104      	movs	r1, #4
 800da70:	480c      	ldr	r0, [pc, #48]	; (800daa4 <go_to_sleep+0x48>)
 800da72:	f003 fb27 	bl	80110c4 <HAL_GPIO_ReadPin>
 800da76:	4603      	mov	r3, r0
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d0f8      	beq.n	800da6e <go_to_sleep+0x12>
	HAL_Delay(10);
 800da7c:	200a      	movs	r0, #10
 800da7e:	f002 f971 	bl	800fd64 <HAL_Delay>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800da82:	2008      	movs	r0, #8
 800da84:	f002 fe96 	bl	80107b4 <HAL_NVIC_EnableIRQ>
	/* Disable Systick interrupt */
	HAL_SuspendTick();
 800da88:	f000 fe44 	bl	800e714 <HAL_SuspendTick>

    /* Go to sleep */
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800da8c:	2101      	movs	r1, #1
 800da8e:	2001      	movs	r0, #1
 800da90:	f004 fce6 	bl	8012460 <HAL_PWR_EnterSTOPMode>

    /* Return from sleep */
    SystemClock_Config();
 800da94:	f000 f930 	bl	800dcf8 <SystemClock_Config>
    HAL_ResumeTick();
 800da98:	f000 fe4e 	bl	800e738 <HAL_ResumeTick>

}
 800da9c:	bf00      	nop
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	40020800 	.word	0x40020800
 800daa4:	40020000 	.word	0x40020000

0800daa8 <wake_up>:

void wake_up(){
 800daa8:	b480      	push	{r7}
 800daaa:	af00      	add	r7, sp, #0
	/* Clear Wake Up Flag */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800daac:	4b05      	ldr	r3, [pc, #20]	; (800dac4 <wake_up+0x1c>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4a04      	ldr	r2, [pc, #16]	; (800dac4 <wake_up+0x1c>)
 800dab2:	f043 0304 	orr.w	r3, r3, #4
 800dab6:	6013      	str	r3, [r2, #0]
}
 800dab8:	bf00      	nop
 800daba:	46bd      	mov	sp, r7
 800dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac0:	4770      	bx	lr
 800dac2:	bf00      	nop
 800dac4:	40007000 	.word	0x40007000

0800dac8 <platform_write>:
                             uint16_t len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	60f8      	str	r0, [r7, #12]
 800dad0:	607a      	str	r2, [r7, #4]
 800dad2:	461a      	mov	r2, r3
 800dad4:	460b      	mov	r3, r1
 800dad6:	72fb      	strb	r3, [r7, #11]
 800dad8:	4613      	mov	r3, r2
 800dada:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 800dadc:	2200      	movs	r2, #0
 800dade:	2104      	movs	r1, #4
 800dae0:	480c      	ldr	r0, [pc, #48]	; (800db14 <platform_write+0x4c>)
 800dae2:	f003 fb07 	bl	80110f4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 2);
 800dae6:	f107 010b 	add.w	r1, r7, #11
 800daea:	2302      	movs	r3, #2
 800daec:	2201      	movs	r2, #1
 800daee:	68f8      	ldr	r0, [r7, #12]
 800daf0:	f005 fa11 	bl	8012f16 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 2);
 800daf4:	893a      	ldrh	r2, [r7, #8]
 800daf6:	2302      	movs	r3, #2
 800daf8:	6879      	ldr	r1, [r7, #4]
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	f005 fa0b 	bl	8012f16 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 800db00:	2201      	movs	r2, #1
 800db02:	2104      	movs	r1, #4
 800db04:	4803      	ldr	r0, [pc, #12]	; (800db14 <platform_write+0x4c>)
 800db06:	f003 faf5 	bl	80110f4 <HAL_GPIO_WritePin>
  return 0;
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3710      	adds	r7, #16
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	40020400 	.word	0x40020400

0800db18 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	60f8      	str	r0, [r7, #12]
 800db20:	607a      	str	r2, [r7, #4]
 800db22:	461a      	mov	r2, r3
 800db24:	460b      	mov	r3, r1
 800db26:	72fb      	strb	r3, [r7, #11]
 800db28:	4613      	mov	r3, r2
 800db2a:	813b      	strh	r3, [r7, #8]
  reg |= 0x80;
 800db2c:	7afb      	ldrb	r3, [r7, #11]
 800db2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800db32:	b2db      	uxtb	r3, r3
 800db34:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 800db36:	2200      	movs	r2, #0
 800db38:	2104      	movs	r1, #4
 800db3a:	480e      	ldr	r0, [pc, #56]	; (800db74 <platform_read+0x5c>)
 800db3c:	f003 fada 	bl	80110f4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 800db40:	f107 010b 	add.w	r1, r7, #11
 800db44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800db48:	2201      	movs	r2, #1
 800db4a:	68f8      	ldr	r0, [r7, #12]
 800db4c:	f005 f9e3 	bl	8012f16 <HAL_SPI_Transmit>
  HAL_SPI_Receive(handle, bufp, len, 1000);
 800db50:	893a      	ldrh	r2, [r7, #8]
 800db52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800db56:	6879      	ldr	r1, [r7, #4]
 800db58:	68f8      	ldr	r0, [r7, #12]
 800db5a:	f005 fb18 	bl	801318e <HAL_SPI_Receive>
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_SET);
 800db5e:	2201      	movs	r2, #1
 800db60:	2104      	movs	r1, #4
 800db62:	4804      	ldr	r0, [pc, #16]	; (800db74 <platform_read+0x5c>)
 800db64:	f003 fac6 	bl	80110f4 <HAL_GPIO_WritePin>
  return 0;
 800db68:	2300      	movs	r3, #0
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3710      	adds	r7, #16
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop
 800db74:	40020400 	.word	0x40020400

0800db78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800db7e:	f002 f8af 	bl	800fce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800db82:	f000 f8b9 	bl	800dcf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800db86:	f000 fa6f 	bl	800e068 <MX_GPIO_Init>
  MX_ADC1_Init();
 800db8a:	f000 f91d 	bl	800ddc8 <MX_ADC1_Init>
  MX_TIM4_Init();
 800db8e:	f000 f9e7 	bl	800df60 <MX_TIM4_Init>
  MX_SPI1_Init();
 800db92:	f000 f979 	bl	800de88 <MX_SPI1_Init>
  MX_SPI2_Init();
 800db96:	f000 f9ad 	bl	800def4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800db9a:	f000 fa3b 	bl	800e014 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800db9e:	2008      	movs	r0, #8
 800dba0:	f002 fe16 	bl	80107d0 <HAL_NVIC_DisableIRQ>



  HAL_GPIO_WritePin(P_EN_CUT_GPIO_Port, P_EN_CUT_Pin, GPIO_PIN_SET);
 800dba4:	2201      	movs	r2, #1
 800dba6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dbaa:	483f      	ldr	r0, [pc, #252]	; (800dca8 <main+0x130>)
 800dbac:	f003 faa2 	bl	80110f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CUT_EN_GPIO_Port, CUT_EN_Pin, GPIO_PIN_SET);
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	2120      	movs	r1, #32
 800dbb4:	483c      	ldr	r0, [pc, #240]	; (800dca8 <main+0x130>)
 800dbb6:	f003 fa9d 	bl	80110f4 <HAL_GPIO_WritePin>

  dev_ctx.write_reg = platform_write;
 800dbba:	4b3c      	ldr	r3, [pc, #240]	; (800dcac <main+0x134>)
 800dbbc:	4a3c      	ldr	r2, [pc, #240]	; (800dcb0 <main+0x138>)
 800dbbe:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 800dbc0:	4b3a      	ldr	r3, [pc, #232]	; (800dcac <main+0x134>)
 800dbc2:	4a3c      	ldr	r2, [pc, #240]	; (800dcb4 <main+0x13c>)
 800dbc4:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &hspi1;
 800dbc6:	4b39      	ldr	r3, [pc, #228]	; (800dcac <main+0x134>)
 800dbc8:	4a3b      	ldr	r2, [pc, #236]	; (800dcb8 <main+0x140>)
 800dbca:	609a      	str	r2, [r3, #8]

  uint8_t whoamI;
  lsm6dsr_pin_int1_route_t int1_route;

  lsm6dsr_device_id_get(&dev_ctx, &whoamI);
 800dbcc:	1dfb      	adds	r3, r7, #7
 800dbce:	4619      	mov	r1, r3
 800dbd0:	4836      	ldr	r0, [pc, #216]	; (800dcac <main+0x134>)
 800dbd2:	f001 f9da 	bl	800ef8a <lsm6dsr_device_id_get>

  if (whoamI != LSM6DSR_ID)
 800dbd6:	79fb      	ldrb	r3, [r7, #7]
 800dbd8:	2b6b      	cmp	r3, #107	; 0x6b
 800dbda:	d000      	beq.n	800dbde <main+0x66>
      while (1);
 800dbdc:	e7fe      	b.n	800dbdc <main+0x64>

  lsm6dsr_reset_set(&dev_ctx, PROPERTY_ENABLE);
 800dbde:	2101      	movs	r1, #1
 800dbe0:	4832      	ldr	r0, [pc, #200]	; (800dcac <main+0x134>)
 800dbe2:	f001 f9e3 	bl	800efac <lsm6dsr_reset_set>
  HAL_Delay(10);
 800dbe6:	200a      	movs	r0, #10
 800dbe8:	f002 f8bc 	bl	800fd64 <HAL_Delay>

  /* Disable I3C interface */
  lsm6dsr_i3c_disable_set(&dev_ctx, LSM6DSR_I3C_DISABLE);
 800dbec:	2180      	movs	r1, #128	; 0x80
 800dbee:	482f      	ldr	r0, [pc, #188]	; (800dcac <main+0x134>)
 800dbf0:	f001 fa28 	bl	800f044 <lsm6dsr_i3c_disable_set>

  /* Enable Block Data Update */
  lsm6dsr_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 800dbf4:	2101      	movs	r1, #1
 800dbf6:	482d      	ldr	r0, [pc, #180]	; (800dcac <main+0x134>)
 800dbf8:	f001 f8c2 	bl	800ed80 <lsm6dsr_block_data_update_set>
  /* Set Output Data Rate */
  lsm6dsr_xl_data_rate_set(&dev_ctx, LSM6DSR_XL_ODR_12Hz5);
 800dbfc:	2101      	movs	r1, #1
 800dbfe:	482b      	ldr	r0, [pc, #172]	; (800dcac <main+0x134>)
 800dc00:	f000 fea0 	bl	800e944 <lsm6dsr_xl_data_rate_set>
  lsm6dsr_gy_data_rate_set(&dev_ctx, LSM6DSR_GY_ODR_12Hz5);
 800dc04:	2101      	movs	r1, #1
 800dc06:	4829      	ldr	r0, [pc, #164]	; (800dcac <main+0x134>)
 800dc08:	f000 ffbe 	bl	800eb88 <lsm6dsr_gy_data_rate_set>
  /* Set full scale */
  lsm6dsr_xl_full_scale_set(&dev_ctx, LSM6DSR_16g);
 800dc0c:	2101      	movs	r1, #1
 800dc0e:	4827      	ldr	r0, [pc, #156]	; (800dcac <main+0x134>)
 800dc10:	f000 fe72 	bl	800e8f8 <lsm6dsr_xl_full_scale_set>
  lsm6dsr_gy_full_scale_set(&dev_ctx, LSM6DSR_2000dps);
 800dc14:	210c      	movs	r1, #12
 800dc16:	4825      	ldr	r0, [pc, #148]	; (800dcac <main+0x134>)
 800dc18:	f000 ff90 	bl	800eb3c <lsm6dsr_gy_full_scale_set>
  */
  //lsm6dsr_xl_hp_path_on_out_set(&dev_ctx, LSM6DSR_LP_ODR_DIV_100);
  //lsm6dsr_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);

  /* Apply high-pass digital filter on Wake-Up function */
  lsm6dsr_xl_hp_path_internal_set(&dev_ctx, LSM6DSR_USE_SLOPE);
 800dc1c:	2100      	movs	r1, #0
 800dc1e:	4823      	ldr	r0, [pc, #140]	; (800dcac <main+0x134>)
 800dc20:	f001 f9ea 	bl	800eff8 <lsm6dsr_xl_hp_path_internal_set>
  /* Set Wake-Up threshold: 1 LSb corresponds to FS_XL/2^6 */
  lsm6dsr_wkup_threshold_set(&dev_ctx, 2);
 800dc24:	2102      	movs	r1, #2
 800dc26:	4821      	ldr	r0, [pc, #132]	; (800dcac <main+0x134>)
 800dc28:	f001 fc05 	bl	800f436 <lsm6dsr_wkup_threshold_set>

  /* interrupt generation on Wake-Up INT1 pin */
  lsm6dsr_pin_int1_route_get(&dev_ctx, &int1_route);
 800dc2c:	463b      	mov	r3, r7
 800dc2e:	4619      	mov	r1, r3
 800dc30:	481e      	ldr	r0, [pc, #120]	; (800dcac <main+0x134>)
 800dc32:	f001 fbb3 	bl	800f39c <lsm6dsr_pin_int1_route_get>
  int1_route.md1_cfg.int1_wu = PROPERTY_ENABLE;
 800dc36:	787b      	ldrb	r3, [r7, #1]
 800dc38:	f043 0320 	orr.w	r3, r3, #32
 800dc3c:	707b      	strb	r3, [r7, #1]
  lsm6dsr_pin_int1_route_set(&dev_ctx, &int1_route);
 800dc3e:	463b      	mov	r3, r7
 800dc40:	4619      	mov	r1, r3
 800dc42:	481a      	ldr	r0, [pc, #104]	; (800dcac <main+0x134>)
 800dc44:	f001 fa44 	bl	800f0d0 <lsm6dsr_pin_int1_route_set>



  fifo_init(&usb_output_fifo, usb_fifo_out_buffer, USB_OUTPUT_BUFFER_SIZE);
 800dc48:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc4c:	491b      	ldr	r1, [pc, #108]	; (800dcbc <main+0x144>)
 800dc4e:	481c      	ldr	r0, [pc, #112]	; (800dcc0 <main+0x148>)
 800dc50:	f001 fd9c 	bl	800f78c <fifo_init>
  fifo_init(&usb_input_fifo, usb_fifo_in_buffer, USB_INPUT_BUFFER_SIZE);
 800dc54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc58:	491a      	ldr	r1, [pc, #104]	; (800dcc4 <main+0x14c>)
 800dc5a:	481b      	ldr	r0, [pc, #108]	; (800dcc8 <main+0x150>)
 800dc5c:	f001 fd96 	bl	800f78c <fifo_init>

  log_enable();
 800dc60:	f001 ff66 	bl	800fb30 <log_enable>
  //dcdc_enable();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800dc64:	f009 fe66 	bl	8017934 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800dc68:	4a18      	ldr	r2, [pc, #96]	; (800dccc <main+0x154>)
 800dc6a:	2100      	movs	r1, #0
 800dc6c:	4818      	ldr	r0, [pc, #96]	; (800dcd0 <main+0x158>)
 800dc6e:	f009 fec9 	bl	8017a04 <osThreadNew>
 800dc72:	4603      	mov	r3, r0
 800dc74:	4a17      	ldr	r2, [pc, #92]	; (800dcd4 <main+0x15c>)
 800dc76:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadNew(task_sensor_read, NULL, &task_sensor_read_attributes);
 800dc78:	4a17      	ldr	r2, [pc, #92]	; (800dcd8 <main+0x160>)
 800dc7a:	2100      	movs	r1, #0
 800dc7c:	4817      	ldr	r0, [pc, #92]	; (800dcdc <main+0x164>)
 800dc7e:	f009 fec1 	bl	8017a04 <osThreadNew>
  osThreadNew(task_fsm, NULL, &task_fsm_attributes);
 800dc82:	4a17      	ldr	r2, [pc, #92]	; (800dce0 <main+0x168>)
 800dc84:	2100      	movs	r1, #0
 800dc86:	4817      	ldr	r0, [pc, #92]	; (800dce4 <main+0x16c>)
 800dc88:	f009 febc 	bl	8017a04 <osThreadNew>
  osThreadNew(task_heater, NULL, &task_heater_attributes);
 800dc8c:	4a16      	ldr	r2, [pc, #88]	; (800dce8 <main+0x170>)
 800dc8e:	2100      	movs	r1, #0
 800dc90:	4816      	ldr	r0, [pc, #88]	; (800dcec <main+0x174>)
 800dc92:	f009 feb7 	bl	8017a04 <osThreadNew>
  osThreadNew(task_state_est, NULL, &task_state_est_attributes);
 800dc96:	4a16      	ldr	r2, [pc, #88]	; (800dcf0 <main+0x178>)
 800dc98:	2100      	movs	r1, #0
 800dc9a:	4816      	ldr	r0, [pc, #88]	; (800dcf4 <main+0x17c>)
 800dc9c:	f009 feb2 	bl	8017a04 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800dca0:	f009 fe6c 	bl	801797c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800dca4:	e7fe      	b.n	800dca4 <main+0x12c>
 800dca6:	bf00      	nop
 800dca8:	40020400 	.word	0x40020400
 800dcac:	20000454 	.word	0x20000454
 800dcb0:	0800dac9 	.word	0x0800dac9
 800dcb4:	0800db19 	.word	0x0800db19
 800dcb8:	200073f0 	.word	0x200073f0
 800dcbc:	20005394 	.word	0x20005394
 800dcc0:	20005594 	.word	0x20005594
 800dcc4:	2000517c 	.word	0x2000517c
 800dcc8:	2000537c 	.word	0x2000537c
 800dccc:	0801cee0 	.word	0x0801cee0
 800dcd0:	0800e239 	.word	0x0800e239
 800dcd4:	200055ac 	.word	0x200055ac
 800dcd8:	0801cf04 	.word	0x0801cf04
 800dcdc:	0800f715 	.word	0x0800f715
 800dce0:	0801cf28 	.word	0x0801cf28
 800dce4:	0800f5d9 	.word	0x0800f5d9
 800dce8:	0801cf70 	.word	0x0801cf70
 800dcec:	0800f6a1 	.word	0x0800f6a1
 800dcf0:	0801cf4c 	.word	0x0801cf4c
 800dcf4:	0800f751 	.word	0x0800f751

0800dcf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b094      	sub	sp, #80	; 0x50
 800dcfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800dcfe:	f107 0320 	add.w	r3, r7, #32
 800dd02:	2230      	movs	r2, #48	; 0x30
 800dd04:	2100      	movs	r1, #0
 800dd06:	4618      	mov	r0, r3
 800dd08:	f00d fe5a 	bl	801b9c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800dd0c:	f107 030c 	add.w	r3, r7, #12
 800dd10:	2200      	movs	r2, #0
 800dd12:	601a      	str	r2, [r3, #0]
 800dd14:	605a      	str	r2, [r3, #4]
 800dd16:	609a      	str	r2, [r3, #8]
 800dd18:	60da      	str	r2, [r3, #12]
 800dd1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	60bb      	str	r3, [r7, #8]
 800dd20:	4b27      	ldr	r3, [pc, #156]	; (800ddc0 <SystemClock_Config+0xc8>)
 800dd22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd24:	4a26      	ldr	r2, [pc, #152]	; (800ddc0 <SystemClock_Config+0xc8>)
 800dd26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd2a:	6413      	str	r3, [r2, #64]	; 0x40
 800dd2c:	4b24      	ldr	r3, [pc, #144]	; (800ddc0 <SystemClock_Config+0xc8>)
 800dd2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd34:	60bb      	str	r3, [r7, #8]
 800dd36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800dd38:	2300      	movs	r3, #0
 800dd3a:	607b      	str	r3, [r7, #4]
 800dd3c:	4b21      	ldr	r3, [pc, #132]	; (800ddc4 <SystemClock_Config+0xcc>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4a20      	ldr	r2, [pc, #128]	; (800ddc4 <SystemClock_Config+0xcc>)
 800dd42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dd46:	6013      	str	r3, [r2, #0]
 800dd48:	4b1e      	ldr	r3, [pc, #120]	; (800ddc4 <SystemClock_Config+0xcc>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800dd50:	607b      	str	r3, [r7, #4]
 800dd52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800dd54:	2301      	movs	r3, #1
 800dd56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800dd58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800dd5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800dd5e:	2302      	movs	r3, #2
 800dd60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800dd62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dd66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800dd68:	2304      	movs	r3, #4
 800dd6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800dd6c:	2360      	movs	r3, #96	; 0x60
 800dd6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800dd70:	2306      	movs	r3, #6
 800dd72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800dd74:	2304      	movs	r3, #4
 800dd76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800dd78:	f107 0320 	add.w	r3, r7, #32
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f004 fb9b 	bl	80124b8 <HAL_RCC_OscConfig>
 800dd82:	4603      	mov	r3, r0
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d001      	beq.n	800dd8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 800dd88:	f000 fad4 	bl	800e334 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800dd8c:	230f      	movs	r3, #15
 800dd8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800dd90:	2302      	movs	r3, #2
 800dd92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800dd94:	2380      	movs	r3, #128	; 0x80
 800dd96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800dd98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800dda2:	f107 030c 	add.w	r3, r7, #12
 800dda6:	2100      	movs	r1, #0
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f004 fdfd 	bl	80129a8 <HAL_RCC_ClockConfig>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d001      	beq.n	800ddb8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800ddb4:	f000 fabe 	bl	800e334 <Error_Handler>
  }
}
 800ddb8:	bf00      	nop
 800ddba:	3750      	adds	r7, #80	; 0x50
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	40023800 	.word	0x40023800
 800ddc4:	40007000 	.word	0x40007000

0800ddc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ddce:	463b      	mov	r3, r7
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	601a      	str	r2, [r3, #0]
 800ddd4:	605a      	str	r2, [r3, #4]
 800ddd6:	609a      	str	r2, [r3, #8]
 800ddd8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800ddda:	4b28      	ldr	r3, [pc, #160]	; (800de7c <MX_ADC1_Init+0xb4>)
 800dddc:	4a28      	ldr	r2, [pc, #160]	; (800de80 <MX_ADC1_Init+0xb8>)
 800ddde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800dde0:	4b26      	ldr	r3, [pc, #152]	; (800de7c <MX_ADC1_Init+0xb4>)
 800dde2:	2200      	movs	r2, #0
 800dde4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800dde6:	4b25      	ldr	r3, [pc, #148]	; (800de7c <MX_ADC1_Init+0xb4>)
 800dde8:	2200      	movs	r2, #0
 800ddea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800ddec:	4b23      	ldr	r3, [pc, #140]	; (800de7c <MX_ADC1_Init+0xb4>)
 800ddee:	2201      	movs	r2, #1
 800ddf0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800ddf2:	4b22      	ldr	r3, [pc, #136]	; (800de7c <MX_ADC1_Init+0xb4>)
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ddf8:	4b20      	ldr	r3, [pc, #128]	; (800de7c <MX_ADC1_Init+0xb4>)
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800de00:	4b1e      	ldr	r3, [pc, #120]	; (800de7c <MX_ADC1_Init+0xb4>)
 800de02:	2200      	movs	r2, #0
 800de04:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800de06:	4b1d      	ldr	r3, [pc, #116]	; (800de7c <MX_ADC1_Init+0xb4>)
 800de08:	4a1e      	ldr	r2, [pc, #120]	; (800de84 <MX_ADC1_Init+0xbc>)
 800de0a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800de0c:	4b1b      	ldr	r3, [pc, #108]	; (800de7c <MX_ADC1_Init+0xb4>)
 800de0e:	2200      	movs	r2, #0
 800de10:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800de12:	4b1a      	ldr	r3, [pc, #104]	; (800de7c <MX_ADC1_Init+0xb4>)
 800de14:	2202      	movs	r2, #2
 800de16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800de18:	4b18      	ldr	r3, [pc, #96]	; (800de7c <MX_ADC1_Init+0xb4>)
 800de1a:	2200      	movs	r2, #0
 800de1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800de20:	4b16      	ldr	r3, [pc, #88]	; (800de7c <MX_ADC1_Init+0xb4>)
 800de22:	2201      	movs	r2, #1
 800de24:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800de26:	4815      	ldr	r0, [pc, #84]	; (800de7c <MX_ADC1_Init+0xb4>)
 800de28:	f001 ffda 	bl	800fde0 <HAL_ADC_Init>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d001      	beq.n	800de36 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800de32:	f000 fa7f 	bl	800e334 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800de36:	2300      	movs	r3, #0
 800de38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800de3a:	2301      	movs	r3, #1
 800de3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800de3e:	2303      	movs	r3, #3
 800de40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800de42:	463b      	mov	r3, r7
 800de44:	4619      	mov	r1, r3
 800de46:	480d      	ldr	r0, [pc, #52]	; (800de7c <MX_ADC1_Init+0xb4>)
 800de48:	f002 f98e 	bl	8010168 <HAL_ADC_ConfigChannel>
 800de4c:	4603      	mov	r3, r0
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d001      	beq.n	800de56 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800de52:	f000 fa6f 	bl	800e334 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800de56:	2301      	movs	r3, #1
 800de58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800de5a:	2302      	movs	r3, #2
 800de5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800de5e:	463b      	mov	r3, r7
 800de60:	4619      	mov	r1, r3
 800de62:	4806      	ldr	r0, [pc, #24]	; (800de7c <MX_ADC1_Init+0xb4>)
 800de64:	f002 f980 	bl	8010168 <HAL_ADC_ConfigChannel>
 800de68:	4603      	mov	r3, r0
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d001      	beq.n	800de72 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800de6e:	f000 fa61 	bl	800e334 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800de72:	bf00      	nop
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	20005e50 	.word	0x20005e50
 800de80:	40012000 	.word	0x40012000
 800de84:	0f000001 	.word	0x0f000001

0800de88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800de8c:	4b17      	ldr	r3, [pc, #92]	; (800deec <MX_SPI1_Init+0x64>)
 800de8e:	4a18      	ldr	r2, [pc, #96]	; (800def0 <MX_SPI1_Init+0x68>)
 800de90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800de92:	4b16      	ldr	r3, [pc, #88]	; (800deec <MX_SPI1_Init+0x64>)
 800de94:	f44f 7282 	mov.w	r2, #260	; 0x104
 800de98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800de9a:	4b14      	ldr	r3, [pc, #80]	; (800deec <MX_SPI1_Init+0x64>)
 800de9c:	2200      	movs	r2, #0
 800de9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800dea0:	4b12      	ldr	r3, [pc, #72]	; (800deec <MX_SPI1_Init+0x64>)
 800dea2:	2200      	movs	r2, #0
 800dea4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800dea6:	4b11      	ldr	r3, [pc, #68]	; (800deec <MX_SPI1_Init+0x64>)
 800dea8:	2200      	movs	r2, #0
 800deaa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800deac:	4b0f      	ldr	r3, [pc, #60]	; (800deec <MX_SPI1_Init+0x64>)
 800deae:	2200      	movs	r2, #0
 800deb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800deb2:	4b0e      	ldr	r3, [pc, #56]	; (800deec <MX_SPI1_Init+0x64>)
 800deb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800deb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800deba:	4b0c      	ldr	r3, [pc, #48]	; (800deec <MX_SPI1_Init+0x64>)
 800debc:	2200      	movs	r2, #0
 800debe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800dec0:	4b0a      	ldr	r3, [pc, #40]	; (800deec <MX_SPI1_Init+0x64>)
 800dec2:	2200      	movs	r2, #0
 800dec4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800dec6:	4b09      	ldr	r3, [pc, #36]	; (800deec <MX_SPI1_Init+0x64>)
 800dec8:	2200      	movs	r2, #0
 800deca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800decc:	4b07      	ldr	r3, [pc, #28]	; (800deec <MX_SPI1_Init+0x64>)
 800dece:	2200      	movs	r2, #0
 800ded0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800ded2:	4b06      	ldr	r3, [pc, #24]	; (800deec <MX_SPI1_Init+0x64>)
 800ded4:	220a      	movs	r2, #10
 800ded6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800ded8:	4804      	ldr	r0, [pc, #16]	; (800deec <MX_SPI1_Init+0x64>)
 800deda:	f004 ff93 	bl	8012e04 <HAL_SPI_Init>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d001      	beq.n	800dee8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800dee4:	f000 fa26 	bl	800e334 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800dee8:	bf00      	nop
 800deea:	bd80      	pop	{r7, pc}
 800deec:	200073f0 	.word	0x200073f0
 800def0:	40013000 	.word	0x40013000

0800def4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800def8:	4b17      	ldr	r3, [pc, #92]	; (800df58 <MX_SPI2_Init+0x64>)
 800defa:	4a18      	ldr	r2, [pc, #96]	; (800df5c <MX_SPI2_Init+0x68>)
 800defc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800defe:	4b16      	ldr	r3, [pc, #88]	; (800df58 <MX_SPI2_Init+0x64>)
 800df00:	f44f 7282 	mov.w	r2, #260	; 0x104
 800df04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800df06:	4b14      	ldr	r3, [pc, #80]	; (800df58 <MX_SPI2_Init+0x64>)
 800df08:	2200      	movs	r2, #0
 800df0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800df0c:	4b12      	ldr	r3, [pc, #72]	; (800df58 <MX_SPI2_Init+0x64>)
 800df0e:	2200      	movs	r2, #0
 800df10:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800df12:	4b11      	ldr	r3, [pc, #68]	; (800df58 <MX_SPI2_Init+0x64>)
 800df14:	2200      	movs	r2, #0
 800df16:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800df18:	4b0f      	ldr	r3, [pc, #60]	; (800df58 <MX_SPI2_Init+0x64>)
 800df1a:	2200      	movs	r2, #0
 800df1c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800df1e:	4b0e      	ldr	r3, [pc, #56]	; (800df58 <MX_SPI2_Init+0x64>)
 800df20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df24:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800df26:	4b0c      	ldr	r3, [pc, #48]	; (800df58 <MX_SPI2_Init+0x64>)
 800df28:	2200      	movs	r2, #0
 800df2a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800df2c:	4b0a      	ldr	r3, [pc, #40]	; (800df58 <MX_SPI2_Init+0x64>)
 800df2e:	2200      	movs	r2, #0
 800df30:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800df32:	4b09      	ldr	r3, [pc, #36]	; (800df58 <MX_SPI2_Init+0x64>)
 800df34:	2200      	movs	r2, #0
 800df36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df38:	4b07      	ldr	r3, [pc, #28]	; (800df58 <MX_SPI2_Init+0x64>)
 800df3a:	2200      	movs	r2, #0
 800df3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800df3e:	4b06      	ldr	r3, [pc, #24]	; (800df58 <MX_SPI2_Init+0x64>)
 800df40:	220a      	movs	r2, #10
 800df42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800df44:	4804      	ldr	r0, [pc, #16]	; (800df58 <MX_SPI2_Init+0x64>)
 800df46:	f004 ff5d 	bl	8012e04 <HAL_SPI_Init>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d001      	beq.n	800df54 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800df50:	f000 f9f0 	bl	800e334 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800df54:	bf00      	nop
 800df56:	bd80      	pop	{r7, pc}
 800df58:	200055b0 	.word	0x200055b0
 800df5c:	40003800 	.word	0x40003800

0800df60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b08a      	sub	sp, #40	; 0x28
 800df64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800df66:	f107 0320 	add.w	r3, r7, #32
 800df6a:	2200      	movs	r2, #0
 800df6c:	601a      	str	r2, [r3, #0]
 800df6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800df70:	1d3b      	adds	r3, r7, #4
 800df72:	2200      	movs	r2, #0
 800df74:	601a      	str	r2, [r3, #0]
 800df76:	605a      	str	r2, [r3, #4]
 800df78:	609a      	str	r2, [r3, #8]
 800df7a:	60da      	str	r2, [r3, #12]
 800df7c:	611a      	str	r2, [r3, #16]
 800df7e:	615a      	str	r2, [r3, #20]
 800df80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800df82:	4b22      	ldr	r3, [pc, #136]	; (800e00c <MX_TIM4_Init+0xac>)
 800df84:	4a22      	ldr	r2, [pc, #136]	; (800e010 <MX_TIM4_Init+0xb0>)
 800df86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16;
 800df88:	4b20      	ldr	r3, [pc, #128]	; (800e00c <MX_TIM4_Init+0xac>)
 800df8a:	2210      	movs	r2, #16
 800df8c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800df8e:	4b1f      	ldr	r3, [pc, #124]	; (800e00c <MX_TIM4_Init+0xac>)
 800df90:	2200      	movs	r2, #0
 800df92:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 800df94:	4b1d      	ldr	r3, [pc, #116]	; (800e00c <MX_TIM4_Init+0xac>)
 800df96:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800df9a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800df9c:	4b1b      	ldr	r3, [pc, #108]	; (800e00c <MX_TIM4_Init+0xac>)
 800df9e:	2200      	movs	r2, #0
 800dfa0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dfa2:	4b1a      	ldr	r3, [pc, #104]	; (800e00c <MX_TIM4_Init+0xac>)
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800dfa8:	4818      	ldr	r0, [pc, #96]	; (800e00c <MX_TIM4_Init+0xac>)
 800dfaa:	f005 fd8f 	bl	8013acc <HAL_TIM_PWM_Init>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d001      	beq.n	800dfb8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800dfb4:	f000 f9be 	bl	800e334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800dfc0:	f107 0320 	add.w	r3, r7, #32
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	4811      	ldr	r0, [pc, #68]	; (800e00c <MX_TIM4_Init+0xac>)
 800dfc8:	f006 f9ce 	bl	8014368 <HAL_TIMEx_MasterConfigSynchronization>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d001      	beq.n	800dfd6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800dfd2:	f000 f9af 	bl	800e334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dfd6:	2360      	movs	r3, #96	; 0x60
 800dfd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 800dfda:	23fa      	movs	r3, #250	; 0xfa
 800dfdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dfe6:	1d3b      	adds	r3, r7, #4
 800dfe8:	2200      	movs	r2, #0
 800dfea:	4619      	mov	r1, r3
 800dfec:	4807      	ldr	r0, [pc, #28]	; (800e00c <MX_TIM4_Init+0xac>)
 800dfee:	f005 fec5 	bl	8013d7c <HAL_TIM_PWM_ConfigChannel>
 800dff2:	4603      	mov	r3, r0
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d001      	beq.n	800dffc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800dff8:	f000 f99c 	bl	800e334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800dffc:	4803      	ldr	r0, [pc, #12]	; (800e00c <MX_TIM4_Init+0xac>)
 800dffe:	f000 faaf 	bl	800e560 <HAL_TIM_MspPostInit>

}
 800e002:	bf00      	nop
 800e004:	3728      	adds	r7, #40	; 0x28
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
 800e00a:	bf00      	nop
 800e00c:	20005608 	.word	0x20005608
 800e010:	40000800 	.word	0x40000800

0800e014 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e018:	4b11      	ldr	r3, [pc, #68]	; (800e060 <MX_USART1_UART_Init+0x4c>)
 800e01a:	4a12      	ldr	r2, [pc, #72]	; (800e064 <MX_USART1_UART_Init+0x50>)
 800e01c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800e01e:	4b10      	ldr	r3, [pc, #64]	; (800e060 <MX_USART1_UART_Init+0x4c>)
 800e020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800e024:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e026:	4b0e      	ldr	r3, [pc, #56]	; (800e060 <MX_USART1_UART_Init+0x4c>)
 800e028:	2200      	movs	r2, #0
 800e02a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e02c:	4b0c      	ldr	r3, [pc, #48]	; (800e060 <MX_USART1_UART_Init+0x4c>)
 800e02e:	2200      	movs	r2, #0
 800e030:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e032:	4b0b      	ldr	r3, [pc, #44]	; (800e060 <MX_USART1_UART_Init+0x4c>)
 800e034:	2200      	movs	r2, #0
 800e036:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e038:	4b09      	ldr	r3, [pc, #36]	; (800e060 <MX_USART1_UART_Init+0x4c>)
 800e03a:	220c      	movs	r2, #12
 800e03c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e03e:	4b08      	ldr	r3, [pc, #32]	; (800e060 <MX_USART1_UART_Init+0x4c>)
 800e040:	2200      	movs	r2, #0
 800e042:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e044:	4b06      	ldr	r3, [pc, #24]	; (800e060 <MX_USART1_UART_Init+0x4c>)
 800e046:	2200      	movs	r2, #0
 800e048:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e04a:	4805      	ldr	r0, [pc, #20]	; (800e060 <MX_USART1_UART_Init+0x4c>)
 800e04c:	f006 fa0e 	bl	801446c <HAL_UART_Init>
 800e050:	4603      	mov	r3, r0
 800e052:	2b00      	cmp	r3, #0
 800e054:	d001      	beq.n	800e05a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800e056:	f000 f96d 	bl	800e334 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e05a:	bf00      	nop
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	20006698 	.word	0x20006698
 800e064:	40011000 	.word	0x40011000

0800e068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b08a      	sub	sp, #40	; 0x28
 800e06c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e06e:	f107 0314 	add.w	r3, r7, #20
 800e072:	2200      	movs	r2, #0
 800e074:	601a      	str	r2, [r3, #0]
 800e076:	605a      	str	r2, [r3, #4]
 800e078:	609a      	str	r2, [r3, #8]
 800e07a:	60da      	str	r2, [r3, #12]
 800e07c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e07e:	2300      	movs	r3, #0
 800e080:	613b      	str	r3, [r7, #16]
 800e082:	4b5d      	ldr	r3, [pc, #372]	; (800e1f8 <MX_GPIO_Init+0x190>)
 800e084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e086:	4a5c      	ldr	r2, [pc, #368]	; (800e1f8 <MX_GPIO_Init+0x190>)
 800e088:	f043 0304 	orr.w	r3, r3, #4
 800e08c:	6313      	str	r3, [r2, #48]	; 0x30
 800e08e:	4b5a      	ldr	r3, [pc, #360]	; (800e1f8 <MX_GPIO_Init+0x190>)
 800e090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e092:	f003 0304 	and.w	r3, r3, #4
 800e096:	613b      	str	r3, [r7, #16]
 800e098:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e09a:	2300      	movs	r3, #0
 800e09c:	60fb      	str	r3, [r7, #12]
 800e09e:	4b56      	ldr	r3, [pc, #344]	; (800e1f8 <MX_GPIO_Init+0x190>)
 800e0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0a2:	4a55      	ldr	r2, [pc, #340]	; (800e1f8 <MX_GPIO_Init+0x190>)
 800e0a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0a8:	6313      	str	r3, [r2, #48]	; 0x30
 800e0aa:	4b53      	ldr	r3, [pc, #332]	; (800e1f8 <MX_GPIO_Init+0x190>)
 800e0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0b2:	60fb      	str	r3, [r7, #12]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	60bb      	str	r3, [r7, #8]
 800e0ba:	4b4f      	ldr	r3, [pc, #316]	; (800e1f8 <MX_GPIO_Init+0x190>)
 800e0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0be:	4a4e      	ldr	r2, [pc, #312]	; (800e1f8 <MX_GPIO_Init+0x190>)
 800e0c0:	f043 0301 	orr.w	r3, r3, #1
 800e0c4:	6313      	str	r3, [r2, #48]	; 0x30
 800e0c6:	4b4c      	ldr	r3, [pc, #304]	; (800e1f8 <MX_GPIO_Init+0x190>)
 800e0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ca:	f003 0301 	and.w	r3, r3, #1
 800e0ce:	60bb      	str	r3, [r7, #8]
 800e0d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	607b      	str	r3, [r7, #4]
 800e0d6:	4b48      	ldr	r3, [pc, #288]	; (800e1f8 <MX_GPIO_Init+0x190>)
 800e0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0da:	4a47      	ldr	r2, [pc, #284]	; (800e1f8 <MX_GPIO_Init+0x190>)
 800e0dc:	f043 0302 	orr.w	r3, r3, #2
 800e0e0:	6313      	str	r3, [r2, #48]	; 0x30
 800e0e2:	4b45      	ldr	r3, [pc, #276]	; (800e1f8 <MX_GPIO_Init+0x190>)
 800e0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0e6:	f003 0302 	and.w	r3, r3, #2
 800e0ea:	607b      	str	r3, [r7, #4]
 800e0ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e0f4:	4841      	ldr	r0, [pc, #260]	; (800e1fc <MX_GPIO_Init+0x194>)
 800e0f6:	f002 fffd 	bl	80110f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TC_CS_Pin|R_CS_Pin, GPIO_PIN_RESET);
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	2118      	movs	r1, #24
 800e0fe:	4840      	ldr	r0, [pc, #256]	; (800e200 <MX_GPIO_Init+0x198>)
 800e100:	f002 fff8 	bl	80110f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BARO_CS_Pin|IMU_CS_Pin|DCDC_EN_Pin|CUT_EN_Pin
 800e104:	2200      	movs	r2, #0
 800e106:	f240 31b6 	movw	r1, #950	; 0x3b6
 800e10a:	483e      	ldr	r0, [pc, #248]	; (800e204 <MX_GPIO_Init+0x19c>)
 800e10c:	f002 fff2 	bl	80110f4 <HAL_GPIO_WritePin>
                          |P_EN_LIGHT_Pin|P_EN_CUT_Pin|P_EN_RADIO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800e110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e116:	2301      	movs	r3, #1
 800e118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e11a:	2300      	movs	r3, #0
 800e11c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e11e:	2300      	movs	r3, #0
 800e120:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800e122:	f107 0314 	add.w	r3, r7, #20
 800e126:	4619      	mov	r1, r3
 800e128:	4834      	ldr	r0, [pc, #208]	; (800e1fc <MX_GPIO_Init+0x194>)
 800e12a:	f002 fe47 	bl	8010dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800e12e:	2304      	movs	r3, #4
 800e130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e132:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800e136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e138:	2300      	movs	r3, #0
 800e13a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800e13c:	f107 0314 	add.w	r3, r7, #20
 800e140:	4619      	mov	r1, r3
 800e142:	482f      	ldr	r0, [pc, #188]	; (800e200 <MX_GPIO_Init+0x198>)
 800e144:	f002 fe3a 	bl	8010dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_CS_Pin R_CS_Pin */
  GPIO_InitStruct.Pin = TC_CS_Pin|R_CS_Pin;
 800e148:	2318      	movs	r3, #24
 800e14a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e14c:	2301      	movs	r3, #1
 800e14e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e150:	2300      	movs	r3, #0
 800e152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e154:	2300      	movs	r3, #0
 800e156:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e158:	f107 0314 	add.w	r3, r7, #20
 800e15c:	4619      	mov	r1, r3
 800e15e:	4828      	ldr	r0, [pc, #160]	; (800e200 <MX_GPIO_Init+0x198>)
 800e160:	f002 fe2c 	bl	8010dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_INT_Pin */
  GPIO_InitStruct.Pin = RF_INT_Pin;
 800e164:	2301      	movs	r3, #1
 800e166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e168:	2300      	movs	r3, #0
 800e16a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e16c:	2300      	movs	r3, #0
 800e16e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_INT_GPIO_Port, &GPIO_InitStruct);
 800e170:	f107 0314 	add.w	r3, r7, #20
 800e174:	4619      	mov	r1, r3
 800e176:	4823      	ldr	r0, [pc, #140]	; (800e204 <MX_GPIO_Init+0x19c>)
 800e178:	f002 fe20 	bl	8010dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : BARO_CS_Pin IMU_CS_Pin DCDC_EN_Pin CUT_EN_Pin
                           P_EN_LIGHT_Pin P_EN_CUT_Pin P_EN_RADIO_Pin */
  GPIO_InitStruct.Pin = BARO_CS_Pin|IMU_CS_Pin|DCDC_EN_Pin|CUT_EN_Pin
 800e17c:	f240 33b6 	movw	r3, #950	; 0x3b6
 800e180:	617b      	str	r3, [r7, #20]
                          |P_EN_LIGHT_Pin|P_EN_CUT_Pin|P_EN_RADIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e182:	2301      	movs	r3, #1
 800e184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e186:	2300      	movs	r3, #0
 800e188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e18a:	2300      	movs	r3, #0
 800e18c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e18e:	f107 0314 	add.w	r3, r7, #20
 800e192:	4619      	mov	r1, r3
 800e194:	481b      	ldr	r0, [pc, #108]	; (800e204 <MX_GPIO_Init+0x19c>)
 800e196:	f002 fe11 	bl	8010dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT2_Pin IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin|IMU_INT1_Pin;
 800e19a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e19e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e1a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800e1a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e1aa:	f107 0314 	add.w	r3, r7, #20
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	4814      	ldr	r0, [pc, #80]	; (800e204 <MX_GPIO_Init+0x19c>)
 800e1b2:	f002 fe03 	bl	8010dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DET_Pin CHRG_Pin */
  GPIO_InitStruct.Pin = USB_DET_Pin|CHRG_Pin;
 800e1b6:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800e1ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e1c4:	f107 0314 	add.w	r3, r7, #20
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	480d      	ldr	r0, [pc, #52]	; (800e200 <MX_GPIO_Init+0x198>)
 800e1cc:	f002 fdf6 	bl	8010dbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	2105      	movs	r1, #5
 800e1d4:	2008      	movs	r0, #8
 800e1d6:	f002 fad1 	bl	801077c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800e1da:	2008      	movs	r0, #8
 800e1dc:	f002 faea 	bl	80107b4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	2105      	movs	r1, #5
 800e1e4:	2028      	movs	r0, #40	; 0x28
 800e1e6:	f002 fac9 	bl	801077c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800e1ea:	2028      	movs	r0, #40	; 0x28
 800e1ec:	f002 fae2 	bl	80107b4 <HAL_NVIC_EnableIRQ>

}
 800e1f0:	bf00      	nop
 800e1f2:	3728      	adds	r7, #40	; 0x28
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	40023800 	.word	0x40023800
 800e1fc:	40020800 	.word	0x40020800
 800e200:	40020000 	.word	0x40020000
 800e204:	40020400 	.word	0x40020400

0800e208 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800e208:	b580      	push	{r7, lr}
 800e20a:	b084      	sub	sp, #16
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	4603      	mov	r3, r0
 800e210:	80fb      	strh	r3, [r7, #6]
  wake_up();
 800e212:	f7ff fc49 	bl	800daa8 <wake_up>
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e216:	4a06      	ldr	r2, [pc, #24]	; (800e230 <HAL_GPIO_EXTI_Callback+0x28>)
 800e218:	88fb      	ldrh	r3, [r7, #6]
 800e21a:	6153      	str	r3, [r2, #20]

 lsm6dsr_all_sources_t all_source;
 /* Check if Wake-Up events */
 lsm6dsr_all_sources_get(&dev_ctx, &all_source);
 800e21c:	f107 0308 	add.w	r3, r7, #8
 800e220:	4619      	mov	r1, r3
 800e222:	4804      	ldr	r0, [pc, #16]	; (800e234 <HAL_GPIO_EXTI_Callback+0x2c>)
 800e224:	f000 fdd2 	bl	800edcc <lsm6dsr_all_sources_get>

 if (all_source.wake_up_src.wu_ia){

 }

}
 800e228:	bf00      	nop
 800e22a:	3710      	adds	r7, #16
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}
 800e230:	40013c00 	.word	0x40013c00
 800e234:	20000454 	.word	0x20000454

0800e238 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b08c      	sub	sp, #48	; 0x30
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  log_init();
 800e240:	f001 fc5e 	bl	800fb00 <log_init>
  MX_USB_DEVICE_Init();
 800e244:	f00c fdd2 	bl	801adec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  int counter = 0;
 800e248:	2300      	movs	r3, #0
 800e24a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Infinite loop */
  for(;;)
  {
	  uint32_t value[2];
	  value[0] = ADC_Get(BATTERY);
 800e24c:	2000      	movs	r0, #0
 800e24e:	f7ff fbe5 	bl	800da1c <ADC_Get>
 800e252:	4603      	mov	r3, r0
 800e254:	627b      	str	r3, [r7, #36]	; 0x24
	  value[1] = ADC_Get(LIGHT);
 800e256:	2001      	movs	r0, #1
 800e258:	f7ff fbe0 	bl	800da1c <ADC_Get>
 800e25c:	4603      	mov	r3, r0
 800e25e:	62bb      	str	r3, [r7, #40]	; 0x28



	  if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0){
 800e260:	2104      	movs	r1, #4
 800e262:	4823      	ldr	r0, [pc, #140]	; (800e2f0 <StartDefaultTask+0xb8>)
 800e264:	f002 ff2e 	bl	80110c4 <HAL_GPIO_ReadPin>
 800e268:	4603      	mov	r3, r0
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d103      	bne.n	800e276 <StartDefaultTask+0x3e>
		  counter++;
 800e26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e270:	3301      	adds	r3, #1
 800e272:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e274:	e001      	b.n	800e27a <StartDefaultTask+0x42>
	  } else {
		  counter = 0;
 800e276:	2300      	movs	r3, #0
 800e278:	62fb      	str	r3, [r7, #44]	; 0x2c
	  }

	  if(value[1] > 100){
 800e27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27c:	2b64      	cmp	r3, #100	; 0x64
 800e27e:	d906      	bls.n	800e28e <StartDefaultTask+0x56>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800e280:	2200      	movs	r2, #0
 800e282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e286:	481b      	ldr	r0, [pc, #108]	; (800e2f4 <StartDefaultTask+0xbc>)
 800e288:	f002 ff34 	bl	80110f4 <HAL_GPIO_WritePin>
 800e28c:	e005      	b.n	800e29a <StartDefaultTask+0x62>
	  } else {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800e28e:	2201      	movs	r2, #1
 800e290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e294:	4817      	ldr	r0, [pc, #92]	; (800e2f4 <StartDefaultTask+0xbc>)
 800e296:	f002 ff2d 	bl	80110f4 <HAL_GPIO_WritePin>
	  }
	  if(counter == 30){
 800e29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29c:	2b1e      	cmp	r3, #30
 800e29e:	d101      	bne.n	800e2a4 <StartDefaultTask+0x6c>
		  go_to_sleep();
 800e2a0:	f7ff fbdc 	bl	800da5c <go_to_sleep>
	  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
	  int16_t data_raw_acceleration[3];
	  float acceleration_mg[3];
	  int16_t data_raw_angular_rate[3];

	  lsm6dsr_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 800e2a4:	f107 031c 	add.w	r3, r7, #28
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	4813      	ldr	r0, [pc, #76]	; (800e2f8 <StartDefaultTask+0xc0>)
 800e2ac:	f000 fdfc 	bl	800eea8 <lsm6dsr_acceleration_raw_get>
	  acceleration_mg[0] = lsm6dsr_from_fs16g_to_mg(data_raw_acceleration[0]);
 800e2b0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f000 fb07 	bl	800e8c8 <lsm6dsr_from_fs16g_to_mg>
 800e2ba:	eef0 7a40 	vmov.f32	s15, s0
 800e2be:	edc7 7a04 	vstr	s15, [r7, #16]
	  acceleration_mg[1] = lsm6dsr_from_fs16g_to_mg(data_raw_acceleration[1]);
 800e2c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f000 fafe 	bl	800e8c8 <lsm6dsr_from_fs16g_to_mg>
 800e2cc:	eef0 7a40 	vmov.f32	s15, s0
 800e2d0:	edc7 7a05 	vstr	s15, [r7, #20]
	  acceleration_mg[2] =  lsm6dsr_from_fs16g_to_mg(data_raw_acceleration[2]);
 800e2d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f000 faf5 	bl	800e8c8 <lsm6dsr_from_fs16g_to_mg>
 800e2de:	eef0 7a40 	vmov.f32	s15, s0
 800e2e2:	edc7 7a06 	vstr	s15, [r7, #24]

    osDelay(100);
 800e2e6:	2064      	movs	r0, #100	; 0x64
 800e2e8:	f009 fc1e 	bl	8017b28 <osDelay>
  {
 800e2ec:	e7ae      	b.n	800e24c <StartDefaultTask+0x14>
 800e2ee:	bf00      	nop
 800e2f0:	40020000 	.word	0x40020000
 800e2f4:	40020800 	.word	0x40020800
 800e2f8:	20000454 	.word	0x20000454

0800e2fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b082      	sub	sp, #8
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4a08      	ldr	r2, [pc, #32]	; (800e32c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d102      	bne.n	800e314 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800e30e:	f001 fd09 	bl	800fd24 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if (htim->Instance == TIM5) {
	  CDC_Transmit_Elapsed();
  }
  /* USER CODE END Callback 1 */
}
 800e312:	e006      	b.n	800e322 <HAL_TIM_PeriodElapsedCallback+0x26>
  else if (htim->Instance == TIM5) {
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	4a05      	ldr	r2, [pc, #20]	; (800e330 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d101      	bne.n	800e322 <HAL_TIM_PeriodElapsedCallback+0x26>
	  CDC_Transmit_Elapsed();
 800e31e:	f00c fe85 	bl	801b02c <CDC_Transmit_Elapsed>
}
 800e322:	bf00      	nop
 800e324:	3708      	adds	r7, #8
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	40010000 	.word	0x40010000
 800e330:	40000c00 	.word	0x40000c00

0800e334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e334:	b480      	push	{r7}
 800e336:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800e338:	b672      	cpsid	i
}
 800e33a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800e33c:	e7fe      	b.n	800e33c <Error_Handler+0x8>
	...

0800e340 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b082      	sub	sp, #8
 800e344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e346:	2300      	movs	r3, #0
 800e348:	607b      	str	r3, [r7, #4]
 800e34a:	4b12      	ldr	r3, [pc, #72]	; (800e394 <HAL_MspInit+0x54>)
 800e34c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e34e:	4a11      	ldr	r2, [pc, #68]	; (800e394 <HAL_MspInit+0x54>)
 800e350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e354:	6453      	str	r3, [r2, #68]	; 0x44
 800e356:	4b0f      	ldr	r3, [pc, #60]	; (800e394 <HAL_MspInit+0x54>)
 800e358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e35a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e35e:	607b      	str	r3, [r7, #4]
 800e360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e362:	2300      	movs	r3, #0
 800e364:	603b      	str	r3, [r7, #0]
 800e366:	4b0b      	ldr	r3, [pc, #44]	; (800e394 <HAL_MspInit+0x54>)
 800e368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e36a:	4a0a      	ldr	r2, [pc, #40]	; (800e394 <HAL_MspInit+0x54>)
 800e36c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e370:	6413      	str	r3, [r2, #64]	; 0x40
 800e372:	4b08      	ldr	r3, [pc, #32]	; (800e394 <HAL_MspInit+0x54>)
 800e374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e37a:	603b      	str	r3, [r7, #0]
 800e37c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e37e:	2200      	movs	r2, #0
 800e380:	210f      	movs	r1, #15
 800e382:	f06f 0001 	mvn.w	r0, #1
 800e386:	f002 f9f9 	bl	801077c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e38a:	bf00      	nop
 800e38c:	3708      	adds	r7, #8
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	40023800 	.word	0x40023800

0800e398 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b08a      	sub	sp, #40	; 0x28
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e3a0:	f107 0314 	add.w	r3, r7, #20
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	601a      	str	r2, [r3, #0]
 800e3a8:	605a      	str	r2, [r3, #4]
 800e3aa:	609a      	str	r2, [r3, #8]
 800e3ac:	60da      	str	r2, [r3, #12]
 800e3ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	4a17      	ldr	r2, [pc, #92]	; (800e414 <HAL_ADC_MspInit+0x7c>)
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d127      	bne.n	800e40a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	613b      	str	r3, [r7, #16]
 800e3be:	4b16      	ldr	r3, [pc, #88]	; (800e418 <HAL_ADC_MspInit+0x80>)
 800e3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3c2:	4a15      	ldr	r2, [pc, #84]	; (800e418 <HAL_ADC_MspInit+0x80>)
 800e3c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3c8:	6453      	str	r3, [r2, #68]	; 0x44
 800e3ca:	4b13      	ldr	r3, [pc, #76]	; (800e418 <HAL_ADC_MspInit+0x80>)
 800e3cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3d2:	613b      	str	r3, [r7, #16]
 800e3d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	60fb      	str	r3, [r7, #12]
 800e3da:	4b0f      	ldr	r3, [pc, #60]	; (800e418 <HAL_ADC_MspInit+0x80>)
 800e3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3de:	4a0e      	ldr	r2, [pc, #56]	; (800e418 <HAL_ADC_MspInit+0x80>)
 800e3e0:	f043 0301 	orr.w	r3, r3, #1
 800e3e4:	6313      	str	r3, [r2, #48]	; 0x30
 800e3e6:	4b0c      	ldr	r3, [pc, #48]	; (800e418 <HAL_ADC_MspInit+0x80>)
 800e3e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3ea:	f003 0301 	and.w	r3, r3, #1
 800e3ee:	60fb      	str	r3, [r7, #12]
 800e3f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = V_BAT_Pin|LIGHT_Pin;
 800e3f2:	2303      	movs	r3, #3
 800e3f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e3f6:	2303      	movs	r3, #3
 800e3f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3fe:	f107 0314 	add.w	r3, r7, #20
 800e402:	4619      	mov	r1, r3
 800e404:	4805      	ldr	r0, [pc, #20]	; (800e41c <HAL_ADC_MspInit+0x84>)
 800e406:	f002 fcd9 	bl	8010dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800e40a:	bf00      	nop
 800e40c:	3728      	adds	r7, #40	; 0x28
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	40012000 	.word	0x40012000
 800e418:	40023800 	.word	0x40023800
 800e41c:	40020000 	.word	0x40020000

0800e420 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b08c      	sub	sp, #48	; 0x30
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e428:	f107 031c 	add.w	r3, r7, #28
 800e42c:	2200      	movs	r2, #0
 800e42e:	601a      	str	r2, [r3, #0]
 800e430:	605a      	str	r2, [r3, #4]
 800e432:	609a      	str	r2, [r3, #8]
 800e434:	60da      	str	r2, [r3, #12]
 800e436:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4a32      	ldr	r2, [pc, #200]	; (800e508 <HAL_SPI_MspInit+0xe8>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d12c      	bne.n	800e49c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e442:	2300      	movs	r3, #0
 800e444:	61bb      	str	r3, [r7, #24]
 800e446:	4b31      	ldr	r3, [pc, #196]	; (800e50c <HAL_SPI_MspInit+0xec>)
 800e448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e44a:	4a30      	ldr	r2, [pc, #192]	; (800e50c <HAL_SPI_MspInit+0xec>)
 800e44c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e450:	6453      	str	r3, [r2, #68]	; 0x44
 800e452:	4b2e      	ldr	r3, [pc, #184]	; (800e50c <HAL_SPI_MspInit+0xec>)
 800e454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e45a:	61bb      	str	r3, [r7, #24]
 800e45c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e45e:	2300      	movs	r3, #0
 800e460:	617b      	str	r3, [r7, #20]
 800e462:	4b2a      	ldr	r3, [pc, #168]	; (800e50c <HAL_SPI_MspInit+0xec>)
 800e464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e466:	4a29      	ldr	r2, [pc, #164]	; (800e50c <HAL_SPI_MspInit+0xec>)
 800e468:	f043 0301 	orr.w	r3, r3, #1
 800e46c:	6313      	str	r3, [r2, #48]	; 0x30
 800e46e:	4b27      	ldr	r3, [pc, #156]	; (800e50c <HAL_SPI_MspInit+0xec>)
 800e470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e472:	f003 0301 	and.w	r3, r3, #1
 800e476:	617b      	str	r3, [r7, #20]
 800e478:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800e47a:	23e0      	movs	r3, #224	; 0xe0
 800e47c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e47e:	2302      	movs	r3, #2
 800e480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e482:	2300      	movs	r3, #0
 800e484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e486:	2303      	movs	r3, #3
 800e488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e48a:	2305      	movs	r3, #5
 800e48c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e48e:	f107 031c 	add.w	r3, r7, #28
 800e492:	4619      	mov	r1, r3
 800e494:	481e      	ldr	r0, [pc, #120]	; (800e510 <HAL_SPI_MspInit+0xf0>)
 800e496:	f002 fc91 	bl	8010dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800e49a:	e031      	b.n	800e500 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	4a1c      	ldr	r2, [pc, #112]	; (800e514 <HAL_SPI_MspInit+0xf4>)
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	d12c      	bne.n	800e500 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	613b      	str	r3, [r7, #16]
 800e4aa:	4b18      	ldr	r3, [pc, #96]	; (800e50c <HAL_SPI_MspInit+0xec>)
 800e4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ae:	4a17      	ldr	r2, [pc, #92]	; (800e50c <HAL_SPI_MspInit+0xec>)
 800e4b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e4b4:	6413      	str	r3, [r2, #64]	; 0x40
 800e4b6:	4b15      	ldr	r3, [pc, #84]	; (800e50c <HAL_SPI_MspInit+0xec>)
 800e4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e4be:	613b      	str	r3, [r7, #16]
 800e4c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	60fb      	str	r3, [r7, #12]
 800e4c6:	4b11      	ldr	r3, [pc, #68]	; (800e50c <HAL_SPI_MspInit+0xec>)
 800e4c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ca:	4a10      	ldr	r2, [pc, #64]	; (800e50c <HAL_SPI_MspInit+0xec>)
 800e4cc:	f043 0302 	orr.w	r3, r3, #2
 800e4d0:	6313      	str	r3, [r2, #48]	; 0x30
 800e4d2:	4b0e      	ldr	r3, [pc, #56]	; (800e50c <HAL_SPI_MspInit+0xec>)
 800e4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4d6:	f003 0302 	and.w	r3, r3, #2
 800e4da:	60fb      	str	r3, [r7, #12]
 800e4dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800e4de:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800e4e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4e4:	2302      	movs	r3, #2
 800e4e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4ec:	2303      	movs	r3, #3
 800e4ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e4f0:	2305      	movs	r3, #5
 800e4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e4f4:	f107 031c 	add.w	r3, r7, #28
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	4807      	ldr	r0, [pc, #28]	; (800e518 <HAL_SPI_MspInit+0xf8>)
 800e4fc:	f002 fc5e 	bl	8010dbc <HAL_GPIO_Init>
}
 800e500:	bf00      	nop
 800e502:	3730      	adds	r7, #48	; 0x30
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}
 800e508:	40013000 	.word	0x40013000
 800e50c:	40023800 	.word	0x40023800
 800e510:	40020000 	.word	0x40020000
 800e514:	40003800 	.word	0x40003800
 800e518:	40020400 	.word	0x40020400

0800e51c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b085      	sub	sp, #20
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	4a0b      	ldr	r2, [pc, #44]	; (800e558 <HAL_TIM_PWM_MspInit+0x3c>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d10d      	bne.n	800e54a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e52e:	2300      	movs	r3, #0
 800e530:	60fb      	str	r3, [r7, #12]
 800e532:	4b0a      	ldr	r3, [pc, #40]	; (800e55c <HAL_TIM_PWM_MspInit+0x40>)
 800e534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e536:	4a09      	ldr	r2, [pc, #36]	; (800e55c <HAL_TIM_PWM_MspInit+0x40>)
 800e538:	f043 0304 	orr.w	r3, r3, #4
 800e53c:	6413      	str	r3, [r2, #64]	; 0x40
 800e53e:	4b07      	ldr	r3, [pc, #28]	; (800e55c <HAL_TIM_PWM_MspInit+0x40>)
 800e540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e542:	f003 0304 	and.w	r3, r3, #4
 800e546:	60fb      	str	r3, [r7, #12]
 800e548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800e54a:	bf00      	nop
 800e54c:	3714      	adds	r7, #20
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr
 800e556:	bf00      	nop
 800e558:	40000800 	.word	0x40000800
 800e55c:	40023800 	.word	0x40023800

0800e560 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b088      	sub	sp, #32
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e568:	f107 030c 	add.w	r3, r7, #12
 800e56c:	2200      	movs	r2, #0
 800e56e:	601a      	str	r2, [r3, #0]
 800e570:	605a      	str	r2, [r3, #4]
 800e572:	609a      	str	r2, [r3, #8]
 800e574:	60da      	str	r2, [r3, #12]
 800e576:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4a12      	ldr	r2, [pc, #72]	; (800e5c8 <HAL_TIM_MspPostInit+0x68>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d11d      	bne.n	800e5be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e582:	2300      	movs	r3, #0
 800e584:	60bb      	str	r3, [r7, #8]
 800e586:	4b11      	ldr	r3, [pc, #68]	; (800e5cc <HAL_TIM_MspPostInit+0x6c>)
 800e588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e58a:	4a10      	ldr	r2, [pc, #64]	; (800e5cc <HAL_TIM_MspPostInit+0x6c>)
 800e58c:	f043 0302 	orr.w	r3, r3, #2
 800e590:	6313      	str	r3, [r2, #48]	; 0x30
 800e592:	4b0e      	ldr	r3, [pc, #56]	; (800e5cc <HAL_TIM_MspPostInit+0x6c>)
 800e594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e596:	f003 0302 	and.w	r3, r3, #2
 800e59a:	60bb      	str	r3, [r7, #8]
 800e59c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800e59e:	2340      	movs	r3, #64	; 0x40
 800e5a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5a2:	2302      	movs	r3, #2
 800e5a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800e5ae:	2302      	movs	r3, #2
 800e5b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800e5b2:	f107 030c 	add.w	r3, r7, #12
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	4805      	ldr	r0, [pc, #20]	; (800e5d0 <HAL_TIM_MspPostInit+0x70>)
 800e5ba:	f002 fbff 	bl	8010dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800e5be:	bf00      	nop
 800e5c0:	3720      	adds	r7, #32
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	bf00      	nop
 800e5c8:	40000800 	.word	0x40000800
 800e5cc:	40023800 	.word	0x40023800
 800e5d0:	40020400 	.word	0x40020400

0800e5d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b08a      	sub	sp, #40	; 0x28
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5dc:	f107 0314 	add.w	r3, r7, #20
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	601a      	str	r2, [r3, #0]
 800e5e4:	605a      	str	r2, [r3, #4]
 800e5e6:	609a      	str	r2, [r3, #8]
 800e5e8:	60da      	str	r2, [r3, #12]
 800e5ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4a19      	ldr	r2, [pc, #100]	; (800e658 <HAL_UART_MspInit+0x84>)
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	d12c      	bne.n	800e650 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	613b      	str	r3, [r7, #16]
 800e5fa:	4b18      	ldr	r3, [pc, #96]	; (800e65c <HAL_UART_MspInit+0x88>)
 800e5fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5fe:	4a17      	ldr	r2, [pc, #92]	; (800e65c <HAL_UART_MspInit+0x88>)
 800e600:	f043 0310 	orr.w	r3, r3, #16
 800e604:	6453      	str	r3, [r2, #68]	; 0x44
 800e606:	4b15      	ldr	r3, [pc, #84]	; (800e65c <HAL_UART_MspInit+0x88>)
 800e608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e60a:	f003 0310 	and.w	r3, r3, #16
 800e60e:	613b      	str	r3, [r7, #16]
 800e610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e612:	2300      	movs	r3, #0
 800e614:	60fb      	str	r3, [r7, #12]
 800e616:	4b11      	ldr	r3, [pc, #68]	; (800e65c <HAL_UART_MspInit+0x88>)
 800e618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e61a:	4a10      	ldr	r2, [pc, #64]	; (800e65c <HAL_UART_MspInit+0x88>)
 800e61c:	f043 0301 	orr.w	r3, r3, #1
 800e620:	6313      	str	r3, [r2, #48]	; 0x30
 800e622:	4b0e      	ldr	r3, [pc, #56]	; (800e65c <HAL_UART_MspInit+0x88>)
 800e624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e626:	f003 0301 	and.w	r3, r3, #1
 800e62a:	60fb      	str	r3, [r7, #12]
 800e62c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e62e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800e632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e634:	2302      	movs	r3, #2
 800e636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e638:	2300      	movs	r3, #0
 800e63a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e63c:	2303      	movs	r3, #3
 800e63e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800e640:	2307      	movs	r3, #7
 800e642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e644:	f107 0314 	add.w	r3, r7, #20
 800e648:	4619      	mov	r1, r3
 800e64a:	4805      	ldr	r0, [pc, #20]	; (800e660 <HAL_UART_MspInit+0x8c>)
 800e64c:	f002 fbb6 	bl	8010dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800e650:	bf00      	nop
 800e652:	3728      	adds	r7, #40	; 0x28
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	40011000 	.word	0x40011000
 800e65c:	40023800 	.word	0x40023800
 800e660:	40020000 	.word	0x40020000

0800e664 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b08c      	sub	sp, #48	; 0x30
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800e66c:	2300      	movs	r3, #0
 800e66e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800e670:	2300      	movs	r3, #0
 800e672:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800e674:	2200      	movs	r2, #0
 800e676:	6879      	ldr	r1, [r7, #4]
 800e678:	2019      	movs	r0, #25
 800e67a:	f002 f87f 	bl	801077c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800e67e:	2019      	movs	r0, #25
 800e680:	f002 f898 	bl	80107b4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800e684:	2300      	movs	r3, #0
 800e686:	60fb      	str	r3, [r7, #12]
 800e688:	4b1e      	ldr	r3, [pc, #120]	; (800e704 <HAL_InitTick+0xa0>)
 800e68a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e68c:	4a1d      	ldr	r2, [pc, #116]	; (800e704 <HAL_InitTick+0xa0>)
 800e68e:	f043 0301 	orr.w	r3, r3, #1
 800e692:	6453      	str	r3, [r2, #68]	; 0x44
 800e694:	4b1b      	ldr	r3, [pc, #108]	; (800e704 <HAL_InitTick+0xa0>)
 800e696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e698:	f003 0301 	and.w	r3, r3, #1
 800e69c:	60fb      	str	r3, [r7, #12]
 800e69e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800e6a0:	f107 0210 	add.w	r2, r7, #16
 800e6a4:	f107 0314 	add.w	r3, r7, #20
 800e6a8:	4611      	mov	r1, r2
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f004 fb78 	bl	8012da0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800e6b0:	f004 fb62 	bl	8012d78 <HAL_RCC_GetPCLK2Freq>
 800e6b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800e6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b8:	4a13      	ldr	r2, [pc, #76]	; (800e708 <HAL_InitTick+0xa4>)
 800e6ba:	fba2 2303 	umull	r2, r3, r2, r3
 800e6be:	0c9b      	lsrs	r3, r3, #18
 800e6c0:	3b01      	subs	r3, #1
 800e6c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800e6c4:	4b11      	ldr	r3, [pc, #68]	; (800e70c <HAL_InitTick+0xa8>)
 800e6c6:	4a12      	ldr	r2, [pc, #72]	; (800e710 <HAL_InitTick+0xac>)
 800e6c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800e6ca:	4b10      	ldr	r3, [pc, #64]	; (800e70c <HAL_InitTick+0xa8>)
 800e6cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e6d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800e6d2:	4a0e      	ldr	r2, [pc, #56]	; (800e70c <HAL_InitTick+0xa8>)
 800e6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800e6d8:	4b0c      	ldr	r3, [pc, #48]	; (800e70c <HAL_InitTick+0xa8>)
 800e6da:	2200      	movs	r2, #0
 800e6dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e6de:	4b0b      	ldr	r3, [pc, #44]	; (800e70c <HAL_InitTick+0xa8>)
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800e6e4:	4809      	ldr	r0, [pc, #36]	; (800e70c <HAL_InitTick+0xa8>)
 800e6e6:	f005 f935 	bl	8013954 <HAL_TIM_Base_Init>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d104      	bne.n	800e6fa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800e6f0:	4806      	ldr	r0, [pc, #24]	; (800e70c <HAL_InitTick+0xa8>)
 800e6f2:	f005 f989 	bl	8013a08 <HAL_TIM_Base_Start_IT>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	e000      	b.n	800e6fc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800e6fa:	2301      	movs	r3, #1
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3730      	adds	r7, #48	; 0x30
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}
 800e704:	40023800 	.word	0x40023800
 800e708:	431bde83 	.word	0x431bde83
 800e70c:	200074a4 	.word	0x200074a4
 800e710:	40010000 	.word	0x40010000

0800e714 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 800e714:	b480      	push	{r7}
 800e716:	af00      	add	r7, sp, #0
  /* Disable TIM1 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);
 800e718:	4b06      	ldr	r3, [pc, #24]	; (800e734 <HAL_SuspendTick+0x20>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	68da      	ldr	r2, [r3, #12]
 800e71e:	4b05      	ldr	r3, [pc, #20]	; (800e734 <HAL_SuspendTick+0x20>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f022 0201 	bic.w	r2, r2, #1
 800e726:	60da      	str	r2, [r3, #12]
}
 800e728:	bf00      	nop
 800e72a:	46bd      	mov	sp, r7
 800e72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e730:	4770      	bx	lr
 800e732:	bf00      	nop
 800e734:	200074a4 	.word	0x200074a4

0800e738 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 800e738:	b480      	push	{r7}
 800e73a:	af00      	add	r7, sp, #0
  /* Enable TIM1 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 800e73c:	4b06      	ldr	r3, [pc, #24]	; (800e758 <HAL_ResumeTick+0x20>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	68da      	ldr	r2, [r3, #12]
 800e742:	4b05      	ldr	r3, [pc, #20]	; (800e758 <HAL_ResumeTick+0x20>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f042 0201 	orr.w	r2, r2, #1
 800e74a:	60da      	str	r2, [r3, #12]
}
 800e74c:	bf00      	nop
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr
 800e756:	bf00      	nop
 800e758:	200074a4 	.word	0x200074a4

0800e75c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e75c:	b480      	push	{r7}
 800e75e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e760:	e7fe      	b.n	800e760 <NMI_Handler+0x4>

0800e762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e762:	b480      	push	{r7}
 800e764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e766:	e7fe      	b.n	800e766 <HardFault_Handler+0x4>

0800e768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e768:	b480      	push	{r7}
 800e76a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e76c:	e7fe      	b.n	800e76c <MemManage_Handler+0x4>

0800e76e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e76e:	b480      	push	{r7}
 800e770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e772:	e7fe      	b.n	800e772 <BusFault_Handler+0x4>

0800e774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e774:	b480      	push	{r7}
 800e776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e778:	e7fe      	b.n	800e778 <UsageFault_Handler+0x4>

0800e77a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e77a:	b480      	push	{r7}
 800e77c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e77e:	bf00      	nop
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr

0800e788 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800e78c:	2004      	movs	r0, #4
 800e78e:	f002 fccb 	bl	8011128 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800e792:	bf00      	nop
 800e794:	bd80      	pop	{r7, pc}
	...

0800e798 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800e79c:	4802      	ldr	r0, [pc, #8]	; (800e7a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800e79e:	f005 f9e4 	bl	8013b6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800e7a2:	bf00      	nop
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	200074a4 	.word	0x200074a4

0800e7ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT2_Pin);
 800e7b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800e7b4:	f002 fcb8 	bl	8011128 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 800e7b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e7bc:	f002 fcb4 	bl	8011128 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800e7c0:	bf00      	nop
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800e7c8:	4802      	ldr	r0, [pc, #8]	; (800e7d4 <OTG_FS_IRQHandler+0x10>)
 800e7ca:	f002 fe15 	bl	80113f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800e7ce:	bf00      	nop
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	20007cf0 	.word	0x20007cf0

0800e7d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b086      	sub	sp, #24
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e7e0:	4a14      	ldr	r2, [pc, #80]	; (800e834 <_sbrk+0x5c>)
 800e7e2:	4b15      	ldr	r3, [pc, #84]	; (800e838 <_sbrk+0x60>)
 800e7e4:	1ad3      	subs	r3, r2, r3
 800e7e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e7ec:	4b13      	ldr	r3, [pc, #76]	; (800e83c <_sbrk+0x64>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d102      	bne.n	800e7fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e7f4:	4b11      	ldr	r3, [pc, #68]	; (800e83c <_sbrk+0x64>)
 800e7f6:	4a12      	ldr	r2, [pc, #72]	; (800e840 <_sbrk+0x68>)
 800e7f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e7fa:	4b10      	ldr	r3, [pc, #64]	; (800e83c <_sbrk+0x64>)
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	4413      	add	r3, r2
 800e802:	693a      	ldr	r2, [r7, #16]
 800e804:	429a      	cmp	r2, r3
 800e806:	d207      	bcs.n	800e818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e808:	f00d f8a2 	bl	801b950 <__errno>
 800e80c:	4603      	mov	r3, r0
 800e80e:	220c      	movs	r2, #12
 800e810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e812:	f04f 33ff 	mov.w	r3, #4294967295
 800e816:	e009      	b.n	800e82c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e818:	4b08      	ldr	r3, [pc, #32]	; (800e83c <_sbrk+0x64>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e81e:	4b07      	ldr	r3, [pc, #28]	; (800e83c <_sbrk+0x64>)
 800e820:	681a      	ldr	r2, [r3, #0]
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	4413      	add	r3, r2
 800e826:	4a05      	ldr	r2, [pc, #20]	; (800e83c <_sbrk+0x64>)
 800e828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800e82a:	68fb      	ldr	r3, [r7, #12]
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3718      	adds	r7, #24
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	20020000 	.word	0x20020000
 800e838:	00000400 	.word	0x00000400
 800e83c:	20000460 	.word	0x20000460
 800e840:	20008108 	.word	0x20008108

0800e844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e844:	b480      	push	{r7}
 800e846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e848:	4b06      	ldr	r3, [pc, #24]	; (800e864 <SystemInit+0x20>)
 800e84a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e84e:	4a05      	ldr	r2, [pc, #20]	; (800e864 <SystemInit+0x20>)
 800e850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e858:	bf00      	nop
 800e85a:	46bd      	mov	sp, r7
 800e85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e860:	4770      	bx	lr
 800e862:	bf00      	nop
 800e864:	e000ed00 	.word	0xe000ed00

0800e868 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800e868:	b590      	push	{r4, r7, lr}
 800e86a:	b087      	sub	sp, #28
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	607a      	str	r2, [r7, #4]
 800e872:	461a      	mov	r2, r3
 800e874:	460b      	mov	r3, r1
 800e876:	72fb      	strb	r3, [r7, #11]
 800e878:	4613      	mov	r3, r2
 800e87a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	685c      	ldr	r4, [r3, #4]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	6898      	ldr	r0, [r3, #8]
 800e884:	893b      	ldrh	r3, [r7, #8]
 800e886:	7af9      	ldrb	r1, [r7, #11]
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	47a0      	blx	r4
 800e88c:	6178      	str	r0, [r7, #20]

  return ret;
 800e88e:	697b      	ldr	r3, [r7, #20]
}
 800e890:	4618      	mov	r0, r3
 800e892:	371c      	adds	r7, #28
 800e894:	46bd      	mov	sp, r7
 800e896:	bd90      	pop	{r4, r7, pc}

0800e898 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800e898:	b590      	push	{r4, r7, lr}
 800e89a:	b087      	sub	sp, #28
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	60f8      	str	r0, [r7, #12]
 800e8a0:	607a      	str	r2, [r7, #4]
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	460b      	mov	r3, r1
 800e8a6:	72fb      	strb	r3, [r7, #11]
 800e8a8:	4613      	mov	r3, r2
 800e8aa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681c      	ldr	r4, [r3, #0]
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	6898      	ldr	r0, [r3, #8]
 800e8b4:	893b      	ldrh	r3, [r7, #8]
 800e8b6:	7af9      	ldrb	r1, [r7, #11]
 800e8b8:	687a      	ldr	r2, [r7, #4]
 800e8ba:	47a0      	blx	r4
 800e8bc:	6178      	str	r0, [r7, #20]

  return ret;
 800e8be:	697b      	ldr	r3, [r7, #20]
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	371c      	adds	r7, #28
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd90      	pop	{r4, r7, pc}

0800e8c8 <lsm6dsr_from_fs16g_to_mg>:
{
  return ((float_t)lsb * 0.244f);
}

float_t lsm6dsr_from_fs16g_to_mg(int16_t lsb)
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b083      	sub	sp, #12
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.488f);
 800e8d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e8d6:	ee07 3a90 	vmov	s15, r3
 800e8da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e8de:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800e8f4 <lsm6dsr_from_fs16g_to_mg+0x2c>
 800e8e2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800e8e6:	eeb0 0a67 	vmov.f32	s0, s15
 800e8ea:	370c      	adds	r7, #12
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f2:	4770      	bx	lr
 800e8f4:	3ef9db23 	.word	0x3ef9db23

0800e8f8 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	460b      	mov	r3, r1
 800e902:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800e904:	f107 0208 	add.w	r2, r7, #8
 800e908:	2301      	movs	r3, #1
 800e90a:	2110      	movs	r1, #16
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f7ff ffab 	bl	800e868 <lsm6dsr_read_reg>
 800e912:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d10f      	bne.n	800e93a <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 800e91a:	78fb      	ldrb	r3, [r7, #3]
 800e91c:	f003 0303 	and.w	r3, r3, #3
 800e920:	b2da      	uxtb	r2, r3
 800e922:	7a3b      	ldrb	r3, [r7, #8]
 800e924:	f362 0383 	bfi	r3, r2, #2, #2
 800e928:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800e92a:	f107 0208 	add.w	r2, r7, #8
 800e92e:	2301      	movs	r3, #1
 800e930:	2110      	movs	r1, #16
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f7ff ffb0 	bl	800e898 <lsm6dsr_write_reg>
 800e938:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800e93a:	68fb      	ldr	r3, [r7, #12]
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3710      	adds	r7, #16
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b086      	sub	sp, #24
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	460b      	mov	r3, r1
 800e94e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 800e950:	78fb      	ldrb	r3, [r7, #3]
 800e952:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 800e954:	f107 030c 	add.w	r3, r7, #12
 800e958:	4619      	mov	r1, r3
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f000 fd91 	bl	800f482 <lsm6dsr_fsm_enable_get>
 800e960:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	2b00      	cmp	r3, #0
 800e966:	f040 80c4 	bne.w	800eaf2 <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800e96a:	7b3b      	ldrb	r3, [r7, #12]
 800e96c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e970:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800e972:	7b3b      	ldrb	r3, [r7, #12]
 800e974:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e978:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800e97a:	4313      	orrs	r3, r2
 800e97c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800e97e:	7b3b      	ldrb	r3, [r7, #12]
 800e980:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e984:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800e986:	4313      	orrs	r3, r2
 800e988:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800e98a:	7b3b      	ldrb	r3, [r7, #12]
 800e98c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e990:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800e992:	4313      	orrs	r3, r2
 800e994:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800e996:	7b3b      	ldrb	r3, [r7, #12]
 800e998:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e99c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800e9a2:	7b3b      	ldrb	r3, [r7, #12]
 800e9a4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e9a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800e9aa:	4313      	orrs	r3, r2
 800e9ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800e9ae:	7b3b      	ldrb	r3, [r7, #12]
 800e9b0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800e9b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800e9ba:	7b3b      	ldrb	r3, [r7, #12]
 800e9bc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e9c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800e9c2:	4313      	orrs	r3, r2
 800e9c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800e9c6:	7b7b      	ldrb	r3, [r7, #13]
 800e9c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e9cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800e9ce:	4313      	orrs	r3, r2
 800e9d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800e9d2:	7b7b      	ldrb	r3, [r7, #13]
 800e9d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e9d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800e9da:	4313      	orrs	r3, r2
 800e9dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800e9de:	7b7b      	ldrb	r3, [r7, #13]
 800e9e0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e9e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800e9e6:	4313      	orrs	r3, r2
 800e9e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800e9ea:	7b7b      	ldrb	r3, [r7, #13]
 800e9ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e9f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800e9f2:	4313      	orrs	r3, r2
 800e9f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800e9f6:	7b7b      	ldrb	r3, [r7, #13]
 800e9f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e9fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800ea02:	7b7b      	ldrb	r3, [r7, #13]
 800ea04:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ea08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800ea0a:	4313      	orrs	r3, r2
 800ea0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800ea0e:	7b7b      	ldrb	r3, [r7, #13]
 800ea10:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ea14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800ea16:	4313      	orrs	r3, r2
 800ea18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800ea1a:	7b7b      	ldrb	r3, [r7, #13]
 800ea1c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ea20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800ea22:	4313      	orrs	r3, r2
 800ea24:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800ea26:	2b01      	cmp	r3, #1
 800ea28:	d163      	bne.n	800eaf2 <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800ea2a:	f107 030b 	add.w	r3, r7, #11
 800ea2e:	4619      	mov	r1, r3
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f000 fd53 	bl	800f4dc <lsm6dsr_fsm_data_rate_get>
 800ea36:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d159      	bne.n	800eaf2 <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800ea3e:	7afb      	ldrb	r3, [r7, #11]
 800ea40:	2b03      	cmp	r3, #3
 800ea42:	d853      	bhi.n	800eaec <lsm6dsr_xl_data_rate_set+0x1a8>
 800ea44:	a201      	add	r2, pc, #4	; (adr r2, 800ea4c <lsm6dsr_xl_data_rate_set+0x108>)
 800ea46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea4a:	bf00      	nop
 800ea4c:	0800ea5d 	.word	0x0800ea5d
 800ea50:	0800ea6f 	.word	0x0800ea6f
 800ea54:	0800ea8d 	.word	0x0800ea8d
 800ea58:	0800eab7 	.word	0x0800eab7
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 800ea5c:	78fb      	ldrb	r3, [r7, #3]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d102      	bne.n	800ea68 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800ea62:	2301      	movs	r3, #1
 800ea64:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800ea66:	e045      	b.n	800eaf4 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800ea68:	78fb      	ldrb	r3, [r7, #3]
 800ea6a:	75fb      	strb	r3, [r7, #23]
            break;
 800ea6c:	e042      	b.n	800eaf4 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800ea6e:	78fb      	ldrb	r3, [r7, #3]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d102      	bne.n	800ea7a <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800ea74:	2302      	movs	r3, #2
 800ea76:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800ea78:	e03c      	b.n	800eaf4 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800ea7a:	78fb      	ldrb	r3, [r7, #3]
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	d102      	bne.n	800ea86 <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800ea80:	2302      	movs	r3, #2
 800ea82:	75fb      	strb	r3, [r7, #23]
            break;
 800ea84:	e036      	b.n	800eaf4 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800ea86:	78fb      	ldrb	r3, [r7, #3]
 800ea88:	75fb      	strb	r3, [r7, #23]
            break;
 800ea8a:	e033      	b.n	800eaf4 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800ea8c:	78fb      	ldrb	r3, [r7, #3]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d102      	bne.n	800ea98 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800ea92:	2303      	movs	r3, #3
 800ea94:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800ea96:	e02d      	b.n	800eaf4 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800ea98:	78fb      	ldrb	r3, [r7, #3]
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d102      	bne.n	800eaa4 <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800ea9e:	2303      	movs	r3, #3
 800eaa0:	75fb      	strb	r3, [r7, #23]
            break;
 800eaa2:	e027      	b.n	800eaf4 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800eaa4:	78fb      	ldrb	r3, [r7, #3]
 800eaa6:	2b02      	cmp	r3, #2
 800eaa8:	d102      	bne.n	800eab0 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800eaaa:	2303      	movs	r3, #3
 800eaac:	75fb      	strb	r3, [r7, #23]
            break;
 800eaae:	e021      	b.n	800eaf4 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800eab0:	78fb      	ldrb	r3, [r7, #3]
 800eab2:	75fb      	strb	r3, [r7, #23]
            break;
 800eab4:	e01e      	b.n	800eaf4 <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800eab6:	78fb      	ldrb	r3, [r7, #3]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d102      	bne.n	800eac2 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800eabc:	2304      	movs	r3, #4
 800eabe:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800eac0:	e018      	b.n	800eaf4 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800eac2:	78fb      	ldrb	r3, [r7, #3]
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	d102      	bne.n	800eace <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800eac8:	2304      	movs	r3, #4
 800eaca:	75fb      	strb	r3, [r7, #23]
            break;
 800eacc:	e012      	b.n	800eaf4 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800eace:	78fb      	ldrb	r3, [r7, #3]
 800ead0:	2b02      	cmp	r3, #2
 800ead2:	d102      	bne.n	800eada <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800ead4:	2304      	movs	r3, #4
 800ead6:	75fb      	strb	r3, [r7, #23]
            break;
 800ead8:	e00c      	b.n	800eaf4 <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 800eada:	78fb      	ldrb	r3, [r7, #3]
 800eadc:	2b03      	cmp	r3, #3
 800eade:	d102      	bne.n	800eae6 <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800eae0:	2304      	movs	r3, #4
 800eae2:	75fb      	strb	r3, [r7, #23]
            break;
 800eae4:	e006      	b.n	800eaf4 <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800eae6:	78fb      	ldrb	r3, [r7, #3]
 800eae8:	75fb      	strb	r3, [r7, #23]
            break;
 800eaea:	e003      	b.n	800eaf4 <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 800eaec:	78fb      	ldrb	r3, [r7, #3]
 800eaee:	75fb      	strb	r3, [r7, #23]
            break;
 800eaf0:	e000      	b.n	800eaf4 <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 800eaf2:	bf00      	nop
    }
  }

  if (ret == 0)
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d107      	bne.n	800eb0a <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800eafa:	f107 0208 	add.w	r2, r7, #8
 800eafe:	2301      	movs	r3, #1
 800eb00:	2110      	movs	r1, #16
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f7ff feb0 	bl	800e868 <lsm6dsr_read_reg>
 800eb08:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d10f      	bne.n	800eb30 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 800eb10:	7dfb      	ldrb	r3, [r7, #23]
 800eb12:	f003 030f 	and.w	r3, r3, #15
 800eb16:	b2da      	uxtb	r2, r3
 800eb18:	7a3b      	ldrb	r3, [r7, #8]
 800eb1a:	f362 1307 	bfi	r3, r2, #4, #4
 800eb1e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800eb20:	f107 0208 	add.w	r2, r7, #8
 800eb24:	2301      	movs	r3, #1
 800eb26:	2110      	movs	r1, #16
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f7ff feb5 	bl	800e898 <lsm6dsr_write_reg>
 800eb2e:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800eb30:	693b      	ldr	r3, [r7, #16]
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3718      	adds	r7, #24
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop

0800eb3c <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	460b      	mov	r3, r1
 800eb46:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800eb48:	f107 0208 	add.w	r2, r7, #8
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	2111      	movs	r1, #17
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f7ff fe89 	bl	800e868 <lsm6dsr_read_reg>
 800eb56:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d10f      	bne.n	800eb7e <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 800eb5e:	78fb      	ldrb	r3, [r7, #3]
 800eb60:	f003 030f 	and.w	r3, r3, #15
 800eb64:	b2da      	uxtb	r2, r3
 800eb66:	7a3b      	ldrb	r3, [r7, #8]
 800eb68:	f362 0303 	bfi	r3, r2, #0, #4
 800eb6c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800eb6e:	f107 0208 	add.w	r2, r7, #8
 800eb72:	2301      	movs	r3, #1
 800eb74:	2111      	movs	r1, #17
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f7ff fe8e 	bl	800e898 <lsm6dsr_write_reg>
 800eb7c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3710      	adds	r7, #16
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b086      	sub	sp, #24
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	460b      	mov	r3, r1
 800eb92:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 800eb94:	78fb      	ldrb	r3, [r7, #3]
 800eb96:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 800eb98:	f107 030c 	add.w	r3, r7, #12
 800eb9c:	4619      	mov	r1, r3
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f000 fc6f 	bl	800f482 <lsm6dsr_fsm_enable_get>
 800eba4:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	f040 80c4 	bne.w	800ed36 <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800ebae:	7b3b      	ldrb	r3, [r7, #12]
 800ebb0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ebb4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800ebb6:	7b3b      	ldrb	r3, [r7, #12]
 800ebb8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ebbc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800ebbe:	4313      	orrs	r3, r2
 800ebc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800ebc2:	7b3b      	ldrb	r3, [r7, #12]
 800ebc4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ebc8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800ebca:	4313      	orrs	r3, r2
 800ebcc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800ebce:	7b3b      	ldrb	r3, [r7, #12]
 800ebd0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ebd4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800ebd6:	4313      	orrs	r3, r2
 800ebd8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800ebda:	7b3b      	ldrb	r3, [r7, #12]
 800ebdc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ebe0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800ebe2:	4313      	orrs	r3, r2
 800ebe4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800ebe6:	7b3b      	ldrb	r3, [r7, #12]
 800ebe8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ebec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800ebee:	4313      	orrs	r3, r2
 800ebf0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800ebf2:	7b3b      	ldrb	r3, [r7, #12]
 800ebf4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ebf8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800ebfa:	4313      	orrs	r3, r2
 800ebfc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800ebfe:	7b3b      	ldrb	r3, [r7, #12]
 800ec00:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ec04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800ec06:	4313      	orrs	r3, r2
 800ec08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800ec0a:	7b7b      	ldrb	r3, [r7, #13]
 800ec0c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ec10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800ec12:	4313      	orrs	r3, r2
 800ec14:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800ec16:	7b7b      	ldrb	r3, [r7, #13]
 800ec18:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ec1c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800ec22:	7b7b      	ldrb	r3, [r7, #13]
 800ec24:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ec28:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800ec2a:	4313      	orrs	r3, r2
 800ec2c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800ec2e:	7b7b      	ldrb	r3, [r7, #13]
 800ec30:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ec34:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800ec36:	4313      	orrs	r3, r2
 800ec38:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800ec3a:	7b7b      	ldrb	r3, [r7, #13]
 800ec3c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ec40:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800ec42:	4313      	orrs	r3, r2
 800ec44:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800ec46:	7b7b      	ldrb	r3, [r7, #13]
 800ec48:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ec4c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800ec52:	7b7b      	ldrb	r3, [r7, #13]
 800ec54:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ec58:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800ec5a:	4313      	orrs	r3, r2
 800ec5c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800ec5e:	7b7b      	ldrb	r3, [r7, #13]
 800ec60:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ec64:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800ec66:	4313      	orrs	r3, r2
 800ec68:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800ec6a:	2b01      	cmp	r3, #1
 800ec6c:	d163      	bne.n	800ed36 <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800ec6e:	f107 030b 	add.w	r3, r7, #11
 800ec72:	4619      	mov	r1, r3
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f000 fc31 	bl	800f4dc <lsm6dsr_fsm_data_rate_get>
 800ec7a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d159      	bne.n	800ed36 <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800ec82:	7afb      	ldrb	r3, [r7, #11]
 800ec84:	2b03      	cmp	r3, #3
 800ec86:	d853      	bhi.n	800ed30 <lsm6dsr_gy_data_rate_set+0x1a8>
 800ec88:	a201      	add	r2, pc, #4	; (adr r2, 800ec90 <lsm6dsr_gy_data_rate_set+0x108>)
 800ec8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec8e:	bf00      	nop
 800ec90:	0800eca1 	.word	0x0800eca1
 800ec94:	0800ecb3 	.word	0x0800ecb3
 800ec98:	0800ecd1 	.word	0x0800ecd1
 800ec9c:	0800ecfb 	.word	0x0800ecfb
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 800eca0:	78fb      	ldrb	r3, [r7, #3]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d102      	bne.n	800ecac <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 800eca6:	2301      	movs	r3, #1
 800eca8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800ecaa:	e045      	b.n	800ed38 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800ecac:	78fb      	ldrb	r3, [r7, #3]
 800ecae:	75fb      	strb	r3, [r7, #23]
            break;
 800ecb0:	e042      	b.n	800ed38 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800ecb2:	78fb      	ldrb	r3, [r7, #3]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d102      	bne.n	800ecbe <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 800ecb8:	2302      	movs	r3, #2
 800ecba:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800ecbc:	e03c      	b.n	800ed38 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800ecbe:	78fb      	ldrb	r3, [r7, #3]
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d102      	bne.n	800ecca <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 800ecc4:	2302      	movs	r3, #2
 800ecc6:	75fb      	strb	r3, [r7, #23]
            break;
 800ecc8:	e036      	b.n	800ed38 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800ecca:	78fb      	ldrb	r3, [r7, #3]
 800eccc:	75fb      	strb	r3, [r7, #23]
            break;
 800ecce:	e033      	b.n	800ed38 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800ecd0:	78fb      	ldrb	r3, [r7, #3]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d102      	bne.n	800ecdc <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800ecd6:	2303      	movs	r3, #3
 800ecd8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800ecda:	e02d      	b.n	800ed38 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800ecdc:	78fb      	ldrb	r3, [r7, #3]
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	d102      	bne.n	800ece8 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800ece2:	2303      	movs	r3, #3
 800ece4:	75fb      	strb	r3, [r7, #23]
            break;
 800ece6:	e027      	b.n	800ed38 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800ece8:	78fb      	ldrb	r3, [r7, #3]
 800ecea:	2b02      	cmp	r3, #2
 800ecec:	d102      	bne.n	800ecf4 <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800ecee:	2303      	movs	r3, #3
 800ecf0:	75fb      	strb	r3, [r7, #23]
            break;
 800ecf2:	e021      	b.n	800ed38 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800ecf4:	78fb      	ldrb	r3, [r7, #3]
 800ecf6:	75fb      	strb	r3, [r7, #23]
            break;
 800ecf8:	e01e      	b.n	800ed38 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800ecfa:	78fb      	ldrb	r3, [r7, #3]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d102      	bne.n	800ed06 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800ed00:	2304      	movs	r3, #4
 800ed02:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800ed04:	e018      	b.n	800ed38 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800ed06:	78fb      	ldrb	r3, [r7, #3]
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	d102      	bne.n	800ed12 <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800ed0c:	2304      	movs	r3, #4
 800ed0e:	75fb      	strb	r3, [r7, #23]
            break;
 800ed10:	e012      	b.n	800ed38 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800ed12:	78fb      	ldrb	r3, [r7, #3]
 800ed14:	2b02      	cmp	r3, #2
 800ed16:	d102      	bne.n	800ed1e <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800ed18:	2304      	movs	r3, #4
 800ed1a:	75fb      	strb	r3, [r7, #23]
            break;
 800ed1c:	e00c      	b.n	800ed38 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 800ed1e:	78fb      	ldrb	r3, [r7, #3]
 800ed20:	2b03      	cmp	r3, #3
 800ed22:	d102      	bne.n	800ed2a <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800ed24:	2304      	movs	r3, #4
 800ed26:	75fb      	strb	r3, [r7, #23]
            break;
 800ed28:	e006      	b.n	800ed38 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800ed2a:	78fb      	ldrb	r3, [r7, #3]
 800ed2c:	75fb      	strb	r3, [r7, #23]
            break;
 800ed2e:	e003      	b.n	800ed38 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 800ed30:	78fb      	ldrb	r3, [r7, #3]
 800ed32:	75fb      	strb	r3, [r7, #23]
            break;
 800ed34:	e000      	b.n	800ed38 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 800ed36:	bf00      	nop
    }
  }

  if (ret == 0)
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d107      	bne.n	800ed4e <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ed3e:	f107 0208 	add.w	r2, r7, #8
 800ed42:	2301      	movs	r3, #1
 800ed44:	2111      	movs	r1, #17
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f7ff fd8e 	bl	800e868 <lsm6dsr_read_reg>
 800ed4c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d10f      	bne.n	800ed74 <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 800ed54:	7dfb      	ldrb	r3, [r7, #23]
 800ed56:	f003 030f 	and.w	r3, r3, #15
 800ed5a:	b2da      	uxtb	r2, r3
 800ed5c:	7a3b      	ldrb	r3, [r7, #8]
 800ed5e:	f362 1307 	bfi	r3, r2, #4, #4
 800ed62:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800ed64:	f107 0208 	add.w	r2, r7, #8
 800ed68:	2301      	movs	r3, #1
 800ed6a:	2111      	movs	r1, #17
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f7ff fd93 	bl	800e898 <lsm6dsr_write_reg>
 800ed72:	6138      	str	r0, [r7, #16]
  }

  return ret;
 800ed74:	693b      	ldr	r3, [r7, #16]
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3718      	adds	r7, #24
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop

0800ed80 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b084      	sub	sp, #16
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	460b      	mov	r3, r1
 800ed8a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800ed8c:	f107 0208 	add.w	r2, r7, #8
 800ed90:	2301      	movs	r3, #1
 800ed92:	2112      	movs	r1, #18
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f7ff fd67 	bl	800e868 <lsm6dsr_read_reg>
 800ed9a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d10f      	bne.n	800edc2 <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 800eda2:	78fb      	ldrb	r3, [r7, #3]
 800eda4:	f003 0301 	and.w	r3, r3, #1
 800eda8:	b2da      	uxtb	r2, r3
 800edaa:	7a3b      	ldrb	r3, [r7, #8]
 800edac:	f362 1386 	bfi	r3, r2, #6, #1
 800edb0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800edb2:	f107 0208 	add.w	r2, r7, #8
 800edb6:	2301      	movs	r3, #1
 800edb8:	2112      	movs	r1, #18
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f7ff fd6c 	bl	800e898 <lsm6dsr_write_reg>
 800edc0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800edc2:	68fb      	ldr	r3, [r7, #12]
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3710      	adds	r7, #16
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}

0800edcc <lsm6dsr_all_sources_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_all_sources_get(stmdev_ctx_t *ctx,
                                lsm6dsr_all_sources_t *val)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b084      	sub	sp, #16
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_ALL_INT_SRC,
                         (uint8_t *)&val->all_int_src, 1);
 800edd6:	683a      	ldr	r2, [r7, #0]
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_ALL_INT_SRC,
 800edd8:	2301      	movs	r3, #1
 800edda:	211a      	movs	r1, #26
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f7ff fd43 	bl	800e868 <lsm6dsr_read_reg>
 800ede2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d107      	bne.n	800edfa <lsm6dsr_all_sources_get+0x2e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_WAKE_UP_SRC,
                           (uint8_t *)&val->wake_up_src, 1);
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_WAKE_UP_SRC,
 800edee:	2301      	movs	r3, #1
 800edf0:	211b      	movs	r1, #27
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f7ff fd38 	bl	800e868 <lsm6dsr_read_reg>
 800edf8:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d107      	bne.n	800ee10 <lsm6dsr_all_sources_get+0x44>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_SRC,
                           (uint8_t *)&val->tap_src, 1);
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	1c9a      	adds	r2, r3, #2
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_SRC,
 800ee04:	2301      	movs	r3, #1
 800ee06:	211c      	movs	r1, #28
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f7ff fd2d 	bl	800e868 <lsm6dsr_read_reg>
 800ee0e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d107      	bne.n	800ee26 <lsm6dsr_all_sources_get+0x5a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_D6D_SRC,
                           (uint8_t *)&val->d6d_src, 1);
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	1cda      	adds	r2, r3, #3
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_D6D_SRC,
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	211d      	movs	r1, #29
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	f7ff fd22 	bl	800e868 <lsm6dsr_read_reg>
 800ee24:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d107      	bne.n	800ee3c <lsm6dsr_all_sources_get+0x70>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
                           (uint8_t *)&val->status_reg, 1);
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	1d1a      	adds	r2, r3, #4
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800ee30:	2301      	movs	r3, #1
 800ee32:	211e      	movs	r1, #30
 800ee34:	6878      	ldr	r0, [r7, #4]
 800ee36:	f7ff fd17 	bl	800e868 <lsm6dsr_read_reg>
 800ee3a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d104      	bne.n	800ee4c <lsm6dsr_all_sources_get+0x80>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800ee42:	2102      	movs	r1, #2
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f000 f87a 	bl	800ef3e <lsm6dsr_mem_bank_set>
 800ee4a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d107      	bne.n	800ee62 <lsm6dsr_all_sources_get+0x96>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_STATUS,
                           (uint8_t *)&val->emb_func_status, 1);
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	1d5a      	adds	r2, r3, #5
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_STATUS,
 800ee56:	2301      	movs	r3, #1
 800ee58:	2112      	movs	r1, #18
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f7ff fd04 	bl	800e868 <lsm6dsr_read_reg>
 800ee60:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d107      	bne.n	800ee78 <lsm6dsr_all_sources_get+0xac>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_STATUS_A,
                           (uint8_t *)&val->fsm_status_a, 1);
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	1d9a      	adds	r2, r3, #6
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_STATUS_A,
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	2113      	movs	r1, #19
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f7ff fcf9 	bl	800e868 <lsm6dsr_read_reg>
 800ee76:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d107      	bne.n	800ee8e <lsm6dsr_all_sources_get+0xc2>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_STATUS_B,
                           (uint8_t *)&val->fsm_status_b, 1);
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	1dda      	adds	r2, r3, #7
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_STATUS_B,
 800ee82:	2301      	movs	r3, #1
 800ee84:	2114      	movs	r1, #20
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f7ff fcee 	bl	800e868 <lsm6dsr_read_reg>
 800ee8c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d104      	bne.n	800ee9e <lsm6dsr_all_sources_get+0xd2>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800ee94:	2100      	movs	r1, #0
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f000 f851 	bl	800ef3e <lsm6dsr_mem_bank_set>
 800ee9c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3710      	adds	r7, #16
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}

0800eea8 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b086      	sub	sp, #24
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 800eeb2:	f107 020c 	add.w	r2, r7, #12
 800eeb6:	2306      	movs	r3, #6
 800eeb8:	2128      	movs	r1, #40	; 0x28
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f7ff fcd4 	bl	800e868 <lsm6dsr_read_reg>
 800eec0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800eec2:	7b7b      	ldrb	r3, [r7, #13]
 800eec4:	b21a      	sxth	r2, r3
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eed0:	b29b      	uxth	r3, r3
 800eed2:	021b      	lsls	r3, r3, #8
 800eed4:	b29a      	uxth	r2, r3
 800eed6:	7b3b      	ldrb	r3, [r7, #12]
 800eed8:	b29b      	uxth	r3, r3
 800eeda:	4413      	add	r3, r2
 800eedc:	b29b      	uxth	r3, r3
 800eede:	b21a      	sxth	r2, r3
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800eee4:	7bfa      	ldrb	r2, [r7, #15]
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	3302      	adds	r3, #2
 800eeea:	b212      	sxth	r2, r2
 800eeec:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	3302      	adds	r3, #2
 800eef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eef6:	b29b      	uxth	r3, r3
 800eef8:	021b      	lsls	r3, r3, #8
 800eefa:	b29a      	uxth	r2, r3
 800eefc:	7bbb      	ldrb	r3, [r7, #14]
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	4413      	add	r3, r2
 800ef02:	b29a      	uxth	r2, r3
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	3302      	adds	r3, #2
 800ef08:	b212      	sxth	r2, r2
 800ef0a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800ef0c:	7c7a      	ldrb	r2, [r7, #17]
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	3304      	adds	r3, #4
 800ef12:	b212      	sxth	r2, r2
 800ef14:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	3304      	adds	r3, #4
 800ef1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	021b      	lsls	r3, r3, #8
 800ef22:	b29a      	uxth	r2, r3
 800ef24:	7c3b      	ldrb	r3, [r7, #16]
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	4413      	add	r3, r2
 800ef2a:	b29a      	uxth	r2, r3
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	3304      	adds	r3, #4
 800ef30:	b212      	sxth	r2, r2
 800ef32:	801a      	strh	r2, [r3, #0]

  return ret;
 800ef34:	697b      	ldr	r3, [r7, #20]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3718      	adds	r7, #24
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 800ef3e:	b580      	push	{r7, lr}
 800ef40:	b084      	sub	sp, #16
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
 800ef46:	460b      	mov	r3, r1
 800ef48:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800ef4a:	f107 0208 	add.w	r2, r7, #8
 800ef4e:	2301      	movs	r3, #1
 800ef50:	2101      	movs	r1, #1
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f7ff fc88 	bl	800e868 <lsm6dsr_read_reg>
 800ef58:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d10f      	bne.n	800ef80 <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800ef60:	78fb      	ldrb	r3, [r7, #3]
 800ef62:	f003 0303 	and.w	r3, r3, #3
 800ef66:	b2da      	uxtb	r2, r3
 800ef68:	7a3b      	ldrb	r3, [r7, #8]
 800ef6a:	f362 1387 	bfi	r3, r2, #6, #2
 800ef6e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800ef70:	f107 0208 	add.w	r2, r7, #8
 800ef74:	2301      	movs	r3, #1
 800ef76:	2101      	movs	r1, #1
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f7ff fc8d 	bl	800e898 <lsm6dsr_write_reg>
 800ef7e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800ef80:	68fb      	ldr	r3, [r7, #12]
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}

0800ef8a <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800ef8a:	b580      	push	{r7, lr}
 800ef8c:	b084      	sub	sp, #16
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	6078      	str	r0, [r7, #4]
 800ef92:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 800ef94:	2301      	movs	r3, #1
 800ef96:	683a      	ldr	r2, [r7, #0]
 800ef98:	210f      	movs	r1, #15
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f7ff fc64 	bl	800e868 <lsm6dsr_read_reg>
 800efa0:	60f8      	str	r0, [r7, #12]

  return ret;
 800efa2:	68fb      	ldr	r3, [r7, #12]
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3710      	adds	r7, #16
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}

0800efac <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b084      	sub	sp, #16
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	460b      	mov	r3, r1
 800efb6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800efb8:	f107 0208 	add.w	r2, r7, #8
 800efbc:	2301      	movs	r3, #1
 800efbe:	2112      	movs	r1, #18
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7ff fc51 	bl	800e868 <lsm6dsr_read_reg>
 800efc6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d10f      	bne.n	800efee <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 800efce:	78fb      	ldrb	r3, [r7, #3]
 800efd0:	f003 0301 	and.w	r3, r3, #1
 800efd4:	b2da      	uxtb	r2, r3
 800efd6:	7a3b      	ldrb	r3, [r7, #8]
 800efd8:	f362 0300 	bfi	r3, r2, #0, #1
 800efdc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800efde:	f107 0208 	add.w	r2, r7, #8
 800efe2:	2301      	movs	r3, #1
 800efe4:	2112      	movs	r1, #18
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7ff fc56 	bl	800e898 <lsm6dsr_write_reg>
 800efec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800efee:	68fb      	ldr	r3, [r7, #12]
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3710      	adds	r7, #16
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <lsm6dsr_xl_hp_path_internal_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_internal_set(stmdev_ctx_t *ctx,
                                        lsm6dsr_slope_fds_t val)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	460b      	mov	r3, r1
 800f002:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_tap_cfg0_t tap_cfg0;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_CFG0, (uint8_t *)&tap_cfg0, 1);
 800f004:	f107 0208 	add.w	r2, r7, #8
 800f008:	2301      	movs	r3, #1
 800f00a:	2156      	movs	r1, #86	; 0x56
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f7ff fc2b 	bl	800e868 <lsm6dsr_read_reg>
 800f012:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d10f      	bne.n	800f03a <lsm6dsr_xl_hp_path_internal_set+0x42>
  {
    tap_cfg0.slope_fds = (uint8_t)val;
 800f01a:	78fb      	ldrb	r3, [r7, #3]
 800f01c:	f003 0301 	and.w	r3, r3, #1
 800f020:	b2da      	uxtb	r2, r3
 800f022:	7a3b      	ldrb	r3, [r7, #8]
 800f024:	f362 1304 	bfi	r3, r2, #4, #1
 800f028:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_TAP_CFG0,
 800f02a:	f107 0208 	add.w	r2, r7, #8
 800f02e:	2301      	movs	r3, #1
 800f030:	2156      	movs	r1, #86	; 0x56
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f7ff fc30 	bl	800e898 <lsm6dsr_write_reg>
 800f038:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&tap_cfg0, 1);
  }

  return ret;
 800f03a:	68fb      	ldr	r3, [r7, #12]
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3710      	adds	r7, #16
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b086      	sub	sp, #24
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	460b      	mov	r3, r1
 800f04e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800f050:	f107 0210 	add.w	r2, r7, #16
 800f054:	2301      	movs	r3, #1
 800f056:	2118      	movs	r1, #24
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f7ff fc05 	bl	800e868 <lsm6dsr_read_reg>
 800f05e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d111      	bne.n	800f08a <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800f066:	78fb      	ldrb	r3, [r7, #3]
 800f068:	09db      	lsrs	r3, r3, #7
 800f06a:	b2db      	uxtb	r3, r3
 800f06c:	f003 0301 	and.w	r3, r3, #1
 800f070:	b2da      	uxtb	r2, r3
 800f072:	7c3b      	ldrb	r3, [r7, #16]
 800f074:	f362 0341 	bfi	r3, r2, #1, #1
 800f078:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 800f07a:	f107 0210 	add.w	r2, r7, #16
 800f07e:	2301      	movs	r3, #1
 800f080:	2118      	movs	r1, #24
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f7ff fc08 	bl	800e898 <lsm6dsr_write_reg>
 800f088:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d107      	bne.n	800f0a0 <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 800f090:	f107 020c 	add.w	r2, r7, #12
 800f094:	2301      	movs	r3, #1
 800f096:	2162      	movs	r1, #98	; 0x62
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f7ff fbe5 	bl	800e868 <lsm6dsr_read_reg>
 800f09e:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d10f      	bne.n	800f0c6 <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800f0a6:	78fb      	ldrb	r3, [r7, #3]
 800f0a8:	f003 0303 	and.w	r3, r3, #3
 800f0ac:	b2da      	uxtb	r2, r3
 800f0ae:	7b3b      	ldrb	r3, [r7, #12]
 800f0b0:	f362 03c4 	bfi	r3, r2, #3, #2
 800f0b4:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 800f0b6:	f107 020c 	add.w	r2, r7, #12
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	2162      	movs	r1, #98	; 0x62
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f7ff fbea 	bl	800e898 <lsm6dsr_write_reg>
 800f0c4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 800f0c6:	697b      	ldr	r3, [r7, #20]
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3718      	adds	r7, #24
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}

0800f0d0 <lsm6dsr_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsr_pin_int1_route_t *val)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
  lsm6dsr_tap_cfg2_t tap_cfg2;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800f0da:	2102      	movs	r1, #2
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f7ff ff2e 	bl	800ef3e <lsm6dsr_mem_bank_set>
 800f0e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d107      	bne.n	800f0fa <lsm6dsr_pin_int1_route_set+0x2a>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
                            (uint8_t *)&val->emb_func_int1, 1);
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	1c9a      	adds	r2, r3, #2
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	210a      	movs	r1, #10
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f7ff fbd0 	bl	800e898 <lsm6dsr_write_reg>
 800f0f8:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d107      	bne.n	800f110 <lsm6dsr_pin_int1_route_set+0x40>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_A,
                            (uint8_t *)&val->fsm_int1_a, 1);
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	1cda      	adds	r2, r3, #3
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_A,
 800f104:	2301      	movs	r3, #1
 800f106:	210b      	movs	r1, #11
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f7ff fbc5 	bl	800e898 <lsm6dsr_write_reg>
 800f10e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d107      	bne.n	800f126 <lsm6dsr_pin_int1_route_set+0x56>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_B,
                            (uint8_t *)&val->fsm_int1_b, 1);
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	1d1a      	adds	r2, r3, #4
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT1_B,
 800f11a:	2301      	movs	r3, #1
 800f11c:	210c      	movs	r1, #12
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f7ff fbba 	bl	800e898 <lsm6dsr_write_reg>
 800f124:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d104      	bne.n	800f136 <lsm6dsr_pin_int1_route_set+0x66>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800f12c:	2100      	movs	r1, #0
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f7ff ff05 	bl	800ef3e <lsm6dsr_mem_bank_set>
 800f134:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	f040 809e 	bne.w	800f27a <lsm6dsr_pin_int1_route_set+0x1aa>
  {
    if ((val->emb_func_int1.int1_fsm_lc |
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	789b      	ldrb	r3, [r3, #2]
 800f142:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f146:	b2da      	uxtb	r2, r3
         val->emb_func_int1.int1_sig_mot |
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	789b      	ldrb	r3, [r3, #2]
 800f14c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f150:	b2db      	uxtb	r3, r3
    if ((val->emb_func_int1.int1_fsm_lc |
 800f152:	4313      	orrs	r3, r2
 800f154:	b2da      	uxtb	r2, r3
         val->emb_func_int1.int1_step_detector |
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	789b      	ldrb	r3, [r3, #2]
 800f15a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f15e:	b2db      	uxtb	r3, r3
         val->emb_func_int1.int1_sig_mot |
 800f160:	4313      	orrs	r3, r2
 800f162:	b2da      	uxtb	r2, r3
         val->emb_func_int1.int1_tilt |
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	789b      	ldrb	r3, [r3, #2]
 800f168:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f16c:	b2db      	uxtb	r3, r3
         val->emb_func_int1.int1_step_detector |
 800f16e:	4313      	orrs	r3, r2
 800f170:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm1 |
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	78db      	ldrb	r3, [r3, #3]
 800f176:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f17a:	b2db      	uxtb	r3, r3
         val->emb_func_int1.int1_tilt |
 800f17c:	4313      	orrs	r3, r2
 800f17e:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm2 |
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	78db      	ldrb	r3, [r3, #3]
 800f184:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f188:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm1 |
 800f18a:	4313      	orrs	r3, r2
 800f18c:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm3 |
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	78db      	ldrb	r3, [r3, #3]
 800f192:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f196:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm2 |
 800f198:	4313      	orrs	r3, r2
 800f19a:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm4 |
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	78db      	ldrb	r3, [r3, #3]
 800f1a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f1a4:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm3 |
 800f1a6:	4313      	orrs	r3, r2
 800f1a8:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm5 |
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	78db      	ldrb	r3, [r3, #3]
 800f1ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f1b2:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm4 |
 800f1b4:	4313      	orrs	r3, r2
 800f1b6:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm6 |
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	78db      	ldrb	r3, [r3, #3]
 800f1bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f1c0:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm5 |
 800f1c2:	4313      	orrs	r3, r2
 800f1c4:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm7 |
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	78db      	ldrb	r3, [r3, #3]
 800f1ca:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f1ce:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm6 |
 800f1d0:	4313      	orrs	r3, r2
 800f1d2:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm8 |
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	78db      	ldrb	r3, [r3, #3]
 800f1d8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f1dc:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm7 |
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm9 |
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	791b      	ldrb	r3, [r3, #4]
 800f1e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f1ea:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm8 |
 800f1ec:	4313      	orrs	r3, r2
 800f1ee:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm10 |
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	791b      	ldrb	r3, [r3, #4]
 800f1f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f1f8:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm9 |
 800f1fa:	4313      	orrs	r3, r2
 800f1fc:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm11 |
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	791b      	ldrb	r3, [r3, #4]
 800f202:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f206:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm10 |
 800f208:	4313      	orrs	r3, r2
 800f20a:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm12 |
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	791b      	ldrb	r3, [r3, #4]
 800f210:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f214:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm11 |
 800f216:	4313      	orrs	r3, r2
 800f218:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm13 |
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	791b      	ldrb	r3, [r3, #4]
 800f21e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f222:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm12 |
 800f224:	4313      	orrs	r3, r2
 800f226:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm14 |
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	791b      	ldrb	r3, [r3, #4]
 800f22c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f230:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm13 |
 800f232:	4313      	orrs	r3, r2
 800f234:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm15 |
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	791b      	ldrb	r3, [r3, #4]
 800f23a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f23e:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm14 |
 800f240:	4313      	orrs	r3, r2
 800f242:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm16) != PROPERTY_DISABLE)
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	791b      	ldrb	r3, [r3, #4]
 800f248:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f24c:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm15 |
 800f24e:	4313      	orrs	r3, r2
 800f250:	b2db      	uxtb	r3, r3
    if ((val->emb_func_int1.int1_fsm_lc |
 800f252:	2b00      	cmp	r3, #0
 800f254:	d005      	beq.n	800f262 <lsm6dsr_pin_int1_route_set+0x192>
    {
      val->md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 800f256:	683a      	ldr	r2, [r7, #0]
 800f258:	7853      	ldrb	r3, [r2, #1]
 800f25a:	f043 0302 	orr.w	r3, r3, #2
 800f25e:	7053      	strb	r3, [r2, #1]
 800f260:	e004      	b.n	800f26c <lsm6dsr_pin_int1_route_set+0x19c>
    }

    else
    {
      val->md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 800f262:	683a      	ldr	r2, [r7, #0]
 800f264:	7853      	ldrb	r3, [r2, #1]
 800f266:	f36f 0341 	bfc	r3, #1, #1
 800f26a:	7053      	strb	r3, [r2, #1]
    }

    ret = lsm6dsr_write_reg(ctx, LSM6DSR_INT1_CTRL,
                            (uint8_t *)&val->int1_ctrl, 1);
 800f26c:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_INT1_CTRL,
 800f26e:	2301      	movs	r3, #1
 800f270:	210d      	movs	r1, #13
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f7ff fb10 	bl	800e898 <lsm6dsr_write_reg>
 800f278:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d107      	bne.n	800f290 <lsm6dsr_pin_int1_route_set+0x1c0>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_MD1_CFG,
                            (uint8_t *)&val->md1_cfg, 1);
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_MD1_CFG,
 800f284:	2301      	movs	r3, #1
 800f286:	215e      	movs	r1, #94	; 0x5e
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f7ff fb05 	bl	800e898 <lsm6dsr_write_reg>
 800f28e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d172      	bne.n	800f37c <lsm6dsr_pin_int1_route_set+0x2ac>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_CFG2, (uint8_t *)&tap_cfg2, 1);
 800f296:	f107 0208 	add.w	r2, r7, #8
 800f29a:	2301      	movs	r3, #1
 800f29c:	2158      	movs	r1, #88	; 0x58
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f7ff fae2 	bl	800e868 <lsm6dsr_read_reg>
 800f2a4:	60f8      	str	r0, [r7, #12]

    if ((val->int1_ctrl.den_drdy_flag |
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f2ae:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_boot |
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	781b      	ldrb	r3, [r3, #0]
 800f2b4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f2b8:	b2db      	uxtb	r3, r3
    if ((val->int1_ctrl.den_drdy_flag |
 800f2ba:	4313      	orrs	r3, r2
 800f2bc:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_cnt_bdr |
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f2c6:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_boot |
 800f2c8:	4313      	orrs	r3, r2
 800f2ca:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_drdy_g |
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	781b      	ldrb	r3, [r3, #0]
 800f2d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f2d4:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_cnt_bdr |
 800f2d6:	4313      	orrs	r3, r2
 800f2d8:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_drdy_xl |
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	781b      	ldrb	r3, [r3, #0]
 800f2de:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f2e2:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_drdy_g |
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_full |
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f2f0:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_drdy_xl |
 800f2f2:	4313      	orrs	r3, r2
 800f2f4:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_ovr |
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f2fe:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_full |
 800f300:	4313      	orrs	r3, r2
 800f302:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_th |
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f30c:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_ovr |
 800f30e:	4313      	orrs	r3, r2
 800f310:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_6d |
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	785b      	ldrb	r3, [r3, #1]
 800f316:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800f31a:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_th |
 800f31c:	4313      	orrs	r3, r2
 800f31e:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_double_tap |
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	785b      	ldrb	r3, [r3, #1]
 800f324:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800f328:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_6d |
 800f32a:	4313      	orrs	r3, r2
 800f32c:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_ff |
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	785b      	ldrb	r3, [r3, #1]
 800f332:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f336:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_double_tap |
 800f338:	4313      	orrs	r3, r2
 800f33a:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_wu |
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	785b      	ldrb	r3, [r3, #1]
 800f340:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f344:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_ff |
 800f346:	4313      	orrs	r3, r2
 800f348:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_single_tap |
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	785b      	ldrb	r3, [r3, #1]
 800f34e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800f352:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_wu |
 800f354:	4313      	orrs	r3, r2
 800f356:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	785b      	ldrb	r3, [r3, #1]
 800f35c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f360:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_single_tap |
 800f362:	4313      	orrs	r3, r2
 800f364:	b2db      	uxtb	r3, r3
    if ((val->int1_ctrl.den_drdy_flag |
 800f366:	2b00      	cmp	r3, #0
 800f368:	d004      	beq.n	800f374 <lsm6dsr_pin_int1_route_set+0x2a4>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 800f36a:	7a3b      	ldrb	r3, [r7, #8]
 800f36c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f370:	723b      	strb	r3, [r7, #8]
 800f372:	e003      	b.n	800f37c <lsm6dsr_pin_int1_route_set+0x2ac>
    }

    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 800f374:	7a3b      	ldrb	r3, [r7, #8]
 800f376:	f36f 13c7 	bfc	r3, #7, #1
 800f37a:	723b      	strb	r3, [r7, #8]
    }
  }

  if (ret == 0)
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d107      	bne.n	800f392 <lsm6dsr_pin_int1_route_set+0x2c2>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_TAP_CFG2,
 800f382:	f107 0208 	add.w	r2, r7, #8
 800f386:	2301      	movs	r3, #1
 800f388:	2158      	movs	r1, #88	; 0x58
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f7ff fa84 	bl	800e898 <lsm6dsr_write_reg>
 800f390:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&tap_cfg2, 1);
  }

  return ret;
 800f392:	68fb      	ldr	r3, [r7, #12]
}
 800f394:	4618      	mov	r0, r3
 800f396:	3710      	adds	r7, #16
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <lsm6dsr_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsr_pin_int1_route_t *val)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800f3a6:	2102      	movs	r1, #2
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f7ff fdc8 	bl	800ef3e <lsm6dsr_mem_bank_set>
 800f3ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d107      	bne.n	800f3c6 <lsm6dsr_pin_int1_route_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
                           (uint8_t *)&val->emb_func_int1, 1);
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	1c9a      	adds	r2, r3, #2
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_INT1,
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	210a      	movs	r1, #10
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f7ff fa52 	bl	800e868 <lsm6dsr_read_reg>
 800f3c4:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d107      	bne.n	800f3dc <lsm6dsr_pin_int1_route_get+0x40>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_A,
                           (uint8_t *)&val->fsm_int1_a, 1);
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	1cda      	adds	r2, r3, #3
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_A,
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	210b      	movs	r1, #11
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f7ff fa47 	bl	800e868 <lsm6dsr_read_reg>
 800f3da:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d107      	bne.n	800f3f2 <lsm6dsr_pin_int1_route_get+0x56>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_B,
                           (uint8_t *)&val->fsm_int1_b, 1);
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	1d1a      	adds	r2, r3, #4
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT1_B,
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	210c      	movs	r1, #12
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f7ff fa3c 	bl	800e868 <lsm6dsr_read_reg>
 800f3f0:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d104      	bne.n	800f402 <lsm6dsr_pin_int1_route_get+0x66>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800f3f8:	2100      	movs	r1, #0
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f7ff fd9f 	bl	800ef3e <lsm6dsr_mem_bank_set>
 800f400:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d106      	bne.n	800f416 <lsm6dsr_pin_int1_route_get+0x7a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_INT1_CTRL,
                           (uint8_t *)&val->int1_ctrl, 1);
 800f408:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_INT1_CTRL,
 800f40a:	2301      	movs	r3, #1
 800f40c:	210d      	movs	r1, #13
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f7ff fa2a 	bl	800e868 <lsm6dsr_read_reg>
 800f414:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d107      	bne.n	800f42c <lsm6dsr_pin_int1_route_get+0x90>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_MD1_CFG,
                           (uint8_t *)&val->md1_cfg, 1);
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_MD1_CFG,
 800f420:	2301      	movs	r3, #1
 800f422:	215e      	movs	r1, #94	; 0x5e
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f7ff fa1f 	bl	800e868 <lsm6dsr_read_reg>
 800f42a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f42c:	68fb      	ldr	r3, [r7, #12]
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3710      	adds	r7, #16
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <lsm6dsr_wkup_threshold_set>:
  * @param  val    Change the values of wk_ths in reg WAKE_UP_THS
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800f436:	b580      	push	{r7, lr}
 800f438:	b084      	sub	sp, #16
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
 800f43e:	460b      	mov	r3, r1
 800f440:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_wake_up_ths_t wake_up_ths;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WAKE_UP_THS,
 800f442:	f107 0208 	add.w	r2, r7, #8
 800f446:	2301      	movs	r3, #1
 800f448:	215b      	movs	r1, #91	; 0x5b
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f7ff fa0c 	bl	800e868 <lsm6dsr_read_reg>
 800f450:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&wake_up_ths, 1);

  if (ret == 0)
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d10f      	bne.n	800f478 <lsm6dsr_wkup_threshold_set+0x42>
  {
    wake_up_ths.wk_ths = (uint8_t)val;
 800f458:	78fb      	ldrb	r3, [r7, #3]
 800f45a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f45e:	b2da      	uxtb	r2, r3
 800f460:	7a3b      	ldrb	r3, [r7, #8]
 800f462:	f362 0305 	bfi	r3, r2, #0, #6
 800f466:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_WAKE_UP_THS,
 800f468:	f107 0208 	add.w	r2, r7, #8
 800f46c:	2301      	movs	r3, #1
 800f46e:	215b      	movs	r1, #91	; 0x5b
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f7ff fa11 	bl	800e898 <lsm6dsr_write_reg>
 800f476:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&wake_up_ths, 1);
  }

  return ret;
 800f478:	68fb      	ldr	r3, [r7, #12]
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3710      	adds	r7, #16
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 800f482:	b580      	push	{r7, lr}
 800f484:	b084      	sub	sp, #16
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]
 800f48a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800f48c:	2102      	movs	r1, #2
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f7ff fd55 	bl	800ef3e <lsm6dsr_mem_bank_set>
 800f494:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d106      	bne.n	800f4aa <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 800f49c:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 800f49e:	2301      	movs	r3, #1
 800f4a0:	2146      	movs	r1, #70	; 0x46
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f7ff f9e0 	bl	800e868 <lsm6dsr_read_reg>
 800f4a8:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d107      	bne.n	800f4c0 <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	2147      	movs	r1, #71	; 0x47
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f7ff f9d5 	bl	800e868 <lsm6dsr_read_reg>
 800f4be:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d104      	bne.n	800f4d0 <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800f4c6:	2100      	movs	r1, #0
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f7ff fd38 	bl	800ef3e <lsm6dsr_mem_bank_set>
 800f4ce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	3710      	adds	r7, #16
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}
	...

0800f4dc <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b084      	sub	sp, #16
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800f4e6:	2102      	movs	r1, #2
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f7ff fd28 	bl	800ef3e <lsm6dsr_mem_bank_set>
 800f4ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d107      	bne.n	800f506 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800f4f6:	f107 0208 	add.w	r2, r7, #8
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	215f      	movs	r1, #95	; 0x5f
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f7ff f9b2 	bl	800e868 <lsm6dsr_read_reg>
 800f504:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d104      	bne.n	800f516 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800f50c:	2100      	movs	r1, #0
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f7ff fd15 	bl	800ef3e <lsm6dsr_mem_bank_set>
 800f514:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 800f516:	7a3b      	ldrb	r3, [r7, #8]
 800f518:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	2b03      	cmp	r3, #3
 800f520:	d81a      	bhi.n	800f558 <lsm6dsr_fsm_data_rate_get+0x7c>
 800f522:	a201      	add	r2, pc, #4	; (adr r2, 800f528 <lsm6dsr_fsm_data_rate_get+0x4c>)
 800f524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f528:	0800f539 	.word	0x0800f539
 800f52c:	0800f541 	.word	0x0800f541
 800f530:	0800f549 	.word	0x0800f549
 800f534:	0800f551 	.word	0x0800f551
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	2200      	movs	r2, #0
 800f53c:	701a      	strb	r2, [r3, #0]
      break;
 800f53e:	e00f      	b.n	800f560 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	2201      	movs	r2, #1
 800f544:	701a      	strb	r2, [r3, #0]
      break;
 800f546:	e00b      	b.n	800f560 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	2202      	movs	r2, #2
 800f54c:	701a      	strb	r2, [r3, #0]
      break;
 800f54e:	e007      	b.n	800f560 <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	2203      	movs	r2, #3
 800f554:	701a      	strb	r2, [r3, #0]
      break;
 800f556:	e003      	b.n	800f560 <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	2200      	movs	r2, #0
 800f55c:	701a      	strb	r2, [r3, #0]
      break;
 800f55e:	bf00      	nop
  }

  return ret;
 800f560:	68fb      	ldr	r3, [r7, #12]
}
 800f562:	4618      	mov	r0, r3
 800f564:	3710      	adds	r7, #16
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
 800f56a:	bf00      	nop

0800f56c <get_temperature>:
#include "max6675.h"

#define MAX_SPI_HANDLE hspi2


thermocouple_status_t get_temperature(float *temperature){
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b084      	sub	sp, #16
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
	uint8_t tmp[2];
	HAL_GPIO_WritePin(TC_CS_GPIO_Port, TC_CS_Pin, GPIO_PIN_RESET);
 800f574:	2200      	movs	r2, #0
 800f576:	2108      	movs	r1, #8
 800f578:	4815      	ldr	r0, [pc, #84]	; (800f5d0 <get_temperature+0x64>)
 800f57a:	f001 fdbb 	bl	80110f4 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&MAX_SPI_HANDLE, tmp, 2, 2);
 800f57e:	f107 010c 	add.w	r1, r7, #12
 800f582:	2302      	movs	r3, #2
 800f584:	2202      	movs	r2, #2
 800f586:	4813      	ldr	r0, [pc, #76]	; (800f5d4 <get_temperature+0x68>)
 800f588:	f003 fe01 	bl	801318e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(TC_CS_GPIO_Port, TC_CS_Pin, GPIO_PIN_SET);
 800f58c:	2201      	movs	r2, #1
 800f58e:	2108      	movs	r1, #8
 800f590:	480f      	ldr	r0, [pc, #60]	; (800f5d0 <get_temperature+0x64>)
 800f592:	f001 fdaf 	bl	80110f4 <HAL_GPIO_WritePin>
	if(tmp[1] & 0x04){
 800f596:	7b7b      	ldrb	r3, [r7, #13]
 800f598:	f003 0304 	and.w	r3, r3, #4
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d001      	beq.n	800f5a4 <get_temperature+0x38>
		return TMP_OPEN;
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	e011      	b.n	800f5c8 <get_temperature+0x5c>
	} else {
		*temperature = (((uint16_t)(tmp[0]) << 5) + ((tmp[1] & 0xF8) >> 3))/4.0f;
 800f5a4:	7b3b      	ldrb	r3, [r7, #12]
 800f5a6:	015b      	lsls	r3, r3, #5
 800f5a8:	7b7a      	ldrb	r2, [r7, #13]
 800f5aa:	08d2      	lsrs	r2, r2, #3
 800f5ac:	b2d2      	uxtb	r2, r2
 800f5ae:	4413      	add	r3, r2
 800f5b0:	ee07 3a90 	vmov	s15, r3
 800f5b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f5b8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800f5bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	edc3 7a00 	vstr	s15, [r3]
		return TMP_OK;
 800f5c6:	2300      	movs	r3, #0
	}
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3710      	adds	r7, #16
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}
 800f5d0:	40020000 	.word	0x40020000
 800f5d4:	200055b0 	.word	0x200055b0

0800f5d8 <task_fsm>:
#include "config/config.h"

#include "util/log.h"
#include "cli/cli.h"

void task_fsm(void *argument) {
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b086      	sub	sp, #24
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]

	uint32_t tick_count = osKernelGetTickCount();
 800f5e0:	f008 f9f2 	bl	80179c8 <osKernelGetTickCount>
 800f5e4:	6178      	str	r0, [r7, #20]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 800f5e6:	f008 fa04 	bl	80179f2 <osKernelGetTickFreq>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	4a22      	ldr	r2, [pc, #136]	; (800f678 <task_fsm+0xa0>)
 800f5ee:	fba2 2303 	umull	r2, r3, r2, r3
 800f5f2:	095b      	lsrs	r3, r3, #5
 800f5f4:	613b      	str	r3, [r7, #16]

	config_init();
 800f5f6:	f7fe f917 	bl	800d828 <config_init>
	config_load();
 800f5fa:	f7fe f92d 	bl	800d858 <config_load>

	if(global_config.config.config_version != CONFIG_VERSION){
 800f5fe:	4b1f      	ldr	r3, [pc, #124]	; (800f67c <task_fsm+0xa4>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	2b64      	cmp	r3, #100	; 0x64
 800f604:	d022      	beq.n	800f64c <task_fsm+0x74>
		log_warn("Config versions mismatch");
 800f606:	491e      	ldr	r1, [pc, #120]	; (800f680 <task_fsm+0xa8>)
 800f608:	4b1e      	ldr	r3, [pc, #120]	; (800f684 <task_fsm+0xac>)
 800f60a:	221b      	movs	r2, #27
 800f60c:	2003      	movs	r0, #3
 800f60e:	f000 fab3 	bl	800fb78 <log_log>
		log_info("Resetting to defaults..");
 800f612:	491b      	ldr	r1, [pc, #108]	; (800f680 <task_fsm+0xa8>)
 800f614:	4b1c      	ldr	r3, [pc, #112]	; (800f688 <task_fsm+0xb0>)
 800f616:	221c      	movs	r2, #28
 800f618:	2002      	movs	r0, #2
 800f61a:	f000 faad 	bl	800fb78 <log_log>
		config_defaults();
 800f61e:	f7fe f90b 	bl	800d838 <config_defaults>
		bool status = config_save();
 800f622:	f7fe f925 	bl	800d870 <config_save>
 800f626:	4603      	mov	r3, r0
 800f628:	73fb      	strb	r3, [r7, #15]
		if(status){
 800f62a:	7bfb      	ldrb	r3, [r7, #15]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d006      	beq.n	800f63e <task_fsm+0x66>
			log_info("Reset successful!");
 800f630:	4913      	ldr	r1, [pc, #76]	; (800f680 <task_fsm+0xa8>)
 800f632:	4b16      	ldr	r3, [pc, #88]	; (800f68c <task_fsm+0xb4>)
 800f634:	2220      	movs	r2, #32
 800f636:	2002      	movs	r0, #2
 800f638:	f000 fa9e 	bl	800fb78 <log_log>
 800f63c:	e00c      	b.n	800f658 <task_fsm+0x80>
		} else {
			log_error("Error resetting config!");
 800f63e:	4910      	ldr	r1, [pc, #64]	; (800f680 <task_fsm+0xa8>)
 800f640:	4b13      	ldr	r3, [pc, #76]	; (800f690 <task_fsm+0xb8>)
 800f642:	2222      	movs	r2, #34	; 0x22
 800f644:	2004      	movs	r0, #4
 800f646:	f000 fa97 	bl	800fb78 <log_log>
 800f64a:	e005      	b.n	800f658 <task_fsm+0x80>
		}
	} else {
		log_info("Config loading successful!");
 800f64c:	490c      	ldr	r1, [pc, #48]	; (800f680 <task_fsm+0xa8>)
 800f64e:	4b11      	ldr	r3, [pc, #68]	; (800f694 <task_fsm+0xbc>)
 800f650:	2225      	movs	r2, #37	; 0x25
 800f652:	2002      	movs	r0, #2
 800f654:	f000 fa90 	bl	800fb78 <log_log>
	}

	//ee_write(12, 10, data_write);
	//ee_writeToRam(uint32_t startVirtualAddress, uint32_t len, uint8_t* data); //  only use when _EE_USE_RAM_BYTE is enabled
	log_disable();
 800f658:	f000 fa76 	bl	800fb48 <log_disable>
	cli_enter(&usb_input_fifo, &usb_output_fifo);
 800f65c:	490e      	ldr	r1, [pc, #56]	; (800f698 <task_fsm+0xc0>)
 800f65e:	480f      	ldr	r0, [pc, #60]	; (800f69c <task_fsm+0xc4>)
 800f660:	f7fd fa34 	bl	800cacc <cli_enter>

	while (1) {

		cli_process();
 800f664:	f7fd fa18 	bl	800ca98 <cli_process>
		tick_count += tick_update;
 800f668:	697a      	ldr	r2, [r7, #20]
 800f66a:	693b      	ldr	r3, [r7, #16]
 800f66c:	4413      	add	r3, r2
 800f66e:	617b      	str	r3, [r7, #20]
		osDelayUntil(tick_count);
 800f670:	6978      	ldr	r0, [r7, #20]
 800f672:	f008 fa74 	bl	8017b5e <osDelayUntil>
		cli_process();
 800f676:	e7f5      	b.n	800f664 <task_fsm+0x8c>
 800f678:	51eb851f 	.word	0x51eb851f
 800f67c:	20000444 	.word	0x20000444
 800f680:	0801cb8a 	.word	0x0801cb8a
 800f684:	0801cb98 	.word	0x0801cb98
 800f688:	0801cbb4 	.word	0x0801cbb4
 800f68c:	0801cbcc 	.word	0x0801cbcc
 800f690:	0801cbe0 	.word	0x0801cbe0
 800f694:	0801cbf8 	.word	0x0801cbf8
 800f698:	20005594 	.word	0x20005594
 800f69c:	2000537c 	.word	0x2000537c

0800f6a0 <task_heater>:
#include "sensors/max6675.h"
#include "util/log.h"

#define SAMPLING_FREQ_HEATER 1 //Hz

void task_heater(void *argument) {
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b088      	sub	sp, #32
 800f6a4:	af02      	add	r7, sp, #8
 800f6a6:	6078      	str	r0, [r7, #4]

	uint32_t tick_count = osKernelGetTickCount();
 800f6a8:	f008 f98e 	bl	80179c8 <osKernelGetTickCount>
 800f6ac:	6178      	str	r0, [r7, #20]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ_HEATER;
 800f6ae:	f008 f9a0 	bl	80179f2 <osKernelGetTickFreq>
 800f6b2:	6138      	str	r0, [r7, #16]

	while (1) {
		float temperature = 0;
 800f6b4:	f04f 0300 	mov.w	r3, #0
 800f6b8:	60bb      	str	r3, [r7, #8]
		thermocouple_status_t status;

		status = get_temperature(&temperature);
 800f6ba:	f107 0308 	add.w	r3, r7, #8
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7ff ff54 	bl	800f56c <get_temperature>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	73fb      	strb	r3, [r7, #15]

		if(status != TMP_OK) {
 800f6c8:	7bfb      	ldrb	r3, [r7, #15]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d006      	beq.n	800f6dc <task_heater+0x3c>
			log_error("No thermocouple connected!");
 800f6ce:	490e      	ldr	r1, [pc, #56]	; (800f708 <task_heater+0x68>)
 800f6d0:	4b0e      	ldr	r3, [pc, #56]	; (800f70c <task_heater+0x6c>)
 800f6d2:	221e      	movs	r2, #30
 800f6d4:	2004      	movs	r0, #4
 800f6d6:	f000 fa4f 	bl	800fb78 <log_log>
 800f6da:	e00c      	b.n	800f6f6 <task_heater+0x56>
		} else {
			log_info("Current thermocouple temperature: %d", (int32_t)temperature);
 800f6dc:	490a      	ldr	r1, [pc, #40]	; (800f708 <task_heater+0x68>)
 800f6de:	edd7 7a02 	vldr	s15, [r7, #8]
 800f6e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f6e6:	ee17 3a90 	vmov	r3, s15
 800f6ea:	9300      	str	r3, [sp, #0]
 800f6ec:	4b08      	ldr	r3, [pc, #32]	; (800f710 <task_heater+0x70>)
 800f6ee:	2220      	movs	r2, #32
 800f6f0:	2002      	movs	r0, #2
 800f6f2:	f000 fa41 	bl	800fb78 <log_log>
		}
		//dcdc_set_voltage(8);
		//dcdc_enable();

		tick_count += tick_update;
 800f6f6:	697a      	ldr	r2, [r7, #20]
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	617b      	str	r3, [r7, #20]
		osDelayUntil(tick_count);
 800f6fe:	6978      	ldr	r0, [r7, #20]
 800f700:	f008 fa2d 	bl	8017b5e <osDelayUntil>
	while (1) {
 800f704:	e7d6      	b.n	800f6b4 <task_heater+0x14>
 800f706:	bf00      	nop
 800f708:	0801cc26 	.word	0x0801cc26
 800f70c:	0801cc34 	.word	0x0801cc34
 800f710:	0801cc50 	.word	0x0801cc50

0800f714 <task_sensor_read>:
#include "cmsis_os.h"
#include "task_sensor_read.h"
#include "config/globals.h"
#include "util/log.h"

void task_sensor_read(void *argument) {
 800f714:	b580      	push	{r7, lr}
 800f716:	b084      	sub	sp, #16
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]

	uint32_t tick_count = osKernelGetTickCount();
 800f71c:	f008 f954 	bl	80179c8 <osKernelGetTickCount>
 800f720:	60f8      	str	r0, [r7, #12]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 800f722:	f008 f966 	bl	80179f2 <osKernelGetTickFreq>
 800f726:	4603      	mov	r3, r0
 800f728:	4a08      	ldr	r2, [pc, #32]	; (800f74c <task_sensor_read+0x38>)
 800f72a:	fba2 2303 	umull	r2, r3, r2, r3
 800f72e:	095b      	lsrs	r3, r3, #5
 800f730:	60bb      	str	r3, [r7, #8]
	osDelay(2000);
 800f732:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f736:	f008 f9f7 	bl	8017b28 <osDelay>

	while (1) {

		tick_count += tick_update;
 800f73a:	68fa      	ldr	r2, [r7, #12]
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	4413      	add	r3, r2
 800f740:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick_count);
 800f742:	68f8      	ldr	r0, [r7, #12]
 800f744:	f008 fa0b 	bl	8017b5e <osDelayUntil>
		tick_count += tick_update;
 800f748:	e7f7      	b.n	800f73a <task_sensor_read+0x26>
 800f74a:	bf00      	nop
 800f74c:	51eb851f 	.word	0x51eb851f

0800f750 <task_state_est>:
#include "cmsis_os.h"
#include "task_state_est.h"
#include "config/globals.h"
#include "util/log.h"

void task_state_est(void *argument) {
 800f750:	b580      	push	{r7, lr}
 800f752:	b084      	sub	sp, #16
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]

	uint32_t tick_count = osKernelGetTickCount();
 800f758:	f008 f936 	bl	80179c8 <osKernelGetTickCount>
 800f75c:	60f8      	str	r0, [r7, #12]
	uint32_t tick_update = osKernelGetTickFreq() / SAMPLING_FREQ;
 800f75e:	f008 f948 	bl	80179f2 <osKernelGetTickFreq>
 800f762:	4603      	mov	r3, r0
 800f764:	4a08      	ldr	r2, [pc, #32]	; (800f788 <task_state_est+0x38>)
 800f766:	fba2 2303 	umull	r2, r3, r2, r3
 800f76a:	095b      	lsrs	r3, r3, #5
 800f76c:	60bb      	str	r3, [r7, #8]
	osDelay(2000);
 800f76e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f772:	f008 f9d9 	bl	8017b28 <osDelay>
	while (1) {
		tick_count += tick_update;
 800f776:	68fa      	ldr	r2, [r7, #12]
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	4413      	add	r3, r2
 800f77c:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick_count);
 800f77e:	68f8      	ldr	r0, [r7, #12]
 800f780:	f008 f9ed 	bl	8017b5e <osDelayUntil>
		tick_count += tick_update;
 800f784:	e7f7      	b.n	800f776 <task_state_est+0x26>
 800f786:	bf00      	nop
 800f788:	51eb851f 	.word	0x51eb851f

0800f78c <fifo_init>:
 */

#include <string.h>
#include "fifo.h"

void fifo_init(fifo_t *fifo, uint8_t *pdata, uint32_t size) {
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b084      	sub	sp, #16
 800f790:	af00      	add	r7, sp, #0
 800f792:	60f8      	str	r0, [r7, #12]
 800f794:	60b9      	str	r1, [r7, #8]
 800f796:	607a      	str	r2, [r7, #4]
  fifo->data = pdata;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	68ba      	ldr	r2, [r7, #8]
 800f79c:	611a      	str	r2, [r3, #16]
  fifo->size = size;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	687a      	ldr	r2, [r7, #4]
 800f7a2:	60da      	str	r2, [r3, #12]
  fifo->mutex = false;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	751a      	strb	r2, [r3, #20]
  fifo_flush(fifo);
 800f7aa:	68f8      	ldr	r0, [r7, #12]
 800f7ac:	f000 f804 	bl	800f7b8 <fifo_flush>
}
 800f7b0:	bf00      	nop
 800f7b2:	3710      	adds	r7, #16
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}

0800f7b8 <fifo_flush>:

void fifo_flush(fifo_t *fifo) {
 800f7b8:	b480      	push	{r7}
 800f7ba:	b083      	sub	sp, #12
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
  if (fifo->mutex == false) {
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	7d1b      	ldrb	r3, [r3, #20]
 800f7c4:	b2db      	uxtb	r3, r3
 800f7c6:	f083 0301 	eor.w	r3, r3, #1
 800f7ca:	b2db      	uxtb	r3, r3
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d00e      	beq.n	800f7ee <fifo_flush+0x36>
    fifo->mutex = true;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	751a      	strb	r2, [r3, #20]
    fifo->tail = 0;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2200      	movs	r2, #0
 800f7da:	605a      	str	r2, [r3, #4]
    fifo->head = 0;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2200      	movs	r2, #0
 800f7e0:	601a      	str	r2, [r3, #0]
    fifo->used = 0;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	751a      	strb	r2, [r3, #20]
  }
}
 800f7ee:	bf00      	nop
 800f7f0:	370c      	adds	r7, #12
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f8:	4770      	bx	lr

0800f7fa <fifo_get_length>:

uint32_t fifo_get_length(fifo_t *fifo) { return fifo->used; }
 800f7fa:	b480      	push	{r7}
 800f7fc:	b083      	sub	sp, #12
 800f7fe:	af00      	add	r7, sp, #0
 800f800:	6078      	str	r0, [r7, #4]
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	689b      	ldr	r3, [r3, #8]
 800f806:	4618      	mov	r0, r3
 800f808:	370c      	adds	r7, #12
 800f80a:	46bd      	mov	sp, r7
 800f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f810:	4770      	bx	lr

0800f812 <fifo_read>:

uint8_t fifo_read(fifo_t *fifo) {
 800f812:	b480      	push	{r7}
 800f814:	b085      	sub	sp, #20
 800f816:	af00      	add	r7, sp, #0
 800f818:	6078      	str	r0, [r7, #4]
  if (fifo->mutex == false) {
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	7d1b      	ldrb	r3, [r3, #20]
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	f083 0301 	eor.w	r3, r3, #1
 800f824:	b2db      	uxtb	r3, r3
 800f826:	2b00      	cmp	r3, #0
 800f828:	d028      	beq.n	800f87c <fifo_read+0x6a>
    fifo->mutex = true;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2201      	movs	r2, #1
 800f82e:	751a      	strb	r2, [r3, #20]
    if (fifo->used == 0) {
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	689b      	ldr	r3, [r3, #8]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d104      	bne.n	800f842 <fifo_read+0x30>
      fifo->mutex = false;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2200      	movs	r2, #0
 800f83c:	751a      	strb	r2, [r3, #20]
      return 0;
 800f83e:	2300      	movs	r3, #0
 800f840:	e01d      	b.n	800f87e <fifo_read+0x6c>
    }
    uint8_t data = fifo->data[fifo->tail];
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	691a      	ldr	r2, [r3, #16]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	685b      	ldr	r3, [r3, #4]
 800f84a:	4413      	add	r3, r2
 800f84c:	781b      	ldrb	r3, [r3, #0]
 800f84e:	73fb      	strb	r3, [r7, #15]
    fifo->tail = (fifo->tail + 1) % fifo->size;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	685b      	ldr	r3, [r3, #4]
 800f854:	3301      	adds	r3, #1
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	68d2      	ldr	r2, [r2, #12]
 800f85a:	fbb3 f1f2 	udiv	r1, r3, r2
 800f85e:	fb02 f201 	mul.w	r2, r2, r1
 800f862:	1a9a      	subs	r2, r3, r2
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	605a      	str	r2, [r3, #4]
    fifo->used--;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	689b      	ldr	r3, [r3, #8]
 800f86c:	1e5a      	subs	r2, r3, #1
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2200      	movs	r2, #0
 800f876:	751a      	strb	r2, [r3, #20]
    return data;
 800f878:	7bfb      	ldrb	r3, [r7, #15]
 800f87a:	e000      	b.n	800f87e <fifo_read+0x6c>
  }
  return 0;
 800f87c:	2300      	movs	r3, #0
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3714      	adds	r7, #20
 800f882:	46bd      	mov	sp, r7
 800f884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f888:	4770      	bx	lr

0800f88a <fifo_write>:

bool fifo_write(fifo_t *fifo, uint8_t data) {
 800f88a:	b480      	push	{r7}
 800f88c:	b083      	sub	sp, #12
 800f88e:	af00      	add	r7, sp, #0
 800f890:	6078      	str	r0, [r7, #4]
 800f892:	460b      	mov	r3, r1
 800f894:	70fb      	strb	r3, [r7, #3]
  if (fifo->mutex == false) {
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	7d1b      	ldrb	r3, [r3, #20]
 800f89a:	b2db      	uxtb	r3, r3
 800f89c:	f083 0301 	eor.w	r3, r3, #1
 800f8a0:	b2db      	uxtb	r3, r3
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d02a      	beq.n	800f8fc <fifo_write+0x72>
    fifo->mutex = true;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	751a      	strb	r2, [r3, #20]
    if (fifo->used >= fifo->size) {
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	689a      	ldr	r2, [r3, #8]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	68db      	ldr	r3, [r3, #12]
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d304      	bcc.n	800f8c2 <fifo_write+0x38>
      fifo->mutex = false;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	751a      	strb	r2, [r3, #20]
      return false;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	e01d      	b.n	800f8fe <fifo_write+0x74>
    }
    fifo->data[fifo->head] = data;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	691a      	ldr	r2, [r3, #16]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	4413      	add	r3, r2
 800f8cc:	78fa      	ldrb	r2, [r7, #3]
 800f8ce:	701a      	strb	r2, [r3, #0]
    fifo->head = (fifo->head + 1) % fifo->size;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	687a      	ldr	r2, [r7, #4]
 800f8d8:	68d2      	ldr	r2, [r2, #12]
 800f8da:	fbb3 f1f2 	udiv	r1, r3, r2
 800f8de:	fb02 f201 	mul.w	r2, r2, r1
 800f8e2:	1a9a      	subs	r2, r3, r2
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	601a      	str	r2, [r3, #0]
    fifo->used++;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	689b      	ldr	r3, [r3, #8]
 800f8ec:	1c5a      	adds	r2, r3, #1
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	751a      	strb	r2, [r3, #20]
    return true;
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	e000      	b.n	800f8fe <fifo_write+0x74>
  }
  return false;
 800f8fc:	2300      	movs	r3, #0
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	370c      	adds	r7, #12
 800f902:	46bd      	mov	sp, r7
 800f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f908:	4770      	bx	lr

0800f90a <fifo_read_bytes>:

bool fifo_read_bytes(fifo_t *fifo, uint8_t *data, uint32_t count) {
 800f90a:	b580      	push	{r7, lr}
 800f90c:	b086      	sub	sp, #24
 800f90e:	af00      	add	r7, sp, #0
 800f910:	60f8      	str	r0, [r7, #12]
 800f912:	60b9      	str	r1, [r7, #8]
 800f914:	607a      	str	r2, [r7, #4]
  if (fifo->mutex == false) {
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	7d1b      	ldrb	r3, [r3, #20]
 800f91a:	b2db      	uxtb	r3, r3
 800f91c:	f083 0301 	eor.w	r3, r3, #1
 800f920:	b2db      	uxtb	r3, r3
 800f922:	2b00      	cmp	r3, #0
 800f924:	d05a      	beq.n	800f9dc <fifo_read_bytes+0xd2>
    fifo->mutex = true;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	2201      	movs	r2, #1
 800f92a:	751a      	strb	r2, [r3, #20]
    if (fifo->used < count) {
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	689b      	ldr	r3, [r3, #8]
 800f930:	687a      	ldr	r2, [r7, #4]
 800f932:	429a      	cmp	r2, r3
 800f934:	d904      	bls.n	800f940 <fifo_read_bytes+0x36>
      fifo->mutex = false;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	2200      	movs	r2, #0
 800f93a:	751a      	strb	r2, [r3, #20]
      return false;
 800f93c:	2300      	movs	r3, #0
 800f93e:	e04e      	b.n	800f9de <fifo_read_bytes+0xd4>
    }
    if (fifo->tail + count > fifo->size) {
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	685a      	ldr	r2, [r3, #4]
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	441a      	add	r2, r3
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	68db      	ldr	r3, [r3, #12]
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d923      	bls.n	800f998 <fifo_read_bytes+0x8e>
      uint32_t front = (fifo->tail + count) % fifo->size;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	685a      	ldr	r2, [r3, #4]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4413      	add	r3, r2
 800f958:	68fa      	ldr	r2, [r7, #12]
 800f95a:	68d2      	ldr	r2, [r2, #12]
 800f95c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f960:	fb02 f201 	mul.w	r2, r2, r1
 800f964:	1a9b      	subs	r3, r3, r2
 800f966:	617b      	str	r3, [r7, #20]
      uint32_t back = count - front;
 800f968:	687a      	ldr	r2, [r7, #4]
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	1ad3      	subs	r3, r2, r3
 800f96e:	613b      	str	r3, [r7, #16]
      memcpy(&data[0], &fifo->data[fifo->tail], back);
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	691a      	ldr	r2, [r3, #16]
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	4413      	add	r3, r2
 800f97a:	693a      	ldr	r2, [r7, #16]
 800f97c:	4619      	mov	r1, r3
 800f97e:	68b8      	ldr	r0, [r7, #8]
 800f980:	f00c f810 	bl	801b9a4 <memcpy>
      memcpy(&data[back], &fifo->data[0], front);
 800f984:	68ba      	ldr	r2, [r7, #8]
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	18d0      	adds	r0, r2, r3
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	691b      	ldr	r3, [r3, #16]
 800f98e:	697a      	ldr	r2, [r7, #20]
 800f990:	4619      	mov	r1, r3
 800f992:	f00c f807 	bl	801b9a4 <memcpy>
 800f996:	e009      	b.n	800f9ac <fifo_read_bytes+0xa2>
    } else {
      memcpy(&data[0], &fifo->data[fifo->tail], count);
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	691a      	ldr	r2, [r3, #16]
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	685b      	ldr	r3, [r3, #4]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	687a      	ldr	r2, [r7, #4]
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	68b8      	ldr	r0, [r7, #8]
 800f9a8:	f00b fffc 	bl	801b9a4 <memcpy>
    }
    fifo->tail = (fifo->tail + count) % fifo->size;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	685a      	ldr	r2, [r3, #4]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	4413      	add	r3, r2
 800f9b4:	68fa      	ldr	r2, [r7, #12]
 800f9b6:	68d2      	ldr	r2, [r2, #12]
 800f9b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800f9bc:	fb02 f201 	mul.w	r2, r2, r1
 800f9c0:	1a9a      	subs	r2, r3, r2
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	605a      	str	r2, [r3, #4]
    fifo->used -= count;
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	689a      	ldr	r2, [r3, #8]
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	1ad2      	subs	r2, r2, r3
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	751a      	strb	r2, [r3, #20]
    return true;
 800f9d8:	2301      	movs	r3, #1
 800f9da:	e000      	b.n	800f9de <fifo_read_bytes+0xd4>
  }
  return false;
 800f9dc:	2300      	movs	r3, #0
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3718      	adds	r7, #24
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}

0800f9e6 <fifo_write_bytes>:
    return i;
  }
  return 0;
}

bool fifo_write_bytes(fifo_t *fifo, uint8_t *data, uint32_t count) {
 800f9e6:	b580      	push	{r7, lr}
 800f9e8:	b086      	sub	sp, #24
 800f9ea:	af00      	add	r7, sp, #0
 800f9ec:	60f8      	str	r0, [r7, #12]
 800f9ee:	60b9      	str	r1, [r7, #8]
 800f9f0:	607a      	str	r2, [r7, #4]
  // If there is not enough space return false
  if (fifo->mutex == false) {
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	7d1b      	ldrb	r3, [r3, #20]
 800f9f6:	b2db      	uxtb	r3, r3
 800f9f8:	f083 0301 	eor.w	r3, r3, #1
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d059      	beq.n	800fab6 <fifo_write_bytes+0xd0>
    fifo->mutex = true;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	2201      	movs	r2, #1
 800fa06:	751a      	strb	r2, [r3, #20]
    if ((fifo->size - fifo->used) < count) {
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	68da      	ldr	r2, [r3, #12]
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	689b      	ldr	r3, [r3, #8]
 800fa10:	1ad3      	subs	r3, r2, r3
 800fa12:	687a      	ldr	r2, [r7, #4]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d904      	bls.n	800fa22 <fifo_write_bytes+0x3c>
      fifo->mutex = false;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	751a      	strb	r2, [r3, #20]
      return false;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	e04a      	b.n	800fab8 <fifo_write_bytes+0xd2>
    }
    if (count + fifo->head > fifo->size) {
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	681a      	ldr	r2, [r3, #0]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	441a      	add	r2, r3
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	68db      	ldr	r3, [r3, #12]
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d91f      	bls.n	800fa72 <fifo_write_bytes+0x8c>
      uint32_t front = fifo->head + count - fifo->size;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	681a      	ldr	r2, [r3, #0]
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	441a      	add	r2, r3
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	68db      	ldr	r3, [r3, #12]
 800fa3e:	1ad3      	subs	r3, r2, r3
 800fa40:	617b      	str	r3, [r7, #20]
      uint32_t back = count - front;
 800fa42:	687a      	ldr	r2, [r7, #4]
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	1ad3      	subs	r3, r2, r3
 800fa48:	613b      	str	r3, [r7, #16]
      memcpy(&fifo->data[fifo->head], data, back);
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	691a      	ldr	r2, [r3, #16]
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	4413      	add	r3, r2
 800fa54:	693a      	ldr	r2, [r7, #16]
 800fa56:	68b9      	ldr	r1, [r7, #8]
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f00b ffa3 	bl	801b9a4 <memcpy>
      memcpy(&fifo->data[0], &data[back], front);
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	6918      	ldr	r0, [r3, #16]
 800fa62:	68ba      	ldr	r2, [r7, #8]
 800fa64:	693b      	ldr	r3, [r7, #16]
 800fa66:	4413      	add	r3, r2
 800fa68:	697a      	ldr	r2, [r7, #20]
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	f00b ff9a 	bl	801b9a4 <memcpy>
 800fa70:	e009      	b.n	800fa86 <fifo_write_bytes+0xa0>
    } else {
      memcpy(&fifo->data[fifo->head], data, count);
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	691a      	ldr	r2, [r3, #16]
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	4413      	add	r3, r2
 800fa7c:	687a      	ldr	r2, [r7, #4]
 800fa7e:	68b9      	ldr	r1, [r7, #8]
 800fa80:	4618      	mov	r0, r3
 800fa82:	f00b ff8f 	bl	801b9a4 <memcpy>
    }
    fifo->head = (fifo->head + count) % fifo->size;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	681a      	ldr	r2, [r3, #0]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	4413      	add	r3, r2
 800fa8e:	68fa      	ldr	r2, [r7, #12]
 800fa90:	68d2      	ldr	r2, [r2, #12]
 800fa92:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa96:	fb02 f201 	mul.w	r2, r2, r1
 800fa9a:	1a9a      	subs	r2, r3, r2
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	601a      	str	r2, [r3, #0]
    fifo->used += count;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	689a      	ldr	r2, [r3, #8]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	441a      	add	r2, r3
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	609a      	str	r2, [r3, #8]
    fifo->mutex = false;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	2200      	movs	r2, #0
 800fab0:	751a      	strb	r2, [r3, #20]
    return true;
 800fab2:	2301      	movs	r3, #1
 800fab4:	e000      	b.n	800fab8 <fifo_write_bytes+0xd2>
  }
  return false;
 800fab6:	2300      	movs	r3, #0
}
 800fab8:	4618      	mov	r0, r3
 800faba:	3718      	adds	r7, #24
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}

0800fac0 <fifo_write_str>:

void fifo_write_str(fifo_t *fifo, const char *str) {
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b082      	sub	sp, #8
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	6039      	str	r1, [r7, #0]
  while (*str) {
 800faca:	e010      	b.n	800faee <fifo_write_str+0x2e>
    while (fifo_write(fifo, *str++) == false) {
      str--;
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	3b01      	subs	r3, #1
 800fad0:	603b      	str	r3, [r7, #0]
    while (fifo_write(fifo, *str++) == false) {
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	1c5a      	adds	r2, r3, #1
 800fad6:	603a      	str	r2, [r7, #0]
 800fad8:	781b      	ldrb	r3, [r3, #0]
 800fada:	4619      	mov	r1, r3
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f7ff fed4 	bl	800f88a <fifo_write>
 800fae2:	4603      	mov	r3, r0
 800fae4:	f083 0301 	eor.w	r3, r3, #1
 800fae8:	b2db      	uxtb	r3, r3
 800faea:	2b00      	cmp	r3, #0
 800faec:	d1ee      	bne.n	800facc <fifo_write_str+0xc>
  while (*str) {
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d1ed      	bne.n	800fad2 <fifo_write_str+0x12>
    }
  }
}
 800faf6:	bf00      	nop
 800faf8:	bf00      	nop
 800fafa:	3708      	adds	r7, #8
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <log_init>:
static const char *level_colors[] = {"\x1b[94m", "\x1b[36m", "\x1b[32m", "\x1b[33m", "\x1b[31m", "\x1b[35m"};

osMutexId_t print_mutex;
static char print_buffer[PRINT_BUFFER_LEN];

void log_init(){
 800fb00:	b590      	push	{r4, r7, lr}
 800fb02:	b085      	sub	sp, #20
 800fb04:	af00      	add	r7, sp, #0
	const osMutexAttr_t print_mutex_attr = {
 800fb06:	4b08      	ldr	r3, [pc, #32]	; (800fb28 <log_init+0x28>)
 800fb08:	463c      	mov	r4, r7
 800fb0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fb0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  "print_mutex",       // human readable mutex name
	   osMutexPrioInherit,  // attr_bits
	   NULL,                // memory for control block
	   0U                   // size for control block
	};
	print_mutex = osMutexNew(&print_mutex_attr);
 800fb10:	463b      	mov	r3, r7
 800fb12:	4618      	mov	r0, r3
 800fb14:	f008 f850 	bl	8017bb8 <osMutexNew>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	4a04      	ldr	r2, [pc, #16]	; (800fb2c <log_init+0x2c>)
 800fb1c:	6013      	str	r3, [r2, #0]
}
 800fb1e:	bf00      	nop
 800fb20:	3714      	adds	r7, #20
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd90      	pop	{r4, r7, pc}
 800fb26:	bf00      	nop
 800fb28:	0801cce4 	.word	0x0801cce4
 800fb2c:	200074ec 	.word	0x200074ec

0800fb30 <log_enable>:

void log_set_level(int level) {
  L.level = level;
}

void log_enable() {
 800fb30:	b480      	push	{r7}
 800fb32:	af00      	add	r7, sp, #0
  L.enabled = true;
 800fb34:	4b03      	ldr	r3, [pc, #12]	; (800fb44 <log_enable+0x14>)
 800fb36:	2201      	movs	r2, #1
 800fb38:	711a      	strb	r2, [r3, #4]
}
 800fb3a:	bf00      	nop
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb42:	4770      	bx	lr
 800fb44:	20000464 	.word	0x20000464

0800fb48 <log_disable>:

void log_disable() {
 800fb48:	b480      	push	{r7}
 800fb4a:	af00      	add	r7, sp, #0
  L.enabled = false;
 800fb4c:	4b03      	ldr	r3, [pc, #12]	; (800fb5c <log_disable+0x14>)
 800fb4e:	2200      	movs	r2, #0
 800fb50:	711a      	strb	r2, [r3, #4]
}
 800fb52:	bf00      	nop
 800fb54:	46bd      	mov	sp, r7
 800fb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5a:	4770      	bx	lr
 800fb5c:	20000464 	.word	0x20000464

0800fb60 <log_is_enabled>:

bool log_is_enabled() {
 800fb60:	b480      	push	{r7}
 800fb62:	af00      	add	r7, sp, #0
  return L.enabled;
 800fb64:	4b03      	ldr	r3, [pc, #12]	; (800fb74 <log_is_enabled+0x14>)
 800fb66:	791b      	ldrb	r3, [r3, #4]
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr
 800fb72:	bf00      	nop
 800fb74:	20000464 	.word	0x20000464

0800fb78 <log_log>:

void log_log(int level, const char *file, int line, const char *format, ...) {
 800fb78:	b408      	push	{r3}
 800fb7a:	b580      	push	{r7, lr}
 800fb7c:	b08b      	sub	sp, #44	; 0x2c
 800fb7e:	af04      	add	r7, sp, #16
 800fb80:	60f8      	str	r0, [r7, #12]
 800fb82:	60b9      	str	r1, [r7, #8]
 800fb84:	607a      	str	r2, [r7, #4]
  if (L.enabled && level >= L.level && osMutexAcquire(print_mutex, 0U) == osOK) {
 800fb86:	4b35      	ldr	r3, [pc, #212]	; (800fc5c <log_log+0xe4>)
 800fb88:	791b      	ldrb	r3, [r3, #4]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d05f      	beq.n	800fc4e <log_log+0xd6>
 800fb8e:	4b33      	ldr	r3, [pc, #204]	; (800fc5c <log_log+0xe4>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	68fa      	ldr	r2, [r7, #12]
 800fb94:	429a      	cmp	r2, r3
 800fb96:	db5a      	blt.n	800fc4e <log_log+0xd6>
 800fb98:	4b31      	ldr	r3, [pc, #196]	; (800fc60 <log_log+0xe8>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	2100      	movs	r1, #0
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f008 f890 	bl	8017cc4 <osMutexAcquire>
 800fba4:	4603      	mov	r3, r0
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d151      	bne.n	800fc4e <log_log+0xd6>
    /* fill buffer with metadata */
    static char buf_ts[16];
    buf_ts[snprintf(buf_ts, sizeof(buf_ts), "%lu", osKernelGetTickCount())] = '\0';
 800fbaa:	f007 ff0d 	bl	80179c8 <osKernelGetTickCount>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	4a2c      	ldr	r2, [pc, #176]	; (800fc64 <log_log+0xec>)
 800fbb2:	2110      	movs	r1, #16
 800fbb4:	482c      	ldr	r0, [pc, #176]	; (800fc68 <log_log+0xf0>)
 800fbb6:	f00b ff0b 	bl	801b9d0 <sniprintf>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	4a2a      	ldr	r2, [pc, #168]	; (800fc68 <log_log+0xf0>)
 800fbbe:	2100      	movs	r1, #0
 800fbc0:	54d1      	strb	r1, [r2, r3]
    static char buf_loc[30];
    buf_loc[snprintf(buf_loc, sizeof(buf_loc), "%s:%d:", file, line)] = '\0';
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	9300      	str	r3, [sp, #0]
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	4a28      	ldr	r2, [pc, #160]	; (800fc6c <log_log+0xf4>)
 800fbca:	211e      	movs	r1, #30
 800fbcc:	4828      	ldr	r0, [pc, #160]	; (800fc70 <log_log+0xf8>)
 800fbce:	f00b feff 	bl	801b9d0 <sniprintf>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	4a26      	ldr	r2, [pc, #152]	; (800fc70 <log_log+0xf8>)
 800fbd6:	2100      	movs	r1, #0
 800fbd8:	54d1      	strb	r1, [r2, r3]
    int len;
    len = snprintf(print_buffer, PRINT_BUFFER_LEN, "%6s %s%5s\x1b[0m \x1b[90m%30s\x1b[0m ", buf_ts, level_colors[level],
 800fbda:	4a26      	ldr	r2, [pc, #152]	; (800fc74 <log_log+0xfc>)
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbe2:	4925      	ldr	r1, [pc, #148]	; (800fc78 <log_log+0x100>)
 800fbe4:	68fa      	ldr	r2, [r7, #12]
 800fbe6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fbea:	4921      	ldr	r1, [pc, #132]	; (800fc70 <log_log+0xf8>)
 800fbec:	9102      	str	r1, [sp, #8]
 800fbee:	9201      	str	r2, [sp, #4]
 800fbf0:	9300      	str	r3, [sp, #0]
 800fbf2:	4b1d      	ldr	r3, [pc, #116]	; (800fc68 <log_log+0xf0>)
 800fbf4:	4a21      	ldr	r2, [pc, #132]	; (800fc7c <log_log+0x104>)
 800fbf6:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800fbfa:	4821      	ldr	r0, [pc, #132]	; (800fc80 <log_log+0x108>)
 800fbfc:	f00b fee8 	bl	801b9d0 <sniprintf>
 800fc00:	6178      	str	r0, [r7, #20]
                   level_strings[level], buf_loc);
    va_list argptr;
    va_start(argptr, format);
 800fc02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fc06:	613b      	str	r3, [r7, #16]
    vsnprintf(print_buffer + len, PRINT_BUFFER_LEN, format, argptr);
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	4a1d      	ldr	r2, [pc, #116]	; (800fc80 <log_log+0x108>)
 800fc0c:	1898      	adds	r0, r3, r2
 800fc0e:	693b      	ldr	r3, [r7, #16]
 800fc10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc12:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800fc16:	f00c f8c5 	bl	801bda4 <vsniprintf>
    va_end(argptr);
    snprintf(print_buffer + strlen(print_buffer), PRINT_BUFFER_LEN, "\n");
 800fc1a:	4819      	ldr	r0, [pc, #100]	; (800fc80 <log_log+0x108>)
 800fc1c:	f7fc fa10 	bl	800c040 <strlen>
 800fc20:	4603      	mov	r3, r0
 800fc22:	4a17      	ldr	r2, [pc, #92]	; (800fc80 <log_log+0x108>)
 800fc24:	4413      	add	r3, r2
 800fc26:	4a17      	ldr	r2, [pc, #92]	; (800fc84 <log_log+0x10c>)
 800fc28:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f00b fecf 	bl	801b9d0 <sniprintf>
    fifo_write_bytes(&usb_output_fifo, (uint8_t *)print_buffer, strlen(print_buffer));
 800fc32:	4813      	ldr	r0, [pc, #76]	; (800fc80 <log_log+0x108>)
 800fc34:	f7fc fa04 	bl	800c040 <strlen>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	461a      	mov	r2, r3
 800fc3c:	4910      	ldr	r1, [pc, #64]	; (800fc80 <log_log+0x108>)
 800fc3e:	4812      	ldr	r0, [pc, #72]	; (800fc88 <log_log+0x110>)
 800fc40:	f7ff fed1 	bl	800f9e6 <fifo_write_bytes>
    osMutexRelease(print_mutex);
 800fc44:	4b06      	ldr	r3, [pc, #24]	; (800fc60 <log_log+0xe8>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f008 f886 	bl	8017d5a <osMutexRelease>
  }
}
 800fc4e:	bf00      	nop
 800fc50:	371c      	adds	r7, #28
 800fc52:	46bd      	mov	sp, r7
 800fc54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fc58:	b001      	add	sp, #4
 800fc5a:	4770      	bx	lr
 800fc5c:	20000464 	.word	0x20000464
 800fc60:	200074ec 	.word	0x200074ec
 800fc64:	0801ccf4 	.word	0x0801ccf4
 800fc68:	20000610 	.word	0x20000610
 800fc6c:	0801ccf8 	.word	0x0801ccf8
 800fc70:	20000620 	.word	0x20000620
 800fc74:	2000001c 	.word	0x2000001c
 800fc78:	20000004 	.word	0x20000004
 800fc7c:	0801cd00 	.word	0x0801cd00
 800fc80:	2000046c 	.word	0x2000046c
 800fc84:	0801cd20 	.word	0x0801cd20
 800fc88:	20005594 	.word	0x20005594

0800fc8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800fc8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800fcc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800fc90:	480d      	ldr	r0, [pc, #52]	; (800fcc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800fc92:	490e      	ldr	r1, [pc, #56]	; (800fccc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800fc94:	4a0e      	ldr	r2, [pc, #56]	; (800fcd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800fc96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800fc98:	e002      	b.n	800fca0 <LoopCopyDataInit>

0800fc9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800fc9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800fc9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800fc9e:	3304      	adds	r3, #4

0800fca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800fca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800fca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800fca4:	d3f9      	bcc.n	800fc9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800fca6:	4a0b      	ldr	r2, [pc, #44]	; (800fcd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800fca8:	4c0b      	ldr	r4, [pc, #44]	; (800fcd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800fcaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 800fcac:	e001      	b.n	800fcb2 <LoopFillZerobss>

0800fcae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800fcae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800fcb0:	3204      	adds	r2, #4

0800fcb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800fcb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800fcb4:	d3fb      	bcc.n	800fcae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800fcb6:	f7fe fdc5 	bl	800e844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800fcba:	f00b fe4f 	bl	801b95c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800fcbe:	f7fd ff5b 	bl	800db78 <main>
  bx  lr    
 800fcc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800fcc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800fcc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800fccc:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 800fcd0:	0801d0f0 	.word	0x0801d0f0
  ldr r2, =_sbss
 800fcd4:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 800fcd8:	20008108 	.word	0x20008108

0800fcdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800fcdc:	e7fe      	b.n	800fcdc <ADC_IRQHandler>
	...

0800fce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800fce4:	4b0e      	ldr	r3, [pc, #56]	; (800fd20 <HAL_Init+0x40>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	4a0d      	ldr	r2, [pc, #52]	; (800fd20 <HAL_Init+0x40>)
 800fcea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fcee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800fcf0:	4b0b      	ldr	r3, [pc, #44]	; (800fd20 <HAL_Init+0x40>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4a0a      	ldr	r2, [pc, #40]	; (800fd20 <HAL_Init+0x40>)
 800fcf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fcfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800fcfc:	4b08      	ldr	r3, [pc, #32]	; (800fd20 <HAL_Init+0x40>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	4a07      	ldr	r2, [pc, #28]	; (800fd20 <HAL_Init+0x40>)
 800fd02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fd06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800fd08:	2003      	movs	r0, #3
 800fd0a:	f000 fd2c 	bl	8010766 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800fd0e:	200f      	movs	r0, #15
 800fd10:	f7fe fca8 	bl	800e664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800fd14:	f7fe fb14 	bl	800e340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800fd18:	2300      	movs	r3, #0
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	bd80      	pop	{r7, pc}
 800fd1e:	bf00      	nop
 800fd20:	40023c00 	.word	0x40023c00

0800fd24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800fd24:	b480      	push	{r7}
 800fd26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800fd28:	4b06      	ldr	r3, [pc, #24]	; (800fd44 <HAL_IncTick+0x20>)
 800fd2a:	781b      	ldrb	r3, [r3, #0]
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	4b06      	ldr	r3, [pc, #24]	; (800fd48 <HAL_IncTick+0x24>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	4413      	add	r3, r2
 800fd34:	4a04      	ldr	r2, [pc, #16]	; (800fd48 <HAL_IncTick+0x24>)
 800fd36:	6013      	str	r3, [r2, #0]
}
 800fd38:	bf00      	nop
 800fd3a:	46bd      	mov	sp, r7
 800fd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd40:	4770      	bx	lr
 800fd42:	bf00      	nop
 800fd44:	20000038 	.word	0x20000038
 800fd48:	200074f0 	.word	0x200074f0

0800fd4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	af00      	add	r7, sp, #0
  return uwTick;
 800fd50:	4b03      	ldr	r3, [pc, #12]	; (800fd60 <HAL_GetTick+0x14>)
 800fd52:	681b      	ldr	r3, [r3, #0]
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	46bd      	mov	sp, r7
 800fd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5c:	4770      	bx	lr
 800fd5e:	bf00      	nop
 800fd60:	200074f0 	.word	0x200074f0

0800fd64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b084      	sub	sp, #16
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800fd6c:	f7ff ffee 	bl	800fd4c <HAL_GetTick>
 800fd70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd7c:	d005      	beq.n	800fd8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800fd7e:	4b0a      	ldr	r3, [pc, #40]	; (800fda8 <HAL_Delay+0x44>)
 800fd80:	781b      	ldrb	r3, [r3, #0]
 800fd82:	461a      	mov	r2, r3
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	4413      	add	r3, r2
 800fd88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800fd8a:	bf00      	nop
 800fd8c:	f7ff ffde 	bl	800fd4c <HAL_GetTick>
 800fd90:	4602      	mov	r2, r0
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	1ad3      	subs	r3, r2, r3
 800fd96:	68fa      	ldr	r2, [r7, #12]
 800fd98:	429a      	cmp	r2, r3
 800fd9a:	d8f7      	bhi.n	800fd8c <HAL_Delay+0x28>
  {
  }
}
 800fd9c:	bf00      	nop
 800fd9e:	bf00      	nop
 800fda0:	3710      	adds	r7, #16
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	20000038 	.word	0x20000038

0800fdac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800fdac:	b480      	push	{r7}
 800fdae:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 800fdb0:	4b03      	ldr	r3, [pc, #12]	; (800fdc0 <HAL_GetREVID+0x14>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	0c1b      	lsrs	r3, r3, #16
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbe:	4770      	bx	lr
 800fdc0:	e0042000 	.word	0xe0042000

0800fdc4 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800fdc8:	4b04      	ldr	r3, [pc, #16]	; (800fddc <HAL_GetDEVID+0x18>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr
 800fdda:	bf00      	nop
 800fddc:	e0042000 	.word	0xe0042000

0800fde0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b084      	sub	sp, #16
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fde8:	2300      	movs	r3, #0
 800fdea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d101      	bne.n	800fdf6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	e033      	b.n	800fe5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d109      	bne.n	800fe12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f7fe faca 	bl	800e398 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2200      	movs	r2, #0
 800fe08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe16:	f003 0310 	and.w	r3, r3, #16
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d118      	bne.n	800fe50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800fe26:	f023 0302 	bic.w	r3, r3, #2
 800fe2a:	f043 0202 	orr.w	r2, r3, #2
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f000 faca 	bl	80103cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe42:	f023 0303 	bic.w	r3, r3, #3
 800fe46:	f043 0201 	orr.w	r2, r3, #1
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	641a      	str	r2, [r3, #64]	; 0x40
 800fe4e:	e001      	b.n	800fe54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800fe50:	2301      	movs	r3, #1
 800fe52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2200      	movs	r2, #0
 800fe58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800fe5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3710      	adds	r7, #16
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
	...

0800fe68 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b085      	sub	sp, #20
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800fe70:	2300      	movs	r3, #0
 800fe72:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d101      	bne.n	800fe82 <HAL_ADC_Start+0x1a>
 800fe7e:	2302      	movs	r3, #2
 800fe80:	e097      	b.n	800ffb2 <HAL_ADC_Start+0x14a>
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2201      	movs	r2, #1
 800fe86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	689b      	ldr	r3, [r3, #8]
 800fe90:	f003 0301 	and.w	r3, r3, #1
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d018      	beq.n	800feca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	689a      	ldr	r2, [r3, #8]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	f042 0201 	orr.w	r2, r2, #1
 800fea6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800fea8:	4b45      	ldr	r3, [pc, #276]	; (800ffc0 <HAL_ADC_Start+0x158>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	4a45      	ldr	r2, [pc, #276]	; (800ffc4 <HAL_ADC_Start+0x15c>)
 800feae:	fba2 2303 	umull	r2, r3, r2, r3
 800feb2:	0c9a      	lsrs	r2, r3, #18
 800feb4:	4613      	mov	r3, r2
 800feb6:	005b      	lsls	r3, r3, #1
 800feb8:	4413      	add	r3, r2
 800feba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800febc:	e002      	b.n	800fec4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	3b01      	subs	r3, #1
 800fec2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d1f9      	bne.n	800febe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	689b      	ldr	r3, [r3, #8]
 800fed0:	f003 0301 	and.w	r3, r3, #1
 800fed4:	2b01      	cmp	r3, #1
 800fed6:	d15f      	bne.n	800ff98 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fedc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800fee0:	f023 0301 	bic.w	r3, r3, #1
 800fee4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	685b      	ldr	r3, [r3, #4]
 800fef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d007      	beq.n	800ff0a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fefe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ff02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ff12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff16:	d106      	bne.n	800ff26 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff1c:	f023 0206 	bic.w	r2, r3, #6
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	645a      	str	r2, [r3, #68]	; 0x44
 800ff24:	e002      	b.n	800ff2c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2200      	movs	r2, #0
 800ff2a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ff34:	4b24      	ldr	r3, [pc, #144]	; (800ffc8 <HAL_ADC_Start+0x160>)
 800ff36:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800ff40:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	685b      	ldr	r3, [r3, #4]
 800ff46:	f003 031f 	and.w	r3, r3, #31
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d10f      	bne.n	800ff6e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	689b      	ldr	r3, [r3, #8]
 800ff54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d129      	bne.n	800ffb0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	689a      	ldr	r2, [r3, #8]
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ff6a:	609a      	str	r2, [r3, #8]
 800ff6c:	e020      	b.n	800ffb0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	4a16      	ldr	r2, [pc, #88]	; (800ffcc <HAL_ADC_Start+0x164>)
 800ff74:	4293      	cmp	r3, r2
 800ff76:	d11b      	bne.n	800ffb0 <HAL_ADC_Start+0x148>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	689b      	ldr	r3, [r3, #8]
 800ff7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d114      	bne.n	800ffb0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	689a      	ldr	r2, [r3, #8]
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800ff94:	609a      	str	r2, [r3, #8]
 800ff96:	e00b      	b.n	800ffb0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff9c:	f043 0210 	orr.w	r2, r3, #16
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffa8:	f043 0201 	orr.w	r2, r3, #1
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800ffb0:	2300      	movs	r3, #0
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3714      	adds	r7, #20
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbc:	4770      	bx	lr
 800ffbe:	bf00      	nop
 800ffc0:	20000000 	.word	0x20000000
 800ffc4:	431bde83 	.word	0x431bde83
 800ffc8:	40012300 	.word	0x40012300
 800ffcc:	40012000 	.word	0x40012000

0800ffd0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800ffd0:	b480      	push	{r7}
 800ffd2:	b083      	sub	sp, #12
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffde:	2b01      	cmp	r3, #1
 800ffe0:	d101      	bne.n	800ffe6 <HAL_ADC_Stop+0x16>
 800ffe2:	2302      	movs	r3, #2
 800ffe4:	e021      	b.n	801002a <HAL_ADC_Stop+0x5a>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2201      	movs	r2, #1
 800ffea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	689a      	ldr	r2, [r3, #8]
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	f022 0201 	bic.w	r2, r2, #1
 800fffc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	689b      	ldr	r3, [r3, #8]
 8010004:	f003 0301 	and.w	r3, r3, #1
 8010008:	2b00      	cmp	r3, #0
 801000a:	d109      	bne.n	8010020 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010010:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8010014:	f023 0301 	bic.w	r3, r3, #1
 8010018:	f043 0201 	orr.w	r2, r3, #1
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	2200      	movs	r2, #0
 8010024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8010028:	2300      	movs	r3, #0
}
 801002a:	4618      	mov	r0, r3
 801002c:	370c      	adds	r7, #12
 801002e:	46bd      	mov	sp, r7
 8010030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010034:	4770      	bx	lr

08010036 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8010036:	b580      	push	{r7, lr}
 8010038:	b084      	sub	sp, #16
 801003a:	af00      	add	r7, sp, #0
 801003c:	6078      	str	r0, [r7, #4]
 801003e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8010040:	2300      	movs	r3, #0
 8010042:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	689b      	ldr	r3, [r3, #8]
 801004a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801004e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010052:	d113      	bne.n	801007c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	689b      	ldr	r3, [r3, #8]
 801005a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 801005e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010062:	d10b      	bne.n	801007c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010068:	f043 0220 	orr.w	r2, r3, #32
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2200      	movs	r2, #0
 8010074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8010078:	2301      	movs	r3, #1
 801007a:	e063      	b.n	8010144 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 801007c:	f7ff fe66 	bl	800fd4c <HAL_GetTick>
 8010080:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8010082:	e021      	b.n	80100c8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	f1b3 3fff 	cmp.w	r3, #4294967295
 801008a:	d01d      	beq.n	80100c8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d007      	beq.n	80100a2 <HAL_ADC_PollForConversion+0x6c>
 8010092:	f7ff fe5b 	bl	800fd4c <HAL_GetTick>
 8010096:	4602      	mov	r2, r0
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	1ad3      	subs	r3, r2, r3
 801009c:	683a      	ldr	r2, [r7, #0]
 801009e:	429a      	cmp	r2, r3
 80100a0:	d212      	bcs.n	80100c8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f003 0302 	and.w	r3, r3, #2
 80100ac:	2b02      	cmp	r3, #2
 80100ae:	d00b      	beq.n	80100c8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100b4:	f043 0204 	orr.w	r2, r3, #4
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2200      	movs	r2, #0
 80100c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80100c4:	2303      	movs	r3, #3
 80100c6:	e03d      	b.n	8010144 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	f003 0302 	and.w	r3, r3, #2
 80100d2:	2b02      	cmp	r3, #2
 80100d4:	d1d6      	bne.n	8010084 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	f06f 0212 	mvn.w	r2, #18
 80100de:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	689b      	ldr	r3, [r3, #8]
 80100f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d123      	bne.n	8010142 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d11f      	bne.n	8010142 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010108:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801010c:	2b00      	cmp	r3, #0
 801010e:	d006      	beq.n	801011e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	689b      	ldr	r3, [r3, #8]
 8010116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 801011a:	2b00      	cmp	r3, #0
 801011c:	d111      	bne.n	8010142 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801012e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010132:	2b00      	cmp	r3, #0
 8010134:	d105      	bne.n	8010142 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801013a:	f043 0201 	orr.w	r2, r3, #1
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8010142:	2300      	movs	r3, #0
}
 8010144:	4618      	mov	r0, r3
 8010146:	3710      	adds	r7, #16
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 801014c:	b480      	push	{r7}
 801014e:	b083      	sub	sp, #12
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 801015a:	4618      	mov	r0, r3
 801015c:	370c      	adds	r7, #12
 801015e:	46bd      	mov	sp, r7
 8010160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010164:	4770      	bx	lr
	...

08010168 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8010168:	b480      	push	{r7}
 801016a:	b085      	sub	sp, #20
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8010172:	2300      	movs	r3, #0
 8010174:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801017c:	2b01      	cmp	r3, #1
 801017e:	d101      	bne.n	8010184 <HAL_ADC_ConfigChannel+0x1c>
 8010180:	2302      	movs	r3, #2
 8010182:	e113      	b.n	80103ac <HAL_ADC_ConfigChannel+0x244>
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2201      	movs	r2, #1
 8010188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	2b09      	cmp	r3, #9
 8010192:	d925      	bls.n	80101e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	68d9      	ldr	r1, [r3, #12]
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	b29b      	uxth	r3, r3
 80101a0:	461a      	mov	r2, r3
 80101a2:	4613      	mov	r3, r2
 80101a4:	005b      	lsls	r3, r3, #1
 80101a6:	4413      	add	r3, r2
 80101a8:	3b1e      	subs	r3, #30
 80101aa:	2207      	movs	r2, #7
 80101ac:	fa02 f303 	lsl.w	r3, r2, r3
 80101b0:	43da      	mvns	r2, r3
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	400a      	ands	r2, r1
 80101b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	68d9      	ldr	r1, [r3, #12]
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	689a      	ldr	r2, [r3, #8]
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	b29b      	uxth	r3, r3
 80101ca:	4618      	mov	r0, r3
 80101cc:	4603      	mov	r3, r0
 80101ce:	005b      	lsls	r3, r3, #1
 80101d0:	4403      	add	r3, r0
 80101d2:	3b1e      	subs	r3, #30
 80101d4:	409a      	lsls	r2, r3
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	430a      	orrs	r2, r1
 80101dc:	60da      	str	r2, [r3, #12]
 80101de:	e022      	b.n	8010226 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	6919      	ldr	r1, [r3, #16]
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	b29b      	uxth	r3, r3
 80101ec:	461a      	mov	r2, r3
 80101ee:	4613      	mov	r3, r2
 80101f0:	005b      	lsls	r3, r3, #1
 80101f2:	4413      	add	r3, r2
 80101f4:	2207      	movs	r2, #7
 80101f6:	fa02 f303 	lsl.w	r3, r2, r3
 80101fa:	43da      	mvns	r2, r3
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	400a      	ands	r2, r1
 8010202:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	6919      	ldr	r1, [r3, #16]
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	689a      	ldr	r2, [r3, #8]
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	b29b      	uxth	r3, r3
 8010214:	4618      	mov	r0, r3
 8010216:	4603      	mov	r3, r0
 8010218:	005b      	lsls	r3, r3, #1
 801021a:	4403      	add	r3, r0
 801021c:	409a      	lsls	r2, r3
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	430a      	orrs	r2, r1
 8010224:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	685b      	ldr	r3, [r3, #4]
 801022a:	2b06      	cmp	r3, #6
 801022c:	d824      	bhi.n	8010278 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	685a      	ldr	r2, [r3, #4]
 8010238:	4613      	mov	r3, r2
 801023a:	009b      	lsls	r3, r3, #2
 801023c:	4413      	add	r3, r2
 801023e:	3b05      	subs	r3, #5
 8010240:	221f      	movs	r2, #31
 8010242:	fa02 f303 	lsl.w	r3, r2, r3
 8010246:	43da      	mvns	r2, r3
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	400a      	ands	r2, r1
 801024e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	b29b      	uxth	r3, r3
 801025c:	4618      	mov	r0, r3
 801025e:	683b      	ldr	r3, [r7, #0]
 8010260:	685a      	ldr	r2, [r3, #4]
 8010262:	4613      	mov	r3, r2
 8010264:	009b      	lsls	r3, r3, #2
 8010266:	4413      	add	r3, r2
 8010268:	3b05      	subs	r3, #5
 801026a:	fa00 f203 	lsl.w	r2, r0, r3
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	430a      	orrs	r2, r1
 8010274:	635a      	str	r2, [r3, #52]	; 0x34
 8010276:	e04c      	b.n	8010312 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	685b      	ldr	r3, [r3, #4]
 801027c:	2b0c      	cmp	r3, #12
 801027e:	d824      	bhi.n	80102ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	685a      	ldr	r2, [r3, #4]
 801028a:	4613      	mov	r3, r2
 801028c:	009b      	lsls	r3, r3, #2
 801028e:	4413      	add	r3, r2
 8010290:	3b23      	subs	r3, #35	; 0x23
 8010292:	221f      	movs	r2, #31
 8010294:	fa02 f303 	lsl.w	r3, r2, r3
 8010298:	43da      	mvns	r2, r3
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	400a      	ands	r2, r1
 80102a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	b29b      	uxth	r3, r3
 80102ae:	4618      	mov	r0, r3
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	685a      	ldr	r2, [r3, #4]
 80102b4:	4613      	mov	r3, r2
 80102b6:	009b      	lsls	r3, r3, #2
 80102b8:	4413      	add	r3, r2
 80102ba:	3b23      	subs	r3, #35	; 0x23
 80102bc:	fa00 f203 	lsl.w	r2, r0, r3
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	430a      	orrs	r2, r1
 80102c6:	631a      	str	r2, [r3, #48]	; 0x30
 80102c8:	e023      	b.n	8010312 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	685a      	ldr	r2, [r3, #4]
 80102d4:	4613      	mov	r3, r2
 80102d6:	009b      	lsls	r3, r3, #2
 80102d8:	4413      	add	r3, r2
 80102da:	3b41      	subs	r3, #65	; 0x41
 80102dc:	221f      	movs	r2, #31
 80102de:	fa02 f303 	lsl.w	r3, r2, r3
 80102e2:	43da      	mvns	r2, r3
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	400a      	ands	r2, r1
 80102ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	b29b      	uxth	r3, r3
 80102f8:	4618      	mov	r0, r3
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	685a      	ldr	r2, [r3, #4]
 80102fe:	4613      	mov	r3, r2
 8010300:	009b      	lsls	r3, r3, #2
 8010302:	4413      	add	r3, r2
 8010304:	3b41      	subs	r3, #65	; 0x41
 8010306:	fa00 f203 	lsl.w	r2, r0, r3
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	430a      	orrs	r2, r1
 8010310:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010312:	4b29      	ldr	r3, [pc, #164]	; (80103b8 <HAL_ADC_ConfigChannel+0x250>)
 8010314:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	4a28      	ldr	r2, [pc, #160]	; (80103bc <HAL_ADC_ConfigChannel+0x254>)
 801031c:	4293      	cmp	r3, r2
 801031e:	d10f      	bne.n	8010340 <HAL_ADC_ConfigChannel+0x1d8>
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	2b12      	cmp	r3, #18
 8010326:	d10b      	bne.n	8010340 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	685b      	ldr	r3, [r3, #4]
 801032c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	685b      	ldr	r3, [r3, #4]
 8010338:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	4a1d      	ldr	r2, [pc, #116]	; (80103bc <HAL_ADC_ConfigChannel+0x254>)
 8010346:	4293      	cmp	r3, r2
 8010348:	d12b      	bne.n	80103a2 <HAL_ADC_ConfigChannel+0x23a>
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	4a1c      	ldr	r2, [pc, #112]	; (80103c0 <HAL_ADC_ConfigChannel+0x258>)
 8010350:	4293      	cmp	r3, r2
 8010352:	d003      	beq.n	801035c <HAL_ADC_ConfigChannel+0x1f4>
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	2b11      	cmp	r3, #17
 801035a:	d122      	bne.n	80103a2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	685b      	ldr	r3, [r3, #4]
 8010360:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	685b      	ldr	r3, [r3, #4]
 801036c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	4a11      	ldr	r2, [pc, #68]	; (80103c0 <HAL_ADC_ConfigChannel+0x258>)
 801037a:	4293      	cmp	r3, r2
 801037c:	d111      	bne.n	80103a2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801037e:	4b11      	ldr	r3, [pc, #68]	; (80103c4 <HAL_ADC_ConfigChannel+0x25c>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	4a11      	ldr	r2, [pc, #68]	; (80103c8 <HAL_ADC_ConfigChannel+0x260>)
 8010384:	fba2 2303 	umull	r2, r3, r2, r3
 8010388:	0c9a      	lsrs	r2, r3, #18
 801038a:	4613      	mov	r3, r2
 801038c:	009b      	lsls	r3, r3, #2
 801038e:	4413      	add	r3, r2
 8010390:	005b      	lsls	r3, r3, #1
 8010392:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8010394:	e002      	b.n	801039c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	3b01      	subs	r3, #1
 801039a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d1f9      	bne.n	8010396 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2200      	movs	r2, #0
 80103a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80103aa:	2300      	movs	r3, #0
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3714      	adds	r7, #20
 80103b0:	46bd      	mov	sp, r7
 80103b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b6:	4770      	bx	lr
 80103b8:	40012300 	.word	0x40012300
 80103bc:	40012000 	.word	0x40012000
 80103c0:	10000012 	.word	0x10000012
 80103c4:	20000000 	.word	0x20000000
 80103c8:	431bde83 	.word	0x431bde83

080103cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80103cc:	b480      	push	{r7}
 80103ce:	b085      	sub	sp, #20
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80103d4:	4b79      	ldr	r3, [pc, #484]	; (80105bc <ADC_Init+0x1f0>)
 80103d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	685b      	ldr	r3, [r3, #4]
 80103dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	685a      	ldr	r2, [r3, #4]
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	685b      	ldr	r3, [r3, #4]
 80103ec:	431a      	orrs	r2, r3
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	685a      	ldr	r2, [r3, #4]
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010400:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	6859      	ldr	r1, [r3, #4]
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	691b      	ldr	r3, [r3, #16]
 801040c:	021a      	lsls	r2, r3, #8
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	430a      	orrs	r2, r1
 8010414:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	685a      	ldr	r2, [r3, #4]
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8010424:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	6859      	ldr	r1, [r3, #4]
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	689a      	ldr	r2, [r3, #8]
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	430a      	orrs	r2, r1
 8010436:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	689a      	ldr	r2, [r3, #8]
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010446:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	6899      	ldr	r1, [r3, #8]
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	68da      	ldr	r2, [r3, #12]
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	430a      	orrs	r2, r1
 8010458:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801045e:	4a58      	ldr	r2, [pc, #352]	; (80105c0 <ADC_Init+0x1f4>)
 8010460:	4293      	cmp	r3, r2
 8010462:	d022      	beq.n	80104aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	689a      	ldr	r2, [r3, #8]
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010472:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	6899      	ldr	r1, [r3, #8]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	430a      	orrs	r2, r1
 8010484:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	689a      	ldr	r2, [r3, #8]
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010494:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	6899      	ldr	r1, [r3, #8]
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	430a      	orrs	r2, r1
 80104a6:	609a      	str	r2, [r3, #8]
 80104a8:	e00f      	b.n	80104ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	689a      	ldr	r2, [r3, #8]
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80104b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	689a      	ldr	r2, [r3, #8]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80104c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	689a      	ldr	r2, [r3, #8]
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	f022 0202 	bic.w	r2, r2, #2
 80104d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	6899      	ldr	r1, [r3, #8]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	7e1b      	ldrb	r3, [r3, #24]
 80104e4:	005a      	lsls	r2, r3, #1
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	430a      	orrs	r2, r1
 80104ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d01b      	beq.n	8010530 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	685a      	ldr	r2, [r3, #4]
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010506:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	685a      	ldr	r2, [r3, #4]
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8010516:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	6859      	ldr	r1, [r3, #4]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010522:	3b01      	subs	r3, #1
 8010524:	035a      	lsls	r2, r3, #13
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	430a      	orrs	r2, r1
 801052c:	605a      	str	r2, [r3, #4]
 801052e:	e007      	b.n	8010540 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	685a      	ldr	r2, [r3, #4]
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801053e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801054e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	69db      	ldr	r3, [r3, #28]
 801055a:	3b01      	subs	r3, #1
 801055c:	051a      	lsls	r2, r3, #20
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	430a      	orrs	r2, r1
 8010564:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	689a      	ldr	r2, [r3, #8]
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010574:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	6899      	ldr	r1, [r3, #8]
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010582:	025a      	lsls	r2, r3, #9
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	430a      	orrs	r2, r1
 801058a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	689a      	ldr	r2, [r3, #8]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801059a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	6899      	ldr	r1, [r3, #8]
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	695b      	ldr	r3, [r3, #20]
 80105a6:	029a      	lsls	r2, r3, #10
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	430a      	orrs	r2, r1
 80105ae:	609a      	str	r2, [r3, #8]
}
 80105b0:	bf00      	nop
 80105b2:	3714      	adds	r7, #20
 80105b4:	46bd      	mov	sp, r7
 80105b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ba:	4770      	bx	lr
 80105bc:	40012300 	.word	0x40012300
 80105c0:	0f000001 	.word	0x0f000001

080105c4 <__NVIC_SetPriorityGrouping>:
{
 80105c4:	b480      	push	{r7}
 80105c6:	b085      	sub	sp, #20
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f003 0307 	and.w	r3, r3, #7
 80105d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80105d4:	4b0c      	ldr	r3, [pc, #48]	; (8010608 <__NVIC_SetPriorityGrouping+0x44>)
 80105d6:	68db      	ldr	r3, [r3, #12]
 80105d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80105da:	68ba      	ldr	r2, [r7, #8]
 80105dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80105e0:	4013      	ands	r3, r2
 80105e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80105ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80105f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80105f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80105f6:	4a04      	ldr	r2, [pc, #16]	; (8010608 <__NVIC_SetPriorityGrouping+0x44>)
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	60d3      	str	r3, [r2, #12]
}
 80105fc:	bf00      	nop
 80105fe:	3714      	adds	r7, #20
 8010600:	46bd      	mov	sp, r7
 8010602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010606:	4770      	bx	lr
 8010608:	e000ed00 	.word	0xe000ed00

0801060c <__NVIC_GetPriorityGrouping>:
{
 801060c:	b480      	push	{r7}
 801060e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010610:	4b04      	ldr	r3, [pc, #16]	; (8010624 <__NVIC_GetPriorityGrouping+0x18>)
 8010612:	68db      	ldr	r3, [r3, #12]
 8010614:	0a1b      	lsrs	r3, r3, #8
 8010616:	f003 0307 	and.w	r3, r3, #7
}
 801061a:	4618      	mov	r0, r3
 801061c:	46bd      	mov	sp, r7
 801061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010622:	4770      	bx	lr
 8010624:	e000ed00 	.word	0xe000ed00

08010628 <__NVIC_EnableIRQ>:
{
 8010628:	b480      	push	{r7}
 801062a:	b083      	sub	sp, #12
 801062c:	af00      	add	r7, sp, #0
 801062e:	4603      	mov	r3, r0
 8010630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010636:	2b00      	cmp	r3, #0
 8010638:	db0b      	blt.n	8010652 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801063a:	79fb      	ldrb	r3, [r7, #7]
 801063c:	f003 021f 	and.w	r2, r3, #31
 8010640:	4907      	ldr	r1, [pc, #28]	; (8010660 <__NVIC_EnableIRQ+0x38>)
 8010642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010646:	095b      	lsrs	r3, r3, #5
 8010648:	2001      	movs	r0, #1
 801064a:	fa00 f202 	lsl.w	r2, r0, r2
 801064e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010652:	bf00      	nop
 8010654:	370c      	adds	r7, #12
 8010656:	46bd      	mov	sp, r7
 8010658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065c:	4770      	bx	lr
 801065e:	bf00      	nop
 8010660:	e000e100 	.word	0xe000e100

08010664 <__NVIC_DisableIRQ>:
{
 8010664:	b480      	push	{r7}
 8010666:	b083      	sub	sp, #12
 8010668:	af00      	add	r7, sp, #0
 801066a:	4603      	mov	r3, r0
 801066c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010672:	2b00      	cmp	r3, #0
 8010674:	db12      	blt.n	801069c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010676:	79fb      	ldrb	r3, [r7, #7]
 8010678:	f003 021f 	and.w	r2, r3, #31
 801067c:	490a      	ldr	r1, [pc, #40]	; (80106a8 <__NVIC_DisableIRQ+0x44>)
 801067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010682:	095b      	lsrs	r3, r3, #5
 8010684:	2001      	movs	r0, #1
 8010686:	fa00 f202 	lsl.w	r2, r0, r2
 801068a:	3320      	adds	r3, #32
 801068c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010690:	f3bf 8f4f 	dsb	sy
}
 8010694:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010696:	f3bf 8f6f 	isb	sy
}
 801069a:	bf00      	nop
}
 801069c:	bf00      	nop
 801069e:	370c      	adds	r7, #12
 80106a0:	46bd      	mov	sp, r7
 80106a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a6:	4770      	bx	lr
 80106a8:	e000e100 	.word	0xe000e100

080106ac <__NVIC_SetPriority>:
{
 80106ac:	b480      	push	{r7}
 80106ae:	b083      	sub	sp, #12
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	4603      	mov	r3, r0
 80106b4:	6039      	str	r1, [r7, #0]
 80106b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80106b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	db0a      	blt.n	80106d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	b2da      	uxtb	r2, r3
 80106c4:	490c      	ldr	r1, [pc, #48]	; (80106f8 <__NVIC_SetPriority+0x4c>)
 80106c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80106ca:	0112      	lsls	r2, r2, #4
 80106cc:	b2d2      	uxtb	r2, r2
 80106ce:	440b      	add	r3, r1
 80106d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80106d4:	e00a      	b.n	80106ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80106d6:	683b      	ldr	r3, [r7, #0]
 80106d8:	b2da      	uxtb	r2, r3
 80106da:	4908      	ldr	r1, [pc, #32]	; (80106fc <__NVIC_SetPriority+0x50>)
 80106dc:	79fb      	ldrb	r3, [r7, #7]
 80106de:	f003 030f 	and.w	r3, r3, #15
 80106e2:	3b04      	subs	r3, #4
 80106e4:	0112      	lsls	r2, r2, #4
 80106e6:	b2d2      	uxtb	r2, r2
 80106e8:	440b      	add	r3, r1
 80106ea:	761a      	strb	r2, [r3, #24]
}
 80106ec:	bf00      	nop
 80106ee:	370c      	adds	r7, #12
 80106f0:	46bd      	mov	sp, r7
 80106f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f6:	4770      	bx	lr
 80106f8:	e000e100 	.word	0xe000e100
 80106fc:	e000ed00 	.word	0xe000ed00

08010700 <NVIC_EncodePriority>:
{
 8010700:	b480      	push	{r7}
 8010702:	b089      	sub	sp, #36	; 0x24
 8010704:	af00      	add	r7, sp, #0
 8010706:	60f8      	str	r0, [r7, #12]
 8010708:	60b9      	str	r1, [r7, #8]
 801070a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	f003 0307 	and.w	r3, r3, #7
 8010712:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010714:	69fb      	ldr	r3, [r7, #28]
 8010716:	f1c3 0307 	rsb	r3, r3, #7
 801071a:	2b04      	cmp	r3, #4
 801071c:	bf28      	it	cs
 801071e:	2304      	movcs	r3, #4
 8010720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010722:	69fb      	ldr	r3, [r7, #28]
 8010724:	3304      	adds	r3, #4
 8010726:	2b06      	cmp	r3, #6
 8010728:	d902      	bls.n	8010730 <NVIC_EncodePriority+0x30>
 801072a:	69fb      	ldr	r3, [r7, #28]
 801072c:	3b03      	subs	r3, #3
 801072e:	e000      	b.n	8010732 <NVIC_EncodePriority+0x32>
 8010730:	2300      	movs	r3, #0
 8010732:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010734:	f04f 32ff 	mov.w	r2, #4294967295
 8010738:	69bb      	ldr	r3, [r7, #24]
 801073a:	fa02 f303 	lsl.w	r3, r2, r3
 801073e:	43da      	mvns	r2, r3
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	401a      	ands	r2, r3
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010748:	f04f 31ff 	mov.w	r1, #4294967295
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	fa01 f303 	lsl.w	r3, r1, r3
 8010752:	43d9      	mvns	r1, r3
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010758:	4313      	orrs	r3, r2
}
 801075a:	4618      	mov	r0, r3
 801075c:	3724      	adds	r7, #36	; 0x24
 801075e:	46bd      	mov	sp, r7
 8010760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010764:	4770      	bx	lr

08010766 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010766:	b580      	push	{r7, lr}
 8010768:	b082      	sub	sp, #8
 801076a:	af00      	add	r7, sp, #0
 801076c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f7ff ff28 	bl	80105c4 <__NVIC_SetPriorityGrouping>
}
 8010774:	bf00      	nop
 8010776:	3708      	adds	r7, #8
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}

0801077c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801077c:	b580      	push	{r7, lr}
 801077e:	b086      	sub	sp, #24
 8010780:	af00      	add	r7, sp, #0
 8010782:	4603      	mov	r3, r0
 8010784:	60b9      	str	r1, [r7, #8]
 8010786:	607a      	str	r2, [r7, #4]
 8010788:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801078a:	2300      	movs	r3, #0
 801078c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801078e:	f7ff ff3d 	bl	801060c <__NVIC_GetPriorityGrouping>
 8010792:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	68b9      	ldr	r1, [r7, #8]
 8010798:	6978      	ldr	r0, [r7, #20]
 801079a:	f7ff ffb1 	bl	8010700 <NVIC_EncodePriority>
 801079e:	4602      	mov	r2, r0
 80107a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80107a4:	4611      	mov	r1, r2
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7ff ff80 	bl	80106ac <__NVIC_SetPriority>
}
 80107ac:	bf00      	nop
 80107ae:	3718      	adds	r7, #24
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	4603      	mov	r3, r0
 80107bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80107be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7ff ff30 	bl	8010628 <__NVIC_EnableIRQ>
}
 80107c8:	bf00      	nop
 80107ca:	3708      	adds	r7, #8
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}

080107d0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	4603      	mov	r3, r0
 80107d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80107da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80107de:	4618      	mov	r0, r3
 80107e0:	f7ff ff40 	bl	8010664 <__NVIC_DisableIRQ>
}
 80107e4:	bf00      	nop
 80107e6:	3708      	adds	r7, #8
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}

080107ec <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b086      	sub	sp, #24
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	60f8      	str	r0, [r7, #12]
 80107f4:	60b9      	str	r1, [r7, #8]
 80107f6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80107fa:	2301      	movs	r3, #1
 80107fc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80107fe:	4b23      	ldr	r3, [pc, #140]	; (801088c <HAL_FLASH_Program+0xa0>)
 8010800:	7e1b      	ldrb	r3, [r3, #24]
 8010802:	2b01      	cmp	r3, #1
 8010804:	d101      	bne.n	801080a <HAL_FLASH_Program+0x1e>
 8010806:	2302      	movs	r3, #2
 8010808:	e03b      	b.n	8010882 <HAL_FLASH_Program+0x96>
 801080a:	4b20      	ldr	r3, [pc, #128]	; (801088c <HAL_FLASH_Program+0xa0>)
 801080c:	2201      	movs	r2, #1
 801080e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010810:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010814:	f000 f870 	bl	80108f8 <FLASH_WaitForLastOperation>
 8010818:	4603      	mov	r3, r0
 801081a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 801081c:	7dfb      	ldrb	r3, [r7, #23]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d12b      	bne.n	801087a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d105      	bne.n	8010834 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8010828:	783b      	ldrb	r3, [r7, #0]
 801082a:	4619      	mov	r1, r3
 801082c:	68b8      	ldr	r0, [r7, #8]
 801082e:	f000 f91b 	bl	8010a68 <FLASH_Program_Byte>
 8010832:	e016      	b.n	8010862 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	2b01      	cmp	r3, #1
 8010838:	d105      	bne.n	8010846 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 801083a:	883b      	ldrh	r3, [r7, #0]
 801083c:	4619      	mov	r1, r3
 801083e:	68b8      	ldr	r0, [r7, #8]
 8010840:	f000 f8ee 	bl	8010a20 <FLASH_Program_HalfWord>
 8010844:	e00d      	b.n	8010862 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	2b02      	cmp	r3, #2
 801084a:	d105      	bne.n	8010858 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	4619      	mov	r1, r3
 8010850:	68b8      	ldr	r0, [r7, #8]
 8010852:	f000 f8c3 	bl	80109dc <FLASH_Program_Word>
 8010856:	e004      	b.n	8010862 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8010858:	e9d7 2300 	ldrd	r2, r3, [r7]
 801085c:	68b8      	ldr	r0, [r7, #8]
 801085e:	f000 f88b 	bl	8010978 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010862:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010866:	f000 f847 	bl	80108f8 <FLASH_WaitForLastOperation>
 801086a:	4603      	mov	r3, r0
 801086c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 801086e:	4b08      	ldr	r3, [pc, #32]	; (8010890 <HAL_FLASH_Program+0xa4>)
 8010870:	691b      	ldr	r3, [r3, #16]
 8010872:	4a07      	ldr	r2, [pc, #28]	; (8010890 <HAL_FLASH_Program+0xa4>)
 8010874:	f023 0301 	bic.w	r3, r3, #1
 8010878:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801087a:	4b04      	ldr	r3, [pc, #16]	; (801088c <HAL_FLASH_Program+0xa0>)
 801087c:	2200      	movs	r2, #0
 801087e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8010880:	7dfb      	ldrb	r3, [r7, #23]
}
 8010882:	4618      	mov	r0, r3
 8010884:	3718      	adds	r7, #24
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	200074f4 	.word	0x200074f4
 8010890:	40023c00 	.word	0x40023c00

08010894 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8010894:	b480      	push	{r7}
 8010896:	b083      	sub	sp, #12
 8010898:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801089a:	2300      	movs	r3, #0
 801089c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801089e:	4b0b      	ldr	r3, [pc, #44]	; (80108cc <HAL_FLASH_Unlock+0x38>)
 80108a0:	691b      	ldr	r3, [r3, #16]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	da0b      	bge.n	80108be <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80108a6:	4b09      	ldr	r3, [pc, #36]	; (80108cc <HAL_FLASH_Unlock+0x38>)
 80108a8:	4a09      	ldr	r2, [pc, #36]	; (80108d0 <HAL_FLASH_Unlock+0x3c>)
 80108aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80108ac:	4b07      	ldr	r3, [pc, #28]	; (80108cc <HAL_FLASH_Unlock+0x38>)
 80108ae:	4a09      	ldr	r2, [pc, #36]	; (80108d4 <HAL_FLASH_Unlock+0x40>)
 80108b0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80108b2:	4b06      	ldr	r3, [pc, #24]	; (80108cc <HAL_FLASH_Unlock+0x38>)
 80108b4:	691b      	ldr	r3, [r3, #16]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	da01      	bge.n	80108be <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80108ba:	2301      	movs	r3, #1
 80108bc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80108be:	79fb      	ldrb	r3, [r7, #7]
}
 80108c0:	4618      	mov	r0, r3
 80108c2:	370c      	adds	r7, #12
 80108c4:	46bd      	mov	sp, r7
 80108c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ca:	4770      	bx	lr
 80108cc:	40023c00 	.word	0x40023c00
 80108d0:	45670123 	.word	0x45670123
 80108d4:	cdef89ab 	.word	0xcdef89ab

080108d8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80108d8:	b480      	push	{r7}
 80108da:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80108dc:	4b05      	ldr	r3, [pc, #20]	; (80108f4 <HAL_FLASH_Lock+0x1c>)
 80108de:	691b      	ldr	r3, [r3, #16]
 80108e0:	4a04      	ldr	r2, [pc, #16]	; (80108f4 <HAL_FLASH_Lock+0x1c>)
 80108e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80108e6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80108e8:	2300      	movs	r3, #0
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	46bd      	mov	sp, r7
 80108ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f2:	4770      	bx	lr
 80108f4:	40023c00 	.word	0x40023c00

080108f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b084      	sub	sp, #16
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010900:	2300      	movs	r3, #0
 8010902:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010904:	4b1a      	ldr	r3, [pc, #104]	; (8010970 <FLASH_WaitForLastOperation+0x78>)
 8010906:	2200      	movs	r2, #0
 8010908:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 801090a:	f7ff fa1f 	bl	800fd4c <HAL_GetTick>
 801090e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8010910:	e010      	b.n	8010934 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010918:	d00c      	beq.n	8010934 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d007      	beq.n	8010930 <FLASH_WaitForLastOperation+0x38>
 8010920:	f7ff fa14 	bl	800fd4c <HAL_GetTick>
 8010924:	4602      	mov	r2, r0
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	1ad3      	subs	r3, r2, r3
 801092a:	687a      	ldr	r2, [r7, #4]
 801092c:	429a      	cmp	r2, r3
 801092e:	d201      	bcs.n	8010934 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8010930:	2303      	movs	r3, #3
 8010932:	e019      	b.n	8010968 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8010934:	4b0f      	ldr	r3, [pc, #60]	; (8010974 <FLASH_WaitForLastOperation+0x7c>)
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801093c:	2b00      	cmp	r3, #0
 801093e:	d1e8      	bne.n	8010912 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8010940:	4b0c      	ldr	r3, [pc, #48]	; (8010974 <FLASH_WaitForLastOperation+0x7c>)
 8010942:	68db      	ldr	r3, [r3, #12]
 8010944:	f003 0301 	and.w	r3, r3, #1
 8010948:	2b00      	cmp	r3, #0
 801094a:	d002      	beq.n	8010952 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801094c:	4b09      	ldr	r3, [pc, #36]	; (8010974 <FLASH_WaitForLastOperation+0x7c>)
 801094e:	2201      	movs	r2, #1
 8010950:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8010952:	4b08      	ldr	r3, [pc, #32]	; (8010974 <FLASH_WaitForLastOperation+0x7c>)
 8010954:	68db      	ldr	r3, [r3, #12]
 8010956:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 801095a:	2b00      	cmp	r3, #0
 801095c:	d003      	beq.n	8010966 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 801095e:	f000 f8a5 	bl	8010aac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8010962:	2301      	movs	r3, #1
 8010964:	e000      	b.n	8010968 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8010966:	2300      	movs	r3, #0
  
}  
 8010968:	4618      	mov	r0, r3
 801096a:	3710      	adds	r7, #16
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}
 8010970:	200074f4 	.word	0x200074f4
 8010974:	40023c00 	.word	0x40023c00

08010978 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8010978:	b480      	push	{r7}
 801097a:	b085      	sub	sp, #20
 801097c:	af00      	add	r7, sp, #0
 801097e:	60f8      	str	r0, [r7, #12]
 8010980:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010984:	4b14      	ldr	r3, [pc, #80]	; (80109d8 <FLASH_Program_DoubleWord+0x60>)
 8010986:	691b      	ldr	r3, [r3, #16]
 8010988:	4a13      	ldr	r2, [pc, #76]	; (80109d8 <FLASH_Program_DoubleWord+0x60>)
 801098a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801098e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8010990:	4b11      	ldr	r3, [pc, #68]	; (80109d8 <FLASH_Program_DoubleWord+0x60>)
 8010992:	691b      	ldr	r3, [r3, #16]
 8010994:	4a10      	ldr	r2, [pc, #64]	; (80109d8 <FLASH_Program_DoubleWord+0x60>)
 8010996:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801099a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801099c:	4b0e      	ldr	r3, [pc, #56]	; (80109d8 <FLASH_Program_DoubleWord+0x60>)
 801099e:	691b      	ldr	r3, [r3, #16]
 80109a0:	4a0d      	ldr	r2, [pc, #52]	; (80109d8 <FLASH_Program_DoubleWord+0x60>)
 80109a2:	f043 0301 	orr.w	r3, r3, #1
 80109a6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	683a      	ldr	r2, [r7, #0]
 80109ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80109ae:	f3bf 8f6f 	isb	sy
}
 80109b2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80109b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80109b8:	f04f 0200 	mov.w	r2, #0
 80109bc:	f04f 0300 	mov.w	r3, #0
 80109c0:	000a      	movs	r2, r1
 80109c2:	2300      	movs	r3, #0
 80109c4:	68f9      	ldr	r1, [r7, #12]
 80109c6:	3104      	adds	r1, #4
 80109c8:	4613      	mov	r3, r2
 80109ca:	600b      	str	r3, [r1, #0]
}
 80109cc:	bf00      	nop
 80109ce:	3714      	adds	r7, #20
 80109d0:	46bd      	mov	sp, r7
 80109d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d6:	4770      	bx	lr
 80109d8:	40023c00 	.word	0x40023c00

080109dc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80109dc:	b480      	push	{r7}
 80109de:	b083      	sub	sp, #12
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80109e6:	4b0d      	ldr	r3, [pc, #52]	; (8010a1c <FLASH_Program_Word+0x40>)
 80109e8:	691b      	ldr	r3, [r3, #16]
 80109ea:	4a0c      	ldr	r2, [pc, #48]	; (8010a1c <FLASH_Program_Word+0x40>)
 80109ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80109f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80109f2:	4b0a      	ldr	r3, [pc, #40]	; (8010a1c <FLASH_Program_Word+0x40>)
 80109f4:	691b      	ldr	r3, [r3, #16]
 80109f6:	4a09      	ldr	r2, [pc, #36]	; (8010a1c <FLASH_Program_Word+0x40>)
 80109f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80109fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80109fe:	4b07      	ldr	r3, [pc, #28]	; (8010a1c <FLASH_Program_Word+0x40>)
 8010a00:	691b      	ldr	r3, [r3, #16]
 8010a02:	4a06      	ldr	r2, [pc, #24]	; (8010a1c <FLASH_Program_Word+0x40>)
 8010a04:	f043 0301 	orr.w	r3, r3, #1
 8010a08:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	683a      	ldr	r2, [r7, #0]
 8010a0e:	601a      	str	r2, [r3, #0]
}
 8010a10:	bf00      	nop
 8010a12:	370c      	adds	r7, #12
 8010a14:	46bd      	mov	sp, r7
 8010a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1a:	4770      	bx	lr
 8010a1c:	40023c00 	.word	0x40023c00

08010a20 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8010a20:	b480      	push	{r7}
 8010a22:	b083      	sub	sp, #12
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	460b      	mov	r3, r1
 8010a2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010a2c:	4b0d      	ldr	r3, [pc, #52]	; (8010a64 <FLASH_Program_HalfWord+0x44>)
 8010a2e:	691b      	ldr	r3, [r3, #16]
 8010a30:	4a0c      	ldr	r2, [pc, #48]	; (8010a64 <FLASH_Program_HalfWord+0x44>)
 8010a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010a36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8010a38:	4b0a      	ldr	r3, [pc, #40]	; (8010a64 <FLASH_Program_HalfWord+0x44>)
 8010a3a:	691b      	ldr	r3, [r3, #16]
 8010a3c:	4a09      	ldr	r2, [pc, #36]	; (8010a64 <FLASH_Program_HalfWord+0x44>)
 8010a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010a42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8010a44:	4b07      	ldr	r3, [pc, #28]	; (8010a64 <FLASH_Program_HalfWord+0x44>)
 8010a46:	691b      	ldr	r3, [r3, #16]
 8010a48:	4a06      	ldr	r2, [pc, #24]	; (8010a64 <FLASH_Program_HalfWord+0x44>)
 8010a4a:	f043 0301 	orr.w	r3, r3, #1
 8010a4e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	887a      	ldrh	r2, [r7, #2]
 8010a54:	801a      	strh	r2, [r3, #0]
}
 8010a56:	bf00      	nop
 8010a58:	370c      	adds	r7, #12
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a60:	4770      	bx	lr
 8010a62:	bf00      	nop
 8010a64:	40023c00 	.word	0x40023c00

08010a68 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b083      	sub	sp, #12
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
 8010a70:	460b      	mov	r3, r1
 8010a72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010a74:	4b0c      	ldr	r3, [pc, #48]	; (8010aa8 <FLASH_Program_Byte+0x40>)
 8010a76:	691b      	ldr	r3, [r3, #16]
 8010a78:	4a0b      	ldr	r2, [pc, #44]	; (8010aa8 <FLASH_Program_Byte+0x40>)
 8010a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010a7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8010a80:	4b09      	ldr	r3, [pc, #36]	; (8010aa8 <FLASH_Program_Byte+0x40>)
 8010a82:	4a09      	ldr	r2, [pc, #36]	; (8010aa8 <FLASH_Program_Byte+0x40>)
 8010a84:	691b      	ldr	r3, [r3, #16]
 8010a86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8010a88:	4b07      	ldr	r3, [pc, #28]	; (8010aa8 <FLASH_Program_Byte+0x40>)
 8010a8a:	691b      	ldr	r3, [r3, #16]
 8010a8c:	4a06      	ldr	r2, [pc, #24]	; (8010aa8 <FLASH_Program_Byte+0x40>)
 8010a8e:	f043 0301 	orr.w	r3, r3, #1
 8010a92:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	78fa      	ldrb	r2, [r7, #3]
 8010a98:	701a      	strb	r2, [r3, #0]
}
 8010a9a:	bf00      	nop
 8010a9c:	370c      	adds	r7, #12
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa4:	4770      	bx	lr
 8010aa6:	bf00      	nop
 8010aa8:	40023c00 	.word	0x40023c00

08010aac <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8010aac:	b480      	push	{r7}
 8010aae:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8010ab0:	4b2f      	ldr	r3, [pc, #188]	; (8010b70 <FLASH_SetErrorCode+0xc4>)
 8010ab2:	68db      	ldr	r3, [r3, #12]
 8010ab4:	f003 0310 	and.w	r3, r3, #16
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d008      	beq.n	8010ace <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010abc:	4b2d      	ldr	r3, [pc, #180]	; (8010b74 <FLASH_SetErrorCode+0xc8>)
 8010abe:	69db      	ldr	r3, [r3, #28]
 8010ac0:	f043 0310 	orr.w	r3, r3, #16
 8010ac4:	4a2b      	ldr	r2, [pc, #172]	; (8010b74 <FLASH_SetErrorCode+0xc8>)
 8010ac6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8010ac8:	4b29      	ldr	r3, [pc, #164]	; (8010b70 <FLASH_SetErrorCode+0xc4>)
 8010aca:	2210      	movs	r2, #16
 8010acc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8010ace:	4b28      	ldr	r3, [pc, #160]	; (8010b70 <FLASH_SetErrorCode+0xc4>)
 8010ad0:	68db      	ldr	r3, [r3, #12]
 8010ad2:	f003 0320 	and.w	r3, r3, #32
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d008      	beq.n	8010aec <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8010ada:	4b26      	ldr	r3, [pc, #152]	; (8010b74 <FLASH_SetErrorCode+0xc8>)
 8010adc:	69db      	ldr	r3, [r3, #28]
 8010ade:	f043 0308 	orr.w	r3, r3, #8
 8010ae2:	4a24      	ldr	r2, [pc, #144]	; (8010b74 <FLASH_SetErrorCode+0xc8>)
 8010ae4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8010ae6:	4b22      	ldr	r3, [pc, #136]	; (8010b70 <FLASH_SetErrorCode+0xc4>)
 8010ae8:	2220      	movs	r2, #32
 8010aea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8010aec:	4b20      	ldr	r3, [pc, #128]	; (8010b70 <FLASH_SetErrorCode+0xc4>)
 8010aee:	68db      	ldr	r3, [r3, #12]
 8010af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d008      	beq.n	8010b0a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8010af8:	4b1e      	ldr	r3, [pc, #120]	; (8010b74 <FLASH_SetErrorCode+0xc8>)
 8010afa:	69db      	ldr	r3, [r3, #28]
 8010afc:	f043 0304 	orr.w	r3, r3, #4
 8010b00:	4a1c      	ldr	r2, [pc, #112]	; (8010b74 <FLASH_SetErrorCode+0xc8>)
 8010b02:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8010b04:	4b1a      	ldr	r3, [pc, #104]	; (8010b70 <FLASH_SetErrorCode+0xc4>)
 8010b06:	2240      	movs	r2, #64	; 0x40
 8010b08:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8010b0a:	4b19      	ldr	r3, [pc, #100]	; (8010b70 <FLASH_SetErrorCode+0xc4>)
 8010b0c:	68db      	ldr	r3, [r3, #12]
 8010b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d008      	beq.n	8010b28 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8010b16:	4b17      	ldr	r3, [pc, #92]	; (8010b74 <FLASH_SetErrorCode+0xc8>)
 8010b18:	69db      	ldr	r3, [r3, #28]
 8010b1a:	f043 0302 	orr.w	r3, r3, #2
 8010b1e:	4a15      	ldr	r2, [pc, #84]	; (8010b74 <FLASH_SetErrorCode+0xc8>)
 8010b20:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8010b22:	4b13      	ldr	r3, [pc, #76]	; (8010b70 <FLASH_SetErrorCode+0xc4>)
 8010b24:	2280      	movs	r2, #128	; 0x80
 8010b26:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8010b28:	4b11      	ldr	r3, [pc, #68]	; (8010b70 <FLASH_SetErrorCode+0xc4>)
 8010b2a:	68db      	ldr	r3, [r3, #12]
 8010b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d009      	beq.n	8010b48 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8010b34:	4b0f      	ldr	r3, [pc, #60]	; (8010b74 <FLASH_SetErrorCode+0xc8>)
 8010b36:	69db      	ldr	r3, [r3, #28]
 8010b38:	f043 0301 	orr.w	r3, r3, #1
 8010b3c:	4a0d      	ldr	r2, [pc, #52]	; (8010b74 <FLASH_SetErrorCode+0xc8>)
 8010b3e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8010b40:	4b0b      	ldr	r3, [pc, #44]	; (8010b70 <FLASH_SetErrorCode+0xc4>)
 8010b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010b46:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8010b48:	4b09      	ldr	r3, [pc, #36]	; (8010b70 <FLASH_SetErrorCode+0xc4>)
 8010b4a:	68db      	ldr	r3, [r3, #12]
 8010b4c:	f003 0302 	and.w	r3, r3, #2
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d008      	beq.n	8010b66 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8010b54:	4b07      	ldr	r3, [pc, #28]	; (8010b74 <FLASH_SetErrorCode+0xc8>)
 8010b56:	69db      	ldr	r3, [r3, #28]
 8010b58:	f043 0320 	orr.w	r3, r3, #32
 8010b5c:	4a05      	ldr	r2, [pc, #20]	; (8010b74 <FLASH_SetErrorCode+0xc8>)
 8010b5e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8010b60:	4b03      	ldr	r3, [pc, #12]	; (8010b70 <FLASH_SetErrorCode+0xc4>)
 8010b62:	2202      	movs	r2, #2
 8010b64:	60da      	str	r2, [r3, #12]
  }
}
 8010b66:	bf00      	nop
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6e:	4770      	bx	lr
 8010b70:	40023c00 	.word	0x40023c00
 8010b74:	200074f4 	.word	0x200074f4

08010b78 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010b82:	2301      	movs	r3, #1
 8010b84:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8010b86:	2300      	movs	r3, #0
 8010b88:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010b8a:	4b31      	ldr	r3, [pc, #196]	; (8010c50 <HAL_FLASHEx_Erase+0xd8>)
 8010b8c:	7e1b      	ldrb	r3, [r3, #24]
 8010b8e:	2b01      	cmp	r3, #1
 8010b90:	d101      	bne.n	8010b96 <HAL_FLASHEx_Erase+0x1e>
 8010b92:	2302      	movs	r3, #2
 8010b94:	e058      	b.n	8010c48 <HAL_FLASHEx_Erase+0xd0>
 8010b96:	4b2e      	ldr	r3, [pc, #184]	; (8010c50 <HAL_FLASHEx_Erase+0xd8>)
 8010b98:	2201      	movs	r2, #1
 8010b9a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010b9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010ba0:	f7ff feaa 	bl	80108f8 <FLASH_WaitForLastOperation>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8010ba8:	7bfb      	ldrb	r3, [r7, #15]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d148      	bne.n	8010c40 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8010bb4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	2b01      	cmp	r3, #1
 8010bbc:	d115      	bne.n	8010bea <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	691b      	ldr	r3, [r3, #16]
 8010bc2:	b2da      	uxtb	r2, r3
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	685b      	ldr	r3, [r3, #4]
 8010bc8:	4619      	mov	r1, r3
 8010bca:	4610      	mov	r0, r2
 8010bcc:	f000 f844 	bl	8010c58 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010bd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010bd4:	f7ff fe90 	bl	80108f8 <FLASH_WaitForLastOperation>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8010bdc:	4b1d      	ldr	r3, [pc, #116]	; (8010c54 <HAL_FLASHEx_Erase+0xdc>)
 8010bde:	691b      	ldr	r3, [r3, #16]
 8010be0:	4a1c      	ldr	r2, [pc, #112]	; (8010c54 <HAL_FLASHEx_Erase+0xdc>)
 8010be2:	f023 0304 	bic.w	r3, r3, #4
 8010be6:	6113      	str	r3, [r2, #16]
 8010be8:	e028      	b.n	8010c3c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	689b      	ldr	r3, [r3, #8]
 8010bee:	60bb      	str	r3, [r7, #8]
 8010bf0:	e01c      	b.n	8010c2c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	691b      	ldr	r3, [r3, #16]
 8010bf6:	b2db      	uxtb	r3, r3
 8010bf8:	4619      	mov	r1, r3
 8010bfa:	68b8      	ldr	r0, [r7, #8]
 8010bfc:	f000 f850 	bl	8010ca0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010c00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010c04:	f7ff fe78 	bl	80108f8 <FLASH_WaitForLastOperation>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8010c0c:	4b11      	ldr	r3, [pc, #68]	; (8010c54 <HAL_FLASHEx_Erase+0xdc>)
 8010c0e:	691b      	ldr	r3, [r3, #16]
 8010c10:	4a10      	ldr	r2, [pc, #64]	; (8010c54 <HAL_FLASHEx_Erase+0xdc>)
 8010c12:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8010c16:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8010c18:	7bfb      	ldrb	r3, [r7, #15]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d003      	beq.n	8010c26 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	68ba      	ldr	r2, [r7, #8]
 8010c22:	601a      	str	r2, [r3, #0]
          break;
 8010c24:	e00a      	b.n	8010c3c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	3301      	adds	r3, #1
 8010c2a:	60bb      	str	r3, [r7, #8]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	68da      	ldr	r2, [r3, #12]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	689b      	ldr	r3, [r3, #8]
 8010c34:	4413      	add	r3, r2
 8010c36:	68ba      	ldr	r2, [r7, #8]
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	d3da      	bcc.n	8010bf2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8010c3c:	f000 f878 	bl	8010d30 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8010c40:	4b03      	ldr	r3, [pc, #12]	; (8010c50 <HAL_FLASHEx_Erase+0xd8>)
 8010c42:	2200      	movs	r2, #0
 8010c44:	761a      	strb	r2, [r3, #24]

  return status;
 8010c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3710      	adds	r7, #16
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}
 8010c50:	200074f4 	.word	0x200074f4
 8010c54:	40023c00 	.word	0x40023c00

08010c58 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8010c58:	b480      	push	{r7}
 8010c5a:	b083      	sub	sp, #12
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	4603      	mov	r3, r0
 8010c60:	6039      	str	r1, [r7, #0]
 8010c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010c64:	4b0d      	ldr	r3, [pc, #52]	; (8010c9c <FLASH_MassErase+0x44>)
 8010c66:	691b      	ldr	r3, [r3, #16]
 8010c68:	4a0c      	ldr	r2, [pc, #48]	; (8010c9c <FLASH_MassErase+0x44>)
 8010c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010c6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8010c70:	4b0a      	ldr	r3, [pc, #40]	; (8010c9c <FLASH_MassErase+0x44>)
 8010c72:	691b      	ldr	r3, [r3, #16]
 8010c74:	4a09      	ldr	r2, [pc, #36]	; (8010c9c <FLASH_MassErase+0x44>)
 8010c76:	f043 0304 	orr.w	r3, r3, #4
 8010c7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8010c7c:	4b07      	ldr	r3, [pc, #28]	; (8010c9c <FLASH_MassErase+0x44>)
 8010c7e:	691a      	ldr	r2, [r3, #16]
 8010c80:	79fb      	ldrb	r3, [r7, #7]
 8010c82:	021b      	lsls	r3, r3, #8
 8010c84:	4313      	orrs	r3, r2
 8010c86:	4a05      	ldr	r2, [pc, #20]	; (8010c9c <FLASH_MassErase+0x44>)
 8010c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010c8c:	6113      	str	r3, [r2, #16]
}
 8010c8e:	bf00      	nop
 8010c90:	370c      	adds	r7, #12
 8010c92:	46bd      	mov	sp, r7
 8010c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c98:	4770      	bx	lr
 8010c9a:	bf00      	nop
 8010c9c:	40023c00 	.word	0x40023c00

08010ca0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8010ca0:	b480      	push	{r7}
 8010ca2:	b085      	sub	sp, #20
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	460b      	mov	r3, r1
 8010caa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8010cac:	2300      	movs	r3, #0
 8010cae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8010cb0:	78fb      	ldrb	r3, [r7, #3]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d102      	bne.n	8010cbc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	60fb      	str	r3, [r7, #12]
 8010cba:	e010      	b.n	8010cde <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8010cbc:	78fb      	ldrb	r3, [r7, #3]
 8010cbe:	2b01      	cmp	r3, #1
 8010cc0:	d103      	bne.n	8010cca <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8010cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010cc6:	60fb      	str	r3, [r7, #12]
 8010cc8:	e009      	b.n	8010cde <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8010cca:	78fb      	ldrb	r3, [r7, #3]
 8010ccc:	2b02      	cmp	r3, #2
 8010cce:	d103      	bne.n	8010cd8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8010cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010cd4:	60fb      	str	r3, [r7, #12]
 8010cd6:	e002      	b.n	8010cde <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8010cd8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010cdc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010cde:	4b13      	ldr	r3, [pc, #76]	; (8010d2c <FLASH_Erase_Sector+0x8c>)
 8010ce0:	691b      	ldr	r3, [r3, #16]
 8010ce2:	4a12      	ldr	r2, [pc, #72]	; (8010d2c <FLASH_Erase_Sector+0x8c>)
 8010ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010ce8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8010cea:	4b10      	ldr	r3, [pc, #64]	; (8010d2c <FLASH_Erase_Sector+0x8c>)
 8010cec:	691a      	ldr	r2, [r3, #16]
 8010cee:	490f      	ldr	r1, [pc, #60]	; (8010d2c <FLASH_Erase_Sector+0x8c>)
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	4313      	orrs	r3, r2
 8010cf4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8010cf6:	4b0d      	ldr	r3, [pc, #52]	; (8010d2c <FLASH_Erase_Sector+0x8c>)
 8010cf8:	691b      	ldr	r3, [r3, #16]
 8010cfa:	4a0c      	ldr	r2, [pc, #48]	; (8010d2c <FLASH_Erase_Sector+0x8c>)
 8010cfc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8010d00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8010d02:	4b0a      	ldr	r3, [pc, #40]	; (8010d2c <FLASH_Erase_Sector+0x8c>)
 8010d04:	691a      	ldr	r2, [r3, #16]
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	00db      	lsls	r3, r3, #3
 8010d0a:	4313      	orrs	r3, r2
 8010d0c:	4a07      	ldr	r2, [pc, #28]	; (8010d2c <FLASH_Erase_Sector+0x8c>)
 8010d0e:	f043 0302 	orr.w	r3, r3, #2
 8010d12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8010d14:	4b05      	ldr	r3, [pc, #20]	; (8010d2c <FLASH_Erase_Sector+0x8c>)
 8010d16:	691b      	ldr	r3, [r3, #16]
 8010d18:	4a04      	ldr	r2, [pc, #16]	; (8010d2c <FLASH_Erase_Sector+0x8c>)
 8010d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010d1e:	6113      	str	r3, [r2, #16]
}
 8010d20:	bf00      	nop
 8010d22:	3714      	adds	r7, #20
 8010d24:	46bd      	mov	sp, r7
 8010d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2a:	4770      	bx	lr
 8010d2c:	40023c00 	.word	0x40023c00

08010d30 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8010d30:	b480      	push	{r7}
 8010d32:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8010d34:	4b20      	ldr	r3, [pc, #128]	; (8010db8 <FLASH_FlushCaches+0x88>)
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d017      	beq.n	8010d70 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8010d40:	4b1d      	ldr	r3, [pc, #116]	; (8010db8 <FLASH_FlushCaches+0x88>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	4a1c      	ldr	r2, [pc, #112]	; (8010db8 <FLASH_FlushCaches+0x88>)
 8010d46:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010d4a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8010d4c:	4b1a      	ldr	r3, [pc, #104]	; (8010db8 <FLASH_FlushCaches+0x88>)
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	4a19      	ldr	r2, [pc, #100]	; (8010db8 <FLASH_FlushCaches+0x88>)
 8010d52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010d56:	6013      	str	r3, [r2, #0]
 8010d58:	4b17      	ldr	r3, [pc, #92]	; (8010db8 <FLASH_FlushCaches+0x88>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	4a16      	ldr	r2, [pc, #88]	; (8010db8 <FLASH_FlushCaches+0x88>)
 8010d5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010d62:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010d64:	4b14      	ldr	r3, [pc, #80]	; (8010db8 <FLASH_FlushCaches+0x88>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	4a13      	ldr	r2, [pc, #76]	; (8010db8 <FLASH_FlushCaches+0x88>)
 8010d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010d6e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8010d70:	4b11      	ldr	r3, [pc, #68]	; (8010db8 <FLASH_FlushCaches+0x88>)
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d017      	beq.n	8010dac <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8010d7c:	4b0e      	ldr	r3, [pc, #56]	; (8010db8 <FLASH_FlushCaches+0x88>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	4a0d      	ldr	r2, [pc, #52]	; (8010db8 <FLASH_FlushCaches+0x88>)
 8010d82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010d86:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8010d88:	4b0b      	ldr	r3, [pc, #44]	; (8010db8 <FLASH_FlushCaches+0x88>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	4a0a      	ldr	r2, [pc, #40]	; (8010db8 <FLASH_FlushCaches+0x88>)
 8010d8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010d92:	6013      	str	r3, [r2, #0]
 8010d94:	4b08      	ldr	r3, [pc, #32]	; (8010db8 <FLASH_FlushCaches+0x88>)
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	4a07      	ldr	r2, [pc, #28]	; (8010db8 <FLASH_FlushCaches+0x88>)
 8010d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010d9e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8010da0:	4b05      	ldr	r3, [pc, #20]	; (8010db8 <FLASH_FlushCaches+0x88>)
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	4a04      	ldr	r2, [pc, #16]	; (8010db8 <FLASH_FlushCaches+0x88>)
 8010da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010daa:	6013      	str	r3, [r2, #0]
  }
}
 8010dac:	bf00      	nop
 8010dae:	46bd      	mov	sp, r7
 8010db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db4:	4770      	bx	lr
 8010db6:	bf00      	nop
 8010db8:	40023c00 	.word	0x40023c00

08010dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	b089      	sub	sp, #36	; 0x24
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	61fb      	str	r3, [r7, #28]
 8010dd6:	e159      	b.n	801108c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8010dd8:	2201      	movs	r2, #1
 8010dda:	69fb      	ldr	r3, [r7, #28]
 8010ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8010de0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	697a      	ldr	r2, [r7, #20]
 8010de8:	4013      	ands	r3, r2
 8010dea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010dec:	693a      	ldr	r2, [r7, #16]
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	429a      	cmp	r2, r3
 8010df2:	f040 8148 	bne.w	8011086 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010df6:	683b      	ldr	r3, [r7, #0]
 8010df8:	685b      	ldr	r3, [r3, #4]
 8010dfa:	f003 0303 	and.w	r3, r3, #3
 8010dfe:	2b01      	cmp	r3, #1
 8010e00:	d005      	beq.n	8010e0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	685b      	ldr	r3, [r3, #4]
 8010e06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010e0a:	2b02      	cmp	r3, #2
 8010e0c:	d130      	bne.n	8010e70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	689b      	ldr	r3, [r3, #8]
 8010e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010e14:	69fb      	ldr	r3, [r7, #28]
 8010e16:	005b      	lsls	r3, r3, #1
 8010e18:	2203      	movs	r2, #3
 8010e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8010e1e:	43db      	mvns	r3, r3
 8010e20:	69ba      	ldr	r2, [r7, #24]
 8010e22:	4013      	ands	r3, r2
 8010e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	68da      	ldr	r2, [r3, #12]
 8010e2a:	69fb      	ldr	r3, [r7, #28]
 8010e2c:	005b      	lsls	r3, r3, #1
 8010e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8010e32:	69ba      	ldr	r2, [r7, #24]
 8010e34:	4313      	orrs	r3, r2
 8010e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	69ba      	ldr	r2, [r7, #24]
 8010e3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	685b      	ldr	r3, [r3, #4]
 8010e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010e44:	2201      	movs	r2, #1
 8010e46:	69fb      	ldr	r3, [r7, #28]
 8010e48:	fa02 f303 	lsl.w	r3, r2, r3
 8010e4c:	43db      	mvns	r3, r3
 8010e4e:	69ba      	ldr	r2, [r7, #24]
 8010e50:	4013      	ands	r3, r2
 8010e52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	685b      	ldr	r3, [r3, #4]
 8010e58:	091b      	lsrs	r3, r3, #4
 8010e5a:	f003 0201 	and.w	r2, r3, #1
 8010e5e:	69fb      	ldr	r3, [r7, #28]
 8010e60:	fa02 f303 	lsl.w	r3, r2, r3
 8010e64:	69ba      	ldr	r2, [r7, #24]
 8010e66:	4313      	orrs	r3, r2
 8010e68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	69ba      	ldr	r2, [r7, #24]
 8010e6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	685b      	ldr	r3, [r3, #4]
 8010e74:	f003 0303 	and.w	r3, r3, #3
 8010e78:	2b03      	cmp	r3, #3
 8010e7a:	d017      	beq.n	8010eac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8010e82:	69fb      	ldr	r3, [r7, #28]
 8010e84:	005b      	lsls	r3, r3, #1
 8010e86:	2203      	movs	r2, #3
 8010e88:	fa02 f303 	lsl.w	r3, r2, r3
 8010e8c:	43db      	mvns	r3, r3
 8010e8e:	69ba      	ldr	r2, [r7, #24]
 8010e90:	4013      	ands	r3, r2
 8010e92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	689a      	ldr	r2, [r3, #8]
 8010e98:	69fb      	ldr	r3, [r7, #28]
 8010e9a:	005b      	lsls	r3, r3, #1
 8010e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8010ea0:	69ba      	ldr	r2, [r7, #24]
 8010ea2:	4313      	orrs	r3, r2
 8010ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	69ba      	ldr	r2, [r7, #24]
 8010eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	685b      	ldr	r3, [r3, #4]
 8010eb0:	f003 0303 	and.w	r3, r3, #3
 8010eb4:	2b02      	cmp	r3, #2
 8010eb6:	d123      	bne.n	8010f00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010eb8:	69fb      	ldr	r3, [r7, #28]
 8010eba:	08da      	lsrs	r2, r3, #3
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	3208      	adds	r2, #8
 8010ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010ec6:	69fb      	ldr	r3, [r7, #28]
 8010ec8:	f003 0307 	and.w	r3, r3, #7
 8010ecc:	009b      	lsls	r3, r3, #2
 8010ece:	220f      	movs	r2, #15
 8010ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8010ed4:	43db      	mvns	r3, r3
 8010ed6:	69ba      	ldr	r2, [r7, #24]
 8010ed8:	4013      	ands	r3, r2
 8010eda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	691a      	ldr	r2, [r3, #16]
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	f003 0307 	and.w	r3, r3, #7
 8010ee6:	009b      	lsls	r3, r3, #2
 8010ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8010eec:	69ba      	ldr	r2, [r7, #24]
 8010eee:	4313      	orrs	r3, r2
 8010ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8010ef2:	69fb      	ldr	r3, [r7, #28]
 8010ef4:	08da      	lsrs	r2, r3, #3
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	3208      	adds	r2, #8
 8010efa:	69b9      	ldr	r1, [r7, #24]
 8010efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010f06:	69fb      	ldr	r3, [r7, #28]
 8010f08:	005b      	lsls	r3, r3, #1
 8010f0a:	2203      	movs	r2, #3
 8010f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8010f10:	43db      	mvns	r3, r3
 8010f12:	69ba      	ldr	r2, [r7, #24]
 8010f14:	4013      	ands	r3, r2
 8010f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	685b      	ldr	r3, [r3, #4]
 8010f1c:	f003 0203 	and.w	r2, r3, #3
 8010f20:	69fb      	ldr	r3, [r7, #28]
 8010f22:	005b      	lsls	r3, r3, #1
 8010f24:	fa02 f303 	lsl.w	r3, r2, r3
 8010f28:	69ba      	ldr	r2, [r7, #24]
 8010f2a:	4313      	orrs	r3, r2
 8010f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	69ba      	ldr	r2, [r7, #24]
 8010f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	685b      	ldr	r3, [r3, #4]
 8010f38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	f000 80a2 	beq.w	8011086 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010f42:	2300      	movs	r3, #0
 8010f44:	60fb      	str	r3, [r7, #12]
 8010f46:	4b57      	ldr	r3, [pc, #348]	; (80110a4 <HAL_GPIO_Init+0x2e8>)
 8010f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f4a:	4a56      	ldr	r2, [pc, #344]	; (80110a4 <HAL_GPIO_Init+0x2e8>)
 8010f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010f50:	6453      	str	r3, [r2, #68]	; 0x44
 8010f52:	4b54      	ldr	r3, [pc, #336]	; (80110a4 <HAL_GPIO_Init+0x2e8>)
 8010f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f5a:	60fb      	str	r3, [r7, #12]
 8010f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8010f5e:	4a52      	ldr	r2, [pc, #328]	; (80110a8 <HAL_GPIO_Init+0x2ec>)
 8010f60:	69fb      	ldr	r3, [r7, #28]
 8010f62:	089b      	lsrs	r3, r3, #2
 8010f64:	3302      	adds	r3, #2
 8010f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010f6c:	69fb      	ldr	r3, [r7, #28]
 8010f6e:	f003 0303 	and.w	r3, r3, #3
 8010f72:	009b      	lsls	r3, r3, #2
 8010f74:	220f      	movs	r2, #15
 8010f76:	fa02 f303 	lsl.w	r3, r2, r3
 8010f7a:	43db      	mvns	r3, r3
 8010f7c:	69ba      	ldr	r2, [r7, #24]
 8010f7e:	4013      	ands	r3, r2
 8010f80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	4a49      	ldr	r2, [pc, #292]	; (80110ac <HAL_GPIO_Init+0x2f0>)
 8010f86:	4293      	cmp	r3, r2
 8010f88:	d019      	beq.n	8010fbe <HAL_GPIO_Init+0x202>
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	4a48      	ldr	r2, [pc, #288]	; (80110b0 <HAL_GPIO_Init+0x2f4>)
 8010f8e:	4293      	cmp	r3, r2
 8010f90:	d013      	beq.n	8010fba <HAL_GPIO_Init+0x1fe>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	4a47      	ldr	r2, [pc, #284]	; (80110b4 <HAL_GPIO_Init+0x2f8>)
 8010f96:	4293      	cmp	r3, r2
 8010f98:	d00d      	beq.n	8010fb6 <HAL_GPIO_Init+0x1fa>
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	4a46      	ldr	r2, [pc, #280]	; (80110b8 <HAL_GPIO_Init+0x2fc>)
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	d007      	beq.n	8010fb2 <HAL_GPIO_Init+0x1f6>
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	4a45      	ldr	r2, [pc, #276]	; (80110bc <HAL_GPIO_Init+0x300>)
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	d101      	bne.n	8010fae <HAL_GPIO_Init+0x1f2>
 8010faa:	2304      	movs	r3, #4
 8010fac:	e008      	b.n	8010fc0 <HAL_GPIO_Init+0x204>
 8010fae:	2307      	movs	r3, #7
 8010fb0:	e006      	b.n	8010fc0 <HAL_GPIO_Init+0x204>
 8010fb2:	2303      	movs	r3, #3
 8010fb4:	e004      	b.n	8010fc0 <HAL_GPIO_Init+0x204>
 8010fb6:	2302      	movs	r3, #2
 8010fb8:	e002      	b.n	8010fc0 <HAL_GPIO_Init+0x204>
 8010fba:	2301      	movs	r3, #1
 8010fbc:	e000      	b.n	8010fc0 <HAL_GPIO_Init+0x204>
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	69fa      	ldr	r2, [r7, #28]
 8010fc2:	f002 0203 	and.w	r2, r2, #3
 8010fc6:	0092      	lsls	r2, r2, #2
 8010fc8:	4093      	lsls	r3, r2
 8010fca:	69ba      	ldr	r2, [r7, #24]
 8010fcc:	4313      	orrs	r3, r2
 8010fce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010fd0:	4935      	ldr	r1, [pc, #212]	; (80110a8 <HAL_GPIO_Init+0x2ec>)
 8010fd2:	69fb      	ldr	r3, [r7, #28]
 8010fd4:	089b      	lsrs	r3, r3, #2
 8010fd6:	3302      	adds	r3, #2
 8010fd8:	69ba      	ldr	r2, [r7, #24]
 8010fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010fde:	4b38      	ldr	r3, [pc, #224]	; (80110c0 <HAL_GPIO_Init+0x304>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	43db      	mvns	r3, r3
 8010fe8:	69ba      	ldr	r2, [r7, #24]
 8010fea:	4013      	ands	r3, r2
 8010fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	685b      	ldr	r3, [r3, #4]
 8010ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d003      	beq.n	8011002 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8010ffa:	69ba      	ldr	r2, [r7, #24]
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	4313      	orrs	r3, r2
 8011000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8011002:	4a2f      	ldr	r2, [pc, #188]	; (80110c0 <HAL_GPIO_Init+0x304>)
 8011004:	69bb      	ldr	r3, [r7, #24]
 8011006:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8011008:	4b2d      	ldr	r3, [pc, #180]	; (80110c0 <HAL_GPIO_Init+0x304>)
 801100a:	685b      	ldr	r3, [r3, #4]
 801100c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801100e:	693b      	ldr	r3, [r7, #16]
 8011010:	43db      	mvns	r3, r3
 8011012:	69ba      	ldr	r2, [r7, #24]
 8011014:	4013      	ands	r3, r2
 8011016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	685b      	ldr	r3, [r3, #4]
 801101c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011020:	2b00      	cmp	r3, #0
 8011022:	d003      	beq.n	801102c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8011024:	69ba      	ldr	r2, [r7, #24]
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	4313      	orrs	r3, r2
 801102a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801102c:	4a24      	ldr	r2, [pc, #144]	; (80110c0 <HAL_GPIO_Init+0x304>)
 801102e:	69bb      	ldr	r3, [r7, #24]
 8011030:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011032:	4b23      	ldr	r3, [pc, #140]	; (80110c0 <HAL_GPIO_Init+0x304>)
 8011034:	689b      	ldr	r3, [r3, #8]
 8011036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011038:	693b      	ldr	r3, [r7, #16]
 801103a:	43db      	mvns	r3, r3
 801103c:	69ba      	ldr	r2, [r7, #24]
 801103e:	4013      	ands	r3, r2
 8011040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	685b      	ldr	r3, [r3, #4]
 8011046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801104a:	2b00      	cmp	r3, #0
 801104c:	d003      	beq.n	8011056 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801104e:	69ba      	ldr	r2, [r7, #24]
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	4313      	orrs	r3, r2
 8011054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8011056:	4a1a      	ldr	r2, [pc, #104]	; (80110c0 <HAL_GPIO_Init+0x304>)
 8011058:	69bb      	ldr	r3, [r7, #24]
 801105a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801105c:	4b18      	ldr	r3, [pc, #96]	; (80110c0 <HAL_GPIO_Init+0x304>)
 801105e:	68db      	ldr	r3, [r3, #12]
 8011060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011062:	693b      	ldr	r3, [r7, #16]
 8011064:	43db      	mvns	r3, r3
 8011066:	69ba      	ldr	r2, [r7, #24]
 8011068:	4013      	ands	r3, r2
 801106a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	685b      	ldr	r3, [r3, #4]
 8011070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011074:	2b00      	cmp	r3, #0
 8011076:	d003      	beq.n	8011080 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8011078:	69ba      	ldr	r2, [r7, #24]
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	4313      	orrs	r3, r2
 801107e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011080:	4a0f      	ldr	r2, [pc, #60]	; (80110c0 <HAL_GPIO_Init+0x304>)
 8011082:	69bb      	ldr	r3, [r7, #24]
 8011084:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011086:	69fb      	ldr	r3, [r7, #28]
 8011088:	3301      	adds	r3, #1
 801108a:	61fb      	str	r3, [r7, #28]
 801108c:	69fb      	ldr	r3, [r7, #28]
 801108e:	2b0f      	cmp	r3, #15
 8011090:	f67f aea2 	bls.w	8010dd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011094:	bf00      	nop
 8011096:	bf00      	nop
 8011098:	3724      	adds	r7, #36	; 0x24
 801109a:	46bd      	mov	sp, r7
 801109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a0:	4770      	bx	lr
 80110a2:	bf00      	nop
 80110a4:	40023800 	.word	0x40023800
 80110a8:	40013800 	.word	0x40013800
 80110ac:	40020000 	.word	0x40020000
 80110b0:	40020400 	.word	0x40020400
 80110b4:	40020800 	.word	0x40020800
 80110b8:	40020c00 	.word	0x40020c00
 80110bc:	40021000 	.word	0x40021000
 80110c0:	40013c00 	.word	0x40013c00

080110c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80110c4:	b480      	push	{r7}
 80110c6:	b085      	sub	sp, #20
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	460b      	mov	r3, r1
 80110ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	691a      	ldr	r2, [r3, #16]
 80110d4:	887b      	ldrh	r3, [r7, #2]
 80110d6:	4013      	ands	r3, r2
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d002      	beq.n	80110e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80110dc:	2301      	movs	r3, #1
 80110de:	73fb      	strb	r3, [r7, #15]
 80110e0:	e001      	b.n	80110e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80110e2:	2300      	movs	r3, #0
 80110e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80110e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3714      	adds	r7, #20
 80110ec:	46bd      	mov	sp, r7
 80110ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f2:	4770      	bx	lr

080110f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80110f4:	b480      	push	{r7}
 80110f6:	b083      	sub	sp, #12
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	460b      	mov	r3, r1
 80110fe:	807b      	strh	r3, [r7, #2]
 8011100:	4613      	mov	r3, r2
 8011102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011104:	787b      	ldrb	r3, [r7, #1]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d003      	beq.n	8011112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801110a:	887a      	ldrh	r2, [r7, #2]
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8011110:	e003      	b.n	801111a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8011112:	887b      	ldrh	r3, [r7, #2]
 8011114:	041a      	lsls	r2, r3, #16
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	619a      	str	r2, [r3, #24]
}
 801111a:	bf00      	nop
 801111c:	370c      	adds	r7, #12
 801111e:	46bd      	mov	sp, r7
 8011120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011124:	4770      	bx	lr
	...

08011128 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b082      	sub	sp, #8
 801112c:	af00      	add	r7, sp, #0
 801112e:	4603      	mov	r3, r0
 8011130:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8011132:	4b08      	ldr	r3, [pc, #32]	; (8011154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011134:	695a      	ldr	r2, [r3, #20]
 8011136:	88fb      	ldrh	r3, [r7, #6]
 8011138:	4013      	ands	r3, r2
 801113a:	2b00      	cmp	r3, #0
 801113c:	d006      	beq.n	801114c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801113e:	4a05      	ldr	r2, [pc, #20]	; (8011154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011140:	88fb      	ldrh	r3, [r7, #6]
 8011142:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8011144:	88fb      	ldrh	r3, [r7, #6]
 8011146:	4618      	mov	r0, r3
 8011148:	f7fd f85e 	bl	800e208 <HAL_GPIO_EXTI_Callback>
  }
}
 801114c:	bf00      	nop
 801114e:	3708      	adds	r7, #8
 8011150:	46bd      	mov	sp, r7
 8011152:	bd80      	pop	{r7, pc}
 8011154:	40013c00 	.word	0x40013c00

08011158 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8011158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801115a:	b08f      	sub	sp, #60	; 0x3c
 801115c:	af0a      	add	r7, sp, #40	; 0x28
 801115e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d101      	bne.n	801116a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8011166:	2301      	movs	r3, #1
 8011168:	e10f      	b.n	801138a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8011176:	b2db      	uxtb	r3, r3
 8011178:	2b00      	cmp	r3, #0
 801117a:	d106      	bne.n	801118a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2200      	movs	r2, #0
 8011180:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8011184:	6878      	ldr	r0, [r7, #4]
 8011186:	f00a f8d5 	bl	801b334 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2203      	movs	r2, #3
 801118e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801119a:	2b00      	cmp	r3, #0
 801119c:	d102      	bne.n	80111a4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2200      	movs	r2, #0
 80111a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	4618      	mov	r0, r3
 80111aa:	f003 fc8a 	bl	8014ac2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	603b      	str	r3, [r7, #0]
 80111b4:	687e      	ldr	r6, [r7, #4]
 80111b6:	466d      	mov	r5, sp
 80111b8:	f106 0410 	add.w	r4, r6, #16
 80111bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80111be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80111c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80111c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80111c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80111c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80111cc:	1d33      	adds	r3, r6, #4
 80111ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80111d0:	6838      	ldr	r0, [r7, #0]
 80111d2:	f003 fb61 	bl	8014898 <USB_CoreInit>
 80111d6:	4603      	mov	r3, r0
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d005      	beq.n	80111e8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2202      	movs	r2, #2
 80111e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80111e4:	2301      	movs	r3, #1
 80111e6:	e0d0      	b.n	801138a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	2100      	movs	r1, #0
 80111ee:	4618      	mov	r0, r3
 80111f0:	f003 fc78 	bl	8014ae4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80111f4:	2300      	movs	r3, #0
 80111f6:	73fb      	strb	r3, [r7, #15]
 80111f8:	e04a      	b.n	8011290 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80111fa:	7bfa      	ldrb	r2, [r7, #15]
 80111fc:	6879      	ldr	r1, [r7, #4]
 80111fe:	4613      	mov	r3, r2
 8011200:	00db      	lsls	r3, r3, #3
 8011202:	1a9b      	subs	r3, r3, r2
 8011204:	009b      	lsls	r3, r3, #2
 8011206:	440b      	add	r3, r1
 8011208:	333d      	adds	r3, #61	; 0x3d
 801120a:	2201      	movs	r2, #1
 801120c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801120e:	7bfa      	ldrb	r2, [r7, #15]
 8011210:	6879      	ldr	r1, [r7, #4]
 8011212:	4613      	mov	r3, r2
 8011214:	00db      	lsls	r3, r3, #3
 8011216:	1a9b      	subs	r3, r3, r2
 8011218:	009b      	lsls	r3, r3, #2
 801121a:	440b      	add	r3, r1
 801121c:	333c      	adds	r3, #60	; 0x3c
 801121e:	7bfa      	ldrb	r2, [r7, #15]
 8011220:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8011222:	7bfa      	ldrb	r2, [r7, #15]
 8011224:	7bfb      	ldrb	r3, [r7, #15]
 8011226:	b298      	uxth	r0, r3
 8011228:	6879      	ldr	r1, [r7, #4]
 801122a:	4613      	mov	r3, r2
 801122c:	00db      	lsls	r3, r3, #3
 801122e:	1a9b      	subs	r3, r3, r2
 8011230:	009b      	lsls	r3, r3, #2
 8011232:	440b      	add	r3, r1
 8011234:	3342      	adds	r3, #66	; 0x42
 8011236:	4602      	mov	r2, r0
 8011238:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801123a:	7bfa      	ldrb	r2, [r7, #15]
 801123c:	6879      	ldr	r1, [r7, #4]
 801123e:	4613      	mov	r3, r2
 8011240:	00db      	lsls	r3, r3, #3
 8011242:	1a9b      	subs	r3, r3, r2
 8011244:	009b      	lsls	r3, r3, #2
 8011246:	440b      	add	r3, r1
 8011248:	333f      	adds	r3, #63	; 0x3f
 801124a:	2200      	movs	r2, #0
 801124c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801124e:	7bfa      	ldrb	r2, [r7, #15]
 8011250:	6879      	ldr	r1, [r7, #4]
 8011252:	4613      	mov	r3, r2
 8011254:	00db      	lsls	r3, r3, #3
 8011256:	1a9b      	subs	r3, r3, r2
 8011258:	009b      	lsls	r3, r3, #2
 801125a:	440b      	add	r3, r1
 801125c:	3344      	adds	r3, #68	; 0x44
 801125e:	2200      	movs	r2, #0
 8011260:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8011262:	7bfa      	ldrb	r2, [r7, #15]
 8011264:	6879      	ldr	r1, [r7, #4]
 8011266:	4613      	mov	r3, r2
 8011268:	00db      	lsls	r3, r3, #3
 801126a:	1a9b      	subs	r3, r3, r2
 801126c:	009b      	lsls	r3, r3, #2
 801126e:	440b      	add	r3, r1
 8011270:	3348      	adds	r3, #72	; 0x48
 8011272:	2200      	movs	r2, #0
 8011274:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8011276:	7bfa      	ldrb	r2, [r7, #15]
 8011278:	6879      	ldr	r1, [r7, #4]
 801127a:	4613      	mov	r3, r2
 801127c:	00db      	lsls	r3, r3, #3
 801127e:	1a9b      	subs	r3, r3, r2
 8011280:	009b      	lsls	r3, r3, #2
 8011282:	440b      	add	r3, r1
 8011284:	3350      	adds	r3, #80	; 0x50
 8011286:	2200      	movs	r2, #0
 8011288:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801128a:	7bfb      	ldrb	r3, [r7, #15]
 801128c:	3301      	adds	r3, #1
 801128e:	73fb      	strb	r3, [r7, #15]
 8011290:	7bfa      	ldrb	r2, [r7, #15]
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	685b      	ldr	r3, [r3, #4]
 8011296:	429a      	cmp	r2, r3
 8011298:	d3af      	bcc.n	80111fa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801129a:	2300      	movs	r3, #0
 801129c:	73fb      	strb	r3, [r7, #15]
 801129e:	e044      	b.n	801132a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80112a0:	7bfa      	ldrb	r2, [r7, #15]
 80112a2:	6879      	ldr	r1, [r7, #4]
 80112a4:	4613      	mov	r3, r2
 80112a6:	00db      	lsls	r3, r3, #3
 80112a8:	1a9b      	subs	r3, r3, r2
 80112aa:	009b      	lsls	r3, r3, #2
 80112ac:	440b      	add	r3, r1
 80112ae:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80112b2:	2200      	movs	r2, #0
 80112b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80112b6:	7bfa      	ldrb	r2, [r7, #15]
 80112b8:	6879      	ldr	r1, [r7, #4]
 80112ba:	4613      	mov	r3, r2
 80112bc:	00db      	lsls	r3, r3, #3
 80112be:	1a9b      	subs	r3, r3, r2
 80112c0:	009b      	lsls	r3, r3, #2
 80112c2:	440b      	add	r3, r1
 80112c4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80112c8:	7bfa      	ldrb	r2, [r7, #15]
 80112ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80112cc:	7bfa      	ldrb	r2, [r7, #15]
 80112ce:	6879      	ldr	r1, [r7, #4]
 80112d0:	4613      	mov	r3, r2
 80112d2:	00db      	lsls	r3, r3, #3
 80112d4:	1a9b      	subs	r3, r3, r2
 80112d6:	009b      	lsls	r3, r3, #2
 80112d8:	440b      	add	r3, r1
 80112da:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80112de:	2200      	movs	r2, #0
 80112e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80112e2:	7bfa      	ldrb	r2, [r7, #15]
 80112e4:	6879      	ldr	r1, [r7, #4]
 80112e6:	4613      	mov	r3, r2
 80112e8:	00db      	lsls	r3, r3, #3
 80112ea:	1a9b      	subs	r3, r3, r2
 80112ec:	009b      	lsls	r3, r3, #2
 80112ee:	440b      	add	r3, r1
 80112f0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80112f4:	2200      	movs	r2, #0
 80112f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80112f8:	7bfa      	ldrb	r2, [r7, #15]
 80112fa:	6879      	ldr	r1, [r7, #4]
 80112fc:	4613      	mov	r3, r2
 80112fe:	00db      	lsls	r3, r3, #3
 8011300:	1a9b      	subs	r3, r3, r2
 8011302:	009b      	lsls	r3, r3, #2
 8011304:	440b      	add	r3, r1
 8011306:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801130a:	2200      	movs	r2, #0
 801130c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801130e:	7bfa      	ldrb	r2, [r7, #15]
 8011310:	6879      	ldr	r1, [r7, #4]
 8011312:	4613      	mov	r3, r2
 8011314:	00db      	lsls	r3, r3, #3
 8011316:	1a9b      	subs	r3, r3, r2
 8011318:	009b      	lsls	r3, r3, #2
 801131a:	440b      	add	r3, r1
 801131c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8011320:	2200      	movs	r2, #0
 8011322:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011324:	7bfb      	ldrb	r3, [r7, #15]
 8011326:	3301      	adds	r3, #1
 8011328:	73fb      	strb	r3, [r7, #15]
 801132a:	7bfa      	ldrb	r2, [r7, #15]
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	685b      	ldr	r3, [r3, #4]
 8011330:	429a      	cmp	r2, r3
 8011332:	d3b5      	bcc.n	80112a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	603b      	str	r3, [r7, #0]
 801133a:	687e      	ldr	r6, [r7, #4]
 801133c:	466d      	mov	r5, sp
 801133e:	f106 0410 	add.w	r4, r6, #16
 8011342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801134a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801134e:	e885 0003 	stmia.w	r5, {r0, r1}
 8011352:	1d33      	adds	r3, r6, #4
 8011354:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011356:	6838      	ldr	r0, [r7, #0]
 8011358:	f003 fc10 	bl	8014b7c <USB_DevInit>
 801135c:	4603      	mov	r3, r0
 801135e:	2b00      	cmp	r3, #0
 8011360:	d005      	beq.n	801136e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2202      	movs	r2, #2
 8011366:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 801136a:	2301      	movs	r3, #1
 801136c:	e00d      	b.n	801138a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2200      	movs	r2, #0
 8011372:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2201      	movs	r2, #1
 801137a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	4618      	mov	r0, r3
 8011384:	f004 fc8c 	bl	8015ca0 <USB_DevDisconnect>

  return HAL_OK;
 8011388:	2300      	movs	r3, #0
}
 801138a:	4618      	mov	r0, r3
 801138c:	3714      	adds	r7, #20
 801138e:	46bd      	mov	sp, r7
 8011390:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011392 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8011392:	b580      	push	{r7, lr}
 8011394:	b084      	sub	sp, #16
 8011396:	af00      	add	r7, sp, #0
 8011398:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80113a6:	2b01      	cmp	r3, #1
 80113a8:	d101      	bne.n	80113ae <HAL_PCD_Start+0x1c>
 80113aa:	2302      	movs	r3, #2
 80113ac:	e020      	b.n	80113f0 <HAL_PCD_Start+0x5e>
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2201      	movs	r2, #1
 80113b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ba:	2b01      	cmp	r3, #1
 80113bc:	d109      	bne.n	80113d2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80113c2:	2b01      	cmp	r3, #1
 80113c4:	d005      	beq.n	80113d2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	4618      	mov	r0, r3
 80113d8:	f003 fb62 	bl	8014aa0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	4618      	mov	r0, r3
 80113e2:	f004 fc3c 	bl	8015c5e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2200      	movs	r2, #0
 80113ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80113ee:	2300      	movs	r3, #0
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3710      	adds	r7, #16
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}

080113f8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80113f8:	b590      	push	{r4, r7, lr}
 80113fa:	b08d      	sub	sp, #52	; 0x34
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011406:	6a3b      	ldr	r3, [r7, #32]
 8011408:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	4618      	mov	r0, r3
 8011410:	f004 fcfa 	bl	8015e08 <USB_GetMode>
 8011414:	4603      	mov	r3, r0
 8011416:	2b00      	cmp	r3, #0
 8011418:	f040 839d 	bne.w	8011b56 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	4618      	mov	r0, r3
 8011422:	f004 fc5e 	bl	8015ce2 <USB_ReadInterrupts>
 8011426:	4603      	mov	r3, r0
 8011428:	2b00      	cmp	r3, #0
 801142a:	f000 8393 	beq.w	8011b54 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	4618      	mov	r0, r3
 8011434:	f004 fc55 	bl	8015ce2 <USB_ReadInterrupts>
 8011438:	4603      	mov	r3, r0
 801143a:	f003 0302 	and.w	r3, r3, #2
 801143e:	2b02      	cmp	r3, #2
 8011440:	d107      	bne.n	8011452 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	695a      	ldr	r2, [r3, #20]
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	f002 0202 	and.w	r2, r2, #2
 8011450:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	4618      	mov	r0, r3
 8011458:	f004 fc43 	bl	8015ce2 <USB_ReadInterrupts>
 801145c:	4603      	mov	r3, r0
 801145e:	f003 0310 	and.w	r3, r3, #16
 8011462:	2b10      	cmp	r3, #16
 8011464:	d161      	bne.n	801152a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	699a      	ldr	r2, [r3, #24]
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	f022 0210 	bic.w	r2, r2, #16
 8011474:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8011476:	6a3b      	ldr	r3, [r7, #32]
 8011478:	6a1b      	ldr	r3, [r3, #32]
 801147a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 801147c:	69bb      	ldr	r3, [r7, #24]
 801147e:	f003 020f 	and.w	r2, r3, #15
 8011482:	4613      	mov	r3, r2
 8011484:	00db      	lsls	r3, r3, #3
 8011486:	1a9b      	subs	r3, r3, r2
 8011488:	009b      	lsls	r3, r3, #2
 801148a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801148e:	687a      	ldr	r2, [r7, #4]
 8011490:	4413      	add	r3, r2
 8011492:	3304      	adds	r3, #4
 8011494:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8011496:	69bb      	ldr	r3, [r7, #24]
 8011498:	0c5b      	lsrs	r3, r3, #17
 801149a:	f003 030f 	and.w	r3, r3, #15
 801149e:	2b02      	cmp	r3, #2
 80114a0:	d124      	bne.n	80114ec <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80114a2:	69ba      	ldr	r2, [r7, #24]
 80114a4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80114a8:	4013      	ands	r3, r2
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d035      	beq.n	801151a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80114b2:	69bb      	ldr	r3, [r7, #24]
 80114b4:	091b      	lsrs	r3, r3, #4
 80114b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80114b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80114bc:	b29b      	uxth	r3, r3
 80114be:	461a      	mov	r2, r3
 80114c0:	6a38      	ldr	r0, [r7, #32]
 80114c2:	f004 fa7a 	bl	80159ba <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	68da      	ldr	r2, [r3, #12]
 80114ca:	69bb      	ldr	r3, [r7, #24]
 80114cc:	091b      	lsrs	r3, r3, #4
 80114ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80114d2:	441a      	add	r2, r3
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80114d8:	697b      	ldr	r3, [r7, #20]
 80114da:	699a      	ldr	r2, [r3, #24]
 80114dc:	69bb      	ldr	r3, [r7, #24]
 80114de:	091b      	lsrs	r3, r3, #4
 80114e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80114e4:	441a      	add	r2, r3
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	619a      	str	r2, [r3, #24]
 80114ea:	e016      	b.n	801151a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80114ec:	69bb      	ldr	r3, [r7, #24]
 80114ee:	0c5b      	lsrs	r3, r3, #17
 80114f0:	f003 030f 	and.w	r3, r3, #15
 80114f4:	2b06      	cmp	r3, #6
 80114f6:	d110      	bne.n	801151a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80114fe:	2208      	movs	r2, #8
 8011500:	4619      	mov	r1, r3
 8011502:	6a38      	ldr	r0, [r7, #32]
 8011504:	f004 fa59 	bl	80159ba <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	699a      	ldr	r2, [r3, #24]
 801150c:	69bb      	ldr	r3, [r7, #24]
 801150e:	091b      	lsrs	r3, r3, #4
 8011510:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011514:	441a      	add	r2, r3
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	699a      	ldr	r2, [r3, #24]
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	f042 0210 	orr.w	r2, r2, #16
 8011528:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	4618      	mov	r0, r3
 8011530:	f004 fbd7 	bl	8015ce2 <USB_ReadInterrupts>
 8011534:	4603      	mov	r3, r0
 8011536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801153a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801153e:	d16e      	bne.n	801161e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8011540:	2300      	movs	r3, #0
 8011542:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	4618      	mov	r0, r3
 801154a:	f004 fbdd 	bl	8015d08 <USB_ReadDevAllOutEpInterrupt>
 801154e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8011550:	e062      	b.n	8011618 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8011552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011554:	f003 0301 	and.w	r3, r3, #1
 8011558:	2b00      	cmp	r3, #0
 801155a:	d057      	beq.n	801160c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011562:	b2d2      	uxtb	r2, r2
 8011564:	4611      	mov	r1, r2
 8011566:	4618      	mov	r0, r3
 8011568:	f004 fc02 	bl	8015d70 <USB_ReadDevOutEPInterrupt>
 801156c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 801156e:	693b      	ldr	r3, [r7, #16]
 8011570:	f003 0301 	and.w	r3, r3, #1
 8011574:	2b00      	cmp	r3, #0
 8011576:	d00c      	beq.n	8011592 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8011578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801157a:	015a      	lsls	r2, r3, #5
 801157c:	69fb      	ldr	r3, [r7, #28]
 801157e:	4413      	add	r3, r2
 8011580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011584:	461a      	mov	r2, r3
 8011586:	2301      	movs	r3, #1
 8011588:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 801158a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801158c:	6878      	ldr	r0, [r7, #4]
 801158e:	f000 fdb1 	bl	80120f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8011592:	693b      	ldr	r3, [r7, #16]
 8011594:	f003 0308 	and.w	r3, r3, #8
 8011598:	2b00      	cmp	r3, #0
 801159a:	d00c      	beq.n	80115b6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 801159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801159e:	015a      	lsls	r2, r3, #5
 80115a0:	69fb      	ldr	r3, [r7, #28]
 80115a2:	4413      	add	r3, r2
 80115a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115a8:	461a      	mov	r2, r3
 80115aa:	2308      	movs	r3, #8
 80115ac:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80115ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f000 feab 	bl	801230c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	f003 0310 	and.w	r3, r3, #16
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d008      	beq.n	80115d2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80115c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c2:	015a      	lsls	r2, r3, #5
 80115c4:	69fb      	ldr	r3, [r7, #28]
 80115c6:	4413      	add	r3, r2
 80115c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115cc:	461a      	mov	r2, r3
 80115ce:	2310      	movs	r3, #16
 80115d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	f003 0320 	and.w	r3, r3, #32
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d008      	beq.n	80115ee <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80115dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115de:	015a      	lsls	r2, r3, #5
 80115e0:	69fb      	ldr	r3, [r7, #28]
 80115e2:	4413      	add	r3, r2
 80115e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115e8:	461a      	mov	r2, r3
 80115ea:	2320      	movs	r3, #32
 80115ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80115ee:	693b      	ldr	r3, [r7, #16]
 80115f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d009      	beq.n	801160c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80115f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115fa:	015a      	lsls	r2, r3, #5
 80115fc:	69fb      	ldr	r3, [r7, #28]
 80115fe:	4413      	add	r3, r2
 8011600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011604:	461a      	mov	r2, r3
 8011606:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801160a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 801160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801160e:	3301      	adds	r3, #1
 8011610:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8011612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011614:	085b      	lsrs	r3, r3, #1
 8011616:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8011618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801161a:	2b00      	cmp	r3, #0
 801161c:	d199      	bne.n	8011552 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	4618      	mov	r0, r3
 8011624:	f004 fb5d 	bl	8015ce2 <USB_ReadInterrupts>
 8011628:	4603      	mov	r3, r0
 801162a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801162e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011632:	f040 80c0 	bne.w	80117b6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	4618      	mov	r0, r3
 801163c:	f004 fb7e 	bl	8015d3c <USB_ReadDevAllInEpInterrupt>
 8011640:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8011642:	2300      	movs	r3, #0
 8011644:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8011646:	e0b2      	b.n	80117ae <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8011648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801164a:	f003 0301 	and.w	r3, r3, #1
 801164e:	2b00      	cmp	r3, #0
 8011650:	f000 80a7 	beq.w	80117a2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801165a:	b2d2      	uxtb	r2, r2
 801165c:	4611      	mov	r1, r2
 801165e:	4618      	mov	r0, r3
 8011660:	f004 fba4 	bl	8015dac <USB_ReadDevInEPInterrupt>
 8011664:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	f003 0301 	and.w	r3, r3, #1
 801166c:	2b00      	cmp	r3, #0
 801166e:	d057      	beq.n	8011720 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8011670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011672:	f003 030f 	and.w	r3, r3, #15
 8011676:	2201      	movs	r2, #1
 8011678:	fa02 f303 	lsl.w	r3, r2, r3
 801167c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801167e:	69fb      	ldr	r3, [r7, #28]
 8011680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	43db      	mvns	r3, r3
 801168a:	69f9      	ldr	r1, [r7, #28]
 801168c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011690:	4013      	ands	r3, r2
 8011692:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8011694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011696:	015a      	lsls	r2, r3, #5
 8011698:	69fb      	ldr	r3, [r7, #28]
 801169a:	4413      	add	r3, r2
 801169c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116a0:	461a      	mov	r2, r3
 80116a2:	2301      	movs	r3, #1
 80116a4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	691b      	ldr	r3, [r3, #16]
 80116aa:	2b01      	cmp	r3, #1
 80116ac:	d132      	bne.n	8011714 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80116ae:	6879      	ldr	r1, [r7, #4]
 80116b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116b2:	4613      	mov	r3, r2
 80116b4:	00db      	lsls	r3, r3, #3
 80116b6:	1a9b      	subs	r3, r3, r2
 80116b8:	009b      	lsls	r3, r3, #2
 80116ba:	440b      	add	r3, r1
 80116bc:	3348      	adds	r3, #72	; 0x48
 80116be:	6819      	ldr	r1, [r3, #0]
 80116c0:	6878      	ldr	r0, [r7, #4]
 80116c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116c4:	4613      	mov	r3, r2
 80116c6:	00db      	lsls	r3, r3, #3
 80116c8:	1a9b      	subs	r3, r3, r2
 80116ca:	009b      	lsls	r3, r3, #2
 80116cc:	4403      	add	r3, r0
 80116ce:	3344      	adds	r3, #68	; 0x44
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	4419      	add	r1, r3
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116d8:	4613      	mov	r3, r2
 80116da:	00db      	lsls	r3, r3, #3
 80116dc:	1a9b      	subs	r3, r3, r2
 80116de:	009b      	lsls	r3, r3, #2
 80116e0:	4403      	add	r3, r0
 80116e2:	3348      	adds	r3, #72	; 0x48
 80116e4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80116e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d113      	bne.n	8011714 <HAL_PCD_IRQHandler+0x31c>
 80116ec:	6879      	ldr	r1, [r7, #4]
 80116ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116f0:	4613      	mov	r3, r2
 80116f2:	00db      	lsls	r3, r3, #3
 80116f4:	1a9b      	subs	r3, r3, r2
 80116f6:	009b      	lsls	r3, r3, #2
 80116f8:	440b      	add	r3, r1
 80116fa:	3350      	adds	r3, #80	; 0x50
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d108      	bne.n	8011714 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	6818      	ldr	r0, [r3, #0]
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801170c:	461a      	mov	r2, r3
 801170e:	2101      	movs	r1, #1
 8011710:	f004 fbac 	bl	8015e6c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8011714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011716:	b2db      	uxtb	r3, r3
 8011718:	4619      	mov	r1, r3
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	f009 fe8b 	bl	801b436 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8011720:	693b      	ldr	r3, [r7, #16]
 8011722:	f003 0308 	and.w	r3, r3, #8
 8011726:	2b00      	cmp	r3, #0
 8011728:	d008      	beq.n	801173c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801172c:	015a      	lsls	r2, r3, #5
 801172e:	69fb      	ldr	r3, [r7, #28]
 8011730:	4413      	add	r3, r2
 8011732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011736:	461a      	mov	r2, r3
 8011738:	2308      	movs	r3, #8
 801173a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 801173c:	693b      	ldr	r3, [r7, #16]
 801173e:	f003 0310 	and.w	r3, r3, #16
 8011742:	2b00      	cmp	r3, #0
 8011744:	d008      	beq.n	8011758 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8011746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011748:	015a      	lsls	r2, r3, #5
 801174a:	69fb      	ldr	r3, [r7, #28]
 801174c:	4413      	add	r3, r2
 801174e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011752:	461a      	mov	r2, r3
 8011754:	2310      	movs	r3, #16
 8011756:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8011758:	693b      	ldr	r3, [r7, #16]
 801175a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801175e:	2b00      	cmp	r3, #0
 8011760:	d008      	beq.n	8011774 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8011762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011764:	015a      	lsls	r2, r3, #5
 8011766:	69fb      	ldr	r3, [r7, #28]
 8011768:	4413      	add	r3, r2
 801176a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801176e:	461a      	mov	r2, r3
 8011770:	2340      	movs	r3, #64	; 0x40
 8011772:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8011774:	693b      	ldr	r3, [r7, #16]
 8011776:	f003 0302 	and.w	r3, r3, #2
 801177a:	2b00      	cmp	r3, #0
 801177c:	d008      	beq.n	8011790 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 801177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011780:	015a      	lsls	r2, r3, #5
 8011782:	69fb      	ldr	r3, [r7, #28]
 8011784:	4413      	add	r3, r2
 8011786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801178a:	461a      	mov	r2, r3
 801178c:	2302      	movs	r3, #2
 801178e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011796:	2b00      	cmp	r3, #0
 8011798:	d003      	beq.n	80117a2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 801179a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801179c:	6878      	ldr	r0, [r7, #4]
 801179e:	f000 fc1b 	bl	8011fd8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80117a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117a4:	3301      	adds	r3, #1
 80117a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80117a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117aa:	085b      	lsrs	r3, r3, #1
 80117ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80117ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	f47f af49 	bne.w	8011648 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	4618      	mov	r0, r3
 80117bc:	f004 fa91 	bl	8015ce2 <USB_ReadInterrupts>
 80117c0:	4603      	mov	r3, r0
 80117c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80117c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80117ca:	d122      	bne.n	8011812 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80117cc:	69fb      	ldr	r3, [r7, #28]
 80117ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	69fa      	ldr	r2, [r7, #28]
 80117d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80117da:	f023 0301 	bic.w	r3, r3, #1
 80117de:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80117e6:	2b01      	cmp	r3, #1
 80117e8:	d108      	bne.n	80117fc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	2200      	movs	r2, #0
 80117ee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80117f2:	2100      	movs	r1, #0
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f000 fe27 	bl	8012448 <HAL_PCDEx_LPM_Callback>
 80117fa:	e002      	b.n	8011802 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80117fc:	6878      	ldr	r0, [r7, #4]
 80117fe:	f009 fe87 	bl	801b510 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	695a      	ldr	r2, [r3, #20]
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8011810:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	4618      	mov	r0, r3
 8011818:	f004 fa63 	bl	8015ce2 <USB_ReadInterrupts>
 801181c:	4603      	mov	r3, r0
 801181e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011826:	d112      	bne.n	801184e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8011828:	69fb      	ldr	r3, [r7, #28]
 801182a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801182e:	689b      	ldr	r3, [r3, #8]
 8011830:	f003 0301 	and.w	r3, r3, #1
 8011834:	2b01      	cmp	r3, #1
 8011836:	d102      	bne.n	801183e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f009 fe43 	bl	801b4c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	695a      	ldr	r2, [r3, #20]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 801184c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	4618      	mov	r0, r3
 8011854:	f004 fa45 	bl	8015ce2 <USB_ReadInterrupts>
 8011858:	4603      	mov	r3, r0
 801185a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801185e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011862:	f040 80c7 	bne.w	80119f4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8011866:	69fb      	ldr	r3, [r7, #28]
 8011868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	69fa      	ldr	r2, [r7, #28]
 8011870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011874:	f023 0301 	bic.w	r3, r3, #1
 8011878:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	2110      	movs	r1, #16
 8011880:	4618      	mov	r0, r3
 8011882:	f003 fadf 	bl	8014e44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011886:	2300      	movs	r3, #0
 8011888:	62fb      	str	r3, [r7, #44]	; 0x2c
 801188a:	e056      	b.n	801193a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801188c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801188e:	015a      	lsls	r2, r3, #5
 8011890:	69fb      	ldr	r3, [r7, #28]
 8011892:	4413      	add	r3, r2
 8011894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011898:	461a      	mov	r2, r3
 801189a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801189e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80118a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118a2:	015a      	lsls	r2, r3, #5
 80118a4:	69fb      	ldr	r3, [r7, #28]
 80118a6:	4413      	add	r3, r2
 80118a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118b0:	0151      	lsls	r1, r2, #5
 80118b2:	69fa      	ldr	r2, [r7, #28]
 80118b4:	440a      	add	r2, r1
 80118b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80118be:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80118c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c2:	015a      	lsls	r2, r3, #5
 80118c4:	69fb      	ldr	r3, [r7, #28]
 80118c6:	4413      	add	r3, r2
 80118c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118d0:	0151      	lsls	r1, r2, #5
 80118d2:	69fa      	ldr	r2, [r7, #28]
 80118d4:	440a      	add	r2, r1
 80118d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80118da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80118de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80118e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118e2:	015a      	lsls	r2, r3, #5
 80118e4:	69fb      	ldr	r3, [r7, #28]
 80118e6:	4413      	add	r3, r2
 80118e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118ec:	461a      	mov	r2, r3
 80118ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80118f2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80118f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f6:	015a      	lsls	r2, r3, #5
 80118f8:	69fb      	ldr	r3, [r7, #28]
 80118fa:	4413      	add	r3, r2
 80118fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011904:	0151      	lsls	r1, r2, #5
 8011906:	69fa      	ldr	r2, [r7, #28]
 8011908:	440a      	add	r2, r1
 801190a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801190e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011912:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011916:	015a      	lsls	r2, r3, #5
 8011918:	69fb      	ldr	r3, [r7, #28]
 801191a:	4413      	add	r3, r2
 801191c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011924:	0151      	lsls	r1, r2, #5
 8011926:	69fa      	ldr	r2, [r7, #28]
 8011928:	440a      	add	r2, r1
 801192a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801192e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011932:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011936:	3301      	adds	r3, #1
 8011938:	62fb      	str	r3, [r7, #44]	; 0x2c
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011940:	429a      	cmp	r2, r3
 8011942:	d3a3      	bcc.n	801188c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8011944:	69fb      	ldr	r3, [r7, #28]
 8011946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801194a:	69db      	ldr	r3, [r3, #28]
 801194c:	69fa      	ldr	r2, [r7, #28]
 801194e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011952:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8011956:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801195c:	2b00      	cmp	r3, #0
 801195e:	d016      	beq.n	801198e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8011960:	69fb      	ldr	r3, [r7, #28]
 8011962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801196a:	69fa      	ldr	r2, [r7, #28]
 801196c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011970:	f043 030b 	orr.w	r3, r3, #11
 8011974:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8011978:	69fb      	ldr	r3, [r7, #28]
 801197a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801197e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011980:	69fa      	ldr	r2, [r7, #28]
 8011982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011986:	f043 030b 	orr.w	r3, r3, #11
 801198a:	6453      	str	r3, [r2, #68]	; 0x44
 801198c:	e015      	b.n	80119ba <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801198e:	69fb      	ldr	r3, [r7, #28]
 8011990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011994:	695b      	ldr	r3, [r3, #20]
 8011996:	69fa      	ldr	r2, [r7, #28]
 8011998:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801199c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80119a0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80119a4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80119a6:	69fb      	ldr	r3, [r7, #28]
 80119a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80119ac:	691b      	ldr	r3, [r3, #16]
 80119ae:	69fa      	ldr	r2, [r7, #28]
 80119b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80119b4:	f043 030b 	orr.w	r3, r3, #11
 80119b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80119ba:	69fb      	ldr	r3, [r7, #28]
 80119bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	69fa      	ldr	r2, [r7, #28]
 80119c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80119c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80119cc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	6818      	ldr	r0, [r3, #0]
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	691b      	ldr	r3, [r3, #16]
 80119d6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80119de:	461a      	mov	r2, r3
 80119e0:	f004 fa44 	bl	8015e6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	695a      	ldr	r2, [r3, #20]
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80119f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	4618      	mov	r0, r3
 80119fa:	f004 f972 	bl	8015ce2 <USB_ReadInterrupts>
 80119fe:	4603      	mov	r3, r0
 8011a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011a08:	d124      	bne.n	8011a54 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f004 fa08 	bl	8015e24 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f003 fa70 	bl	8014efe <USB_GetDevSpeed>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	461a      	mov	r2, r3
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681c      	ldr	r4, [r3, #0]
 8011a2a:	f001 f985 	bl	8012d38 <HAL_RCC_GetHCLKFreq>
 8011a2e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8011a34:	b2db      	uxtb	r3, r3
 8011a36:	461a      	mov	r2, r3
 8011a38:	4620      	mov	r0, r4
 8011a3a:	f002 ff8f 	bl	801495c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f009 fd21 	bl	801b486 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	695a      	ldr	r2, [r3, #20]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8011a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f004 f942 	bl	8015ce2 <USB_ReadInterrupts>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	f003 0308 	and.w	r3, r3, #8
 8011a64:	2b08      	cmp	r3, #8
 8011a66:	d10a      	bne.n	8011a7e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f009 fcfe 	bl	801b46a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	695a      	ldr	r2, [r3, #20]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	f002 0208 	and.w	r2, r2, #8
 8011a7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	4618      	mov	r0, r3
 8011a84:	f004 f92d 	bl	8015ce2 <USB_ReadInterrupts>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a92:	d10f      	bne.n	8011ab4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8011a94:	2300      	movs	r3, #0
 8011a96:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8011a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a9a:	b2db      	uxtb	r3, r3
 8011a9c:	4619      	mov	r1, r3
 8011a9e:	6878      	ldr	r0, [r7, #4]
 8011aa0:	f009 fd56 	bl	801b550 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	695a      	ldr	r2, [r3, #20]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8011ab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f004 f912 	bl	8015ce2 <USB_ReadInterrupts>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011ac4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011ac8:	d10f      	bne.n	8011aea <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8011aca:	2300      	movs	r3, #0
 8011acc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8011ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad0:	b2db      	uxtb	r3, r3
 8011ad2:	4619      	mov	r1, r3
 8011ad4:	6878      	ldr	r0, [r7, #4]
 8011ad6:	f009 fd29 	bl	801b52c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	695a      	ldr	r2, [r3, #20]
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8011ae8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	4618      	mov	r0, r3
 8011af0:	f004 f8f7 	bl	8015ce2 <USB_ReadInterrupts>
 8011af4:	4603      	mov	r3, r0
 8011af6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011afe:	d10a      	bne.n	8011b16 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f009 fd37 	bl	801b574 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	695a      	ldr	r2, [r3, #20]
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8011b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f004 f8e1 	bl	8015ce2 <USB_ReadInterrupts>
 8011b20:	4603      	mov	r3, r0
 8011b22:	f003 0304 	and.w	r3, r3, #4
 8011b26:	2b04      	cmp	r3, #4
 8011b28:	d115      	bne.n	8011b56 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	685b      	ldr	r3, [r3, #4]
 8011b30:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8011b32:	69bb      	ldr	r3, [r7, #24]
 8011b34:	f003 0304 	and.w	r3, r3, #4
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d002      	beq.n	8011b42 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f009 fd27 	bl	801b590 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	6859      	ldr	r1, [r3, #4]
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	69ba      	ldr	r2, [r7, #24]
 8011b4e:	430a      	orrs	r2, r1
 8011b50:	605a      	str	r2, [r3, #4]
 8011b52:	e000      	b.n	8011b56 <HAL_PCD_IRQHandler+0x75e>
      return;
 8011b54:	bf00      	nop
    }
  }
}
 8011b56:	3734      	adds	r7, #52	; 0x34
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	bd90      	pop	{r4, r7, pc}

08011b5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b082      	sub	sp, #8
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
 8011b64:	460b      	mov	r3, r1
 8011b66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8011b6e:	2b01      	cmp	r3, #1
 8011b70:	d101      	bne.n	8011b76 <HAL_PCD_SetAddress+0x1a>
 8011b72:	2302      	movs	r3, #2
 8011b74:	e013      	b.n	8011b9e <HAL_PCD_SetAddress+0x42>
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2201      	movs	r2, #1
 8011b7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	78fa      	ldrb	r2, [r7, #3]
 8011b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	78fa      	ldrb	r2, [r7, #3]
 8011b8c:	4611      	mov	r1, r2
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f004 f83f 	bl	8015c12 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2200      	movs	r2, #0
 8011b98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8011b9c:	2300      	movs	r3, #0
}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	3708      	adds	r7, #8
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}

08011ba6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8011ba6:	b580      	push	{r7, lr}
 8011ba8:	b084      	sub	sp, #16
 8011baa:	af00      	add	r7, sp, #0
 8011bac:	6078      	str	r0, [r7, #4]
 8011bae:	4608      	mov	r0, r1
 8011bb0:	4611      	mov	r1, r2
 8011bb2:	461a      	mov	r2, r3
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	70fb      	strb	r3, [r7, #3]
 8011bb8:	460b      	mov	r3, r1
 8011bba:	803b      	strh	r3, [r7, #0]
 8011bbc:	4613      	mov	r3, r2
 8011bbe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8011bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	da0f      	bge.n	8011bec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011bcc:	78fb      	ldrb	r3, [r7, #3]
 8011bce:	f003 020f 	and.w	r2, r3, #15
 8011bd2:	4613      	mov	r3, r2
 8011bd4:	00db      	lsls	r3, r3, #3
 8011bd6:	1a9b      	subs	r3, r3, r2
 8011bd8:	009b      	lsls	r3, r3, #2
 8011bda:	3338      	adds	r3, #56	; 0x38
 8011bdc:	687a      	ldr	r2, [r7, #4]
 8011bde:	4413      	add	r3, r2
 8011be0:	3304      	adds	r3, #4
 8011be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	2201      	movs	r2, #1
 8011be8:	705a      	strb	r2, [r3, #1]
 8011bea:	e00f      	b.n	8011c0c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011bec:	78fb      	ldrb	r3, [r7, #3]
 8011bee:	f003 020f 	and.w	r2, r3, #15
 8011bf2:	4613      	mov	r3, r2
 8011bf4:	00db      	lsls	r3, r3, #3
 8011bf6:	1a9b      	subs	r3, r3, r2
 8011bf8:	009b      	lsls	r3, r3, #2
 8011bfa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8011bfe:	687a      	ldr	r2, [r7, #4]
 8011c00:	4413      	add	r3, r2
 8011c02:	3304      	adds	r3, #4
 8011c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	2200      	movs	r2, #0
 8011c0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8011c0c:	78fb      	ldrb	r3, [r7, #3]
 8011c0e:	f003 030f 	and.w	r3, r3, #15
 8011c12:	b2da      	uxtb	r2, r3
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8011c18:	883a      	ldrh	r2, [r7, #0]
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	78ba      	ldrb	r2, [r7, #2]
 8011c22:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	785b      	ldrb	r3, [r3, #1]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d004      	beq.n	8011c36 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	781b      	ldrb	r3, [r3, #0]
 8011c30:	b29a      	uxth	r2, r3
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8011c36:	78bb      	ldrb	r3, [r7, #2]
 8011c38:	2b02      	cmp	r3, #2
 8011c3a:	d102      	bne.n	8011c42 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	2200      	movs	r2, #0
 8011c40:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8011c48:	2b01      	cmp	r3, #1
 8011c4a:	d101      	bne.n	8011c50 <HAL_PCD_EP_Open+0xaa>
 8011c4c:	2302      	movs	r3, #2
 8011c4e:	e00e      	b.n	8011c6e <HAL_PCD_EP_Open+0xc8>
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2201      	movs	r2, #1
 8011c54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	68f9      	ldr	r1, [r7, #12]
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f003 f972 	bl	8014f48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2200      	movs	r2, #0
 8011c68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8011c6c:	7afb      	ldrb	r3, [r7, #11]
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	3710      	adds	r7, #16
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}

08011c76 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011c76:	b580      	push	{r7, lr}
 8011c78:	b084      	sub	sp, #16
 8011c7a:	af00      	add	r7, sp, #0
 8011c7c:	6078      	str	r0, [r7, #4]
 8011c7e:	460b      	mov	r3, r1
 8011c80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8011c82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	da0f      	bge.n	8011caa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011c8a:	78fb      	ldrb	r3, [r7, #3]
 8011c8c:	f003 020f 	and.w	r2, r3, #15
 8011c90:	4613      	mov	r3, r2
 8011c92:	00db      	lsls	r3, r3, #3
 8011c94:	1a9b      	subs	r3, r3, r2
 8011c96:	009b      	lsls	r3, r3, #2
 8011c98:	3338      	adds	r3, #56	; 0x38
 8011c9a:	687a      	ldr	r2, [r7, #4]
 8011c9c:	4413      	add	r3, r2
 8011c9e:	3304      	adds	r3, #4
 8011ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	2201      	movs	r2, #1
 8011ca6:	705a      	strb	r2, [r3, #1]
 8011ca8:	e00f      	b.n	8011cca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011caa:	78fb      	ldrb	r3, [r7, #3]
 8011cac:	f003 020f 	and.w	r2, r3, #15
 8011cb0:	4613      	mov	r3, r2
 8011cb2:	00db      	lsls	r3, r3, #3
 8011cb4:	1a9b      	subs	r3, r3, r2
 8011cb6:	009b      	lsls	r3, r3, #2
 8011cb8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8011cbc:	687a      	ldr	r2, [r7, #4]
 8011cbe:	4413      	add	r3, r2
 8011cc0:	3304      	adds	r3, #4
 8011cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8011cca:	78fb      	ldrb	r3, [r7, #3]
 8011ccc:	f003 030f 	and.w	r3, r3, #15
 8011cd0:	b2da      	uxtb	r2, r3
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8011cdc:	2b01      	cmp	r3, #1
 8011cde:	d101      	bne.n	8011ce4 <HAL_PCD_EP_Close+0x6e>
 8011ce0:	2302      	movs	r3, #2
 8011ce2:	e00e      	b.n	8011d02 <HAL_PCD_EP_Close+0x8c>
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	2201      	movs	r2, #1
 8011ce8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	68f9      	ldr	r1, [r7, #12]
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f003 f9b0 	bl	8015058 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8011d00:	2300      	movs	r3, #0
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	3710      	adds	r7, #16
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}

08011d0a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8011d0a:	b580      	push	{r7, lr}
 8011d0c:	b086      	sub	sp, #24
 8011d0e:	af00      	add	r7, sp, #0
 8011d10:	60f8      	str	r0, [r7, #12]
 8011d12:	607a      	str	r2, [r7, #4]
 8011d14:	603b      	str	r3, [r7, #0]
 8011d16:	460b      	mov	r3, r1
 8011d18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011d1a:	7afb      	ldrb	r3, [r7, #11]
 8011d1c:	f003 020f 	and.w	r2, r3, #15
 8011d20:	4613      	mov	r3, r2
 8011d22:	00db      	lsls	r3, r3, #3
 8011d24:	1a9b      	subs	r3, r3, r2
 8011d26:	009b      	lsls	r3, r3, #2
 8011d28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8011d2c:	68fa      	ldr	r2, [r7, #12]
 8011d2e:	4413      	add	r3, r2
 8011d30:	3304      	adds	r3, #4
 8011d32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8011d34:	697b      	ldr	r3, [r7, #20]
 8011d36:	687a      	ldr	r2, [r7, #4]
 8011d38:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8011d3a:	697b      	ldr	r3, [r7, #20]
 8011d3c:	683a      	ldr	r2, [r7, #0]
 8011d3e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8011d40:	697b      	ldr	r3, [r7, #20]
 8011d42:	2200      	movs	r2, #0
 8011d44:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	2200      	movs	r2, #0
 8011d4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011d4c:	7afb      	ldrb	r3, [r7, #11]
 8011d4e:	f003 030f 	and.w	r3, r3, #15
 8011d52:	b2da      	uxtb	r2, r3
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	691b      	ldr	r3, [r3, #16]
 8011d5c:	2b01      	cmp	r3, #1
 8011d5e:	d102      	bne.n	8011d66 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8011d60:	687a      	ldr	r2, [r7, #4]
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011d66:	7afb      	ldrb	r3, [r7, #11]
 8011d68:	f003 030f 	and.w	r3, r3, #15
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d109      	bne.n	8011d84 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	6818      	ldr	r0, [r3, #0]
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	691b      	ldr	r3, [r3, #16]
 8011d78:	b2db      	uxtb	r3, r3
 8011d7a:	461a      	mov	r2, r3
 8011d7c:	6979      	ldr	r1, [r7, #20]
 8011d7e:	f003 fc8b 	bl	8015698 <USB_EP0StartXfer>
 8011d82:	e008      	b.n	8011d96 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	6818      	ldr	r0, [r3, #0]
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	691b      	ldr	r3, [r3, #16]
 8011d8c:	b2db      	uxtb	r3, r3
 8011d8e:	461a      	mov	r2, r3
 8011d90:	6979      	ldr	r1, [r7, #20]
 8011d92:	f003 fa3d 	bl	8015210 <USB_EPStartXfer>
  }

  return HAL_OK;
 8011d96:	2300      	movs	r3, #0
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3718      	adds	r7, #24
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}

08011da0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011da0:	b480      	push	{r7}
 8011da2:	b083      	sub	sp, #12
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	460b      	mov	r3, r1
 8011daa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8011dac:	78fb      	ldrb	r3, [r7, #3]
 8011dae:	f003 020f 	and.w	r2, r3, #15
 8011db2:	6879      	ldr	r1, [r7, #4]
 8011db4:	4613      	mov	r3, r2
 8011db6:	00db      	lsls	r3, r3, #3
 8011db8:	1a9b      	subs	r3, r3, r2
 8011dba:	009b      	lsls	r3, r3, #2
 8011dbc:	440b      	add	r3, r1
 8011dbe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8011dc2:	681b      	ldr	r3, [r3, #0]
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	370c      	adds	r7, #12
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dce:	4770      	bx	lr

08011dd0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b086      	sub	sp, #24
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	60f8      	str	r0, [r7, #12]
 8011dd8:	607a      	str	r2, [r7, #4]
 8011dda:	603b      	str	r3, [r7, #0]
 8011ddc:	460b      	mov	r3, r1
 8011dde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011de0:	7afb      	ldrb	r3, [r7, #11]
 8011de2:	f003 020f 	and.w	r2, r3, #15
 8011de6:	4613      	mov	r3, r2
 8011de8:	00db      	lsls	r3, r3, #3
 8011dea:	1a9b      	subs	r3, r3, r2
 8011dec:	009b      	lsls	r3, r3, #2
 8011dee:	3338      	adds	r3, #56	; 0x38
 8011df0:	68fa      	ldr	r2, [r7, #12]
 8011df2:	4413      	add	r3, r2
 8011df4:	3304      	adds	r3, #4
 8011df6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8011df8:	697b      	ldr	r3, [r7, #20]
 8011dfa:	687a      	ldr	r2, [r7, #4]
 8011dfc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	683a      	ldr	r2, [r7, #0]
 8011e02:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8011e04:	697b      	ldr	r3, [r7, #20]
 8011e06:	2200      	movs	r2, #0
 8011e08:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	2201      	movs	r2, #1
 8011e0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011e10:	7afb      	ldrb	r3, [r7, #11]
 8011e12:	f003 030f 	and.w	r3, r3, #15
 8011e16:	b2da      	uxtb	r2, r3
 8011e18:	697b      	ldr	r3, [r7, #20]
 8011e1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	691b      	ldr	r3, [r3, #16]
 8011e20:	2b01      	cmp	r3, #1
 8011e22:	d102      	bne.n	8011e2a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8011e24:	687a      	ldr	r2, [r7, #4]
 8011e26:	697b      	ldr	r3, [r7, #20]
 8011e28:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011e2a:	7afb      	ldrb	r3, [r7, #11]
 8011e2c:	f003 030f 	and.w	r3, r3, #15
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d109      	bne.n	8011e48 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	6818      	ldr	r0, [r3, #0]
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	691b      	ldr	r3, [r3, #16]
 8011e3c:	b2db      	uxtb	r3, r3
 8011e3e:	461a      	mov	r2, r3
 8011e40:	6979      	ldr	r1, [r7, #20]
 8011e42:	f003 fc29 	bl	8015698 <USB_EP0StartXfer>
 8011e46:	e008      	b.n	8011e5a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	6818      	ldr	r0, [r3, #0]
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	691b      	ldr	r3, [r3, #16]
 8011e50:	b2db      	uxtb	r3, r3
 8011e52:	461a      	mov	r2, r3
 8011e54:	6979      	ldr	r1, [r7, #20]
 8011e56:	f003 f9db 	bl	8015210 <USB_EPStartXfer>
  }

  return HAL_OK;
 8011e5a:	2300      	movs	r3, #0
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	3718      	adds	r7, #24
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}

08011e64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b084      	sub	sp, #16
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
 8011e6c:	460b      	mov	r3, r1
 8011e6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8011e70:	78fb      	ldrb	r3, [r7, #3]
 8011e72:	f003 020f 	and.w	r2, r3, #15
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	685b      	ldr	r3, [r3, #4]
 8011e7a:	429a      	cmp	r2, r3
 8011e7c:	d901      	bls.n	8011e82 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8011e7e:	2301      	movs	r3, #1
 8011e80:	e050      	b.n	8011f24 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8011e82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	da0f      	bge.n	8011eaa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011e8a:	78fb      	ldrb	r3, [r7, #3]
 8011e8c:	f003 020f 	and.w	r2, r3, #15
 8011e90:	4613      	mov	r3, r2
 8011e92:	00db      	lsls	r3, r3, #3
 8011e94:	1a9b      	subs	r3, r3, r2
 8011e96:	009b      	lsls	r3, r3, #2
 8011e98:	3338      	adds	r3, #56	; 0x38
 8011e9a:	687a      	ldr	r2, [r7, #4]
 8011e9c:	4413      	add	r3, r2
 8011e9e:	3304      	adds	r3, #4
 8011ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	2201      	movs	r2, #1
 8011ea6:	705a      	strb	r2, [r3, #1]
 8011ea8:	e00d      	b.n	8011ec6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8011eaa:	78fa      	ldrb	r2, [r7, #3]
 8011eac:	4613      	mov	r3, r2
 8011eae:	00db      	lsls	r3, r3, #3
 8011eb0:	1a9b      	subs	r3, r3, r2
 8011eb2:	009b      	lsls	r3, r3, #2
 8011eb4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8011eb8:	687a      	ldr	r2, [r7, #4]
 8011eba:	4413      	add	r3, r2
 8011ebc:	3304      	adds	r3, #4
 8011ebe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	2201      	movs	r2, #1
 8011eca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011ecc:	78fb      	ldrb	r3, [r7, #3]
 8011ece:	f003 030f 	and.w	r3, r3, #15
 8011ed2:	b2da      	uxtb	r2, r3
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8011ede:	2b01      	cmp	r3, #1
 8011ee0:	d101      	bne.n	8011ee6 <HAL_PCD_EP_SetStall+0x82>
 8011ee2:	2302      	movs	r3, #2
 8011ee4:	e01e      	b.n	8011f24 <HAL_PCD_EP_SetStall+0xc0>
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2201      	movs	r2, #1
 8011eea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	68f9      	ldr	r1, [r7, #12]
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f003 fdb8 	bl	8015a6a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8011efa:	78fb      	ldrb	r3, [r7, #3]
 8011efc:	f003 030f 	and.w	r3, r3, #15
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d10a      	bne.n	8011f1a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6818      	ldr	r0, [r3, #0]
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	691b      	ldr	r3, [r3, #16]
 8011f0c:	b2d9      	uxtb	r1, r3
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011f14:	461a      	mov	r2, r3
 8011f16:	f003 ffa9 	bl	8015e6c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8011f22:	2300      	movs	r3, #0
}
 8011f24:	4618      	mov	r0, r3
 8011f26:	3710      	adds	r7, #16
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}

08011f2c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b084      	sub	sp, #16
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	460b      	mov	r3, r1
 8011f36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8011f38:	78fb      	ldrb	r3, [r7, #3]
 8011f3a:	f003 020f 	and.w	r2, r3, #15
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	685b      	ldr	r3, [r3, #4]
 8011f42:	429a      	cmp	r2, r3
 8011f44:	d901      	bls.n	8011f4a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8011f46:	2301      	movs	r3, #1
 8011f48:	e042      	b.n	8011fd0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8011f4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	da0f      	bge.n	8011f72 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011f52:	78fb      	ldrb	r3, [r7, #3]
 8011f54:	f003 020f 	and.w	r2, r3, #15
 8011f58:	4613      	mov	r3, r2
 8011f5a:	00db      	lsls	r3, r3, #3
 8011f5c:	1a9b      	subs	r3, r3, r2
 8011f5e:	009b      	lsls	r3, r3, #2
 8011f60:	3338      	adds	r3, #56	; 0x38
 8011f62:	687a      	ldr	r2, [r7, #4]
 8011f64:	4413      	add	r3, r2
 8011f66:	3304      	adds	r3, #4
 8011f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	2201      	movs	r2, #1
 8011f6e:	705a      	strb	r2, [r3, #1]
 8011f70:	e00f      	b.n	8011f92 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011f72:	78fb      	ldrb	r3, [r7, #3]
 8011f74:	f003 020f 	and.w	r2, r3, #15
 8011f78:	4613      	mov	r3, r2
 8011f7a:	00db      	lsls	r3, r3, #3
 8011f7c:	1a9b      	subs	r3, r3, r2
 8011f7e:	009b      	lsls	r3, r3, #2
 8011f80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8011f84:	687a      	ldr	r2, [r7, #4]
 8011f86:	4413      	add	r3, r2
 8011f88:	3304      	adds	r3, #4
 8011f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	2200      	movs	r2, #0
 8011f90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	2200      	movs	r2, #0
 8011f96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011f98:	78fb      	ldrb	r3, [r7, #3]
 8011f9a:	f003 030f 	and.w	r3, r3, #15
 8011f9e:	b2da      	uxtb	r2, r3
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8011faa:	2b01      	cmp	r3, #1
 8011fac:	d101      	bne.n	8011fb2 <HAL_PCD_EP_ClrStall+0x86>
 8011fae:	2302      	movs	r3, #2
 8011fb0:	e00e      	b.n	8011fd0 <HAL_PCD_EP_ClrStall+0xa4>
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2201      	movs	r2, #1
 8011fb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	68f9      	ldr	r1, [r7, #12]
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f003 fdc0 	bl	8015b46 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8011fce:	2300      	movs	r3, #0
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3710      	adds	r7, #16
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bd80      	pop	{r7, pc}

08011fd8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b08a      	sub	sp, #40	; 0x28
 8011fdc:	af02      	add	r7, sp, #8
 8011fde:	6078      	str	r0, [r7, #4]
 8011fe0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fe8:	697b      	ldr	r3, [r7, #20]
 8011fea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8011fec:	683a      	ldr	r2, [r7, #0]
 8011fee:	4613      	mov	r3, r2
 8011ff0:	00db      	lsls	r3, r3, #3
 8011ff2:	1a9b      	subs	r3, r3, r2
 8011ff4:	009b      	lsls	r3, r3, #2
 8011ff6:	3338      	adds	r3, #56	; 0x38
 8011ff8:	687a      	ldr	r2, [r7, #4]
 8011ffa:	4413      	add	r3, r2
 8011ffc:	3304      	adds	r3, #4
 8011ffe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	699a      	ldr	r2, [r3, #24]
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	695b      	ldr	r3, [r3, #20]
 8012008:	429a      	cmp	r2, r3
 801200a:	d901      	bls.n	8012010 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 801200c:	2301      	movs	r3, #1
 801200e:	e06c      	b.n	80120ea <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	695a      	ldr	r2, [r3, #20]
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	699b      	ldr	r3, [r3, #24]
 8012018:	1ad3      	subs	r3, r2, r3
 801201a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	689b      	ldr	r3, [r3, #8]
 8012020:	69fa      	ldr	r2, [r7, #28]
 8012022:	429a      	cmp	r2, r3
 8012024:	d902      	bls.n	801202c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	689b      	ldr	r3, [r3, #8]
 801202a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 801202c:	69fb      	ldr	r3, [r7, #28]
 801202e:	3303      	adds	r3, #3
 8012030:	089b      	lsrs	r3, r3, #2
 8012032:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8012034:	e02b      	b.n	801208e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	695a      	ldr	r2, [r3, #20]
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	699b      	ldr	r3, [r3, #24]
 801203e:	1ad3      	subs	r3, r2, r3
 8012040:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	689b      	ldr	r3, [r3, #8]
 8012046:	69fa      	ldr	r2, [r7, #28]
 8012048:	429a      	cmp	r2, r3
 801204a:	d902      	bls.n	8012052 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	689b      	ldr	r3, [r3, #8]
 8012050:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8012052:	69fb      	ldr	r3, [r7, #28]
 8012054:	3303      	adds	r3, #3
 8012056:	089b      	lsrs	r3, r3, #2
 8012058:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	68d9      	ldr	r1, [r3, #12]
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	b2da      	uxtb	r2, r3
 8012062:	69fb      	ldr	r3, [r7, #28]
 8012064:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801206a:	b2db      	uxtb	r3, r3
 801206c:	9300      	str	r3, [sp, #0]
 801206e:	4603      	mov	r3, r0
 8012070:	6978      	ldr	r0, [r7, #20]
 8012072:	f003 fc64 	bl	801593e <USB_WritePacket>

    ep->xfer_buff  += len;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	68da      	ldr	r2, [r3, #12]
 801207a:	69fb      	ldr	r3, [r7, #28]
 801207c:	441a      	add	r2, r3
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	699a      	ldr	r2, [r3, #24]
 8012086:	69fb      	ldr	r3, [r7, #28]
 8012088:	441a      	add	r2, r3
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	015a      	lsls	r2, r3, #5
 8012092:	693b      	ldr	r3, [r7, #16]
 8012094:	4413      	add	r3, r2
 8012096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801209a:	699b      	ldr	r3, [r3, #24]
 801209c:	b29b      	uxth	r3, r3
 801209e:	69ba      	ldr	r2, [r7, #24]
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d809      	bhi.n	80120b8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	699a      	ldr	r2, [r3, #24]
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80120ac:	429a      	cmp	r2, r3
 80120ae:	d203      	bcs.n	80120b8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	695b      	ldr	r3, [r3, #20]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d1be      	bne.n	8012036 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	695a      	ldr	r2, [r3, #20]
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	699b      	ldr	r3, [r3, #24]
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d811      	bhi.n	80120e8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	f003 030f 	and.w	r3, r3, #15
 80120ca:	2201      	movs	r2, #1
 80120cc:	fa02 f303 	lsl.w	r3, r2, r3
 80120d0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	43db      	mvns	r3, r3
 80120de:	6939      	ldr	r1, [r7, #16]
 80120e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80120e4:	4013      	ands	r3, r2
 80120e6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80120e8:	2300      	movs	r3, #0
}
 80120ea:	4618      	mov	r0, r3
 80120ec:	3720      	adds	r7, #32
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}
	...

080120f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b086      	sub	sp, #24
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
 80120fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012104:	697b      	ldr	r3, [r7, #20]
 8012106:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	333c      	adds	r3, #60	; 0x3c
 801210c:	3304      	adds	r3, #4
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	015a      	lsls	r2, r3, #5
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	4413      	add	r3, r2
 801211a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801211e:	689b      	ldr	r3, [r3, #8]
 8012120:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	691b      	ldr	r3, [r3, #16]
 8012126:	2b01      	cmp	r3, #1
 8012128:	f040 80a0 	bne.w	801226c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	f003 0308 	and.w	r3, r3, #8
 8012132:	2b00      	cmp	r3, #0
 8012134:	d015      	beq.n	8012162 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	4a72      	ldr	r2, [pc, #456]	; (8012304 <PCD_EP_OutXfrComplete_int+0x210>)
 801213a:	4293      	cmp	r3, r2
 801213c:	f240 80dd 	bls.w	80122fa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012146:	2b00      	cmp	r3, #0
 8012148:	f000 80d7 	beq.w	80122fa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801214c:	683b      	ldr	r3, [r7, #0]
 801214e:	015a      	lsls	r2, r3, #5
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	4413      	add	r3, r2
 8012154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012158:	461a      	mov	r2, r3
 801215a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801215e:	6093      	str	r3, [r2, #8]
 8012160:	e0cb      	b.n	80122fa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	f003 0320 	and.w	r3, r3, #32
 8012168:	2b00      	cmp	r3, #0
 801216a:	d009      	beq.n	8012180 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	015a      	lsls	r2, r3, #5
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	4413      	add	r3, r2
 8012174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012178:	461a      	mov	r2, r3
 801217a:	2320      	movs	r3, #32
 801217c:	6093      	str	r3, [r2, #8]
 801217e:	e0bc      	b.n	80122fa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8012180:	68bb      	ldr	r3, [r7, #8]
 8012182:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8012186:	2b00      	cmp	r3, #0
 8012188:	f040 80b7 	bne.w	80122fa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	4a5d      	ldr	r2, [pc, #372]	; (8012304 <PCD_EP_OutXfrComplete_int+0x210>)
 8012190:	4293      	cmp	r3, r2
 8012192:	d90f      	bls.n	80121b4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801219a:	2b00      	cmp	r3, #0
 801219c:	d00a      	beq.n	80121b4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801219e:	683b      	ldr	r3, [r7, #0]
 80121a0:	015a      	lsls	r2, r3, #5
 80121a2:	693b      	ldr	r3, [r7, #16]
 80121a4:	4413      	add	r3, r2
 80121a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121aa:	461a      	mov	r2, r3
 80121ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80121b0:	6093      	str	r3, [r2, #8]
 80121b2:	e0a2      	b.n	80122fa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80121b4:	6879      	ldr	r1, [r7, #4]
 80121b6:	683a      	ldr	r2, [r7, #0]
 80121b8:	4613      	mov	r3, r2
 80121ba:	00db      	lsls	r3, r3, #3
 80121bc:	1a9b      	subs	r3, r3, r2
 80121be:	009b      	lsls	r3, r3, #2
 80121c0:	440b      	add	r3, r1
 80121c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80121c6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	0159      	lsls	r1, r3, #5
 80121cc:	693b      	ldr	r3, [r7, #16]
 80121ce:	440b      	add	r3, r1
 80121d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121d4:	691b      	ldr	r3, [r3, #16]
 80121d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80121da:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	683a      	ldr	r2, [r7, #0]
 80121e0:	4613      	mov	r3, r2
 80121e2:	00db      	lsls	r3, r3, #3
 80121e4:	1a9b      	subs	r3, r3, r2
 80121e6:	009b      	lsls	r3, r3, #2
 80121e8:	4403      	add	r3, r0
 80121ea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80121ee:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80121f0:	6879      	ldr	r1, [r7, #4]
 80121f2:	683a      	ldr	r2, [r7, #0]
 80121f4:	4613      	mov	r3, r2
 80121f6:	00db      	lsls	r3, r3, #3
 80121f8:	1a9b      	subs	r3, r3, r2
 80121fa:	009b      	lsls	r3, r3, #2
 80121fc:	440b      	add	r3, r1
 80121fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012202:	6819      	ldr	r1, [r3, #0]
 8012204:	6878      	ldr	r0, [r7, #4]
 8012206:	683a      	ldr	r2, [r7, #0]
 8012208:	4613      	mov	r3, r2
 801220a:	00db      	lsls	r3, r3, #3
 801220c:	1a9b      	subs	r3, r3, r2
 801220e:	009b      	lsls	r3, r3, #2
 8012210:	4403      	add	r3, r0
 8012212:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	4419      	add	r1, r3
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	683a      	ldr	r2, [r7, #0]
 801221e:	4613      	mov	r3, r2
 8012220:	00db      	lsls	r3, r3, #3
 8012222:	1a9b      	subs	r3, r3, r2
 8012224:	009b      	lsls	r3, r3, #2
 8012226:	4403      	add	r3, r0
 8012228:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801222c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d114      	bne.n	801225e <PCD_EP_OutXfrComplete_int+0x16a>
 8012234:	6879      	ldr	r1, [r7, #4]
 8012236:	683a      	ldr	r2, [r7, #0]
 8012238:	4613      	mov	r3, r2
 801223a:	00db      	lsls	r3, r3, #3
 801223c:	1a9b      	subs	r3, r3, r2
 801223e:	009b      	lsls	r3, r3, #2
 8012240:	440b      	add	r3, r1
 8012242:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d108      	bne.n	801225e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6818      	ldr	r0, [r3, #0]
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012256:	461a      	mov	r2, r3
 8012258:	2101      	movs	r1, #1
 801225a:	f003 fe07 	bl	8015e6c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	b2db      	uxtb	r3, r3
 8012262:	4619      	mov	r1, r3
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f009 f8cb 	bl	801b400 <HAL_PCD_DataOutStageCallback>
 801226a:	e046      	b.n	80122fa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	4a26      	ldr	r2, [pc, #152]	; (8012308 <PCD_EP_OutXfrComplete_int+0x214>)
 8012270:	4293      	cmp	r3, r2
 8012272:	d124      	bne.n	80122be <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801227a:	2b00      	cmp	r3, #0
 801227c:	d00a      	beq.n	8012294 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	015a      	lsls	r2, r3, #5
 8012282:	693b      	ldr	r3, [r7, #16]
 8012284:	4413      	add	r3, r2
 8012286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801228a:	461a      	mov	r2, r3
 801228c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012290:	6093      	str	r3, [r2, #8]
 8012292:	e032      	b.n	80122fa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8012294:	68bb      	ldr	r3, [r7, #8]
 8012296:	f003 0320 	and.w	r3, r3, #32
 801229a:	2b00      	cmp	r3, #0
 801229c:	d008      	beq.n	80122b0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801229e:	683b      	ldr	r3, [r7, #0]
 80122a0:	015a      	lsls	r2, r3, #5
 80122a2:	693b      	ldr	r3, [r7, #16]
 80122a4:	4413      	add	r3, r2
 80122a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122aa:	461a      	mov	r2, r3
 80122ac:	2320      	movs	r3, #32
 80122ae:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80122b0:	683b      	ldr	r3, [r7, #0]
 80122b2:	b2db      	uxtb	r3, r3
 80122b4:	4619      	mov	r1, r3
 80122b6:	6878      	ldr	r0, [r7, #4]
 80122b8:	f009 f8a2 	bl	801b400 <HAL_PCD_DataOutStageCallback>
 80122bc:	e01d      	b.n	80122fa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d114      	bne.n	80122ee <PCD_EP_OutXfrComplete_int+0x1fa>
 80122c4:	6879      	ldr	r1, [r7, #4]
 80122c6:	683a      	ldr	r2, [r7, #0]
 80122c8:	4613      	mov	r3, r2
 80122ca:	00db      	lsls	r3, r3, #3
 80122cc:	1a9b      	subs	r3, r3, r2
 80122ce:	009b      	lsls	r3, r3, #2
 80122d0:	440b      	add	r3, r1
 80122d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d108      	bne.n	80122ee <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	6818      	ldr	r0, [r3, #0]
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80122e6:	461a      	mov	r2, r3
 80122e8:	2100      	movs	r1, #0
 80122ea:	f003 fdbf 	bl	8015e6c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	b2db      	uxtb	r3, r3
 80122f2:	4619      	mov	r1, r3
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	f009 f883 	bl	801b400 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80122fa:	2300      	movs	r3, #0
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	3718      	adds	r7, #24
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}
 8012304:	4f54300a 	.word	0x4f54300a
 8012308:	4f54310a 	.word	0x4f54310a

0801230c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b086      	sub	sp, #24
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
 8012314:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012320:	697b      	ldr	r3, [r7, #20]
 8012322:	333c      	adds	r3, #60	; 0x3c
 8012324:	3304      	adds	r3, #4
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	015a      	lsls	r2, r3, #5
 801232e:	693b      	ldr	r3, [r7, #16]
 8012330:	4413      	add	r3, r2
 8012332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012336:	689b      	ldr	r3, [r3, #8]
 8012338:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	4a15      	ldr	r2, [pc, #84]	; (8012394 <PCD_EP_OutSetupPacket_int+0x88>)
 801233e:	4293      	cmp	r3, r2
 8012340:	d90e      	bls.n	8012360 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8012348:	2b00      	cmp	r3, #0
 801234a:	d009      	beq.n	8012360 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	015a      	lsls	r2, r3, #5
 8012350:	693b      	ldr	r3, [r7, #16]
 8012352:	4413      	add	r3, r2
 8012354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012358:	461a      	mov	r2, r3
 801235a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801235e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	f009 f83b 	bl	801b3dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	4a0a      	ldr	r2, [pc, #40]	; (8012394 <PCD_EP_OutSetupPacket_int+0x88>)
 801236a:	4293      	cmp	r3, r2
 801236c:	d90c      	bls.n	8012388 <PCD_EP_OutSetupPacket_int+0x7c>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	691b      	ldr	r3, [r3, #16]
 8012372:	2b01      	cmp	r3, #1
 8012374:	d108      	bne.n	8012388 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6818      	ldr	r0, [r3, #0]
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012380:	461a      	mov	r2, r3
 8012382:	2101      	movs	r1, #1
 8012384:	f003 fd72 	bl	8015e6c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8012388:	2300      	movs	r3, #0
}
 801238a:	4618      	mov	r0, r3
 801238c:	3718      	adds	r7, #24
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}
 8012392:	bf00      	nop
 8012394:	4f54300a 	.word	0x4f54300a

08012398 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8012398:	b480      	push	{r7}
 801239a:	b085      	sub	sp, #20
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
 80123a0:	460b      	mov	r3, r1
 80123a2:	70fb      	strb	r3, [r7, #3]
 80123a4:	4613      	mov	r3, r2
 80123a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80123b0:	78fb      	ldrb	r3, [r7, #3]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d107      	bne.n	80123c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80123b6:	883b      	ldrh	r3, [r7, #0]
 80123b8:	0419      	lsls	r1, r3, #16
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	68ba      	ldr	r2, [r7, #8]
 80123c0:	430a      	orrs	r2, r1
 80123c2:	629a      	str	r2, [r3, #40]	; 0x28
 80123c4:	e028      	b.n	8012418 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123cc:	0c1b      	lsrs	r3, r3, #16
 80123ce:	68ba      	ldr	r2, [r7, #8]
 80123d0:	4413      	add	r3, r2
 80123d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80123d4:	2300      	movs	r3, #0
 80123d6:	73fb      	strb	r3, [r7, #15]
 80123d8:	e00d      	b.n	80123f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	681a      	ldr	r2, [r3, #0]
 80123de:	7bfb      	ldrb	r3, [r7, #15]
 80123e0:	3340      	adds	r3, #64	; 0x40
 80123e2:	009b      	lsls	r3, r3, #2
 80123e4:	4413      	add	r3, r2
 80123e6:	685b      	ldr	r3, [r3, #4]
 80123e8:	0c1b      	lsrs	r3, r3, #16
 80123ea:	68ba      	ldr	r2, [r7, #8]
 80123ec:	4413      	add	r3, r2
 80123ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80123f0:	7bfb      	ldrb	r3, [r7, #15]
 80123f2:	3301      	adds	r3, #1
 80123f4:	73fb      	strb	r3, [r7, #15]
 80123f6:	7bfa      	ldrb	r2, [r7, #15]
 80123f8:	78fb      	ldrb	r3, [r7, #3]
 80123fa:	3b01      	subs	r3, #1
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d3ec      	bcc.n	80123da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8012400:	883b      	ldrh	r3, [r7, #0]
 8012402:	0418      	lsls	r0, r3, #16
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	6819      	ldr	r1, [r3, #0]
 8012408:	78fb      	ldrb	r3, [r7, #3]
 801240a:	3b01      	subs	r3, #1
 801240c:	68ba      	ldr	r2, [r7, #8]
 801240e:	4302      	orrs	r2, r0
 8012410:	3340      	adds	r3, #64	; 0x40
 8012412:	009b      	lsls	r3, r3, #2
 8012414:	440b      	add	r3, r1
 8012416:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8012418:	2300      	movs	r3, #0
}
 801241a:	4618      	mov	r0, r3
 801241c:	3714      	adds	r7, #20
 801241e:	46bd      	mov	sp, r7
 8012420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012424:	4770      	bx	lr

08012426 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8012426:	b480      	push	{r7}
 8012428:	b083      	sub	sp, #12
 801242a:	af00      	add	r7, sp, #0
 801242c:	6078      	str	r0, [r7, #4]
 801242e:	460b      	mov	r3, r1
 8012430:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	887a      	ldrh	r2, [r7, #2]
 8012438:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801243a:	2300      	movs	r3, #0
}
 801243c:	4618      	mov	r0, r3
 801243e:	370c      	adds	r7, #12
 8012440:	46bd      	mov	sp, r7
 8012442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012446:	4770      	bx	lr

08012448 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8012448:	b480      	push	{r7}
 801244a:	b083      	sub	sp, #12
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
 8012450:	460b      	mov	r3, r1
 8012452:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8012454:	bf00      	nop
 8012456:	370c      	adds	r7, #12
 8012458:	46bd      	mov	sp, r7
 801245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801245e:	4770      	bx	lr

08012460 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8012460:	b480      	push	{r7}
 8012462:	b083      	sub	sp, #12
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
 8012468:	460b      	mov	r3, r1
 801246a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 801246c:	4b10      	ldr	r3, [pc, #64]	; (80124b0 <HAL_PWR_EnterSTOPMode+0x50>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	f023 0203 	bic.w	r2, r3, #3
 8012474:	490e      	ldr	r1, [pc, #56]	; (80124b0 <HAL_PWR_EnterSTOPMode+0x50>)
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	4313      	orrs	r3, r2
 801247a:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 801247c:	4b0d      	ldr	r3, [pc, #52]	; (80124b4 <HAL_PWR_EnterSTOPMode+0x54>)
 801247e:	691b      	ldr	r3, [r3, #16]
 8012480:	4a0c      	ldr	r2, [pc, #48]	; (80124b4 <HAL_PWR_EnterSTOPMode+0x54>)
 8012482:	f043 0304 	orr.w	r3, r3, #4
 8012486:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8012488:	78fb      	ldrb	r3, [r7, #3]
 801248a:	2b01      	cmp	r3, #1
 801248c:	d101      	bne.n	8012492 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 801248e:	bf30      	wfi
 8012490:	e002      	b.n	8012498 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8012492:	bf40      	sev
    __WFE();
 8012494:	bf20      	wfe
    __WFE();
 8012496:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8012498:	4b06      	ldr	r3, [pc, #24]	; (80124b4 <HAL_PWR_EnterSTOPMode+0x54>)
 801249a:	691b      	ldr	r3, [r3, #16]
 801249c:	4a05      	ldr	r2, [pc, #20]	; (80124b4 <HAL_PWR_EnterSTOPMode+0x54>)
 801249e:	f023 0304 	bic.w	r3, r3, #4
 80124a2:	6113      	str	r3, [r2, #16]
}
 80124a4:	bf00      	nop
 80124a6:	370c      	adds	r7, #12
 80124a8:	46bd      	mov	sp, r7
 80124aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ae:	4770      	bx	lr
 80124b0:	40007000 	.word	0x40007000
 80124b4:	e000ed00 	.word	0xe000ed00

080124b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b086      	sub	sp, #24
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d101      	bne.n	80124ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80124c6:	2301      	movs	r3, #1
 80124c8:	e264      	b.n	8012994 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	f003 0301 	and.w	r3, r3, #1
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d075      	beq.n	80125c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80124d6:	4ba3      	ldr	r3, [pc, #652]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 80124d8:	689b      	ldr	r3, [r3, #8]
 80124da:	f003 030c 	and.w	r3, r3, #12
 80124de:	2b04      	cmp	r3, #4
 80124e0:	d00c      	beq.n	80124fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80124e2:	4ba0      	ldr	r3, [pc, #640]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 80124e4:	689b      	ldr	r3, [r3, #8]
 80124e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80124ea:	2b08      	cmp	r3, #8
 80124ec:	d112      	bne.n	8012514 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80124ee:	4b9d      	ldr	r3, [pc, #628]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 80124f0:	685b      	ldr	r3, [r3, #4]
 80124f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80124f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80124fa:	d10b      	bne.n	8012514 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80124fc:	4b99      	ldr	r3, [pc, #612]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012504:	2b00      	cmp	r3, #0
 8012506:	d05b      	beq.n	80125c0 <HAL_RCC_OscConfig+0x108>
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	685b      	ldr	r3, [r3, #4]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d157      	bne.n	80125c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8012510:	2301      	movs	r3, #1
 8012512:	e23f      	b.n	8012994 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	685b      	ldr	r3, [r3, #4]
 8012518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801251c:	d106      	bne.n	801252c <HAL_RCC_OscConfig+0x74>
 801251e:	4b91      	ldr	r3, [pc, #580]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	4a90      	ldr	r2, [pc, #576]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 8012524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012528:	6013      	str	r3, [r2, #0]
 801252a:	e01d      	b.n	8012568 <HAL_RCC_OscConfig+0xb0>
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	685b      	ldr	r3, [r3, #4]
 8012530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012534:	d10c      	bne.n	8012550 <HAL_RCC_OscConfig+0x98>
 8012536:	4b8b      	ldr	r3, [pc, #556]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	4a8a      	ldr	r2, [pc, #552]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 801253c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012540:	6013      	str	r3, [r2, #0]
 8012542:	4b88      	ldr	r3, [pc, #544]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	4a87      	ldr	r2, [pc, #540]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 8012548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801254c:	6013      	str	r3, [r2, #0]
 801254e:	e00b      	b.n	8012568 <HAL_RCC_OscConfig+0xb0>
 8012550:	4b84      	ldr	r3, [pc, #528]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	4a83      	ldr	r2, [pc, #524]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 8012556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801255a:	6013      	str	r3, [r2, #0]
 801255c:	4b81      	ldr	r3, [pc, #516]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	4a80      	ldr	r2, [pc, #512]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 8012562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	685b      	ldr	r3, [r3, #4]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d013      	beq.n	8012598 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012570:	f7fd fbec 	bl	800fd4c <HAL_GetTick>
 8012574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012576:	e008      	b.n	801258a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012578:	f7fd fbe8 	bl	800fd4c <HAL_GetTick>
 801257c:	4602      	mov	r2, r0
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	1ad3      	subs	r3, r2, r3
 8012582:	2b64      	cmp	r3, #100	; 0x64
 8012584:	d901      	bls.n	801258a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8012586:	2303      	movs	r3, #3
 8012588:	e204      	b.n	8012994 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801258a:	4b76      	ldr	r3, [pc, #472]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012592:	2b00      	cmp	r3, #0
 8012594:	d0f0      	beq.n	8012578 <HAL_RCC_OscConfig+0xc0>
 8012596:	e014      	b.n	80125c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012598:	f7fd fbd8 	bl	800fd4c <HAL_GetTick>
 801259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801259e:	e008      	b.n	80125b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80125a0:	f7fd fbd4 	bl	800fd4c <HAL_GetTick>
 80125a4:	4602      	mov	r2, r0
 80125a6:	693b      	ldr	r3, [r7, #16]
 80125a8:	1ad3      	subs	r3, r2, r3
 80125aa:	2b64      	cmp	r3, #100	; 0x64
 80125ac:	d901      	bls.n	80125b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80125ae:	2303      	movs	r3, #3
 80125b0:	e1f0      	b.n	8012994 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80125b2:	4b6c      	ldr	r3, [pc, #432]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d1f0      	bne.n	80125a0 <HAL_RCC_OscConfig+0xe8>
 80125be:	e000      	b.n	80125c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80125c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	f003 0302 	and.w	r3, r3, #2
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d063      	beq.n	8012696 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80125ce:	4b65      	ldr	r3, [pc, #404]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 80125d0:	689b      	ldr	r3, [r3, #8]
 80125d2:	f003 030c 	and.w	r3, r3, #12
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d00b      	beq.n	80125f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80125da:	4b62      	ldr	r3, [pc, #392]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 80125dc:	689b      	ldr	r3, [r3, #8]
 80125de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80125e2:	2b08      	cmp	r3, #8
 80125e4:	d11c      	bne.n	8012620 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80125e6:	4b5f      	ldr	r3, [pc, #380]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 80125e8:	685b      	ldr	r3, [r3, #4]
 80125ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d116      	bne.n	8012620 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80125f2:	4b5c      	ldr	r3, [pc, #368]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	f003 0302 	and.w	r3, r3, #2
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d005      	beq.n	801260a <HAL_RCC_OscConfig+0x152>
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	68db      	ldr	r3, [r3, #12]
 8012602:	2b01      	cmp	r3, #1
 8012604:	d001      	beq.n	801260a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8012606:	2301      	movs	r3, #1
 8012608:	e1c4      	b.n	8012994 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801260a:	4b56      	ldr	r3, [pc, #344]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	691b      	ldr	r3, [r3, #16]
 8012616:	00db      	lsls	r3, r3, #3
 8012618:	4952      	ldr	r1, [pc, #328]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 801261a:	4313      	orrs	r3, r2
 801261c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801261e:	e03a      	b.n	8012696 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	68db      	ldr	r3, [r3, #12]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d020      	beq.n	801266a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012628:	4b4f      	ldr	r3, [pc, #316]	; (8012768 <HAL_RCC_OscConfig+0x2b0>)
 801262a:	2201      	movs	r2, #1
 801262c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801262e:	f7fd fb8d 	bl	800fd4c <HAL_GetTick>
 8012632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012634:	e008      	b.n	8012648 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012636:	f7fd fb89 	bl	800fd4c <HAL_GetTick>
 801263a:	4602      	mov	r2, r0
 801263c:	693b      	ldr	r3, [r7, #16]
 801263e:	1ad3      	subs	r3, r2, r3
 8012640:	2b02      	cmp	r3, #2
 8012642:	d901      	bls.n	8012648 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012644:	2303      	movs	r3, #3
 8012646:	e1a5      	b.n	8012994 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012648:	4b46      	ldr	r3, [pc, #280]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	f003 0302 	and.w	r3, r3, #2
 8012650:	2b00      	cmp	r3, #0
 8012652:	d0f0      	beq.n	8012636 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012654:	4b43      	ldr	r3, [pc, #268]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	691b      	ldr	r3, [r3, #16]
 8012660:	00db      	lsls	r3, r3, #3
 8012662:	4940      	ldr	r1, [pc, #256]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 8012664:	4313      	orrs	r3, r2
 8012666:	600b      	str	r3, [r1, #0]
 8012668:	e015      	b.n	8012696 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801266a:	4b3f      	ldr	r3, [pc, #252]	; (8012768 <HAL_RCC_OscConfig+0x2b0>)
 801266c:	2200      	movs	r2, #0
 801266e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012670:	f7fd fb6c 	bl	800fd4c <HAL_GetTick>
 8012674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012676:	e008      	b.n	801268a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012678:	f7fd fb68 	bl	800fd4c <HAL_GetTick>
 801267c:	4602      	mov	r2, r0
 801267e:	693b      	ldr	r3, [r7, #16]
 8012680:	1ad3      	subs	r3, r2, r3
 8012682:	2b02      	cmp	r3, #2
 8012684:	d901      	bls.n	801268a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012686:	2303      	movs	r3, #3
 8012688:	e184      	b.n	8012994 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801268a:	4b36      	ldr	r3, [pc, #216]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	f003 0302 	and.w	r3, r3, #2
 8012692:	2b00      	cmp	r3, #0
 8012694:	d1f0      	bne.n	8012678 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	f003 0308 	and.w	r3, r3, #8
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d030      	beq.n	8012704 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	695b      	ldr	r3, [r3, #20]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d016      	beq.n	80126d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80126aa:	4b30      	ldr	r3, [pc, #192]	; (801276c <HAL_RCC_OscConfig+0x2b4>)
 80126ac:	2201      	movs	r2, #1
 80126ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80126b0:	f7fd fb4c 	bl	800fd4c <HAL_GetTick>
 80126b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80126b6:	e008      	b.n	80126ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80126b8:	f7fd fb48 	bl	800fd4c <HAL_GetTick>
 80126bc:	4602      	mov	r2, r0
 80126be:	693b      	ldr	r3, [r7, #16]
 80126c0:	1ad3      	subs	r3, r2, r3
 80126c2:	2b02      	cmp	r3, #2
 80126c4:	d901      	bls.n	80126ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80126c6:	2303      	movs	r3, #3
 80126c8:	e164      	b.n	8012994 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80126ca:	4b26      	ldr	r3, [pc, #152]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 80126cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126ce:	f003 0302 	and.w	r3, r3, #2
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d0f0      	beq.n	80126b8 <HAL_RCC_OscConfig+0x200>
 80126d6:	e015      	b.n	8012704 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80126d8:	4b24      	ldr	r3, [pc, #144]	; (801276c <HAL_RCC_OscConfig+0x2b4>)
 80126da:	2200      	movs	r2, #0
 80126dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80126de:	f7fd fb35 	bl	800fd4c <HAL_GetTick>
 80126e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80126e4:	e008      	b.n	80126f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80126e6:	f7fd fb31 	bl	800fd4c <HAL_GetTick>
 80126ea:	4602      	mov	r2, r0
 80126ec:	693b      	ldr	r3, [r7, #16]
 80126ee:	1ad3      	subs	r3, r2, r3
 80126f0:	2b02      	cmp	r3, #2
 80126f2:	d901      	bls.n	80126f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80126f4:	2303      	movs	r3, #3
 80126f6:	e14d      	b.n	8012994 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80126f8:	4b1a      	ldr	r3, [pc, #104]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 80126fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126fc:	f003 0302 	and.w	r3, r3, #2
 8012700:	2b00      	cmp	r3, #0
 8012702:	d1f0      	bne.n	80126e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	f003 0304 	and.w	r3, r3, #4
 801270c:	2b00      	cmp	r3, #0
 801270e:	f000 80a0 	beq.w	8012852 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012712:	2300      	movs	r3, #0
 8012714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012716:	4b13      	ldr	r3, [pc, #76]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 8012718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801271e:	2b00      	cmp	r3, #0
 8012720:	d10f      	bne.n	8012742 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012722:	2300      	movs	r3, #0
 8012724:	60bb      	str	r3, [r7, #8]
 8012726:	4b0f      	ldr	r3, [pc, #60]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 8012728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801272a:	4a0e      	ldr	r2, [pc, #56]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 801272c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012730:	6413      	str	r3, [r2, #64]	; 0x40
 8012732:	4b0c      	ldr	r3, [pc, #48]	; (8012764 <HAL_RCC_OscConfig+0x2ac>)
 8012734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801273a:	60bb      	str	r3, [r7, #8]
 801273c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801273e:	2301      	movs	r3, #1
 8012740:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012742:	4b0b      	ldr	r3, [pc, #44]	; (8012770 <HAL_RCC_OscConfig+0x2b8>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801274a:	2b00      	cmp	r3, #0
 801274c:	d121      	bne.n	8012792 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801274e:	4b08      	ldr	r3, [pc, #32]	; (8012770 <HAL_RCC_OscConfig+0x2b8>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	4a07      	ldr	r2, [pc, #28]	; (8012770 <HAL_RCC_OscConfig+0x2b8>)
 8012754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801275a:	f7fd faf7 	bl	800fd4c <HAL_GetTick>
 801275e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012760:	e011      	b.n	8012786 <HAL_RCC_OscConfig+0x2ce>
 8012762:	bf00      	nop
 8012764:	40023800 	.word	0x40023800
 8012768:	42470000 	.word	0x42470000
 801276c:	42470e80 	.word	0x42470e80
 8012770:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012774:	f7fd faea 	bl	800fd4c <HAL_GetTick>
 8012778:	4602      	mov	r2, r0
 801277a:	693b      	ldr	r3, [r7, #16]
 801277c:	1ad3      	subs	r3, r2, r3
 801277e:	2b02      	cmp	r3, #2
 8012780:	d901      	bls.n	8012786 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8012782:	2303      	movs	r3, #3
 8012784:	e106      	b.n	8012994 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012786:	4b85      	ldr	r3, [pc, #532]	; (801299c <HAL_RCC_OscConfig+0x4e4>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801278e:	2b00      	cmp	r3, #0
 8012790:	d0f0      	beq.n	8012774 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	689b      	ldr	r3, [r3, #8]
 8012796:	2b01      	cmp	r3, #1
 8012798:	d106      	bne.n	80127a8 <HAL_RCC_OscConfig+0x2f0>
 801279a:	4b81      	ldr	r3, [pc, #516]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 801279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801279e:	4a80      	ldr	r2, [pc, #512]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 80127a0:	f043 0301 	orr.w	r3, r3, #1
 80127a4:	6713      	str	r3, [r2, #112]	; 0x70
 80127a6:	e01c      	b.n	80127e2 <HAL_RCC_OscConfig+0x32a>
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	689b      	ldr	r3, [r3, #8]
 80127ac:	2b05      	cmp	r3, #5
 80127ae:	d10c      	bne.n	80127ca <HAL_RCC_OscConfig+0x312>
 80127b0:	4b7b      	ldr	r3, [pc, #492]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 80127b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127b4:	4a7a      	ldr	r2, [pc, #488]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 80127b6:	f043 0304 	orr.w	r3, r3, #4
 80127ba:	6713      	str	r3, [r2, #112]	; 0x70
 80127bc:	4b78      	ldr	r3, [pc, #480]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 80127be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127c0:	4a77      	ldr	r2, [pc, #476]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 80127c2:	f043 0301 	orr.w	r3, r3, #1
 80127c6:	6713      	str	r3, [r2, #112]	; 0x70
 80127c8:	e00b      	b.n	80127e2 <HAL_RCC_OscConfig+0x32a>
 80127ca:	4b75      	ldr	r3, [pc, #468]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 80127cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127ce:	4a74      	ldr	r2, [pc, #464]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 80127d0:	f023 0301 	bic.w	r3, r3, #1
 80127d4:	6713      	str	r3, [r2, #112]	; 0x70
 80127d6:	4b72      	ldr	r3, [pc, #456]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 80127d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127da:	4a71      	ldr	r2, [pc, #452]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 80127dc:	f023 0304 	bic.w	r3, r3, #4
 80127e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	689b      	ldr	r3, [r3, #8]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d015      	beq.n	8012816 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80127ea:	f7fd faaf 	bl	800fd4c <HAL_GetTick>
 80127ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80127f0:	e00a      	b.n	8012808 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80127f2:	f7fd faab 	bl	800fd4c <HAL_GetTick>
 80127f6:	4602      	mov	r2, r0
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	1ad3      	subs	r3, r2, r3
 80127fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012800:	4293      	cmp	r3, r2
 8012802:	d901      	bls.n	8012808 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8012804:	2303      	movs	r3, #3
 8012806:	e0c5      	b.n	8012994 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012808:	4b65      	ldr	r3, [pc, #404]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 801280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801280c:	f003 0302 	and.w	r3, r3, #2
 8012810:	2b00      	cmp	r3, #0
 8012812:	d0ee      	beq.n	80127f2 <HAL_RCC_OscConfig+0x33a>
 8012814:	e014      	b.n	8012840 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012816:	f7fd fa99 	bl	800fd4c <HAL_GetTick>
 801281a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801281c:	e00a      	b.n	8012834 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801281e:	f7fd fa95 	bl	800fd4c <HAL_GetTick>
 8012822:	4602      	mov	r2, r0
 8012824:	693b      	ldr	r3, [r7, #16]
 8012826:	1ad3      	subs	r3, r2, r3
 8012828:	f241 3288 	movw	r2, #5000	; 0x1388
 801282c:	4293      	cmp	r3, r2
 801282e:	d901      	bls.n	8012834 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8012830:	2303      	movs	r3, #3
 8012832:	e0af      	b.n	8012994 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012834:	4b5a      	ldr	r3, [pc, #360]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 8012836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012838:	f003 0302 	and.w	r3, r3, #2
 801283c:	2b00      	cmp	r3, #0
 801283e:	d1ee      	bne.n	801281e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012840:	7dfb      	ldrb	r3, [r7, #23]
 8012842:	2b01      	cmp	r3, #1
 8012844:	d105      	bne.n	8012852 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012846:	4b56      	ldr	r3, [pc, #344]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 8012848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801284a:	4a55      	ldr	r2, [pc, #340]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 801284c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012850:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	699b      	ldr	r3, [r3, #24]
 8012856:	2b00      	cmp	r3, #0
 8012858:	f000 809b 	beq.w	8012992 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801285c:	4b50      	ldr	r3, [pc, #320]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 801285e:	689b      	ldr	r3, [r3, #8]
 8012860:	f003 030c 	and.w	r3, r3, #12
 8012864:	2b08      	cmp	r3, #8
 8012866:	d05c      	beq.n	8012922 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	699b      	ldr	r3, [r3, #24]
 801286c:	2b02      	cmp	r3, #2
 801286e:	d141      	bne.n	80128f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012870:	4b4c      	ldr	r3, [pc, #304]	; (80129a4 <HAL_RCC_OscConfig+0x4ec>)
 8012872:	2200      	movs	r2, #0
 8012874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012876:	f7fd fa69 	bl	800fd4c <HAL_GetTick>
 801287a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801287c:	e008      	b.n	8012890 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801287e:	f7fd fa65 	bl	800fd4c <HAL_GetTick>
 8012882:	4602      	mov	r2, r0
 8012884:	693b      	ldr	r3, [r7, #16]
 8012886:	1ad3      	subs	r3, r2, r3
 8012888:	2b02      	cmp	r3, #2
 801288a:	d901      	bls.n	8012890 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 801288c:	2303      	movs	r3, #3
 801288e:	e081      	b.n	8012994 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012890:	4b43      	ldr	r3, [pc, #268]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012898:	2b00      	cmp	r3, #0
 801289a:	d1f0      	bne.n	801287e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	69da      	ldr	r2, [r3, #28]
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6a1b      	ldr	r3, [r3, #32]
 80128a4:	431a      	orrs	r2, r3
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128aa:	019b      	lsls	r3, r3, #6
 80128ac:	431a      	orrs	r2, r3
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128b2:	085b      	lsrs	r3, r3, #1
 80128b4:	3b01      	subs	r3, #1
 80128b6:	041b      	lsls	r3, r3, #16
 80128b8:	431a      	orrs	r2, r3
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128be:	061b      	lsls	r3, r3, #24
 80128c0:	4937      	ldr	r1, [pc, #220]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 80128c2:	4313      	orrs	r3, r2
 80128c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80128c6:	4b37      	ldr	r3, [pc, #220]	; (80129a4 <HAL_RCC_OscConfig+0x4ec>)
 80128c8:	2201      	movs	r2, #1
 80128ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80128cc:	f7fd fa3e 	bl	800fd4c <HAL_GetTick>
 80128d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80128d2:	e008      	b.n	80128e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80128d4:	f7fd fa3a 	bl	800fd4c <HAL_GetTick>
 80128d8:	4602      	mov	r2, r0
 80128da:	693b      	ldr	r3, [r7, #16]
 80128dc:	1ad3      	subs	r3, r2, r3
 80128de:	2b02      	cmp	r3, #2
 80128e0:	d901      	bls.n	80128e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80128e2:	2303      	movs	r3, #3
 80128e4:	e056      	b.n	8012994 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80128e6:	4b2e      	ldr	r3, [pc, #184]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d0f0      	beq.n	80128d4 <HAL_RCC_OscConfig+0x41c>
 80128f2:	e04e      	b.n	8012992 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80128f4:	4b2b      	ldr	r3, [pc, #172]	; (80129a4 <HAL_RCC_OscConfig+0x4ec>)
 80128f6:	2200      	movs	r2, #0
 80128f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80128fa:	f7fd fa27 	bl	800fd4c <HAL_GetTick>
 80128fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012900:	e008      	b.n	8012914 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012902:	f7fd fa23 	bl	800fd4c <HAL_GetTick>
 8012906:	4602      	mov	r2, r0
 8012908:	693b      	ldr	r3, [r7, #16]
 801290a:	1ad3      	subs	r3, r2, r3
 801290c:	2b02      	cmp	r3, #2
 801290e:	d901      	bls.n	8012914 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8012910:	2303      	movs	r3, #3
 8012912:	e03f      	b.n	8012994 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012914:	4b22      	ldr	r3, [pc, #136]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801291c:	2b00      	cmp	r3, #0
 801291e:	d1f0      	bne.n	8012902 <HAL_RCC_OscConfig+0x44a>
 8012920:	e037      	b.n	8012992 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	699b      	ldr	r3, [r3, #24]
 8012926:	2b01      	cmp	r3, #1
 8012928:	d101      	bne.n	801292e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 801292a:	2301      	movs	r3, #1
 801292c:	e032      	b.n	8012994 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801292e:	4b1c      	ldr	r3, [pc, #112]	; (80129a0 <HAL_RCC_OscConfig+0x4e8>)
 8012930:	685b      	ldr	r3, [r3, #4]
 8012932:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	699b      	ldr	r3, [r3, #24]
 8012938:	2b01      	cmp	r3, #1
 801293a:	d028      	beq.n	801298e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012946:	429a      	cmp	r2, r3
 8012948:	d121      	bne.n	801298e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012954:	429a      	cmp	r2, r3
 8012956:	d11a      	bne.n	801298e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012958:	68fa      	ldr	r2, [r7, #12]
 801295a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801295e:	4013      	ands	r3, r2
 8012960:	687a      	ldr	r2, [r7, #4]
 8012962:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012964:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012966:	4293      	cmp	r3, r2
 8012968:	d111      	bne.n	801298e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012974:	085b      	lsrs	r3, r3, #1
 8012976:	3b01      	subs	r3, #1
 8012978:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801297a:	429a      	cmp	r2, r3
 801297c:	d107      	bne.n	801298e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012988:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801298a:	429a      	cmp	r2, r3
 801298c:	d001      	beq.n	8012992 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 801298e:	2301      	movs	r3, #1
 8012990:	e000      	b.n	8012994 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8012992:	2300      	movs	r3, #0
}
 8012994:	4618      	mov	r0, r3
 8012996:	3718      	adds	r7, #24
 8012998:	46bd      	mov	sp, r7
 801299a:	bd80      	pop	{r7, pc}
 801299c:	40007000 	.word	0x40007000
 80129a0:	40023800 	.word	0x40023800
 80129a4:	42470060 	.word	0x42470060

080129a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b084      	sub	sp, #16
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
 80129b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d101      	bne.n	80129bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80129b8:	2301      	movs	r3, #1
 80129ba:	e0cc      	b.n	8012b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80129bc:	4b68      	ldr	r3, [pc, #416]	; (8012b60 <HAL_RCC_ClockConfig+0x1b8>)
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	f003 0307 	and.w	r3, r3, #7
 80129c4:	683a      	ldr	r2, [r7, #0]
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d90c      	bls.n	80129e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80129ca:	4b65      	ldr	r3, [pc, #404]	; (8012b60 <HAL_RCC_ClockConfig+0x1b8>)
 80129cc:	683a      	ldr	r2, [r7, #0]
 80129ce:	b2d2      	uxtb	r2, r2
 80129d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80129d2:	4b63      	ldr	r3, [pc, #396]	; (8012b60 <HAL_RCC_ClockConfig+0x1b8>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	f003 0307 	and.w	r3, r3, #7
 80129da:	683a      	ldr	r2, [r7, #0]
 80129dc:	429a      	cmp	r2, r3
 80129de:	d001      	beq.n	80129e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80129e0:	2301      	movs	r3, #1
 80129e2:	e0b8      	b.n	8012b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	f003 0302 	and.w	r3, r3, #2
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d020      	beq.n	8012a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	f003 0304 	and.w	r3, r3, #4
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d005      	beq.n	8012a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80129fc:	4b59      	ldr	r3, [pc, #356]	; (8012b64 <HAL_RCC_ClockConfig+0x1bc>)
 80129fe:	689b      	ldr	r3, [r3, #8]
 8012a00:	4a58      	ldr	r2, [pc, #352]	; (8012b64 <HAL_RCC_ClockConfig+0x1bc>)
 8012a02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8012a06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	f003 0308 	and.w	r3, r3, #8
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d005      	beq.n	8012a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012a14:	4b53      	ldr	r3, [pc, #332]	; (8012b64 <HAL_RCC_ClockConfig+0x1bc>)
 8012a16:	689b      	ldr	r3, [r3, #8]
 8012a18:	4a52      	ldr	r2, [pc, #328]	; (8012b64 <HAL_RCC_ClockConfig+0x1bc>)
 8012a1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012a20:	4b50      	ldr	r3, [pc, #320]	; (8012b64 <HAL_RCC_ClockConfig+0x1bc>)
 8012a22:	689b      	ldr	r3, [r3, #8]
 8012a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	689b      	ldr	r3, [r3, #8]
 8012a2c:	494d      	ldr	r1, [pc, #308]	; (8012b64 <HAL_RCC_ClockConfig+0x1bc>)
 8012a2e:	4313      	orrs	r3, r2
 8012a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	f003 0301 	and.w	r3, r3, #1
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d044      	beq.n	8012ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	685b      	ldr	r3, [r3, #4]
 8012a42:	2b01      	cmp	r3, #1
 8012a44:	d107      	bne.n	8012a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012a46:	4b47      	ldr	r3, [pc, #284]	; (8012b64 <HAL_RCC_ClockConfig+0x1bc>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d119      	bne.n	8012a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012a52:	2301      	movs	r3, #1
 8012a54:	e07f      	b.n	8012b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	685b      	ldr	r3, [r3, #4]
 8012a5a:	2b02      	cmp	r3, #2
 8012a5c:	d003      	beq.n	8012a66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012a62:	2b03      	cmp	r3, #3
 8012a64:	d107      	bne.n	8012a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012a66:	4b3f      	ldr	r3, [pc, #252]	; (8012b64 <HAL_RCC_ClockConfig+0x1bc>)
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d109      	bne.n	8012a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012a72:	2301      	movs	r3, #1
 8012a74:	e06f      	b.n	8012b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012a76:	4b3b      	ldr	r3, [pc, #236]	; (8012b64 <HAL_RCC_ClockConfig+0x1bc>)
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	f003 0302 	and.w	r3, r3, #2
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d101      	bne.n	8012a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012a82:	2301      	movs	r3, #1
 8012a84:	e067      	b.n	8012b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012a86:	4b37      	ldr	r3, [pc, #220]	; (8012b64 <HAL_RCC_ClockConfig+0x1bc>)
 8012a88:	689b      	ldr	r3, [r3, #8]
 8012a8a:	f023 0203 	bic.w	r2, r3, #3
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	4934      	ldr	r1, [pc, #208]	; (8012b64 <HAL_RCC_ClockConfig+0x1bc>)
 8012a94:	4313      	orrs	r3, r2
 8012a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012a98:	f7fd f958 	bl	800fd4c <HAL_GetTick>
 8012a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012a9e:	e00a      	b.n	8012ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012aa0:	f7fd f954 	bl	800fd4c <HAL_GetTick>
 8012aa4:	4602      	mov	r2, r0
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	1ad3      	subs	r3, r2, r3
 8012aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8012aae:	4293      	cmp	r3, r2
 8012ab0:	d901      	bls.n	8012ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8012ab2:	2303      	movs	r3, #3
 8012ab4:	e04f      	b.n	8012b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012ab6:	4b2b      	ldr	r3, [pc, #172]	; (8012b64 <HAL_RCC_ClockConfig+0x1bc>)
 8012ab8:	689b      	ldr	r3, [r3, #8]
 8012aba:	f003 020c 	and.w	r2, r3, #12
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	685b      	ldr	r3, [r3, #4]
 8012ac2:	009b      	lsls	r3, r3, #2
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d1eb      	bne.n	8012aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012ac8:	4b25      	ldr	r3, [pc, #148]	; (8012b60 <HAL_RCC_ClockConfig+0x1b8>)
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	f003 0307 	and.w	r3, r3, #7
 8012ad0:	683a      	ldr	r2, [r7, #0]
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	d20c      	bcs.n	8012af0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012ad6:	4b22      	ldr	r3, [pc, #136]	; (8012b60 <HAL_RCC_ClockConfig+0x1b8>)
 8012ad8:	683a      	ldr	r2, [r7, #0]
 8012ada:	b2d2      	uxtb	r2, r2
 8012adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012ade:	4b20      	ldr	r3, [pc, #128]	; (8012b60 <HAL_RCC_ClockConfig+0x1b8>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	f003 0307 	and.w	r3, r3, #7
 8012ae6:	683a      	ldr	r2, [r7, #0]
 8012ae8:	429a      	cmp	r2, r3
 8012aea:	d001      	beq.n	8012af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8012aec:	2301      	movs	r3, #1
 8012aee:	e032      	b.n	8012b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	f003 0304 	and.w	r3, r3, #4
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d008      	beq.n	8012b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012afc:	4b19      	ldr	r3, [pc, #100]	; (8012b64 <HAL_RCC_ClockConfig+0x1bc>)
 8012afe:	689b      	ldr	r3, [r3, #8]
 8012b00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	68db      	ldr	r3, [r3, #12]
 8012b08:	4916      	ldr	r1, [pc, #88]	; (8012b64 <HAL_RCC_ClockConfig+0x1bc>)
 8012b0a:	4313      	orrs	r3, r2
 8012b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	f003 0308 	and.w	r3, r3, #8
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d009      	beq.n	8012b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012b1a:	4b12      	ldr	r3, [pc, #72]	; (8012b64 <HAL_RCC_ClockConfig+0x1bc>)
 8012b1c:	689b      	ldr	r3, [r3, #8]
 8012b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	691b      	ldr	r3, [r3, #16]
 8012b26:	00db      	lsls	r3, r3, #3
 8012b28:	490e      	ldr	r1, [pc, #56]	; (8012b64 <HAL_RCC_ClockConfig+0x1bc>)
 8012b2a:	4313      	orrs	r3, r2
 8012b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012b2e:	f000 f821 	bl	8012b74 <HAL_RCC_GetSysClockFreq>
 8012b32:	4602      	mov	r2, r0
 8012b34:	4b0b      	ldr	r3, [pc, #44]	; (8012b64 <HAL_RCC_ClockConfig+0x1bc>)
 8012b36:	689b      	ldr	r3, [r3, #8]
 8012b38:	091b      	lsrs	r3, r3, #4
 8012b3a:	f003 030f 	and.w	r3, r3, #15
 8012b3e:	490a      	ldr	r1, [pc, #40]	; (8012b68 <HAL_RCC_ClockConfig+0x1c0>)
 8012b40:	5ccb      	ldrb	r3, [r1, r3]
 8012b42:	fa22 f303 	lsr.w	r3, r2, r3
 8012b46:	4a09      	ldr	r2, [pc, #36]	; (8012b6c <HAL_RCC_ClockConfig+0x1c4>)
 8012b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8012b4a:	4b09      	ldr	r3, [pc, #36]	; (8012b70 <HAL_RCC_ClockConfig+0x1c8>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f7fb fd88 	bl	800e664 <HAL_InitTick>

  return HAL_OK;
 8012b54:	2300      	movs	r3, #0
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3710      	adds	r7, #16
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}
 8012b5e:	bf00      	nop
 8012b60:	40023c00 	.word	0x40023c00
 8012b64:	40023800 	.word	0x40023800
 8012b68:	0801cf94 	.word	0x0801cf94
 8012b6c:	20000000 	.word	0x20000000
 8012b70:	20000034 	.word	0x20000034

08012b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012b74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8012b78:	b084      	sub	sp, #16
 8012b7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	607b      	str	r3, [r7, #4]
 8012b80:	2300      	movs	r3, #0
 8012b82:	60fb      	str	r3, [r7, #12]
 8012b84:	2300      	movs	r3, #0
 8012b86:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8012b88:	2300      	movs	r3, #0
 8012b8a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012b8c:	4b67      	ldr	r3, [pc, #412]	; (8012d2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012b8e:	689b      	ldr	r3, [r3, #8]
 8012b90:	f003 030c 	and.w	r3, r3, #12
 8012b94:	2b08      	cmp	r3, #8
 8012b96:	d00d      	beq.n	8012bb4 <HAL_RCC_GetSysClockFreq+0x40>
 8012b98:	2b08      	cmp	r3, #8
 8012b9a:	f200 80bd 	bhi.w	8012d18 <HAL_RCC_GetSysClockFreq+0x1a4>
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d002      	beq.n	8012ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8012ba2:	2b04      	cmp	r3, #4
 8012ba4:	d003      	beq.n	8012bae <HAL_RCC_GetSysClockFreq+0x3a>
 8012ba6:	e0b7      	b.n	8012d18 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012ba8:	4b61      	ldr	r3, [pc, #388]	; (8012d30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8012baa:	60bb      	str	r3, [r7, #8]
       break;
 8012bac:	e0b7      	b.n	8012d1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8012bae:	4b61      	ldr	r3, [pc, #388]	; (8012d34 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8012bb0:	60bb      	str	r3, [r7, #8]
      break;
 8012bb2:	e0b4      	b.n	8012d1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012bb4:	4b5d      	ldr	r3, [pc, #372]	; (8012d2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012bb6:	685b      	ldr	r3, [r3, #4]
 8012bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012bbc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8012bbe:	4b5b      	ldr	r3, [pc, #364]	; (8012d2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012bc0:	685b      	ldr	r3, [r3, #4]
 8012bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d04d      	beq.n	8012c66 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012bca:	4b58      	ldr	r3, [pc, #352]	; (8012d2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012bcc:	685b      	ldr	r3, [r3, #4]
 8012bce:	099b      	lsrs	r3, r3, #6
 8012bd0:	461a      	mov	r2, r3
 8012bd2:	f04f 0300 	mov.w	r3, #0
 8012bd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8012bda:	f04f 0100 	mov.w	r1, #0
 8012bde:	ea02 0800 	and.w	r8, r2, r0
 8012be2:	ea03 0901 	and.w	r9, r3, r1
 8012be6:	4640      	mov	r0, r8
 8012be8:	4649      	mov	r1, r9
 8012bea:	f04f 0200 	mov.w	r2, #0
 8012bee:	f04f 0300 	mov.w	r3, #0
 8012bf2:	014b      	lsls	r3, r1, #5
 8012bf4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8012bf8:	0142      	lsls	r2, r0, #5
 8012bfa:	4610      	mov	r0, r2
 8012bfc:	4619      	mov	r1, r3
 8012bfe:	ebb0 0008 	subs.w	r0, r0, r8
 8012c02:	eb61 0109 	sbc.w	r1, r1, r9
 8012c06:	f04f 0200 	mov.w	r2, #0
 8012c0a:	f04f 0300 	mov.w	r3, #0
 8012c0e:	018b      	lsls	r3, r1, #6
 8012c10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8012c14:	0182      	lsls	r2, r0, #6
 8012c16:	1a12      	subs	r2, r2, r0
 8012c18:	eb63 0301 	sbc.w	r3, r3, r1
 8012c1c:	f04f 0000 	mov.w	r0, #0
 8012c20:	f04f 0100 	mov.w	r1, #0
 8012c24:	00d9      	lsls	r1, r3, #3
 8012c26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012c2a:	00d0      	lsls	r0, r2, #3
 8012c2c:	4602      	mov	r2, r0
 8012c2e:	460b      	mov	r3, r1
 8012c30:	eb12 0208 	adds.w	r2, r2, r8
 8012c34:	eb43 0309 	adc.w	r3, r3, r9
 8012c38:	f04f 0000 	mov.w	r0, #0
 8012c3c:	f04f 0100 	mov.w	r1, #0
 8012c40:	0259      	lsls	r1, r3, #9
 8012c42:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8012c46:	0250      	lsls	r0, r2, #9
 8012c48:	4602      	mov	r2, r0
 8012c4a:	460b      	mov	r3, r1
 8012c4c:	4610      	mov	r0, r2
 8012c4e:	4619      	mov	r1, r3
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	461a      	mov	r2, r3
 8012c54:	f04f 0300 	mov.w	r3, #0
 8012c58:	f7f9 fa4a 	bl	800c0f0 <__aeabi_uldivmod>
 8012c5c:	4602      	mov	r2, r0
 8012c5e:	460b      	mov	r3, r1
 8012c60:	4613      	mov	r3, r2
 8012c62:	60fb      	str	r3, [r7, #12]
 8012c64:	e04a      	b.n	8012cfc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012c66:	4b31      	ldr	r3, [pc, #196]	; (8012d2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012c68:	685b      	ldr	r3, [r3, #4]
 8012c6a:	099b      	lsrs	r3, r3, #6
 8012c6c:	461a      	mov	r2, r3
 8012c6e:	f04f 0300 	mov.w	r3, #0
 8012c72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8012c76:	f04f 0100 	mov.w	r1, #0
 8012c7a:	ea02 0400 	and.w	r4, r2, r0
 8012c7e:	ea03 0501 	and.w	r5, r3, r1
 8012c82:	4620      	mov	r0, r4
 8012c84:	4629      	mov	r1, r5
 8012c86:	f04f 0200 	mov.w	r2, #0
 8012c8a:	f04f 0300 	mov.w	r3, #0
 8012c8e:	014b      	lsls	r3, r1, #5
 8012c90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8012c94:	0142      	lsls	r2, r0, #5
 8012c96:	4610      	mov	r0, r2
 8012c98:	4619      	mov	r1, r3
 8012c9a:	1b00      	subs	r0, r0, r4
 8012c9c:	eb61 0105 	sbc.w	r1, r1, r5
 8012ca0:	f04f 0200 	mov.w	r2, #0
 8012ca4:	f04f 0300 	mov.w	r3, #0
 8012ca8:	018b      	lsls	r3, r1, #6
 8012caa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8012cae:	0182      	lsls	r2, r0, #6
 8012cb0:	1a12      	subs	r2, r2, r0
 8012cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8012cb6:	f04f 0000 	mov.w	r0, #0
 8012cba:	f04f 0100 	mov.w	r1, #0
 8012cbe:	00d9      	lsls	r1, r3, #3
 8012cc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012cc4:	00d0      	lsls	r0, r2, #3
 8012cc6:	4602      	mov	r2, r0
 8012cc8:	460b      	mov	r3, r1
 8012cca:	1912      	adds	r2, r2, r4
 8012ccc:	eb45 0303 	adc.w	r3, r5, r3
 8012cd0:	f04f 0000 	mov.w	r0, #0
 8012cd4:	f04f 0100 	mov.w	r1, #0
 8012cd8:	0299      	lsls	r1, r3, #10
 8012cda:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8012cde:	0290      	lsls	r0, r2, #10
 8012ce0:	4602      	mov	r2, r0
 8012ce2:	460b      	mov	r3, r1
 8012ce4:	4610      	mov	r0, r2
 8012ce6:	4619      	mov	r1, r3
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	461a      	mov	r2, r3
 8012cec:	f04f 0300 	mov.w	r3, #0
 8012cf0:	f7f9 f9fe 	bl	800c0f0 <__aeabi_uldivmod>
 8012cf4:	4602      	mov	r2, r0
 8012cf6:	460b      	mov	r3, r1
 8012cf8:	4613      	mov	r3, r2
 8012cfa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012cfc:	4b0b      	ldr	r3, [pc, #44]	; (8012d2c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8012cfe:	685b      	ldr	r3, [r3, #4]
 8012d00:	0c1b      	lsrs	r3, r3, #16
 8012d02:	f003 0303 	and.w	r3, r3, #3
 8012d06:	3301      	adds	r3, #1
 8012d08:	005b      	lsls	r3, r3, #1
 8012d0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8012d0c:	68fa      	ldr	r2, [r7, #12]
 8012d0e:	683b      	ldr	r3, [r7, #0]
 8012d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8012d14:	60bb      	str	r3, [r7, #8]
      break;
 8012d16:	e002      	b.n	8012d1e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8012d18:	4b05      	ldr	r3, [pc, #20]	; (8012d30 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8012d1a:	60bb      	str	r3, [r7, #8]
      break;
 8012d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8012d1e:	68bb      	ldr	r3, [r7, #8]
}
 8012d20:	4618      	mov	r0, r3
 8012d22:	3710      	adds	r7, #16
 8012d24:	46bd      	mov	sp, r7
 8012d26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8012d2a:	bf00      	nop
 8012d2c:	40023800 	.word	0x40023800
 8012d30:	00f42400 	.word	0x00f42400
 8012d34:	007a1200 	.word	0x007a1200

08012d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012d38:	b480      	push	{r7}
 8012d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012d3c:	4b03      	ldr	r3, [pc, #12]	; (8012d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	46bd      	mov	sp, r7
 8012d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d48:	4770      	bx	lr
 8012d4a:	bf00      	nop
 8012d4c:	20000000 	.word	0x20000000

08012d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8012d54:	f7ff fff0 	bl	8012d38 <HAL_RCC_GetHCLKFreq>
 8012d58:	4602      	mov	r2, r0
 8012d5a:	4b05      	ldr	r3, [pc, #20]	; (8012d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8012d5c:	689b      	ldr	r3, [r3, #8]
 8012d5e:	0a9b      	lsrs	r3, r3, #10
 8012d60:	f003 0307 	and.w	r3, r3, #7
 8012d64:	4903      	ldr	r1, [pc, #12]	; (8012d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012d66:	5ccb      	ldrb	r3, [r1, r3]
 8012d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	bd80      	pop	{r7, pc}
 8012d70:	40023800 	.word	0x40023800
 8012d74:	0801cfa4 	.word	0x0801cfa4

08012d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8012d7c:	f7ff ffdc 	bl	8012d38 <HAL_RCC_GetHCLKFreq>
 8012d80:	4602      	mov	r2, r0
 8012d82:	4b05      	ldr	r3, [pc, #20]	; (8012d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8012d84:	689b      	ldr	r3, [r3, #8]
 8012d86:	0b5b      	lsrs	r3, r3, #13
 8012d88:	f003 0307 	and.w	r3, r3, #7
 8012d8c:	4903      	ldr	r1, [pc, #12]	; (8012d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8012d8e:	5ccb      	ldrb	r3, [r1, r3]
 8012d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012d94:	4618      	mov	r0, r3
 8012d96:	bd80      	pop	{r7, pc}
 8012d98:	40023800 	.word	0x40023800
 8012d9c:	0801cfa4 	.word	0x0801cfa4

08012da0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8012da0:	b480      	push	{r7}
 8012da2:	b083      	sub	sp, #12
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
 8012da8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	220f      	movs	r2, #15
 8012dae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8012db0:	4b12      	ldr	r3, [pc, #72]	; (8012dfc <HAL_RCC_GetClockConfig+0x5c>)
 8012db2:	689b      	ldr	r3, [r3, #8]
 8012db4:	f003 0203 	and.w	r2, r3, #3
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8012dbc:	4b0f      	ldr	r3, [pc, #60]	; (8012dfc <HAL_RCC_GetClockConfig+0x5c>)
 8012dbe:	689b      	ldr	r3, [r3, #8]
 8012dc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8012dc8:	4b0c      	ldr	r3, [pc, #48]	; (8012dfc <HAL_RCC_GetClockConfig+0x5c>)
 8012dca:	689b      	ldr	r3, [r3, #8]
 8012dcc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8012dd4:	4b09      	ldr	r3, [pc, #36]	; (8012dfc <HAL_RCC_GetClockConfig+0x5c>)
 8012dd6:	689b      	ldr	r3, [r3, #8]
 8012dd8:	08db      	lsrs	r3, r3, #3
 8012dda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8012de2:	4b07      	ldr	r3, [pc, #28]	; (8012e00 <HAL_RCC_GetClockConfig+0x60>)
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	f003 0207 	and.w	r2, r3, #7
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	601a      	str	r2, [r3, #0]
}
 8012dee:	bf00      	nop
 8012df0:	370c      	adds	r7, #12
 8012df2:	46bd      	mov	sp, r7
 8012df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df8:	4770      	bx	lr
 8012dfa:	bf00      	nop
 8012dfc:	40023800 	.word	0x40023800
 8012e00:	40023c00 	.word	0x40023c00

08012e04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b082      	sub	sp, #8
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d101      	bne.n	8012e16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012e12:	2301      	movs	r3, #1
 8012e14:	e07b      	b.n	8012f0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d108      	bne.n	8012e30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	685b      	ldr	r3, [r3, #4]
 8012e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012e26:	d009      	beq.n	8012e3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	61da      	str	r2, [r3, #28]
 8012e2e:	e005      	b.n	8012e3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	2200      	movs	r2, #0
 8012e34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	2200      	movs	r2, #0
 8012e3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2200      	movs	r2, #0
 8012e40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012e48:	b2db      	uxtb	r3, r3
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d106      	bne.n	8012e5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	2200      	movs	r2, #0
 8012e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012e56:	6878      	ldr	r0, [r7, #4]
 8012e58:	f7fb fae2 	bl	800e420 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2202      	movs	r2, #2
 8012e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	681a      	ldr	r2, [r3, #0]
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012e72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	685b      	ldr	r3, [r3, #4]
 8012e78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	689b      	ldr	r3, [r3, #8]
 8012e80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8012e84:	431a      	orrs	r2, r3
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	68db      	ldr	r3, [r3, #12]
 8012e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012e8e:	431a      	orrs	r2, r3
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	691b      	ldr	r3, [r3, #16]
 8012e94:	f003 0302 	and.w	r3, r3, #2
 8012e98:	431a      	orrs	r2, r3
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	695b      	ldr	r3, [r3, #20]
 8012e9e:	f003 0301 	and.w	r3, r3, #1
 8012ea2:	431a      	orrs	r2, r3
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	699b      	ldr	r3, [r3, #24]
 8012ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012eac:	431a      	orrs	r2, r3
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	69db      	ldr	r3, [r3, #28]
 8012eb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012eb6:	431a      	orrs	r2, r3
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	6a1b      	ldr	r3, [r3, #32]
 8012ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ec0:	ea42 0103 	orr.w	r1, r2, r3
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ec8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	430a      	orrs	r2, r1
 8012ed2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	699b      	ldr	r3, [r3, #24]
 8012ed8:	0c1b      	lsrs	r3, r3, #16
 8012eda:	f003 0104 	and.w	r1, r3, #4
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ee2:	f003 0210 	and.w	r2, r3, #16
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	430a      	orrs	r2, r1
 8012eec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	69da      	ldr	r2, [r3, #28]
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012efc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	2200      	movs	r2, #0
 8012f02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	2201      	movs	r2, #1
 8012f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8012f0c:	2300      	movs	r3, #0
}
 8012f0e:	4618      	mov	r0, r3
 8012f10:	3708      	adds	r7, #8
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}

08012f16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012f16:	b580      	push	{r7, lr}
 8012f18:	b088      	sub	sp, #32
 8012f1a:	af00      	add	r7, sp, #0
 8012f1c:	60f8      	str	r0, [r7, #12]
 8012f1e:	60b9      	str	r1, [r7, #8]
 8012f20:	603b      	str	r3, [r7, #0]
 8012f22:	4613      	mov	r3, r2
 8012f24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012f26:	2300      	movs	r3, #0
 8012f28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012f30:	2b01      	cmp	r3, #1
 8012f32:	d101      	bne.n	8012f38 <HAL_SPI_Transmit+0x22>
 8012f34:	2302      	movs	r3, #2
 8012f36:	e126      	b.n	8013186 <HAL_SPI_Transmit+0x270>
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	2201      	movs	r2, #1
 8012f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012f40:	f7fc ff04 	bl	800fd4c <HAL_GetTick>
 8012f44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8012f46:	88fb      	ldrh	r3, [r7, #6]
 8012f48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012f50:	b2db      	uxtb	r3, r3
 8012f52:	2b01      	cmp	r3, #1
 8012f54:	d002      	beq.n	8012f5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8012f56:	2302      	movs	r3, #2
 8012f58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012f5a:	e10b      	b.n	8013174 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8012f5c:	68bb      	ldr	r3, [r7, #8]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d002      	beq.n	8012f68 <HAL_SPI_Transmit+0x52>
 8012f62:	88fb      	ldrh	r3, [r7, #6]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d102      	bne.n	8012f6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8012f68:	2301      	movs	r3, #1
 8012f6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8012f6c:	e102      	b.n	8013174 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	2203      	movs	r2, #3
 8012f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	2200      	movs	r2, #0
 8012f7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	68ba      	ldr	r2, [r7, #8]
 8012f80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	88fa      	ldrh	r2, [r7, #6]
 8012f86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	88fa      	ldrh	r2, [r7, #6]
 8012f8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	2200      	movs	r2, #0
 8012f92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	2200      	movs	r2, #0
 8012f98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	2200      	movs	r2, #0
 8012faa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	689b      	ldr	r3, [r3, #8]
 8012fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012fb4:	d10f      	bne.n	8012fd6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	681a      	ldr	r2, [r3, #0]
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012fc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	681a      	ldr	r2, [r3, #0]
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012fd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012fe0:	2b40      	cmp	r3, #64	; 0x40
 8012fe2:	d007      	beq.n	8012ff4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	681a      	ldr	r2, [r3, #0]
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012ff2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	68db      	ldr	r3, [r3, #12]
 8012ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012ffc:	d14b      	bne.n	8013096 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	685b      	ldr	r3, [r3, #4]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d002      	beq.n	801300c <HAL_SPI_Transmit+0xf6>
 8013006:	8afb      	ldrh	r3, [r7, #22]
 8013008:	2b01      	cmp	r3, #1
 801300a:	d13e      	bne.n	801308a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013010:	881a      	ldrh	r2, [r3, #0]
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801301c:	1c9a      	adds	r2, r3, #2
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013026:	b29b      	uxth	r3, r3
 8013028:	3b01      	subs	r3, #1
 801302a:	b29a      	uxth	r2, r3
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8013030:	e02b      	b.n	801308a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	689b      	ldr	r3, [r3, #8]
 8013038:	f003 0302 	and.w	r3, r3, #2
 801303c:	2b02      	cmp	r3, #2
 801303e:	d112      	bne.n	8013066 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013044:	881a      	ldrh	r2, [r3, #0]
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013050:	1c9a      	adds	r2, r3, #2
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801305a:	b29b      	uxth	r3, r3
 801305c:	3b01      	subs	r3, #1
 801305e:	b29a      	uxth	r2, r3
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	86da      	strh	r2, [r3, #54]	; 0x36
 8013064:	e011      	b.n	801308a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013066:	f7fc fe71 	bl	800fd4c <HAL_GetTick>
 801306a:	4602      	mov	r2, r0
 801306c:	69bb      	ldr	r3, [r7, #24]
 801306e:	1ad3      	subs	r3, r2, r3
 8013070:	683a      	ldr	r2, [r7, #0]
 8013072:	429a      	cmp	r2, r3
 8013074:	d803      	bhi.n	801307e <HAL_SPI_Transmit+0x168>
 8013076:	683b      	ldr	r3, [r7, #0]
 8013078:	f1b3 3fff 	cmp.w	r3, #4294967295
 801307c:	d102      	bne.n	8013084 <HAL_SPI_Transmit+0x16e>
 801307e:	683b      	ldr	r3, [r7, #0]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d102      	bne.n	801308a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8013084:	2303      	movs	r3, #3
 8013086:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013088:	e074      	b.n	8013174 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801308e:	b29b      	uxth	r3, r3
 8013090:	2b00      	cmp	r3, #0
 8013092:	d1ce      	bne.n	8013032 <HAL_SPI_Transmit+0x11c>
 8013094:	e04c      	b.n	8013130 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	685b      	ldr	r3, [r3, #4]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d002      	beq.n	80130a4 <HAL_SPI_Transmit+0x18e>
 801309e:	8afb      	ldrh	r3, [r7, #22]
 80130a0:	2b01      	cmp	r3, #1
 80130a2:	d140      	bne.n	8013126 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	330c      	adds	r3, #12
 80130ae:	7812      	ldrb	r2, [r2, #0]
 80130b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130b6:	1c5a      	adds	r2, r3, #1
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80130c0:	b29b      	uxth	r3, r3
 80130c2:	3b01      	subs	r3, #1
 80130c4:	b29a      	uxth	r2, r3
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80130ca:	e02c      	b.n	8013126 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	689b      	ldr	r3, [r3, #8]
 80130d2:	f003 0302 	and.w	r3, r3, #2
 80130d6:	2b02      	cmp	r3, #2
 80130d8:	d113      	bne.n	8013102 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	330c      	adds	r3, #12
 80130e4:	7812      	ldrb	r2, [r2, #0]
 80130e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130ec:	1c5a      	adds	r2, r3, #1
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80130f6:	b29b      	uxth	r3, r3
 80130f8:	3b01      	subs	r3, #1
 80130fa:	b29a      	uxth	r2, r3
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8013100:	e011      	b.n	8013126 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013102:	f7fc fe23 	bl	800fd4c <HAL_GetTick>
 8013106:	4602      	mov	r2, r0
 8013108:	69bb      	ldr	r3, [r7, #24]
 801310a:	1ad3      	subs	r3, r2, r3
 801310c:	683a      	ldr	r2, [r7, #0]
 801310e:	429a      	cmp	r2, r3
 8013110:	d803      	bhi.n	801311a <HAL_SPI_Transmit+0x204>
 8013112:	683b      	ldr	r3, [r7, #0]
 8013114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013118:	d102      	bne.n	8013120 <HAL_SPI_Transmit+0x20a>
 801311a:	683b      	ldr	r3, [r7, #0]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d102      	bne.n	8013126 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8013120:	2303      	movs	r3, #3
 8013122:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013124:	e026      	b.n	8013174 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801312a:	b29b      	uxth	r3, r3
 801312c:	2b00      	cmp	r3, #0
 801312e:	d1cd      	bne.n	80130cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013130:	69ba      	ldr	r2, [r7, #24]
 8013132:	6839      	ldr	r1, [r7, #0]
 8013134:	68f8      	ldr	r0, [r7, #12]
 8013136:	f000 fbcb 	bl	80138d0 <SPI_EndRxTxTransaction>
 801313a:	4603      	mov	r3, r0
 801313c:	2b00      	cmp	r3, #0
 801313e:	d002      	beq.n	8013146 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	2220      	movs	r2, #32
 8013144:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	689b      	ldr	r3, [r3, #8]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d10a      	bne.n	8013164 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801314e:	2300      	movs	r3, #0
 8013150:	613b      	str	r3, [r7, #16]
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	68db      	ldr	r3, [r3, #12]
 8013158:	613b      	str	r3, [r7, #16]
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	689b      	ldr	r3, [r3, #8]
 8013160:	613b      	str	r3, [r7, #16]
 8013162:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013168:	2b00      	cmp	r3, #0
 801316a:	d002      	beq.n	8013172 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801316c:	2301      	movs	r3, #1
 801316e:	77fb      	strb	r3, [r7, #31]
 8013170:	e000      	b.n	8013174 <HAL_SPI_Transmit+0x25e>
  }

error:
 8013172:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	2201      	movs	r2, #1
 8013178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	2200      	movs	r2, #0
 8013180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013184:	7ffb      	ldrb	r3, [r7, #31]
}
 8013186:	4618      	mov	r0, r3
 8013188:	3720      	adds	r7, #32
 801318a:	46bd      	mov	sp, r7
 801318c:	bd80      	pop	{r7, pc}

0801318e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801318e:	b580      	push	{r7, lr}
 8013190:	b088      	sub	sp, #32
 8013192:	af02      	add	r7, sp, #8
 8013194:	60f8      	str	r0, [r7, #12]
 8013196:	60b9      	str	r1, [r7, #8]
 8013198:	603b      	str	r3, [r7, #0]
 801319a:	4613      	mov	r3, r2
 801319c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801319e:	2300      	movs	r3, #0
 80131a0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	685b      	ldr	r3, [r3, #4]
 80131a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80131aa:	d112      	bne.n	80131d2 <HAL_SPI_Receive+0x44>
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	689b      	ldr	r3, [r3, #8]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d10e      	bne.n	80131d2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	2204      	movs	r2, #4
 80131b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80131bc:	88fa      	ldrh	r2, [r7, #6]
 80131be:	683b      	ldr	r3, [r7, #0]
 80131c0:	9300      	str	r3, [sp, #0]
 80131c2:	4613      	mov	r3, r2
 80131c4:	68ba      	ldr	r2, [r7, #8]
 80131c6:	68b9      	ldr	r1, [r7, #8]
 80131c8:	68f8      	ldr	r0, [r7, #12]
 80131ca:	f000 f8f1 	bl	80133b0 <HAL_SPI_TransmitReceive>
 80131ce:	4603      	mov	r3, r0
 80131d0:	e0ea      	b.n	80133a8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80131d8:	2b01      	cmp	r3, #1
 80131da:	d101      	bne.n	80131e0 <HAL_SPI_Receive+0x52>
 80131dc:	2302      	movs	r3, #2
 80131de:	e0e3      	b.n	80133a8 <HAL_SPI_Receive+0x21a>
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	2201      	movs	r2, #1
 80131e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80131e8:	f7fc fdb0 	bl	800fd4c <HAL_GetTick>
 80131ec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80131f4:	b2db      	uxtb	r3, r3
 80131f6:	2b01      	cmp	r3, #1
 80131f8:	d002      	beq.n	8013200 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80131fa:	2302      	movs	r3, #2
 80131fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80131fe:	e0ca      	b.n	8013396 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d002      	beq.n	801320c <HAL_SPI_Receive+0x7e>
 8013206:	88fb      	ldrh	r3, [r7, #6]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d102      	bne.n	8013212 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801320c:	2301      	movs	r3, #1
 801320e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013210:	e0c1      	b.n	8013396 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	2204      	movs	r2, #4
 8013216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	2200      	movs	r2, #0
 801321e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	68ba      	ldr	r2, [r7, #8]
 8013224:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	88fa      	ldrh	r2, [r7, #6]
 801322a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	88fa      	ldrh	r2, [r7, #6]
 8013230:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	2200      	movs	r2, #0
 8013236:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	2200      	movs	r2, #0
 801323c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	2200      	movs	r2, #0
 8013242:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	2200      	movs	r2, #0
 8013248:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	2200      	movs	r2, #0
 801324e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	689b      	ldr	r3, [r3, #8]
 8013254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013258:	d10f      	bne.n	801327a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	681a      	ldr	r2, [r3, #0]
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013268:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	681a      	ldr	r2, [r3, #0]
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013278:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013284:	2b40      	cmp	r3, #64	; 0x40
 8013286:	d007      	beq.n	8013298 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	681a      	ldr	r2, [r3, #0]
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013296:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	68db      	ldr	r3, [r3, #12]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d162      	bne.n	8013366 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80132a0:	e02e      	b.n	8013300 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	689b      	ldr	r3, [r3, #8]
 80132a8:	f003 0301 	and.w	r3, r3, #1
 80132ac:	2b01      	cmp	r3, #1
 80132ae:	d115      	bne.n	80132dc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	f103 020c 	add.w	r2, r3, #12
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132bc:	7812      	ldrb	r2, [r2, #0]
 80132be:	b2d2      	uxtb	r2, r2
 80132c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132c6:	1c5a      	adds	r2, r3, #1
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80132d0:	b29b      	uxth	r3, r3
 80132d2:	3b01      	subs	r3, #1
 80132d4:	b29a      	uxth	r2, r3
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80132da:	e011      	b.n	8013300 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80132dc:	f7fc fd36 	bl	800fd4c <HAL_GetTick>
 80132e0:	4602      	mov	r2, r0
 80132e2:	693b      	ldr	r3, [r7, #16]
 80132e4:	1ad3      	subs	r3, r2, r3
 80132e6:	683a      	ldr	r2, [r7, #0]
 80132e8:	429a      	cmp	r2, r3
 80132ea:	d803      	bhi.n	80132f4 <HAL_SPI_Receive+0x166>
 80132ec:	683b      	ldr	r3, [r7, #0]
 80132ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132f2:	d102      	bne.n	80132fa <HAL_SPI_Receive+0x16c>
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d102      	bne.n	8013300 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80132fa:	2303      	movs	r3, #3
 80132fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80132fe:	e04a      	b.n	8013396 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013304:	b29b      	uxth	r3, r3
 8013306:	2b00      	cmp	r3, #0
 8013308:	d1cb      	bne.n	80132a2 <HAL_SPI_Receive+0x114>
 801330a:	e031      	b.n	8013370 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	689b      	ldr	r3, [r3, #8]
 8013312:	f003 0301 	and.w	r3, r3, #1
 8013316:	2b01      	cmp	r3, #1
 8013318:	d113      	bne.n	8013342 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	68da      	ldr	r2, [r3, #12]
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013324:	b292      	uxth	r2, r2
 8013326:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801332c:	1c9a      	adds	r2, r3, #2
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013336:	b29b      	uxth	r3, r3
 8013338:	3b01      	subs	r3, #1
 801333a:	b29a      	uxth	r2, r3
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013340:	e011      	b.n	8013366 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013342:	f7fc fd03 	bl	800fd4c <HAL_GetTick>
 8013346:	4602      	mov	r2, r0
 8013348:	693b      	ldr	r3, [r7, #16]
 801334a:	1ad3      	subs	r3, r2, r3
 801334c:	683a      	ldr	r2, [r7, #0]
 801334e:	429a      	cmp	r2, r3
 8013350:	d803      	bhi.n	801335a <HAL_SPI_Receive+0x1cc>
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013358:	d102      	bne.n	8013360 <HAL_SPI_Receive+0x1d2>
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d102      	bne.n	8013366 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8013360:	2303      	movs	r3, #3
 8013362:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013364:	e017      	b.n	8013396 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801336a:	b29b      	uxth	r3, r3
 801336c:	2b00      	cmp	r3, #0
 801336e:	d1cd      	bne.n	801330c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013370:	693a      	ldr	r2, [r7, #16]
 8013372:	6839      	ldr	r1, [r7, #0]
 8013374:	68f8      	ldr	r0, [r7, #12]
 8013376:	f000 fa45 	bl	8013804 <SPI_EndRxTransaction>
 801337a:	4603      	mov	r3, r0
 801337c:	2b00      	cmp	r3, #0
 801337e:	d002      	beq.n	8013386 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	2220      	movs	r2, #32
 8013384:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801338a:	2b00      	cmp	r3, #0
 801338c:	d002      	beq.n	8013394 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801338e:	2301      	movs	r3, #1
 8013390:	75fb      	strb	r3, [r7, #23]
 8013392:	e000      	b.n	8013396 <HAL_SPI_Receive+0x208>
  }

error :
 8013394:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	2201      	movs	r2, #1
 801339a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	2200      	movs	r2, #0
 80133a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80133a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80133a8:	4618      	mov	r0, r3
 80133aa:	3718      	adds	r7, #24
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}

080133b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b08c      	sub	sp, #48	; 0x30
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	60f8      	str	r0, [r7, #12]
 80133b8:	60b9      	str	r1, [r7, #8]
 80133ba:	607a      	str	r2, [r7, #4]
 80133bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80133be:	2301      	movs	r3, #1
 80133c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80133c2:	2300      	movs	r3, #0
 80133c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80133ce:	2b01      	cmp	r3, #1
 80133d0:	d101      	bne.n	80133d6 <HAL_SPI_TransmitReceive+0x26>
 80133d2:	2302      	movs	r3, #2
 80133d4:	e18a      	b.n	80136ec <HAL_SPI_TransmitReceive+0x33c>
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	2201      	movs	r2, #1
 80133da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80133de:	f7fc fcb5 	bl	800fd4c <HAL_GetTick>
 80133e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80133ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	685b      	ldr	r3, [r3, #4]
 80133f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80133f4:	887b      	ldrh	r3, [r7, #2]
 80133f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80133f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80133fc:	2b01      	cmp	r3, #1
 80133fe:	d00f      	beq.n	8013420 <HAL_SPI_TransmitReceive+0x70>
 8013400:	69fb      	ldr	r3, [r7, #28]
 8013402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013406:	d107      	bne.n	8013418 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	689b      	ldr	r3, [r3, #8]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d103      	bne.n	8013418 <HAL_SPI_TransmitReceive+0x68>
 8013410:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013414:	2b04      	cmp	r3, #4
 8013416:	d003      	beq.n	8013420 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8013418:	2302      	movs	r3, #2
 801341a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801341e:	e15b      	b.n	80136d8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d005      	beq.n	8013432 <HAL_SPI_TransmitReceive+0x82>
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d002      	beq.n	8013432 <HAL_SPI_TransmitReceive+0x82>
 801342c:	887b      	ldrh	r3, [r7, #2]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d103      	bne.n	801343a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8013432:	2301      	movs	r3, #1
 8013434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013438:	e14e      	b.n	80136d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013440:	b2db      	uxtb	r3, r3
 8013442:	2b04      	cmp	r3, #4
 8013444:	d003      	beq.n	801344e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	2205      	movs	r2, #5
 801344a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	2200      	movs	r2, #0
 8013452:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	687a      	ldr	r2, [r7, #4]
 8013458:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	887a      	ldrh	r2, [r7, #2]
 801345e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	887a      	ldrh	r2, [r7, #2]
 8013464:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	68ba      	ldr	r2, [r7, #8]
 801346a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	887a      	ldrh	r2, [r7, #2]
 8013470:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	887a      	ldrh	r2, [r7, #2]
 8013476:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	2200      	movs	r2, #0
 801347c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	2200      	movs	r2, #0
 8013482:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801348e:	2b40      	cmp	r3, #64	; 0x40
 8013490:	d007      	beq.n	80134a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	681a      	ldr	r2, [r3, #0]
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80134a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	68db      	ldr	r3, [r3, #12]
 80134a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80134aa:	d178      	bne.n	801359e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	685b      	ldr	r3, [r3, #4]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d002      	beq.n	80134ba <HAL_SPI_TransmitReceive+0x10a>
 80134b4:	8b7b      	ldrh	r3, [r7, #26]
 80134b6:	2b01      	cmp	r3, #1
 80134b8:	d166      	bne.n	8013588 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134be:	881a      	ldrh	r2, [r3, #0]
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134ca:	1c9a      	adds	r2, r3, #2
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80134d4:	b29b      	uxth	r3, r3
 80134d6:	3b01      	subs	r3, #1
 80134d8:	b29a      	uxth	r2, r3
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80134de:	e053      	b.n	8013588 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	689b      	ldr	r3, [r3, #8]
 80134e6:	f003 0302 	and.w	r3, r3, #2
 80134ea:	2b02      	cmp	r3, #2
 80134ec:	d11b      	bne.n	8013526 <HAL_SPI_TransmitReceive+0x176>
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80134f2:	b29b      	uxth	r3, r3
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d016      	beq.n	8013526 <HAL_SPI_TransmitReceive+0x176>
 80134f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134fa:	2b01      	cmp	r3, #1
 80134fc:	d113      	bne.n	8013526 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013502:	881a      	ldrh	r2, [r3, #0]
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801350e:	1c9a      	adds	r2, r3, #2
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013518:	b29b      	uxth	r3, r3
 801351a:	3b01      	subs	r3, #1
 801351c:	b29a      	uxth	r2, r3
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013522:	2300      	movs	r3, #0
 8013524:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	689b      	ldr	r3, [r3, #8]
 801352c:	f003 0301 	and.w	r3, r3, #1
 8013530:	2b01      	cmp	r3, #1
 8013532:	d119      	bne.n	8013568 <HAL_SPI_TransmitReceive+0x1b8>
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013538:	b29b      	uxth	r3, r3
 801353a:	2b00      	cmp	r3, #0
 801353c:	d014      	beq.n	8013568 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	68da      	ldr	r2, [r3, #12]
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013548:	b292      	uxth	r2, r2
 801354a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013550:	1c9a      	adds	r2, r3, #2
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801355a:	b29b      	uxth	r3, r3
 801355c:	3b01      	subs	r3, #1
 801355e:	b29a      	uxth	r2, r3
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013564:	2301      	movs	r3, #1
 8013566:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8013568:	f7fc fbf0 	bl	800fd4c <HAL_GetTick>
 801356c:	4602      	mov	r2, r0
 801356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013570:	1ad3      	subs	r3, r2, r3
 8013572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013574:	429a      	cmp	r2, r3
 8013576:	d807      	bhi.n	8013588 <HAL_SPI_TransmitReceive+0x1d8>
 8013578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801357a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801357e:	d003      	beq.n	8013588 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8013580:	2303      	movs	r3, #3
 8013582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013586:	e0a7      	b.n	80136d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801358c:	b29b      	uxth	r3, r3
 801358e:	2b00      	cmp	r3, #0
 8013590:	d1a6      	bne.n	80134e0 <HAL_SPI_TransmitReceive+0x130>
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013596:	b29b      	uxth	r3, r3
 8013598:	2b00      	cmp	r3, #0
 801359a:	d1a1      	bne.n	80134e0 <HAL_SPI_TransmitReceive+0x130>
 801359c:	e07c      	b.n	8013698 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	685b      	ldr	r3, [r3, #4]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d002      	beq.n	80135ac <HAL_SPI_TransmitReceive+0x1fc>
 80135a6:	8b7b      	ldrh	r3, [r7, #26]
 80135a8:	2b01      	cmp	r3, #1
 80135aa:	d16b      	bne.n	8013684 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	330c      	adds	r3, #12
 80135b6:	7812      	ldrb	r2, [r2, #0]
 80135b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135be:	1c5a      	adds	r2, r3, #1
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80135c8:	b29b      	uxth	r3, r3
 80135ca:	3b01      	subs	r3, #1
 80135cc:	b29a      	uxth	r2, r3
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80135d2:	e057      	b.n	8013684 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	689b      	ldr	r3, [r3, #8]
 80135da:	f003 0302 	and.w	r3, r3, #2
 80135de:	2b02      	cmp	r3, #2
 80135e0:	d11c      	bne.n	801361c <HAL_SPI_TransmitReceive+0x26c>
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80135e6:	b29b      	uxth	r3, r3
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d017      	beq.n	801361c <HAL_SPI_TransmitReceive+0x26c>
 80135ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ee:	2b01      	cmp	r3, #1
 80135f0:	d114      	bne.n	801361c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	330c      	adds	r3, #12
 80135fc:	7812      	ldrb	r2, [r2, #0]
 80135fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013604:	1c5a      	adds	r2, r3, #1
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801360e:	b29b      	uxth	r3, r3
 8013610:	3b01      	subs	r3, #1
 8013612:	b29a      	uxth	r2, r3
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013618:	2300      	movs	r3, #0
 801361a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	689b      	ldr	r3, [r3, #8]
 8013622:	f003 0301 	and.w	r3, r3, #1
 8013626:	2b01      	cmp	r3, #1
 8013628:	d119      	bne.n	801365e <HAL_SPI_TransmitReceive+0x2ae>
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801362e:	b29b      	uxth	r3, r3
 8013630:	2b00      	cmp	r3, #0
 8013632:	d014      	beq.n	801365e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	68da      	ldr	r2, [r3, #12]
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801363e:	b2d2      	uxtb	r2, r2
 8013640:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013646:	1c5a      	adds	r2, r3, #1
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013650:	b29b      	uxth	r3, r3
 8013652:	3b01      	subs	r3, #1
 8013654:	b29a      	uxth	r2, r3
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801365a:	2301      	movs	r3, #1
 801365c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801365e:	f7fc fb75 	bl	800fd4c <HAL_GetTick>
 8013662:	4602      	mov	r2, r0
 8013664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013666:	1ad3      	subs	r3, r2, r3
 8013668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801366a:	429a      	cmp	r2, r3
 801366c:	d803      	bhi.n	8013676 <HAL_SPI_TransmitReceive+0x2c6>
 801366e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013674:	d102      	bne.n	801367c <HAL_SPI_TransmitReceive+0x2cc>
 8013676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013678:	2b00      	cmp	r3, #0
 801367a:	d103      	bne.n	8013684 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 801367c:	2303      	movs	r3, #3
 801367e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013682:	e029      	b.n	80136d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013688:	b29b      	uxth	r3, r3
 801368a:	2b00      	cmp	r3, #0
 801368c:	d1a2      	bne.n	80135d4 <HAL_SPI_TransmitReceive+0x224>
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013692:	b29b      	uxth	r3, r3
 8013694:	2b00      	cmp	r3, #0
 8013696:	d19d      	bne.n	80135d4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801369a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801369c:	68f8      	ldr	r0, [r7, #12]
 801369e:	f000 f917 	bl	80138d0 <SPI_EndRxTxTransaction>
 80136a2:	4603      	mov	r3, r0
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d006      	beq.n	80136b6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80136a8:	2301      	movs	r3, #1
 80136aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	2220      	movs	r2, #32
 80136b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80136b4:	e010      	b.n	80136d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	689b      	ldr	r3, [r3, #8]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d10b      	bne.n	80136d6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80136be:	2300      	movs	r3, #0
 80136c0:	617b      	str	r3, [r7, #20]
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	68db      	ldr	r3, [r3, #12]
 80136c8:	617b      	str	r3, [r7, #20]
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	689b      	ldr	r3, [r3, #8]
 80136d0:	617b      	str	r3, [r7, #20]
 80136d2:	697b      	ldr	r3, [r7, #20]
 80136d4:	e000      	b.n	80136d8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80136d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	2201      	movs	r2, #1
 80136dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	2200      	movs	r2, #0
 80136e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80136e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80136ec:	4618      	mov	r0, r3
 80136ee:	3730      	adds	r7, #48	; 0x30
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}

080136f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b088      	sub	sp, #32
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	60f8      	str	r0, [r7, #12]
 80136fc:	60b9      	str	r1, [r7, #8]
 80136fe:	603b      	str	r3, [r7, #0]
 8013700:	4613      	mov	r3, r2
 8013702:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8013704:	f7fc fb22 	bl	800fd4c <HAL_GetTick>
 8013708:	4602      	mov	r2, r0
 801370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801370c:	1a9b      	subs	r3, r3, r2
 801370e:	683a      	ldr	r2, [r7, #0]
 8013710:	4413      	add	r3, r2
 8013712:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8013714:	f7fc fb1a 	bl	800fd4c <HAL_GetTick>
 8013718:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801371a:	4b39      	ldr	r3, [pc, #228]	; (8013800 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	015b      	lsls	r3, r3, #5
 8013720:	0d1b      	lsrs	r3, r3, #20
 8013722:	69fa      	ldr	r2, [r7, #28]
 8013724:	fb02 f303 	mul.w	r3, r2, r3
 8013728:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801372a:	e054      	b.n	80137d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801372c:	683b      	ldr	r3, [r7, #0]
 801372e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013732:	d050      	beq.n	80137d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8013734:	f7fc fb0a 	bl	800fd4c <HAL_GetTick>
 8013738:	4602      	mov	r2, r0
 801373a:	69bb      	ldr	r3, [r7, #24]
 801373c:	1ad3      	subs	r3, r2, r3
 801373e:	69fa      	ldr	r2, [r7, #28]
 8013740:	429a      	cmp	r2, r3
 8013742:	d902      	bls.n	801374a <SPI_WaitFlagStateUntilTimeout+0x56>
 8013744:	69fb      	ldr	r3, [r7, #28]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d13d      	bne.n	80137c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	685a      	ldr	r2, [r3, #4]
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013758:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	685b      	ldr	r3, [r3, #4]
 801375e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013762:	d111      	bne.n	8013788 <SPI_WaitFlagStateUntilTimeout+0x94>
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	689b      	ldr	r3, [r3, #8]
 8013768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801376c:	d004      	beq.n	8013778 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	689b      	ldr	r3, [r3, #8]
 8013772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013776:	d107      	bne.n	8013788 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	681a      	ldr	r2, [r3, #0]
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013786:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801378c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013790:	d10f      	bne.n	80137b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	681a      	ldr	r2, [r3, #0]
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80137a0:	601a      	str	r2, [r3, #0]
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	681a      	ldr	r2, [r3, #0]
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80137b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	2201      	movs	r2, #1
 80137b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	2200      	movs	r2, #0
 80137be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80137c2:	2303      	movs	r3, #3
 80137c4:	e017      	b.n	80137f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80137c6:	697b      	ldr	r3, [r7, #20]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d101      	bne.n	80137d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80137cc:	2300      	movs	r3, #0
 80137ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80137d0:	697b      	ldr	r3, [r7, #20]
 80137d2:	3b01      	subs	r3, #1
 80137d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	689a      	ldr	r2, [r3, #8]
 80137dc:	68bb      	ldr	r3, [r7, #8]
 80137de:	4013      	ands	r3, r2
 80137e0:	68ba      	ldr	r2, [r7, #8]
 80137e2:	429a      	cmp	r2, r3
 80137e4:	bf0c      	ite	eq
 80137e6:	2301      	moveq	r3, #1
 80137e8:	2300      	movne	r3, #0
 80137ea:	b2db      	uxtb	r3, r3
 80137ec:	461a      	mov	r2, r3
 80137ee:	79fb      	ldrb	r3, [r7, #7]
 80137f0:	429a      	cmp	r2, r3
 80137f2:	d19b      	bne.n	801372c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80137f4:	2300      	movs	r3, #0
}
 80137f6:	4618      	mov	r0, r3
 80137f8:	3720      	adds	r7, #32
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd80      	pop	{r7, pc}
 80137fe:	bf00      	nop
 8013800:	20000000 	.word	0x20000000

08013804 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b086      	sub	sp, #24
 8013808:	af02      	add	r7, sp, #8
 801380a:	60f8      	str	r0, [r7, #12]
 801380c:	60b9      	str	r1, [r7, #8]
 801380e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	685b      	ldr	r3, [r3, #4]
 8013814:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013818:	d111      	bne.n	801383e <SPI_EndRxTransaction+0x3a>
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	689b      	ldr	r3, [r3, #8]
 801381e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013822:	d004      	beq.n	801382e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	689b      	ldr	r3, [r3, #8]
 8013828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801382c:	d107      	bne.n	801383e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	681a      	ldr	r2, [r3, #0]
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801383c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	685b      	ldr	r3, [r3, #4]
 8013842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013846:	d12a      	bne.n	801389e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	689b      	ldr	r3, [r3, #8]
 801384c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013850:	d012      	beq.n	8013878 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	9300      	str	r3, [sp, #0]
 8013856:	68bb      	ldr	r3, [r7, #8]
 8013858:	2200      	movs	r2, #0
 801385a:	2180      	movs	r1, #128	; 0x80
 801385c:	68f8      	ldr	r0, [r7, #12]
 801385e:	f7ff ff49 	bl	80136f4 <SPI_WaitFlagStateUntilTimeout>
 8013862:	4603      	mov	r3, r0
 8013864:	2b00      	cmp	r3, #0
 8013866:	d02d      	beq.n	80138c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801386c:	f043 0220 	orr.w	r2, r3, #32
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8013874:	2303      	movs	r3, #3
 8013876:	e026      	b.n	80138c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	9300      	str	r3, [sp, #0]
 801387c:	68bb      	ldr	r3, [r7, #8]
 801387e:	2200      	movs	r2, #0
 8013880:	2101      	movs	r1, #1
 8013882:	68f8      	ldr	r0, [r7, #12]
 8013884:	f7ff ff36 	bl	80136f4 <SPI_WaitFlagStateUntilTimeout>
 8013888:	4603      	mov	r3, r0
 801388a:	2b00      	cmp	r3, #0
 801388c:	d01a      	beq.n	80138c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013892:	f043 0220 	orr.w	r2, r3, #32
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801389a:	2303      	movs	r3, #3
 801389c:	e013      	b.n	80138c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	9300      	str	r3, [sp, #0]
 80138a2:	68bb      	ldr	r3, [r7, #8]
 80138a4:	2200      	movs	r2, #0
 80138a6:	2101      	movs	r1, #1
 80138a8:	68f8      	ldr	r0, [r7, #12]
 80138aa:	f7ff ff23 	bl	80136f4 <SPI_WaitFlagStateUntilTimeout>
 80138ae:	4603      	mov	r3, r0
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d007      	beq.n	80138c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138b8:	f043 0220 	orr.w	r2, r3, #32
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80138c0:	2303      	movs	r3, #3
 80138c2:	e000      	b.n	80138c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80138c4:	2300      	movs	r3, #0
}
 80138c6:	4618      	mov	r0, r3
 80138c8:	3710      	adds	r7, #16
 80138ca:	46bd      	mov	sp, r7
 80138cc:	bd80      	pop	{r7, pc}
	...

080138d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b088      	sub	sp, #32
 80138d4:	af02      	add	r7, sp, #8
 80138d6:	60f8      	str	r0, [r7, #12]
 80138d8:	60b9      	str	r1, [r7, #8]
 80138da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80138dc:	4b1b      	ldr	r3, [pc, #108]	; (801394c <SPI_EndRxTxTransaction+0x7c>)
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	4a1b      	ldr	r2, [pc, #108]	; (8013950 <SPI_EndRxTxTransaction+0x80>)
 80138e2:	fba2 2303 	umull	r2, r3, r2, r3
 80138e6:	0d5b      	lsrs	r3, r3, #21
 80138e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80138ec:	fb02 f303 	mul.w	r3, r2, r3
 80138f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	685b      	ldr	r3, [r3, #4]
 80138f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80138fa:	d112      	bne.n	8013922 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	9300      	str	r3, [sp, #0]
 8013900:	68bb      	ldr	r3, [r7, #8]
 8013902:	2200      	movs	r2, #0
 8013904:	2180      	movs	r1, #128	; 0x80
 8013906:	68f8      	ldr	r0, [r7, #12]
 8013908:	f7ff fef4 	bl	80136f4 <SPI_WaitFlagStateUntilTimeout>
 801390c:	4603      	mov	r3, r0
 801390e:	2b00      	cmp	r3, #0
 8013910:	d016      	beq.n	8013940 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013916:	f043 0220 	orr.w	r2, r3, #32
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801391e:	2303      	movs	r3, #3
 8013920:	e00f      	b.n	8013942 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8013922:	697b      	ldr	r3, [r7, #20]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d00a      	beq.n	801393e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8013928:	697b      	ldr	r3, [r7, #20]
 801392a:	3b01      	subs	r3, #1
 801392c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	689b      	ldr	r3, [r3, #8]
 8013934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013938:	2b80      	cmp	r3, #128	; 0x80
 801393a:	d0f2      	beq.n	8013922 <SPI_EndRxTxTransaction+0x52>
 801393c:	e000      	b.n	8013940 <SPI_EndRxTxTransaction+0x70>
        break;
 801393e:	bf00      	nop
  }

  return HAL_OK;
 8013940:	2300      	movs	r3, #0
}
 8013942:	4618      	mov	r0, r3
 8013944:	3718      	adds	r7, #24
 8013946:	46bd      	mov	sp, r7
 8013948:	bd80      	pop	{r7, pc}
 801394a:	bf00      	nop
 801394c:	20000000 	.word	0x20000000
 8013950:	165e9f81 	.word	0x165e9f81

08013954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b082      	sub	sp, #8
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d101      	bne.n	8013966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013962:	2301      	movs	r3, #1
 8013964:	e041      	b.n	80139ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801396c:	b2db      	uxtb	r3, r3
 801396e:	2b00      	cmp	r3, #0
 8013970:	d106      	bne.n	8013980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	2200      	movs	r2, #0
 8013976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801397a:	6878      	ldr	r0, [r7, #4]
 801397c:	f000 f839 	bl	80139f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	2202      	movs	r2, #2
 8013984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	681a      	ldr	r2, [r3, #0]
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	3304      	adds	r3, #4
 8013990:	4619      	mov	r1, r3
 8013992:	4610      	mov	r0, r2
 8013994:	f000 fadc 	bl	8013f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	2201      	movs	r2, #1
 801399c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2201      	movs	r2, #1
 80139a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2201      	movs	r2, #1
 80139ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2201      	movs	r2, #1
 80139b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	2201      	movs	r2, #1
 80139bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	2201      	movs	r2, #1
 80139c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2201      	movs	r2, #1
 80139cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2201      	movs	r2, #1
 80139d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2201      	movs	r2, #1
 80139dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	2201      	movs	r2, #1
 80139e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80139e8:	2300      	movs	r3, #0
}
 80139ea:	4618      	mov	r0, r3
 80139ec:	3708      	adds	r7, #8
 80139ee:	46bd      	mov	sp, r7
 80139f0:	bd80      	pop	{r7, pc}

080139f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80139f2:	b480      	push	{r7}
 80139f4:	b083      	sub	sp, #12
 80139f6:	af00      	add	r7, sp, #0
 80139f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80139fa:	bf00      	nop
 80139fc:	370c      	adds	r7, #12
 80139fe:	46bd      	mov	sp, r7
 8013a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a04:	4770      	bx	lr
	...

08013a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013a08:	b480      	push	{r7}
 8013a0a:	b085      	sub	sp, #20
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013a16:	b2db      	uxtb	r3, r3
 8013a18:	2b01      	cmp	r3, #1
 8013a1a:	d001      	beq.n	8013a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	e044      	b.n	8013aaa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2202      	movs	r2, #2
 8013a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	68da      	ldr	r2, [r3, #12]
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	f042 0201 	orr.w	r2, r2, #1
 8013a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	4a1e      	ldr	r2, [pc, #120]	; (8013ab8 <HAL_TIM_Base_Start_IT+0xb0>)
 8013a3e:	4293      	cmp	r3, r2
 8013a40:	d018      	beq.n	8013a74 <HAL_TIM_Base_Start_IT+0x6c>
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013a4a:	d013      	beq.n	8013a74 <HAL_TIM_Base_Start_IT+0x6c>
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	4a1a      	ldr	r2, [pc, #104]	; (8013abc <HAL_TIM_Base_Start_IT+0xb4>)
 8013a52:	4293      	cmp	r3, r2
 8013a54:	d00e      	beq.n	8013a74 <HAL_TIM_Base_Start_IT+0x6c>
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	4a19      	ldr	r2, [pc, #100]	; (8013ac0 <HAL_TIM_Base_Start_IT+0xb8>)
 8013a5c:	4293      	cmp	r3, r2
 8013a5e:	d009      	beq.n	8013a74 <HAL_TIM_Base_Start_IT+0x6c>
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	4a17      	ldr	r2, [pc, #92]	; (8013ac4 <HAL_TIM_Base_Start_IT+0xbc>)
 8013a66:	4293      	cmp	r3, r2
 8013a68:	d004      	beq.n	8013a74 <HAL_TIM_Base_Start_IT+0x6c>
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	4a16      	ldr	r2, [pc, #88]	; (8013ac8 <HAL_TIM_Base_Start_IT+0xc0>)
 8013a70:	4293      	cmp	r3, r2
 8013a72:	d111      	bne.n	8013a98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	689b      	ldr	r3, [r3, #8]
 8013a7a:	f003 0307 	and.w	r3, r3, #7
 8013a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	2b06      	cmp	r3, #6
 8013a84:	d010      	beq.n	8013aa8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	681a      	ldr	r2, [r3, #0]
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	f042 0201 	orr.w	r2, r2, #1
 8013a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013a96:	e007      	b.n	8013aa8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	681a      	ldr	r2, [r3, #0]
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	f042 0201 	orr.w	r2, r2, #1
 8013aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013aa8:	2300      	movs	r3, #0
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3714      	adds	r7, #20
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab4:	4770      	bx	lr
 8013ab6:	bf00      	nop
 8013ab8:	40010000 	.word	0x40010000
 8013abc:	40000400 	.word	0x40000400
 8013ac0:	40000800 	.word	0x40000800
 8013ac4:	40000c00 	.word	0x40000c00
 8013ac8:	40014000 	.word	0x40014000

08013acc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b082      	sub	sp, #8
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d101      	bne.n	8013ade <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013ada:	2301      	movs	r3, #1
 8013adc:	e041      	b.n	8013b62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013ae4:	b2db      	uxtb	r3, r3
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d106      	bne.n	8013af8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	2200      	movs	r2, #0
 8013aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	f7fa fd12 	bl	800e51c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	2202      	movs	r2, #2
 8013afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	681a      	ldr	r2, [r3, #0]
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	3304      	adds	r3, #4
 8013b08:	4619      	mov	r1, r3
 8013b0a:	4610      	mov	r0, r2
 8013b0c:	f000 fa20 	bl	8013f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	2201      	movs	r2, #1
 8013b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	2201      	movs	r2, #1
 8013b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2201      	movs	r2, #1
 8013b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2201      	movs	r2, #1
 8013b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	2201      	movs	r2, #1
 8013b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	2201      	movs	r2, #1
 8013b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	2201      	movs	r2, #1
 8013b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	2201      	movs	r2, #1
 8013b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	2201      	movs	r2, #1
 8013b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	2201      	movs	r2, #1
 8013b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013b60:	2300      	movs	r3, #0
}
 8013b62:	4618      	mov	r0, r3
 8013b64:	3708      	adds	r7, #8
 8013b66:	46bd      	mov	sp, r7
 8013b68:	bd80      	pop	{r7, pc}

08013b6a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013b6a:	b580      	push	{r7, lr}
 8013b6c:	b082      	sub	sp, #8
 8013b6e:	af00      	add	r7, sp, #0
 8013b70:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	691b      	ldr	r3, [r3, #16]
 8013b78:	f003 0302 	and.w	r3, r3, #2
 8013b7c:	2b02      	cmp	r3, #2
 8013b7e:	d122      	bne.n	8013bc6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	68db      	ldr	r3, [r3, #12]
 8013b86:	f003 0302 	and.w	r3, r3, #2
 8013b8a:	2b02      	cmp	r3, #2
 8013b8c:	d11b      	bne.n	8013bc6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	f06f 0202 	mvn.w	r2, #2
 8013b96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2201      	movs	r2, #1
 8013b9c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	699b      	ldr	r3, [r3, #24]
 8013ba4:	f003 0303 	and.w	r3, r3, #3
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d003      	beq.n	8013bb4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013bac:	6878      	ldr	r0, [r7, #4]
 8013bae:	f000 f9b1 	bl	8013f14 <HAL_TIM_IC_CaptureCallback>
 8013bb2:	e005      	b.n	8013bc0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013bb4:	6878      	ldr	r0, [r7, #4]
 8013bb6:	f000 f9a3 	bl	8013f00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013bba:	6878      	ldr	r0, [r7, #4]
 8013bbc:	f000 f9b4 	bl	8013f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	691b      	ldr	r3, [r3, #16]
 8013bcc:	f003 0304 	and.w	r3, r3, #4
 8013bd0:	2b04      	cmp	r3, #4
 8013bd2:	d122      	bne.n	8013c1a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	68db      	ldr	r3, [r3, #12]
 8013bda:	f003 0304 	and.w	r3, r3, #4
 8013bde:	2b04      	cmp	r3, #4
 8013be0:	d11b      	bne.n	8013c1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	f06f 0204 	mvn.w	r2, #4
 8013bea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	2202      	movs	r2, #2
 8013bf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	699b      	ldr	r3, [r3, #24]
 8013bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d003      	beq.n	8013c08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013c00:	6878      	ldr	r0, [r7, #4]
 8013c02:	f000 f987 	bl	8013f14 <HAL_TIM_IC_CaptureCallback>
 8013c06:	e005      	b.n	8013c14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013c08:	6878      	ldr	r0, [r7, #4]
 8013c0a:	f000 f979 	bl	8013f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013c0e:	6878      	ldr	r0, [r7, #4]
 8013c10:	f000 f98a 	bl	8013f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2200      	movs	r2, #0
 8013c18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	691b      	ldr	r3, [r3, #16]
 8013c20:	f003 0308 	and.w	r3, r3, #8
 8013c24:	2b08      	cmp	r3, #8
 8013c26:	d122      	bne.n	8013c6e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	68db      	ldr	r3, [r3, #12]
 8013c2e:	f003 0308 	and.w	r3, r3, #8
 8013c32:	2b08      	cmp	r3, #8
 8013c34:	d11b      	bne.n	8013c6e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	f06f 0208 	mvn.w	r2, #8
 8013c3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	2204      	movs	r2, #4
 8013c44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	69db      	ldr	r3, [r3, #28]
 8013c4c:	f003 0303 	and.w	r3, r3, #3
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d003      	beq.n	8013c5c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	f000 f95d 	bl	8013f14 <HAL_TIM_IC_CaptureCallback>
 8013c5a:	e005      	b.n	8013c68 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013c5c:	6878      	ldr	r0, [r7, #4]
 8013c5e:	f000 f94f 	bl	8013f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013c62:	6878      	ldr	r0, [r7, #4]
 8013c64:	f000 f960 	bl	8013f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	691b      	ldr	r3, [r3, #16]
 8013c74:	f003 0310 	and.w	r3, r3, #16
 8013c78:	2b10      	cmp	r3, #16
 8013c7a:	d122      	bne.n	8013cc2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	68db      	ldr	r3, [r3, #12]
 8013c82:	f003 0310 	and.w	r3, r3, #16
 8013c86:	2b10      	cmp	r3, #16
 8013c88:	d11b      	bne.n	8013cc2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	f06f 0210 	mvn.w	r2, #16
 8013c92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	2208      	movs	r2, #8
 8013c98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	69db      	ldr	r3, [r3, #28]
 8013ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d003      	beq.n	8013cb0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013ca8:	6878      	ldr	r0, [r7, #4]
 8013caa:	f000 f933 	bl	8013f14 <HAL_TIM_IC_CaptureCallback>
 8013cae:	e005      	b.n	8013cbc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013cb0:	6878      	ldr	r0, [r7, #4]
 8013cb2:	f000 f925 	bl	8013f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013cb6:	6878      	ldr	r0, [r7, #4]
 8013cb8:	f000 f936 	bl	8013f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	691b      	ldr	r3, [r3, #16]
 8013cc8:	f003 0301 	and.w	r3, r3, #1
 8013ccc:	2b01      	cmp	r3, #1
 8013cce:	d10e      	bne.n	8013cee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	68db      	ldr	r3, [r3, #12]
 8013cd6:	f003 0301 	and.w	r3, r3, #1
 8013cda:	2b01      	cmp	r3, #1
 8013cdc:	d107      	bne.n	8013cee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	f06f 0201 	mvn.w	r2, #1
 8013ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013ce8:	6878      	ldr	r0, [r7, #4]
 8013cea:	f7fa fb07 	bl	800e2fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	691b      	ldr	r3, [r3, #16]
 8013cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013cf8:	2b80      	cmp	r3, #128	; 0x80
 8013cfa:	d10e      	bne.n	8013d1a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	68db      	ldr	r3, [r3, #12]
 8013d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013d06:	2b80      	cmp	r3, #128	; 0x80
 8013d08:	d107      	bne.n	8013d1a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8013d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8013d14:	6878      	ldr	r0, [r7, #4]
 8013d16:	f000 fb9f 	bl	8014458 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	691b      	ldr	r3, [r3, #16]
 8013d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d24:	2b40      	cmp	r3, #64	; 0x40
 8013d26:	d10e      	bne.n	8013d46 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	68db      	ldr	r3, [r3, #12]
 8013d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d32:	2b40      	cmp	r3, #64	; 0x40
 8013d34:	d107      	bne.n	8013d46 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8013d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013d40:	6878      	ldr	r0, [r7, #4]
 8013d42:	f000 f8fb 	bl	8013f3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	691b      	ldr	r3, [r3, #16]
 8013d4c:	f003 0320 	and.w	r3, r3, #32
 8013d50:	2b20      	cmp	r3, #32
 8013d52:	d10e      	bne.n	8013d72 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	68db      	ldr	r3, [r3, #12]
 8013d5a:	f003 0320 	and.w	r3, r3, #32
 8013d5e:	2b20      	cmp	r3, #32
 8013d60:	d107      	bne.n	8013d72 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	f06f 0220 	mvn.w	r2, #32
 8013d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013d6c:	6878      	ldr	r0, [r7, #4]
 8013d6e:	f000 fb69 	bl	8014444 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013d72:	bf00      	nop
 8013d74:	3708      	adds	r7, #8
 8013d76:	46bd      	mov	sp, r7
 8013d78:	bd80      	pop	{r7, pc}
	...

08013d7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b086      	sub	sp, #24
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	60f8      	str	r0, [r7, #12]
 8013d84:	60b9      	str	r1, [r7, #8]
 8013d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013d88:	2300      	movs	r3, #0
 8013d8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013d92:	2b01      	cmp	r3, #1
 8013d94:	d101      	bne.n	8013d9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8013d96:	2302      	movs	r3, #2
 8013d98:	e0ae      	b.n	8013ef8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	2201      	movs	r2, #1
 8013d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	2b0c      	cmp	r3, #12
 8013da6:	f200 809f 	bhi.w	8013ee8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8013daa:	a201      	add	r2, pc, #4	; (adr r2, 8013db0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013db0:	08013de5 	.word	0x08013de5
 8013db4:	08013ee9 	.word	0x08013ee9
 8013db8:	08013ee9 	.word	0x08013ee9
 8013dbc:	08013ee9 	.word	0x08013ee9
 8013dc0:	08013e25 	.word	0x08013e25
 8013dc4:	08013ee9 	.word	0x08013ee9
 8013dc8:	08013ee9 	.word	0x08013ee9
 8013dcc:	08013ee9 	.word	0x08013ee9
 8013dd0:	08013e67 	.word	0x08013e67
 8013dd4:	08013ee9 	.word	0x08013ee9
 8013dd8:	08013ee9 	.word	0x08013ee9
 8013ddc:	08013ee9 	.word	0x08013ee9
 8013de0:	08013ea7 	.word	0x08013ea7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	68b9      	ldr	r1, [r7, #8]
 8013dea:	4618      	mov	r0, r3
 8013dec:	f000 f930 	bl	8014050 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	699a      	ldr	r2, [r3, #24]
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	f042 0208 	orr.w	r2, r2, #8
 8013dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	699a      	ldr	r2, [r3, #24]
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	f022 0204 	bic.w	r2, r2, #4
 8013e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	6999      	ldr	r1, [r3, #24]
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	691a      	ldr	r2, [r3, #16]
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	430a      	orrs	r2, r1
 8013e20:	619a      	str	r2, [r3, #24]
      break;
 8013e22:	e064      	b.n	8013eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	68b9      	ldr	r1, [r7, #8]
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	f000 f976 	bl	801411c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	699a      	ldr	r2, [r3, #24]
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	699a      	ldr	r2, [r3, #24]
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	6999      	ldr	r1, [r3, #24]
 8013e56:	68bb      	ldr	r3, [r7, #8]
 8013e58:	691b      	ldr	r3, [r3, #16]
 8013e5a:	021a      	lsls	r2, r3, #8
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	430a      	orrs	r2, r1
 8013e62:	619a      	str	r2, [r3, #24]
      break;
 8013e64:	e043      	b.n	8013eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	68b9      	ldr	r1, [r7, #8]
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	f000 f9c1 	bl	80141f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	69da      	ldr	r2, [r3, #28]
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	f042 0208 	orr.w	r2, r2, #8
 8013e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	69da      	ldr	r2, [r3, #28]
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	f022 0204 	bic.w	r2, r2, #4
 8013e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	69d9      	ldr	r1, [r3, #28]
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	691a      	ldr	r2, [r3, #16]
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	430a      	orrs	r2, r1
 8013ea2:	61da      	str	r2, [r3, #28]
      break;
 8013ea4:	e023      	b.n	8013eee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	68b9      	ldr	r1, [r7, #8]
 8013eac:	4618      	mov	r0, r3
 8013eae:	f000 fa0b 	bl	80142c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	69da      	ldr	r2, [r3, #28]
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	69da      	ldr	r2, [r3, #28]
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	69d9      	ldr	r1, [r3, #28]
 8013ed8:	68bb      	ldr	r3, [r7, #8]
 8013eda:	691b      	ldr	r3, [r3, #16]
 8013edc:	021a      	lsls	r2, r3, #8
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	430a      	orrs	r2, r1
 8013ee4:	61da      	str	r2, [r3, #28]
      break;
 8013ee6:	e002      	b.n	8013eee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8013ee8:	2301      	movs	r3, #1
 8013eea:	75fb      	strb	r3, [r7, #23]
      break;
 8013eec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ef8:	4618      	mov	r0, r3
 8013efa:	3718      	adds	r7, #24
 8013efc:	46bd      	mov	sp, r7
 8013efe:	bd80      	pop	{r7, pc}

08013f00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013f00:	b480      	push	{r7}
 8013f02:	b083      	sub	sp, #12
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013f08:	bf00      	nop
 8013f0a:	370c      	adds	r7, #12
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f12:	4770      	bx	lr

08013f14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013f14:	b480      	push	{r7}
 8013f16:	b083      	sub	sp, #12
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013f1c:	bf00      	nop
 8013f1e:	370c      	adds	r7, #12
 8013f20:	46bd      	mov	sp, r7
 8013f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f26:	4770      	bx	lr

08013f28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013f28:	b480      	push	{r7}
 8013f2a:	b083      	sub	sp, #12
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013f30:	bf00      	nop
 8013f32:	370c      	adds	r7, #12
 8013f34:	46bd      	mov	sp, r7
 8013f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3a:	4770      	bx	lr

08013f3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013f3c:	b480      	push	{r7}
 8013f3e:	b083      	sub	sp, #12
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013f44:	bf00      	nop
 8013f46:	370c      	adds	r7, #12
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f4e:	4770      	bx	lr

08013f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8013f50:	b480      	push	{r7}
 8013f52:	b085      	sub	sp, #20
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
 8013f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	4a34      	ldr	r2, [pc, #208]	; (8014034 <TIM_Base_SetConfig+0xe4>)
 8013f64:	4293      	cmp	r3, r2
 8013f66:	d00f      	beq.n	8013f88 <TIM_Base_SetConfig+0x38>
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013f6e:	d00b      	beq.n	8013f88 <TIM_Base_SetConfig+0x38>
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	4a31      	ldr	r2, [pc, #196]	; (8014038 <TIM_Base_SetConfig+0xe8>)
 8013f74:	4293      	cmp	r3, r2
 8013f76:	d007      	beq.n	8013f88 <TIM_Base_SetConfig+0x38>
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	4a30      	ldr	r2, [pc, #192]	; (801403c <TIM_Base_SetConfig+0xec>)
 8013f7c:	4293      	cmp	r3, r2
 8013f7e:	d003      	beq.n	8013f88 <TIM_Base_SetConfig+0x38>
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	4a2f      	ldr	r2, [pc, #188]	; (8014040 <TIM_Base_SetConfig+0xf0>)
 8013f84:	4293      	cmp	r3, r2
 8013f86:	d108      	bne.n	8013f9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013f90:	683b      	ldr	r3, [r7, #0]
 8013f92:	685b      	ldr	r3, [r3, #4]
 8013f94:	68fa      	ldr	r2, [r7, #12]
 8013f96:	4313      	orrs	r3, r2
 8013f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	4a25      	ldr	r2, [pc, #148]	; (8014034 <TIM_Base_SetConfig+0xe4>)
 8013f9e:	4293      	cmp	r3, r2
 8013fa0:	d01b      	beq.n	8013fda <TIM_Base_SetConfig+0x8a>
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013fa8:	d017      	beq.n	8013fda <TIM_Base_SetConfig+0x8a>
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	4a22      	ldr	r2, [pc, #136]	; (8014038 <TIM_Base_SetConfig+0xe8>)
 8013fae:	4293      	cmp	r3, r2
 8013fb0:	d013      	beq.n	8013fda <TIM_Base_SetConfig+0x8a>
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	4a21      	ldr	r2, [pc, #132]	; (801403c <TIM_Base_SetConfig+0xec>)
 8013fb6:	4293      	cmp	r3, r2
 8013fb8:	d00f      	beq.n	8013fda <TIM_Base_SetConfig+0x8a>
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	4a20      	ldr	r2, [pc, #128]	; (8014040 <TIM_Base_SetConfig+0xf0>)
 8013fbe:	4293      	cmp	r3, r2
 8013fc0:	d00b      	beq.n	8013fda <TIM_Base_SetConfig+0x8a>
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	4a1f      	ldr	r2, [pc, #124]	; (8014044 <TIM_Base_SetConfig+0xf4>)
 8013fc6:	4293      	cmp	r3, r2
 8013fc8:	d007      	beq.n	8013fda <TIM_Base_SetConfig+0x8a>
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	4a1e      	ldr	r2, [pc, #120]	; (8014048 <TIM_Base_SetConfig+0xf8>)
 8013fce:	4293      	cmp	r3, r2
 8013fd0:	d003      	beq.n	8013fda <TIM_Base_SetConfig+0x8a>
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	4a1d      	ldr	r2, [pc, #116]	; (801404c <TIM_Base_SetConfig+0xfc>)
 8013fd6:	4293      	cmp	r3, r2
 8013fd8:	d108      	bne.n	8013fec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013fe2:	683b      	ldr	r3, [r7, #0]
 8013fe4:	68db      	ldr	r3, [r3, #12]
 8013fe6:	68fa      	ldr	r2, [r7, #12]
 8013fe8:	4313      	orrs	r3, r2
 8013fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013ff2:	683b      	ldr	r3, [r7, #0]
 8013ff4:	695b      	ldr	r3, [r3, #20]
 8013ff6:	4313      	orrs	r3, r2
 8013ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	68fa      	ldr	r2, [r7, #12]
 8013ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	689a      	ldr	r2, [r3, #8]
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014008:	683b      	ldr	r3, [r7, #0]
 801400a:	681a      	ldr	r2, [r3, #0]
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	4a08      	ldr	r2, [pc, #32]	; (8014034 <TIM_Base_SetConfig+0xe4>)
 8014014:	4293      	cmp	r3, r2
 8014016:	d103      	bne.n	8014020 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014018:	683b      	ldr	r3, [r7, #0]
 801401a:	691a      	ldr	r2, [r3, #16]
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	2201      	movs	r2, #1
 8014024:	615a      	str	r2, [r3, #20]
}
 8014026:	bf00      	nop
 8014028:	3714      	adds	r7, #20
 801402a:	46bd      	mov	sp, r7
 801402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014030:	4770      	bx	lr
 8014032:	bf00      	nop
 8014034:	40010000 	.word	0x40010000
 8014038:	40000400 	.word	0x40000400
 801403c:	40000800 	.word	0x40000800
 8014040:	40000c00 	.word	0x40000c00
 8014044:	40014000 	.word	0x40014000
 8014048:	40014400 	.word	0x40014400
 801404c:	40014800 	.word	0x40014800

08014050 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014050:	b480      	push	{r7}
 8014052:	b087      	sub	sp, #28
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
 8014058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	6a1b      	ldr	r3, [r3, #32]
 801405e:	f023 0201 	bic.w	r2, r3, #1
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	6a1b      	ldr	r3, [r3, #32]
 801406a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	685b      	ldr	r3, [r3, #4]
 8014070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	699b      	ldr	r3, [r3, #24]
 8014076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801407e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	f023 0303 	bic.w	r3, r3, #3
 8014086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	68fa      	ldr	r2, [r7, #12]
 801408e:	4313      	orrs	r3, r2
 8014090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014092:	697b      	ldr	r3, [r7, #20]
 8014094:	f023 0302 	bic.w	r3, r3, #2
 8014098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801409a:	683b      	ldr	r3, [r7, #0]
 801409c:	689b      	ldr	r3, [r3, #8]
 801409e:	697a      	ldr	r2, [r7, #20]
 80140a0:	4313      	orrs	r3, r2
 80140a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	4a1c      	ldr	r2, [pc, #112]	; (8014118 <TIM_OC1_SetConfig+0xc8>)
 80140a8:	4293      	cmp	r3, r2
 80140aa:	d10c      	bne.n	80140c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80140ac:	697b      	ldr	r3, [r7, #20]
 80140ae:	f023 0308 	bic.w	r3, r3, #8
 80140b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	68db      	ldr	r3, [r3, #12]
 80140b8:	697a      	ldr	r2, [r7, #20]
 80140ba:	4313      	orrs	r3, r2
 80140bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	f023 0304 	bic.w	r3, r3, #4
 80140c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	4a13      	ldr	r2, [pc, #76]	; (8014118 <TIM_OC1_SetConfig+0xc8>)
 80140ca:	4293      	cmp	r3, r2
 80140cc:	d111      	bne.n	80140f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80140ce:	693b      	ldr	r3, [r7, #16]
 80140d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80140d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80140d6:	693b      	ldr	r3, [r7, #16]
 80140d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80140dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	695b      	ldr	r3, [r3, #20]
 80140e2:	693a      	ldr	r2, [r7, #16]
 80140e4:	4313      	orrs	r3, r2
 80140e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80140e8:	683b      	ldr	r3, [r7, #0]
 80140ea:	699b      	ldr	r3, [r3, #24]
 80140ec:	693a      	ldr	r2, [r7, #16]
 80140ee:	4313      	orrs	r3, r2
 80140f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	693a      	ldr	r2, [r7, #16]
 80140f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	68fa      	ldr	r2, [r7, #12]
 80140fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	685a      	ldr	r2, [r3, #4]
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	697a      	ldr	r2, [r7, #20]
 801410a:	621a      	str	r2, [r3, #32]
}
 801410c:	bf00      	nop
 801410e:	371c      	adds	r7, #28
 8014110:	46bd      	mov	sp, r7
 8014112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014116:	4770      	bx	lr
 8014118:	40010000 	.word	0x40010000

0801411c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801411c:	b480      	push	{r7}
 801411e:	b087      	sub	sp, #28
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
 8014124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	6a1b      	ldr	r3, [r3, #32]
 801412a:	f023 0210 	bic.w	r2, r3, #16
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	6a1b      	ldr	r3, [r3, #32]
 8014136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	685b      	ldr	r3, [r3, #4]
 801413c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	699b      	ldr	r3, [r3, #24]
 8014142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801414a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014154:	683b      	ldr	r3, [r7, #0]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	021b      	lsls	r3, r3, #8
 801415a:	68fa      	ldr	r2, [r7, #12]
 801415c:	4313      	orrs	r3, r2
 801415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014160:	697b      	ldr	r3, [r7, #20]
 8014162:	f023 0320 	bic.w	r3, r3, #32
 8014166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	689b      	ldr	r3, [r3, #8]
 801416c:	011b      	lsls	r3, r3, #4
 801416e:	697a      	ldr	r2, [r7, #20]
 8014170:	4313      	orrs	r3, r2
 8014172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	4a1e      	ldr	r2, [pc, #120]	; (80141f0 <TIM_OC2_SetConfig+0xd4>)
 8014178:	4293      	cmp	r3, r2
 801417a:	d10d      	bne.n	8014198 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801417c:	697b      	ldr	r3, [r7, #20]
 801417e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014184:	683b      	ldr	r3, [r7, #0]
 8014186:	68db      	ldr	r3, [r3, #12]
 8014188:	011b      	lsls	r3, r3, #4
 801418a:	697a      	ldr	r2, [r7, #20]
 801418c:	4313      	orrs	r3, r2
 801418e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014190:	697b      	ldr	r3, [r7, #20]
 8014192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014196:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	4a15      	ldr	r2, [pc, #84]	; (80141f0 <TIM_OC2_SetConfig+0xd4>)
 801419c:	4293      	cmp	r3, r2
 801419e:	d113      	bne.n	80141c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80141a0:	693b      	ldr	r3, [r7, #16]
 80141a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80141a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80141a8:	693b      	ldr	r3, [r7, #16]
 80141aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80141ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80141b0:	683b      	ldr	r3, [r7, #0]
 80141b2:	695b      	ldr	r3, [r3, #20]
 80141b4:	009b      	lsls	r3, r3, #2
 80141b6:	693a      	ldr	r2, [r7, #16]
 80141b8:	4313      	orrs	r3, r2
 80141ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80141bc:	683b      	ldr	r3, [r7, #0]
 80141be:	699b      	ldr	r3, [r3, #24]
 80141c0:	009b      	lsls	r3, r3, #2
 80141c2:	693a      	ldr	r2, [r7, #16]
 80141c4:	4313      	orrs	r3, r2
 80141c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	693a      	ldr	r2, [r7, #16]
 80141cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	68fa      	ldr	r2, [r7, #12]
 80141d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	685a      	ldr	r2, [r3, #4]
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	697a      	ldr	r2, [r7, #20]
 80141e0:	621a      	str	r2, [r3, #32]
}
 80141e2:	bf00      	nop
 80141e4:	371c      	adds	r7, #28
 80141e6:	46bd      	mov	sp, r7
 80141e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ec:	4770      	bx	lr
 80141ee:	bf00      	nop
 80141f0:	40010000 	.word	0x40010000

080141f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80141f4:	b480      	push	{r7}
 80141f6:	b087      	sub	sp, #28
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
 80141fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	6a1b      	ldr	r3, [r3, #32]
 8014202:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	6a1b      	ldr	r3, [r3, #32]
 801420e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	685b      	ldr	r3, [r3, #4]
 8014214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	69db      	ldr	r3, [r3, #28]
 801421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	f023 0303 	bic.w	r3, r3, #3
 801422a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801422c:	683b      	ldr	r3, [r7, #0]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	68fa      	ldr	r2, [r7, #12]
 8014232:	4313      	orrs	r3, r2
 8014234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014236:	697b      	ldr	r3, [r7, #20]
 8014238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801423c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	689b      	ldr	r3, [r3, #8]
 8014242:	021b      	lsls	r3, r3, #8
 8014244:	697a      	ldr	r2, [r7, #20]
 8014246:	4313      	orrs	r3, r2
 8014248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	4a1d      	ldr	r2, [pc, #116]	; (80142c4 <TIM_OC3_SetConfig+0xd0>)
 801424e:	4293      	cmp	r3, r2
 8014250:	d10d      	bne.n	801426e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014252:	697b      	ldr	r3, [r7, #20]
 8014254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801425a:	683b      	ldr	r3, [r7, #0]
 801425c:	68db      	ldr	r3, [r3, #12]
 801425e:	021b      	lsls	r3, r3, #8
 8014260:	697a      	ldr	r2, [r7, #20]
 8014262:	4313      	orrs	r3, r2
 8014264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014266:	697b      	ldr	r3, [r7, #20]
 8014268:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801426c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	4a14      	ldr	r2, [pc, #80]	; (80142c4 <TIM_OC3_SetConfig+0xd0>)
 8014272:	4293      	cmp	r3, r2
 8014274:	d113      	bne.n	801429e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014276:	693b      	ldr	r3, [r7, #16]
 8014278:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801427c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801427e:	693b      	ldr	r3, [r7, #16]
 8014280:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014286:	683b      	ldr	r3, [r7, #0]
 8014288:	695b      	ldr	r3, [r3, #20]
 801428a:	011b      	lsls	r3, r3, #4
 801428c:	693a      	ldr	r2, [r7, #16]
 801428e:	4313      	orrs	r3, r2
 8014290:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014292:	683b      	ldr	r3, [r7, #0]
 8014294:	699b      	ldr	r3, [r3, #24]
 8014296:	011b      	lsls	r3, r3, #4
 8014298:	693a      	ldr	r2, [r7, #16]
 801429a:	4313      	orrs	r3, r2
 801429c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	693a      	ldr	r2, [r7, #16]
 80142a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	68fa      	ldr	r2, [r7, #12]
 80142a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80142aa:	683b      	ldr	r3, [r7, #0]
 80142ac:	685a      	ldr	r2, [r3, #4]
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	697a      	ldr	r2, [r7, #20]
 80142b6:	621a      	str	r2, [r3, #32]
}
 80142b8:	bf00      	nop
 80142ba:	371c      	adds	r7, #28
 80142bc:	46bd      	mov	sp, r7
 80142be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c2:	4770      	bx	lr
 80142c4:	40010000 	.word	0x40010000

080142c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80142c8:	b480      	push	{r7}
 80142ca:	b087      	sub	sp, #28
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	6a1b      	ldr	r3, [r3, #32]
 80142d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	6a1b      	ldr	r3, [r3, #32]
 80142e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	685b      	ldr	r3, [r3, #4]
 80142e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	69db      	ldr	r3, [r3, #28]
 80142ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80142f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80142fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014300:	683b      	ldr	r3, [r7, #0]
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	021b      	lsls	r3, r3, #8
 8014306:	68fa      	ldr	r2, [r7, #12]
 8014308:	4313      	orrs	r3, r2
 801430a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801430c:	693b      	ldr	r3, [r7, #16]
 801430e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014312:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014314:	683b      	ldr	r3, [r7, #0]
 8014316:	689b      	ldr	r3, [r3, #8]
 8014318:	031b      	lsls	r3, r3, #12
 801431a:	693a      	ldr	r2, [r7, #16]
 801431c:	4313      	orrs	r3, r2
 801431e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	4a10      	ldr	r2, [pc, #64]	; (8014364 <TIM_OC4_SetConfig+0x9c>)
 8014324:	4293      	cmp	r3, r2
 8014326:	d109      	bne.n	801433c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014328:	697b      	ldr	r3, [r7, #20]
 801432a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801432e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014330:	683b      	ldr	r3, [r7, #0]
 8014332:	695b      	ldr	r3, [r3, #20]
 8014334:	019b      	lsls	r3, r3, #6
 8014336:	697a      	ldr	r2, [r7, #20]
 8014338:	4313      	orrs	r3, r2
 801433a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	697a      	ldr	r2, [r7, #20]
 8014340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	68fa      	ldr	r2, [r7, #12]
 8014346:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014348:	683b      	ldr	r3, [r7, #0]
 801434a:	685a      	ldr	r2, [r3, #4]
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	693a      	ldr	r2, [r7, #16]
 8014354:	621a      	str	r2, [r3, #32]
}
 8014356:	bf00      	nop
 8014358:	371c      	adds	r7, #28
 801435a:	46bd      	mov	sp, r7
 801435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014360:	4770      	bx	lr
 8014362:	bf00      	nop
 8014364:	40010000 	.word	0x40010000

08014368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014368:	b480      	push	{r7}
 801436a:	b085      	sub	sp, #20
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
 8014370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014378:	2b01      	cmp	r3, #1
 801437a:	d101      	bne.n	8014380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801437c:	2302      	movs	r3, #2
 801437e:	e050      	b.n	8014422 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	2201      	movs	r2, #1
 8014384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	2202      	movs	r2, #2
 801438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	685b      	ldr	r3, [r3, #4]
 8014396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	689b      	ldr	r3, [r3, #8]
 801439e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80143a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80143a8:	683b      	ldr	r3, [r7, #0]
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	68fa      	ldr	r2, [r7, #12]
 80143ae:	4313      	orrs	r3, r2
 80143b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	68fa      	ldr	r2, [r7, #12]
 80143b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	4a1c      	ldr	r2, [pc, #112]	; (8014430 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80143c0:	4293      	cmp	r3, r2
 80143c2:	d018      	beq.n	80143f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80143cc:	d013      	beq.n	80143f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	4a18      	ldr	r2, [pc, #96]	; (8014434 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80143d4:	4293      	cmp	r3, r2
 80143d6:	d00e      	beq.n	80143f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	4a16      	ldr	r2, [pc, #88]	; (8014438 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80143de:	4293      	cmp	r3, r2
 80143e0:	d009      	beq.n	80143f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	4a15      	ldr	r2, [pc, #84]	; (801443c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80143e8:	4293      	cmp	r3, r2
 80143ea:	d004      	beq.n	80143f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	4a13      	ldr	r2, [pc, #76]	; (8014440 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80143f2:	4293      	cmp	r3, r2
 80143f4:	d10c      	bne.n	8014410 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80143f6:	68bb      	ldr	r3, [r7, #8]
 80143f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80143fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80143fe:	683b      	ldr	r3, [r7, #0]
 8014400:	685b      	ldr	r3, [r3, #4]
 8014402:	68ba      	ldr	r2, [r7, #8]
 8014404:	4313      	orrs	r3, r2
 8014406:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	68ba      	ldr	r2, [r7, #8]
 801440e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	2201      	movs	r2, #1
 8014414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	2200      	movs	r2, #0
 801441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014420:	2300      	movs	r3, #0
}
 8014422:	4618      	mov	r0, r3
 8014424:	3714      	adds	r7, #20
 8014426:	46bd      	mov	sp, r7
 8014428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442c:	4770      	bx	lr
 801442e:	bf00      	nop
 8014430:	40010000 	.word	0x40010000
 8014434:	40000400 	.word	0x40000400
 8014438:	40000800 	.word	0x40000800
 801443c:	40000c00 	.word	0x40000c00
 8014440:	40014000 	.word	0x40014000

08014444 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014444:	b480      	push	{r7}
 8014446:	b083      	sub	sp, #12
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801444c:	bf00      	nop
 801444e:	370c      	adds	r7, #12
 8014450:	46bd      	mov	sp, r7
 8014452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014456:	4770      	bx	lr

08014458 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014458:	b480      	push	{r7}
 801445a:	b083      	sub	sp, #12
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014460:	bf00      	nop
 8014462:	370c      	adds	r7, #12
 8014464:	46bd      	mov	sp, r7
 8014466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446a:	4770      	bx	lr

0801446c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b082      	sub	sp, #8
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d101      	bne.n	801447e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801447a:	2301      	movs	r3, #1
 801447c:	e03f      	b.n	80144fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014484:	b2db      	uxtb	r3, r3
 8014486:	2b00      	cmp	r3, #0
 8014488:	d106      	bne.n	8014498 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	2200      	movs	r2, #0
 801448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014492:	6878      	ldr	r0, [r7, #4]
 8014494:	f7fa f89e 	bl	800e5d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	2224      	movs	r2, #36	; 0x24
 801449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	68da      	ldr	r2, [r3, #12]
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80144ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f000 f829 	bl	8014508 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	691a      	ldr	r2, [r3, #16]
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80144c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	695a      	ldr	r2, [r3, #20]
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80144d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	68da      	ldr	r2, [r3, #12]
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80144e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2200      	movs	r2, #0
 80144ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	2220      	movs	r2, #32
 80144f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	2220      	movs	r2, #32
 80144f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80144fc:	2300      	movs	r3, #0
}
 80144fe:	4618      	mov	r0, r3
 8014500:	3708      	adds	r7, #8
 8014502:	46bd      	mov	sp, r7
 8014504:	bd80      	pop	{r7, pc}
	...

08014508 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801450c:	b09f      	sub	sp, #124	; 0x7c
 801450e:	af00      	add	r7, sp, #0
 8014510:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	691b      	ldr	r3, [r3, #16]
 8014518:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801451c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801451e:	68d9      	ldr	r1, [r3, #12]
 8014520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014522:	681a      	ldr	r2, [r3, #0]
 8014524:	ea40 0301 	orr.w	r3, r0, r1
 8014528:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801452a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801452c:	689a      	ldr	r2, [r3, #8]
 801452e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014530:	691b      	ldr	r3, [r3, #16]
 8014532:	431a      	orrs	r2, r3
 8014534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014536:	695b      	ldr	r3, [r3, #20]
 8014538:	431a      	orrs	r2, r3
 801453a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801453c:	69db      	ldr	r3, [r3, #28]
 801453e:	4313      	orrs	r3, r2
 8014540:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8014542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	68db      	ldr	r3, [r3, #12]
 8014548:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801454c:	f021 010c 	bic.w	r1, r1, #12
 8014550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014552:	681a      	ldr	r2, [r3, #0]
 8014554:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014556:	430b      	orrs	r3, r1
 8014558:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801455a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	695b      	ldr	r3, [r3, #20]
 8014560:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8014564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014566:	6999      	ldr	r1, [r3, #24]
 8014568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801456a:	681a      	ldr	r2, [r3, #0]
 801456c:	ea40 0301 	orr.w	r3, r0, r1
 8014570:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014574:	681a      	ldr	r2, [r3, #0]
 8014576:	4bc5      	ldr	r3, [pc, #788]	; (801488c <UART_SetConfig+0x384>)
 8014578:	429a      	cmp	r2, r3
 801457a:	d004      	beq.n	8014586 <UART_SetConfig+0x7e>
 801457c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801457e:	681a      	ldr	r2, [r3, #0]
 8014580:	4bc3      	ldr	r3, [pc, #780]	; (8014890 <UART_SetConfig+0x388>)
 8014582:	429a      	cmp	r2, r3
 8014584:	d103      	bne.n	801458e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8014586:	f7fe fbf7 	bl	8012d78 <HAL_RCC_GetPCLK2Freq>
 801458a:	6778      	str	r0, [r7, #116]	; 0x74
 801458c:	e002      	b.n	8014594 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801458e:	f7fe fbdf 	bl	8012d50 <HAL_RCC_GetPCLK1Freq>
 8014592:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014596:	69db      	ldr	r3, [r3, #28]
 8014598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801459c:	f040 80b6 	bne.w	801470c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80145a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80145a2:	461c      	mov	r4, r3
 80145a4:	f04f 0500 	mov.w	r5, #0
 80145a8:	4622      	mov	r2, r4
 80145aa:	462b      	mov	r3, r5
 80145ac:	1891      	adds	r1, r2, r2
 80145ae:	6439      	str	r1, [r7, #64]	; 0x40
 80145b0:	415b      	adcs	r3, r3
 80145b2:	647b      	str	r3, [r7, #68]	; 0x44
 80145b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80145b8:	1912      	adds	r2, r2, r4
 80145ba:	eb45 0303 	adc.w	r3, r5, r3
 80145be:	f04f 0000 	mov.w	r0, #0
 80145c2:	f04f 0100 	mov.w	r1, #0
 80145c6:	00d9      	lsls	r1, r3, #3
 80145c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80145cc:	00d0      	lsls	r0, r2, #3
 80145ce:	4602      	mov	r2, r0
 80145d0:	460b      	mov	r3, r1
 80145d2:	1911      	adds	r1, r2, r4
 80145d4:	6639      	str	r1, [r7, #96]	; 0x60
 80145d6:	416b      	adcs	r3, r5
 80145d8:	667b      	str	r3, [r7, #100]	; 0x64
 80145da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80145dc:	685b      	ldr	r3, [r3, #4]
 80145de:	461a      	mov	r2, r3
 80145e0:	f04f 0300 	mov.w	r3, #0
 80145e4:	1891      	adds	r1, r2, r2
 80145e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80145e8:	415b      	adcs	r3, r3
 80145ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80145ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80145f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80145f4:	f7f7 fd7c 	bl	800c0f0 <__aeabi_uldivmod>
 80145f8:	4602      	mov	r2, r0
 80145fa:	460b      	mov	r3, r1
 80145fc:	4ba5      	ldr	r3, [pc, #660]	; (8014894 <UART_SetConfig+0x38c>)
 80145fe:	fba3 2302 	umull	r2, r3, r3, r2
 8014602:	095b      	lsrs	r3, r3, #5
 8014604:	011e      	lsls	r6, r3, #4
 8014606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014608:	461c      	mov	r4, r3
 801460a:	f04f 0500 	mov.w	r5, #0
 801460e:	4622      	mov	r2, r4
 8014610:	462b      	mov	r3, r5
 8014612:	1891      	adds	r1, r2, r2
 8014614:	6339      	str	r1, [r7, #48]	; 0x30
 8014616:	415b      	adcs	r3, r3
 8014618:	637b      	str	r3, [r7, #52]	; 0x34
 801461a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801461e:	1912      	adds	r2, r2, r4
 8014620:	eb45 0303 	adc.w	r3, r5, r3
 8014624:	f04f 0000 	mov.w	r0, #0
 8014628:	f04f 0100 	mov.w	r1, #0
 801462c:	00d9      	lsls	r1, r3, #3
 801462e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014632:	00d0      	lsls	r0, r2, #3
 8014634:	4602      	mov	r2, r0
 8014636:	460b      	mov	r3, r1
 8014638:	1911      	adds	r1, r2, r4
 801463a:	65b9      	str	r1, [r7, #88]	; 0x58
 801463c:	416b      	adcs	r3, r5
 801463e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014642:	685b      	ldr	r3, [r3, #4]
 8014644:	461a      	mov	r2, r3
 8014646:	f04f 0300 	mov.w	r3, #0
 801464a:	1891      	adds	r1, r2, r2
 801464c:	62b9      	str	r1, [r7, #40]	; 0x28
 801464e:	415b      	adcs	r3, r3
 8014650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014652:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8014656:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 801465a:	f7f7 fd49 	bl	800c0f0 <__aeabi_uldivmod>
 801465e:	4602      	mov	r2, r0
 8014660:	460b      	mov	r3, r1
 8014662:	4b8c      	ldr	r3, [pc, #560]	; (8014894 <UART_SetConfig+0x38c>)
 8014664:	fba3 1302 	umull	r1, r3, r3, r2
 8014668:	095b      	lsrs	r3, r3, #5
 801466a:	2164      	movs	r1, #100	; 0x64
 801466c:	fb01 f303 	mul.w	r3, r1, r3
 8014670:	1ad3      	subs	r3, r2, r3
 8014672:	00db      	lsls	r3, r3, #3
 8014674:	3332      	adds	r3, #50	; 0x32
 8014676:	4a87      	ldr	r2, [pc, #540]	; (8014894 <UART_SetConfig+0x38c>)
 8014678:	fba2 2303 	umull	r2, r3, r2, r3
 801467c:	095b      	lsrs	r3, r3, #5
 801467e:	005b      	lsls	r3, r3, #1
 8014680:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014684:	441e      	add	r6, r3
 8014686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014688:	4618      	mov	r0, r3
 801468a:	f04f 0100 	mov.w	r1, #0
 801468e:	4602      	mov	r2, r0
 8014690:	460b      	mov	r3, r1
 8014692:	1894      	adds	r4, r2, r2
 8014694:	623c      	str	r4, [r7, #32]
 8014696:	415b      	adcs	r3, r3
 8014698:	627b      	str	r3, [r7, #36]	; 0x24
 801469a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801469e:	1812      	adds	r2, r2, r0
 80146a0:	eb41 0303 	adc.w	r3, r1, r3
 80146a4:	f04f 0400 	mov.w	r4, #0
 80146a8:	f04f 0500 	mov.w	r5, #0
 80146ac:	00dd      	lsls	r5, r3, #3
 80146ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80146b2:	00d4      	lsls	r4, r2, #3
 80146b4:	4622      	mov	r2, r4
 80146b6:	462b      	mov	r3, r5
 80146b8:	1814      	adds	r4, r2, r0
 80146ba:	653c      	str	r4, [r7, #80]	; 0x50
 80146bc:	414b      	adcs	r3, r1
 80146be:	657b      	str	r3, [r7, #84]	; 0x54
 80146c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80146c2:	685b      	ldr	r3, [r3, #4]
 80146c4:	461a      	mov	r2, r3
 80146c6:	f04f 0300 	mov.w	r3, #0
 80146ca:	1891      	adds	r1, r2, r2
 80146cc:	61b9      	str	r1, [r7, #24]
 80146ce:	415b      	adcs	r3, r3
 80146d0:	61fb      	str	r3, [r7, #28]
 80146d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80146d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80146da:	f7f7 fd09 	bl	800c0f0 <__aeabi_uldivmod>
 80146de:	4602      	mov	r2, r0
 80146e0:	460b      	mov	r3, r1
 80146e2:	4b6c      	ldr	r3, [pc, #432]	; (8014894 <UART_SetConfig+0x38c>)
 80146e4:	fba3 1302 	umull	r1, r3, r3, r2
 80146e8:	095b      	lsrs	r3, r3, #5
 80146ea:	2164      	movs	r1, #100	; 0x64
 80146ec:	fb01 f303 	mul.w	r3, r1, r3
 80146f0:	1ad3      	subs	r3, r2, r3
 80146f2:	00db      	lsls	r3, r3, #3
 80146f4:	3332      	adds	r3, #50	; 0x32
 80146f6:	4a67      	ldr	r2, [pc, #412]	; (8014894 <UART_SetConfig+0x38c>)
 80146f8:	fba2 2303 	umull	r2, r3, r2, r3
 80146fc:	095b      	lsrs	r3, r3, #5
 80146fe:	f003 0207 	and.w	r2, r3, #7
 8014702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	4432      	add	r2, r6
 8014708:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801470a:	e0b9      	b.n	8014880 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801470c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801470e:	461c      	mov	r4, r3
 8014710:	f04f 0500 	mov.w	r5, #0
 8014714:	4622      	mov	r2, r4
 8014716:	462b      	mov	r3, r5
 8014718:	1891      	adds	r1, r2, r2
 801471a:	6139      	str	r1, [r7, #16]
 801471c:	415b      	adcs	r3, r3
 801471e:	617b      	str	r3, [r7, #20]
 8014720:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014724:	1912      	adds	r2, r2, r4
 8014726:	eb45 0303 	adc.w	r3, r5, r3
 801472a:	f04f 0000 	mov.w	r0, #0
 801472e:	f04f 0100 	mov.w	r1, #0
 8014732:	00d9      	lsls	r1, r3, #3
 8014734:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8014738:	00d0      	lsls	r0, r2, #3
 801473a:	4602      	mov	r2, r0
 801473c:	460b      	mov	r3, r1
 801473e:	eb12 0804 	adds.w	r8, r2, r4
 8014742:	eb43 0905 	adc.w	r9, r3, r5
 8014746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014748:	685b      	ldr	r3, [r3, #4]
 801474a:	4618      	mov	r0, r3
 801474c:	f04f 0100 	mov.w	r1, #0
 8014750:	f04f 0200 	mov.w	r2, #0
 8014754:	f04f 0300 	mov.w	r3, #0
 8014758:	008b      	lsls	r3, r1, #2
 801475a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801475e:	0082      	lsls	r2, r0, #2
 8014760:	4640      	mov	r0, r8
 8014762:	4649      	mov	r1, r9
 8014764:	f7f7 fcc4 	bl	800c0f0 <__aeabi_uldivmod>
 8014768:	4602      	mov	r2, r0
 801476a:	460b      	mov	r3, r1
 801476c:	4b49      	ldr	r3, [pc, #292]	; (8014894 <UART_SetConfig+0x38c>)
 801476e:	fba3 2302 	umull	r2, r3, r3, r2
 8014772:	095b      	lsrs	r3, r3, #5
 8014774:	011e      	lsls	r6, r3, #4
 8014776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014778:	4618      	mov	r0, r3
 801477a:	f04f 0100 	mov.w	r1, #0
 801477e:	4602      	mov	r2, r0
 8014780:	460b      	mov	r3, r1
 8014782:	1894      	adds	r4, r2, r2
 8014784:	60bc      	str	r4, [r7, #8]
 8014786:	415b      	adcs	r3, r3
 8014788:	60fb      	str	r3, [r7, #12]
 801478a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801478e:	1812      	adds	r2, r2, r0
 8014790:	eb41 0303 	adc.w	r3, r1, r3
 8014794:	f04f 0400 	mov.w	r4, #0
 8014798:	f04f 0500 	mov.w	r5, #0
 801479c:	00dd      	lsls	r5, r3, #3
 801479e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80147a2:	00d4      	lsls	r4, r2, #3
 80147a4:	4622      	mov	r2, r4
 80147a6:	462b      	mov	r3, r5
 80147a8:	1814      	adds	r4, r2, r0
 80147aa:	64bc      	str	r4, [r7, #72]	; 0x48
 80147ac:	414b      	adcs	r3, r1
 80147ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80147b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80147b2:	685b      	ldr	r3, [r3, #4]
 80147b4:	4618      	mov	r0, r3
 80147b6:	f04f 0100 	mov.w	r1, #0
 80147ba:	f04f 0200 	mov.w	r2, #0
 80147be:	f04f 0300 	mov.w	r3, #0
 80147c2:	008b      	lsls	r3, r1, #2
 80147c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80147c8:	0082      	lsls	r2, r0, #2
 80147ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80147ce:	f7f7 fc8f 	bl	800c0f0 <__aeabi_uldivmod>
 80147d2:	4602      	mov	r2, r0
 80147d4:	460b      	mov	r3, r1
 80147d6:	4b2f      	ldr	r3, [pc, #188]	; (8014894 <UART_SetConfig+0x38c>)
 80147d8:	fba3 1302 	umull	r1, r3, r3, r2
 80147dc:	095b      	lsrs	r3, r3, #5
 80147de:	2164      	movs	r1, #100	; 0x64
 80147e0:	fb01 f303 	mul.w	r3, r1, r3
 80147e4:	1ad3      	subs	r3, r2, r3
 80147e6:	011b      	lsls	r3, r3, #4
 80147e8:	3332      	adds	r3, #50	; 0x32
 80147ea:	4a2a      	ldr	r2, [pc, #168]	; (8014894 <UART_SetConfig+0x38c>)
 80147ec:	fba2 2303 	umull	r2, r3, r2, r3
 80147f0:	095b      	lsrs	r3, r3, #5
 80147f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80147f6:	441e      	add	r6, r3
 80147f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80147fa:	4618      	mov	r0, r3
 80147fc:	f04f 0100 	mov.w	r1, #0
 8014800:	4602      	mov	r2, r0
 8014802:	460b      	mov	r3, r1
 8014804:	1894      	adds	r4, r2, r2
 8014806:	603c      	str	r4, [r7, #0]
 8014808:	415b      	adcs	r3, r3
 801480a:	607b      	str	r3, [r7, #4]
 801480c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014810:	1812      	adds	r2, r2, r0
 8014812:	eb41 0303 	adc.w	r3, r1, r3
 8014816:	f04f 0400 	mov.w	r4, #0
 801481a:	f04f 0500 	mov.w	r5, #0
 801481e:	00dd      	lsls	r5, r3, #3
 8014820:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8014824:	00d4      	lsls	r4, r2, #3
 8014826:	4622      	mov	r2, r4
 8014828:	462b      	mov	r3, r5
 801482a:	eb12 0a00 	adds.w	sl, r2, r0
 801482e:	eb43 0b01 	adc.w	fp, r3, r1
 8014832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014834:	685b      	ldr	r3, [r3, #4]
 8014836:	4618      	mov	r0, r3
 8014838:	f04f 0100 	mov.w	r1, #0
 801483c:	f04f 0200 	mov.w	r2, #0
 8014840:	f04f 0300 	mov.w	r3, #0
 8014844:	008b      	lsls	r3, r1, #2
 8014846:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801484a:	0082      	lsls	r2, r0, #2
 801484c:	4650      	mov	r0, sl
 801484e:	4659      	mov	r1, fp
 8014850:	f7f7 fc4e 	bl	800c0f0 <__aeabi_uldivmod>
 8014854:	4602      	mov	r2, r0
 8014856:	460b      	mov	r3, r1
 8014858:	4b0e      	ldr	r3, [pc, #56]	; (8014894 <UART_SetConfig+0x38c>)
 801485a:	fba3 1302 	umull	r1, r3, r3, r2
 801485e:	095b      	lsrs	r3, r3, #5
 8014860:	2164      	movs	r1, #100	; 0x64
 8014862:	fb01 f303 	mul.w	r3, r1, r3
 8014866:	1ad3      	subs	r3, r2, r3
 8014868:	011b      	lsls	r3, r3, #4
 801486a:	3332      	adds	r3, #50	; 0x32
 801486c:	4a09      	ldr	r2, [pc, #36]	; (8014894 <UART_SetConfig+0x38c>)
 801486e:	fba2 2303 	umull	r2, r3, r2, r3
 8014872:	095b      	lsrs	r3, r3, #5
 8014874:	f003 020f 	and.w	r2, r3, #15
 8014878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	4432      	add	r2, r6
 801487e:	609a      	str	r2, [r3, #8]
}
 8014880:	bf00      	nop
 8014882:	377c      	adds	r7, #124	; 0x7c
 8014884:	46bd      	mov	sp, r7
 8014886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801488a:	bf00      	nop
 801488c:	40011000 	.word	0x40011000
 8014890:	40011400 	.word	0x40011400
 8014894:	51eb851f 	.word	0x51eb851f

08014898 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014898:	b084      	sub	sp, #16
 801489a:	b580      	push	{r7, lr}
 801489c:	b084      	sub	sp, #16
 801489e:	af00      	add	r7, sp, #0
 80148a0:	6078      	str	r0, [r7, #4]
 80148a2:	f107 001c 	add.w	r0, r7, #28
 80148a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80148aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148ac:	2b01      	cmp	r3, #1
 80148ae:	d122      	bne.n	80148f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	68db      	ldr	r3, [r3, #12]
 80148c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80148c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80148c8:	687a      	ldr	r2, [r7, #4]
 80148ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	68db      	ldr	r3, [r3, #12]
 80148d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80148d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148da:	2b01      	cmp	r3, #1
 80148dc:	d105      	bne.n	80148ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	68db      	ldr	r3, [r3, #12]
 80148e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80148ea:	6878      	ldr	r0, [r7, #4]
 80148ec:	f001 fb1c 	bl	8015f28 <USB_CoreReset>
 80148f0:	4603      	mov	r3, r0
 80148f2:	73fb      	strb	r3, [r7, #15]
 80148f4:	e01a      	b.n	801492c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	68db      	ldr	r3, [r3, #12]
 80148fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014902:	6878      	ldr	r0, [r7, #4]
 8014904:	f001 fb10 	bl	8015f28 <USB_CoreReset>
 8014908:	4603      	mov	r3, r0
 801490a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801490c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801490e:	2b00      	cmp	r3, #0
 8014910:	d106      	bne.n	8014920 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014916:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	639a      	str	r2, [r3, #56]	; 0x38
 801491e:	e005      	b.n	801492c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014924:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801492e:	2b01      	cmp	r3, #1
 8014930:	d10b      	bne.n	801494a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	689b      	ldr	r3, [r3, #8]
 8014936:	f043 0206 	orr.w	r2, r3, #6
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	689b      	ldr	r3, [r3, #8]
 8014942:	f043 0220 	orr.w	r2, r3, #32
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801494a:	7bfb      	ldrb	r3, [r7, #15]
}
 801494c:	4618      	mov	r0, r3
 801494e:	3710      	adds	r7, #16
 8014950:	46bd      	mov	sp, r7
 8014952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014956:	b004      	add	sp, #16
 8014958:	4770      	bx	lr
	...

0801495c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801495c:	b480      	push	{r7}
 801495e:	b087      	sub	sp, #28
 8014960:	af00      	add	r7, sp, #0
 8014962:	60f8      	str	r0, [r7, #12]
 8014964:	60b9      	str	r1, [r7, #8]
 8014966:	4613      	mov	r3, r2
 8014968:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801496a:	79fb      	ldrb	r3, [r7, #7]
 801496c:	2b02      	cmp	r3, #2
 801496e:	d165      	bne.n	8014a3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	4a41      	ldr	r2, [pc, #260]	; (8014a78 <USB_SetTurnaroundTime+0x11c>)
 8014974:	4293      	cmp	r3, r2
 8014976:	d906      	bls.n	8014986 <USB_SetTurnaroundTime+0x2a>
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	4a40      	ldr	r2, [pc, #256]	; (8014a7c <USB_SetTurnaroundTime+0x120>)
 801497c:	4293      	cmp	r3, r2
 801497e:	d202      	bcs.n	8014986 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014980:	230f      	movs	r3, #15
 8014982:	617b      	str	r3, [r7, #20]
 8014984:	e062      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014986:	68bb      	ldr	r3, [r7, #8]
 8014988:	4a3c      	ldr	r2, [pc, #240]	; (8014a7c <USB_SetTurnaroundTime+0x120>)
 801498a:	4293      	cmp	r3, r2
 801498c:	d306      	bcc.n	801499c <USB_SetTurnaroundTime+0x40>
 801498e:	68bb      	ldr	r3, [r7, #8]
 8014990:	4a3b      	ldr	r2, [pc, #236]	; (8014a80 <USB_SetTurnaroundTime+0x124>)
 8014992:	4293      	cmp	r3, r2
 8014994:	d202      	bcs.n	801499c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014996:	230e      	movs	r3, #14
 8014998:	617b      	str	r3, [r7, #20]
 801499a:	e057      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	4a38      	ldr	r2, [pc, #224]	; (8014a80 <USB_SetTurnaroundTime+0x124>)
 80149a0:	4293      	cmp	r3, r2
 80149a2:	d306      	bcc.n	80149b2 <USB_SetTurnaroundTime+0x56>
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	4a37      	ldr	r2, [pc, #220]	; (8014a84 <USB_SetTurnaroundTime+0x128>)
 80149a8:	4293      	cmp	r3, r2
 80149aa:	d202      	bcs.n	80149b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80149ac:	230d      	movs	r3, #13
 80149ae:	617b      	str	r3, [r7, #20]
 80149b0:	e04c      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	4a33      	ldr	r2, [pc, #204]	; (8014a84 <USB_SetTurnaroundTime+0x128>)
 80149b6:	4293      	cmp	r3, r2
 80149b8:	d306      	bcc.n	80149c8 <USB_SetTurnaroundTime+0x6c>
 80149ba:	68bb      	ldr	r3, [r7, #8]
 80149bc:	4a32      	ldr	r2, [pc, #200]	; (8014a88 <USB_SetTurnaroundTime+0x12c>)
 80149be:	4293      	cmp	r3, r2
 80149c0:	d802      	bhi.n	80149c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80149c2:	230c      	movs	r3, #12
 80149c4:	617b      	str	r3, [r7, #20]
 80149c6:	e041      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	4a2f      	ldr	r2, [pc, #188]	; (8014a88 <USB_SetTurnaroundTime+0x12c>)
 80149cc:	4293      	cmp	r3, r2
 80149ce:	d906      	bls.n	80149de <USB_SetTurnaroundTime+0x82>
 80149d0:	68bb      	ldr	r3, [r7, #8]
 80149d2:	4a2e      	ldr	r2, [pc, #184]	; (8014a8c <USB_SetTurnaroundTime+0x130>)
 80149d4:	4293      	cmp	r3, r2
 80149d6:	d802      	bhi.n	80149de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80149d8:	230b      	movs	r3, #11
 80149da:	617b      	str	r3, [r7, #20]
 80149dc:	e036      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	4a2a      	ldr	r2, [pc, #168]	; (8014a8c <USB_SetTurnaroundTime+0x130>)
 80149e2:	4293      	cmp	r3, r2
 80149e4:	d906      	bls.n	80149f4 <USB_SetTurnaroundTime+0x98>
 80149e6:	68bb      	ldr	r3, [r7, #8]
 80149e8:	4a29      	ldr	r2, [pc, #164]	; (8014a90 <USB_SetTurnaroundTime+0x134>)
 80149ea:	4293      	cmp	r3, r2
 80149ec:	d802      	bhi.n	80149f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80149ee:	230a      	movs	r3, #10
 80149f0:	617b      	str	r3, [r7, #20]
 80149f2:	e02b      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80149f4:	68bb      	ldr	r3, [r7, #8]
 80149f6:	4a26      	ldr	r2, [pc, #152]	; (8014a90 <USB_SetTurnaroundTime+0x134>)
 80149f8:	4293      	cmp	r3, r2
 80149fa:	d906      	bls.n	8014a0a <USB_SetTurnaroundTime+0xae>
 80149fc:	68bb      	ldr	r3, [r7, #8]
 80149fe:	4a25      	ldr	r2, [pc, #148]	; (8014a94 <USB_SetTurnaroundTime+0x138>)
 8014a00:	4293      	cmp	r3, r2
 8014a02:	d202      	bcs.n	8014a0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8014a04:	2309      	movs	r3, #9
 8014a06:	617b      	str	r3, [r7, #20]
 8014a08:	e020      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8014a0a:	68bb      	ldr	r3, [r7, #8]
 8014a0c:	4a21      	ldr	r2, [pc, #132]	; (8014a94 <USB_SetTurnaroundTime+0x138>)
 8014a0e:	4293      	cmp	r3, r2
 8014a10:	d306      	bcc.n	8014a20 <USB_SetTurnaroundTime+0xc4>
 8014a12:	68bb      	ldr	r3, [r7, #8]
 8014a14:	4a20      	ldr	r2, [pc, #128]	; (8014a98 <USB_SetTurnaroundTime+0x13c>)
 8014a16:	4293      	cmp	r3, r2
 8014a18:	d802      	bhi.n	8014a20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8014a1a:	2308      	movs	r3, #8
 8014a1c:	617b      	str	r3, [r7, #20]
 8014a1e:	e015      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014a20:	68bb      	ldr	r3, [r7, #8]
 8014a22:	4a1d      	ldr	r2, [pc, #116]	; (8014a98 <USB_SetTurnaroundTime+0x13c>)
 8014a24:	4293      	cmp	r3, r2
 8014a26:	d906      	bls.n	8014a36 <USB_SetTurnaroundTime+0xda>
 8014a28:	68bb      	ldr	r3, [r7, #8]
 8014a2a:	4a1c      	ldr	r2, [pc, #112]	; (8014a9c <USB_SetTurnaroundTime+0x140>)
 8014a2c:	4293      	cmp	r3, r2
 8014a2e:	d202      	bcs.n	8014a36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8014a30:	2307      	movs	r3, #7
 8014a32:	617b      	str	r3, [r7, #20]
 8014a34:	e00a      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8014a36:	2306      	movs	r3, #6
 8014a38:	617b      	str	r3, [r7, #20]
 8014a3a:	e007      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8014a3c:	79fb      	ldrb	r3, [r7, #7]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d102      	bne.n	8014a48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8014a42:	2309      	movs	r3, #9
 8014a44:	617b      	str	r3, [r7, #20]
 8014a46:	e001      	b.n	8014a4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014a48:	2309      	movs	r3, #9
 8014a4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	68db      	ldr	r3, [r3, #12]
 8014a50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	68da      	ldr	r2, [r3, #12]
 8014a5c:	697b      	ldr	r3, [r7, #20]
 8014a5e:	029b      	lsls	r3, r3, #10
 8014a60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8014a64:	431a      	orrs	r2, r3
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8014a6a:	2300      	movs	r3, #0
}
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	371c      	adds	r7, #28
 8014a70:	46bd      	mov	sp, r7
 8014a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a76:	4770      	bx	lr
 8014a78:	00d8acbf 	.word	0x00d8acbf
 8014a7c:	00e4e1c0 	.word	0x00e4e1c0
 8014a80:	00f42400 	.word	0x00f42400
 8014a84:	01067380 	.word	0x01067380
 8014a88:	011a499f 	.word	0x011a499f
 8014a8c:	01312cff 	.word	0x01312cff
 8014a90:	014ca43f 	.word	0x014ca43f
 8014a94:	016e3600 	.word	0x016e3600
 8014a98:	01a6ab1f 	.word	0x01a6ab1f
 8014a9c:	01e84800 	.word	0x01e84800

08014aa0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014aa0:	b480      	push	{r7}
 8014aa2:	b083      	sub	sp, #12
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	689b      	ldr	r3, [r3, #8]
 8014aac:	f043 0201 	orr.w	r2, r3, #1
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014ab4:	2300      	movs	r3, #0
}
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	370c      	adds	r7, #12
 8014aba:	46bd      	mov	sp, r7
 8014abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac0:	4770      	bx	lr

08014ac2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014ac2:	b480      	push	{r7}
 8014ac4:	b083      	sub	sp, #12
 8014ac6:	af00      	add	r7, sp, #0
 8014ac8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	689b      	ldr	r3, [r3, #8]
 8014ace:	f023 0201 	bic.w	r2, r3, #1
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014ad6:	2300      	movs	r3, #0
}
 8014ad8:	4618      	mov	r0, r3
 8014ada:	370c      	adds	r7, #12
 8014adc:	46bd      	mov	sp, r7
 8014ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae2:	4770      	bx	lr

08014ae4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b084      	sub	sp, #16
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
 8014aec:	460b      	mov	r3, r1
 8014aee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014af0:	2300      	movs	r3, #0
 8014af2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	68db      	ldr	r3, [r3, #12]
 8014af8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014b00:	78fb      	ldrb	r3, [r7, #3]
 8014b02:	2b01      	cmp	r3, #1
 8014b04:	d115      	bne.n	8014b32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	68db      	ldr	r3, [r3, #12]
 8014b0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014b12:	2001      	movs	r0, #1
 8014b14:	f7fb f926 	bl	800fd64 <HAL_Delay>
      ms++;
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	3301      	adds	r3, #1
 8014b1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8014b1e:	6878      	ldr	r0, [r7, #4]
 8014b20:	f001 f972 	bl	8015e08 <USB_GetMode>
 8014b24:	4603      	mov	r3, r0
 8014b26:	2b01      	cmp	r3, #1
 8014b28:	d01e      	beq.n	8014b68 <USB_SetCurrentMode+0x84>
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	2b31      	cmp	r3, #49	; 0x31
 8014b2e:	d9f0      	bls.n	8014b12 <USB_SetCurrentMode+0x2e>
 8014b30:	e01a      	b.n	8014b68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014b32:	78fb      	ldrb	r3, [r7, #3]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d115      	bne.n	8014b64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	68db      	ldr	r3, [r3, #12]
 8014b3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014b44:	2001      	movs	r0, #1
 8014b46:	f7fb f90d 	bl	800fd64 <HAL_Delay>
      ms++;
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	3301      	adds	r3, #1
 8014b4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8014b50:	6878      	ldr	r0, [r7, #4]
 8014b52:	f001 f959 	bl	8015e08 <USB_GetMode>
 8014b56:	4603      	mov	r3, r0
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d005      	beq.n	8014b68 <USB_SetCurrentMode+0x84>
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	2b31      	cmp	r3, #49	; 0x31
 8014b60:	d9f0      	bls.n	8014b44 <USB_SetCurrentMode+0x60>
 8014b62:	e001      	b.n	8014b68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014b64:	2301      	movs	r3, #1
 8014b66:	e005      	b.n	8014b74 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	2b32      	cmp	r3, #50	; 0x32
 8014b6c:	d101      	bne.n	8014b72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014b6e:	2301      	movs	r3, #1
 8014b70:	e000      	b.n	8014b74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014b72:	2300      	movs	r3, #0
}
 8014b74:	4618      	mov	r0, r3
 8014b76:	3710      	adds	r7, #16
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	bd80      	pop	{r7, pc}

08014b7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014b7c:	b084      	sub	sp, #16
 8014b7e:	b580      	push	{r7, lr}
 8014b80:	b086      	sub	sp, #24
 8014b82:	af00      	add	r7, sp, #0
 8014b84:	6078      	str	r0, [r7, #4]
 8014b86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8014b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014b8e:	2300      	movs	r3, #0
 8014b90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014b96:	2300      	movs	r3, #0
 8014b98:	613b      	str	r3, [r7, #16]
 8014b9a:	e009      	b.n	8014bb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8014b9c:	687a      	ldr	r2, [r7, #4]
 8014b9e:	693b      	ldr	r3, [r7, #16]
 8014ba0:	3340      	adds	r3, #64	; 0x40
 8014ba2:	009b      	lsls	r3, r3, #2
 8014ba4:	4413      	add	r3, r2
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8014baa:	693b      	ldr	r3, [r7, #16]
 8014bac:	3301      	adds	r3, #1
 8014bae:	613b      	str	r3, [r7, #16]
 8014bb0:	693b      	ldr	r3, [r7, #16]
 8014bb2:	2b0e      	cmp	r3, #14
 8014bb4:	d9f2      	bls.n	8014b9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8014bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d11c      	bne.n	8014bf6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014bc2:	685b      	ldr	r3, [r3, #4]
 8014bc4:	68fa      	ldr	r2, [r7, #12]
 8014bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014bca:	f043 0302 	orr.w	r3, r3, #2
 8014bce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014be0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	639a      	str	r2, [r3, #56]	; 0x38
 8014bf4:	e00b      	b.n	8014c0e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bfa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014c14:	461a      	mov	r2, r3
 8014c16:	2300      	movs	r3, #0
 8014c18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c20:	4619      	mov	r1, r3
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c28:	461a      	mov	r2, r3
 8014c2a:	680b      	ldr	r3, [r1, #0]
 8014c2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c30:	2b01      	cmp	r3, #1
 8014c32:	d10c      	bne.n	8014c4e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d104      	bne.n	8014c44 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8014c3a:	2100      	movs	r1, #0
 8014c3c:	6878      	ldr	r0, [r7, #4]
 8014c3e:	f000 f945 	bl	8014ecc <USB_SetDevSpeed>
 8014c42:	e008      	b.n	8014c56 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8014c44:	2101      	movs	r1, #1
 8014c46:	6878      	ldr	r0, [r7, #4]
 8014c48:	f000 f940 	bl	8014ecc <USB_SetDevSpeed>
 8014c4c:	e003      	b.n	8014c56 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014c4e:	2103      	movs	r1, #3
 8014c50:	6878      	ldr	r0, [r7, #4]
 8014c52:	f000 f93b 	bl	8014ecc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014c56:	2110      	movs	r1, #16
 8014c58:	6878      	ldr	r0, [r7, #4]
 8014c5a:	f000 f8f3 	bl	8014e44 <USB_FlushTxFifo>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d001      	beq.n	8014c68 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8014c64:	2301      	movs	r3, #1
 8014c66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014c68:	6878      	ldr	r0, [r7, #4]
 8014c6a:	f000 f90f 	bl	8014e8c <USB_FlushRxFifo>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d001      	beq.n	8014c78 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8014c74:	2301      	movs	r3, #1
 8014c76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c7e:	461a      	mov	r2, r3
 8014c80:	2300      	movs	r3, #0
 8014c82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c8a:	461a      	mov	r2, r3
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c96:	461a      	mov	r2, r3
 8014c98:	2300      	movs	r3, #0
 8014c9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	613b      	str	r3, [r7, #16]
 8014ca0:	e043      	b.n	8014d2a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014ca2:	693b      	ldr	r3, [r7, #16]
 8014ca4:	015a      	lsls	r2, r3, #5
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	4413      	add	r3, r2
 8014caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014cb8:	d118      	bne.n	8014cec <USB_DevInit+0x170>
    {
      if (i == 0U)
 8014cba:	693b      	ldr	r3, [r7, #16]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d10a      	bne.n	8014cd6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014cc0:	693b      	ldr	r3, [r7, #16]
 8014cc2:	015a      	lsls	r2, r3, #5
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	4413      	add	r3, r2
 8014cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ccc:	461a      	mov	r2, r3
 8014cce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8014cd2:	6013      	str	r3, [r2, #0]
 8014cd4:	e013      	b.n	8014cfe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	015a      	lsls	r2, r3, #5
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	4413      	add	r3, r2
 8014cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ce2:	461a      	mov	r2, r3
 8014ce4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8014ce8:	6013      	str	r3, [r2, #0]
 8014cea:	e008      	b.n	8014cfe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014cec:	693b      	ldr	r3, [r7, #16]
 8014cee:	015a      	lsls	r2, r3, #5
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	4413      	add	r3, r2
 8014cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014cf8:	461a      	mov	r2, r3
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014cfe:	693b      	ldr	r3, [r7, #16]
 8014d00:	015a      	lsls	r2, r3, #5
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	4413      	add	r3, r2
 8014d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d0a:	461a      	mov	r2, r3
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014d10:	693b      	ldr	r3, [r7, #16]
 8014d12:	015a      	lsls	r2, r3, #5
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	4413      	add	r3, r2
 8014d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014d1c:	461a      	mov	r2, r3
 8014d1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8014d22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014d24:	693b      	ldr	r3, [r7, #16]
 8014d26:	3301      	adds	r3, #1
 8014d28:	613b      	str	r3, [r7, #16]
 8014d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d2c:	693a      	ldr	r2, [r7, #16]
 8014d2e:	429a      	cmp	r2, r3
 8014d30:	d3b7      	bcc.n	8014ca2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014d32:	2300      	movs	r3, #0
 8014d34:	613b      	str	r3, [r7, #16]
 8014d36:	e043      	b.n	8014dc0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014d38:	693b      	ldr	r3, [r7, #16]
 8014d3a:	015a      	lsls	r2, r3, #5
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	4413      	add	r3, r2
 8014d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014d4e:	d118      	bne.n	8014d82 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d10a      	bne.n	8014d6c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014d56:	693b      	ldr	r3, [r7, #16]
 8014d58:	015a      	lsls	r2, r3, #5
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	4413      	add	r3, r2
 8014d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d62:	461a      	mov	r2, r3
 8014d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8014d68:	6013      	str	r3, [r2, #0]
 8014d6a:	e013      	b.n	8014d94 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014d6c:	693b      	ldr	r3, [r7, #16]
 8014d6e:	015a      	lsls	r2, r3, #5
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	4413      	add	r3, r2
 8014d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d78:	461a      	mov	r2, r3
 8014d7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8014d7e:	6013      	str	r3, [r2, #0]
 8014d80:	e008      	b.n	8014d94 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014d82:	693b      	ldr	r3, [r7, #16]
 8014d84:	015a      	lsls	r2, r3, #5
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	4413      	add	r3, r2
 8014d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d8e:	461a      	mov	r2, r3
 8014d90:	2300      	movs	r3, #0
 8014d92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014d94:	693b      	ldr	r3, [r7, #16]
 8014d96:	015a      	lsls	r2, r3, #5
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	4413      	add	r3, r2
 8014d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014da0:	461a      	mov	r2, r3
 8014da2:	2300      	movs	r3, #0
 8014da4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014da6:	693b      	ldr	r3, [r7, #16]
 8014da8:	015a      	lsls	r2, r3, #5
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	4413      	add	r3, r2
 8014dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014db2:	461a      	mov	r2, r3
 8014db4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8014db8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014dba:	693b      	ldr	r3, [r7, #16]
 8014dbc:	3301      	adds	r3, #1
 8014dbe:	613b      	str	r3, [r7, #16]
 8014dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dc2:	693a      	ldr	r2, [r7, #16]
 8014dc4:	429a      	cmp	r2, r3
 8014dc6:	d3b7      	bcc.n	8014d38 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014dce:	691b      	ldr	r3, [r3, #16]
 8014dd0:	68fa      	ldr	r2, [r7, #12]
 8014dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014dd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014dda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	2200      	movs	r2, #0
 8014de0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8014de8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d105      	bne.n	8014dfc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	699b      	ldr	r3, [r3, #24]
 8014df4:	f043 0210 	orr.w	r2, r3, #16
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	699a      	ldr	r2, [r3, #24]
 8014e00:	4b0f      	ldr	r3, [pc, #60]	; (8014e40 <USB_DevInit+0x2c4>)
 8014e02:	4313      	orrs	r3, r2
 8014e04:	687a      	ldr	r2, [r7, #4]
 8014e06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8014e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d005      	beq.n	8014e1a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	699b      	ldr	r3, [r3, #24]
 8014e12:	f043 0208 	orr.w	r2, r3, #8
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8014e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e1c:	2b01      	cmp	r3, #1
 8014e1e:	d107      	bne.n	8014e30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	699b      	ldr	r3, [r3, #24]
 8014e24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014e28:	f043 0304 	orr.w	r3, r3, #4
 8014e2c:	687a      	ldr	r2, [r7, #4]
 8014e2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8014e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e32:	4618      	mov	r0, r3
 8014e34:	3718      	adds	r7, #24
 8014e36:	46bd      	mov	sp, r7
 8014e38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014e3c:	b004      	add	sp, #16
 8014e3e:	4770      	bx	lr
 8014e40:	803c3800 	.word	0x803c3800

08014e44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014e44:	b480      	push	{r7}
 8014e46:	b085      	sub	sp, #20
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
 8014e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014e4e:	2300      	movs	r3, #0
 8014e50:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014e52:	683b      	ldr	r3, [r7, #0]
 8014e54:	019b      	lsls	r3, r3, #6
 8014e56:	f043 0220 	orr.w	r2, r3, #32
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	3301      	adds	r3, #1
 8014e62:	60fb      	str	r3, [r7, #12]
 8014e64:	4a08      	ldr	r2, [pc, #32]	; (8014e88 <USB_FlushTxFifo+0x44>)
 8014e66:	4293      	cmp	r3, r2
 8014e68:	d901      	bls.n	8014e6e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8014e6a:	2303      	movs	r3, #3
 8014e6c:	e006      	b.n	8014e7c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	691b      	ldr	r3, [r3, #16]
 8014e72:	f003 0320 	and.w	r3, r3, #32
 8014e76:	2b20      	cmp	r3, #32
 8014e78:	d0f1      	beq.n	8014e5e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8014e7a:	2300      	movs	r3, #0
}
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	3714      	adds	r7, #20
 8014e80:	46bd      	mov	sp, r7
 8014e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e86:	4770      	bx	lr
 8014e88:	00030d40 	.word	0x00030d40

08014e8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014e8c:	b480      	push	{r7}
 8014e8e:	b085      	sub	sp, #20
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014e94:	2300      	movs	r3, #0
 8014e96:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2210      	movs	r2, #16
 8014e9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	3301      	adds	r3, #1
 8014ea2:	60fb      	str	r3, [r7, #12]
 8014ea4:	4a08      	ldr	r2, [pc, #32]	; (8014ec8 <USB_FlushRxFifo+0x3c>)
 8014ea6:	4293      	cmp	r3, r2
 8014ea8:	d901      	bls.n	8014eae <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8014eaa:	2303      	movs	r3, #3
 8014eac:	e006      	b.n	8014ebc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	691b      	ldr	r3, [r3, #16]
 8014eb2:	f003 0310 	and.w	r3, r3, #16
 8014eb6:	2b10      	cmp	r3, #16
 8014eb8:	d0f1      	beq.n	8014e9e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8014eba:	2300      	movs	r3, #0
}
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	3714      	adds	r7, #20
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec6:	4770      	bx	lr
 8014ec8:	00030d40 	.word	0x00030d40

08014ecc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8014ecc:	b480      	push	{r7}
 8014ece:	b085      	sub	sp, #20
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
 8014ed4:	460b      	mov	r3, r1
 8014ed6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ee2:	681a      	ldr	r2, [r3, #0]
 8014ee4:	78fb      	ldrb	r3, [r7, #3]
 8014ee6:	68f9      	ldr	r1, [r7, #12]
 8014ee8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014eec:	4313      	orrs	r3, r2
 8014eee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8014ef0:	2300      	movs	r3, #0
}
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	3714      	adds	r7, #20
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efc:	4770      	bx	lr

08014efe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8014efe:	b480      	push	{r7}
 8014f00:	b087      	sub	sp, #28
 8014f02:	af00      	add	r7, sp, #0
 8014f04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8014f0a:	693b      	ldr	r3, [r7, #16]
 8014f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f10:	689b      	ldr	r3, [r3, #8]
 8014f12:	f003 0306 	and.w	r3, r3, #6
 8014f16:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d102      	bne.n	8014f24 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8014f1e:	2300      	movs	r3, #0
 8014f20:	75fb      	strb	r3, [r7, #23]
 8014f22:	e00a      	b.n	8014f3a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	2b02      	cmp	r3, #2
 8014f28:	d002      	beq.n	8014f30 <USB_GetDevSpeed+0x32>
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	2b06      	cmp	r3, #6
 8014f2e:	d102      	bne.n	8014f36 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8014f30:	2302      	movs	r3, #2
 8014f32:	75fb      	strb	r3, [r7, #23]
 8014f34:	e001      	b.n	8014f3a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8014f36:	230f      	movs	r3, #15
 8014f38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8014f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	371c      	adds	r7, #28
 8014f40:	46bd      	mov	sp, r7
 8014f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f46:	4770      	bx	lr

08014f48 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014f48:	b480      	push	{r7}
 8014f4a:	b085      	sub	sp, #20
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
 8014f50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014f56:	683b      	ldr	r3, [r7, #0]
 8014f58:	781b      	ldrb	r3, [r3, #0]
 8014f5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	785b      	ldrb	r3, [r3, #1]
 8014f60:	2b01      	cmp	r3, #1
 8014f62:	d13a      	bne.n	8014fda <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014f6a:	69da      	ldr	r2, [r3, #28]
 8014f6c:	683b      	ldr	r3, [r7, #0]
 8014f6e:	781b      	ldrb	r3, [r3, #0]
 8014f70:	f003 030f 	and.w	r3, r3, #15
 8014f74:	2101      	movs	r1, #1
 8014f76:	fa01 f303 	lsl.w	r3, r1, r3
 8014f7a:	b29b      	uxth	r3, r3
 8014f7c:	68f9      	ldr	r1, [r7, #12]
 8014f7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014f82:	4313      	orrs	r3, r2
 8014f84:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014f86:	68bb      	ldr	r3, [r7, #8]
 8014f88:	015a      	lsls	r2, r3, #5
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	4413      	add	r3, r2
 8014f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d155      	bne.n	8015048 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014f9c:	68bb      	ldr	r3, [r7, #8]
 8014f9e:	015a      	lsls	r2, r3, #5
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	4413      	add	r3, r2
 8014fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014fa8:	681a      	ldr	r2, [r3, #0]
 8014faa:	683b      	ldr	r3, [r7, #0]
 8014fac:	689b      	ldr	r3, [r3, #8]
 8014fae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014fb2:	683b      	ldr	r3, [r7, #0]
 8014fb4:	78db      	ldrb	r3, [r3, #3]
 8014fb6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014fb8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014fba:	68bb      	ldr	r3, [r7, #8]
 8014fbc:	059b      	lsls	r3, r3, #22
 8014fbe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014fc0:	4313      	orrs	r3, r2
 8014fc2:	68ba      	ldr	r2, [r7, #8]
 8014fc4:	0151      	lsls	r1, r2, #5
 8014fc6:	68fa      	ldr	r2, [r7, #12]
 8014fc8:	440a      	add	r2, r1
 8014fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014fd6:	6013      	str	r3, [r2, #0]
 8014fd8:	e036      	b.n	8015048 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014fe0:	69da      	ldr	r2, [r3, #28]
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	781b      	ldrb	r3, [r3, #0]
 8014fe6:	f003 030f 	and.w	r3, r3, #15
 8014fea:	2101      	movs	r1, #1
 8014fec:	fa01 f303 	lsl.w	r3, r1, r3
 8014ff0:	041b      	lsls	r3, r3, #16
 8014ff2:	68f9      	ldr	r1, [r7, #12]
 8014ff4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014ff8:	4313      	orrs	r3, r2
 8014ffa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014ffc:	68bb      	ldr	r3, [r7, #8]
 8014ffe:	015a      	lsls	r2, r3, #5
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	4413      	add	r3, r2
 8015004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801500e:	2b00      	cmp	r3, #0
 8015010:	d11a      	bne.n	8015048 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015012:	68bb      	ldr	r3, [r7, #8]
 8015014:	015a      	lsls	r2, r3, #5
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	4413      	add	r3, r2
 801501a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801501e:	681a      	ldr	r2, [r3, #0]
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	689b      	ldr	r3, [r3, #8]
 8015024:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8015028:	683b      	ldr	r3, [r7, #0]
 801502a:	78db      	ldrb	r3, [r3, #3]
 801502c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801502e:	430b      	orrs	r3, r1
 8015030:	4313      	orrs	r3, r2
 8015032:	68ba      	ldr	r2, [r7, #8]
 8015034:	0151      	lsls	r1, r2, #5
 8015036:	68fa      	ldr	r2, [r7, #12]
 8015038:	440a      	add	r2, r1
 801503a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801503e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015046:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8015048:	2300      	movs	r3, #0
}
 801504a:	4618      	mov	r0, r3
 801504c:	3714      	adds	r7, #20
 801504e:	46bd      	mov	sp, r7
 8015050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015054:	4770      	bx	lr
	...

08015058 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015058:	b480      	push	{r7}
 801505a:	b085      	sub	sp, #20
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
 8015060:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	781b      	ldrb	r3, [r3, #0]
 801506a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801506c:	683b      	ldr	r3, [r7, #0]
 801506e:	785b      	ldrb	r3, [r3, #1]
 8015070:	2b01      	cmp	r3, #1
 8015072:	d161      	bne.n	8015138 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015074:	68bb      	ldr	r3, [r7, #8]
 8015076:	015a      	lsls	r2, r3, #5
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	4413      	add	r3, r2
 801507c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015086:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801508a:	d11f      	bne.n	80150cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	015a      	lsls	r2, r3, #5
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	4413      	add	r3, r2
 8015094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	68ba      	ldr	r2, [r7, #8]
 801509c:	0151      	lsls	r1, r2, #5
 801509e:	68fa      	ldr	r2, [r7, #12]
 80150a0:	440a      	add	r2, r1
 80150a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80150a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80150aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80150ac:	68bb      	ldr	r3, [r7, #8]
 80150ae:	015a      	lsls	r2, r3, #5
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	4413      	add	r3, r2
 80150b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	68ba      	ldr	r2, [r7, #8]
 80150bc:	0151      	lsls	r1, r2, #5
 80150be:	68fa      	ldr	r2, [r7, #12]
 80150c0:	440a      	add	r2, r1
 80150c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80150c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80150ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80150d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80150d4:	683b      	ldr	r3, [r7, #0]
 80150d6:	781b      	ldrb	r3, [r3, #0]
 80150d8:	f003 030f 	and.w	r3, r3, #15
 80150dc:	2101      	movs	r1, #1
 80150de:	fa01 f303 	lsl.w	r3, r1, r3
 80150e2:	b29b      	uxth	r3, r3
 80150e4:	43db      	mvns	r3, r3
 80150e6:	68f9      	ldr	r1, [r7, #12]
 80150e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80150ec:	4013      	ands	r3, r2
 80150ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80150f6:	69da      	ldr	r2, [r3, #28]
 80150f8:	683b      	ldr	r3, [r7, #0]
 80150fa:	781b      	ldrb	r3, [r3, #0]
 80150fc:	f003 030f 	and.w	r3, r3, #15
 8015100:	2101      	movs	r1, #1
 8015102:	fa01 f303 	lsl.w	r3, r1, r3
 8015106:	b29b      	uxth	r3, r3
 8015108:	43db      	mvns	r3, r3
 801510a:	68f9      	ldr	r1, [r7, #12]
 801510c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015110:	4013      	ands	r3, r2
 8015112:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8015114:	68bb      	ldr	r3, [r7, #8]
 8015116:	015a      	lsls	r2, r3, #5
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	4413      	add	r3, r2
 801511c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015120:	681a      	ldr	r2, [r3, #0]
 8015122:	68bb      	ldr	r3, [r7, #8]
 8015124:	0159      	lsls	r1, r3, #5
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	440b      	add	r3, r1
 801512a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801512e:	4619      	mov	r1, r3
 8015130:	4b35      	ldr	r3, [pc, #212]	; (8015208 <USB_DeactivateEndpoint+0x1b0>)
 8015132:	4013      	ands	r3, r2
 8015134:	600b      	str	r3, [r1, #0]
 8015136:	e060      	b.n	80151fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015138:	68bb      	ldr	r3, [r7, #8]
 801513a:	015a      	lsls	r2, r3, #5
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	4413      	add	r3, r2
 8015140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801514a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801514e:	d11f      	bne.n	8015190 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8015150:	68bb      	ldr	r3, [r7, #8]
 8015152:	015a      	lsls	r2, r3, #5
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	4413      	add	r3, r2
 8015158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	68ba      	ldr	r2, [r7, #8]
 8015160:	0151      	lsls	r1, r2, #5
 8015162:	68fa      	ldr	r2, [r7, #12]
 8015164:	440a      	add	r2, r1
 8015166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801516a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801516e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8015170:	68bb      	ldr	r3, [r7, #8]
 8015172:	015a      	lsls	r2, r3, #5
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	4413      	add	r3, r2
 8015178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	68ba      	ldr	r2, [r7, #8]
 8015180:	0151      	lsls	r1, r2, #5
 8015182:	68fa      	ldr	r2, [r7, #12]
 8015184:	440a      	add	r2, r1
 8015186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801518a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801518e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015196:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015198:	683b      	ldr	r3, [r7, #0]
 801519a:	781b      	ldrb	r3, [r3, #0]
 801519c:	f003 030f 	and.w	r3, r3, #15
 80151a0:	2101      	movs	r1, #1
 80151a2:	fa01 f303 	lsl.w	r3, r1, r3
 80151a6:	041b      	lsls	r3, r3, #16
 80151a8:	43db      	mvns	r3, r3
 80151aa:	68f9      	ldr	r1, [r7, #12]
 80151ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80151b0:	4013      	ands	r3, r2
 80151b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80151ba:	69da      	ldr	r2, [r3, #28]
 80151bc:	683b      	ldr	r3, [r7, #0]
 80151be:	781b      	ldrb	r3, [r3, #0]
 80151c0:	f003 030f 	and.w	r3, r3, #15
 80151c4:	2101      	movs	r1, #1
 80151c6:	fa01 f303 	lsl.w	r3, r1, r3
 80151ca:	041b      	lsls	r3, r3, #16
 80151cc:	43db      	mvns	r3, r3
 80151ce:	68f9      	ldr	r1, [r7, #12]
 80151d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80151d4:	4013      	ands	r3, r2
 80151d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80151d8:	68bb      	ldr	r3, [r7, #8]
 80151da:	015a      	lsls	r2, r3, #5
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	4413      	add	r3, r2
 80151e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80151e4:	681a      	ldr	r2, [r3, #0]
 80151e6:	68bb      	ldr	r3, [r7, #8]
 80151e8:	0159      	lsls	r1, r3, #5
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	440b      	add	r3, r1
 80151ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80151f2:	4619      	mov	r1, r3
 80151f4:	4b05      	ldr	r3, [pc, #20]	; (801520c <USB_DeactivateEndpoint+0x1b4>)
 80151f6:	4013      	ands	r3, r2
 80151f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80151fa:	2300      	movs	r3, #0
}
 80151fc:	4618      	mov	r0, r3
 80151fe:	3714      	adds	r7, #20
 8015200:	46bd      	mov	sp, r7
 8015202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015206:	4770      	bx	lr
 8015208:	ec337800 	.word	0xec337800
 801520c:	eff37800 	.word	0xeff37800

08015210 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b08a      	sub	sp, #40	; 0x28
 8015214:	af02      	add	r7, sp, #8
 8015216:	60f8      	str	r0, [r7, #12]
 8015218:	60b9      	str	r1, [r7, #8]
 801521a:	4613      	mov	r3, r2
 801521c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8015222:	68bb      	ldr	r3, [r7, #8]
 8015224:	781b      	ldrb	r3, [r3, #0]
 8015226:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015228:	68bb      	ldr	r3, [r7, #8]
 801522a:	785b      	ldrb	r3, [r3, #1]
 801522c:	2b01      	cmp	r3, #1
 801522e:	f040 815c 	bne.w	80154ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8015232:	68bb      	ldr	r3, [r7, #8]
 8015234:	695b      	ldr	r3, [r3, #20]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d132      	bne.n	80152a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801523a:	69bb      	ldr	r3, [r7, #24]
 801523c:	015a      	lsls	r2, r3, #5
 801523e:	69fb      	ldr	r3, [r7, #28]
 8015240:	4413      	add	r3, r2
 8015242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015246:	691b      	ldr	r3, [r3, #16]
 8015248:	69ba      	ldr	r2, [r7, #24]
 801524a:	0151      	lsls	r1, r2, #5
 801524c:	69fa      	ldr	r2, [r7, #28]
 801524e:	440a      	add	r2, r1
 8015250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015254:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015258:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801525c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801525e:	69bb      	ldr	r3, [r7, #24]
 8015260:	015a      	lsls	r2, r3, #5
 8015262:	69fb      	ldr	r3, [r7, #28]
 8015264:	4413      	add	r3, r2
 8015266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801526a:	691b      	ldr	r3, [r3, #16]
 801526c:	69ba      	ldr	r2, [r7, #24]
 801526e:	0151      	lsls	r1, r2, #5
 8015270:	69fa      	ldr	r2, [r7, #28]
 8015272:	440a      	add	r2, r1
 8015274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015278:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801527c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801527e:	69bb      	ldr	r3, [r7, #24]
 8015280:	015a      	lsls	r2, r3, #5
 8015282:	69fb      	ldr	r3, [r7, #28]
 8015284:	4413      	add	r3, r2
 8015286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801528a:	691b      	ldr	r3, [r3, #16]
 801528c:	69ba      	ldr	r2, [r7, #24]
 801528e:	0151      	lsls	r1, r2, #5
 8015290:	69fa      	ldr	r2, [r7, #28]
 8015292:	440a      	add	r2, r1
 8015294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015298:	0cdb      	lsrs	r3, r3, #19
 801529a:	04db      	lsls	r3, r3, #19
 801529c:	6113      	str	r3, [r2, #16]
 801529e:	e074      	b.n	801538a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80152a0:	69bb      	ldr	r3, [r7, #24]
 80152a2:	015a      	lsls	r2, r3, #5
 80152a4:	69fb      	ldr	r3, [r7, #28]
 80152a6:	4413      	add	r3, r2
 80152a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80152ac:	691b      	ldr	r3, [r3, #16]
 80152ae:	69ba      	ldr	r2, [r7, #24]
 80152b0:	0151      	lsls	r1, r2, #5
 80152b2:	69fa      	ldr	r2, [r7, #28]
 80152b4:	440a      	add	r2, r1
 80152b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80152ba:	0cdb      	lsrs	r3, r3, #19
 80152bc:	04db      	lsls	r3, r3, #19
 80152be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80152c0:	69bb      	ldr	r3, [r7, #24]
 80152c2:	015a      	lsls	r2, r3, #5
 80152c4:	69fb      	ldr	r3, [r7, #28]
 80152c6:	4413      	add	r3, r2
 80152c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80152cc:	691b      	ldr	r3, [r3, #16]
 80152ce:	69ba      	ldr	r2, [r7, #24]
 80152d0:	0151      	lsls	r1, r2, #5
 80152d2:	69fa      	ldr	r2, [r7, #28]
 80152d4:	440a      	add	r2, r1
 80152d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80152da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80152de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80152e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80152e4:	69bb      	ldr	r3, [r7, #24]
 80152e6:	015a      	lsls	r2, r3, #5
 80152e8:	69fb      	ldr	r3, [r7, #28]
 80152ea:	4413      	add	r3, r2
 80152ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80152f0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80152f2:	68bb      	ldr	r3, [r7, #8]
 80152f4:	6959      	ldr	r1, [r3, #20]
 80152f6:	68bb      	ldr	r3, [r7, #8]
 80152f8:	689b      	ldr	r3, [r3, #8]
 80152fa:	440b      	add	r3, r1
 80152fc:	1e59      	subs	r1, r3, #1
 80152fe:	68bb      	ldr	r3, [r7, #8]
 8015300:	689b      	ldr	r3, [r3, #8]
 8015302:	fbb1 f3f3 	udiv	r3, r1, r3
 8015306:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8015308:	4b9d      	ldr	r3, [pc, #628]	; (8015580 <USB_EPStartXfer+0x370>)
 801530a:	400b      	ands	r3, r1
 801530c:	69b9      	ldr	r1, [r7, #24]
 801530e:	0148      	lsls	r0, r1, #5
 8015310:	69f9      	ldr	r1, [r7, #28]
 8015312:	4401      	add	r1, r0
 8015314:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8015318:	4313      	orrs	r3, r2
 801531a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801531c:	69bb      	ldr	r3, [r7, #24]
 801531e:	015a      	lsls	r2, r3, #5
 8015320:	69fb      	ldr	r3, [r7, #28]
 8015322:	4413      	add	r3, r2
 8015324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015328:	691a      	ldr	r2, [r3, #16]
 801532a:	68bb      	ldr	r3, [r7, #8]
 801532c:	695b      	ldr	r3, [r3, #20]
 801532e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015332:	69b9      	ldr	r1, [r7, #24]
 8015334:	0148      	lsls	r0, r1, #5
 8015336:	69f9      	ldr	r1, [r7, #28]
 8015338:	4401      	add	r1, r0
 801533a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801533e:	4313      	orrs	r3, r2
 8015340:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8015342:	68bb      	ldr	r3, [r7, #8]
 8015344:	78db      	ldrb	r3, [r3, #3]
 8015346:	2b01      	cmp	r3, #1
 8015348:	d11f      	bne.n	801538a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801534a:	69bb      	ldr	r3, [r7, #24]
 801534c:	015a      	lsls	r2, r3, #5
 801534e:	69fb      	ldr	r3, [r7, #28]
 8015350:	4413      	add	r3, r2
 8015352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015356:	691b      	ldr	r3, [r3, #16]
 8015358:	69ba      	ldr	r2, [r7, #24]
 801535a:	0151      	lsls	r1, r2, #5
 801535c:	69fa      	ldr	r2, [r7, #28]
 801535e:	440a      	add	r2, r1
 8015360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015364:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8015368:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801536a:	69bb      	ldr	r3, [r7, #24]
 801536c:	015a      	lsls	r2, r3, #5
 801536e:	69fb      	ldr	r3, [r7, #28]
 8015370:	4413      	add	r3, r2
 8015372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015376:	691b      	ldr	r3, [r3, #16]
 8015378:	69ba      	ldr	r2, [r7, #24]
 801537a:	0151      	lsls	r1, r2, #5
 801537c:	69fa      	ldr	r2, [r7, #28]
 801537e:	440a      	add	r2, r1
 8015380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015384:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015388:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801538a:	79fb      	ldrb	r3, [r7, #7]
 801538c:	2b01      	cmp	r3, #1
 801538e:	d14b      	bne.n	8015428 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	691b      	ldr	r3, [r3, #16]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d009      	beq.n	80153ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8015398:	69bb      	ldr	r3, [r7, #24]
 801539a:	015a      	lsls	r2, r3, #5
 801539c:	69fb      	ldr	r3, [r7, #28]
 801539e:	4413      	add	r3, r2
 80153a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80153a4:	461a      	mov	r2, r3
 80153a6:	68bb      	ldr	r3, [r7, #8]
 80153a8:	691b      	ldr	r3, [r3, #16]
 80153aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80153ac:	68bb      	ldr	r3, [r7, #8]
 80153ae:	78db      	ldrb	r3, [r3, #3]
 80153b0:	2b01      	cmp	r3, #1
 80153b2:	d128      	bne.n	8015406 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80153b4:	69fb      	ldr	r3, [r7, #28]
 80153b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80153ba:	689b      	ldr	r3, [r3, #8]
 80153bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d110      	bne.n	80153e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80153c4:	69bb      	ldr	r3, [r7, #24]
 80153c6:	015a      	lsls	r2, r3, #5
 80153c8:	69fb      	ldr	r3, [r7, #28]
 80153ca:	4413      	add	r3, r2
 80153cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	69ba      	ldr	r2, [r7, #24]
 80153d4:	0151      	lsls	r1, r2, #5
 80153d6:	69fa      	ldr	r2, [r7, #28]
 80153d8:	440a      	add	r2, r1
 80153da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80153de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80153e2:	6013      	str	r3, [r2, #0]
 80153e4:	e00f      	b.n	8015406 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80153e6:	69bb      	ldr	r3, [r7, #24]
 80153e8:	015a      	lsls	r2, r3, #5
 80153ea:	69fb      	ldr	r3, [r7, #28]
 80153ec:	4413      	add	r3, r2
 80153ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	69ba      	ldr	r2, [r7, #24]
 80153f6:	0151      	lsls	r1, r2, #5
 80153f8:	69fa      	ldr	r2, [r7, #28]
 80153fa:	440a      	add	r2, r1
 80153fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015404:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015406:	69bb      	ldr	r3, [r7, #24]
 8015408:	015a      	lsls	r2, r3, #5
 801540a:	69fb      	ldr	r3, [r7, #28]
 801540c:	4413      	add	r3, r2
 801540e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	69ba      	ldr	r2, [r7, #24]
 8015416:	0151      	lsls	r1, r2, #5
 8015418:	69fa      	ldr	r2, [r7, #28]
 801541a:	440a      	add	r2, r1
 801541c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015420:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015424:	6013      	str	r3, [r2, #0]
 8015426:	e12f      	b.n	8015688 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015428:	69bb      	ldr	r3, [r7, #24]
 801542a:	015a      	lsls	r2, r3, #5
 801542c:	69fb      	ldr	r3, [r7, #28]
 801542e:	4413      	add	r3, r2
 8015430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	69ba      	ldr	r2, [r7, #24]
 8015438:	0151      	lsls	r1, r2, #5
 801543a:	69fa      	ldr	r2, [r7, #28]
 801543c:	440a      	add	r2, r1
 801543e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015442:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015446:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	78db      	ldrb	r3, [r3, #3]
 801544c:	2b01      	cmp	r3, #1
 801544e:	d015      	beq.n	801547c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8015450:	68bb      	ldr	r3, [r7, #8]
 8015452:	695b      	ldr	r3, [r3, #20]
 8015454:	2b00      	cmp	r3, #0
 8015456:	f000 8117 	beq.w	8015688 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801545a:	69fb      	ldr	r3, [r7, #28]
 801545c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015462:	68bb      	ldr	r3, [r7, #8]
 8015464:	781b      	ldrb	r3, [r3, #0]
 8015466:	f003 030f 	and.w	r3, r3, #15
 801546a:	2101      	movs	r1, #1
 801546c:	fa01 f303 	lsl.w	r3, r1, r3
 8015470:	69f9      	ldr	r1, [r7, #28]
 8015472:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015476:	4313      	orrs	r3, r2
 8015478:	634b      	str	r3, [r1, #52]	; 0x34
 801547a:	e105      	b.n	8015688 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801547c:	69fb      	ldr	r3, [r7, #28]
 801547e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015482:	689b      	ldr	r3, [r3, #8]
 8015484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015488:	2b00      	cmp	r3, #0
 801548a:	d110      	bne.n	80154ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801548c:	69bb      	ldr	r3, [r7, #24]
 801548e:	015a      	lsls	r2, r3, #5
 8015490:	69fb      	ldr	r3, [r7, #28]
 8015492:	4413      	add	r3, r2
 8015494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	69ba      	ldr	r2, [r7, #24]
 801549c:	0151      	lsls	r1, r2, #5
 801549e:	69fa      	ldr	r2, [r7, #28]
 80154a0:	440a      	add	r2, r1
 80154a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80154a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80154aa:	6013      	str	r3, [r2, #0]
 80154ac:	e00f      	b.n	80154ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80154ae:	69bb      	ldr	r3, [r7, #24]
 80154b0:	015a      	lsls	r2, r3, #5
 80154b2:	69fb      	ldr	r3, [r7, #28]
 80154b4:	4413      	add	r3, r2
 80154b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	69ba      	ldr	r2, [r7, #24]
 80154be:	0151      	lsls	r1, r2, #5
 80154c0:	69fa      	ldr	r2, [r7, #28]
 80154c2:	440a      	add	r2, r1
 80154c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80154c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80154cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80154ce:	68bb      	ldr	r3, [r7, #8]
 80154d0:	68d9      	ldr	r1, [r3, #12]
 80154d2:	68bb      	ldr	r3, [r7, #8]
 80154d4:	781a      	ldrb	r2, [r3, #0]
 80154d6:	68bb      	ldr	r3, [r7, #8]
 80154d8:	695b      	ldr	r3, [r3, #20]
 80154da:	b298      	uxth	r0, r3
 80154dc:	79fb      	ldrb	r3, [r7, #7]
 80154de:	9300      	str	r3, [sp, #0]
 80154e0:	4603      	mov	r3, r0
 80154e2:	68f8      	ldr	r0, [r7, #12]
 80154e4:	f000 fa2b 	bl	801593e <USB_WritePacket>
 80154e8:	e0ce      	b.n	8015688 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80154ea:	69bb      	ldr	r3, [r7, #24]
 80154ec:	015a      	lsls	r2, r3, #5
 80154ee:	69fb      	ldr	r3, [r7, #28]
 80154f0:	4413      	add	r3, r2
 80154f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80154f6:	691b      	ldr	r3, [r3, #16]
 80154f8:	69ba      	ldr	r2, [r7, #24]
 80154fa:	0151      	lsls	r1, r2, #5
 80154fc:	69fa      	ldr	r2, [r7, #28]
 80154fe:	440a      	add	r2, r1
 8015500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015504:	0cdb      	lsrs	r3, r3, #19
 8015506:	04db      	lsls	r3, r3, #19
 8015508:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801550a:	69bb      	ldr	r3, [r7, #24]
 801550c:	015a      	lsls	r2, r3, #5
 801550e:	69fb      	ldr	r3, [r7, #28]
 8015510:	4413      	add	r3, r2
 8015512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015516:	691b      	ldr	r3, [r3, #16]
 8015518:	69ba      	ldr	r2, [r7, #24]
 801551a:	0151      	lsls	r1, r2, #5
 801551c:	69fa      	ldr	r2, [r7, #28]
 801551e:	440a      	add	r2, r1
 8015520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015524:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015528:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801552c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801552e:	68bb      	ldr	r3, [r7, #8]
 8015530:	695b      	ldr	r3, [r3, #20]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d126      	bne.n	8015584 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8015536:	69bb      	ldr	r3, [r7, #24]
 8015538:	015a      	lsls	r2, r3, #5
 801553a:	69fb      	ldr	r3, [r7, #28]
 801553c:	4413      	add	r3, r2
 801553e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015542:	691a      	ldr	r2, [r3, #16]
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	689b      	ldr	r3, [r3, #8]
 8015548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801554c:	69b9      	ldr	r1, [r7, #24]
 801554e:	0148      	lsls	r0, r1, #5
 8015550:	69f9      	ldr	r1, [r7, #28]
 8015552:	4401      	add	r1, r0
 8015554:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015558:	4313      	orrs	r3, r2
 801555a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801555c:	69bb      	ldr	r3, [r7, #24]
 801555e:	015a      	lsls	r2, r3, #5
 8015560:	69fb      	ldr	r3, [r7, #28]
 8015562:	4413      	add	r3, r2
 8015564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015568:	691b      	ldr	r3, [r3, #16]
 801556a:	69ba      	ldr	r2, [r7, #24]
 801556c:	0151      	lsls	r1, r2, #5
 801556e:	69fa      	ldr	r2, [r7, #28]
 8015570:	440a      	add	r2, r1
 8015572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015576:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801557a:	6113      	str	r3, [r2, #16]
 801557c:	e036      	b.n	80155ec <USB_EPStartXfer+0x3dc>
 801557e:	bf00      	nop
 8015580:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8015584:	68bb      	ldr	r3, [r7, #8]
 8015586:	695a      	ldr	r2, [r3, #20]
 8015588:	68bb      	ldr	r3, [r7, #8]
 801558a:	689b      	ldr	r3, [r3, #8]
 801558c:	4413      	add	r3, r2
 801558e:	1e5a      	subs	r2, r3, #1
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	689b      	ldr	r3, [r3, #8]
 8015594:	fbb2 f3f3 	udiv	r3, r2, r3
 8015598:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801559a:	69bb      	ldr	r3, [r7, #24]
 801559c:	015a      	lsls	r2, r3, #5
 801559e:	69fb      	ldr	r3, [r7, #28]
 80155a0:	4413      	add	r3, r2
 80155a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80155a6:	691a      	ldr	r2, [r3, #16]
 80155a8:	8afb      	ldrh	r3, [r7, #22]
 80155aa:	04d9      	lsls	r1, r3, #19
 80155ac:	4b39      	ldr	r3, [pc, #228]	; (8015694 <USB_EPStartXfer+0x484>)
 80155ae:	400b      	ands	r3, r1
 80155b0:	69b9      	ldr	r1, [r7, #24]
 80155b2:	0148      	lsls	r0, r1, #5
 80155b4:	69f9      	ldr	r1, [r7, #28]
 80155b6:	4401      	add	r1, r0
 80155b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80155bc:	4313      	orrs	r3, r2
 80155be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80155c0:	69bb      	ldr	r3, [r7, #24]
 80155c2:	015a      	lsls	r2, r3, #5
 80155c4:	69fb      	ldr	r3, [r7, #28]
 80155c6:	4413      	add	r3, r2
 80155c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80155cc:	691a      	ldr	r2, [r3, #16]
 80155ce:	68bb      	ldr	r3, [r7, #8]
 80155d0:	689b      	ldr	r3, [r3, #8]
 80155d2:	8af9      	ldrh	r1, [r7, #22]
 80155d4:	fb01 f303 	mul.w	r3, r1, r3
 80155d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80155dc:	69b9      	ldr	r1, [r7, #24]
 80155de:	0148      	lsls	r0, r1, #5
 80155e0:	69f9      	ldr	r1, [r7, #28]
 80155e2:	4401      	add	r1, r0
 80155e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80155e8:	4313      	orrs	r3, r2
 80155ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80155ec:	79fb      	ldrb	r3, [r7, #7]
 80155ee:	2b01      	cmp	r3, #1
 80155f0:	d10d      	bne.n	801560e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80155f2:	68bb      	ldr	r3, [r7, #8]
 80155f4:	68db      	ldr	r3, [r3, #12]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d009      	beq.n	801560e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80155fa:	68bb      	ldr	r3, [r7, #8]
 80155fc:	68d9      	ldr	r1, [r3, #12]
 80155fe:	69bb      	ldr	r3, [r7, #24]
 8015600:	015a      	lsls	r2, r3, #5
 8015602:	69fb      	ldr	r3, [r7, #28]
 8015604:	4413      	add	r3, r2
 8015606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801560a:	460a      	mov	r2, r1
 801560c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801560e:	68bb      	ldr	r3, [r7, #8]
 8015610:	78db      	ldrb	r3, [r3, #3]
 8015612:	2b01      	cmp	r3, #1
 8015614:	d128      	bne.n	8015668 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015616:	69fb      	ldr	r3, [r7, #28]
 8015618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801561c:	689b      	ldr	r3, [r3, #8]
 801561e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015622:	2b00      	cmp	r3, #0
 8015624:	d110      	bne.n	8015648 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8015626:	69bb      	ldr	r3, [r7, #24]
 8015628:	015a      	lsls	r2, r3, #5
 801562a:	69fb      	ldr	r3, [r7, #28]
 801562c:	4413      	add	r3, r2
 801562e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	69ba      	ldr	r2, [r7, #24]
 8015636:	0151      	lsls	r1, r2, #5
 8015638:	69fa      	ldr	r2, [r7, #28]
 801563a:	440a      	add	r2, r1
 801563c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015640:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015644:	6013      	str	r3, [r2, #0]
 8015646:	e00f      	b.n	8015668 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8015648:	69bb      	ldr	r3, [r7, #24]
 801564a:	015a      	lsls	r2, r3, #5
 801564c:	69fb      	ldr	r3, [r7, #28]
 801564e:	4413      	add	r3, r2
 8015650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	69ba      	ldr	r2, [r7, #24]
 8015658:	0151      	lsls	r1, r2, #5
 801565a:	69fa      	ldr	r2, [r7, #28]
 801565c:	440a      	add	r2, r1
 801565e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015666:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8015668:	69bb      	ldr	r3, [r7, #24]
 801566a:	015a      	lsls	r2, r3, #5
 801566c:	69fb      	ldr	r3, [r7, #28]
 801566e:	4413      	add	r3, r2
 8015670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	69ba      	ldr	r2, [r7, #24]
 8015678:	0151      	lsls	r1, r2, #5
 801567a:	69fa      	ldr	r2, [r7, #28]
 801567c:	440a      	add	r2, r1
 801567e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015682:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015686:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015688:	2300      	movs	r3, #0
}
 801568a:	4618      	mov	r0, r3
 801568c:	3720      	adds	r7, #32
 801568e:	46bd      	mov	sp, r7
 8015690:	bd80      	pop	{r7, pc}
 8015692:	bf00      	nop
 8015694:	1ff80000 	.word	0x1ff80000

08015698 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8015698:	b480      	push	{r7}
 801569a:	b087      	sub	sp, #28
 801569c:	af00      	add	r7, sp, #0
 801569e:	60f8      	str	r0, [r7, #12]
 80156a0:	60b9      	str	r1, [r7, #8]
 80156a2:	4613      	mov	r3, r2
 80156a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80156aa:	68bb      	ldr	r3, [r7, #8]
 80156ac:	781b      	ldrb	r3, [r3, #0]
 80156ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80156b0:	68bb      	ldr	r3, [r7, #8]
 80156b2:	785b      	ldrb	r3, [r3, #1]
 80156b4:	2b01      	cmp	r3, #1
 80156b6:	f040 80cd 	bne.w	8015854 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80156ba:	68bb      	ldr	r3, [r7, #8]
 80156bc:	695b      	ldr	r3, [r3, #20]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d132      	bne.n	8015728 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80156c2:	693b      	ldr	r3, [r7, #16]
 80156c4:	015a      	lsls	r2, r3, #5
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	4413      	add	r3, r2
 80156ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80156ce:	691b      	ldr	r3, [r3, #16]
 80156d0:	693a      	ldr	r2, [r7, #16]
 80156d2:	0151      	lsls	r1, r2, #5
 80156d4:	697a      	ldr	r2, [r7, #20]
 80156d6:	440a      	add	r2, r1
 80156d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80156dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80156e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80156e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80156e6:	693b      	ldr	r3, [r7, #16]
 80156e8:	015a      	lsls	r2, r3, #5
 80156ea:	697b      	ldr	r3, [r7, #20]
 80156ec:	4413      	add	r3, r2
 80156ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80156f2:	691b      	ldr	r3, [r3, #16]
 80156f4:	693a      	ldr	r2, [r7, #16]
 80156f6:	0151      	lsls	r1, r2, #5
 80156f8:	697a      	ldr	r2, [r7, #20]
 80156fa:	440a      	add	r2, r1
 80156fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015700:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015704:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015706:	693b      	ldr	r3, [r7, #16]
 8015708:	015a      	lsls	r2, r3, #5
 801570a:	697b      	ldr	r3, [r7, #20]
 801570c:	4413      	add	r3, r2
 801570e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015712:	691b      	ldr	r3, [r3, #16]
 8015714:	693a      	ldr	r2, [r7, #16]
 8015716:	0151      	lsls	r1, r2, #5
 8015718:	697a      	ldr	r2, [r7, #20]
 801571a:	440a      	add	r2, r1
 801571c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015720:	0cdb      	lsrs	r3, r3, #19
 8015722:	04db      	lsls	r3, r3, #19
 8015724:	6113      	str	r3, [r2, #16]
 8015726:	e04e      	b.n	80157c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015728:	693b      	ldr	r3, [r7, #16]
 801572a:	015a      	lsls	r2, r3, #5
 801572c:	697b      	ldr	r3, [r7, #20]
 801572e:	4413      	add	r3, r2
 8015730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015734:	691b      	ldr	r3, [r3, #16]
 8015736:	693a      	ldr	r2, [r7, #16]
 8015738:	0151      	lsls	r1, r2, #5
 801573a:	697a      	ldr	r2, [r7, #20]
 801573c:	440a      	add	r2, r1
 801573e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015742:	0cdb      	lsrs	r3, r3, #19
 8015744:	04db      	lsls	r3, r3, #19
 8015746:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015748:	693b      	ldr	r3, [r7, #16]
 801574a:	015a      	lsls	r2, r3, #5
 801574c:	697b      	ldr	r3, [r7, #20]
 801574e:	4413      	add	r3, r2
 8015750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015754:	691b      	ldr	r3, [r3, #16]
 8015756:	693a      	ldr	r2, [r7, #16]
 8015758:	0151      	lsls	r1, r2, #5
 801575a:	697a      	ldr	r2, [r7, #20]
 801575c:	440a      	add	r2, r1
 801575e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015762:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015766:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801576a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801576c:	68bb      	ldr	r3, [r7, #8]
 801576e:	695a      	ldr	r2, [r3, #20]
 8015770:	68bb      	ldr	r3, [r7, #8]
 8015772:	689b      	ldr	r3, [r3, #8]
 8015774:	429a      	cmp	r2, r3
 8015776:	d903      	bls.n	8015780 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8015778:	68bb      	ldr	r3, [r7, #8]
 801577a:	689a      	ldr	r2, [r3, #8]
 801577c:	68bb      	ldr	r3, [r7, #8]
 801577e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015780:	693b      	ldr	r3, [r7, #16]
 8015782:	015a      	lsls	r2, r3, #5
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	4413      	add	r3, r2
 8015788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801578c:	691b      	ldr	r3, [r3, #16]
 801578e:	693a      	ldr	r2, [r7, #16]
 8015790:	0151      	lsls	r1, r2, #5
 8015792:	697a      	ldr	r2, [r7, #20]
 8015794:	440a      	add	r2, r1
 8015796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801579a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801579e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80157a0:	693b      	ldr	r3, [r7, #16]
 80157a2:	015a      	lsls	r2, r3, #5
 80157a4:	697b      	ldr	r3, [r7, #20]
 80157a6:	4413      	add	r3, r2
 80157a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80157ac:	691a      	ldr	r2, [r3, #16]
 80157ae:	68bb      	ldr	r3, [r7, #8]
 80157b0:	695b      	ldr	r3, [r3, #20]
 80157b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80157b6:	6939      	ldr	r1, [r7, #16]
 80157b8:	0148      	lsls	r0, r1, #5
 80157ba:	6979      	ldr	r1, [r7, #20]
 80157bc:	4401      	add	r1, r0
 80157be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80157c2:	4313      	orrs	r3, r2
 80157c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80157c6:	79fb      	ldrb	r3, [r7, #7]
 80157c8:	2b01      	cmp	r3, #1
 80157ca:	d11e      	bne.n	801580a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80157cc:	68bb      	ldr	r3, [r7, #8]
 80157ce:	691b      	ldr	r3, [r3, #16]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d009      	beq.n	80157e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80157d4:	693b      	ldr	r3, [r7, #16]
 80157d6:	015a      	lsls	r2, r3, #5
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	4413      	add	r3, r2
 80157dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80157e0:	461a      	mov	r2, r3
 80157e2:	68bb      	ldr	r3, [r7, #8]
 80157e4:	691b      	ldr	r3, [r3, #16]
 80157e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80157e8:	693b      	ldr	r3, [r7, #16]
 80157ea:	015a      	lsls	r2, r3, #5
 80157ec:	697b      	ldr	r3, [r7, #20]
 80157ee:	4413      	add	r3, r2
 80157f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	693a      	ldr	r2, [r7, #16]
 80157f8:	0151      	lsls	r1, r2, #5
 80157fa:	697a      	ldr	r2, [r7, #20]
 80157fc:	440a      	add	r2, r1
 80157fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015802:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015806:	6013      	str	r3, [r2, #0]
 8015808:	e092      	b.n	8015930 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801580a:	693b      	ldr	r3, [r7, #16]
 801580c:	015a      	lsls	r2, r3, #5
 801580e:	697b      	ldr	r3, [r7, #20]
 8015810:	4413      	add	r3, r2
 8015812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	693a      	ldr	r2, [r7, #16]
 801581a:	0151      	lsls	r1, r2, #5
 801581c:	697a      	ldr	r2, [r7, #20]
 801581e:	440a      	add	r2, r1
 8015820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015824:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015828:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801582a:	68bb      	ldr	r3, [r7, #8]
 801582c:	695b      	ldr	r3, [r3, #20]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d07e      	beq.n	8015930 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8015832:	697b      	ldr	r3, [r7, #20]
 8015834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801583a:	68bb      	ldr	r3, [r7, #8]
 801583c:	781b      	ldrb	r3, [r3, #0]
 801583e:	f003 030f 	and.w	r3, r3, #15
 8015842:	2101      	movs	r1, #1
 8015844:	fa01 f303 	lsl.w	r3, r1, r3
 8015848:	6979      	ldr	r1, [r7, #20]
 801584a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801584e:	4313      	orrs	r3, r2
 8015850:	634b      	str	r3, [r1, #52]	; 0x34
 8015852:	e06d      	b.n	8015930 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8015854:	693b      	ldr	r3, [r7, #16]
 8015856:	015a      	lsls	r2, r3, #5
 8015858:	697b      	ldr	r3, [r7, #20]
 801585a:	4413      	add	r3, r2
 801585c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015860:	691b      	ldr	r3, [r3, #16]
 8015862:	693a      	ldr	r2, [r7, #16]
 8015864:	0151      	lsls	r1, r2, #5
 8015866:	697a      	ldr	r2, [r7, #20]
 8015868:	440a      	add	r2, r1
 801586a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801586e:	0cdb      	lsrs	r3, r3, #19
 8015870:	04db      	lsls	r3, r3, #19
 8015872:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8015874:	693b      	ldr	r3, [r7, #16]
 8015876:	015a      	lsls	r2, r3, #5
 8015878:	697b      	ldr	r3, [r7, #20]
 801587a:	4413      	add	r3, r2
 801587c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015880:	691b      	ldr	r3, [r3, #16]
 8015882:	693a      	ldr	r2, [r7, #16]
 8015884:	0151      	lsls	r1, r2, #5
 8015886:	697a      	ldr	r2, [r7, #20]
 8015888:	440a      	add	r2, r1
 801588a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801588e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015892:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015896:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8015898:	68bb      	ldr	r3, [r7, #8]
 801589a:	695b      	ldr	r3, [r3, #20]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d003      	beq.n	80158a8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80158a0:	68bb      	ldr	r3, [r7, #8]
 80158a2:	689a      	ldr	r2, [r3, #8]
 80158a4:	68bb      	ldr	r3, [r7, #8]
 80158a6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80158a8:	693b      	ldr	r3, [r7, #16]
 80158aa:	015a      	lsls	r2, r3, #5
 80158ac:	697b      	ldr	r3, [r7, #20]
 80158ae:	4413      	add	r3, r2
 80158b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80158b4:	691b      	ldr	r3, [r3, #16]
 80158b6:	693a      	ldr	r2, [r7, #16]
 80158b8:	0151      	lsls	r1, r2, #5
 80158ba:	697a      	ldr	r2, [r7, #20]
 80158bc:	440a      	add	r2, r1
 80158be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80158c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80158c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80158c8:	693b      	ldr	r3, [r7, #16]
 80158ca:	015a      	lsls	r2, r3, #5
 80158cc:	697b      	ldr	r3, [r7, #20]
 80158ce:	4413      	add	r3, r2
 80158d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80158d4:	691a      	ldr	r2, [r3, #16]
 80158d6:	68bb      	ldr	r3, [r7, #8]
 80158d8:	689b      	ldr	r3, [r3, #8]
 80158da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80158de:	6939      	ldr	r1, [r7, #16]
 80158e0:	0148      	lsls	r0, r1, #5
 80158e2:	6979      	ldr	r1, [r7, #20]
 80158e4:	4401      	add	r1, r0
 80158e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80158ea:	4313      	orrs	r3, r2
 80158ec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80158ee:	79fb      	ldrb	r3, [r7, #7]
 80158f0:	2b01      	cmp	r3, #1
 80158f2:	d10d      	bne.n	8015910 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80158f4:	68bb      	ldr	r3, [r7, #8]
 80158f6:	68db      	ldr	r3, [r3, #12]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d009      	beq.n	8015910 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80158fc:	68bb      	ldr	r3, [r7, #8]
 80158fe:	68d9      	ldr	r1, [r3, #12]
 8015900:	693b      	ldr	r3, [r7, #16]
 8015902:	015a      	lsls	r2, r3, #5
 8015904:	697b      	ldr	r3, [r7, #20]
 8015906:	4413      	add	r3, r2
 8015908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801590c:	460a      	mov	r2, r1
 801590e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8015910:	693b      	ldr	r3, [r7, #16]
 8015912:	015a      	lsls	r2, r3, #5
 8015914:	697b      	ldr	r3, [r7, #20]
 8015916:	4413      	add	r3, r2
 8015918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	693a      	ldr	r2, [r7, #16]
 8015920:	0151      	lsls	r1, r2, #5
 8015922:	697a      	ldr	r2, [r7, #20]
 8015924:	440a      	add	r2, r1
 8015926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801592a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801592e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015930:	2300      	movs	r3, #0
}
 8015932:	4618      	mov	r0, r3
 8015934:	371c      	adds	r7, #28
 8015936:	46bd      	mov	sp, r7
 8015938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593c:	4770      	bx	lr

0801593e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801593e:	b480      	push	{r7}
 8015940:	b089      	sub	sp, #36	; 0x24
 8015942:	af00      	add	r7, sp, #0
 8015944:	60f8      	str	r0, [r7, #12]
 8015946:	60b9      	str	r1, [r7, #8]
 8015948:	4611      	mov	r1, r2
 801594a:	461a      	mov	r2, r3
 801594c:	460b      	mov	r3, r1
 801594e:	71fb      	strb	r3, [r7, #7]
 8015950:	4613      	mov	r3, r2
 8015952:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8015958:	68bb      	ldr	r3, [r7, #8]
 801595a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801595c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015960:	2b00      	cmp	r3, #0
 8015962:	d123      	bne.n	80159ac <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8015964:	88bb      	ldrh	r3, [r7, #4]
 8015966:	3303      	adds	r3, #3
 8015968:	089b      	lsrs	r3, r3, #2
 801596a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801596c:	2300      	movs	r3, #0
 801596e:	61bb      	str	r3, [r7, #24]
 8015970:	e018      	b.n	80159a4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8015972:	79fb      	ldrb	r3, [r7, #7]
 8015974:	031a      	lsls	r2, r3, #12
 8015976:	697b      	ldr	r3, [r7, #20]
 8015978:	4413      	add	r3, r2
 801597a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801597e:	461a      	mov	r2, r3
 8015980:	69fb      	ldr	r3, [r7, #28]
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	6013      	str	r3, [r2, #0]
      pSrc++;
 8015986:	69fb      	ldr	r3, [r7, #28]
 8015988:	3301      	adds	r3, #1
 801598a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801598c:	69fb      	ldr	r3, [r7, #28]
 801598e:	3301      	adds	r3, #1
 8015990:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015992:	69fb      	ldr	r3, [r7, #28]
 8015994:	3301      	adds	r3, #1
 8015996:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015998:	69fb      	ldr	r3, [r7, #28]
 801599a:	3301      	adds	r3, #1
 801599c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801599e:	69bb      	ldr	r3, [r7, #24]
 80159a0:	3301      	adds	r3, #1
 80159a2:	61bb      	str	r3, [r7, #24]
 80159a4:	69ba      	ldr	r2, [r7, #24]
 80159a6:	693b      	ldr	r3, [r7, #16]
 80159a8:	429a      	cmp	r2, r3
 80159aa:	d3e2      	bcc.n	8015972 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80159ac:	2300      	movs	r3, #0
}
 80159ae:	4618      	mov	r0, r3
 80159b0:	3724      	adds	r7, #36	; 0x24
 80159b2:	46bd      	mov	sp, r7
 80159b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b8:	4770      	bx	lr

080159ba <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80159ba:	b480      	push	{r7}
 80159bc:	b08b      	sub	sp, #44	; 0x2c
 80159be:	af00      	add	r7, sp, #0
 80159c0:	60f8      	str	r0, [r7, #12]
 80159c2:	60b9      	str	r1, [r7, #8]
 80159c4:	4613      	mov	r3, r2
 80159c6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80159cc:	68bb      	ldr	r3, [r7, #8]
 80159ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80159d0:	88fb      	ldrh	r3, [r7, #6]
 80159d2:	089b      	lsrs	r3, r3, #2
 80159d4:	b29b      	uxth	r3, r3
 80159d6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80159d8:	88fb      	ldrh	r3, [r7, #6]
 80159da:	f003 0303 	and.w	r3, r3, #3
 80159de:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80159e0:	2300      	movs	r3, #0
 80159e2:	623b      	str	r3, [r7, #32]
 80159e4:	e014      	b.n	8015a10 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80159e6:	69bb      	ldr	r3, [r7, #24]
 80159e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80159ec:	681a      	ldr	r2, [r3, #0]
 80159ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159f0:	601a      	str	r2, [r3, #0]
    pDest++;
 80159f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159f4:	3301      	adds	r3, #1
 80159f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80159f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159fa:	3301      	adds	r3, #1
 80159fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80159fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a00:	3301      	adds	r3, #1
 8015a02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a06:	3301      	adds	r3, #1
 8015a08:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8015a0a:	6a3b      	ldr	r3, [r7, #32]
 8015a0c:	3301      	adds	r3, #1
 8015a0e:	623b      	str	r3, [r7, #32]
 8015a10:	6a3a      	ldr	r2, [r7, #32]
 8015a12:	697b      	ldr	r3, [r7, #20]
 8015a14:	429a      	cmp	r2, r3
 8015a16:	d3e6      	bcc.n	80159e6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8015a18:	8bfb      	ldrh	r3, [r7, #30]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d01e      	beq.n	8015a5c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8015a1e:	2300      	movs	r3, #0
 8015a20:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8015a22:	69bb      	ldr	r3, [r7, #24]
 8015a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015a28:	461a      	mov	r2, r3
 8015a2a:	f107 0310 	add.w	r3, r7, #16
 8015a2e:	6812      	ldr	r2, [r2, #0]
 8015a30:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8015a32:	693a      	ldr	r2, [r7, #16]
 8015a34:	6a3b      	ldr	r3, [r7, #32]
 8015a36:	b2db      	uxtb	r3, r3
 8015a38:	00db      	lsls	r3, r3, #3
 8015a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8015a3e:	b2da      	uxtb	r2, r3
 8015a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a42:	701a      	strb	r2, [r3, #0]
      i++;
 8015a44:	6a3b      	ldr	r3, [r7, #32]
 8015a46:	3301      	adds	r3, #1
 8015a48:	623b      	str	r3, [r7, #32]
      pDest++;
 8015a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a4c:	3301      	adds	r3, #1
 8015a4e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8015a50:	8bfb      	ldrh	r3, [r7, #30]
 8015a52:	3b01      	subs	r3, #1
 8015a54:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8015a56:	8bfb      	ldrh	r3, [r7, #30]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d1ea      	bne.n	8015a32 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8015a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015a5e:	4618      	mov	r0, r3
 8015a60:	372c      	adds	r7, #44	; 0x2c
 8015a62:	46bd      	mov	sp, r7
 8015a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a68:	4770      	bx	lr

08015a6a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015a6a:	b480      	push	{r7}
 8015a6c:	b085      	sub	sp, #20
 8015a6e:	af00      	add	r7, sp, #0
 8015a70:	6078      	str	r0, [r7, #4]
 8015a72:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	781b      	ldrb	r3, [r3, #0]
 8015a7c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015a7e:	683b      	ldr	r3, [r7, #0]
 8015a80:	785b      	ldrb	r3, [r3, #1]
 8015a82:	2b01      	cmp	r3, #1
 8015a84:	d12c      	bne.n	8015ae0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015a86:	68bb      	ldr	r3, [r7, #8]
 8015a88:	015a      	lsls	r2, r3, #5
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	4413      	add	r3, r2
 8015a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	db12      	blt.n	8015abe <USB_EPSetStall+0x54>
 8015a98:	68bb      	ldr	r3, [r7, #8]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d00f      	beq.n	8015abe <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015a9e:	68bb      	ldr	r3, [r7, #8]
 8015aa0:	015a      	lsls	r2, r3, #5
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	4413      	add	r3, r2
 8015aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	68ba      	ldr	r2, [r7, #8]
 8015aae:	0151      	lsls	r1, r2, #5
 8015ab0:	68fa      	ldr	r2, [r7, #12]
 8015ab2:	440a      	add	r2, r1
 8015ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015ab8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015abc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015abe:	68bb      	ldr	r3, [r7, #8]
 8015ac0:	015a      	lsls	r2, r3, #5
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	4413      	add	r3, r2
 8015ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	68ba      	ldr	r2, [r7, #8]
 8015ace:	0151      	lsls	r1, r2, #5
 8015ad0:	68fa      	ldr	r2, [r7, #12]
 8015ad2:	440a      	add	r2, r1
 8015ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015ad8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015adc:	6013      	str	r3, [r2, #0]
 8015ade:	e02b      	b.n	8015b38 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015ae0:	68bb      	ldr	r3, [r7, #8]
 8015ae2:	015a      	lsls	r2, r3, #5
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	4413      	add	r3, r2
 8015ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	db12      	blt.n	8015b18 <USB_EPSetStall+0xae>
 8015af2:	68bb      	ldr	r3, [r7, #8]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d00f      	beq.n	8015b18 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015af8:	68bb      	ldr	r3, [r7, #8]
 8015afa:	015a      	lsls	r2, r3, #5
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	4413      	add	r3, r2
 8015b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	68ba      	ldr	r2, [r7, #8]
 8015b08:	0151      	lsls	r1, r2, #5
 8015b0a:	68fa      	ldr	r2, [r7, #12]
 8015b0c:	440a      	add	r2, r1
 8015b0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015b12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015b16:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015b18:	68bb      	ldr	r3, [r7, #8]
 8015b1a:	015a      	lsls	r2, r3, #5
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	4413      	add	r3, r2
 8015b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	68ba      	ldr	r2, [r7, #8]
 8015b28:	0151      	lsls	r1, r2, #5
 8015b2a:	68fa      	ldr	r2, [r7, #12]
 8015b2c:	440a      	add	r2, r1
 8015b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015b32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015b36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015b38:	2300      	movs	r3, #0
}
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	3714      	adds	r7, #20
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b44:	4770      	bx	lr

08015b46 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015b46:	b480      	push	{r7}
 8015b48:	b085      	sub	sp, #20
 8015b4a:	af00      	add	r7, sp, #0
 8015b4c:	6078      	str	r0, [r7, #4]
 8015b4e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015b54:	683b      	ldr	r3, [r7, #0]
 8015b56:	781b      	ldrb	r3, [r3, #0]
 8015b58:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015b5a:	683b      	ldr	r3, [r7, #0]
 8015b5c:	785b      	ldrb	r3, [r3, #1]
 8015b5e:	2b01      	cmp	r3, #1
 8015b60:	d128      	bne.n	8015bb4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8015b62:	68bb      	ldr	r3, [r7, #8]
 8015b64:	015a      	lsls	r2, r3, #5
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	4413      	add	r3, r2
 8015b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	68ba      	ldr	r2, [r7, #8]
 8015b72:	0151      	lsls	r1, r2, #5
 8015b74:	68fa      	ldr	r2, [r7, #12]
 8015b76:	440a      	add	r2, r1
 8015b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015b7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015b80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015b82:	683b      	ldr	r3, [r7, #0]
 8015b84:	78db      	ldrb	r3, [r3, #3]
 8015b86:	2b03      	cmp	r3, #3
 8015b88:	d003      	beq.n	8015b92 <USB_EPClearStall+0x4c>
 8015b8a:	683b      	ldr	r3, [r7, #0]
 8015b8c:	78db      	ldrb	r3, [r3, #3]
 8015b8e:	2b02      	cmp	r3, #2
 8015b90:	d138      	bne.n	8015c04 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015b92:	68bb      	ldr	r3, [r7, #8]
 8015b94:	015a      	lsls	r2, r3, #5
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	4413      	add	r3, r2
 8015b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	68ba      	ldr	r2, [r7, #8]
 8015ba2:	0151      	lsls	r1, r2, #5
 8015ba4:	68fa      	ldr	r2, [r7, #12]
 8015ba6:	440a      	add	r2, r1
 8015ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015bb0:	6013      	str	r3, [r2, #0]
 8015bb2:	e027      	b.n	8015c04 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8015bb4:	68bb      	ldr	r3, [r7, #8]
 8015bb6:	015a      	lsls	r2, r3, #5
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	4413      	add	r3, r2
 8015bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	68ba      	ldr	r2, [r7, #8]
 8015bc4:	0151      	lsls	r1, r2, #5
 8015bc6:	68fa      	ldr	r2, [r7, #12]
 8015bc8:	440a      	add	r2, r1
 8015bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015bce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015bd2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015bd4:	683b      	ldr	r3, [r7, #0]
 8015bd6:	78db      	ldrb	r3, [r3, #3]
 8015bd8:	2b03      	cmp	r3, #3
 8015bda:	d003      	beq.n	8015be4 <USB_EPClearStall+0x9e>
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	78db      	ldrb	r3, [r3, #3]
 8015be0:	2b02      	cmp	r3, #2
 8015be2:	d10f      	bne.n	8015c04 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015be4:	68bb      	ldr	r3, [r7, #8]
 8015be6:	015a      	lsls	r2, r3, #5
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	4413      	add	r3, r2
 8015bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	68ba      	ldr	r2, [r7, #8]
 8015bf4:	0151      	lsls	r1, r2, #5
 8015bf6:	68fa      	ldr	r2, [r7, #12]
 8015bf8:	440a      	add	r2, r1
 8015bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015c02:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8015c04:	2300      	movs	r3, #0
}
 8015c06:	4618      	mov	r0, r3
 8015c08:	3714      	adds	r7, #20
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c10:	4770      	bx	lr

08015c12 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8015c12:	b480      	push	{r7}
 8015c14:	b085      	sub	sp, #20
 8015c16:	af00      	add	r7, sp, #0
 8015c18:	6078      	str	r0, [r7, #4]
 8015c1a:	460b      	mov	r3, r1
 8015c1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	68fa      	ldr	r2, [r7, #12]
 8015c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015c30:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8015c34:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015c3c:	681a      	ldr	r2, [r3, #0]
 8015c3e:	78fb      	ldrb	r3, [r7, #3]
 8015c40:	011b      	lsls	r3, r3, #4
 8015c42:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8015c46:	68f9      	ldr	r1, [r7, #12]
 8015c48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015c4c:	4313      	orrs	r3, r2
 8015c4e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8015c50:	2300      	movs	r3, #0
}
 8015c52:	4618      	mov	r0, r3
 8015c54:	3714      	adds	r7, #20
 8015c56:	46bd      	mov	sp, r7
 8015c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c5c:	4770      	bx	lr

08015c5e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8015c5e:	b480      	push	{r7}
 8015c60:	b085      	sub	sp, #20
 8015c62:	af00      	add	r7, sp, #0
 8015c64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	68fa      	ldr	r2, [r7, #12]
 8015c74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015c78:	f023 0303 	bic.w	r3, r3, #3
 8015c7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015c84:	685b      	ldr	r3, [r3, #4]
 8015c86:	68fa      	ldr	r2, [r7, #12]
 8015c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015c8c:	f023 0302 	bic.w	r3, r3, #2
 8015c90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015c92:	2300      	movs	r3, #0
}
 8015c94:	4618      	mov	r0, r3
 8015c96:	3714      	adds	r7, #20
 8015c98:	46bd      	mov	sp, r7
 8015c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9e:	4770      	bx	lr

08015ca0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8015ca0:	b480      	push	{r7}
 8015ca2:	b085      	sub	sp, #20
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	68fa      	ldr	r2, [r7, #12]
 8015cb6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015cba:	f023 0303 	bic.w	r3, r3, #3
 8015cbe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015cc6:	685b      	ldr	r3, [r3, #4]
 8015cc8:	68fa      	ldr	r2, [r7, #12]
 8015cca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015cce:	f043 0302 	orr.w	r3, r3, #2
 8015cd2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015cd4:	2300      	movs	r3, #0
}
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	3714      	adds	r7, #20
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce0:	4770      	bx	lr

08015ce2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8015ce2:	b480      	push	{r7}
 8015ce4:	b085      	sub	sp, #20
 8015ce6:	af00      	add	r7, sp, #0
 8015ce8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	695b      	ldr	r3, [r3, #20]
 8015cee:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	699b      	ldr	r3, [r3, #24]
 8015cf4:	68fa      	ldr	r2, [r7, #12]
 8015cf6:	4013      	ands	r3, r2
 8015cf8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015cfa:	68fb      	ldr	r3, [r7, #12]
}
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	3714      	adds	r7, #20
 8015d00:	46bd      	mov	sp, r7
 8015d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d06:	4770      	bx	lr

08015d08 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8015d08:	b480      	push	{r7}
 8015d0a:	b085      	sub	sp, #20
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015d1a:	699b      	ldr	r3, [r3, #24]
 8015d1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015d24:	69db      	ldr	r3, [r3, #28]
 8015d26:	68ba      	ldr	r2, [r7, #8]
 8015d28:	4013      	ands	r3, r2
 8015d2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8015d2c:	68bb      	ldr	r3, [r7, #8]
 8015d2e:	0c1b      	lsrs	r3, r3, #16
}
 8015d30:	4618      	mov	r0, r3
 8015d32:	3714      	adds	r7, #20
 8015d34:	46bd      	mov	sp, r7
 8015d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d3a:	4770      	bx	lr

08015d3c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8015d3c:	b480      	push	{r7}
 8015d3e:	b085      	sub	sp, #20
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015d4e:	699b      	ldr	r3, [r3, #24]
 8015d50:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015d58:	69db      	ldr	r3, [r3, #28]
 8015d5a:	68ba      	ldr	r2, [r7, #8]
 8015d5c:	4013      	ands	r3, r2
 8015d5e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8015d60:	68bb      	ldr	r3, [r7, #8]
 8015d62:	b29b      	uxth	r3, r3
}
 8015d64:	4618      	mov	r0, r3
 8015d66:	3714      	adds	r7, #20
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6e:	4770      	bx	lr

08015d70 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015d70:	b480      	push	{r7}
 8015d72:	b085      	sub	sp, #20
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
 8015d78:	460b      	mov	r3, r1
 8015d7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8015d80:	78fb      	ldrb	r3, [r7, #3]
 8015d82:	015a      	lsls	r2, r3, #5
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	4413      	add	r3, r2
 8015d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015d8c:	689b      	ldr	r3, [r3, #8]
 8015d8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015d96:	695b      	ldr	r3, [r3, #20]
 8015d98:	68ba      	ldr	r2, [r7, #8]
 8015d9a:	4013      	ands	r3, r2
 8015d9c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015d9e:	68bb      	ldr	r3, [r7, #8]
}
 8015da0:	4618      	mov	r0, r3
 8015da2:	3714      	adds	r7, #20
 8015da4:	46bd      	mov	sp, r7
 8015da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015daa:	4770      	bx	lr

08015dac <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015dac:	b480      	push	{r7}
 8015dae:	b087      	sub	sp, #28
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
 8015db4:	460b      	mov	r3, r1
 8015db6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8015dbc:	697b      	ldr	r3, [r7, #20]
 8015dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015dc2:	691b      	ldr	r3, [r3, #16]
 8015dc4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015dc6:	697b      	ldr	r3, [r7, #20]
 8015dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015dce:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8015dd0:	78fb      	ldrb	r3, [r7, #3]
 8015dd2:	f003 030f 	and.w	r3, r3, #15
 8015dd6:	68fa      	ldr	r2, [r7, #12]
 8015dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8015ddc:	01db      	lsls	r3, r3, #7
 8015dde:	b2db      	uxtb	r3, r3
 8015de0:	693a      	ldr	r2, [r7, #16]
 8015de2:	4313      	orrs	r3, r2
 8015de4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015de6:	78fb      	ldrb	r3, [r7, #3]
 8015de8:	015a      	lsls	r2, r3, #5
 8015dea:	697b      	ldr	r3, [r7, #20]
 8015dec:	4413      	add	r3, r2
 8015dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015df2:	689b      	ldr	r3, [r3, #8]
 8015df4:	693a      	ldr	r2, [r7, #16]
 8015df6:	4013      	ands	r3, r2
 8015df8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015dfa:	68bb      	ldr	r3, [r7, #8]
}
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	371c      	adds	r7, #28
 8015e00:	46bd      	mov	sp, r7
 8015e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e06:	4770      	bx	lr

08015e08 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8015e08:	b480      	push	{r7}
 8015e0a:	b083      	sub	sp, #12
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	695b      	ldr	r3, [r3, #20]
 8015e14:	f003 0301 	and.w	r3, r3, #1
}
 8015e18:	4618      	mov	r0, r3
 8015e1a:	370c      	adds	r7, #12
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e22:	4770      	bx	lr

08015e24 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8015e24:	b480      	push	{r7}
 8015e26:	b085      	sub	sp, #20
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	68fa      	ldr	r2, [r7, #12]
 8015e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015e3e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8015e42:	f023 0307 	bic.w	r3, r3, #7
 8015e46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015e4e:	685b      	ldr	r3, [r3, #4]
 8015e50:	68fa      	ldr	r2, [r7, #12]
 8015e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015e5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015e5c:	2300      	movs	r3, #0
}
 8015e5e:	4618      	mov	r0, r3
 8015e60:	3714      	adds	r7, #20
 8015e62:	46bd      	mov	sp, r7
 8015e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e68:	4770      	bx	lr
	...

08015e6c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8015e6c:	b480      	push	{r7}
 8015e6e:	b087      	sub	sp, #28
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	60f8      	str	r0, [r7, #12]
 8015e74:	460b      	mov	r3, r1
 8015e76:	607a      	str	r2, [r7, #4]
 8015e78:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	333c      	adds	r3, #60	; 0x3c
 8015e82:	3304      	adds	r3, #4
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8015e88:	693b      	ldr	r3, [r7, #16]
 8015e8a:	4a26      	ldr	r2, [pc, #152]	; (8015f24 <USB_EP0_OutStart+0xb8>)
 8015e8c:	4293      	cmp	r3, r2
 8015e8e:	d90a      	bls.n	8015ea6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015e90:	697b      	ldr	r3, [r7, #20]
 8015e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015ea0:	d101      	bne.n	8015ea6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	e037      	b.n	8015f16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8015ea6:	697b      	ldr	r3, [r7, #20]
 8015ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015eac:	461a      	mov	r2, r3
 8015eae:	2300      	movs	r3, #0
 8015eb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015eb2:	697b      	ldr	r3, [r7, #20]
 8015eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015eb8:	691b      	ldr	r3, [r3, #16]
 8015eba:	697a      	ldr	r2, [r7, #20]
 8015ebc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015ec0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015ec4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8015ec6:	697b      	ldr	r3, [r7, #20]
 8015ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015ecc:	691b      	ldr	r3, [r3, #16]
 8015ece:	697a      	ldr	r2, [r7, #20]
 8015ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015ed4:	f043 0318 	orr.w	r3, r3, #24
 8015ed8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015eda:	697b      	ldr	r3, [r7, #20]
 8015edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015ee0:	691b      	ldr	r3, [r3, #16]
 8015ee2:	697a      	ldr	r2, [r7, #20]
 8015ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015ee8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8015eec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8015eee:	7afb      	ldrb	r3, [r7, #11]
 8015ef0:	2b01      	cmp	r3, #1
 8015ef2:	d10f      	bne.n	8015f14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015ef4:	697b      	ldr	r3, [r7, #20]
 8015ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015efa:	461a      	mov	r2, r3
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015f00:	697b      	ldr	r3, [r7, #20]
 8015f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	697a      	ldr	r2, [r7, #20]
 8015f0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015f0e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8015f12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015f14:	2300      	movs	r3, #0
}
 8015f16:	4618      	mov	r0, r3
 8015f18:	371c      	adds	r7, #28
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f20:	4770      	bx	lr
 8015f22:	bf00      	nop
 8015f24:	4f54300a 	.word	0x4f54300a

08015f28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015f28:	b480      	push	{r7}
 8015f2a:	b085      	sub	sp, #20
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015f30:	2300      	movs	r3, #0
 8015f32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	3301      	adds	r3, #1
 8015f38:	60fb      	str	r3, [r7, #12]
 8015f3a:	4a13      	ldr	r2, [pc, #76]	; (8015f88 <USB_CoreReset+0x60>)
 8015f3c:	4293      	cmp	r3, r2
 8015f3e:	d901      	bls.n	8015f44 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8015f40:	2303      	movs	r3, #3
 8015f42:	e01a      	b.n	8015f7a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	691b      	ldr	r3, [r3, #16]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	daf3      	bge.n	8015f34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	691b      	ldr	r3, [r3, #16]
 8015f54:	f043 0201 	orr.w	r2, r3, #1
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	3301      	adds	r3, #1
 8015f60:	60fb      	str	r3, [r7, #12]
 8015f62:	4a09      	ldr	r2, [pc, #36]	; (8015f88 <USB_CoreReset+0x60>)
 8015f64:	4293      	cmp	r3, r2
 8015f66:	d901      	bls.n	8015f6c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8015f68:	2303      	movs	r3, #3
 8015f6a:	e006      	b.n	8015f7a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	691b      	ldr	r3, [r3, #16]
 8015f70:	f003 0301 	and.w	r3, r3, #1
 8015f74:	2b01      	cmp	r3, #1
 8015f76:	d0f1      	beq.n	8015f5c <USB_CoreReset+0x34>

  return HAL_OK;
 8015f78:	2300      	movs	r3, #0
}
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	3714      	adds	r7, #20
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f84:	4770      	bx	lr
 8015f86:	bf00      	nop
 8015f88:	00030d40 	.word	0x00030d40

08015f8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b084      	sub	sp, #16
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
 8015f94:	460b      	mov	r3, r1
 8015f96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015f98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8015f9c:	f005 fc90 	bl	801b8c0 <USBD_static_malloc>
 8015fa0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d105      	bne.n	8015fb4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	2200      	movs	r2, #0
 8015fac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8015fb0:	2302      	movs	r3, #2
 8015fb2:	e066      	b.n	8016082 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	68fa      	ldr	r2, [r7, #12]
 8015fb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	7c1b      	ldrb	r3, [r3, #16]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d119      	bne.n	8015ff8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8015fc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015fc8:	2202      	movs	r2, #2
 8015fca:	2181      	movs	r1, #129	; 0x81
 8015fcc:	6878      	ldr	r0, [r7, #4]
 8015fce:	f005 fb54 	bl	801b67a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	2201      	movs	r2, #1
 8015fd6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8015fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015fdc:	2202      	movs	r2, #2
 8015fde:	2101      	movs	r1, #1
 8015fe0:	6878      	ldr	r0, [r7, #4]
 8015fe2:	f005 fb4a 	bl	801b67a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	2201      	movs	r2, #1
 8015fea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	2210      	movs	r2, #16
 8015ff2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8015ff6:	e016      	b.n	8016026 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8015ff8:	2340      	movs	r3, #64	; 0x40
 8015ffa:	2202      	movs	r2, #2
 8015ffc:	2181      	movs	r1, #129	; 0x81
 8015ffe:	6878      	ldr	r0, [r7, #4]
 8016000:	f005 fb3b 	bl	801b67a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	2201      	movs	r2, #1
 8016008:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801600a:	2340      	movs	r3, #64	; 0x40
 801600c:	2202      	movs	r2, #2
 801600e:	2101      	movs	r1, #1
 8016010:	6878      	ldr	r0, [r7, #4]
 8016012:	f005 fb32 	bl	801b67a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	2201      	movs	r2, #1
 801601a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	2210      	movs	r2, #16
 8016022:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8016026:	2308      	movs	r3, #8
 8016028:	2203      	movs	r2, #3
 801602a:	2182      	movs	r1, #130	; 0x82
 801602c:	6878      	ldr	r0, [r7, #4]
 801602e:	f005 fb24 	bl	801b67a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	2201      	movs	r2, #1
 8016036:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	2200      	movs	r2, #0
 8016048:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	2200      	movs	r2, #0
 8016050:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	7c1b      	ldrb	r3, [r3, #16]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d109      	bne.n	8016070 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016066:	2101      	movs	r1, #1
 8016068:	6878      	ldr	r0, [r7, #4]
 801606a:	f005 fbf5 	bl	801b858 <USBD_LL_PrepareReceive>
 801606e:	e007      	b.n	8016080 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016076:	2340      	movs	r3, #64	; 0x40
 8016078:	2101      	movs	r1, #1
 801607a:	6878      	ldr	r0, [r7, #4]
 801607c:	f005 fbec 	bl	801b858 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016080:	2300      	movs	r3, #0
}
 8016082:	4618      	mov	r0, r3
 8016084:	3710      	adds	r7, #16
 8016086:	46bd      	mov	sp, r7
 8016088:	bd80      	pop	{r7, pc}

0801608a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801608a:	b580      	push	{r7, lr}
 801608c:	b082      	sub	sp, #8
 801608e:	af00      	add	r7, sp, #0
 8016090:	6078      	str	r0, [r7, #4]
 8016092:	460b      	mov	r3, r1
 8016094:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8016096:	2181      	movs	r1, #129	; 0x81
 8016098:	6878      	ldr	r0, [r7, #4]
 801609a:	f005 fb14 	bl	801b6c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	2200      	movs	r2, #0
 80160a2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80160a4:	2101      	movs	r1, #1
 80160a6:	6878      	ldr	r0, [r7, #4]
 80160a8:	f005 fb0d 	bl	801b6c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	2200      	movs	r2, #0
 80160b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80160b4:	2182      	movs	r1, #130	; 0x82
 80160b6:	6878      	ldr	r0, [r7, #4]
 80160b8:	f005 fb05 	bl	801b6c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	2200      	movs	r2, #0
 80160c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	2200      	movs	r2, #0
 80160c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d00e      	beq.n	80160f4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80160dc:	685b      	ldr	r3, [r3, #4]
 80160de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80160e6:	4618      	mov	r0, r3
 80160e8:	f005 fbf8 	bl	801b8dc <USBD_static_free>
    pdev->pClassData = NULL;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2200      	movs	r2, #0
 80160f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80160f4:	2300      	movs	r3, #0
}
 80160f6:	4618      	mov	r0, r3
 80160f8:	3708      	adds	r7, #8
 80160fa:	46bd      	mov	sp, r7
 80160fc:	bd80      	pop	{r7, pc}
	...

08016100 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8016100:	b580      	push	{r7, lr}
 8016102:	b086      	sub	sp, #24
 8016104:	af00      	add	r7, sp, #0
 8016106:	6078      	str	r0, [r7, #4]
 8016108:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016110:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8016112:	2300      	movs	r3, #0
 8016114:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8016116:	2300      	movs	r3, #0
 8016118:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801611a:	2300      	movs	r3, #0
 801611c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801611e:	693b      	ldr	r3, [r7, #16]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d101      	bne.n	8016128 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8016124:	2303      	movs	r3, #3
 8016126:	e0af      	b.n	8016288 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016128:	683b      	ldr	r3, [r7, #0]
 801612a:	781b      	ldrb	r3, [r3, #0]
 801612c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016130:	2b00      	cmp	r3, #0
 8016132:	d03f      	beq.n	80161b4 <USBD_CDC_Setup+0xb4>
 8016134:	2b20      	cmp	r3, #32
 8016136:	f040 809f 	bne.w	8016278 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801613a:	683b      	ldr	r3, [r7, #0]
 801613c:	88db      	ldrh	r3, [r3, #6]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d02e      	beq.n	80161a0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8016142:	683b      	ldr	r3, [r7, #0]
 8016144:	781b      	ldrb	r3, [r3, #0]
 8016146:	b25b      	sxtb	r3, r3
 8016148:	2b00      	cmp	r3, #0
 801614a:	da16      	bge.n	801617a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016152:	689b      	ldr	r3, [r3, #8]
 8016154:	683a      	ldr	r2, [r7, #0]
 8016156:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8016158:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801615a:	683a      	ldr	r2, [r7, #0]
 801615c:	88d2      	ldrh	r2, [r2, #6]
 801615e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8016160:	683b      	ldr	r3, [r7, #0]
 8016162:	88db      	ldrh	r3, [r3, #6]
 8016164:	2b07      	cmp	r3, #7
 8016166:	bf28      	it	cs
 8016168:	2307      	movcs	r3, #7
 801616a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801616c:	693b      	ldr	r3, [r7, #16]
 801616e:	89fa      	ldrh	r2, [r7, #14]
 8016170:	4619      	mov	r1, r3
 8016172:	6878      	ldr	r0, [r7, #4]
 8016174:	f001 fb19 	bl	80177aa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8016178:	e085      	b.n	8016286 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 801617a:	683b      	ldr	r3, [r7, #0]
 801617c:	785a      	ldrb	r2, [r3, #1]
 801617e:	693b      	ldr	r3, [r7, #16]
 8016180:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8016184:	683b      	ldr	r3, [r7, #0]
 8016186:	88db      	ldrh	r3, [r3, #6]
 8016188:	b2da      	uxtb	r2, r3
 801618a:	693b      	ldr	r3, [r7, #16]
 801618c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8016190:	6939      	ldr	r1, [r7, #16]
 8016192:	683b      	ldr	r3, [r7, #0]
 8016194:	88db      	ldrh	r3, [r3, #6]
 8016196:	461a      	mov	r2, r3
 8016198:	6878      	ldr	r0, [r7, #4]
 801619a:	f001 fb32 	bl	8017802 <USBD_CtlPrepareRx>
      break;
 801619e:	e072      	b.n	8016286 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80161a6:	689b      	ldr	r3, [r3, #8]
 80161a8:	683a      	ldr	r2, [r7, #0]
 80161aa:	7850      	ldrb	r0, [r2, #1]
 80161ac:	2200      	movs	r2, #0
 80161ae:	6839      	ldr	r1, [r7, #0]
 80161b0:	4798      	blx	r3
      break;
 80161b2:	e068      	b.n	8016286 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80161b4:	683b      	ldr	r3, [r7, #0]
 80161b6:	785b      	ldrb	r3, [r3, #1]
 80161b8:	2b0b      	cmp	r3, #11
 80161ba:	d852      	bhi.n	8016262 <USBD_CDC_Setup+0x162>
 80161bc:	a201      	add	r2, pc, #4	; (adr r2, 80161c4 <USBD_CDC_Setup+0xc4>)
 80161be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161c2:	bf00      	nop
 80161c4:	080161f5 	.word	0x080161f5
 80161c8:	08016271 	.word	0x08016271
 80161cc:	08016263 	.word	0x08016263
 80161d0:	08016263 	.word	0x08016263
 80161d4:	08016263 	.word	0x08016263
 80161d8:	08016263 	.word	0x08016263
 80161dc:	08016263 	.word	0x08016263
 80161e0:	08016263 	.word	0x08016263
 80161e4:	08016263 	.word	0x08016263
 80161e8:	08016263 	.word	0x08016263
 80161ec:	0801621f 	.word	0x0801621f
 80161f0:	08016249 	.word	0x08016249
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161fa:	b2db      	uxtb	r3, r3
 80161fc:	2b03      	cmp	r3, #3
 80161fe:	d107      	bne.n	8016210 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8016200:	f107 030a 	add.w	r3, r7, #10
 8016204:	2202      	movs	r2, #2
 8016206:	4619      	mov	r1, r3
 8016208:	6878      	ldr	r0, [r7, #4]
 801620a:	f001 face 	bl	80177aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801620e:	e032      	b.n	8016276 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8016210:	6839      	ldr	r1, [r7, #0]
 8016212:	6878      	ldr	r0, [r7, #4]
 8016214:	f001 fa58 	bl	80176c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8016218:	2303      	movs	r3, #3
 801621a:	75fb      	strb	r3, [r7, #23]
          break;
 801621c:	e02b      	b.n	8016276 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016224:	b2db      	uxtb	r3, r3
 8016226:	2b03      	cmp	r3, #3
 8016228:	d107      	bne.n	801623a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801622a:	f107 030d 	add.w	r3, r7, #13
 801622e:	2201      	movs	r2, #1
 8016230:	4619      	mov	r1, r3
 8016232:	6878      	ldr	r0, [r7, #4]
 8016234:	f001 fab9 	bl	80177aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016238:	e01d      	b.n	8016276 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801623a:	6839      	ldr	r1, [r7, #0]
 801623c:	6878      	ldr	r0, [r7, #4]
 801623e:	f001 fa43 	bl	80176c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8016242:	2303      	movs	r3, #3
 8016244:	75fb      	strb	r3, [r7, #23]
          break;
 8016246:	e016      	b.n	8016276 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801624e:	b2db      	uxtb	r3, r3
 8016250:	2b03      	cmp	r3, #3
 8016252:	d00f      	beq.n	8016274 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8016254:	6839      	ldr	r1, [r7, #0]
 8016256:	6878      	ldr	r0, [r7, #4]
 8016258:	f001 fa36 	bl	80176c8 <USBD_CtlError>
            ret = USBD_FAIL;
 801625c:	2303      	movs	r3, #3
 801625e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8016260:	e008      	b.n	8016274 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8016262:	6839      	ldr	r1, [r7, #0]
 8016264:	6878      	ldr	r0, [r7, #4]
 8016266:	f001 fa2f 	bl	80176c8 <USBD_CtlError>
          ret = USBD_FAIL;
 801626a:	2303      	movs	r3, #3
 801626c:	75fb      	strb	r3, [r7, #23]
          break;
 801626e:	e002      	b.n	8016276 <USBD_CDC_Setup+0x176>
          break;
 8016270:	bf00      	nop
 8016272:	e008      	b.n	8016286 <USBD_CDC_Setup+0x186>
          break;
 8016274:	bf00      	nop
      }
      break;
 8016276:	e006      	b.n	8016286 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8016278:	6839      	ldr	r1, [r7, #0]
 801627a:	6878      	ldr	r0, [r7, #4]
 801627c:	f001 fa24 	bl	80176c8 <USBD_CtlError>
      ret = USBD_FAIL;
 8016280:	2303      	movs	r3, #3
 8016282:	75fb      	strb	r3, [r7, #23]
      break;
 8016284:	bf00      	nop
  }

  return (uint8_t)ret;
 8016286:	7dfb      	ldrb	r3, [r7, #23]
}
 8016288:	4618      	mov	r0, r3
 801628a:	3718      	adds	r7, #24
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}

08016290 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b084      	sub	sp, #16
 8016294:	af00      	add	r7, sp, #0
 8016296:	6078      	str	r0, [r7, #4]
 8016298:	460b      	mov	r3, r1
 801629a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80162a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d101      	bne.n	80162b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80162ae:	2303      	movs	r3, #3
 80162b0:	e04f      	b.n	8016352 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80162b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80162ba:	78fa      	ldrb	r2, [r7, #3]
 80162bc:	6879      	ldr	r1, [r7, #4]
 80162be:	4613      	mov	r3, r2
 80162c0:	009b      	lsls	r3, r3, #2
 80162c2:	4413      	add	r3, r2
 80162c4:	009b      	lsls	r3, r3, #2
 80162c6:	440b      	add	r3, r1
 80162c8:	3318      	adds	r3, #24
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d029      	beq.n	8016324 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80162d0:	78fa      	ldrb	r2, [r7, #3]
 80162d2:	6879      	ldr	r1, [r7, #4]
 80162d4:	4613      	mov	r3, r2
 80162d6:	009b      	lsls	r3, r3, #2
 80162d8:	4413      	add	r3, r2
 80162da:	009b      	lsls	r3, r3, #2
 80162dc:	440b      	add	r3, r1
 80162de:	3318      	adds	r3, #24
 80162e0:	681a      	ldr	r2, [r3, #0]
 80162e2:	78f9      	ldrb	r1, [r7, #3]
 80162e4:	68f8      	ldr	r0, [r7, #12]
 80162e6:	460b      	mov	r3, r1
 80162e8:	00db      	lsls	r3, r3, #3
 80162ea:	1a5b      	subs	r3, r3, r1
 80162ec:	009b      	lsls	r3, r3, #2
 80162ee:	4403      	add	r3, r0
 80162f0:	3344      	adds	r3, #68	; 0x44
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80162f8:	fb03 f301 	mul.w	r3, r3, r1
 80162fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d110      	bne.n	8016324 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8016302:	78fa      	ldrb	r2, [r7, #3]
 8016304:	6879      	ldr	r1, [r7, #4]
 8016306:	4613      	mov	r3, r2
 8016308:	009b      	lsls	r3, r3, #2
 801630a:	4413      	add	r3, r2
 801630c:	009b      	lsls	r3, r3, #2
 801630e:	440b      	add	r3, r1
 8016310:	3318      	adds	r3, #24
 8016312:	2200      	movs	r2, #0
 8016314:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8016316:	78f9      	ldrb	r1, [r7, #3]
 8016318:	2300      	movs	r3, #0
 801631a:	2200      	movs	r2, #0
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	f005 fa7a 	bl	801b816 <USBD_LL_Transmit>
 8016322:	e015      	b.n	8016350 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8016324:	68bb      	ldr	r3, [r7, #8]
 8016326:	2200      	movs	r2, #0
 8016328:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016332:	691b      	ldr	r3, [r3, #16]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d00b      	beq.n	8016350 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801633e:	691b      	ldr	r3, [r3, #16]
 8016340:	68ba      	ldr	r2, [r7, #8]
 8016342:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8016346:	68ba      	ldr	r2, [r7, #8]
 8016348:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801634c:	78fa      	ldrb	r2, [r7, #3]
 801634e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8016350:	2300      	movs	r3, #0
}
 8016352:	4618      	mov	r0, r3
 8016354:	3710      	adds	r7, #16
 8016356:	46bd      	mov	sp, r7
 8016358:	bd80      	pop	{r7, pc}

0801635a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801635a:	b580      	push	{r7, lr}
 801635c:	b084      	sub	sp, #16
 801635e:	af00      	add	r7, sp, #0
 8016360:	6078      	str	r0, [r7, #4]
 8016362:	460b      	mov	r3, r1
 8016364:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801636c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016374:	2b00      	cmp	r3, #0
 8016376:	d101      	bne.n	801637c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016378:	2303      	movs	r3, #3
 801637a:	e015      	b.n	80163a8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801637c:	78fb      	ldrb	r3, [r7, #3]
 801637e:	4619      	mov	r1, r3
 8016380:	6878      	ldr	r0, [r7, #4]
 8016382:	f005 fa8a 	bl	801b89a <USBD_LL_GetRxDataSize>
 8016386:	4602      	mov	r2, r0
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016394:	68db      	ldr	r3, [r3, #12]
 8016396:	68fa      	ldr	r2, [r7, #12]
 8016398:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801639c:	68fa      	ldr	r2, [r7, #12]
 801639e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80163a2:	4611      	mov	r1, r2
 80163a4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80163a6:	2300      	movs	r3, #0
}
 80163a8:	4618      	mov	r0, r3
 80163aa:	3710      	adds	r7, #16
 80163ac:	46bd      	mov	sp, r7
 80163ae:	bd80      	pop	{r7, pc}

080163b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b084      	sub	sp, #16
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80163be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d101      	bne.n	80163ca <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80163c6:	2303      	movs	r3, #3
 80163c8:	e01b      	b.n	8016402 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d015      	beq.n	8016400 <USBD_CDC_EP0_RxReady+0x50>
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80163da:	2bff      	cmp	r3, #255	; 0xff
 80163dc:	d010      	beq.n	8016400 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80163e4:	689b      	ldr	r3, [r3, #8]
 80163e6:	68fa      	ldr	r2, [r7, #12]
 80163e8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80163ec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80163ee:	68fa      	ldr	r2, [r7, #12]
 80163f0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80163f4:	b292      	uxth	r2, r2
 80163f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	22ff      	movs	r2, #255	; 0xff
 80163fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8016400:	2300      	movs	r3, #0
}
 8016402:	4618      	mov	r0, r3
 8016404:	3710      	adds	r7, #16
 8016406:	46bd      	mov	sp, r7
 8016408:	bd80      	pop	{r7, pc}
	...

0801640c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801640c:	b480      	push	{r7}
 801640e:	b083      	sub	sp, #12
 8016410:	af00      	add	r7, sp, #0
 8016412:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	2243      	movs	r2, #67	; 0x43
 8016418:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801641a:	4b03      	ldr	r3, [pc, #12]	; (8016428 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801641c:	4618      	mov	r0, r3
 801641e:	370c      	adds	r7, #12
 8016420:	46bd      	mov	sp, r7
 8016422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016426:	4770      	bx	lr
 8016428:	200000c4 	.word	0x200000c4

0801642c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801642c:	b480      	push	{r7}
 801642e:	b083      	sub	sp, #12
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	2243      	movs	r2, #67	; 0x43
 8016438:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801643a:	4b03      	ldr	r3, [pc, #12]	; (8016448 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801643c:	4618      	mov	r0, r3
 801643e:	370c      	adds	r7, #12
 8016440:	46bd      	mov	sp, r7
 8016442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016446:	4770      	bx	lr
 8016448:	20000080 	.word	0x20000080

0801644c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801644c:	b480      	push	{r7}
 801644e:	b083      	sub	sp, #12
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	2243      	movs	r2, #67	; 0x43
 8016458:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801645a:	4b03      	ldr	r3, [pc, #12]	; (8016468 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801645c:	4618      	mov	r0, r3
 801645e:	370c      	adds	r7, #12
 8016460:	46bd      	mov	sp, r7
 8016462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016466:	4770      	bx	lr
 8016468:	20000108 	.word	0x20000108

0801646c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801646c:	b480      	push	{r7}
 801646e:	b083      	sub	sp, #12
 8016470:	af00      	add	r7, sp, #0
 8016472:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	220a      	movs	r2, #10
 8016478:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801647a:	4b03      	ldr	r3, [pc, #12]	; (8016488 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801647c:	4618      	mov	r0, r3
 801647e:	370c      	adds	r7, #12
 8016480:	46bd      	mov	sp, r7
 8016482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016486:	4770      	bx	lr
 8016488:	2000003c 	.word	0x2000003c

0801648c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801648c:	b480      	push	{r7}
 801648e:	b083      	sub	sp, #12
 8016490:	af00      	add	r7, sp, #0
 8016492:	6078      	str	r0, [r7, #4]
 8016494:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8016496:	683b      	ldr	r3, [r7, #0]
 8016498:	2b00      	cmp	r3, #0
 801649a:	d101      	bne.n	80164a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801649c:	2303      	movs	r3, #3
 801649e:	e004      	b.n	80164aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	683a      	ldr	r2, [r7, #0]
 80164a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80164a8:	2300      	movs	r3, #0
}
 80164aa:	4618      	mov	r0, r3
 80164ac:	370c      	adds	r7, #12
 80164ae:	46bd      	mov	sp, r7
 80164b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b4:	4770      	bx	lr

080164b6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80164b6:	b480      	push	{r7}
 80164b8:	b087      	sub	sp, #28
 80164ba:	af00      	add	r7, sp, #0
 80164bc:	60f8      	str	r0, [r7, #12]
 80164be:	60b9      	str	r1, [r7, #8]
 80164c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80164c8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80164ca:	697b      	ldr	r3, [r7, #20]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d101      	bne.n	80164d4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80164d0:	2303      	movs	r3, #3
 80164d2:	e008      	b.n	80164e6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80164d4:	697b      	ldr	r3, [r7, #20]
 80164d6:	68ba      	ldr	r2, [r7, #8]
 80164d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80164dc:	697b      	ldr	r3, [r7, #20]
 80164de:	687a      	ldr	r2, [r7, #4]
 80164e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80164e4:	2300      	movs	r3, #0
}
 80164e6:	4618      	mov	r0, r3
 80164e8:	371c      	adds	r7, #28
 80164ea:	46bd      	mov	sp, r7
 80164ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f0:	4770      	bx	lr

080164f2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80164f2:	b480      	push	{r7}
 80164f4:	b085      	sub	sp, #20
 80164f6:	af00      	add	r7, sp, #0
 80164f8:	6078      	str	r0, [r7, #4]
 80164fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016502:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d101      	bne.n	801650e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801650a:	2303      	movs	r3, #3
 801650c:	e004      	b.n	8016518 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	683a      	ldr	r2, [r7, #0]
 8016512:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8016516:	2300      	movs	r3, #0
}
 8016518:	4618      	mov	r0, r3
 801651a:	3714      	adds	r7, #20
 801651c:	46bd      	mov	sp, r7
 801651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016522:	4770      	bx	lr

08016524 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8016524:	b580      	push	{r7, lr}
 8016526:	b084      	sub	sp, #16
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016532:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8016534:	2301      	movs	r3, #1
 8016536:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801653e:	2b00      	cmp	r3, #0
 8016540:	d101      	bne.n	8016546 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016542:	2303      	movs	r3, #3
 8016544:	e01a      	b.n	801657c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8016546:	68bb      	ldr	r3, [r7, #8]
 8016548:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801654c:	2b00      	cmp	r3, #0
 801654e:	d114      	bne.n	801657a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8016550:	68bb      	ldr	r3, [r7, #8]
 8016552:	2201      	movs	r2, #1
 8016554:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8016558:	68bb      	ldr	r3, [r7, #8]
 801655a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8016562:	68bb      	ldr	r3, [r7, #8]
 8016564:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8016568:	68bb      	ldr	r3, [r7, #8]
 801656a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801656e:	2181      	movs	r1, #129	; 0x81
 8016570:	6878      	ldr	r0, [r7, #4]
 8016572:	f005 f950 	bl	801b816 <USBD_LL_Transmit>

    ret = USBD_OK;
 8016576:	2300      	movs	r3, #0
 8016578:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801657a:	7bfb      	ldrb	r3, [r7, #15]
}
 801657c:	4618      	mov	r0, r3
 801657e:	3710      	adds	r7, #16
 8016580:	46bd      	mov	sp, r7
 8016582:	bd80      	pop	{r7, pc}

08016584 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016584:	b580      	push	{r7, lr}
 8016586:	b084      	sub	sp, #16
 8016588:	af00      	add	r7, sp, #0
 801658a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016592:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801659a:	2b00      	cmp	r3, #0
 801659c:	d101      	bne.n	80165a2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801659e:	2303      	movs	r3, #3
 80165a0:	e016      	b.n	80165d0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	7c1b      	ldrb	r3, [r3, #16]
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d109      	bne.n	80165be <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80165b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80165b4:	2101      	movs	r1, #1
 80165b6:	6878      	ldr	r0, [r7, #4]
 80165b8:	f005 f94e 	bl	801b858 <USBD_LL_PrepareReceive>
 80165bc:	e007      	b.n	80165ce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80165c4:	2340      	movs	r3, #64	; 0x40
 80165c6:	2101      	movs	r1, #1
 80165c8:	6878      	ldr	r0, [r7, #4]
 80165ca:	f005 f945 	bl	801b858 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80165ce:	2300      	movs	r3, #0
}
 80165d0:	4618      	mov	r0, r3
 80165d2:	3710      	adds	r7, #16
 80165d4:	46bd      	mov	sp, r7
 80165d6:	bd80      	pop	{r7, pc}

080165d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b086      	sub	sp, #24
 80165dc:	af00      	add	r7, sp, #0
 80165de:	60f8      	str	r0, [r7, #12]
 80165e0:	60b9      	str	r1, [r7, #8]
 80165e2:	4613      	mov	r3, r2
 80165e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d101      	bne.n	80165f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80165ec:	2303      	movs	r3, #3
 80165ee:	e01f      	b.n	8016630 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	2200      	movs	r2, #0
 80165f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	2200      	movs	r2, #0
 80165fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	2200      	movs	r2, #0
 8016604:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016608:	68bb      	ldr	r3, [r7, #8]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d003      	beq.n	8016616 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	68ba      	ldr	r2, [r7, #8]
 8016612:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	2201      	movs	r2, #1
 801661a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	79fa      	ldrb	r2, [r7, #7]
 8016622:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016624:	68f8      	ldr	r0, [r7, #12]
 8016626:	f004 ffc1 	bl	801b5ac <USBD_LL_Init>
 801662a:	4603      	mov	r3, r0
 801662c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801662e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016630:	4618      	mov	r0, r3
 8016632:	3718      	adds	r7, #24
 8016634:	46bd      	mov	sp, r7
 8016636:	bd80      	pop	{r7, pc}

08016638 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b084      	sub	sp, #16
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
 8016640:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016642:	2300      	movs	r3, #0
 8016644:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016646:	683b      	ldr	r3, [r7, #0]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d101      	bne.n	8016650 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801664c:	2303      	movs	r3, #3
 801664e:	e016      	b.n	801667e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	683a      	ldr	r2, [r7, #0]
 8016654:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016660:	2b00      	cmp	r3, #0
 8016662:	d00b      	beq.n	801667c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801666c:	f107 020e 	add.w	r2, r7, #14
 8016670:	4610      	mov	r0, r2
 8016672:	4798      	blx	r3
 8016674:	4602      	mov	r2, r0
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801667c:	2300      	movs	r3, #0
}
 801667e:	4618      	mov	r0, r3
 8016680:	3710      	adds	r7, #16
 8016682:	46bd      	mov	sp, r7
 8016684:	bd80      	pop	{r7, pc}

08016686 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016686:	b580      	push	{r7, lr}
 8016688:	b082      	sub	sp, #8
 801668a:	af00      	add	r7, sp, #0
 801668c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801668e:	6878      	ldr	r0, [r7, #4]
 8016690:	f004 ffd8 	bl	801b644 <USBD_LL_Start>
 8016694:	4603      	mov	r3, r0
}
 8016696:	4618      	mov	r0, r3
 8016698:	3708      	adds	r7, #8
 801669a:	46bd      	mov	sp, r7
 801669c:	bd80      	pop	{r7, pc}

0801669e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801669e:	b480      	push	{r7}
 80166a0:	b083      	sub	sp, #12
 80166a2:	af00      	add	r7, sp, #0
 80166a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80166a6:	2300      	movs	r3, #0
}
 80166a8:	4618      	mov	r0, r3
 80166aa:	370c      	adds	r7, #12
 80166ac:	46bd      	mov	sp, r7
 80166ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b2:	4770      	bx	lr

080166b4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	b084      	sub	sp, #16
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	6078      	str	r0, [r7, #4]
 80166bc:	460b      	mov	r3, r1
 80166be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80166c0:	2303      	movs	r3, #3
 80166c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d009      	beq.n	80166e2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	78fa      	ldrb	r2, [r7, #3]
 80166d8:	4611      	mov	r1, r2
 80166da:	6878      	ldr	r0, [r7, #4]
 80166dc:	4798      	blx	r3
 80166de:	4603      	mov	r3, r0
 80166e0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80166e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80166e4:	4618      	mov	r0, r3
 80166e6:	3710      	adds	r7, #16
 80166e8:	46bd      	mov	sp, r7
 80166ea:	bd80      	pop	{r7, pc}

080166ec <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b082      	sub	sp, #8
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
 80166f4:	460b      	mov	r3, r1
 80166f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d007      	beq.n	8016712 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016708:	685b      	ldr	r3, [r3, #4]
 801670a:	78fa      	ldrb	r2, [r7, #3]
 801670c:	4611      	mov	r1, r2
 801670e:	6878      	ldr	r0, [r7, #4]
 8016710:	4798      	blx	r3
  }

  return USBD_OK;
 8016712:	2300      	movs	r3, #0
}
 8016714:	4618      	mov	r0, r3
 8016716:	3708      	adds	r7, #8
 8016718:	46bd      	mov	sp, r7
 801671a:	bd80      	pop	{r7, pc}

0801671c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b084      	sub	sp, #16
 8016720:	af00      	add	r7, sp, #0
 8016722:	6078      	str	r0, [r7, #4]
 8016724:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801672c:	6839      	ldr	r1, [r7, #0]
 801672e:	4618      	mov	r0, r3
 8016730:	f000 ff90 	bl	8017654 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	2201      	movs	r2, #1
 8016738:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8016742:	461a      	mov	r2, r3
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016750:	f003 031f 	and.w	r3, r3, #31
 8016754:	2b02      	cmp	r3, #2
 8016756:	d01a      	beq.n	801678e <USBD_LL_SetupStage+0x72>
 8016758:	2b02      	cmp	r3, #2
 801675a:	d822      	bhi.n	80167a2 <USBD_LL_SetupStage+0x86>
 801675c:	2b00      	cmp	r3, #0
 801675e:	d002      	beq.n	8016766 <USBD_LL_SetupStage+0x4a>
 8016760:	2b01      	cmp	r3, #1
 8016762:	d00a      	beq.n	801677a <USBD_LL_SetupStage+0x5e>
 8016764:	e01d      	b.n	80167a2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801676c:	4619      	mov	r1, r3
 801676e:	6878      	ldr	r0, [r7, #4]
 8016770:	f000 fa62 	bl	8016c38 <USBD_StdDevReq>
 8016774:	4603      	mov	r3, r0
 8016776:	73fb      	strb	r3, [r7, #15]
      break;
 8016778:	e020      	b.n	80167bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016780:	4619      	mov	r1, r3
 8016782:	6878      	ldr	r0, [r7, #4]
 8016784:	f000 fac6 	bl	8016d14 <USBD_StdItfReq>
 8016788:	4603      	mov	r3, r0
 801678a:	73fb      	strb	r3, [r7, #15]
      break;
 801678c:	e016      	b.n	80167bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016794:	4619      	mov	r1, r3
 8016796:	6878      	ldr	r0, [r7, #4]
 8016798:	f000 fb05 	bl	8016da6 <USBD_StdEPReq>
 801679c:	4603      	mov	r3, r0
 801679e:	73fb      	strb	r3, [r7, #15]
      break;
 80167a0:	e00c      	b.n	80167bc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80167a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80167ac:	b2db      	uxtb	r3, r3
 80167ae:	4619      	mov	r1, r3
 80167b0:	6878      	ldr	r0, [r7, #4]
 80167b2:	f004 ffa7 	bl	801b704 <USBD_LL_StallEP>
 80167b6:	4603      	mov	r3, r0
 80167b8:	73fb      	strb	r3, [r7, #15]
      break;
 80167ba:	bf00      	nop
  }

  return ret;
 80167bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80167be:	4618      	mov	r0, r3
 80167c0:	3710      	adds	r7, #16
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}

080167c6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80167c6:	b580      	push	{r7, lr}
 80167c8:	b086      	sub	sp, #24
 80167ca:	af00      	add	r7, sp, #0
 80167cc:	60f8      	str	r0, [r7, #12]
 80167ce:	460b      	mov	r3, r1
 80167d0:	607a      	str	r2, [r7, #4]
 80167d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80167d4:	7afb      	ldrb	r3, [r7, #11]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d138      	bne.n	801684c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80167e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80167e8:	2b03      	cmp	r3, #3
 80167ea:	d14a      	bne.n	8016882 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80167ec:	693b      	ldr	r3, [r7, #16]
 80167ee:	689a      	ldr	r2, [r3, #8]
 80167f0:	693b      	ldr	r3, [r7, #16]
 80167f2:	68db      	ldr	r3, [r3, #12]
 80167f4:	429a      	cmp	r2, r3
 80167f6:	d913      	bls.n	8016820 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80167f8:	693b      	ldr	r3, [r7, #16]
 80167fa:	689a      	ldr	r2, [r3, #8]
 80167fc:	693b      	ldr	r3, [r7, #16]
 80167fe:	68db      	ldr	r3, [r3, #12]
 8016800:	1ad2      	subs	r2, r2, r3
 8016802:	693b      	ldr	r3, [r7, #16]
 8016804:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8016806:	693b      	ldr	r3, [r7, #16]
 8016808:	68da      	ldr	r2, [r3, #12]
 801680a:	693b      	ldr	r3, [r7, #16]
 801680c:	689b      	ldr	r3, [r3, #8]
 801680e:	4293      	cmp	r3, r2
 8016810:	bf28      	it	cs
 8016812:	4613      	movcs	r3, r2
 8016814:	461a      	mov	r2, r3
 8016816:	6879      	ldr	r1, [r7, #4]
 8016818:	68f8      	ldr	r0, [r7, #12]
 801681a:	f001 f80f 	bl	801783c <USBD_CtlContinueRx>
 801681e:	e030      	b.n	8016882 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016826:	b2db      	uxtb	r3, r3
 8016828:	2b03      	cmp	r3, #3
 801682a:	d10b      	bne.n	8016844 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016832:	691b      	ldr	r3, [r3, #16]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d005      	beq.n	8016844 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801683e:	691b      	ldr	r3, [r3, #16]
 8016840:	68f8      	ldr	r0, [r7, #12]
 8016842:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016844:	68f8      	ldr	r0, [r7, #12]
 8016846:	f001 f80a 	bl	801785e <USBD_CtlSendStatus>
 801684a:	e01a      	b.n	8016882 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016852:	b2db      	uxtb	r3, r3
 8016854:	2b03      	cmp	r3, #3
 8016856:	d114      	bne.n	8016882 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801685e:	699b      	ldr	r3, [r3, #24]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d00e      	beq.n	8016882 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801686a:	699b      	ldr	r3, [r3, #24]
 801686c:	7afa      	ldrb	r2, [r7, #11]
 801686e:	4611      	mov	r1, r2
 8016870:	68f8      	ldr	r0, [r7, #12]
 8016872:	4798      	blx	r3
 8016874:	4603      	mov	r3, r0
 8016876:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8016878:	7dfb      	ldrb	r3, [r7, #23]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d001      	beq.n	8016882 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801687e:	7dfb      	ldrb	r3, [r7, #23]
 8016880:	e000      	b.n	8016884 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8016882:	2300      	movs	r3, #0
}
 8016884:	4618      	mov	r0, r3
 8016886:	3718      	adds	r7, #24
 8016888:	46bd      	mov	sp, r7
 801688a:	bd80      	pop	{r7, pc}

0801688c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b086      	sub	sp, #24
 8016890:	af00      	add	r7, sp, #0
 8016892:	60f8      	str	r0, [r7, #12]
 8016894:	460b      	mov	r3, r1
 8016896:	607a      	str	r2, [r7, #4]
 8016898:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801689a:	7afb      	ldrb	r3, [r7, #11]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d16b      	bne.n	8016978 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	3314      	adds	r3, #20
 80168a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80168ac:	2b02      	cmp	r3, #2
 80168ae:	d156      	bne.n	801695e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80168b0:	693b      	ldr	r3, [r7, #16]
 80168b2:	689a      	ldr	r2, [r3, #8]
 80168b4:	693b      	ldr	r3, [r7, #16]
 80168b6:	68db      	ldr	r3, [r3, #12]
 80168b8:	429a      	cmp	r2, r3
 80168ba:	d914      	bls.n	80168e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80168bc:	693b      	ldr	r3, [r7, #16]
 80168be:	689a      	ldr	r2, [r3, #8]
 80168c0:	693b      	ldr	r3, [r7, #16]
 80168c2:	68db      	ldr	r3, [r3, #12]
 80168c4:	1ad2      	subs	r2, r2, r3
 80168c6:	693b      	ldr	r3, [r7, #16]
 80168c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80168ca:	693b      	ldr	r3, [r7, #16]
 80168cc:	689b      	ldr	r3, [r3, #8]
 80168ce:	461a      	mov	r2, r3
 80168d0:	6879      	ldr	r1, [r7, #4]
 80168d2:	68f8      	ldr	r0, [r7, #12]
 80168d4:	f000 ff84 	bl	80177e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80168d8:	2300      	movs	r3, #0
 80168da:	2200      	movs	r2, #0
 80168dc:	2100      	movs	r1, #0
 80168de:	68f8      	ldr	r0, [r7, #12]
 80168e0:	f004 ffba 	bl	801b858 <USBD_LL_PrepareReceive>
 80168e4:	e03b      	b.n	801695e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80168e6:	693b      	ldr	r3, [r7, #16]
 80168e8:	68da      	ldr	r2, [r3, #12]
 80168ea:	693b      	ldr	r3, [r7, #16]
 80168ec:	689b      	ldr	r3, [r3, #8]
 80168ee:	429a      	cmp	r2, r3
 80168f0:	d11c      	bne.n	801692c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80168f2:	693b      	ldr	r3, [r7, #16]
 80168f4:	685a      	ldr	r2, [r3, #4]
 80168f6:	693b      	ldr	r3, [r7, #16]
 80168f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80168fa:	429a      	cmp	r2, r3
 80168fc:	d316      	bcc.n	801692c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80168fe:	693b      	ldr	r3, [r7, #16]
 8016900:	685a      	ldr	r2, [r3, #4]
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016908:	429a      	cmp	r2, r3
 801690a:	d20f      	bcs.n	801692c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801690c:	2200      	movs	r2, #0
 801690e:	2100      	movs	r1, #0
 8016910:	68f8      	ldr	r0, [r7, #12]
 8016912:	f000 ff65 	bl	80177e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	2200      	movs	r2, #0
 801691a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801691e:	2300      	movs	r3, #0
 8016920:	2200      	movs	r2, #0
 8016922:	2100      	movs	r1, #0
 8016924:	68f8      	ldr	r0, [r7, #12]
 8016926:	f004 ff97 	bl	801b858 <USBD_LL_PrepareReceive>
 801692a:	e018      	b.n	801695e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016932:	b2db      	uxtb	r3, r3
 8016934:	2b03      	cmp	r3, #3
 8016936:	d10b      	bne.n	8016950 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801693e:	68db      	ldr	r3, [r3, #12]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d005      	beq.n	8016950 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801694a:	68db      	ldr	r3, [r3, #12]
 801694c:	68f8      	ldr	r0, [r7, #12]
 801694e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016950:	2180      	movs	r1, #128	; 0x80
 8016952:	68f8      	ldr	r0, [r7, #12]
 8016954:	f004 fed6 	bl	801b704 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016958:	68f8      	ldr	r0, [r7, #12]
 801695a:	f000 ff93 	bl	8017884 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8016964:	2b01      	cmp	r3, #1
 8016966:	d122      	bne.n	80169ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8016968:	68f8      	ldr	r0, [r7, #12]
 801696a:	f7ff fe98 	bl	801669e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	2200      	movs	r2, #0
 8016972:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8016976:	e01a      	b.n	80169ae <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801697e:	b2db      	uxtb	r3, r3
 8016980:	2b03      	cmp	r3, #3
 8016982:	d114      	bne.n	80169ae <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801698a:	695b      	ldr	r3, [r3, #20]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d00e      	beq.n	80169ae <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016996:	695b      	ldr	r3, [r3, #20]
 8016998:	7afa      	ldrb	r2, [r7, #11]
 801699a:	4611      	mov	r1, r2
 801699c:	68f8      	ldr	r0, [r7, #12]
 801699e:	4798      	blx	r3
 80169a0:	4603      	mov	r3, r0
 80169a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80169a4:	7dfb      	ldrb	r3, [r7, #23]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d001      	beq.n	80169ae <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80169aa:	7dfb      	ldrb	r3, [r7, #23]
 80169ac:	e000      	b.n	80169b0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80169ae:	2300      	movs	r3, #0
}
 80169b0:	4618      	mov	r0, r3
 80169b2:	3718      	adds	r7, #24
 80169b4:	46bd      	mov	sp, r7
 80169b6:	bd80      	pop	{r7, pc}

080169b8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80169b8:	b580      	push	{r7, lr}
 80169ba:	b082      	sub	sp, #8
 80169bc:	af00      	add	r7, sp, #0
 80169be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	2201      	movs	r2, #1
 80169c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	2200      	movs	r2, #0
 80169cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	2200      	movs	r2, #0
 80169d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	2200      	movs	r2, #0
 80169da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d101      	bne.n	80169ec <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80169e8:	2303      	movs	r3, #3
 80169ea:	e02f      	b.n	8016a4c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d00f      	beq.n	8016a16 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80169fc:	685b      	ldr	r3, [r3, #4]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d009      	beq.n	8016a16 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a08:	685b      	ldr	r3, [r3, #4]
 8016a0a:	687a      	ldr	r2, [r7, #4]
 8016a0c:	6852      	ldr	r2, [r2, #4]
 8016a0e:	b2d2      	uxtb	r2, r2
 8016a10:	4611      	mov	r1, r2
 8016a12:	6878      	ldr	r0, [r7, #4]
 8016a14:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016a16:	2340      	movs	r3, #64	; 0x40
 8016a18:	2200      	movs	r2, #0
 8016a1a:	2100      	movs	r1, #0
 8016a1c:	6878      	ldr	r0, [r7, #4]
 8016a1e:	f004 fe2c 	bl	801b67a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	2201      	movs	r2, #1
 8016a26:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	2240      	movs	r2, #64	; 0x40
 8016a2e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016a32:	2340      	movs	r3, #64	; 0x40
 8016a34:	2200      	movs	r2, #0
 8016a36:	2180      	movs	r1, #128	; 0x80
 8016a38:	6878      	ldr	r0, [r7, #4]
 8016a3a:	f004 fe1e 	bl	801b67a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	2201      	movs	r2, #1
 8016a42:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	2240      	movs	r2, #64	; 0x40
 8016a48:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8016a4a:	2300      	movs	r3, #0
}
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	3708      	adds	r7, #8
 8016a50:	46bd      	mov	sp, r7
 8016a52:	bd80      	pop	{r7, pc}

08016a54 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016a54:	b480      	push	{r7}
 8016a56:	b083      	sub	sp, #12
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	6078      	str	r0, [r7, #4]
 8016a5c:	460b      	mov	r3, r1
 8016a5e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	78fa      	ldrb	r2, [r7, #3]
 8016a64:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016a66:	2300      	movs	r3, #0
}
 8016a68:	4618      	mov	r0, r3
 8016a6a:	370c      	adds	r7, #12
 8016a6c:	46bd      	mov	sp, r7
 8016a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a72:	4770      	bx	lr

08016a74 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016a74:	b480      	push	{r7}
 8016a76:	b083      	sub	sp, #12
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a82:	b2da      	uxtb	r2, r3
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	2204      	movs	r2, #4
 8016a8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8016a92:	2300      	movs	r3, #0
}
 8016a94:	4618      	mov	r0, r3
 8016a96:	370c      	adds	r7, #12
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9e:	4770      	bx	lr

08016aa0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016aa0:	b480      	push	{r7}
 8016aa2:	b083      	sub	sp, #12
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016aae:	b2db      	uxtb	r3, r3
 8016ab0:	2b04      	cmp	r3, #4
 8016ab2:	d106      	bne.n	8016ac2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8016aba:	b2da      	uxtb	r2, r3
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8016ac2:	2300      	movs	r3, #0
}
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	370c      	adds	r7, #12
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ace:	4770      	bx	lr

08016ad0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016ad0:	b580      	push	{r7, lr}
 8016ad2:	b082      	sub	sp, #8
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d101      	bne.n	8016ae6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8016ae2:	2303      	movs	r3, #3
 8016ae4:	e012      	b.n	8016b0c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016aec:	b2db      	uxtb	r3, r3
 8016aee:	2b03      	cmp	r3, #3
 8016af0:	d10b      	bne.n	8016b0a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016af8:	69db      	ldr	r3, [r3, #28]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d005      	beq.n	8016b0a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b04:	69db      	ldr	r3, [r3, #28]
 8016b06:	6878      	ldr	r0, [r7, #4]
 8016b08:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016b0a:	2300      	movs	r3, #0
}
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	3708      	adds	r7, #8
 8016b10:	46bd      	mov	sp, r7
 8016b12:	bd80      	pop	{r7, pc}

08016b14 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b082      	sub	sp, #8
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	6078      	str	r0, [r7, #4]
 8016b1c:	460b      	mov	r3, r1
 8016b1e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d101      	bne.n	8016b2e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8016b2a:	2303      	movs	r3, #3
 8016b2c:	e014      	b.n	8016b58 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016b34:	b2db      	uxtb	r3, r3
 8016b36:	2b03      	cmp	r3, #3
 8016b38:	d10d      	bne.n	8016b56 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b40:	6a1b      	ldr	r3, [r3, #32]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d007      	beq.n	8016b56 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b4c:	6a1b      	ldr	r3, [r3, #32]
 8016b4e:	78fa      	ldrb	r2, [r7, #3]
 8016b50:	4611      	mov	r1, r2
 8016b52:	6878      	ldr	r0, [r7, #4]
 8016b54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016b56:	2300      	movs	r3, #0
}
 8016b58:	4618      	mov	r0, r3
 8016b5a:	3708      	adds	r7, #8
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	bd80      	pop	{r7, pc}

08016b60 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b082      	sub	sp, #8
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	6078      	str	r0, [r7, #4]
 8016b68:	460b      	mov	r3, r1
 8016b6a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d101      	bne.n	8016b7a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8016b76:	2303      	movs	r3, #3
 8016b78:	e014      	b.n	8016ba4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016b80:	b2db      	uxtb	r3, r3
 8016b82:	2b03      	cmp	r3, #3
 8016b84:	d10d      	bne.n	8016ba2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d007      	beq.n	8016ba2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b9a:	78fa      	ldrb	r2, [r7, #3]
 8016b9c:	4611      	mov	r1, r2
 8016b9e:	6878      	ldr	r0, [r7, #4]
 8016ba0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016ba2:	2300      	movs	r3, #0
}
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	3708      	adds	r7, #8
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd80      	pop	{r7, pc}

08016bac <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016bac:	b480      	push	{r7}
 8016bae:	b083      	sub	sp, #12
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016bb4:	2300      	movs	r3, #0
}
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	370c      	adds	r7, #12
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc0:	4770      	bx	lr

08016bc2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016bc2:	b580      	push	{r7, lr}
 8016bc4:	b082      	sub	sp, #8
 8016bc6:	af00      	add	r7, sp, #0
 8016bc8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	2201      	movs	r2, #1
 8016bce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d009      	beq.n	8016bf0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016be2:	685b      	ldr	r3, [r3, #4]
 8016be4:	687a      	ldr	r2, [r7, #4]
 8016be6:	6852      	ldr	r2, [r2, #4]
 8016be8:	b2d2      	uxtb	r2, r2
 8016bea:	4611      	mov	r1, r2
 8016bec:	6878      	ldr	r0, [r7, #4]
 8016bee:	4798      	blx	r3
  }

  return USBD_OK;
 8016bf0:	2300      	movs	r3, #0
}
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	3708      	adds	r7, #8
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	bd80      	pop	{r7, pc}

08016bfa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016bfa:	b480      	push	{r7}
 8016bfc:	b087      	sub	sp, #28
 8016bfe:	af00      	add	r7, sp, #0
 8016c00:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016c06:	697b      	ldr	r3, [r7, #20]
 8016c08:	781b      	ldrb	r3, [r3, #0]
 8016c0a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016c0c:	697b      	ldr	r3, [r7, #20]
 8016c0e:	3301      	adds	r3, #1
 8016c10:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016c12:	697b      	ldr	r3, [r7, #20]
 8016c14:	781b      	ldrb	r3, [r3, #0]
 8016c16:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016c18:	8a3b      	ldrh	r3, [r7, #16]
 8016c1a:	021b      	lsls	r3, r3, #8
 8016c1c:	b21a      	sxth	r2, r3
 8016c1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016c22:	4313      	orrs	r3, r2
 8016c24:	b21b      	sxth	r3, r3
 8016c26:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016c28:	89fb      	ldrh	r3, [r7, #14]
}
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	371c      	adds	r7, #28
 8016c2e:	46bd      	mov	sp, r7
 8016c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c34:	4770      	bx	lr
	...

08016c38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b084      	sub	sp, #16
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
 8016c40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016c42:	2300      	movs	r3, #0
 8016c44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016c46:	683b      	ldr	r3, [r7, #0]
 8016c48:	781b      	ldrb	r3, [r3, #0]
 8016c4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016c4e:	2b40      	cmp	r3, #64	; 0x40
 8016c50:	d005      	beq.n	8016c5e <USBD_StdDevReq+0x26>
 8016c52:	2b40      	cmp	r3, #64	; 0x40
 8016c54:	d853      	bhi.n	8016cfe <USBD_StdDevReq+0xc6>
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d00b      	beq.n	8016c72 <USBD_StdDevReq+0x3a>
 8016c5a:	2b20      	cmp	r3, #32
 8016c5c:	d14f      	bne.n	8016cfe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016c64:	689b      	ldr	r3, [r3, #8]
 8016c66:	6839      	ldr	r1, [r7, #0]
 8016c68:	6878      	ldr	r0, [r7, #4]
 8016c6a:	4798      	blx	r3
 8016c6c:	4603      	mov	r3, r0
 8016c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8016c70:	e04a      	b.n	8016d08 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016c72:	683b      	ldr	r3, [r7, #0]
 8016c74:	785b      	ldrb	r3, [r3, #1]
 8016c76:	2b09      	cmp	r3, #9
 8016c78:	d83b      	bhi.n	8016cf2 <USBD_StdDevReq+0xba>
 8016c7a:	a201      	add	r2, pc, #4	; (adr r2, 8016c80 <USBD_StdDevReq+0x48>)
 8016c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c80:	08016cd5 	.word	0x08016cd5
 8016c84:	08016ce9 	.word	0x08016ce9
 8016c88:	08016cf3 	.word	0x08016cf3
 8016c8c:	08016cdf 	.word	0x08016cdf
 8016c90:	08016cf3 	.word	0x08016cf3
 8016c94:	08016cb3 	.word	0x08016cb3
 8016c98:	08016ca9 	.word	0x08016ca9
 8016c9c:	08016cf3 	.word	0x08016cf3
 8016ca0:	08016ccb 	.word	0x08016ccb
 8016ca4:	08016cbd 	.word	0x08016cbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016ca8:	6839      	ldr	r1, [r7, #0]
 8016caa:	6878      	ldr	r0, [r7, #4]
 8016cac:	f000 f9de 	bl	801706c <USBD_GetDescriptor>
          break;
 8016cb0:	e024      	b.n	8016cfc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016cb2:	6839      	ldr	r1, [r7, #0]
 8016cb4:	6878      	ldr	r0, [r7, #4]
 8016cb6:	f000 fb43 	bl	8017340 <USBD_SetAddress>
          break;
 8016cba:	e01f      	b.n	8016cfc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016cbc:	6839      	ldr	r1, [r7, #0]
 8016cbe:	6878      	ldr	r0, [r7, #4]
 8016cc0:	f000 fb82 	bl	80173c8 <USBD_SetConfig>
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	73fb      	strb	r3, [r7, #15]
          break;
 8016cc8:	e018      	b.n	8016cfc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016cca:	6839      	ldr	r1, [r7, #0]
 8016ccc:	6878      	ldr	r0, [r7, #4]
 8016cce:	f000 fc21 	bl	8017514 <USBD_GetConfig>
          break;
 8016cd2:	e013      	b.n	8016cfc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016cd4:	6839      	ldr	r1, [r7, #0]
 8016cd6:	6878      	ldr	r0, [r7, #4]
 8016cd8:	f000 fc52 	bl	8017580 <USBD_GetStatus>
          break;
 8016cdc:	e00e      	b.n	8016cfc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016cde:	6839      	ldr	r1, [r7, #0]
 8016ce0:	6878      	ldr	r0, [r7, #4]
 8016ce2:	f000 fc81 	bl	80175e8 <USBD_SetFeature>
          break;
 8016ce6:	e009      	b.n	8016cfc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016ce8:	6839      	ldr	r1, [r7, #0]
 8016cea:	6878      	ldr	r0, [r7, #4]
 8016cec:	f000 fc90 	bl	8017610 <USBD_ClrFeature>
          break;
 8016cf0:	e004      	b.n	8016cfc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8016cf2:	6839      	ldr	r1, [r7, #0]
 8016cf4:	6878      	ldr	r0, [r7, #4]
 8016cf6:	f000 fce7 	bl	80176c8 <USBD_CtlError>
          break;
 8016cfa:	bf00      	nop
      }
      break;
 8016cfc:	e004      	b.n	8016d08 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8016cfe:	6839      	ldr	r1, [r7, #0]
 8016d00:	6878      	ldr	r0, [r7, #4]
 8016d02:	f000 fce1 	bl	80176c8 <USBD_CtlError>
      break;
 8016d06:	bf00      	nop
  }

  return ret;
 8016d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d0a:	4618      	mov	r0, r3
 8016d0c:	3710      	adds	r7, #16
 8016d0e:	46bd      	mov	sp, r7
 8016d10:	bd80      	pop	{r7, pc}
 8016d12:	bf00      	nop

08016d14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016d14:	b580      	push	{r7, lr}
 8016d16:	b084      	sub	sp, #16
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	6078      	str	r0, [r7, #4]
 8016d1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016d1e:	2300      	movs	r3, #0
 8016d20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016d22:	683b      	ldr	r3, [r7, #0]
 8016d24:	781b      	ldrb	r3, [r3, #0]
 8016d26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016d2a:	2b40      	cmp	r3, #64	; 0x40
 8016d2c:	d005      	beq.n	8016d3a <USBD_StdItfReq+0x26>
 8016d2e:	2b40      	cmp	r3, #64	; 0x40
 8016d30:	d82f      	bhi.n	8016d92 <USBD_StdItfReq+0x7e>
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d001      	beq.n	8016d3a <USBD_StdItfReq+0x26>
 8016d36:	2b20      	cmp	r3, #32
 8016d38:	d12b      	bne.n	8016d92 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016d40:	b2db      	uxtb	r3, r3
 8016d42:	3b01      	subs	r3, #1
 8016d44:	2b02      	cmp	r3, #2
 8016d46:	d81d      	bhi.n	8016d84 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016d48:	683b      	ldr	r3, [r7, #0]
 8016d4a:	889b      	ldrh	r3, [r3, #4]
 8016d4c:	b2db      	uxtb	r3, r3
 8016d4e:	2b01      	cmp	r3, #1
 8016d50:	d813      	bhi.n	8016d7a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d58:	689b      	ldr	r3, [r3, #8]
 8016d5a:	6839      	ldr	r1, [r7, #0]
 8016d5c:	6878      	ldr	r0, [r7, #4]
 8016d5e:	4798      	blx	r3
 8016d60:	4603      	mov	r3, r0
 8016d62:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016d64:	683b      	ldr	r3, [r7, #0]
 8016d66:	88db      	ldrh	r3, [r3, #6]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d110      	bne.n	8016d8e <USBD_StdItfReq+0x7a>
 8016d6c:	7bfb      	ldrb	r3, [r7, #15]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d10d      	bne.n	8016d8e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016d72:	6878      	ldr	r0, [r7, #4]
 8016d74:	f000 fd73 	bl	801785e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016d78:	e009      	b.n	8016d8e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8016d7a:	6839      	ldr	r1, [r7, #0]
 8016d7c:	6878      	ldr	r0, [r7, #4]
 8016d7e:	f000 fca3 	bl	80176c8 <USBD_CtlError>
          break;
 8016d82:	e004      	b.n	8016d8e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8016d84:	6839      	ldr	r1, [r7, #0]
 8016d86:	6878      	ldr	r0, [r7, #4]
 8016d88:	f000 fc9e 	bl	80176c8 <USBD_CtlError>
          break;
 8016d8c:	e000      	b.n	8016d90 <USBD_StdItfReq+0x7c>
          break;
 8016d8e:	bf00      	nop
      }
      break;
 8016d90:	e004      	b.n	8016d9c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8016d92:	6839      	ldr	r1, [r7, #0]
 8016d94:	6878      	ldr	r0, [r7, #4]
 8016d96:	f000 fc97 	bl	80176c8 <USBD_CtlError>
      break;
 8016d9a:	bf00      	nop
  }

  return ret;
 8016d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d9e:	4618      	mov	r0, r3
 8016da0:	3710      	adds	r7, #16
 8016da2:	46bd      	mov	sp, r7
 8016da4:	bd80      	pop	{r7, pc}

08016da6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016da6:	b580      	push	{r7, lr}
 8016da8:	b084      	sub	sp, #16
 8016daa:	af00      	add	r7, sp, #0
 8016dac:	6078      	str	r0, [r7, #4]
 8016dae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8016db0:	2300      	movs	r3, #0
 8016db2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8016db4:	683b      	ldr	r3, [r7, #0]
 8016db6:	889b      	ldrh	r3, [r3, #4]
 8016db8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016dba:	683b      	ldr	r3, [r7, #0]
 8016dbc:	781b      	ldrb	r3, [r3, #0]
 8016dbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016dc2:	2b40      	cmp	r3, #64	; 0x40
 8016dc4:	d007      	beq.n	8016dd6 <USBD_StdEPReq+0x30>
 8016dc6:	2b40      	cmp	r3, #64	; 0x40
 8016dc8:	f200 8145 	bhi.w	8017056 <USBD_StdEPReq+0x2b0>
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d00c      	beq.n	8016dea <USBD_StdEPReq+0x44>
 8016dd0:	2b20      	cmp	r3, #32
 8016dd2:	f040 8140 	bne.w	8017056 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ddc:	689b      	ldr	r3, [r3, #8]
 8016dde:	6839      	ldr	r1, [r7, #0]
 8016de0:	6878      	ldr	r0, [r7, #4]
 8016de2:	4798      	blx	r3
 8016de4:	4603      	mov	r3, r0
 8016de6:	73fb      	strb	r3, [r7, #15]
      break;
 8016de8:	e13a      	b.n	8017060 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016dea:	683b      	ldr	r3, [r7, #0]
 8016dec:	785b      	ldrb	r3, [r3, #1]
 8016dee:	2b03      	cmp	r3, #3
 8016df0:	d007      	beq.n	8016e02 <USBD_StdEPReq+0x5c>
 8016df2:	2b03      	cmp	r3, #3
 8016df4:	f300 8129 	bgt.w	801704a <USBD_StdEPReq+0x2a4>
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d07f      	beq.n	8016efc <USBD_StdEPReq+0x156>
 8016dfc:	2b01      	cmp	r3, #1
 8016dfe:	d03c      	beq.n	8016e7a <USBD_StdEPReq+0xd4>
 8016e00:	e123      	b.n	801704a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016e08:	b2db      	uxtb	r3, r3
 8016e0a:	2b02      	cmp	r3, #2
 8016e0c:	d002      	beq.n	8016e14 <USBD_StdEPReq+0x6e>
 8016e0e:	2b03      	cmp	r3, #3
 8016e10:	d016      	beq.n	8016e40 <USBD_StdEPReq+0x9a>
 8016e12:	e02c      	b.n	8016e6e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016e14:	7bbb      	ldrb	r3, [r7, #14]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d00d      	beq.n	8016e36 <USBD_StdEPReq+0x90>
 8016e1a:	7bbb      	ldrb	r3, [r7, #14]
 8016e1c:	2b80      	cmp	r3, #128	; 0x80
 8016e1e:	d00a      	beq.n	8016e36 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016e20:	7bbb      	ldrb	r3, [r7, #14]
 8016e22:	4619      	mov	r1, r3
 8016e24:	6878      	ldr	r0, [r7, #4]
 8016e26:	f004 fc6d 	bl	801b704 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016e2a:	2180      	movs	r1, #128	; 0x80
 8016e2c:	6878      	ldr	r0, [r7, #4]
 8016e2e:	f004 fc69 	bl	801b704 <USBD_LL_StallEP>
 8016e32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016e34:	e020      	b.n	8016e78 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8016e36:	6839      	ldr	r1, [r7, #0]
 8016e38:	6878      	ldr	r0, [r7, #4]
 8016e3a:	f000 fc45 	bl	80176c8 <USBD_CtlError>
              break;
 8016e3e:	e01b      	b.n	8016e78 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016e40:	683b      	ldr	r3, [r7, #0]
 8016e42:	885b      	ldrh	r3, [r3, #2]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d10e      	bne.n	8016e66 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016e48:	7bbb      	ldrb	r3, [r7, #14]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d00b      	beq.n	8016e66 <USBD_StdEPReq+0xc0>
 8016e4e:	7bbb      	ldrb	r3, [r7, #14]
 8016e50:	2b80      	cmp	r3, #128	; 0x80
 8016e52:	d008      	beq.n	8016e66 <USBD_StdEPReq+0xc0>
 8016e54:	683b      	ldr	r3, [r7, #0]
 8016e56:	88db      	ldrh	r3, [r3, #6]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d104      	bne.n	8016e66 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016e5c:	7bbb      	ldrb	r3, [r7, #14]
 8016e5e:	4619      	mov	r1, r3
 8016e60:	6878      	ldr	r0, [r7, #4]
 8016e62:	f004 fc4f 	bl	801b704 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016e66:	6878      	ldr	r0, [r7, #4]
 8016e68:	f000 fcf9 	bl	801785e <USBD_CtlSendStatus>

              break;
 8016e6c:	e004      	b.n	8016e78 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8016e6e:	6839      	ldr	r1, [r7, #0]
 8016e70:	6878      	ldr	r0, [r7, #4]
 8016e72:	f000 fc29 	bl	80176c8 <USBD_CtlError>
              break;
 8016e76:	bf00      	nop
          }
          break;
 8016e78:	e0ec      	b.n	8017054 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016e80:	b2db      	uxtb	r3, r3
 8016e82:	2b02      	cmp	r3, #2
 8016e84:	d002      	beq.n	8016e8c <USBD_StdEPReq+0xe6>
 8016e86:	2b03      	cmp	r3, #3
 8016e88:	d016      	beq.n	8016eb8 <USBD_StdEPReq+0x112>
 8016e8a:	e030      	b.n	8016eee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016e8c:	7bbb      	ldrb	r3, [r7, #14]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d00d      	beq.n	8016eae <USBD_StdEPReq+0x108>
 8016e92:	7bbb      	ldrb	r3, [r7, #14]
 8016e94:	2b80      	cmp	r3, #128	; 0x80
 8016e96:	d00a      	beq.n	8016eae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016e98:	7bbb      	ldrb	r3, [r7, #14]
 8016e9a:	4619      	mov	r1, r3
 8016e9c:	6878      	ldr	r0, [r7, #4]
 8016e9e:	f004 fc31 	bl	801b704 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016ea2:	2180      	movs	r1, #128	; 0x80
 8016ea4:	6878      	ldr	r0, [r7, #4]
 8016ea6:	f004 fc2d 	bl	801b704 <USBD_LL_StallEP>
 8016eaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016eac:	e025      	b.n	8016efa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8016eae:	6839      	ldr	r1, [r7, #0]
 8016eb0:	6878      	ldr	r0, [r7, #4]
 8016eb2:	f000 fc09 	bl	80176c8 <USBD_CtlError>
              break;
 8016eb6:	e020      	b.n	8016efa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016eb8:	683b      	ldr	r3, [r7, #0]
 8016eba:	885b      	ldrh	r3, [r3, #2]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d11b      	bne.n	8016ef8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016ec0:	7bbb      	ldrb	r3, [r7, #14]
 8016ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d004      	beq.n	8016ed4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016eca:	7bbb      	ldrb	r3, [r7, #14]
 8016ecc:	4619      	mov	r1, r3
 8016ece:	6878      	ldr	r0, [r7, #4]
 8016ed0:	f004 fc37 	bl	801b742 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016ed4:	6878      	ldr	r0, [r7, #4]
 8016ed6:	f000 fcc2 	bl	801785e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ee0:	689b      	ldr	r3, [r3, #8]
 8016ee2:	6839      	ldr	r1, [r7, #0]
 8016ee4:	6878      	ldr	r0, [r7, #4]
 8016ee6:	4798      	blx	r3
 8016ee8:	4603      	mov	r3, r0
 8016eea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8016eec:	e004      	b.n	8016ef8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8016eee:	6839      	ldr	r1, [r7, #0]
 8016ef0:	6878      	ldr	r0, [r7, #4]
 8016ef2:	f000 fbe9 	bl	80176c8 <USBD_CtlError>
              break;
 8016ef6:	e000      	b.n	8016efa <USBD_StdEPReq+0x154>
              break;
 8016ef8:	bf00      	nop
          }
          break;
 8016efa:	e0ab      	b.n	8017054 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016f02:	b2db      	uxtb	r3, r3
 8016f04:	2b02      	cmp	r3, #2
 8016f06:	d002      	beq.n	8016f0e <USBD_StdEPReq+0x168>
 8016f08:	2b03      	cmp	r3, #3
 8016f0a:	d032      	beq.n	8016f72 <USBD_StdEPReq+0x1cc>
 8016f0c:	e097      	b.n	801703e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016f0e:	7bbb      	ldrb	r3, [r7, #14]
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d007      	beq.n	8016f24 <USBD_StdEPReq+0x17e>
 8016f14:	7bbb      	ldrb	r3, [r7, #14]
 8016f16:	2b80      	cmp	r3, #128	; 0x80
 8016f18:	d004      	beq.n	8016f24 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8016f1a:	6839      	ldr	r1, [r7, #0]
 8016f1c:	6878      	ldr	r0, [r7, #4]
 8016f1e:	f000 fbd3 	bl	80176c8 <USBD_CtlError>
                break;
 8016f22:	e091      	b.n	8017048 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016f24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	da0b      	bge.n	8016f44 <USBD_StdEPReq+0x19e>
 8016f2c:	7bbb      	ldrb	r3, [r7, #14]
 8016f2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016f32:	4613      	mov	r3, r2
 8016f34:	009b      	lsls	r3, r3, #2
 8016f36:	4413      	add	r3, r2
 8016f38:	009b      	lsls	r3, r3, #2
 8016f3a:	3310      	adds	r3, #16
 8016f3c:	687a      	ldr	r2, [r7, #4]
 8016f3e:	4413      	add	r3, r2
 8016f40:	3304      	adds	r3, #4
 8016f42:	e00b      	b.n	8016f5c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016f44:	7bbb      	ldrb	r3, [r7, #14]
 8016f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016f4a:	4613      	mov	r3, r2
 8016f4c:	009b      	lsls	r3, r3, #2
 8016f4e:	4413      	add	r3, r2
 8016f50:	009b      	lsls	r3, r3, #2
 8016f52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016f56:	687a      	ldr	r2, [r7, #4]
 8016f58:	4413      	add	r3, r2
 8016f5a:	3304      	adds	r3, #4
 8016f5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016f5e:	68bb      	ldr	r3, [r7, #8]
 8016f60:	2200      	movs	r2, #0
 8016f62:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016f64:	68bb      	ldr	r3, [r7, #8]
 8016f66:	2202      	movs	r2, #2
 8016f68:	4619      	mov	r1, r3
 8016f6a:	6878      	ldr	r0, [r7, #4]
 8016f6c:	f000 fc1d 	bl	80177aa <USBD_CtlSendData>
              break;
 8016f70:	e06a      	b.n	8017048 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016f72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	da11      	bge.n	8016f9e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016f7a:	7bbb      	ldrb	r3, [r7, #14]
 8016f7c:	f003 020f 	and.w	r2, r3, #15
 8016f80:	6879      	ldr	r1, [r7, #4]
 8016f82:	4613      	mov	r3, r2
 8016f84:	009b      	lsls	r3, r3, #2
 8016f86:	4413      	add	r3, r2
 8016f88:	009b      	lsls	r3, r3, #2
 8016f8a:	440b      	add	r3, r1
 8016f8c:	3324      	adds	r3, #36	; 0x24
 8016f8e:	881b      	ldrh	r3, [r3, #0]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d117      	bne.n	8016fc4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8016f94:	6839      	ldr	r1, [r7, #0]
 8016f96:	6878      	ldr	r0, [r7, #4]
 8016f98:	f000 fb96 	bl	80176c8 <USBD_CtlError>
                  break;
 8016f9c:	e054      	b.n	8017048 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016f9e:	7bbb      	ldrb	r3, [r7, #14]
 8016fa0:	f003 020f 	and.w	r2, r3, #15
 8016fa4:	6879      	ldr	r1, [r7, #4]
 8016fa6:	4613      	mov	r3, r2
 8016fa8:	009b      	lsls	r3, r3, #2
 8016faa:	4413      	add	r3, r2
 8016fac:	009b      	lsls	r3, r3, #2
 8016fae:	440b      	add	r3, r1
 8016fb0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016fb4:	881b      	ldrh	r3, [r3, #0]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d104      	bne.n	8016fc4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8016fba:	6839      	ldr	r1, [r7, #0]
 8016fbc:	6878      	ldr	r0, [r7, #4]
 8016fbe:	f000 fb83 	bl	80176c8 <USBD_CtlError>
                  break;
 8016fc2:	e041      	b.n	8017048 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016fc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	da0b      	bge.n	8016fe4 <USBD_StdEPReq+0x23e>
 8016fcc:	7bbb      	ldrb	r3, [r7, #14]
 8016fce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016fd2:	4613      	mov	r3, r2
 8016fd4:	009b      	lsls	r3, r3, #2
 8016fd6:	4413      	add	r3, r2
 8016fd8:	009b      	lsls	r3, r3, #2
 8016fda:	3310      	adds	r3, #16
 8016fdc:	687a      	ldr	r2, [r7, #4]
 8016fde:	4413      	add	r3, r2
 8016fe0:	3304      	adds	r3, #4
 8016fe2:	e00b      	b.n	8016ffc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016fe4:	7bbb      	ldrb	r3, [r7, #14]
 8016fe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016fea:	4613      	mov	r3, r2
 8016fec:	009b      	lsls	r3, r3, #2
 8016fee:	4413      	add	r3, r2
 8016ff0:	009b      	lsls	r3, r3, #2
 8016ff2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016ff6:	687a      	ldr	r2, [r7, #4]
 8016ff8:	4413      	add	r3, r2
 8016ffa:	3304      	adds	r3, #4
 8016ffc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016ffe:	7bbb      	ldrb	r3, [r7, #14]
 8017000:	2b00      	cmp	r3, #0
 8017002:	d002      	beq.n	801700a <USBD_StdEPReq+0x264>
 8017004:	7bbb      	ldrb	r3, [r7, #14]
 8017006:	2b80      	cmp	r3, #128	; 0x80
 8017008:	d103      	bne.n	8017012 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801700a:	68bb      	ldr	r3, [r7, #8]
 801700c:	2200      	movs	r2, #0
 801700e:	601a      	str	r2, [r3, #0]
 8017010:	e00e      	b.n	8017030 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8017012:	7bbb      	ldrb	r3, [r7, #14]
 8017014:	4619      	mov	r1, r3
 8017016:	6878      	ldr	r0, [r7, #4]
 8017018:	f004 fbb2 	bl	801b780 <USBD_LL_IsStallEP>
 801701c:	4603      	mov	r3, r0
 801701e:	2b00      	cmp	r3, #0
 8017020:	d003      	beq.n	801702a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8017022:	68bb      	ldr	r3, [r7, #8]
 8017024:	2201      	movs	r2, #1
 8017026:	601a      	str	r2, [r3, #0]
 8017028:	e002      	b.n	8017030 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801702a:	68bb      	ldr	r3, [r7, #8]
 801702c:	2200      	movs	r2, #0
 801702e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017030:	68bb      	ldr	r3, [r7, #8]
 8017032:	2202      	movs	r2, #2
 8017034:	4619      	mov	r1, r3
 8017036:	6878      	ldr	r0, [r7, #4]
 8017038:	f000 fbb7 	bl	80177aa <USBD_CtlSendData>
              break;
 801703c:	e004      	b.n	8017048 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801703e:	6839      	ldr	r1, [r7, #0]
 8017040:	6878      	ldr	r0, [r7, #4]
 8017042:	f000 fb41 	bl	80176c8 <USBD_CtlError>
              break;
 8017046:	bf00      	nop
          }
          break;
 8017048:	e004      	b.n	8017054 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801704a:	6839      	ldr	r1, [r7, #0]
 801704c:	6878      	ldr	r0, [r7, #4]
 801704e:	f000 fb3b 	bl	80176c8 <USBD_CtlError>
          break;
 8017052:	bf00      	nop
      }
      break;
 8017054:	e004      	b.n	8017060 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8017056:	6839      	ldr	r1, [r7, #0]
 8017058:	6878      	ldr	r0, [r7, #4]
 801705a:	f000 fb35 	bl	80176c8 <USBD_CtlError>
      break;
 801705e:	bf00      	nop
  }

  return ret;
 8017060:	7bfb      	ldrb	r3, [r7, #15]
}
 8017062:	4618      	mov	r0, r3
 8017064:	3710      	adds	r7, #16
 8017066:	46bd      	mov	sp, r7
 8017068:	bd80      	pop	{r7, pc}
	...

0801706c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801706c:	b580      	push	{r7, lr}
 801706e:	b084      	sub	sp, #16
 8017070:	af00      	add	r7, sp, #0
 8017072:	6078      	str	r0, [r7, #4]
 8017074:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017076:	2300      	movs	r3, #0
 8017078:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801707a:	2300      	movs	r3, #0
 801707c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801707e:	2300      	movs	r3, #0
 8017080:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8017082:	683b      	ldr	r3, [r7, #0]
 8017084:	885b      	ldrh	r3, [r3, #2]
 8017086:	0a1b      	lsrs	r3, r3, #8
 8017088:	b29b      	uxth	r3, r3
 801708a:	3b01      	subs	r3, #1
 801708c:	2b06      	cmp	r3, #6
 801708e:	f200 8128 	bhi.w	80172e2 <USBD_GetDescriptor+0x276>
 8017092:	a201      	add	r2, pc, #4	; (adr r2, 8017098 <USBD_GetDescriptor+0x2c>)
 8017094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017098:	080170b5 	.word	0x080170b5
 801709c:	080170cd 	.word	0x080170cd
 80170a0:	0801710d 	.word	0x0801710d
 80170a4:	080172e3 	.word	0x080172e3
 80170a8:	080172e3 	.word	0x080172e3
 80170ac:	08017283 	.word	0x08017283
 80170b0:	080172af 	.word	0x080172af
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	687a      	ldr	r2, [r7, #4]
 80170be:	7c12      	ldrb	r2, [r2, #16]
 80170c0:	f107 0108 	add.w	r1, r7, #8
 80170c4:	4610      	mov	r0, r2
 80170c6:	4798      	blx	r3
 80170c8:	60f8      	str	r0, [r7, #12]
      break;
 80170ca:	e112      	b.n	80172f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	7c1b      	ldrb	r3, [r3, #16]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d10d      	bne.n	80170f0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80170dc:	f107 0208 	add.w	r2, r7, #8
 80170e0:	4610      	mov	r0, r2
 80170e2:	4798      	blx	r3
 80170e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	3301      	adds	r3, #1
 80170ea:	2202      	movs	r2, #2
 80170ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80170ee:	e100      	b.n	80172f2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170f8:	f107 0208 	add.w	r2, r7, #8
 80170fc:	4610      	mov	r0, r2
 80170fe:	4798      	blx	r3
 8017100:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	3301      	adds	r3, #1
 8017106:	2202      	movs	r2, #2
 8017108:	701a      	strb	r2, [r3, #0]
      break;
 801710a:	e0f2      	b.n	80172f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801710c:	683b      	ldr	r3, [r7, #0]
 801710e:	885b      	ldrh	r3, [r3, #2]
 8017110:	b2db      	uxtb	r3, r3
 8017112:	2b05      	cmp	r3, #5
 8017114:	f200 80ac 	bhi.w	8017270 <USBD_GetDescriptor+0x204>
 8017118:	a201      	add	r2, pc, #4	; (adr r2, 8017120 <USBD_GetDescriptor+0xb4>)
 801711a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801711e:	bf00      	nop
 8017120:	08017139 	.word	0x08017139
 8017124:	0801716d 	.word	0x0801716d
 8017128:	080171a1 	.word	0x080171a1
 801712c:	080171d5 	.word	0x080171d5
 8017130:	08017209 	.word	0x08017209
 8017134:	0801723d 	.word	0x0801723d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801713e:	685b      	ldr	r3, [r3, #4]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d00b      	beq.n	801715c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801714a:	685b      	ldr	r3, [r3, #4]
 801714c:	687a      	ldr	r2, [r7, #4]
 801714e:	7c12      	ldrb	r2, [r2, #16]
 8017150:	f107 0108 	add.w	r1, r7, #8
 8017154:	4610      	mov	r0, r2
 8017156:	4798      	blx	r3
 8017158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801715a:	e091      	b.n	8017280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801715c:	6839      	ldr	r1, [r7, #0]
 801715e:	6878      	ldr	r0, [r7, #4]
 8017160:	f000 fab2 	bl	80176c8 <USBD_CtlError>
            err++;
 8017164:	7afb      	ldrb	r3, [r7, #11]
 8017166:	3301      	adds	r3, #1
 8017168:	72fb      	strb	r3, [r7, #11]
          break;
 801716a:	e089      	b.n	8017280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017172:	689b      	ldr	r3, [r3, #8]
 8017174:	2b00      	cmp	r3, #0
 8017176:	d00b      	beq.n	8017190 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801717e:	689b      	ldr	r3, [r3, #8]
 8017180:	687a      	ldr	r2, [r7, #4]
 8017182:	7c12      	ldrb	r2, [r2, #16]
 8017184:	f107 0108 	add.w	r1, r7, #8
 8017188:	4610      	mov	r0, r2
 801718a:	4798      	blx	r3
 801718c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801718e:	e077      	b.n	8017280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017190:	6839      	ldr	r1, [r7, #0]
 8017192:	6878      	ldr	r0, [r7, #4]
 8017194:	f000 fa98 	bl	80176c8 <USBD_CtlError>
            err++;
 8017198:	7afb      	ldrb	r3, [r7, #11]
 801719a:	3301      	adds	r3, #1
 801719c:	72fb      	strb	r3, [r7, #11]
          break;
 801719e:	e06f      	b.n	8017280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80171a6:	68db      	ldr	r3, [r3, #12]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d00b      	beq.n	80171c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80171b2:	68db      	ldr	r3, [r3, #12]
 80171b4:	687a      	ldr	r2, [r7, #4]
 80171b6:	7c12      	ldrb	r2, [r2, #16]
 80171b8:	f107 0108 	add.w	r1, r7, #8
 80171bc:	4610      	mov	r0, r2
 80171be:	4798      	blx	r3
 80171c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80171c2:	e05d      	b.n	8017280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80171c4:	6839      	ldr	r1, [r7, #0]
 80171c6:	6878      	ldr	r0, [r7, #4]
 80171c8:	f000 fa7e 	bl	80176c8 <USBD_CtlError>
            err++;
 80171cc:	7afb      	ldrb	r3, [r7, #11]
 80171ce:	3301      	adds	r3, #1
 80171d0:	72fb      	strb	r3, [r7, #11]
          break;
 80171d2:	e055      	b.n	8017280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80171da:	691b      	ldr	r3, [r3, #16]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d00b      	beq.n	80171f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80171e6:	691b      	ldr	r3, [r3, #16]
 80171e8:	687a      	ldr	r2, [r7, #4]
 80171ea:	7c12      	ldrb	r2, [r2, #16]
 80171ec:	f107 0108 	add.w	r1, r7, #8
 80171f0:	4610      	mov	r0, r2
 80171f2:	4798      	blx	r3
 80171f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80171f6:	e043      	b.n	8017280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80171f8:	6839      	ldr	r1, [r7, #0]
 80171fa:	6878      	ldr	r0, [r7, #4]
 80171fc:	f000 fa64 	bl	80176c8 <USBD_CtlError>
            err++;
 8017200:	7afb      	ldrb	r3, [r7, #11]
 8017202:	3301      	adds	r3, #1
 8017204:	72fb      	strb	r3, [r7, #11]
          break;
 8017206:	e03b      	b.n	8017280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801720e:	695b      	ldr	r3, [r3, #20]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d00b      	beq.n	801722c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801721a:	695b      	ldr	r3, [r3, #20]
 801721c:	687a      	ldr	r2, [r7, #4]
 801721e:	7c12      	ldrb	r2, [r2, #16]
 8017220:	f107 0108 	add.w	r1, r7, #8
 8017224:	4610      	mov	r0, r2
 8017226:	4798      	blx	r3
 8017228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801722a:	e029      	b.n	8017280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801722c:	6839      	ldr	r1, [r7, #0]
 801722e:	6878      	ldr	r0, [r7, #4]
 8017230:	f000 fa4a 	bl	80176c8 <USBD_CtlError>
            err++;
 8017234:	7afb      	ldrb	r3, [r7, #11]
 8017236:	3301      	adds	r3, #1
 8017238:	72fb      	strb	r3, [r7, #11]
          break;
 801723a:	e021      	b.n	8017280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017242:	699b      	ldr	r3, [r3, #24]
 8017244:	2b00      	cmp	r3, #0
 8017246:	d00b      	beq.n	8017260 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801724e:	699b      	ldr	r3, [r3, #24]
 8017250:	687a      	ldr	r2, [r7, #4]
 8017252:	7c12      	ldrb	r2, [r2, #16]
 8017254:	f107 0108 	add.w	r1, r7, #8
 8017258:	4610      	mov	r0, r2
 801725a:	4798      	blx	r3
 801725c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801725e:	e00f      	b.n	8017280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017260:	6839      	ldr	r1, [r7, #0]
 8017262:	6878      	ldr	r0, [r7, #4]
 8017264:	f000 fa30 	bl	80176c8 <USBD_CtlError>
            err++;
 8017268:	7afb      	ldrb	r3, [r7, #11]
 801726a:	3301      	adds	r3, #1
 801726c:	72fb      	strb	r3, [r7, #11]
          break;
 801726e:	e007      	b.n	8017280 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017270:	6839      	ldr	r1, [r7, #0]
 8017272:	6878      	ldr	r0, [r7, #4]
 8017274:	f000 fa28 	bl	80176c8 <USBD_CtlError>
          err++;
 8017278:	7afb      	ldrb	r3, [r7, #11]
 801727a:	3301      	adds	r3, #1
 801727c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801727e:	bf00      	nop
      }
      break;
 8017280:	e037      	b.n	80172f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	7c1b      	ldrb	r3, [r3, #16]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d109      	bne.n	801729e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017292:	f107 0208 	add.w	r2, r7, #8
 8017296:	4610      	mov	r0, r2
 8017298:	4798      	blx	r3
 801729a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801729c:	e029      	b.n	80172f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801729e:	6839      	ldr	r1, [r7, #0]
 80172a0:	6878      	ldr	r0, [r7, #4]
 80172a2:	f000 fa11 	bl	80176c8 <USBD_CtlError>
        err++;
 80172a6:	7afb      	ldrb	r3, [r7, #11]
 80172a8:	3301      	adds	r3, #1
 80172aa:	72fb      	strb	r3, [r7, #11]
      break;
 80172ac:	e021      	b.n	80172f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	7c1b      	ldrb	r3, [r3, #16]
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d10d      	bne.n	80172d2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80172bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172be:	f107 0208 	add.w	r2, r7, #8
 80172c2:	4610      	mov	r0, r2
 80172c4:	4798      	blx	r3
 80172c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	3301      	adds	r3, #1
 80172cc:	2207      	movs	r2, #7
 80172ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80172d0:	e00f      	b.n	80172f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80172d2:	6839      	ldr	r1, [r7, #0]
 80172d4:	6878      	ldr	r0, [r7, #4]
 80172d6:	f000 f9f7 	bl	80176c8 <USBD_CtlError>
        err++;
 80172da:	7afb      	ldrb	r3, [r7, #11]
 80172dc:	3301      	adds	r3, #1
 80172de:	72fb      	strb	r3, [r7, #11]
      break;
 80172e0:	e007      	b.n	80172f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80172e2:	6839      	ldr	r1, [r7, #0]
 80172e4:	6878      	ldr	r0, [r7, #4]
 80172e6:	f000 f9ef 	bl	80176c8 <USBD_CtlError>
      err++;
 80172ea:	7afb      	ldrb	r3, [r7, #11]
 80172ec:	3301      	adds	r3, #1
 80172ee:	72fb      	strb	r3, [r7, #11]
      break;
 80172f0:	bf00      	nop
  }

  if (err != 0U)
 80172f2:	7afb      	ldrb	r3, [r7, #11]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d11e      	bne.n	8017336 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80172f8:	683b      	ldr	r3, [r7, #0]
 80172fa:	88db      	ldrh	r3, [r3, #6]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d016      	beq.n	801732e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8017300:	893b      	ldrh	r3, [r7, #8]
 8017302:	2b00      	cmp	r3, #0
 8017304:	d00e      	beq.n	8017324 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8017306:	683b      	ldr	r3, [r7, #0]
 8017308:	88da      	ldrh	r2, [r3, #6]
 801730a:	893b      	ldrh	r3, [r7, #8]
 801730c:	4293      	cmp	r3, r2
 801730e:	bf28      	it	cs
 8017310:	4613      	movcs	r3, r2
 8017312:	b29b      	uxth	r3, r3
 8017314:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017316:	893b      	ldrh	r3, [r7, #8]
 8017318:	461a      	mov	r2, r3
 801731a:	68f9      	ldr	r1, [r7, #12]
 801731c:	6878      	ldr	r0, [r7, #4]
 801731e:	f000 fa44 	bl	80177aa <USBD_CtlSendData>
 8017322:	e009      	b.n	8017338 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017324:	6839      	ldr	r1, [r7, #0]
 8017326:	6878      	ldr	r0, [r7, #4]
 8017328:	f000 f9ce 	bl	80176c8 <USBD_CtlError>
 801732c:	e004      	b.n	8017338 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801732e:	6878      	ldr	r0, [r7, #4]
 8017330:	f000 fa95 	bl	801785e <USBD_CtlSendStatus>
 8017334:	e000      	b.n	8017338 <USBD_GetDescriptor+0x2cc>
    return;
 8017336:	bf00      	nop
  }
}
 8017338:	3710      	adds	r7, #16
 801733a:	46bd      	mov	sp, r7
 801733c:	bd80      	pop	{r7, pc}
 801733e:	bf00      	nop

08017340 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017340:	b580      	push	{r7, lr}
 8017342:	b084      	sub	sp, #16
 8017344:	af00      	add	r7, sp, #0
 8017346:	6078      	str	r0, [r7, #4]
 8017348:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801734a:	683b      	ldr	r3, [r7, #0]
 801734c:	889b      	ldrh	r3, [r3, #4]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d131      	bne.n	80173b6 <USBD_SetAddress+0x76>
 8017352:	683b      	ldr	r3, [r7, #0]
 8017354:	88db      	ldrh	r3, [r3, #6]
 8017356:	2b00      	cmp	r3, #0
 8017358:	d12d      	bne.n	80173b6 <USBD_SetAddress+0x76>
 801735a:	683b      	ldr	r3, [r7, #0]
 801735c:	885b      	ldrh	r3, [r3, #2]
 801735e:	2b7f      	cmp	r3, #127	; 0x7f
 8017360:	d829      	bhi.n	80173b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8017362:	683b      	ldr	r3, [r7, #0]
 8017364:	885b      	ldrh	r3, [r3, #2]
 8017366:	b2db      	uxtb	r3, r3
 8017368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801736c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017374:	b2db      	uxtb	r3, r3
 8017376:	2b03      	cmp	r3, #3
 8017378:	d104      	bne.n	8017384 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801737a:	6839      	ldr	r1, [r7, #0]
 801737c:	6878      	ldr	r0, [r7, #4]
 801737e:	f000 f9a3 	bl	80176c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017382:	e01d      	b.n	80173c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	7bfa      	ldrb	r2, [r7, #15]
 8017388:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801738c:	7bfb      	ldrb	r3, [r7, #15]
 801738e:	4619      	mov	r1, r3
 8017390:	6878      	ldr	r0, [r7, #4]
 8017392:	f004 fa21 	bl	801b7d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8017396:	6878      	ldr	r0, [r7, #4]
 8017398:	f000 fa61 	bl	801785e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801739c:	7bfb      	ldrb	r3, [r7, #15]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d004      	beq.n	80173ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	2202      	movs	r2, #2
 80173a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80173aa:	e009      	b.n	80173c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	2201      	movs	r2, #1
 80173b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80173b4:	e004      	b.n	80173c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80173b6:	6839      	ldr	r1, [r7, #0]
 80173b8:	6878      	ldr	r0, [r7, #4]
 80173ba:	f000 f985 	bl	80176c8 <USBD_CtlError>
  }
}
 80173be:	bf00      	nop
 80173c0:	bf00      	nop
 80173c2:	3710      	adds	r7, #16
 80173c4:	46bd      	mov	sp, r7
 80173c6:	bd80      	pop	{r7, pc}

080173c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	b084      	sub	sp, #16
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	6078      	str	r0, [r7, #4]
 80173d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80173d2:	2300      	movs	r3, #0
 80173d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80173d6:	683b      	ldr	r3, [r7, #0]
 80173d8:	885b      	ldrh	r3, [r3, #2]
 80173da:	b2da      	uxtb	r2, r3
 80173dc:	4b4c      	ldr	r3, [pc, #304]	; (8017510 <USBD_SetConfig+0x148>)
 80173de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80173e0:	4b4b      	ldr	r3, [pc, #300]	; (8017510 <USBD_SetConfig+0x148>)
 80173e2:	781b      	ldrb	r3, [r3, #0]
 80173e4:	2b01      	cmp	r3, #1
 80173e6:	d905      	bls.n	80173f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80173e8:	6839      	ldr	r1, [r7, #0]
 80173ea:	6878      	ldr	r0, [r7, #4]
 80173ec:	f000 f96c 	bl	80176c8 <USBD_CtlError>
    return USBD_FAIL;
 80173f0:	2303      	movs	r3, #3
 80173f2:	e088      	b.n	8017506 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80173fa:	b2db      	uxtb	r3, r3
 80173fc:	2b02      	cmp	r3, #2
 80173fe:	d002      	beq.n	8017406 <USBD_SetConfig+0x3e>
 8017400:	2b03      	cmp	r3, #3
 8017402:	d025      	beq.n	8017450 <USBD_SetConfig+0x88>
 8017404:	e071      	b.n	80174ea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017406:	4b42      	ldr	r3, [pc, #264]	; (8017510 <USBD_SetConfig+0x148>)
 8017408:	781b      	ldrb	r3, [r3, #0]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d01c      	beq.n	8017448 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801740e:	4b40      	ldr	r3, [pc, #256]	; (8017510 <USBD_SetConfig+0x148>)
 8017410:	781b      	ldrb	r3, [r3, #0]
 8017412:	461a      	mov	r2, r3
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017418:	4b3d      	ldr	r3, [pc, #244]	; (8017510 <USBD_SetConfig+0x148>)
 801741a:	781b      	ldrb	r3, [r3, #0]
 801741c:	4619      	mov	r1, r3
 801741e:	6878      	ldr	r0, [r7, #4]
 8017420:	f7ff f948 	bl	80166b4 <USBD_SetClassConfig>
 8017424:	4603      	mov	r3, r0
 8017426:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017428:	7bfb      	ldrb	r3, [r7, #15]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d004      	beq.n	8017438 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801742e:	6839      	ldr	r1, [r7, #0]
 8017430:	6878      	ldr	r0, [r7, #4]
 8017432:	f000 f949 	bl	80176c8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017436:	e065      	b.n	8017504 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8017438:	6878      	ldr	r0, [r7, #4]
 801743a:	f000 fa10 	bl	801785e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	2203      	movs	r2, #3
 8017442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017446:	e05d      	b.n	8017504 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8017448:	6878      	ldr	r0, [r7, #4]
 801744a:	f000 fa08 	bl	801785e <USBD_CtlSendStatus>
      break;
 801744e:	e059      	b.n	8017504 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017450:	4b2f      	ldr	r3, [pc, #188]	; (8017510 <USBD_SetConfig+0x148>)
 8017452:	781b      	ldrb	r3, [r3, #0]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d112      	bne.n	801747e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	2202      	movs	r2, #2
 801745c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8017460:	4b2b      	ldr	r3, [pc, #172]	; (8017510 <USBD_SetConfig+0x148>)
 8017462:	781b      	ldrb	r3, [r3, #0]
 8017464:	461a      	mov	r2, r3
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801746a:	4b29      	ldr	r3, [pc, #164]	; (8017510 <USBD_SetConfig+0x148>)
 801746c:	781b      	ldrb	r3, [r3, #0]
 801746e:	4619      	mov	r1, r3
 8017470:	6878      	ldr	r0, [r7, #4]
 8017472:	f7ff f93b 	bl	80166ec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017476:	6878      	ldr	r0, [r7, #4]
 8017478:	f000 f9f1 	bl	801785e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801747c:	e042      	b.n	8017504 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801747e:	4b24      	ldr	r3, [pc, #144]	; (8017510 <USBD_SetConfig+0x148>)
 8017480:	781b      	ldrb	r3, [r3, #0]
 8017482:	461a      	mov	r2, r3
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	685b      	ldr	r3, [r3, #4]
 8017488:	429a      	cmp	r2, r3
 801748a:	d02a      	beq.n	80174e2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	685b      	ldr	r3, [r3, #4]
 8017490:	b2db      	uxtb	r3, r3
 8017492:	4619      	mov	r1, r3
 8017494:	6878      	ldr	r0, [r7, #4]
 8017496:	f7ff f929 	bl	80166ec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801749a:	4b1d      	ldr	r3, [pc, #116]	; (8017510 <USBD_SetConfig+0x148>)
 801749c:	781b      	ldrb	r3, [r3, #0]
 801749e:	461a      	mov	r2, r3
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80174a4:	4b1a      	ldr	r3, [pc, #104]	; (8017510 <USBD_SetConfig+0x148>)
 80174a6:	781b      	ldrb	r3, [r3, #0]
 80174a8:	4619      	mov	r1, r3
 80174aa:	6878      	ldr	r0, [r7, #4]
 80174ac:	f7ff f902 	bl	80166b4 <USBD_SetClassConfig>
 80174b0:	4603      	mov	r3, r0
 80174b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80174b4:	7bfb      	ldrb	r3, [r7, #15]
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d00f      	beq.n	80174da <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80174ba:	6839      	ldr	r1, [r7, #0]
 80174bc:	6878      	ldr	r0, [r7, #4]
 80174be:	f000 f903 	bl	80176c8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	685b      	ldr	r3, [r3, #4]
 80174c6:	b2db      	uxtb	r3, r3
 80174c8:	4619      	mov	r1, r3
 80174ca:	6878      	ldr	r0, [r7, #4]
 80174cc:	f7ff f90e 	bl	80166ec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	2202      	movs	r2, #2
 80174d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80174d8:	e014      	b.n	8017504 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80174da:	6878      	ldr	r0, [r7, #4]
 80174dc:	f000 f9bf 	bl	801785e <USBD_CtlSendStatus>
      break;
 80174e0:	e010      	b.n	8017504 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80174e2:	6878      	ldr	r0, [r7, #4]
 80174e4:	f000 f9bb 	bl	801785e <USBD_CtlSendStatus>
      break;
 80174e8:	e00c      	b.n	8017504 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80174ea:	6839      	ldr	r1, [r7, #0]
 80174ec:	6878      	ldr	r0, [r7, #4]
 80174ee:	f000 f8eb 	bl	80176c8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80174f2:	4b07      	ldr	r3, [pc, #28]	; (8017510 <USBD_SetConfig+0x148>)
 80174f4:	781b      	ldrb	r3, [r3, #0]
 80174f6:	4619      	mov	r1, r3
 80174f8:	6878      	ldr	r0, [r7, #4]
 80174fa:	f7ff f8f7 	bl	80166ec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80174fe:	2303      	movs	r3, #3
 8017500:	73fb      	strb	r3, [r7, #15]
      break;
 8017502:	bf00      	nop
  }

  return ret;
 8017504:	7bfb      	ldrb	r3, [r7, #15]
}
 8017506:	4618      	mov	r0, r3
 8017508:	3710      	adds	r7, #16
 801750a:	46bd      	mov	sp, r7
 801750c:	bd80      	pop	{r7, pc}
 801750e:	bf00      	nop
 8017510:	2000063e 	.word	0x2000063e

08017514 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017514:	b580      	push	{r7, lr}
 8017516:	b082      	sub	sp, #8
 8017518:	af00      	add	r7, sp, #0
 801751a:	6078      	str	r0, [r7, #4]
 801751c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801751e:	683b      	ldr	r3, [r7, #0]
 8017520:	88db      	ldrh	r3, [r3, #6]
 8017522:	2b01      	cmp	r3, #1
 8017524:	d004      	beq.n	8017530 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017526:	6839      	ldr	r1, [r7, #0]
 8017528:	6878      	ldr	r0, [r7, #4]
 801752a:	f000 f8cd 	bl	80176c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801752e:	e023      	b.n	8017578 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017536:	b2db      	uxtb	r3, r3
 8017538:	2b02      	cmp	r3, #2
 801753a:	dc02      	bgt.n	8017542 <USBD_GetConfig+0x2e>
 801753c:	2b00      	cmp	r3, #0
 801753e:	dc03      	bgt.n	8017548 <USBD_GetConfig+0x34>
 8017540:	e015      	b.n	801756e <USBD_GetConfig+0x5a>
 8017542:	2b03      	cmp	r3, #3
 8017544:	d00b      	beq.n	801755e <USBD_GetConfig+0x4a>
 8017546:	e012      	b.n	801756e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	2200      	movs	r2, #0
 801754c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	3308      	adds	r3, #8
 8017552:	2201      	movs	r2, #1
 8017554:	4619      	mov	r1, r3
 8017556:	6878      	ldr	r0, [r7, #4]
 8017558:	f000 f927 	bl	80177aa <USBD_CtlSendData>
        break;
 801755c:	e00c      	b.n	8017578 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	3304      	adds	r3, #4
 8017562:	2201      	movs	r2, #1
 8017564:	4619      	mov	r1, r3
 8017566:	6878      	ldr	r0, [r7, #4]
 8017568:	f000 f91f 	bl	80177aa <USBD_CtlSendData>
        break;
 801756c:	e004      	b.n	8017578 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801756e:	6839      	ldr	r1, [r7, #0]
 8017570:	6878      	ldr	r0, [r7, #4]
 8017572:	f000 f8a9 	bl	80176c8 <USBD_CtlError>
        break;
 8017576:	bf00      	nop
}
 8017578:	bf00      	nop
 801757a:	3708      	adds	r7, #8
 801757c:	46bd      	mov	sp, r7
 801757e:	bd80      	pop	{r7, pc}

08017580 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017580:	b580      	push	{r7, lr}
 8017582:	b082      	sub	sp, #8
 8017584:	af00      	add	r7, sp, #0
 8017586:	6078      	str	r0, [r7, #4]
 8017588:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017590:	b2db      	uxtb	r3, r3
 8017592:	3b01      	subs	r3, #1
 8017594:	2b02      	cmp	r3, #2
 8017596:	d81e      	bhi.n	80175d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017598:	683b      	ldr	r3, [r7, #0]
 801759a:	88db      	ldrh	r3, [r3, #6]
 801759c:	2b02      	cmp	r3, #2
 801759e:	d004      	beq.n	80175aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80175a0:	6839      	ldr	r1, [r7, #0]
 80175a2:	6878      	ldr	r0, [r7, #4]
 80175a4:	f000 f890 	bl	80176c8 <USBD_CtlError>
        break;
 80175a8:	e01a      	b.n	80175e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	2201      	movs	r2, #1
 80175ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d005      	beq.n	80175c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	68db      	ldr	r3, [r3, #12]
 80175be:	f043 0202 	orr.w	r2, r3, #2
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	330c      	adds	r3, #12
 80175ca:	2202      	movs	r2, #2
 80175cc:	4619      	mov	r1, r3
 80175ce:	6878      	ldr	r0, [r7, #4]
 80175d0:	f000 f8eb 	bl	80177aa <USBD_CtlSendData>
      break;
 80175d4:	e004      	b.n	80175e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80175d6:	6839      	ldr	r1, [r7, #0]
 80175d8:	6878      	ldr	r0, [r7, #4]
 80175da:	f000 f875 	bl	80176c8 <USBD_CtlError>
      break;
 80175de:	bf00      	nop
  }
}
 80175e0:	bf00      	nop
 80175e2:	3708      	adds	r7, #8
 80175e4:	46bd      	mov	sp, r7
 80175e6:	bd80      	pop	{r7, pc}

080175e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b082      	sub	sp, #8
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	6078      	str	r0, [r7, #4]
 80175f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80175f2:	683b      	ldr	r3, [r7, #0]
 80175f4:	885b      	ldrh	r3, [r3, #2]
 80175f6:	2b01      	cmp	r3, #1
 80175f8:	d106      	bne.n	8017608 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	2201      	movs	r2, #1
 80175fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017602:	6878      	ldr	r0, [r7, #4]
 8017604:	f000 f92b 	bl	801785e <USBD_CtlSendStatus>
  }
}
 8017608:	bf00      	nop
 801760a:	3708      	adds	r7, #8
 801760c:	46bd      	mov	sp, r7
 801760e:	bd80      	pop	{r7, pc}

08017610 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017610:	b580      	push	{r7, lr}
 8017612:	b082      	sub	sp, #8
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
 8017618:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017620:	b2db      	uxtb	r3, r3
 8017622:	3b01      	subs	r3, #1
 8017624:	2b02      	cmp	r3, #2
 8017626:	d80b      	bhi.n	8017640 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017628:	683b      	ldr	r3, [r7, #0]
 801762a:	885b      	ldrh	r3, [r3, #2]
 801762c:	2b01      	cmp	r3, #1
 801762e:	d10c      	bne.n	801764a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	2200      	movs	r2, #0
 8017634:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017638:	6878      	ldr	r0, [r7, #4]
 801763a:	f000 f910 	bl	801785e <USBD_CtlSendStatus>
      }
      break;
 801763e:	e004      	b.n	801764a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017640:	6839      	ldr	r1, [r7, #0]
 8017642:	6878      	ldr	r0, [r7, #4]
 8017644:	f000 f840 	bl	80176c8 <USBD_CtlError>
      break;
 8017648:	e000      	b.n	801764c <USBD_ClrFeature+0x3c>
      break;
 801764a:	bf00      	nop
  }
}
 801764c:	bf00      	nop
 801764e:	3708      	adds	r7, #8
 8017650:	46bd      	mov	sp, r7
 8017652:	bd80      	pop	{r7, pc}

08017654 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017654:	b580      	push	{r7, lr}
 8017656:	b084      	sub	sp, #16
 8017658:	af00      	add	r7, sp, #0
 801765a:	6078      	str	r0, [r7, #4]
 801765c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801765e:	683b      	ldr	r3, [r7, #0]
 8017660:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	781a      	ldrb	r2, [r3, #0]
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	3301      	adds	r3, #1
 801766e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	781a      	ldrb	r2, [r3, #0]
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	3301      	adds	r3, #1
 801767c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801767e:	68f8      	ldr	r0, [r7, #12]
 8017680:	f7ff fabb 	bl	8016bfa <SWAPBYTE>
 8017684:	4603      	mov	r3, r0
 8017686:	461a      	mov	r2, r3
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	3301      	adds	r3, #1
 8017690:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	3301      	adds	r3, #1
 8017696:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017698:	68f8      	ldr	r0, [r7, #12]
 801769a:	f7ff faae 	bl	8016bfa <SWAPBYTE>
 801769e:	4603      	mov	r3, r0
 80176a0:	461a      	mov	r2, r3
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	3301      	adds	r3, #1
 80176aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	3301      	adds	r3, #1
 80176b0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80176b2:	68f8      	ldr	r0, [r7, #12]
 80176b4:	f7ff faa1 	bl	8016bfa <SWAPBYTE>
 80176b8:	4603      	mov	r3, r0
 80176ba:	461a      	mov	r2, r3
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	80da      	strh	r2, [r3, #6]
}
 80176c0:	bf00      	nop
 80176c2:	3710      	adds	r7, #16
 80176c4:	46bd      	mov	sp, r7
 80176c6:	bd80      	pop	{r7, pc}

080176c8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80176c8:	b580      	push	{r7, lr}
 80176ca:	b082      	sub	sp, #8
 80176cc:	af00      	add	r7, sp, #0
 80176ce:	6078      	str	r0, [r7, #4]
 80176d0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80176d2:	2180      	movs	r1, #128	; 0x80
 80176d4:	6878      	ldr	r0, [r7, #4]
 80176d6:	f004 f815 	bl	801b704 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80176da:	2100      	movs	r1, #0
 80176dc:	6878      	ldr	r0, [r7, #4]
 80176de:	f004 f811 	bl	801b704 <USBD_LL_StallEP>
}
 80176e2:	bf00      	nop
 80176e4:	3708      	adds	r7, #8
 80176e6:	46bd      	mov	sp, r7
 80176e8:	bd80      	pop	{r7, pc}

080176ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80176ea:	b580      	push	{r7, lr}
 80176ec:	b086      	sub	sp, #24
 80176ee:	af00      	add	r7, sp, #0
 80176f0:	60f8      	str	r0, [r7, #12]
 80176f2:	60b9      	str	r1, [r7, #8]
 80176f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80176f6:	2300      	movs	r3, #0
 80176f8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d036      	beq.n	801776e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017704:	6938      	ldr	r0, [r7, #16]
 8017706:	f000 f836 	bl	8017776 <USBD_GetLen>
 801770a:	4603      	mov	r3, r0
 801770c:	3301      	adds	r3, #1
 801770e:	b29b      	uxth	r3, r3
 8017710:	005b      	lsls	r3, r3, #1
 8017712:	b29a      	uxth	r2, r3
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017718:	7dfb      	ldrb	r3, [r7, #23]
 801771a:	68ba      	ldr	r2, [r7, #8]
 801771c:	4413      	add	r3, r2
 801771e:	687a      	ldr	r2, [r7, #4]
 8017720:	7812      	ldrb	r2, [r2, #0]
 8017722:	701a      	strb	r2, [r3, #0]
  idx++;
 8017724:	7dfb      	ldrb	r3, [r7, #23]
 8017726:	3301      	adds	r3, #1
 8017728:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801772a:	7dfb      	ldrb	r3, [r7, #23]
 801772c:	68ba      	ldr	r2, [r7, #8]
 801772e:	4413      	add	r3, r2
 8017730:	2203      	movs	r2, #3
 8017732:	701a      	strb	r2, [r3, #0]
  idx++;
 8017734:	7dfb      	ldrb	r3, [r7, #23]
 8017736:	3301      	adds	r3, #1
 8017738:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801773a:	e013      	b.n	8017764 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801773c:	7dfb      	ldrb	r3, [r7, #23]
 801773e:	68ba      	ldr	r2, [r7, #8]
 8017740:	4413      	add	r3, r2
 8017742:	693a      	ldr	r2, [r7, #16]
 8017744:	7812      	ldrb	r2, [r2, #0]
 8017746:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017748:	693b      	ldr	r3, [r7, #16]
 801774a:	3301      	adds	r3, #1
 801774c:	613b      	str	r3, [r7, #16]
    idx++;
 801774e:	7dfb      	ldrb	r3, [r7, #23]
 8017750:	3301      	adds	r3, #1
 8017752:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017754:	7dfb      	ldrb	r3, [r7, #23]
 8017756:	68ba      	ldr	r2, [r7, #8]
 8017758:	4413      	add	r3, r2
 801775a:	2200      	movs	r2, #0
 801775c:	701a      	strb	r2, [r3, #0]
    idx++;
 801775e:	7dfb      	ldrb	r3, [r7, #23]
 8017760:	3301      	adds	r3, #1
 8017762:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017764:	693b      	ldr	r3, [r7, #16]
 8017766:	781b      	ldrb	r3, [r3, #0]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d1e7      	bne.n	801773c <USBD_GetString+0x52>
 801776c:	e000      	b.n	8017770 <USBD_GetString+0x86>
    return;
 801776e:	bf00      	nop
  }
}
 8017770:	3718      	adds	r7, #24
 8017772:	46bd      	mov	sp, r7
 8017774:	bd80      	pop	{r7, pc}

08017776 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017776:	b480      	push	{r7}
 8017778:	b085      	sub	sp, #20
 801777a:	af00      	add	r7, sp, #0
 801777c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801777e:	2300      	movs	r3, #0
 8017780:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017786:	e005      	b.n	8017794 <USBD_GetLen+0x1e>
  {
    len++;
 8017788:	7bfb      	ldrb	r3, [r7, #15]
 801778a:	3301      	adds	r3, #1
 801778c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801778e:	68bb      	ldr	r3, [r7, #8]
 8017790:	3301      	adds	r3, #1
 8017792:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017794:	68bb      	ldr	r3, [r7, #8]
 8017796:	781b      	ldrb	r3, [r3, #0]
 8017798:	2b00      	cmp	r3, #0
 801779a:	d1f5      	bne.n	8017788 <USBD_GetLen+0x12>
  }

  return len;
 801779c:	7bfb      	ldrb	r3, [r7, #15]
}
 801779e:	4618      	mov	r0, r3
 80177a0:	3714      	adds	r7, #20
 80177a2:	46bd      	mov	sp, r7
 80177a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a8:	4770      	bx	lr

080177aa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80177aa:	b580      	push	{r7, lr}
 80177ac:	b084      	sub	sp, #16
 80177ae:	af00      	add	r7, sp, #0
 80177b0:	60f8      	str	r0, [r7, #12]
 80177b2:	60b9      	str	r1, [r7, #8]
 80177b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	2202      	movs	r2, #2
 80177ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	687a      	ldr	r2, [r7, #4]
 80177c2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	687a      	ldr	r2, [r7, #4]
 80177c8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	68ba      	ldr	r2, [r7, #8]
 80177ce:	2100      	movs	r1, #0
 80177d0:	68f8      	ldr	r0, [r7, #12]
 80177d2:	f004 f820 	bl	801b816 <USBD_LL_Transmit>

  return USBD_OK;
 80177d6:	2300      	movs	r3, #0
}
 80177d8:	4618      	mov	r0, r3
 80177da:	3710      	adds	r7, #16
 80177dc:	46bd      	mov	sp, r7
 80177de:	bd80      	pop	{r7, pc}

080177e0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80177e0:	b580      	push	{r7, lr}
 80177e2:	b084      	sub	sp, #16
 80177e4:	af00      	add	r7, sp, #0
 80177e6:	60f8      	str	r0, [r7, #12]
 80177e8:	60b9      	str	r1, [r7, #8]
 80177ea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	68ba      	ldr	r2, [r7, #8]
 80177f0:	2100      	movs	r1, #0
 80177f2:	68f8      	ldr	r0, [r7, #12]
 80177f4:	f004 f80f 	bl	801b816 <USBD_LL_Transmit>

  return USBD_OK;
 80177f8:	2300      	movs	r3, #0
}
 80177fa:	4618      	mov	r0, r3
 80177fc:	3710      	adds	r7, #16
 80177fe:	46bd      	mov	sp, r7
 8017800:	bd80      	pop	{r7, pc}

08017802 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017802:	b580      	push	{r7, lr}
 8017804:	b084      	sub	sp, #16
 8017806:	af00      	add	r7, sp, #0
 8017808:	60f8      	str	r0, [r7, #12]
 801780a:	60b9      	str	r1, [r7, #8]
 801780c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	2203      	movs	r2, #3
 8017812:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	687a      	ldr	r2, [r7, #4]
 801781a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	687a      	ldr	r2, [r7, #4]
 8017822:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	68ba      	ldr	r2, [r7, #8]
 801782a:	2100      	movs	r1, #0
 801782c:	68f8      	ldr	r0, [r7, #12]
 801782e:	f004 f813 	bl	801b858 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017832:	2300      	movs	r3, #0
}
 8017834:	4618      	mov	r0, r3
 8017836:	3710      	adds	r7, #16
 8017838:	46bd      	mov	sp, r7
 801783a:	bd80      	pop	{r7, pc}

0801783c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801783c:	b580      	push	{r7, lr}
 801783e:	b084      	sub	sp, #16
 8017840:	af00      	add	r7, sp, #0
 8017842:	60f8      	str	r0, [r7, #12]
 8017844:	60b9      	str	r1, [r7, #8]
 8017846:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	68ba      	ldr	r2, [r7, #8]
 801784c:	2100      	movs	r1, #0
 801784e:	68f8      	ldr	r0, [r7, #12]
 8017850:	f004 f802 	bl	801b858 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017854:	2300      	movs	r3, #0
}
 8017856:	4618      	mov	r0, r3
 8017858:	3710      	adds	r7, #16
 801785a:	46bd      	mov	sp, r7
 801785c:	bd80      	pop	{r7, pc}

0801785e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801785e:	b580      	push	{r7, lr}
 8017860:	b082      	sub	sp, #8
 8017862:	af00      	add	r7, sp, #0
 8017864:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	2204      	movs	r2, #4
 801786a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801786e:	2300      	movs	r3, #0
 8017870:	2200      	movs	r2, #0
 8017872:	2100      	movs	r1, #0
 8017874:	6878      	ldr	r0, [r7, #4]
 8017876:	f003 ffce 	bl	801b816 <USBD_LL_Transmit>

  return USBD_OK;
 801787a:	2300      	movs	r3, #0
}
 801787c:	4618      	mov	r0, r3
 801787e:	3708      	adds	r7, #8
 8017880:	46bd      	mov	sp, r7
 8017882:	bd80      	pop	{r7, pc}

08017884 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b082      	sub	sp, #8
 8017888:	af00      	add	r7, sp, #0
 801788a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	2205      	movs	r2, #5
 8017890:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017894:	2300      	movs	r3, #0
 8017896:	2200      	movs	r2, #0
 8017898:	2100      	movs	r1, #0
 801789a:	6878      	ldr	r0, [r7, #4]
 801789c:	f003 ffdc 	bl	801b858 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80178a0:	2300      	movs	r3, #0
}
 80178a2:	4618      	mov	r0, r3
 80178a4:	3708      	adds	r7, #8
 80178a6:	46bd      	mov	sp, r7
 80178a8:	bd80      	pop	{r7, pc}
	...

080178ac <__NVIC_SetPriority>:
{
 80178ac:	b480      	push	{r7}
 80178ae:	b083      	sub	sp, #12
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	4603      	mov	r3, r0
 80178b4:	6039      	str	r1, [r7, #0]
 80178b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80178b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	db0a      	blt.n	80178d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80178c0:	683b      	ldr	r3, [r7, #0]
 80178c2:	b2da      	uxtb	r2, r3
 80178c4:	490c      	ldr	r1, [pc, #48]	; (80178f8 <__NVIC_SetPriority+0x4c>)
 80178c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80178ca:	0112      	lsls	r2, r2, #4
 80178cc:	b2d2      	uxtb	r2, r2
 80178ce:	440b      	add	r3, r1
 80178d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80178d4:	e00a      	b.n	80178ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80178d6:	683b      	ldr	r3, [r7, #0]
 80178d8:	b2da      	uxtb	r2, r3
 80178da:	4908      	ldr	r1, [pc, #32]	; (80178fc <__NVIC_SetPriority+0x50>)
 80178dc:	79fb      	ldrb	r3, [r7, #7]
 80178de:	f003 030f 	and.w	r3, r3, #15
 80178e2:	3b04      	subs	r3, #4
 80178e4:	0112      	lsls	r2, r2, #4
 80178e6:	b2d2      	uxtb	r2, r2
 80178e8:	440b      	add	r3, r1
 80178ea:	761a      	strb	r2, [r3, #24]
}
 80178ec:	bf00      	nop
 80178ee:	370c      	adds	r7, #12
 80178f0:	46bd      	mov	sp, r7
 80178f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f6:	4770      	bx	lr
 80178f8:	e000e100 	.word	0xe000e100
 80178fc:	e000ed00 	.word	0xe000ed00

08017900 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8017900:	b580      	push	{r7, lr}
 8017902:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8017904:	4b05      	ldr	r3, [pc, #20]	; (801791c <SysTick_Handler+0x1c>)
 8017906:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8017908:	f002 f90a 	bl	8019b20 <xTaskGetSchedulerState>
 801790c:	4603      	mov	r3, r0
 801790e:	2b01      	cmp	r3, #1
 8017910:	d001      	beq.n	8017916 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8017912:	f002 fff1 	bl	801a8f8 <xPortSysTickHandler>
  }
}
 8017916:	bf00      	nop
 8017918:	bd80      	pop	{r7, pc}
 801791a:	bf00      	nop
 801791c:	e000e010 	.word	0xe000e010

08017920 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8017920:	b580      	push	{r7, lr}
 8017922:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8017924:	2100      	movs	r1, #0
 8017926:	f06f 0004 	mvn.w	r0, #4
 801792a:	f7ff ffbf 	bl	80178ac <__NVIC_SetPriority>
#endif
}
 801792e:	bf00      	nop
 8017930:	bd80      	pop	{r7, pc}
	...

08017934 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8017934:	b480      	push	{r7}
 8017936:	b083      	sub	sp, #12
 8017938:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801793a:	f3ef 8305 	mrs	r3, IPSR
 801793e:	603b      	str	r3, [r7, #0]
  return(result);
 8017940:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017942:	2b00      	cmp	r3, #0
 8017944:	d003      	beq.n	801794e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8017946:	f06f 0305 	mvn.w	r3, #5
 801794a:	607b      	str	r3, [r7, #4]
 801794c:	e00c      	b.n	8017968 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801794e:	4b0a      	ldr	r3, [pc, #40]	; (8017978 <osKernelInitialize+0x44>)
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	2b00      	cmp	r3, #0
 8017954:	d105      	bne.n	8017962 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8017956:	4b08      	ldr	r3, [pc, #32]	; (8017978 <osKernelInitialize+0x44>)
 8017958:	2201      	movs	r2, #1
 801795a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801795c:	2300      	movs	r3, #0
 801795e:	607b      	str	r3, [r7, #4]
 8017960:	e002      	b.n	8017968 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8017962:	f04f 33ff 	mov.w	r3, #4294967295
 8017966:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017968:	687b      	ldr	r3, [r7, #4]
}
 801796a:	4618      	mov	r0, r3
 801796c:	370c      	adds	r7, #12
 801796e:	46bd      	mov	sp, r7
 8017970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017974:	4770      	bx	lr
 8017976:	bf00      	nop
 8017978:	20000640 	.word	0x20000640

0801797c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801797c:	b580      	push	{r7, lr}
 801797e:	b082      	sub	sp, #8
 8017980:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017982:	f3ef 8305 	mrs	r3, IPSR
 8017986:	603b      	str	r3, [r7, #0]
  return(result);
 8017988:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801798a:	2b00      	cmp	r3, #0
 801798c:	d003      	beq.n	8017996 <osKernelStart+0x1a>
    stat = osErrorISR;
 801798e:	f06f 0305 	mvn.w	r3, #5
 8017992:	607b      	str	r3, [r7, #4]
 8017994:	e010      	b.n	80179b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8017996:	4b0b      	ldr	r3, [pc, #44]	; (80179c4 <osKernelStart+0x48>)
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	2b01      	cmp	r3, #1
 801799c:	d109      	bne.n	80179b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801799e:	f7ff ffbf 	bl	8017920 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80179a2:	4b08      	ldr	r3, [pc, #32]	; (80179c4 <osKernelStart+0x48>)
 80179a4:	2202      	movs	r2, #2
 80179a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80179a8:	f001 fc50 	bl	801924c <vTaskStartScheduler>
      stat = osOK;
 80179ac:	2300      	movs	r3, #0
 80179ae:	607b      	str	r3, [r7, #4]
 80179b0:	e002      	b.n	80179b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80179b2:	f04f 33ff 	mov.w	r3, #4294967295
 80179b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80179b8:	687b      	ldr	r3, [r7, #4]
}
 80179ba:	4618      	mov	r0, r3
 80179bc:	3708      	adds	r7, #8
 80179be:	46bd      	mov	sp, r7
 80179c0:	bd80      	pop	{r7, pc}
 80179c2:	bf00      	nop
 80179c4:	20000640 	.word	0x20000640

080179c8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b082      	sub	sp, #8
 80179cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80179ce:	f3ef 8305 	mrs	r3, IPSR
 80179d2:	603b      	str	r3, [r7, #0]
  return(result);
 80179d4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d003      	beq.n	80179e2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80179da:	f001 fd59 	bl	8019490 <xTaskGetTickCountFromISR>
 80179de:	6078      	str	r0, [r7, #4]
 80179e0:	e002      	b.n	80179e8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80179e2:	f001 fd45 	bl	8019470 <xTaskGetTickCount>
 80179e6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80179e8:	687b      	ldr	r3, [r7, #4]
}
 80179ea:	4618      	mov	r0, r3
 80179ec:	3708      	adds	r7, #8
 80179ee:	46bd      	mov	sp, r7
 80179f0:	bd80      	pop	{r7, pc}

080179f2 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 80179f2:	b480      	push	{r7}
 80179f4:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 80179f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 80179fa:	4618      	mov	r0, r3
 80179fc:	46bd      	mov	sp, r7
 80179fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a02:	4770      	bx	lr

08017a04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b08e      	sub	sp, #56	; 0x38
 8017a08:	af04      	add	r7, sp, #16
 8017a0a:	60f8      	str	r0, [r7, #12]
 8017a0c:	60b9      	str	r1, [r7, #8]
 8017a0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8017a10:	2300      	movs	r3, #0
 8017a12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017a14:	f3ef 8305 	mrs	r3, IPSR
 8017a18:	617b      	str	r3, [r7, #20]
  return(result);
 8017a1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d17e      	bne.n	8017b1e <osThreadNew+0x11a>
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d07b      	beq.n	8017b1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8017a26:	2380      	movs	r3, #128	; 0x80
 8017a28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8017a2a:	2318      	movs	r3, #24
 8017a2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8017a2e:	2300      	movs	r3, #0
 8017a30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8017a32:	f04f 33ff 	mov.w	r3, #4294967295
 8017a36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d045      	beq.n	8017aca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d002      	beq.n	8017a4c <osThreadNew+0x48>
        name = attr->name;
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	699b      	ldr	r3, [r3, #24]
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d002      	beq.n	8017a5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	699b      	ldr	r3, [r3, #24]
 8017a58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8017a5a:	69fb      	ldr	r3, [r7, #28]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d008      	beq.n	8017a72 <osThreadNew+0x6e>
 8017a60:	69fb      	ldr	r3, [r7, #28]
 8017a62:	2b38      	cmp	r3, #56	; 0x38
 8017a64:	d805      	bhi.n	8017a72 <osThreadNew+0x6e>
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	685b      	ldr	r3, [r3, #4]
 8017a6a:	f003 0301 	and.w	r3, r3, #1
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d001      	beq.n	8017a76 <osThreadNew+0x72>
        return (NULL);
 8017a72:	2300      	movs	r3, #0
 8017a74:	e054      	b.n	8017b20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	695b      	ldr	r3, [r3, #20]
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d003      	beq.n	8017a86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	695b      	ldr	r3, [r3, #20]
 8017a82:	089b      	lsrs	r3, r3, #2
 8017a84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	689b      	ldr	r3, [r3, #8]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d00e      	beq.n	8017aac <osThreadNew+0xa8>
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	68db      	ldr	r3, [r3, #12]
 8017a92:	2b5b      	cmp	r3, #91	; 0x5b
 8017a94:	d90a      	bls.n	8017aac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d006      	beq.n	8017aac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	695b      	ldr	r3, [r3, #20]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d002      	beq.n	8017aac <osThreadNew+0xa8>
        mem = 1;
 8017aa6:	2301      	movs	r3, #1
 8017aa8:	61bb      	str	r3, [r7, #24]
 8017aaa:	e010      	b.n	8017ace <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	689b      	ldr	r3, [r3, #8]
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d10c      	bne.n	8017ace <osThreadNew+0xca>
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	68db      	ldr	r3, [r3, #12]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d108      	bne.n	8017ace <osThreadNew+0xca>
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	691b      	ldr	r3, [r3, #16]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d104      	bne.n	8017ace <osThreadNew+0xca>
          mem = 0;
 8017ac4:	2300      	movs	r3, #0
 8017ac6:	61bb      	str	r3, [r7, #24]
 8017ac8:	e001      	b.n	8017ace <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8017aca:	2300      	movs	r3, #0
 8017acc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8017ace:	69bb      	ldr	r3, [r7, #24]
 8017ad0:	2b01      	cmp	r3, #1
 8017ad2:	d110      	bne.n	8017af6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8017ad8:	687a      	ldr	r2, [r7, #4]
 8017ada:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017adc:	9202      	str	r2, [sp, #8]
 8017ade:	9301      	str	r3, [sp, #4]
 8017ae0:	69fb      	ldr	r3, [r7, #28]
 8017ae2:	9300      	str	r3, [sp, #0]
 8017ae4:	68bb      	ldr	r3, [r7, #8]
 8017ae6:	6a3a      	ldr	r2, [r7, #32]
 8017ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017aea:	68f8      	ldr	r0, [r7, #12]
 8017aec:	f001 f95a 	bl	8018da4 <xTaskCreateStatic>
 8017af0:	4603      	mov	r3, r0
 8017af2:	613b      	str	r3, [r7, #16]
 8017af4:	e013      	b.n	8017b1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8017af6:	69bb      	ldr	r3, [r7, #24]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d110      	bne.n	8017b1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8017afc:	6a3b      	ldr	r3, [r7, #32]
 8017afe:	b29a      	uxth	r2, r3
 8017b00:	f107 0310 	add.w	r3, r7, #16
 8017b04:	9301      	str	r3, [sp, #4]
 8017b06:	69fb      	ldr	r3, [r7, #28]
 8017b08:	9300      	str	r3, [sp, #0]
 8017b0a:	68bb      	ldr	r3, [r7, #8]
 8017b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017b0e:	68f8      	ldr	r0, [r7, #12]
 8017b10:	f001 f9a5 	bl	8018e5e <xTaskCreate>
 8017b14:	4603      	mov	r3, r0
 8017b16:	2b01      	cmp	r3, #1
 8017b18:	d001      	beq.n	8017b1e <osThreadNew+0x11a>
            hTask = NULL;
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8017b1e:	693b      	ldr	r3, [r7, #16]
}
 8017b20:	4618      	mov	r0, r3
 8017b22:	3728      	adds	r7, #40	; 0x28
 8017b24:	46bd      	mov	sp, r7
 8017b26:	bd80      	pop	{r7, pc}

08017b28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b084      	sub	sp, #16
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017b30:	f3ef 8305 	mrs	r3, IPSR
 8017b34:	60bb      	str	r3, [r7, #8]
  return(result);
 8017b36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d003      	beq.n	8017b44 <osDelay+0x1c>
    stat = osErrorISR;
 8017b3c:	f06f 0305 	mvn.w	r3, #5
 8017b40:	60fb      	str	r3, [r7, #12]
 8017b42:	e007      	b.n	8017b54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8017b44:	2300      	movs	r3, #0
 8017b46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d002      	beq.n	8017b54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8017b4e:	6878      	ldr	r0, [r7, #4]
 8017b50:	f001 fb48 	bl	80191e4 <vTaskDelay>
    }
  }

  return (stat);
 8017b54:	68fb      	ldr	r3, [r7, #12]
}
 8017b56:	4618      	mov	r0, r3
 8017b58:	3710      	adds	r7, #16
 8017b5a:	46bd      	mov	sp, r7
 8017b5c:	bd80      	pop	{r7, pc}

08017b5e <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8017b5e:	b580      	push	{r7, lr}
 8017b60:	b086      	sub	sp, #24
 8017b62:	af00      	add	r7, sp, #0
 8017b64:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017b66:	f3ef 8305 	mrs	r3, IPSR
 8017b6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8017b6c:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d003      	beq.n	8017b7a <osDelayUntil+0x1c>
    stat = osErrorISR;
 8017b72:	f06f 0305 	mvn.w	r3, #5
 8017b76:	617b      	str	r3, [r7, #20]
 8017b78:	e019      	b.n	8017bae <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8017b7e:	f001 fc77 	bl	8019470 <xTaskGetTickCount>
 8017b82:	4603      	mov	r3, r0
 8017b84:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8017b86:	68bb      	ldr	r3, [r7, #8]
 8017b88:	687a      	ldr	r2, [r7, #4]
 8017b8a:	1ad3      	subs	r3, r2, r3
 8017b8c:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8017b8e:	693b      	ldr	r3, [r7, #16]
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d009      	beq.n	8017ba8 <osDelayUntil+0x4a>
 8017b94:	693b      	ldr	r3, [r7, #16]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	db06      	blt.n	8017ba8 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8017b9a:	f107 0308 	add.w	r3, r7, #8
 8017b9e:	6939      	ldr	r1, [r7, #16]
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	f001 faa1 	bl	80190e8 <vTaskDelayUntil>
 8017ba6:	e002      	b.n	8017bae <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8017ba8:	f06f 0303 	mvn.w	r3, #3
 8017bac:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8017bae:	697b      	ldr	r3, [r7, #20]
}
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	3718      	adds	r7, #24
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd80      	pop	{r7, pc}

08017bb8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b088      	sub	sp, #32
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017bc4:	f3ef 8305 	mrs	r3, IPSR
 8017bc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8017bca:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d174      	bne.n	8017cba <osMutexNew+0x102>
    if (attr != NULL) {
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d003      	beq.n	8017bde <osMutexNew+0x26>
      type = attr->attr_bits;
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	685b      	ldr	r3, [r3, #4]
 8017bda:	61bb      	str	r3, [r7, #24]
 8017bdc:	e001      	b.n	8017be2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8017bde:	2300      	movs	r3, #0
 8017be0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8017be2:	69bb      	ldr	r3, [r7, #24]
 8017be4:	f003 0301 	and.w	r3, r3, #1
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d002      	beq.n	8017bf2 <osMutexNew+0x3a>
      rmtx = 1U;
 8017bec:	2301      	movs	r3, #1
 8017bee:	617b      	str	r3, [r7, #20]
 8017bf0:	e001      	b.n	8017bf6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8017bf6:	69bb      	ldr	r3, [r7, #24]
 8017bf8:	f003 0308 	and.w	r3, r3, #8
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d15c      	bne.n	8017cba <osMutexNew+0x102>
      mem = -1;
 8017c00:	f04f 33ff 	mov.w	r3, #4294967295
 8017c04:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d015      	beq.n	8017c38 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	689b      	ldr	r3, [r3, #8]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d006      	beq.n	8017c22 <osMutexNew+0x6a>
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	68db      	ldr	r3, [r3, #12]
 8017c18:	2b4f      	cmp	r3, #79	; 0x4f
 8017c1a:	d902      	bls.n	8017c22 <osMutexNew+0x6a>
          mem = 1;
 8017c1c:	2301      	movs	r3, #1
 8017c1e:	613b      	str	r3, [r7, #16]
 8017c20:	e00c      	b.n	8017c3c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	689b      	ldr	r3, [r3, #8]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d108      	bne.n	8017c3c <osMutexNew+0x84>
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	68db      	ldr	r3, [r3, #12]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d104      	bne.n	8017c3c <osMutexNew+0x84>
            mem = 0;
 8017c32:	2300      	movs	r3, #0
 8017c34:	613b      	str	r3, [r7, #16]
 8017c36:	e001      	b.n	8017c3c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8017c38:	2300      	movs	r3, #0
 8017c3a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8017c3c:	693b      	ldr	r3, [r7, #16]
 8017c3e:	2b01      	cmp	r3, #1
 8017c40:	d112      	bne.n	8017c68 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8017c42:	697b      	ldr	r3, [r7, #20]
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d007      	beq.n	8017c58 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	689b      	ldr	r3, [r3, #8]
 8017c4c:	4619      	mov	r1, r3
 8017c4e:	2004      	movs	r0, #4
 8017c50:	f000 fb17 	bl	8018282 <xQueueCreateMutexStatic>
 8017c54:	61f8      	str	r0, [r7, #28]
 8017c56:	e016      	b.n	8017c86 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	689b      	ldr	r3, [r3, #8]
 8017c5c:	4619      	mov	r1, r3
 8017c5e:	2001      	movs	r0, #1
 8017c60:	f000 fb0f 	bl	8018282 <xQueueCreateMutexStatic>
 8017c64:	61f8      	str	r0, [r7, #28]
 8017c66:	e00e      	b.n	8017c86 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8017c68:	693b      	ldr	r3, [r7, #16]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d10b      	bne.n	8017c86 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8017c6e:	697b      	ldr	r3, [r7, #20]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d004      	beq.n	8017c7e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8017c74:	2004      	movs	r0, #4
 8017c76:	f000 faec 	bl	8018252 <xQueueCreateMutex>
 8017c7a:	61f8      	str	r0, [r7, #28]
 8017c7c:	e003      	b.n	8017c86 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8017c7e:	2001      	movs	r0, #1
 8017c80:	f000 fae7 	bl	8018252 <xQueueCreateMutex>
 8017c84:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8017c86:	69fb      	ldr	r3, [r7, #28]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d00c      	beq.n	8017ca6 <osMutexNew+0xee>
        if (attr != NULL) {
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d003      	beq.n	8017c9a <osMutexNew+0xe2>
          name = attr->name;
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	60fb      	str	r3, [r7, #12]
 8017c98:	e001      	b.n	8017c9e <osMutexNew+0xe6>
        } else {
          name = NULL;
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8017c9e:	68f9      	ldr	r1, [r7, #12]
 8017ca0:	69f8      	ldr	r0, [r7, #28]
 8017ca2:	f001 f821 	bl	8018ce8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8017ca6:	69fb      	ldr	r3, [r7, #28]
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d006      	beq.n	8017cba <osMutexNew+0x102>
 8017cac:	697b      	ldr	r3, [r7, #20]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d003      	beq.n	8017cba <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8017cb2:	69fb      	ldr	r3, [r7, #28]
 8017cb4:	f043 0301 	orr.w	r3, r3, #1
 8017cb8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8017cba:	69fb      	ldr	r3, [r7, #28]
}
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	3720      	adds	r7, #32
 8017cc0:	46bd      	mov	sp, r7
 8017cc2:	bd80      	pop	{r7, pc}

08017cc4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b086      	sub	sp, #24
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	6078      	str	r0, [r7, #4]
 8017ccc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	f023 0301 	bic.w	r3, r3, #1
 8017cd4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	f003 0301 	and.w	r3, r3, #1
 8017cdc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8017cde:	2300      	movs	r3, #0
 8017ce0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017ce2:	f3ef 8305 	mrs	r3, IPSR
 8017ce6:	60bb      	str	r3, [r7, #8]
  return(result);
 8017ce8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d003      	beq.n	8017cf6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8017cee:	f06f 0305 	mvn.w	r3, #5
 8017cf2:	617b      	str	r3, [r7, #20]
 8017cf4:	e02c      	b.n	8017d50 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8017cf6:	693b      	ldr	r3, [r7, #16]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d103      	bne.n	8017d04 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8017cfc:	f06f 0303 	mvn.w	r3, #3
 8017d00:	617b      	str	r3, [r7, #20]
 8017d02:	e025      	b.n	8017d50 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d011      	beq.n	8017d2e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8017d0a:	6839      	ldr	r1, [r7, #0]
 8017d0c:	6938      	ldr	r0, [r7, #16]
 8017d0e:	f000 fb07 	bl	8018320 <xQueueTakeMutexRecursive>
 8017d12:	4603      	mov	r3, r0
 8017d14:	2b01      	cmp	r3, #1
 8017d16:	d01b      	beq.n	8017d50 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8017d18:	683b      	ldr	r3, [r7, #0]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d003      	beq.n	8017d26 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8017d1e:	f06f 0301 	mvn.w	r3, #1
 8017d22:	617b      	str	r3, [r7, #20]
 8017d24:	e014      	b.n	8017d50 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8017d26:	f06f 0302 	mvn.w	r3, #2
 8017d2a:	617b      	str	r3, [r7, #20]
 8017d2c:	e010      	b.n	8017d50 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8017d2e:	6839      	ldr	r1, [r7, #0]
 8017d30:	6938      	ldr	r0, [r7, #16]
 8017d32:	f000 fda5 	bl	8018880 <xQueueSemaphoreTake>
 8017d36:	4603      	mov	r3, r0
 8017d38:	2b01      	cmp	r3, #1
 8017d3a:	d009      	beq.n	8017d50 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8017d3c:	683b      	ldr	r3, [r7, #0]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d003      	beq.n	8017d4a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8017d42:	f06f 0301 	mvn.w	r3, #1
 8017d46:	617b      	str	r3, [r7, #20]
 8017d48:	e002      	b.n	8017d50 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8017d4a:	f06f 0302 	mvn.w	r3, #2
 8017d4e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8017d50:	697b      	ldr	r3, [r7, #20]
}
 8017d52:	4618      	mov	r0, r3
 8017d54:	3718      	adds	r7, #24
 8017d56:	46bd      	mov	sp, r7
 8017d58:	bd80      	pop	{r7, pc}

08017d5a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8017d5a:	b580      	push	{r7, lr}
 8017d5c:	b086      	sub	sp, #24
 8017d5e:	af00      	add	r7, sp, #0
 8017d60:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	f023 0301 	bic.w	r3, r3, #1
 8017d68:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	f003 0301 	and.w	r3, r3, #1
 8017d70:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8017d72:	2300      	movs	r3, #0
 8017d74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017d76:	f3ef 8305 	mrs	r3, IPSR
 8017d7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8017d7c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d003      	beq.n	8017d8a <osMutexRelease+0x30>
    stat = osErrorISR;
 8017d82:	f06f 0305 	mvn.w	r3, #5
 8017d86:	617b      	str	r3, [r7, #20]
 8017d88:	e01f      	b.n	8017dca <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8017d8a:	693b      	ldr	r3, [r7, #16]
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d103      	bne.n	8017d98 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8017d90:	f06f 0303 	mvn.w	r3, #3
 8017d94:	617b      	str	r3, [r7, #20]
 8017d96:	e018      	b.n	8017dca <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d009      	beq.n	8017db2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8017d9e:	6938      	ldr	r0, [r7, #16]
 8017da0:	f000 fa8a 	bl	80182b8 <xQueueGiveMutexRecursive>
 8017da4:	4603      	mov	r3, r0
 8017da6:	2b01      	cmp	r3, #1
 8017da8:	d00f      	beq.n	8017dca <osMutexRelease+0x70>
        stat = osErrorResource;
 8017daa:	f06f 0302 	mvn.w	r3, #2
 8017dae:	617b      	str	r3, [r7, #20]
 8017db0:	e00b      	b.n	8017dca <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8017db2:	2300      	movs	r3, #0
 8017db4:	2200      	movs	r2, #0
 8017db6:	2100      	movs	r1, #0
 8017db8:	6938      	ldr	r0, [r7, #16]
 8017dba:	f000 fae7 	bl	801838c <xQueueGenericSend>
 8017dbe:	4603      	mov	r3, r0
 8017dc0:	2b01      	cmp	r3, #1
 8017dc2:	d002      	beq.n	8017dca <osMutexRelease+0x70>
        stat = osErrorResource;
 8017dc4:	f06f 0302 	mvn.w	r3, #2
 8017dc8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8017dca:	697b      	ldr	r3, [r7, #20]
}
 8017dcc:	4618      	mov	r0, r3
 8017dce:	3718      	adds	r7, #24
 8017dd0:	46bd      	mov	sp, r7
 8017dd2:	bd80      	pop	{r7, pc}

08017dd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8017dd4:	b480      	push	{r7}
 8017dd6:	b085      	sub	sp, #20
 8017dd8:	af00      	add	r7, sp, #0
 8017dda:	60f8      	str	r0, [r7, #12]
 8017ddc:	60b9      	str	r1, [r7, #8]
 8017dde:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	4a07      	ldr	r2, [pc, #28]	; (8017e00 <vApplicationGetIdleTaskMemory+0x2c>)
 8017de4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8017de6:	68bb      	ldr	r3, [r7, #8]
 8017de8:	4a06      	ldr	r2, [pc, #24]	; (8017e04 <vApplicationGetIdleTaskMemory+0x30>)
 8017dea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	2280      	movs	r2, #128	; 0x80
 8017df0:	601a      	str	r2, [r3, #0]
}
 8017df2:	bf00      	nop
 8017df4:	3714      	adds	r7, #20
 8017df6:	46bd      	mov	sp, r7
 8017df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfc:	4770      	bx	lr
 8017dfe:	bf00      	nop
 8017e00:	20000644 	.word	0x20000644
 8017e04:	200006a0 	.word	0x200006a0

08017e08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8017e08:	b480      	push	{r7}
 8017e0a:	b085      	sub	sp, #20
 8017e0c:	af00      	add	r7, sp, #0
 8017e0e:	60f8      	str	r0, [r7, #12]
 8017e10:	60b9      	str	r1, [r7, #8]
 8017e12:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	4a07      	ldr	r2, [pc, #28]	; (8017e34 <vApplicationGetTimerTaskMemory+0x2c>)
 8017e18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8017e1a:	68bb      	ldr	r3, [r7, #8]
 8017e1c:	4a06      	ldr	r2, [pc, #24]	; (8017e38 <vApplicationGetTimerTaskMemory+0x30>)
 8017e1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017e26:	601a      	str	r2, [r3, #0]
}
 8017e28:	bf00      	nop
 8017e2a:	3714      	adds	r7, #20
 8017e2c:	46bd      	mov	sp, r7
 8017e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e32:	4770      	bx	lr
 8017e34:	200008a0 	.word	0x200008a0
 8017e38:	200008fc 	.word	0x200008fc

08017e3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017e3c:	b480      	push	{r7}
 8017e3e:	b083      	sub	sp, #12
 8017e40:	af00      	add	r7, sp, #0
 8017e42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	f103 0208 	add.w	r2, r3, #8
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	f04f 32ff 	mov.w	r2, #4294967295
 8017e54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	f103 0208 	add.w	r2, r3, #8
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	f103 0208 	add.w	r2, r3, #8
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	2200      	movs	r2, #0
 8017e6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017e70:	bf00      	nop
 8017e72:	370c      	adds	r7, #12
 8017e74:	46bd      	mov	sp, r7
 8017e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7a:	4770      	bx	lr

08017e7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017e7c:	b480      	push	{r7}
 8017e7e:	b083      	sub	sp, #12
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	2200      	movs	r2, #0
 8017e88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017e8a:	bf00      	nop
 8017e8c:	370c      	adds	r7, #12
 8017e8e:	46bd      	mov	sp, r7
 8017e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e94:	4770      	bx	lr

08017e96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017e96:	b480      	push	{r7}
 8017e98:	b085      	sub	sp, #20
 8017e9a:	af00      	add	r7, sp, #0
 8017e9c:	6078      	str	r0, [r7, #4]
 8017e9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	685b      	ldr	r3, [r3, #4]
 8017ea4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017ea6:	683b      	ldr	r3, [r7, #0]
 8017ea8:	68fa      	ldr	r2, [r7, #12]
 8017eaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	689a      	ldr	r2, [r3, #8]
 8017eb0:	683b      	ldr	r3, [r7, #0]
 8017eb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017eb4:	68fb      	ldr	r3, [r7, #12]
 8017eb6:	689b      	ldr	r3, [r3, #8]
 8017eb8:	683a      	ldr	r2, [r7, #0]
 8017eba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	683a      	ldr	r2, [r7, #0]
 8017ec0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017ec2:	683b      	ldr	r3, [r7, #0]
 8017ec4:	687a      	ldr	r2, [r7, #4]
 8017ec6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	1c5a      	adds	r2, r3, #1
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	601a      	str	r2, [r3, #0]
}
 8017ed2:	bf00      	nop
 8017ed4:	3714      	adds	r7, #20
 8017ed6:	46bd      	mov	sp, r7
 8017ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017edc:	4770      	bx	lr

08017ede <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017ede:	b480      	push	{r7}
 8017ee0:	b085      	sub	sp, #20
 8017ee2:	af00      	add	r7, sp, #0
 8017ee4:	6078      	str	r0, [r7, #4]
 8017ee6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017ee8:	683b      	ldr	r3, [r7, #0]
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017eee:	68bb      	ldr	r3, [r7, #8]
 8017ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ef4:	d103      	bne.n	8017efe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	691b      	ldr	r3, [r3, #16]
 8017efa:	60fb      	str	r3, [r7, #12]
 8017efc:	e00c      	b.n	8017f18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	3308      	adds	r3, #8
 8017f02:	60fb      	str	r3, [r7, #12]
 8017f04:	e002      	b.n	8017f0c <vListInsert+0x2e>
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	685b      	ldr	r3, [r3, #4]
 8017f0a:	60fb      	str	r3, [r7, #12]
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	685b      	ldr	r3, [r3, #4]
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	68ba      	ldr	r2, [r7, #8]
 8017f14:	429a      	cmp	r2, r3
 8017f16:	d2f6      	bcs.n	8017f06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	685a      	ldr	r2, [r3, #4]
 8017f1c:	683b      	ldr	r3, [r7, #0]
 8017f1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017f20:	683b      	ldr	r3, [r7, #0]
 8017f22:	685b      	ldr	r3, [r3, #4]
 8017f24:	683a      	ldr	r2, [r7, #0]
 8017f26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017f28:	683b      	ldr	r3, [r7, #0]
 8017f2a:	68fa      	ldr	r2, [r7, #12]
 8017f2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	683a      	ldr	r2, [r7, #0]
 8017f32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017f34:	683b      	ldr	r3, [r7, #0]
 8017f36:	687a      	ldr	r2, [r7, #4]
 8017f38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	1c5a      	adds	r2, r3, #1
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	601a      	str	r2, [r3, #0]
}
 8017f44:	bf00      	nop
 8017f46:	3714      	adds	r7, #20
 8017f48:	46bd      	mov	sp, r7
 8017f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f4e:	4770      	bx	lr

08017f50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017f50:	b480      	push	{r7}
 8017f52:	b085      	sub	sp, #20
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	691b      	ldr	r3, [r3, #16]
 8017f5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	685b      	ldr	r3, [r3, #4]
 8017f62:	687a      	ldr	r2, [r7, #4]
 8017f64:	6892      	ldr	r2, [r2, #8]
 8017f66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	689b      	ldr	r3, [r3, #8]
 8017f6c:	687a      	ldr	r2, [r7, #4]
 8017f6e:	6852      	ldr	r2, [r2, #4]
 8017f70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	685b      	ldr	r3, [r3, #4]
 8017f76:	687a      	ldr	r2, [r7, #4]
 8017f78:	429a      	cmp	r2, r3
 8017f7a:	d103      	bne.n	8017f84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	689a      	ldr	r2, [r3, #8]
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	2200      	movs	r2, #0
 8017f88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	1e5a      	subs	r2, r3, #1
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	681b      	ldr	r3, [r3, #0]
}
 8017f98:	4618      	mov	r0, r3
 8017f9a:	3714      	adds	r7, #20
 8017f9c:	46bd      	mov	sp, r7
 8017f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa2:	4770      	bx	lr

08017fa4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017fa4:	b580      	push	{r7, lr}
 8017fa6:	b084      	sub	sp, #16
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	6078      	str	r0, [r7, #4]
 8017fac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d10a      	bne.n	8017fce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fbc:	f383 8811 	msr	BASEPRI, r3
 8017fc0:	f3bf 8f6f 	isb	sy
 8017fc4:	f3bf 8f4f 	dsb	sy
 8017fc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8017fca:	bf00      	nop
 8017fcc:	e7fe      	b.n	8017fcc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017fce:	f002 fc01 	bl	801a7d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	681a      	ldr	r2, [r3, #0]
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017fda:	68f9      	ldr	r1, [r7, #12]
 8017fdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017fde:	fb01 f303 	mul.w	r3, r1, r3
 8017fe2:	441a      	add	r2, r3
 8017fe4:	68fb      	ldr	r3, [r7, #12]
 8017fe6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	2200      	movs	r2, #0
 8017fec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	681a      	ldr	r2, [r3, #0]
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	681a      	ldr	r2, [r3, #0]
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ffe:	3b01      	subs	r3, #1
 8018000:	68f9      	ldr	r1, [r7, #12]
 8018002:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018004:	fb01 f303 	mul.w	r3, r1, r3
 8018008:	441a      	add	r2, r3
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	22ff      	movs	r2, #255	; 0xff
 8018012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	22ff      	movs	r2, #255	; 0xff
 801801a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801801e:	683b      	ldr	r3, [r7, #0]
 8018020:	2b00      	cmp	r3, #0
 8018022:	d114      	bne.n	801804e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	691b      	ldr	r3, [r3, #16]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d01a      	beq.n	8018062 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801802c:	68fb      	ldr	r3, [r7, #12]
 801802e:	3310      	adds	r3, #16
 8018030:	4618      	mov	r0, r3
 8018032:	f001 fba7 	bl	8019784 <xTaskRemoveFromEventList>
 8018036:	4603      	mov	r3, r0
 8018038:	2b00      	cmp	r3, #0
 801803a:	d012      	beq.n	8018062 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801803c:	4b0c      	ldr	r3, [pc, #48]	; (8018070 <xQueueGenericReset+0xcc>)
 801803e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018042:	601a      	str	r2, [r3, #0]
 8018044:	f3bf 8f4f 	dsb	sy
 8018048:	f3bf 8f6f 	isb	sy
 801804c:	e009      	b.n	8018062 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	3310      	adds	r3, #16
 8018052:	4618      	mov	r0, r3
 8018054:	f7ff fef2 	bl	8017e3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018058:	68fb      	ldr	r3, [r7, #12]
 801805a:	3324      	adds	r3, #36	; 0x24
 801805c:	4618      	mov	r0, r3
 801805e:	f7ff feed 	bl	8017e3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8018062:	f002 fbe7 	bl	801a834 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8018066:	2301      	movs	r3, #1
}
 8018068:	4618      	mov	r0, r3
 801806a:	3710      	adds	r7, #16
 801806c:	46bd      	mov	sp, r7
 801806e:	bd80      	pop	{r7, pc}
 8018070:	e000ed04 	.word	0xe000ed04

08018074 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8018074:	b580      	push	{r7, lr}
 8018076:	b08e      	sub	sp, #56	; 0x38
 8018078:	af02      	add	r7, sp, #8
 801807a:	60f8      	str	r0, [r7, #12]
 801807c:	60b9      	str	r1, [r7, #8]
 801807e:	607a      	str	r2, [r7, #4]
 8018080:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d10a      	bne.n	801809e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8018088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801808c:	f383 8811 	msr	BASEPRI, r3
 8018090:	f3bf 8f6f 	isb	sy
 8018094:	f3bf 8f4f 	dsb	sy
 8018098:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801809a:	bf00      	nop
 801809c:	e7fe      	b.n	801809c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801809e:	683b      	ldr	r3, [r7, #0]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d10a      	bne.n	80180ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80180a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180a8:	f383 8811 	msr	BASEPRI, r3
 80180ac:	f3bf 8f6f 	isb	sy
 80180b0:	f3bf 8f4f 	dsb	sy
 80180b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80180b6:	bf00      	nop
 80180b8:	e7fe      	b.n	80180b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d002      	beq.n	80180c6 <xQueueGenericCreateStatic+0x52>
 80180c0:	68bb      	ldr	r3, [r7, #8]
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d001      	beq.n	80180ca <xQueueGenericCreateStatic+0x56>
 80180c6:	2301      	movs	r3, #1
 80180c8:	e000      	b.n	80180cc <xQueueGenericCreateStatic+0x58>
 80180ca:	2300      	movs	r3, #0
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d10a      	bne.n	80180e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80180d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180d4:	f383 8811 	msr	BASEPRI, r3
 80180d8:	f3bf 8f6f 	isb	sy
 80180dc:	f3bf 8f4f 	dsb	sy
 80180e0:	623b      	str	r3, [r7, #32]
}
 80180e2:	bf00      	nop
 80180e4:	e7fe      	b.n	80180e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d102      	bne.n	80180f2 <xQueueGenericCreateStatic+0x7e>
 80180ec:	68bb      	ldr	r3, [r7, #8]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d101      	bne.n	80180f6 <xQueueGenericCreateStatic+0x82>
 80180f2:	2301      	movs	r3, #1
 80180f4:	e000      	b.n	80180f8 <xQueueGenericCreateStatic+0x84>
 80180f6:	2300      	movs	r3, #0
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d10a      	bne.n	8018112 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80180fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018100:	f383 8811 	msr	BASEPRI, r3
 8018104:	f3bf 8f6f 	isb	sy
 8018108:	f3bf 8f4f 	dsb	sy
 801810c:	61fb      	str	r3, [r7, #28]
}
 801810e:	bf00      	nop
 8018110:	e7fe      	b.n	8018110 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8018112:	2350      	movs	r3, #80	; 0x50
 8018114:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8018116:	697b      	ldr	r3, [r7, #20]
 8018118:	2b50      	cmp	r3, #80	; 0x50
 801811a:	d00a      	beq.n	8018132 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801811c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018120:	f383 8811 	msr	BASEPRI, r3
 8018124:	f3bf 8f6f 	isb	sy
 8018128:	f3bf 8f4f 	dsb	sy
 801812c:	61bb      	str	r3, [r7, #24]
}
 801812e:	bf00      	nop
 8018130:	e7fe      	b.n	8018130 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8018132:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018134:	683b      	ldr	r3, [r7, #0]
 8018136:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8018138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801813a:	2b00      	cmp	r3, #0
 801813c:	d00d      	beq.n	801815a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801813e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018140:	2201      	movs	r2, #1
 8018142:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018146:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801814a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801814c:	9300      	str	r3, [sp, #0]
 801814e:	4613      	mov	r3, r2
 8018150:	687a      	ldr	r2, [r7, #4]
 8018152:	68b9      	ldr	r1, [r7, #8]
 8018154:	68f8      	ldr	r0, [r7, #12]
 8018156:	f000 f83f 	bl	80181d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801815a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801815c:	4618      	mov	r0, r3
 801815e:	3730      	adds	r7, #48	; 0x30
 8018160:	46bd      	mov	sp, r7
 8018162:	bd80      	pop	{r7, pc}

08018164 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8018164:	b580      	push	{r7, lr}
 8018166:	b08a      	sub	sp, #40	; 0x28
 8018168:	af02      	add	r7, sp, #8
 801816a:	60f8      	str	r0, [r7, #12]
 801816c:	60b9      	str	r1, [r7, #8]
 801816e:	4613      	mov	r3, r2
 8018170:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d10a      	bne.n	801818e <xQueueGenericCreate+0x2a>
	__asm volatile
 8018178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801817c:	f383 8811 	msr	BASEPRI, r3
 8018180:	f3bf 8f6f 	isb	sy
 8018184:	f3bf 8f4f 	dsb	sy
 8018188:	613b      	str	r3, [r7, #16]
}
 801818a:	bf00      	nop
 801818c:	e7fe      	b.n	801818c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	68ba      	ldr	r2, [r7, #8]
 8018192:	fb02 f303 	mul.w	r3, r2, r3
 8018196:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8018198:	69fb      	ldr	r3, [r7, #28]
 801819a:	3350      	adds	r3, #80	; 0x50
 801819c:	4618      	mov	r0, r3
 801819e:	f002 fc3b 	bl	801aa18 <pvPortMalloc>
 80181a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80181a4:	69bb      	ldr	r3, [r7, #24]
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d011      	beq.n	80181ce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80181aa:	69bb      	ldr	r3, [r7, #24]
 80181ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80181ae:	697b      	ldr	r3, [r7, #20]
 80181b0:	3350      	adds	r3, #80	; 0x50
 80181b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80181b4:	69bb      	ldr	r3, [r7, #24]
 80181b6:	2200      	movs	r2, #0
 80181b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80181bc:	79fa      	ldrb	r2, [r7, #7]
 80181be:	69bb      	ldr	r3, [r7, #24]
 80181c0:	9300      	str	r3, [sp, #0]
 80181c2:	4613      	mov	r3, r2
 80181c4:	697a      	ldr	r2, [r7, #20]
 80181c6:	68b9      	ldr	r1, [r7, #8]
 80181c8:	68f8      	ldr	r0, [r7, #12]
 80181ca:	f000 f805 	bl	80181d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80181ce:	69bb      	ldr	r3, [r7, #24]
	}
 80181d0:	4618      	mov	r0, r3
 80181d2:	3720      	adds	r7, #32
 80181d4:	46bd      	mov	sp, r7
 80181d6:	bd80      	pop	{r7, pc}

080181d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80181d8:	b580      	push	{r7, lr}
 80181da:	b084      	sub	sp, #16
 80181dc:	af00      	add	r7, sp, #0
 80181de:	60f8      	str	r0, [r7, #12]
 80181e0:	60b9      	str	r1, [r7, #8]
 80181e2:	607a      	str	r2, [r7, #4]
 80181e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80181e6:	68bb      	ldr	r3, [r7, #8]
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d103      	bne.n	80181f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80181ec:	69bb      	ldr	r3, [r7, #24]
 80181ee:	69ba      	ldr	r2, [r7, #24]
 80181f0:	601a      	str	r2, [r3, #0]
 80181f2:	e002      	b.n	80181fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80181f4:	69bb      	ldr	r3, [r7, #24]
 80181f6:	687a      	ldr	r2, [r7, #4]
 80181f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80181fa:	69bb      	ldr	r3, [r7, #24]
 80181fc:	68fa      	ldr	r2, [r7, #12]
 80181fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018200:	69bb      	ldr	r3, [r7, #24]
 8018202:	68ba      	ldr	r2, [r7, #8]
 8018204:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018206:	2101      	movs	r1, #1
 8018208:	69b8      	ldr	r0, [r7, #24]
 801820a:	f7ff fecb 	bl	8017fa4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801820e:	69bb      	ldr	r3, [r7, #24]
 8018210:	78fa      	ldrb	r2, [r7, #3]
 8018212:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8018216:	bf00      	nop
 8018218:	3710      	adds	r7, #16
 801821a:	46bd      	mov	sp, r7
 801821c:	bd80      	pop	{r7, pc}

0801821e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801821e:	b580      	push	{r7, lr}
 8018220:	b082      	sub	sp, #8
 8018222:	af00      	add	r7, sp, #0
 8018224:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	2b00      	cmp	r3, #0
 801822a:	d00e      	beq.n	801824a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	2200      	movs	r2, #0
 8018230:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	2200      	movs	r2, #0
 8018236:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	2200      	movs	r2, #0
 801823c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801823e:	2300      	movs	r3, #0
 8018240:	2200      	movs	r2, #0
 8018242:	2100      	movs	r1, #0
 8018244:	6878      	ldr	r0, [r7, #4]
 8018246:	f000 f8a1 	bl	801838c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801824a:	bf00      	nop
 801824c:	3708      	adds	r7, #8
 801824e:	46bd      	mov	sp, r7
 8018250:	bd80      	pop	{r7, pc}

08018252 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8018252:	b580      	push	{r7, lr}
 8018254:	b086      	sub	sp, #24
 8018256:	af00      	add	r7, sp, #0
 8018258:	4603      	mov	r3, r0
 801825a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801825c:	2301      	movs	r3, #1
 801825e:	617b      	str	r3, [r7, #20]
 8018260:	2300      	movs	r3, #0
 8018262:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8018264:	79fb      	ldrb	r3, [r7, #7]
 8018266:	461a      	mov	r2, r3
 8018268:	6939      	ldr	r1, [r7, #16]
 801826a:	6978      	ldr	r0, [r7, #20]
 801826c:	f7ff ff7a 	bl	8018164 <xQueueGenericCreate>
 8018270:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8018272:	68f8      	ldr	r0, [r7, #12]
 8018274:	f7ff ffd3 	bl	801821e <prvInitialiseMutex>

		return xNewQueue;
 8018278:	68fb      	ldr	r3, [r7, #12]
	}
 801827a:	4618      	mov	r0, r3
 801827c:	3718      	adds	r7, #24
 801827e:	46bd      	mov	sp, r7
 8018280:	bd80      	pop	{r7, pc}

08018282 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8018282:	b580      	push	{r7, lr}
 8018284:	b088      	sub	sp, #32
 8018286:	af02      	add	r7, sp, #8
 8018288:	4603      	mov	r3, r0
 801828a:	6039      	str	r1, [r7, #0]
 801828c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801828e:	2301      	movs	r3, #1
 8018290:	617b      	str	r3, [r7, #20]
 8018292:	2300      	movs	r3, #0
 8018294:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8018296:	79fb      	ldrb	r3, [r7, #7]
 8018298:	9300      	str	r3, [sp, #0]
 801829a:	683b      	ldr	r3, [r7, #0]
 801829c:	2200      	movs	r2, #0
 801829e:	6939      	ldr	r1, [r7, #16]
 80182a0:	6978      	ldr	r0, [r7, #20]
 80182a2:	f7ff fee7 	bl	8018074 <xQueueGenericCreateStatic>
 80182a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80182a8:	68f8      	ldr	r0, [r7, #12]
 80182aa:	f7ff ffb8 	bl	801821e <prvInitialiseMutex>

		return xNewQueue;
 80182ae:	68fb      	ldr	r3, [r7, #12]
	}
 80182b0:	4618      	mov	r0, r3
 80182b2:	3718      	adds	r7, #24
 80182b4:	46bd      	mov	sp, r7
 80182b6:	bd80      	pop	{r7, pc}

080182b8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80182b8:	b590      	push	{r4, r7, lr}
 80182ba:	b087      	sub	sp, #28
 80182bc:	af00      	add	r7, sp, #0
 80182be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80182c4:	693b      	ldr	r3, [r7, #16]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d10a      	bne.n	80182e0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80182ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182ce:	f383 8811 	msr	BASEPRI, r3
 80182d2:	f3bf 8f6f 	isb	sy
 80182d6:	f3bf 8f4f 	dsb	sy
 80182da:	60fb      	str	r3, [r7, #12]
}
 80182dc:	bf00      	nop
 80182de:	e7fe      	b.n	80182de <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80182e0:	693b      	ldr	r3, [r7, #16]
 80182e2:	689c      	ldr	r4, [r3, #8]
 80182e4:	f001 fc0c 	bl	8019b00 <xTaskGetCurrentTaskHandle>
 80182e8:	4603      	mov	r3, r0
 80182ea:	429c      	cmp	r4, r3
 80182ec:	d111      	bne.n	8018312 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80182ee:	693b      	ldr	r3, [r7, #16]
 80182f0:	68db      	ldr	r3, [r3, #12]
 80182f2:	1e5a      	subs	r2, r3, #1
 80182f4:	693b      	ldr	r3, [r7, #16]
 80182f6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80182f8:	693b      	ldr	r3, [r7, #16]
 80182fa:	68db      	ldr	r3, [r3, #12]
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d105      	bne.n	801830c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8018300:	2300      	movs	r3, #0
 8018302:	2200      	movs	r2, #0
 8018304:	2100      	movs	r1, #0
 8018306:	6938      	ldr	r0, [r7, #16]
 8018308:	f000 f840 	bl	801838c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 801830c:	2301      	movs	r3, #1
 801830e:	617b      	str	r3, [r7, #20]
 8018310:	e001      	b.n	8018316 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8018312:	2300      	movs	r3, #0
 8018314:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8018316:	697b      	ldr	r3, [r7, #20]
	}
 8018318:	4618      	mov	r0, r3
 801831a:	371c      	adds	r7, #28
 801831c:	46bd      	mov	sp, r7
 801831e:	bd90      	pop	{r4, r7, pc}

08018320 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8018320:	b590      	push	{r4, r7, lr}
 8018322:	b087      	sub	sp, #28
 8018324:	af00      	add	r7, sp, #0
 8018326:	6078      	str	r0, [r7, #4]
 8018328:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801832e:	693b      	ldr	r3, [r7, #16]
 8018330:	2b00      	cmp	r3, #0
 8018332:	d10a      	bne.n	801834a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8018334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018338:	f383 8811 	msr	BASEPRI, r3
 801833c:	f3bf 8f6f 	isb	sy
 8018340:	f3bf 8f4f 	dsb	sy
 8018344:	60fb      	str	r3, [r7, #12]
}
 8018346:	bf00      	nop
 8018348:	e7fe      	b.n	8018348 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801834a:	693b      	ldr	r3, [r7, #16]
 801834c:	689c      	ldr	r4, [r3, #8]
 801834e:	f001 fbd7 	bl	8019b00 <xTaskGetCurrentTaskHandle>
 8018352:	4603      	mov	r3, r0
 8018354:	429c      	cmp	r4, r3
 8018356:	d107      	bne.n	8018368 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8018358:	693b      	ldr	r3, [r7, #16]
 801835a:	68db      	ldr	r3, [r3, #12]
 801835c:	1c5a      	adds	r2, r3, #1
 801835e:	693b      	ldr	r3, [r7, #16]
 8018360:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8018362:	2301      	movs	r3, #1
 8018364:	617b      	str	r3, [r7, #20]
 8018366:	e00c      	b.n	8018382 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8018368:	6839      	ldr	r1, [r7, #0]
 801836a:	6938      	ldr	r0, [r7, #16]
 801836c:	f000 fa88 	bl	8018880 <xQueueSemaphoreTake>
 8018370:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8018372:	697b      	ldr	r3, [r7, #20]
 8018374:	2b00      	cmp	r3, #0
 8018376:	d004      	beq.n	8018382 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8018378:	693b      	ldr	r3, [r7, #16]
 801837a:	68db      	ldr	r3, [r3, #12]
 801837c:	1c5a      	adds	r2, r3, #1
 801837e:	693b      	ldr	r3, [r7, #16]
 8018380:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8018382:	697b      	ldr	r3, [r7, #20]
	}
 8018384:	4618      	mov	r0, r3
 8018386:	371c      	adds	r7, #28
 8018388:	46bd      	mov	sp, r7
 801838a:	bd90      	pop	{r4, r7, pc}

0801838c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801838c:	b580      	push	{r7, lr}
 801838e:	b08e      	sub	sp, #56	; 0x38
 8018390:	af00      	add	r7, sp, #0
 8018392:	60f8      	str	r0, [r7, #12]
 8018394:	60b9      	str	r1, [r7, #8]
 8018396:	607a      	str	r2, [r7, #4]
 8018398:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801839a:	2300      	movs	r3, #0
 801839c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80183a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d10a      	bne.n	80183be <xQueueGenericSend+0x32>
	__asm volatile
 80183a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183ac:	f383 8811 	msr	BASEPRI, r3
 80183b0:	f3bf 8f6f 	isb	sy
 80183b4:	f3bf 8f4f 	dsb	sy
 80183b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80183ba:	bf00      	nop
 80183bc:	e7fe      	b.n	80183bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80183be:	68bb      	ldr	r3, [r7, #8]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d103      	bne.n	80183cc <xQueueGenericSend+0x40>
 80183c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d101      	bne.n	80183d0 <xQueueGenericSend+0x44>
 80183cc:	2301      	movs	r3, #1
 80183ce:	e000      	b.n	80183d2 <xQueueGenericSend+0x46>
 80183d0:	2300      	movs	r3, #0
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d10a      	bne.n	80183ec <xQueueGenericSend+0x60>
	__asm volatile
 80183d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183da:	f383 8811 	msr	BASEPRI, r3
 80183de:	f3bf 8f6f 	isb	sy
 80183e2:	f3bf 8f4f 	dsb	sy
 80183e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80183e8:	bf00      	nop
 80183ea:	e7fe      	b.n	80183ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80183ec:	683b      	ldr	r3, [r7, #0]
 80183ee:	2b02      	cmp	r3, #2
 80183f0:	d103      	bne.n	80183fa <xQueueGenericSend+0x6e>
 80183f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80183f6:	2b01      	cmp	r3, #1
 80183f8:	d101      	bne.n	80183fe <xQueueGenericSend+0x72>
 80183fa:	2301      	movs	r3, #1
 80183fc:	e000      	b.n	8018400 <xQueueGenericSend+0x74>
 80183fe:	2300      	movs	r3, #0
 8018400:	2b00      	cmp	r3, #0
 8018402:	d10a      	bne.n	801841a <xQueueGenericSend+0x8e>
	__asm volatile
 8018404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018408:	f383 8811 	msr	BASEPRI, r3
 801840c:	f3bf 8f6f 	isb	sy
 8018410:	f3bf 8f4f 	dsb	sy
 8018414:	623b      	str	r3, [r7, #32]
}
 8018416:	bf00      	nop
 8018418:	e7fe      	b.n	8018418 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801841a:	f001 fb81 	bl	8019b20 <xTaskGetSchedulerState>
 801841e:	4603      	mov	r3, r0
 8018420:	2b00      	cmp	r3, #0
 8018422:	d102      	bne.n	801842a <xQueueGenericSend+0x9e>
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d101      	bne.n	801842e <xQueueGenericSend+0xa2>
 801842a:	2301      	movs	r3, #1
 801842c:	e000      	b.n	8018430 <xQueueGenericSend+0xa4>
 801842e:	2300      	movs	r3, #0
 8018430:	2b00      	cmp	r3, #0
 8018432:	d10a      	bne.n	801844a <xQueueGenericSend+0xbe>
	__asm volatile
 8018434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018438:	f383 8811 	msr	BASEPRI, r3
 801843c:	f3bf 8f6f 	isb	sy
 8018440:	f3bf 8f4f 	dsb	sy
 8018444:	61fb      	str	r3, [r7, #28]
}
 8018446:	bf00      	nop
 8018448:	e7fe      	b.n	8018448 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801844a:	f002 f9c3 	bl	801a7d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018456:	429a      	cmp	r2, r3
 8018458:	d302      	bcc.n	8018460 <xQueueGenericSend+0xd4>
 801845a:	683b      	ldr	r3, [r7, #0]
 801845c:	2b02      	cmp	r3, #2
 801845e:	d129      	bne.n	80184b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018460:	683a      	ldr	r2, [r7, #0]
 8018462:	68b9      	ldr	r1, [r7, #8]
 8018464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018466:	f000 fb2f 	bl	8018ac8 <prvCopyDataToQueue>
 801846a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801846c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801846e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018470:	2b00      	cmp	r3, #0
 8018472:	d010      	beq.n	8018496 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018476:	3324      	adds	r3, #36	; 0x24
 8018478:	4618      	mov	r0, r3
 801847a:	f001 f983 	bl	8019784 <xTaskRemoveFromEventList>
 801847e:	4603      	mov	r3, r0
 8018480:	2b00      	cmp	r3, #0
 8018482:	d013      	beq.n	80184ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018484:	4b3f      	ldr	r3, [pc, #252]	; (8018584 <xQueueGenericSend+0x1f8>)
 8018486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801848a:	601a      	str	r2, [r3, #0]
 801848c:	f3bf 8f4f 	dsb	sy
 8018490:	f3bf 8f6f 	isb	sy
 8018494:	e00a      	b.n	80184ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8018496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018498:	2b00      	cmp	r3, #0
 801849a:	d007      	beq.n	80184ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801849c:	4b39      	ldr	r3, [pc, #228]	; (8018584 <xQueueGenericSend+0x1f8>)
 801849e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80184a2:	601a      	str	r2, [r3, #0]
 80184a4:	f3bf 8f4f 	dsb	sy
 80184a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80184ac:	f002 f9c2 	bl	801a834 <vPortExitCritical>
				return pdPASS;
 80184b0:	2301      	movs	r3, #1
 80184b2:	e063      	b.n	801857c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d103      	bne.n	80184c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80184ba:	f002 f9bb 	bl	801a834 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80184be:	2300      	movs	r3, #0
 80184c0:	e05c      	b.n	801857c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80184c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d106      	bne.n	80184d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80184c8:	f107 0314 	add.w	r3, r7, #20
 80184cc:	4618      	mov	r0, r3
 80184ce:	f001 f9bd 	bl	801984c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80184d2:	2301      	movs	r3, #1
 80184d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80184d6:	f002 f9ad 	bl	801a834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80184da:	f000 ff1d 	bl	8019318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80184de:	f002 f979 	bl	801a7d4 <vPortEnterCritical>
 80184e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80184e8:	b25b      	sxtb	r3, r3
 80184ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184ee:	d103      	bne.n	80184f8 <xQueueGenericSend+0x16c>
 80184f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184f2:	2200      	movs	r2, #0
 80184f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80184f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80184fe:	b25b      	sxtb	r3, r3
 8018500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018504:	d103      	bne.n	801850e <xQueueGenericSend+0x182>
 8018506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018508:	2200      	movs	r2, #0
 801850a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801850e:	f002 f991 	bl	801a834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018512:	1d3a      	adds	r2, r7, #4
 8018514:	f107 0314 	add.w	r3, r7, #20
 8018518:	4611      	mov	r1, r2
 801851a:	4618      	mov	r0, r3
 801851c:	f001 f9ac 	bl	8019878 <xTaskCheckForTimeOut>
 8018520:	4603      	mov	r3, r0
 8018522:	2b00      	cmp	r3, #0
 8018524:	d124      	bne.n	8018570 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8018526:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018528:	f000 fbc6 	bl	8018cb8 <prvIsQueueFull>
 801852c:	4603      	mov	r3, r0
 801852e:	2b00      	cmp	r3, #0
 8018530:	d018      	beq.n	8018564 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8018532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018534:	3310      	adds	r3, #16
 8018536:	687a      	ldr	r2, [r7, #4]
 8018538:	4611      	mov	r1, r2
 801853a:	4618      	mov	r0, r3
 801853c:	f001 f8d2 	bl	80196e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8018540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018542:	f000 fb51 	bl	8018be8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8018546:	f000 fef5 	bl	8019334 <xTaskResumeAll>
 801854a:	4603      	mov	r3, r0
 801854c:	2b00      	cmp	r3, #0
 801854e:	f47f af7c 	bne.w	801844a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8018552:	4b0c      	ldr	r3, [pc, #48]	; (8018584 <xQueueGenericSend+0x1f8>)
 8018554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018558:	601a      	str	r2, [r3, #0]
 801855a:	f3bf 8f4f 	dsb	sy
 801855e:	f3bf 8f6f 	isb	sy
 8018562:	e772      	b.n	801844a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8018564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018566:	f000 fb3f 	bl	8018be8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801856a:	f000 fee3 	bl	8019334 <xTaskResumeAll>
 801856e:	e76c      	b.n	801844a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8018570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018572:	f000 fb39 	bl	8018be8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018576:	f000 fedd 	bl	8019334 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801857a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801857c:	4618      	mov	r0, r3
 801857e:	3738      	adds	r7, #56	; 0x38
 8018580:	46bd      	mov	sp, r7
 8018582:	bd80      	pop	{r7, pc}
 8018584:	e000ed04 	.word	0xe000ed04

08018588 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8018588:	b580      	push	{r7, lr}
 801858a:	b090      	sub	sp, #64	; 0x40
 801858c:	af00      	add	r7, sp, #0
 801858e:	60f8      	str	r0, [r7, #12]
 8018590:	60b9      	str	r1, [r7, #8]
 8018592:	607a      	str	r2, [r7, #4]
 8018594:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018596:	68fb      	ldr	r3, [r7, #12]
 8018598:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801859a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801859c:	2b00      	cmp	r3, #0
 801859e:	d10a      	bne.n	80185b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80185a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185a4:	f383 8811 	msr	BASEPRI, r3
 80185a8:	f3bf 8f6f 	isb	sy
 80185ac:	f3bf 8f4f 	dsb	sy
 80185b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80185b2:	bf00      	nop
 80185b4:	e7fe      	b.n	80185b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80185b6:	68bb      	ldr	r3, [r7, #8]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d103      	bne.n	80185c4 <xQueueGenericSendFromISR+0x3c>
 80185bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d101      	bne.n	80185c8 <xQueueGenericSendFromISR+0x40>
 80185c4:	2301      	movs	r3, #1
 80185c6:	e000      	b.n	80185ca <xQueueGenericSendFromISR+0x42>
 80185c8:	2300      	movs	r3, #0
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d10a      	bne.n	80185e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80185ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185d2:	f383 8811 	msr	BASEPRI, r3
 80185d6:	f3bf 8f6f 	isb	sy
 80185da:	f3bf 8f4f 	dsb	sy
 80185de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80185e0:	bf00      	nop
 80185e2:	e7fe      	b.n	80185e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80185e4:	683b      	ldr	r3, [r7, #0]
 80185e6:	2b02      	cmp	r3, #2
 80185e8:	d103      	bne.n	80185f2 <xQueueGenericSendFromISR+0x6a>
 80185ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80185ee:	2b01      	cmp	r3, #1
 80185f0:	d101      	bne.n	80185f6 <xQueueGenericSendFromISR+0x6e>
 80185f2:	2301      	movs	r3, #1
 80185f4:	e000      	b.n	80185f8 <xQueueGenericSendFromISR+0x70>
 80185f6:	2300      	movs	r3, #0
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d10a      	bne.n	8018612 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80185fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018600:	f383 8811 	msr	BASEPRI, r3
 8018604:	f3bf 8f6f 	isb	sy
 8018608:	f3bf 8f4f 	dsb	sy
 801860c:	623b      	str	r3, [r7, #32]
}
 801860e:	bf00      	nop
 8018610:	e7fe      	b.n	8018610 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018612:	f002 f9c1 	bl	801a998 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018616:	f3ef 8211 	mrs	r2, BASEPRI
 801861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801861e:	f383 8811 	msr	BASEPRI, r3
 8018622:	f3bf 8f6f 	isb	sy
 8018626:	f3bf 8f4f 	dsb	sy
 801862a:	61fa      	str	r2, [r7, #28]
 801862c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801862e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018630:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801863a:	429a      	cmp	r2, r3
 801863c:	d302      	bcc.n	8018644 <xQueueGenericSendFromISR+0xbc>
 801863e:	683b      	ldr	r3, [r7, #0]
 8018640:	2b02      	cmp	r3, #2
 8018642:	d12f      	bne.n	80186a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801864a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801864e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018652:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018654:	683a      	ldr	r2, [r7, #0]
 8018656:	68b9      	ldr	r1, [r7, #8]
 8018658:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801865a:	f000 fa35 	bl	8018ac8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801865e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8018662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018666:	d112      	bne.n	801868e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801866c:	2b00      	cmp	r3, #0
 801866e:	d016      	beq.n	801869e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018672:	3324      	adds	r3, #36	; 0x24
 8018674:	4618      	mov	r0, r3
 8018676:	f001 f885 	bl	8019784 <xTaskRemoveFromEventList>
 801867a:	4603      	mov	r3, r0
 801867c:	2b00      	cmp	r3, #0
 801867e:	d00e      	beq.n	801869e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	2b00      	cmp	r3, #0
 8018684:	d00b      	beq.n	801869e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	2201      	movs	r2, #1
 801868a:	601a      	str	r2, [r3, #0]
 801868c:	e007      	b.n	801869e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801868e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8018692:	3301      	adds	r3, #1
 8018694:	b2db      	uxtb	r3, r3
 8018696:	b25a      	sxtb	r2, r3
 8018698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801869a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801869e:	2301      	movs	r3, #1
 80186a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80186a2:	e001      	b.n	80186a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80186a4:	2300      	movs	r3, #0
 80186a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80186a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80186aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80186ac:	697b      	ldr	r3, [r7, #20]
 80186ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80186b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80186b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80186b6:	4618      	mov	r0, r3
 80186b8:	3740      	adds	r7, #64	; 0x40
 80186ba:	46bd      	mov	sp, r7
 80186bc:	bd80      	pop	{r7, pc}
	...

080186c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b08c      	sub	sp, #48	; 0x30
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	60f8      	str	r0, [r7, #12]
 80186c8:	60b9      	str	r1, [r7, #8]
 80186ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80186cc:	2300      	movs	r3, #0
 80186ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80186d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d10a      	bne.n	80186f0 <xQueueReceive+0x30>
	__asm volatile
 80186da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186de:	f383 8811 	msr	BASEPRI, r3
 80186e2:	f3bf 8f6f 	isb	sy
 80186e6:	f3bf 8f4f 	dsb	sy
 80186ea:	623b      	str	r3, [r7, #32]
}
 80186ec:	bf00      	nop
 80186ee:	e7fe      	b.n	80186ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80186f0:	68bb      	ldr	r3, [r7, #8]
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d103      	bne.n	80186fe <xQueueReceive+0x3e>
 80186f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d101      	bne.n	8018702 <xQueueReceive+0x42>
 80186fe:	2301      	movs	r3, #1
 8018700:	e000      	b.n	8018704 <xQueueReceive+0x44>
 8018702:	2300      	movs	r3, #0
 8018704:	2b00      	cmp	r3, #0
 8018706:	d10a      	bne.n	801871e <xQueueReceive+0x5e>
	__asm volatile
 8018708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801870c:	f383 8811 	msr	BASEPRI, r3
 8018710:	f3bf 8f6f 	isb	sy
 8018714:	f3bf 8f4f 	dsb	sy
 8018718:	61fb      	str	r3, [r7, #28]
}
 801871a:	bf00      	nop
 801871c:	e7fe      	b.n	801871c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801871e:	f001 f9ff 	bl	8019b20 <xTaskGetSchedulerState>
 8018722:	4603      	mov	r3, r0
 8018724:	2b00      	cmp	r3, #0
 8018726:	d102      	bne.n	801872e <xQueueReceive+0x6e>
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d101      	bne.n	8018732 <xQueueReceive+0x72>
 801872e:	2301      	movs	r3, #1
 8018730:	e000      	b.n	8018734 <xQueueReceive+0x74>
 8018732:	2300      	movs	r3, #0
 8018734:	2b00      	cmp	r3, #0
 8018736:	d10a      	bne.n	801874e <xQueueReceive+0x8e>
	__asm volatile
 8018738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801873c:	f383 8811 	msr	BASEPRI, r3
 8018740:	f3bf 8f6f 	isb	sy
 8018744:	f3bf 8f4f 	dsb	sy
 8018748:	61bb      	str	r3, [r7, #24]
}
 801874a:	bf00      	nop
 801874c:	e7fe      	b.n	801874c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801874e:	f002 f841 	bl	801a7d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018756:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801875a:	2b00      	cmp	r3, #0
 801875c:	d01f      	beq.n	801879e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801875e:	68b9      	ldr	r1, [r7, #8]
 8018760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018762:	f000 fa1b 	bl	8018b9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018768:	1e5a      	subs	r2, r3, #1
 801876a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801876c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801876e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018770:	691b      	ldr	r3, [r3, #16]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d00f      	beq.n	8018796 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018778:	3310      	adds	r3, #16
 801877a:	4618      	mov	r0, r3
 801877c:	f001 f802 	bl	8019784 <xTaskRemoveFromEventList>
 8018780:	4603      	mov	r3, r0
 8018782:	2b00      	cmp	r3, #0
 8018784:	d007      	beq.n	8018796 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018786:	4b3d      	ldr	r3, [pc, #244]	; (801887c <xQueueReceive+0x1bc>)
 8018788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801878c:	601a      	str	r2, [r3, #0]
 801878e:	f3bf 8f4f 	dsb	sy
 8018792:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018796:	f002 f84d 	bl	801a834 <vPortExitCritical>
				return pdPASS;
 801879a:	2301      	movs	r3, #1
 801879c:	e069      	b.n	8018872 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d103      	bne.n	80187ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80187a4:	f002 f846 	bl	801a834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80187a8:	2300      	movs	r3, #0
 80187aa:	e062      	b.n	8018872 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80187ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d106      	bne.n	80187c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80187b2:	f107 0310 	add.w	r3, r7, #16
 80187b6:	4618      	mov	r0, r3
 80187b8:	f001 f848 	bl	801984c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80187bc:	2301      	movs	r3, #1
 80187be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80187c0:	f002 f838 	bl	801a834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80187c4:	f000 fda8 	bl	8019318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80187c8:	f002 f804 	bl	801a7d4 <vPortEnterCritical>
 80187cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80187d2:	b25b      	sxtb	r3, r3
 80187d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187d8:	d103      	bne.n	80187e2 <xQueueReceive+0x122>
 80187da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187dc:	2200      	movs	r2, #0
 80187de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80187e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80187e8:	b25b      	sxtb	r3, r3
 80187ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187ee:	d103      	bne.n	80187f8 <xQueueReceive+0x138>
 80187f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187f2:	2200      	movs	r2, #0
 80187f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80187f8:	f002 f81c 	bl	801a834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80187fc:	1d3a      	adds	r2, r7, #4
 80187fe:	f107 0310 	add.w	r3, r7, #16
 8018802:	4611      	mov	r1, r2
 8018804:	4618      	mov	r0, r3
 8018806:	f001 f837 	bl	8019878 <xTaskCheckForTimeOut>
 801880a:	4603      	mov	r3, r0
 801880c:	2b00      	cmp	r3, #0
 801880e:	d123      	bne.n	8018858 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018812:	f000 fa3b 	bl	8018c8c <prvIsQueueEmpty>
 8018816:	4603      	mov	r3, r0
 8018818:	2b00      	cmp	r3, #0
 801881a:	d017      	beq.n	801884c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801881c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801881e:	3324      	adds	r3, #36	; 0x24
 8018820:	687a      	ldr	r2, [r7, #4]
 8018822:	4611      	mov	r1, r2
 8018824:	4618      	mov	r0, r3
 8018826:	f000 ff5d 	bl	80196e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801882a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801882c:	f000 f9dc 	bl	8018be8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018830:	f000 fd80 	bl	8019334 <xTaskResumeAll>
 8018834:	4603      	mov	r3, r0
 8018836:	2b00      	cmp	r3, #0
 8018838:	d189      	bne.n	801874e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801883a:	4b10      	ldr	r3, [pc, #64]	; (801887c <xQueueReceive+0x1bc>)
 801883c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018840:	601a      	str	r2, [r3, #0]
 8018842:	f3bf 8f4f 	dsb	sy
 8018846:	f3bf 8f6f 	isb	sy
 801884a:	e780      	b.n	801874e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801884c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801884e:	f000 f9cb 	bl	8018be8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018852:	f000 fd6f 	bl	8019334 <xTaskResumeAll>
 8018856:	e77a      	b.n	801874e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8018858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801885a:	f000 f9c5 	bl	8018be8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801885e:	f000 fd69 	bl	8019334 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018864:	f000 fa12 	bl	8018c8c <prvIsQueueEmpty>
 8018868:	4603      	mov	r3, r0
 801886a:	2b00      	cmp	r3, #0
 801886c:	f43f af6f 	beq.w	801874e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018870:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018872:	4618      	mov	r0, r3
 8018874:	3730      	adds	r7, #48	; 0x30
 8018876:	46bd      	mov	sp, r7
 8018878:	bd80      	pop	{r7, pc}
 801887a:	bf00      	nop
 801887c:	e000ed04 	.word	0xe000ed04

08018880 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8018880:	b580      	push	{r7, lr}
 8018882:	b08e      	sub	sp, #56	; 0x38
 8018884:	af00      	add	r7, sp, #0
 8018886:	6078      	str	r0, [r7, #4]
 8018888:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801888a:	2300      	movs	r3, #0
 801888c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8018892:	2300      	movs	r3, #0
 8018894:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018898:	2b00      	cmp	r3, #0
 801889a:	d10a      	bne.n	80188b2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801889c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188a0:	f383 8811 	msr	BASEPRI, r3
 80188a4:	f3bf 8f6f 	isb	sy
 80188a8:	f3bf 8f4f 	dsb	sy
 80188ac:	623b      	str	r3, [r7, #32]
}
 80188ae:	bf00      	nop
 80188b0:	e7fe      	b.n	80188b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80188b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d00a      	beq.n	80188d0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80188ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188be:	f383 8811 	msr	BASEPRI, r3
 80188c2:	f3bf 8f6f 	isb	sy
 80188c6:	f3bf 8f4f 	dsb	sy
 80188ca:	61fb      	str	r3, [r7, #28]
}
 80188cc:	bf00      	nop
 80188ce:	e7fe      	b.n	80188ce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80188d0:	f001 f926 	bl	8019b20 <xTaskGetSchedulerState>
 80188d4:	4603      	mov	r3, r0
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d102      	bne.n	80188e0 <xQueueSemaphoreTake+0x60>
 80188da:	683b      	ldr	r3, [r7, #0]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d101      	bne.n	80188e4 <xQueueSemaphoreTake+0x64>
 80188e0:	2301      	movs	r3, #1
 80188e2:	e000      	b.n	80188e6 <xQueueSemaphoreTake+0x66>
 80188e4:	2300      	movs	r3, #0
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d10a      	bne.n	8018900 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80188ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188ee:	f383 8811 	msr	BASEPRI, r3
 80188f2:	f3bf 8f6f 	isb	sy
 80188f6:	f3bf 8f4f 	dsb	sy
 80188fa:	61bb      	str	r3, [r7, #24]
}
 80188fc:	bf00      	nop
 80188fe:	e7fe      	b.n	80188fe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018900:	f001 ff68 	bl	801a7d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8018904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018908:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801890c:	2b00      	cmp	r3, #0
 801890e:	d024      	beq.n	801895a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8018910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018912:	1e5a      	subs	r2, r3, #1
 8018914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018916:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d104      	bne.n	801892a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8018920:	f001 fa74 	bl	8019e0c <pvTaskIncrementMutexHeldCount>
 8018924:	4602      	mov	r2, r0
 8018926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018928:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801892a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801892c:	691b      	ldr	r3, [r3, #16]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d00f      	beq.n	8018952 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018934:	3310      	adds	r3, #16
 8018936:	4618      	mov	r0, r3
 8018938:	f000 ff24 	bl	8019784 <xTaskRemoveFromEventList>
 801893c:	4603      	mov	r3, r0
 801893e:	2b00      	cmp	r3, #0
 8018940:	d007      	beq.n	8018952 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018942:	4b54      	ldr	r3, [pc, #336]	; (8018a94 <xQueueSemaphoreTake+0x214>)
 8018944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018948:	601a      	str	r2, [r3, #0]
 801894a:	f3bf 8f4f 	dsb	sy
 801894e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018952:	f001 ff6f 	bl	801a834 <vPortExitCritical>
				return pdPASS;
 8018956:	2301      	movs	r3, #1
 8018958:	e097      	b.n	8018a8a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801895a:	683b      	ldr	r3, [r7, #0]
 801895c:	2b00      	cmp	r3, #0
 801895e:	d111      	bne.n	8018984 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8018960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018962:	2b00      	cmp	r3, #0
 8018964:	d00a      	beq.n	801897c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8018966:	f04f 0350 	mov.w	r3, #80	; 0x50
 801896a:	f383 8811 	msr	BASEPRI, r3
 801896e:	f3bf 8f6f 	isb	sy
 8018972:	f3bf 8f4f 	dsb	sy
 8018976:	617b      	str	r3, [r7, #20]
}
 8018978:	bf00      	nop
 801897a:	e7fe      	b.n	801897a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801897c:	f001 ff5a 	bl	801a834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018980:	2300      	movs	r3, #0
 8018982:	e082      	b.n	8018a8a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018986:	2b00      	cmp	r3, #0
 8018988:	d106      	bne.n	8018998 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801898a:	f107 030c 	add.w	r3, r7, #12
 801898e:	4618      	mov	r0, r3
 8018990:	f000 ff5c 	bl	801984c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018994:	2301      	movs	r3, #1
 8018996:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018998:	f001 ff4c 	bl	801a834 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801899c:	f000 fcbc 	bl	8019318 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80189a0:	f001 ff18 	bl	801a7d4 <vPortEnterCritical>
 80189a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80189aa:	b25b      	sxtb	r3, r3
 80189ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80189b0:	d103      	bne.n	80189ba <xQueueSemaphoreTake+0x13a>
 80189b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189b4:	2200      	movs	r2, #0
 80189b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80189ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80189c0:	b25b      	sxtb	r3, r3
 80189c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80189c6:	d103      	bne.n	80189d0 <xQueueSemaphoreTake+0x150>
 80189c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189ca:	2200      	movs	r2, #0
 80189cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80189d0:	f001 ff30 	bl	801a834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80189d4:	463a      	mov	r2, r7
 80189d6:	f107 030c 	add.w	r3, r7, #12
 80189da:	4611      	mov	r1, r2
 80189dc:	4618      	mov	r0, r3
 80189de:	f000 ff4b 	bl	8019878 <xTaskCheckForTimeOut>
 80189e2:	4603      	mov	r3, r0
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d132      	bne.n	8018a4e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80189e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80189ea:	f000 f94f 	bl	8018c8c <prvIsQueueEmpty>
 80189ee:	4603      	mov	r3, r0
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d026      	beq.n	8018a42 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80189f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d109      	bne.n	8018a10 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80189fc:	f001 feea 	bl	801a7d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a02:	689b      	ldr	r3, [r3, #8]
 8018a04:	4618      	mov	r0, r3
 8018a06:	f001 f8a9 	bl	8019b5c <xTaskPriorityInherit>
 8018a0a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8018a0c:	f001 ff12 	bl	801a834 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a12:	3324      	adds	r3, #36	; 0x24
 8018a14:	683a      	ldr	r2, [r7, #0]
 8018a16:	4611      	mov	r1, r2
 8018a18:	4618      	mov	r0, r3
 8018a1a:	f000 fe63 	bl	80196e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018a1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018a20:	f000 f8e2 	bl	8018be8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018a24:	f000 fc86 	bl	8019334 <xTaskResumeAll>
 8018a28:	4603      	mov	r3, r0
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	f47f af68 	bne.w	8018900 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8018a30:	4b18      	ldr	r3, [pc, #96]	; (8018a94 <xQueueSemaphoreTake+0x214>)
 8018a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018a36:	601a      	str	r2, [r3, #0]
 8018a38:	f3bf 8f4f 	dsb	sy
 8018a3c:	f3bf 8f6f 	isb	sy
 8018a40:	e75e      	b.n	8018900 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8018a42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018a44:	f000 f8d0 	bl	8018be8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018a48:	f000 fc74 	bl	8019334 <xTaskResumeAll>
 8018a4c:	e758      	b.n	8018900 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8018a4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018a50:	f000 f8ca 	bl	8018be8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018a54:	f000 fc6e 	bl	8019334 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018a58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018a5a:	f000 f917 	bl	8018c8c <prvIsQueueEmpty>
 8018a5e:	4603      	mov	r3, r0
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	f43f af4d 	beq.w	8018900 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8018a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d00d      	beq.n	8018a88 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8018a6c:	f001 feb2 	bl	801a7d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8018a70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018a72:	f000 f811 	bl	8018a98 <prvGetDisinheritPriorityAfterTimeout>
 8018a76:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8018a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a7a:	689b      	ldr	r3, [r3, #8]
 8018a7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018a7e:	4618      	mov	r0, r3
 8018a80:	f001 f942 	bl	8019d08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8018a84:	f001 fed6 	bl	801a834 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018a88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018a8a:	4618      	mov	r0, r3
 8018a8c:	3738      	adds	r7, #56	; 0x38
 8018a8e:	46bd      	mov	sp, r7
 8018a90:	bd80      	pop	{r7, pc}
 8018a92:	bf00      	nop
 8018a94:	e000ed04 	.word	0xe000ed04

08018a98 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8018a98:	b480      	push	{r7}
 8018a9a:	b085      	sub	sp, #20
 8018a9c:	af00      	add	r7, sp, #0
 8018a9e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d006      	beq.n	8018ab6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8018ab2:	60fb      	str	r3, [r7, #12]
 8018ab4:	e001      	b.n	8018aba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8018aba:	68fb      	ldr	r3, [r7, #12]
	}
 8018abc:	4618      	mov	r0, r3
 8018abe:	3714      	adds	r7, #20
 8018ac0:	46bd      	mov	sp, r7
 8018ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac6:	4770      	bx	lr

08018ac8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018ac8:	b580      	push	{r7, lr}
 8018aca:	b086      	sub	sp, #24
 8018acc:	af00      	add	r7, sp, #0
 8018ace:	60f8      	str	r0, [r7, #12]
 8018ad0:	60b9      	str	r1, [r7, #8]
 8018ad2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018ad4:	2300      	movs	r3, #0
 8018ad6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018ad8:	68fb      	ldr	r3, [r7, #12]
 8018ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018adc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d10d      	bne.n	8018b02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018ae6:	68fb      	ldr	r3, [r7, #12]
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d14d      	bne.n	8018b8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	689b      	ldr	r3, [r3, #8]
 8018af2:	4618      	mov	r0, r3
 8018af4:	f001 f89a 	bl	8019c2c <xTaskPriorityDisinherit>
 8018af8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	2200      	movs	r2, #0
 8018afe:	609a      	str	r2, [r3, #8]
 8018b00:	e043      	b.n	8018b8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d119      	bne.n	8018b3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018b08:	68fb      	ldr	r3, [r7, #12]
 8018b0a:	6858      	ldr	r0, [r3, #4]
 8018b0c:	68fb      	ldr	r3, [r7, #12]
 8018b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b10:	461a      	mov	r2, r3
 8018b12:	68b9      	ldr	r1, [r7, #8]
 8018b14:	f002 ff46 	bl	801b9a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	685a      	ldr	r2, [r3, #4]
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b20:	441a      	add	r2, r3
 8018b22:	68fb      	ldr	r3, [r7, #12]
 8018b24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	685a      	ldr	r2, [r3, #4]
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	689b      	ldr	r3, [r3, #8]
 8018b2e:	429a      	cmp	r2, r3
 8018b30:	d32b      	bcc.n	8018b8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	681a      	ldr	r2, [r3, #0]
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	605a      	str	r2, [r3, #4]
 8018b3a:	e026      	b.n	8018b8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8018b3c:	68fb      	ldr	r3, [r7, #12]
 8018b3e:	68d8      	ldr	r0, [r3, #12]
 8018b40:	68fb      	ldr	r3, [r7, #12]
 8018b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b44:	461a      	mov	r2, r3
 8018b46:	68b9      	ldr	r1, [r7, #8]
 8018b48:	f002 ff2c 	bl	801b9a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	68da      	ldr	r2, [r3, #12]
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b54:	425b      	negs	r3, r3
 8018b56:	441a      	add	r2, r3
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	68da      	ldr	r2, [r3, #12]
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	429a      	cmp	r2, r3
 8018b66:	d207      	bcs.n	8018b78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	689a      	ldr	r2, [r3, #8]
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b70:	425b      	negs	r3, r3
 8018b72:	441a      	add	r2, r3
 8018b74:	68fb      	ldr	r3, [r7, #12]
 8018b76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	2b02      	cmp	r3, #2
 8018b7c:	d105      	bne.n	8018b8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018b7e:	693b      	ldr	r3, [r7, #16]
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d002      	beq.n	8018b8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8018b84:	693b      	ldr	r3, [r7, #16]
 8018b86:	3b01      	subs	r3, #1
 8018b88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018b8a:	693b      	ldr	r3, [r7, #16]
 8018b8c:	1c5a      	adds	r2, r3, #1
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8018b92:	697b      	ldr	r3, [r7, #20]
}
 8018b94:	4618      	mov	r0, r3
 8018b96:	3718      	adds	r7, #24
 8018b98:	46bd      	mov	sp, r7
 8018b9a:	bd80      	pop	{r7, pc}

08018b9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b082      	sub	sp, #8
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	6078      	str	r0, [r7, #4]
 8018ba4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d018      	beq.n	8018be0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	68da      	ldr	r2, [r3, #12]
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bb6:	441a      	add	r2, r3
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	68da      	ldr	r2, [r3, #12]
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	689b      	ldr	r3, [r3, #8]
 8018bc4:	429a      	cmp	r2, r3
 8018bc6:	d303      	bcc.n	8018bd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	681a      	ldr	r2, [r3, #0]
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	68d9      	ldr	r1, [r3, #12]
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bd8:	461a      	mov	r2, r3
 8018bda:	6838      	ldr	r0, [r7, #0]
 8018bdc:	f002 fee2 	bl	801b9a4 <memcpy>
	}
}
 8018be0:	bf00      	nop
 8018be2:	3708      	adds	r7, #8
 8018be4:	46bd      	mov	sp, r7
 8018be6:	bd80      	pop	{r7, pc}

08018be8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018be8:	b580      	push	{r7, lr}
 8018bea:	b084      	sub	sp, #16
 8018bec:	af00      	add	r7, sp, #0
 8018bee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018bf0:	f001 fdf0 	bl	801a7d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018bfa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018bfc:	e011      	b.n	8018c22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d012      	beq.n	8018c2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	3324      	adds	r3, #36	; 0x24
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	f000 fdba 	bl	8019784 <xTaskRemoveFromEventList>
 8018c10:	4603      	mov	r3, r0
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d001      	beq.n	8018c1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8018c16:	f000 fe91 	bl	801993c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8018c1a:	7bfb      	ldrb	r3, [r7, #15]
 8018c1c:	3b01      	subs	r3, #1
 8018c1e:	b2db      	uxtb	r3, r3
 8018c20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	dce9      	bgt.n	8018bfe <prvUnlockQueue+0x16>
 8018c2a:	e000      	b.n	8018c2e <prvUnlockQueue+0x46>
					break;
 8018c2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	22ff      	movs	r2, #255	; 0xff
 8018c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8018c36:	f001 fdfd 	bl	801a834 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8018c3a:	f001 fdcb 	bl	801a7d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018c44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018c46:	e011      	b.n	8018c6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	691b      	ldr	r3, [r3, #16]
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d012      	beq.n	8018c76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	3310      	adds	r3, #16
 8018c54:	4618      	mov	r0, r3
 8018c56:	f000 fd95 	bl	8019784 <xTaskRemoveFromEventList>
 8018c5a:	4603      	mov	r3, r0
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d001      	beq.n	8018c64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8018c60:	f000 fe6c 	bl	801993c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8018c64:	7bbb      	ldrb	r3, [r7, #14]
 8018c66:	3b01      	subs	r3, #1
 8018c68:	b2db      	uxtb	r3, r3
 8018c6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	dce9      	bgt.n	8018c48 <prvUnlockQueue+0x60>
 8018c74:	e000      	b.n	8018c78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8018c76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	22ff      	movs	r2, #255	; 0xff
 8018c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8018c80:	f001 fdd8 	bl	801a834 <vPortExitCritical>
}
 8018c84:	bf00      	nop
 8018c86:	3710      	adds	r7, #16
 8018c88:	46bd      	mov	sp, r7
 8018c8a:	bd80      	pop	{r7, pc}

08018c8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8018c8c:	b580      	push	{r7, lr}
 8018c8e:	b084      	sub	sp, #16
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018c94:	f001 fd9e 	bl	801a7d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d102      	bne.n	8018ca6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8018ca0:	2301      	movs	r3, #1
 8018ca2:	60fb      	str	r3, [r7, #12]
 8018ca4:	e001      	b.n	8018caa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8018ca6:	2300      	movs	r3, #0
 8018ca8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018caa:	f001 fdc3 	bl	801a834 <vPortExitCritical>

	return xReturn;
 8018cae:	68fb      	ldr	r3, [r7, #12]
}
 8018cb0:	4618      	mov	r0, r3
 8018cb2:	3710      	adds	r7, #16
 8018cb4:	46bd      	mov	sp, r7
 8018cb6:	bd80      	pop	{r7, pc}

08018cb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	b084      	sub	sp, #16
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018cc0:	f001 fd88 	bl	801a7d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ccc:	429a      	cmp	r2, r3
 8018cce:	d102      	bne.n	8018cd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018cd0:	2301      	movs	r3, #1
 8018cd2:	60fb      	str	r3, [r7, #12]
 8018cd4:	e001      	b.n	8018cda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8018cd6:	2300      	movs	r3, #0
 8018cd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018cda:	f001 fdab 	bl	801a834 <vPortExitCritical>

	return xReturn;
 8018cde:	68fb      	ldr	r3, [r7, #12]
}
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	3710      	adds	r7, #16
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	bd80      	pop	{r7, pc}

08018ce8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018ce8:	b480      	push	{r7}
 8018cea:	b085      	sub	sp, #20
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	6078      	str	r0, [r7, #4]
 8018cf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018cf2:	2300      	movs	r3, #0
 8018cf4:	60fb      	str	r3, [r7, #12]
 8018cf6:	e014      	b.n	8018d22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018cf8:	4a0f      	ldr	r2, [pc, #60]	; (8018d38 <vQueueAddToRegistry+0x50>)
 8018cfa:	68fb      	ldr	r3, [r7, #12]
 8018cfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d10b      	bne.n	8018d1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018d04:	490c      	ldr	r1, [pc, #48]	; (8018d38 <vQueueAddToRegistry+0x50>)
 8018d06:	68fb      	ldr	r3, [r7, #12]
 8018d08:	683a      	ldr	r2, [r7, #0]
 8018d0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8018d0e:	4a0a      	ldr	r2, [pc, #40]	; (8018d38 <vQueueAddToRegistry+0x50>)
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	00db      	lsls	r3, r3, #3
 8018d14:	4413      	add	r3, r2
 8018d16:	687a      	ldr	r2, [r7, #4]
 8018d18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8018d1a:	e006      	b.n	8018d2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018d1c:	68fb      	ldr	r3, [r7, #12]
 8018d1e:	3301      	adds	r3, #1
 8018d20:	60fb      	str	r3, [r7, #12]
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	2b07      	cmp	r3, #7
 8018d26:	d9e7      	bls.n	8018cf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018d28:	bf00      	nop
 8018d2a:	bf00      	nop
 8018d2c:	3714      	adds	r7, #20
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d34:	4770      	bx	lr
 8018d36:	bf00      	nop
 8018d38:	20007514 	.word	0x20007514

08018d3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018d3c:	b580      	push	{r7, lr}
 8018d3e:	b086      	sub	sp, #24
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	60f8      	str	r0, [r7, #12]
 8018d44:	60b9      	str	r1, [r7, #8]
 8018d46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8018d4c:	f001 fd42 	bl	801a7d4 <vPortEnterCritical>
 8018d50:	697b      	ldr	r3, [r7, #20]
 8018d52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018d56:	b25b      	sxtb	r3, r3
 8018d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d5c:	d103      	bne.n	8018d66 <vQueueWaitForMessageRestricted+0x2a>
 8018d5e:	697b      	ldr	r3, [r7, #20]
 8018d60:	2200      	movs	r2, #0
 8018d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018d66:	697b      	ldr	r3, [r7, #20]
 8018d68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018d6c:	b25b      	sxtb	r3, r3
 8018d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d72:	d103      	bne.n	8018d7c <vQueueWaitForMessageRestricted+0x40>
 8018d74:	697b      	ldr	r3, [r7, #20]
 8018d76:	2200      	movs	r2, #0
 8018d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018d7c:	f001 fd5a 	bl	801a834 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018d80:	697b      	ldr	r3, [r7, #20]
 8018d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	d106      	bne.n	8018d96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018d88:	697b      	ldr	r3, [r7, #20]
 8018d8a:	3324      	adds	r3, #36	; 0x24
 8018d8c:	687a      	ldr	r2, [r7, #4]
 8018d8e:	68b9      	ldr	r1, [r7, #8]
 8018d90:	4618      	mov	r0, r3
 8018d92:	f000 fccb 	bl	801972c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8018d96:	6978      	ldr	r0, [r7, #20]
 8018d98:	f7ff ff26 	bl	8018be8 <prvUnlockQueue>
	}
 8018d9c:	bf00      	nop
 8018d9e:	3718      	adds	r7, #24
 8018da0:	46bd      	mov	sp, r7
 8018da2:	bd80      	pop	{r7, pc}

08018da4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b08e      	sub	sp, #56	; 0x38
 8018da8:	af04      	add	r7, sp, #16
 8018daa:	60f8      	str	r0, [r7, #12]
 8018dac:	60b9      	str	r1, [r7, #8]
 8018dae:	607a      	str	r2, [r7, #4]
 8018db0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8018db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d10a      	bne.n	8018dce <xTaskCreateStatic+0x2a>
	__asm volatile
 8018db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dbc:	f383 8811 	msr	BASEPRI, r3
 8018dc0:	f3bf 8f6f 	isb	sy
 8018dc4:	f3bf 8f4f 	dsb	sy
 8018dc8:	623b      	str	r3, [r7, #32]
}
 8018dca:	bf00      	nop
 8018dcc:	e7fe      	b.n	8018dcc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8018dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d10a      	bne.n	8018dea <xTaskCreateStatic+0x46>
	__asm volatile
 8018dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dd8:	f383 8811 	msr	BASEPRI, r3
 8018ddc:	f3bf 8f6f 	isb	sy
 8018de0:	f3bf 8f4f 	dsb	sy
 8018de4:	61fb      	str	r3, [r7, #28]
}
 8018de6:	bf00      	nop
 8018de8:	e7fe      	b.n	8018de8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8018dea:	235c      	movs	r3, #92	; 0x5c
 8018dec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8018dee:	693b      	ldr	r3, [r7, #16]
 8018df0:	2b5c      	cmp	r3, #92	; 0x5c
 8018df2:	d00a      	beq.n	8018e0a <xTaskCreateStatic+0x66>
	__asm volatile
 8018df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018df8:	f383 8811 	msr	BASEPRI, r3
 8018dfc:	f3bf 8f6f 	isb	sy
 8018e00:	f3bf 8f4f 	dsb	sy
 8018e04:	61bb      	str	r3, [r7, #24]
}
 8018e06:	bf00      	nop
 8018e08:	e7fe      	b.n	8018e08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8018e0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8018e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	d01e      	beq.n	8018e50 <xTaskCreateStatic+0xac>
 8018e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d01b      	beq.n	8018e50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018e20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8018e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e24:	2202      	movs	r2, #2
 8018e26:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8018e2a:	2300      	movs	r3, #0
 8018e2c:	9303      	str	r3, [sp, #12]
 8018e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e30:	9302      	str	r3, [sp, #8]
 8018e32:	f107 0314 	add.w	r3, r7, #20
 8018e36:	9301      	str	r3, [sp, #4]
 8018e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e3a:	9300      	str	r3, [sp, #0]
 8018e3c:	683b      	ldr	r3, [r7, #0]
 8018e3e:	687a      	ldr	r2, [r7, #4]
 8018e40:	68b9      	ldr	r1, [r7, #8]
 8018e42:	68f8      	ldr	r0, [r7, #12]
 8018e44:	f000 f850 	bl	8018ee8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018e48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018e4a:	f000 f8dd 	bl	8019008 <prvAddNewTaskToReadyList>
 8018e4e:	e001      	b.n	8018e54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8018e50:	2300      	movs	r3, #0
 8018e52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8018e54:	697b      	ldr	r3, [r7, #20]
	}
 8018e56:	4618      	mov	r0, r3
 8018e58:	3728      	adds	r7, #40	; 0x28
 8018e5a:	46bd      	mov	sp, r7
 8018e5c:	bd80      	pop	{r7, pc}

08018e5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8018e5e:	b580      	push	{r7, lr}
 8018e60:	b08c      	sub	sp, #48	; 0x30
 8018e62:	af04      	add	r7, sp, #16
 8018e64:	60f8      	str	r0, [r7, #12]
 8018e66:	60b9      	str	r1, [r7, #8]
 8018e68:	603b      	str	r3, [r7, #0]
 8018e6a:	4613      	mov	r3, r2
 8018e6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018e6e:	88fb      	ldrh	r3, [r7, #6]
 8018e70:	009b      	lsls	r3, r3, #2
 8018e72:	4618      	mov	r0, r3
 8018e74:	f001 fdd0 	bl	801aa18 <pvPortMalloc>
 8018e78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8018e7a:	697b      	ldr	r3, [r7, #20]
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d00e      	beq.n	8018e9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018e80:	205c      	movs	r0, #92	; 0x5c
 8018e82:	f001 fdc9 	bl	801aa18 <pvPortMalloc>
 8018e86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8018e88:	69fb      	ldr	r3, [r7, #28]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d003      	beq.n	8018e96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8018e8e:	69fb      	ldr	r3, [r7, #28]
 8018e90:	697a      	ldr	r2, [r7, #20]
 8018e92:	631a      	str	r2, [r3, #48]	; 0x30
 8018e94:	e005      	b.n	8018ea2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8018e96:	6978      	ldr	r0, [r7, #20]
 8018e98:	f001 fe8a 	bl	801abb0 <vPortFree>
 8018e9c:	e001      	b.n	8018ea2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8018e9e:	2300      	movs	r3, #0
 8018ea0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8018ea2:	69fb      	ldr	r3, [r7, #28]
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d017      	beq.n	8018ed8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8018ea8:	69fb      	ldr	r3, [r7, #28]
 8018eaa:	2200      	movs	r2, #0
 8018eac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018eb0:	88fa      	ldrh	r2, [r7, #6]
 8018eb2:	2300      	movs	r3, #0
 8018eb4:	9303      	str	r3, [sp, #12]
 8018eb6:	69fb      	ldr	r3, [r7, #28]
 8018eb8:	9302      	str	r3, [sp, #8]
 8018eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ebc:	9301      	str	r3, [sp, #4]
 8018ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ec0:	9300      	str	r3, [sp, #0]
 8018ec2:	683b      	ldr	r3, [r7, #0]
 8018ec4:	68b9      	ldr	r1, [r7, #8]
 8018ec6:	68f8      	ldr	r0, [r7, #12]
 8018ec8:	f000 f80e 	bl	8018ee8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018ecc:	69f8      	ldr	r0, [r7, #28]
 8018ece:	f000 f89b 	bl	8019008 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018ed2:	2301      	movs	r3, #1
 8018ed4:	61bb      	str	r3, [r7, #24]
 8018ed6:	e002      	b.n	8018ede <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8018edc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018ede:	69bb      	ldr	r3, [r7, #24]
	}
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	3720      	adds	r7, #32
 8018ee4:	46bd      	mov	sp, r7
 8018ee6:	bd80      	pop	{r7, pc}

08018ee8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	b088      	sub	sp, #32
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	60f8      	str	r0, [r7, #12]
 8018ef0:	60b9      	str	r1, [r7, #8]
 8018ef2:	607a      	str	r2, [r7, #4]
 8018ef4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ef8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	009b      	lsls	r3, r3, #2
 8018efe:	461a      	mov	r2, r3
 8018f00:	21a5      	movs	r1, #165	; 0xa5
 8018f02:	f002 fd5d 	bl	801b9c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8018f10:	3b01      	subs	r3, #1
 8018f12:	009b      	lsls	r3, r3, #2
 8018f14:	4413      	add	r3, r2
 8018f16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018f18:	69bb      	ldr	r3, [r7, #24]
 8018f1a:	f023 0307 	bic.w	r3, r3, #7
 8018f1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018f20:	69bb      	ldr	r3, [r7, #24]
 8018f22:	f003 0307 	and.w	r3, r3, #7
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d00a      	beq.n	8018f40 <prvInitialiseNewTask+0x58>
	__asm volatile
 8018f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f2e:	f383 8811 	msr	BASEPRI, r3
 8018f32:	f3bf 8f6f 	isb	sy
 8018f36:	f3bf 8f4f 	dsb	sy
 8018f3a:	617b      	str	r3, [r7, #20]
}
 8018f3c:	bf00      	nop
 8018f3e:	e7fe      	b.n	8018f3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018f40:	68bb      	ldr	r3, [r7, #8]
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d01f      	beq.n	8018f86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018f46:	2300      	movs	r3, #0
 8018f48:	61fb      	str	r3, [r7, #28]
 8018f4a:	e012      	b.n	8018f72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018f4c:	68ba      	ldr	r2, [r7, #8]
 8018f4e:	69fb      	ldr	r3, [r7, #28]
 8018f50:	4413      	add	r3, r2
 8018f52:	7819      	ldrb	r1, [r3, #0]
 8018f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018f56:	69fb      	ldr	r3, [r7, #28]
 8018f58:	4413      	add	r3, r2
 8018f5a:	3334      	adds	r3, #52	; 0x34
 8018f5c:	460a      	mov	r2, r1
 8018f5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018f60:	68ba      	ldr	r2, [r7, #8]
 8018f62:	69fb      	ldr	r3, [r7, #28]
 8018f64:	4413      	add	r3, r2
 8018f66:	781b      	ldrb	r3, [r3, #0]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d006      	beq.n	8018f7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018f6c:	69fb      	ldr	r3, [r7, #28]
 8018f6e:	3301      	adds	r3, #1
 8018f70:	61fb      	str	r3, [r7, #28]
 8018f72:	69fb      	ldr	r3, [r7, #28]
 8018f74:	2b0f      	cmp	r3, #15
 8018f76:	d9e9      	bls.n	8018f4c <prvInitialiseNewTask+0x64>
 8018f78:	e000      	b.n	8018f7c <prvInitialiseNewTask+0x94>
			{
				break;
 8018f7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f7e:	2200      	movs	r2, #0
 8018f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018f84:	e003      	b.n	8018f8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f88:	2200      	movs	r2, #0
 8018f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f90:	2b37      	cmp	r3, #55	; 0x37
 8018f92:	d901      	bls.n	8018f98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018f94:	2337      	movs	r3, #55	; 0x37
 8018f96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018f9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8018f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018fa2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fa6:	2200      	movs	r2, #0
 8018fa8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8018faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fac:	3304      	adds	r3, #4
 8018fae:	4618      	mov	r0, r3
 8018fb0:	f7fe ff64 	bl	8017e7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fb6:	3318      	adds	r3, #24
 8018fb8:	4618      	mov	r0, r3
 8018fba:	f7fe ff5f 	bl	8017e7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018fc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018fd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fd6:	2200      	movs	r2, #0
 8018fd8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fdc:	2200      	movs	r2, #0
 8018fde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018fe2:	683a      	ldr	r2, [r7, #0]
 8018fe4:	68f9      	ldr	r1, [r7, #12]
 8018fe6:	69b8      	ldr	r0, [r7, #24]
 8018fe8:	f001 fac6 	bl	801a578 <pxPortInitialiseStack>
 8018fec:	4602      	mov	r2, r0
 8018fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ff0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8018ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d002      	beq.n	8018ffe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018ffc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018ffe:	bf00      	nop
 8019000:	3720      	adds	r7, #32
 8019002:	46bd      	mov	sp, r7
 8019004:	bd80      	pop	{r7, pc}
	...

08019008 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8019008:	b580      	push	{r7, lr}
 801900a:	b082      	sub	sp, #8
 801900c:	af00      	add	r7, sp, #0
 801900e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8019010:	f001 fbe0 	bl	801a7d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8019014:	4b2d      	ldr	r3, [pc, #180]	; (80190cc <prvAddNewTaskToReadyList+0xc4>)
 8019016:	681b      	ldr	r3, [r3, #0]
 8019018:	3301      	adds	r3, #1
 801901a:	4a2c      	ldr	r2, [pc, #176]	; (80190cc <prvAddNewTaskToReadyList+0xc4>)
 801901c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801901e:	4b2c      	ldr	r3, [pc, #176]	; (80190d0 <prvAddNewTaskToReadyList+0xc8>)
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	2b00      	cmp	r3, #0
 8019024:	d109      	bne.n	801903a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8019026:	4a2a      	ldr	r2, [pc, #168]	; (80190d0 <prvAddNewTaskToReadyList+0xc8>)
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801902c:	4b27      	ldr	r3, [pc, #156]	; (80190cc <prvAddNewTaskToReadyList+0xc4>)
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	2b01      	cmp	r3, #1
 8019032:	d110      	bne.n	8019056 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8019034:	f000 fca6 	bl	8019984 <prvInitialiseTaskLists>
 8019038:	e00d      	b.n	8019056 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801903a:	4b26      	ldr	r3, [pc, #152]	; (80190d4 <prvAddNewTaskToReadyList+0xcc>)
 801903c:	681b      	ldr	r3, [r3, #0]
 801903e:	2b00      	cmp	r3, #0
 8019040:	d109      	bne.n	8019056 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019042:	4b23      	ldr	r3, [pc, #140]	; (80190d0 <prvAddNewTaskToReadyList+0xc8>)
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801904c:	429a      	cmp	r2, r3
 801904e:	d802      	bhi.n	8019056 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8019050:	4a1f      	ldr	r2, [pc, #124]	; (80190d0 <prvAddNewTaskToReadyList+0xc8>)
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8019056:	4b20      	ldr	r3, [pc, #128]	; (80190d8 <prvAddNewTaskToReadyList+0xd0>)
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	3301      	adds	r3, #1
 801905c:	4a1e      	ldr	r2, [pc, #120]	; (80190d8 <prvAddNewTaskToReadyList+0xd0>)
 801905e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8019060:	4b1d      	ldr	r3, [pc, #116]	; (80190d8 <prvAddNewTaskToReadyList+0xd0>)
 8019062:	681a      	ldr	r2, [r3, #0]
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801906c:	4b1b      	ldr	r3, [pc, #108]	; (80190dc <prvAddNewTaskToReadyList+0xd4>)
 801906e:	681b      	ldr	r3, [r3, #0]
 8019070:	429a      	cmp	r2, r3
 8019072:	d903      	bls.n	801907c <prvAddNewTaskToReadyList+0x74>
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019078:	4a18      	ldr	r2, [pc, #96]	; (80190dc <prvAddNewTaskToReadyList+0xd4>)
 801907a:	6013      	str	r3, [r2, #0]
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019080:	4613      	mov	r3, r2
 8019082:	009b      	lsls	r3, r3, #2
 8019084:	4413      	add	r3, r2
 8019086:	009b      	lsls	r3, r3, #2
 8019088:	4a15      	ldr	r2, [pc, #84]	; (80190e0 <prvAddNewTaskToReadyList+0xd8>)
 801908a:	441a      	add	r2, r3
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	3304      	adds	r3, #4
 8019090:	4619      	mov	r1, r3
 8019092:	4610      	mov	r0, r2
 8019094:	f7fe feff 	bl	8017e96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8019098:	f001 fbcc 	bl	801a834 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801909c:	4b0d      	ldr	r3, [pc, #52]	; (80190d4 <prvAddNewTaskToReadyList+0xcc>)
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d00e      	beq.n	80190c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80190a4:	4b0a      	ldr	r3, [pc, #40]	; (80190d0 <prvAddNewTaskToReadyList+0xc8>)
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190ae:	429a      	cmp	r2, r3
 80190b0:	d207      	bcs.n	80190c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80190b2:	4b0c      	ldr	r3, [pc, #48]	; (80190e4 <prvAddNewTaskToReadyList+0xdc>)
 80190b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80190b8:	601a      	str	r2, [r3, #0]
 80190ba:	f3bf 8f4f 	dsb	sy
 80190be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80190c2:	bf00      	nop
 80190c4:	3708      	adds	r7, #8
 80190c6:	46bd      	mov	sp, r7
 80190c8:	bd80      	pop	{r7, pc}
 80190ca:	bf00      	nop
 80190cc:	200011d0 	.word	0x200011d0
 80190d0:	20000cfc 	.word	0x20000cfc
 80190d4:	200011dc 	.word	0x200011dc
 80190d8:	200011ec 	.word	0x200011ec
 80190dc:	200011d8 	.word	0x200011d8
 80190e0:	20000d00 	.word	0x20000d00
 80190e4:	e000ed04 	.word	0xe000ed04

080190e8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80190e8:	b580      	push	{r7, lr}
 80190ea:	b08a      	sub	sp, #40	; 0x28
 80190ec:	af00      	add	r7, sp, #0
 80190ee:	6078      	str	r0, [r7, #4]
 80190f0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80190f2:	2300      	movs	r3, #0
 80190f4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d10a      	bne.n	8019112 <vTaskDelayUntil+0x2a>
	__asm volatile
 80190fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019100:	f383 8811 	msr	BASEPRI, r3
 8019104:	f3bf 8f6f 	isb	sy
 8019108:	f3bf 8f4f 	dsb	sy
 801910c:	617b      	str	r3, [r7, #20]
}
 801910e:	bf00      	nop
 8019110:	e7fe      	b.n	8019110 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8019112:	683b      	ldr	r3, [r7, #0]
 8019114:	2b00      	cmp	r3, #0
 8019116:	d10a      	bne.n	801912e <vTaskDelayUntil+0x46>
	__asm volatile
 8019118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801911c:	f383 8811 	msr	BASEPRI, r3
 8019120:	f3bf 8f6f 	isb	sy
 8019124:	f3bf 8f4f 	dsb	sy
 8019128:	613b      	str	r3, [r7, #16]
}
 801912a:	bf00      	nop
 801912c:	e7fe      	b.n	801912c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 801912e:	4b2a      	ldr	r3, [pc, #168]	; (80191d8 <vTaskDelayUntil+0xf0>)
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	2b00      	cmp	r3, #0
 8019134:	d00a      	beq.n	801914c <vTaskDelayUntil+0x64>
	__asm volatile
 8019136:	f04f 0350 	mov.w	r3, #80	; 0x50
 801913a:	f383 8811 	msr	BASEPRI, r3
 801913e:	f3bf 8f6f 	isb	sy
 8019142:	f3bf 8f4f 	dsb	sy
 8019146:	60fb      	str	r3, [r7, #12]
}
 8019148:	bf00      	nop
 801914a:	e7fe      	b.n	801914a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 801914c:	f000 f8e4 	bl	8019318 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8019150:	4b22      	ldr	r3, [pc, #136]	; (80191dc <vTaskDelayUntil+0xf4>)
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	683a      	ldr	r2, [r7, #0]
 801915c:	4413      	add	r3, r2
 801915e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	6a3a      	ldr	r2, [r7, #32]
 8019166:	429a      	cmp	r2, r3
 8019168:	d20b      	bcs.n	8019182 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	69fa      	ldr	r2, [r7, #28]
 8019170:	429a      	cmp	r2, r3
 8019172:	d211      	bcs.n	8019198 <vTaskDelayUntil+0xb0>
 8019174:	69fa      	ldr	r2, [r7, #28]
 8019176:	6a3b      	ldr	r3, [r7, #32]
 8019178:	429a      	cmp	r2, r3
 801917a:	d90d      	bls.n	8019198 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 801917c:	2301      	movs	r3, #1
 801917e:	627b      	str	r3, [r7, #36]	; 0x24
 8019180:	e00a      	b.n	8019198 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	69fa      	ldr	r2, [r7, #28]
 8019188:	429a      	cmp	r2, r3
 801918a:	d303      	bcc.n	8019194 <vTaskDelayUntil+0xac>
 801918c:	69fa      	ldr	r2, [r7, #28]
 801918e:	6a3b      	ldr	r3, [r7, #32]
 8019190:	429a      	cmp	r2, r3
 8019192:	d901      	bls.n	8019198 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8019194:	2301      	movs	r3, #1
 8019196:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	69fa      	ldr	r2, [r7, #28]
 801919c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	d006      	beq.n	80191b2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80191a4:	69fa      	ldr	r2, [r7, #28]
 80191a6:	6a3b      	ldr	r3, [r7, #32]
 80191a8:	1ad3      	subs	r3, r2, r3
 80191aa:	2100      	movs	r1, #0
 80191ac:	4618      	mov	r0, r3
 80191ae:	f000 fe41 	bl	8019e34 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80191b2:	f000 f8bf 	bl	8019334 <xTaskResumeAll>
 80191b6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80191b8:	69bb      	ldr	r3, [r7, #24]
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d107      	bne.n	80191ce <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80191be:	4b08      	ldr	r3, [pc, #32]	; (80191e0 <vTaskDelayUntil+0xf8>)
 80191c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80191c4:	601a      	str	r2, [r3, #0]
 80191c6:	f3bf 8f4f 	dsb	sy
 80191ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80191ce:	bf00      	nop
 80191d0:	3728      	adds	r7, #40	; 0x28
 80191d2:	46bd      	mov	sp, r7
 80191d4:	bd80      	pop	{r7, pc}
 80191d6:	bf00      	nop
 80191d8:	200011f8 	.word	0x200011f8
 80191dc:	200011d4 	.word	0x200011d4
 80191e0:	e000ed04 	.word	0xe000ed04

080191e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80191e4:	b580      	push	{r7, lr}
 80191e6:	b084      	sub	sp, #16
 80191e8:	af00      	add	r7, sp, #0
 80191ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80191ec:	2300      	movs	r3, #0
 80191ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d017      	beq.n	8019226 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80191f6:	4b13      	ldr	r3, [pc, #76]	; (8019244 <vTaskDelay+0x60>)
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	d00a      	beq.n	8019214 <vTaskDelay+0x30>
	__asm volatile
 80191fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019202:	f383 8811 	msr	BASEPRI, r3
 8019206:	f3bf 8f6f 	isb	sy
 801920a:	f3bf 8f4f 	dsb	sy
 801920e:	60bb      	str	r3, [r7, #8]
}
 8019210:	bf00      	nop
 8019212:	e7fe      	b.n	8019212 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8019214:	f000 f880 	bl	8019318 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8019218:	2100      	movs	r1, #0
 801921a:	6878      	ldr	r0, [r7, #4]
 801921c:	f000 fe0a 	bl	8019e34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8019220:	f000 f888 	bl	8019334 <xTaskResumeAll>
 8019224:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8019226:	68fb      	ldr	r3, [r7, #12]
 8019228:	2b00      	cmp	r3, #0
 801922a:	d107      	bne.n	801923c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801922c:	4b06      	ldr	r3, [pc, #24]	; (8019248 <vTaskDelay+0x64>)
 801922e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019232:	601a      	str	r2, [r3, #0]
 8019234:	f3bf 8f4f 	dsb	sy
 8019238:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801923c:	bf00      	nop
 801923e:	3710      	adds	r7, #16
 8019240:	46bd      	mov	sp, r7
 8019242:	bd80      	pop	{r7, pc}
 8019244:	200011f8 	.word	0x200011f8
 8019248:	e000ed04 	.word	0xe000ed04

0801924c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801924c:	b580      	push	{r7, lr}
 801924e:	b08a      	sub	sp, #40	; 0x28
 8019250:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019252:	2300      	movs	r3, #0
 8019254:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8019256:	2300      	movs	r3, #0
 8019258:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801925a:	463a      	mov	r2, r7
 801925c:	1d39      	adds	r1, r7, #4
 801925e:	f107 0308 	add.w	r3, r7, #8
 8019262:	4618      	mov	r0, r3
 8019264:	f7fe fdb6 	bl	8017dd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019268:	6839      	ldr	r1, [r7, #0]
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	68ba      	ldr	r2, [r7, #8]
 801926e:	9202      	str	r2, [sp, #8]
 8019270:	9301      	str	r3, [sp, #4]
 8019272:	2300      	movs	r3, #0
 8019274:	9300      	str	r3, [sp, #0]
 8019276:	2300      	movs	r3, #0
 8019278:	460a      	mov	r2, r1
 801927a:	4921      	ldr	r1, [pc, #132]	; (8019300 <vTaskStartScheduler+0xb4>)
 801927c:	4821      	ldr	r0, [pc, #132]	; (8019304 <vTaskStartScheduler+0xb8>)
 801927e:	f7ff fd91 	bl	8018da4 <xTaskCreateStatic>
 8019282:	4603      	mov	r3, r0
 8019284:	4a20      	ldr	r2, [pc, #128]	; (8019308 <vTaskStartScheduler+0xbc>)
 8019286:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8019288:	4b1f      	ldr	r3, [pc, #124]	; (8019308 <vTaskStartScheduler+0xbc>)
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	2b00      	cmp	r3, #0
 801928e:	d002      	beq.n	8019296 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8019290:	2301      	movs	r3, #1
 8019292:	617b      	str	r3, [r7, #20]
 8019294:	e001      	b.n	801929a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8019296:	2300      	movs	r3, #0
 8019298:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801929a:	697b      	ldr	r3, [r7, #20]
 801929c:	2b01      	cmp	r3, #1
 801929e:	d102      	bne.n	80192a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80192a0:	f000 fe1c 	bl	8019edc <xTimerCreateTimerTask>
 80192a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80192a6:	697b      	ldr	r3, [r7, #20]
 80192a8:	2b01      	cmp	r3, #1
 80192aa:	d116      	bne.n	80192da <vTaskStartScheduler+0x8e>
	__asm volatile
 80192ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192b0:	f383 8811 	msr	BASEPRI, r3
 80192b4:	f3bf 8f6f 	isb	sy
 80192b8:	f3bf 8f4f 	dsb	sy
 80192bc:	613b      	str	r3, [r7, #16]
}
 80192be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80192c0:	4b12      	ldr	r3, [pc, #72]	; (801930c <vTaskStartScheduler+0xc0>)
 80192c2:	f04f 32ff 	mov.w	r2, #4294967295
 80192c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80192c8:	4b11      	ldr	r3, [pc, #68]	; (8019310 <vTaskStartScheduler+0xc4>)
 80192ca:	2201      	movs	r2, #1
 80192cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80192ce:	4b11      	ldr	r3, [pc, #68]	; (8019314 <vTaskStartScheduler+0xc8>)
 80192d0:	2200      	movs	r2, #0
 80192d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80192d4:	f001 f9dc 	bl	801a690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80192d8:	e00e      	b.n	80192f8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80192da:	697b      	ldr	r3, [r7, #20]
 80192dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80192e0:	d10a      	bne.n	80192f8 <vTaskStartScheduler+0xac>
	__asm volatile
 80192e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192e6:	f383 8811 	msr	BASEPRI, r3
 80192ea:	f3bf 8f6f 	isb	sy
 80192ee:	f3bf 8f4f 	dsb	sy
 80192f2:	60fb      	str	r3, [r7, #12]
}
 80192f4:	bf00      	nop
 80192f6:	e7fe      	b.n	80192f6 <vTaskStartScheduler+0xaa>
}
 80192f8:	bf00      	nop
 80192fa:	3718      	adds	r7, #24
 80192fc:	46bd      	mov	sp, r7
 80192fe:	bd80      	pop	{r7, pc}
 8019300:	0801cd24 	.word	0x0801cd24
 8019304:	08019955 	.word	0x08019955
 8019308:	200011f4 	.word	0x200011f4
 801930c:	200011f0 	.word	0x200011f0
 8019310:	200011dc 	.word	0x200011dc
 8019314:	200011d4 	.word	0x200011d4

08019318 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8019318:	b480      	push	{r7}
 801931a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801931c:	4b04      	ldr	r3, [pc, #16]	; (8019330 <vTaskSuspendAll+0x18>)
 801931e:	681b      	ldr	r3, [r3, #0]
 8019320:	3301      	adds	r3, #1
 8019322:	4a03      	ldr	r2, [pc, #12]	; (8019330 <vTaskSuspendAll+0x18>)
 8019324:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8019326:	bf00      	nop
 8019328:	46bd      	mov	sp, r7
 801932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801932e:	4770      	bx	lr
 8019330:	200011f8 	.word	0x200011f8

08019334 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8019334:	b580      	push	{r7, lr}
 8019336:	b084      	sub	sp, #16
 8019338:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801933a:	2300      	movs	r3, #0
 801933c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801933e:	2300      	movs	r3, #0
 8019340:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8019342:	4b42      	ldr	r3, [pc, #264]	; (801944c <xTaskResumeAll+0x118>)
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	2b00      	cmp	r3, #0
 8019348:	d10a      	bne.n	8019360 <xTaskResumeAll+0x2c>
	__asm volatile
 801934a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801934e:	f383 8811 	msr	BASEPRI, r3
 8019352:	f3bf 8f6f 	isb	sy
 8019356:	f3bf 8f4f 	dsb	sy
 801935a:	603b      	str	r3, [r7, #0]
}
 801935c:	bf00      	nop
 801935e:	e7fe      	b.n	801935e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8019360:	f001 fa38 	bl	801a7d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8019364:	4b39      	ldr	r3, [pc, #228]	; (801944c <xTaskResumeAll+0x118>)
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	3b01      	subs	r3, #1
 801936a:	4a38      	ldr	r2, [pc, #224]	; (801944c <xTaskResumeAll+0x118>)
 801936c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801936e:	4b37      	ldr	r3, [pc, #220]	; (801944c <xTaskResumeAll+0x118>)
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d162      	bne.n	801943c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019376:	4b36      	ldr	r3, [pc, #216]	; (8019450 <xTaskResumeAll+0x11c>)
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	2b00      	cmp	r3, #0
 801937c:	d05e      	beq.n	801943c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801937e:	e02f      	b.n	80193e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019380:	4b34      	ldr	r3, [pc, #208]	; (8019454 <xTaskResumeAll+0x120>)
 8019382:	68db      	ldr	r3, [r3, #12]
 8019384:	68db      	ldr	r3, [r3, #12]
 8019386:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	3318      	adds	r3, #24
 801938c:	4618      	mov	r0, r3
 801938e:	f7fe fddf 	bl	8017f50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	3304      	adds	r3, #4
 8019396:	4618      	mov	r0, r3
 8019398:	f7fe fdda 	bl	8017f50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801939c:	68fb      	ldr	r3, [r7, #12]
 801939e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193a0:	4b2d      	ldr	r3, [pc, #180]	; (8019458 <xTaskResumeAll+0x124>)
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	429a      	cmp	r2, r3
 80193a6:	d903      	bls.n	80193b0 <xTaskResumeAll+0x7c>
 80193a8:	68fb      	ldr	r3, [r7, #12]
 80193aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80193ac:	4a2a      	ldr	r2, [pc, #168]	; (8019458 <xTaskResumeAll+0x124>)
 80193ae:	6013      	str	r3, [r2, #0]
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193b4:	4613      	mov	r3, r2
 80193b6:	009b      	lsls	r3, r3, #2
 80193b8:	4413      	add	r3, r2
 80193ba:	009b      	lsls	r3, r3, #2
 80193bc:	4a27      	ldr	r2, [pc, #156]	; (801945c <xTaskResumeAll+0x128>)
 80193be:	441a      	add	r2, r3
 80193c0:	68fb      	ldr	r3, [r7, #12]
 80193c2:	3304      	adds	r3, #4
 80193c4:	4619      	mov	r1, r3
 80193c6:	4610      	mov	r0, r2
 80193c8:	f7fe fd65 	bl	8017e96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193d0:	4b23      	ldr	r3, [pc, #140]	; (8019460 <xTaskResumeAll+0x12c>)
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80193d6:	429a      	cmp	r2, r3
 80193d8:	d302      	bcc.n	80193e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80193da:	4b22      	ldr	r3, [pc, #136]	; (8019464 <xTaskResumeAll+0x130>)
 80193dc:	2201      	movs	r2, #1
 80193de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80193e0:	4b1c      	ldr	r3, [pc, #112]	; (8019454 <xTaskResumeAll+0x120>)
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d1cb      	bne.n	8019380 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80193e8:	68fb      	ldr	r3, [r7, #12]
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	d001      	beq.n	80193f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80193ee:	f000 fb67 	bl	8019ac0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80193f2:	4b1d      	ldr	r3, [pc, #116]	; (8019468 <xTaskResumeAll+0x134>)
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d010      	beq.n	8019420 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80193fe:	f000 f859 	bl	80194b4 <xTaskIncrementTick>
 8019402:	4603      	mov	r3, r0
 8019404:	2b00      	cmp	r3, #0
 8019406:	d002      	beq.n	801940e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8019408:	4b16      	ldr	r3, [pc, #88]	; (8019464 <xTaskResumeAll+0x130>)
 801940a:	2201      	movs	r2, #1
 801940c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	3b01      	subs	r3, #1
 8019412:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	2b00      	cmp	r3, #0
 8019418:	d1f1      	bne.n	80193fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801941a:	4b13      	ldr	r3, [pc, #76]	; (8019468 <xTaskResumeAll+0x134>)
 801941c:	2200      	movs	r2, #0
 801941e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8019420:	4b10      	ldr	r3, [pc, #64]	; (8019464 <xTaskResumeAll+0x130>)
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	2b00      	cmp	r3, #0
 8019426:	d009      	beq.n	801943c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8019428:	2301      	movs	r3, #1
 801942a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801942c:	4b0f      	ldr	r3, [pc, #60]	; (801946c <xTaskResumeAll+0x138>)
 801942e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019432:	601a      	str	r2, [r3, #0]
 8019434:	f3bf 8f4f 	dsb	sy
 8019438:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801943c:	f001 f9fa 	bl	801a834 <vPortExitCritical>

	return xAlreadyYielded;
 8019440:	68bb      	ldr	r3, [r7, #8]
}
 8019442:	4618      	mov	r0, r3
 8019444:	3710      	adds	r7, #16
 8019446:	46bd      	mov	sp, r7
 8019448:	bd80      	pop	{r7, pc}
 801944a:	bf00      	nop
 801944c:	200011f8 	.word	0x200011f8
 8019450:	200011d0 	.word	0x200011d0
 8019454:	20001190 	.word	0x20001190
 8019458:	200011d8 	.word	0x200011d8
 801945c:	20000d00 	.word	0x20000d00
 8019460:	20000cfc 	.word	0x20000cfc
 8019464:	200011e4 	.word	0x200011e4
 8019468:	200011e0 	.word	0x200011e0
 801946c:	e000ed04 	.word	0xe000ed04

08019470 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8019470:	b480      	push	{r7}
 8019472:	b083      	sub	sp, #12
 8019474:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8019476:	4b05      	ldr	r3, [pc, #20]	; (801948c <xTaskGetTickCount+0x1c>)
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801947c:	687b      	ldr	r3, [r7, #4]
}
 801947e:	4618      	mov	r0, r3
 8019480:	370c      	adds	r7, #12
 8019482:	46bd      	mov	sp, r7
 8019484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019488:	4770      	bx	lr
 801948a:	bf00      	nop
 801948c:	200011d4 	.word	0x200011d4

08019490 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8019490:	b580      	push	{r7, lr}
 8019492:	b082      	sub	sp, #8
 8019494:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019496:	f001 fa7f 	bl	801a998 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801949a:	2300      	movs	r3, #0
 801949c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801949e:	4b04      	ldr	r3, [pc, #16]	; (80194b0 <xTaskGetTickCountFromISR+0x20>)
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80194a4:	683b      	ldr	r3, [r7, #0]
}
 80194a6:	4618      	mov	r0, r3
 80194a8:	3708      	adds	r7, #8
 80194aa:	46bd      	mov	sp, r7
 80194ac:	bd80      	pop	{r7, pc}
 80194ae:	bf00      	nop
 80194b0:	200011d4 	.word	0x200011d4

080194b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80194b4:	b580      	push	{r7, lr}
 80194b6:	b086      	sub	sp, #24
 80194b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80194ba:	2300      	movs	r3, #0
 80194bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80194be:	4b4f      	ldr	r3, [pc, #316]	; (80195fc <xTaskIncrementTick+0x148>)
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	f040 808f 	bne.w	80195e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80194c8:	4b4d      	ldr	r3, [pc, #308]	; (8019600 <xTaskIncrementTick+0x14c>)
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	3301      	adds	r3, #1
 80194ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80194d0:	4a4b      	ldr	r2, [pc, #300]	; (8019600 <xTaskIncrementTick+0x14c>)
 80194d2:	693b      	ldr	r3, [r7, #16]
 80194d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80194d6:	693b      	ldr	r3, [r7, #16]
 80194d8:	2b00      	cmp	r3, #0
 80194da:	d120      	bne.n	801951e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80194dc:	4b49      	ldr	r3, [pc, #292]	; (8019604 <xTaskIncrementTick+0x150>)
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d00a      	beq.n	80194fc <xTaskIncrementTick+0x48>
	__asm volatile
 80194e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194ea:	f383 8811 	msr	BASEPRI, r3
 80194ee:	f3bf 8f6f 	isb	sy
 80194f2:	f3bf 8f4f 	dsb	sy
 80194f6:	603b      	str	r3, [r7, #0]
}
 80194f8:	bf00      	nop
 80194fa:	e7fe      	b.n	80194fa <xTaskIncrementTick+0x46>
 80194fc:	4b41      	ldr	r3, [pc, #260]	; (8019604 <xTaskIncrementTick+0x150>)
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	60fb      	str	r3, [r7, #12]
 8019502:	4b41      	ldr	r3, [pc, #260]	; (8019608 <xTaskIncrementTick+0x154>)
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	4a3f      	ldr	r2, [pc, #252]	; (8019604 <xTaskIncrementTick+0x150>)
 8019508:	6013      	str	r3, [r2, #0]
 801950a:	4a3f      	ldr	r2, [pc, #252]	; (8019608 <xTaskIncrementTick+0x154>)
 801950c:	68fb      	ldr	r3, [r7, #12]
 801950e:	6013      	str	r3, [r2, #0]
 8019510:	4b3e      	ldr	r3, [pc, #248]	; (801960c <xTaskIncrementTick+0x158>)
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	3301      	adds	r3, #1
 8019516:	4a3d      	ldr	r2, [pc, #244]	; (801960c <xTaskIncrementTick+0x158>)
 8019518:	6013      	str	r3, [r2, #0]
 801951a:	f000 fad1 	bl	8019ac0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801951e:	4b3c      	ldr	r3, [pc, #240]	; (8019610 <xTaskIncrementTick+0x15c>)
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	693a      	ldr	r2, [r7, #16]
 8019524:	429a      	cmp	r2, r3
 8019526:	d349      	bcc.n	80195bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019528:	4b36      	ldr	r3, [pc, #216]	; (8019604 <xTaskIncrementTick+0x150>)
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	681b      	ldr	r3, [r3, #0]
 801952e:	2b00      	cmp	r3, #0
 8019530:	d104      	bne.n	801953c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019532:	4b37      	ldr	r3, [pc, #220]	; (8019610 <xTaskIncrementTick+0x15c>)
 8019534:	f04f 32ff 	mov.w	r2, #4294967295
 8019538:	601a      	str	r2, [r3, #0]
					break;
 801953a:	e03f      	b.n	80195bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801953c:	4b31      	ldr	r3, [pc, #196]	; (8019604 <xTaskIncrementTick+0x150>)
 801953e:	681b      	ldr	r3, [r3, #0]
 8019540:	68db      	ldr	r3, [r3, #12]
 8019542:	68db      	ldr	r3, [r3, #12]
 8019544:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019546:	68bb      	ldr	r3, [r7, #8]
 8019548:	685b      	ldr	r3, [r3, #4]
 801954a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801954c:	693a      	ldr	r2, [r7, #16]
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	429a      	cmp	r2, r3
 8019552:	d203      	bcs.n	801955c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8019554:	4a2e      	ldr	r2, [pc, #184]	; (8019610 <xTaskIncrementTick+0x15c>)
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801955a:	e02f      	b.n	80195bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801955c:	68bb      	ldr	r3, [r7, #8]
 801955e:	3304      	adds	r3, #4
 8019560:	4618      	mov	r0, r3
 8019562:	f7fe fcf5 	bl	8017f50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019566:	68bb      	ldr	r3, [r7, #8]
 8019568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801956a:	2b00      	cmp	r3, #0
 801956c:	d004      	beq.n	8019578 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801956e:	68bb      	ldr	r3, [r7, #8]
 8019570:	3318      	adds	r3, #24
 8019572:	4618      	mov	r0, r3
 8019574:	f7fe fcec 	bl	8017f50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8019578:	68bb      	ldr	r3, [r7, #8]
 801957a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801957c:	4b25      	ldr	r3, [pc, #148]	; (8019614 <xTaskIncrementTick+0x160>)
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	429a      	cmp	r2, r3
 8019582:	d903      	bls.n	801958c <xTaskIncrementTick+0xd8>
 8019584:	68bb      	ldr	r3, [r7, #8]
 8019586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019588:	4a22      	ldr	r2, [pc, #136]	; (8019614 <xTaskIncrementTick+0x160>)
 801958a:	6013      	str	r3, [r2, #0]
 801958c:	68bb      	ldr	r3, [r7, #8]
 801958e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019590:	4613      	mov	r3, r2
 8019592:	009b      	lsls	r3, r3, #2
 8019594:	4413      	add	r3, r2
 8019596:	009b      	lsls	r3, r3, #2
 8019598:	4a1f      	ldr	r2, [pc, #124]	; (8019618 <xTaskIncrementTick+0x164>)
 801959a:	441a      	add	r2, r3
 801959c:	68bb      	ldr	r3, [r7, #8]
 801959e:	3304      	adds	r3, #4
 80195a0:	4619      	mov	r1, r3
 80195a2:	4610      	mov	r0, r2
 80195a4:	f7fe fc77 	bl	8017e96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80195a8:	68bb      	ldr	r3, [r7, #8]
 80195aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80195ac:	4b1b      	ldr	r3, [pc, #108]	; (801961c <xTaskIncrementTick+0x168>)
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195b2:	429a      	cmp	r2, r3
 80195b4:	d3b8      	bcc.n	8019528 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80195b6:	2301      	movs	r3, #1
 80195b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80195ba:	e7b5      	b.n	8019528 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80195bc:	4b17      	ldr	r3, [pc, #92]	; (801961c <xTaskIncrementTick+0x168>)
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80195c2:	4915      	ldr	r1, [pc, #84]	; (8019618 <xTaskIncrementTick+0x164>)
 80195c4:	4613      	mov	r3, r2
 80195c6:	009b      	lsls	r3, r3, #2
 80195c8:	4413      	add	r3, r2
 80195ca:	009b      	lsls	r3, r3, #2
 80195cc:	440b      	add	r3, r1
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	2b01      	cmp	r3, #1
 80195d2:	d901      	bls.n	80195d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80195d4:	2301      	movs	r3, #1
 80195d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80195d8:	4b11      	ldr	r3, [pc, #68]	; (8019620 <xTaskIncrementTick+0x16c>)
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d007      	beq.n	80195f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80195e0:	2301      	movs	r3, #1
 80195e2:	617b      	str	r3, [r7, #20]
 80195e4:	e004      	b.n	80195f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80195e6:	4b0f      	ldr	r3, [pc, #60]	; (8019624 <xTaskIncrementTick+0x170>)
 80195e8:	681b      	ldr	r3, [r3, #0]
 80195ea:	3301      	adds	r3, #1
 80195ec:	4a0d      	ldr	r2, [pc, #52]	; (8019624 <xTaskIncrementTick+0x170>)
 80195ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80195f0:	697b      	ldr	r3, [r7, #20]
}
 80195f2:	4618      	mov	r0, r3
 80195f4:	3718      	adds	r7, #24
 80195f6:	46bd      	mov	sp, r7
 80195f8:	bd80      	pop	{r7, pc}
 80195fa:	bf00      	nop
 80195fc:	200011f8 	.word	0x200011f8
 8019600:	200011d4 	.word	0x200011d4
 8019604:	20001188 	.word	0x20001188
 8019608:	2000118c 	.word	0x2000118c
 801960c:	200011e8 	.word	0x200011e8
 8019610:	200011f0 	.word	0x200011f0
 8019614:	200011d8 	.word	0x200011d8
 8019618:	20000d00 	.word	0x20000d00
 801961c:	20000cfc 	.word	0x20000cfc
 8019620:	200011e4 	.word	0x200011e4
 8019624:	200011e0 	.word	0x200011e0

08019628 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8019628:	b480      	push	{r7}
 801962a:	b085      	sub	sp, #20
 801962c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801962e:	4b28      	ldr	r3, [pc, #160]	; (80196d0 <vTaskSwitchContext+0xa8>)
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	2b00      	cmp	r3, #0
 8019634:	d003      	beq.n	801963e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8019636:	4b27      	ldr	r3, [pc, #156]	; (80196d4 <vTaskSwitchContext+0xac>)
 8019638:	2201      	movs	r2, #1
 801963a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801963c:	e041      	b.n	80196c2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801963e:	4b25      	ldr	r3, [pc, #148]	; (80196d4 <vTaskSwitchContext+0xac>)
 8019640:	2200      	movs	r2, #0
 8019642:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019644:	4b24      	ldr	r3, [pc, #144]	; (80196d8 <vTaskSwitchContext+0xb0>)
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	60fb      	str	r3, [r7, #12]
 801964a:	e010      	b.n	801966e <vTaskSwitchContext+0x46>
 801964c:	68fb      	ldr	r3, [r7, #12]
 801964e:	2b00      	cmp	r3, #0
 8019650:	d10a      	bne.n	8019668 <vTaskSwitchContext+0x40>
	__asm volatile
 8019652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019656:	f383 8811 	msr	BASEPRI, r3
 801965a:	f3bf 8f6f 	isb	sy
 801965e:	f3bf 8f4f 	dsb	sy
 8019662:	607b      	str	r3, [r7, #4]
}
 8019664:	bf00      	nop
 8019666:	e7fe      	b.n	8019666 <vTaskSwitchContext+0x3e>
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	3b01      	subs	r3, #1
 801966c:	60fb      	str	r3, [r7, #12]
 801966e:	491b      	ldr	r1, [pc, #108]	; (80196dc <vTaskSwitchContext+0xb4>)
 8019670:	68fa      	ldr	r2, [r7, #12]
 8019672:	4613      	mov	r3, r2
 8019674:	009b      	lsls	r3, r3, #2
 8019676:	4413      	add	r3, r2
 8019678:	009b      	lsls	r3, r3, #2
 801967a:	440b      	add	r3, r1
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	2b00      	cmp	r3, #0
 8019680:	d0e4      	beq.n	801964c <vTaskSwitchContext+0x24>
 8019682:	68fa      	ldr	r2, [r7, #12]
 8019684:	4613      	mov	r3, r2
 8019686:	009b      	lsls	r3, r3, #2
 8019688:	4413      	add	r3, r2
 801968a:	009b      	lsls	r3, r3, #2
 801968c:	4a13      	ldr	r2, [pc, #76]	; (80196dc <vTaskSwitchContext+0xb4>)
 801968e:	4413      	add	r3, r2
 8019690:	60bb      	str	r3, [r7, #8]
 8019692:	68bb      	ldr	r3, [r7, #8]
 8019694:	685b      	ldr	r3, [r3, #4]
 8019696:	685a      	ldr	r2, [r3, #4]
 8019698:	68bb      	ldr	r3, [r7, #8]
 801969a:	605a      	str	r2, [r3, #4]
 801969c:	68bb      	ldr	r3, [r7, #8]
 801969e:	685a      	ldr	r2, [r3, #4]
 80196a0:	68bb      	ldr	r3, [r7, #8]
 80196a2:	3308      	adds	r3, #8
 80196a4:	429a      	cmp	r2, r3
 80196a6:	d104      	bne.n	80196b2 <vTaskSwitchContext+0x8a>
 80196a8:	68bb      	ldr	r3, [r7, #8]
 80196aa:	685b      	ldr	r3, [r3, #4]
 80196ac:	685a      	ldr	r2, [r3, #4]
 80196ae:	68bb      	ldr	r3, [r7, #8]
 80196b0:	605a      	str	r2, [r3, #4]
 80196b2:	68bb      	ldr	r3, [r7, #8]
 80196b4:	685b      	ldr	r3, [r3, #4]
 80196b6:	68db      	ldr	r3, [r3, #12]
 80196b8:	4a09      	ldr	r2, [pc, #36]	; (80196e0 <vTaskSwitchContext+0xb8>)
 80196ba:	6013      	str	r3, [r2, #0]
 80196bc:	4a06      	ldr	r2, [pc, #24]	; (80196d8 <vTaskSwitchContext+0xb0>)
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	6013      	str	r3, [r2, #0]
}
 80196c2:	bf00      	nop
 80196c4:	3714      	adds	r7, #20
 80196c6:	46bd      	mov	sp, r7
 80196c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196cc:	4770      	bx	lr
 80196ce:	bf00      	nop
 80196d0:	200011f8 	.word	0x200011f8
 80196d4:	200011e4 	.word	0x200011e4
 80196d8:	200011d8 	.word	0x200011d8
 80196dc:	20000d00 	.word	0x20000d00
 80196e0:	20000cfc 	.word	0x20000cfc

080196e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80196e4:	b580      	push	{r7, lr}
 80196e6:	b084      	sub	sp, #16
 80196e8:	af00      	add	r7, sp, #0
 80196ea:	6078      	str	r0, [r7, #4]
 80196ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d10a      	bne.n	801970a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80196f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196f8:	f383 8811 	msr	BASEPRI, r3
 80196fc:	f3bf 8f6f 	isb	sy
 8019700:	f3bf 8f4f 	dsb	sy
 8019704:	60fb      	str	r3, [r7, #12]
}
 8019706:	bf00      	nop
 8019708:	e7fe      	b.n	8019708 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801970a:	4b07      	ldr	r3, [pc, #28]	; (8019728 <vTaskPlaceOnEventList+0x44>)
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	3318      	adds	r3, #24
 8019710:	4619      	mov	r1, r3
 8019712:	6878      	ldr	r0, [r7, #4]
 8019714:	f7fe fbe3 	bl	8017ede <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019718:	2101      	movs	r1, #1
 801971a:	6838      	ldr	r0, [r7, #0]
 801971c:	f000 fb8a 	bl	8019e34 <prvAddCurrentTaskToDelayedList>
}
 8019720:	bf00      	nop
 8019722:	3710      	adds	r7, #16
 8019724:	46bd      	mov	sp, r7
 8019726:	bd80      	pop	{r7, pc}
 8019728:	20000cfc 	.word	0x20000cfc

0801972c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801972c:	b580      	push	{r7, lr}
 801972e:	b086      	sub	sp, #24
 8019730:	af00      	add	r7, sp, #0
 8019732:	60f8      	str	r0, [r7, #12]
 8019734:	60b9      	str	r1, [r7, #8]
 8019736:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8019738:	68fb      	ldr	r3, [r7, #12]
 801973a:	2b00      	cmp	r3, #0
 801973c:	d10a      	bne.n	8019754 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019742:	f383 8811 	msr	BASEPRI, r3
 8019746:	f3bf 8f6f 	isb	sy
 801974a:	f3bf 8f4f 	dsb	sy
 801974e:	617b      	str	r3, [r7, #20]
}
 8019750:	bf00      	nop
 8019752:	e7fe      	b.n	8019752 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019754:	4b0a      	ldr	r3, [pc, #40]	; (8019780 <vTaskPlaceOnEventListRestricted+0x54>)
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	3318      	adds	r3, #24
 801975a:	4619      	mov	r1, r3
 801975c:	68f8      	ldr	r0, [r7, #12]
 801975e:	f7fe fb9a 	bl	8017e96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	2b00      	cmp	r3, #0
 8019766:	d002      	beq.n	801976e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8019768:	f04f 33ff 	mov.w	r3, #4294967295
 801976c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801976e:	6879      	ldr	r1, [r7, #4]
 8019770:	68b8      	ldr	r0, [r7, #8]
 8019772:	f000 fb5f 	bl	8019e34 <prvAddCurrentTaskToDelayedList>
	}
 8019776:	bf00      	nop
 8019778:	3718      	adds	r7, #24
 801977a:	46bd      	mov	sp, r7
 801977c:	bd80      	pop	{r7, pc}
 801977e:	bf00      	nop
 8019780:	20000cfc 	.word	0x20000cfc

08019784 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019784:	b580      	push	{r7, lr}
 8019786:	b086      	sub	sp, #24
 8019788:	af00      	add	r7, sp, #0
 801978a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	68db      	ldr	r3, [r3, #12]
 8019790:	68db      	ldr	r3, [r3, #12]
 8019792:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8019794:	693b      	ldr	r3, [r7, #16]
 8019796:	2b00      	cmp	r3, #0
 8019798:	d10a      	bne.n	80197b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801979a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801979e:	f383 8811 	msr	BASEPRI, r3
 80197a2:	f3bf 8f6f 	isb	sy
 80197a6:	f3bf 8f4f 	dsb	sy
 80197aa:	60fb      	str	r3, [r7, #12]
}
 80197ac:	bf00      	nop
 80197ae:	e7fe      	b.n	80197ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80197b0:	693b      	ldr	r3, [r7, #16]
 80197b2:	3318      	adds	r3, #24
 80197b4:	4618      	mov	r0, r3
 80197b6:	f7fe fbcb 	bl	8017f50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80197ba:	4b1e      	ldr	r3, [pc, #120]	; (8019834 <xTaskRemoveFromEventList+0xb0>)
 80197bc:	681b      	ldr	r3, [r3, #0]
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d11d      	bne.n	80197fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80197c2:	693b      	ldr	r3, [r7, #16]
 80197c4:	3304      	adds	r3, #4
 80197c6:	4618      	mov	r0, r3
 80197c8:	f7fe fbc2 	bl	8017f50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80197cc:	693b      	ldr	r3, [r7, #16]
 80197ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80197d0:	4b19      	ldr	r3, [pc, #100]	; (8019838 <xTaskRemoveFromEventList+0xb4>)
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	429a      	cmp	r2, r3
 80197d6:	d903      	bls.n	80197e0 <xTaskRemoveFromEventList+0x5c>
 80197d8:	693b      	ldr	r3, [r7, #16]
 80197da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197dc:	4a16      	ldr	r2, [pc, #88]	; (8019838 <xTaskRemoveFromEventList+0xb4>)
 80197de:	6013      	str	r3, [r2, #0]
 80197e0:	693b      	ldr	r3, [r7, #16]
 80197e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80197e4:	4613      	mov	r3, r2
 80197e6:	009b      	lsls	r3, r3, #2
 80197e8:	4413      	add	r3, r2
 80197ea:	009b      	lsls	r3, r3, #2
 80197ec:	4a13      	ldr	r2, [pc, #76]	; (801983c <xTaskRemoveFromEventList+0xb8>)
 80197ee:	441a      	add	r2, r3
 80197f0:	693b      	ldr	r3, [r7, #16]
 80197f2:	3304      	adds	r3, #4
 80197f4:	4619      	mov	r1, r3
 80197f6:	4610      	mov	r0, r2
 80197f8:	f7fe fb4d 	bl	8017e96 <vListInsertEnd>
 80197fc:	e005      	b.n	801980a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80197fe:	693b      	ldr	r3, [r7, #16]
 8019800:	3318      	adds	r3, #24
 8019802:	4619      	mov	r1, r3
 8019804:	480e      	ldr	r0, [pc, #56]	; (8019840 <xTaskRemoveFromEventList+0xbc>)
 8019806:	f7fe fb46 	bl	8017e96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801980a:	693b      	ldr	r3, [r7, #16]
 801980c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801980e:	4b0d      	ldr	r3, [pc, #52]	; (8019844 <xTaskRemoveFromEventList+0xc0>)
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019814:	429a      	cmp	r2, r3
 8019816:	d905      	bls.n	8019824 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8019818:	2301      	movs	r3, #1
 801981a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801981c:	4b0a      	ldr	r3, [pc, #40]	; (8019848 <xTaskRemoveFromEventList+0xc4>)
 801981e:	2201      	movs	r2, #1
 8019820:	601a      	str	r2, [r3, #0]
 8019822:	e001      	b.n	8019828 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8019824:	2300      	movs	r3, #0
 8019826:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8019828:	697b      	ldr	r3, [r7, #20]
}
 801982a:	4618      	mov	r0, r3
 801982c:	3718      	adds	r7, #24
 801982e:	46bd      	mov	sp, r7
 8019830:	bd80      	pop	{r7, pc}
 8019832:	bf00      	nop
 8019834:	200011f8 	.word	0x200011f8
 8019838:	200011d8 	.word	0x200011d8
 801983c:	20000d00 	.word	0x20000d00
 8019840:	20001190 	.word	0x20001190
 8019844:	20000cfc 	.word	0x20000cfc
 8019848:	200011e4 	.word	0x200011e4

0801984c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801984c:	b480      	push	{r7}
 801984e:	b083      	sub	sp, #12
 8019850:	af00      	add	r7, sp, #0
 8019852:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019854:	4b06      	ldr	r3, [pc, #24]	; (8019870 <vTaskInternalSetTimeOutState+0x24>)
 8019856:	681a      	ldr	r2, [r3, #0]
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801985c:	4b05      	ldr	r3, [pc, #20]	; (8019874 <vTaskInternalSetTimeOutState+0x28>)
 801985e:	681a      	ldr	r2, [r3, #0]
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	605a      	str	r2, [r3, #4]
}
 8019864:	bf00      	nop
 8019866:	370c      	adds	r7, #12
 8019868:	46bd      	mov	sp, r7
 801986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801986e:	4770      	bx	lr
 8019870:	200011e8 	.word	0x200011e8
 8019874:	200011d4 	.word	0x200011d4

08019878 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8019878:	b580      	push	{r7, lr}
 801987a:	b088      	sub	sp, #32
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
 8019880:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	2b00      	cmp	r3, #0
 8019886:	d10a      	bne.n	801989e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8019888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801988c:	f383 8811 	msr	BASEPRI, r3
 8019890:	f3bf 8f6f 	isb	sy
 8019894:	f3bf 8f4f 	dsb	sy
 8019898:	613b      	str	r3, [r7, #16]
}
 801989a:	bf00      	nop
 801989c:	e7fe      	b.n	801989c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801989e:	683b      	ldr	r3, [r7, #0]
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d10a      	bne.n	80198ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80198a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198a8:	f383 8811 	msr	BASEPRI, r3
 80198ac:	f3bf 8f6f 	isb	sy
 80198b0:	f3bf 8f4f 	dsb	sy
 80198b4:	60fb      	str	r3, [r7, #12]
}
 80198b6:	bf00      	nop
 80198b8:	e7fe      	b.n	80198b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80198ba:	f000 ff8b 	bl	801a7d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80198be:	4b1d      	ldr	r3, [pc, #116]	; (8019934 <xTaskCheckForTimeOut+0xbc>)
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	685b      	ldr	r3, [r3, #4]
 80198c8:	69ba      	ldr	r2, [r7, #24]
 80198ca:	1ad3      	subs	r3, r2, r3
 80198cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80198ce:	683b      	ldr	r3, [r7, #0]
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198d6:	d102      	bne.n	80198de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80198d8:	2300      	movs	r3, #0
 80198da:	61fb      	str	r3, [r7, #28]
 80198dc:	e023      	b.n	8019926 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	681a      	ldr	r2, [r3, #0]
 80198e2:	4b15      	ldr	r3, [pc, #84]	; (8019938 <xTaskCheckForTimeOut+0xc0>)
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	429a      	cmp	r2, r3
 80198e8:	d007      	beq.n	80198fa <xTaskCheckForTimeOut+0x82>
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	685b      	ldr	r3, [r3, #4]
 80198ee:	69ba      	ldr	r2, [r7, #24]
 80198f0:	429a      	cmp	r2, r3
 80198f2:	d302      	bcc.n	80198fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80198f4:	2301      	movs	r3, #1
 80198f6:	61fb      	str	r3, [r7, #28]
 80198f8:	e015      	b.n	8019926 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80198fa:	683b      	ldr	r3, [r7, #0]
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	697a      	ldr	r2, [r7, #20]
 8019900:	429a      	cmp	r2, r3
 8019902:	d20b      	bcs.n	801991c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8019904:	683b      	ldr	r3, [r7, #0]
 8019906:	681a      	ldr	r2, [r3, #0]
 8019908:	697b      	ldr	r3, [r7, #20]
 801990a:	1ad2      	subs	r2, r2, r3
 801990c:	683b      	ldr	r3, [r7, #0]
 801990e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019910:	6878      	ldr	r0, [r7, #4]
 8019912:	f7ff ff9b 	bl	801984c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8019916:	2300      	movs	r3, #0
 8019918:	61fb      	str	r3, [r7, #28]
 801991a:	e004      	b.n	8019926 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801991c:	683b      	ldr	r3, [r7, #0]
 801991e:	2200      	movs	r2, #0
 8019920:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8019922:	2301      	movs	r3, #1
 8019924:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8019926:	f000 ff85 	bl	801a834 <vPortExitCritical>

	return xReturn;
 801992a:	69fb      	ldr	r3, [r7, #28]
}
 801992c:	4618      	mov	r0, r3
 801992e:	3720      	adds	r7, #32
 8019930:	46bd      	mov	sp, r7
 8019932:	bd80      	pop	{r7, pc}
 8019934:	200011d4 	.word	0x200011d4
 8019938:	200011e8 	.word	0x200011e8

0801993c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801993c:	b480      	push	{r7}
 801993e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8019940:	4b03      	ldr	r3, [pc, #12]	; (8019950 <vTaskMissedYield+0x14>)
 8019942:	2201      	movs	r2, #1
 8019944:	601a      	str	r2, [r3, #0]
}
 8019946:	bf00      	nop
 8019948:	46bd      	mov	sp, r7
 801994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801994e:	4770      	bx	lr
 8019950:	200011e4 	.word	0x200011e4

08019954 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8019954:	b580      	push	{r7, lr}
 8019956:	b082      	sub	sp, #8
 8019958:	af00      	add	r7, sp, #0
 801995a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801995c:	f000 f852 	bl	8019a04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019960:	4b06      	ldr	r3, [pc, #24]	; (801997c <prvIdleTask+0x28>)
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	2b01      	cmp	r3, #1
 8019966:	d9f9      	bls.n	801995c <prvIdleTask+0x8>
			{
				taskYIELD();
 8019968:	4b05      	ldr	r3, [pc, #20]	; (8019980 <prvIdleTask+0x2c>)
 801996a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801996e:	601a      	str	r2, [r3, #0]
 8019970:	f3bf 8f4f 	dsb	sy
 8019974:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8019978:	e7f0      	b.n	801995c <prvIdleTask+0x8>
 801997a:	bf00      	nop
 801997c:	20000d00 	.word	0x20000d00
 8019980:	e000ed04 	.word	0xe000ed04

08019984 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019984:	b580      	push	{r7, lr}
 8019986:	b082      	sub	sp, #8
 8019988:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801998a:	2300      	movs	r3, #0
 801998c:	607b      	str	r3, [r7, #4]
 801998e:	e00c      	b.n	80199aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019990:	687a      	ldr	r2, [r7, #4]
 8019992:	4613      	mov	r3, r2
 8019994:	009b      	lsls	r3, r3, #2
 8019996:	4413      	add	r3, r2
 8019998:	009b      	lsls	r3, r3, #2
 801999a:	4a12      	ldr	r2, [pc, #72]	; (80199e4 <prvInitialiseTaskLists+0x60>)
 801999c:	4413      	add	r3, r2
 801999e:	4618      	mov	r0, r3
 80199a0:	f7fe fa4c 	bl	8017e3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	3301      	adds	r3, #1
 80199a8:	607b      	str	r3, [r7, #4]
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	2b37      	cmp	r3, #55	; 0x37
 80199ae:	d9ef      	bls.n	8019990 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80199b0:	480d      	ldr	r0, [pc, #52]	; (80199e8 <prvInitialiseTaskLists+0x64>)
 80199b2:	f7fe fa43 	bl	8017e3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80199b6:	480d      	ldr	r0, [pc, #52]	; (80199ec <prvInitialiseTaskLists+0x68>)
 80199b8:	f7fe fa40 	bl	8017e3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80199bc:	480c      	ldr	r0, [pc, #48]	; (80199f0 <prvInitialiseTaskLists+0x6c>)
 80199be:	f7fe fa3d 	bl	8017e3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80199c2:	480c      	ldr	r0, [pc, #48]	; (80199f4 <prvInitialiseTaskLists+0x70>)
 80199c4:	f7fe fa3a 	bl	8017e3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80199c8:	480b      	ldr	r0, [pc, #44]	; (80199f8 <prvInitialiseTaskLists+0x74>)
 80199ca:	f7fe fa37 	bl	8017e3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80199ce:	4b0b      	ldr	r3, [pc, #44]	; (80199fc <prvInitialiseTaskLists+0x78>)
 80199d0:	4a05      	ldr	r2, [pc, #20]	; (80199e8 <prvInitialiseTaskLists+0x64>)
 80199d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80199d4:	4b0a      	ldr	r3, [pc, #40]	; (8019a00 <prvInitialiseTaskLists+0x7c>)
 80199d6:	4a05      	ldr	r2, [pc, #20]	; (80199ec <prvInitialiseTaskLists+0x68>)
 80199d8:	601a      	str	r2, [r3, #0]
}
 80199da:	bf00      	nop
 80199dc:	3708      	adds	r7, #8
 80199de:	46bd      	mov	sp, r7
 80199e0:	bd80      	pop	{r7, pc}
 80199e2:	bf00      	nop
 80199e4:	20000d00 	.word	0x20000d00
 80199e8:	20001160 	.word	0x20001160
 80199ec:	20001174 	.word	0x20001174
 80199f0:	20001190 	.word	0x20001190
 80199f4:	200011a4 	.word	0x200011a4
 80199f8:	200011bc 	.word	0x200011bc
 80199fc:	20001188 	.word	0x20001188
 8019a00:	2000118c 	.word	0x2000118c

08019a04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8019a04:	b580      	push	{r7, lr}
 8019a06:	b082      	sub	sp, #8
 8019a08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019a0a:	e019      	b.n	8019a40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8019a0c:	f000 fee2 	bl	801a7d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019a10:	4b10      	ldr	r3, [pc, #64]	; (8019a54 <prvCheckTasksWaitingTermination+0x50>)
 8019a12:	68db      	ldr	r3, [r3, #12]
 8019a14:	68db      	ldr	r3, [r3, #12]
 8019a16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	3304      	adds	r3, #4
 8019a1c:	4618      	mov	r0, r3
 8019a1e:	f7fe fa97 	bl	8017f50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8019a22:	4b0d      	ldr	r3, [pc, #52]	; (8019a58 <prvCheckTasksWaitingTermination+0x54>)
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	3b01      	subs	r3, #1
 8019a28:	4a0b      	ldr	r2, [pc, #44]	; (8019a58 <prvCheckTasksWaitingTermination+0x54>)
 8019a2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8019a2c:	4b0b      	ldr	r3, [pc, #44]	; (8019a5c <prvCheckTasksWaitingTermination+0x58>)
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	3b01      	subs	r3, #1
 8019a32:	4a0a      	ldr	r2, [pc, #40]	; (8019a5c <prvCheckTasksWaitingTermination+0x58>)
 8019a34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8019a36:	f000 fefd 	bl	801a834 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8019a3a:	6878      	ldr	r0, [r7, #4]
 8019a3c:	f000 f810 	bl	8019a60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019a40:	4b06      	ldr	r3, [pc, #24]	; (8019a5c <prvCheckTasksWaitingTermination+0x58>)
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d1e1      	bne.n	8019a0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8019a48:	bf00      	nop
 8019a4a:	bf00      	nop
 8019a4c:	3708      	adds	r7, #8
 8019a4e:	46bd      	mov	sp, r7
 8019a50:	bd80      	pop	{r7, pc}
 8019a52:	bf00      	nop
 8019a54:	200011a4 	.word	0x200011a4
 8019a58:	200011d0 	.word	0x200011d0
 8019a5c:	200011b8 	.word	0x200011b8

08019a60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8019a60:	b580      	push	{r7, lr}
 8019a62:	b084      	sub	sp, #16
 8019a64:	af00      	add	r7, sp, #0
 8019a66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d108      	bne.n	8019a84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a76:	4618      	mov	r0, r3
 8019a78:	f001 f89a 	bl	801abb0 <vPortFree>
				vPortFree( pxTCB );
 8019a7c:	6878      	ldr	r0, [r7, #4]
 8019a7e:	f001 f897 	bl	801abb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8019a82:	e018      	b.n	8019ab6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019a8a:	2b01      	cmp	r3, #1
 8019a8c:	d103      	bne.n	8019a96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8019a8e:	6878      	ldr	r0, [r7, #4]
 8019a90:	f001 f88e 	bl	801abb0 <vPortFree>
	}
 8019a94:	e00f      	b.n	8019ab6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019a9c:	2b02      	cmp	r3, #2
 8019a9e:	d00a      	beq.n	8019ab6 <prvDeleteTCB+0x56>
	__asm volatile
 8019aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019aa4:	f383 8811 	msr	BASEPRI, r3
 8019aa8:	f3bf 8f6f 	isb	sy
 8019aac:	f3bf 8f4f 	dsb	sy
 8019ab0:	60fb      	str	r3, [r7, #12]
}
 8019ab2:	bf00      	nop
 8019ab4:	e7fe      	b.n	8019ab4 <prvDeleteTCB+0x54>
	}
 8019ab6:	bf00      	nop
 8019ab8:	3710      	adds	r7, #16
 8019aba:	46bd      	mov	sp, r7
 8019abc:	bd80      	pop	{r7, pc}
	...

08019ac0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8019ac0:	b480      	push	{r7}
 8019ac2:	b083      	sub	sp, #12
 8019ac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019ac6:	4b0c      	ldr	r3, [pc, #48]	; (8019af8 <prvResetNextTaskUnblockTime+0x38>)
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d104      	bne.n	8019ada <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019ad0:	4b0a      	ldr	r3, [pc, #40]	; (8019afc <prvResetNextTaskUnblockTime+0x3c>)
 8019ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8019ad6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8019ad8:	e008      	b.n	8019aec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019ada:	4b07      	ldr	r3, [pc, #28]	; (8019af8 <prvResetNextTaskUnblockTime+0x38>)
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	68db      	ldr	r3, [r3, #12]
 8019ae0:	68db      	ldr	r3, [r3, #12]
 8019ae2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	685b      	ldr	r3, [r3, #4]
 8019ae8:	4a04      	ldr	r2, [pc, #16]	; (8019afc <prvResetNextTaskUnblockTime+0x3c>)
 8019aea:	6013      	str	r3, [r2, #0]
}
 8019aec:	bf00      	nop
 8019aee:	370c      	adds	r7, #12
 8019af0:	46bd      	mov	sp, r7
 8019af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019af6:	4770      	bx	lr
 8019af8:	20001188 	.word	0x20001188
 8019afc:	200011f0 	.word	0x200011f0

08019b00 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8019b00:	b480      	push	{r7}
 8019b02:	b083      	sub	sp, #12
 8019b04:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8019b06:	4b05      	ldr	r3, [pc, #20]	; (8019b1c <xTaskGetCurrentTaskHandle+0x1c>)
 8019b08:	681b      	ldr	r3, [r3, #0]
 8019b0a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8019b0c:	687b      	ldr	r3, [r7, #4]
	}
 8019b0e:	4618      	mov	r0, r3
 8019b10:	370c      	adds	r7, #12
 8019b12:	46bd      	mov	sp, r7
 8019b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b18:	4770      	bx	lr
 8019b1a:	bf00      	nop
 8019b1c:	20000cfc 	.word	0x20000cfc

08019b20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8019b20:	b480      	push	{r7}
 8019b22:	b083      	sub	sp, #12
 8019b24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8019b26:	4b0b      	ldr	r3, [pc, #44]	; (8019b54 <xTaskGetSchedulerState+0x34>)
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d102      	bne.n	8019b34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019b2e:	2301      	movs	r3, #1
 8019b30:	607b      	str	r3, [r7, #4]
 8019b32:	e008      	b.n	8019b46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019b34:	4b08      	ldr	r3, [pc, #32]	; (8019b58 <xTaskGetSchedulerState+0x38>)
 8019b36:	681b      	ldr	r3, [r3, #0]
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d102      	bne.n	8019b42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8019b3c:	2302      	movs	r3, #2
 8019b3e:	607b      	str	r3, [r7, #4]
 8019b40:	e001      	b.n	8019b46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8019b42:	2300      	movs	r3, #0
 8019b44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8019b46:	687b      	ldr	r3, [r7, #4]
	}
 8019b48:	4618      	mov	r0, r3
 8019b4a:	370c      	adds	r7, #12
 8019b4c:	46bd      	mov	sp, r7
 8019b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b52:	4770      	bx	lr
 8019b54:	200011dc 	.word	0x200011dc
 8019b58:	200011f8 	.word	0x200011f8

08019b5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8019b5c:	b580      	push	{r7, lr}
 8019b5e:	b084      	sub	sp, #16
 8019b60:	af00      	add	r7, sp, #0
 8019b62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8019b68:	2300      	movs	r3, #0
 8019b6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d051      	beq.n	8019c16 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8019b72:	68bb      	ldr	r3, [r7, #8]
 8019b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b76:	4b2a      	ldr	r3, [pc, #168]	; (8019c20 <xTaskPriorityInherit+0xc4>)
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b7c:	429a      	cmp	r2, r3
 8019b7e:	d241      	bcs.n	8019c04 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019b80:	68bb      	ldr	r3, [r7, #8]
 8019b82:	699b      	ldr	r3, [r3, #24]
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	db06      	blt.n	8019b96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019b88:	4b25      	ldr	r3, [pc, #148]	; (8019c20 <xTaskPriorityInherit+0xc4>)
 8019b8a:	681b      	ldr	r3, [r3, #0]
 8019b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019b92:	68bb      	ldr	r3, [r7, #8]
 8019b94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8019b96:	68bb      	ldr	r3, [r7, #8]
 8019b98:	6959      	ldr	r1, [r3, #20]
 8019b9a:	68bb      	ldr	r3, [r7, #8]
 8019b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b9e:	4613      	mov	r3, r2
 8019ba0:	009b      	lsls	r3, r3, #2
 8019ba2:	4413      	add	r3, r2
 8019ba4:	009b      	lsls	r3, r3, #2
 8019ba6:	4a1f      	ldr	r2, [pc, #124]	; (8019c24 <xTaskPriorityInherit+0xc8>)
 8019ba8:	4413      	add	r3, r2
 8019baa:	4299      	cmp	r1, r3
 8019bac:	d122      	bne.n	8019bf4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019bae:	68bb      	ldr	r3, [r7, #8]
 8019bb0:	3304      	adds	r3, #4
 8019bb2:	4618      	mov	r0, r3
 8019bb4:	f7fe f9cc 	bl	8017f50 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019bb8:	4b19      	ldr	r3, [pc, #100]	; (8019c20 <xTaskPriorityInherit+0xc4>)
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019bbe:	68bb      	ldr	r3, [r7, #8]
 8019bc0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8019bc2:	68bb      	ldr	r3, [r7, #8]
 8019bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019bc6:	4b18      	ldr	r3, [pc, #96]	; (8019c28 <xTaskPriorityInherit+0xcc>)
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	429a      	cmp	r2, r3
 8019bcc:	d903      	bls.n	8019bd6 <xTaskPriorityInherit+0x7a>
 8019bce:	68bb      	ldr	r3, [r7, #8]
 8019bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019bd2:	4a15      	ldr	r2, [pc, #84]	; (8019c28 <xTaskPriorityInherit+0xcc>)
 8019bd4:	6013      	str	r3, [r2, #0]
 8019bd6:	68bb      	ldr	r3, [r7, #8]
 8019bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019bda:	4613      	mov	r3, r2
 8019bdc:	009b      	lsls	r3, r3, #2
 8019bde:	4413      	add	r3, r2
 8019be0:	009b      	lsls	r3, r3, #2
 8019be2:	4a10      	ldr	r2, [pc, #64]	; (8019c24 <xTaskPriorityInherit+0xc8>)
 8019be4:	441a      	add	r2, r3
 8019be6:	68bb      	ldr	r3, [r7, #8]
 8019be8:	3304      	adds	r3, #4
 8019bea:	4619      	mov	r1, r3
 8019bec:	4610      	mov	r0, r2
 8019bee:	f7fe f952 	bl	8017e96 <vListInsertEnd>
 8019bf2:	e004      	b.n	8019bfe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019bf4:	4b0a      	ldr	r3, [pc, #40]	; (8019c20 <xTaskPriorityInherit+0xc4>)
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019bfa:	68bb      	ldr	r3, [r7, #8]
 8019bfc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8019bfe:	2301      	movs	r3, #1
 8019c00:	60fb      	str	r3, [r7, #12]
 8019c02:	e008      	b.n	8019c16 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8019c04:	68bb      	ldr	r3, [r7, #8]
 8019c06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019c08:	4b05      	ldr	r3, [pc, #20]	; (8019c20 <xTaskPriorityInherit+0xc4>)
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c0e:	429a      	cmp	r2, r3
 8019c10:	d201      	bcs.n	8019c16 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8019c12:	2301      	movs	r3, #1
 8019c14:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019c16:	68fb      	ldr	r3, [r7, #12]
	}
 8019c18:	4618      	mov	r0, r3
 8019c1a:	3710      	adds	r7, #16
 8019c1c:	46bd      	mov	sp, r7
 8019c1e:	bd80      	pop	{r7, pc}
 8019c20:	20000cfc 	.word	0x20000cfc
 8019c24:	20000d00 	.word	0x20000d00
 8019c28:	200011d8 	.word	0x200011d8

08019c2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8019c2c:	b580      	push	{r7, lr}
 8019c2e:	b086      	sub	sp, #24
 8019c30:	af00      	add	r7, sp, #0
 8019c32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8019c38:	2300      	movs	r3, #0
 8019c3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d056      	beq.n	8019cf0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8019c42:	4b2e      	ldr	r3, [pc, #184]	; (8019cfc <xTaskPriorityDisinherit+0xd0>)
 8019c44:	681b      	ldr	r3, [r3, #0]
 8019c46:	693a      	ldr	r2, [r7, #16]
 8019c48:	429a      	cmp	r2, r3
 8019c4a:	d00a      	beq.n	8019c62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8019c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c50:	f383 8811 	msr	BASEPRI, r3
 8019c54:	f3bf 8f6f 	isb	sy
 8019c58:	f3bf 8f4f 	dsb	sy
 8019c5c:	60fb      	str	r3, [r7, #12]
}
 8019c5e:	bf00      	nop
 8019c60:	e7fe      	b.n	8019c60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8019c62:	693b      	ldr	r3, [r7, #16]
 8019c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d10a      	bne.n	8019c80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8019c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c6e:	f383 8811 	msr	BASEPRI, r3
 8019c72:	f3bf 8f6f 	isb	sy
 8019c76:	f3bf 8f4f 	dsb	sy
 8019c7a:	60bb      	str	r3, [r7, #8]
}
 8019c7c:	bf00      	nop
 8019c7e:	e7fe      	b.n	8019c7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8019c80:	693b      	ldr	r3, [r7, #16]
 8019c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019c84:	1e5a      	subs	r2, r3, #1
 8019c86:	693b      	ldr	r3, [r7, #16]
 8019c88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019c8a:	693b      	ldr	r3, [r7, #16]
 8019c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c8e:	693b      	ldr	r3, [r7, #16]
 8019c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019c92:	429a      	cmp	r2, r3
 8019c94:	d02c      	beq.n	8019cf0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8019c96:	693b      	ldr	r3, [r7, #16]
 8019c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d128      	bne.n	8019cf0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019c9e:	693b      	ldr	r3, [r7, #16]
 8019ca0:	3304      	adds	r3, #4
 8019ca2:	4618      	mov	r0, r3
 8019ca4:	f7fe f954 	bl	8017f50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8019ca8:	693b      	ldr	r3, [r7, #16]
 8019caa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019cac:	693b      	ldr	r3, [r7, #16]
 8019cae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019cb0:	693b      	ldr	r3, [r7, #16]
 8019cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019cb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019cb8:	693b      	ldr	r3, [r7, #16]
 8019cba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8019cbc:	693b      	ldr	r3, [r7, #16]
 8019cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019cc0:	4b0f      	ldr	r3, [pc, #60]	; (8019d00 <xTaskPriorityDisinherit+0xd4>)
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	429a      	cmp	r2, r3
 8019cc6:	d903      	bls.n	8019cd0 <xTaskPriorityDisinherit+0xa4>
 8019cc8:	693b      	ldr	r3, [r7, #16]
 8019cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ccc:	4a0c      	ldr	r2, [pc, #48]	; (8019d00 <xTaskPriorityDisinherit+0xd4>)
 8019cce:	6013      	str	r3, [r2, #0]
 8019cd0:	693b      	ldr	r3, [r7, #16]
 8019cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019cd4:	4613      	mov	r3, r2
 8019cd6:	009b      	lsls	r3, r3, #2
 8019cd8:	4413      	add	r3, r2
 8019cda:	009b      	lsls	r3, r3, #2
 8019cdc:	4a09      	ldr	r2, [pc, #36]	; (8019d04 <xTaskPriorityDisinherit+0xd8>)
 8019cde:	441a      	add	r2, r3
 8019ce0:	693b      	ldr	r3, [r7, #16]
 8019ce2:	3304      	adds	r3, #4
 8019ce4:	4619      	mov	r1, r3
 8019ce6:	4610      	mov	r0, r2
 8019ce8:	f7fe f8d5 	bl	8017e96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8019cec:	2301      	movs	r3, #1
 8019cee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019cf0:	697b      	ldr	r3, [r7, #20]
	}
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	3718      	adds	r7, #24
 8019cf6:	46bd      	mov	sp, r7
 8019cf8:	bd80      	pop	{r7, pc}
 8019cfa:	bf00      	nop
 8019cfc:	20000cfc 	.word	0x20000cfc
 8019d00:	200011d8 	.word	0x200011d8
 8019d04:	20000d00 	.word	0x20000d00

08019d08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8019d08:	b580      	push	{r7, lr}
 8019d0a:	b088      	sub	sp, #32
 8019d0c:	af00      	add	r7, sp, #0
 8019d0e:	6078      	str	r0, [r7, #4]
 8019d10:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8019d16:	2301      	movs	r3, #1
 8019d18:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d06a      	beq.n	8019df6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8019d20:	69bb      	ldr	r3, [r7, #24]
 8019d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d10a      	bne.n	8019d3e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8019d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d2c:	f383 8811 	msr	BASEPRI, r3
 8019d30:	f3bf 8f6f 	isb	sy
 8019d34:	f3bf 8f4f 	dsb	sy
 8019d38:	60fb      	str	r3, [r7, #12]
}
 8019d3a:	bf00      	nop
 8019d3c:	e7fe      	b.n	8019d3c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8019d3e:	69bb      	ldr	r3, [r7, #24]
 8019d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019d42:	683a      	ldr	r2, [r7, #0]
 8019d44:	429a      	cmp	r2, r3
 8019d46:	d902      	bls.n	8019d4e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8019d48:	683b      	ldr	r3, [r7, #0]
 8019d4a:	61fb      	str	r3, [r7, #28]
 8019d4c:	e002      	b.n	8019d54 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8019d4e:	69bb      	ldr	r3, [r7, #24]
 8019d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019d52:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8019d54:	69bb      	ldr	r3, [r7, #24]
 8019d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d58:	69fa      	ldr	r2, [r7, #28]
 8019d5a:	429a      	cmp	r2, r3
 8019d5c:	d04b      	beq.n	8019df6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8019d5e:	69bb      	ldr	r3, [r7, #24]
 8019d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019d62:	697a      	ldr	r2, [r7, #20]
 8019d64:	429a      	cmp	r2, r3
 8019d66:	d146      	bne.n	8019df6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8019d68:	4b25      	ldr	r3, [pc, #148]	; (8019e00 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	69ba      	ldr	r2, [r7, #24]
 8019d6e:	429a      	cmp	r2, r3
 8019d70:	d10a      	bne.n	8019d88 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8019d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d76:	f383 8811 	msr	BASEPRI, r3
 8019d7a:	f3bf 8f6f 	isb	sy
 8019d7e:	f3bf 8f4f 	dsb	sy
 8019d82:	60bb      	str	r3, [r7, #8]
}
 8019d84:	bf00      	nop
 8019d86:	e7fe      	b.n	8019d86 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8019d88:	69bb      	ldr	r3, [r7, #24]
 8019d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d8c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8019d8e:	69bb      	ldr	r3, [r7, #24]
 8019d90:	69fa      	ldr	r2, [r7, #28]
 8019d92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019d94:	69bb      	ldr	r3, [r7, #24]
 8019d96:	699b      	ldr	r3, [r3, #24]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	db04      	blt.n	8019da6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019d9c:	69fb      	ldr	r3, [r7, #28]
 8019d9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019da2:	69bb      	ldr	r3, [r7, #24]
 8019da4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8019da6:	69bb      	ldr	r3, [r7, #24]
 8019da8:	6959      	ldr	r1, [r3, #20]
 8019daa:	693a      	ldr	r2, [r7, #16]
 8019dac:	4613      	mov	r3, r2
 8019dae:	009b      	lsls	r3, r3, #2
 8019db0:	4413      	add	r3, r2
 8019db2:	009b      	lsls	r3, r3, #2
 8019db4:	4a13      	ldr	r2, [pc, #76]	; (8019e04 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8019db6:	4413      	add	r3, r2
 8019db8:	4299      	cmp	r1, r3
 8019dba:	d11c      	bne.n	8019df6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019dbc:	69bb      	ldr	r3, [r7, #24]
 8019dbe:	3304      	adds	r3, #4
 8019dc0:	4618      	mov	r0, r3
 8019dc2:	f7fe f8c5 	bl	8017f50 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8019dc6:	69bb      	ldr	r3, [r7, #24]
 8019dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019dca:	4b0f      	ldr	r3, [pc, #60]	; (8019e08 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	429a      	cmp	r2, r3
 8019dd0:	d903      	bls.n	8019dda <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8019dd2:	69bb      	ldr	r3, [r7, #24]
 8019dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019dd6:	4a0c      	ldr	r2, [pc, #48]	; (8019e08 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8019dd8:	6013      	str	r3, [r2, #0]
 8019dda:	69bb      	ldr	r3, [r7, #24]
 8019ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019dde:	4613      	mov	r3, r2
 8019de0:	009b      	lsls	r3, r3, #2
 8019de2:	4413      	add	r3, r2
 8019de4:	009b      	lsls	r3, r3, #2
 8019de6:	4a07      	ldr	r2, [pc, #28]	; (8019e04 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8019de8:	441a      	add	r2, r3
 8019dea:	69bb      	ldr	r3, [r7, #24]
 8019dec:	3304      	adds	r3, #4
 8019dee:	4619      	mov	r1, r3
 8019df0:	4610      	mov	r0, r2
 8019df2:	f7fe f850 	bl	8017e96 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019df6:	bf00      	nop
 8019df8:	3720      	adds	r7, #32
 8019dfa:	46bd      	mov	sp, r7
 8019dfc:	bd80      	pop	{r7, pc}
 8019dfe:	bf00      	nop
 8019e00:	20000cfc 	.word	0x20000cfc
 8019e04:	20000d00 	.word	0x20000d00
 8019e08:	200011d8 	.word	0x200011d8

08019e0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8019e0c:	b480      	push	{r7}
 8019e0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8019e10:	4b07      	ldr	r3, [pc, #28]	; (8019e30 <pvTaskIncrementMutexHeldCount+0x24>)
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	d004      	beq.n	8019e22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8019e18:	4b05      	ldr	r3, [pc, #20]	; (8019e30 <pvTaskIncrementMutexHeldCount+0x24>)
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019e1e:	3201      	adds	r2, #1
 8019e20:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8019e22:	4b03      	ldr	r3, [pc, #12]	; (8019e30 <pvTaskIncrementMutexHeldCount+0x24>)
 8019e24:	681b      	ldr	r3, [r3, #0]
	}
 8019e26:	4618      	mov	r0, r3
 8019e28:	46bd      	mov	sp, r7
 8019e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e2e:	4770      	bx	lr
 8019e30:	20000cfc 	.word	0x20000cfc

08019e34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8019e34:	b580      	push	{r7, lr}
 8019e36:	b084      	sub	sp, #16
 8019e38:	af00      	add	r7, sp, #0
 8019e3a:	6078      	str	r0, [r7, #4]
 8019e3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019e3e:	4b21      	ldr	r3, [pc, #132]	; (8019ec4 <prvAddCurrentTaskToDelayedList+0x90>)
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019e44:	4b20      	ldr	r3, [pc, #128]	; (8019ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	3304      	adds	r3, #4
 8019e4a:	4618      	mov	r0, r3
 8019e4c:	f7fe f880 	bl	8017f50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e56:	d10a      	bne.n	8019e6e <prvAddCurrentTaskToDelayedList+0x3a>
 8019e58:	683b      	ldr	r3, [r7, #0]
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d007      	beq.n	8019e6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019e5e:	4b1a      	ldr	r3, [pc, #104]	; (8019ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	3304      	adds	r3, #4
 8019e64:	4619      	mov	r1, r3
 8019e66:	4819      	ldr	r0, [pc, #100]	; (8019ecc <prvAddCurrentTaskToDelayedList+0x98>)
 8019e68:	f7fe f815 	bl	8017e96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019e6c:	e026      	b.n	8019ebc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019e6e:	68fa      	ldr	r2, [r7, #12]
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	4413      	add	r3, r2
 8019e74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019e76:	4b14      	ldr	r3, [pc, #80]	; (8019ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	68ba      	ldr	r2, [r7, #8]
 8019e7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019e7e:	68ba      	ldr	r2, [r7, #8]
 8019e80:	68fb      	ldr	r3, [r7, #12]
 8019e82:	429a      	cmp	r2, r3
 8019e84:	d209      	bcs.n	8019e9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019e86:	4b12      	ldr	r3, [pc, #72]	; (8019ed0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8019e88:	681a      	ldr	r2, [r3, #0]
 8019e8a:	4b0f      	ldr	r3, [pc, #60]	; (8019ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	3304      	adds	r3, #4
 8019e90:	4619      	mov	r1, r3
 8019e92:	4610      	mov	r0, r2
 8019e94:	f7fe f823 	bl	8017ede <vListInsert>
}
 8019e98:	e010      	b.n	8019ebc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019e9a:	4b0e      	ldr	r3, [pc, #56]	; (8019ed4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8019e9c:	681a      	ldr	r2, [r3, #0]
 8019e9e:	4b0a      	ldr	r3, [pc, #40]	; (8019ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	3304      	adds	r3, #4
 8019ea4:	4619      	mov	r1, r3
 8019ea6:	4610      	mov	r0, r2
 8019ea8:	f7fe f819 	bl	8017ede <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019eac:	4b0a      	ldr	r3, [pc, #40]	; (8019ed8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019eae:	681b      	ldr	r3, [r3, #0]
 8019eb0:	68ba      	ldr	r2, [r7, #8]
 8019eb2:	429a      	cmp	r2, r3
 8019eb4:	d202      	bcs.n	8019ebc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8019eb6:	4a08      	ldr	r2, [pc, #32]	; (8019ed8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019eb8:	68bb      	ldr	r3, [r7, #8]
 8019eba:	6013      	str	r3, [r2, #0]
}
 8019ebc:	bf00      	nop
 8019ebe:	3710      	adds	r7, #16
 8019ec0:	46bd      	mov	sp, r7
 8019ec2:	bd80      	pop	{r7, pc}
 8019ec4:	200011d4 	.word	0x200011d4
 8019ec8:	20000cfc 	.word	0x20000cfc
 8019ecc:	200011bc 	.word	0x200011bc
 8019ed0:	2000118c 	.word	0x2000118c
 8019ed4:	20001188 	.word	0x20001188
 8019ed8:	200011f0 	.word	0x200011f0

08019edc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8019edc:	b580      	push	{r7, lr}
 8019ede:	b08a      	sub	sp, #40	; 0x28
 8019ee0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8019ee2:	2300      	movs	r3, #0
 8019ee4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8019ee6:	f000 fb07 	bl	801a4f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8019eea:	4b1c      	ldr	r3, [pc, #112]	; (8019f5c <xTimerCreateTimerTask+0x80>)
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d021      	beq.n	8019f36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8019ef2:	2300      	movs	r3, #0
 8019ef4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8019ef6:	2300      	movs	r3, #0
 8019ef8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8019efa:	1d3a      	adds	r2, r7, #4
 8019efc:	f107 0108 	add.w	r1, r7, #8
 8019f00:	f107 030c 	add.w	r3, r7, #12
 8019f04:	4618      	mov	r0, r3
 8019f06:	f7fd ff7f 	bl	8017e08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8019f0a:	6879      	ldr	r1, [r7, #4]
 8019f0c:	68bb      	ldr	r3, [r7, #8]
 8019f0e:	68fa      	ldr	r2, [r7, #12]
 8019f10:	9202      	str	r2, [sp, #8]
 8019f12:	9301      	str	r3, [sp, #4]
 8019f14:	2302      	movs	r3, #2
 8019f16:	9300      	str	r3, [sp, #0]
 8019f18:	2300      	movs	r3, #0
 8019f1a:	460a      	mov	r2, r1
 8019f1c:	4910      	ldr	r1, [pc, #64]	; (8019f60 <xTimerCreateTimerTask+0x84>)
 8019f1e:	4811      	ldr	r0, [pc, #68]	; (8019f64 <xTimerCreateTimerTask+0x88>)
 8019f20:	f7fe ff40 	bl	8018da4 <xTaskCreateStatic>
 8019f24:	4603      	mov	r3, r0
 8019f26:	4a10      	ldr	r2, [pc, #64]	; (8019f68 <xTimerCreateTimerTask+0x8c>)
 8019f28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8019f2a:	4b0f      	ldr	r3, [pc, #60]	; (8019f68 <xTimerCreateTimerTask+0x8c>)
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d001      	beq.n	8019f36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8019f32:	2301      	movs	r3, #1
 8019f34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8019f36:	697b      	ldr	r3, [r7, #20]
 8019f38:	2b00      	cmp	r3, #0
 8019f3a:	d10a      	bne.n	8019f52 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8019f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f40:	f383 8811 	msr	BASEPRI, r3
 8019f44:	f3bf 8f6f 	isb	sy
 8019f48:	f3bf 8f4f 	dsb	sy
 8019f4c:	613b      	str	r3, [r7, #16]
}
 8019f4e:	bf00      	nop
 8019f50:	e7fe      	b.n	8019f50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8019f52:	697b      	ldr	r3, [r7, #20]
}
 8019f54:	4618      	mov	r0, r3
 8019f56:	3718      	adds	r7, #24
 8019f58:	46bd      	mov	sp, r7
 8019f5a:	bd80      	pop	{r7, pc}
 8019f5c:	2000122c 	.word	0x2000122c
 8019f60:	0801cd2c 	.word	0x0801cd2c
 8019f64:	0801a0a1 	.word	0x0801a0a1
 8019f68:	20001230 	.word	0x20001230

08019f6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019f6c:	b580      	push	{r7, lr}
 8019f6e:	b08a      	sub	sp, #40	; 0x28
 8019f70:	af00      	add	r7, sp, #0
 8019f72:	60f8      	str	r0, [r7, #12]
 8019f74:	60b9      	str	r1, [r7, #8]
 8019f76:	607a      	str	r2, [r7, #4]
 8019f78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019f7a:	2300      	movs	r3, #0
 8019f7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d10a      	bne.n	8019f9a <xTimerGenericCommand+0x2e>
	__asm volatile
 8019f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f88:	f383 8811 	msr	BASEPRI, r3
 8019f8c:	f3bf 8f6f 	isb	sy
 8019f90:	f3bf 8f4f 	dsb	sy
 8019f94:	623b      	str	r3, [r7, #32]
}
 8019f96:	bf00      	nop
 8019f98:	e7fe      	b.n	8019f98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019f9a:	4b1a      	ldr	r3, [pc, #104]	; (801a004 <xTimerGenericCommand+0x98>)
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d02a      	beq.n	8019ff8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019fa2:	68bb      	ldr	r3, [r7, #8]
 8019fa4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019faa:	68fb      	ldr	r3, [r7, #12]
 8019fac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019fae:	68bb      	ldr	r3, [r7, #8]
 8019fb0:	2b05      	cmp	r3, #5
 8019fb2:	dc18      	bgt.n	8019fe6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019fb4:	f7ff fdb4 	bl	8019b20 <xTaskGetSchedulerState>
 8019fb8:	4603      	mov	r3, r0
 8019fba:	2b02      	cmp	r3, #2
 8019fbc:	d109      	bne.n	8019fd2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019fbe:	4b11      	ldr	r3, [pc, #68]	; (801a004 <xTimerGenericCommand+0x98>)
 8019fc0:	6818      	ldr	r0, [r3, #0]
 8019fc2:	f107 0110 	add.w	r1, r7, #16
 8019fc6:	2300      	movs	r3, #0
 8019fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019fca:	f7fe f9df 	bl	801838c <xQueueGenericSend>
 8019fce:	6278      	str	r0, [r7, #36]	; 0x24
 8019fd0:	e012      	b.n	8019ff8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019fd2:	4b0c      	ldr	r3, [pc, #48]	; (801a004 <xTimerGenericCommand+0x98>)
 8019fd4:	6818      	ldr	r0, [r3, #0]
 8019fd6:	f107 0110 	add.w	r1, r7, #16
 8019fda:	2300      	movs	r3, #0
 8019fdc:	2200      	movs	r2, #0
 8019fde:	f7fe f9d5 	bl	801838c <xQueueGenericSend>
 8019fe2:	6278      	str	r0, [r7, #36]	; 0x24
 8019fe4:	e008      	b.n	8019ff8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019fe6:	4b07      	ldr	r3, [pc, #28]	; (801a004 <xTimerGenericCommand+0x98>)
 8019fe8:	6818      	ldr	r0, [r3, #0]
 8019fea:	f107 0110 	add.w	r1, r7, #16
 8019fee:	2300      	movs	r3, #0
 8019ff0:	683a      	ldr	r2, [r7, #0]
 8019ff2:	f7fe fac9 	bl	8018588 <xQueueGenericSendFromISR>
 8019ff6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019ffa:	4618      	mov	r0, r3
 8019ffc:	3728      	adds	r7, #40	; 0x28
 8019ffe:	46bd      	mov	sp, r7
 801a000:	bd80      	pop	{r7, pc}
 801a002:	bf00      	nop
 801a004:	2000122c 	.word	0x2000122c

0801a008 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b088      	sub	sp, #32
 801a00c:	af02      	add	r7, sp, #8
 801a00e:	6078      	str	r0, [r7, #4]
 801a010:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a012:	4b22      	ldr	r3, [pc, #136]	; (801a09c <prvProcessExpiredTimer+0x94>)
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	68db      	ldr	r3, [r3, #12]
 801a018:	68db      	ldr	r3, [r3, #12]
 801a01a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a01c:	697b      	ldr	r3, [r7, #20]
 801a01e:	3304      	adds	r3, #4
 801a020:	4618      	mov	r0, r3
 801a022:	f7fd ff95 	bl	8017f50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a026:	697b      	ldr	r3, [r7, #20]
 801a028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a02c:	f003 0304 	and.w	r3, r3, #4
 801a030:	2b00      	cmp	r3, #0
 801a032:	d022      	beq.n	801a07a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801a034:	697b      	ldr	r3, [r7, #20]
 801a036:	699a      	ldr	r2, [r3, #24]
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	18d1      	adds	r1, r2, r3
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	683a      	ldr	r2, [r7, #0]
 801a040:	6978      	ldr	r0, [r7, #20]
 801a042:	f000 f8d1 	bl	801a1e8 <prvInsertTimerInActiveList>
 801a046:	4603      	mov	r3, r0
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d01f      	beq.n	801a08c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a04c:	2300      	movs	r3, #0
 801a04e:	9300      	str	r3, [sp, #0]
 801a050:	2300      	movs	r3, #0
 801a052:	687a      	ldr	r2, [r7, #4]
 801a054:	2100      	movs	r1, #0
 801a056:	6978      	ldr	r0, [r7, #20]
 801a058:	f7ff ff88 	bl	8019f6c <xTimerGenericCommand>
 801a05c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801a05e:	693b      	ldr	r3, [r7, #16]
 801a060:	2b00      	cmp	r3, #0
 801a062:	d113      	bne.n	801a08c <prvProcessExpiredTimer+0x84>
	__asm volatile
 801a064:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a068:	f383 8811 	msr	BASEPRI, r3
 801a06c:	f3bf 8f6f 	isb	sy
 801a070:	f3bf 8f4f 	dsb	sy
 801a074:	60fb      	str	r3, [r7, #12]
}
 801a076:	bf00      	nop
 801a078:	e7fe      	b.n	801a078 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a07a:	697b      	ldr	r3, [r7, #20]
 801a07c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a080:	f023 0301 	bic.w	r3, r3, #1
 801a084:	b2da      	uxtb	r2, r3
 801a086:	697b      	ldr	r3, [r7, #20]
 801a088:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a08c:	697b      	ldr	r3, [r7, #20]
 801a08e:	6a1b      	ldr	r3, [r3, #32]
 801a090:	6978      	ldr	r0, [r7, #20]
 801a092:	4798      	blx	r3
}
 801a094:	bf00      	nop
 801a096:	3718      	adds	r7, #24
 801a098:	46bd      	mov	sp, r7
 801a09a:	bd80      	pop	{r7, pc}
 801a09c:	20001224 	.word	0x20001224

0801a0a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b084      	sub	sp, #16
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801a0a8:	f107 0308 	add.w	r3, r7, #8
 801a0ac:	4618      	mov	r0, r3
 801a0ae:	f000 f857 	bl	801a160 <prvGetNextExpireTime>
 801a0b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801a0b4:	68bb      	ldr	r3, [r7, #8]
 801a0b6:	4619      	mov	r1, r3
 801a0b8:	68f8      	ldr	r0, [r7, #12]
 801a0ba:	f000 f803 	bl	801a0c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801a0be:	f000 f8d5 	bl	801a26c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801a0c2:	e7f1      	b.n	801a0a8 <prvTimerTask+0x8>

0801a0c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801a0c4:	b580      	push	{r7, lr}
 801a0c6:	b084      	sub	sp, #16
 801a0c8:	af00      	add	r7, sp, #0
 801a0ca:	6078      	str	r0, [r7, #4]
 801a0cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801a0ce:	f7ff f923 	bl	8019318 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a0d2:	f107 0308 	add.w	r3, r7, #8
 801a0d6:	4618      	mov	r0, r3
 801a0d8:	f000 f866 	bl	801a1a8 <prvSampleTimeNow>
 801a0dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801a0de:	68bb      	ldr	r3, [r7, #8]
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d130      	bne.n	801a146 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801a0e4:	683b      	ldr	r3, [r7, #0]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	d10a      	bne.n	801a100 <prvProcessTimerOrBlockTask+0x3c>
 801a0ea:	687a      	ldr	r2, [r7, #4]
 801a0ec:	68fb      	ldr	r3, [r7, #12]
 801a0ee:	429a      	cmp	r2, r3
 801a0f0:	d806      	bhi.n	801a100 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801a0f2:	f7ff f91f 	bl	8019334 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801a0f6:	68f9      	ldr	r1, [r7, #12]
 801a0f8:	6878      	ldr	r0, [r7, #4]
 801a0fa:	f7ff ff85 	bl	801a008 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801a0fe:	e024      	b.n	801a14a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801a100:	683b      	ldr	r3, [r7, #0]
 801a102:	2b00      	cmp	r3, #0
 801a104:	d008      	beq.n	801a118 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801a106:	4b13      	ldr	r3, [pc, #76]	; (801a154 <prvProcessTimerOrBlockTask+0x90>)
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	d101      	bne.n	801a114 <prvProcessTimerOrBlockTask+0x50>
 801a110:	2301      	movs	r3, #1
 801a112:	e000      	b.n	801a116 <prvProcessTimerOrBlockTask+0x52>
 801a114:	2300      	movs	r3, #0
 801a116:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801a118:	4b0f      	ldr	r3, [pc, #60]	; (801a158 <prvProcessTimerOrBlockTask+0x94>)
 801a11a:	6818      	ldr	r0, [r3, #0]
 801a11c:	687a      	ldr	r2, [r7, #4]
 801a11e:	68fb      	ldr	r3, [r7, #12]
 801a120:	1ad3      	subs	r3, r2, r3
 801a122:	683a      	ldr	r2, [r7, #0]
 801a124:	4619      	mov	r1, r3
 801a126:	f7fe fe09 	bl	8018d3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801a12a:	f7ff f903 	bl	8019334 <xTaskResumeAll>
 801a12e:	4603      	mov	r3, r0
 801a130:	2b00      	cmp	r3, #0
 801a132:	d10a      	bne.n	801a14a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801a134:	4b09      	ldr	r3, [pc, #36]	; (801a15c <prvProcessTimerOrBlockTask+0x98>)
 801a136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a13a:	601a      	str	r2, [r3, #0]
 801a13c:	f3bf 8f4f 	dsb	sy
 801a140:	f3bf 8f6f 	isb	sy
}
 801a144:	e001      	b.n	801a14a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801a146:	f7ff f8f5 	bl	8019334 <xTaskResumeAll>
}
 801a14a:	bf00      	nop
 801a14c:	3710      	adds	r7, #16
 801a14e:	46bd      	mov	sp, r7
 801a150:	bd80      	pop	{r7, pc}
 801a152:	bf00      	nop
 801a154:	20001228 	.word	0x20001228
 801a158:	2000122c 	.word	0x2000122c
 801a15c:	e000ed04 	.word	0xe000ed04

0801a160 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801a160:	b480      	push	{r7}
 801a162:	b085      	sub	sp, #20
 801a164:	af00      	add	r7, sp, #0
 801a166:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801a168:	4b0e      	ldr	r3, [pc, #56]	; (801a1a4 <prvGetNextExpireTime+0x44>)
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d101      	bne.n	801a176 <prvGetNextExpireTime+0x16>
 801a172:	2201      	movs	r2, #1
 801a174:	e000      	b.n	801a178 <prvGetNextExpireTime+0x18>
 801a176:	2200      	movs	r2, #0
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	2b00      	cmp	r3, #0
 801a182:	d105      	bne.n	801a190 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a184:	4b07      	ldr	r3, [pc, #28]	; (801a1a4 <prvGetNextExpireTime+0x44>)
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	68db      	ldr	r3, [r3, #12]
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	60fb      	str	r3, [r7, #12]
 801a18e:	e001      	b.n	801a194 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801a190:	2300      	movs	r3, #0
 801a192:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801a194:	68fb      	ldr	r3, [r7, #12]
}
 801a196:	4618      	mov	r0, r3
 801a198:	3714      	adds	r7, #20
 801a19a:	46bd      	mov	sp, r7
 801a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1a0:	4770      	bx	lr
 801a1a2:	bf00      	nop
 801a1a4:	20001224 	.word	0x20001224

0801a1a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	b084      	sub	sp, #16
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801a1b0:	f7ff f95e 	bl	8019470 <xTaskGetTickCount>
 801a1b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801a1b6:	4b0b      	ldr	r3, [pc, #44]	; (801a1e4 <prvSampleTimeNow+0x3c>)
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	68fa      	ldr	r2, [r7, #12]
 801a1bc:	429a      	cmp	r2, r3
 801a1be:	d205      	bcs.n	801a1cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801a1c0:	f000 f936 	bl	801a430 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	2201      	movs	r2, #1
 801a1c8:	601a      	str	r2, [r3, #0]
 801a1ca:	e002      	b.n	801a1d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	2200      	movs	r2, #0
 801a1d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801a1d2:	4a04      	ldr	r2, [pc, #16]	; (801a1e4 <prvSampleTimeNow+0x3c>)
 801a1d4:	68fb      	ldr	r3, [r7, #12]
 801a1d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801a1d8:	68fb      	ldr	r3, [r7, #12]
}
 801a1da:	4618      	mov	r0, r3
 801a1dc:	3710      	adds	r7, #16
 801a1de:	46bd      	mov	sp, r7
 801a1e0:	bd80      	pop	{r7, pc}
 801a1e2:	bf00      	nop
 801a1e4:	20001234 	.word	0x20001234

0801a1e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801a1e8:	b580      	push	{r7, lr}
 801a1ea:	b086      	sub	sp, #24
 801a1ec:	af00      	add	r7, sp, #0
 801a1ee:	60f8      	str	r0, [r7, #12]
 801a1f0:	60b9      	str	r1, [r7, #8]
 801a1f2:	607a      	str	r2, [r7, #4]
 801a1f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801a1f6:	2300      	movs	r3, #0
 801a1f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801a1fa:	68fb      	ldr	r3, [r7, #12]
 801a1fc:	68ba      	ldr	r2, [r7, #8]
 801a1fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a200:	68fb      	ldr	r3, [r7, #12]
 801a202:	68fa      	ldr	r2, [r7, #12]
 801a204:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801a206:	68ba      	ldr	r2, [r7, #8]
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	429a      	cmp	r2, r3
 801a20c:	d812      	bhi.n	801a234 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a20e:	687a      	ldr	r2, [r7, #4]
 801a210:	683b      	ldr	r3, [r7, #0]
 801a212:	1ad2      	subs	r2, r2, r3
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	699b      	ldr	r3, [r3, #24]
 801a218:	429a      	cmp	r2, r3
 801a21a:	d302      	bcc.n	801a222 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801a21c:	2301      	movs	r3, #1
 801a21e:	617b      	str	r3, [r7, #20]
 801a220:	e01b      	b.n	801a25a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801a222:	4b10      	ldr	r3, [pc, #64]	; (801a264 <prvInsertTimerInActiveList+0x7c>)
 801a224:	681a      	ldr	r2, [r3, #0]
 801a226:	68fb      	ldr	r3, [r7, #12]
 801a228:	3304      	adds	r3, #4
 801a22a:	4619      	mov	r1, r3
 801a22c:	4610      	mov	r0, r2
 801a22e:	f7fd fe56 	bl	8017ede <vListInsert>
 801a232:	e012      	b.n	801a25a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801a234:	687a      	ldr	r2, [r7, #4]
 801a236:	683b      	ldr	r3, [r7, #0]
 801a238:	429a      	cmp	r2, r3
 801a23a:	d206      	bcs.n	801a24a <prvInsertTimerInActiveList+0x62>
 801a23c:	68ba      	ldr	r2, [r7, #8]
 801a23e:	683b      	ldr	r3, [r7, #0]
 801a240:	429a      	cmp	r2, r3
 801a242:	d302      	bcc.n	801a24a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801a244:	2301      	movs	r3, #1
 801a246:	617b      	str	r3, [r7, #20]
 801a248:	e007      	b.n	801a25a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a24a:	4b07      	ldr	r3, [pc, #28]	; (801a268 <prvInsertTimerInActiveList+0x80>)
 801a24c:	681a      	ldr	r2, [r3, #0]
 801a24e:	68fb      	ldr	r3, [r7, #12]
 801a250:	3304      	adds	r3, #4
 801a252:	4619      	mov	r1, r3
 801a254:	4610      	mov	r0, r2
 801a256:	f7fd fe42 	bl	8017ede <vListInsert>
		}
	}

	return xProcessTimerNow;
 801a25a:	697b      	ldr	r3, [r7, #20]
}
 801a25c:	4618      	mov	r0, r3
 801a25e:	3718      	adds	r7, #24
 801a260:	46bd      	mov	sp, r7
 801a262:	bd80      	pop	{r7, pc}
 801a264:	20001228 	.word	0x20001228
 801a268:	20001224 	.word	0x20001224

0801a26c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801a26c:	b580      	push	{r7, lr}
 801a26e:	b08e      	sub	sp, #56	; 0x38
 801a270:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a272:	e0ca      	b.n	801a40a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	2b00      	cmp	r3, #0
 801a278:	da18      	bge.n	801a2ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801a27a:	1d3b      	adds	r3, r7, #4
 801a27c:	3304      	adds	r3, #4
 801a27e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801a280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a282:	2b00      	cmp	r3, #0
 801a284:	d10a      	bne.n	801a29c <prvProcessReceivedCommands+0x30>
	__asm volatile
 801a286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a28a:	f383 8811 	msr	BASEPRI, r3
 801a28e:	f3bf 8f6f 	isb	sy
 801a292:	f3bf 8f4f 	dsb	sy
 801a296:	61fb      	str	r3, [r7, #28]
}
 801a298:	bf00      	nop
 801a29a:	e7fe      	b.n	801a29a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801a29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a2a2:	6850      	ldr	r0, [r2, #4]
 801a2a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a2a6:	6892      	ldr	r2, [r2, #8]
 801a2a8:	4611      	mov	r1, r2
 801a2aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	f2c0 80aa 	blt.w	801a408 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801a2b4:	68fb      	ldr	r3, [r7, #12]
 801a2b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801a2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2ba:	695b      	ldr	r3, [r3, #20]
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d004      	beq.n	801a2ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2c2:	3304      	adds	r3, #4
 801a2c4:	4618      	mov	r0, r3
 801a2c6:	f7fd fe43 	bl	8017f50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a2ca:	463b      	mov	r3, r7
 801a2cc:	4618      	mov	r0, r3
 801a2ce:	f7ff ff6b 	bl	801a1a8 <prvSampleTimeNow>
 801a2d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	2b09      	cmp	r3, #9
 801a2d8:	f200 8097 	bhi.w	801a40a <prvProcessReceivedCommands+0x19e>
 801a2dc:	a201      	add	r2, pc, #4	; (adr r2, 801a2e4 <prvProcessReceivedCommands+0x78>)
 801a2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a2e2:	bf00      	nop
 801a2e4:	0801a30d 	.word	0x0801a30d
 801a2e8:	0801a30d 	.word	0x0801a30d
 801a2ec:	0801a30d 	.word	0x0801a30d
 801a2f0:	0801a381 	.word	0x0801a381
 801a2f4:	0801a395 	.word	0x0801a395
 801a2f8:	0801a3df 	.word	0x0801a3df
 801a2fc:	0801a30d 	.word	0x0801a30d
 801a300:	0801a30d 	.word	0x0801a30d
 801a304:	0801a381 	.word	0x0801a381
 801a308:	0801a395 	.word	0x0801a395
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a30e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a312:	f043 0301 	orr.w	r3, r3, #1
 801a316:	b2da      	uxtb	r2, r3
 801a318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a31a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801a31e:	68ba      	ldr	r2, [r7, #8]
 801a320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a322:	699b      	ldr	r3, [r3, #24]
 801a324:	18d1      	adds	r1, r2, r3
 801a326:	68bb      	ldr	r3, [r7, #8]
 801a328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a32a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a32c:	f7ff ff5c 	bl	801a1e8 <prvInsertTimerInActiveList>
 801a330:	4603      	mov	r3, r0
 801a332:	2b00      	cmp	r3, #0
 801a334:	d069      	beq.n	801a40a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a338:	6a1b      	ldr	r3, [r3, #32]
 801a33a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a33c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a344:	f003 0304 	and.w	r3, r3, #4
 801a348:	2b00      	cmp	r3, #0
 801a34a:	d05e      	beq.n	801a40a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801a34c:	68ba      	ldr	r2, [r7, #8]
 801a34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a350:	699b      	ldr	r3, [r3, #24]
 801a352:	441a      	add	r2, r3
 801a354:	2300      	movs	r3, #0
 801a356:	9300      	str	r3, [sp, #0]
 801a358:	2300      	movs	r3, #0
 801a35a:	2100      	movs	r1, #0
 801a35c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a35e:	f7ff fe05 	bl	8019f6c <xTimerGenericCommand>
 801a362:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801a364:	6a3b      	ldr	r3, [r7, #32]
 801a366:	2b00      	cmp	r3, #0
 801a368:	d14f      	bne.n	801a40a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801a36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a36e:	f383 8811 	msr	BASEPRI, r3
 801a372:	f3bf 8f6f 	isb	sy
 801a376:	f3bf 8f4f 	dsb	sy
 801a37a:	61bb      	str	r3, [r7, #24]
}
 801a37c:	bf00      	nop
 801a37e:	e7fe      	b.n	801a37e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a382:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a386:	f023 0301 	bic.w	r3, r3, #1
 801a38a:	b2da      	uxtb	r2, r3
 801a38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a38e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801a392:	e03a      	b.n	801a40a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a39a:	f043 0301 	orr.w	r3, r3, #1
 801a39e:	b2da      	uxtb	r2, r3
 801a3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801a3a6:	68ba      	ldr	r2, [r7, #8]
 801a3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801a3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3ae:	699b      	ldr	r3, [r3, #24]
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d10a      	bne.n	801a3ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801a3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3b8:	f383 8811 	msr	BASEPRI, r3
 801a3bc:	f3bf 8f6f 	isb	sy
 801a3c0:	f3bf 8f4f 	dsb	sy
 801a3c4:	617b      	str	r3, [r7, #20]
}
 801a3c6:	bf00      	nop
 801a3c8:	e7fe      	b.n	801a3c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801a3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3cc:	699a      	ldr	r2, [r3, #24]
 801a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3d0:	18d1      	adds	r1, r2, r3
 801a3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a3d8:	f7ff ff06 	bl	801a1e8 <prvInsertTimerInActiveList>
					break;
 801a3dc:	e015      	b.n	801a40a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801a3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a3e4:	f003 0302 	and.w	r3, r3, #2
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d103      	bne.n	801a3f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801a3ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a3ee:	f000 fbdf 	bl	801abb0 <vPortFree>
 801a3f2:	e00a      	b.n	801a40a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a3fa:	f023 0301 	bic.w	r3, r3, #1
 801a3fe:	b2da      	uxtb	r2, r3
 801a400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801a406:	e000      	b.n	801a40a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801a408:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a40a:	4b08      	ldr	r3, [pc, #32]	; (801a42c <prvProcessReceivedCommands+0x1c0>)
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	1d39      	adds	r1, r7, #4
 801a410:	2200      	movs	r2, #0
 801a412:	4618      	mov	r0, r3
 801a414:	f7fe f954 	bl	80186c0 <xQueueReceive>
 801a418:	4603      	mov	r3, r0
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	f47f af2a 	bne.w	801a274 <prvProcessReceivedCommands+0x8>
	}
}
 801a420:	bf00      	nop
 801a422:	bf00      	nop
 801a424:	3730      	adds	r7, #48	; 0x30
 801a426:	46bd      	mov	sp, r7
 801a428:	bd80      	pop	{r7, pc}
 801a42a:	bf00      	nop
 801a42c:	2000122c 	.word	0x2000122c

0801a430 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801a430:	b580      	push	{r7, lr}
 801a432:	b088      	sub	sp, #32
 801a434:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a436:	e048      	b.n	801a4ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a438:	4b2d      	ldr	r3, [pc, #180]	; (801a4f0 <prvSwitchTimerLists+0xc0>)
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	68db      	ldr	r3, [r3, #12]
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a442:	4b2b      	ldr	r3, [pc, #172]	; (801a4f0 <prvSwitchTimerLists+0xc0>)
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	68db      	ldr	r3, [r3, #12]
 801a448:	68db      	ldr	r3, [r3, #12]
 801a44a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	3304      	adds	r3, #4
 801a450:	4618      	mov	r0, r3
 801a452:	f7fd fd7d 	bl	8017f50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	6a1b      	ldr	r3, [r3, #32]
 801a45a:	68f8      	ldr	r0, [r7, #12]
 801a45c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a45e:	68fb      	ldr	r3, [r7, #12]
 801a460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a464:	f003 0304 	and.w	r3, r3, #4
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d02e      	beq.n	801a4ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	699b      	ldr	r3, [r3, #24]
 801a470:	693a      	ldr	r2, [r7, #16]
 801a472:	4413      	add	r3, r2
 801a474:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801a476:	68ba      	ldr	r2, [r7, #8]
 801a478:	693b      	ldr	r3, [r7, #16]
 801a47a:	429a      	cmp	r2, r3
 801a47c:	d90e      	bls.n	801a49c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801a47e:	68fb      	ldr	r3, [r7, #12]
 801a480:	68ba      	ldr	r2, [r7, #8]
 801a482:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a484:	68fb      	ldr	r3, [r7, #12]
 801a486:	68fa      	ldr	r2, [r7, #12]
 801a488:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a48a:	4b19      	ldr	r3, [pc, #100]	; (801a4f0 <prvSwitchTimerLists+0xc0>)
 801a48c:	681a      	ldr	r2, [r3, #0]
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	3304      	adds	r3, #4
 801a492:	4619      	mov	r1, r3
 801a494:	4610      	mov	r0, r2
 801a496:	f7fd fd22 	bl	8017ede <vListInsert>
 801a49a:	e016      	b.n	801a4ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a49c:	2300      	movs	r3, #0
 801a49e:	9300      	str	r3, [sp, #0]
 801a4a0:	2300      	movs	r3, #0
 801a4a2:	693a      	ldr	r2, [r7, #16]
 801a4a4:	2100      	movs	r1, #0
 801a4a6:	68f8      	ldr	r0, [r7, #12]
 801a4a8:	f7ff fd60 	bl	8019f6c <xTimerGenericCommand>
 801a4ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	d10a      	bne.n	801a4ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 801a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a4b8:	f383 8811 	msr	BASEPRI, r3
 801a4bc:	f3bf 8f6f 	isb	sy
 801a4c0:	f3bf 8f4f 	dsb	sy
 801a4c4:	603b      	str	r3, [r7, #0]
}
 801a4c6:	bf00      	nop
 801a4c8:	e7fe      	b.n	801a4c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a4ca:	4b09      	ldr	r3, [pc, #36]	; (801a4f0 <prvSwitchTimerLists+0xc0>)
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d1b1      	bne.n	801a438 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801a4d4:	4b06      	ldr	r3, [pc, #24]	; (801a4f0 <prvSwitchTimerLists+0xc0>)
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801a4da:	4b06      	ldr	r3, [pc, #24]	; (801a4f4 <prvSwitchTimerLists+0xc4>)
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	4a04      	ldr	r2, [pc, #16]	; (801a4f0 <prvSwitchTimerLists+0xc0>)
 801a4e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801a4e2:	4a04      	ldr	r2, [pc, #16]	; (801a4f4 <prvSwitchTimerLists+0xc4>)
 801a4e4:	697b      	ldr	r3, [r7, #20]
 801a4e6:	6013      	str	r3, [r2, #0]
}
 801a4e8:	bf00      	nop
 801a4ea:	3718      	adds	r7, #24
 801a4ec:	46bd      	mov	sp, r7
 801a4ee:	bd80      	pop	{r7, pc}
 801a4f0:	20001224 	.word	0x20001224
 801a4f4:	20001228 	.word	0x20001228

0801a4f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801a4f8:	b580      	push	{r7, lr}
 801a4fa:	b082      	sub	sp, #8
 801a4fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801a4fe:	f000 f969 	bl	801a7d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801a502:	4b15      	ldr	r3, [pc, #84]	; (801a558 <prvCheckForValidListAndQueue+0x60>)
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	2b00      	cmp	r3, #0
 801a508:	d120      	bne.n	801a54c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801a50a:	4814      	ldr	r0, [pc, #80]	; (801a55c <prvCheckForValidListAndQueue+0x64>)
 801a50c:	f7fd fc96 	bl	8017e3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801a510:	4813      	ldr	r0, [pc, #76]	; (801a560 <prvCheckForValidListAndQueue+0x68>)
 801a512:	f7fd fc93 	bl	8017e3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801a516:	4b13      	ldr	r3, [pc, #76]	; (801a564 <prvCheckForValidListAndQueue+0x6c>)
 801a518:	4a10      	ldr	r2, [pc, #64]	; (801a55c <prvCheckForValidListAndQueue+0x64>)
 801a51a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801a51c:	4b12      	ldr	r3, [pc, #72]	; (801a568 <prvCheckForValidListAndQueue+0x70>)
 801a51e:	4a10      	ldr	r2, [pc, #64]	; (801a560 <prvCheckForValidListAndQueue+0x68>)
 801a520:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801a522:	2300      	movs	r3, #0
 801a524:	9300      	str	r3, [sp, #0]
 801a526:	4b11      	ldr	r3, [pc, #68]	; (801a56c <prvCheckForValidListAndQueue+0x74>)
 801a528:	4a11      	ldr	r2, [pc, #68]	; (801a570 <prvCheckForValidListAndQueue+0x78>)
 801a52a:	2110      	movs	r1, #16
 801a52c:	200a      	movs	r0, #10
 801a52e:	f7fd fda1 	bl	8018074 <xQueueGenericCreateStatic>
 801a532:	4603      	mov	r3, r0
 801a534:	4a08      	ldr	r2, [pc, #32]	; (801a558 <prvCheckForValidListAndQueue+0x60>)
 801a536:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801a538:	4b07      	ldr	r3, [pc, #28]	; (801a558 <prvCheckForValidListAndQueue+0x60>)
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	d005      	beq.n	801a54c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801a540:	4b05      	ldr	r3, [pc, #20]	; (801a558 <prvCheckForValidListAndQueue+0x60>)
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	490b      	ldr	r1, [pc, #44]	; (801a574 <prvCheckForValidListAndQueue+0x7c>)
 801a546:	4618      	mov	r0, r3
 801a548:	f7fe fbce 	bl	8018ce8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a54c:	f000 f972 	bl	801a834 <vPortExitCritical>
}
 801a550:	bf00      	nop
 801a552:	46bd      	mov	sp, r7
 801a554:	bd80      	pop	{r7, pc}
 801a556:	bf00      	nop
 801a558:	2000122c 	.word	0x2000122c
 801a55c:	200011fc 	.word	0x200011fc
 801a560:	20001210 	.word	0x20001210
 801a564:	20001224 	.word	0x20001224
 801a568:	20001228 	.word	0x20001228
 801a56c:	200012d8 	.word	0x200012d8
 801a570:	20001238 	.word	0x20001238
 801a574:	0801cd34 	.word	0x0801cd34

0801a578 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801a578:	b480      	push	{r7}
 801a57a:	b085      	sub	sp, #20
 801a57c:	af00      	add	r7, sp, #0
 801a57e:	60f8      	str	r0, [r7, #12]
 801a580:	60b9      	str	r1, [r7, #8]
 801a582:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801a584:	68fb      	ldr	r3, [r7, #12]
 801a586:	3b04      	subs	r3, #4
 801a588:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801a58a:	68fb      	ldr	r3, [r7, #12]
 801a58c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801a590:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a592:	68fb      	ldr	r3, [r7, #12]
 801a594:	3b04      	subs	r3, #4
 801a596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801a598:	68bb      	ldr	r3, [r7, #8]
 801a59a:	f023 0201 	bic.w	r2, r3, #1
 801a59e:	68fb      	ldr	r3, [r7, #12]
 801a5a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a5a2:	68fb      	ldr	r3, [r7, #12]
 801a5a4:	3b04      	subs	r3, #4
 801a5a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a5a8:	4a0c      	ldr	r2, [pc, #48]	; (801a5dc <pxPortInitialiseStack+0x64>)
 801a5aa:	68fb      	ldr	r3, [r7, #12]
 801a5ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	3b14      	subs	r3, #20
 801a5b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801a5b4:	687a      	ldr	r2, [r7, #4]
 801a5b6:	68fb      	ldr	r3, [r7, #12]
 801a5b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801a5ba:	68fb      	ldr	r3, [r7, #12]
 801a5bc:	3b04      	subs	r3, #4
 801a5be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801a5c0:	68fb      	ldr	r3, [r7, #12]
 801a5c2:	f06f 0202 	mvn.w	r2, #2
 801a5c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	3b20      	subs	r3, #32
 801a5cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801a5ce:	68fb      	ldr	r3, [r7, #12]
}
 801a5d0:	4618      	mov	r0, r3
 801a5d2:	3714      	adds	r7, #20
 801a5d4:	46bd      	mov	sp, r7
 801a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5da:	4770      	bx	lr
 801a5dc:	0801a5e1 	.word	0x0801a5e1

0801a5e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a5e0:	b480      	push	{r7}
 801a5e2:	b085      	sub	sp, #20
 801a5e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801a5e6:	2300      	movs	r3, #0
 801a5e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801a5ea:	4b12      	ldr	r3, [pc, #72]	; (801a634 <prvTaskExitError+0x54>)
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a5f2:	d00a      	beq.n	801a60a <prvTaskExitError+0x2a>
	__asm volatile
 801a5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a5f8:	f383 8811 	msr	BASEPRI, r3
 801a5fc:	f3bf 8f6f 	isb	sy
 801a600:	f3bf 8f4f 	dsb	sy
 801a604:	60fb      	str	r3, [r7, #12]
}
 801a606:	bf00      	nop
 801a608:	e7fe      	b.n	801a608 <prvTaskExitError+0x28>
	__asm volatile
 801a60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a60e:	f383 8811 	msr	BASEPRI, r3
 801a612:	f3bf 8f6f 	isb	sy
 801a616:	f3bf 8f4f 	dsb	sy
 801a61a:	60bb      	str	r3, [r7, #8]
}
 801a61c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801a61e:	bf00      	nop
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d0fc      	beq.n	801a620 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801a626:	bf00      	nop
 801a628:	bf00      	nop
 801a62a:	3714      	adds	r7, #20
 801a62c:	46bd      	mov	sp, r7
 801a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a632:	4770      	bx	lr
 801a634:	2000014c 	.word	0x2000014c
	...

0801a640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801a640:	4b07      	ldr	r3, [pc, #28]	; (801a660 <pxCurrentTCBConst2>)
 801a642:	6819      	ldr	r1, [r3, #0]
 801a644:	6808      	ldr	r0, [r1, #0]
 801a646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a64a:	f380 8809 	msr	PSP, r0
 801a64e:	f3bf 8f6f 	isb	sy
 801a652:	f04f 0000 	mov.w	r0, #0
 801a656:	f380 8811 	msr	BASEPRI, r0
 801a65a:	4770      	bx	lr
 801a65c:	f3af 8000 	nop.w

0801a660 <pxCurrentTCBConst2>:
 801a660:	20000cfc 	.word	0x20000cfc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801a664:	bf00      	nop
 801a666:	bf00      	nop

0801a668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801a668:	4808      	ldr	r0, [pc, #32]	; (801a68c <prvPortStartFirstTask+0x24>)
 801a66a:	6800      	ldr	r0, [r0, #0]
 801a66c:	6800      	ldr	r0, [r0, #0]
 801a66e:	f380 8808 	msr	MSP, r0
 801a672:	f04f 0000 	mov.w	r0, #0
 801a676:	f380 8814 	msr	CONTROL, r0
 801a67a:	b662      	cpsie	i
 801a67c:	b661      	cpsie	f
 801a67e:	f3bf 8f4f 	dsb	sy
 801a682:	f3bf 8f6f 	isb	sy
 801a686:	df00      	svc	0
 801a688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801a68a:	bf00      	nop
 801a68c:	e000ed08 	.word	0xe000ed08

0801a690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801a690:	b580      	push	{r7, lr}
 801a692:	b086      	sub	sp, #24
 801a694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801a696:	4b46      	ldr	r3, [pc, #280]	; (801a7b0 <xPortStartScheduler+0x120>)
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	4a46      	ldr	r2, [pc, #280]	; (801a7b4 <xPortStartScheduler+0x124>)
 801a69c:	4293      	cmp	r3, r2
 801a69e:	d10a      	bne.n	801a6b6 <xPortStartScheduler+0x26>
	__asm volatile
 801a6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a6a4:	f383 8811 	msr	BASEPRI, r3
 801a6a8:	f3bf 8f6f 	isb	sy
 801a6ac:	f3bf 8f4f 	dsb	sy
 801a6b0:	613b      	str	r3, [r7, #16]
}
 801a6b2:	bf00      	nop
 801a6b4:	e7fe      	b.n	801a6b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801a6b6:	4b3e      	ldr	r3, [pc, #248]	; (801a7b0 <xPortStartScheduler+0x120>)
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	4a3f      	ldr	r2, [pc, #252]	; (801a7b8 <xPortStartScheduler+0x128>)
 801a6bc:	4293      	cmp	r3, r2
 801a6be:	d10a      	bne.n	801a6d6 <xPortStartScheduler+0x46>
	__asm volatile
 801a6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a6c4:	f383 8811 	msr	BASEPRI, r3
 801a6c8:	f3bf 8f6f 	isb	sy
 801a6cc:	f3bf 8f4f 	dsb	sy
 801a6d0:	60fb      	str	r3, [r7, #12]
}
 801a6d2:	bf00      	nop
 801a6d4:	e7fe      	b.n	801a6d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801a6d6:	4b39      	ldr	r3, [pc, #228]	; (801a7bc <xPortStartScheduler+0x12c>)
 801a6d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801a6da:	697b      	ldr	r3, [r7, #20]
 801a6dc:	781b      	ldrb	r3, [r3, #0]
 801a6de:	b2db      	uxtb	r3, r3
 801a6e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a6e2:	697b      	ldr	r3, [r7, #20]
 801a6e4:	22ff      	movs	r2, #255	; 0xff
 801a6e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a6e8:	697b      	ldr	r3, [r7, #20]
 801a6ea:	781b      	ldrb	r3, [r3, #0]
 801a6ec:	b2db      	uxtb	r3, r3
 801a6ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a6f0:	78fb      	ldrb	r3, [r7, #3]
 801a6f2:	b2db      	uxtb	r3, r3
 801a6f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801a6f8:	b2da      	uxtb	r2, r3
 801a6fa:	4b31      	ldr	r3, [pc, #196]	; (801a7c0 <xPortStartScheduler+0x130>)
 801a6fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a6fe:	4b31      	ldr	r3, [pc, #196]	; (801a7c4 <xPortStartScheduler+0x134>)
 801a700:	2207      	movs	r2, #7
 801a702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a704:	e009      	b.n	801a71a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801a706:	4b2f      	ldr	r3, [pc, #188]	; (801a7c4 <xPortStartScheduler+0x134>)
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	3b01      	subs	r3, #1
 801a70c:	4a2d      	ldr	r2, [pc, #180]	; (801a7c4 <xPortStartScheduler+0x134>)
 801a70e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a710:	78fb      	ldrb	r3, [r7, #3]
 801a712:	b2db      	uxtb	r3, r3
 801a714:	005b      	lsls	r3, r3, #1
 801a716:	b2db      	uxtb	r3, r3
 801a718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a71a:	78fb      	ldrb	r3, [r7, #3]
 801a71c:	b2db      	uxtb	r3, r3
 801a71e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a722:	2b80      	cmp	r3, #128	; 0x80
 801a724:	d0ef      	beq.n	801a706 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a726:	4b27      	ldr	r3, [pc, #156]	; (801a7c4 <xPortStartScheduler+0x134>)
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	f1c3 0307 	rsb	r3, r3, #7
 801a72e:	2b04      	cmp	r3, #4
 801a730:	d00a      	beq.n	801a748 <xPortStartScheduler+0xb8>
	__asm volatile
 801a732:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a736:	f383 8811 	msr	BASEPRI, r3
 801a73a:	f3bf 8f6f 	isb	sy
 801a73e:	f3bf 8f4f 	dsb	sy
 801a742:	60bb      	str	r3, [r7, #8]
}
 801a744:	bf00      	nop
 801a746:	e7fe      	b.n	801a746 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a748:	4b1e      	ldr	r3, [pc, #120]	; (801a7c4 <xPortStartScheduler+0x134>)
 801a74a:	681b      	ldr	r3, [r3, #0]
 801a74c:	021b      	lsls	r3, r3, #8
 801a74e:	4a1d      	ldr	r2, [pc, #116]	; (801a7c4 <xPortStartScheduler+0x134>)
 801a750:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a752:	4b1c      	ldr	r3, [pc, #112]	; (801a7c4 <xPortStartScheduler+0x134>)
 801a754:	681b      	ldr	r3, [r3, #0]
 801a756:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a75a:	4a1a      	ldr	r2, [pc, #104]	; (801a7c4 <xPortStartScheduler+0x134>)
 801a75c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	b2da      	uxtb	r2, r3
 801a762:	697b      	ldr	r3, [r7, #20]
 801a764:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a766:	4b18      	ldr	r3, [pc, #96]	; (801a7c8 <xPortStartScheduler+0x138>)
 801a768:	681b      	ldr	r3, [r3, #0]
 801a76a:	4a17      	ldr	r2, [pc, #92]	; (801a7c8 <xPortStartScheduler+0x138>)
 801a76c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801a770:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a772:	4b15      	ldr	r3, [pc, #84]	; (801a7c8 <xPortStartScheduler+0x138>)
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	4a14      	ldr	r2, [pc, #80]	; (801a7c8 <xPortStartScheduler+0x138>)
 801a778:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801a77c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a77e:	f000 f8dd 	bl	801a93c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a782:	4b12      	ldr	r3, [pc, #72]	; (801a7cc <xPortStartScheduler+0x13c>)
 801a784:	2200      	movs	r2, #0
 801a786:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801a788:	f000 f8fc 	bl	801a984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a78c:	4b10      	ldr	r3, [pc, #64]	; (801a7d0 <xPortStartScheduler+0x140>)
 801a78e:	681b      	ldr	r3, [r3, #0]
 801a790:	4a0f      	ldr	r2, [pc, #60]	; (801a7d0 <xPortStartScheduler+0x140>)
 801a792:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801a796:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801a798:	f7ff ff66 	bl	801a668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a79c:	f7fe ff44 	bl	8019628 <vTaskSwitchContext>
	prvTaskExitError();
 801a7a0:	f7ff ff1e 	bl	801a5e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a7a4:	2300      	movs	r3, #0
}
 801a7a6:	4618      	mov	r0, r3
 801a7a8:	3718      	adds	r7, #24
 801a7aa:	46bd      	mov	sp, r7
 801a7ac:	bd80      	pop	{r7, pc}
 801a7ae:	bf00      	nop
 801a7b0:	e000ed00 	.word	0xe000ed00
 801a7b4:	410fc271 	.word	0x410fc271
 801a7b8:	410fc270 	.word	0x410fc270
 801a7bc:	e000e400 	.word	0xe000e400
 801a7c0:	20001328 	.word	0x20001328
 801a7c4:	2000132c 	.word	0x2000132c
 801a7c8:	e000ed20 	.word	0xe000ed20
 801a7cc:	2000014c 	.word	0x2000014c
 801a7d0:	e000ef34 	.word	0xe000ef34

0801a7d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a7d4:	b480      	push	{r7}
 801a7d6:	b083      	sub	sp, #12
 801a7d8:	af00      	add	r7, sp, #0
	__asm volatile
 801a7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7de:	f383 8811 	msr	BASEPRI, r3
 801a7e2:	f3bf 8f6f 	isb	sy
 801a7e6:	f3bf 8f4f 	dsb	sy
 801a7ea:	607b      	str	r3, [r7, #4]
}
 801a7ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801a7ee:	4b0f      	ldr	r3, [pc, #60]	; (801a82c <vPortEnterCritical+0x58>)
 801a7f0:	681b      	ldr	r3, [r3, #0]
 801a7f2:	3301      	adds	r3, #1
 801a7f4:	4a0d      	ldr	r2, [pc, #52]	; (801a82c <vPortEnterCritical+0x58>)
 801a7f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801a7f8:	4b0c      	ldr	r3, [pc, #48]	; (801a82c <vPortEnterCritical+0x58>)
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	2b01      	cmp	r3, #1
 801a7fe:	d10f      	bne.n	801a820 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a800:	4b0b      	ldr	r3, [pc, #44]	; (801a830 <vPortEnterCritical+0x5c>)
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	b2db      	uxtb	r3, r3
 801a806:	2b00      	cmp	r3, #0
 801a808:	d00a      	beq.n	801a820 <vPortEnterCritical+0x4c>
	__asm volatile
 801a80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a80e:	f383 8811 	msr	BASEPRI, r3
 801a812:	f3bf 8f6f 	isb	sy
 801a816:	f3bf 8f4f 	dsb	sy
 801a81a:	603b      	str	r3, [r7, #0]
}
 801a81c:	bf00      	nop
 801a81e:	e7fe      	b.n	801a81e <vPortEnterCritical+0x4a>
	}
}
 801a820:	bf00      	nop
 801a822:	370c      	adds	r7, #12
 801a824:	46bd      	mov	sp, r7
 801a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a82a:	4770      	bx	lr
 801a82c:	2000014c 	.word	0x2000014c
 801a830:	e000ed04 	.word	0xe000ed04

0801a834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a834:	b480      	push	{r7}
 801a836:	b083      	sub	sp, #12
 801a838:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a83a:	4b12      	ldr	r3, [pc, #72]	; (801a884 <vPortExitCritical+0x50>)
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	2b00      	cmp	r3, #0
 801a840:	d10a      	bne.n	801a858 <vPortExitCritical+0x24>
	__asm volatile
 801a842:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a846:	f383 8811 	msr	BASEPRI, r3
 801a84a:	f3bf 8f6f 	isb	sy
 801a84e:	f3bf 8f4f 	dsb	sy
 801a852:	607b      	str	r3, [r7, #4]
}
 801a854:	bf00      	nop
 801a856:	e7fe      	b.n	801a856 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801a858:	4b0a      	ldr	r3, [pc, #40]	; (801a884 <vPortExitCritical+0x50>)
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	3b01      	subs	r3, #1
 801a85e:	4a09      	ldr	r2, [pc, #36]	; (801a884 <vPortExitCritical+0x50>)
 801a860:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a862:	4b08      	ldr	r3, [pc, #32]	; (801a884 <vPortExitCritical+0x50>)
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	2b00      	cmp	r3, #0
 801a868:	d105      	bne.n	801a876 <vPortExitCritical+0x42>
 801a86a:	2300      	movs	r3, #0
 801a86c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a86e:	683b      	ldr	r3, [r7, #0]
 801a870:	f383 8811 	msr	BASEPRI, r3
}
 801a874:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801a876:	bf00      	nop
 801a878:	370c      	adds	r7, #12
 801a87a:	46bd      	mov	sp, r7
 801a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a880:	4770      	bx	lr
 801a882:	bf00      	nop
 801a884:	2000014c 	.word	0x2000014c
	...

0801a890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a890:	f3ef 8009 	mrs	r0, PSP
 801a894:	f3bf 8f6f 	isb	sy
 801a898:	4b15      	ldr	r3, [pc, #84]	; (801a8f0 <pxCurrentTCBConst>)
 801a89a:	681a      	ldr	r2, [r3, #0]
 801a89c:	f01e 0f10 	tst.w	lr, #16
 801a8a0:	bf08      	it	eq
 801a8a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a8a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8aa:	6010      	str	r0, [r2, #0]
 801a8ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a8b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 801a8b4:	f380 8811 	msr	BASEPRI, r0
 801a8b8:	f3bf 8f4f 	dsb	sy
 801a8bc:	f3bf 8f6f 	isb	sy
 801a8c0:	f7fe feb2 	bl	8019628 <vTaskSwitchContext>
 801a8c4:	f04f 0000 	mov.w	r0, #0
 801a8c8:	f380 8811 	msr	BASEPRI, r0
 801a8cc:	bc09      	pop	{r0, r3}
 801a8ce:	6819      	ldr	r1, [r3, #0]
 801a8d0:	6808      	ldr	r0, [r1, #0]
 801a8d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8d6:	f01e 0f10 	tst.w	lr, #16
 801a8da:	bf08      	it	eq
 801a8dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a8e0:	f380 8809 	msr	PSP, r0
 801a8e4:	f3bf 8f6f 	isb	sy
 801a8e8:	4770      	bx	lr
 801a8ea:	bf00      	nop
 801a8ec:	f3af 8000 	nop.w

0801a8f0 <pxCurrentTCBConst>:
 801a8f0:	20000cfc 	.word	0x20000cfc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801a8f4:	bf00      	nop
 801a8f6:	bf00      	nop

0801a8f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a8f8:	b580      	push	{r7, lr}
 801a8fa:	b082      	sub	sp, #8
 801a8fc:	af00      	add	r7, sp, #0
	__asm volatile
 801a8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a902:	f383 8811 	msr	BASEPRI, r3
 801a906:	f3bf 8f6f 	isb	sy
 801a90a:	f3bf 8f4f 	dsb	sy
 801a90e:	607b      	str	r3, [r7, #4]
}
 801a910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a912:	f7fe fdcf 	bl	80194b4 <xTaskIncrementTick>
 801a916:	4603      	mov	r3, r0
 801a918:	2b00      	cmp	r3, #0
 801a91a:	d003      	beq.n	801a924 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a91c:	4b06      	ldr	r3, [pc, #24]	; (801a938 <xPortSysTickHandler+0x40>)
 801a91e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a922:	601a      	str	r2, [r3, #0]
 801a924:	2300      	movs	r3, #0
 801a926:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a928:	683b      	ldr	r3, [r7, #0]
 801a92a:	f383 8811 	msr	BASEPRI, r3
}
 801a92e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801a930:	bf00      	nop
 801a932:	3708      	adds	r7, #8
 801a934:	46bd      	mov	sp, r7
 801a936:	bd80      	pop	{r7, pc}
 801a938:	e000ed04 	.word	0xe000ed04

0801a93c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a93c:	b480      	push	{r7}
 801a93e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a940:	4b0b      	ldr	r3, [pc, #44]	; (801a970 <vPortSetupTimerInterrupt+0x34>)
 801a942:	2200      	movs	r2, #0
 801a944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a946:	4b0b      	ldr	r3, [pc, #44]	; (801a974 <vPortSetupTimerInterrupt+0x38>)
 801a948:	2200      	movs	r2, #0
 801a94a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a94c:	4b0a      	ldr	r3, [pc, #40]	; (801a978 <vPortSetupTimerInterrupt+0x3c>)
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	4a0a      	ldr	r2, [pc, #40]	; (801a97c <vPortSetupTimerInterrupt+0x40>)
 801a952:	fba2 2303 	umull	r2, r3, r2, r3
 801a956:	099b      	lsrs	r3, r3, #6
 801a958:	4a09      	ldr	r2, [pc, #36]	; (801a980 <vPortSetupTimerInterrupt+0x44>)
 801a95a:	3b01      	subs	r3, #1
 801a95c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a95e:	4b04      	ldr	r3, [pc, #16]	; (801a970 <vPortSetupTimerInterrupt+0x34>)
 801a960:	2207      	movs	r2, #7
 801a962:	601a      	str	r2, [r3, #0]
}
 801a964:	bf00      	nop
 801a966:	46bd      	mov	sp, r7
 801a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a96c:	4770      	bx	lr
 801a96e:	bf00      	nop
 801a970:	e000e010 	.word	0xe000e010
 801a974:	e000e018 	.word	0xe000e018
 801a978:	20000000 	.word	0x20000000
 801a97c:	10624dd3 	.word	0x10624dd3
 801a980:	e000e014 	.word	0xe000e014

0801a984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a984:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801a994 <vPortEnableVFP+0x10>
 801a988:	6801      	ldr	r1, [r0, #0]
 801a98a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801a98e:	6001      	str	r1, [r0, #0]
 801a990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a992:	bf00      	nop
 801a994:	e000ed88 	.word	0xe000ed88

0801a998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801a998:	b480      	push	{r7}
 801a99a:	b085      	sub	sp, #20
 801a99c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a99e:	f3ef 8305 	mrs	r3, IPSR
 801a9a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a9a4:	68fb      	ldr	r3, [r7, #12]
 801a9a6:	2b0f      	cmp	r3, #15
 801a9a8:	d914      	bls.n	801a9d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a9aa:	4a17      	ldr	r2, [pc, #92]	; (801aa08 <vPortValidateInterruptPriority+0x70>)
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	4413      	add	r3, r2
 801a9b0:	781b      	ldrb	r3, [r3, #0]
 801a9b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a9b4:	4b15      	ldr	r3, [pc, #84]	; (801aa0c <vPortValidateInterruptPriority+0x74>)
 801a9b6:	781b      	ldrb	r3, [r3, #0]
 801a9b8:	7afa      	ldrb	r2, [r7, #11]
 801a9ba:	429a      	cmp	r2, r3
 801a9bc:	d20a      	bcs.n	801a9d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801a9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9c2:	f383 8811 	msr	BASEPRI, r3
 801a9c6:	f3bf 8f6f 	isb	sy
 801a9ca:	f3bf 8f4f 	dsb	sy
 801a9ce:	607b      	str	r3, [r7, #4]
}
 801a9d0:	bf00      	nop
 801a9d2:	e7fe      	b.n	801a9d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a9d4:	4b0e      	ldr	r3, [pc, #56]	; (801aa10 <vPortValidateInterruptPriority+0x78>)
 801a9d6:	681b      	ldr	r3, [r3, #0]
 801a9d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801a9dc:	4b0d      	ldr	r3, [pc, #52]	; (801aa14 <vPortValidateInterruptPriority+0x7c>)
 801a9de:	681b      	ldr	r3, [r3, #0]
 801a9e0:	429a      	cmp	r2, r3
 801a9e2:	d90a      	bls.n	801a9fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801a9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9e8:	f383 8811 	msr	BASEPRI, r3
 801a9ec:	f3bf 8f6f 	isb	sy
 801a9f0:	f3bf 8f4f 	dsb	sy
 801a9f4:	603b      	str	r3, [r7, #0]
}
 801a9f6:	bf00      	nop
 801a9f8:	e7fe      	b.n	801a9f8 <vPortValidateInterruptPriority+0x60>
	}
 801a9fa:	bf00      	nop
 801a9fc:	3714      	adds	r7, #20
 801a9fe:	46bd      	mov	sp, r7
 801aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa04:	4770      	bx	lr
 801aa06:	bf00      	nop
 801aa08:	e000e3f0 	.word	0xe000e3f0
 801aa0c:	20001328 	.word	0x20001328
 801aa10:	e000ed0c 	.word	0xe000ed0c
 801aa14:	2000132c 	.word	0x2000132c

0801aa18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801aa18:	b580      	push	{r7, lr}
 801aa1a:	b08a      	sub	sp, #40	; 0x28
 801aa1c:	af00      	add	r7, sp, #0
 801aa1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801aa20:	2300      	movs	r3, #0
 801aa22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801aa24:	f7fe fc78 	bl	8019318 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801aa28:	4b5b      	ldr	r3, [pc, #364]	; (801ab98 <pvPortMalloc+0x180>)
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d101      	bne.n	801aa34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801aa30:	f000 f920 	bl	801ac74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801aa34:	4b59      	ldr	r3, [pc, #356]	; (801ab9c <pvPortMalloc+0x184>)
 801aa36:	681a      	ldr	r2, [r3, #0]
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	4013      	ands	r3, r2
 801aa3c:	2b00      	cmp	r3, #0
 801aa3e:	f040 8093 	bne.w	801ab68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	d01d      	beq.n	801aa84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801aa48:	2208      	movs	r2, #8
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	4413      	add	r3, r2
 801aa4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	f003 0307 	and.w	r3, r3, #7
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	d014      	beq.n	801aa84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	f023 0307 	bic.w	r3, r3, #7
 801aa60:	3308      	adds	r3, #8
 801aa62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	f003 0307 	and.w	r3, r3, #7
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d00a      	beq.n	801aa84 <pvPortMalloc+0x6c>
	__asm volatile
 801aa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa72:	f383 8811 	msr	BASEPRI, r3
 801aa76:	f3bf 8f6f 	isb	sy
 801aa7a:	f3bf 8f4f 	dsb	sy
 801aa7e:	617b      	str	r3, [r7, #20]
}
 801aa80:	bf00      	nop
 801aa82:	e7fe      	b.n	801aa82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	d06e      	beq.n	801ab68 <pvPortMalloc+0x150>
 801aa8a:	4b45      	ldr	r3, [pc, #276]	; (801aba0 <pvPortMalloc+0x188>)
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	687a      	ldr	r2, [r7, #4]
 801aa90:	429a      	cmp	r2, r3
 801aa92:	d869      	bhi.n	801ab68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801aa94:	4b43      	ldr	r3, [pc, #268]	; (801aba4 <pvPortMalloc+0x18c>)
 801aa96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801aa98:	4b42      	ldr	r3, [pc, #264]	; (801aba4 <pvPortMalloc+0x18c>)
 801aa9a:	681b      	ldr	r3, [r3, #0]
 801aa9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801aa9e:	e004      	b.n	801aaaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801aaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801aaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaac:	685b      	ldr	r3, [r3, #4]
 801aaae:	687a      	ldr	r2, [r7, #4]
 801aab0:	429a      	cmp	r2, r3
 801aab2:	d903      	bls.n	801aabc <pvPortMalloc+0xa4>
 801aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d1f1      	bne.n	801aaa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801aabc:	4b36      	ldr	r3, [pc, #216]	; (801ab98 <pvPortMalloc+0x180>)
 801aabe:	681b      	ldr	r3, [r3, #0]
 801aac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aac2:	429a      	cmp	r2, r3
 801aac4:	d050      	beq.n	801ab68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801aac6:	6a3b      	ldr	r3, [r7, #32]
 801aac8:	681b      	ldr	r3, [r3, #0]
 801aaca:	2208      	movs	r2, #8
 801aacc:	4413      	add	r3, r2
 801aace:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801aad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aad2:	681a      	ldr	r2, [r3, #0]
 801aad4:	6a3b      	ldr	r3, [r7, #32]
 801aad6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801aad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aada:	685a      	ldr	r2, [r3, #4]
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	1ad2      	subs	r2, r2, r3
 801aae0:	2308      	movs	r3, #8
 801aae2:	005b      	lsls	r3, r3, #1
 801aae4:	429a      	cmp	r2, r3
 801aae6:	d91f      	bls.n	801ab28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801aae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	4413      	add	r3, r2
 801aaee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801aaf0:	69bb      	ldr	r3, [r7, #24]
 801aaf2:	f003 0307 	and.w	r3, r3, #7
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d00a      	beq.n	801ab10 <pvPortMalloc+0xf8>
	__asm volatile
 801aafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aafe:	f383 8811 	msr	BASEPRI, r3
 801ab02:	f3bf 8f6f 	isb	sy
 801ab06:	f3bf 8f4f 	dsb	sy
 801ab0a:	613b      	str	r3, [r7, #16]
}
 801ab0c:	bf00      	nop
 801ab0e:	e7fe      	b.n	801ab0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801ab10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab12:	685a      	ldr	r2, [r3, #4]
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	1ad2      	subs	r2, r2, r3
 801ab18:	69bb      	ldr	r3, [r7, #24]
 801ab1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801ab1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab1e:	687a      	ldr	r2, [r7, #4]
 801ab20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801ab22:	69b8      	ldr	r0, [r7, #24]
 801ab24:	f000 f908 	bl	801ad38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801ab28:	4b1d      	ldr	r3, [pc, #116]	; (801aba0 <pvPortMalloc+0x188>)
 801ab2a:	681a      	ldr	r2, [r3, #0]
 801ab2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab2e:	685b      	ldr	r3, [r3, #4]
 801ab30:	1ad3      	subs	r3, r2, r3
 801ab32:	4a1b      	ldr	r2, [pc, #108]	; (801aba0 <pvPortMalloc+0x188>)
 801ab34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801ab36:	4b1a      	ldr	r3, [pc, #104]	; (801aba0 <pvPortMalloc+0x188>)
 801ab38:	681a      	ldr	r2, [r3, #0]
 801ab3a:	4b1b      	ldr	r3, [pc, #108]	; (801aba8 <pvPortMalloc+0x190>)
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	429a      	cmp	r2, r3
 801ab40:	d203      	bcs.n	801ab4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801ab42:	4b17      	ldr	r3, [pc, #92]	; (801aba0 <pvPortMalloc+0x188>)
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	4a18      	ldr	r2, [pc, #96]	; (801aba8 <pvPortMalloc+0x190>)
 801ab48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab4c:	685a      	ldr	r2, [r3, #4]
 801ab4e:	4b13      	ldr	r3, [pc, #76]	; (801ab9c <pvPortMalloc+0x184>)
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	431a      	orrs	r2, r3
 801ab54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801ab58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab5a:	2200      	movs	r2, #0
 801ab5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801ab5e:	4b13      	ldr	r3, [pc, #76]	; (801abac <pvPortMalloc+0x194>)
 801ab60:	681b      	ldr	r3, [r3, #0]
 801ab62:	3301      	adds	r3, #1
 801ab64:	4a11      	ldr	r2, [pc, #68]	; (801abac <pvPortMalloc+0x194>)
 801ab66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801ab68:	f7fe fbe4 	bl	8019334 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801ab6c:	69fb      	ldr	r3, [r7, #28]
 801ab6e:	f003 0307 	and.w	r3, r3, #7
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d00a      	beq.n	801ab8c <pvPortMalloc+0x174>
	__asm volatile
 801ab76:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab7a:	f383 8811 	msr	BASEPRI, r3
 801ab7e:	f3bf 8f6f 	isb	sy
 801ab82:	f3bf 8f4f 	dsb	sy
 801ab86:	60fb      	str	r3, [r7, #12]
}
 801ab88:	bf00      	nop
 801ab8a:	e7fe      	b.n	801ab8a <pvPortMalloc+0x172>
	return pvReturn;
 801ab8c:	69fb      	ldr	r3, [r7, #28]
}
 801ab8e:	4618      	mov	r0, r3
 801ab90:	3728      	adds	r7, #40	; 0x28
 801ab92:	46bd      	mov	sp, r7
 801ab94:	bd80      	pop	{r7, pc}
 801ab96:	bf00      	nop
 801ab98:	20004f38 	.word	0x20004f38
 801ab9c:	20004f4c 	.word	0x20004f4c
 801aba0:	20004f3c 	.word	0x20004f3c
 801aba4:	20004f30 	.word	0x20004f30
 801aba8:	20004f40 	.word	0x20004f40
 801abac:	20004f44 	.word	0x20004f44

0801abb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801abb0:	b580      	push	{r7, lr}
 801abb2:	b086      	sub	sp, #24
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	d04d      	beq.n	801ac5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801abc2:	2308      	movs	r3, #8
 801abc4:	425b      	negs	r3, r3
 801abc6:	697a      	ldr	r2, [r7, #20]
 801abc8:	4413      	add	r3, r2
 801abca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801abcc:	697b      	ldr	r3, [r7, #20]
 801abce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801abd0:	693b      	ldr	r3, [r7, #16]
 801abd2:	685a      	ldr	r2, [r3, #4]
 801abd4:	4b24      	ldr	r3, [pc, #144]	; (801ac68 <vPortFree+0xb8>)
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	4013      	ands	r3, r2
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d10a      	bne.n	801abf4 <vPortFree+0x44>
	__asm volatile
 801abde:	f04f 0350 	mov.w	r3, #80	; 0x50
 801abe2:	f383 8811 	msr	BASEPRI, r3
 801abe6:	f3bf 8f6f 	isb	sy
 801abea:	f3bf 8f4f 	dsb	sy
 801abee:	60fb      	str	r3, [r7, #12]
}
 801abf0:	bf00      	nop
 801abf2:	e7fe      	b.n	801abf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801abf4:	693b      	ldr	r3, [r7, #16]
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	d00a      	beq.n	801ac12 <vPortFree+0x62>
	__asm volatile
 801abfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac00:	f383 8811 	msr	BASEPRI, r3
 801ac04:	f3bf 8f6f 	isb	sy
 801ac08:	f3bf 8f4f 	dsb	sy
 801ac0c:	60bb      	str	r3, [r7, #8]
}
 801ac0e:	bf00      	nop
 801ac10:	e7fe      	b.n	801ac10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801ac12:	693b      	ldr	r3, [r7, #16]
 801ac14:	685a      	ldr	r2, [r3, #4]
 801ac16:	4b14      	ldr	r3, [pc, #80]	; (801ac68 <vPortFree+0xb8>)
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	4013      	ands	r3, r2
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	d01e      	beq.n	801ac5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801ac20:	693b      	ldr	r3, [r7, #16]
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	d11a      	bne.n	801ac5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801ac28:	693b      	ldr	r3, [r7, #16]
 801ac2a:	685a      	ldr	r2, [r3, #4]
 801ac2c:	4b0e      	ldr	r3, [pc, #56]	; (801ac68 <vPortFree+0xb8>)
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	43db      	mvns	r3, r3
 801ac32:	401a      	ands	r2, r3
 801ac34:	693b      	ldr	r3, [r7, #16]
 801ac36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801ac38:	f7fe fb6e 	bl	8019318 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801ac3c:	693b      	ldr	r3, [r7, #16]
 801ac3e:	685a      	ldr	r2, [r3, #4]
 801ac40:	4b0a      	ldr	r3, [pc, #40]	; (801ac6c <vPortFree+0xbc>)
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	4413      	add	r3, r2
 801ac46:	4a09      	ldr	r2, [pc, #36]	; (801ac6c <vPortFree+0xbc>)
 801ac48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801ac4a:	6938      	ldr	r0, [r7, #16]
 801ac4c:	f000 f874 	bl	801ad38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801ac50:	4b07      	ldr	r3, [pc, #28]	; (801ac70 <vPortFree+0xc0>)
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	3301      	adds	r3, #1
 801ac56:	4a06      	ldr	r2, [pc, #24]	; (801ac70 <vPortFree+0xc0>)
 801ac58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801ac5a:	f7fe fb6b 	bl	8019334 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801ac5e:	bf00      	nop
 801ac60:	3718      	adds	r7, #24
 801ac62:	46bd      	mov	sp, r7
 801ac64:	bd80      	pop	{r7, pc}
 801ac66:	bf00      	nop
 801ac68:	20004f4c 	.word	0x20004f4c
 801ac6c:	20004f3c 	.word	0x20004f3c
 801ac70:	20004f48 	.word	0x20004f48

0801ac74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801ac74:	b480      	push	{r7}
 801ac76:	b085      	sub	sp, #20
 801ac78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801ac7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801ac7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801ac80:	4b27      	ldr	r3, [pc, #156]	; (801ad20 <prvHeapInit+0xac>)
 801ac82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	f003 0307 	and.w	r3, r3, #7
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d00c      	beq.n	801aca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801ac8e:	68fb      	ldr	r3, [r7, #12]
 801ac90:	3307      	adds	r3, #7
 801ac92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801ac94:	68fb      	ldr	r3, [r7, #12]
 801ac96:	f023 0307 	bic.w	r3, r3, #7
 801ac9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801ac9c:	68ba      	ldr	r2, [r7, #8]
 801ac9e:	68fb      	ldr	r3, [r7, #12]
 801aca0:	1ad3      	subs	r3, r2, r3
 801aca2:	4a1f      	ldr	r2, [pc, #124]	; (801ad20 <prvHeapInit+0xac>)
 801aca4:	4413      	add	r3, r2
 801aca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801acac:	4a1d      	ldr	r2, [pc, #116]	; (801ad24 <prvHeapInit+0xb0>)
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801acb2:	4b1c      	ldr	r3, [pc, #112]	; (801ad24 <prvHeapInit+0xb0>)
 801acb4:	2200      	movs	r2, #0
 801acb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	68ba      	ldr	r2, [r7, #8]
 801acbc:	4413      	add	r3, r2
 801acbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801acc0:	2208      	movs	r2, #8
 801acc2:	68fb      	ldr	r3, [r7, #12]
 801acc4:	1a9b      	subs	r3, r3, r2
 801acc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801acc8:	68fb      	ldr	r3, [r7, #12]
 801acca:	f023 0307 	bic.w	r3, r3, #7
 801acce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801acd0:	68fb      	ldr	r3, [r7, #12]
 801acd2:	4a15      	ldr	r2, [pc, #84]	; (801ad28 <prvHeapInit+0xb4>)
 801acd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801acd6:	4b14      	ldr	r3, [pc, #80]	; (801ad28 <prvHeapInit+0xb4>)
 801acd8:	681b      	ldr	r3, [r3, #0]
 801acda:	2200      	movs	r2, #0
 801acdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801acde:	4b12      	ldr	r3, [pc, #72]	; (801ad28 <prvHeapInit+0xb4>)
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	2200      	movs	r2, #0
 801ace4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801ace6:	687b      	ldr	r3, [r7, #4]
 801ace8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801acea:	683b      	ldr	r3, [r7, #0]
 801acec:	68fa      	ldr	r2, [r7, #12]
 801acee:	1ad2      	subs	r2, r2, r3
 801acf0:	683b      	ldr	r3, [r7, #0]
 801acf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801acf4:	4b0c      	ldr	r3, [pc, #48]	; (801ad28 <prvHeapInit+0xb4>)
 801acf6:	681a      	ldr	r2, [r3, #0]
 801acf8:	683b      	ldr	r3, [r7, #0]
 801acfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801acfc:	683b      	ldr	r3, [r7, #0]
 801acfe:	685b      	ldr	r3, [r3, #4]
 801ad00:	4a0a      	ldr	r2, [pc, #40]	; (801ad2c <prvHeapInit+0xb8>)
 801ad02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801ad04:	683b      	ldr	r3, [r7, #0]
 801ad06:	685b      	ldr	r3, [r3, #4]
 801ad08:	4a09      	ldr	r2, [pc, #36]	; (801ad30 <prvHeapInit+0xbc>)
 801ad0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801ad0c:	4b09      	ldr	r3, [pc, #36]	; (801ad34 <prvHeapInit+0xc0>)
 801ad0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801ad12:	601a      	str	r2, [r3, #0]
}
 801ad14:	bf00      	nop
 801ad16:	3714      	adds	r7, #20
 801ad18:	46bd      	mov	sp, r7
 801ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad1e:	4770      	bx	lr
 801ad20:	20001330 	.word	0x20001330
 801ad24:	20004f30 	.word	0x20004f30
 801ad28:	20004f38 	.word	0x20004f38
 801ad2c:	20004f40 	.word	0x20004f40
 801ad30:	20004f3c 	.word	0x20004f3c
 801ad34:	20004f4c 	.word	0x20004f4c

0801ad38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801ad38:	b480      	push	{r7}
 801ad3a:	b085      	sub	sp, #20
 801ad3c:	af00      	add	r7, sp, #0
 801ad3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801ad40:	4b28      	ldr	r3, [pc, #160]	; (801ade4 <prvInsertBlockIntoFreeList+0xac>)
 801ad42:	60fb      	str	r3, [r7, #12]
 801ad44:	e002      	b.n	801ad4c <prvInsertBlockIntoFreeList+0x14>
 801ad46:	68fb      	ldr	r3, [r7, #12]
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	60fb      	str	r3, [r7, #12]
 801ad4c:	68fb      	ldr	r3, [r7, #12]
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	687a      	ldr	r2, [r7, #4]
 801ad52:	429a      	cmp	r2, r3
 801ad54:	d8f7      	bhi.n	801ad46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801ad56:	68fb      	ldr	r3, [r7, #12]
 801ad58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801ad5a:	68fb      	ldr	r3, [r7, #12]
 801ad5c:	685b      	ldr	r3, [r3, #4]
 801ad5e:	68ba      	ldr	r2, [r7, #8]
 801ad60:	4413      	add	r3, r2
 801ad62:	687a      	ldr	r2, [r7, #4]
 801ad64:	429a      	cmp	r2, r3
 801ad66:	d108      	bne.n	801ad7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801ad68:	68fb      	ldr	r3, [r7, #12]
 801ad6a:	685a      	ldr	r2, [r3, #4]
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	685b      	ldr	r3, [r3, #4]
 801ad70:	441a      	add	r2, r3
 801ad72:	68fb      	ldr	r3, [r7, #12]
 801ad74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	685b      	ldr	r3, [r3, #4]
 801ad82:	68ba      	ldr	r2, [r7, #8]
 801ad84:	441a      	add	r2, r3
 801ad86:	68fb      	ldr	r3, [r7, #12]
 801ad88:	681b      	ldr	r3, [r3, #0]
 801ad8a:	429a      	cmp	r2, r3
 801ad8c:	d118      	bne.n	801adc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801ad8e:	68fb      	ldr	r3, [r7, #12]
 801ad90:	681a      	ldr	r2, [r3, #0]
 801ad92:	4b15      	ldr	r3, [pc, #84]	; (801ade8 <prvInsertBlockIntoFreeList+0xb0>)
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	429a      	cmp	r2, r3
 801ad98:	d00d      	beq.n	801adb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	685a      	ldr	r2, [r3, #4]
 801ad9e:	68fb      	ldr	r3, [r7, #12]
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	685b      	ldr	r3, [r3, #4]
 801ada4:	441a      	add	r2, r3
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801adaa:	68fb      	ldr	r3, [r7, #12]
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	681a      	ldr	r2, [r3, #0]
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	601a      	str	r2, [r3, #0]
 801adb4:	e008      	b.n	801adc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801adb6:	4b0c      	ldr	r3, [pc, #48]	; (801ade8 <prvInsertBlockIntoFreeList+0xb0>)
 801adb8:	681a      	ldr	r2, [r3, #0]
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	601a      	str	r2, [r3, #0]
 801adbe:	e003      	b.n	801adc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801adc0:	68fb      	ldr	r3, [r7, #12]
 801adc2:	681a      	ldr	r2, [r3, #0]
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801adc8:	68fa      	ldr	r2, [r7, #12]
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	429a      	cmp	r2, r3
 801adce:	d002      	beq.n	801add6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801add0:	68fb      	ldr	r3, [r7, #12]
 801add2:	687a      	ldr	r2, [r7, #4]
 801add4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801add6:	bf00      	nop
 801add8:	3714      	adds	r7, #20
 801adda:	46bd      	mov	sp, r7
 801addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ade0:	4770      	bx	lr
 801ade2:	bf00      	nop
 801ade4:	20004f30 	.word	0x20004f30
 801ade8:	20004f38 	.word	0x20004f38

0801adec <MX_USB_DEVICE_Init>:

/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(void) {
 801adec:	b580      	push	{r7, lr}
 801adee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 801adf0:	2200      	movs	r2, #0
 801adf2:	4912      	ldr	r1, [pc, #72]	; (801ae3c <MX_USB_DEVICE_Init+0x50>)
 801adf4:	4812      	ldr	r0, [pc, #72]	; (801ae40 <MX_USB_DEVICE_Init+0x54>)
 801adf6:	f7fb fbef 	bl	80165d8 <USBD_Init>
 801adfa:	4603      	mov	r3, r0
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	d001      	beq.n	801ae04 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 801ae00:	f7f3 fa98 	bl	800e334 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801ae04:	490f      	ldr	r1, [pc, #60]	; (801ae44 <MX_USB_DEVICE_Init+0x58>)
 801ae06:	480e      	ldr	r0, [pc, #56]	; (801ae40 <MX_USB_DEVICE_Init+0x54>)
 801ae08:	f7fb fc16 	bl	8016638 <USBD_RegisterClass>
 801ae0c:	4603      	mov	r3, r0
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d001      	beq.n	801ae16 <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 801ae12:	f7f3 fa8f 	bl	800e334 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801ae16:	490c      	ldr	r1, [pc, #48]	; (801ae48 <MX_USB_DEVICE_Init+0x5c>)
 801ae18:	4809      	ldr	r0, [pc, #36]	; (801ae40 <MX_USB_DEVICE_Init+0x54>)
 801ae1a:	f7fb fb37 	bl	801648c <USBD_CDC_RegisterInterface>
 801ae1e:	4603      	mov	r3, r0
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d001      	beq.n	801ae28 <MX_USB_DEVICE_Init+0x3c>
    Error_Handler();
 801ae24:	f7f3 fa86 	bl	800e334 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801ae28:	4805      	ldr	r0, [pc, #20]	; (801ae40 <MX_USB_DEVICE_Init+0x54>)
 801ae2a:	f7fb fc2c 	bl	8016686 <USBD_Start>
 801ae2e:	4603      	mov	r3, r0
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	d001      	beq.n	801ae38 <MX_USB_DEVICE_Init+0x4c>
    Error_Handler();
 801ae34:	f7f3 fa7e 	bl	800e334 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801ae38:	bf00      	nop
 801ae3a:	bd80      	pop	{r7, pc}
 801ae3c:	20000164 	.word	0x20000164
 801ae40:	20007554 	.word	0x20007554
 801ae44:	20000048 	.word	0x20000048
 801ae48:	20000150 	.word	0x20000150

0801ae4c <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 801ae4c:	b580      	push	{r7, lr}
 801ae4e:	af00      	add	r7, sp, #0
  TIM_Config();
 801ae50:	f000 f91a 	bl	801b088 <TIM_Config>

  if (HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK) {
 801ae54:	480b      	ldr	r0, [pc, #44]	; (801ae84 <CDC_Init_FS+0x38>)
 801ae56:	f7f8 fdd7 	bl	8013a08 <HAL_TIM_Base_Start_IT>
 801ae5a:	4603      	mov	r3, r0
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d001      	beq.n	801ae64 <CDC_Init_FS+0x18>
    /* Starting Error */
    Error_Handler();
 801ae60:	f7f3 fa68 	bl	800e334 <Error_Handler>
  }
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 512);
 801ae64:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ae68:	4907      	ldr	r1, [pc, #28]	; (801ae88 <CDC_Init_FS+0x3c>)
 801ae6a:	4808      	ldr	r0, [pc, #32]	; (801ae8c <CDC_Init_FS+0x40>)
 801ae6c:	f7fb fb23 	bl	80164b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801ae70:	4907      	ldr	r1, [pc, #28]	; (801ae90 <CDC_Init_FS+0x44>)
 801ae72:	4806      	ldr	r0, [pc, #24]	; (801ae8c <CDC_Init_FS+0x40>)
 801ae74:	f7fb fb3d 	bl	80164f2 <USBD_CDC_SetRxBuffer>

  usb_initialized = true;
 801ae78:	4b06      	ldr	r3, [pc, #24]	; (801ae94 <CDC_Init_FS+0x48>)
 801ae7a:	2201      	movs	r2, #1
 801ae7c:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 801ae7e:	2300      	movs	r3, #0
}
 801ae80:	4618      	mov	r0, r3
 801ae82:	bd80      	pop	{r7, pc}
 801ae84:	20007aa8 	.word	0x20007aa8
 801ae88:	20007864 	.word	0x20007864
 801ae8c:	20007554 	.word	0x20007554
 801ae90:	20007824 	.word	0x20007824
 801ae94:	20004f50 	.word	0x20004f50

0801ae98 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 801ae98:	b480      	push	{r7}
 801ae9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801ae9c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801ae9e:	4618      	mov	r0, r3
 801aea0:	46bd      	mov	sp, r7
 801aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aea6:	4770      	bx	lr

0801aea8 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 801aea8:	b480      	push	{r7}
 801aeaa:	b085      	sub	sp, #20
 801aeac:	af00      	add	r7, sp, #0
 801aeae:	4603      	mov	r3, r0
 801aeb0:	6039      	str	r1, [r7, #0]
 801aeb2:	71fb      	strb	r3, [r7, #7]
 801aeb4:	4613      	mov	r3, r2
 801aeb6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  UNUSED(length);
  uint32_t speed = 115200;
 801aeb8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 801aebc:	60fb      	str	r3, [r7, #12]
  switch (cmd) {
 801aebe:	79fb      	ldrb	r3, [r7, #7]
 801aec0:	2b23      	cmp	r3, #35	; 0x23
 801aec2:	d86e      	bhi.n	801afa2 <CDC_Control_FS+0xfa>
 801aec4:	a201      	add	r2, pc, #4	; (adr r2, 801aecc <CDC_Control_FS+0x24>)
 801aec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aeca:	bf00      	nop
 801aecc:	0801afa3 	.word	0x0801afa3
 801aed0:	0801afa3 	.word	0x0801afa3
 801aed4:	0801afa3 	.word	0x0801afa3
 801aed8:	0801afa3 	.word	0x0801afa3
 801aedc:	0801afa3 	.word	0x0801afa3
 801aee0:	0801afa3 	.word	0x0801afa3
 801aee4:	0801afa3 	.word	0x0801afa3
 801aee8:	0801afa3 	.word	0x0801afa3
 801aeec:	0801afa3 	.word	0x0801afa3
 801aef0:	0801afa3 	.word	0x0801afa3
 801aef4:	0801afa3 	.word	0x0801afa3
 801aef8:	0801afa3 	.word	0x0801afa3
 801aefc:	0801afa3 	.word	0x0801afa3
 801af00:	0801afa3 	.word	0x0801afa3
 801af04:	0801afa3 	.word	0x0801afa3
 801af08:	0801afa3 	.word	0x0801afa3
 801af0c:	0801afa3 	.word	0x0801afa3
 801af10:	0801afa3 	.word	0x0801afa3
 801af14:	0801afa3 	.word	0x0801afa3
 801af18:	0801afa3 	.word	0x0801afa3
 801af1c:	0801afa3 	.word	0x0801afa3
 801af20:	0801afa3 	.word	0x0801afa3
 801af24:	0801afa3 	.word	0x0801afa3
 801af28:	0801afa3 	.word	0x0801afa3
 801af2c:	0801afa3 	.word	0x0801afa3
 801af30:	0801afa3 	.word	0x0801afa3
 801af34:	0801afa3 	.word	0x0801afa3
 801af38:	0801afa3 	.word	0x0801afa3
 801af3c:	0801afa3 	.word	0x0801afa3
 801af40:	0801afa3 	.word	0x0801afa3
 801af44:	0801afa3 	.word	0x0801afa3
 801af48:	0801afa3 	.word	0x0801afa3
 801af4c:	0801afa3 	.word	0x0801afa3
 801af50:	0801af5d 	.word	0x0801af5d
 801af54:	0801afa3 	.word	0x0801afa3
 801af58:	0801afa3 	.word	0x0801afa3
    case CDC_SET_LINE_CODING:

      break;

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(speed);
 801af5c:	68fb      	ldr	r3, [r7, #12]
 801af5e:	b2da      	uxtb	r2, r3
 801af60:	683b      	ldr	r3, [r7, #0]
 801af62:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(speed >> 8);
 801af64:	68fb      	ldr	r3, [r7, #12]
 801af66:	0a1a      	lsrs	r2, r3, #8
 801af68:	683b      	ldr	r3, [r7, #0]
 801af6a:	3301      	adds	r3, #1
 801af6c:	b2d2      	uxtb	r2, r2
 801af6e:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(speed >> 16);
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	0c1a      	lsrs	r2, r3, #16
 801af74:	683b      	ldr	r3, [r7, #0]
 801af76:	3302      	adds	r3, #2
 801af78:	b2d2      	uxtb	r2, r2
 801af7a:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(speed >> 24);
 801af7c:	68fb      	ldr	r3, [r7, #12]
 801af7e:	0e1a      	lsrs	r2, r3, #24
 801af80:	683b      	ldr	r3, [r7, #0]
 801af82:	3303      	adds	r3, #3
 801af84:	b2d2      	uxtb	r2, r2
 801af86:	701a      	strb	r2, [r3, #0]
      pbuf[4] = 0;
 801af88:	683b      	ldr	r3, [r7, #0]
 801af8a:	3304      	adds	r3, #4
 801af8c:	2200      	movs	r2, #0
 801af8e:	701a      	strb	r2, [r3, #0]
      pbuf[5] = 0;
 801af90:	683b      	ldr	r3, [r7, #0]
 801af92:	3305      	adds	r3, #5
 801af94:	2200      	movs	r2, #0
 801af96:	701a      	strb	r2, [r3, #0]
      pbuf[6] = 8;
 801af98:	683b      	ldr	r3, [r7, #0]
 801af9a:	3306      	adds	r3, #6
 801af9c:	2208      	movs	r2, #8
 801af9e:	701a      	strb	r2, [r3, #0]
      break;
 801afa0:	e000      	b.n	801afa4 <CDC_Control_FS+0xfc>
    case CDC_SEND_BREAK:

      break;

    default:
      break;
 801afa2:	bf00      	nop
  }

  return (USBD_OK);
 801afa4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801afa6:	4618      	mov	r0, r3
 801afa8:	3714      	adds	r7, #20
 801afaa:	46bd      	mov	sp, r7
 801afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afb0:	4770      	bx	lr
 801afb2:	bf00      	nop

0801afb4 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 801afb4:	b580      	push	{r7, lr}
 801afb6:	b084      	sub	sp, #16
 801afb8:	af00      	add	r7, sp, #0
 801afba:	6078      	str	r0, [r7, #4]
 801afbc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  uint32_t buf_length = *Len;
 801afbe:	683b      	ldr	r3, [r7, #0]
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	60fb      	str	r3, [r7, #12]
  if (buf_length != 0) {
 801afc4:	68fb      	ldr	r3, [r7, #12]
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d004      	beq.n	801afd4 <CDC_Receive_FS+0x20>
    fifo_write_bytes(&usb_input_fifo, Buf, buf_length);
 801afca:	68fa      	ldr	r2, [r7, #12]
 801afcc:	6879      	ldr	r1, [r7, #4]
 801afce:	4807      	ldr	r0, [pc, #28]	; (801afec <CDC_Receive_FS+0x38>)
 801afd0:	f7f4 fd09 	bl	800f9e6 <fifo_write_bytes>
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801afd4:	6879      	ldr	r1, [r7, #4]
 801afd6:	4806      	ldr	r0, [pc, #24]	; (801aff0 <CDC_Receive_FS+0x3c>)
 801afd8:	f7fb fa8b 	bl	80164f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801afdc:	4804      	ldr	r0, [pc, #16]	; (801aff0 <CDC_Receive_FS+0x3c>)
 801afde:	f7fb fad1 	bl	8016584 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801afe2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801afe4:	4618      	mov	r0, r3
 801afe6:	3710      	adds	r7, #16
 801afe8:	46bd      	mov	sp, r7
 801afea:	bd80      	pop	{r7, pc}
 801afec:	2000537c 	.word	0x2000537c
 801aff0:	20007554 	.word	0x20007554

0801aff4 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else
 * USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 801aff4:	b480      	push	{r7}
 801aff6:	b087      	sub	sp, #28
 801aff8:	af00      	add	r7, sp, #0
 801affa:	60f8      	str	r0, [r7, #12]
 801affc:	60b9      	str	r1, [r7, #8]
 801affe:	4613      	mov	r3, r2
 801b000:	71fb      	strb	r3, [r7, #7]
  int8_t result = USBD_OK;
 801b002:	2300      	movs	r3, #0
 801b004:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801b006:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b00a:	4618      	mov	r0, r3
 801b00c:	371c      	adds	r7, #28
 801b00e:	46bd      	mov	sp, r7
 801b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b014:	4770      	bx	lr
	...

0801b018 <TIM5_IRQHandler>:

void TIMUsb_IRQHandler(void) {
 801b018:	b580      	push	{r7, lr}
 801b01a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TimHandle);
 801b01c:	4802      	ldr	r0, [pc, #8]	; (801b028 <TIM5_IRQHandler+0x10>)
 801b01e:	f7f8 fda4 	bl	8013b6a <HAL_TIM_IRQHandler>
}
 801b022:	bf00      	nop
 801b024:	bd80      	pop	{r7, pc}
 801b026:	bf00      	nop
 801b028:	20007aa8 	.word	0x20007aa8

0801b02c <CDC_Transmit_Elapsed>:

void CDC_Transmit_Elapsed() {
 801b02c:	b580      	push	{r7, lr}
 801b02e:	b082      	sub	sp, #8
 801b030:	af00      	add	r7, sp, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 801b032:	4b12      	ldr	r3, [pc, #72]	; (801b07c <CDC_Transmit_Elapsed+0x50>)
 801b034:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801b038:	607b      	str	r3, [r7, #4]
  if (hcdc->TxState == 0) {
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801b040:	2b00      	cmp	r3, #0
 801b042:	d116      	bne.n	801b072 <CDC_Transmit_Elapsed+0x46>
    // Check usb fifo and print out to usb
    uint32_t len = fifo_get_length(&usb_output_fifo);
 801b044:	480e      	ldr	r0, [pc, #56]	; (801b080 <CDC_Transmit_Elapsed+0x54>)
 801b046:	f7f4 fbd8 	bl	800f7fa <fifo_get_length>
 801b04a:	6038      	str	r0, [r7, #0]
    if (len) {
 801b04c:	683b      	ldr	r3, [r7, #0]
 801b04e:	2b00      	cmp	r3, #0
 801b050:	d00f      	beq.n	801b072 <CDC_Transmit_Elapsed+0x46>
      if (fifo_read_bytes(&usb_output_fifo, UserTxBufferFS, len)) {
 801b052:	683a      	ldr	r2, [r7, #0]
 801b054:	490b      	ldr	r1, [pc, #44]	; (801b084 <CDC_Transmit_Elapsed+0x58>)
 801b056:	480a      	ldr	r0, [pc, #40]	; (801b080 <CDC_Transmit_Elapsed+0x54>)
 801b058:	f7f4 fc57 	bl	800f90a <fifo_read_bytes>
 801b05c:	4603      	mov	r3, r0
 801b05e:	2b00      	cmp	r3, #0
 801b060:	d007      	beq.n	801b072 <CDC_Transmit_Elapsed+0x46>
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, len);
 801b062:	683a      	ldr	r2, [r7, #0]
 801b064:	4907      	ldr	r1, [pc, #28]	; (801b084 <CDC_Transmit_Elapsed+0x58>)
 801b066:	4805      	ldr	r0, [pc, #20]	; (801b07c <CDC_Transmit_Elapsed+0x50>)
 801b068:	f7fb fa25 	bl	80164b6 <USBD_CDC_SetTxBuffer>
        USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801b06c:	4803      	ldr	r0, [pc, #12]	; (801b07c <CDC_Transmit_Elapsed+0x50>)
 801b06e:	f7fb fa59 	bl	8016524 <USBD_CDC_TransmitPacket>
      }
    }
  }
}
 801b072:	bf00      	nop
 801b074:	3708      	adds	r7, #8
 801b076:	46bd      	mov	sp, r7
 801b078:	bd80      	pop	{r7, pc}
 801b07a:	bf00      	nop
 801b07c:	20007554 	.word	0x20007554
 801b080:	20005594 	.word	0x20005594
 801b084:	20007864 	.word	0x20007864

0801b088 <TIM_Config>:

static void TIM_Config(void) {
 801b088:	b580      	push	{r7, lr}
 801b08a:	b082      	sub	sp, #8
 801b08c:	af00      	add	r7, sp, #0
   /* Enable TIM peripherals Clock */
  TIMUsb_CLK_ENABLE();
 801b08e:	2300      	movs	r3, #0
 801b090:	607b      	str	r3, [r7, #4]
 801b092:	4b1b      	ldr	r3, [pc, #108]	; (801b100 <TIM_Config+0x78>)
 801b094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b096:	4a1a      	ldr	r2, [pc, #104]	; (801b100 <TIM_Config+0x78>)
 801b098:	f043 0308 	orr.w	r3, r3, #8
 801b09c:	6413      	str	r3, [r2, #64]	; 0x40
 801b09e:	4b18      	ldr	r3, [pc, #96]	; (801b100 <TIM_Config+0x78>)
 801b0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b0a2:	f003 0308 	and.w	r3, r3, #8
 801b0a6:	607b      	str	r3, [r7, #4]
 801b0a8:	687b      	ldr	r3, [r7, #4]

  /* Set TIMUsb instance */
  TimHandle.Instance = TIMUsb;
 801b0aa:	4b16      	ldr	r3, [pc, #88]	; (801b104 <TIM_Config+0x7c>)
 801b0ac:	4a16      	ldr	r2, [pc, #88]	; (801b108 <TIM_Config+0x80>)
 801b0ae:	601a      	str	r2, [r3, #0]

  TimHandle.Init.Period = (CDC_POLLING_INTERVAL * 1000) - 1;
 801b0b0:	4b14      	ldr	r3, [pc, #80]	; (801b104 <TIM_Config+0x7c>)
 801b0b2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 801b0b6:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = (SystemCoreClock / 2 / (1000000)) - 1;
 801b0b8:	4b14      	ldr	r3, [pc, #80]	; (801b10c <TIM_Config+0x84>)
 801b0ba:	681b      	ldr	r3, [r3, #0]
 801b0bc:	4a14      	ldr	r2, [pc, #80]	; (801b110 <TIM_Config+0x88>)
 801b0be:	fba2 2303 	umull	r2, r3, r2, r3
 801b0c2:	0cdb      	lsrs	r3, r3, #19
 801b0c4:	3b01      	subs	r3, #1
 801b0c6:	4a0f      	ldr	r2, [pc, #60]	; (801b104 <TIM_Config+0x7c>)
 801b0c8:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 801b0ca:	4b0e      	ldr	r3, [pc, #56]	; (801b104 <TIM_Config+0x7c>)
 801b0cc:	2200      	movs	r2, #0
 801b0ce:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 801b0d0:	4b0c      	ldr	r3, [pc, #48]	; (801b104 <TIM_Config+0x7c>)
 801b0d2:	2200      	movs	r2, #0
 801b0d4:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK) {
 801b0d6:	480b      	ldr	r0, [pc, #44]	; (801b104 <TIM_Config+0x7c>)
 801b0d8:	f7f8 fc3c 	bl	8013954 <HAL_TIM_Base_Init>
 801b0dc:	4603      	mov	r3, r0
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d001      	beq.n	801b0e6 <TIM_Config+0x5e>
    /* Initialization Error */
    Error_Handler();
 801b0e2:	f7f3 f927 	bl	800e334 <Error_Handler>
  }


  /* Configure the NVIC for TIMx */
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriority(TIMUsb_IRQn, 0, 0);
 801b0e6:	2200      	movs	r2, #0
 801b0e8:	2100      	movs	r1, #0
 801b0ea:	2032      	movs	r0, #50	; 0x32
 801b0ec:	f7f5 fb46 	bl	801077c <HAL_NVIC_SetPriority>

  /* Enable the TIMx global Interrupt */
  HAL_NVIC_EnableIRQ(TIMUsb_IRQn);
 801b0f0:	2032      	movs	r0, #50	; 0x32
 801b0f2:	f7f5 fb5f 	bl	80107b4 <HAL_NVIC_EnableIRQ>
}
 801b0f6:	bf00      	nop
 801b0f8:	3708      	adds	r7, #8
 801b0fa:	46bd      	mov	sp, r7
 801b0fc:	bd80      	pop	{r7, pc}
 801b0fe:	bf00      	nop
 801b100:	40023800 	.word	0x40023800
 801b104:	20007aa8 	.word	0x20007aa8
 801b108:	40000c00 	.word	0x40000c00
 801b10c:	20000000 	.word	0x20000000
 801b110:	431bde83 	.word	0x431bde83

0801b114 <USBD_FS_DeviceDescriptor>:
 * @brief  Return the device descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801b114:	b480      	push	{r7}
 801b116:	b083      	sub	sp, #12
 801b118:	af00      	add	r7, sp, #0
 801b11a:	4603      	mov	r3, r0
 801b11c:	6039      	str	r1, [r7, #0]
 801b11e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801b120:	683b      	ldr	r3, [r7, #0]
 801b122:	2212      	movs	r2, #18
 801b124:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801b126:	4b03      	ldr	r3, [pc, #12]	; (801b134 <USBD_FS_DeviceDescriptor+0x20>)
}
 801b128:	4618      	mov	r0, r3
 801b12a:	370c      	adds	r7, #12
 801b12c:	46bd      	mov	sp, r7
 801b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b132:	4770      	bx	lr
 801b134:	20000180 	.word	0x20000180

0801b138 <USBD_FS_LangIDStrDescriptor>:
 * @brief  Return the LangID string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801b138:	b480      	push	{r7}
 801b13a:	b083      	sub	sp, #12
 801b13c:	af00      	add	r7, sp, #0
 801b13e:	4603      	mov	r3, r0
 801b140:	6039      	str	r1, [r7, #0]
 801b142:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801b144:	683b      	ldr	r3, [r7, #0]
 801b146:	2204      	movs	r2, #4
 801b148:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801b14a:	4b03      	ldr	r3, [pc, #12]	; (801b158 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801b14c:	4618      	mov	r0, r3
 801b14e:	370c      	adds	r7, #12
 801b150:	46bd      	mov	sp, r7
 801b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b156:	4770      	bx	lr
 801b158:	20000194 	.word	0x20000194

0801b15c <USBD_FS_ProductStrDescriptor>:
 * @brief  Return the product string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801b15c:	b580      	push	{r7, lr}
 801b15e:	b082      	sub	sp, #8
 801b160:	af00      	add	r7, sp, #0
 801b162:	4603      	mov	r3, r0
 801b164:	6039      	str	r1, [r7, #0]
 801b166:	71fb      	strb	r3, [r7, #7]
  if (speed == 0) {
 801b168:	79fb      	ldrb	r3, [r7, #7]
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d105      	bne.n	801b17a <USBD_FS_ProductStrDescriptor+0x1e>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b16e:	683a      	ldr	r2, [r7, #0]
 801b170:	4907      	ldr	r1, [pc, #28]	; (801b190 <USBD_FS_ProductStrDescriptor+0x34>)
 801b172:	4808      	ldr	r0, [pc, #32]	; (801b194 <USBD_FS_ProductStrDescriptor+0x38>)
 801b174:	f7fc fab9 	bl	80176ea <USBD_GetString>
 801b178:	e004      	b.n	801b184 <USBD_FS_ProductStrDescriptor+0x28>
  } else {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b17a:	683a      	ldr	r2, [r7, #0]
 801b17c:	4904      	ldr	r1, [pc, #16]	; (801b190 <USBD_FS_ProductStrDescriptor+0x34>)
 801b17e:	4805      	ldr	r0, [pc, #20]	; (801b194 <USBD_FS_ProductStrDescriptor+0x38>)
 801b180:	f7fc fab3 	bl	80176ea <USBD_GetString>
  }
  return USBD_StrDesc;
 801b184:	4b02      	ldr	r3, [pc, #8]	; (801b190 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801b186:	4618      	mov	r0, r3
 801b188:	3708      	adds	r7, #8
 801b18a:	46bd      	mov	sp, r7
 801b18c:	bd80      	pop	{r7, pc}
 801b18e:	bf00      	nop
 801b190:	20007af0 	.word	0x20007af0
 801b194:	0801cd3c 	.word	0x0801cd3c

0801b198 <USBD_FS_ManufacturerStrDescriptor>:
 * @brief  Return the manufacturer string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801b198:	b580      	push	{r7, lr}
 801b19a:	b082      	sub	sp, #8
 801b19c:	af00      	add	r7, sp, #0
 801b19e:	4603      	mov	r3, r0
 801b1a0:	6039      	str	r1, [r7, #0]
 801b1a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b1a4:	683a      	ldr	r2, [r7, #0]
 801b1a6:	4904      	ldr	r1, [pc, #16]	; (801b1b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801b1a8:	4804      	ldr	r0, [pc, #16]	; (801b1bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b1aa:	f7fc fa9e 	bl	80176ea <USBD_GetString>
  return USBD_StrDesc;
 801b1ae:	4b02      	ldr	r3, [pc, #8]	; (801b1b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	3708      	adds	r7, #8
 801b1b4:	46bd      	mov	sp, r7
 801b1b6:	bd80      	pop	{r7, pc}
 801b1b8:	20007af0 	.word	0x20007af0
 801b1bc:	0801cd4c 	.word	0x0801cd4c

0801b1c0 <USBD_FS_SerialStrDescriptor>:
 * @brief  Return the serial number string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801b1c0:	b580      	push	{r7, lr}
 801b1c2:	b082      	sub	sp, #8
 801b1c4:	af00      	add	r7, sp, #0
 801b1c6:	4603      	mov	r3, r0
 801b1c8:	6039      	str	r1, [r7, #0]
 801b1ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b1cc:	683b      	ldr	r3, [r7, #0]
 801b1ce:	221a      	movs	r2, #26
 801b1d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801b1d2:	f000 f843 	bl	801b25c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *)USBD_StringSerial;
 801b1d6:	4b02      	ldr	r3, [pc, #8]	; (801b1e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801b1d8:	4618      	mov	r0, r3
 801b1da:	3708      	adds	r7, #8
 801b1dc:	46bd      	mov	sp, r7
 801b1de:	bd80      	pop	{r7, pc}
 801b1e0:	20000198 	.word	0x20000198

0801b1e4 <USBD_FS_ConfigStrDescriptor>:
 * @brief  Return the configuration string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801b1e4:	b580      	push	{r7, lr}
 801b1e6:	b082      	sub	sp, #8
 801b1e8:	af00      	add	r7, sp, #0
 801b1ea:	4603      	mov	r3, r0
 801b1ec:	6039      	str	r1, [r7, #0]
 801b1ee:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH) {
 801b1f0:	79fb      	ldrb	r3, [r7, #7]
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	d105      	bne.n	801b202 <USBD_FS_ConfigStrDescriptor+0x1e>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b1f6:	683a      	ldr	r2, [r7, #0]
 801b1f8:	4907      	ldr	r1, [pc, #28]	; (801b218 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b1fa:	4808      	ldr	r0, [pc, #32]	; (801b21c <USBD_FS_ConfigStrDescriptor+0x38>)
 801b1fc:	f7fc fa75 	bl	80176ea <USBD_GetString>
 801b200:	e004      	b.n	801b20c <USBD_FS_ConfigStrDescriptor+0x28>
  } else {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b202:	683a      	ldr	r2, [r7, #0]
 801b204:	4904      	ldr	r1, [pc, #16]	; (801b218 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b206:	4805      	ldr	r0, [pc, #20]	; (801b21c <USBD_FS_ConfigStrDescriptor+0x38>)
 801b208:	f7fc fa6f 	bl	80176ea <USBD_GetString>
  }
  return USBD_StrDesc;
 801b20c:	4b02      	ldr	r3, [pc, #8]	; (801b218 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801b20e:	4618      	mov	r0, r3
 801b210:	3708      	adds	r7, #8
 801b212:	46bd      	mov	sp, r7
 801b214:	bd80      	pop	{r7, pc}
 801b216:	bf00      	nop
 801b218:	20007af0 	.word	0x20007af0
 801b21c:	0801cd54 	.word	0x0801cd54

0801b220 <USBD_FS_InterfaceStrDescriptor>:
 * @brief  Return the interface string descriptor
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length) {
 801b220:	b580      	push	{r7, lr}
 801b222:	b082      	sub	sp, #8
 801b224:	af00      	add	r7, sp, #0
 801b226:	4603      	mov	r3, r0
 801b228:	6039      	str	r1, [r7, #0]
 801b22a:	71fb      	strb	r3, [r7, #7]
  if (speed == 0) {
 801b22c:	79fb      	ldrb	r3, [r7, #7]
 801b22e:	2b00      	cmp	r3, #0
 801b230:	d105      	bne.n	801b23e <USBD_FS_InterfaceStrDescriptor+0x1e>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b232:	683a      	ldr	r2, [r7, #0]
 801b234:	4907      	ldr	r1, [pc, #28]	; (801b254 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b236:	4808      	ldr	r0, [pc, #32]	; (801b258 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b238:	f7fc fa57 	bl	80176ea <USBD_GetString>
 801b23c:	e004      	b.n	801b248 <USBD_FS_InterfaceStrDescriptor+0x28>
  } else {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b23e:	683a      	ldr	r2, [r7, #0]
 801b240:	4904      	ldr	r1, [pc, #16]	; (801b254 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b242:	4805      	ldr	r0, [pc, #20]	; (801b258 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b244:	f7fc fa51 	bl	80176ea <USBD_GetString>
  }
  return USBD_StrDesc;
 801b248:	4b02      	ldr	r3, [pc, #8]	; (801b254 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801b24a:	4618      	mov	r0, r3
 801b24c:	3708      	adds	r7, #8
 801b24e:	46bd      	mov	sp, r7
 801b250:	bd80      	pop	{r7, pc}
 801b252:	bf00      	nop
 801b254:	20007af0 	.word	0x20007af0
 801b258:	0801cd60 	.word	0x0801cd60

0801b25c <Get_SerialNum>:
/**
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void) {
 801b25c:	b580      	push	{r7, lr}
 801b25e:	b084      	sub	sp, #16
 801b260:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 801b262:	4b0f      	ldr	r3, [pc, #60]	; (801b2a0 <Get_SerialNum+0x44>)
 801b264:	681b      	ldr	r3, [r3, #0]
 801b266:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 801b268:	4b0e      	ldr	r3, [pc, #56]	; (801b2a4 <Get_SerialNum+0x48>)
 801b26a:	681b      	ldr	r3, [r3, #0]
 801b26c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 801b26e:	4b0e      	ldr	r3, [pc, #56]	; (801b2a8 <Get_SerialNum+0x4c>)
 801b270:	681b      	ldr	r3, [r3, #0]
 801b272:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801b274:	68fa      	ldr	r2, [r7, #12]
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	4413      	add	r3, r2
 801b27a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0) {
 801b27c:	68fb      	ldr	r3, [r7, #12]
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d009      	beq.n	801b296 <Get_SerialNum+0x3a>
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801b282:	2208      	movs	r2, #8
 801b284:	4909      	ldr	r1, [pc, #36]	; (801b2ac <Get_SerialNum+0x50>)
 801b286:	68f8      	ldr	r0, [r7, #12]
 801b288:	f000 f814 	bl	801b2b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801b28c:	2204      	movs	r2, #4
 801b28e:	4908      	ldr	r1, [pc, #32]	; (801b2b0 <Get_SerialNum+0x54>)
 801b290:	68b8      	ldr	r0, [r7, #8]
 801b292:	f000 f80f 	bl	801b2b4 <IntToUnicode>
  }
}
 801b296:	bf00      	nop
 801b298:	3710      	adds	r7, #16
 801b29a:	46bd      	mov	sp, r7
 801b29c:	bd80      	pop	{r7, pc}
 801b29e:	bf00      	nop
 801b2a0:	1fff7a10 	.word	0x1fff7a10
 801b2a4:	1fff7a14 	.word	0x1fff7a14
 801b2a8:	1fff7a18 	.word	0x1fff7a18
 801b2ac:	2000019a 	.word	0x2000019a
 801b2b0:	200001aa 	.word	0x200001aa

0801b2b4 <IntToUnicode>:
 * @param  value: value to convert
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len) {
 801b2b4:	b480      	push	{r7}
 801b2b6:	b087      	sub	sp, #28
 801b2b8:	af00      	add	r7, sp, #0
 801b2ba:	60f8      	str	r0, [r7, #12]
 801b2bc:	60b9      	str	r1, [r7, #8]
 801b2be:	4613      	mov	r3, r2
 801b2c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801b2c2:	2300      	movs	r3, #0
 801b2c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++) {
 801b2c6:	2300      	movs	r3, #0
 801b2c8:	75fb      	strb	r3, [r7, #23]
 801b2ca:	e027      	b.n	801b31c <IntToUnicode+0x68>
    if (((value >> 28)) < 0xA) {
 801b2cc:	68fb      	ldr	r3, [r7, #12]
 801b2ce:	0f1b      	lsrs	r3, r3, #28
 801b2d0:	2b09      	cmp	r3, #9
 801b2d2:	d80b      	bhi.n	801b2ec <IntToUnicode+0x38>
      pbuf[2 * idx] = (value >> 28) + '0';
 801b2d4:	68fb      	ldr	r3, [r7, #12]
 801b2d6:	0f1b      	lsrs	r3, r3, #28
 801b2d8:	b2da      	uxtb	r2, r3
 801b2da:	7dfb      	ldrb	r3, [r7, #23]
 801b2dc:	005b      	lsls	r3, r3, #1
 801b2de:	4619      	mov	r1, r3
 801b2e0:	68bb      	ldr	r3, [r7, #8]
 801b2e2:	440b      	add	r3, r1
 801b2e4:	3230      	adds	r2, #48	; 0x30
 801b2e6:	b2d2      	uxtb	r2, r2
 801b2e8:	701a      	strb	r2, [r3, #0]
 801b2ea:	e00a      	b.n	801b302 <IntToUnicode+0x4e>
    } else {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801b2ec:	68fb      	ldr	r3, [r7, #12]
 801b2ee:	0f1b      	lsrs	r3, r3, #28
 801b2f0:	b2da      	uxtb	r2, r3
 801b2f2:	7dfb      	ldrb	r3, [r7, #23]
 801b2f4:	005b      	lsls	r3, r3, #1
 801b2f6:	4619      	mov	r1, r3
 801b2f8:	68bb      	ldr	r3, [r7, #8]
 801b2fa:	440b      	add	r3, r1
 801b2fc:	3237      	adds	r2, #55	; 0x37
 801b2fe:	b2d2      	uxtb	r2, r2
 801b300:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801b302:	68fb      	ldr	r3, [r7, #12]
 801b304:	011b      	lsls	r3, r3, #4
 801b306:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801b308:	7dfb      	ldrb	r3, [r7, #23]
 801b30a:	005b      	lsls	r3, r3, #1
 801b30c:	3301      	adds	r3, #1
 801b30e:	68ba      	ldr	r2, [r7, #8]
 801b310:	4413      	add	r3, r2
 801b312:	2200      	movs	r2, #0
 801b314:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++) {
 801b316:	7dfb      	ldrb	r3, [r7, #23]
 801b318:	3301      	adds	r3, #1
 801b31a:	75fb      	strb	r3, [r7, #23]
 801b31c:	7dfa      	ldrb	r2, [r7, #23]
 801b31e:	79fb      	ldrb	r3, [r7, #7]
 801b320:	429a      	cmp	r2, r3
 801b322:	d3d3      	bcc.n	801b2cc <IntToUnicode+0x18>
  }
}
 801b324:	bf00      	nop
 801b326:	bf00      	nop
 801b328:	371c      	adds	r7, #28
 801b32a:	46bd      	mov	sp, r7
 801b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b330:	4770      	bx	lr
	...

0801b334 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801b334:	b580      	push	{r7, lr}
 801b336:	b08a      	sub	sp, #40	; 0x28
 801b338:	af00      	add	r7, sp, #0
 801b33a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801b33c:	f107 0314 	add.w	r3, r7, #20
 801b340:	2200      	movs	r2, #0
 801b342:	601a      	str	r2, [r3, #0]
 801b344:	605a      	str	r2, [r3, #4]
 801b346:	609a      	str	r2, [r3, #8]
 801b348:	60da      	str	r2, [r3, #12]
 801b34a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b354:	d13a      	bne.n	801b3cc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801b356:	2300      	movs	r3, #0
 801b358:	613b      	str	r3, [r7, #16]
 801b35a:	4b1e      	ldr	r3, [pc, #120]	; (801b3d4 <HAL_PCD_MspInit+0xa0>)
 801b35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b35e:	4a1d      	ldr	r2, [pc, #116]	; (801b3d4 <HAL_PCD_MspInit+0xa0>)
 801b360:	f043 0301 	orr.w	r3, r3, #1
 801b364:	6313      	str	r3, [r2, #48]	; 0x30
 801b366:	4b1b      	ldr	r3, [pc, #108]	; (801b3d4 <HAL_PCD_MspInit+0xa0>)
 801b368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b36a:	f003 0301 	and.w	r3, r3, #1
 801b36e:	613b      	str	r3, [r7, #16]
 801b370:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801b372:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801b376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801b378:	2302      	movs	r3, #2
 801b37a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b37c:	2300      	movs	r3, #0
 801b37e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b380:	2303      	movs	r3, #3
 801b382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801b384:	230a      	movs	r3, #10
 801b386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b388:	f107 0314 	add.w	r3, r7, #20
 801b38c:	4619      	mov	r1, r3
 801b38e:	4812      	ldr	r0, [pc, #72]	; (801b3d8 <HAL_PCD_MspInit+0xa4>)
 801b390:	f7f5 fd14 	bl	8010dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801b394:	4b0f      	ldr	r3, [pc, #60]	; (801b3d4 <HAL_PCD_MspInit+0xa0>)
 801b396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b398:	4a0e      	ldr	r2, [pc, #56]	; (801b3d4 <HAL_PCD_MspInit+0xa0>)
 801b39a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b39e:	6353      	str	r3, [r2, #52]	; 0x34
 801b3a0:	2300      	movs	r3, #0
 801b3a2:	60fb      	str	r3, [r7, #12]
 801b3a4:	4b0b      	ldr	r3, [pc, #44]	; (801b3d4 <HAL_PCD_MspInit+0xa0>)
 801b3a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b3a8:	4a0a      	ldr	r2, [pc, #40]	; (801b3d4 <HAL_PCD_MspInit+0xa0>)
 801b3aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801b3ae:	6453      	str	r3, [r2, #68]	; 0x44
 801b3b0:	4b08      	ldr	r3, [pc, #32]	; (801b3d4 <HAL_PCD_MspInit+0xa0>)
 801b3b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b3b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801b3b8:	60fb      	str	r3, [r7, #12]
 801b3ba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801b3bc:	2200      	movs	r2, #0
 801b3be:	2100      	movs	r1, #0
 801b3c0:	2043      	movs	r0, #67	; 0x43
 801b3c2:	f7f5 f9db 	bl	801077c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801b3c6:	2043      	movs	r0, #67	; 0x43
 801b3c8:	f7f5 f9f4 	bl	80107b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801b3cc:	bf00      	nop
 801b3ce:	3728      	adds	r7, #40	; 0x28
 801b3d0:	46bd      	mov	sp, r7
 801b3d2:	bd80      	pop	{r7, pc}
 801b3d4:	40023800 	.word	0x40023800
 801b3d8:	40020000 	.word	0x40020000

0801b3dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b3dc:	b580      	push	{r7, lr}
 801b3de:	b082      	sub	sp, #8
 801b3e0:	af00      	add	r7, sp, #0
 801b3e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801b3f0:	4619      	mov	r1, r3
 801b3f2:	4610      	mov	r0, r2
 801b3f4:	f7fb f992 	bl	801671c <USBD_LL_SetupStage>
}
 801b3f8:	bf00      	nop
 801b3fa:	3708      	adds	r7, #8
 801b3fc:	46bd      	mov	sp, r7
 801b3fe:	bd80      	pop	{r7, pc}

0801b400 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b400:	b580      	push	{r7, lr}
 801b402:	b082      	sub	sp, #8
 801b404:	af00      	add	r7, sp, #0
 801b406:	6078      	str	r0, [r7, #4]
 801b408:	460b      	mov	r3, r1
 801b40a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801b412:	78fa      	ldrb	r2, [r7, #3]
 801b414:	6879      	ldr	r1, [r7, #4]
 801b416:	4613      	mov	r3, r2
 801b418:	00db      	lsls	r3, r3, #3
 801b41a:	1a9b      	subs	r3, r3, r2
 801b41c:	009b      	lsls	r3, r3, #2
 801b41e:	440b      	add	r3, r1
 801b420:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b424:	681a      	ldr	r2, [r3, #0]
 801b426:	78fb      	ldrb	r3, [r7, #3]
 801b428:	4619      	mov	r1, r3
 801b42a:	f7fb f9cc 	bl	80167c6 <USBD_LL_DataOutStage>
}
 801b42e:	bf00      	nop
 801b430:	3708      	adds	r7, #8
 801b432:	46bd      	mov	sp, r7
 801b434:	bd80      	pop	{r7, pc}

0801b436 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b436:	b580      	push	{r7, lr}
 801b438:	b082      	sub	sp, #8
 801b43a:	af00      	add	r7, sp, #0
 801b43c:	6078      	str	r0, [r7, #4]
 801b43e:	460b      	mov	r3, r1
 801b440:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801b448:	78fa      	ldrb	r2, [r7, #3]
 801b44a:	6879      	ldr	r1, [r7, #4]
 801b44c:	4613      	mov	r3, r2
 801b44e:	00db      	lsls	r3, r3, #3
 801b450:	1a9b      	subs	r3, r3, r2
 801b452:	009b      	lsls	r3, r3, #2
 801b454:	440b      	add	r3, r1
 801b456:	3348      	adds	r3, #72	; 0x48
 801b458:	681a      	ldr	r2, [r3, #0]
 801b45a:	78fb      	ldrb	r3, [r7, #3]
 801b45c:	4619      	mov	r1, r3
 801b45e:	f7fb fa15 	bl	801688c <USBD_LL_DataInStage>
}
 801b462:	bf00      	nop
 801b464:	3708      	adds	r7, #8
 801b466:	46bd      	mov	sp, r7
 801b468:	bd80      	pop	{r7, pc}

0801b46a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b46a:	b580      	push	{r7, lr}
 801b46c:	b082      	sub	sp, #8
 801b46e:	af00      	add	r7, sp, #0
 801b470:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801b478:	4618      	mov	r0, r3
 801b47a:	f7fb fb29 	bl	8016ad0 <USBD_LL_SOF>
}
 801b47e:	bf00      	nop
 801b480:	3708      	adds	r7, #8
 801b482:	46bd      	mov	sp, r7
 801b484:	bd80      	pop	{r7, pc}

0801b486 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b486:	b580      	push	{r7, lr}
 801b488:	b084      	sub	sp, #16
 801b48a:	af00      	add	r7, sp, #0
 801b48c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801b48e:	2301      	movs	r3, #1
 801b490:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	68db      	ldr	r3, [r3, #12]
 801b496:	2b02      	cmp	r3, #2
 801b498:	d001      	beq.n	801b49e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801b49a:	f7f2 ff4b 	bl	800e334 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801b4a4:	7bfa      	ldrb	r2, [r7, #15]
 801b4a6:	4611      	mov	r1, r2
 801b4a8:	4618      	mov	r0, r3
 801b4aa:	f7fb fad3 	bl	8016a54 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801b4b4:	4618      	mov	r0, r3
 801b4b6:	f7fb fa7f 	bl	80169b8 <USBD_LL_Reset>
}
 801b4ba:	bf00      	nop
 801b4bc:	3710      	adds	r7, #16
 801b4be:	46bd      	mov	sp, r7
 801b4c0:	bd80      	pop	{r7, pc}
	...

0801b4c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b4c4:	b580      	push	{r7, lr}
 801b4c6:	b082      	sub	sp, #8
 801b4c8:	af00      	add	r7, sp, #0
 801b4ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801b4d2:	4618      	mov	r0, r3
 801b4d4:	f7fb face 	bl	8016a74 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801b4e0:	681b      	ldr	r3, [r3, #0]
 801b4e2:	687a      	ldr	r2, [r7, #4]
 801b4e4:	6812      	ldr	r2, [r2, #0]
 801b4e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801b4ea:	f043 0301 	orr.w	r3, r3, #1
 801b4ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	6a1b      	ldr	r3, [r3, #32]
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d005      	beq.n	801b504 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801b4f8:	4b04      	ldr	r3, [pc, #16]	; (801b50c <HAL_PCD_SuspendCallback+0x48>)
 801b4fa:	691b      	ldr	r3, [r3, #16]
 801b4fc:	4a03      	ldr	r2, [pc, #12]	; (801b50c <HAL_PCD_SuspendCallback+0x48>)
 801b4fe:	f043 0306 	orr.w	r3, r3, #6
 801b502:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801b504:	bf00      	nop
 801b506:	3708      	adds	r7, #8
 801b508:	46bd      	mov	sp, r7
 801b50a:	bd80      	pop	{r7, pc}
 801b50c:	e000ed00 	.word	0xe000ed00

0801b510 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b510:	b580      	push	{r7, lr}
 801b512:	b082      	sub	sp, #8
 801b514:	af00      	add	r7, sp, #0
 801b516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801b51e:	4618      	mov	r0, r3
 801b520:	f7fb fabe 	bl	8016aa0 <USBD_LL_Resume>
}
 801b524:	bf00      	nop
 801b526:	3708      	adds	r7, #8
 801b528:	46bd      	mov	sp, r7
 801b52a:	bd80      	pop	{r7, pc}

0801b52c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b52c:	b580      	push	{r7, lr}
 801b52e:	b082      	sub	sp, #8
 801b530:	af00      	add	r7, sp, #0
 801b532:	6078      	str	r0, [r7, #4]
 801b534:	460b      	mov	r3, r1
 801b536:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801b53e:	78fa      	ldrb	r2, [r7, #3]
 801b540:	4611      	mov	r1, r2
 801b542:	4618      	mov	r0, r3
 801b544:	f7fb fb0c 	bl	8016b60 <USBD_LL_IsoOUTIncomplete>
}
 801b548:	bf00      	nop
 801b54a:	3708      	adds	r7, #8
 801b54c:	46bd      	mov	sp, r7
 801b54e:	bd80      	pop	{r7, pc}

0801b550 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b550:	b580      	push	{r7, lr}
 801b552:	b082      	sub	sp, #8
 801b554:	af00      	add	r7, sp, #0
 801b556:	6078      	str	r0, [r7, #4]
 801b558:	460b      	mov	r3, r1
 801b55a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801b562:	78fa      	ldrb	r2, [r7, #3]
 801b564:	4611      	mov	r1, r2
 801b566:	4618      	mov	r0, r3
 801b568:	f7fb fad4 	bl	8016b14 <USBD_LL_IsoINIncomplete>
}
 801b56c:	bf00      	nop
 801b56e:	3708      	adds	r7, #8
 801b570:	46bd      	mov	sp, r7
 801b572:	bd80      	pop	{r7, pc}

0801b574 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b574:	b580      	push	{r7, lr}
 801b576:	b082      	sub	sp, #8
 801b578:	af00      	add	r7, sp, #0
 801b57a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801b582:	4618      	mov	r0, r3
 801b584:	f7fb fb12 	bl	8016bac <USBD_LL_DevConnected>
}
 801b588:	bf00      	nop
 801b58a:	3708      	adds	r7, #8
 801b58c:	46bd      	mov	sp, r7
 801b58e:	bd80      	pop	{r7, pc}

0801b590 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b590:	b580      	push	{r7, lr}
 801b592:	b082      	sub	sp, #8
 801b594:	af00      	add	r7, sp, #0
 801b596:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801b598:	687b      	ldr	r3, [r7, #4]
 801b59a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801b59e:	4618      	mov	r0, r3
 801b5a0:	f7fb fb0f 	bl	8016bc2 <USBD_LL_DevDisconnected>
}
 801b5a4:	bf00      	nop
 801b5a6:	3708      	adds	r7, #8
 801b5a8:	46bd      	mov	sp, r7
 801b5aa:	bd80      	pop	{r7, pc}

0801b5ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801b5ac:	b580      	push	{r7, lr}
 801b5ae:	b082      	sub	sp, #8
 801b5b0:	af00      	add	r7, sp, #0
 801b5b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	781b      	ldrb	r3, [r3, #0]
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d13c      	bne.n	801b636 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801b5bc:	4a20      	ldr	r2, [pc, #128]	; (801b640 <USBD_LL_Init+0x94>)
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	4a1e      	ldr	r2, [pc, #120]	; (801b640 <USBD_LL_Init+0x94>)
 801b5c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801b5cc:	4b1c      	ldr	r3, [pc, #112]	; (801b640 <USBD_LL_Init+0x94>)
 801b5ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801b5d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801b5d4:	4b1a      	ldr	r3, [pc, #104]	; (801b640 <USBD_LL_Init+0x94>)
 801b5d6:	2204      	movs	r2, #4
 801b5d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801b5da:	4b19      	ldr	r3, [pc, #100]	; (801b640 <USBD_LL_Init+0x94>)
 801b5dc:	2202      	movs	r2, #2
 801b5de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801b5e0:	4b17      	ldr	r3, [pc, #92]	; (801b640 <USBD_LL_Init+0x94>)
 801b5e2:	2200      	movs	r2, #0
 801b5e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801b5e6:	4b16      	ldr	r3, [pc, #88]	; (801b640 <USBD_LL_Init+0x94>)
 801b5e8:	2202      	movs	r2, #2
 801b5ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801b5ec:	4b14      	ldr	r3, [pc, #80]	; (801b640 <USBD_LL_Init+0x94>)
 801b5ee:	2200      	movs	r2, #0
 801b5f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801b5f2:	4b13      	ldr	r3, [pc, #76]	; (801b640 <USBD_LL_Init+0x94>)
 801b5f4:	2200      	movs	r2, #0
 801b5f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801b5f8:	4b11      	ldr	r3, [pc, #68]	; (801b640 <USBD_LL_Init+0x94>)
 801b5fa:	2200      	movs	r2, #0
 801b5fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801b5fe:	4b10      	ldr	r3, [pc, #64]	; (801b640 <USBD_LL_Init+0x94>)
 801b600:	2200      	movs	r2, #0
 801b602:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801b604:	4b0e      	ldr	r3, [pc, #56]	; (801b640 <USBD_LL_Init+0x94>)
 801b606:	2200      	movs	r2, #0
 801b608:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801b60a:	480d      	ldr	r0, [pc, #52]	; (801b640 <USBD_LL_Init+0x94>)
 801b60c:	f7f5 fda4 	bl	8011158 <HAL_PCD_Init>
 801b610:	4603      	mov	r3, r0
 801b612:	2b00      	cmp	r3, #0
 801b614:	d001      	beq.n	801b61a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801b616:	f7f2 fe8d 	bl	800e334 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801b61a:	2180      	movs	r1, #128	; 0x80
 801b61c:	4808      	ldr	r0, [pc, #32]	; (801b640 <USBD_LL_Init+0x94>)
 801b61e:	f7f6 ff02 	bl	8012426 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801b622:	2240      	movs	r2, #64	; 0x40
 801b624:	2100      	movs	r1, #0
 801b626:	4806      	ldr	r0, [pc, #24]	; (801b640 <USBD_LL_Init+0x94>)
 801b628:	f7f6 feb6 	bl	8012398 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801b62c:	2280      	movs	r2, #128	; 0x80
 801b62e:	2101      	movs	r1, #1
 801b630:	4803      	ldr	r0, [pc, #12]	; (801b640 <USBD_LL_Init+0x94>)
 801b632:	f7f6 feb1 	bl	8012398 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801b636:	2300      	movs	r3, #0
}
 801b638:	4618      	mov	r0, r3
 801b63a:	3708      	adds	r7, #8
 801b63c:	46bd      	mov	sp, r7
 801b63e:	bd80      	pop	{r7, pc}
 801b640:	20007cf0 	.word	0x20007cf0

0801b644 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801b644:	b580      	push	{r7, lr}
 801b646:	b084      	sub	sp, #16
 801b648:	af00      	add	r7, sp, #0
 801b64a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b64c:	2300      	movs	r3, #0
 801b64e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b650:	2300      	movs	r3, #0
 801b652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801b65a:	4618      	mov	r0, r3
 801b65c:	f7f5 fe99 	bl	8011392 <HAL_PCD_Start>
 801b660:	4603      	mov	r3, r0
 801b662:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b664:	7bfb      	ldrb	r3, [r7, #15]
 801b666:	4618      	mov	r0, r3
 801b668:	f000 f942 	bl	801b8f0 <USBD_Get_USB_Status>
 801b66c:	4603      	mov	r3, r0
 801b66e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b670:	7bbb      	ldrb	r3, [r7, #14]
}
 801b672:	4618      	mov	r0, r3
 801b674:	3710      	adds	r7, #16
 801b676:	46bd      	mov	sp, r7
 801b678:	bd80      	pop	{r7, pc}

0801b67a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801b67a:	b580      	push	{r7, lr}
 801b67c:	b084      	sub	sp, #16
 801b67e:	af00      	add	r7, sp, #0
 801b680:	6078      	str	r0, [r7, #4]
 801b682:	4608      	mov	r0, r1
 801b684:	4611      	mov	r1, r2
 801b686:	461a      	mov	r2, r3
 801b688:	4603      	mov	r3, r0
 801b68a:	70fb      	strb	r3, [r7, #3]
 801b68c:	460b      	mov	r3, r1
 801b68e:	70bb      	strb	r3, [r7, #2]
 801b690:	4613      	mov	r3, r2
 801b692:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b694:	2300      	movs	r3, #0
 801b696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b698:	2300      	movs	r3, #0
 801b69a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801b6a2:	78bb      	ldrb	r3, [r7, #2]
 801b6a4:	883a      	ldrh	r2, [r7, #0]
 801b6a6:	78f9      	ldrb	r1, [r7, #3]
 801b6a8:	f7f6 fa7d 	bl	8011ba6 <HAL_PCD_EP_Open>
 801b6ac:	4603      	mov	r3, r0
 801b6ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b6b0:	7bfb      	ldrb	r3, [r7, #15]
 801b6b2:	4618      	mov	r0, r3
 801b6b4:	f000 f91c 	bl	801b8f0 <USBD_Get_USB_Status>
 801b6b8:	4603      	mov	r3, r0
 801b6ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b6bc:	7bbb      	ldrb	r3, [r7, #14]
}
 801b6be:	4618      	mov	r0, r3
 801b6c0:	3710      	adds	r7, #16
 801b6c2:	46bd      	mov	sp, r7
 801b6c4:	bd80      	pop	{r7, pc}

0801b6c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b6c6:	b580      	push	{r7, lr}
 801b6c8:	b084      	sub	sp, #16
 801b6ca:	af00      	add	r7, sp, #0
 801b6cc:	6078      	str	r0, [r7, #4]
 801b6ce:	460b      	mov	r3, r1
 801b6d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b6d2:	2300      	movs	r3, #0
 801b6d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b6d6:	2300      	movs	r3, #0
 801b6d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801b6e0:	78fa      	ldrb	r2, [r7, #3]
 801b6e2:	4611      	mov	r1, r2
 801b6e4:	4618      	mov	r0, r3
 801b6e6:	f7f6 fac6 	bl	8011c76 <HAL_PCD_EP_Close>
 801b6ea:	4603      	mov	r3, r0
 801b6ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b6ee:	7bfb      	ldrb	r3, [r7, #15]
 801b6f0:	4618      	mov	r0, r3
 801b6f2:	f000 f8fd 	bl	801b8f0 <USBD_Get_USB_Status>
 801b6f6:	4603      	mov	r3, r0
 801b6f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b6fa:	7bbb      	ldrb	r3, [r7, #14]
}
 801b6fc:	4618      	mov	r0, r3
 801b6fe:	3710      	adds	r7, #16
 801b700:	46bd      	mov	sp, r7
 801b702:	bd80      	pop	{r7, pc}

0801b704 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b704:	b580      	push	{r7, lr}
 801b706:	b084      	sub	sp, #16
 801b708:	af00      	add	r7, sp, #0
 801b70a:	6078      	str	r0, [r7, #4]
 801b70c:	460b      	mov	r3, r1
 801b70e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b710:	2300      	movs	r3, #0
 801b712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b714:	2300      	movs	r3, #0
 801b716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801b71e:	78fa      	ldrb	r2, [r7, #3]
 801b720:	4611      	mov	r1, r2
 801b722:	4618      	mov	r0, r3
 801b724:	f7f6 fb9e 	bl	8011e64 <HAL_PCD_EP_SetStall>
 801b728:	4603      	mov	r3, r0
 801b72a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b72c:	7bfb      	ldrb	r3, [r7, #15]
 801b72e:	4618      	mov	r0, r3
 801b730:	f000 f8de 	bl	801b8f0 <USBD_Get_USB_Status>
 801b734:	4603      	mov	r3, r0
 801b736:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b738:	7bbb      	ldrb	r3, [r7, #14]
}
 801b73a:	4618      	mov	r0, r3
 801b73c:	3710      	adds	r7, #16
 801b73e:	46bd      	mov	sp, r7
 801b740:	bd80      	pop	{r7, pc}

0801b742 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b742:	b580      	push	{r7, lr}
 801b744:	b084      	sub	sp, #16
 801b746:	af00      	add	r7, sp, #0
 801b748:	6078      	str	r0, [r7, #4]
 801b74a:	460b      	mov	r3, r1
 801b74c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b74e:	2300      	movs	r3, #0
 801b750:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b752:	2300      	movs	r3, #0
 801b754:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801b75c:	78fa      	ldrb	r2, [r7, #3]
 801b75e:	4611      	mov	r1, r2
 801b760:	4618      	mov	r0, r3
 801b762:	f7f6 fbe3 	bl	8011f2c <HAL_PCD_EP_ClrStall>
 801b766:	4603      	mov	r3, r0
 801b768:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b76a:	7bfb      	ldrb	r3, [r7, #15]
 801b76c:	4618      	mov	r0, r3
 801b76e:	f000 f8bf 	bl	801b8f0 <USBD_Get_USB_Status>
 801b772:	4603      	mov	r3, r0
 801b774:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b776:	7bbb      	ldrb	r3, [r7, #14]
}
 801b778:	4618      	mov	r0, r3
 801b77a:	3710      	adds	r7, #16
 801b77c:	46bd      	mov	sp, r7
 801b77e:	bd80      	pop	{r7, pc}

0801b780 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b780:	b480      	push	{r7}
 801b782:	b085      	sub	sp, #20
 801b784:	af00      	add	r7, sp, #0
 801b786:	6078      	str	r0, [r7, #4]
 801b788:	460b      	mov	r3, r1
 801b78a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801b792:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801b794:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b798:	2b00      	cmp	r3, #0
 801b79a:	da0b      	bge.n	801b7b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801b79c:	78fb      	ldrb	r3, [r7, #3]
 801b79e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b7a2:	68f9      	ldr	r1, [r7, #12]
 801b7a4:	4613      	mov	r3, r2
 801b7a6:	00db      	lsls	r3, r3, #3
 801b7a8:	1a9b      	subs	r3, r3, r2
 801b7aa:	009b      	lsls	r3, r3, #2
 801b7ac:	440b      	add	r3, r1
 801b7ae:	333e      	adds	r3, #62	; 0x3e
 801b7b0:	781b      	ldrb	r3, [r3, #0]
 801b7b2:	e00b      	b.n	801b7cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801b7b4:	78fb      	ldrb	r3, [r7, #3]
 801b7b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b7ba:	68f9      	ldr	r1, [r7, #12]
 801b7bc:	4613      	mov	r3, r2
 801b7be:	00db      	lsls	r3, r3, #3
 801b7c0:	1a9b      	subs	r3, r3, r2
 801b7c2:	009b      	lsls	r3, r3, #2
 801b7c4:	440b      	add	r3, r1
 801b7c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801b7ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 801b7cc:	4618      	mov	r0, r3
 801b7ce:	3714      	adds	r7, #20
 801b7d0:	46bd      	mov	sp, r7
 801b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7d6:	4770      	bx	lr

0801b7d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801b7d8:	b580      	push	{r7, lr}
 801b7da:	b084      	sub	sp, #16
 801b7dc:	af00      	add	r7, sp, #0
 801b7de:	6078      	str	r0, [r7, #4]
 801b7e0:	460b      	mov	r3, r1
 801b7e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b7e4:	2300      	movs	r3, #0
 801b7e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b7e8:	2300      	movs	r3, #0
 801b7ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801b7f2:	78fa      	ldrb	r2, [r7, #3]
 801b7f4:	4611      	mov	r1, r2
 801b7f6:	4618      	mov	r0, r3
 801b7f8:	f7f6 f9b0 	bl	8011b5c <HAL_PCD_SetAddress>
 801b7fc:	4603      	mov	r3, r0
 801b7fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b800:	7bfb      	ldrb	r3, [r7, #15]
 801b802:	4618      	mov	r0, r3
 801b804:	f000 f874 	bl	801b8f0 <USBD_Get_USB_Status>
 801b808:	4603      	mov	r3, r0
 801b80a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b80c:	7bbb      	ldrb	r3, [r7, #14]
}
 801b80e:	4618      	mov	r0, r3
 801b810:	3710      	adds	r7, #16
 801b812:	46bd      	mov	sp, r7
 801b814:	bd80      	pop	{r7, pc}

0801b816 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b816:	b580      	push	{r7, lr}
 801b818:	b086      	sub	sp, #24
 801b81a:	af00      	add	r7, sp, #0
 801b81c:	60f8      	str	r0, [r7, #12]
 801b81e:	607a      	str	r2, [r7, #4]
 801b820:	603b      	str	r3, [r7, #0]
 801b822:	460b      	mov	r3, r1
 801b824:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b826:	2300      	movs	r3, #0
 801b828:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b82a:	2300      	movs	r3, #0
 801b82c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801b82e:	68fb      	ldr	r3, [r7, #12]
 801b830:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801b834:	7af9      	ldrb	r1, [r7, #11]
 801b836:	683b      	ldr	r3, [r7, #0]
 801b838:	687a      	ldr	r2, [r7, #4]
 801b83a:	f7f6 fac9 	bl	8011dd0 <HAL_PCD_EP_Transmit>
 801b83e:	4603      	mov	r3, r0
 801b840:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b842:	7dfb      	ldrb	r3, [r7, #23]
 801b844:	4618      	mov	r0, r3
 801b846:	f000 f853 	bl	801b8f0 <USBD_Get_USB_Status>
 801b84a:	4603      	mov	r3, r0
 801b84c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b84e:	7dbb      	ldrb	r3, [r7, #22]
}
 801b850:	4618      	mov	r0, r3
 801b852:	3718      	adds	r7, #24
 801b854:	46bd      	mov	sp, r7
 801b856:	bd80      	pop	{r7, pc}

0801b858 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801b858:	b580      	push	{r7, lr}
 801b85a:	b086      	sub	sp, #24
 801b85c:	af00      	add	r7, sp, #0
 801b85e:	60f8      	str	r0, [r7, #12]
 801b860:	607a      	str	r2, [r7, #4]
 801b862:	603b      	str	r3, [r7, #0]
 801b864:	460b      	mov	r3, r1
 801b866:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b868:	2300      	movs	r3, #0
 801b86a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b86c:	2300      	movs	r3, #0
 801b86e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801b870:	68fb      	ldr	r3, [r7, #12]
 801b872:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801b876:	7af9      	ldrb	r1, [r7, #11]
 801b878:	683b      	ldr	r3, [r7, #0]
 801b87a:	687a      	ldr	r2, [r7, #4]
 801b87c:	f7f6 fa45 	bl	8011d0a <HAL_PCD_EP_Receive>
 801b880:	4603      	mov	r3, r0
 801b882:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b884:	7dfb      	ldrb	r3, [r7, #23]
 801b886:	4618      	mov	r0, r3
 801b888:	f000 f832 	bl	801b8f0 <USBD_Get_USB_Status>
 801b88c:	4603      	mov	r3, r0
 801b88e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b890:	7dbb      	ldrb	r3, [r7, #22]
}
 801b892:	4618      	mov	r0, r3
 801b894:	3718      	adds	r7, #24
 801b896:	46bd      	mov	sp, r7
 801b898:	bd80      	pop	{r7, pc}

0801b89a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b89a:	b580      	push	{r7, lr}
 801b89c:	b082      	sub	sp, #8
 801b89e:	af00      	add	r7, sp, #0
 801b8a0:	6078      	str	r0, [r7, #4]
 801b8a2:	460b      	mov	r3, r1
 801b8a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801b8ac:	78fa      	ldrb	r2, [r7, #3]
 801b8ae:	4611      	mov	r1, r2
 801b8b0:	4618      	mov	r0, r3
 801b8b2:	f7f6 fa75 	bl	8011da0 <HAL_PCD_EP_GetRxCount>
 801b8b6:	4603      	mov	r3, r0
}
 801b8b8:	4618      	mov	r0, r3
 801b8ba:	3708      	adds	r7, #8
 801b8bc:	46bd      	mov	sp, r7
 801b8be:	bd80      	pop	{r7, pc}

0801b8c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801b8c0:	b480      	push	{r7}
 801b8c2:	b083      	sub	sp, #12
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801b8c8:	4b03      	ldr	r3, [pc, #12]	; (801b8d8 <USBD_static_malloc+0x18>)
}
 801b8ca:	4618      	mov	r0, r3
 801b8cc:	370c      	adds	r7, #12
 801b8ce:	46bd      	mov	sp, r7
 801b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8d4:	4770      	bx	lr
 801b8d6:	bf00      	nop
 801b8d8:	20004f54 	.word	0x20004f54

0801b8dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801b8dc:	b480      	push	{r7}
 801b8de:	b083      	sub	sp, #12
 801b8e0:	af00      	add	r7, sp, #0
 801b8e2:	6078      	str	r0, [r7, #4]

}
 801b8e4:	bf00      	nop
 801b8e6:	370c      	adds	r7, #12
 801b8e8:	46bd      	mov	sp, r7
 801b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ee:	4770      	bx	lr

0801b8f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801b8f0:	b480      	push	{r7}
 801b8f2:	b085      	sub	sp, #20
 801b8f4:	af00      	add	r7, sp, #0
 801b8f6:	4603      	mov	r3, r0
 801b8f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b8fa:	2300      	movs	r3, #0
 801b8fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801b8fe:	79fb      	ldrb	r3, [r7, #7]
 801b900:	2b03      	cmp	r3, #3
 801b902:	d817      	bhi.n	801b934 <USBD_Get_USB_Status+0x44>
 801b904:	a201      	add	r2, pc, #4	; (adr r2, 801b90c <USBD_Get_USB_Status+0x1c>)
 801b906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b90a:	bf00      	nop
 801b90c:	0801b91d 	.word	0x0801b91d
 801b910:	0801b923 	.word	0x0801b923
 801b914:	0801b929 	.word	0x0801b929
 801b918:	0801b92f 	.word	0x0801b92f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801b91c:	2300      	movs	r3, #0
 801b91e:	73fb      	strb	r3, [r7, #15]
    break;
 801b920:	e00b      	b.n	801b93a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801b922:	2303      	movs	r3, #3
 801b924:	73fb      	strb	r3, [r7, #15]
    break;
 801b926:	e008      	b.n	801b93a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801b928:	2301      	movs	r3, #1
 801b92a:	73fb      	strb	r3, [r7, #15]
    break;
 801b92c:	e005      	b.n	801b93a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801b92e:	2303      	movs	r3, #3
 801b930:	73fb      	strb	r3, [r7, #15]
    break;
 801b932:	e002      	b.n	801b93a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801b934:	2303      	movs	r3, #3
 801b936:	73fb      	strb	r3, [r7, #15]
    break;
 801b938:	bf00      	nop
  }
  return usb_status;
 801b93a:	7bfb      	ldrb	r3, [r7, #15]
}
 801b93c:	4618      	mov	r0, r3
 801b93e:	3714      	adds	r7, #20
 801b940:	46bd      	mov	sp, r7
 801b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b946:	4770      	bx	lr

0801b948 <atoi>:
 801b948:	220a      	movs	r2, #10
 801b94a:	2100      	movs	r1, #0
 801b94c:	f000 b96e 	b.w	801bc2c <strtol>

0801b950 <__errno>:
 801b950:	4b01      	ldr	r3, [pc, #4]	; (801b958 <__errno+0x8>)
 801b952:	6818      	ldr	r0, [r3, #0]
 801b954:	4770      	bx	lr
 801b956:	bf00      	nop
 801b958:	200001b4 	.word	0x200001b4

0801b95c <__libc_init_array>:
 801b95c:	b570      	push	{r4, r5, r6, lr}
 801b95e:	4d0d      	ldr	r5, [pc, #52]	; (801b994 <__libc_init_array+0x38>)
 801b960:	4c0d      	ldr	r4, [pc, #52]	; (801b998 <__libc_init_array+0x3c>)
 801b962:	1b64      	subs	r4, r4, r5
 801b964:	10a4      	asrs	r4, r4, #2
 801b966:	2600      	movs	r6, #0
 801b968:	42a6      	cmp	r6, r4
 801b96a:	d109      	bne.n	801b980 <__libc_init_array+0x24>
 801b96c:	4d0b      	ldr	r5, [pc, #44]	; (801b99c <__libc_init_array+0x40>)
 801b96e:	4c0c      	ldr	r4, [pc, #48]	; (801b9a0 <__libc_init_array+0x44>)
 801b970:	f000 fe26 	bl	801c5c0 <_init>
 801b974:	1b64      	subs	r4, r4, r5
 801b976:	10a4      	asrs	r4, r4, #2
 801b978:	2600      	movs	r6, #0
 801b97a:	42a6      	cmp	r6, r4
 801b97c:	d105      	bne.n	801b98a <__libc_init_array+0x2e>
 801b97e:	bd70      	pop	{r4, r5, r6, pc}
 801b980:	f855 3b04 	ldr.w	r3, [r5], #4
 801b984:	4798      	blx	r3
 801b986:	3601      	adds	r6, #1
 801b988:	e7ee      	b.n	801b968 <__libc_init_array+0xc>
 801b98a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b98e:	4798      	blx	r3
 801b990:	3601      	adds	r6, #1
 801b992:	e7f2      	b.n	801b97a <__libc_init_array+0x1e>
 801b994:	0801d0e8 	.word	0x0801d0e8
 801b998:	0801d0e8 	.word	0x0801d0e8
 801b99c:	0801d0e8 	.word	0x0801d0e8
 801b9a0:	0801d0ec 	.word	0x0801d0ec

0801b9a4 <memcpy>:
 801b9a4:	440a      	add	r2, r1
 801b9a6:	4291      	cmp	r1, r2
 801b9a8:	f100 33ff 	add.w	r3, r0, #4294967295
 801b9ac:	d100      	bne.n	801b9b0 <memcpy+0xc>
 801b9ae:	4770      	bx	lr
 801b9b0:	b510      	push	{r4, lr}
 801b9b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b9b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b9ba:	4291      	cmp	r1, r2
 801b9bc:	d1f9      	bne.n	801b9b2 <memcpy+0xe>
 801b9be:	bd10      	pop	{r4, pc}

0801b9c0 <memset>:
 801b9c0:	4402      	add	r2, r0
 801b9c2:	4603      	mov	r3, r0
 801b9c4:	4293      	cmp	r3, r2
 801b9c6:	d100      	bne.n	801b9ca <memset+0xa>
 801b9c8:	4770      	bx	lr
 801b9ca:	f803 1b01 	strb.w	r1, [r3], #1
 801b9ce:	e7f9      	b.n	801b9c4 <memset+0x4>

0801b9d0 <sniprintf>:
 801b9d0:	b40c      	push	{r2, r3}
 801b9d2:	b530      	push	{r4, r5, lr}
 801b9d4:	4b17      	ldr	r3, [pc, #92]	; (801ba34 <sniprintf+0x64>)
 801b9d6:	1e0c      	subs	r4, r1, #0
 801b9d8:	681d      	ldr	r5, [r3, #0]
 801b9da:	b09d      	sub	sp, #116	; 0x74
 801b9dc:	da08      	bge.n	801b9f0 <sniprintf+0x20>
 801b9de:	238b      	movs	r3, #139	; 0x8b
 801b9e0:	602b      	str	r3, [r5, #0]
 801b9e2:	f04f 30ff 	mov.w	r0, #4294967295
 801b9e6:	b01d      	add	sp, #116	; 0x74
 801b9e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b9ec:	b002      	add	sp, #8
 801b9ee:	4770      	bx	lr
 801b9f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b9f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b9f8:	bf14      	ite	ne
 801b9fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b9fe:	4623      	moveq	r3, r4
 801ba00:	9304      	str	r3, [sp, #16]
 801ba02:	9307      	str	r3, [sp, #28]
 801ba04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ba08:	9002      	str	r0, [sp, #8]
 801ba0a:	9006      	str	r0, [sp, #24]
 801ba0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ba10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ba12:	ab21      	add	r3, sp, #132	; 0x84
 801ba14:	a902      	add	r1, sp, #8
 801ba16:	4628      	mov	r0, r5
 801ba18:	9301      	str	r3, [sp, #4]
 801ba1a:	f000 fa2d 	bl	801be78 <_svfiprintf_r>
 801ba1e:	1c43      	adds	r3, r0, #1
 801ba20:	bfbc      	itt	lt
 801ba22:	238b      	movlt	r3, #139	; 0x8b
 801ba24:	602b      	strlt	r3, [r5, #0]
 801ba26:	2c00      	cmp	r4, #0
 801ba28:	d0dd      	beq.n	801b9e6 <sniprintf+0x16>
 801ba2a:	9b02      	ldr	r3, [sp, #8]
 801ba2c:	2200      	movs	r2, #0
 801ba2e:	701a      	strb	r2, [r3, #0]
 801ba30:	e7d9      	b.n	801b9e6 <sniprintf+0x16>
 801ba32:	bf00      	nop
 801ba34:	200001b4 	.word	0x200001b4

0801ba38 <strcasecmp>:
 801ba38:	b570      	push	{r4, r5, r6, lr}
 801ba3a:	4d0c      	ldr	r5, [pc, #48]	; (801ba6c <strcasecmp+0x34>)
 801ba3c:	4604      	mov	r4, r0
 801ba3e:	462e      	mov	r6, r5
 801ba40:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ba44:	5d5a      	ldrb	r2, [r3, r5]
 801ba46:	f002 0203 	and.w	r2, r2, #3
 801ba4a:	2a01      	cmp	r2, #1
 801ba4c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ba50:	5cb0      	ldrb	r0, [r6, r2]
 801ba52:	f000 0003 	and.w	r0, r0, #3
 801ba56:	bf08      	it	eq
 801ba58:	3320      	addeq	r3, #32
 801ba5a:	2801      	cmp	r0, #1
 801ba5c:	bf08      	it	eq
 801ba5e:	3220      	addeq	r2, #32
 801ba60:	1a98      	subs	r0, r3, r2
 801ba62:	d101      	bne.n	801ba68 <strcasecmp+0x30>
 801ba64:	2a00      	cmp	r2, #0
 801ba66:	d1eb      	bne.n	801ba40 <strcasecmp+0x8>
 801ba68:	bd70      	pop	{r4, r5, r6, pc}
 801ba6a:	bf00      	nop
 801ba6c:	0801cfad 	.word	0x0801cfad

0801ba70 <strchr>:
 801ba70:	b2c9      	uxtb	r1, r1
 801ba72:	4603      	mov	r3, r0
 801ba74:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ba78:	b11a      	cbz	r2, 801ba82 <strchr+0x12>
 801ba7a:	428a      	cmp	r2, r1
 801ba7c:	d1f9      	bne.n	801ba72 <strchr+0x2>
 801ba7e:	4618      	mov	r0, r3
 801ba80:	4770      	bx	lr
 801ba82:	2900      	cmp	r1, #0
 801ba84:	bf18      	it	ne
 801ba86:	2300      	movne	r3, #0
 801ba88:	e7f9      	b.n	801ba7e <strchr+0xe>
	...

0801ba8c <strncasecmp>:
 801ba8c:	b570      	push	{r4, r5, r6, lr}
 801ba8e:	4e0f      	ldr	r6, [pc, #60]	; (801bacc <strncasecmp+0x40>)
 801ba90:	4604      	mov	r4, r0
 801ba92:	440a      	add	r2, r1
 801ba94:	428a      	cmp	r2, r1
 801ba96:	d101      	bne.n	801ba9c <strncasecmp+0x10>
 801ba98:	2000      	movs	r0, #0
 801ba9a:	e013      	b.n	801bac4 <strncasecmp+0x38>
 801ba9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801baa0:	5d98      	ldrb	r0, [r3, r6]
 801baa2:	f000 0003 	and.w	r0, r0, #3
 801baa6:	2801      	cmp	r0, #1
 801baa8:	f811 0b01 	ldrb.w	r0, [r1], #1
 801baac:	5c35      	ldrb	r5, [r6, r0]
 801baae:	f005 0503 	and.w	r5, r5, #3
 801bab2:	bf08      	it	eq
 801bab4:	3320      	addeq	r3, #32
 801bab6:	2d01      	cmp	r5, #1
 801bab8:	bf08      	it	eq
 801baba:	3020      	addeq	r0, #32
 801babc:	1a1b      	subs	r3, r3, r0
 801babe:	d102      	bne.n	801bac6 <strncasecmp+0x3a>
 801bac0:	2800      	cmp	r0, #0
 801bac2:	d1e7      	bne.n	801ba94 <strncasecmp+0x8>
 801bac4:	bd70      	pop	{r4, r5, r6, pc}
 801bac6:	4618      	mov	r0, r3
 801bac8:	e7fc      	b.n	801bac4 <strncasecmp+0x38>
 801baca:	bf00      	nop
 801bacc:	0801cfad 	.word	0x0801cfad

0801bad0 <strncpy>:
 801bad0:	b510      	push	{r4, lr}
 801bad2:	3901      	subs	r1, #1
 801bad4:	4603      	mov	r3, r0
 801bad6:	b132      	cbz	r2, 801bae6 <strncpy+0x16>
 801bad8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801badc:	f803 4b01 	strb.w	r4, [r3], #1
 801bae0:	3a01      	subs	r2, #1
 801bae2:	2c00      	cmp	r4, #0
 801bae4:	d1f7      	bne.n	801bad6 <strncpy+0x6>
 801bae6:	441a      	add	r2, r3
 801bae8:	2100      	movs	r1, #0
 801baea:	4293      	cmp	r3, r2
 801baec:	d100      	bne.n	801baf0 <strncpy+0x20>
 801baee:	bd10      	pop	{r4, pc}
 801baf0:	f803 1b01 	strb.w	r1, [r3], #1
 801baf4:	e7f9      	b.n	801baea <strncpy+0x1a>

0801baf6 <strstr>:
 801baf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801baf8:	780c      	ldrb	r4, [r1, #0]
 801bafa:	b164      	cbz	r4, 801bb16 <strstr+0x20>
 801bafc:	4603      	mov	r3, r0
 801bafe:	781a      	ldrb	r2, [r3, #0]
 801bb00:	4618      	mov	r0, r3
 801bb02:	1c5e      	adds	r6, r3, #1
 801bb04:	b90a      	cbnz	r2, 801bb0a <strstr+0x14>
 801bb06:	4610      	mov	r0, r2
 801bb08:	e005      	b.n	801bb16 <strstr+0x20>
 801bb0a:	4294      	cmp	r4, r2
 801bb0c:	d108      	bne.n	801bb20 <strstr+0x2a>
 801bb0e:	460d      	mov	r5, r1
 801bb10:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801bb14:	b902      	cbnz	r2, 801bb18 <strstr+0x22>
 801bb16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb18:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801bb1c:	4297      	cmp	r7, r2
 801bb1e:	d0f7      	beq.n	801bb10 <strstr+0x1a>
 801bb20:	4633      	mov	r3, r6
 801bb22:	e7ec      	b.n	801bafe <strstr+0x8>

0801bb24 <_strtol_l.isra.0>:
 801bb24:	2b01      	cmp	r3, #1
 801bb26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb2a:	d001      	beq.n	801bb30 <_strtol_l.isra.0+0xc>
 801bb2c:	2b24      	cmp	r3, #36	; 0x24
 801bb2e:	d906      	bls.n	801bb3e <_strtol_l.isra.0+0x1a>
 801bb30:	f7ff ff0e 	bl	801b950 <__errno>
 801bb34:	2316      	movs	r3, #22
 801bb36:	6003      	str	r3, [r0, #0]
 801bb38:	2000      	movs	r0, #0
 801bb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb3e:	4f3a      	ldr	r7, [pc, #232]	; (801bc28 <_strtol_l.isra.0+0x104>)
 801bb40:	468e      	mov	lr, r1
 801bb42:	4676      	mov	r6, lr
 801bb44:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801bb48:	5de5      	ldrb	r5, [r4, r7]
 801bb4a:	f015 0508 	ands.w	r5, r5, #8
 801bb4e:	d1f8      	bne.n	801bb42 <_strtol_l.isra.0+0x1e>
 801bb50:	2c2d      	cmp	r4, #45	; 0x2d
 801bb52:	d134      	bne.n	801bbbe <_strtol_l.isra.0+0x9a>
 801bb54:	f89e 4000 	ldrb.w	r4, [lr]
 801bb58:	f04f 0801 	mov.w	r8, #1
 801bb5c:	f106 0e02 	add.w	lr, r6, #2
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	d05c      	beq.n	801bc1e <_strtol_l.isra.0+0xfa>
 801bb64:	2b10      	cmp	r3, #16
 801bb66:	d10c      	bne.n	801bb82 <_strtol_l.isra.0+0x5e>
 801bb68:	2c30      	cmp	r4, #48	; 0x30
 801bb6a:	d10a      	bne.n	801bb82 <_strtol_l.isra.0+0x5e>
 801bb6c:	f89e 4000 	ldrb.w	r4, [lr]
 801bb70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801bb74:	2c58      	cmp	r4, #88	; 0x58
 801bb76:	d14d      	bne.n	801bc14 <_strtol_l.isra.0+0xf0>
 801bb78:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801bb7c:	2310      	movs	r3, #16
 801bb7e:	f10e 0e02 	add.w	lr, lr, #2
 801bb82:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801bb86:	f10c 3cff 	add.w	ip, ip, #4294967295
 801bb8a:	2600      	movs	r6, #0
 801bb8c:	fbbc f9f3 	udiv	r9, ip, r3
 801bb90:	4635      	mov	r5, r6
 801bb92:	fb03 ca19 	mls	sl, r3, r9, ip
 801bb96:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801bb9a:	2f09      	cmp	r7, #9
 801bb9c:	d818      	bhi.n	801bbd0 <_strtol_l.isra.0+0xac>
 801bb9e:	463c      	mov	r4, r7
 801bba0:	42a3      	cmp	r3, r4
 801bba2:	dd24      	ble.n	801bbee <_strtol_l.isra.0+0xca>
 801bba4:	2e00      	cmp	r6, #0
 801bba6:	db1f      	blt.n	801bbe8 <_strtol_l.isra.0+0xc4>
 801bba8:	45a9      	cmp	r9, r5
 801bbaa:	d31d      	bcc.n	801bbe8 <_strtol_l.isra.0+0xc4>
 801bbac:	d101      	bne.n	801bbb2 <_strtol_l.isra.0+0x8e>
 801bbae:	45a2      	cmp	sl, r4
 801bbb0:	db1a      	blt.n	801bbe8 <_strtol_l.isra.0+0xc4>
 801bbb2:	fb05 4503 	mla	r5, r5, r3, r4
 801bbb6:	2601      	movs	r6, #1
 801bbb8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801bbbc:	e7eb      	b.n	801bb96 <_strtol_l.isra.0+0x72>
 801bbbe:	2c2b      	cmp	r4, #43	; 0x2b
 801bbc0:	bf08      	it	eq
 801bbc2:	f89e 4000 	ldrbeq.w	r4, [lr]
 801bbc6:	46a8      	mov	r8, r5
 801bbc8:	bf08      	it	eq
 801bbca:	f106 0e02 	addeq.w	lr, r6, #2
 801bbce:	e7c7      	b.n	801bb60 <_strtol_l.isra.0+0x3c>
 801bbd0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801bbd4:	2f19      	cmp	r7, #25
 801bbd6:	d801      	bhi.n	801bbdc <_strtol_l.isra.0+0xb8>
 801bbd8:	3c37      	subs	r4, #55	; 0x37
 801bbda:	e7e1      	b.n	801bba0 <_strtol_l.isra.0+0x7c>
 801bbdc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801bbe0:	2f19      	cmp	r7, #25
 801bbe2:	d804      	bhi.n	801bbee <_strtol_l.isra.0+0xca>
 801bbe4:	3c57      	subs	r4, #87	; 0x57
 801bbe6:	e7db      	b.n	801bba0 <_strtol_l.isra.0+0x7c>
 801bbe8:	f04f 36ff 	mov.w	r6, #4294967295
 801bbec:	e7e4      	b.n	801bbb8 <_strtol_l.isra.0+0x94>
 801bbee:	2e00      	cmp	r6, #0
 801bbf0:	da05      	bge.n	801bbfe <_strtol_l.isra.0+0xda>
 801bbf2:	2322      	movs	r3, #34	; 0x22
 801bbf4:	6003      	str	r3, [r0, #0]
 801bbf6:	4665      	mov	r5, ip
 801bbf8:	b942      	cbnz	r2, 801bc0c <_strtol_l.isra.0+0xe8>
 801bbfa:	4628      	mov	r0, r5
 801bbfc:	e79d      	b.n	801bb3a <_strtol_l.isra.0+0x16>
 801bbfe:	f1b8 0f00 	cmp.w	r8, #0
 801bc02:	d000      	beq.n	801bc06 <_strtol_l.isra.0+0xe2>
 801bc04:	426d      	negs	r5, r5
 801bc06:	2a00      	cmp	r2, #0
 801bc08:	d0f7      	beq.n	801bbfa <_strtol_l.isra.0+0xd6>
 801bc0a:	b10e      	cbz	r6, 801bc10 <_strtol_l.isra.0+0xec>
 801bc0c:	f10e 31ff 	add.w	r1, lr, #4294967295
 801bc10:	6011      	str	r1, [r2, #0]
 801bc12:	e7f2      	b.n	801bbfa <_strtol_l.isra.0+0xd6>
 801bc14:	2430      	movs	r4, #48	; 0x30
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	d1b3      	bne.n	801bb82 <_strtol_l.isra.0+0x5e>
 801bc1a:	2308      	movs	r3, #8
 801bc1c:	e7b1      	b.n	801bb82 <_strtol_l.isra.0+0x5e>
 801bc1e:	2c30      	cmp	r4, #48	; 0x30
 801bc20:	d0a4      	beq.n	801bb6c <_strtol_l.isra.0+0x48>
 801bc22:	230a      	movs	r3, #10
 801bc24:	e7ad      	b.n	801bb82 <_strtol_l.isra.0+0x5e>
 801bc26:	bf00      	nop
 801bc28:	0801cfad 	.word	0x0801cfad

0801bc2c <strtol>:
 801bc2c:	4613      	mov	r3, r2
 801bc2e:	460a      	mov	r2, r1
 801bc30:	4601      	mov	r1, r0
 801bc32:	4802      	ldr	r0, [pc, #8]	; (801bc3c <strtol+0x10>)
 801bc34:	6800      	ldr	r0, [r0, #0]
 801bc36:	f7ff bf75 	b.w	801bb24 <_strtol_l.isra.0>
 801bc3a:	bf00      	nop
 801bc3c:	200001b4 	.word	0x200001b4

0801bc40 <_strtoul_l.isra.0>:
 801bc40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bc44:	4e3b      	ldr	r6, [pc, #236]	; (801bd34 <_strtoul_l.isra.0+0xf4>)
 801bc46:	4686      	mov	lr, r0
 801bc48:	468c      	mov	ip, r1
 801bc4a:	4660      	mov	r0, ip
 801bc4c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801bc50:	5da5      	ldrb	r5, [r4, r6]
 801bc52:	f015 0508 	ands.w	r5, r5, #8
 801bc56:	d1f8      	bne.n	801bc4a <_strtoul_l.isra.0+0xa>
 801bc58:	2c2d      	cmp	r4, #45	; 0x2d
 801bc5a:	d134      	bne.n	801bcc6 <_strtoul_l.isra.0+0x86>
 801bc5c:	f89c 4000 	ldrb.w	r4, [ip]
 801bc60:	f04f 0801 	mov.w	r8, #1
 801bc64:	f100 0c02 	add.w	ip, r0, #2
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	d05e      	beq.n	801bd2a <_strtoul_l.isra.0+0xea>
 801bc6c:	2b10      	cmp	r3, #16
 801bc6e:	d10c      	bne.n	801bc8a <_strtoul_l.isra.0+0x4a>
 801bc70:	2c30      	cmp	r4, #48	; 0x30
 801bc72:	d10a      	bne.n	801bc8a <_strtoul_l.isra.0+0x4a>
 801bc74:	f89c 0000 	ldrb.w	r0, [ip]
 801bc78:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801bc7c:	2858      	cmp	r0, #88	; 0x58
 801bc7e:	d14f      	bne.n	801bd20 <_strtoul_l.isra.0+0xe0>
 801bc80:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801bc84:	2310      	movs	r3, #16
 801bc86:	f10c 0c02 	add.w	ip, ip, #2
 801bc8a:	f04f 37ff 	mov.w	r7, #4294967295
 801bc8e:	2500      	movs	r5, #0
 801bc90:	fbb7 f7f3 	udiv	r7, r7, r3
 801bc94:	fb03 f907 	mul.w	r9, r3, r7
 801bc98:	ea6f 0909 	mvn.w	r9, r9
 801bc9c:	4628      	mov	r0, r5
 801bc9e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801bca2:	2e09      	cmp	r6, #9
 801bca4:	d818      	bhi.n	801bcd8 <_strtoul_l.isra.0+0x98>
 801bca6:	4634      	mov	r4, r6
 801bca8:	42a3      	cmp	r3, r4
 801bcaa:	dd24      	ble.n	801bcf6 <_strtoul_l.isra.0+0xb6>
 801bcac:	2d00      	cmp	r5, #0
 801bcae:	db1f      	blt.n	801bcf0 <_strtoul_l.isra.0+0xb0>
 801bcb0:	4287      	cmp	r7, r0
 801bcb2:	d31d      	bcc.n	801bcf0 <_strtoul_l.isra.0+0xb0>
 801bcb4:	d101      	bne.n	801bcba <_strtoul_l.isra.0+0x7a>
 801bcb6:	45a1      	cmp	r9, r4
 801bcb8:	db1a      	blt.n	801bcf0 <_strtoul_l.isra.0+0xb0>
 801bcba:	fb00 4003 	mla	r0, r0, r3, r4
 801bcbe:	2501      	movs	r5, #1
 801bcc0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801bcc4:	e7eb      	b.n	801bc9e <_strtoul_l.isra.0+0x5e>
 801bcc6:	2c2b      	cmp	r4, #43	; 0x2b
 801bcc8:	bf08      	it	eq
 801bcca:	f89c 4000 	ldrbeq.w	r4, [ip]
 801bcce:	46a8      	mov	r8, r5
 801bcd0:	bf08      	it	eq
 801bcd2:	f100 0c02 	addeq.w	ip, r0, #2
 801bcd6:	e7c7      	b.n	801bc68 <_strtoul_l.isra.0+0x28>
 801bcd8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801bcdc:	2e19      	cmp	r6, #25
 801bcde:	d801      	bhi.n	801bce4 <_strtoul_l.isra.0+0xa4>
 801bce0:	3c37      	subs	r4, #55	; 0x37
 801bce2:	e7e1      	b.n	801bca8 <_strtoul_l.isra.0+0x68>
 801bce4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801bce8:	2e19      	cmp	r6, #25
 801bcea:	d804      	bhi.n	801bcf6 <_strtoul_l.isra.0+0xb6>
 801bcec:	3c57      	subs	r4, #87	; 0x57
 801bcee:	e7db      	b.n	801bca8 <_strtoul_l.isra.0+0x68>
 801bcf0:	f04f 35ff 	mov.w	r5, #4294967295
 801bcf4:	e7e4      	b.n	801bcc0 <_strtoul_l.isra.0+0x80>
 801bcf6:	2d00      	cmp	r5, #0
 801bcf8:	da07      	bge.n	801bd0a <_strtoul_l.isra.0+0xca>
 801bcfa:	2322      	movs	r3, #34	; 0x22
 801bcfc:	f8ce 3000 	str.w	r3, [lr]
 801bd00:	f04f 30ff 	mov.w	r0, #4294967295
 801bd04:	b942      	cbnz	r2, 801bd18 <_strtoul_l.isra.0+0xd8>
 801bd06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bd0a:	f1b8 0f00 	cmp.w	r8, #0
 801bd0e:	d000      	beq.n	801bd12 <_strtoul_l.isra.0+0xd2>
 801bd10:	4240      	negs	r0, r0
 801bd12:	2a00      	cmp	r2, #0
 801bd14:	d0f7      	beq.n	801bd06 <_strtoul_l.isra.0+0xc6>
 801bd16:	b10d      	cbz	r5, 801bd1c <_strtoul_l.isra.0+0xdc>
 801bd18:	f10c 31ff 	add.w	r1, ip, #4294967295
 801bd1c:	6011      	str	r1, [r2, #0]
 801bd1e:	e7f2      	b.n	801bd06 <_strtoul_l.isra.0+0xc6>
 801bd20:	2430      	movs	r4, #48	; 0x30
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d1b1      	bne.n	801bc8a <_strtoul_l.isra.0+0x4a>
 801bd26:	2308      	movs	r3, #8
 801bd28:	e7af      	b.n	801bc8a <_strtoul_l.isra.0+0x4a>
 801bd2a:	2c30      	cmp	r4, #48	; 0x30
 801bd2c:	d0a2      	beq.n	801bc74 <_strtoul_l.isra.0+0x34>
 801bd2e:	230a      	movs	r3, #10
 801bd30:	e7ab      	b.n	801bc8a <_strtoul_l.isra.0+0x4a>
 801bd32:	bf00      	nop
 801bd34:	0801cfad 	.word	0x0801cfad

0801bd38 <strtoul>:
 801bd38:	4613      	mov	r3, r2
 801bd3a:	460a      	mov	r2, r1
 801bd3c:	4601      	mov	r1, r0
 801bd3e:	4802      	ldr	r0, [pc, #8]	; (801bd48 <strtoul+0x10>)
 801bd40:	6800      	ldr	r0, [r0, #0]
 801bd42:	f7ff bf7d 	b.w	801bc40 <_strtoul_l.isra.0>
 801bd46:	bf00      	nop
 801bd48:	200001b4 	.word	0x200001b4

0801bd4c <_vsniprintf_r>:
 801bd4c:	b530      	push	{r4, r5, lr}
 801bd4e:	1e14      	subs	r4, r2, #0
 801bd50:	4605      	mov	r5, r0
 801bd52:	b09b      	sub	sp, #108	; 0x6c
 801bd54:	4618      	mov	r0, r3
 801bd56:	da05      	bge.n	801bd64 <_vsniprintf_r+0x18>
 801bd58:	238b      	movs	r3, #139	; 0x8b
 801bd5a:	602b      	str	r3, [r5, #0]
 801bd5c:	f04f 30ff 	mov.w	r0, #4294967295
 801bd60:	b01b      	add	sp, #108	; 0x6c
 801bd62:	bd30      	pop	{r4, r5, pc}
 801bd64:	f44f 7302 	mov.w	r3, #520	; 0x208
 801bd68:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bd6c:	bf14      	ite	ne
 801bd6e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801bd72:	4623      	moveq	r3, r4
 801bd74:	9302      	str	r3, [sp, #8]
 801bd76:	9305      	str	r3, [sp, #20]
 801bd78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bd7c:	9100      	str	r1, [sp, #0]
 801bd7e:	9104      	str	r1, [sp, #16]
 801bd80:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bd84:	4602      	mov	r2, r0
 801bd86:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bd88:	4669      	mov	r1, sp
 801bd8a:	4628      	mov	r0, r5
 801bd8c:	f000 f874 	bl	801be78 <_svfiprintf_r>
 801bd90:	1c43      	adds	r3, r0, #1
 801bd92:	bfbc      	itt	lt
 801bd94:	238b      	movlt	r3, #139	; 0x8b
 801bd96:	602b      	strlt	r3, [r5, #0]
 801bd98:	2c00      	cmp	r4, #0
 801bd9a:	d0e1      	beq.n	801bd60 <_vsniprintf_r+0x14>
 801bd9c:	9b00      	ldr	r3, [sp, #0]
 801bd9e:	2200      	movs	r2, #0
 801bda0:	701a      	strb	r2, [r3, #0]
 801bda2:	e7dd      	b.n	801bd60 <_vsniprintf_r+0x14>

0801bda4 <vsniprintf>:
 801bda4:	b507      	push	{r0, r1, r2, lr}
 801bda6:	9300      	str	r3, [sp, #0]
 801bda8:	4613      	mov	r3, r2
 801bdaa:	460a      	mov	r2, r1
 801bdac:	4601      	mov	r1, r0
 801bdae:	4803      	ldr	r0, [pc, #12]	; (801bdbc <vsniprintf+0x18>)
 801bdb0:	6800      	ldr	r0, [r0, #0]
 801bdb2:	f7ff ffcb 	bl	801bd4c <_vsniprintf_r>
 801bdb6:	b003      	add	sp, #12
 801bdb8:	f85d fb04 	ldr.w	pc, [sp], #4
 801bdbc:	200001b4 	.word	0x200001b4

0801bdc0 <__ssputs_r>:
 801bdc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bdc4:	688e      	ldr	r6, [r1, #8]
 801bdc6:	429e      	cmp	r6, r3
 801bdc8:	4682      	mov	sl, r0
 801bdca:	460c      	mov	r4, r1
 801bdcc:	4690      	mov	r8, r2
 801bdce:	461f      	mov	r7, r3
 801bdd0:	d838      	bhi.n	801be44 <__ssputs_r+0x84>
 801bdd2:	898a      	ldrh	r2, [r1, #12]
 801bdd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801bdd8:	d032      	beq.n	801be40 <__ssputs_r+0x80>
 801bdda:	6825      	ldr	r5, [r4, #0]
 801bddc:	6909      	ldr	r1, [r1, #16]
 801bdde:	eba5 0901 	sub.w	r9, r5, r1
 801bde2:	6965      	ldr	r5, [r4, #20]
 801bde4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bde8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bdec:	3301      	adds	r3, #1
 801bdee:	444b      	add	r3, r9
 801bdf0:	106d      	asrs	r5, r5, #1
 801bdf2:	429d      	cmp	r5, r3
 801bdf4:	bf38      	it	cc
 801bdf6:	461d      	movcc	r5, r3
 801bdf8:	0553      	lsls	r3, r2, #21
 801bdfa:	d531      	bpl.n	801be60 <__ssputs_r+0xa0>
 801bdfc:	4629      	mov	r1, r5
 801bdfe:	f000 fb39 	bl	801c474 <_malloc_r>
 801be02:	4606      	mov	r6, r0
 801be04:	b950      	cbnz	r0, 801be1c <__ssputs_r+0x5c>
 801be06:	230c      	movs	r3, #12
 801be08:	f8ca 3000 	str.w	r3, [sl]
 801be0c:	89a3      	ldrh	r3, [r4, #12]
 801be0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801be12:	81a3      	strh	r3, [r4, #12]
 801be14:	f04f 30ff 	mov.w	r0, #4294967295
 801be18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801be1c:	6921      	ldr	r1, [r4, #16]
 801be1e:	464a      	mov	r2, r9
 801be20:	f7ff fdc0 	bl	801b9a4 <memcpy>
 801be24:	89a3      	ldrh	r3, [r4, #12]
 801be26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801be2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801be2e:	81a3      	strh	r3, [r4, #12]
 801be30:	6126      	str	r6, [r4, #16]
 801be32:	6165      	str	r5, [r4, #20]
 801be34:	444e      	add	r6, r9
 801be36:	eba5 0509 	sub.w	r5, r5, r9
 801be3a:	6026      	str	r6, [r4, #0]
 801be3c:	60a5      	str	r5, [r4, #8]
 801be3e:	463e      	mov	r6, r7
 801be40:	42be      	cmp	r6, r7
 801be42:	d900      	bls.n	801be46 <__ssputs_r+0x86>
 801be44:	463e      	mov	r6, r7
 801be46:	4632      	mov	r2, r6
 801be48:	6820      	ldr	r0, [r4, #0]
 801be4a:	4641      	mov	r1, r8
 801be4c:	f000 faa8 	bl	801c3a0 <memmove>
 801be50:	68a3      	ldr	r3, [r4, #8]
 801be52:	6822      	ldr	r2, [r4, #0]
 801be54:	1b9b      	subs	r3, r3, r6
 801be56:	4432      	add	r2, r6
 801be58:	60a3      	str	r3, [r4, #8]
 801be5a:	6022      	str	r2, [r4, #0]
 801be5c:	2000      	movs	r0, #0
 801be5e:	e7db      	b.n	801be18 <__ssputs_r+0x58>
 801be60:	462a      	mov	r2, r5
 801be62:	f000 fb61 	bl	801c528 <_realloc_r>
 801be66:	4606      	mov	r6, r0
 801be68:	2800      	cmp	r0, #0
 801be6a:	d1e1      	bne.n	801be30 <__ssputs_r+0x70>
 801be6c:	6921      	ldr	r1, [r4, #16]
 801be6e:	4650      	mov	r0, sl
 801be70:	f000 fab0 	bl	801c3d4 <_free_r>
 801be74:	e7c7      	b.n	801be06 <__ssputs_r+0x46>
	...

0801be78 <_svfiprintf_r>:
 801be78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be7c:	4698      	mov	r8, r3
 801be7e:	898b      	ldrh	r3, [r1, #12]
 801be80:	061b      	lsls	r3, r3, #24
 801be82:	b09d      	sub	sp, #116	; 0x74
 801be84:	4607      	mov	r7, r0
 801be86:	460d      	mov	r5, r1
 801be88:	4614      	mov	r4, r2
 801be8a:	d50e      	bpl.n	801beaa <_svfiprintf_r+0x32>
 801be8c:	690b      	ldr	r3, [r1, #16]
 801be8e:	b963      	cbnz	r3, 801beaa <_svfiprintf_r+0x32>
 801be90:	2140      	movs	r1, #64	; 0x40
 801be92:	f000 faef 	bl	801c474 <_malloc_r>
 801be96:	6028      	str	r0, [r5, #0]
 801be98:	6128      	str	r0, [r5, #16]
 801be9a:	b920      	cbnz	r0, 801bea6 <_svfiprintf_r+0x2e>
 801be9c:	230c      	movs	r3, #12
 801be9e:	603b      	str	r3, [r7, #0]
 801bea0:	f04f 30ff 	mov.w	r0, #4294967295
 801bea4:	e0d1      	b.n	801c04a <_svfiprintf_r+0x1d2>
 801bea6:	2340      	movs	r3, #64	; 0x40
 801bea8:	616b      	str	r3, [r5, #20]
 801beaa:	2300      	movs	r3, #0
 801beac:	9309      	str	r3, [sp, #36]	; 0x24
 801beae:	2320      	movs	r3, #32
 801beb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801beb4:	f8cd 800c 	str.w	r8, [sp, #12]
 801beb8:	2330      	movs	r3, #48	; 0x30
 801beba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801c064 <_svfiprintf_r+0x1ec>
 801bebe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bec2:	f04f 0901 	mov.w	r9, #1
 801bec6:	4623      	mov	r3, r4
 801bec8:	469a      	mov	sl, r3
 801beca:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bece:	b10a      	cbz	r2, 801bed4 <_svfiprintf_r+0x5c>
 801bed0:	2a25      	cmp	r2, #37	; 0x25
 801bed2:	d1f9      	bne.n	801bec8 <_svfiprintf_r+0x50>
 801bed4:	ebba 0b04 	subs.w	fp, sl, r4
 801bed8:	d00b      	beq.n	801bef2 <_svfiprintf_r+0x7a>
 801beda:	465b      	mov	r3, fp
 801bedc:	4622      	mov	r2, r4
 801bede:	4629      	mov	r1, r5
 801bee0:	4638      	mov	r0, r7
 801bee2:	f7ff ff6d 	bl	801bdc0 <__ssputs_r>
 801bee6:	3001      	adds	r0, #1
 801bee8:	f000 80aa 	beq.w	801c040 <_svfiprintf_r+0x1c8>
 801beec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801beee:	445a      	add	r2, fp
 801bef0:	9209      	str	r2, [sp, #36]	; 0x24
 801bef2:	f89a 3000 	ldrb.w	r3, [sl]
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	f000 80a2 	beq.w	801c040 <_svfiprintf_r+0x1c8>
 801befc:	2300      	movs	r3, #0
 801befe:	f04f 32ff 	mov.w	r2, #4294967295
 801bf02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bf06:	f10a 0a01 	add.w	sl, sl, #1
 801bf0a:	9304      	str	r3, [sp, #16]
 801bf0c:	9307      	str	r3, [sp, #28]
 801bf0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bf12:	931a      	str	r3, [sp, #104]	; 0x68
 801bf14:	4654      	mov	r4, sl
 801bf16:	2205      	movs	r2, #5
 801bf18:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf1c:	4851      	ldr	r0, [pc, #324]	; (801c064 <_svfiprintf_r+0x1ec>)
 801bf1e:	f7f0 f897 	bl	800c050 <memchr>
 801bf22:	9a04      	ldr	r2, [sp, #16]
 801bf24:	b9d8      	cbnz	r0, 801bf5e <_svfiprintf_r+0xe6>
 801bf26:	06d0      	lsls	r0, r2, #27
 801bf28:	bf44      	itt	mi
 801bf2a:	2320      	movmi	r3, #32
 801bf2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bf30:	0711      	lsls	r1, r2, #28
 801bf32:	bf44      	itt	mi
 801bf34:	232b      	movmi	r3, #43	; 0x2b
 801bf36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bf3a:	f89a 3000 	ldrb.w	r3, [sl]
 801bf3e:	2b2a      	cmp	r3, #42	; 0x2a
 801bf40:	d015      	beq.n	801bf6e <_svfiprintf_r+0xf6>
 801bf42:	9a07      	ldr	r2, [sp, #28]
 801bf44:	4654      	mov	r4, sl
 801bf46:	2000      	movs	r0, #0
 801bf48:	f04f 0c0a 	mov.w	ip, #10
 801bf4c:	4621      	mov	r1, r4
 801bf4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bf52:	3b30      	subs	r3, #48	; 0x30
 801bf54:	2b09      	cmp	r3, #9
 801bf56:	d94e      	bls.n	801bff6 <_svfiprintf_r+0x17e>
 801bf58:	b1b0      	cbz	r0, 801bf88 <_svfiprintf_r+0x110>
 801bf5a:	9207      	str	r2, [sp, #28]
 801bf5c:	e014      	b.n	801bf88 <_svfiprintf_r+0x110>
 801bf5e:	eba0 0308 	sub.w	r3, r0, r8
 801bf62:	fa09 f303 	lsl.w	r3, r9, r3
 801bf66:	4313      	orrs	r3, r2
 801bf68:	9304      	str	r3, [sp, #16]
 801bf6a:	46a2      	mov	sl, r4
 801bf6c:	e7d2      	b.n	801bf14 <_svfiprintf_r+0x9c>
 801bf6e:	9b03      	ldr	r3, [sp, #12]
 801bf70:	1d19      	adds	r1, r3, #4
 801bf72:	681b      	ldr	r3, [r3, #0]
 801bf74:	9103      	str	r1, [sp, #12]
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	bfbb      	ittet	lt
 801bf7a:	425b      	neglt	r3, r3
 801bf7c:	f042 0202 	orrlt.w	r2, r2, #2
 801bf80:	9307      	strge	r3, [sp, #28]
 801bf82:	9307      	strlt	r3, [sp, #28]
 801bf84:	bfb8      	it	lt
 801bf86:	9204      	strlt	r2, [sp, #16]
 801bf88:	7823      	ldrb	r3, [r4, #0]
 801bf8a:	2b2e      	cmp	r3, #46	; 0x2e
 801bf8c:	d10c      	bne.n	801bfa8 <_svfiprintf_r+0x130>
 801bf8e:	7863      	ldrb	r3, [r4, #1]
 801bf90:	2b2a      	cmp	r3, #42	; 0x2a
 801bf92:	d135      	bne.n	801c000 <_svfiprintf_r+0x188>
 801bf94:	9b03      	ldr	r3, [sp, #12]
 801bf96:	1d1a      	adds	r2, r3, #4
 801bf98:	681b      	ldr	r3, [r3, #0]
 801bf9a:	9203      	str	r2, [sp, #12]
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	bfb8      	it	lt
 801bfa0:	f04f 33ff 	movlt.w	r3, #4294967295
 801bfa4:	3402      	adds	r4, #2
 801bfa6:	9305      	str	r3, [sp, #20]
 801bfa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801c074 <_svfiprintf_r+0x1fc>
 801bfac:	7821      	ldrb	r1, [r4, #0]
 801bfae:	2203      	movs	r2, #3
 801bfb0:	4650      	mov	r0, sl
 801bfb2:	f7f0 f84d 	bl	800c050 <memchr>
 801bfb6:	b140      	cbz	r0, 801bfca <_svfiprintf_r+0x152>
 801bfb8:	2340      	movs	r3, #64	; 0x40
 801bfba:	eba0 000a 	sub.w	r0, r0, sl
 801bfbe:	fa03 f000 	lsl.w	r0, r3, r0
 801bfc2:	9b04      	ldr	r3, [sp, #16]
 801bfc4:	4303      	orrs	r3, r0
 801bfc6:	3401      	adds	r4, #1
 801bfc8:	9304      	str	r3, [sp, #16]
 801bfca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bfce:	4826      	ldr	r0, [pc, #152]	; (801c068 <_svfiprintf_r+0x1f0>)
 801bfd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bfd4:	2206      	movs	r2, #6
 801bfd6:	f7f0 f83b 	bl	800c050 <memchr>
 801bfda:	2800      	cmp	r0, #0
 801bfdc:	d038      	beq.n	801c050 <_svfiprintf_r+0x1d8>
 801bfde:	4b23      	ldr	r3, [pc, #140]	; (801c06c <_svfiprintf_r+0x1f4>)
 801bfe0:	bb1b      	cbnz	r3, 801c02a <_svfiprintf_r+0x1b2>
 801bfe2:	9b03      	ldr	r3, [sp, #12]
 801bfe4:	3307      	adds	r3, #7
 801bfe6:	f023 0307 	bic.w	r3, r3, #7
 801bfea:	3308      	adds	r3, #8
 801bfec:	9303      	str	r3, [sp, #12]
 801bfee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bff0:	4433      	add	r3, r6
 801bff2:	9309      	str	r3, [sp, #36]	; 0x24
 801bff4:	e767      	b.n	801bec6 <_svfiprintf_r+0x4e>
 801bff6:	fb0c 3202 	mla	r2, ip, r2, r3
 801bffa:	460c      	mov	r4, r1
 801bffc:	2001      	movs	r0, #1
 801bffe:	e7a5      	b.n	801bf4c <_svfiprintf_r+0xd4>
 801c000:	2300      	movs	r3, #0
 801c002:	3401      	adds	r4, #1
 801c004:	9305      	str	r3, [sp, #20]
 801c006:	4619      	mov	r1, r3
 801c008:	f04f 0c0a 	mov.w	ip, #10
 801c00c:	4620      	mov	r0, r4
 801c00e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c012:	3a30      	subs	r2, #48	; 0x30
 801c014:	2a09      	cmp	r2, #9
 801c016:	d903      	bls.n	801c020 <_svfiprintf_r+0x1a8>
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d0c5      	beq.n	801bfa8 <_svfiprintf_r+0x130>
 801c01c:	9105      	str	r1, [sp, #20]
 801c01e:	e7c3      	b.n	801bfa8 <_svfiprintf_r+0x130>
 801c020:	fb0c 2101 	mla	r1, ip, r1, r2
 801c024:	4604      	mov	r4, r0
 801c026:	2301      	movs	r3, #1
 801c028:	e7f0      	b.n	801c00c <_svfiprintf_r+0x194>
 801c02a:	ab03      	add	r3, sp, #12
 801c02c:	9300      	str	r3, [sp, #0]
 801c02e:	462a      	mov	r2, r5
 801c030:	4b0f      	ldr	r3, [pc, #60]	; (801c070 <_svfiprintf_r+0x1f8>)
 801c032:	a904      	add	r1, sp, #16
 801c034:	4638      	mov	r0, r7
 801c036:	f3af 8000 	nop.w
 801c03a:	1c42      	adds	r2, r0, #1
 801c03c:	4606      	mov	r6, r0
 801c03e:	d1d6      	bne.n	801bfee <_svfiprintf_r+0x176>
 801c040:	89ab      	ldrh	r3, [r5, #12]
 801c042:	065b      	lsls	r3, r3, #25
 801c044:	f53f af2c 	bmi.w	801bea0 <_svfiprintf_r+0x28>
 801c048:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c04a:	b01d      	add	sp, #116	; 0x74
 801c04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c050:	ab03      	add	r3, sp, #12
 801c052:	9300      	str	r3, [sp, #0]
 801c054:	462a      	mov	r2, r5
 801c056:	4b06      	ldr	r3, [pc, #24]	; (801c070 <_svfiprintf_r+0x1f8>)
 801c058:	a904      	add	r1, sp, #16
 801c05a:	4638      	mov	r0, r7
 801c05c:	f000 f87a 	bl	801c154 <_printf_i>
 801c060:	e7eb      	b.n	801c03a <_svfiprintf_r+0x1c2>
 801c062:	bf00      	nop
 801c064:	0801d0ad 	.word	0x0801d0ad
 801c068:	0801d0b7 	.word	0x0801d0b7
 801c06c:	00000000 	.word	0x00000000
 801c070:	0801bdc1 	.word	0x0801bdc1
 801c074:	0801d0b3 	.word	0x0801d0b3

0801c078 <_printf_common>:
 801c078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c07c:	4616      	mov	r6, r2
 801c07e:	4699      	mov	r9, r3
 801c080:	688a      	ldr	r2, [r1, #8]
 801c082:	690b      	ldr	r3, [r1, #16]
 801c084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c088:	4293      	cmp	r3, r2
 801c08a:	bfb8      	it	lt
 801c08c:	4613      	movlt	r3, r2
 801c08e:	6033      	str	r3, [r6, #0]
 801c090:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c094:	4607      	mov	r7, r0
 801c096:	460c      	mov	r4, r1
 801c098:	b10a      	cbz	r2, 801c09e <_printf_common+0x26>
 801c09a:	3301      	adds	r3, #1
 801c09c:	6033      	str	r3, [r6, #0]
 801c09e:	6823      	ldr	r3, [r4, #0]
 801c0a0:	0699      	lsls	r1, r3, #26
 801c0a2:	bf42      	ittt	mi
 801c0a4:	6833      	ldrmi	r3, [r6, #0]
 801c0a6:	3302      	addmi	r3, #2
 801c0a8:	6033      	strmi	r3, [r6, #0]
 801c0aa:	6825      	ldr	r5, [r4, #0]
 801c0ac:	f015 0506 	ands.w	r5, r5, #6
 801c0b0:	d106      	bne.n	801c0c0 <_printf_common+0x48>
 801c0b2:	f104 0a19 	add.w	sl, r4, #25
 801c0b6:	68e3      	ldr	r3, [r4, #12]
 801c0b8:	6832      	ldr	r2, [r6, #0]
 801c0ba:	1a9b      	subs	r3, r3, r2
 801c0bc:	42ab      	cmp	r3, r5
 801c0be:	dc26      	bgt.n	801c10e <_printf_common+0x96>
 801c0c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c0c4:	1e13      	subs	r3, r2, #0
 801c0c6:	6822      	ldr	r2, [r4, #0]
 801c0c8:	bf18      	it	ne
 801c0ca:	2301      	movne	r3, #1
 801c0cc:	0692      	lsls	r2, r2, #26
 801c0ce:	d42b      	bmi.n	801c128 <_printf_common+0xb0>
 801c0d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c0d4:	4649      	mov	r1, r9
 801c0d6:	4638      	mov	r0, r7
 801c0d8:	47c0      	blx	r8
 801c0da:	3001      	adds	r0, #1
 801c0dc:	d01e      	beq.n	801c11c <_printf_common+0xa4>
 801c0de:	6823      	ldr	r3, [r4, #0]
 801c0e0:	68e5      	ldr	r5, [r4, #12]
 801c0e2:	6832      	ldr	r2, [r6, #0]
 801c0e4:	f003 0306 	and.w	r3, r3, #6
 801c0e8:	2b04      	cmp	r3, #4
 801c0ea:	bf08      	it	eq
 801c0ec:	1aad      	subeq	r5, r5, r2
 801c0ee:	68a3      	ldr	r3, [r4, #8]
 801c0f0:	6922      	ldr	r2, [r4, #16]
 801c0f2:	bf0c      	ite	eq
 801c0f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c0f8:	2500      	movne	r5, #0
 801c0fa:	4293      	cmp	r3, r2
 801c0fc:	bfc4      	itt	gt
 801c0fe:	1a9b      	subgt	r3, r3, r2
 801c100:	18ed      	addgt	r5, r5, r3
 801c102:	2600      	movs	r6, #0
 801c104:	341a      	adds	r4, #26
 801c106:	42b5      	cmp	r5, r6
 801c108:	d11a      	bne.n	801c140 <_printf_common+0xc8>
 801c10a:	2000      	movs	r0, #0
 801c10c:	e008      	b.n	801c120 <_printf_common+0xa8>
 801c10e:	2301      	movs	r3, #1
 801c110:	4652      	mov	r2, sl
 801c112:	4649      	mov	r1, r9
 801c114:	4638      	mov	r0, r7
 801c116:	47c0      	blx	r8
 801c118:	3001      	adds	r0, #1
 801c11a:	d103      	bne.n	801c124 <_printf_common+0xac>
 801c11c:	f04f 30ff 	mov.w	r0, #4294967295
 801c120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c124:	3501      	adds	r5, #1
 801c126:	e7c6      	b.n	801c0b6 <_printf_common+0x3e>
 801c128:	18e1      	adds	r1, r4, r3
 801c12a:	1c5a      	adds	r2, r3, #1
 801c12c:	2030      	movs	r0, #48	; 0x30
 801c12e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c132:	4422      	add	r2, r4
 801c134:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c138:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c13c:	3302      	adds	r3, #2
 801c13e:	e7c7      	b.n	801c0d0 <_printf_common+0x58>
 801c140:	2301      	movs	r3, #1
 801c142:	4622      	mov	r2, r4
 801c144:	4649      	mov	r1, r9
 801c146:	4638      	mov	r0, r7
 801c148:	47c0      	blx	r8
 801c14a:	3001      	adds	r0, #1
 801c14c:	d0e6      	beq.n	801c11c <_printf_common+0xa4>
 801c14e:	3601      	adds	r6, #1
 801c150:	e7d9      	b.n	801c106 <_printf_common+0x8e>
	...

0801c154 <_printf_i>:
 801c154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c158:	460c      	mov	r4, r1
 801c15a:	4691      	mov	r9, r2
 801c15c:	7e27      	ldrb	r7, [r4, #24]
 801c15e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c160:	2f78      	cmp	r7, #120	; 0x78
 801c162:	4680      	mov	r8, r0
 801c164:	469a      	mov	sl, r3
 801c166:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c16a:	d807      	bhi.n	801c17c <_printf_i+0x28>
 801c16c:	2f62      	cmp	r7, #98	; 0x62
 801c16e:	d80a      	bhi.n	801c186 <_printf_i+0x32>
 801c170:	2f00      	cmp	r7, #0
 801c172:	f000 80d8 	beq.w	801c326 <_printf_i+0x1d2>
 801c176:	2f58      	cmp	r7, #88	; 0x58
 801c178:	f000 80a3 	beq.w	801c2c2 <_printf_i+0x16e>
 801c17c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c180:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c184:	e03a      	b.n	801c1fc <_printf_i+0xa8>
 801c186:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c18a:	2b15      	cmp	r3, #21
 801c18c:	d8f6      	bhi.n	801c17c <_printf_i+0x28>
 801c18e:	a001      	add	r0, pc, #4	; (adr r0, 801c194 <_printf_i+0x40>)
 801c190:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801c194:	0801c1ed 	.word	0x0801c1ed
 801c198:	0801c201 	.word	0x0801c201
 801c19c:	0801c17d 	.word	0x0801c17d
 801c1a0:	0801c17d 	.word	0x0801c17d
 801c1a4:	0801c17d 	.word	0x0801c17d
 801c1a8:	0801c17d 	.word	0x0801c17d
 801c1ac:	0801c201 	.word	0x0801c201
 801c1b0:	0801c17d 	.word	0x0801c17d
 801c1b4:	0801c17d 	.word	0x0801c17d
 801c1b8:	0801c17d 	.word	0x0801c17d
 801c1bc:	0801c17d 	.word	0x0801c17d
 801c1c0:	0801c30d 	.word	0x0801c30d
 801c1c4:	0801c231 	.word	0x0801c231
 801c1c8:	0801c2ef 	.word	0x0801c2ef
 801c1cc:	0801c17d 	.word	0x0801c17d
 801c1d0:	0801c17d 	.word	0x0801c17d
 801c1d4:	0801c32f 	.word	0x0801c32f
 801c1d8:	0801c17d 	.word	0x0801c17d
 801c1dc:	0801c231 	.word	0x0801c231
 801c1e0:	0801c17d 	.word	0x0801c17d
 801c1e4:	0801c17d 	.word	0x0801c17d
 801c1e8:	0801c2f7 	.word	0x0801c2f7
 801c1ec:	680b      	ldr	r3, [r1, #0]
 801c1ee:	1d1a      	adds	r2, r3, #4
 801c1f0:	681b      	ldr	r3, [r3, #0]
 801c1f2:	600a      	str	r2, [r1, #0]
 801c1f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c1f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c1fc:	2301      	movs	r3, #1
 801c1fe:	e0a3      	b.n	801c348 <_printf_i+0x1f4>
 801c200:	6825      	ldr	r5, [r4, #0]
 801c202:	6808      	ldr	r0, [r1, #0]
 801c204:	062e      	lsls	r6, r5, #24
 801c206:	f100 0304 	add.w	r3, r0, #4
 801c20a:	d50a      	bpl.n	801c222 <_printf_i+0xce>
 801c20c:	6805      	ldr	r5, [r0, #0]
 801c20e:	600b      	str	r3, [r1, #0]
 801c210:	2d00      	cmp	r5, #0
 801c212:	da03      	bge.n	801c21c <_printf_i+0xc8>
 801c214:	232d      	movs	r3, #45	; 0x2d
 801c216:	426d      	negs	r5, r5
 801c218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c21c:	485e      	ldr	r0, [pc, #376]	; (801c398 <_printf_i+0x244>)
 801c21e:	230a      	movs	r3, #10
 801c220:	e019      	b.n	801c256 <_printf_i+0x102>
 801c222:	f015 0f40 	tst.w	r5, #64	; 0x40
 801c226:	6805      	ldr	r5, [r0, #0]
 801c228:	600b      	str	r3, [r1, #0]
 801c22a:	bf18      	it	ne
 801c22c:	b22d      	sxthne	r5, r5
 801c22e:	e7ef      	b.n	801c210 <_printf_i+0xbc>
 801c230:	680b      	ldr	r3, [r1, #0]
 801c232:	6825      	ldr	r5, [r4, #0]
 801c234:	1d18      	adds	r0, r3, #4
 801c236:	6008      	str	r0, [r1, #0]
 801c238:	0628      	lsls	r0, r5, #24
 801c23a:	d501      	bpl.n	801c240 <_printf_i+0xec>
 801c23c:	681d      	ldr	r5, [r3, #0]
 801c23e:	e002      	b.n	801c246 <_printf_i+0xf2>
 801c240:	0669      	lsls	r1, r5, #25
 801c242:	d5fb      	bpl.n	801c23c <_printf_i+0xe8>
 801c244:	881d      	ldrh	r5, [r3, #0]
 801c246:	4854      	ldr	r0, [pc, #336]	; (801c398 <_printf_i+0x244>)
 801c248:	2f6f      	cmp	r7, #111	; 0x6f
 801c24a:	bf0c      	ite	eq
 801c24c:	2308      	moveq	r3, #8
 801c24e:	230a      	movne	r3, #10
 801c250:	2100      	movs	r1, #0
 801c252:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c256:	6866      	ldr	r6, [r4, #4]
 801c258:	60a6      	str	r6, [r4, #8]
 801c25a:	2e00      	cmp	r6, #0
 801c25c:	bfa2      	ittt	ge
 801c25e:	6821      	ldrge	r1, [r4, #0]
 801c260:	f021 0104 	bicge.w	r1, r1, #4
 801c264:	6021      	strge	r1, [r4, #0]
 801c266:	b90d      	cbnz	r5, 801c26c <_printf_i+0x118>
 801c268:	2e00      	cmp	r6, #0
 801c26a:	d04d      	beq.n	801c308 <_printf_i+0x1b4>
 801c26c:	4616      	mov	r6, r2
 801c26e:	fbb5 f1f3 	udiv	r1, r5, r3
 801c272:	fb03 5711 	mls	r7, r3, r1, r5
 801c276:	5dc7      	ldrb	r7, [r0, r7]
 801c278:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c27c:	462f      	mov	r7, r5
 801c27e:	42bb      	cmp	r3, r7
 801c280:	460d      	mov	r5, r1
 801c282:	d9f4      	bls.n	801c26e <_printf_i+0x11a>
 801c284:	2b08      	cmp	r3, #8
 801c286:	d10b      	bne.n	801c2a0 <_printf_i+0x14c>
 801c288:	6823      	ldr	r3, [r4, #0]
 801c28a:	07df      	lsls	r7, r3, #31
 801c28c:	d508      	bpl.n	801c2a0 <_printf_i+0x14c>
 801c28e:	6923      	ldr	r3, [r4, #16]
 801c290:	6861      	ldr	r1, [r4, #4]
 801c292:	4299      	cmp	r1, r3
 801c294:	bfde      	ittt	le
 801c296:	2330      	movle	r3, #48	; 0x30
 801c298:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c29c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c2a0:	1b92      	subs	r2, r2, r6
 801c2a2:	6122      	str	r2, [r4, #16]
 801c2a4:	f8cd a000 	str.w	sl, [sp]
 801c2a8:	464b      	mov	r3, r9
 801c2aa:	aa03      	add	r2, sp, #12
 801c2ac:	4621      	mov	r1, r4
 801c2ae:	4640      	mov	r0, r8
 801c2b0:	f7ff fee2 	bl	801c078 <_printf_common>
 801c2b4:	3001      	adds	r0, #1
 801c2b6:	d14c      	bne.n	801c352 <_printf_i+0x1fe>
 801c2b8:	f04f 30ff 	mov.w	r0, #4294967295
 801c2bc:	b004      	add	sp, #16
 801c2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c2c2:	4835      	ldr	r0, [pc, #212]	; (801c398 <_printf_i+0x244>)
 801c2c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c2c8:	6823      	ldr	r3, [r4, #0]
 801c2ca:	680e      	ldr	r6, [r1, #0]
 801c2cc:	061f      	lsls	r7, r3, #24
 801c2ce:	f856 5b04 	ldr.w	r5, [r6], #4
 801c2d2:	600e      	str	r6, [r1, #0]
 801c2d4:	d514      	bpl.n	801c300 <_printf_i+0x1ac>
 801c2d6:	07d9      	lsls	r1, r3, #31
 801c2d8:	bf44      	itt	mi
 801c2da:	f043 0320 	orrmi.w	r3, r3, #32
 801c2de:	6023      	strmi	r3, [r4, #0]
 801c2e0:	b91d      	cbnz	r5, 801c2ea <_printf_i+0x196>
 801c2e2:	6823      	ldr	r3, [r4, #0]
 801c2e4:	f023 0320 	bic.w	r3, r3, #32
 801c2e8:	6023      	str	r3, [r4, #0]
 801c2ea:	2310      	movs	r3, #16
 801c2ec:	e7b0      	b.n	801c250 <_printf_i+0xfc>
 801c2ee:	6823      	ldr	r3, [r4, #0]
 801c2f0:	f043 0320 	orr.w	r3, r3, #32
 801c2f4:	6023      	str	r3, [r4, #0]
 801c2f6:	2378      	movs	r3, #120	; 0x78
 801c2f8:	4828      	ldr	r0, [pc, #160]	; (801c39c <_printf_i+0x248>)
 801c2fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c2fe:	e7e3      	b.n	801c2c8 <_printf_i+0x174>
 801c300:	065e      	lsls	r6, r3, #25
 801c302:	bf48      	it	mi
 801c304:	b2ad      	uxthmi	r5, r5
 801c306:	e7e6      	b.n	801c2d6 <_printf_i+0x182>
 801c308:	4616      	mov	r6, r2
 801c30a:	e7bb      	b.n	801c284 <_printf_i+0x130>
 801c30c:	680b      	ldr	r3, [r1, #0]
 801c30e:	6826      	ldr	r6, [r4, #0]
 801c310:	6960      	ldr	r0, [r4, #20]
 801c312:	1d1d      	adds	r5, r3, #4
 801c314:	600d      	str	r5, [r1, #0]
 801c316:	0635      	lsls	r5, r6, #24
 801c318:	681b      	ldr	r3, [r3, #0]
 801c31a:	d501      	bpl.n	801c320 <_printf_i+0x1cc>
 801c31c:	6018      	str	r0, [r3, #0]
 801c31e:	e002      	b.n	801c326 <_printf_i+0x1d2>
 801c320:	0671      	lsls	r1, r6, #25
 801c322:	d5fb      	bpl.n	801c31c <_printf_i+0x1c8>
 801c324:	8018      	strh	r0, [r3, #0]
 801c326:	2300      	movs	r3, #0
 801c328:	6123      	str	r3, [r4, #16]
 801c32a:	4616      	mov	r6, r2
 801c32c:	e7ba      	b.n	801c2a4 <_printf_i+0x150>
 801c32e:	680b      	ldr	r3, [r1, #0]
 801c330:	1d1a      	adds	r2, r3, #4
 801c332:	600a      	str	r2, [r1, #0]
 801c334:	681e      	ldr	r6, [r3, #0]
 801c336:	6862      	ldr	r2, [r4, #4]
 801c338:	2100      	movs	r1, #0
 801c33a:	4630      	mov	r0, r6
 801c33c:	f7ef fe88 	bl	800c050 <memchr>
 801c340:	b108      	cbz	r0, 801c346 <_printf_i+0x1f2>
 801c342:	1b80      	subs	r0, r0, r6
 801c344:	6060      	str	r0, [r4, #4]
 801c346:	6863      	ldr	r3, [r4, #4]
 801c348:	6123      	str	r3, [r4, #16]
 801c34a:	2300      	movs	r3, #0
 801c34c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c350:	e7a8      	b.n	801c2a4 <_printf_i+0x150>
 801c352:	6923      	ldr	r3, [r4, #16]
 801c354:	4632      	mov	r2, r6
 801c356:	4649      	mov	r1, r9
 801c358:	4640      	mov	r0, r8
 801c35a:	47d0      	blx	sl
 801c35c:	3001      	adds	r0, #1
 801c35e:	d0ab      	beq.n	801c2b8 <_printf_i+0x164>
 801c360:	6823      	ldr	r3, [r4, #0]
 801c362:	079b      	lsls	r3, r3, #30
 801c364:	d413      	bmi.n	801c38e <_printf_i+0x23a>
 801c366:	68e0      	ldr	r0, [r4, #12]
 801c368:	9b03      	ldr	r3, [sp, #12]
 801c36a:	4298      	cmp	r0, r3
 801c36c:	bfb8      	it	lt
 801c36e:	4618      	movlt	r0, r3
 801c370:	e7a4      	b.n	801c2bc <_printf_i+0x168>
 801c372:	2301      	movs	r3, #1
 801c374:	4632      	mov	r2, r6
 801c376:	4649      	mov	r1, r9
 801c378:	4640      	mov	r0, r8
 801c37a:	47d0      	blx	sl
 801c37c:	3001      	adds	r0, #1
 801c37e:	d09b      	beq.n	801c2b8 <_printf_i+0x164>
 801c380:	3501      	adds	r5, #1
 801c382:	68e3      	ldr	r3, [r4, #12]
 801c384:	9903      	ldr	r1, [sp, #12]
 801c386:	1a5b      	subs	r3, r3, r1
 801c388:	42ab      	cmp	r3, r5
 801c38a:	dcf2      	bgt.n	801c372 <_printf_i+0x21e>
 801c38c:	e7eb      	b.n	801c366 <_printf_i+0x212>
 801c38e:	2500      	movs	r5, #0
 801c390:	f104 0619 	add.w	r6, r4, #25
 801c394:	e7f5      	b.n	801c382 <_printf_i+0x22e>
 801c396:	bf00      	nop
 801c398:	0801d0be 	.word	0x0801d0be
 801c39c:	0801d0cf 	.word	0x0801d0cf

0801c3a0 <memmove>:
 801c3a0:	4288      	cmp	r0, r1
 801c3a2:	b510      	push	{r4, lr}
 801c3a4:	eb01 0402 	add.w	r4, r1, r2
 801c3a8:	d902      	bls.n	801c3b0 <memmove+0x10>
 801c3aa:	4284      	cmp	r4, r0
 801c3ac:	4623      	mov	r3, r4
 801c3ae:	d807      	bhi.n	801c3c0 <memmove+0x20>
 801c3b0:	1e43      	subs	r3, r0, #1
 801c3b2:	42a1      	cmp	r1, r4
 801c3b4:	d008      	beq.n	801c3c8 <memmove+0x28>
 801c3b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c3ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c3be:	e7f8      	b.n	801c3b2 <memmove+0x12>
 801c3c0:	4402      	add	r2, r0
 801c3c2:	4601      	mov	r1, r0
 801c3c4:	428a      	cmp	r2, r1
 801c3c6:	d100      	bne.n	801c3ca <memmove+0x2a>
 801c3c8:	bd10      	pop	{r4, pc}
 801c3ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c3ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c3d2:	e7f7      	b.n	801c3c4 <memmove+0x24>

0801c3d4 <_free_r>:
 801c3d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c3d6:	2900      	cmp	r1, #0
 801c3d8:	d048      	beq.n	801c46c <_free_r+0x98>
 801c3da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c3de:	9001      	str	r0, [sp, #4]
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	f1a1 0404 	sub.w	r4, r1, #4
 801c3e6:	bfb8      	it	lt
 801c3e8:	18e4      	addlt	r4, r4, r3
 801c3ea:	f000 f8d3 	bl	801c594 <__malloc_lock>
 801c3ee:	4a20      	ldr	r2, [pc, #128]	; (801c470 <_free_r+0x9c>)
 801c3f0:	9801      	ldr	r0, [sp, #4]
 801c3f2:	6813      	ldr	r3, [r2, #0]
 801c3f4:	4615      	mov	r5, r2
 801c3f6:	b933      	cbnz	r3, 801c406 <_free_r+0x32>
 801c3f8:	6063      	str	r3, [r4, #4]
 801c3fa:	6014      	str	r4, [r2, #0]
 801c3fc:	b003      	add	sp, #12
 801c3fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c402:	f000 b8cd 	b.w	801c5a0 <__malloc_unlock>
 801c406:	42a3      	cmp	r3, r4
 801c408:	d90b      	bls.n	801c422 <_free_r+0x4e>
 801c40a:	6821      	ldr	r1, [r4, #0]
 801c40c:	1862      	adds	r2, r4, r1
 801c40e:	4293      	cmp	r3, r2
 801c410:	bf04      	itt	eq
 801c412:	681a      	ldreq	r2, [r3, #0]
 801c414:	685b      	ldreq	r3, [r3, #4]
 801c416:	6063      	str	r3, [r4, #4]
 801c418:	bf04      	itt	eq
 801c41a:	1852      	addeq	r2, r2, r1
 801c41c:	6022      	streq	r2, [r4, #0]
 801c41e:	602c      	str	r4, [r5, #0]
 801c420:	e7ec      	b.n	801c3fc <_free_r+0x28>
 801c422:	461a      	mov	r2, r3
 801c424:	685b      	ldr	r3, [r3, #4]
 801c426:	b10b      	cbz	r3, 801c42c <_free_r+0x58>
 801c428:	42a3      	cmp	r3, r4
 801c42a:	d9fa      	bls.n	801c422 <_free_r+0x4e>
 801c42c:	6811      	ldr	r1, [r2, #0]
 801c42e:	1855      	adds	r5, r2, r1
 801c430:	42a5      	cmp	r5, r4
 801c432:	d10b      	bne.n	801c44c <_free_r+0x78>
 801c434:	6824      	ldr	r4, [r4, #0]
 801c436:	4421      	add	r1, r4
 801c438:	1854      	adds	r4, r2, r1
 801c43a:	42a3      	cmp	r3, r4
 801c43c:	6011      	str	r1, [r2, #0]
 801c43e:	d1dd      	bne.n	801c3fc <_free_r+0x28>
 801c440:	681c      	ldr	r4, [r3, #0]
 801c442:	685b      	ldr	r3, [r3, #4]
 801c444:	6053      	str	r3, [r2, #4]
 801c446:	4421      	add	r1, r4
 801c448:	6011      	str	r1, [r2, #0]
 801c44a:	e7d7      	b.n	801c3fc <_free_r+0x28>
 801c44c:	d902      	bls.n	801c454 <_free_r+0x80>
 801c44e:	230c      	movs	r3, #12
 801c450:	6003      	str	r3, [r0, #0]
 801c452:	e7d3      	b.n	801c3fc <_free_r+0x28>
 801c454:	6825      	ldr	r5, [r4, #0]
 801c456:	1961      	adds	r1, r4, r5
 801c458:	428b      	cmp	r3, r1
 801c45a:	bf04      	itt	eq
 801c45c:	6819      	ldreq	r1, [r3, #0]
 801c45e:	685b      	ldreq	r3, [r3, #4]
 801c460:	6063      	str	r3, [r4, #4]
 801c462:	bf04      	itt	eq
 801c464:	1949      	addeq	r1, r1, r5
 801c466:	6021      	streq	r1, [r4, #0]
 801c468:	6054      	str	r4, [r2, #4]
 801c46a:	e7c7      	b.n	801c3fc <_free_r+0x28>
 801c46c:	b003      	add	sp, #12
 801c46e:	bd30      	pop	{r4, r5, pc}
 801c470:	20005174 	.word	0x20005174

0801c474 <_malloc_r>:
 801c474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c476:	1ccd      	adds	r5, r1, #3
 801c478:	f025 0503 	bic.w	r5, r5, #3
 801c47c:	3508      	adds	r5, #8
 801c47e:	2d0c      	cmp	r5, #12
 801c480:	bf38      	it	cc
 801c482:	250c      	movcc	r5, #12
 801c484:	2d00      	cmp	r5, #0
 801c486:	4606      	mov	r6, r0
 801c488:	db01      	blt.n	801c48e <_malloc_r+0x1a>
 801c48a:	42a9      	cmp	r1, r5
 801c48c:	d903      	bls.n	801c496 <_malloc_r+0x22>
 801c48e:	230c      	movs	r3, #12
 801c490:	6033      	str	r3, [r6, #0]
 801c492:	2000      	movs	r0, #0
 801c494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c496:	f000 f87d 	bl	801c594 <__malloc_lock>
 801c49a:	4921      	ldr	r1, [pc, #132]	; (801c520 <_malloc_r+0xac>)
 801c49c:	680a      	ldr	r2, [r1, #0]
 801c49e:	4614      	mov	r4, r2
 801c4a0:	b99c      	cbnz	r4, 801c4ca <_malloc_r+0x56>
 801c4a2:	4f20      	ldr	r7, [pc, #128]	; (801c524 <_malloc_r+0xb0>)
 801c4a4:	683b      	ldr	r3, [r7, #0]
 801c4a6:	b923      	cbnz	r3, 801c4b2 <_malloc_r+0x3e>
 801c4a8:	4621      	mov	r1, r4
 801c4aa:	4630      	mov	r0, r6
 801c4ac:	f000 f862 	bl	801c574 <_sbrk_r>
 801c4b0:	6038      	str	r0, [r7, #0]
 801c4b2:	4629      	mov	r1, r5
 801c4b4:	4630      	mov	r0, r6
 801c4b6:	f000 f85d 	bl	801c574 <_sbrk_r>
 801c4ba:	1c43      	adds	r3, r0, #1
 801c4bc:	d123      	bne.n	801c506 <_malloc_r+0x92>
 801c4be:	230c      	movs	r3, #12
 801c4c0:	6033      	str	r3, [r6, #0]
 801c4c2:	4630      	mov	r0, r6
 801c4c4:	f000 f86c 	bl	801c5a0 <__malloc_unlock>
 801c4c8:	e7e3      	b.n	801c492 <_malloc_r+0x1e>
 801c4ca:	6823      	ldr	r3, [r4, #0]
 801c4cc:	1b5b      	subs	r3, r3, r5
 801c4ce:	d417      	bmi.n	801c500 <_malloc_r+0x8c>
 801c4d0:	2b0b      	cmp	r3, #11
 801c4d2:	d903      	bls.n	801c4dc <_malloc_r+0x68>
 801c4d4:	6023      	str	r3, [r4, #0]
 801c4d6:	441c      	add	r4, r3
 801c4d8:	6025      	str	r5, [r4, #0]
 801c4da:	e004      	b.n	801c4e6 <_malloc_r+0x72>
 801c4dc:	6863      	ldr	r3, [r4, #4]
 801c4de:	42a2      	cmp	r2, r4
 801c4e0:	bf0c      	ite	eq
 801c4e2:	600b      	streq	r3, [r1, #0]
 801c4e4:	6053      	strne	r3, [r2, #4]
 801c4e6:	4630      	mov	r0, r6
 801c4e8:	f000 f85a 	bl	801c5a0 <__malloc_unlock>
 801c4ec:	f104 000b 	add.w	r0, r4, #11
 801c4f0:	1d23      	adds	r3, r4, #4
 801c4f2:	f020 0007 	bic.w	r0, r0, #7
 801c4f6:	1ac2      	subs	r2, r0, r3
 801c4f8:	d0cc      	beq.n	801c494 <_malloc_r+0x20>
 801c4fa:	1a1b      	subs	r3, r3, r0
 801c4fc:	50a3      	str	r3, [r4, r2]
 801c4fe:	e7c9      	b.n	801c494 <_malloc_r+0x20>
 801c500:	4622      	mov	r2, r4
 801c502:	6864      	ldr	r4, [r4, #4]
 801c504:	e7cc      	b.n	801c4a0 <_malloc_r+0x2c>
 801c506:	1cc4      	adds	r4, r0, #3
 801c508:	f024 0403 	bic.w	r4, r4, #3
 801c50c:	42a0      	cmp	r0, r4
 801c50e:	d0e3      	beq.n	801c4d8 <_malloc_r+0x64>
 801c510:	1a21      	subs	r1, r4, r0
 801c512:	4630      	mov	r0, r6
 801c514:	f000 f82e 	bl	801c574 <_sbrk_r>
 801c518:	3001      	adds	r0, #1
 801c51a:	d1dd      	bne.n	801c4d8 <_malloc_r+0x64>
 801c51c:	e7cf      	b.n	801c4be <_malloc_r+0x4a>
 801c51e:	bf00      	nop
 801c520:	20005174 	.word	0x20005174
 801c524:	20005178 	.word	0x20005178

0801c528 <_realloc_r>:
 801c528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c52a:	4607      	mov	r7, r0
 801c52c:	4614      	mov	r4, r2
 801c52e:	460e      	mov	r6, r1
 801c530:	b921      	cbnz	r1, 801c53c <_realloc_r+0x14>
 801c532:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c536:	4611      	mov	r1, r2
 801c538:	f7ff bf9c 	b.w	801c474 <_malloc_r>
 801c53c:	b922      	cbnz	r2, 801c548 <_realloc_r+0x20>
 801c53e:	f7ff ff49 	bl	801c3d4 <_free_r>
 801c542:	4625      	mov	r5, r4
 801c544:	4628      	mov	r0, r5
 801c546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c548:	f000 f830 	bl	801c5ac <_malloc_usable_size_r>
 801c54c:	42a0      	cmp	r0, r4
 801c54e:	d20f      	bcs.n	801c570 <_realloc_r+0x48>
 801c550:	4621      	mov	r1, r4
 801c552:	4638      	mov	r0, r7
 801c554:	f7ff ff8e 	bl	801c474 <_malloc_r>
 801c558:	4605      	mov	r5, r0
 801c55a:	2800      	cmp	r0, #0
 801c55c:	d0f2      	beq.n	801c544 <_realloc_r+0x1c>
 801c55e:	4631      	mov	r1, r6
 801c560:	4622      	mov	r2, r4
 801c562:	f7ff fa1f 	bl	801b9a4 <memcpy>
 801c566:	4631      	mov	r1, r6
 801c568:	4638      	mov	r0, r7
 801c56a:	f7ff ff33 	bl	801c3d4 <_free_r>
 801c56e:	e7e9      	b.n	801c544 <_realloc_r+0x1c>
 801c570:	4635      	mov	r5, r6
 801c572:	e7e7      	b.n	801c544 <_realloc_r+0x1c>

0801c574 <_sbrk_r>:
 801c574:	b538      	push	{r3, r4, r5, lr}
 801c576:	4d06      	ldr	r5, [pc, #24]	; (801c590 <_sbrk_r+0x1c>)
 801c578:	2300      	movs	r3, #0
 801c57a:	4604      	mov	r4, r0
 801c57c:	4608      	mov	r0, r1
 801c57e:	602b      	str	r3, [r5, #0]
 801c580:	f7f2 f92a 	bl	800e7d8 <_sbrk>
 801c584:	1c43      	adds	r3, r0, #1
 801c586:	d102      	bne.n	801c58e <_sbrk_r+0x1a>
 801c588:	682b      	ldr	r3, [r5, #0]
 801c58a:	b103      	cbz	r3, 801c58e <_sbrk_r+0x1a>
 801c58c:	6023      	str	r3, [r4, #0]
 801c58e:	bd38      	pop	{r3, r4, r5, pc}
 801c590:	200080f8 	.word	0x200080f8

0801c594 <__malloc_lock>:
 801c594:	4801      	ldr	r0, [pc, #4]	; (801c59c <__malloc_lock+0x8>)
 801c596:	f000 b811 	b.w	801c5bc <__retarget_lock_acquire_recursive>
 801c59a:	bf00      	nop
 801c59c:	20008100 	.word	0x20008100

0801c5a0 <__malloc_unlock>:
 801c5a0:	4801      	ldr	r0, [pc, #4]	; (801c5a8 <__malloc_unlock+0x8>)
 801c5a2:	f000 b80c 	b.w	801c5be <__retarget_lock_release_recursive>
 801c5a6:	bf00      	nop
 801c5a8:	20008100 	.word	0x20008100

0801c5ac <_malloc_usable_size_r>:
 801c5ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c5b0:	1f18      	subs	r0, r3, #4
 801c5b2:	2b00      	cmp	r3, #0
 801c5b4:	bfbc      	itt	lt
 801c5b6:	580b      	ldrlt	r3, [r1, r0]
 801c5b8:	18c0      	addlt	r0, r0, r3
 801c5ba:	4770      	bx	lr

0801c5bc <__retarget_lock_acquire_recursive>:
 801c5bc:	4770      	bx	lr

0801c5be <__retarget_lock_release_recursive>:
 801c5be:	4770      	bx	lr

0801c5c0 <_init>:
 801c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5c2:	bf00      	nop
 801c5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c5c6:	bc08      	pop	{r3}
 801c5c8:	469e      	mov	lr, r3
 801c5ca:	4770      	bx	lr

0801c5cc <_fini>:
 801c5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5ce:	bf00      	nop
 801c5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c5d2:	bc08      	pop	{r3}
 801c5d4:	469e      	mov	lr, r3
 801c5d6:	4770      	bx	lr
